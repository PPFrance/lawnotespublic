cts_ = "WwogICAgIkNhc2UiLAogICAgIkNhc2UgT3ZlcnZpZXdzIiwKICAgICJDb25jZXB0IiwKICAgICJFeGFtIEFkdmljZSIsCiAgICAiSGVscCIKXQ=="; 

crt_ = "WwogICAgIkVXQ0EiLAogICAgIkVXSEMiLAogICAgIk5TVyBDQSIsCiAgICAiUEMiLAogICAgIlVLSEwiLAogICAgIlVLUEMiLAogICAgIlVLUEMgKE5aKSIsCiAgICAiVUtTQyIKXQ=="; 

cnc_ = "WwogICAgIkFkdmFuY2VtZW50IG9mIEVkdWNhdGlvbiIsCiAgICAiQWR2YW5jZW1lbnQgb2YgUmVsaWdpb24iLAogICAgIkNlcnRhaW50eSBvZiBJbnRlbnRpb24iLAogICAgIkNlcnRhaW50eSBvZiBTdWJqZWN0IiwKICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICJDaGFyaXRpZXMiLAogICAgIkNoYXJpdHkgLSBEZWZpbml0aW9ucyIsCiAgICAiQ2hhcml0eSBDb21taXNzaW9uZXIncyBHdWlkYW5jZSAtIFNlcHRlbWJlciAyMDEzIiwKICAgICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzIC0gQXNzaXN0YW5jZSBmb3IgVm9sdW50ZWVycyIsCiAgICAiRGlzaG9uZXN0IEFzc2lzdGFuY2UiLAogICAgIkRpc2hvbmVzdHkgZm9yIERpc2hvbmVzdCBBc3Npc3RhbmNlIiwKICAgICJEaXNwb3NpdGlvbiBvZiBFcXVpdGFibGUgSW50ZXJlc3RzIiwKICAgICJFcXVpdHkgdGVtcGVycyB0aGUgd2luZCB0byB0aGUgU2hvcm4gTGFtYiIsCiAgICAiRXF1aXR5IHdpbGwgbm90IEFzc2lzdCBhIFZvbHVudGVlciIsCiAgICAiRXF1aXR5IHdpbGwgbm90IGFsbG93IGEgU3RhdHV0ZSB0byBiZSBhbiBDbG9hayBmb3IgRnJhdWQiLAogICAgIkZhaXItRGVhbGluZyIsCiAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAiRm9ybWFsaXRpZXMgZm9yIEludGVyIFZpdm9zIEV4cHJlc3MgVHJ1c3RzIiwKICAgICJGb3JtYWxpdGllcyBmb3IgVGVzdGFtZW50YXJ5IFRydXN0cyIsCiAgICAiSW5jb21wbGV0ZSBDb25zdGl0dXRpb24gYW5kIEZhaWxlZCBHaWZ0cyIsCiAgICAiS25vd2luZyBSZWNlaXB0IiwKICAgICJLbm93aW5nIFJlY2VpcHQgLSBLbm93bGVkZ2UiLAogICAgIk5vIFByb2ZpdCBSdWxlIiwKICAgICJPdGhlciBDaGFyaXRhYmxlIFB1cnBvc2VzIHVuZGVyIENoYXJpdGllcyBBY3QgMjAxMSIsCiAgICAiUG9saXRpY2FsIFB1cnBvc2Ugb2YgYSBDaGFyaXR5IiwKICAgICJQcmVjYXRvcnkgV29yZHMiLAogICAgIlByZXZlbnRpb24gb3IgUmVsaWVmIG9mIFBvdmVydHkiLAogICAgIlByaXZhdGUgRXhwcmVzcyBUcnVzdHMiLAogICAgIlF1aXN0Y2xvc2UgVHJ1c3RzIiwKICAgICJRdWlzdGNsb3NlIFRydXN0cyAtIEFuYWx5c2lzIiwKICAgICJSZW1lZGllcyBmb3IgVW5hdXRob3Jpc2VkIFByb2ZpdHMiLAogICAgIlNlY3JldCBUcnVzdHMiLAogICAgIlNlY3JldCBUcnVzdHMgLSBUaGVvcnkiLAogICAgIlNlbGYtRGVhbGluZyIsCiAgICAiVGhlIEN5LXByXHUwMGU4cyBEb2N0cmluZSIsCiAgICAiVGhpcmQgUGFydHkgTGlhYmlsaXR5IiwKICAgICJVbmF1dGhvcmlzZWQgUHJvZml0cyAtIEJyaWJlcyIsCiAgICAiVW5hdXRob3Jpc2VkIFByb2ZpdHMgLSBDb3Jwb3JhdGUgT3Bwb3J0dW5pdHkiCl0="; 

cgs_ = "WwogICAgIkFkdmFuY2VtZW50IiwKICAgICJBbWF0ZXVyIFNwb3J0IiwKICAgICJBbmltYWwgV2VsZmFyZSIsCiAgICAiQmVuZWZpY2lhbCBSZWNlaXB0IGJ5IENyZWRpdG9yIiwKICAgICJCb2lsZXJwbGF0ZSIsCiAgICAiQnJpYmVzIiwKICAgICJDYXRlZ29yaWVzIG9mIFJlbGF0aW9uc2hpcHMiLAogICAgIkNlcnRhaW50eSBvZiBJbnRlbnRpb24iLAogICAgIkNlcnRhaW50eSBvZiBPYmplY3QiLAogICAgIkNlcnRhaW50eSBvZiBTdWJqZWN0IiwKICAgICJDaGFuZ2Ugb2YgUG9zaXRpb24iLAogICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgIkNoYXJpdGllcyIsCiAgICAiQ2hhcml0eSBDb21taXNzaW9uIiwKICAgICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzIiwKICAgICJDb3Jwb3JhdGUgT3Bwb3J0dW5pdHkiLAogICAgIkN1bHR1cmUiLAogICAgIkN5LXByXHUwMGU4cyIsCiAgICAiRGVmZW5jZXMiLAogICAgIkRlaG9ycyB0aGUgV2lsbCIsCiAgICAiRGlzaG9uZXN0IEFzc2lzdGFuY2UiLAogICAgIkRpc3Bvc2l0aW9ucyBvZiBFcXVpdGFibGUgSW50ZXJlc3RzIiwKICAgICJFZHVjYXRpb24iLAogICAgIkVmZmljaWVuY3kgb2YgQXJtZWQgRm9yY2VzIiwKICAgICJFbmQgb2YgRmlkdWNpYXJ5IER1dHkiLAogICAgIkVxdWl0YWJsZSBNYXhpbXMiLAogICAgIkVxdWl0eSIsCiAgICAiRXhjZXB0aW9uIiwKICAgICJGYWlyLURlYWxpbmciLAogICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgIkZsZXRjaGVyIENhc2VzIiwKICAgICJGb3JtYWxpdGllcyIsCiAgICAiRnVsbHkgU2VjcmV0IFRydXN0cyIsCiAgICAiSGFsZiBTZWNyZXQgVHJ1c3RzIiwKICAgICJIZWFsdGggYW5kIFNhdmluZyBMaXZlcyIsCiAgICAiSHVtYW4gUmlnaHRzIGV0YyIsCiAgICAiSWRlbnRpZmljYXRpb24gb2YgVHJ1c3QgUHJvcGVydHkiLAogICAgIkluY29tcGxldGVuZXNzIiwKICAgICJJbml0aWFsIEZhaWx1cmUiLAogICAgIkludGFuZ2libGUgUHJvcGVydHkiLAogICAgIkludmFsaWQgQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAiSnVyaXNkaWN0aW9uIG92ZXIgQmVuZWZpY2lhcmllcyIsCiAgICAiS25vd2luZyBSZWNlaXB0IiwKICAgICJNZWFuaW5nIG9mIEtub3dsZWRnZSIsCiAgICAiTm8gQ29uZmxpY3QgUnVsZSIsCiAgICAiTm8gUHJvZml0IFJ1bGUiLAogICAgIlBvbGl0aWNhbCBQdXJwb3NlIiwKICAgICJQb2xpdGljcyIsCiAgICAiUG92ZXJ0eSIsCiAgICAiUHJlY2F0b3J5IFdvcmRzIiwKICAgICJQcm9wcmlldGFyeSBSZW1lZGllcyIsCiAgICAiUHVycG9zZXMiLAogICAgIlF1aXN0Y2xvc2UgVHJ1c3RzIiwKICAgICJSZWxpZWYgb2YgdGhvc2UgaW4gTmVlZCIsCiAgICAiUmVsaWdpb24iLAogICAgIlJlbWVkaWVzIiwKICAgICJSZW11bmVyYXRpb24gb2YgVHJ1c3RlZXMiLAogICAgIlJ1bGUgaW4gU3Ryb25nIHYgQmlyZCIsCiAgICAiU2VjcmV0IFRydXN0cyIsCiAgICAiU2VncmVnYXRpb24gb2YgQ2hhdHRlbHMiLAogICAgIlNlbGYtRGVhbGluZyIsCiAgICAiU3Vic2VxdWVudCBGYWlsdXJlIiwKICAgICJTdWJ0cnVzdHMiLAogICAgIlRoZSB3b3JkICdUcnVzdCciLAogICAgIlRoaXJkIFBhcnR5IExpYWJpbGl0eSIsCiAgICAiVGhyZWUgQ2VydGFpbnRpZXMiLAogICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIiwKICAgICJVbmNvbnNjaW9uYWJpbGl0eSIKXQ=="; 

pfl_ = "WwogICAgIjIwMTUvMjAxNiEiLAogICAgIkNyaXRpY2lzZWQiLAogICAgIkRlZmluaXRpb25zIiwKICAgICJEZW5uaW5nIiwKICAgICJGdW5kYW1lbnRhbCIsCiAgICAiSGlzdG9yaWNhbCIsCiAgICAiSW1wb3J0YW50IiwKICAgICJLZXkiLAogICAgIkxlYWRpbmciLAogICAgIk1lZ2FycnkiLAogICAgIk5ldWJlcmdlciIsCiAgICAiUGVyc3Vhc2l2ZSIsCiAgICAiUGV0ZXIgR2lic29uIiwKICAgICJSZWNlbnQiCl0="; 

ntn_ = '';

currentTexture = 'img/textures/light-paper-fibres.png';

enableClaireAndCarranMode = true;

subject = 'equity';

defcols = '4';

darktheme = true;

enableTests = true;

cds_ = "IFsgewogICAgIkNBVEVHT1JZIjogIkNpdHkgR0RMIEVxdWl0eSBhbmQgVHJ1c3RzIEZsYXNoY2FyZHMiLAogICAgIk5VTUJFUiI6ICIwIiwKICAgICJUWVBFIjogIkhlbHAiLAogICAgIk1FVEEtU09SVElORy1GT1ItQUxMLUJVVC1GSVJTVC1MRVZFTCI6ICIiLAogICAgIk5BTUUiOiAiRXF1aXR5ICYgVHJ1c3RzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaXR5IEdETCBFcXVpdHkgYW5kIFRydXN0cyBGbGFzaGNhcmRzIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiMjAxNS8yMDE2ISIKICAgIF0sCiAgICAiU1BFQ0lBTCI6ICI8c3BhbiBjbGFzcz1cImJkXCI+SGVsbG8hPC9zcGFuPjxicj5UaGlzIGlzIGEgY29sbGVjdGlvbiBvZiBmbGFzaGNhcmRzIGZvciB0aGUgQ2l0eSBHREwuIEl0IGNvbnRhaW5zIGF0dGVtcHRzIHRvIGV4cGxhaW4gPHNwYW4gY2xhc3M9XCJsbmsgdHlwbG5cIj5Db25jZXB0PC9zcGFuPjxzcGFuIGNsYXNzPVwiaXRcIj5zPC9zcGFuPiwgY2FyZHMgY29udGFpbmluZyA8c3BhbiBjbGFzcz1cImxuayB0eXBsblwiPkNhc2UgT3ZlcnZpZXdzPC9zcGFuPiBmb3IgYSBnaXZlbiB0b3BpYywgY29udGFpbmluZyA8c3BhbiBjbGFzcz1cImxuayB0eXBsblwiPlN0YXR1dGU8L3NwYW4+PHNwYW4gY2xhc3M9XCJpdFwiPnM8L3NwYW4+LCBhbmQgbWFraW5nIHVwIHRoZSBidWxrIG9mIHRoZSBtYXRlcmlhbCAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIHR5cGxuXCI+Q2FzZTwvc3Bhbj48c3BhbiBjbGFzcz1cIml0XCI+czwvc3Bhbj4uIDxicj48YnI+Q2FzZXMgY2FuIGJlIG1hZGUgbGVzcyB3b3JkLWhlYXZ5IGJ5IGZpZGRsaW5nIGFyb3VuZCBpbiB0aGUgPHNwYW4+PGkgY2xhc3M9XCJtYXRlcmlhbC1pY29uc1wiIHN0eWxlPVwiZm9udC1zaXplOiA4MCUgIWltcG9ydGFudDtcIj5tZW51PC9pPjwvc3Bhbj4gb3B0aW9ucy4gVGhlcmUgeW91IGNhbiBhbHNvIGNoYW5nZSB0byBhIDxzcGFuIGNsYXNzPVwic2Fuc2ZvbnRcIj5zYW5zPC9zcGFuPiB0eXBlZmFjZSB3aGVuIEdhcmFtb25kIHN0YXJ0cyB0byBtYWtlIHlvdSB3YW50IHRvIHJpcCBvdXQgeW91ciBraWRuZXlzIGFuZCBzdHVmZiB0aGVtIGludG8geW91ciBleWUgc29ja2V0cy4gSWYgdGhlIHdhY2t5IGNhcmRzLWluLWEtcGlsZSBzY2h0aWNrIGdldHMgdXAgeW91ciBub3NlLCBhZGp1c3QgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5tZXNzaW5lc3M8L3NwYW4+LiBQbHVzIG90aGVyIHN0dWZmLiA8YnI+PGJyPlRoZXJlIGFyZSB0ZXN0cy4gQXJndWFibHkgYSBiaXQgZ2ltbWlja3ksIHRoZXkmIzgyMTc7cmUgYnkgbWVhbnMgb2YgbXVsdGlwbGUtZ3Vlc3NpbmcgdGhlIHJhdGlvIGJlbG9uZ2luZyB0byBhIGNhc2UsIG9yIHZpY2UtdmVyc2EuIFlvdSBjYW4gYWxzbyBkbyB0aGlzIGJ5IHR5cGluZyBpbiB0aGUgY2FzZSBuYW1lIGZvciBhIHJhdGlvIDxzcGFuIGNsYXNzPVwiaXRcIj53aXRob3V0PC9zcGFuPiBzZWVpbmcgYW55IGNob2ljZXMuIDxicj48YnI+RmxpcHBpbmcgY2FyZHMgYmFjayBhbmQgZm9ydGgsIG1vdmluZyB0byB0aGUgbmV4dCBvciBmZXRjaGluZyBiYWNrIHRoZSBsYXN0LCBpcyBhIG1hdHRlciBvZiB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmxlZnQ8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+cmlnaHQ8L3NwYW4+IGtleXMuIE9yLCBvbiBpT1MgZGV2aWNlcywgYSBtYXR0ZXIgb2YgZ3JlYXNpbmcgdXAgdGhlIHNjcmVlbiBieSA8c3BhbiBjbGFzcz1cImJkXCI+c3dpcGluZzwvc3Bhbj4gbGVmdCBvciByaWdodC4iLAogICAgIllFQVIiOiAiMjAxNiIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5GaWx0ZXI8L3NwYW4+PC9zcGFuPjxicj5FbnRlciBuYW1lcyBvZiA8c3BhbiBjbGFzcz1cImJkXCI+Y2FzZXM8L3NwYW4+LCA8c3BhbiBjbGFzcz1cImJkXCI+Y2F0ZWdvcmllczwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwiYmRcIj5jb25jZXB0czwvc3Bhbj4sIG9yIGZyZWUgdGV4dCBpbiBxdW90ZXMuIFRoZXNlIGJyb2FkZW4gb3V0IHdoYXQmIzgyMTc7cyBkaXNwbGF5ZWQuIEJ5IGNvbnRyYXN0LCA8c3BhbiBjbGFzcz1cImJkXCI+dGFnczwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwiYmRcIj5jb3VydHM8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+Y2FyZCB0eXBlczwvc3Bhbj4gYWxsIHdoaXR0bGUgZG93biB3aGF0IHlvdSBzZWUuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Db25maWcgJmFtcDsgPC9zcGFuPjwvc3Bhbj48YnI+VGhlIG9wdGlvbnMgYnV0dG9uICh0b3AgbGVmdCkgYnJpbmdzIHVwIGEgcGFuZWwgd2l0aCBvcHRpb25zIHRvIGZpZGRsZSB3aXRoLiBUaGV5LCBsaWtlIHRoZSBjYXJkcyB5b3UmIzgyMTc7cmUgbG9va2luZyBhdCwgYXJlIHJlbWVtYmVyZWQgd2hlbiB5b3UgY29tZSBiYWNrIGEgZGF5IGxhdGVyLiBCdXQgaWYgc29tZXRoaW5nIGZvdWxzIHVwLCBhIGRpc2NyZWV0IGxpbmsgb24gdGhlIGJvdHRvbSBsZWZ0IGxldHMgeW91IDxzcGFuIGNsYXNzPVwiYmRcIj5yZXNldCBldmVyeXRoaW5nPC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPmlQaG9uZXM8L3NwYW4+PC9zcGFuPjxicj5Vc2Ugb24gaVBob25lcyBpcyByZW5kZXJlZCBtb3JlIGJpZGRhYmxlIGFuZCBsZXNzIGNsdXR0ZXJlZCBieSBwcmVzc2luZyB0aGUgJiM4MjE2O3NoYXJlJiM4MjE3OyBidXR0b24gKGJvdHRvbSBjZW50cmUpIGluIHNhZmFyaSwgdGhlbiA8c3BhbiBjbGFzcz1cImJkXCI+YWRkIHRvIGhvbWUgc2NyZWVuPC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlRhZ3M8L3NwYW4+PC9zcGFuPjxicj5UaGVzZSwgaW4gdGhlIHBhbmVsIG9uIHRoZSByaWdodCwgY2FuIGJlIGRyYWdnZWQgb250byBvciBhd2F5IGZyb20gY2FyZHMsIG9yIGludG8gdGhlIGZpbHRlciB0aGluZ3VtbXkgdXAgdG9wLiBZb3UgY2FuIGFsc28gbWFrZSB5b3VyIG93bi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkxpbmtzPC9zcGFuPjwvc3Bhbj48YnI+TGlua3MgdG8gYW5vdGhlciBjYXJkcyBicmluZyB0aGVtIHVwLCBqaWdnbGluZyBhcm91bmQgYW5kIGZhZGluZyBvdXQgdW5sZXNzIHlvdSBjbGljay9wcmVzcyB0byBmYXN0ZW4gdGhlbSBkb3duLiBXaHk/IE5vIGlkZWEuIDxzcGFuIGNsYXNzPVwiYmRcIj5DYXNlIGNhcmRzPC9zcGFuPiBzaG91bGQgaGF2ZSA8c3BhbiBjbGFzcz1cImJkXCI+T24gV2VzdGxhdzwvc3Bhbj4gb3IgPHNwYW4gY2xhc3M9XCJiZFwiPk9uIGN1cmlhLmV1PC9zcGFuPiBhdCB0aGUgdG9wIGxlZnQsIHdoaWNoIHNob3VsZCB0YWtlIHlvdSBzdHJhaWdodCB0byB0aGUgcmVsZXZhbnQgbWF0ZXJpYWwgb24gdGhvc2Ugc2l0ZXMuIE90aGVyIGxpbmtzIHRvLCBlLmcuLCBsZWdpc2xhdGlvbi5nb3YudWssIG9yIHdpa2lwZWRpYSwgaWYgdGhlIGVudHJ5IHdhcyBwYXJ0aWN1bGFybHkgaGVscGZ1bCwgd2lsbCBzaG93IHVwIHdoZW4gYXBwcm9wcmlhdGUgb3Igd2hlbiBzb21lIGluZXhwbGljYWJsZSBldmVudCBjYXVzZWQgbXkgbGV2ZWwgb2YgaW50ZXJlc3QgdG8gcmlzZSBhYm92ZSB0aGUgZW5kbGVzc2x5IGdyZXkgYW5kIGxpc3RsZXNzIGR5c3Bob3JpYSBjb25zdGl0dXRpbmcgbXkgbWVudGFsIGJhY2tncm91bmQgbm9pc2UuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Ob3Rlczwvc3Bhbj48L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPk5vdGUgd2VsbDwvc3Bhbj48c3BhbiBjbGFzcz1cIml0XCI+ICZtZGFzaDsgdGhpcyB3YXMgY2h1Y2tlZCB0b2dldGhlciA8L3NwYW4+aW4gYSBodXJyeV8sIHNvIGRlZi4gaGFzIGJ1Z3MsIGdsaXRjaGVzLCBoYWxmLXJlcGhyYXNlZCBzZW50ZW5jZXMgaW4gdGhlIGNhcmRzLCBldGMuIEFuZCBpdCYjODIxNztzIG1lYW50IGZvciB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmxhdGVzdCB2ZXJzaW9uIG9mIFNhZmFyaSBvciBDaHJvbWU8L3NwYW4+IG9uIDxzcGFuIGNsYXNzPVwiYmRcIj5NYWM8L3NwYW4+LiBXaGF0LCB5b3UmIzgyMTc7cmUgYSBsYXcgc3R1ZGVudCBhbmQgeW91IGRvbiYjODIxNzt0IGhhdmUgYSBNYWM/PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJFcXVpdHkgJm1kYXNoOyBFcXVpdGFibGUgTWF4aW1zIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJFcXVpdHkgd2lsbCBub3QgYWxsb3cgYSBTdGF0dXRlIHRvIGJlIGFuIENsb2FrIGZvciBGcmF1ZCIsCiAgICAgICAgIkVxdWl0eSB0ZW1wZXJzIHRoZSB3aW5kIHRvIHRoZSBTaG9ybiBMYW1iIiwKICAgICAgICAiT3RoZXIgQ2hhcml0YWJsZSBQdXJwb3NlcyB1bmRlciBDaGFyaXRpZXMgQWN0IDIwMTEiLAogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJQcmVjYXRvcnkgV29yZHMiLAogICAgICAgICJSZW1lZGllcyBmb3IgVW5hdXRob3Jpc2VkIFByb2ZpdHMiLAogICAgICAgICJRdWlzdGNsb3NlIFRydXN0cyAtIEFuYWx5c2lzIiwKICAgICAgICAiUXVpc3RjbG9zZSBUcnVzdHMiLAogICAgICAgICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzIC0gQXNzaXN0YW5jZSBmb3IgVm9sdW50ZWVycyIsCiAgICAgICAgIkFkdmFuY2VtZW50IG9mIEVkdWNhdGlvbiIsCiAgICAgICAgIktub3dpbmcgUmVjZWlwdCAtIEtub3dsZWRnZSIsCiAgICAgICAgIlRoaXJkIFBhcnR5IExpYWJpbGl0eSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiVGhlIGJlbmVmaWNpYXJ5IG9mIGEgZ2lmdCBvciBhIHByb21pc2Ugd2lsbCBub3QsIGdlbmVyYWxseSwgZmluZCBhIHJlbWVkeSBpbiBlcXVpdHkuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkV4Y2VwdGlvbnM8L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiaXRcIj5XaGVuIHRoZSB2b2x1bnRlZXIgaXNuJiM4MjE3O3QgcmVhbGx5IGEgdm9sdW50ZWVyOjwvc3Bhbj4iLAogICAgICAgICI8b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmxldGNoZXIgdiBGbGV0Y2hlcjwvc3Bhbj4gYW5kIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXRsblwiPkZsZXRjaGVyIGNhc2VzPC9zcGFuPi48YnI+SGVyZSwgdGhlIG1heGltIHdhcyBub3Qgb3Zlcmxvb2tlZCwgYnV0IGEgcHJvbWlzZSwgYSBwaWVjZSBvZiA8c3BhbiBjbGFzcz1cIml0XCI+aW50ZWxsZWN0dWFsPC9zcGFuPiBwcm9wZXJ0eSwgd2FzIGhlbGQgIGl0IHdhcyAgdG8gZmluZCB0aGF0IGEgcHJvbWlzZSA8c3BhbiBjbGFzcz1cIml0XCI+Y291bGQ8L3NwYW4+IGJlIGhlbGQgb24gdHJ1c3QgZm9yIGl0cyBwcm9taXNlZS48L3NwYW4+PC9saT48L29sPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRXF1aXR5IiwKICAgICAgICAiRXF1aXRhYmxlIE1heGltcyIKICAgIF0sCiAgICAiTkFNRSI6ICJFcXVpdHkgd2lsbCBub3QgQXNzaXN0IGEgVm9sdW50ZWVyIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRXF1aXR5ICZtZGFzaDsgRXF1aXRhYmxlIE1heGltcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRXF1aXR5IHdpbGwgbm90IEFzc2lzdCBhIFZvbHVudGVlciIsCiAgICAgICAgIkVxdWl0eSB0ZW1wZXJzIHRoZSB3aW5kIHRvIHRoZSBTaG9ybiBMYW1iIiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgRWR1Y2F0aW9uIiwKICAgICAgICAiVW5hdXRob3Jpc2VkIFByb2ZpdHMgLSBDb3Jwb3JhdGUgT3Bwb3J0dW5pdHkiLAogICAgICAgICJRdWlzdGNsb3NlIFRydXN0cyIsCiAgICAgICAgIkNlcnRhaW50eSBvZiBJbnRlbnRpb24iLAogICAgICAgICJQb2xpdGljYWwgUHVycG9zZSBvZiBhIENoYXJpdHkiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJRdWlzdGNsb3NlIFRydXN0cyAtIEFuYWx5c2lzIiwKICAgICAgICAiUHJlY2F0b3J5IFdvcmRzIiwKICAgICAgICAiU2VjcmV0IFRydXN0cyIsCiAgICAgICAgIkNvbnN0aXR1dGlvbiBvZiBUcnVzdHMgLSBBc3Npc3RhbmNlIGZvciBWb2x1bnRlZXJzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMiIsCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBIHN0YXR1dG9yeSBwcm92aXNpb24gb24gd2hpY2ggYSBmcmF1ZHVsZW50IHBhcnR5IHJlbGllcyBtYXkgYmUgZGlzYXBwbGllZC4iLAogICAgICAgICJVc2VkIHdoZXJlIGEgdHJ1c3RlZSB0byB3aG9tIGEgZGlzcG9zaXRpb24sIGNvbnRyYXJ5IHRvIHN0YXR1dGUsIHdhcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBtYWRlIGluIHdyaXRpbmcsIGFuZCB3aG8gZGVjaWRlcyB0byBjbGFpbSB0aGUgZGlzcG9zaXRpb24gd2FzIGEgZ2lmdC4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cIml0XCI+RXhhbXBsZXM8L3NwYW4+ICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Um9jaGVmb3VjYWxkIHYgQm91c3RlYWQ8L3NwYW4+ICZtZGFzaDsgdGhlIHByZWRlY2Vzc29yIHRvIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlM1MygxKShiKTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U2VjcmV0IFRydXN0cyAtIFRoZW9yeTwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRXF1aXR5IiwKICAgICAgICAiRXF1aXRhYmxlIE1heGltcyIKICAgIF0sCiAgICAiTkFNRSI6ICJFcXVpdHkgd2lsbCBub3QgYWxsb3cgYSBTdGF0dXRlIHRvIGJlIGFuIENsb2FrIGZvciBGcmF1ZCIKfSwKewogICAgIkNBVEVHT1JZIjogIkVxdWl0eSAmbWRhc2g7IEVxdWl0YWJsZSBNYXhpbXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkVxdWl0eSB3aWxsIG5vdCBBc3Npc3QgYSBWb2x1bnRlZXIiLAogICAgICAgICJFcXVpdHkgd2lsbCBub3QgYWxsb3cgYSBTdGF0dXRlIHRvIGJlIGFuIENsb2FrIGZvciBGcmF1ZCIsCiAgICAgICAgIkRpc3Bvc2l0aW9uIG9mIEVxdWl0YWJsZSBJbnRlcmVzdHMiLAogICAgICAgICJTZWNyZXQgVHJ1c3RzIiwKICAgICAgICAiVGhlIEN5LXByXHUwMGU4cyBEb2N0cmluZSIsCiAgICAgICAgIkNoYXJpdHkgLSBEZWZpbml0aW9ucyIsCiAgICAgICAgIkNvbnN0aXR1dGlvbiBvZiBUcnVzdHMgLSBBc3Npc3RhbmNlIGZvciBWb2x1bnRlZXJzIiwKICAgICAgICAiUHJpdmF0ZSBFeHByZXNzIFRydXN0cyIsCiAgICAgICAgIkZvcm1hbGl0aWVzIGZvciBJbnRlciBWaXZvcyBFeHByZXNzIFRydXN0cyIsCiAgICAgICAgIlBvbGl0aWNhbCBQdXJwb3NlIG9mIGEgQ2hhcml0eSIsCiAgICAgICAgIktub3dpbmcgUmVjZWlwdCAtIEtub3dsZWRnZSIsCiAgICAgICAgIkZhaXItRGVhbGluZyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjMiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBjYWxxdWUgZnJvbSBQc2FsbXMgNjoyICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJpdFwiPlNlbmQgbm90IGZvcnRoIHRoZSBmdXJ5IG9mIHRoeSB0ZW1wZXN0IGFnYWluc3Qgc28gd2VhayBhIHZlc3NlbC4gPHNwYW4gY2xhc3M9XCJiZFwiPlRlbXBlciB0aGUgd2luZCB0byB0aGUgc2hvcm4gbGFtYi48L3NwYW4+IEJlIHRlbmRlciBhbmQgcGl0aWZ1bCB0byBhIHBvb3Igd2l0aGVyaW5nIGZsb3dlciwgYW5kIGJyZWFrIGl0IG5vdCBmcm9tIGl0cyBzdGVtLjwvc3Bhbj4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cIml0XCI+RXF1aXR5IGlzIHRlbmRlciBhbmQgcGl0aWZ1bCB0byBwb29yIHdpdGhlcmluZyBmbG93ZXJzPC9zcGFuPiB3b3VsZCBzb3VuZCBhIGxvdCBiZXR0ZXIuIiwKICAgICAgICAiVGhpcyAmIzgyMjA7bWF4aW0mIzgyMjE7IHNlZW1zIHRvIGJlIGFuIGludmVudGlvbiBvZiBBcmRlbiBMSiBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QZW5uaW5ndG9uIHYgV2FpbmU8L3NwYW4+LCB0byBqdXN0aWZ5IG5vdCBhcHBseWluZyB0aGUgYmluZGluZyBhdXRob3JpdHkgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgUm9zZTwvc3Bhbj4gaW4gZmF2b3VyIG9mIHRoZSBQQyBkZWNpc2lvbiBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaG9pdGhyYW0gdiBQYWdhcmluaTwvc3Bhbj4uIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJFcXVpdHkiLAogICAgICAgICJFcXVpdGFibGUgTWF4aW1zIgogICAgXSwKICAgICJOQU1FIjogIkVxdWl0eSB0ZW1wZXJzIHRoZSB3aW5kIHRvIHRoZSBTaG9ybiBMYW1iIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiVGhyZWUgQ2VydGFpbnRpZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNlcnRhaW50eSBvZiBTdWJqZWN0IiwKICAgICAgICAiUHJlY2F0b3J5IFdvcmRzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIEludGVudGlvbiIsCiAgICAgICAgIlBvbGl0aWNhbCBQdXJwb3NlIG9mIGEgQ2hhcml0eSIsCiAgICAgICAgIlNlY3JldCBUcnVzdHMgLSBUaGVvcnkiLAogICAgICAgICJGYWlyLURlYWxpbmciLAogICAgICAgICJTZWxmLURlYWxpbmciLAogICAgICAgICJBZHZhbmNlbWVudCBvZiBFZHVjYXRpb24iLAogICAgICAgICJFcXVpdHkgd2lsbCBub3QgQXNzaXN0IGEgVm9sdW50ZWVyIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIlF1aXN0Y2xvc2UgVHJ1c3RzIC0gQW5hbHlzaXMiLAogICAgICAgICJEaXNob25lc3R5IGZvciBEaXNob25lc3QgQXNzaXN0YW5jZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjQiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJpdFwiPkhvdyB0aGUgc2F1c2FnZSBvZiB0aGUgUHJpdmF0ZSBFeHByZXNzIFRydXN0IGlzIHN0dWZmZWQuPC9zcGFuPiIsCiAgICAgICAgIkEgcHJpdmF0ZSBleHByZXNzIHRydXN0IG11c3QgYmUgY2VydGFpbiBvZiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwiYmRcIj5pbnRlbnRpb248L3NwYW4+LCA8c3BhbiBjbGFzcz1cImJkXCI+c3ViamVjdDwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwiYmRcIj5vYmplY3Q8L3NwYW4+LiBFbGRvbiBMQyBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5XcmlnaHQgdiBBdGt5bnM8L3NwYW4+LCBMYW5nZGFsZSBMSiBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5LbmlnaHQgdiBLbmlnaHQ8L3NwYW4+LiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DZXJ0YWludHkgb2YgSW50ZW50aW9uPC9zcGFuPjwvc3Bhbj4sIHdpdGhvdXQgd2hpY2gsIHRoZSBkaXNwb3NpdGlvbiBpcyBhbiA8c3BhbiBjbGFzcz1cImJkXCI+YWJzb2x1dGUgZ2lmdDwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2VydGFpbnR5IG9mIFN1YmplY3Q8L3NwYW4+PC9zcGFuPiwgd2l0aG91dCB3aGljaCwgaXQgPHNwYW4gY2xhc3M9XCJiZFwiPnJlc3VsdHMgYmFjazwvc3Bhbj4gdG8gdGhlIHNldHRsb3IvdGVzdGF0b3IuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2VydGFpbnR5IG9mIE9iamVjdDwvc3Bhbj48L3NwYW4+LCByZXN1bHRpbmcgYmFjayBpbiBkZWZhdWx0LCBhcyBhYm92ZS48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIlRoZSBjb3VydHMgPHNwYW4gY2xhc3M9XCJpdFwiPnRyeTwvc3Bhbj4gdG8gcmVzcGVjdCB0aGUgd2lzaGVzIG9mIHRoZSBzZXR0bG9yL3Rlc3RhdG9yIGFuZCB1cGhvbGQgdGhlIHRydXN0IGlmIHRoZXkgY2FuLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NY1BoYWlsIHYgRG91bHRvbjwvc3Bhbj4gcGVyIExvcmQgV2lsYmVyZm9yY2UuIiwKICAgICAgICAiVGhlIHNldHRsb3IgbXVzdCBiZSA8c3BhbiBjbGFzcz1cIml0XCI+c3VpIGp1cmlzPC9zcGFuPiwgYW5kIHRoaXMgbWlnaHQgbm90IGJlIGNlcnRhaW4gdW50aWwgJiM4MjE2O3Nvb25lciBhZnRlciYjODIxNzsgdGhlIDE4dGggYmlydGhkYXkuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkVkd2FyZHMgdiBDYXJ0ZXI8L3NwYW4+IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaHJlZSBDZXJ0YWludGllcyIKICAgIF0sCiAgICAiTkFNRSI6ICJQcml2YXRlIEV4cHJlc3MgVHJ1c3RzIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiVGhyZWUgQ2VydGFpbnRpZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNlcnRhaW50eSBvZiBTdWJqZWN0IiwKICAgICAgICAiUHJpdmF0ZSBFeHByZXNzIFRydXN0cyIsCiAgICAgICAgIlByZWNhdG9yeSBXb3JkcyIsCiAgICAgICAgIlBvbGl0aWNhbCBQdXJwb3NlIG9mIGEgQ2hhcml0eSIsCiAgICAgICAgIkRpc2hvbmVzdCBBc3Npc3RhbmNlIiwKICAgICAgICAiRm9ybWFsaXRpZXMgZm9yIFRlc3RhbWVudGFyeSBUcnVzdHMiLAogICAgICAgICJRdWlzdGNsb3NlIFRydXN0cyIsCiAgICAgICAgIkNoYXJpdHkgQ29tbWlzc2lvbmVyJ3MgR3VpZGFuY2UgLSBTZXB0ZW1iZXIgMjAxMyIsCiAgICAgICAgIkVxdWl0eSB3aWxsIG5vdCBhbGxvdyBhIFN0YXR1dGUgdG8gYmUgYW4gQ2xvYWsgZm9yIEZyYXVkIiwKICAgICAgICAiU2VjcmV0IFRydXN0cyIsCiAgICAgICAgIlByZXZlbnRpb24gb3IgUmVsaWVmIG9mIFBvdmVydHkiLAogICAgICAgICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiCiAgICBdLAogICAgIk5VTUJFUiI6ICI1IiwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIkFLQSI6ICJJbnRlbnRpb24iLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiaXRcIj5DZXJ0YWludHkgdGhhdCB0aGUgc2V0dGxvciBpbnRlbmRlZCB0byBjcmVhdGUgYSB0cnVzdCwgcmF0aGVyIHRoYW4gZ2l2ZSBhIGdpZnQuIEluIHRoZSBhYnNlbmNlIG9mIHdoaWNoLCBpdCYjODIxNztzIGFuIGFic29sdXRlIGdpZnQuPC9zcGFuPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5EZXRhaWxzPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBUaGUgdGVzdCBpcyB3aGV0aGVyIHRoZSB0cnVzdCYjODIxNztzIGNyZWF0b3IgaW50ZW5kZWQgc29tZW9uZSBlbHNlIHRvIGJlIHVuZGVyIGEgZHV0eSB0byBob2xkIHRoZSBwcm9wZXJ0eSBmb3Igc29tZW9uZSBlbHNlLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QYXVsIHYgQ29uc3RhbmNlPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBJbnRlbnRpb24gaXMgYXNzZXNzZWQgb2JqZWN0aXZlbHksIG9uIHRoZSBldmlkZW5jZS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBUaGVyZWZvcmUsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlByZWNhdG9yeSBXb3Jkczwvc3Bhbj4gY2FuIHRvcnBlZG8gaXQuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEFkYW1zIGFuZCBLZW5zaW5ndG9uIFZlc3RyeTwvc3Bhbj4uPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBCdXQgbm90IGFsd2F5cyAmbWRhc2g7IHN1Y2ggd29yZHMgc2hvdWxkIGJlIHNlZW4gaW4gbGlnaHQgb2YgdGhlIHdob2xlIHdpbGwuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEhhbWlsdG9uPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBXaXRoIGVub3VnaCBlbXBoYXNpcywgYSB3aXNoIDxzcGFuIGNsYXNzPVwiaXRcIj5jYW48L3NwYW4+IHR1cm4gaW50byBhbiBvYmxpZ2F0aW9uLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db21pc2tleSB2IEJvd3JpbmctSGFuYnVyeTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gSXQmIzgyMTc7cyB1bHRpbWF0ZWx5IHVwIHRvIHRoZSBjb3VydC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TGFtYmUgdiBFYW1lczwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBUaGUgd29yZCA8c3BhbiBjbGFzcz1cIml0XCI+dHJ1c3Q8L3NwYW4+IGlzIG5vdCBwZXIgc2Ugb2YgbWFzc2l2ZSBzaWduaWZpY2FuY2UuIFdoYXQgbWF0dGVycyBpcyB0aGUgcmVhbGl0eS4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgS2F5Zm9yZDwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+U3RhdHVzPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBJcyBjZXJ0YWludHkgb2YgaW50ZW50aW9uIGEgcnVsZSBvZiBsYXcsIG9yIGEgdGFzayBvZiBjb25zdHJ1Y3Rpb24/PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRocmVlIENlcnRhaW50aWVzIgogICAgXSwKICAgICJOQU1FIjogIkNlcnRhaW50eSBvZiBJbnRlbnRpb24iCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaHJlZSBDZXJ0YWludGllcyAmbWRhc2g7IENlcnRhaW50eSBvZiBJbnRlbnRpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlByaXZhdGUgRXhwcmVzcyBUcnVzdHMiLAogICAgICAgICJDZXJ0YWludHkgb2YgU3ViamVjdCIsCiAgICAgICAgIkNlcnRhaW50eSBvZiBJbnRlbnRpb24iLAogICAgICAgICJRdWlzdGNsb3NlIFRydXN0cyIsCiAgICAgICAgIlNlbGYtRGVhbGluZyIsCiAgICAgICAgIlNlY3JldCBUcnVzdHMgLSBUaGVvcnkiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJFcXVpdHkgd2lsbCBub3QgYWxsb3cgYSBTdGF0dXRlIHRvIGJlIGFuIENsb2FrIGZvciBGcmF1ZCIsCiAgICAgICAgIkRpc3Bvc2l0aW9uIG9mIEVxdWl0YWJsZSBJbnRlcmVzdHMiLAogICAgICAgICJFcXVpdHkgd2lsbCBub3QgQXNzaXN0IGEgVm9sdW50ZWVyIiwKICAgICAgICAiRm9ybWFsaXRpZXMgZm9yIFRlc3RhbWVudGFyeSBUcnVzdHMiLAogICAgICAgICJJbmNvbXBsZXRlIENvbnN0aXR1dGlvbiBhbmQgRmFpbGVkIEdpZnRzIgogICAgXSwKICAgICJOVU1CRVIiOiAiNiIsCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cIml0XCI+VGVybXMgaW4gd2lsbHMgZXhwcmVzc2VkIGluIGxhbmd1YWdlIG9mIGEgYmxvdXN5LCBjYXAtZG9mZmluZywgYmFyb3F1ZSwgbW9yYmlkLCBjaG9rZWQtdXAsIG92ZXItY291cnRlb3VzIGFuZCB0aGVhdHJpY2FsbHktc29sZW1uIG5hdHVyZTsgdG9laW5nIGJ1dCBub3QgY3Jvc3NpbmcgdGhlIHNlbWFudGljIGZyb250aWVyIGJldHdlZW4gdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5pbXBlcmF0aXZlPC9zcGFuPiBhbmQgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5tZXJlbHkgaG9wZWZ1bC48L3NwYW4+PC9zcGFuPiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBBZGFtcyBhbmQgS2Vuc2luZ3RvbiBWZXN0cnk8L3NwYW4+LiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5EZXRhaWxzPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBXaGV0aGVyIG9yIG5vdCB0aGV5IGFtb3VudCB0byBhIGdpZnQgb3IgYSB0cnVzdCBpcyBhIG1hdHRlciBmb3IgdGhlIGp1ZGdlLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MYW1iZSB2IEVhbWVzPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBUbyBiZSBzZWVuIGluIGxpZ2h0IG9mIHRoZSB3aG9sZSB3aWxsLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBIYW1pbHRvbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gTm90IGEgcHJvYmxlbSBpZiBjb3B5LXBhc3RlZCBmcm9tIGEgdGVybSB1cGhlbGQgaW4gY291cnQuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFN0ZWVsZSYjODIxNztzIFdUPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBDb3VsZCBpbmRpY2F0ZSBhIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkZ1bGx5LVNlY3JldCBUcnVzdDwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+U3BlY2ltZW5zPC9zcGFuPjxicj48c3BhbiBjbGFzcz1cIml0XCI+U3VjY2Vzc2Z1bDwvc3Bhbj4gJm1kYXNoOyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiYjODIxNjtBYnNvbHV0ZWx5IGluIGZ1bGwgY29uZmlkZW5jZSYjODIxNzsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29taXNrZXkgdiBCb3dyaW5nLUhhbmJ1cnk8L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cIml0XCI+VW5zdWNjZXNzZnVsPC9zcGFuPiAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+JiM4MjE2O0l0IGlzIG15IGRlc2lyZSYjODIxNzsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgRGlnZ2xlczwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiYjODIxNjtGZWVsaW5nIGNvbmZpZGVudCYjODIxNzsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TXVzc29vcmllIEJhbmsgdiBSYXlub3I8L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4mIzgyMTY7SW4gZnVsbCBjb25maWRlbmNlJiM4MjE3OyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBBZGFtcyBhbmQgS2Vuc2luZ3RvbiBWZXN0cnk8L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4mIzgyMTY7SSB3aXNoIHRoZW0mIzgyMTc7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEhhbWlsdG9uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+JiM4MjE2O0luIHRoZSBmdWxsZXN0IGNvbmZpZGVuY2UmIzgyMTc7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFdpbGxpYW1zPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+JiM4MjE2O0kgc3BlY2lhbGx5IGRlc2lyZSYjODIxNzsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgQ29ubm9sbHk8L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4mIzgyMTY7SSByZXF1ZXN0IHRoYXQmIzgyMTc7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEpvaG5zb248L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRocmVlIENlcnRhaW50aWVzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIEludGVudGlvbiIKICAgIF0sCiAgICAiTkFNRSI6ICJQcmVjYXRvcnkgV29yZHMiCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaHJlZSBDZXJ0YWludGllcyAmbWRhc2g7IENlcnRhaW50eSBvZiBTdWJqZWN0IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJQcmVjYXRvcnkgV29yZHMiLAogICAgICAgICJQcml2YXRlIEV4cHJlc3MgVHJ1c3RzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIEludGVudGlvbiIsCiAgICAgICAgIktub3dpbmcgUmVjZWlwdCAtIEtub3dsZWRnZSIsCiAgICAgICAgIlJlbWVkaWVzIGZvciBVbmF1dGhvcmlzZWQgUHJvZml0cyIsCiAgICAgICAgIk90aGVyIENoYXJpdGFibGUgUHVycG9zZXMgdW5kZXIgQ2hhcml0aWVzIEFjdCAyMDExIiwKICAgICAgICAiRXF1aXR5IHdpbGwgbm90IGFsbG93IGEgU3RhdHV0ZSB0byBiZSBhbiBDbG9hayBmb3IgRnJhdWQiLAogICAgICAgICJGaWR1Y2lhcnkgRHV0aWVzIiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgRWR1Y2F0aW9uIiwKICAgICAgICAiVGhpcmQgUGFydHkgTGlhYmlsaXR5IiwKICAgICAgICAiVGhlIEN5LXByXHUwMGU4cyBEb2N0cmluZSIsCiAgICAgICAgIkNoYXJpdHkgLSBEZWZpbml0aW9ucyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjciLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJpdFwiPlRoYXQgdGhlIHRydXN0IGlzIGZvciA8c3BhbiBjbGFzcz1cImJkXCI+c29tZTwvc3Bhbj4gcHJvcGVydHksIHdoaWNoIG11c3QgZWl0aGVyIGJlIGNsZWFybHkgZGVzY3JpYmVkIGJ5IHRoZSBzZXR0bG9yL3Rlc3RhdG9yLCBvciBiZSBhc2NlcnRhaW5hYmxlLiBXaXRob3V0IHRoaXMsIHRoZSBwcm9wZXJ0eSByZXN1bHRzIGJhY2sgdG8gdGhlIHNldHRsb3IuPC9zcGFuPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5VbmNlcnRhaW4gRGVzY3JpcHRpb248L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFZhZ3VlbmVzcyBhYm91dCA8c3BhbiBjbGFzcz1cIml0XCI+cXVhbnRpdHk8L3NwYW4+IGRlZmVhdGVkIGNlcnRhaW50eSBvZiBzdWJqZWN0IGluIGVhcmx5IGNhc2VzLiA8c3BhbiBjbGFzcz1cIml0XCI+QnVsazwvc3Bhbj4gaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGFsbWVyIHYgU2ltbW9uZHM8L3NwYW4+OyBwb3RlbnRpYWxseSA8c3BhbiBjbGFzcz1cIml0XCI+bm8gcHJvcGVydHk8L3NwYW4+IGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNwcmFuZ2UgdiBCYXJuYXJkPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBBIG1vcmUgJiM4MjE2O3ByYWdtYXRpYyYjODIxNzsgYXBwcm9hY2ggd2FzIHRha2VuIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEdvbGF5PC9zcGFuPiAoMTk2NSkuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+V2luZSBhbmQgR29sZDwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJiZFwiPkNoYXR0ZWxzIG11c3QgYmUgc2VncmVnYXRlZDwvc3Bhbj4sIGlmIGNvbnRhaW5lZCB3aXRoaW4gYSBsYXJnZXIgYm9keSBvZiBub24tdHJ1c3QgcHJvcGVydHkuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEdvbGRjb3JwPC9zcGFuPi48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFVubGVzcyB0aGV5IGFyZSA8c3BhbiBjbGFzcz1cIml0XCI+c3RyaWN0bHk8L3NwYW4+IGZ1bmdpYmxlLiBUaGUgYm90dGxlcyBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBMb25kb24gV2luZTwvc3Bhbj4gd2VyZSBoZWxkIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGZ1bmdpYmxlLCBvbiB0aGUgb2JzZXJ2YXRpb24gdGhhdCBvZiB0d28gYm90dGxlcyBmcm9tIHRoZSBzYW1lIGNhc2UsIG9uZSBtYXkgYmUgY29ya2VkLCBidXQgdGhlIG90aGVyLCBnb29kLjwvc3Bhbj48L2xpPjwvdWw+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+U2hhcmVzIGFuZCBNb25leTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gV2hlbiA8c3BhbiBjbGFzcz1cIml0XCI+YW55IGZpZnR5IHdvdWxkIGRvPC9zcGFuPiwgdGhlIHJlcXVpcmVtZW50IGZvciBzZWdyZWdhdGlvbiBkb2VzIG5vdCBhcHBseS4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SHVudGVyIHYgTW9zczwvc3Bhbj4sIGZvbGxvd2VkIGJ5IE5ldWJlcmdlciBKIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhvbGxhbmQgdiBOZXdidXJ5PC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBJbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QZWFyc29uIHYgTGVobWFuIEJyb3M8L3NwYW4+LCB0aGUgYXBwcm9hY2ggdGFrZW4gaW4gQXVzdHJhbGlhIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPldoaXRlIHYgU2hvcnRoYWxsPC9zcGFuPiwgb2YgaW1wb3NpbmcgYSB0cnVzdCBmb3IgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj53aG9sZTwvc3Bhbj4gb2YgdGhlIGJvZHkgaW50byB3aGljaCB0aGUgc3ViamVjdCBpcyBtaXhlZCwgd2l0aCBiZW5lZmljaWFsIGludGVyZXN0cyBpbiBwcm9wb3J0aW9uLjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPk11bHRpcGxlIEJlbmVmaWNpYXJpZXM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEFtYmlndWl0eSBhcyB0byB0aGUgZGlzdHJpYnV0aW9uIG9mIGJlbmVmaWNpYWwgaW50ZXJlc3QgYmV0d2VlbiBtdWx0aXBsZSBiZW5lZmljaWFyaWVzLjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlByb2JsZW0gUXVlc3Rpb25zPC9zcGFuPjxicj5Bcmd1ZSBhbGwgcG9zc2liaWxpdGllcy4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Ib3cgc2hvdWxkIHRoZSBnb29kcyBiZSBjb25zdHJ1ZWQsIGFuZCB3aGF0IGNhc2VzIHdvdWxkIGFwcGx5Pzwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QXJlIHRoZXkgdGFuZ2libGUvaW50YW5naWJsZT88L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkZ1bmdpYmxlIG9yIG5vbi1mdW5naWJsZT88L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVGhyZWUgQ2VydGFpbnRpZXMiLAogICAgICAgICJDZXJ0YWludHkgb2YgU3ViamVjdCIKICAgIF0sCiAgICAiTkFNRSI6ICJDZXJ0YWludHkgb2YgU3ViamVjdCIKfSwKewogICAgIkNBVEVHT1JZIjogIlRocmVlIENlcnRhaW50aWVzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIldyaWdodCB2IEF0a3lucyAoMTgyMykgVHVybi5SIDE0MyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ29taXNrZXkgdiBCb3dyaW5nLUhhbmJ1cnkiLAogICAgICAgICJIb2xsYW5kIHYgTmV3YnVyeSIsCiAgICAgICAgIldoaXRlIHYgU2hvcnRoYWxsIiwKICAgICAgICAiU3ByYW5nZSB2IEJhcm5hcmQiLAogICAgICAgICJSZSBDaGFsbG9ubmVyIENsdWIiLAogICAgICAgICJNY1BoYWlsIHYgRG91bHRvbiIsCiAgICAgICAgIkluIHRoZSBFc3RhdGUgb2YgTGFzdCIsCiAgICAgICAgIlBlYXJzb24gdiBMZWhtYW4gQnJvcyIsCiAgICAgICAgIlJlIFN0ZWVsZSdzIFdUIiwKICAgICAgICAiUmUgQWRhbXMgYW5kIEtlbnNpbmd0b24gVmVzdHJ5IiwKICAgICAgICAiUmUgQmFkZW4gKG5vLiAyKSIsCiAgICAgICAgIkJveWNlIHYgQm95Y2UiCiAgICBdLAogICAgIk5VTUJFUiI6ICI4IiwKICAgICJIRUxEIjogWwogICAgICAgICJcdTIwMTMgcGVyIExvcmQgRWxkb24gJiM4MjIwO2ZpcnN0Li4uIHRoZSB3b3JkIG11c3QgYmUgaW1wZXJhdGl2ZS4uLjsgc2Vjb25kbHkuLi4gdGhlIHN1YmplY3QgbXVzdCBiZSBjZXJ0YWluLi4uOyBhbmQgdGhpcmRseS4uLiB0aGUgb2JqZWN0IG11c3QgYmUgYXMgY2VydGFpbiBhcyB0aGUgc3ViamVjdCYjODIyMTsiCiAgICBdLAogICAgIllFQVIiOiAiMTgyMyIsCiAgICAiTkFNRSI6ICJXcmlnaHQgdiBBdGt5bnMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRocmVlIENlcnRhaW50aWVzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiVGhyZWUgQ2VydGFpbnRpZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIldyaWdodCB2IEF0a3lucyIsCiAgICAgICAgIlJlIEdvbGF5IiwKICAgICAgICAiSHVudGVyIHYgTW9zcyIsCiAgICAgICAgIlJlIEFkYW1zIGFuZCBLZW5zaW5ndG9uIFZlc3RyeSIsCiAgICAgICAgIlNwcmFuZ2UgdiBCYXJuYXJkIiwKICAgICAgICAiSW4gdGhlIEVzdGF0ZSBvZiBMYXN0IiwKICAgICAgICAiQ29taXNrZXkgdiBCb3dyaW5nLUhhbmJ1cnkiLAogICAgICAgICJQZWFyc29uIHYgTGVobWFuIEJyb3MiLAogICAgICAgICJSZSBMb25kb24gV2luZSIsCiAgICAgICAgIlJlIEdvbGRjb3JwIiwKICAgICAgICAiUGFsbWVyIHYgU2ltbW9uZHMiLAogICAgICAgICJSZSBLYXlmb3JkIgogICAgXSwKICAgICJOVU1CRVIiOiAiOSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJBS0EiOiAiUmUgQmFkZW4gKG5vIDEpIiwKICAgICJZRUFSIjogIjE5NzAiLAogICAgIk5BTUUiOiAiTWNQaGFpbCB2IERvdWx0b24iLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRocmVlIENlcnRhaW50aWVzIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJNY1BoYWlsIHYgRG91bHRvbiBbMTk3MF0gVUtITCAxIiwKICAgICJIRUxEIjogWwogICAgICAgICJTb2Z0ZW5pbmcgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5maXhlZCBsaXN0PC9zcGFuPiB0ZXN0IGZvciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5jZXJ0YWludHkgb2Ygb2JqZWN0PC9zcGFuPiwgTG9yZCBXaWxiZXJmb3JjZSBoZWxkIGEgdHJ1c3Qgd2lsbCBub3QgZmFpbCBmb3IgdW5jZXJ0YWludHkgb2Ygb2JqZWN0LCBpZiB0aGVyZSBpcyA8c3BhbiBjbGFzcz1cIml0XCI+c3VmZmljaWVudCBwcmFjdGljYWwgY2VydGFpbnR5PC9zcGFuPiBpbiBpdHMgZGVmaW5pdGlvbiBzdWNoIHRoYXQgaXQgY291bGQgYmUgc2FpZCBvZiA8c3BhbiBjbGFzcz1cIml0XCI+YW55IGdpdmVuIHBvc3R1bGFudDwvc3Bhbj4gd2hldGhlciBvciBub3QgdGhleSBiZWxvbmcgdG8gdGhlIGNsYXNzIG9mIGJlbmVmaWNpYXJpZXMuIiwKICAgICAgICAiJiM4MjIwO0EgdHJ1c3Qgc2hvdWxkIGJlIHVwaGVsZCBpZiB0aGVyZSBpcyA8c3BhbiBjbGFzcz1cIml0XCI+c3VmZmljaWVudCBwcmFjdGljYWwgY2VydGFpbnR5PC9zcGFuPiBpbiBpdHMgZGVmaW5pdGlvbiBmb3IgaXQgdG8gYmUgY2FycmllZCBvdXQsIGlmIG5lY2Vzc2FyeSB3aXRoIHRoZSBhZG1pbmlzdHJhdGl2ZSBhc3Npc3RhbmNlIG9mIHRoZSBjb3VydCwgYWNjb3JkaW5nIHRvIHRoZSBleHByZXNzZWQgaW50ZW50aW9uIG9mIHRoZSBzZXR0bG9yLiYjODIyMTsiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaHJlZSBDZXJ0YWludGllcyAmbWRhc2g7IENlcnRhaW50eSBvZiBPYmplY3QiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiUmUgQmFkZW4gKG5vLiAyKSBbMTk3Ml0iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIFN0ZWVsZSdzIFdUIiwKICAgICAgICAiUGF1bCB2IENvbnN0YW5jZSIsCiAgICAgICAgIk1jUGhhaWwgdiBEb3VsdG9uIiwKICAgICAgICAiUmUgTG9uZG9uIFdpbmUiLAogICAgICAgICJQYWxtZXIgdiBTaW1tb25kcyIsCiAgICAgICAgIlJlIEFkYW1zIGFuZCBLZW5zaW5ndG9uIFZlc3RyeSIsCiAgICAgICAgIlNwcmFuZ2UgdiBCYXJuYXJkIiwKICAgICAgICAiUmUgR29sZGNvcnAiLAogICAgICAgICJMYW1iZSB2IEVhbWVzIiwKICAgICAgICAiUmUgR29sYXkiLAogICAgICAgICJSZSBLYXlmb3JkIiwKICAgICAgICAiV2hpdGUgdiBTaG9ydGhhbGwiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIENBIGFjY2VwdGVkIHRoZSB0cnVzdCBhcyB2YWxpZCwgYWx0aG91Z2ggdGhlIHRlc3Qgd2FzIGludGVycHJldGVkIGluIHRocmVlIGRpZmZlcmVudCB3YXlzIGJ5IHRoZSBqdWRnZXMsIGluIHJlZ2FyZHMgdG8gdGhlIGRldGVybWluYXRpb24gb2YgY29uY2VwdHVhbCBhbmQgZXZpZGVudGlhbCBjZXJ0YWludHkuIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPk1lYW5pbmcgb2YgPHNwYW4gY2xhc3M9XCJpdFwiPnJlbGF0aXZlPC9zcGFuPjwvc3Bhbj4gJm1kYXNoOzwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5TYWNocyBhbmQgTWVnYXcgTEpKOiA8c3BhbiBjbGFzcz1cImJkXCI+ZGVzY2VuZGFudCBvZiBhIGNvbW1vbiBhbmNlc3Rvcjwvc3Bhbj4sIGFsdGhvdWdoIG5lZ2xlY3RpbmcgdG8gc2F5IGhvdyBmYXIgYmFjay48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlN0YW1wOiA8c3BhbiBjbGFzcz1cImJkXCI+bmV4dCBvZiBraW48L3NwYW4+IG9yIG5lYXJlc3QgYmxvb2QgcmVsYXRpb24uPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlNhY2hzIHJldmlld2VkIHNldmVyYWwgcG90ZW50aWFsIGV4YW1wbGVzIG9mIGNvbmNlcHR1YWwgY2VydGFpbnR5IGluIGhpcyBqdWRnZW1lbnQsIGhvbGRpbmcgYWxsIHRocmVlIGNvbmN1cnJlZCBpbiB0aGVpciBkZWZpbml0aW9uIG9mICYjODIxNjtkZXBlbmRlbnQmIzgyMTc7IGFzIHNvbWVvbmUgd2hvbGx5IG9yIHBhcnRpYWxseSBkZXBlbmRhbnQgb24gc29tZW9uZSBlbHNlLiBXb3csIHdoYXQgaW5zaWdodC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5UZXN0IGZvciBfZXZpZGVudGlhbCBjZXJ0YWludHk8L3NwYW4+ICZtZGFzaDs8L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+U2FjaHMgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImJkXCI+YSB0cnVzdCB3b3VsZCBuZXZlciBiZSBkZWZlYXRlZCBieSBldmlkZW50aWFsIGNlcnRhaW50eTwvc3Bhbj4sIGFuZCB0aGUgXHUyMDE4YW55IGdpdmVuIHBvc3R1bGFudFx1MjAxOSB0ZXN0IHdhcyBlbnRpcmVseSBjb25jZXB0dWFsLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+TWVnYXcgJm1kYXNoOyBlbm91Z2ggdG8gc2hvdyB0aGVyZSB3ZXJlIGEgPHNwYW4gY2xhc3M9XCJiZFwiPnN1YnN0YW50aWFsIG51bWJlciBvZiBvYmplY3RzIHdpdGhpbiB0aGUgY2xhc3M8L3NwYW4+LCB3aXRoICYjODIxNjtzdWJzdGFudGlhbCYjODIxNzsgYmVpbmcgYW4gaXNzdWUgb2YganVkZ2VtZW50IGJhc2VkIG9uIDxzcGFuIGNsYXNzPVwiYmRcIj5jb21tb24gc2Vuc2UgYW5kIGNpcmN1bXN0YW5jZXM8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+U3RhbXAgJm1kYXNoOyBtdXN0IGJlIHNob3duIG9mIDxzcGFuIGNsYXNzPVwiYmRcIj5hbnkgZ2l2ZW4gPHNwYW4gY2xhc3M9XCJpdFwiPnBvdGVudGlhbDwvc3Bhbj4gb2JqZWN0PC9zcGFuPiB3aGV0aGVyIGluIGNsYXNzIG9mIGJlbmVmaWNpYXJpZXMuIFVuY2VydGFpbnR5IHdvdWxkIGludmFsaWRhdGUgdGhlIHRydXN0Ljxicj4gJm1kYXNoOyBUaGUgbW9zdCBjb25zaXN0ZW50IHdpdGggdGVzdCBvdXRsaW5lZCBieSBXaWxiZXJmb3JjZSBMSiBpbiBhbGwgd2F5cyBidXQgb25lICZtZGFzaDsgV2lsYmVyZm9yY2UgZGlkIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+IHJlcXVpcmUgYSBjb21wbGV0ZSBsaXN0IG9mIG9iamVjdHMgdG8gYmUgZHJhd24gdXAuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5TbyB0aGUgU2FjaHMgYXBwcm9hY2ggaXMgdG8gYmUgcHJlZmVycmVkLjwvc3Bhbj48L2xpPjwvdWw+PC91bD4iCiAgICBdLAogICAgIllFQVIiOiAiMTk3MiIsCiAgICAiTkFNRSI6ICJSZSBCYWRlbiAobm8uIDIpIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaHJlZSBDZXJ0YWludGllcyIsCiAgICAgICAgIkNlcnRhaW50eSBvZiBPYmplY3QiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaHJlZSBDZXJ0YWludGllcyAmbWRhc2g7IENlcnRhaW50eSBvZiBJbnRlbnRpb24iLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiUGF1bCB2IENvbnN0YW5jZSBbMTk3N10gMSBXTFIgNTI3IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBEaWdnbGVzIiwKICAgICAgICAiQ29taXNrZXkgdiBCb3dyaW5nLUhhbmJ1cnkiLAogICAgICAgICJSZSBBZGFtcyBhbmQgS2Vuc2luZ3RvbiBWZXN0cnkiLAogICAgICAgICJSZSBTdGVlbGUncyBXVCIsCiAgICAgICAgIlJlIENoYWxsb25uZXIgQ2x1YiIsCiAgICAgICAgIkxhbWJlIHYgRWFtZXMiLAogICAgICAgICJSZSBLYXlmb3JkIiwKICAgICAgICAiUmUgSGFtaWx0b24iLAogICAgICAgICJTcHJhbmdlIHYgQmFybmFyZCIsCiAgICAgICAgIldoaXRlIHYgU2hvcnRoYWxsIiwKICAgICAgICAiUmUgR29sYXkiLAogICAgICAgICJSZSBHb2xkY29ycCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjExIiwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgZXNzZW5jZSBvZiB0aGUgcmVxdWlyZW1lbnQgb2YgY2VydGFpbnR5IG9mIGludGVudGlvbiBpcyB0aGF0IHRoZSBjcmVhdG9yIG9mIHRoZSB0cnVzdCBpbnRlbmRlZCB0byBjYXVzZSBzb21lb25lIHRvIGJlIHVuZGVyIGEgZHV0eSB0byBob2xkIHByb3BlcnR5IGZvciBhbm90aGVyLiIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTc3IiwKICAgICJOQU1FIjogIlBhdWwgdiBDb25zdGFuY2UiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRocmVlIENlcnRhaW50aWVzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIEludGVudGlvbiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRocmVlIENlcnRhaW50aWVzICZtZGFzaDsgQ2VydGFpbnR5IG9mIEludGVudGlvbiAmbWRhc2g7IFByZWNhdG9yeSBXb3JkcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgSGFtaWx0b24iLAogICAgICAgICJSZSBEaWdnbGVzIiwKICAgICAgICAiTGFtYmUgdiBFYW1lcyIsCiAgICAgICAgIkNvbWlza2V5IHYgQm93cmluZy1IYW5idXJ5IiwKICAgICAgICAiUmUgU3RlZWxlJ3MgV1QiLAogICAgICAgICJSZSBLYXlmb3JkIiwKICAgICAgICAiUGF1bCB2IENvbnN0YW5jZSIsCiAgICAgICAgIlJlIENoYWxsb25uZXIgQ2x1YiIsCiAgICAgICAgIlJlIEdvbGRjb3JwIiwKICAgICAgICAiSG9sbGFuZCB2IE5ld2J1cnkiLAogICAgICAgICJXcmlnaHQgdiBBdGt5bnMiLAogICAgICAgICJSZSBCYWRlbiAobm8uIDIpIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTIiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIxODg0IiwKICAgICJOQU1FIjogIlJlIEFkYW1zIGFuZCBLZW5zaW5ndG9uIFZlc3RyeSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIlBlcnN1YXNpdmUiCiAgICBdLAogICAgIkNPTU1FTlQiOiAiRGUgVGhhbiAmbWRhc2g7ICYjODIyMDt0aGVyZSBhcmUgc29tZSB2ZXJ5IHNlbnNpYmxlIGRlYWQganVkZ2VzLlx1MjAxZCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIHdvcmRpbmcgZGlkIG5vdCBlc3RhYmxpc2ggYW4gaW50ZW50aW9uIHRvIGNyZWF0ZSBhIHRydXN0OyBpdCBlc3RhYmxpc2hlZCBtZXJlbHkgYSA8c3BhbiBjbGFzcz1cImJkXCI+d2lzaDwvc3Bhbj4uIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJIYWQgYSB0cnVzdCBiZWVuIHZhbGlkbHkgY3JlYXRlZCBieSBhIHdpbGwgY29udGFpbmluZyB0aGUgd29yZHMgJiM4MjIwOzxzcGFuIGNsYXNzPVwiaXRcIj5pbiBmdWxsIGNvbmZpZGVuY2U8L3NwYW4+IHRoYXQgc2hlIHdvdWxkIGRvIHdoYXQgd2FzIHJpZ2h0IGFzIHRvIHRoZSBkaXNwb3NhbCB0aGVyZW9mIGJldHdlZW4gbXkgY2hpbGRyZW4mIzgyMjE7PyIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVGhyZWUgQ2VydGFpbnRpZXMiLAogICAgICAgICJDZXJ0YWludHkgb2YgSW50ZW50aW9uIiwKICAgICAgICAiUHJlY2F0b3J5IFdvcmRzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiVGhyZWUgQ2VydGFpbnRpZXMgJm1kYXNoOyBDZXJ0YWludHkgb2YgSW50ZW50aW9uICZtZGFzaDsgUHJlY2F0b3J5IFdvcmRzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBBZGFtcyBhbmQgS2Vuc2luZ3RvbiBWZXN0cnkiLAogICAgICAgICJSZSBIYW1pbHRvbiIsCiAgICAgICAgIlJlIERpZ2dsZXMiLAogICAgICAgICJDb21pc2tleSB2IEJvd3JpbmctSGFuYnVyeSIsCiAgICAgICAgIlJlIFN0ZWVsZSdzIFdUIiwKICAgICAgICAiUmUgQ2hhbGxvbm5lciBDbHViIiwKICAgICAgICAiUmUgS2F5Zm9yZCIsCiAgICAgICAgIlBhdWwgdiBDb25zdGFuY2UiLAogICAgICAgICJSZSBHb2xheSIsCiAgICAgICAgIlJlIEdvbGRjb3JwIiwKICAgICAgICAiV3JpZ2h0IHYgQXRreW5zIiwKICAgICAgICAiUGFsbWVyIHYgU2ltbW9uZHMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJBIHByb3Zpc2lvbiBpbiBhIHdpbGwgdGhhdCBsZWZ0IHByb3BlcnR5IHRvIHRoZSB0ZXN0YXRvciYjODIxNztzIHdpZmUgJiM4MjIwO3RvIGJlIGF0IGhlciBkaXNwb3NhbCA8c3BhbiBjbGFzcz1cImJkXCI+aW4gYW55IHdheSBzaGUgbWF5IHRoaW5rIGJlc3Q8L3NwYW4+IGZvciB0aGUgYmVuZWZpdCBvZiBoZXJzZWxmIGFuZCBoZXIgZmFtaWx5JiM4MjIxOyBoYWQgbm90IHN1Y2Nlc3NmdWxseSBlc3RhYmxpc2hlZCBhIHRydXN0LiBPYml0ZXIsIHRoYXQgdGhlIHF1ZXN0aW9uIG9mIHdoZXRoZXIgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+cHJlY2F0b3J5IHdvcmRzPC9zcGFuPiB2aXRpYXRlIHRoZSBlc3RhYmxpc2htZW50IG9mIGEgdHJ1c3QgaXMgZm9yIHRoZSBqdWRnZS4iCiAgICBdLAogICAgIk5BTUUiOiAiTGFtYmUgdiBFYW1lcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVGhyZWUgQ2VydGFpbnRpZXMiLAogICAgICAgICJDZXJ0YWludHkgb2YgSW50ZW50aW9uIiwKICAgICAgICAiUHJlY2F0b3J5IFdvcmRzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiVGhyZWUgQ2VydGFpbnRpZXMgJm1kYXNoOyBDZXJ0YWludHkgb2YgSW50ZW50aW9uICZtZGFzaDsgUHJlY2F0b3J5IFdvcmRzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJMYW1iZSB2IEVhbWVzIiwKICAgICAgICAiUmUgQWRhbXMgYW5kIEtlbnNpbmd0b24gVmVzdHJ5IiwKICAgICAgICAiUmUgU3RlZWxlJ3MgV1QiLAogICAgICAgICJSZSBEaWdnbGVzIiwKICAgICAgICAiQ29taXNrZXkgdiBCb3dyaW5nLUhhbmJ1cnkiLAogICAgICAgICJSZSBDaGFsbG9ubmVyIENsdWIiLAogICAgICAgICJQYXVsIHYgQ29uc3RhbmNlIiwKICAgICAgICAiUmUgS2F5Zm9yZCIsCiAgICAgICAgIldoaXRlIHYgU2hvcnRoYWxsIiwKICAgICAgICAiUmUgQmFkZW4gKG5vLiAyKSIsCiAgICAgICAgIkhvbGxhbmQgdiBOZXdidXJ5IiwKICAgICAgICAiUGVhcnNvbiB2IExlaG1hbiBCcm9zIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTQiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIxODk1IiwKICAgICJOQU1FIjogIlJlIEhhbWlsdG9uIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaHJlZSBDZXJ0YWludGllcyIsCiAgICAgICAgIkNlcnRhaW50eSBvZiBJbnRlbnRpb24iLAogICAgICAgICJQcmVjYXRvcnkgV29yZHMiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJQZXJzdWFzaXZlIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJSZSBIYW1pbHRvbiBbMTg5NV0gMiBDaCAzNzAiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlByZWNhdG9yeSB3b3JkcyBtdXN0IGJlIHJlYWQgaW4gdGhlIGNvbnRleHQgb2YgdGhlIHdob2xlIHdpbGwgYmVmb3JlIGRlY2lkaW5nIHdoZXRoZXIgb3Igbm90IHRoZXkgY3JlYXRlIGEgdHJ1c3QuIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiVGhyZWUgQ2VydGFpbnRpZXMgJm1kYXNoOyBDZXJ0YWludHkgb2YgSW50ZW50aW9uICZtZGFzaDsgUHJlY2F0b3J5IFdvcmRzICZtZGFzaDsgQm9pbGVycGxhdGUiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkxhbWJlIHYgRWFtZXMiLAogICAgICAgICJDb21pc2tleSB2IEJvd3JpbmctSGFuYnVyeSIsCiAgICAgICAgIlJlIEhhbWlsdG9uIiwKICAgICAgICAiUmUgRGlnZ2xlcyIsCiAgICAgICAgIlJlIEFkYW1zIGFuZCBLZW5zaW5ndG9uIFZlc3RyeSIsCiAgICAgICAgIlJlIENoYWxsb25uZXIgQ2x1YiIsCiAgICAgICAgIlJlIEtheWZvcmQiLAogICAgICAgICJQYXVsIHYgQ29uc3RhbmNlIiwKICAgICAgICAiSG9sbGFuZCB2IE5ld2J1cnkiLAogICAgICAgICJSZSBHb2xheSIsCiAgICAgICAgIldyaWdodCB2IEF0a3lucyIsCiAgICAgICAgIk1jUGhhaWwgdiBEb3VsdG9uIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTUiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIxOTQ4IiwKICAgICJOQU1FIjogIlJlIFN0ZWVsZSdzIFdUIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaHJlZSBDZXJ0YWludGllcyIsCiAgICAgICAgIkNlcnRhaW50eSBvZiBJbnRlbnRpb24iLAogICAgICAgICJQcmVjYXRvcnkgV29yZHMiLAogICAgICAgICJCb2lsZXJwbGF0ZSIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIlBlcnN1YXNpdmUiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIlJlIFN0ZWVsZSYjODIxNztzIFdpbGwgVHJ1c3QgWzE5NDhdIiwKICAgICJIRUxEIjogWwogICAgICAgICJXeW5uLVBhcnJ5IExKICZtZGFzaDsgY29weWluZyBmcm9tIGEgd2lsbCB0aGF0IDxzcGFuIGNsYXNzPVwiaXRcIj5oYWQ8L3NwYW4+IGJlZW4gaGVsZCB0byBiZSBhIHRydXN0IGVsc2V3aGVyZSA8c3BhbiBjbGFzcz1cIml0XCI+ZGlkIGluZGVlZDwvc3Bhbj4gZXN0YWJsaXNoIGEgdHJ1c3QsIGFzIGRvaW5nIHNvIGNsZWFybHkgZXN0YWJsaXNoZXMgaW50ZW50aW9uIHRvIGNyZWF0ZSBhIHRydXN0LiIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSB3aWxsIGhhZCBiZWVuIGRyYWZ0ZWQgYnkgY29weWluZyBmcm9tIGFub3RoZXIgdGhhdCBoYWQgYmVlbiBoZWxkIGluIGNvdXJ0IHRvIGVzdGFibGlzaCBhIHRydXN0LiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRocmVlIENlcnRhaW50aWVzICZtZGFzaDsgQ2VydGFpbnR5IG9mIEludGVudGlvbiAmbWRhc2g7IFByZWNhdG9yeSBXb3JkcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgQWRhbXMgYW5kIEtlbnNpbmd0b24gVmVzdHJ5IiwKICAgICAgICAiUmUgU3RlZWxlJ3MgV1QiLAogICAgICAgICJSZSBIYW1pbHRvbiIsCiAgICAgICAgIkNvbWlza2V5IHYgQm93cmluZy1IYW5idXJ5IiwKICAgICAgICAiTGFtYmUgdiBFYW1lcyIsCiAgICAgICAgIlBhdWwgdiBDb25zdGFuY2UiLAogICAgICAgICJSZSBLYXlmb3JkIiwKICAgICAgICAiUmUgQ2hhbGxvbm5lciBDbHViIiwKICAgICAgICAiSHVudGVyIHYgTW9zcyIsCiAgICAgICAgIlBhbG1lciB2IFNpbW1vbmRzIiwKICAgICAgICAiU3ByYW5nZSB2IEJhcm5hcmQiLAogICAgICAgICJIb2xsYW5kIHYgTmV3YnVyeSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE2IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTg4OCIsCiAgICAiTkFNRSI6ICJSZSBEaWdnbGVzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaHJlZSBDZXJ0YWludGllcyIsCiAgICAgICAgIkNlcnRhaW50eSBvZiBJbnRlbnRpb24iLAogICAgICAgICJQcmVjYXRvcnkgV29yZHMiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJQZXJzdWFzaXZlIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJSZSBEaWdnbGVzICgxODg4KSAzOSBDaCBEIDI1MyIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJpdFwiPkRlc2lyZTwvc3Bhbj4gJm1kYXNoOyBwcmVjYXRvcnkgd29yZHMuLiBldGMuIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiVGhyZWUgQ2VydGFpbnRpZXMgJm1kYXNoOyBDZXJ0YWludHkgb2YgSW50ZW50aW9uICZtZGFzaDsgUHJlY2F0b3J5IFdvcmRzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBTdGVlbGUncyBXVCIsCiAgICAgICAgIlJlIERpZ2dsZXMiLAogICAgICAgICJMYW1iZSB2IEVhbWVzIiwKICAgICAgICAiUmUgQWRhbXMgYW5kIEtlbnNpbmd0b24gVmVzdHJ5IiwKICAgICAgICAiUmUgSGFtaWx0b24iLAogICAgICAgICJSZSBDaGFsbG9ubmVyIENsdWIiLAogICAgICAgICJSZSBLYXlmb3JkIiwKICAgICAgICAiUGF1bCB2IENvbnN0YW5jZSIsCiAgICAgICAgIkluIHRoZSBFc3RhdGUgb2YgTGFzdCIsCiAgICAgICAgIlJlIEJhZGVuIChuby4gMikiLAogICAgICAgICJNY1BoYWlsIHYgRG91bHRvbiIsCiAgICAgICAgIldyaWdodCB2IEF0a3lucyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE3IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNPVVJUIjogIlVLSEwiLAogICAgIllFQVIiOiAiMTkwNSIsCiAgICAiTkFNRSI6ICJDb21pc2tleSB2IEJvd3JpbmctSGFuYnVyeSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVGhyZWUgQ2VydGFpbnRpZXMiLAogICAgICAgICJDZXJ0YWludHkgb2YgSW50ZW50aW9uIiwKICAgICAgICAiUHJlY2F0b3J5IFdvcmRzIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJDb21pc2tleSB2IEJvd3JpbmctSGFuYnVyeSAoMTkwNSkiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkZyb20gdGhlIHdvcmQgJiM4MjE2O2Fic29sdXRlbHksJiM4MjE3OyBpbiAmIzgyMTY7YWJzb2x1dGVseSBpbiBmdWxsIGNvbmZpZGVuY2UsJiM4MjE3OyBhbiBpbmZlcmVuY2UgY291bGQgYmUgZHJhd24gdGhhdCB0aGUgdGVzdGF0b3Igd2FzIG5vdCBtZXJlbHkgZXhwcmVzc2luZyBhIHdpc2gsIGJ1dCByZWZlcnJpbmcgdG8gYW4gZXhpc3RpbmcgYXJyYW5nZW1lbnQuIiwKICAgICAgICAiTG9yZCBKYW1lcyAmbWRhc2g7ICYjODIxNjsuLi4gSSBjYW4gcXVpdGUgY29uY2VpdmUgdGhhdCwgdGhlIHdvcmQgXHUyMDFjYWJzb2x1dGVseVx1MjAxZCBiZWluZyB1c2VkLCB3ZSBoYXZlIHRvIGZpbmQgc29tZSByZWFzb24gd2h5IGluIHRoZSBmaXJzdCBkaXNwb3NpdGlvbiBoZSBzaG91bGQgaGF2ZSB1c2VkIHRoZSB3b3JkIFx1MjAxY2Fic29sdXRlbHksXHUyMDFkIC4uLiYjODIxNzsiCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkRpZCB0aGUgd29yZHMgJiM4MjE2O2Fic29sdXRlbHkgaW4gZnVsbCBjb25maWRlbmNlJiM4MjE3OyBjcm9zcyB0aGUgbGluZSBmcm9tIG1lcmVseSBwcmVjYXRvcnkgPHNwYW4gY2xhc3M9XCJpdFwiPmRlc2lyZTwvc3Bhbj4gdG8gYWN0dWFsIDxzcGFuIGNsYXNzPVwiaXRcIj5pbnRlbnRpb248L3NwYW4+PyIsCiAgICAgICAgIiYjODIxNjtJIGdpdmUsIGJlcXVlYXRoIGFuZCBkZXZpc2UgdG8gbXkgdmVyeSBkZWFyIHdpZmUgdGhlIHdob2xlIG9mIG15IHJlYWwgYW5kIHBlcnNvbmFsIGVzdGF0ZSBhbmQgcHJvcGVydHkgPHNwYW4gY2xhc3M9XCJiZFwiPmFic29sdXRlbHkgaW4gZnVsbCBjb25maWRlbmNlPC9zcGFuPiBsZWZ0IGhpcyBlc3RhdGUgdG8gaGlzIHdpZmUgJiM4MjE2O2luIGZ1bGwgY29uZmlkZW5jZSB0aGF0IHNoZSB3aWxsIG1ha2Ugc3VjaCB1c2Ugb2YgaXQgYXMgSSBzaG91bGQgaGF2ZSBtYWRlIG15c2VsZiBhbmQgdGhhdCBhdCBoZXIgZGVhdGggc2hlIHdpbGwgZGV2aXNlIGl0IHRvIHN1Y2ggb25lIG9yIG1vcmUgb2YgbXkgbmllY2VzIGFzIHNoZSBtYXkgdGhpbmsgZml0IGFuZCBpbiBkZWZhdWx0IG9mIGFueSBkaXNwb3NpdGlvbiBieSBoZXIgdGhlcmVvZiBieSBoZXIgd2lsbC4uLiBJIGhlcmVieSBkaXJlY3QgdGhhdCBhbGwgbXkgZXN0YXRlIGFuZCBwcm9wZXJ0eSBhY3F1aXJlZCBieSBoZXIgdW5kZXIgdGhpcyBteSB3aWxsIHNoYWxsIGF0IGhlciBkZWF0aCBiZSBlcXVhbGx5IGRpdmlkZWQgYW1vbmcgdGhlIHN1cnZpdmluZyBzYWlkIG5pZWNlcy4mIzgyMTc7IgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiVGhyZWUgQ2VydGFpbnRpZXMgJm1kYXNoOyBDZXJ0YWludHkgb2YgSW50ZW50aW9uICZtZGFzaDsgVGhlIHdvcmQgJ1RydXN0JyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgQWRhbXMgYW5kIEtlbnNpbmd0b24gVmVzdHJ5IiwKICAgICAgICAiUmUgU3RlZWxlJ3MgV1QiLAogICAgICAgICJDb21pc2tleSB2IEJvd3JpbmctSGFuYnVyeSIsCiAgICAgICAgIlJlIENoYWxsb25uZXIgQ2x1YiIsCiAgICAgICAgIlJlIERpZ2dsZXMiLAogICAgICAgICJQYXVsIHYgQ29uc3RhbmNlIiwKICAgICAgICAiTGFtYmUgdiBFYW1lcyIsCiAgICAgICAgIlJlIEhhbWlsdG9uIiwKICAgICAgICAiUGFsbWVyIHYgU2ltbW9uZHMiLAogICAgICAgICJSZSBMb25kb24gV2luZSIsCiAgICAgICAgIldyaWdodCB2IEF0a3lucyIsCiAgICAgICAgIk1jUGhhaWwgdiBEb3VsdG9uIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTgiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ09VUlQiOiAiRVdIQyIsCiAgICAiWUVBUiI6ICIxOTc1IiwKICAgICJOQU1FIjogIlJlIEtheWZvcmQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRocmVlIENlcnRhaW50aWVzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIEludGVudGlvbiIsCiAgICAgICAgIlRoZSB3b3JkICdUcnVzdCciCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJNZWdhcnJ5IgogICAgXSwKICAgICJDSVRBVElPTiI6ICJSZSBLYXlmb3JkIChJbiBMaXF1aWRhdGlvbikgWzE5NzVdIDEgV0xSIDI3OSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiT3BlbmluZyBhbmQgcHV0dGluZyBtb25leSBpbiBhbiBhY2NvdW50IG5hbWVkICYjODIxNjtDdXN0b21lcnMmIzgyMTc7IFRydXN0IERlcG9zaXQgQWNjb3VudCwmIzgyMTc7IHdhcywgaW4gdGhlIGNpcmNzIG9mIG9taW5vdXMgZmluYW5jZXMsIGVub3VnaCB0byBlc3RhYmxpc2ggaW50ZW50aW9uIHRvIGNyZWF0ZSBhIHRydXN0ICh3aXRoIGNvbXBhbnkgYXMgYm90aCBzZXR0bG9yIGFuZCB0cnVzdGVlIHdpdGggY3VzdG9tZXJzIGFzIGJlbmVmaWNpYXJpZXMpLiIsCiAgICAgICAgIkNpdGVkIGluIHRoZSBsYXRlciBjYXNlIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIENoYWxsb25uZXIgQ2x1Yjwvc3Bhbj4uIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJXb3JyaWVkIHRoYXQgdGhlaXIgY29tcGFueSBnb2luZyBidXN0LCBidXQga2VlbiB0byBkbyB0aGUgaG9ub3VyYWJsZSB0aGluZywgYSBzZXBhcmF0ZSBiYW5rIGFjY291bnQgbmFtZWQgJiM4MjE2O0N1c3RvbWVyc1x1MjAxOSBUcnVzdCBEZXBvc2l0IEFjY291bnQmIzgyMTc7IHdhcyBvcGVuZWQsIGludG8gd2hpY2ggd2VyZSBwYWlkIGFsbCBuZXcgY3VzdG9tZXJzJiM4MjE3OyBtb25pZXMgJm1kYXNoOyB3aGljaCB0aGV5IGNvbnRpbnVlZCB0byBhY2NlcHQgaW4gdGhlIGhvcGUgb2YgcmVzY3VpbmcgdGhlIGJ1c2luZXNzLiBXaGVuIGl0IGRpZCBpbmRlZWQgZ28gYnVzdCwgd2FzIHRoZSBtb25leSB0byBiZSBjb25zaWRlcmVkIGFzc2V0cyB0byBiZSBkaXZ2aWVkIHVwIGFtb25nc3QgdGhlIGNyZWRpdG9ycywgb3IgaGFkIGEgdHJ1c3QgdGhlIGxpcXVpZGF0b3IgY291bGRuJiM4MjE3O3QgdG91Y2ggYmVlbiBlc3RhYmxpc2hlZD8iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaHJlZSBDZXJ0YWludGllcyAmbWRhc2g7IENlcnRhaW50eSBvZiBJbnRlbnRpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIERpZ2dsZXMiLAogICAgICAgICJDb21pc2tleSB2IEJvd3JpbmctSGFuYnVyeSIsCiAgICAgICAgIlJlIEtheWZvcmQiLAogICAgICAgICJSZSBTdGVlbGUncyBXVCIsCiAgICAgICAgIlJlIEFkYW1zIGFuZCBLZW5zaW5ndG9uIFZlc3RyeSIsCiAgICAgICAgIlJlIEhhbWlsdG9uIiwKICAgICAgICAiTGFtYmUgdiBFYW1lcyIsCiAgICAgICAgIlBhdWwgdiBDb25zdGFuY2UiLAogICAgICAgICJSZSBMb25kb24gV2luZSIsCiAgICAgICAgIkJveWNlIHYgQm95Y2UiLAogICAgICAgICJJbiB0aGUgRXN0YXRlIG9mIExhc3QiLAogICAgICAgICJQZWFyc29uIHYgTGVobWFuIEJyb3MiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxOSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDT1VSVCI6ICJFV0hDIiwKICAgICJZRUFSIjogIjE5OTciLAogICAgIk5BTUUiOiAiUmUgQ2hhbGxvbm5lciBDbHViIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaHJlZSBDZXJ0YWludGllcyIsCiAgICAgICAgIkNlcnRhaW50eSBvZiBJbnRlbnRpb24iCiAgICBdLAogICAgIkNJVEFUSU9OIjogIlJlIENoYWxsb25uZXIgQ2x1YiBMdGQgKEluIExpcXVpZGF0aW9uKSBbMTk5N10iLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFtYmlndWl0eSBhbmQgZGlzY3JlcGFuY3kgaW4gdGhlIGNvbmRpdGlvbnMgdW5kZXIgd2hpY2ggbW9uZXkgc2VwYXJhdGVkIG9mZiBmcm9tIGEgY29tcGFueSYjODIxNztzIG1haW4gZnVuZHMgaW4gb3JkZXIgdG8gYXR0ZW1wdCB0byBwcm90ZWN0IGl0IGZyb20gY3JlZGl0b3JzLCBpZiB0aGUgY29tcGFueSB3ZW50IGJhbmtydXB0LCB3YXMgZW5vdWdoIHRvIGRlZmVhdCB0aGUgY2xhaW0gdGhhdCBhbiBleHByZXNzIHRydXN0IGhhZCBiZWVuIGNyZWF0ZWQuIiwKICAgICAgICAiRGlzdGluZ3Vpc2hlZCBmcm9tIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEtheWZvcmQ8L3NwYW4+LiIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBjb21wYW55IHJ1bm5pbmcgYSBjbHViLCB3b3JyaWVkIGZvciBpdHMgZmluYW5jaWFsIGZ1dHVyZSwgZGVjaWRlZCB0byBzb2xpY2l0IGRvbmF0aW9ucyBhbmQgaW5jcmVhc2VkIHN1YnNjcmlwdGlvbnMsIHRvIGJlIHBhaWQgaW50byBhIHNlcGFyYXRlIGJhbmsgYWNjb3VudC4gVGhlIGNvbXBhbnkgdGhlbiB3ZW50IGluc29sdmVudDsgdGhlIGFkbWluaXN0cmF0b3IgYXNrZWQgZm9yIGRpcmVjdGlvbiBhYm91dCB3aGV0aGVyIHRoZSBtb25pZXMgaW4gdGhlIHNlcGFyYXRlIGFjY291bnQgd2VyZSB0byBiZSBjb25zaWRlcmVkIGFzc2V0cy4iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaHJlZSBDZXJ0YWludGllcyAmbWRhc2g7IENlcnRhaW50eSBvZiBTdWJqZWN0ICZtZGFzaDsgSWRlbnRpZmljYXRpb24gb2YgVHJ1c3QgUHJvcGVydHkiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiUGFsbWVyIHYgU2ltbW9uZHMgKDE4NTQpIDIgRHJldyAyMjEiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlNwcmFuZ2UgdiBCYXJuYXJkIiwKICAgICAgICAiQm95Y2UgdiBCb3ljZSIsCiAgICAgICAgIkluIHRoZSBFc3RhdGUgb2YgTGFzdCIsCiAgICAgICAgIlJlIEdvbGF5IiwKICAgICAgICAiUGVhcnNvbiB2IExlaG1hbiBCcm9zIiwKICAgICAgICAiV2hpdGUgdiBTaG9ydGhhbGwiLAogICAgICAgICJIdW50ZXIgdiBNb3NzIiwKICAgICAgICAiSG9sbGFuZCB2IE5ld2J1cnkiLAogICAgICAgICJSZSBHb2xkY29ycCIsCiAgICAgICAgIlJlIExvbmRvbiBXaW5lIiwKICAgICAgICAiUmUgU3RlZWxlJ3MgV1QiLAogICAgICAgICJSZSBLYXlmb3JkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjAiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgdHJ1c3Qgd2lsbCBub3QgYmUgdXBoZWxkIGlmIHRoZSBkZXNjcmlwdGlvbiBpcyB2YWd1ZS4gQSB3aWxsIGF0dGVtcHRpbmcgdG8gZXN0YWJsaXNoIGEgdHJ1c3QgZm9yICYjODIxNjt0aGUgYnVsayBvZiYjODIxNzsgYW4gZXN0YXRlIHdhcyA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiB1cGhlbGQuIiwKICAgICAgICAiVGhlIHdvcmQgJiM4MjE2O2J1bGsmIzgyMTc7IHNwcmVhZHMgb3ZlciBmYXIgdG9vIG11Y2ggb2YgdGhlIHF1YW50aXRhdGl2ZSBzZW1hbnRpYyBzcGVjdHJ1bSwganVzdCBsaWtlICYjODIxNjtzaGl0IGxvYWQsJiM4MjE3OyBvciAmIzgyMTY7YSBmdWNrIG9mIGEgbG90IG9mLiYjODIxNzsgQWNjb3JkaW5nIHRvIHRoZSBqdWRnZSwgYSAmIzgyMTY7YnVsayYjODIxNzsgd2FzIGEgJiM4MjE2O3RoaW5nIHRoYXQgYnVsZ2VzIG91dC4mIzgyMTc7IDxzcGFuIGNsYXNzPVwiaXRcIj5PbyBlcnIsIHF1aXRlIHBsYWlubHksIG1pc3N1cy48L3NwYW4+IgogICAgXSwKICAgICJZRUFSIjogIjE4NTQiLAogICAgIk5BTUUiOiAiUGFsbWVyIHYgU2ltbW9uZHMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRocmVlIENlcnRhaW50aWVzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIFN1YmplY3QiLAogICAgICAgICJJZGVudGlmaWNhdGlvbiBvZiBUcnVzdCBQcm9wZXJ0eSIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRocmVlIENlcnRhaW50aWVzICZtZGFzaDsgQ2VydGFpbnR5IG9mIFN1YmplY3QgJm1kYXNoOyBJZGVudGlmaWNhdGlvbiBvZiBUcnVzdCBQcm9wZXJ0eSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgR29sYXkiLAogICAgICAgICJQYWxtZXIgdiBTaW1tb25kcyIsCiAgICAgICAgIlBlYXJzb24gdiBMZWhtYW4gQnJvcyIsCiAgICAgICAgIkluIHRoZSBFc3RhdGUgb2YgTGFzdCIsCiAgICAgICAgIkJveWNlIHYgQm95Y2UiLAogICAgICAgICJXaGl0ZSB2IFNob3J0aGFsbCIsCiAgICAgICAgIkhvbGxhbmQgdiBOZXdidXJ5IiwKICAgICAgICAiUmUgTG9uZG9uIFdpbmUiLAogICAgICAgICJIdW50ZXIgdiBNb3NzIiwKICAgICAgICAiUmUgR29sZGNvcnAiLAogICAgICAgICJSZSBIYW1pbHRvbiIsCiAgICAgICAgIlJlIEFkYW1zIGFuZCBLZW5zaW5ndG9uIFZlc3RyeSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIxIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTc4OSIsCiAgICAiTkFNRSI6ICJTcHJhbmdlIHYgQmFybmFyZCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVGhyZWUgQ2VydGFpbnRpZXMiLAogICAgICAgICJDZXJ0YWludHkgb2YgU3ViamVjdCIsCiAgICAgICAgIklkZW50aWZpY2F0aW9uIG9mIFRydXN0IFByb3BlcnR5IgogICAgXSwKICAgICJDSVRBVElPTiI6ICJTcHJhbmdlIHYgQmFybmFyZCAoMTc4OSkiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgZGVzY3JpcHRpb24gb2YgdGhlIHN1YmplY3Qgb2YgYSB0cnVzdCB3aGljaCBsZWF2ZXMgb3BlbiB0aGUgcG9zc2liaWxpdHkgb2YgPHNwYW4gY2xhc3M9XCJpdFwiPmNvbnRhaW5pbmcgbm8gcHJvcGVydHkgYXQgYWxsPC9zcGFuPiwgd2lsbCBmYWlsIGZvciBhIGxhY2sgb2YgY2VydGFpbnR5IG9mIHN1YmplY3QuIiwKICAgICAgICAiVGhlIGRlc2NyaXB0aW9uIGFsbG93ZWQgdGhhdCB0aGUgaHVzYmFuZCBtaWdodCB3YW50IGFsbCB0aGUgcHJvcGVydHkuIFRoaXMgd2FzIGhlbGQgdG8gYmUgdGhhdCB0aGUgaHVzYmFuZCBoYWQgYmVuZWZpY2lhcnkgaW50ZXJlc3QgZm9yIGxpZmUsIGF0IHdoaWNoIHBvaW50IHRoZSByZW1haW5kZXIgd2VudCB0byB0aGUgbmFtZWQgYmVuZWZpY2lhcnkvaWVzLiIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSB3aWxsIHRyaWVkIHRvIGVzdGFibGlzaCBhIHRydXN0IGZvciB0aGUgJiM4MjE2O3JlbWFpbmluZyBwYXJ0IG9mIHdoYXQgaXMgbGVmdCwgdGhhdCBbbXkgaHVzYmFuZF0gZG9lc24mIzgyMTc7dCB3YW50IGZvciBoaXMgb3duIHdhbnRzIGFuZCB1c2VzLiYjODIxNzsiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaHJlZSBDZXJ0YWludGllcyAmbWRhc2g7IENlcnRhaW50eSBvZiBTdWJqZWN0ICZtZGFzaDsgSWRlbnRpZmljYXRpb24gb2YgVHJ1c3QgUHJvcGVydHkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkJveWNlIHYgQm95Y2UiLAogICAgICAgICJQYWxtZXIgdiBTaW1tb25kcyIsCiAgICAgICAgIkluIHRoZSBFc3RhdGUgb2YgTGFzdCIsCiAgICAgICAgIlBlYXJzb24gdiBMZWhtYW4gQnJvcyIsCiAgICAgICAgIldoaXRlIHYgU2hvcnRoYWxsIiwKICAgICAgICAiU3ByYW5nZSB2IEJhcm5hcmQiLAogICAgICAgICJIdW50ZXIgdiBNb3NzIiwKICAgICAgICAiUmUgR29sZGNvcnAiLAogICAgICAgICJSZSBMb25kb24gV2luZSIsCiAgICAgICAgIkhvbGxhbmQgdiBOZXdidXJ5IiwKICAgICAgICAiUmUgSGFtaWx0b24iLAogICAgICAgICJXcmlnaHQgdiBBdGt5bnMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIyMiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjE5NjUiLAogICAgIk5BTUUiOiAiUmUgR29sYXkiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRocmVlIENlcnRhaW50aWVzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIFN1YmplY3QiLAogICAgICAgICJJZGVudGlmaWNhdGlvbiBvZiBUcnVzdCBQcm9wZXJ0eSIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkNyaXRpY2lzZWQiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIlJlIEdvbGF5JiM4MjE3O3MgV1RzIFsxOTY1XSAxIFdMUiA5NjkiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgd2lsbCBsZWF2aW5nIHNvbWVvbmUgYSA8c3BhbiBjbGFzcz1cIml0XCI+cmVhc29uYWJsZSBpbmNvbWU8L3NwYW4+IGFuZCB0aGUgcmlnaHQgdG8gbGl2ZSBpbiA8c3BhbiBjbGFzcz1cIml0XCI+b25lIG9mPC9zcGFuPiB0aGUgdGVzdGF0b3ImIzgyMTc7cyBmbGF0cywgd2l0aG91dCBzcGVjaWZ5aW5nIHdoaWNoLCB3YXMgPHNwYW4gY2xhc3M9XCJpdFwiPnVwaGVsZDwvc3Bhbj4uIiwKICAgICAgICAiVGhpcyBhbGwgd2VudCBvbiB0aGUgYWN0dWFyaWFsIHRhYmxlcy4gTm8gb25lIHdhcyBoYXBweSBhYm91dCBpdC4iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRoZSB3aWxsIGhhZCBwcm92aWRlZCB0aGUgYmVuZWZpY2lhcnkgJm1kYXNoOyBuYW1lIG9mIFRvc3NpLCBhcHBhcmVudGx5IHRoZSB0ZXN0YXRvciYjODIxNztzIDxzcGFuIGNsYXNzPVwiaXRcIj5iaXQgb2YgY3J1bXBldDwvc3Bhbj4gJm1kYXNoOyB0aGUgdXNlIG9mIDxzcGFuIGNsYXNzPVwiaXRcIj5vbmUgb2Y8L3NwYW4+IGhpcyBmbGF0cywgZHVyaW5nIGhlciBsaWZldGltZTsgYW5kIGEgPHNwYW4gY2xhc3M9XCJpdFwiPnJlYXNvbmFibGUgaW5jb21lPC9zcGFuPiBmcm9tIG90aGVyIHByb3BlcnRpZXMuIFdoYXQgd2FzIHRoYXQgc3VwcG9zZWQgdG8gbWVhbj8gVXN1YWxseSwgd2hhdCB0aGUganVkZ2UgaGFwcGVucyB0byB0aGluay4iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaHJlZSBDZXJ0YWludGllcyAmbWRhc2g7IENlcnRhaW50eSBvZiBTdWJqZWN0ICZtZGFzaDsgU2VncmVnYXRpb24gb2YgQ2hhdHRlbHMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIEdvbGRjb3JwIiwKICAgICAgICAiUGVhcnNvbiB2IExlaG1hbiBCcm9zIiwKICAgICAgICAiUGFsbWVyIHYgU2ltbW9uZHMiLAogICAgICAgICJTcHJhbmdlIHYgQmFybmFyZCIsCiAgICAgICAgIkluIHRoZSBFc3RhdGUgb2YgTGFzdCIsCiAgICAgICAgIldoaXRlIHYgU2hvcnRoYWxsIiwKICAgICAgICAiQm95Y2UgdiBCb3ljZSIsCiAgICAgICAgIkh1bnRlciB2IE1vc3MiLAogICAgICAgICJSZSBHb2xheSIsCiAgICAgICAgIkhvbGxhbmQgdiBOZXdidXJ5IiwKICAgICAgICAiUmUgQWRhbXMgYW5kIEtlbnNpbmd0b24gVmVzdHJ5IiwKICAgICAgICAiUGF1bCB2IENvbnN0YW5jZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNPVVJUIjogIkVXSEMiLAogICAgIllFQVIiOiAiMTk4NiIsCiAgICAiTkFNRSI6ICJSZSBMb25kb24gV2luZSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVGhyZWUgQ2VydGFpbnRpZXMiLAogICAgICAgICJDZXJ0YWludHkgb2YgU3ViamVjdCIsCiAgICAgICAgIlNlZ3JlZ2F0aW9uIG9mIENoYXR0ZWxzIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiTGVhZGluZyIsCiAgICAgICAgIkltcG9ydGFudCIKICAgIF0sCiAgICAiQ09NTUVOVCI6ICJUaGUgd2F5IHRvIHNlZSB0aGlzIGFzIGNvbnNpc3RlbnQgd2l0aCB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SHVudGVyIHYgTW9zczwvc3Bhbj4gaXMgdGhhdCBib3R0bGVzIG9mIHRoZSBzYW1lIHZpbnRhZ2UgZnJvbSB0aGUgc2FtZSBwcm9kdWNlciBtYXkgbG9vayBpZGVudGljYWwsIGJ1dCBtYXkgYmUgb2YgZGlmZmVyZW50IHF1YWxpdHk6IHNvbWUgbWF5IGJlIGNvcmtlZCwgb3RoZXJzIG1heSBub3QuIEEgc2ltaWxhciBjbGFpbSBjb3VsZCBub3QgYmUgbWFkZSBvZiBzaGFyZXMuIFNlZSBhbHNvIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEdvbGRjb3JwPC9zcGFuPi4iLAogICAgIkNJVEFUSU9OIjogIlJlIExvbmRvbiBXaW5lIENvIChTaGlwcGVycykgWzE5ODZdIFBDQyAxMjEiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlBoeXNpY2FsIHNlZ3JlZ2F0aW9uIG9mIGNoYXR0ZWxzIGlzIG5lY2Vzc2FyeSB0byBpZGVudGlmeSB0aGUgcHJvcGVydHkgb2YgYSB0cnVzdCwgc28gdGhlIGF0dGVtcHQgdG8gZXN0YWJsaXNoIGEgdHJ1c3QgYnkgdGhlIHB1cmNoYXNlcnMgZmFpbGVkLiIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBjb21wYW55IHNlbGxpbmcgd2luZSB0byBpbnZlc3RvcnMgd2VudCBpbnRvIGFkbWluaXN0cmF0aW9uLiBUaGUgaWRlYSB3YXMgdGhlIHdpbmUgd291bGQgcmVtYWluIGluIHRoZSBjb21wYW55JiM4MjE3O3Mgd2FyZWhvdXNlcywgYW5kIHRoZSBvd25lciB3b3VsZCBnZXQgYSBkb2N1bWVudCBvZiB0aXRsZS4gVGhlIGxvY2F0aW9uIG9mIGVhY2ggY3VzdG9tZXImIzgyMTc7cyB3aW5lIGluIHRoZSB3YXJlaG91c2VzIHdhcyBrZXB0IHRyYWNrIG9mLCBidXQgbm90IGluIHRlcm1zIG9mIHdoaWNoIGN1c3RvbWVyIG93bmVkIHdoaWNoIGNhc2VzIGF0IGEgZ2l2ZW4gbG9jYXRpb24sIGxvY2F0aW9uIGlkZW50aWZ5aW5nIGEgbnVtYmVyIG9mIGNhc2VzIG9mIGEgcGFydGljdWxhciB2aW50YWdlLiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRocmVlIENlcnRhaW50aWVzICZtZGFzaDsgQ2VydGFpbnR5IG9mIFN1YmplY3QgJm1kYXNoOyBJZGVudGlmaWNhdGlvbiBvZiBUcnVzdCBQcm9wZXJ0eSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJJbiB0aGUgRXN0YXRlIG9mIExhc3QgWzE5NThdIFAgMTEzNyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiU3ByYW5nZSB2IEJhcm5hcmQiLAogICAgICAgICJQZWFyc29uIHYgTGVobWFuIEJyb3MiLAogICAgICAgICJQYWxtZXIgdiBTaW1tb25kcyIsCiAgICAgICAgIldoaXRlIHYgU2hvcnRoYWxsIiwKICAgICAgICAiUmUgR29sYXkiLAogICAgICAgICJCb3ljZSB2IEJveWNlIiwKICAgICAgICAiSG9sbGFuZCB2IE5ld2J1cnkiLAogICAgICAgICJSZSBHb2xkY29ycCIsCiAgICAgICAgIkh1bnRlciB2IE1vc3MiLAogICAgICAgICJSZSBMb25kb24gV2luZSIsCiAgICAgICAgIlJlIERpZ2dsZXMiLAogICAgICAgICJSZSBIYW1pbHRvbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjI0IiwKICAgICJIRUxEIjogWwogICAgICAgICJTaG91bGQgdGhlcmUgYmUgdW5jZXJ0YWludHkgYXMgdG8gdGhlIHByb3BlcnR5IGNvbXByaXNpbmcgdGhlIHJlc2lkdWUgb2YgYW4gZXN0YXRlLCBhIHRydXN0IHB1cnBvcnRpbmcgdG8gaGF2ZSBpdCBhcyBpdHMgc3ViamVjdCBtYXR0ZXIgd2lsbCBmYWlsIGZvciBhIGxhY2sgY2VydGFpbnR5IG9mIHN1YmplY3QuIEEgd2lsbCBhdHRlbXB0aW5nIHRvIGRvIHNvIGZvciAmIzgyMjA7YW55dGhpbmcgdGhhdCBpcyBsZWZ0JiM4MjIxOyBmYWlsZWQsIGFuZCB3YXMgaGVsZCBpbnN0ZWFkIHRvIGJlIGFuIGFic29sdXRlIGdpZnQuIgogICAgXSwKICAgICJZRUFSIjogIjE5NTgiLAogICAgIk5BTUUiOiAiSW4gdGhlIEVzdGF0ZSBvZiBMYXN0IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaHJlZSBDZXJ0YWludGllcyIsCiAgICAgICAgIkNlcnRhaW50eSBvZiBTdWJqZWN0IiwKICAgICAgICAiSWRlbnRpZmljYXRpb24gb2YgVHJ1c3QgUHJvcGVydHkiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaHJlZSBDZXJ0YWludGllcyAmbWRhc2g7IENlcnRhaW50eSBvZiBTdWJqZWN0ICZtZGFzaDsgU2VncmVnYXRpb24gb2YgQ2hhdHRlbHMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIExvbmRvbiBXaW5lIiwKICAgICAgICAiUGFsbWVyIHYgU2ltbW9uZHMiLAogICAgICAgICJQZWFyc29uIHYgTGVobWFuIEJyb3MiLAogICAgICAgICJJbiB0aGUgRXN0YXRlIG9mIExhc3QiLAogICAgICAgICJSZSBHb2xheSIsCiAgICAgICAgIkhvbGxhbmQgdiBOZXdidXJ5IiwKICAgICAgICAiV2hpdGUgdiBTaG9ydGhhbGwiLAogICAgICAgICJTcHJhbmdlIHYgQmFybmFyZCIsCiAgICAgICAgIkJveWNlIHYgQm95Y2UiLAogICAgICAgICJIdW50ZXIgdiBNb3NzIiwKICAgICAgICAiTWNQaGFpbCB2IERvdWx0b24iLAogICAgICAgICJSZSBEaWdnbGVzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjUiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ09VUlQiOiAiVUtQQyAoTlopIiwKICAgICJZRUFSIjogIjE5OTUiLAogICAgIk5BTUUiOiAiUmUgR29sZGNvcnAiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRocmVlIENlcnRhaW50aWVzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIFN1YmplY3QiLAogICAgICAgICJTZWdyZWdhdGlvbiBvZiBDaGF0dGVscyIKICAgIF0sCiAgICAiQ09NTUVOVCI6ICJPYnZpb3VzbHkgd29ua3kgbG9naWMgaW4gdGhpcyBjYXNlLCBwZXJoYXBzIGVuZ2FnaW5nIGluIGEgbGl0dGxlIGxpZ2h0IGFkIGhvYyB3ZWFsdGggcmVkaXN0cmlidXRpb24uIFNlZSBhbHNvIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIExvbmRvbiBXaW5lPC9zcGFuPi4iLAogICAgIkNJVEFUSU9OIjogIlJlIEdvbGRjb3JwIFsxOTk1XSAxIEFDIDc0IiwKICAgICJIRUxEIjogWwogICAgICAgICJFdmVuIHdoZW4gZWFjaCBjaGF0dGVsIGNvbXByaXNpbmcgYSB0cnVzdCBmdW5kIGlzIGluc2NyaWJlZCB3aXRoIG1lYW5zIG9mIHVuaXF1ZSBpZGVudGlmaWNhdGlvbiwgc3RvcmFnZSB3aXRoIG5vbi10cnVzdCBmdW5kIHByb3BlcnR5IHdpbGwgZGVmZWF0IGNlcnRhaW50eSBvZiBzdWJqZWN0LiBGdXJ0aGVybW9yZSBjb250cmFjdHVhbCBkZWFsaW5ncyBnZW5lcmFsbHkgbGFjayB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPnRydXN0PC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPmNvbmZpZGVuY2U8L3NwYW4+IHRoYXQgYXJlIHRoZSBoYWxsbWFya3Mgb2YgZmlkdWNpYXJ5IGR1dGllcy4iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkEgUG9uemkgc2NoZW1lIGluIHdoaWNoIGxvdHMgb2YgYmlnIHJpY2ggZnVja2VycyBsb3N0IG91dC4gVGhlIGNvdXJ0IGhlbHBlZCBhIGd1eSB3aG8mIzgyMTc7ZCBvcmRlcmVkIDxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+dW5zZWdyZWdhdGVkPC9zcGFuPjwvc3Bhbj4gbWVkYWxzIDxzcGFuIGNsYXNzPVwiYmRcIj53YXM8L3NwYW4+IGhlbHBlZCAmbWRhc2g7IGJ1dCBkZWNsaW5lZCB0byBkbyBzbyBmb3IgYSBsb2FkIG9mIG51dHRlcnMgd2hvc2UgcHJvcGVydHkgd2FzIDxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+bnVtYmVyZWQ8L3NwYW4+IGJ1bGxpb24gYmFyczwvc3Bhbj4uICBUaGUgY2xhaW0sIDxzcGFuIGNsYXNzPVwiaXRcIj5pbnRlciBhbGlhPC9zcGFuPiwgd2FzIHRoYXQgdGhlIGNvbXBhbnkgaGFkIGJyZWFjaGVkIHRoZSBmaWR1Y2lhcnkgZHV0eSBpdCBvd25lZCB0byB0aGUgY2xhaW1hbnRzLiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRocmVlIENlcnRhaW50aWVzICZtZGFzaDsgQ2VydGFpbnR5IG9mIFN1YmplY3QgJm1kYXNoOyBJbnRhbmdpYmxlIFByb3BlcnR5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJIb2xsYW5kIHYgTmV3YnVyeSIsCiAgICAgICAgIldoaXRlIHYgU2hvcnRoYWxsIiwKICAgICAgICAiUGVhcnNvbiB2IExlaG1hbiBCcm9zIiwKICAgICAgICAiUGFsbWVyIHYgU2ltbW9uZHMiLAogICAgICAgICJSZSBHb2xkY29ycCIsCiAgICAgICAgIkJveWNlIHYgQm95Y2UiLAogICAgICAgICJSZSBMb25kb24gV2luZSIsCiAgICAgICAgIkluIHRoZSBFc3RhdGUgb2YgTGFzdCIsCiAgICAgICAgIlNwcmFuZ2UgdiBCYXJuYXJkIiwKICAgICAgICAiUmUgR29sYXkiLAogICAgICAgICJSZSBDaGFsbG9ubmVyIENsdWIiLAogICAgICAgICJSZSBTdGVlbGUncyBXVCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjI2IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIllFQVIiOiAiMTk5NCIsCiAgICAiTkFNRSI6ICJIdW50ZXIgdiBNb3NzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaHJlZSBDZXJ0YWludGllcyIsCiAgICAgICAgIkNlcnRhaW50eSBvZiBTdWJqZWN0IiwKICAgICAgICAiSW50YW5naWJsZSBQcm9wZXJ0eSIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkxlYWRpbmciLAogICAgICAgICJJbXBvcnRhbnQiCiAgICBdLAogICAgIkNPTU1FTlQiOiAiVmlyZ28gcDg5IHJlZmVycyB0byB0aGlzIGFzIHRoZSBsZWFkaW5nIGNhc2Ugb24gaWRlbnRpZnlpbmcgdHJ1c3QgcHJvcGVydHkuIiwKICAgICJDSVRBVElPTiI6ICJIdW50ZXIgdiBNb3NzIFsxOTk0XSAxIFdMUiA0NTIiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgdHJ1c3Qgb2YgcGFydCBvZiBhIGZ1bmdpYmxlIG1hc3Mgc3VjaCBhcyBhIHNoYXJlaG9sZGluZyBvciBhIGJhbmsgYWNjb3VudCB3aWxsIG5vdCBmYWlsIGZvciB1bmNlcnRhaW50eSBvZiBzdWJqZWN0LCBzbyBsb25nIGFzIHRoZSBzaXplIG9mIHRoZSBwYXJ0IGlzIG5vdCB1bmNlcnRhaW4uIDUlIG9mIDEwMDAgPHNwYW4gY2xhc3M9XCJpdFwiPmlkZW50aWNhbDwvc3Bhbj4gc2hhcmVzIGVxdWFscyA1MCBzaGFyZXMgJm1kYXNoOyB0aGUgdHJ1c3Qgd2FzIHVwaGVsZC4gQW55IDUwIG9mIHRoZSAxMDAwIHNoYXJlcyB3b3VsZCBoYXZlIGRvbmUuIERpc3Rpbmd1aXNoZWQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgTG9uZG9uIFdpbmU8L3NwYW4+LiIsCiAgICAgICAgIkNmLiBhcHByb2FjaCB0YWtlbiBpbiBBdXMgYnkgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+V2hpdGUgdiBTaG9ydGhhbGw8L3NwYW4+LiBUaGVyZSwgdG8gY2lyY3VtdmVudCB0aGUgcHJvYmxlbSBvZiBpZGVudGlmaWNhdGlvbiwgdGhlIGNvdXJ0IGltcG9zZWQgYSB0cnVzdCBpbiB3aGljaCBib3RoIHNldHRsb3IgYW5kIHdvdWxkLWJlIGJlbmVmaWNpYXJ5IGhhZCBqb2ludCAoYWxiZWl0IHVuZXF1YWwpIGJlbmVmaWNpYWwgaW50ZXJlc3QgYXMgdGVuYW50cy1pbi1jb21tb24uIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBIG1hbiBoYWQgcHJvbWlzZWQgaGlzIGVtcGxveWVlIDUlIG9mIHRoZSBzaGFyZSBjYXBpdGFsIGluIGhpcyBjb21wYW55LCBvZiAxMDAwIGlzc3VlZCBzaGFyZXMuIFdvdWxkIHRoaXMgYmUgdm9pZCBmb3IgdW5jZXJ0YWludHksIGJ5IGFwcGxpY2F0aW9uIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEdvbGRjb3JwPC9zcGFuPiBvciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBMb25kb24gV2luZTwvc3Bhbj4/IgogICAgXSwKICAgICJXSUtJTElOSyI6IFsKICAgICAgICAiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSHVudGVyX3ZfTW9zcyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRocmVlIENlcnRhaW50aWVzICZtZGFzaDsgQ2VydGFpbnR5IG9mIFN1YmplY3QgJm1kYXNoOyBJbnRhbmdpYmxlIFByb3BlcnR5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJXaGl0ZSB2IFNob3J0aGFsbCIsCiAgICAgICAgIkh1bnRlciB2IE1vc3MiLAogICAgICAgICJQZWFyc29uIHYgTGVobWFuIEJyb3MiLAogICAgICAgICJSZSBHb2xheSIsCiAgICAgICAgIkluIHRoZSBFc3RhdGUgb2YgTGFzdCIsCiAgICAgICAgIlNwcmFuZ2UgdiBCYXJuYXJkIiwKICAgICAgICAiQm95Y2UgdiBCb3ljZSIsCiAgICAgICAgIlBhbG1lciB2IFNpbW1vbmRzIiwKICAgICAgICAiUmUgR29sZGNvcnAiLAogICAgICAgICJSZSBMb25kb24gV2luZSIsCiAgICAgICAgIk1jUGhhaWwgdiBEb3VsdG9uIiwKICAgICAgICAiUmUgS2F5Zm9yZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjI3IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTk5NCIsCiAgICAiTkFNRSI6ICJIb2xsYW5kIHYgTmV3YnVyeSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVGhyZWUgQ2VydGFpbnRpZXMiLAogICAgICAgICJDZXJ0YWludHkgb2YgU3ViamVjdCIsCiAgICAgICAgIkludGFuZ2libGUgUHJvcGVydHkiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJOZXViZXJnZXIiLAogICAgICAgICJJbXBvcnRhbnQiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkhvbGxhbmQgdiBOZXdidXJ5IFsxOTk0XSAxIFdMUiA0NTIiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIk5ldWJlcmdlciBKIGZvbGxvd2VkIHRoZSBydWxpbmcgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SHVudGVyIHYgTW9zczwvc3Bhbj4gZWFybGllciB0aGUgc2FtZSB5ZWFyLCBpbiB3aGljaCB0aGUgcnVsZSByZXF1aXJpbmcgc2VncmVnYXRpb24gb2YgdHJ1c3QgcHJvcGVydHkgZnJvbSBhIGxhcmdlciBtYXNzIHdhcyBmb3VuZCBub3QgdG8gYXBwbHkgdG8gZnVuZ2libGUgaW50YW5naWJsZXMuIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiVGhyZWUgQ2VydGFpbnRpZXMgJm1kYXNoOyBDZXJ0YWludHkgb2YgU3ViamVjdCAmbWRhc2g7IElkZW50aWZpY2F0aW9uIG9mIFRydXN0IFByb3BlcnR5ICZtZGFzaDsgSW50YW5naWJsZSBQcm9wZXJ0eSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUGVhcnNvbiB2IExlaG1hbiBCcm9zIiwKICAgICAgICAiQm95Y2UgdiBCb3ljZSIsCiAgICAgICAgIlJlIEdvbGF5IiwKICAgICAgICAiSW4gdGhlIEVzdGF0ZSBvZiBMYXN0IiwKICAgICAgICAiU3ByYW5nZSB2IEJhcm5hcmQiLAogICAgICAgICJIdW50ZXIgdiBNb3NzIiwKICAgICAgICAiSG9sbGFuZCB2IE5ld2J1cnkiLAogICAgICAgICJQYWxtZXIgdiBTaW1tb25kcyIsCiAgICAgICAgIlJlIEdvbGRjb3JwIiwKICAgICAgICAiUmUgTG9uZG9uIFdpbmUiLAogICAgICAgICJSZSBEaWdnbGVzIiwKICAgICAgICAiUGF1bCB2IENvbnN0YW5jZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjI4IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNPVVJUIjogIk5TVyBDQSIsCiAgICAiWUVBUiI6ICIyMDA2IiwKICAgICJOQU1FIjogIldoaXRlIHYgU2hvcnRoYWxsIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaHJlZSBDZXJ0YWludGllcyIsCiAgICAgICAgIkNlcnRhaW50eSBvZiBTdWJqZWN0IiwKICAgICAgICAiSWRlbnRpZmljYXRpb24gb2YgVHJ1c3QgUHJvcGVydHkiLAogICAgICAgICJJbnRhbmdpYmxlIFByb3BlcnR5IgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiUGVyc3Vhc2l2ZSIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiV2hpdGUgdiBTaG9ydGhhbGwgKDIwMDYpIiwKICAgICJIRUxEIjogWwogICAgICAgICJJbiB0aGUgQ291cnQgb2YgQXBwZWFsIGluIE5ldyBTb3V0aCBXYWxlcywgb24gdmVyeSBzaW1pbGFyIGZhY3RzIHRvIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkh1bnRlciB2IE1vc3M8L3NwYW4+LCB0aGUgcHJvYmxlbSBvZiBpZGVudGlmaWNhdGlvbiBvZiB0aGUgc2hhcmVzIGJlbG9uZ2luZyB0byB0aGUgY2xhaW1hbnQgb2YgdGhlIHRydXN0IHdhcyBuZWF0bHkgY2lyY3VtdmVudGVkIGJ5IGZpbmRpbmcgdGhhdCB0aGUgc2V0dGxvciBoYWQgZGVjbGFyZWQgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5lbnRpcmUgZnVuZDwvc3Bhbj4gYSB0cnVzdCwgd2l0aCBoZXJzZWxmIGFuZCB0aGUgY2xhaW1hbnQgYXMgYmVuZWZpY2lhcmllcy4iLAogICAgICAgICJJbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QZWFyc29uIHYgTGVobWFuIEJyb3M8L3NwYW4+IGluIDIwMTAgdGhlIEhpZ2ggQ291cnQgaGVsZCB0aGV5JiM4MjE3O2QgPHNwYW4gY2xhc3M9XCJpdFwiPmxpa2U8L3NwYW4+IHRvIGZvbGxvdyB0aGlzIHByaW5jaXBsZSAmbWRhc2g7IGJ1dCB3ZXJlIGJvdW5kIGJ5IG90aGVyIGF1dGhvcml0aWVzLiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRocmVlIENlcnRhaW50aWVzICZtZGFzaDsgQ2VydGFpbnR5IG9mIFN1YmplY3QgJm1kYXNoOyBJZGVudGlmaWNhdGlvbiBvZiBUcnVzdCBQcm9wZXJ0eSAmbWRhc2g7IEludGFuZ2libGUgUHJvcGVydHkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIldoaXRlIHYgU2hvcnRoYWxsIiwKICAgICAgICAiQm95Y2UgdiBCb3ljZSIsCiAgICAgICAgIlNwcmFuZ2UgdiBCYXJuYXJkIiwKICAgICAgICAiSW4gdGhlIEVzdGF0ZSBvZiBMYXN0IiwKICAgICAgICAiUmUgR29sYXkiLAogICAgICAgICJQYWxtZXIgdiBTaW1tb25kcyIsCiAgICAgICAgIkh1bnRlciB2IE1vc3MiLAogICAgICAgICJIb2xsYW5kIHYgTmV3YnVyeSIsCiAgICAgICAgIlJlIExvbmRvbiBXaW5lIiwKICAgICAgICAiUmUgR29sZGNvcnAiLAogICAgICAgICJSZSBDaGFsbG9ubmVyIENsdWIiLAogICAgICAgICJSZSBIYW1pbHRvbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjI5IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMjAxMiIsCiAgICAiTkFNRSI6ICJQZWFyc29uIHYgTGVobWFuIEJyb3MiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRocmVlIENlcnRhaW50aWVzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIFN1YmplY3QiLAogICAgICAgICJJZGVudGlmaWNhdGlvbiBvZiBUcnVzdCBQcm9wZXJ0eSIsCiAgICAgICAgIkludGFuZ2libGUgUHJvcGVydHkiCiAgICBdLAogICAgIkNPTU1FTlQiOiAiU2VlIGFsc28gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Rm9ybWFsaXRpZXMgZm9yIGludGVyIHZpdm9zIEV4cHJlc3MgVHJ1c3RzPC9zcGFuPi4iLAogICAgIkNJVEFUSU9OIjogIlBlYXJzb24gdiBMZWhtYW4gQnJvcyAoMjAxMikiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkJyaWdncyBKLCBvYml0ZXIgJm1kYXNoOyAxLiB0aGUgcHJpbmNpcGxlIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPldoaXRlIHYgU2hvcnRoYWxsPC9zcGFuPiAod2hpY2ggc2lkZS1zdGVwcGVkIHRoZSBwcm9ibGVtIG9mIGlkZW50aWZpY2F0aW9uIG9mIHVuc2VncmVnYXRlZCB0cnVzdCBwcm9wZXJ0eSBieSBjb250cml2aW5nIHRvIGZpbmQgYSB0cnVzdCBoYWQgYmVlbiBkZWNsYXJlZCBieSB0aGUgc2V0dGxvciBmb3IgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5lbnRpcmU8L3NwYW4+IGZ1bmQsIHdpdGggYm90aCBzZXR0bG9yIGFuZCByZWFsIGJlbmVmaWNpYXJ5IGFzIGJlbmVmaWNpYXJpZXMgb2YgPHNwYW4gY2xhc3M9XCJpdFwiPnVuZXF1YWw8L3NwYW4+IHByb3BvcnRpb25zKSBpcyBwcmVmZXJhYmxlIHRvIHRoZSBiaW5kaW5nIGF1dGhvcml0eS4gIDIuIEVsZWN0cm9uaWMgZG9jdW1lbnRhdGlvbiB3YXMgc3VmZmljaWVudCB0byBzYXRpc2Z5IHRoZSByZXF1aXJlbWVudCBvZiBTNTMoMSkoYykgTFBBLiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRocmVlIENlcnRhaW50aWVzICZtZGFzaDsgQ2VydGFpbnR5IG9mIFN1YmplY3QgJm1kYXNoOyBJZGVudGlmaWNhdGlvbiBvZiBUcnVzdCBQcm9wZXJ0eSAmbWRhc2g7IEp1cmlzZGljdGlvbiBvdmVyIEJlbmVmaWNpYXJpZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlBlYXJzb24gdiBMZWhtYW4gQnJvcyIsCiAgICAgICAgIlBhbG1lciB2IFNpbW1vbmRzIiwKICAgICAgICAiU3ByYW5nZSB2IEJhcm5hcmQiLAogICAgICAgICJJbiB0aGUgRXN0YXRlIG9mIExhc3QiLAogICAgICAgICJXaGl0ZSB2IFNob3J0aGFsbCIsCiAgICAgICAgIlJlIEdvbGF5IiwKICAgICAgICAiSHVudGVyIHYgTW9zcyIsCiAgICAgICAgIlJlIEdvbGRjb3JwIiwKICAgICAgICAiSG9sbGFuZCB2IE5ld2J1cnkiLAogICAgICAgICJSZSBMb25kb24gV2luZSIsCiAgICAgICAgIlJlIERpZ2dsZXMiLAogICAgICAgICJSZSBCYWRlbiAobm8uIDIpIgogICAgXSwKICAgICJOVU1CRVIiOiAiMzAiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIxODY5IiwKICAgICJOQU1FIjogIkJveWNlIHYgQm95Y2UiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRocmVlIENlcnRhaW50aWVzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIFN1YmplY3QiLAogICAgICAgICJJZGVudGlmaWNhdGlvbiBvZiBUcnVzdCBQcm9wZXJ0eSIsCiAgICAgICAgIkp1cmlzZGljdGlvbiBvdmVyIEJlbmVmaWNpYXJpZXMiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkJveWNlIHYgQm95Y2UgKDE4NjkpIDE2IFNpbSA0NzYiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkVxdWl0eSBoYXMganVyaXNkaWN0aW9uIG92ZXIgdHJ1c3RlZXMsIG5vdCBiZW5lZmljaWFyaWVzLiBBIHRydXN0IHdpdGggbW9yZSB0aGFuIG9uZSBiZW5lZmljaWFyeSBpbiB3aGljaCB0aGUgc2l6ZSBvZiBlYWNoJiM4MjE3O3Mgc2hhcmUgb2YgdGhlIGNha2UgaXMgZGV0ZXJtaW5lZCBhcyBhIGNvbnNlcXVlbmNlIG9mIGEgY2hvaWNlIHRvIGJlIG1hZGUgYnkgYSBwYXJ0aWN1bGFyLCBkZXNpZ25hdGVkIGJlbmVmaWNpYXJ5LCBpcyB2YWxpZCAmbWRhc2g7IGFuZCB0aGUgY291cnQgY2Fubm90IGNvbXBlbCB0aGUgYmVuZWZpY2lhcnkgaW4gcXVlc3Rpb24gdG8gbWFrZSB0aGUgY2hvaWNlLiIsCiAgICAgICAgIlRoZSBmaXJzdCBkYXVnaHRlciBkaWRuJiM4MjE3O3Qgd2FudCB0byBjaG9vc2UgJm1kYXNoOyBiYXNpY2FsbHkgdG8gZnVjayBvdmVyIGhlciBzaXN0ZXIsIGFsdGhvdWdoIGV2ZW50dWFsbHksIHRoZSBmYXRoZXIgYW5kIGZpcnN0IGRhdWdodGVyIGRpZWQgaW50ZXN0YXRlLCBzbyB0aGUgc2Vjb25kIGRhdWdodGVyIGdvdCB0aGUgbG90LCBhcyB0aGUgdHJ1c3QgZmFpbGVkIGFuZCByZXN1bHRlZCBiYWNrIHRvIHRoZSBlc3RhdGUuIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJJbiB0aGUgd2lsbCwgYWRkcmVzc2VkIHRvIHRoZSBlbGRlc3QgZGF1Z2h0ZXI6IFx1MjAxY3doaWNoZXZlciBob3VzZSBzaGUgbWF5IHRoaW5rIHByb3BlciB0byBjaG9vc2Ugb3Igc2VsZWN0LFx1MjAxZCBsZWF2aW5nIGhlciBvdGhlciBob3VzZSB0byBoZXIgb3RoZXIgb2J2aW91c2x5IGxlc3MtcHJlZmVycmVkIGRhdWdodGVyLiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkZvcm1hbGl0aWVzIiwKICAgICItLVRZUEUiOiAiQ29uY2VwdCIsCiAgICAiLS1DQVRFR09SWSI6ICJGb3JtYWxpdGllcyIsCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJOQU1FIjogIkZvcm1hbGl0aWVzIGZvciBUZXN0YW1lbnRhcnkgVHJ1c3RzIiwKICAgICItLVNVTU1BUlkiOiAiPHNwYW4gY2xhc3M9XCJpdFwiPkhvdyBkbyB0aGUgdHJ1c3RlZXMgZ2V0IHRoZWlyIGhhbmRzIG9uIHRoZSB0cnVzdCBwcm9wZXJ0eT88L3NwYW4+IiwKICAgICJOVU1CRVIiOiAiMzEiLAogICAgIi0tTkFNRSI6ICJGb3JtYWxpdGllcyBmb3IgSW50ZXItVml2b3MgVHJ1c3RzIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJUaGlzIGlzIHRoZSBzdHJhaWdodGZvcndhcmQgY291bnRlcnBhcnQgdG8gdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmZvcm1hbGl0aWVzIGZvciBpbnRlciB2aXZvcyB0cnVzdHM8L3NwYW4+LiIsCiAgICAgICAgIkEgd2lsbCB0cnVzdCBjYW4gYmUgPHNwYW4gY2xhc3M9XCJpdFwiPmVpdGhlcjwvc3Bhbj4gJm1kYXNoOyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBDb21wbGlhbnQgd2l0aCB0aGUgcmVxdWlyZW1lbnRzIG9mIDxzcGFuIGNsYXNzPVwibG5rIHdsc1wiIGRhdGEtbG49XCJodHRwOi8vd3d3LmxlZ2lzbGF0aW9uLmdvdi51ay91a3BnYS9XaWxsNGFuZDFWaWN0LzcvMjYvc2VjdGlvbi85XCI+UzkgV2lsbHMgQWN0IDE4Mzc8L3NwYW4+PC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBJLmUuLCBpbnRlbmRlZCBhbmQgc2lnbmVkIGJ5IHRoZSB0ZXN0YXRvciBpbiBwcmVzZW5jZSBvZiB0d28gd2l0bmVzc2VzLCBldGMuPC9zcGFuPjwvbGk+PC91bD48L2xpPjwvdWw+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiaXRcIj5vcjwvc3Bhbj4gJm1kYXNoOzwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJiZFwiPlZvaWQ8L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICJTZWUgYWxzbyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5zZWNyZXQgdHJ1c3RzPC9zcGFuPiwgdGhlIGV4Y2VwdGlvbi4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZvcm1hbGl0aWVzIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJEaXNwb3NpdGlvbiBvZiBFcXVpdGFibGUgSW50ZXJlc3RzIiwKICAgICAgICAiRm9ybWFsaXRpZXMgZm9yIEludGVyIFZpdm9zIEV4cHJlc3MgVHJ1c3RzIiwKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIkNoYXJpdHkgQ29tbWlzc2lvbmVyJ3MgR3VpZGFuY2UgLSBTZXB0ZW1iZXIgMjAxMyIsCiAgICAgICAgIlBvbGl0aWNhbCBQdXJwb3NlIG9mIGEgQ2hhcml0eSIsCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIC0gQ29ycG9yYXRlIE9wcG9ydHVuaXR5IiwKICAgICAgICAiTm8gUHJvZml0IFJ1bGUiLAogICAgICAgICJSZW1lZGllcyBmb3IgVW5hdXRob3Jpc2VkIFByb2ZpdHMiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJUaGUgQ3ktcHJcdTAwZThzIERvY3RyaW5lIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIEludGVudGlvbiIsCiAgICAgICAgIkFkdmFuY2VtZW50IG9mIEVkdWNhdGlvbiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkZvcm1hbGl0aWVzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJEaXNwb3NpdGlvbiBvZiBFcXVpdGFibGUgSW50ZXJlc3RzIiwKICAgICAgICAiRm9ybWFsaXRpZXMgZm9yIFRlc3RhbWVudGFyeSBUcnVzdHMiLAogICAgICAgICJDaGFyaXR5IC0gRGVmaW5pdGlvbnMiLAogICAgICAgICJPdGhlciBDaGFyaXRhYmxlIFB1cnBvc2VzIHVuZGVyIENoYXJpdGllcyBBY3QgMjAxMSIsCiAgICAgICAgIkFkdmFuY2VtZW50IG9mIEVkdWNhdGlvbiIsCiAgICAgICAgIkluY29tcGxldGUgQ29uc3RpdHV0aW9uIGFuZCBGYWlsZWQgR2lmdHMiLAogICAgICAgICJGaWR1Y2lhcnkgRHV0aWVzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIFN1YmplY3QiLAogICAgICAgICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzIC0gQXNzaXN0YW5jZSBmb3IgVm9sdW50ZWVycyIsCiAgICAgICAgIkVxdWl0eSB0ZW1wZXJzIHRoZSB3aW5kIHRvIHRoZSBTaG9ybiBMYW1iIiwKICAgICAgICAiQ2hhcml0eSBDb21taXNzaW9uZXIncyBHdWlkYW5jZSAtIFNlcHRlbWJlciAyMDEzIiwKICAgICAgICAiRXF1aXR5IHdpbGwgbm90IGFsbG93IGEgU3RhdHV0ZSB0byBiZSBhbiBDbG9hayBmb3IgRnJhdWQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIzMiIsCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJBS0EiOiAiRm9ybWFsaXRpZXMgZm9yIEludGVyIFZpdm9zIFRydXN0cyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5JbnRybzwvc3Bhbj48L3NwYW4+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5UcnVzdHMgb2YgUGVyc29uYWx0eTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiaXRcIj5SdWxlPC9zcGFuPiAmbWRhc2g7IG5vIGZvcm1hbGl0aWVzIGFyZSBuZWVkZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBleHByZXNzIGludGVyIHZpdm9zIHRydXN0cyBvZiBwZXJzb25hbCBwcm9wZXJ0eSwgYW4gb3JhbCBkZWNsYXJhdGlvbiBpcyBlbm91Z2guIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRob21hcyB2IFRpbWVzIEJvb2tzPC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlRydXN0cyBvZiBMYW5kPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPlJ1bGU8L3NwYW4+ICZtZGFzaDsgUzUzKDEpPHNwYW4gY2xhc3M9XCJ1ZFwiPihiKTwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TFBBIDE5MjU8L3NwYW4+IHJlcXVpcmVzIDxzcGFuIGNsYXNzPVwiaXRcIj5ldmlkZW5jZSBpbiBzaWduZWQgd3JpdGluZzwvc3Bhbj4gb2YgdGhlIHRydXN0IHRydXN0IGFuZCBpdHMgdGVybXMsIGZvciBhbiBpbnRlciB2aXZvcyBleHByZXNzIHRydXN0IG9mIHdoaWNoIGFueSBwYXJ0IG9mIHRoZSBzdWJqZWN0IGlzIGxhbmQuIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFRoZSBldmlkZW5jZSBtYXkgY29tZSA8c3BhbiBjbGFzcz1cIml0XCI+bGF0ZXI8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFdpdGhvdXQgaXQsIHRoZSB0cnVzdCBpcyBub3Qgdm9pZCBidXQgPHNwYW4gY2xhc3M9XCJpdFwiPnVuZW5mb3JjZWFibGU8L3NwYW4+LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5HYXJkbmVyIHYgUm93ZTwvc3Bhbj4uPGJyPiAuLi4gYWx0aG91Z2ggbm90aGluZyBwcmV2ZW50cyB0aGUgdHJ1c3RlZXMgZnJvbSB1cGhvbGRpbmcgdGhlIHRydXN0Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJpdFwiPkV4Y2VwdGlvbnM8L3NwYW4+ICZtZGFzaDsgUzUzKDEpKGIpIG1heSBiZSA8c3BhbiBjbGFzcz1cIml0XCI+ZGlzYXBwbGllZDwvc3Bhbj4sIHNob3VsZCBhIHRydXN0ZWUgYmUgcmVseWluZyBvbiBpdCB0byBzd2luZGxlIHRoZSBiZW5lZmljaWFyaWVzLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Sb2NoZWZvdWNhbGQgdiBCb3VzdGVhZDwvc3Bhbj4uIFRoZSByYXRpb25hbGU6IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmVxdWl0eSB3aWxsIG5vdCBhbGxvdyBhIHN0YXR1dGUgdG8gYmUgYW4gaW5zdHJ1bWVudCBvZiBmcmF1ZDwvc3Bhbj4uIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5UcnVzdHMgb2YgU3Vic2lzdGluZyBFcXVpdGFibGUgSW50ZXJlc3RzPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPlJ1bGU8L3NwYW4+ICZtZGFzaDsgUzUzKDEpPHNwYW4gY2xhc3M9XCJ1ZFwiPihjKTwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TFBBIDE5MjU8L3NwYW4+IHJlcXVpcmVzIHRoZSBkaXNwb3NpdGlvbiA8c3BhbiBjbGFzcz1cIml0XCI+aXRzZWxmPC9zcGFuPiBtdXN0IGJlIGluIHNpZ25lZCB3cml0aW5nLCByYXRoZXIgdGhhbiBtZXJlbHkgc2lnbmVkIDxzcGFuIGNsYXNzPVwiaXRcIj5ldmlkZW5jZTwvc3Bhbj4gYXMgZm9yIGxhbmQuIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IE4uQi4gdGhpcyBtaWdodCBiZSA8c3BhbiBjbGFzcz1cIml0XCI+ZW1haWw8L3NwYW4+ICZtZGFzaDsgcGVyIEJyaWdncyBKLCBvYml0ZXIgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGVhcnNvbiB2IExlaG1hbiBCcm9zPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIldpdGhpbiB0aGUgbWVhbmluZyBvZiBEaXNwb3NpdGlvbiBpbiBTNTMoMSkoYykgJm1kYXNoOyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImJkXCI+QXNzaWdubWVudCB0byBhIHRoaXJkIHBhcnR5PC9zcGFuPiBvZiB0aGUgYmVuZWZpY2lhbCBpbnRlcmVzdCwgZGlyZWN0bHkgYnkgdGhlIG9yaWdpbmFsIGJlbmVmaWNpYXJ5LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaW1zb24mIzgyMTc7cyBFeGVjdXRvcnMgdiBZZXJidXJ5PC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImJkXCI+SW5zdHJ1Y3RpbmcgYmFyZSB0cnVzdGVlIHRvIGhvbGQgZm9yIHNvbWVvbmUgZWxzZTwvc3Bhbj4uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkdyZXkgdiBJUkM8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwiYmRcIj5EZWNsYXJhdGlvbiBvZiBhIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPnBhc3NpdmUgc3ViLXRydXN0PC9zcGFuPjwvc3Bhbj4gKGluIHdoaWNoIHRoZSBvcmlnaW5hbCBiZW5lZmljaWFyeSBkcm9wcyBvdXQgb2YgdGhlIHBpY3R1cmUpLjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiT3V0c2lkZSBTNTMoMSkoYykiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJiZFwiPkRlY2xhcmF0aW9uIG9mIGFuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmFjdGl2ZSBzdWItdHJ1c3Q8L3NwYW4+PC9zcGFuPiAoaW4gd2hpY2ggPHNwYW4gY2xhc3M9XCJpdFwiPnNvbWU8L3NwYW4+IGFjdGlvbnMgcmVtYWluIGZvciB0aGUgYmVuZWZpY2lhcnkgb2YgdGhlIHN1cGVyLXRydXN0KS48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiaXRcIj5OLkIuPC9zcGFuPiAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFNpZ25lZCB3cml0aW5nIDxzcGFuIGNsYXNzPVwiaXRcIj5hc2tpbmc8L3NwYW4+IHRoZSB0cnVzdGVlIHRvIGVmZmVjdCBhIHRyYW5zZmVyIGlzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+LCBpdHNlbGYsIGEgZGlzcG9zaXRpb24uPC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZvcm1hbGl0aWVzIgogICAgXSwKICAgICJOQU1FIjogIkZvcm1hbGl0aWVzIGZvciBJbnRlciBWaXZvcyBFeHByZXNzIFRydXN0cyIKfSwKewogICAgIkNBVEVHT1JZIjogIkZvcm1hbGl0aWVzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJGb3JtYWxpdGllcyBmb3IgSW50ZXIgVml2b3MgRXhwcmVzcyBUcnVzdHMiLAogICAgICAgICJGb3JtYWxpdGllcyBmb3IgVGVzdGFtZW50YXJ5IFRydXN0cyIsCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJQb2xpdGljYWwgUHVycG9zZSBvZiBhIENoYXJpdHkiLAogICAgICAgICJVbmF1dGhvcmlzZWQgUHJvZml0cyAtIEJyaWJlcyIsCiAgICAgICAgIlF1aXN0Y2xvc2UgVHJ1c3RzIiwKICAgICAgICAiTm8gUHJvZml0IFJ1bGUiLAogICAgICAgICJPdGhlciBDaGFyaXRhYmxlIFB1cnBvc2VzIHVuZGVyIENoYXJpdGllcyBBY3QgMjAxMSIsCiAgICAgICAgIkVxdWl0eSB0ZW1wZXJzIHRoZSB3aW5kIHRvIHRoZSBTaG9ybiBMYW1iIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIkVxdWl0eSB3aWxsIG5vdCBBc3Npc3QgYSBWb2x1bnRlZXIiLAogICAgICAgICJSZW1lZGllcyBmb3IgVW5hdXRob3Jpc2VkIFByb2ZpdHMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIzMyIsCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+V2hhdCBDb3VudHMgYXMgRGlzcG9zaXRpb24/PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBhc3NpZ25hdGlvbiBvZiBiZW5lZmljaWFsIGludGVyZXN0IHRvIGFub3RoZXI8L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+U3VidHJ1c3RzPC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5IZXJlLCAqVCBob2xkcyBwcm9wZXJ0eSBQIG9uIHRydXN0IGZvciBCLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QnV0IFAgaXMgaXRzZWxmIHdoYXQgaGFwcGVucyB3aGVuIFAgaXMgaXRzZWxmIHRoZSBiZW5lZmljaWFsIGludGVyZXN0IGluIGEgdHJ1c3Q/PGJyPldoYXQgaGFwcGVucyB3aGVuPC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZvcm1hbGl0aWVzIgogICAgXSwKICAgICJOQU1FIjogIkRpc3Bvc2l0aW9uIG9mIEVxdWl0YWJsZSBJbnRlcmVzdHMiCn0sCnsKICAgICJDQVRFR09SWSI6ICJGb3JtYWxpdGllcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiR2FyZG5lciB2IFJvd2UiLAogICAgICAgICJPbnNsb3cgdiBXYWxsaXMiLAogICAgICAgICJSb2NoZWZvdWNhbGQgdiBCb3VzdGVhZCIsCiAgICAgICAgIkVuZ2xpc2ggdiBEZWRoYW0gVmFsZSIsCiAgICAgICAgIkxhbWJlIHYgRWFtZXMiLAogICAgICAgICJSZSBMdWNhcyIsCiAgICAgICAgIlJlIFBpbmlvbiIsCiAgICAgICAgIkZsZXRjaGVyIHYgRmxldGNoZXIiLAogICAgICAgICJCYWRlbiB2IFNvYyBHZW4iLAogICAgICAgICJFeCBwIEphbWVzIiwKICAgICAgICAiTmVsc29uIHYgTGFyaG9sdCIsCiAgICAgICAgIlN0cm9uZyB2IEJpcmQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIzNCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjE5NjYiLAogICAgIk5BTUUiOiAiVGhvbWFzIHYgVGltZXMgQm9va3MiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZvcm1hbGl0aWVzIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJUaG9tYXMgdiBUaW1lcyBCb29rcyAoMTk2NikiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFuIGludGVyIHZpdm9zIHRydXN0IG9mIGNoYXR0ZWxzIG1heSBiZSB2YWxpZGx5IGVzdGFibGlzaGVkIGJ5IHRoZSBzZXR0bG9yIHNheWluZyBvZiB0aGUgcHJvcGVydHk6ICYjODIyMDt5b3UgY2FuIGtlZXAgaXQsIGlmIHlvdSBjYW4gZmluZCBpdC4mIzgyMjE7IgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJDb25jZXJuaW5nIHRoZSBCQkMgcmFkaW8gZHJhbWF0aXNhdGlvbiBvZiA8c3BhbiBjbGFzcz1cIml0XCI+VW5kZXIgTWlsayBXb29kPC9zcGFuPi4gVGFrZXMgbWFudXNjcmlwdCB3aXRoIGhpbSBvbiBhIGRyaW5raW5nIGJvdXQgaW4gU29obyAmbWRhc2g7IGxvc2VzIGl0LiBQaG9uZXMgYWdlbnQsIENsZXZlZGVuLiBBc2tzIGZvciBjb3BpZXMuIEdldHMgdGhlbSBpbiB0aGUgbmljayBvZiB0aW1lLCBhdCBMb25kb24gYWlycG9ydCBkZXBhcnRpbmcgZm9yIHRoZSBTdGF0ZXMuIFJlbGlldmVkLCBncmF0ZWZ1bGx5IHRlbGxzIGFnZW50IDxzcGFuIGNsYXNzPVwiaXRcIj5oZSBjb3VsZCBrZWVwIHRoZSBtYW51c2NyaXB0PC9zcGFuPiwgaWYgaGUgY291bGQgZmluZCBpdC4gR29lcyB0byB0aGUgcHViIFRob21hcyYjODIxNztkIGJlZW4gZHJpbmtpbmcgYXQsIGZpbmRzIGl0LiIsCiAgICAgICAgIiYjODIyMDtJJiM4MjE3O3ZlIGhhZCAxOCBzdHJhaWdodCB3aGlza2llczsgSSB0aGluayB0aGF0XHUyMDE5cyB0aGUgcmVjb3JkJiM4MjIxOyIsCiAgICAgICAgIlRob21hcyYjODIxNztzIHdpZG93LCB0aGUgcGxhaW50aWZmIGluIHRoZSBhY3Rpb24sIHRoZW4gc3VlZCB0aGUgYWdlbnQuIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRm9ybWFsaXRpZXMiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiR2FyZG5lciB2IFJvd2UgKDE4MjgpIDUgUnVzcyAyNTgiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIk9uc2xvdyB2IFdhbGxpcyIsCiAgICAgICAgIlJvY2hlZm91Y2FsZCB2IEJvdXN0ZWFkIiwKICAgICAgICAiVGhvbWFzIHYgVGltZXMgQm9va3MiLAogICAgICAgICJTb3V0aHdvb2QgdiBBRyIsCiAgICAgICAgIkFHIHYgUG93ZXIiLAogICAgICAgICJCbGFja3dlbGwgdiBCbGFja3dlbGwiLAogICAgICAgICJNVCBSZWFsaXNhdGlvbnMgdiBEaWdpdGFsIEVxdWlwbWVudCBDbyIsCiAgICAgICAgIlJlIEZpbmdlcidzIFdUIiwKICAgICAgICAiUGVubmluZ3RvbiB2IFdhaW5lIiwKICAgICAgICAiUmUgQ29va2UncyBTVCIsCiAgICAgICAgIkNvbWlza2V5IHYgQm93cmluZy1IYW5idXJ5IiwKICAgICAgICAiUmUgS2luZyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjM1IiwKICAgICJIRUxEIjogWwogICAgICAgICJBIHRydXN0IG9mIGxhbmQgZm9yIHdoaWNoIHRoZXJlIGlzIG5vIGV2aWRlbmNlIGluIHdyaXRpbmcgc2lnbmVkIGJ5IHRoZSBzZXR0bG9yIGlzIHVuZW5mb3JjZWFibGUgcmF0aGVyIHRoYW4gdm9pZC4iCiAgICBdLAogICAgIllFQVIiOiAiMTgyOCIsCiAgICAiTkFNRSI6ICJHYXJkbmVyIHYgUm93ZSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRm9ybWFsaXRpZXMiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJGb3JtYWxpdGllcyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSb2NoZWZvdWNhbGQgdiBCb3VzdGVhZCBbMTg5N10gMSBDaCAxOTYiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlRob21hcyB2IFRpbWVzIEJvb2tzIiwKICAgICAgICAiT25zbG93IHYgV2FsbGlzIiwKICAgICAgICAiR2FyZG5lciB2IFJvd2UiLAogICAgICAgICJSZSBSZWVzIiwKICAgICAgICAiUGVubmluZ3RvbiB2IFdhaW5lIiwKICAgICAgICAiSW4gdGhlIEVzdGF0ZSBvZiBMYXN0IiwKICAgICAgICAiQWJlcmRlZW4gUmFpbHdheSB2IEJsYWlraWUiLAogICAgICAgICJSZSBTaGF3IiwKICAgICAgICAiRHJ1aWQgRm91bmRhdGlvbiIsCiAgICAgICAgIk8nU3VsbGl2YW4gdiBNYW5hZ2VtZW50IEFnZW5jeSBbMTk4NV0gUUIgNDI4IiwKICAgICAgICAiSG9sZGVyIHYgSG9sZGVyIiwKICAgICAgICAiUmUgSGFyd29vZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjM2IiwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgc2lnbmVkIHdyaXRpbmcgb2YgYSBzZXR0bG9yIGF0dGVzdGluZyB0byBhIHRydXN0IG9mIGxhbmQgbmVlZCBub3QgYmUgY29udGVtcG9yYXJ5IHdpdGggdGhlIHRydXN0JiM4MjE3O3MgY3JlYXRpb24uIEZvcm1hbGl0eSBydWxlcyBtYXkgbm90IGJlIGFwcGxpZWQgc2hvdWxkIGRvaW5nIHNvIGZhY2lsaXRhdGUgZnJhdWQsIGFzIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmVxdWl0eSB3aWxsIG5vdCBhbGxvdyBhIHN0YXR1dGUgdG8gYmUgYSBjbG9hayBmb3IgZnJhdWQ8L3NwYW4+LiIKICAgIF0sCiAgICAiWUVBUiI6ICIxODk3IiwKICAgICJOQU1FIjogIlJvY2hlZm91Y2FsZCB2IEJvdXN0ZWFkIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGb3JtYWxpdGllcyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkZvcm1hbGl0aWVzICZtZGFzaDsgRGlzcG9zaXRpb25zIG9mIEVxdWl0YWJsZSBJbnRlcmVzdHMgJm1kYXNoOyBTdWJ0cnVzdHMiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiT25zbG93IHYgV2FsbGlzICgxODQ5KSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUm9jaGVmb3VjYWxkIHYgQm91c3RlYWQiLAogICAgICAgICJUaG9tYXMgdiBUaW1lcyBCb29rcyIsCiAgICAgICAgIkdhcmRuZXIgdiBSb3dlIiwKICAgICAgICAiSVJDIHYgQmFkZGVsZXkiLAogICAgICAgICJNaWxyb3kgdiBMb3JkIiwKICAgICAgICAiUmUgR3d5b24iLAogICAgICAgICJQZW5uaW5ndG9uIHYgV2FpbmUiLAogICAgICAgICJOYXRpb25hbCBBbnRpLVZpdmlzZWN0aW9uIFNvY2lldHkgdiBJUkMiLAogICAgICAgICJOZWxzb24gdiBMYXJob2x0IiwKICAgICAgICAiWmVpdGFsIHYgS2F5ZSIsCiAgICAgICAgIlJlIE1hY2FkYW0iLAogICAgICAgICJPJ1N1bGxpdmFuIHYgTWFuYWdlbWVudCBBZ2VuY3kgWzE5ODVdIFFCIDQyOCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjM3IiwKICAgICJIRUxEIjogWwogICAgICAgICJTdWJ0cnVzdHMgY2FuIGJlIDxzcGFuIGNsYXNzPVwiaXRcIj5hY3RpdmU8L3NwYW4+ICZtZGFzaDsgdGhlIHRydXN0ZWUgb2Ygd2hpY2gsIHRoZSBiZW5lZmljaWFyeSBvZiB0aGUgb3JpZ2luYWwgdHJ1c3QsIHN0aWxsIHJldGFpbnMgc29tZSBwYXJ0IG9mIHRoZSBvcmlnaW5hbCBiZW5lZmljaWFsIGludGVyZXN0OyBvciA8c3BhbiBjbGFzcz1cIml0XCI+cGFzc2l2ZTwvc3Bhbj4gJm1kYXNoOyBpbiB3aGljaCA8c3BhbiBjbGFzcz1cIml0XCI+YWxsPC9zcGFuPiB0aGUgYmVuZWZpY2lhcnkgb2YgdGhlIG9yaWdpbmFsIHRydXN0IHRyYW5zZmVycyA8c3BhbiBjbGFzcz1cIml0XCI+YWxsPC9zcGFuPiB0aGUgYmVuZWZpY2lhbCBpbnRlcmVzdCB0byB0aGUgYmVuZWZpY2lhcnkgb2YgdGhlIHN1YnRydXN0LiBUaGUgb3JpZ2luYWwgYmVuZWZpY2lhcnksIHRoZXJlZm9yZSwgJiM4MjE2O2Ryb3BzIG91dCBvZiB0aGUgcGljdHVyZS4mIzgyMTc7IiwKICAgICAgICAiQWN0aXZlIHN1YnRydXN0cyBjb25zdGl0dXRlIHRoZSA8c3BhbiBjbGFzcz1cIml0XCI+b25seTwvc3Bhbj4gcmVsaWFibGUgbWVhbnMgb2YgYXZvaWRpbmcgdGhlIHJlcXVpcmVtZW50IG9mIFM1MygxKShjKSB3aGVuIGRpc3Bvc2luZyBvZiBhbiBlcXVpdGFibGUgaW50ZXJlc3QuIgogICAgXSwKICAgICJZRUFSIjogIjE4NDkiLAogICAgIk5BTUUiOiAiT25zbG93IHYgV2FsbGlzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGb3JtYWxpdGllcyIsCiAgICAgICAgIkRpc3Bvc2l0aW9ucyBvZiBFcXVpdGFibGUgSW50ZXJlc3RzIiwKICAgICAgICAiU3VidHJ1c3RzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyAtIEFzc2lzdGFuY2UgZm9yIFZvbHVudGVlcnMiLAogICAgICAgICJDZXJ0YWludHkgb2YgU3ViamVjdCIsCiAgICAgICAgIkFkdmFuY2VtZW50IG9mIFJlbGlnaW9uIiwKICAgICAgICAiRGlzaG9uZXN0IEFzc2lzdGFuY2UiLAogICAgICAgICJQcml2YXRlIEV4cHJlc3MgVHJ1c3RzIiwKICAgICAgICAiU2VsZi1EZWFsaW5nIiwKICAgICAgICAiRm9ybWFsaXRpZXMgZm9yIEludGVyIFZpdm9zIEV4cHJlc3MgVHJ1c3RzIiwKICAgICAgICAiRGlzaG9uZXN0eSBmb3IgRGlzaG9uZXN0IEFzc2lzdGFuY2UiLAogICAgICAgICJFcXVpdHkgd2lsbCBub3QgQXNzaXN0IGEgVm9sdW50ZWVyIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIEludGVudGlvbiIsCiAgICAgICAgIlByZWNhdG9yeSBXb3JkcyIsCiAgICAgICAgIktub3dpbmcgUmVjZWlwdCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjM4IiwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiaXRcIj5UaGUgc2V0dGxvciB0cmllZCB0byBtYWtlIGEgZGlzcG9zaXRpb24gb2YgcHJvcGVydHksIGJ1dCA8c3BhbiBjbGFzcz1cImJkXCI+ZmFpbGVkPC9zcGFuPi48L3NwYW4+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkludHJvPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkluIGdlbmVyYWwsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmVxdWl0eSB3aWxsIG5vdCBhc3Npc3QgYSB2b2x1bnRlZXI8L3NwYW4+LiBOb3RlIHRoZSBzbGlnaHRseSBtb3JlIGFwdCB2YXJpYXRpb24sIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmVxdWl0eSB3aWxsIG5vdCBjb21wbGV0ZSBhbiBpbXBlcmZlY3QgZ2lmdDwvc3Bhbj4uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1pbHJveSB2IExvcmQ8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+TWluaW11bSBOZWNlc3Nhcnk8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1pbHJveSB2IExvcmQ8L3NwYW4+ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJpdFwiPmV2ZXJ5dGhpbmcgd2hpY2ggbXVzdCBiZSBkb25lPC9zcGFuPi48YnI+RXF1aXR5IHRoaW5rcyBnaWZ0cyBhcmUgc3VzcGVjdCBwZXIgc2UuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgUm9zZTwvc3Bhbj4gJm1kYXNoOyA8c3BhbiBjbGFzcz1cIml0XCI+ZXZlcnl0aGluZyB3aXRoaW4gdGhlIHNldHRsb3ImIzgyMTc7cyBwb3dlciB0byBsb3NlIGNvbnRyb2wgb2YgdGhlIHByb3BlcnR5PC9zcGFuPi48YnI+VGhlIG90aGVyIHBhcnR5IGhhZCBkaXNjcmV0aW9uIGFib3V0IHdobyBjb3VsZCBob2xkIHNoYXJlczsgdGhlIHNldHRsb3IgY291bGQgZG8gbm8gbW9yZS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaG9pdGhyYW0gdiBQYWdhcmFuaTwvc3Bhbj4gJm1kYXNoOyA8c3BhbiBjbGFzcz1cIml0XCI+YW4gb3JhbCBkZWNsYXJhdGlvbiBpZiB0aGUgc2V0dGxvciBpcyBhbHNvIGEgdHJ1c3RlZTwvc3Bhbj48YnI+QWx0aG91Z2ggPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+ZXF1aXR5IHdpbGwgbm90IGFzc2lzdCBhIHZvbHVudGVlcjwvc3Bhbj4sIGl0IHdhcyBkZWNpZGVkIHRoYXQsIGFzIHdlbGwgYXMgdGhhdCwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+ZXF1aXR5IHdpbGwgbm90IG9mZmljaW91c2x5IHN0cml2ZSB0byBkZWZlYXQgYSBnaWZ0PC9zcGFuPi48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEZvbGxvd2VkIGJ5IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBlbm5pbmd0b24gdiBXYXluZTwvc3Bhbj4uPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBXb3VsZCBoYXZlIGZhaWxlZCBvbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBSb3NlPC9zcGFuPiBncm91bmRzLCBhcyB0aGUgc2V0dGxvciwgQWRhIENyYW1wdG9uLCBoYWQgYXBwYXJlbnRseSBoYWQgYSBjaGFuZ2Ugb2YgaGVhcnQgYW5kIGhhZCA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBkb25lIGV2ZXJ5dGhpbmcgbmVjZXNzYXJ5IHRvIGRpdmVzdC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBBcmRlbiBMSiBoZWxkLCB4MywgdGhhdCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5lcXVpdHkgdGVtcGVycyB0aGUgd2luZCB0byB0aGUgc2hvcm4gbGFtYjwvc3Bhbj4sIGFuZCBiZWNhdXNlIG9mIHRoZSBkb25lZSYjODIxNztzIHJlbGlhbmNlIG9uIHRoZSBnaWZ0LCBlcXVpdHkgc2hvdWxkIHVwaG9sZCBpdCwgcHV0dGluZyBhc2lkZSBpdHMgdXN1YWwgc3VzcGljaW9uIG9mIGdpZnRzLCBlc3BlY2lhbGx5IHRob3NlIGdpdmVuIGluIGFtYml2YWxlbmNlLjwvc3Bhbj48L2xpPjwvdWw+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlplaXRhbCB2IEtheWU8L3NwYW4+IGluIDIwMTAsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBlbm5pbmd0b248L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UQ1A8L3NwYW4+IHdlcmUgZG91YnRlZCwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgUm9zZTwvc3Bhbj4gd2FzIHJlYXNzZXJ0ZWQuPC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnN0aXR1dGlvbiBvZiBUcnVzdHMiCiAgICBdLAogICAgIk5BTUUiOiAiSW5jb21wbGV0ZSBDb25zdGl0dXRpb24gYW5kIEZhaWxlZCBHaWZ0cyIKfSwKewogICAgIkNBVEVHT1JZIjogIkNvbnN0aXR1dGlvbiBvZiBUcnVzdHMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkluY29tcGxldGUgQ29uc3RpdHV0aW9uIGFuZCBGYWlsZWQgR2lmdHMiLAogICAgICAgICJDZXJ0YWludHkgb2YgSW50ZW50aW9uIiwKICAgICAgICAiU2VsZi1EZWFsaW5nIiwKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgUmVsaWdpb24iLAogICAgICAgICJEaXNob25lc3R5IGZvciBEaXNob25lc3QgQXNzaXN0YW5jZSIsCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIC0gQ29ycG9yYXRlIE9wcG9ydHVuaXR5IiwKICAgICAgICAiS25vd2luZyBSZWNlaXB0IC0gS25vd2xlZGdlIiwKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIlRoaXJkIFBhcnR5IExpYWJpbGl0eSIsCiAgICAgICAgIlByZWNhdG9yeSBXb3JkcyIsCiAgICAgICAgIlRoZSBDeS1wclx1MDBlOHMgRG9jdHJpbmUiCiAgICBdLAogICAgIk5VTUJFUiI6ICIzOSIsCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+VHJ1c3RzIG9mIGEgUHJvbWlzZTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVGhlIHByb21pc2UgdG8gY3JlYXRlIHRoZSB0cnVzdCBtYXksIGluIGFuZCBvZiBpdHNlbGYsIGJlIGNvbnNpZGVyZWQgdGhlIHN1YmplY3QtbWF0dGVyIG9mIGEgdHJ1c3QuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkZsZXRjaGVyIHYgRmxldGNoZXI8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IChUaGlzIGhhcyBvbmx5IGJlZW4gYXBwbGllZCB0byB0cnVzdHMgb2YgPHNwYW4gY2xhc3M9XCJpdFwiPm1vbmV5PC9zcGFuPikuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gQnV0IG9ubHkgaWYgdGhlIHByb3BlcnR5IGFscmVhZHkgZXhpc3RzLiBUaGlzIGV4Y2x1ZGVzIGEgcHJvbWlzZSBhYm91dCB0aGUgPHNwYW4gY2xhc3M9XCJpdFwiPnByb2NlZWRzPC9zcGFuPiBvZiBhIGZ1dHVyZSBzYWxlLCB3aGljaCBkbyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgQ29va2UmIzgyMTc7cyBTVDwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICJBbHRob3VnaCB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmxldGNoZXI8L3NwYW4+IGNhc2VzIGNvbnRyaXZlIHRvIG1ha2UgbmFycm93IGZpbmRpbmdzIHRvIHRoZSBjb250cmFyeSwgc29tZW9uZSB0byB3aG9tIHNvbWV0aGluZyBpcyBwcm9taXNlZCBpcyBhIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPnZvbHVudGVlcjwvc3Bhbj4gJm1kYXNoOyBpdCBjb3VsZCBiZSBhcmd1ZWQgdGhpcyBjb25zdGl0dXRlcyBhbiBhZGRpdGlvbmFsIGRlIGZhY3RvIGV4Y2VwdGlvbiB0byB0aGUgcnVsZS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkVzdGFibGlzaGVkIEV4Y2VwdGlvbnM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cIml0XCI+SW4gdGhyZWUgc2l0dWF0aW9ucywgZXF1aXR5IDxzcGFuIGNsYXNzPVwiYmRcIj53aWxsPC9zcGFuPiBhc3Npc3QgYSB2b2x1bnRlZXIuPC9zcGFuPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj4oMSkgUnVsZSA8c3BhbiBjbGFzcz1cIml0XCI+aW48L3NwYW4+IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlN0cm9uZyB2IEJpcmQ8L3NwYW4+PC9zcGFuPjxicj5BIGZsYXdlZCBpbnRlciB2aXZvcyBnaWZ0IHdpbGwgYmUgcGVyZmVjdGVkIG9uIHRoZSBkb25vciYjODIxNztzIGRlYXRoLCBzaG91bGQgaXRzIGxlZ2FsIHRpdGxlIGhhcHBlbiB0byBoYXZlIHZlc3RlZCBpbiB0aGUgZG9uZWUgYnkgdmlydHVlIG9mIHRoZSBkb25lZSBiZWluZyBhbiBleGVjdXRvci48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPkNvbmRpdGlvbnM8L3NwYW4+ICZtZGFzaDsiLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+KDIpIERvbmF0aW8gTW9ydGlzIENhdXNhPC9zcGFuPjxicj5BbiBvbGQgd2F5IG9mIG1ha2luZyBhIHdpbGwuIEEgZGVhdGhiZWQgZ2lmdCwgYSBtb3JiaWRpdHkgZ2lmdCAmbWRhc2g7IHVzZWZ1bCBpbiBzaXR1YXRpb25zIHdoZXJlIHNvbWV0aGluZyB1bmV4cGVjdGVkbHkgPHNwYW4gY2xhc3M9XCJpdFwiPmtpbGxzIHlvdTwvc3Bhbj4sIGJ1dCB0aGVyZSYjODIxNztzIG5vIHNvbGljaXRvciB0byBoYW5kLjxicj48c3BhbiBjbGFzcz1cIml0XCI+Q29uZGl0aW9uczwvc3Bhbj4gJm1kYXNoOyIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBkb25vciBpbnRlbmRlZCB0aGUgaW50ZXIgdml2b3MgZ2lmdC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlN1Y2ggYW4gaW50ZW50aW9uIHBlcnNpc3RlZCB1bnRpbCBkZWF0aC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBkb25lZSBpcyBhcHBvaW50ZWQgZXhlY3V0b3Igb3IgYWRtaW5pc3RyYXRvci48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBzdWJqZWN0IG1hdHRlciB3YXMgY2FwYWJsZSBvZiBzdXJ2aXZpbmcgdGhlIGRvbm9yJiM4MjE3O3MgZGVtaXNlLjwvc3Bhbj48L2xpPjwvb2w+PHNwYW4gY2xhc3M9XCJubFwiPiBTaG91bGQgdGhlIHRpdGxlIHRvIGEgdHJ1c3QgcHJvcGVydHkgdmVzdCBpbiBhIHRydXN0ZWUsIGJ1dCBieSB0aGUgPHNwYW4gY2xhc3M9XCJpdFwiPndyb25nPC9zcGFuPiBtZWFucywgdGhleSBzdGlsbCBvdWdodCB0byBjYXJyeSBvdXQgdGhlIHRydXN0LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBSYWxsaTwvc3Bhbj4uPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBHaWZ0IG1hZGUgaW4gY29udGVtcGxhdGlvbiBvZiBkZWF0aC4gT24gYmVpbmcgc2VudCB0byBJcmFxLCBvciB0b2xkIHlvdSYjODIxNzt2ZSBnb3Qgd2Vla3MgdG8gbGl2ZSwgZXRjLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFdpdGggYSBjb25kaXRpb24gcHJlY2VkZW50ICZtZGFzaDsgdGhlIGRvbm9yJiM4MjE3O3MgZGVhdGguICYjODIyMDtJIHdhbnQgeW91IHRvIGhhdmUgdGhpcyA8c3BhbiBjbGFzcz1cIml0XCI+aWY8L3NwYW4+IEkgZGllLiYjODIyMTs8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBQaHlzaWNhbCB0cmFuc2ZlciB0byB0aGUgZG9uZWUgb2YgdGhlIHByb3BlcnR5IDxzcGFuIGNsYXNzPVwiaXRcIj5vcjwvc3Bhbj4gYSBzaW11bGFjcnVtLjwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVGl0bGUgZGVlZHMsIGNhc2ggY2FyZCwgaG91c2Uga2V5cywgZXRjLi4uPC9zcGFuPjwvbGk+PC91bD48L3VsPiIsCiAgICAgICAgIkNkVCYjODIxNztzIGV4YW1wbGU6IGNoYXAgdGhvdWdodCBoZSB3YXMgZHlpbmcuIEdhdmUgZWFjaCBvZiBzaXggcGVvcGxlIHJlcHJlc2VudGF0aXZlIGdpZnRzLiBXZW50IGhvbWUsIHRyaWVkIHRvIGNvbW1pdCBzdWljaWRlICZtZGFzaDsgYnV0IGZvdW5kIEdvZC4gV2VudCBiYWNrIHRvIGVhY2gsIGFza2luZyBmb3IgaGlzIHN0dWZmIGJhY2suIEZvdXIgb3V0IG9mIHRoZSBzaXggb2Ygd2hvbSBzYWlkIDxzcGFuIGNsYXNzPVwiaXRcIj5ubzwvc3Bhbj4uIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QnV0IGFzIGhlIGhhZG4mIzgyMTc7dCBhY3R1YWxseSA8c3BhbiBjbGFzcz1cIml0XCI+ZGllZDwvc3Bhbj4sIHNvIHRoZXJlIHdhcyBubyB0cmFuc2ZlciBvZiBwcm9wZXJ0eS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZXNlIGFyZSBhcyAmIzgyMTY7YmFkJiM4MjE3OyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5zZWNyZXQgdHJ1c3RzPC9zcGFuPiBpbiB0aGVpciBhdm9pZGFuY2Ugb2YgZm9ybWFsaXRpZXMgJm1kYXNoOyBidXQgdGhlcmUmIzgyMTc7cyBub3QgbXVjaCBsaXRpZ2F0aW9uLjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiKigzKSA8c3BhbiBjbGFzcz1cImxuayBhcmJcIiBkYXRhLWxuPVwiaHR0cDovL3d3dy5sZWdpc2xhdGlvbi5nb3YudWsvdWtwZ2EvMTk5OS8zMS9jb250ZW50c1wiPkNvbnRyYWN0cyAoVGhpcmQgUGFydHkgUmlnaHRzKSBBY3QgMTk5OTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gRXhwcmVzc2x5IHN0YXRlcyB0aGF0IGNvdmVuYW50cyBhcmUgY29udHJhY3RzLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IElmIHlvdSYjODIxNztyZSBleHByZXNzbHkgb3IgaW1wbGllZGx5IG5hbWVkIGFzIHRha2luZyBhIGJlbmVmaXQsIHRoZW4geW91IGhhdmUgPHNwYW4gY2xhc3M9XCJiZFwiPnRoZSBzYW1lIHJpZ2h0cyBhcyB5b3Ugd291bGQgaW4gY29udHJhY3QuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFNvbWUgdGV4dHMgc2F5IHRoZXJlIGlzIGRvdWJ0ICZtZGFzaDsgYnV0IHRoZSBzdGF0dXRlIGlzIGNsZWFyLjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPig0KSBQcm9wcmlldGFyeSBFc3RvcHBlbDwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gQXNzdXJhbmNlLCByZWxpYW5jZSwgZGV0cmltZW50LCBhbmQgaW4gbW9kZXJuIHRpbWVzLCB1bmNvbnNjaW9uYWJpbGl0eS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBDZFQ6IGl0IG91Z2h0IHRvIGJlIGNhbGxlZCA8c3BhbiBjbGFzcz1cIml0XCI+cHJvcGVydHkgZXN0b3BwZWw8L3NwYW4+LCBhcyBpdCBlbnRhaWxzIGVzdG9wcGluZyB0aGUgdXNlIG9mIDxzcGFuIGNsYXNzPVwiaXRcIj55b3VyIG93biBwcm9wZXJ0eTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gSW4gPHNwYW4gY2xhc3M9XCJpdFwiPkxhbmQ8L3NwYW4+LCBzZWUgYWxzbyA8c3BhbiBjbGFzcz1cImxuayBhcmJcIiBkYXRhLWxuPVwibGFuZC5odG1sP249UHJvcHJpZXRhcnklMjUyMEVzdG9wcGVsXCI+UHJvcHJpZXRhcnkgRXN0b3BwZWw8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImxuayBhcmJcIiBkYXRhLWxuPVwibGFuZC5odG1sP249R2lsbGV0JTI1MjB2JTI1MjBIb2x0XCI+R2lsbGV0IHYgSG9sdDwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIKICAgIF0sCiAgICAiTkFNRSI6ICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzIC0gQXNzaXN0YW5jZSBmb3IgVm9sdW50ZWVycyIKfSwKewogICAgIkNBVEVHT1JZIjogIkNvbnN0aXR1dGlvbiBvZiBUcnVzdHMgJm1kYXNoOyBJbmNvbXBsZXRlbmVzcyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJNaWxyb3kgdiBMb3JkIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJQZW5uaW5ndG9uIHYgV2FpbmUiLAogICAgICAgICJSZSBSb3NlIChvZiAxOTUyKSIsCiAgICAgICAgIlplaXRhbCB2IEtheWUiLAogICAgICAgICJDaG9pdGhyYW0gdiBQYWdhcmluaSIsCiAgICAgICAgIlJlIFJvc2UgKG9mIDE5NDkpIiwKICAgICAgICAiTGxveWQncyB2IEhhcnBlciIsCiAgICAgICAgIkZsZXRjaGVyIHYgRmxldGNoZXIiLAogICAgICAgICJTdHJvbmcgdiBCaXJkIiwKICAgICAgICAiUmUgUmFsbGkiLAogICAgICAgICJSZSBGbGF2ZWxsIiwKICAgICAgICAiRG9uIEtpbmcgdiBGcmFuayBXYXJyZW4iLAogICAgICAgICJSZSBDb29rZSdzIFNUIgogICAgXSwKICAgICJOVU1CRVIiOiAiNDAiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkZvciBlcXVpdHkgdG8gc3RlcCBpbiBhbmQgY29tcGxldGUgYW4gaW1wZXJmZWN0IGdpZnQsIHRoZSBzZXR0bG9yIG11c3QgaGF2ZSBkb25lIDxzcGFuIGNsYXNzPVwiaXRcIj5ldmVyeXRoaW5nIHJlcXVpcmVkIGJ5IHRoZSBuYXR1cmUgb2YgdGhlIHRydXN0IHByb3BlcnR5PC9zcGFuPiB0byBlbnN1cmUgaXQgd2FzIHRyYW5zZmVycmVkLiBXaGVyZSBhIHRydXN0IGZhaWxzLCBlcXVpdHkgd2lsbCA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBjb25zdHJ1ZSB0aGUgZG9ub3ImIzgyMTc7cyB3b3JkcyB0byBtYWtlIHRoZSBkb25lZSBhIHRydXN0ZWUsIGFzIHRvIGRvIHNvIGltcG9zZXMgb2JsaWdhdGlvbnMgbm90IGVudGFpbGVkIGJ5IGEgZ2lmdC4iCiAgICBdLAogICAgIk5BTUUiOiAiTWlscm95IHYgTG9yZCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIsCiAgICAgICAgIkluY29tcGxldGVuZXNzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyAmbWRhc2g7IEluY29tcGxldGVuZXNzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNaWxyb3kgdiBMb3JkIiwKICAgICAgICAiWmVpdGFsIHYgS2F5ZSIsCiAgICAgICAgIlBlbm5pbmd0b24gdiBXYWluZSIsCiAgICAgICAgIlJlIFJvc2UgKG9mIDE5NTIpIiwKICAgICAgICAiQ2hvaXRocmFtIHYgUGFnYXJpbmkiLAogICAgICAgICJMbG95ZCdzIHYgSGFycGVyIiwKICAgICAgICAiUmUgRmxhdmVsbCIsCiAgICAgICAgIlJlIENvb2tlJ3MgU1QiLAogICAgICAgICJEb24gS2luZyB2IEZyYW5rIFdhcnJlbiIsCiAgICAgICAgIkZsZXRjaGVyIHYgRmxldGNoZXIiLAogICAgICAgICJSZSBSYWxsaSIsCiAgICAgICAgIlN0cm9uZyB2IEJpcmQiCiAgICBdLAogICAgIk5VTUJFUiI6ICI0MSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJBbHRob3VnaCBlcXVpdHkgd2lsbCBub3QgY29tcGVsIGFuIGltcGVyZmVjdCBnaWZ0IHRvIGJlIGNvbXBsZXRlZCwgaXQgbWF5IG5vdCBjb25zaWRlciBhIGdpZnQgdG8gYmUgc28sIHdoZXJlIHRoZSBkb25vciBkaWQgPHNwYW4gY2xhc3M9XCJpdFwiPmV2ZXJ5dGhpbmcgd2l0aGluIHRoZWlyIHBvd2VyPC9zcGFuPiB0byBkaXZlc3QgdGhlbXNlbHZlcyBvZiB0aGUgcHJvcGVydHkuIEluIHN1Y2ggY2lyY3Vtc3RhbmNlcywgaXQgd2lsbCBzdGVwIGluIGFuZCBjb21wbGV0ZSB0aGUgdHJhbnNmZXIuIEFwcHJvdmVkIGluIGEgbGF0ZXIgY2FzZSB3aXRoIHRoZSBzYW1lIG5hbWUgYW5kIHRoZSBzYW1lIEp1ZGdlLiIKICAgIF0sCiAgICAiTkFNRSI6ICJSZSBSb3NlIChvZiAxOTQ5KSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIsCiAgICAgICAgIkluY29tcGxldGVuZXNzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyAmbWRhc2g7IEluY29tcGxldGVuZXNzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNaWxyb3kgdiBMb3JkIiwKICAgICAgICAiQ2hvaXRocmFtIHYgUGFnYXJpbmkiLAogICAgICAgICJQZW5uaW5ndG9uIHYgV2FpbmUiLAogICAgICAgICJaZWl0YWwgdiBLYXllIiwKICAgICAgICAiUmUgUm9zZSAob2YgMTk0OSkiLAogICAgICAgICJGbGV0Y2hlciB2IEZsZXRjaGVyIiwKICAgICAgICAiUmUgRmxhdmVsbCIsCiAgICAgICAgIkxsb3lkJ3MgdiBIYXJwZXIiLAogICAgICAgICJSZSBDb29rZSdzIFNUIiwKICAgICAgICAiUmUgUmFsbGkiLAogICAgICAgICJEb24gS2luZyB2IEZyYW5rIFdhcnJlbiIsCiAgICAgICAgIlN0cm9uZyB2IEJpcmQiCiAgICBdLAogICAgIk5VTUJFUiI6ICI0MiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJBS0EiOiAiUmUgUm9zZSIsCiAgICAiWUVBUiI6ICIxOTUyIiwKICAgICJOQU1FIjogIlJlIFJvc2UgKG9mIDE5NTIpIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzIiwKICAgICAgICAiSW5jb21wbGV0ZW5lc3MiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIlJlIFJvc2UgWzE5NTJdIEVXQ0EgQ2l2IDQiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkVxdWl0eSB3aWxsIGNvbXBsZXRlIGEgdHJhbnNmZXIgd2hlbiB0aGUgdHJhbnNmZXJvciBoYXMgZG9uZSA8c3BhbiBjbGFzcz1cIml0XCI+ZXZlcnl0aGluZyB3aXRoaW4gdGhlaXIgcG93ZXI8L3NwYW4+IHRvIGFjaGlldmUgdGhlIHRyYW5zZmVyLiIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiVGhlIHRyYW5zZmVyb3IgaW50ZW5kZWQgdG8gbWFrZSBhIGdpZnQgb2Ygc2hhcmVzIHRvIGhpcyB3aWZlOyBoZSBjb21wbGV0ZWQgdGhlIHJlbGV2YW50IGRvY3VtZW50YXRpb24sIGFuZCBpbiA8c3BhbiBjbGFzcz1cIml0XCI+TWFyY2g8L3NwYW4+LCBkZWxpdmVyZWQgaXQgdG8gdGhlIGNvbXBhbnkgaW4gcXVlc3Rpb24uIFRoZSBjb21wYW55IGRpZG4mIzgyMTc7dCByZWdpc3RlciB0aGUgdHJhbnNmZXIgdW50aWwgPHNwYW4gY2xhc3M9XCJpdFwiPkp1bmU8L3NwYW4+LiBIYWQgdGhleSBkb25lIHNvIE1hcmNoLCBubyB0YXggd291bGQgaGF2ZSBiZWVuIHBheWFibGUgb24gdGhlbSBieSB0aGUgZG9ub3IuIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyAmbWRhc2g7IEluY29tcGxldGVuZXNzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJQZW5uaW5ndG9uIHYgV2FpbmUiLAogICAgICAgICJaZWl0YWwgdiBLYXllIiwKICAgICAgICAiUmUgUm9zZSAob2YgMTk1MikiLAogICAgICAgICJSZSBSb3NlIChvZiAxOTQ5KSIsCiAgICAgICAgIk1pbHJveSB2IExvcmQiLAogICAgICAgICJSZSBGbGF2ZWxsIiwKICAgICAgICAiTGxveWQncyB2IEhhcnBlciIsCiAgICAgICAgIlN0cm9uZyB2IEJpcmQiLAogICAgICAgICJEb24gS2luZyB2IEZyYW5rIFdhcnJlbiIsCiAgICAgICAgIlJlIENvb2tlJ3MgU1QiLAogICAgICAgICJSZSBSYWxsaSIsCiAgICAgICAgIkZsZXRjaGVyIHYgRmxldGNoZXIiCiAgICBdLAogICAgIk5VTUJFUiI6ICI0MyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJBS0EiOiAiQ2hvaXRocmFtOyBUQ1AiLAogICAgIllFQVIiOiAiMjAwMSIsCiAgICAiTkFNRSI6ICJDaG9pdGhyYW0gdiBQYWdhcmluaSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIsCiAgICAgICAgIkluY29tcGxldGVuZXNzIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJDaG9pdGhyYW0gdiBQYWdhcmluaSAoMjAwMSkiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIldoZW4gdGhlIGRvbm9yIHRvIGEgdHJ1c3QgaXMgYWxzbyBhIHRydXN0ZWUsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmVxdWl0eSB3aWxsIG5vdCBzdHJpdmUgb2ZmaWNpb3VzbHkgdG8gZGVmZWF0IGEgZ2lmdDwvc3Bhbj4sIGFuZCBzbyBtYXkgY29tcGxldGUgYW4gaW1wZXJmZWN0IGdpZnQgd2hpY2ggd291bGQgZmFpbCBvbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBSb3NlPC9zcGFuPiBncm91bmRzLiAgSXQgY291bGQgYmUgYXJndWVkIHRoYXQsIFRDUCBiZWluZyBpbiBleHRyZW1pcyBhbmQgZHJpZnRpbmcgaW4gYW5kIG91dCBvZiBjb25zY2lvdXNuZXNzLCBoZSA8c3BhbiBjbGFzcz1cIml0XCI+ZGlkPC9zcGFuPiBpbiBmYWN0IGRvIGV2ZXJ5dGhpbmcgd2l0aGluIGhpcyBwb3dlciB0byBkaXZlc3QgaGltc2VsZiBvZiB0aGUgcHJvcGVydHksIDxzcGFuIGNsYXNzPVwiaXRcIj5ldmVyeXRoaW5nIGluIGhpcyBwb3dlcjwvc3Bhbj4gbmF0dXJhbGx5IGJlaW5nIGEgZnVuY3Rpb24gb2YgaGlzIDxzcGFuIGNsYXNzPVwiaXRcIj5jaXJjdW1zdGFuY2VzPC9zcGFuPi4iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzICZtZGFzaDsgSW5jb21wbGV0ZW5lc3MiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIk1pbHJveSB2IExvcmQiLAogICAgICAgICJaZWl0YWwgdiBLYXllIiwKICAgICAgICAiQ2hvaXRocmFtIHYgUGFnYXJpbmkiLAogICAgICAgICJSZSBSb3NlIChvZiAxOTUyKSIsCiAgICAgICAgIlJlIFJvc2UgKG9mIDE5NDkpIiwKICAgICAgICAiRG9uIEtpbmcgdiBGcmFuayBXYXJyZW4iLAogICAgICAgICJGbGV0Y2hlciB2IEZsZXRjaGVyIiwKICAgICAgICAiTGxveWQncyB2IEhhcnBlciIsCiAgICAgICAgIlJlIEZsYXZlbGwiLAogICAgICAgICJSZSBSYWxsaSIsCiAgICAgICAgIlJlIENvb2tlJ3MgU1QiLAogICAgICAgICJTdHJvbmcgdiBCaXJkIgogICAgXSwKICAgICJOVU1CRVIiOiAiNDQiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQUtBIjogIlBlbm5pbmd0b24iLAogICAgIllFQVIiOiAiMjAwMiIsCiAgICAiTkFNRSI6ICJQZW5uaW5ndG9uIHYgV2FpbmUiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnN0aXR1dGlvbiBvZiBUcnVzdHMiLAogICAgICAgICJJbmNvbXBsZXRlbmVzcyIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiUGVubmluZ3RvbiB2IFdhaW5lIFsyMDAyXSBFV0NBIENpdiAyMjciLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkVxdWl0eSB3aWxsIG5vdCBzdGVwIGluIHRvIGNvbXBsZXRlIGFuIGluY29tcGxldGUgZ2lmdCBnaXZlbiBhbWJpdmFsZW50bHksIGV4Y2VwdCB3aGVyZSBub3QgZG9pbmcgc28gd291bGQgYmUgdW5jb25zY2lvbmFibGUuIChBcHByb3ZlZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaG9pdGhyYW08L3NwYW4+LCBidXQgc3Vic2VxdWVudGx5IGRvdWJ0ZWQgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+WmVpdGFsPC9zcGFuPikuIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJHb29nbGUgXHUyMDFjUGVubmluZ3RvbiBNY0doZWUgUUMgSGFyb2xkXHUyMDFkIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFNoYXJlIGRlY2xhcmF0aW9uIHRyYW5zZmVycmluZyBzaGFyZXMgZnJvbSBBZGEgdG8gSGFyb2xkIChQZW5uaW5ndG9uPykgbGVmdCBpbiBkZXNrIGRyYXdlci48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBUaGVuIHNoZSBkaWVkLiBVbmRlciBNaWxyb3ksIHRyYW5zZmVyIG5vdCBjb21wbGV0ZWQuIFRyeWluZyB0byBnaXZlIGEgZ2lmdCwgbm8gYXR0ZW1wdCB0byBjcmVhdGUgYSB0cnVzdC4gU2hhcmUgdHJhbnNmZXIgbmVlZGVkIHRvIHF1YWxpZnkgSGFyb2xkIHRvIGJlIGEgZGlyZWN0b3IsIHByZXN1bWFibHkgb2YgaGVyIGNvbXBhbnkuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gQ291cnQgZGVjaWRlZCBvbiBUQ1AgZ3JvdW5kcy4gVW5jb25zY2lvbmFibGUgdG8gZ28gYmFjayBvbiBBZGFcdTIwMTlzIHdpc2hlcy48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBCdXQgd2h5IHdvdWxkIFRDUFx1MjAxOXMgbmV3IGVxdWl0YWJsZSBtYXhpbSBzdGVwIGluIHRvIG1ha2UgYSBtYW4gYSBjb21wYW55IGRpcmVjdG9yPzwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEFyZGVuIExKOiBcdTIwMWNlcXVpdHkgdGVtcGVycyB0aGUgd2luZCB0byB0aGUgc2hvcm4gbGFtYlx1MjAxZCB4IDMuPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBDZFQ6ICYjODIyMDtUaGlzIGlzIGFjdHVhbGx5IGEgcGxhZ2lhcmlzbSBmcm9tIGEgRnJlbmNobWFuIHdobyBkaWVkIDQwMCB5ZWFycyBhZ28uJiM4MjIxOzwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFJldHJvZml0dGVkIGludG8gUHNhbG0gNiB2ZXJzZSAyLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEFsbCBvZiB0aGlzIGlzIGFjY29yZGluZyB0byBkZSBUaGFuLiBCb29rIGNoYXB0ZXIgY2FsbGVkIFx1MjAxY0VxdWl0eVx1MjAxOXMgU3BlY2lhbCBUZW5kZXJuZXNzXHUyMDFkPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBQZW5uaW5ndG9uIHYgV2FpbmUgaXMgYmFzaWNhbGx5IE1pbHJveSB2IExvcmQuIEJ1dCBkZWNpZGVkIHRoZSBvdGhlciB3YXksIGJlY2F1c2Ugb2YgVENQLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEFyZGVuIExKOiBwb2xpY3kgcmVhc29ucy48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBOLkIuIHRoaXMgY2FzZSBpZ25vcmVzIFBlaHJzc29uIHYgdm9uIEdyZXllcnogKDE5OTkpIFBDLjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyAmbWRhc2g7IEluY29tcGxldGVuZXNzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNaWxyb3kgdiBMb3JkIiwKICAgICAgICAiUGVubmluZ3RvbiB2IFdhaW5lIiwKICAgICAgICAiUmUgUm9zZSAob2YgMTk1MikiLAogICAgICAgICJDaG9pdGhyYW0gdiBQYWdhcmluaSIsCiAgICAgICAgIlJlIFJvc2UgKG9mIDE5NDkpIiwKICAgICAgICAiUmUgRmxhdmVsbCIsCiAgICAgICAgIkxsb3lkJ3MgdiBIYXJwZXIiLAogICAgICAgICJSZSBSYWxsaSIsCiAgICAgICAgIkRvbiBLaW5nIHYgRnJhbmsgV2FycmVuIiwKICAgICAgICAiU3Ryb25nIHYgQmlyZCIsCiAgICAgICAgIkZsZXRjaGVyIHYgRmxldGNoZXIiLAogICAgICAgICJSZSBDb29rZSdzIFNUIgogICAgXSwKICAgICJOVU1CRVIiOiAiNDUiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQUtBIjogIlplaXRhbCIsCiAgICAiWUVBUiI6ICIyMDEwIiwKICAgICJOQU1FIjogIlplaXRhbCB2IEtheWUiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnN0aXR1dGlvbiBvZiBUcnVzdHMiLAogICAgICAgICJJbmNvbXBsZXRlbmVzcyIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiWmVpdGFsIHYgS2F5ZSAoMjAxMCkiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBSb3NlPC9zcGFuPiBkb2N0cmluZSwgdGhhdCB0aGUgZG9ub3IgbXVzdCBkbyA8c3BhbiBjbGFzcz1cIml0XCI+ZXZlcnl0aGluZyBpbiB0aGVpciBwb3dlcjwvc3Bhbj4gdG8gZGl2ZXN0IHRoZW1zZWx2ZXMgb2YgdGhlIHByb3BlcnR5LCAgaXMgc3RpbGwgZ29vZCBsYXcuIE5vdHdpdGhzdGFuZGluZyBjb250cmFkaWN0b3J5IGRpY3RhIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBlbm5pbmd0b248L3NwYW4+LCBhIGRvbm9yJiM4MjE3O3MgY2hhbmdlIG9mIGhlYXJ0IGhhcyBuZXZlciBiZWVuIGNhcGFibGUgb2YgYmVpbmcgPHNwYW4gY2xhc3M9XCJpdFwiPnVuY29uc2Npb25hYmxlPC9zcGFuPi4iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJMbG95ZCdzIHYgSGFycGVyIiwKICAgICAgICAiUmUgQ29va2UncyBTVCIsCiAgICAgICAgIlJlIFJvc2UgKG9mIDE5NDkpIiwKICAgICAgICAiTWlscm95IHYgTG9yZCIsCiAgICAgICAgIkNob2l0aHJhbSB2IFBhZ2FyaW5pIiwKICAgICAgICAiUGVubmluZ3RvbiB2IFdhaW5lIiwKICAgICAgICAiUmUgRmxhdmVsbCIsCiAgICAgICAgIlN0cm9uZyB2IEJpcmQiLAogICAgICAgICJaZWl0YWwgdiBLYXllIiwKICAgICAgICAiUmUgUm9zZSAob2YgMTk1MikiLAogICAgICAgICJSZSBSYWxsaSIsCiAgICAgICAgIkRvbiBLaW5nIHYgRnJhbmsgV2FycmVuIgogICAgXSwKICAgICJOVU1CRVIiOiAiNDYiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQUtBIjogIkZsZXRjaGVyIiwKICAgICJZRUFSIjogIjE4NDQiLAogICAgIk5BTUUiOiAiRmxldGNoZXIgdiBGbGV0Y2hlciIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiRmxldGNoZXIgdiBGbGV0Y2hlciAoMTg0NCkiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkdpdmVuIHRoYXQgYSBwcm9taXNlIGlzIGEgY2hvc2UgaW4gYWN0aW9uLCBhIHBpZWNlIG9mIGludGFuZ2libGUgaW50ZWxsZWN0dWFsIHByb3BlcnR5LCBhIHByb21pc2UgY2FuIGJlIGhlbGQgb24gdHJ1c3QuIiwKICAgICAgICAiVGhlcmUgd2VyZSwgdGhlbiwgdHdvIHRydXN0cy4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVGhlIHByaW1hcnkgdHJ1c3Qgb2YgdGhlIGNhc2gsIGFuZDwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwiYmRcIj5UaGUgcHJvbWlzZSB0byBjcmVhdGUgdGhlIHRydXN0PC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIlRoaXMgaXMgY2xlYXJseSBtYWRuZXNzLiBXaWdyYW0gTEosIHNheXMgQ2xhaXJlLCB3YXMgJiM4MjIwO291dCBvZiBkYXRlIGJ5IGFib3V0IDMwIHllYXJzIG9uIGNvbnRyYWN0IGFuZCBlcXVpdHkuJiM4MjIxOyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBUaGVyZSB1c2VkIHRvIGJlIHNvbWV0aGluZyBjYWxsZWQgbWVyaXRvcmlvdXMgY29uc2lkZXJhdGlvbi4gUmVsaWVkIG9uIFdpbGxpYW1zb24sIHdoaWNoIHdhcyB0aGUgbGVhZGluZyBjYXNlIG9uIG1lcml0b3Jpb3VzIGNvbnNpZGVyYXRpb24uPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBTZWVtZWQgdG8gYmUgdXNpbmcgYW4gb3V0ZGF0ZWQgcnVsZSBvbiBjZXJ0YWludHkgb2YgaW50ZW50aW9uLjwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gRm9sbG93ZWQgYnkgKGF0IGxlYXN0KSAxMyBjYXNlcyBpbiBDQSBhbmQgSEwsIHdoaWNoIENsYWlyZSB0aGlua3MgaXMgcXVpdGUgYSBsb3QuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVGhlIHRleHRib29rcyBzYXkgaXQgaXNuJiM4MjE3O3QgbXVjaCB1c2VkLjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBbiB1bnByZWNlZGVudGVkIGF0dGl0dWRlIHRvIElQIHJpZ2h0cywgaW1wbGljYXRpb25zIG9mIHdoaWNoIGFyZSB0aGF0IGV2ZXJ5IHRpbWUgeW91IG1ha2UgYSBwcm9taXNlLCB0aGUgcHJvbWlzZWUgY291bGQgc3VlIG9uIGl0LiBXaGljaCB3b3VsZCBtYWtlIHRoaW5ncyBhIGxpdHRsZSBjb21wbGV4LiIsCiAgICAgICAgIkNsYWlyZSB0aGlua3MgaXQgd2FzIHdyb25nbHkgZGVjaWRlZC48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPlRoaXMgY2hhcCBGbGV0Y2hlcjo8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IG93bmVkIGEgZmFybSwgaGFkIGFuIGltbWVuc2UgZm9ydHVuZSwga2VlcGluZyBoaXMgd2lmZSBpbiB0aGUgZGFyayBhYm91dCB0aGUgc2l6ZSBvZiBoaXMgd2VhbHRoIG9yIHRoZSBudW1iZXIgb2YgaWxsZWdpdGltYXRlIHNwcm9ncyBoZSYjODIxNztkIHNpcmVkLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IGRpZWQuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gd2l0aG91dCBoYXZpbmcgbWFkZSBwcm92aXNpb24gZm9yIHRoZSBiYXN0YXJkcyAmbWRhc2g7IDxzcGFuIGNsYXNzPVwiaXRcIj5jb3VsZCBoYXZlIHVzZWQgYSBzZWNyZXQgdHJ1c3QsIGJ1dCBkaWRuJiM4MjE3O3QuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IGJ1dCBoYWQgd3JpdHRlbiBhIGRlZWQgb2YgY292ZW5hbnQgbGVhdmluZyBcdTAwYTM2MCwwMDAgZm9yIGFueSBvZiB0aGVtIHJlYWNoaW5nIHRoZSBhZ2Ugb2YgMjEuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cIml0XCI+QnV0Ojwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gQnV0IG5vIG9uZSBrbmV3IGFib3V0IHRoZSBjb3ZlbmFudCwgd2hpY2ggd2FzIGZvdW5kIGluIGEgZGVzayBkcmF3ZXIuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gT25lIGNoaWxkIDxzcGFuIGNsYXNzPVwiaXRcIj5kaWQ8L3NwYW4+IG1ha2UgaXQgdG8gMjEsIGFuZCBwcm9tcHRseSBzdWVkIHRvIGVuZm9yY2UgdGhlIGNvdmVuYW50Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEhlIHdvbiwgYXMgdGhlIGNvdXJ0IGZvdW5kIHRoZSBmYXRoZXIgaGFkIGhlbGQgdGhlIGNvdmVuYW50IG9uIHRydXN0IGZvciB0aGUgc29uLjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyAmbWRhc2g7IEZsZXRjaGVyIENhc2VzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJEb24gS2luZyB2IEZyYW5rIFdhcnJlbiIsCiAgICAgICAgIlJlIEZsYXZlbGwiLAogICAgICAgICJMbG95ZCdzIHYgSGFycGVyIiwKICAgICAgICAiU3Ryb25nIHYgQmlyZCIsCiAgICAgICAgIlBlbm5pbmd0b24gdiBXYWluZSIsCiAgICAgICAgIlJlIFJvc2UgKG9mIDE5NTIpIiwKICAgICAgICAiWmVpdGFsIHYgS2F5ZSIsCiAgICAgICAgIlJlIFJvc2UgKG9mIDE5NDkpIiwKICAgICAgICAiTWlscm95IHYgTG9yZCIsCiAgICAgICAgIkZsZXRjaGVyIHYgRmxldGNoZXIiLAogICAgICAgICJDaG9pdGhyYW0gdiBQYWdhcmluaSIsCiAgICAgICAgIlJlIFJhbGxpIgogICAgXSwKICAgICJOVU1CRVIiOiAiNDciLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIxOTY1IiwKICAgICJOQU1FIjogIlJlIENvb2tlJ3MgU1QiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnN0aXR1dGlvbiBvZiBUcnVzdHMiLAogICAgICAgICJGbGV0Y2hlciBDYXNlcyIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiUmUgQ29va2UmIzgyMTc7cyBTVCAoMTk2NSkiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkJ1Y2tsZXkgTEogJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5GbGV0Y2hlcjwvc3Bhbj4gY291bGRuJiM4MjE3O3QgYmUgYXBwbGllZCB0byBwcm9wZXJ0eSB0aGF0IGRpZG4mIzgyMTc7dCB5ZXQgZXhpc3QuIFRoZSA8c3BhbiBjbGFzcz1cIml0XCI+cHJvY2VlZHMgb2Ygc2FsZTwvc3Bhbj4gb2YgYSB0aGluZyBhcmUgbm90IHRoZSBzYW1lIHRoaW5nIGFzIHRoZSB0aGluZy4iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlNvbiBoYWQgcHJvbWlzZWQgZmF0aGVyLCBzZWVraW5nIHRvIGF2b2lkIHRheCwgdGhhdCBpZiBoZSBzb2xkIGFueSBmYW1pbHktb3duZWQgcG9ydHJhaXRzLCB0aGVuIG1vbmV5IHdvdWxkIGdvIHRvIGhpbS4gU29uIGdhdmUgUmVtYnJhbmR0JiM4MjE3O3MgVGl0dXMgdG8gaGlzIHdpZmUsICYjODIyMDtvbiB0aGUgdW5kZXJzdGFuZGluZyYjODIyMTsgdGhhdCBzaGUmIzgyMTc7ZCBzZWxsIGl0LiYjODIyMTsiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzICZtZGFzaDsgRmxldGNoZXIgQ2FzZXMiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiTGxveWQmIzgyMTc7cyB2IEhhcnBlciAoMTg4MCkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIEZsYXZlbGwiLAogICAgICAgICJEb24gS2luZyB2IEZyYW5rIFdhcnJlbiIsCiAgICAgICAgIlJlIENvb2tlJ3MgU1QiLAogICAgICAgICJaZWl0YWwgdiBLYXllIiwKICAgICAgICAiQ2hvaXRocmFtIHYgUGFnYXJpbmkiLAogICAgICAgICJSZSBSYWxsaSIsCiAgICAgICAgIk1pbHJveSB2IExvcmQiLAogICAgICAgICJTdHJvbmcgdiBCaXJkIiwKICAgICAgICAiUmUgUm9zZSAob2YgMTk0OSkiLAogICAgICAgICJGbGV0Y2hlciB2IEZsZXRjaGVyIiwKICAgICAgICAiUGVubmluZ3RvbiB2IFdhaW5lIiwKICAgICAgICAiUmUgUm9zZSAob2YgMTk1MikiCiAgICBdLAogICAgIk5VTUJFUiI6ICI0OCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiU29uIHByb21pc2VzIHRvIHBheSBvZmYgZGVidCwgZmF0aGVyIHNpZ25zIHRvIHNheSBoZSYjODIxNztsbCBwYXkgaW4gZGVmYXVsdC4iCiAgICBdLAogICAgIllFQVIiOiAiMTg4MCIsCiAgICAiTkFNRSI6ICJMbG95ZCdzIHYgSGFycGVyIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzIiwKICAgICAgICAiRmxldGNoZXIgQ2FzZXMiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzICZtZGFzaDsgRmxldGNoZXIgQ2FzZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkRvbiBLaW5nIHYgRnJhbmsgV2FycmVuIiwKICAgICAgICAiTGxveWQncyB2IEhhcnBlciIsCiAgICAgICAgIlJlIENvb2tlJ3MgU1QiLAogICAgICAgICJaZWl0YWwgdiBLYXllIiwKICAgICAgICAiU3Ryb25nIHYgQmlyZCIsCiAgICAgICAgIlBlbm5pbmd0b24gdiBXYWluZSIsCiAgICAgICAgIlJlIFJhbGxpIiwKICAgICAgICAiQ2hvaXRocmFtIHYgUGFnYXJpbmkiLAogICAgICAgICJGbGV0Y2hlciB2IEZsZXRjaGVyIiwKICAgICAgICAiUmUgUm9zZSAob2YgMTk0OSkiLAogICAgICAgICJNaWxyb3kgdiBMb3JkIiwKICAgICAgICAiUmUgUm9zZSAob2YgMTk1MikiCiAgICBdLAogICAgIk5VTUJFUiI6ICI0OSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjE4ODMiLAogICAgIk5BTUUiOiAiUmUgRmxhdmVsbCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIsCiAgICAgICAgIkZsZXRjaGVyIENhc2VzIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJSZSBGbGF2ZWxsICgxODgzKSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBwcm9taXNlIHRvIHBheSBhbiBhbm51aXR5IG9mIFx1MDBhMzM1MCB3YXMgZGVlbWVkIHRvIGhhdmUgYmVlbiBoZWxkIG9uIHRydXN0IGZvciB0aGUgYmVuZWZpY2lhcnkuIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJQcm9taXNlIHRvIHBheSBhbiBhbm51aXR5IG9mIFx1MDBhMzM1MCBmcm9tIHByb2NlZWRzIG9mIHByb2Zlc3Npb25hbCBwcmFjdGljZS4iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzICZtZGFzaDsgRmxldGNoZXIgQ2FzZXMgLyBDb25zdGl0dXRpb24gb2YgVHJ1c3RzICZtZGFzaDsgRmxldGNoZXIgQ2FzZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIENvb2tlJ3MgU1QiLAogICAgICAgICJSZSBGbGF2ZWxsIiwKICAgICAgICAiTGxveWQncyB2IEhhcnBlciIsCiAgICAgICAgIlplaXRhbCB2IEtheWUiLAogICAgICAgICJQZW5uaW5ndG9uIHYgV2FpbmUiLAogICAgICAgICJNaWxyb3kgdiBMb3JkIiwKICAgICAgICAiU3Ryb25nIHYgQmlyZCIsCiAgICAgICAgIkZsZXRjaGVyIHYgRmxldGNoZXIiLAogICAgICAgICJSZSBSYWxsaSIsCiAgICAgICAgIlJlIFJvc2UgKG9mIDE5NDkpIiwKICAgICAgICAiUmUgUm9zZSAob2YgMTk1MikiLAogICAgICAgICJDaG9pdGhyYW0gdiBQYWdhcmluaSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjUwIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkV2ZW4gdGhvdWdoIG5vIHN1Ym1pc3Npb25zIHdlcmUgbWFkZSBvbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5GbGV0Y2hlcjwvc3Bhbj4sIHRoZSBwcmluY2lwbGUgd2FzIG5ldmVydGhlbGVzcyB1c2VkIGluIHRoZSBqdWRnbWVudCwgdGhlIGp1ZGdlIGFwcGFyZW50bHkga2VlbiB0byBmbGF1bnQgaGlzIGZhbWlsaWFyaXR5IHdpdGggdGhlIG1vcmUgYXJjYW5lIHNoYWZ0cyBhbmQgY3JldmljZXMgb2YgZXF1aXR5LiIKICAgIF0sCiAgICAiTkFNRSI6ICJEb24gS2luZyB2IEZyYW5rIFdhcnJlbiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIsCiAgICAgICAgIkZsZXRjaGVyIENhc2VzIiwKICAgICAgICAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIsCiAgICAgICAgIkZsZXRjaGVyIENhc2VzIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiSW1wb3J0YW50IgogICAgXSwKICAgICJDSVRBVElPTiI6ICJEb24gS2luZyBQcm9kdWN0aW9ucyB2IEZyYW5rIFdhcnJlbiAoMTk5OSkiLAogICAgIllFQVIiOiAiMTk5OSIKfSwKewogICAgIkNBVEVHT1JZIjogIkNvbnN0aXR1dGlvbiBvZiBUcnVzdHMgJm1kYXNoOyBSdWxlIGluIFN0cm9uZyB2IEJpcmQiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiU3Ryb25nIHYgQmlyZCAoMTg3NCkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIFJhbGxpIiwKICAgICAgICAiUmUgUm9zZSAob2YgMTk0OSkiLAogICAgICAgICJEb24gS2luZyB2IEZyYW5rIFdhcnJlbiIsCiAgICAgICAgIlplaXRhbCB2IEtheWUiLAogICAgICAgICJQZW5uaW5ndG9uIHYgV2FpbmUiLAogICAgICAgICJGbGV0Y2hlciB2IEZsZXRjaGVyIiwKICAgICAgICAiTGxveWQncyB2IEhhcnBlciIsCiAgICAgICAgIlJlIEZsYXZlbGwiLAogICAgICAgICJSZSBSb3NlIChvZiAxOTUyKSIsCiAgICAgICAgIlJlIENvb2tlJ3MgU1QiLAogICAgICAgICJNaWxyb3kgdiBMb3JkIiwKICAgICAgICAiQ2hvaXRocmFtIHYgUGFnYXJpbmkiCiAgICBdLAogICAgIk5VTUJFUiI6ICI1MSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIGZhaWx1cmUgb2YgYSBnaWZ0IHdpbGwgYmUgcGVyZmVjdGVkIHNob3VsZCB0aGUgbGVnYWwgdGl0bGUgdG8gdGhlIHByb3BlcnR5IHZlc3QgaW4gdGhlIGRvbmVlIHdoZW4gdGhlIHNldHRsb3IgZGllcywgYnkgdmlydHVlIG9mIHRoZSBkb25lZSBiZWluZyBhbiBleGVjdXRvci4iCiAgICBdLAogICAgIllFQVIiOiAiMTg3NCIsCiAgICAiTkFNRSI6ICJTdHJvbmcgdiBCaXJkIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzIiwKICAgICAgICAiUnVsZSBpbiBTdHJvbmcgdiBCaXJkIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyAmbWRhc2g7IFJ1bGUgaW4gU3Ryb25nIHYgQmlyZCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSZSBSYWxsaSYjODIxNztzIFdpbGwgVHJ1c3RzIFsxOTY0XSBDaCAyODgiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlN0cm9uZyB2IEJpcmQiLAogICAgICAgICJaZWl0YWwgdiBLYXllIiwKICAgICAgICAiUmUgRmxhdmVsbCIsCiAgICAgICAgIkNob2l0aHJhbSB2IFBhZ2FyaW5pIiwKICAgICAgICAiUmUgQ29va2UncyBTVCIsCiAgICAgICAgIkRvbiBLaW5nIHYgRnJhbmsgV2FycmVuIiwKICAgICAgICAiUmUgUm9zZSAob2YgMTk0OSkiLAogICAgICAgICJGbGV0Y2hlciB2IEZsZXRjaGVyIiwKICAgICAgICAiTGxveWQncyB2IEhhcnBlciIsCiAgICAgICAgIlJlIFJvc2UgKG9mIDE5NTIpIiwKICAgICAgICAiTWlscm95IHYgTG9yZCIsCiAgICAgICAgIlBlbm5pbmd0b24gdiBXYWluZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjUyIiwKICAgICJIRUxEIjogWwogICAgICAgICJJZiBzb21lb25lIHdhcyBpbnRlbmRlZCB0byBiZSBhIHRydXN0ZWUgc2hvdWxkIGVuZCB1cCB3aXRoIHRoZSA8c3BhbiBjbGFzcz1cIml0XCI+cmlnaHQ8L3NwYW4+IHByb3BlcnR5LCBidXQgYnkgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj53cm9uZzwvc3Bhbj4gbWVhbnMsIGRvaW5nIHNvIHdvdWxkIG5ldmVydGhlbGVzcyBnaXZlIHRoZW0gdGhlIGFiaWxpdHkgdG8gY2Fycnkgb3V0IHRoZSB0cnVzdCAmbWRhc2g7IHdoaWNoIGlzIHdoYXQgdGhleSBtdXN0IGRvLiIsCiAgICAgICAgIiYjODIyMDtBIHNvcnJ5IGV4YW1wbGUgb2YgZXF1aXR5IGFidXNlZCYjODIyMTsgJm1kYXNoOyBNZWFnaGVyIGFuZCBMZWhhbmUgKEF1c3RyYWxpYSkiCiAgICBdLAogICAgIllFQVIiOiAiMTk2NCIsCiAgICAiTkFNRSI6ICJSZSBSYWxsaSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIsCiAgICAgICAgIlJ1bGUgaW4gU3Ryb25nIHYgQmlyZCIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlNlY3JldCBUcnVzdHMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlNlY3JldCBUcnVzdHMgLSBUaGVvcnkiLAogICAgICAgICJGb3JtYWxpdGllcyBmb3IgSW50ZXIgVml2b3MgRXhwcmVzcyBUcnVzdHMiLAogICAgICAgICJJbmNvbXBsZXRlIENvbnN0aXR1dGlvbiBhbmQgRmFpbGVkIEdpZnRzIiwKICAgICAgICAiU2VsZi1EZWFsaW5nIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIFN1YmplY3QiLAogICAgICAgICJEaXNob25lc3QgQXNzaXN0YW5jZSIsCiAgICAgICAgIk90aGVyIENoYXJpdGFibGUgUHVycG9zZXMgdW5kZXIgQ2hhcml0aWVzIEFjdCAyMDExIiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgUmVsaWdpb24iLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQgLSBLbm93bGVkZ2UiLAogICAgICAgICJQb2xpdGljYWwgUHVycG9zZSBvZiBhIENoYXJpdHkiLAogICAgICAgICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzIC0gQXNzaXN0YW5jZSBmb3IgVm9sdW50ZWVycyIsCiAgICAgICAgIkNoYXJpdGllcyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjUzIiwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiaXRcIj5BIHR5cGUgb2YgdHJ1c3QgYmFzaWNhbGx5IGV4ZW1wdCBmcm9tIChuZWFybHkpIGFsbCB0aGUgZm9ybWFsaXRpZXMuPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBIYWQgcGFybGlhbWVudCBub3RpY2VkIHRoZXkgZXhpc3RlZCBiZWZvcmUgdGhleSBiZWNhbWUgc28gd2lkZXNwcmVhZCwgd291bGQgaGF2ZSBiYW5uZWQgdGhlbS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBUaGV5IGFyZSBmb3JtZWQgcGFydGx5IGJ5IHRoZSBzZXR0bG9yXHUyMDE5cyB3aWxsLCBhbmQgcGFydGx5IHdoYXQgdGhlIHNldHRsb3IgZG9lcyBkdXJpbmcgaGlzIGxpZmV0aW1lLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFRoZXkgbWFuYWdlLCB0aGVyZWJ5LCB0byBhdm9pZCB0aGUgZm9ybWFsaXRpZXMgZm9yIHdpbGxzLCBhbmQgdGhlIGZvcm1hbGl0aWVzIGZvciBpbnRlciB2aXZvcyB0cnVzdHMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVGhleSBzaG91bGRuXHUyMDE5dCBiZSBhYmxlIHRvLiBCdXQgdGhleSBkby48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIlRoZSBzdWJqZWN0IG9mIHRoZSB0cnVzdCBpcyBlaXRoZXIgc2VjcmV0LCBtYWtpbmcgYW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RlNUPC9zcGFuPjsgb3Igb24gdGhlIGZhY2Ugb2YgdGhlIHdpbGwsIGFuZCBzbyBhIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhTVDwvc3Bhbj4uIEluIGJvdGggY2FzZXMsIGl0cyA8c3BhbiBjbGFzcz1cIml0XCI+dGVybXM8L3NwYW4+IGFyZSBzZWNyZXQuIiwKICAgICAgICAiVGhleSA8c3BhbiBjbGFzcz1cIml0XCI+YXBwZWFyPC9zcGFuPiwgdGhlbiwgdG8gdmlvbGF0ZSA8c3BhbiBjbGFzcz1cImxuayBnc2xuXCI+UzkgV2lsbHMgQWN0IDE4Mzc8L3NwYW4+LCBhcyB0aGV5IGFtb3VudCB0byB0ZXN0YW1lbnRhcnkgZGlzcG9zaXRpb25zIHdoaWNoIGRvbiYjODIxNzt0IGFwcGVhciBpbiB0aGUgd2lsbC4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+V2h5Pzwvc3Bhbj4gSGlzdG9yaWNhbGx5ICZtZGFzaDsgYmVjYXVzZSBvZiA8c3BhbiBjbGFzcz1cIml0XCI+bmF1Z2h0aW5lc3M8L3NwYW4+LiBIaWRpbmcgc2VjcmV0IGZhbWlsaWVzIGZyb20geW91ciBzcG91c2UsIGNvbWJpbmVkIHdpdGggdGhlIGhvcGUgdGhhdCB0aGV5IGRvbiYjODIxNzt0IHR1cm4gdXAgYXQgeW91ciB3YWtlLiBTVHMgYXJlIDxzcGFuIGNsYXNzPVwiaXRcIj5pbnZpc2libGU8L3NwYW4+LCBpbmNsdWRpbmcgdG8gdGhlIElubGFuZCBSZXZlbnVlLCBzbyBob3cgbWFueSBTVHMgdGhlcmUgYWN0dWFsbHkgYXJlIGlzbiYjODIxNzt0IDxzcGFuIGNsYXNzPVwiaXRcIj5rbm93YWJsZTwvc3Bhbj4uIE5vd2FkYXlzICZtZGFzaDsgdG8gaGlkZSBtb25leSBmcm9tIHRoZSBSZXZlbnVlLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5XaGF0JiM4MjE3O3MgdGhlIFNlY3JldD88L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhTVDwvc3Bhbj4gJm1kYXNoOyB0aGUgaWRlbnRpdHkgb2YgdGhlIGJlbmVmaWNpYXJ5Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkZTVDwvc3Bhbj4gJm1kYXNoOyB0aGF0IGEgdHJ1c3QgZXhpc3RzIGF0IGFsbC48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIlBlb3BsZSB0ZW5kIG5vdCB0byBzdWUgb3ZlciBzZWNyZXQgdHJ1c3RzICZtZGFzaDsgdGhleSBwcmVmZXIgdGhlIHNlY3JldCByZW1haW5pbmcgc2VjcmV0LCB0byB0aGUgbG9zcyAoZnJvbSBmcmF1ZCwgZXRjKS4gPHNwYW4gY2xhc3M9XCJiZFwiPk9ubHkgMjkgY2FzZXM8L3NwYW4+IG92ZXIgdGhlIGxhc3QgNTAwIHllYXJzLCBvdXQgb2Ygd2hpY2gsIDxzcGFuIGNsYXNzPVwiYmRcIj5vbmx5IG5pbmUgaXNzdWVzPC9zcGFuPiBoYXZlIGJlZW4gbGl0aWdhdGVkLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5GU1RzPC9zcGFuPiAmbWRhc2g7IG9ibGlnYXRpb24gPHNwYW4gY2xhc3M9XCJiZFwiPmludmlzaWJsZTwvc3Bhbj4gb24gZmFjZSBvZiB3aWxsLiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkUuZy4sIGluIEFsZXgmIzgyMTc7cyB3aWxsLCBcdTIwMThJIGxlYXZlIFx1MDBhM1ggZm9yIEJlbi5cdTIwMTk8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkJ1dCB3aGVuIGhlIHdhcyA8c3BhbiBjbGFzcz1cIml0XCI+YWxpdmU8L3NwYW4+LCBoZSBpbiBmYWN0IGFza2VkIEJlbiB0byBob2xkIHRoZSBtb25leSBvbiB0cnVzdCBmb3IgQ2xhaXJlLjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkhTVHM8L3NwYW4+ICZtZGFzaDsgb2JsaWdhdGlvbiA8c3BhbiBjbGFzcz1cImJkXCI+dmlzaWJsZTwvc3Bhbj4gb24gZmFjZSBvZiB3aWxsLiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkUuZy4sIGluIElhblx1MjAxOXMgd2lsbCwgXHUyMDE4SSBsZWF2ZSBcdTAwYTNZIHRvIEphY2sgb24gdGhlIHRydXN0IGNvbW11bmljYXRlZCB0byBoaW0uXHUyMDE5PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5IZSYjODIxNztkIGFza2VkIEphY2sgdG8gaG9sZCB0aGUgbW9uZXkgZm9yIEtldmluLjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlByZWNhdG9yeSBXb3Jkczwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPlx1MjAxOEkgbGVhdmUgbXkgaG91c2UgdG8gSiwga25vd2luZyB0aGF0IGhlIHdpbGwgdXBob2xkIG15IHdpc2hlcyBhcyB0byBpdHMgZGlzcG9zaXRpb24uXHUyMDE5PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPldvcmRzIDxzcGFuIGNsYXNzPVwiaXRcIj5hcHBlYXJpbmc8L3NwYW4+IHByZWNhdG9yeSBtYXkgYmUgY29uc2lzdGVudCB3aXRoIHRoZXJlIGJlaW5nIGFuIEZTVC4uLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Li4uIGJ1dCA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiB3aXRoIGFuIEhTVC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SXJ2aW5lIHYgU3VsbGl2YW48L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlByZXJlcXVpc2l0ZXMgZm9yIGFsbCBTVHM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SW50ZW50aW9uLCBDb21tdW5pY2F0aW9uIGFuZCBBY2NlcHRhbmNlLCB3aGljaCBjYW4gYmUgYnkgc2lsZW50IGFjcXVpZXNjZW5jZS4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+S2FzcGVyYmF1ZXIgdiBHcmlmZml0aHM8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlRydXN0ZWUgUHJlZGVjZWFzZXMgVGVzdGF0b3I8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIHByZXN1bXB0aW9uIGlzIHRoYXQgdGhpcyBpbnZhbGlkYXRlcyBhbiBGU1QuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIE1hZGRvY2s8L3NwYW4+LCAxOTAyLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VmlyZ28gYXJndWVzIHRoYXQgdGhpcyBzaG91bGQgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdDwvc3Bhbj4gYmUgdGhlIGNhc2UgZm9yIEhTVHMsIG9uIHRoZSBtYXhpbSBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5lcXVpdHkgbm90IGFsbG93aW5nIGEgdHJ1c3QgdG8gZmFpbCBmb3Igd29udCBvZiB0cnVzdGVlczwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Rm9ybWFsaXRpZXMgaW4gRlNUcz88L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+T3R0YXdheSB2IE5vcm1hbjwvc3Bhbj4sIHRoZSBxdWVzdGlvbiBvZiBTNTMoMSkoYikgd2FzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3QgYWRkcmVzc2VkPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJyb3duIHYgUG91cmF1PC9zcGFuPiBpbiBOZXcgWmVhbGFuZCBpbiAxOTk1LCBpdCB3YXMgc2FpZCBvYml0ZXIgdGhhdCBpbiBFbmdsYW5kLCBhIHNlY3JldCB0cnVzdCBvZiBsYW5kIDxzcGFuIGNsYXNzPVwiaXRcIj5kb2VzPC9zcGFuPiBuZWVkIGZvcm1hbGl0aWVzLjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlJ1bGVzIGZvciBGU1RzPC9zcGFuPjxicj48c3BhbiBjbGFzcz1cIml0XCI+Q29tbXVuaWNhdGlvbjwvc3Bhbj4gJm1kYXNoOyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBUaGUgdHJ1c3RlZSBhY2NlcHRlZCBpZiB0aGV5IDxzcGFuIGNsYXNzPVwiaXRcIj5kaWRuJiM4MjE3O3Q8L3NwYW4+cG9zaXRpdmVseSByZWplY3RfIHRoZSB0ZXJtcy4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TW9zcyB2IENvb3Blcjwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gQW55IHRpbWUgYmVmb3JlIHRoZSBzZXR0bG9yIGNyb2FrcywgaW5jbHVkaW5nIGFmdGVyIGV4ZWN1dGlvbiBvZiB0aGUgd2lsbC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+V2FsZ3JhdmUgdiBUZWJiczwvc3Bhbj4sIGJ1dCBjZi4gdGltaW5nIGluIEhTVHMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gTm90IG9ubHkgY29tbXVuaWNhdGVkIDxzcGFuIGNsYXNzPVwiaXRcIj5ieTwvc3Bhbj4gdGhlIHNldHRsb3IsIGJ1dCA8c3BhbiBjbGFzcz1cIml0XCI+dG88L3NwYW4+IHRoZSB0cnVzdGVlLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5XYWxncmF2ZSB2IFRlYmJzPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBNdXN0IGJlIG9mIHRoZSB0ZXJtcywgbm90IG1lcmVseSB0aGUgPHNwYW4gY2xhc3M9XCJpdFwiPmZhY3Q8L3NwYW4+IG9mIHRydXN0ZWVzaGlwLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBCb3llczwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cIml0XCI+QmVuZWZpY2lhcmllczwvc3Bhbj4gJm1kYXNoOyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPk5vIHJ1bGUgcHJldmVudHMgYSB0cnVzdGVlIGJlaW5nIGEgYmVuZWZpY2lhcnkuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+UnVsZXMgZm9yIEhTVHM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+TmVjZXNzYXJpbHkgc3RyaWN0ZXIgdGhhbiBmb3IgRlNUcywgYXMgdGhlIGZhY2Ugb2YgdGhlIHdpbGwgZGVjbGFyZXMgdGhlIGV4aXN0ZW5jZSBvZiBhIHRydXN0Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJpdFwiPkNvbW11bmljYXRpb248L3NwYW4+ICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVGVybXMgbXVzdCBiZSBjb21tdW5pY2F0ZWQgdG8gdGhlIHRydXN0ZWUgPHNwYW4gY2xhc3M9XCJpdFwiPmJlZm9yZTwvc3Bhbj4gb3IgPHNwYW4gY2xhc3M9XCJpdFwiPmF0IHRoZSBzYW1lIHRpbWU8L3NwYW4+IGFzIHRoZSBtYWtpbmcgb2YgdGhlIHdpbGwuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJpdFwiPkFmdGVyd2FyZHM8L3NwYW4+IHdvdWxkIGJlIHRoZSBtb2RpZmljYXRpb24gb2YgYW4gKGltcGxpY2l0KSB0ZXJtIGluIHRoZSB3aWxsLCB3aGljaCB3b3VsZCBiZSBpbnZhbGlkIHVuZGVyIDxzcGFuIGNsYXNzPVwibG5rIGdzbG5cIj5TOSBXaWxscyBBY3QgMTgzNzwvc3Bhbj4sIHdoaWNoIHJlcXVpcmVzIG1vZGlmaWNhdGlvbnMgdG8gdGFrZSBwbGFjZSBieSBjb2RpY2lsLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEJ1dCB0aGVyZSBtYXkgYmUgYSBkYXkgb3IgdHdvJiM4MjE3O3MgbGVld2F5LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CbGFja3dlbGwgdiBCbGFja3dlbGw8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEtlZW48L3NwYW4+LCB0aGUgdGVybXMgaGFkIGFscmVhZHkgYmVlbiBjb21tdW5pY2F0ZWQsIGJ1dCB0aGUgd2lsbCBzYWlkIHRoZSB0ZXJtcyB3b3VsZCBiZSBnaXZlbiBpbiB0aGUgZnV0dXJlICZtZGFzaDsgdGhpcyBkaWRuJiM4MjE3O3QgZGVmZWF0IHRoZSB3aWxsLjwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gJiM4MjIwO1NhaWxpbmcgdW5kZXIgc2VhbGVkIG9yZGVycywmIzgyMjE7IGkuZS4sIHRydXN0ZWUgZ2l2ZW4gYW4gZW52ZWxvcGUgdGhleSBhcmVuJiM4MjE3O3QgdG8gb3BlbiB1bnRpbCB0aGUgc2V0dGxvciBzbnVmZnMgaXQsIGRvZXMgbm90IGRlZmVhdCA8c3BhbiBjbGFzcz1cIml0XCI+Y29tbXVuaWNhdGlvbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBBIGxldHRlciB3cml0dGVuIDxzcGFuIGNsYXNzPVwiaXRcIj5iZWZvcmU8L3NwYW4+LCBidXQgZ2l2ZW4gPHNwYW4gY2xhc3M9XCJpdFwiPmFmdGVyPC9zcGFuPiBleGVjdXRpb24gb2YgdGhlIHdpbGwgd2FzIDxzcGFuIGNsYXNzPVwiaXRcIj5pbnZhbGlkPC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgQmF0ZW1hbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJpdFwiPk5vIG90aGVyIGNvbW1vbndlYWx0aCBqdXJpc2RpY3Rpb24gdXNlcyB0aGlzIGNvbW11bmljYXRpb24gcnVsZSwgYW5kIGFsbCB0aGUgYWNhZGVtaWNzIHRoaW5rIGl0XHUyMDE5cyBpbmRlZmVuc2libGUuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJpdFwiPkJlbmVmaWNpYXJpZXM8L3NwYW4+ICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVHJ1c3RlZXMgbWF5IDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+IGFsc28gYmUgYmVuZWZpY2lhcmllcy4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgUmVlczwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cIml0XCI+TW9kaWZpY2F0aW9uPC9zcGFuPiAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IE5vdCBvbmx5IG11c3QgYSBjb2RpY2lsIGJlIGV4ZWN1dGVkLCBidXQgdGhlIG1vZGlmaWNhdGlvbnMgbXVzdCBiZSBjb21tdW5pY2F0ZWQgYmVmb3JlaGFuZCB0byB0aGUgdHJ1c3RlZS48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiU2VjcmV0IFRydXN0cyIKICAgIF0sCiAgICAiTkFNRSI6ICJTZWNyZXQgVHJ1c3RzIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiU2VjcmV0IFRydXN0cyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiU2VjcmV0IFRydXN0cyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJBZHZhbmNlbWVudCBvZiBFZHVjYXRpb24iLAogICAgICAgICJFcXVpdHkgd2lsbCBub3QgYWxsb3cgYSBTdGF0dXRlIHRvIGJlIGFuIENsb2FrIGZvciBGcmF1ZCIsCiAgICAgICAgIlNlbGYtRGVhbGluZyIsCiAgICAgICAgIkNlcnRhaW50eSBvZiBJbnRlbnRpb24iLAogICAgICAgICJQcmV2ZW50aW9uIG9yIFJlbGllZiBvZiBQb3ZlcnR5IiwKICAgICAgICAiQ2hhcml0eSBDb21taXNzaW9uZXIncyBHdWlkYW5jZSAtIFNlcHRlbWJlciAyMDEzIiwKICAgICAgICAiUXVpc3RjbG9zZSBUcnVzdHMiLAogICAgICAgICJVbmF1dGhvcmlzZWQgUHJvZml0cyAtIENvcnBvcmF0ZSBPcHBvcnR1bml0eSIsCiAgICAgICAgIk90aGVyIENoYXJpdGFibGUgUHVycG9zZXMgdW5kZXIgQ2hhcml0aWVzIEFjdCAyMDExIiwKICAgICAgICAiRGlzcG9zaXRpb24gb2YgRXF1aXRhYmxlIEludGVyZXN0cyIKICAgIF0sCiAgICAiU1VNQU1SWSI6ICJUaHNpIGhhcyBpdCB0aGF0IGJvdGgga2luZHMgb2YgU1RzIGFyZSByZWFsbHkgZXN0YWJsaXNoZWQgPHNwYW4gY2xhc3M9XCJpdFwiPmludGVyIHZpdm9zPC9zcGFuPiwgaW5kZXBlbmRlbnRseSBvZiB0aGUgd2lsbC4gSXQgaXMgb25seSB0aGUgPHNwYW4gY2xhc3M9XCJpdFwiPmNvbnN0aXR1dGlvbjwvc3Bhbj4gb2YgdGhlIHRydXN0IHRoYXQgdGFrZXMgYnkgY29uc2VxdWVuY2Ugb2YgdGhlIHdpbGwuICQhUmlja2V0IFsxOTk2XSBDb252IDIwMyEkLiBBY2tub3dsZWRnZWQgYnkgTWVnYXJyeSBWQyBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBTbm93ZGVuPC9zcGFuPi4iLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiTlVNQkVSIjogIjU0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJTbyB3aHkgZXhhY3RseSA8c3BhbiBjbGFzcz1cIml0XCI+ZG88L3NwYW4+IHRoZSBjb3VydHMgdXBob2xkIHRoZXNlIHNvY2lhbGx5IGFuZCBmaXNjYWxseSBwZXJ2ZXJzZSB0cnVzdHM/IiwKICAgICAgICAiVGhlIGxlYWRpbmcgY2FzZSBkb2Vzblx1MjAxOXQgZXZlbiBoYXZlIGEgdmFsaWQgRlNUIGluIGl0ICZtZGFzaDsgdGhlIHdpbGwgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWNDb3JtaWNrIHYgR3JvZ2FuPC9zcGFuPiBpcyB0aHJlZSBsaW5lcyBsb25nLiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBUaGV5JiM4MjE3O3JlIG9sZGVyIHRoYW4gdGhlIHN0YXR1dGUgb2YgRnJhdWRzICgxNjc3KSwgdGh1cyB0aGV5IHByZWRhdGUgPHNwYW4gY2xhc3M9XCJpdFwiPmFsbDwvc3Bhbj4gc3RhdHV0ZSBvbiBmb3JtYWxpdGllcy48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBEZXBlbmRpbmcgb24gdGhlIGFjYWRlbWljL2p1ZGdlOjwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVGhleVx1MjAxOXJlIHJlc3VsdGluZyB0cnVzdHMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVGhleVx1MjAxOXJlIGNvbnN0cnVjdGl2ZSB0cnVzdHMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVGhleVx1MjAxOXJlIGV4cHJlc3MgdHJ1c3RzLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFRoZXlcdTIwMTlyZSA8c3BhbiBjbGFzcz1cIml0XCI+ZGVob3JzIHRoZSB3aWxsPC9zcGFuPiwgaGF2aW5nIG5vdGhpbmcgdG8gZG8gd2l0aCBpdCBhdCBhbGwuPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImJkXCI+RnJhdWQgPHNwYW4gY2xhc3M9XCJpdFwiPlByZXZlbnRpb248L3NwYW4+PC9zcGFuPjwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVGhpcyBjb21lcyBhbG9uZyBhYm91dCAyMDAgeWVhcnMgYWZ0ZXIgdGhlIGp1ZGdlcyBzdGFydCB1cGhvbGRpbmcgdGhlbSwgYXMgYSBtYXR0ZXIgb2YsIGp1c3QgYWJvdXQsIGdvb2QgY29uc2NpZW5jZS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBJbiB0aGUgQzE5dGgsIGluIE1jQ29ybWljayB2IEdyb2dhbiwgVUtITCBsb2dpYyBcdTIwMThpZiB3ZSBkb25cdTIwMTl0IHVwaG9sZCBmdWxseSBzZWNyZXQgdHJ1c3RzLCB0aGUgaW50ZW5kZWQgRlNUcnVzdGVlIHdpbGwgaGF2ZSBjb21taXR0ZWQgZnJhdWQsIGFzIHRoZXkgd2lsbCBoYXZlIGFjY2VwdGVkIG9ibGlnYXRpb24gb2YgdHJ1c3RlZXNoaXAgdGhlbiBhbGxvd2VkIHRlc3RhdG9yIHRvIGRpZSBiZWxpZXZpbmcgaGlzIHdpc2hlcyB3aWxsIGJlIHVwaGVsZC5cdTIwMTkgV2hpY2ggbWFrZXMgYSBraW5kIG9mIHNjcmV3YmFsbCBzZW5zZS4gXHUyMDE4SWYgdGhlIHNlY3JldCBiZW5lZmljaWFyaWVzIGtub3cgYWJvdXQgaXQgKHRoZXkgdXN1YWxseSBkbyksIHRoZW4gdGhleSBzaG91bGQgYmUgYWJsZSB0byBzdWUuIE90aGVyd2lzZSBpdCB3b3VsZCBiZSBmcmF1ZCBhZ2FpbnN0IHRoZW0uXHUyMDE5IFJhdGhlciBjaXJjdWxhci48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5FcXVpdHkgd2lsbCBub3QgYWxsb3cgYSBzdGF0dXRlIHRvIGJlIGEgY2xvYWsgZm9yIGZyYXVkPC9zcGFuPiwgdGhlcmVmb3JlIHRoZSBXaWxscyBBY3Qgb3IgTFBBIDE5MjUgbXVzdCBiZSBkaXNhcHBsaWVkLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFRoaXMgaXMgYXJndWluZyB0aGF0IGZyYXVkLXByZXZlbnRpb24gc3RhdHV0ZXMgc2hvdWxkIG5vdCBiZSBhcHBsaWVkLCBpbiBvcmRlciB0byBwcmV2ZW50IGZyYXVkLjwvc3Bhbj48L2xpPjwvdWw+PC9saT48L3VsPjxzcGFuIGNsYXNzPVwibmxcIj5UaGlzIGV4cGxhbmF0aW9uIDxzcGFuIGNsYXNzPVwiYmRcIj5kb2VzbiYjODIxNzt0IHdvcmsgd2VsbCBmb3IgSFNUczwvc3Bhbj4sIHdoaWNoIGRvIG5vdCBuZWVkIHRvIGJlIHVwaGVsZCB0byBwcmV2ZW50IHRoZSB0cnVzdGVlIGNvbW1pdHRpbmcgZnJhdWQuPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBBIGxldHRlciBhbmQgYSB3aWxsLCBpbiBhIGRyYXdlci4gXHUyMDE4SGVyZSBhcmUgdGhlIHBlb3BsZSBmb3Igd2hvbSB0byBob2xkIHRoaXMsIGJ1dCBkbyBhcyB5b3UgdGhpbmsgSSB3b3VsZCBpZiBJIHdlcmUgc3RpbGwgYWxpdmUuXHUyMDE5PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gU28gc3RyaWN0bHkgc3BlYWtpbmcgdGhlIHJhdGlvIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1jQ29ybWljayB2IEdyb2dhbjwvc3Bhbj4gaXMsIHVtLCBvYml0ZXIgZGljdGEuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gQ2YuIGp1ZGdlbWVudHMgb2YgTG9yZCBIYXRoZXJsZXkgTEMgYW5kIExvcmQgV2VzdGJ1cnksIGJvdGggb3JpZ2luYWxseSBjcmltaW5hbCBsYXd5ZXJzLCBnZXR0aW5nIGNvbmZ1c2VkIGJldHdlZW4gY2l2aWwgYW5kIGNyaW1pbmFsIGxhd3llcnMuPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBIYXZpbmcgdG8gYmUgaW50ZW50aW9uIHRvIGRlY2VpdmUgdGVzdGF0b3IuIChNb3JlIHRoYW4gbmVlZGVkIGZvciBjcmltaW5hbCBsYXcpPC9zcGFuPjwvbGk+PC91bD48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5UbyB1cGhvbGQgYSBzZWNyZXQgdHJ1c3QsIHlvdSBuZWVkIHRvIGJlIGFibGUgdG8gZGVtb25zdHJhdGUgdGhhdCBkb2luZyBvdGhlcndpc2Ugd291bGQgYWxsb3cgZnJhdWQuICBOb3QgdGhhdCBmcmF1ZCBoYXMgYWN0dWFsbHkgaGFwcGVuZWQuPC9zcGFuPiIsCiAgICAgICAgIjxvbD48bGkgc3R5bGU9XCJjb3VudGVyLXJlc2V0OiBpdGVtIDE7XCI+PHNwYW4gY2xhc3M9XCJubFwiPiBTZWNyZXQgVHJ1c3RzIG9wZXJhdGUgT3V0c2lkZSB0aGUgV2lsbDxicj5PciA8c3BhbiBjbGFzcz1cIml0XCI+ZGVob3JzIHRoZSB3aWxsPC9zcGFuPiAobm90IHRvIGJlIHByb25vdW5jZWQgY29ycmVjdGx5KS48L3NwYW4+PC9saT48L29sPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5QdXJwb3NlIG9mIFM1Mzwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVG8gcHJvdGVjdCBsYW5kb3duZXJzIGZyb20gc3B1cmlvdXMgY2xhaW1zIG9mIHRyYW5zZmVyLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFRvIHJhaXNlIHN0YW1wIGR1dHkuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVG88L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiU2VjcmV0IFRydXN0cyIKICAgIF0sCiAgICAiTkFNRSI6ICJTZWNyZXQgVHJ1c3RzIC0gVGhlb3J5Igp9LAp7CiAgICAiQ0FURUdPUlkiOiAiU2VjcmV0IFRydXN0cyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJLYXNwZXJiYXVlciB2IEdyaWZmaXRocyAoMjAwMCkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIEJhdGVtYW4iLAogICAgICAgICJXYWxncmF2ZSB2IFRlYmJzIiwKICAgICAgICAiUmUgU25vd2RlbiIsCiAgICAgICAgIlJlIEJveWVzIiwKICAgICAgICAiSXJ2aW5lIHYgU3VsbGl2YW4iLAogICAgICAgICJCcm93biB2IFBvdXJhdSIsCiAgICAgICAgIlJlIEtlZW4iLAogICAgICAgICJSZSBSZWVzIiwKICAgICAgICAiQmxhY2t3ZWxsIHYgQmxhY2t3ZWxsIiwKICAgICAgICAiUmUgTWFkZG9jayIsCiAgICAgICAgIk90dGF3YXkgdiBOb3JtYW4iLAogICAgICAgICJNb3NzIHYgQ29vcGVyIgogICAgXSwKICAgICJOVU1CRVIiOiAiNTUiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIk1vZGVybiBDQSBhdXRob3JpdHkgb24gdGhlIGNvbmRpdGlvbnMgZm9yIHNlY3JldCB0cnVzdHMuIFBlciBQZXRlciBHaWJzb24gTEogJm1kYXNoOyAmIzgyMjA7dGhlIGF1dGhvcml0aWVzIG1ha2UgcGxhaW4gdGhhdCB3aGF0IGlzIG5lZWRlZCBpczogIDEuIGFuIDxzcGFuIGNsYXNzPVwiYmRcIj5pbnRlbnRpb248L3NwYW4+IGJ5IHRoZSB0ZXN0YXRvciB0byBjcmVhdGUgYSB0cnVzdCwgc2F0aXNmeWluZyB0aGUgdHJhZGl0aW9uYWwgcmVxdWlyZW1lbnRzIG9mIHRocmVlIGNlcnRhaW50aWVzICguLi4pIDIuIHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+Y29tbXVuaWNhdGlvbjwvc3Bhbj4gb2YgdGhlIHRydXN0IHRvIHRoZSBsZWdhdGVlcywgYW5kIDMuIDxzcGFuIGNsYXNzPVwiYmRcIj5hY2NlcHRhbmNlPC9zcGFuPiBvZiB0aGUgdHJ1c3QgYnkgdGhlIGxlZ2F0ZWUsIHdoaWNoIGNhbiB0YWtlIHRoZSBmb3JtIG9mIDxzcGFuIGNsYXNzPVwiYmRcIj5zaWxlbnQgYWNxdWllc2NlbmNlPC9zcGFuPi4mIzgyMjE7IgogICAgXSwKICAgICJZRUFSIjogIjIwMDAiLAogICAgIk5BTUUiOiAiS2FzcGVyYmF1ZXIgdiBHcmlmZml0aHMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlNlY3JldCBUcnVzdHMiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJTZWNyZXQgVHJ1c3RzICZtZGFzaDsgRnVsbHkgU2VjcmV0IFRydXN0cyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSZSBNYWRkb2NrICgxOTAyKSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgQm95ZXMiLAogICAgICAgICJJcnZpbmUgdiBTdWxsaXZhbiIsCiAgICAgICAgIldhbGdyYXZlIHYgVGViYnMiLAogICAgICAgICJLYXNwZXJiYXVlciB2IEdyaWZmaXRocyIsCiAgICAgICAgIlJlIFJlZXMiLAogICAgICAgICJCcm93biB2IFBvdXJhdSIsCiAgICAgICAgIk1vc3MgdiBDb29wZXIiLAogICAgICAgICJPdHRhd2F5IHYgTm9ybWFuIiwKICAgICAgICAiUmUgS2VlbiIsCiAgICAgICAgIkJsYWNrd2VsbCB2IEJsYWNrd2VsbCIsCiAgICAgICAgIlJlIEJhdGVtYW4iLAogICAgICAgICJSZSBTbm93ZGVuIgogICAgXSwKICAgICJOVU1CRVIiOiAiNTYiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlNob3VsZCB0aGUgdHJ1c3RlZSBvZiBhbiBGU1QgcHJlZGVjZWFzZSB0aGUgc2V0dGxvciwgdGhlIHRydXN0IHdpbGwgZmFpbC4iCiAgICBdLAogICAgIllFQVIiOiAiMTkwMiIsCiAgICAiTkFNRSI6ICJSZSBNYWRkb2NrIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTZWNyZXQgVHJ1c3RzIiwKICAgICAgICAiRnVsbHkgU2VjcmV0IFRydXN0cyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlNlY3JldCBUcnVzdHMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIEJveWVzIiwKICAgICAgICAiSXJ2aW5lIHYgU3VsbGl2YW4iLAogICAgICAgICJLYXNwZXJiYXVlciB2IEdyaWZmaXRocyIsCiAgICAgICAgIkJsYWNrd2VsbCB2IEJsYWNrd2VsbCIsCiAgICAgICAgIldhbGdyYXZlIHYgVGViYnMiLAogICAgICAgICJSZSBSZWVzIiwKICAgICAgICAiUmUgS2VlbiIsCiAgICAgICAgIk1vc3MgdiBDb29wZXIiLAogICAgICAgICJCcm93biB2IFBvdXJhdSIsCiAgICAgICAgIlJlIEJhdGVtYW4iLAogICAgICAgICJSZSBNYWRkb2NrIiwKICAgICAgICAiUmUgU25vd2RlbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjU3IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTk3MSIsCiAgICAiTkFNRSI6ICJPdHRhd2F5IHYgTm9ybWFuIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTZWNyZXQgVHJ1c3RzIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRGVubmluZyIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiT3R0YXdheSB2IE5vcm1hbiAoMTk3MSkiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFuIG9yYWwgRlNUIG9mIGxhbmQgd2FzIDxzcGFuIGNsYXNzPVwiaXRcIj51cGhlbGQ8L3NwYW4+LiBUaGUgZXZpZGVuY2UgZm9yIGV4aXN0ZW5jZSBvZiB0aGUgdHJ1c3QsIHdoaWNoIGdhdmUgdGhlIGxhbmQgdG8gdGhlIHRlc3RhdG9yJiM4MjE3O3MgY2hhdWZmZXVyLCB3YXMgYW4gb3ZlcmhlYXJkIHBob25lIGNvbnZlcnNhdGlvbi4gT3ZlcmhlYXJkIGJ5IHRoZSA8c3BhbiBjbGFzcz1cIml0XCI+Y2hhdWZmZXVyPC9zcGFuPi4gIEF0IG5vIHBvaW50IHdhcyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TNTMoMSkoYik8L3NwYW4+IG1lbnRpb25lZCwgYWx0aG91Z2ggb25lIHNrZWxldG9uIGhhZCAmIzgyMTY7cy41MygxKShiKT8mIzgyMTc7IHNjcmliYmxlZCBpbiB0aGUgbWFyZ2luLiIsCiAgICAgICAgIlRoaXMgaXMgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdDwvc3Bhbj4gdGhlcmVmb3JlLCBhdXRob3JpdHkgZm9yIHRoZSBub24tYXBwbGljYXRpb24gb2YgUzUzKDEpKGIpIGluIFNUcy4iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJTZWNyZXQgVHJ1c3RzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIkJyb3duIHYgUG91cmF1ICgxOTk1KSBOWiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgUmVlcyIsCiAgICAgICAgIlJlIEtlZW4iLAogICAgICAgICJSZSBCb3llcyIsCiAgICAgICAgIlJlIFNub3dkZW4iLAogICAgICAgICJNb3NzIHYgQ29vcGVyIiwKICAgICAgICAiUmUgQmF0ZW1hbiIsCiAgICAgICAgIldhbGdyYXZlIHYgVGViYnMiLAogICAgICAgICJPdHRhd2F5IHYgTm9ybWFuIiwKICAgICAgICAiSXJ2aW5lIHYgU3VsbGl2YW4iLAogICAgICAgICJCbGFja3dlbGwgdiBCbGFja3dlbGwiLAogICAgICAgICJSZSBNYWRkb2NrIiwKICAgICAgICAiS2FzcGVyYmF1ZXIgdiBHcmlmZml0aHMiCiAgICBdLAogICAgIk5VTUJFUiI6ICI1OCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQW4gb3JhbCBzZWNyZXQgdHJ1c3Qgb2YgbGFuZCB3YXMgaGVsZCB2YWxpZC4gT2JpdGVyICZtZGFzaDsgJiM4MjE2O2J1dCBub3QgaW4gRW5nbGFuZC4mIzgyMTc7IiwKICAgICAgICAiU28gYXQgdGhpcyBwb2ludCwgd2UgZG9uXHUyMDE5dCBrbm93IHdoZXRoZXIgcy41MygxKShiKSBhcHBsaWVzIHRvIHNlY3JldCB0cnVzdHMgb3Igbm90LiIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTk1IiwKICAgICJOQU1FIjogIkJyb3duIHYgUG91cmF1IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTZWNyZXQgVHJ1c3RzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiU2VjcmV0IFRydXN0cyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgS2VlbiIsCiAgICAgICAgIkJyb3duIHYgUG91cmF1IiwKICAgICAgICAiUmUgU25vd2RlbiIsCiAgICAgICAgIlJlIEJveWVzIiwKICAgICAgICAiUmUgTWFkZG9jayIsCiAgICAgICAgIklydmluZSB2IFN1bGxpdmFuIiwKICAgICAgICAiQmxhY2t3ZWxsIHYgQmxhY2t3ZWxsIiwKICAgICAgICAiUmUgUmVlcyIsCiAgICAgICAgIldhbGdyYXZlIHYgVGViYnMiLAogICAgICAgICJLYXNwZXJiYXVlciB2IEdyaWZmaXRocyIsCiAgICAgICAgIk90dGF3YXkgdiBOb3JtYW4iLAogICAgICAgICJSZSBCYXRlbWFuIgogICAgXSwKICAgICJOVU1CRVIiOiAiNTkiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIxODYxIiwKICAgICJOQU1FIjogIk1vc3MgdiBDb29wZXIiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlNlY3JldCBUcnVzdHMiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJMZWFkaW5nIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJNb3NzIHYgQ29vcGVyICgxODYxKSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQW55dGhpbmcgb3RoZXIgdGhhbiA8c3BhbiBjbGFzcz1cIml0XCI+cG9zaXRpdmUgcmVqZWN0aW9uPC9zcGFuPiBieSB0aGUgdHJ1c3RlZSBvZiBhbiBGU1QgaXMgYWNjZXB0YW5jZSBvZiB0cnVzdGVlc2hpcCwgaW5jbHVkaW5nIDxzcGFuIGNsYXNzPVwiaXRcIj5zaWxlbmNlPC9zcGFuPi4gRXZlbiBpZiB0aGUgdGVzdGF0b3IgZGllcyBpbW1lZGlhdGVseSBhZnRlciBjb21tdW5pY2F0aW5nIHdpdGggdGhlIHRydXN0ZWUuIE9sZCwgYnV0IHN0aWxsIGdvb2QgbGF3LiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlNlY3JldCBUcnVzdHMgJm1kYXNoOyBGdWxseSBTZWNyZXQgVHJ1c3RzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJXYWxncmF2ZSB2IFRlYmJzIiwKICAgICAgICAiUmUgTWFkZG9jayIsCiAgICAgICAgIlJlIEJveWVzIiwKICAgICAgICAiUmUgUmVlcyIsCiAgICAgICAgIkJyb3duIHYgUG91cmF1IiwKICAgICAgICAiQmxhY2t3ZWxsIHYgQmxhY2t3ZWxsIiwKICAgICAgICAiT3R0YXdheSB2IE5vcm1hbiIsCiAgICAgICAgIlJlIEtlZW4iLAogICAgICAgICJLYXNwZXJiYXVlciB2IEdyaWZmaXRocyIsCiAgICAgICAgIk1vc3MgdiBDb29wZXIiLAogICAgICAgICJSZSBCYXRlbWFuIiwKICAgICAgICAiUmUgU25vd2RlbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjYwIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTg2OSIsCiAgICAiTkFNRSI6ICJJcnZpbmUgdiBTdWxsaXZhbiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiU2VjcmV0IFRydXN0cyIsCiAgICAgICAgIkZ1bGx5IFNlY3JldCBUcnVzdHMiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIklydmluZSB2IFN1bGxpdmFuICgxODY5KSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UHJlY2F0b3J5IHdvcmRzPC9zcGFuPiBtYXkgYmUgY29tcGF0aWJsZSB3aXRoIGEgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RnVsbHktU2VjcmV0IFRydXN0PC9zcGFuPiAmbWRhc2g7IGJ1dCB3aXRob3V0IGEgY2xlYXIgb2JsaWdhdGlvbiBvZiB0cnVzdGVlc2hpcCBvbiB0aGUgZmFjZSBvZiB0aGUgd2lsbCwgdGhleSBjYW5ub3QgZXN0YWJsaXNoIGEgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SGFsZi1TZWNyZXQgVHJ1c3Q8L3NwYW4+LiIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBjYXNlIGludm9sdmluZyB0aGUgYXJteSwgYSBoYXQsIGFuZCBhIHNlY3JldCB0cnVzdC4gVGhlIHRlcm1zIHdlcmUgdGhhdCBzaGUgd2FzIHRvIGtlZXAgPHNwYW4gY2xhc3M9XCJpdFwiPnNvbWU8L3NwYW4+IG9mIHRoZSBiZW5lZml0IGhlcnNlbGYsIHRoZW4gZGlzdHJpYnV0ZSB0aGUgcmVzdC4gU28gc2hlIGNvdWxkIGhhdmUga2VwdCB0aGUgbG90LiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlNlY3JldCBUcnVzdHMgJm1kYXNoOyBGdWxseSBTZWNyZXQgVHJ1c3RzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBNYWRkb2NrIiwKICAgICAgICAiUmUgQm95ZXMiLAogICAgICAgICJJcnZpbmUgdiBTdWxsaXZhbiIsCiAgICAgICAgIk90dGF3YXkgdiBOb3JtYW4iLAogICAgICAgICJSZSBCYXRlbWFuIiwKICAgICAgICAiTW9zcyB2IENvb3BlciIsCiAgICAgICAgIkJyb3duIHYgUG91cmF1IiwKICAgICAgICAiUmUgU25vd2RlbiIsCiAgICAgICAgIkthc3BlcmJhdWVyIHYgR3JpZmZpdGhzIiwKICAgICAgICAiUmUgS2VlbiIsCiAgICAgICAgIlJlIFJlZXMiLAogICAgICAgICJCbGFja3dlbGwgdiBCbGFja3dlbGwiCiAgICBdLAogICAgIk5VTUJFUiI6ICI2MSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjE4NTUiLAogICAgIk5BTUUiOiAiV2FsZ3JhdmUgdiBUZWJicyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiU2VjcmV0IFRydXN0cyIsCiAgICAgICAgIkZ1bGx5IFNlY3JldCBUcnVzdHMiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIldhbGdyYXZlIHYgVGViYnMgKDE4NTUpIiwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgaW50ZW5kZWQgdHJ1c3RlZXMgb2YgYW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RlNUPC9zcGFuPiBtdXN0IGhhdmUgYmVlbiBpbmZvcm1lZCBvZiB0aGUgdGVybXMgd2hpbHN0IHRoZSB0ZXN0YXRvciB3YXMgc3RpbGwgbGl2aW5nLiBUaGUgdGVzdGF0b3IgbWVyZWx5IGhhdmluZyB3cml0dGVuIGluc3RydWN0aW9ucyB0byB0aGUgdHJ1c3RlZXMgaXMgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdDwvc3Bhbj4gZW5vdWdoLiIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiTW9uZXkgYW5kIGxhbmQgaGFkIGJlZW4gbGVmdCB0byBhIE1yLiBNYXJ0aW4gYW5kIGEgTXIuIFRlYmJzIGluIHRlc3RhdG9yXHUyMDE5cyB3aWxsIGFzIGpvaW50IHRlbmFudHMuIDxzcGFuIGNsYXNzPVwiaXRcIj5OZWl0aGVyIG9uZSBub3IgdGhlIG90aGVyIHJlY2VpdmVkIGFueSBjb21tdW5pY2F0aW9uPC9zcGFuPiBiZWZvcmUgdGhlIHRlc3RhdG9yIGRpZWQuIEEgbGV0dGVyIHN1YnNlcXVlbnRseSBlbWVyZ2VkIG9mIHRoZSB0ZXN0YXRvciYjODIxNztzIHdpc2ggdG8gZ2l2ZSB0aGUgbW9uZXkgdG8gY2hhcml0eS4gQnV0IHRoZSB0cnVzdCBmYWlsZWQsIGFuZCB0aGV5IGtlcHQgdGhlIG1vbmV5LiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlNlY3JldCBUcnVzdHMgJm1kYXNoOyBGdWxseSBTZWNyZXQgVHJ1c3RzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJXYWxncmF2ZSB2IFRlYmJzIiwKICAgICAgICAiUmUgTWFkZG9jayIsCiAgICAgICAgIklydmluZSB2IFN1bGxpdmFuIiwKICAgICAgICAiUmUgUmVlcyIsCiAgICAgICAgIk90dGF3YXkgdiBOb3JtYW4iLAogICAgICAgICJNb3NzIHYgQ29vcGVyIiwKICAgICAgICAiS2FzcGVyYmF1ZXIgdiBHcmlmZml0aHMiLAogICAgICAgICJSZSBLZWVuIiwKICAgICAgICAiQmxhY2t3ZWxsIHYgQmxhY2t3ZWxsIiwKICAgICAgICAiQnJvd24gdiBQb3VyYXUiLAogICAgICAgICJSZSBTbm93ZGVuIiwKICAgICAgICAiUmUgQmF0ZW1hbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjYyIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTg4NCIsCiAgICAiTkFNRSI6ICJSZSBCb3llcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiU2VjcmV0IFRydXN0cyIsCiAgICAgICAgIkZ1bGx5IFNlY3JldCBUcnVzdHMiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIlJlIEJveWVzICgxODg0KSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIHNldHRsb3Igb2YgYW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RlNUPC9zcGFuPiBtdXN0IGNvbW11bmljYXRlIG5vdCBvbmx5IHRoZSBmYWN0IG9mIHRydXN0ZWVzaGlwIHRvIHRoZSBpbnRlbmRlZCB0cnVzdGVlcyAmbWRhc2g7IGJ1dCBhbHNvIHRoZSA8c3BhbiBjbGFzcz1cIml0XCI+dGVybXM8L3NwYW4+IG9mIHRoZSB0cnVzdC4iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkFuIGhvbmVzdCBmZWxsYWggd2VudCB0byBjb3VydCwgc2F5aW5nIFx1MjAxOElcdTIwMTltIHRoZSB0cnVzdGVlIGluIHRoaXMgd2lsbCwgYnV0IEkgaGF2ZSBubyBpZGVhIHdoYXQgdG8gZG8gd2l0aCBpdC5cdTIwMTkgVGhlIGNvdXJ0IDxzcGFuIGNsYXNzPVwiaXRcIj5jb3VsZDwvc3Bhbj4gaGF2ZSBzYWlkIFx1MjAxOGl0XHUyMDE5cyBhIGdpZnQsIGtlZXAgaXQuXHUyMDE5IEluc3RlYWQgaXQgcHVuaXNoZWQgaGltIGZvciBoaXMgaG9uZXN0eSwgd2l0aCBhIHJlc3VsdGluZyB0cnVzdCBiYWNrIHRvIHRoZSBlc3RhdGUuIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiU2VjcmV0IFRydXN0cyAmbWRhc2g7IEhhbGYgU2VjcmV0IFRydXN0cyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgS2VlbiIsCiAgICAgICAgIlJlIEJhdGVtYW4iLAogICAgICAgICJSZSBSZWVzIiwKICAgICAgICAiT3R0YXdheSB2IE5vcm1hbiIsCiAgICAgICAgIklydmluZSB2IFN1bGxpdmFuIiwKICAgICAgICAiTW9zcyB2IENvb3BlciIsCiAgICAgICAgIlJlIEJveWVzIiwKICAgICAgICAiUmUgTWFkZG9jayIsCiAgICAgICAgIlJlIFNub3dkZW4iLAogICAgICAgICJLYXNwZXJiYXVlciB2IEdyaWZmaXRocyIsCiAgICAgICAgIldhbGdyYXZlIHYgVGViYnMiLAogICAgICAgICJCcm93biB2IFBvdXJhdSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjYzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTkyOSIsCiAgICAiTkFNRSI6ICJCbGFja3dlbGwgdiBCbGFja3dlbGwiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlNlY3JldCBUcnVzdHMiLAogICAgICAgICJIYWxmIFNlY3JldCBUcnVzdHMiCiAgICBdLAogICAgIkNPTU1FTlQiOiAiQSB0aXBwaW5nIHBvaW50IGluIHRoZSBsYXcsIGFuZCB0aGUganVkZ2VzIHNlZW0gdG8gY2hhbmdlIHRoZWlyIG1pbmQgYWJvdXQgaXQgaGFsZiB3YXkgdGhyb3VnaCB0aGUganVkZ2VtZW50LiBUaGV5IGNoYW5nZSB0aGUgdGhlb3J5IGJ1dCBhcHBseSB0aGUgb2xkIHJ1bGVzLiIsCiAgICAiQ0lUQVRJT04iOiAiQmxhY2t3ZWxsIHYgQmxhY2t3ZWxsICgxOTI5KSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SFNUPC9zcGFuPiB3YXMgdXBoZWxkIGRlc3BpdGUgY29tbXVuaWNhdGlvbiB0byB0aGUgaW50ZW5kZWQgdHJ1c3RlZXMgPHNwYW4gY2xhc3M9XCJpdFwiPnRoZSBuZXh0IGRheTwvc3Bhbj4uIFRoZSBydWxlIHRoYXQgY29tbXVuaWNhdGlvbiBvZiB0aGUgdGVybXMgdG8gdGhlIHRydXN0ZWVzIG9mIGFuIEhTVCA8c3BhbiBjbGFzcz1cIml0XCI+YmVmb3JlIG9yIGF0IHRoZSBzYW1lIHRpbWU8L3NwYW4+IGFzIHRoZSB3aWxsJiM4MjE3O3MgY3JlYXRpb24gaXMgdGhhdCB0aGUgdHJ1c3QgZXhpc3RzIGZyb20gdGhlIG1vbWVudCB0aGUgZGVlZCBvZiB3aWxsIGlzIGV4ZWN1dGVkLCB0aGUgdGVybXMgb2Ygd2hpY2ggYXJlIGltcGxpY2l0bHkgcGFydCBvZiBpdC4iLAogICAgICAgICJMb3JkIFN1bW5lciAmbWRhc2g7ICYjODIyMDthIHRlc3RhdG9yIGNhbm5vdCByZXNlcnZlIHRvIGhpbXNlbGYgYSBwb3dlciB0byBtYWtlIGZ1dHVyZSB1bndpdG5lc3NlZCBkaXNwb3NpdGlvbnMgYnkgbWVyZWx5IG5hbWluZyBhIHRydXN0ZWUgYW5kIGxlYXZpbmcgdGhlIHB1cnBvc2VzIG9mIHRoZSB0cnVzdCB0byBiZSBzdXBwbGllZCBhZnRlcndhcmRzLiBPdGhlcndpc2UsIHRoaXMgd291bGQgZW5hYmxlIHRoZSB0ZXN0YXRvciB0byAmIzgyMTY7Z2l2ZSB0aGUgZ28tYnkmIzgyMTc7IHRvIHRoZSByZXF1aXJlbWVudHMgb2YgdGhlIFdpbGxzIEFjdCBiZWNhdXNlIGhlIGRpZCBub3QgY2hvb3NlIHRvIGNvbXBseSB3aXRoIHRoZW0uJiM4MjIxOyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlNlY3JldCBUcnVzdHMgJm1kYXNoOyBIYWxmIFNlY3JldCBUcnVzdHMiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiUmUgS2VlbiAoMTkzNykiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIFJlZXMiLAogICAgICAgICJCbGFja3dlbGwgdiBCbGFja3dlbGwiLAogICAgICAgICJSZSBCYXRlbWFuIiwKICAgICAgICAiS2FzcGVyYmF1ZXIgdiBHcmlmZml0aHMiLAogICAgICAgICJCcm93biB2IFBvdXJhdSIsCiAgICAgICAgIlJlIEJveWVzIiwKICAgICAgICAiT3R0YXdheSB2IE5vcm1hbiIsCiAgICAgICAgIk1vc3MgdiBDb29wZXIiLAogICAgICAgICJSZSBTbm93ZGVuIiwKICAgICAgICAiV2FsZ3JhdmUgdiBUZWJicyIsCiAgICAgICAgIklydmluZSB2IFN1bGxpdmFuIiwKICAgICAgICAiUmUgTWFkZG9jayIKICAgIF0sCiAgICAiTlVNQkVSIjogIjY0IiwKICAgICJIRUxEIjogWwogICAgICAgICJFdmVuIHRob3VnaCBhIHRlcm0gaW4gYSB3aWxsIGVzdGFibGlzaGluZyBhbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IU1Q8L3NwYW4+IHJlZmVycyB0byA8c3BhbiBjbGFzcz1cIml0XCI+ZnV0dXJlPC9zcGFuPiBjb21tdW5pY2F0aW9uIG9mIHRoZSB0cnVzdCYjODIxNztzIHRlcm1zIHRvIGl0cyB0cnVzdGVlcywgaWYgdGhlIGNvbW11bmljYXRpb24gaGFzIGluIGZhY3QgYWxyZWFkeSB0YWtlbiBwbGFjZSwgdGhlIEhTVCB3aWxsIGJlIGRlZW1lZCB0byBoYXZlIGJlZW4gZXN0YWJsaXNoZWQuIEFsdGhvdWdoIGluIHRoaXMgY2FzZSwgaXQgZmFpbGVkIG9uIG90aGVyIGdyb3VuZHMuICYjODIyMDtBIHNoaXAgc2FpbGluZyB1bmRlciBzZWFsZWQgb3JkZXJzIGlzIHNhaWxpbmcgdW5kZXIgb3JkZXJzLCBhbHRob3VnaCB0aGUgY2FwdGFpbiBkb2Vzblx1MjAxOXQga25vdyB0aGUgZGVzdGluYXRpb24gdW50aWwgbGF0ZXIuIDxzcGFuIGNsYXNzPVwiYmRcIj5Qcm9ibGVtIHF1ZXN0aW9uPC9zcGFuPjogYSB0cnVzdGVlIGdpdmVuIGFuIGVudmVsb3BlLCB1bmRlcnN0YW5kaW5nIGl0IHRvIGNvbnRhaW4gdGVybXMgb2YgSFNULCBidXQgaW5zdHJ1Y3RlZCA8c3BhbiBjbGFzcz1cImJkXCI+bm90IHRvIG9wZW4gdW50aWwgZGVhdGg8L3NwYW4+IG9mIHNldHRsb3IgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImJkXCI+dmFsaWQgSFNULjwvc3Bhbj4iCiAgICBdLAogICAgIllFQVIiOiAiMTkzNyIsCiAgICAiTkFNRSI6ICJSZSBLZWVuIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTZWNyZXQgVHJ1c3RzIiwKICAgICAgICAiSGFsZiBTZWNyZXQgVHJ1c3RzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiU2VjcmV0IFRydXN0cyAmbWRhc2g7IEhhbGYgU2VjcmV0IFRydXN0cyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSZSBCYXRlbWFuICgxOTM3KSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQmxhY2t3ZWxsIHYgQmxhY2t3ZWxsIiwKICAgICAgICAiUmUgS2VlbiIsCiAgICAgICAgIlJlIFJlZXMiLAogICAgICAgICJJcnZpbmUgdiBTdWxsaXZhbiIsCiAgICAgICAgIk90dGF3YXkgdiBOb3JtYW4iLAogICAgICAgICJSZSBCb3llcyIsCiAgICAgICAgIkJyb3duIHYgUG91cmF1IiwKICAgICAgICAiS2FzcGVyYmF1ZXIgdiBHcmlmZml0aHMiLAogICAgICAgICJSZSBTbm93ZGVuIiwKICAgICAgICAiTW9zcyB2IENvb3BlciIsCiAgICAgICAgIlJlIE1hZGRvY2siLAogICAgICAgICJXYWxncmF2ZSB2IFRlYmJzIgogICAgXSwKICAgICJOVU1CRVIiOiAiNjUiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgbGV0dGVyIGNvbnRhaW5pbmcgdGhlIHRlcm1zIG9mIGFuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhTVDwvc3Bhbj4gd3JpdHRlbiA8c3BhbiBjbGFzcz1cIml0XCI+YmVmb3JlPC9zcGFuPiB0aGUgZXhlY3V0aW9uIG9mIHRoZSB3aWxsLCBidXQgb25seSBnaXZlbiB0byB0aGUgdHJ1c3RlZSA8c3BhbiBjbGFzcz1cIml0XCI+YWZ0ZXJ3YXJkczwvc3Bhbj4sIHdpbGwgbm90IGJlIGNvbnNpZGVyZWQgdG8gYmUgdmFsaWQgY29tbXVuaWNhdGlvbiBvZiB0ZXJtcyB0byB0aGUgdHJ1c3RlZSBwcmlvciB0byBleGVjdXRpb24gb2YgdGhlIHdpbGwuIiwKICAgICAgICAiUGVubnljdWljayBKICZtZGFzaDsgbGV0dGVyIGdpdmVuIHRvbyBmYXIgYWZ0ZXIgbWFraW5nIG9mIHdpbGwgdG8gYmUgY29udGVtcG9yYW5lb3VzLiIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTM3IiwKICAgICJOQU1FIjogIlJlIEJhdGVtYW4iLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlNlY3JldCBUcnVzdHMiLAogICAgICAgICJIYWxmIFNlY3JldCBUcnVzdHMiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJTZWNyZXQgVHJ1c3RzICZtZGFzaDsgSGFsZiBTZWNyZXQgVHJ1c3RzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlJlIFJlZXMgKDE5NTApIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBLZWVuIiwKICAgICAgICAiUmUgQmF0ZW1hbiIsCiAgICAgICAgIkJsYWNrd2VsbCB2IEJsYWNrd2VsbCIsCiAgICAgICAgIlJlIE1hZGRvY2siLAogICAgICAgICJLYXNwZXJiYXVlciB2IEdyaWZmaXRocyIsCiAgICAgICAgIlJlIEJveWVzIiwKICAgICAgICAiSXJ2aW5lIHYgU3VsbGl2YW4iLAogICAgICAgICJXYWxncmF2ZSB2IFRlYmJzIiwKICAgICAgICAiTW9zcyB2IENvb3BlciIsCiAgICAgICAgIk90dGF3YXkgdiBOb3JtYW4iLAogICAgICAgICJCcm93biB2IFBvdXJhdSIsCiAgICAgICAgIlJlIFNub3dkZW4iCiAgICBdLAogICAgIk5VTUJFUiI6ICI2NiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIHRydXN0ZWUgb2YgYW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SFNUPC9zcGFuPiBjYW5ub3QgYmUgb25lIG9mIGl0cyBiZW5lZmljaWFyaWVzICZtZGFzaDsgZXNwZWNpYWxseSBpZiBoZSBvciBzaGUgaGFwcGVucyB0byBiZSB0aGUgc29saWNpdG9yIHdobyBkcmFmdGVkIHRoZSB3aWxsLiBFdmVyc2hlZCBNUiAmbWRhc2g7IGEgbG90IG9mIHdhbmsgYWJvdXQgcHVibGljIHBvbGljeSwgZXRjLiIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTUwIiwKICAgICJOQU1FIjogIlJlIFJlZXMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlNlY3JldCBUcnVzdHMiLAogICAgICAgICJIYWxmIFNlY3JldCBUcnVzdHMiCiAgICBdCn0sCnsKICAgICJZRUFSIjogIjE5MzkiLAogICAgIkNJVEFUSU9OIjogIlJlIENvbGluIENvb3BlciAoMTkzOSkiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIG1vZGlmaWNhdGlvbiBvZiBhbiBIU1QgbXVzdCBiZSBkb25lIGJ5IGV4ZWN1dGlvbiBvZiBhIGNvZGljaWwgdG8gdGhlIHdpbGwgPHNwYW4gY2xhc3M9XCJpdFwiPmFuZDwvc3Bhbj4gY29tbXVuaWNhdGlvbiBvZiB0aGUgY2hhbmdlcyB0byB0aGUgdHJ1c3RlZShzKSIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiXHUwMGEzNTAwMCBsZWZ0IHRvIHRydXN0ZWVzIFx1MjAxOGZvciBwdXJwb3NlcyBhbHJlYWR5IGNvbW11bmljYXRlZCB0byB0aGVtLlx1MjAxOSBFeGVjdXRlZCBhIGNvZGljaWwganVzdCBiZWZvcmUgaGUgZGllZCwgYWRkaW5nIGFub3RoZXIgXHUwMGEzNTAwMCwgXHUyMDE4dGhleSBrbm93IG15IHdpc2hlcyByZWdhcmRpbmcgdGhhdCBzdW0uXHUyMDE5ICBCdXQgbmV2ZXIgaW5mb3JtZWQgdGhlbSwgYW5kIG5vIGNsZWFyIGludGVudGlvbiBvbiB0aGUgZmFjZSBvZiB0aGUgd2lsbC4gVGhlIGV4dHJhIGNhc2ggcmVzdWx0ZWQgYmFjayB0byB0aGUgZXN0YXRlLCBhcyBpdCB3YXMgaW1wb3NzaWJsZSB0byBkZWNpZGUgd2hhdCB0aGUgdGVybXMgb2YgdGhlIHNlY29uZCB3ZXJlLCBhbmQgd2hldGhlciB0aGV5XHUyMDE5ZCBiZWVuIGFjY2VwdGVkIGJ5IHRoZSB0cnVzdGVlcy4iCiAgICBdLAogICAgIk5BTUUiOiAiUmUgQ29saW4gQ29vcGVyIiwKICAgICJOVU1CRVIiOiAiNjciCn0sCnsKICAgICJDQVRFR09SWSI6ICJTZWNyZXQgVHJ1c3RzICZtZGFzaDsgRGVob3JzIHRoZSBXaWxsIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlJlIFNub3dkZW4gWzE5NzldIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJCcm93biB2IFBvdXJhdSIsCiAgICAgICAgIlJlIEJhdGVtYW4iLAogICAgICAgICJCbGFja3dlbGwgdiBCbGFja3dlbGwiLAogICAgICAgICJSZSBSZWVzIiwKICAgICAgICAiTW9zcyB2IENvb3BlciIsCiAgICAgICAgIlJlIEtlZW4iLAogICAgICAgICJSZSBCb3llcyIsCiAgICAgICAgIkthc3BlcmJhdWVyIHYgR3JpZmZpdGhzIiwKICAgICAgICAiV2FsZ3JhdmUgdiBUZWJicyIsCiAgICAgICAgIk90dGF3YXkgdiBOb3JtYW4iLAogICAgICAgICJJcnZpbmUgdiBTdWxsaXZhbiIsCiAgICAgICAgIlJlIE1hZGRvY2siCiAgICBdLAogICAgIk5VTUJFUiI6ICI2OCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiTWVnYXJyeSBWQyAmbWRhc2g7IHNlY3JldCB0cnVzdHMgYXJlIGluIGZhY3QgZm9ybWVkIGludGVyIHZpdm9zLiBUaGUgd2lsbCBtZXJlbHkgcHV0cyB0aGVtIHRvZ2V0aGVyLCBpLmUuLCA8c3BhbiBjbGFzcz1cIml0XCI+Y29uc3RpdHV0ZXM8L3NwYW4+IHRoZW0uIgogICAgXSwKICAgICJZRUFSIjogIjE5NzkiLAogICAgIk5BTUUiOiAiUmUgU25vd2RlbiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiU2VjcmV0IFRydXN0cyIsCiAgICAgICAgIkRlaG9ycyB0aGUgV2lsbCIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUHJldmVudGlvbiBvciBSZWxpZWYgb2YgUG92ZXJ0eSIsCiAgICAgICAgIkFkdmFuY2VtZW50IG9mIEVkdWNhdGlvbiIsCiAgICAgICAgIkNoYXJpdHkgLSBEZWZpbml0aW9ucyIsCiAgICAgICAgIlBvbGl0aWNhbCBQdXJwb3NlIG9mIGEgQ2hhcml0eSIsCiAgICAgICAgIlRoZSBDeS1wclx1MDBlOHMgRG9jdHJpbmUiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiQ2hhcml0eSBDb21taXNzaW9uZXIncyBHdWlkYW5jZSAtIFNlcHRlbWJlciAyMDEzIiwKICAgICAgICAiT3RoZXIgQ2hhcml0YWJsZSBQdXJwb3NlcyB1bmRlciBDaGFyaXRpZXMgQWN0IDIwMTEiLAogICAgICAgICJBZHZhbmNlbWVudCBvZiBSZWxpZ2lvbiIsCiAgICAgICAgIkNlcnRhaW50eSBvZiBJbnRlbnRpb24iLAogICAgICAgICJEaXNob25lc3QgQXNzaXN0YW5jZSIsCiAgICAgICAgIlNlY3JldCBUcnVzdHMgLSBUaGVvcnkiCiAgICBdLAogICAgIk5VTUJFUiI6ICI2OSIsCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJUaGUgMTYwLDAwMCBjaGFyaXRpZXMgY3VycmVudGx5IHJlZ2lzdGVyZWQgd2l0aCB0aGUgQ2hhcml0aWVzIENvbW1pc3Npb24gY29sbGVjdGl2ZWx5IHJha2UgaW4gflx1MDBhMzUyYm4gcGEuIE5vdCBqdXN0IGZvciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5jaGFyaXRhYmxlIHRydXN0czwvc3Bhbj4gJm1kYXNoOyBhbnkgZmxhdm91cnMgb2YgY29tcGFueSBvciBwYXJ0bmVyc2hpcCBjYW4gaGF2ZSB0aGlzIHN0YXR1cy4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkxlZ2FsIEJhc2lzPC9zcGFuPjwvc3Bhbj48YnI+VGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNoYXJpdGllcyBBY3QgMjAwNjwvc3Bhbj4gYW5kIHRoZSBiYXNpY2FsbHkgaWRlbnRpY2FsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNoYXJpdGllcyBBY3QgMjAxMTwvc3Bhbj4gYXJlIGJvdGggY29uc29saWRhdGluZyBzdGF0dXRlcyB3aGljaCBleHBsaWNpdGx5IGRlY2xhcmUgdGhlIGNvbnRpbnVpbmcgdmFsaWRpdHkgYW5kIGFwcGxpY2FiaWxpdHkgb2YgdGhlIGV4aXN0aW5nIGxhdy4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkFkdmFudGFnZXM8L3NwYW4+PC9zcGFuPjxicj5UaGVyZSBhcmUgYm90aCA8c3BhbiBjbGFzcz1cImJkXCI+bGVnYWw8L3NwYW4+IGFkdmFudGFnZXMsIGJ1dCBtb3JlIHNpZ25pZmljYW50bHksIDxzcGFuIGNsYXNzPVwiYmRcIj5maW5hbmNpYWw8L3NwYW4+IG9uZXMuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkxlZ2FsPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFsdGhvdWdoIGEgY2hhcml0YWJsZSB0cnVzdCBtdXN0IGhhdmUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Y2VydGFpbnR5IG9mIGludGVudGlvbjwvc3Bhbj4gKGp1c3QgdGhlIHNhbWUgYXMgYSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5wcml2YXRlIGV4cHJlc3MgdHJ1c3Q8L3NwYW4+KSwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Y2VydGFpbnR5IG9mIG9iamVjdDwvc3Bhbj4gaXMgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj4gcmVxdWlyZWQuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+cnVsZSBhZ2FpbnN0IHBlcnBldHVpdHk8L3NwYW4+IGFuZCBpbmFsaWVuYWJpbGl0eSBvZiBsYW5kIGRvZXMgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj4gYXBwbHkuPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkkuZS4sIGJ5IGNvbnRyYXN0IHdpdGggdGhlIDEyNS15ZWFyIG1heGltdW0gbGlmZXRpbWUgb2YgYSBwcml2YXRlIGV4cHJlc3MgdHJ1c3QsIGEgY2hhcml0eSBjYW4gY29udGludWUgaW5kZWZpbml0ZWx5Ljxicj4gPHNwYW4gY2xhc3M9XCJzbVwiPlZpcmdvIGNpdGVzIEtpbmcmIzgyMTc7cyBDYW50ZXJidXJ5IGFzIHRoZSBvbGRlc3QgY2hhcml0eSwgc2F5aW5nIGl0IHdhcyBmb3VuZGVkIDE1MDAgeWVhcnMgYWdvLiBJbiBkb2luZyBzbyBoZSBtYWtlcyBoaW1zZWxmIGEgdHJ1c3RlZSBvZiB0aGVpciBtYXJrZXRpbmcgcHVmZi4gSXQgd291bGQgYmUgbW9yZSBjb3JyZWN0IHRvIHNheSB0aGF0IGluIDU4NiAoYWJvdXQgPHNwYW4gY2xhc3M9XCJpdFwiPjE0PC9zcGFuPiBodW5kcmVkIHllYXJzIGFnbyksIGFuIGFiYmV5IHdhcyBmb3VuZGVkIGF0IHdoaWNoIHRoZXJlIHdhcyA8c3BhbiBjbGFzcz1cIml0XCI+c29tZSB0ZWFjaGluZzwvc3Bhbj4sIGV4cGxpY2l0IGV2aWRlbmNlIGZvciB3aGljaCBpcyBub3QgZm91bmQgYmVmb3JlIHRoZSBDOXRoLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QWx0aG91Z2ggdGhlIG1heGltdW0gbnVtYmVyIG9mIHRydXN0ZWVzIGZvciBhIHRydXN0IG9mIGxhbmQgaXMgb3JkaW5hcmlseSA8c3BhbiBjbGFzcz1cIml0XCI+Zm91cjwvc3Bhbj4gICg8c3BhbiBjbGFzcz1cImxuayBnc2xuXCI+UzM0IFRydXN0ZWUgQWN0IDE5MjU8L3NwYW4+KSwgbm8gc3VjaCBsaW1pdCBpcyBpbXBvc2VkIG9uIGEgY2hhcml0YWJsZSB0cnVzdCBob2xkaW5nIGxhbmQuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BbHRob3VnaCB0aGUgdHJ1c3RlZXMgb2YgUEVUcyBtdXN0IGluIGdlbmVyYWwgYWN0IDxzcGFuIGNsYXNzPVwiYmRcIj51bmFuaW1vdXNseTwvc3Bhbj4sIG9ubHkgYSA8c3BhbiBjbGFzcz1cImJkXCI+YmFyZSBtYWpvcml0eTwvc3Bhbj4gaXMgbmVlZGVkIGZvciBhIENULiB0aGUgcmVxdWlyZW1lbnQgaXMgb25seSBtYWpvcml0eS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DeS1wclx1MDBlOHMgRG9jdHJpbmU8L3NwYW4+LiBPbmNlIGdpdmVuIHRvIGEgY2hhcml0eSwgdGhlbiBzaG91bGQgaXQgZm9sZCwgb3IgYmUgdW5hYmxlIHRvIGZ1bGZpbCBpdHMgb2JsaWdhdGlvbiBmb3Igc29tZSBvdGhlciByZWFzb24sIHRoZW4gdGhlIGZ1bmRzIDxzcGFuIGNsYXNzPVwiaXRcIj5tYXk8L3NwYW4+IG5vdCA8c3BhbiBjbGFzcz1cIml0XCI+cmVzdWx0IGJhY2s8L3NwYW4+IHRvIHRoZSBzZXR0bG9yKHMpL3Rlc3RhdG9yKHMpLCBidXQgaW5zdGVhZCBiZSB0cmFuc2ZlcnJlZCBieSB0aGUgY291cnRzIHRvIGFub3RoZXIgY2hhcml0eS48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5GaW5hbmNpYWwgQWR2YW50YWdlczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5FeGVtcHRpb24gZnJvbSA8c3BhbiBjbGFzcz1cIml0XCI+bWFueTwvc3Bhbj4gZm9ybXMgb2YgdGF4YXRpb24sIGUuZy4sIGNhcGl0YWwgZ2FpbnMgdGF4ICZtZGFzaDsgYnV0IG5vdCA8c3BhbiBjbGFzcz1cIml0XCI+YXV0b21hdGljPC9zcGFuPiBleGVtcHRpb24gZnJvbSBsb2NhbCBidXNpbmVzcyByYXRlcy48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkNhbiByZWNsYWltIHRheCBmcm9tIHRoZSBJUi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkluIHRoZSAmIzgyMTY7NjBzLCBHaWZ0IEFpZCB3YXMgYSB1c2VmdWwgd2F5IG9mIGF2b2lkaW5nIGluY29tZSB0YXguIEEgc2FsYXJ5IG9mIFx1MDBhMzEwMEssIGFmdGVyIHRheCwgd291bGQgYmUgbW9yZSBsaWtlIFx1MDBhMzQwSy4gQnV0IGlmIHlvdSBnYXZlIFx1MDBhMzYwSyB0byBjaGFyaXR5IG9uIGNvbmRpdGlvbiB0aGV5JiM4MjE3O2QgPHNwYW4gY2xhc3M9XCJiZFwiPmdpdmUgdGhlIG1ham9yaXR5IGJhY2s8L3NwYW4+IChhIHRheC1leGVtcHQgdHJhbnNmZXIpLCB0aGUgdHJlYXN1cnkgd291bGQgZmFyIGxlc3MuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+UmVwdXRhdGlvbmFsIEFkdmFudGFnZXM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+UmVwdXRhdGlvbiwgd2hpY2gsIGZvciBpbnN0YW5jZSwgY2FuIG1ha2UgaXQgZWFzaWVyIHRvIHJhaXNlIGZ1bmRzLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5JbmRlcGVuZGVudCBTY2hvb2xzIENvdW5jaWwgdiBDaGFyaXR5IENvbW1pc3Npb248L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5EaXNhZHZhbnRhZ2VzPC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgcXVpZCBwcm8gcXVvIGZvciB0aGUgYWJvdmUgaXMgPHNwYW4gY2xhc3M9XCJiZFwiPnBhcnRpY3VsYXJseSBidXJkZW5zb21lIGFkbWluaXN0cmF0aXZlIG9ibGlnYXRpb25zPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlBhcnQgOCBvZiB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2hhcml0aWVzIEFjdCAyMDExPC9zcGFuPiBpbXBvc2VzIHN0cmljdCBkdXRpZXMgb24gdHJ1c3RlZXMgb2YgY2hhcml0aWVzIHRvIHByZXBhcmUgYWNjb3VudHMsIHByZXBhcmUgZm9yIGF1ZGl0LCBhbmQgcmVwb3J0IHRvIHRoZSBDaGFyaXR5IENvbW1pc3Npb247IGZhaWx1cmUgaW4gc3VjaCByZWdhcmRzIGNhcnJpZXMgY3JpbWluYWwgcGVuYWx0aWVzLjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiCiAgICBdLAogICAgIk5BTUUiOiAiQ2hhcml0aWVzIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJBZHZhbmNlbWVudCBvZiBSZWxpZ2lvbiIsCiAgICAgICAgIk90aGVyIENoYXJpdGFibGUgUHVycG9zZXMgdW5kZXIgQ2hhcml0aWVzIEFjdCAyMDExIiwKICAgICAgICAiQ2hhcml0eSBDb21taXNzaW9uZXIncyBHdWlkYW5jZSAtIFNlcHRlbWJlciAyMDEzIiwKICAgICAgICAiUG9saXRpY2FsIFB1cnBvc2Ugb2YgYSBDaGFyaXR5IiwKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiVGhlIEN5LXByXHUwMGU4cyBEb2N0cmluZSIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJQcmV2ZW50aW9uIG9yIFJlbGllZiBvZiBQb3ZlcnR5IiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgRWR1Y2F0aW9uIiwKICAgICAgICAiTm8gUHJvZml0IFJ1bGUiLAogICAgICAgICJEaXNob25lc3R5IGZvciBEaXNob25lc3QgQXNzaXN0YW5jZSIsCiAgICAgICAgIkVxdWl0eSB3aWxsIG5vdCBhbGxvdyBhIFN0YXR1dGUgdG8gYmUgYW4gQ2xvYWsgZm9yIEZyYXVkIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkhpc3RvcmljYWw8L3NwYW4+PC9zcGFuPjxicj5XaXRoaW4gdGhlIHNwaXJpdCBvZiB0aGUgcHJlYW1ibGUgdG8gdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlN0YXR1dGUgb2YgRWxpemFiZXRoIDE2MDE8L3NwYW4+IGFzIGludGVycHJldGVkIGJ5IExvcmQgTWFjbmFnaHRlbiBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TcGVjaWFsIENvbW1pc3Npb25lcnMgb2YgSW5jb21lIFRheCB2IFBlbXNlbDwvc3Bhbj4sIGEgY2hhcml0YWJsZSBuYXR1cmUgaGFkIHRvIGJlIGZvciAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+UmVsaWVmIG9mIFBvdmVydHksPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BZHZhbmNlbWVudCBvZiBFZHVjYXRpb24sPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BZHZhbmNlbWVudCBvZiBSZWxpZ2lvbiBvcjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+JiM4MjE2O090aGVyIHB1cnBvc2VzIEJlbmVmaWNpYWwgdG8gdGhlIENvbW11bml0eS4mIzgyMTc7PC9zcGFuPjxvbD48bGkgY2xhc3M9XCJub251bVwiPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJzbVwiPk5vIHByaXplcyBmb3Igc3BvdHRpbmcgd2hpY2ggY29udGFpbmVkIHRoZSBtb3N0IHdpZ2dsZS1yb29tLCBidXQgbWF5YmUgYSBzbWFsbCBvbmUgZm9yIHN1Z2dlc3RpbmcgdGhlIG1vc3QgYXBwcm9wcmlhdGUgdW5pdCBieSB3aGljaCB0byBtZWFzdXJlIGl0LiBWZXJzdD8gQ291bnRyeSBtaWxlPyBEZWdyZWVzIGxhdGl0dWRlPyA8L3NwYW4+PC9zcGFuPjwvbGk+PC9vbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaGFyaXRpZXMgQWN0IDE5OTM8L3NwYW4+IHJlcGVhbGVkIGl0LiBJbiBhbnkgY2FzZSwgaXQgd2FzIG5ldmVyIG1lYW50IHRvIGJlIHRha2VuIGxpdGVyYWxseS4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U2NvdHRpc2ggQnVyaWFsIFJlZm9ybSBTb2NpZXR5IHYgR2xhc2dvdyBDb3Jwb3JhdGlvbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkN1cnJlbnQ8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cIml0XCI+U2VjdGlvbjwvc3Bhbj4gJm1kYXNoOyIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBvZiB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2hhcml0aWVzIEFjdCAyMDA2PC9zcGFuPiBwcm92aWRlcyB0aGUgZmlyc3QgYmxhY2tsZXR0ZXIgZGVmaW5pdGlvbiBvZiA8c3BhbiBjbGFzcz1cIml0XCI+Y2hhcml0eTwvc3Bhbj4uIFMxIG9mIHRoZSAyMDExIEFjdCBpcyBpZGVudGljYWwuIFRoZXkgcHJvdmlkZSB0aGF0IGEgY2hhcml0eTo8L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+aXMgYW4gaW5zdGl0dXRpb24gKGEpIGVzdGFibGlzaGVkIDxzcGFuIGNsYXNzPVwiYmRcIj5mb3IgY2hhcml0YWJsZSBwdXJwb3NlcyBvbmx5PC9zcGFuPiBhbmQgKGIpIHN1Ym1pdHRpbmcgdG8gdGhlIGp1cmlzZGljdGlvbiBvZiB0aGUgSGlnaCBDb3VydC48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IGRlZmluZXMgPHNwYW4gY2xhc3M9XCJiZFwiPmNoYXJpdGFibGUgcHVycG9zZTwvc3Bhbj4gYnkgbWVhbnMgb2YgYSBsb25nIGJ1dCBub24tZXhoYXVzdGl2ZSBsaXN0Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgMjAxMSBBY3QgaXMgKGZ1bmN0aW9uYWxseSkgaWRlbnRpY2FsLCBidXQsIGZvciB0aGUgc2FrZSBvZiBjbGFyaXR5LCBzaGlmdHMgdGhlIGxpc3Qgb2YgcHVycG9zZXMgYXQgUzIoMikgb2YgdGhlIDIwMDYgQWN0IHRvIGEgZGVkaWNhdGVkIHNlY3Rpb24sIFMzKDEpLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+V2hldGhlciBzb21ldGhpbmcgaXMgb25lIG9mIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaGFyaXRhYmxlIFB1cnBvc2VzPC9zcGFuPiBpcyB0aGUgbWVhdCBvZiB0aGlzIHN1YmplY3QuPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPm9mIHRoZSAyMDA2IEFjdCAoYW5kIFM0IG9mIHRoZSAyMDExIEFjdCkgZGVmaW5lIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QdWJsaWMgQmVuZWZpdDwvc3Bhbj4gcmVxdWlyZW1lbnQuPC9zcGFuPjwvbGk+PC9vbD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlB1YmxpYyBCZW5lZml0PC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5TMygyKSBvZiB0aGUgMjAwNiBBY3QgKGFuZCBTNCgyKSBvZiB0aGUgMjAxMSBBY3QpIHByb3ZpZGVzIHRoYXQgcHVibGljIGJlbmVmaXQgaXMgPHNwYW4gY2xhc3M9XCJiZFwiPm5vIGxvbmdlciBwcmVzdW1lZDwvc3Bhbj4uIEl0IG11c3QgYmUgaW5zdGVhZCBiZSBwcm92ZW4gdGhhdCBpdCB3YXMgYm90aCA8c3BhbiBjbGFzcz1cImJkXCI+ZXN0YWJsaXNoZWQgZm9yPC9zcGFuPiwgYW5kIHRoYXQgaXQgPHNwYW4gY2xhc3M9XCJiZFwiPmNvbnRpbnVlcyB0byBleGlzdCBmb3I8L3NwYW4+LCBwdWJsaWMgYmVuZWZpdC48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QXMgd2VsbCBhcyBiZWluZyBhIHByb25nIGluIHRoZSAyMDA2IEFjdCYjODIxNztzIG9idmlvdXMgYXR0YWNrIG9uIFB1YmxpYyBTY2hvb2xzLCB0aGlzIGhhcyB0aGUgYWRkZWQgZmVhdHVyZSBvZiBtYWtpbmcgbGlmZSBhIGxpdHRsZSBoYXJkZXIgZm9yIHRoZSBhbGFybWluZ2x5IGxhcmdlIG51bWJlciBvZiBmcm9udHMgZm9yIHRlcnJvcmlzdCBncm91cHMgbGlrZSBIaXpiLUFsbGFoIG9yIEhhbWFzIHRoZXJlIHdlcmUsIGF0IHRoZSB0aW1lLCBtYXNxdWVyYWRpbmcgYXMgY2hhcml0aWVzLjwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5QdWJsaWMgYmVuZWZpdC48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QXMgd2VsbCBhcyBiZWluZyB0d28gPHNwYW4gY2xhc3M9XCJpdFwiPndvcmRzPC9zcGFuPiwgdGhpcyBpcyBhbHNvIHR3byA8c3BhbiBjbGFzcz1cIml0XCI+dGVzdHM8L3NwYW4+ICZtZGFzaDs8L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SXMgdGhlIHB1cnBvc2UgaW4gZmFjdCA8c3BhbiBjbGFzcz1cImJkXCI+YmVuZWZpY2lhbDwvc3Bhbj4/PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JcyBpdCBzcHJlYWQgPHNwYW4gY2xhc3M9XCJiZFwiPndpZGVseSBlbm91Z2g8L3NwYW4+IHRvIGJlIDxzcGFuIGNsYXNzPVwiYmRcIj5wdWJsaWM8L3NwYW4+Pzwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JdCBtdXN0IHRoZXJlZm9yZSBiZSBlc3RhYmxpc2hlZCBieSB0aGUgZmFjdHMgb2YgZWFjaCBjYXNlLCBieSByZWZlcmVuY2UgdG8gdGhlICh2ZXJ5KSBtYW55IGNhc2VzLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+UzQgb2YgdGhlIDIwMDYgYWN0IGltcG9zZWQgb24gdGhlIENoYXJpdGllcyBDb21taXNzaW9uIHRoZSBvYmxpZ2F0aW9uIHRvIHByb2R1Y2UgZ3VpZGFuY2UgYXMgdG8gd2hhdCBjb25zdGl0dXRlcyBwdWJsaWMgYmVuZWZpdC4gVGhpcyBpdCBwdWJsaXNoZWQgaW4gMjAwOC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2hhcml0aWVzIGFuZCBQdWJsaWMgQmVuZWZpdDwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD48L3VsPiIKICAgIF0sCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJOVU1CRVIiOiAiNzAiLAogICAgIkxJTksiOiBbCiAgICAgICAgIkNoYXJpdGllcyBBY3QgMjAxMSBodHRwOi8vd3d3LmxlZ2lzbGF0aW9uLmdvdi51ay91a3BnYS8yMDExLzI1L3BhcnQvMSIsCiAgICAgICAgIigyMDA2IEFjdCkgaHR0cDovL3d3dy5sZWdpc2xhdGlvbi5nb3YudWsvdWtwZ2EvMjAwNi81MC9wYXJ0LzEiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIKICAgIF0sCiAgICAiTkFNRSI6ICJDaGFyaXR5IC0gRGVmaW5pdGlvbnMiCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJBZHZhbmNlbWVudCBvZiBFZHVjYXRpb24iLAogICAgICAgICJQcmV2ZW50aW9uIG9yIFJlbGllZiBvZiBQb3ZlcnR5IiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgUmVsaWdpb24iLAogICAgICAgICJPdGhlciBDaGFyaXRhYmxlIFB1cnBvc2VzIHVuZGVyIENoYXJpdGllcyBBY3QgMjAxMSIsCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIlRoZSBDeS1wclx1MDBlOHMgRG9jdHJpbmUiLAogICAgICAgICJDaGFyaXR5IC0gRGVmaW5pdGlvbnMiLAogICAgICAgICJDaGFyaXR5IENvbW1pc3Npb25lcidzIEd1aWRhbmNlIC0gU2VwdGVtYmVyIDIwMTMiLAogICAgICAgICJQb2xpdGljYWwgUHVycG9zZSBvZiBhIENoYXJpdHkiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJDZXJ0YWludHkgb2YgSW50ZW50aW9uIiwKICAgICAgICAiRXF1aXR5IHdpbGwgbm90IEFzc2lzdCBhIFZvbHVudGVlciIKICAgIF0sCiAgICAiTlVNQkVSIjogIjcxIiwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkxpc3RlZCBhdCA8c3BhbiBjbGFzcz1cImJkXCI+UzMoMSk8L3NwYW4+IG9mIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj4yMDExIGFjdDwvc3Bhbj4sIEJsYWNrc3RvbmUmIzgyMTc7cyA8c3BhbiBjbGFzcz1cIml0XCI+UHJvcGVydHkgTGF3IDIwMTUtMTY8L3NwYW4+IDxzcGFuIGNsYXNzPVwiYmRcIj5wLiAzODE8L3NwYW4+IChhbmQgUzIoMikgb2YgdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPjIwMDYgQWN0PC9zcGFuPikuPGJyPlRoZXkgcGFydGx5IGNvZGlmeSB0aGUgZXhpc3RpbmcgbGF3LCBhbmQgcGFydGx5IHN0YWtlIG91dCBhIHNlbnNpYmxlIGJvdW5kYXJ5IHRvIHRoZSBmaWVsZCBvZiBwbGF5LiAgVGhlIG9yZGVyIGluIHRoZSBzdGF0dXRlIGNvcnJlbGF0ZXMgcm91Z2hseSB3aXRoIHRoZWlyIGltcG9ydGFuY2UgYW5kIHN1c2NlcHRpYmlsaXR5IHRvIGNvbnRlbnRpb24uIFRob3NlLCBpbiB0dXJuLCBjb3JyZWxhdGUgd2l0aCB0aGUgbnVtYmVyIG9mIGNhc2VzIHRvIHJlbWVtYmVyIGZvciBlYWNoLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+UzMgRGVzY3JpcHRpb25zIG9mIFB1cnBvc2VzPC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BIHB1cnBvc2UgZmFsbHMgd2l0aGluIHRoaXMgc3Vic2VjdGlvbiBpZiBpdCBmYWxscyB3aXRoaW4gYW55IG9mIHRoZSBmb2xsb3dpbmcgZGVzY3JpcHRpb25zIG9mIHB1cnBvc2VzIG9mIHRoZSAmbWRhc2g7PC9zcGFuPjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPnByZXZlbnRpb24gb3IgcmVsaWVmIG9mIHBvdmVydHk8L3NwYW4+Ozwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+YWR2YW5jZW1lbnQgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+ZWR1Y2F0aW9uPC9zcGFuPjs8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPmFkdmFuY2VtZW50IG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPnJlbGlnaW9uPC9zcGFuPjs8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPmFkdmFuY2VtZW50IG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmhlYWx0aCBvciB0aGUgc2F2aW5nIG9mIGxpdmVzPC9zcGFuPjs8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPmFkdmFuY2VtZW50IG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmNpdGl6ZW5zaGlwIG9yIGNvbW11bml0eSBkZXZlbG9wbWVudDwvc3Bhbj47PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5hZHZhbmNlbWVudCBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj50aGUgYXJ0cywgY3VsdHVyZSwgaGVyaXRhZ2Ugb3Igc2NpZW5jZTwvc3Bhbj47PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5hZHZhbmNlbWVudCBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5hbWF0ZXVyIHNwb3J0PC9zcGFuPjs8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPmFkdmFuY2VtZW50IG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmh1bWFuIHJpZ2h0czwvc3Bhbj4sIGNvbmZsaWN0IHJlc29sdXRpb24gb3IgcmVjb25jaWxpYXRpb24gb3IgdGhlIHByb21vdGlvbiBvZiByZWxpZ2lvdXMgb3IgcmFjaWFsIGhhcm1vbnkgb3IgZXF1YWxpdHkgYW5kIGRpdmVyc2l0eTs8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPmFkdmFuY2VtZW50IG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmVudmlyb25tZW50YWwgcHJvdGVjdGlvbiBvciBpbXByb3ZlbWVudDwvc3Bhbj47PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5yZWxpZWYgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+dGhvc2UgaW4gbmVlZDwvc3Bhbj4gYnkgcmVhc29uIG9mIHlvdXRoLCBhZ2UsIGlsbC1oZWFsdGgsIGRpc2FiaWxpdHksIGZpbmFuY2lhbCBoYXJkc2hpcCBvciBvdGhlciBkaXNhZHZhbnRhZ2U7PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5hZHZhbmNlbWVudCBvZiBhbmltYWwgd2VsZmFyZTs8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPnByb21vdGlvbiBvZiB0aGUgZWZmaWNpZW5jeSBvZiB0aGUgYXJtZWQgZm9yY2VzIG9mIHRoZSBDcm93biwgb3Igb2YgdGhlIGVmZmljaWVuY3kgb2YgdGhlIHBvbGljZSwgZmlyZSBhbmQgcmVzY3VlIHNlcnZpY2VzIG9yIGFtYnVsYW5jZSBzZXJ2aWNlczs8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPmFueSBvdGhlciBwdXJwb3NlcyB3aXRoaW4gc3Vic2VjdGlvbiAoNCkuPC9zcGFuPjwvbGk+PC9vbD48L29sPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIKICAgIF0sCiAgICAiTkFNRSI6ICJDaGFyaXRhYmxlIFB1cnBvc2VzIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgRWR1Y2F0aW9uIiwKICAgICAgICAiT3RoZXIgQ2hhcml0YWJsZSBQdXJwb3NlcyB1bmRlciBDaGFyaXRpZXMgQWN0IDIwMTEiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgUmVsaWdpb24iLAogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJQb2xpdGljYWwgUHVycG9zZSBvZiBhIENoYXJpdHkiLAogICAgICAgICJUaGUgQ3ktcHJcdTAwZThzIERvY3RyaW5lIiwKICAgICAgICAiQ2hhcml0eSAtIERlZmluaXRpb25zIiwKICAgICAgICAiQ2hhcml0eSBDb21taXNzaW9uZXIncyBHdWlkYW5jZSAtIFNlcHRlbWJlciAyMDEzIiwKICAgICAgICAiVGhpcmQgUGFydHkgTGlhYmlsaXR5IiwKICAgICAgICAiS25vd2luZyBSZWNlaXB0IiwKICAgICAgICAiQ2VydGFpbnR5IG9mIFN1YmplY3QiCiAgICBdLAogICAgIk5VTUJFUiI6ICI3MiIsCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+UzMoMSkoYSk8L3NwYW4+IG9mIDIwMTEgQWN0LiBCbGFja3N0b25lJiM4MjE3O3MgPHNwYW4gY2xhc3M9XCJpdFwiPlByb3BlcnR5IExhdyAyMDE1LTE2PC9zcGFuPiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwiYmRcIj5wLiAzODE8L3NwYW4+PGJyPk4uQi4sICYjODIxNjtwcmV2ZW50aW9uJiM4MjE3OyB0byB0aGUgY29tbW9uIGxhdyB1bmRlcnN0YW5kaW5nIGJ5IHRoZSAyMDA2IEFjdC4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlBvdmVydHk8L3NwYW4+PC9zcGFuPjxicj4gPHNwYW4gY2xhc3M9XCJiZFwiPklzPC9zcGFuPiAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlJlbGF0aXZlPC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgQ2xhcms8L3NwYW4+IDE5MjMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Ob3QgYXMgYmFkIGFzIDxzcGFuIGNsYXNzPVwiYmRcIj5kZXN0aXR1dGlvbjwvc3Bhbj4sIGJ1dCBpcyA8c3BhbiBjbGFzcz1cIml0XCI+Z29pbmcgc2hvcnQgaW4gb3JkaW5hcnkgY2lyY3Vtc3RhbmNlczwvc3Bhbj4uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIENvdWx0aHVyc3QmIzgyMTc7cyBXaWxsIFRydXN0PC9zcGFuPiAxOTUxLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIGNvbmRpdGlvbiBvZiBwZW9wbGUgaW4gPHNwYW4gY2xhc3M9XCJpdFwiPmdlbnVpbmVseSBzdHJhaXRlbmVkIGNpcmN1bXN0YW5jZXM8L3NwYW4+LCB1bmFibGUgdG8gbWFpbnRhaW4gYSBtb2Rlc3Qgc3RhbmRhcmQgb2YgbGl2aW5nIGZvciB0aGVtc2VsdmVzIGFuZCB0aGVpciBkZXBlbmRlbnRzLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NYXJ5IENsYXJrIEhvbWVzIFRydXN0ZWVzIHYgQW5kZXJzb248L3NwYW4+IDE5MDQuPC9zcGFuPjwvbGk+PC91bD48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwiYmRcIj5UaGUgd29ya2luZyBjbGFzc2VzPC9zcGFuPiAmbWRhc2g7PC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFyZSBub3QgPHNwYW4gY2xhc3M9XCJpdFwiPmluaGVyZW50eTwvc3Bhbj4gcG9vci4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgU2FuZGVycyBXaWxsIFRydXN0PC9zcGFuPiBbMTk1NF08L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFwYXJ0IGZyb20gdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5DeXByaW90PC9zcGFuPiB3b3JraW5nIGNsYXNzZXMuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIE5peWF6aSYjODIxNztzIFdpbGwgVHJ1c3Q8L3NwYW4+IDE5NzguPC9zcGFuPjwvbGk+PC91bD48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwiYmRcIj5BbW9uZ3N0IHRoZSBwb29yPC9zcGFuPiwgdGhlcmUgYXJlICZtZGFzaDs8L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+RGlzdHJlc3NlZCBnZW50bGVmb2xrLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBZb3VuZzwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPldpZG93cyBhbmQgb3JwaGFucyAoaW4gYSBwYXJ0aWN1bGFyIGFyZWEpLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BRyB2IFBvd2VyPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlVuc3VjY2Vzc2Z1bCBsaXRlcmFyeSBtZW4gKCEpIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRob21wc29uIHYgVGhvbXBzb248L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImJkXCI+QnV0IG5vdDwvc3Bhbj4gJm1kYXNoOzwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gQm95cyBpbiBuZWVkIG9mIDxzcGFuIGNsYXNzPVwiaXRcIj5rbmlja2Vyczwvc3Bhbj4uIFllcywgPHNwYW4gY2xhc3M9XCJpdFwiPmtuaWNrZXJzPC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgR3d5b248L3NwYW4+LCB3aGljaCBmYWlsZWQgdG8gZGlzY3JpbWluYXRlIGluIGZhdm91ciBvZiA8c3BhbiBjbGFzcz1cIml0XCI+cG9vcjwvc3Bhbj4gYm95cy48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+UmVsaWVmPC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JdCA8c3BhbiBjbGFzcz1cIml0XCI+aXNuJiM4MjE3O3Q8L3NwYW4+IGVub3VnaCB0aGF0IHRoZSBnaWZ0IHNob3VsZCBiZSBmb3IgdGhlIHBvb3IuIEl0IHNob3VsZCA8c3BhbiBjbGFzcz1cIml0XCI+YWxzbzwvc3Bhbj4gYmUgZm9yIHRoZSBwb29yIDxzcGFuIGNsYXNzPVwiYmRcIj5mb3IgcmVsaWVmIG9mIHRoZWlyIHBvdmVydHk8L3NwYW4+LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5JUkMgdiBCYWRkZWxleTwvc3Bhbj4gMTk1NS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkl0IG91Z2h0IG5vdCBiZSBmb3IgYmVlciwgY2lyY3VzZXMgb3IgaVBob25lcywgYnV0IDxzcGFuIGNsYXNzPVwiYmRcIj5lc3NlbnRpYWxzPC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Sm9zZXBoIFJvd250cmVlIE1lbW9yaWFsIFRydXN0IHYgQUc8L3NwYW4+IFsxOTgzXTwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5QcmV2ZW50aW9uPC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5EaXNjdXNzZWQgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QUlUQyBGb3VuZGF0aW9uJiM4MjE3O3MgQXBwbGljYXRpb24gZm9yIFJlZ2lzdHJhdGlvbiBvZiBDaGFyaXR5PC9zcGFuPiBbMjAwNl0gJm1kYXNoOyB0aGUgY2FzZSBvZiBhIGNoYXJpdHkgcHJpbWFyaWx5IGZvciB0aG9zZSB3aG8gc3VmZmVyZWQgZmluYW5jaWFsIGxvc3NlcyBhcyByZXN1bHQgb2YgdW53aXNlIGludmVzdG1lbnQgJm1kYXNoOyBzbyB3aG8gbWF5IG5vdCBoYXZlIGJlZW4gdGhhdCBwb29yLjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5XYWZmbGU8L3NwYW4+PC9zcGFuPjxicj4gV2hhdCBpcyB0aGUgaXJyZWR1Y2libGUgbWluaW11bSBmb3IgYSBkZWNlbnQgbGlmZT8gSG93IGRvIHRoZSBzbHVtcyBvZiBNYW5jaGVzdGVyIG1lYXN1cmUgdXAgdG8gdGhlIGxheW91dHMgb2YgTXVtYmFpPyBDYW4gYSBjaGlsZCBsaXZpbmcgaW4gYSBob3VzZWhvbGQgd2l0aCBvbmx5IDYwJSBvZiB0aGUgVUsgYXZlcmFnZSBpbmNvbWUgcmVhbGx5IGJlIHNhaWQgdG8gYmUgbGl2aW5nIGluIHBvdmVydHkgJm1kYXNoOyBvciBkb2VzIHRoYXQgZGVmaW5pdGlvbiBkbyBubyBtb3JlIHRoYW4gcmV2ZWFsIGl0cyBhdXRob3JzJiM4MjE3OyBhY2NlcHRhbmNlIG9mIHRoYXQgbGVhc3QtZnJlcXVlbnRseSBqdXN0aWZpZWQgbGVtbWEgb2YgbW9kZXJuIGxpZmUgJm1kYXNoOyB0aGF0IDxzcGFuIGNsYXNzPVwiaXRcIj5pbmVxdWFsaXR5IHBlciBzZSBJcyBBIEJhZCBUaGluZzwvc3Bhbj4/IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIgogICAgXSwKICAgICJOQU1FIjogIlByZXZlbnRpb24gb3IgUmVsaWVmIG9mIFBvdmVydHkiCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgUmVsaWdpb24iLAogICAgICAgICJPdGhlciBDaGFyaXRhYmxlIFB1cnBvc2VzIHVuZGVyIENoYXJpdGllcyBBY3QgMjAxMSIsCiAgICAgICAgIlByZXZlbnRpb24gb3IgUmVsaWVmIG9mIFBvdmVydHkiLAogICAgICAgICJUaGUgQ3ktcHJcdTAwZThzIERvY3RyaW5lIiwKICAgICAgICAiUG9saXRpY2FsIFB1cnBvc2Ugb2YgYSBDaGFyaXR5IiwKICAgICAgICAiQ2hhcml0eSBDb21taXNzaW9uZXIncyBHdWlkYW5jZSAtIFNlcHRlbWJlciAyMDEzIiwKICAgICAgICAiQ2hhcml0eSAtIERlZmluaXRpb25zIiwKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiVW5hdXRob3Jpc2VkIFByb2ZpdHMgLSBDb3Jwb3JhdGUgT3Bwb3J0dW5pdHkiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQgLSBLbm93bGVkZ2UiLAogICAgICAgICJQcml2YXRlIEV4cHJlc3MgVHJ1c3RzIgogICAgXSwKICAgICJOVU1CRVIiOiAiNzMiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlMzKDEpKGIpPC9zcGFuPiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaGFyaXRpZXMgQWN0IDIwMTE8L3NwYW4+PGJyPkJsYWNrc3RvbmUmIzgyMTc7cyA8c3BhbiBjbGFzcz1cIml0XCI+UHJvcGVydHkgTGF3IDIwMTUtMTY8L3NwYW4+ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJiZFwiPnAzODI8L3NwYW4+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5FZHVjYXRpb248L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImJkXCI+Q2FuIGJlPC9zcGFuPiAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Tm90IGp1c3QgdGhlIG5hcnJvdyBzZW5zZSBvZiBjbGFzc3Jvb20gdGVhY2hpbmc7IGFsc28gdGhlIGVkdWNhdGlvbiBvZiBhcnRpc3RpYyB0YXN0ZS4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Um95YWwgQ2hvaXIgU29jaWV0eSB2IElSQzwvc3Bhbj4gWzE5NDNdPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgaW1wcm92ZW1lbnQgb2YgJiM4MjE2OzxzcGFuIGNsYXNzPVwiaXRcIj5hbnk8L3NwYW4+IHVzZWZ1bCBicmFuY2ggb2Yga25vd2xlZGdlJiM4MjE3Oy4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SW5jb3Jwb3JhdGVkIENvdW5jaWwgb2YgTGF3IFJlcG9ydGluZyBmb3IgRW5nbGFuZCBhbmQgV2FsZXMgdiBBRzwvc3Bhbj4gMTk3My48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFuIGFubnVhbCBjaGVzcyB0b3VybmFtZW50IGZvciB0aGUgYm95cyBvZiBQb3J0c21vdXRoLCBidXQgb25seSBqdXN0LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBEdXByZWUmIzgyMTc7cyBEZWVkIFRydXN0PC9zcGFuPiAxOTQ1LiBTdWRva3U/IFBpbiB0aGUgVGFpbCBvbiB0aGUgRG9ua2V5Pzwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QSByb3NlIGdhcmRlbi4gSW4gQXVzdHJhbGlhLCBhdCBhbnkgcmF0ZSwgc3VjaCBhIHRoaW5nIGlzICYjODIxNjtjb25kdWNpdmUgb2YgZWR1Y2F0aW9uIGZvciBldmVyeW9uZSBidXQgdGhlIG1vc3QgYmxhc1x1MDBlOSBvZiBzdHVkZW50cyYjODIxNzsuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1jR3JhdGggdiBDb2hlbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Qcm92aWRpbmcgPHNwYW4gY2xhc3M9XCJpdFwiPnRyZWF0czwvc3Bhbj4gb3IgPHNwYW4gY2xhc3M9XCJpdFwiPmZpZWxkIGRheXM8L3NwYW4+IGZvciBzY2hvb2wgY2hpbGRyZW4uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIE1lbG9keTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5PciBnaXZpbmcgdGhlIGxpdHRsZSBicmF0cyBlbGVwaGFudCByaWRlcyAmbWRhc2g7IFJlIExvcGVzIFsxOTMxXS4gUHJlc3VtYWJseSB0byB0ZWFjaCB0aGVtIGFib3V0IHRoZSBleHBsb2l0YXRpb24gb2YgYW5pbWFscy48L3NwYW4+PC9saT48L3VsPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJiZFwiPkNhbm5vdCBiZTwvc3Bhbj4gJm1kYXNoOzwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BIGNvbGxlZ2UgdG8gdHJhaW5pbmcgPHNwYW4gY2xhc3M9XCJpdFwiPnNwaXJpdHVhbGlzdGljIG1lZGl1bXM8L3NwYW4+LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBIdW1tZWx0ZW5iZXJnPC9zcGFuPiAxOTIzLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QSBzY2hvb2wgZm9yIDxzcGFuIGNsYXNzPVwiaXRcIj5waWNrcG9ja2V0cyBvciBwcm9zdGl0dXRlczwvc3Bhbj4uIE9iaXRlciBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBQaW5pb248L3NwYW4+LCBhbHRob3VnaCBzb21lIHNvdXJjZXMgdGhpcyBhcyBvYml0ZXIgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgU2hhdzwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Qb2xpdGljYWwgY2F1c2VzIG1hc3F1ZXJhZGluZyBhcyBlZHVjYXRpb24uIEV2ZW4gb3N0ZW5zaWJseSB3b3J0aHkgb25lcywgc3VjaCBhcyBkaXNhcm1hbWVudC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U291dGh3b29kIHYgQUc8L3NwYW4+IDIwMDAuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlJlc2VhcmNoPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJiZFwiPk11c3QgYmU8L3NwYW4+ICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Vc2VmdWwuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFNoYXc8L3NwYW4+Ljxicj5UaGUgNDAtbGV0dGVyIHBob25pYyBhbHBoYWJldCB0aGluZy4gRWl0aGVyIGhlIHdhcyB0YWtpbmcgdGhlIHBpc3MsIG9yIGhlIHdhcyB0YWtpbmcgdGhlIHBpc3MuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JbnRlbmRlZCB0byBiZSA8c3BhbiBjbGFzcz1cIml0XCI+ZGlzc2VtaW5hdGVkPC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgQnJpdGlzaCBTY2hvb2wgb2YgRWd5cHRpYW4gQXJjaGVvbG9neTwvc3Bhbj4gWzE5NTRdPGJyPlRoZXJlYnkgYmVpbmcgb2YgbW9yZSBiZW5lZml0IHRoYW4ganVzdCB0aGUgZWRpZmljYXRpb24gb2YgdGhlIHJlc2VhcmNoZXJzLiBTbyBub3QgcmVzZWFyY2ggdGhhdCBtaWdodCBlbmQgdXAgaW4gYSBwaGFybWEgcGF0ZW50Ljwvc3Bhbj48L2xpPjwvdWw+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImJkXCI+TWF5PC9zcGFuPiBiZSAmbWRhc2g7PC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFic3RydXNlLCBidXQgc3RpbGwgYmUgdXNlZnVsLCBub25ldGhlbGVzcy4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgSG9wa2luJiM4MjE3O3MgV2lsbCBUcnVzdDwvc3Bhbj4gJm1kYXNoOyB3aGV0aGVyIFNoYWtlc3BlYXJlJiM4MjE3O3MgcGxheXMgd3JpdHRlbiBieSBhIGJsb2tlIGNhbGxlZCA8c3BhbiBjbGFzcz1cIml0XCI+QmFjb248L3NwYW4+IG9yIGEgYmxva2UgY2FsbGVkIDxzcGFuIGNsYXNzPVwiaXRcIj5TaGFrZXNwZWFyZTwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlB1YmxpYyBTY2hvb2xzPC9zcGFuPjwvc3Bhbj48YnI+SGVyZSBpcyB5b3VyIGJpZyBmYXQgb3Bwb3J0dW5pdHkgdG8gc2hvdyBob3cgbXVjaCBvciBob3cgbGl0dGxlIG9mIGEgbmF1c2VhdGluZyBsaXR0bGUgTWFyeGlzdCB5b3UgYXJlIGJ5IHNsYWdnaW5nIG9mZiwgb3IgaW5kZWVkIHN0aWNraW5nIHVwIGZvciwgcHVibGljIHNjaG9vbHMuIFNob3cgaG93IGNsdWVkIHVwIHlvdSBhcmUgYnkgcmVtYXJraW5nIHRoYXQgMzAlIG9mIGJveXMgYXQgRXRvbiBhcmUgb24gc29tZSBmb3JtIG9mIHNjaG9sYXJzaGlwOyBidXQgYmUgc3VyZSB0byBmb2xsb3cgdXAgc3VjaCBhIGNvbmNlc3Npb24gd2l0aCBzdGF0ZW1lbnRzIHRvIHRoZSBlZmZlY3QgdGhhdCB0aGUgb3RoZXIgNzAlIHNob3VsZCBiZSBzdHJ1bmcgdXAgYnkgdGhlaXIgb3Zlci1wcml2aWxlZ2VkIDxzcGFuIGNsYXNzPVwiaXRcIj5iYWxsczwvc3Bhbj4gZnJvbSB0aGUgbmVhcmVzdCBxdWFkcmFuZ2xlLCBmb3IgaGF2aW5nIGhhZCB0aGUgc2hlZXIgYmxvb2R5LW1pbmRlZCA8c3BhbiBjbGFzcz1cIml0XCI+Z2FsbDwvc3Bhbj4gbm90IHRvIGhhdmUga2lsbGVkIHRoZW1zZWx2ZXMgaW4gZGlzZ3VzdCBhdCB0aGVpciB1bm1lcml0ZWQgc3RhdHVzLjxicj4mZW1zcDsmZW1zcDtOb3QgYWxsIHN1Y2ggc2Nob29scyBhcmUgY2hhcml0aWVzLCBob3dldmVyICZtZGFzaDsgc29tZSBhcmUgcnVuIGZvciBwcm9maXQuIE5vdGUgdGhhdCBzaW5jZSB0aGUgMjAwNiBBY3QsIFB1YmxpYyBTY2hvb2xzIGhhdmUgYmVlbiA8c3BhbiBjbGFzcz1cImJkXCI+cmVxdWlyZWQgdG8gb2ZmZXIgZmluYW5jaWFsIGFzc2lzdGFuY2U8L3NwYW4+LiIKICAgIF0sCiAgICAiTkFNRSI6ICJBZHZhbmNlbWVudCBvZiBFZHVjYXRpb24iLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJQcmV2ZW50aW9uIG9yIFJlbGllZiBvZiBQb3ZlcnR5IiwKICAgICAgICAiT3RoZXIgQ2hhcml0YWJsZSBQdXJwb3NlcyB1bmRlciBDaGFyaXRpZXMgQWN0IDIwMTEiLAogICAgICAgICJBZHZhbmNlbWVudCBvZiBFZHVjYXRpb24iLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiUG9saXRpY2FsIFB1cnBvc2Ugb2YgYSBDaGFyaXR5IiwKICAgICAgICAiQ2hhcml0eSBDb21taXNzaW9uZXIncyBHdWlkYW5jZSAtIFNlcHRlbWJlciAyMDEzIiwKICAgICAgICAiVGhlIEN5LXByXHUwMGU4cyBEb2N0cmluZSIsCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdHkgLSBEZWZpbml0aW9ucyIsCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIC0gQnJpYmVzIiwKICAgICAgICAiRXF1aXR5IHdpbGwgbm90IGFsbG93IGEgU3RhdHV0ZSB0byBiZSBhbiBDbG9hayBmb3IgRnJhdWQiLAogICAgICAgICJObyBQcm9maXQgUnVsZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjc0IiwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5TMygxKShjKTwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2hhcml0aWVzIEFjdCAyMDExPC9zcGFuPjxicj5CbGFja3N0b25lJiM4MjE3O3MgPHNwYW4gY2xhc3M9XCJpdFwiPlByb3BlcnR5IExhdyAyMDE1LTE2PC9zcGFuPiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwiYmRcIj5wMzgyPC9zcGFuPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+RGVmaW5pdGlvbjwvc3Bhbj48L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlcmUgd2FzIG5vIDxzcGFuIGNsYXNzPVwiaXRcIj5zdGF0dXRvcnk8L3NwYW4+IGRlZmluaXRpb24sIGJ1dCBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBTb3V0aCBQbGFjZSBFdGhpY2FsIFNvY2lldHk8L3NwYW4+IFsxOTgwXSwgYSByZWxpZ2lvbiB3YXMgaGVsZCB0byBjb21wcmlzZTo8L3NwYW4+PG9sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QmVsaWVmIGluIHNvbWV0aGluZyA8c3BhbiBjbGFzcz1cImJkXCI+c3VwZXJuYXR1cmFsPC9zcGFuPiwgYW5kPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5GYWl0aCBpbiwgYW5kIHdvcnNoaXAgb2YsIHRoZSBhZm9yZXNhaWQuPC9zcGFuPjwvbGk+PC9vbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlNvIEhpbmR1aXNtLCBTaWtoaXNtLCBDaHJpc3RpYW5pdHksIElzbGFtLCBKdWRhaXNtLCBhbGwgT0ssIGFzIGFyZSB0aGUgTW9vbmllcyAmbWRhc2g7IGJ1dCBub3QgdGhlIFRoZW9zb3BoaWNhbCBTb2NpZXR5LiBCdWRkaGlzdHMgZG9uJiM4MjE3O3QgcmVhbGx5IGJlbGlldmUgaW4gZ29kLCB0aG91Z2guIFBlcmhhcHMgYSBqdWRnZSBpbiB0aGUgSGlnaCBDb3VydCBpbiAxOTgwIHdvdWxkIGhhdmUga25vd24gdGhpczsgcGVyaGFwcyBub3QuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5TY2llbnRvbG9neSwgaG93ZXZlciwgbGFja3MgPHNwYW4gY2xhc3M9XCJiZFwiPndvcnNoaXA8L3NwYW4+Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5EZW5uaW5nLCBpbiAxOTcyLCBjYWxsZWQgaXQgZG93bnJpZ2h0IDxzcGFuIGNsYXNzPVwiYmRcIj5kYW5nZXJvdXM8L3NwYW4+IGZvciBpdHMgdXNlIG9mIHdoYWNrbyBwc3ljaGlhdHJpYyB0ZWNobmlxdWVzLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IdWJiYXJkIHYgVm9zcGVyPC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJpbGNcIj5BdCB0aGlzIGp1bmN0dXJlLCBNYXJnYXJldCBDYXJyYW4gYXNrZWQgaWYgdGhlcmUgd2VyZSBhbnkgc2NpZW50b2xvZ2lzdHMgcHJlc2VudC4gQW5kIGZ1Y2sgbWUsIHNvbWVvbmUgcHV0IHRoZWlyIGhhbmQgdXAuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SW4gTmV3IFNvdXRoIFdhbGVzLCBpdCYjODIxNztzIGJlZW4gaGVsZCB0byBiZSBhIHJlbGlnaW9uLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaHVyY2ggb2YgTmV3IEZhaXRoIHYgQ29tbWlzc2lvbmVycyBmb3IgUGF5cm9sbCBUYXg8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SW4gMjAxNCwgaXQgd2FzIGhlbGQgdGhhdCAoZm9yIHRoZSBwdXJwb3NlcyBvZiBtYXJyaWFnZSkgc2NpZW50b2xvZ3kgJiM4MjIwO2NoYXBlbHMmIzgyMjE7IGFyZSBwbGFjZXMgb2YgcmVsaWdpb3VzIHdvcnNoaXAsIHNvIG1hcnJpYWdlcyBjYW4gYmUgY29uZHVjdGVkIGluIHRoZW0uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIChleHAgSG9ka2luKSB2IFJlZ2lzdHJhcjwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+QXRoZWlzbTwvc3Bhbj48L3NwYW4+PGJyPkEgY29tbW9uIGV4YW0gcXVlc3Rpb246IGlzIGF0aGVpc20gYSByZWxpZ2lvbiBjaGFyaXR5PyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkhvd2V2ZXIgdGVtcHRpbmcgaXQgbWF5IGJlLCBkb24mIzgyMTc7dCBhbnN3ZXIgbGlrZSB0aGlzOiAmIzgyMTY7T2YgY291cnNlIGl0IGZ1Y2tpbmcgd2VsbCBpc24mIzgyMTc7dC4gQXRoZWlzbSBpcyBub3QgYSBzeXN0ZW0gb2YgYmVsaWVmLiBJdCYjODIxNztzIG1lcmVseSB0aGUgbGF1ZGFibHkgdW5vYmplY3Rpb25hYmxlIHBvc2l0aW9uIG9mIDxzcGFuIGNsYXNzPVwiYmRcIj5yZWZ1c2luZyB0byBhY2NlcHQgc29tZXRoaW5nIG9uIGJhZCBldmlkZW5jZSYjODIxNzs8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj5DdXJyZW50IFBvc2l0aW9uPC9zcGFuPiAmbWRhc2g7IFMzKDIpKGMpIG9mIHRoZSAyMDExIEFjdCBhbmQgQ2hhcml0eSBDb21taXNzaW9uIEd1aWRhbmNlPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlJlbGlnaW9uIG1heSBpbnZvbHZlIGEgYmVsaWVmIGluIG9uZSBvciBtb3JlIGdvZHMsPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPm9yIG5vbmUgYXQgYWxsICg8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBpdHNlbGYgYW4gYXR0ZW1wdCB0byBjb3ZlciBCdWRkaGlzbSkuPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlNvIHdoYXQgYWJvdXQgdGhlIHNpbGx5IHBlb3BsZSB3aG8gcHV0ICYjODIyMDtKZWRpJiM4MjIxOyBvbiB0aGUgY2Vuc3VzIGZvcm0/IFRoYXQsIGFmdGVyIGFsbCwgaXMganVzdCBhcyBtYWRlIHVwIGFzIGFsbCBvdGhlciByZWxpZ2lvbnMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Hbm9zdGljIENlbnRyZTwvc3Bhbj4gMjAwOSwgdGhlIENoYXJpdHkgQ29tbWlzc2lvbiBsaXN0ZWQgdGhlc2UgZm91ciBjb25kaXRpb25zOjwvc3Bhbj48L2xpPjwvdWw+PG9sPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CZWxpZWYgaW4gYSBnb2Qvc3VwcmVtZSBiZWluZy9kaXZpbmUvcGx1cmFsL3RyYW5zY2VuZGVudGFsIGJlaW5nLzxzcGFuIGNsYXNzPVwiYmRcIj5zcGlyaXR1YWw8L3NwYW4+IHByaW5jaXBsZTwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+V29yc2hpcCAmbWRhc2g7IHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGJlbGlldmVyIGFuZCBlbnRpdHk8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkRlZ3JlZSBvZiBjb2dlbmN5LCBjb2hlc2lvbiwgc2VyaW91c25lc3Mgb3IgaW1wb3J0YW5jZS48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Ti5CLiB0aGlzIGlzIHRoZSBDaGFyaXR5IENvbW1pc3Npb24mIzgyMTc7cyBkb2luZywgaXQgaXMgbm90IGEgcHJpbmNpcGxlIGFwcGVhcmluZyBpbiB0aGUgY2FzZSBsYXcgb3Igc3RhdHV0ZS48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SWRlbnRpZmlhYmxlIDxzcGFuIGNsYXNzPVwiYmRcIj5wb3NpdGl2ZSwgYmVuZWZpY2lhbCwgbW9yYWwgYW5kIGV0aGljYWw8L3NwYW4+IGZyYW1ld29yay48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+U28gd2hhdCBhYm91dCB0aGUgdGhyZWUgJiM4MjIwO2dyZWF0JiM4MjIxOyBtb25vdGhlaXNtcywgYWxsIG9mIHdoaWNoLCBmb3IgdGhlIGJldHRlciBwYXJ0IG9mIHRoZWlyIGhpc3RvcmllcyBjb25kb25lZCBzbGF2ZXJ5LCBvbmUgb2Ygd2hpY2ggc3RpbGwgb2J2aW91c2x5IGRvZXMsIGFuZCBlYWNoIG9mIHdoaWNoLCB0byBncmVhdGVyIG9yIGxlc3NlciBkZWdyZWVzLCBnaXZlcyByaXNlLCBleHBsaWNpdGx5IGJlY2F1c2UgdGhlaXIgdGVhY2hpbmdzLCB0byBjYXRhbG9ndWUgdXBvbiBjYXRhbG9ndWUgb2YgdGhlIG1vc3QgYWN1dGVseSBvYmplY3Rpb25hYmxlIG1vcmFsIGFuZCBldGhpY2FsIGJlaGF2aW91cj88L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5EcnVpZGlzbTwvc3Bhbj4gaXMgYSB2YWxpZCByZWxpZ2lvbiBvbiB0aGVzZSBncm91bmRzLjwvc3Bhbj48L2xpPjwvdWw+PC9vbD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPldoYXQgaXMgQWR2YW5jZW1lbnQ/PC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JdCYjODIxNztzOiA8c3BhbiBjbGFzcz1cImJkXCI+cHJvbW90aW5nPC9zcGFuPiBpdCwgPHNwYW4gY2xhc3M9XCJiZFwiPnNwcmVhZGluZyBpdHMgbWVzc2FnZTwvc3Bhbj4gZXZlbiB3aWRlciBhbW9uZyBtYW5raW5kLCA8c3BhbiBjbGFzcz1cImJkXCI+dGFraW5nIHBvc2l0aXZlIHN0ZXBzIHRvIHN1c3RhaW4gYW5kIGluY3JlYXNlPC9zcGFuPiAuLi4gcGFzdG9yYWwuLi4gbWlzc2lvbmFyeS4uLiB6enp6ei4uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlVuaXRlZCBHcmFuZCBMb2RnZSBvZiBNYXNvbnMgdiBIb2xib3JuIEJDPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIKICAgIF0sCiAgICAiTkFNRSI6ICJBZHZhbmNlbWVudCBvZiBSZWxpZ2lvbiIKfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IEludmFsaWQgQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2hhcml0eSBDb21taXNzaW9uZXIncyBHdWlkYW5jZSAtIFNlcHRlbWJlciAyMDEzIiwKICAgICAgICAiQ2hhcml0eSAtIERlZmluaXRpb25zIiwKICAgICAgICAiVGhlIEN5LXByXHUwMGU4cyBEb2N0cmluZSIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJQcmV2ZW50aW9uIG9yIFJlbGllZiBvZiBQb3ZlcnR5IiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgRWR1Y2F0aW9uIiwKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgUmVsaWdpb24iLAogICAgICAgICJPdGhlciBDaGFyaXRhYmxlIFB1cnBvc2VzIHVuZGVyIENoYXJpdGllcyBBY3QgMjAxMSIsCiAgICAgICAgIkZvcm1hbGl0aWVzIGZvciBJbnRlciBWaXZvcyBFeHByZXNzIFRydXN0cyIsCiAgICAgICAgIkluY29tcGxldGUgQ29uc3RpdHV0aW9uIGFuZCBGYWlsZWQgR2lmdHMiLAogICAgICAgICJFcXVpdHkgd2lsbCBub3QgYWxsb3cgYSBTdGF0dXRlIHRvIGJlIGFuIENsb2FrIGZvciBGcmF1ZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjc1IiwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkl0JiM4MjE3O3MgYSBwb2xpdGljYWwgcHVycG9zZSBpZiBpdCBpdCBhZHZvY2F0ZXMgY2hhbmdlIGluIHRoZSBsYXcsIG9yLCBhcmd1YWJseSwgbWFpbnRlbmFuY2Ugb2YgdGhlIHN0YXR1cyBxdW8uIFRoZSByZWFzb25zIGZvciB0aGlzIGFuY2llbnQgcnVsZSB3ZXJlIHNldCBvdXQgbmljZWx5IGJ5IFNsYWRlIEogaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWNHb3Zlcm4gdiBBRzwvc3Bhbj4gWzE5ODJdLCBpbiB0ZXJtcyBvZiB0aGUgZWZmZWN0IGl0IHdvdWxkIGhhdmUgb24gdGhlIGNvdXJ0cy48YnI+VGhlIGNvdXJ0czoiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5MYWNrIGFkZXF1YXRlIG1lYW5zIG9mIGp1ZGdpbmcgd2hldGhlciB0aGUgcHJvcG9zZWQgY2hhbmdlIG9mIHN1Y2ggYSBwdXJwb3NlIHdvdWxkIGJlIGZvciBwdWJsaWMgYmVuZWZpdC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPldvdWxkIHRyZXNwYXNzLCB3ZXJlIHRoZXkgdG8gdHJ5LCBvbiB0aGUgcm9sZSBvZiBsZWdpc2xhdHVyZS4uLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Li4uYW5kIHdvdWxkIGplb3BhcmRpc2UgdGhlaXIgcmVwdXRhdGlvbiBmb3IgcG9saXRpY2FsIGltcGFydGlhbGl0eS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFuZCBhbHNvIHJpc2sgcHJlanVkaWNpbmcgdGhlIHJlbGF0aW9ucyB3aXRoIGZvcmVpZ24gY291bnRyaWVzLjxicj48c3BhbiBjbGFzcz1cImlsY1wiPkNIRUNLICZtZGFzaDsgYXMgaXQgbWFrZXMgYnVnZ2VyLWFsbCBzZW5zZS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkNhc2VzPC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Tb21ldGhpbmcgPHNwYW4gY2xhc3M9XCJiZFwiPnJlcXVpcmluZyBhIGNoYW5nZSBpbiB0aGUgbGF3PC9zcGFuPiBpcyBhIHBvbGl0aWNhbCBwdXJwb3NlLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5OYXRpb25hbCBBbnRpLVZpdmlzZWN0aW9uIFNvY2lldHkgdiBJUkM8L3NwYW4+IDE5NDguPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5TbyBpcyA8c3BhbiBjbGFzcz1cImJkXCI+ZGlzYXJtYW1lbnQ8L3NwYW4+IC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U291dGh3b29kIHYgQUc8L3NwYW4+IDIwMDAuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BbmQgJiM4MjE2O2Rpc3NlbWluYXRpb24gb2YgPHNwYW4gY2xhc3M9XCJiZFwiPnNvY2lhbGlzdCBtZWRpY2luZTwvc3Bhbj4mIzgyMTY7IDxzcGFuIGNsYXNzPVwiaWxjXCI+eWVzLCB5b3UgcmVhZCB0aGF0IHJpZ2h0PC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgQnVzaG5lbGw8L3NwYW4+IFsxOTc1XTwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+RnVubmlseSBlbm91Z2gsIGEgZ2lmdCB0byBhIHBvbGl0aWNhbCBwYXJ0eSBpcyBwb2xpdGljYWwuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJvbmFyIExhdyBNZW1vcmlhbCBUcnVzdCB2IElSQzwvc3Bhbj4gKDE5MzMpPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BcyBpcyBhIGdpZnQgdG8gYSBjYW1wYWlnbiBhZ2FpbnN0IHRoZSBhYm9saXRpb24gb2YgZnJlZSBtaWxrIGluIHNjaG9vbHMuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhbGRyeSB2IEZlaW50dWNrPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiTkFNRSI6ICJQb2xpdGljYWwgUHVycG9zZSBvZiBhIENoYXJpdHkiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkludmFsaWQgQ2hhcml0YWJsZSBQdXJwb3NlcyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdHkgQ29tbWlzc2lvbiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiVGhlIEN5LXByXHUwMGU4cyBEb2N0cmluZSIsCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIk90aGVyIENoYXJpdGFibGUgUHVycG9zZXMgdW5kZXIgQ2hhcml0aWVzIEFjdCAyMDExIiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgRWR1Y2F0aW9uIiwKICAgICAgICAiQ2hhcml0eSAtIERlZmluaXRpb25zIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIlBvbGl0aWNhbCBQdXJwb3NlIG9mIGEgQ2hhcml0eSIsCiAgICAgICAgIkFkdmFuY2VtZW50IG9mIFJlbGlnaW9uIiwKICAgICAgICAiUHJldmVudGlvbiBvciBSZWxpZWYgb2YgUG92ZXJ0eSIsCiAgICAgICAgIlByZWNhdG9yeSBXb3JkcyIsCiAgICAgICAgIktub3dpbmcgUmVjZWlwdCAtIEtub3dsZWRnZSIsCiAgICAgICAgIkRpc3Bvc2l0aW9uIG9mIEVxdWl0YWJsZSBJbnRlcmVzdHMiCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIk91dGxpbmUgZnJvbSBsZWN0dXJlIGhhbmRvdXQgJm1kYXNoOzxicj5Ud28gYXNwZWN0cyBvZiBwdWJsaWMgYmVuZWZpdCIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSA8c3BhbiBjbGFzcz1cImJkXCI+YmVuZWZpdDwvc3Bhbj4gYXNwZWN0Ojwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BIHB1cnBvc2UgbXVzdCBiZSBiZW5lZmljaWFsPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BbnkgZGV0cmltZW50IG9yIGhhcm0gdGhhdCByZXN1bHRzIGZyb20gdGhlIHB1cnBvc2UgbXVzdCBub3Qgb3V0d2VpZ2ggdGhlIGJlbmVmaXQ8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkRldGVybWluZWQgb24gdGhlIGJhc2lzIG9mIGV2aWRlbmNlIHVubGVzcyBjbGVhcmx5IGJlbmVmaWNpYWw8L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5wdWJsaWM8L3NwYW4+IGFzcGVjdDo8L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QSBwdXJwb3NlIG11c3QgYmVuZWZpdCB0aGUgcHVibGljIGluIGdlbmVyYWwsIG9yIGEgc3VmZmljaWVudCBhc3BlY3Qgb2YgdGhlIHB1YmxpYzwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+TXVzdCBub3QgZ2l2ZSByaXNlIHRvIG1vcmUgdGhhbiBpbmNpZGVudGFsIHBlcnNvbmFsIGJlbmVmaXQ8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlB1YmxpYyBpbiBnZW5lcmFsID0gYWxsIG9mIHRoZSBwdWJsaWMgY2FuIGJlbmVmaXQ8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlN1ZmZpY2llbnQgc2VjdGlvbiA9IHB1YmxpYyBjbGFzcyBvZiBwZW9wbGU7IG5vIG1pbmltdW0gbnVtYmVyIHNldDwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+TGltaXRhdGlvbiB0byBwZW9wbGUgbGl2aW5nIGluIGEgZ2VvZ3JhcGhpYyBhcmVhIChsb2NhbCwgbmF0aW9uYWwgb3IgaW50ZXJuYXRpb25hbCkgYWNjZXB0YWJsZTwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+R3JvdXAgb2YgcGVvcGxlIG1heSBiZSBkZWZpbmVkIGJ5ICYjODIxNjtwcm90ZWN0ZWQgY2hhcmFjdGVyaXN0aWNzJiM4MjE3OyAmbWRhc2g7PGJyPkFnZSwgRGlzYWJpbGl0eSwgU2V4LCBTZXh1YWwgb3JpZW50YXRpb24sIEdlbmRlciByZWFzc2lnbm1lbnQsIE1hcnJpYWdlIGFuZCBjaXZpbCBwYXJ0bmVyc2hpcCwgUHJlZ25hbmN5IGFuZCBtYXRlcm5pdHksIFJhY2Ugb3IgbmF0aW9uYWxpdHksIFJlbGlnaW9uIG9yIGJlbGllZjxicj5CVVQgTk9UIGJ5IHJlZmVyZW5jZSB0byBza2luIGNvbG91cjxicj5DYW4gYmUgZGVmaW5lZCBieSByZWZlcmVuY2UgdG8gcHJvZmVzc2lvbiBvciBvY2N1cGF0aW9uPGJyPkJVVCBOT1QgYnkgcmVmZXJlbmNlIHRvIGZhbWlseSByZWxhdGlvbnNoaXAvIGVtcGxveW1lbnQgcmVsYXRpb25zaGlwIC8gbWVtYmVyc2hpcCBvZiBhbiB1bmluY29ycG9yYXRlZCBhc3NvY2lhdGlvbjxicj5VTkxFU1MgaXQgaXMgZm9yIHRoZSByZWxpZWYgb2YgcG92ZXJ0eTwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5XaGV0aGVyIG51bWJlciBpcyBzdWZmaWNpZW50IHdvdWxkIGJlIGRlY2lkZWQgb24gYSBjYXNlIGJ5IGNhc2UgYmFzaXM8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkNoYXJpdGllcyBtdXN0IG5vdCBkZWZpbmUgdGhlaXIgYmVuZWZpY2lhcmllcyBieSByZWZlcmVuY2UgdG88L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QSBwdXJwb3NlIHdoaWNoIGV4Y2x1ZGVkIHRoZSBwb29yIGZyb20gYmVuZWZpdGluZzwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QSBwdXJwb3NlIHdoaWNoIGlzIGNvbmZpbmVkIHRvIGEgY2xvc2VkIHJlbGlnaW91cyBvcmdhbmlzYXRpb248L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkEgcHVycG9zZSB3aGVyZSBhbGwgdGhlIHBvdGVudGlhbCBiZW5lZmljaWFyaWVzIGFyZSBuYW1lZDwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QSBwdXJwb3NlIHdoZXJlIHRoZSBudW1iZXIgb2YgcGVvcGxlIHdobyBjYW4gYmVuZWZpdCBpcyBudW1lcmljYWxseSBuZWdsaWdpYmxlPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BIHB1cnBvc2Ugd2hpY2ggZGVmaW5lcyBiZW5lZmljaWFyaWVzIGluIGEgY2FwcmljaW91cyBtYW5uZXI8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkEgcHVycG9zZSB3aGljaCBiZW5lZml0cyBhIG11dHVhbCBiZW5lZml0IHNvY2lldHkgdW5sZXNzIGl0IGlzIGZvciBhIHJlbGllZiBhbmQgYSBzdWZmaWNpZW50IHNlY3Rpb24gb2YgdGhlIHB1YmxpYyBjYW4gYmVjb21lIG1lbWJlcnM8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFueSBwcml2YXRlIGJlbmVmaXRzIG11c3QgYmUgaW5jaWRlbnRhbC48L3NwYW4+PC9saT48L3VsPjwvdWw+IgogICAgXSwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIk5VTUJFUiI6ICI3NiIsCiAgICAiTElOSyI6IFsKICAgICAgICAiR3VpZGFuY2UgaHR0cHM6Ly93d3cuZ292LnVrL2dvdmVybm1lbnQvY29sbGVjdGlvbnMvY2hhcml0YWJsZS1wdXJwb3Nlcy1hbmQtcHVibGljLWJlbmVmaXQiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdHkgQ29tbWlzc2lvbiIKICAgIF0sCiAgICAiTkFNRSI6ICJDaGFyaXR5IENvbW1pc3Npb25lcidzIEd1aWRhbmNlIC0gU2VwdGVtYmVyIDIwMTMiCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMiLAogICAgIk5VTUJFUiI6ICI3NyIsCiAgICAiVFlQRSI6ICJFeGFtIEFkdmljZSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiU3RhcnQgKGFzIGZvciBhbGwgcHJvYmxlbSBxdWVzdGlvbnMgaW4gYWxsIEdETCBsYXcgZXhhbXMpIGJ5IHNheWluZyB3aGF0IHRoZSBsYXcgaXMsIHNvIHRoZXJlJiM4MjE3O3Mgbm8gZG91YnQgeW91IDxzcGFuIGNsYXNzPVwiaXRcIj5rbm93PC9zcGFuPi4gVGhpcyBpcyB0aGF0ICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmVuZWZpY2lhcnkgUHJpbmNpcGxlPC9zcGFuPiB1c3VhbGx5IHJlbmRlcnMgcHVycG9zZSB0cnVzdHMgYXJlIDxzcGFuIGNsYXNzPVwiYmRcIj52b2lkPC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TW9yaWNlIHYgQmlzaG9wIG9mIER1cmhhbTwvc3Bhbj4uIEhvd2V2ZXIsIHRoZXkgbWF5IGZhbGwgd2l0aGluIGEgcmVjb2duaXNlZCBleGNlcHRpb24sIG9mIHdoaWNoIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNoYXJpdGFibGUgVHJ1c3RzPC9zcGFuPiBhcmUgb25lLiBBIGNoYXJpdGFibGUgdHJ1c3QgaXMgdmFsaWQgaWYgJm1kYXNoOzwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JdHMgcHVycG9zZSBjaGFyaXRhYmxlIHdpdGhpbiBtZWFuaW5nIG9mIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaGFyaXRpZXMgQWN0IDIwMTE8L3NwYW4+IChvciAyMDA2KSw8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPnNhdGlzZmllcyB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPnJlcXVpcmVtZW50IG9mIHB1YmxpYyBiZW5lZml0PC9zcGFuPiwgYW5kPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5pcyA8c3BhbiBjbGFzcz1cImJkXCI+d2hvbGx5IGFuZCBleGNsdXNpdmVseTwvc3Bhbj4gY2hhcml0YWJsZS48L3NwYW4+PC9saT48L3VsPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkRvbiYjODIxNzt0PC9zcGFuPiBhbnN3ZXIgYSBjaGFyaXRpZXMgcXVlc3Rpb24gd2l0aG91dCByZWZlcmVuY2UgdG8gdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNoYXJpdHkgQ29tbWlzc2lvbmVyJiM4MjE3O3MgR3VpZGFuY2UgLSBTZXB0ZW1iZXIgMjAxMzwvc3Bhbj4iCiAgICBdLAogICAgIk5BTUUiOiAiQ2hhcml0aWVzIC0gUHJvYmxlbSBRdWVzdGlvbnMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJQcmV2ZW50aW9uIG9yIFJlbGllZiBvZiBQb3ZlcnR5IiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgRWR1Y2F0aW9uIiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgUmVsaWdpb24iLAogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJQb2xpdGljYWwgUHVycG9zZSBvZiBhIENoYXJpdHkiLAogICAgICAgICJDaGFyaXR5IC0gRGVmaW5pdGlvbnMiLAogICAgICAgICJUaGUgQ3ktcHJcdTAwZThzIERvY3RyaW5lIiwKICAgICAgICAiQ2hhcml0eSBDb21taXNzaW9uZXIncyBHdWlkYW5jZSAtIFNlcHRlbWJlciAyMDEzIiwKICAgICAgICAiVW5hdXRob3Jpc2VkIFByb2ZpdHMgLSBDb3Jwb3JhdGUgT3Bwb3J0dW5pdHkiLAogICAgICAgICJDZXJ0YWludHkgb2YgU3ViamVjdCIsCiAgICAgICAgIlByZWNhdG9yeSBXb3JkcyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjc4IiwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIkFLQSI6ICJIZWFsdGggb3IgdGhlIFNhdmluZyBvZiBMaXZlczsgQ2l0aXplbnNoaXAgb3IgQ29tbXVuaXR5IERldmVsb3BtZW50OyBBcnRzLCBDdWx0dXJlLCBIZXJpdGFnZSBvciBTY2llbmNlOyBBbWF0ZXVyIFNwb3J0OyBIdW1hbiBSaWdodHM7IEVudmlyb25tZW50YWwgUHJvdGVjdGlvbiBvciBJbXByb3ZlbWVudDsgUmVsaWVmIG9mIFRob3NlIGluIE5lZWQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5TMygxKShkKSB0byAobCk8L3NwYW4+IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNoYXJpdGllcyBBY3QgMjAxMTwvc3Bhbj48YnI+QmxhY2tzdG9uZSYjODIxNztzIDxzcGFuIGNsYXNzPVwiaXRcIj5Qcm9wZXJ0eSBMYXcgMjAxNS0xNjwvc3Bhbj4gJm1kYXNoOyA8c3BhbiBjbGFzcz1cImJkXCI+cDM4Mjwvc3Bhbj4iLAogICAgICAgICIoZyksIHRoZSBhZHZhbmNlbWVudCBvZiBhbWF0ZXVyIHNwb3J0LCB3YXMgbmV3IHRvIHRoZSAyMDA2IGFjdCwgbm90IGhhdmluZyBiZWVuIHZhbGlkIHByZS0yMDA2LiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+KGQpPC9zcGFuPiAmbWRhc2g7IEhlYWx0aCBvciBTYXZpbmcgTGl2ZXM8L3NwYW4+PGJyPlZhbGlkOiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBHaWZ0cyB0byA8c3BhbiBjbGFzcz1cIml0XCI+ZnJlZTwvc3Bhbj4gcmVzY3VlIHNlcnZpY2VzIHN1Y2ggYXMgdGhlIFJOTEkuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRob21hcyB2IEhvd2VsbDwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gTWVkaWNhbCBjYXJlLCBldmVuIHdoZW4gYSBmZWUgaXMgY2hhcmdlZC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgUmVzY2ggV1Q8L3NwYW4+Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gQW5kIGV2ZW4gPHNwYW4gY2xhc3M9XCJpdFwiPmlub3BlcmF0aXZlPC9zcGFuPiBtZWRpY2FsIGNhcmUsIHN1Y2ggYXMgaG9saXN0aWMgJiM4MjIwO21lZGljaW5lJiM4MjIxOy48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEZ1bmRpbmcgcmVzZWFyY2ggaXMgY2hhcml0YWJsZS4gQ2FuY2VyIFJlc2VhcmNoLCBldGMsIGNhbiBjaG9vc2Ugd2hldGhlciB0byBsaXZlIGhlcmUsIG9yIHVuZGVyIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmFkdmFuY2VtZW50IG9mIGVkdWNhdGlvbjwvc3Bhbj4gdW5kZXIgUzMoMSkoYikuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPlMzKDEpKGUpPC9zcGFuPiAmbWRhc2g7IENpdGl6ZW5zaGlwIG9yIENvbW11bml0eSBEZXZlbG9wbWVudDwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5FLmcuLCB2b2x1bnRlZXJpbmcsIFNjb3V0cyBhbmQgR3VpZGVzIEdyb3VwcywgZXRjLiBNb3N0IHdpbGwgdmFsaWRseSBmYWxsIHVuZGVyIG90aGVyIHByZXZpb3VzIGNhdGVnb3JpZXMuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPlMzKDEpKGYpPC9zcGFuPiAmbWRhc2g7IEFydHMsIEN1bHR1cmUsIEhlcml0YWdlIG9yIFNjaWVuY2U8L3NwYW4+PGJyPlZhbGlkOiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkN1cmF0aW9uIG9mIG9iamVjdHMgb2YgaGlzdG9yaWMgdmFsdWUuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFZlcnJhbGw8L3NwYW4+IDE5MTYuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5TdHVkeSBvZiBhIGNvbXBvc2VyIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIERlbGl1czwvc3Bhbj4gMTk1Ny48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlB1dHRpbmcgdXAgYSBtb251bWVudCBhbHJlYWR5IHZhbGlkIGFzIGEgbm9uLWNoYXJpdGFibGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+cHVycG9zZSB0cnVzdDwvc3Bhbj4sIGZyb20gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgRW5kYWNvdHQ8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QXJ0cywgcHJlc3VtYWJseSwgaW5jbHVkZSB0aGUgY29udmVudGlvbmFsIHJlcGVydG9pcmUgb2YgdGhlYXRyZSwgbXVzaWMsIG9wZXJhcywgY2Fybml2YWxzLCBvcGVyYSwgbGl0ZXJhdHVyZS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlVubGVzcyB0aGUgYXJ0IGluIHF1ZXN0aW9uIGlzIDxzcGFuIGNsYXNzPVwiaXRcIj5hIHdvcnRobGVzcyBwaWxlIG9mIGp1bms8L3NwYW4+LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBQaW5pb248L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj5TMygxKShnKTwvc3Bhbj4gJm1kYXNoOyBBbWF0ZXVyIFNwb3J0PC9zcGFuPjxicj5VbmRlciB0aGUgcHJlLTIwMDYgbGF3LCB0aGlzIHdhcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiB2YWxpZCwgdW5sZXNzIGl0IGNvbnN0aXR1dGVkIGFkdmFuY2VtZW50IG9mIGVkdWNhdGlvbi4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JLmUuLCBzdXBwb3J0IGZvciBhbWF0ZXVyIHlhY2h0IHJhY2luZyB3YXMgPHNwYW4gY2xhc3M9XCJpdFwiPm1vdDwvc3Bhbj4gdmFsaWQuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIE5vdHRhZ2U8L3NwYW4+IDE5ODUuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CdXQgaW4gc2Nob29scywgdmFsaWQgYXMgYWR2YW5jZW1lbnQgb2YgZWR1Y2F0aW9uLCBhbGJlaXQgZWR1Y2F0aW5nIHRoZSBib2R5LCBub3QgdGhlIG1pbmQgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBNYXJyaWV0dGU8L3NwYW4+IDxzcGFuIGNsYXNzPVwiaXRcIj5lZHVjYXRpb25hbDwvc3Bhbj4gcHVhcyA8c3BhbiBjbGFzcz1cIml0XCI+ZWR1Y2F0ZWQgdGhlIGJvZHk8L3NwYW4+PC9zcGFuPjwvbGk+PC91bD48c3BhbiBjbGFzcz1cIm5sXCI+IFNpbmNlIDIwMDYsIG11c3QgYmU6PC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBBbWF0ZXVyLCBub3QgZm9yIHByb2ZpdC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImJkXCI+UzYoMSk8L3NwYW4+IG5vdCBhIDxzcGFuIGNsYXNzPVwiaXRcIj5yZWdpc3RlcmVkPC9zcGFuPiBzcG9ydHMgY2x1Yi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBJbnZvbHZlIHBoeXNpY2FsIGV4ZXJ0aW9uIDxzcGFuIGNsYXNzPVwiYmRcIj5vcjwvc3Bhbj4gc2tpbGwvbWVudGFsIGV4ZXJ0aW9uLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEluIENoYXJpdHkgQ29tbWlzc2lvbiYjODIxNztzIGd1aWRhbmNlLCBzb21lIHNwb3J0cyBtYXkgbm90IHF1YWxpZnkgYXMgcG90ZW50aWFsIGhhcm0gb3V0d2VpZ2ggcG90ZW50aWFsIGFkdmFudGFnZXMgdG8gaGVhdGguPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBTa2lpbmc/IFBvbG8/IEV2ZW50aW5nPzwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEJveGluZywgdGhlIHJlbGlhYmxlIG1haW5zdGF5IG9mIGEgdGhvdXNhbmQgcHJvamVjdHMgdG8gZGl2ZXJ0IHRoZSBhdHRlbnRpb24gb2YgdGhlIG90aGVyd2lzZS1jcmltaW5hbCB1cmJhbiB5b29mPyBUaGV5IHdvbiYjODIxNzt0IHNheSB1bnRpbCB0aGV5IGhhdmUgdG88L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBHeW1uYXN0aWNzIDxzcGFuIGNsYXNzPVwiaXRcIj5pczwvc3Bhbj4gdmFsaWQsIGRlc3BpdGUgbG9uZy10ZXJtIGRhbWFnZSB0byBqb2ludHMsIGV0Yy48L3NwYW4+PC9saT48L3VsPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj5TMygxKShoKTwvc3Bhbj4gJm1kYXNoOyBIdW1hbiBSaWdodHMgJmFtcDsgR2VuZXJhbCBMb3ZlbGluZXNzPC9zcGFuPjxicj5UaGlzIG1heSB0b2UgdGhlIGxpbmUgb2YgcG9saXRpY3MsIGluIHdoaWNoIGNhc2UgaXQgd2lsbCBiZSA8c3BhbiBjbGFzcz1cIml0XCI+aW52YWxpZDwvc3Bhbj4sIGUuZy4sOiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+UzMoMSkoaSk8L3NwYW4+ICZtZGFzaDsgRW52aXJvbm1lbnRhbCBQcm90ZWN0aW9uIG9yIEltcHJvdmVtZW50PC9zcGFuPjxicj5BcyB3ZWxsIGFzIHRoaW5ncyBsaWtlIDxzcGFuIGNsYXNzPVwiaXRcIj5yZWN5Y2xpbmc8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cIml0XCI+d2FzdGUgbWFuYWdlbWVudDwvc3Bhbj4sIHRoaXMgaXMgYWxzbyB0YWtlbiBhcyBtZWFuaW5nIDxzcGFuIGNsYXNzPVwiaXRcIj56b29zPC9zcGFuPiwgbm90aW9uYWxseSBiZWluZyBjb25jZXJuZWQgd2l0aCB0aGUgY29uc2VydmF0aW9uIG9mIDxzcGFuIGNsYXNzPVwiaXRcIj5mYXVuYTwvc3Bhbj4uIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEFtbmVzdHkgSW50JiM4MjE3O3MgY2FtcGFpZ25zLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NY0dvdmVybiB2IEFHPC9zcGFuPiAxOTgyLjxicj48c3BhbiBjbGFzcz1cIml0XCI+KEFzIGEgcmVzdWx0LCBBbW5lc3R5IGRpdmlkZWQgaW50byBhIGxpbWl0ZWQgY29tcGFueSBmb3IgY29uZHVjdGluZyBwb2xpdGljYWwgYWN0aXZpdGllcywgYW5kIEFtbmVzdHkgSW50ZXJuYXRpb25hbCBmb3IgaXRzIGxlc3MgY29udHJvdmVyc2lhbGx5IGNoYXJpdGFibGUgYWN0aXZpdGllcy4pPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFJhZGlvIHN0YXRpb24gcHJvbW90aW5nIGh1bWFuIHJpZ2h0cy4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UiAoZXggcC4gQnVsbCkgdiBSYWRpbyBBdXRob3JpdHk8L3NwYW4+IDE5OTguPC9zcGFuPjwvbGk+PC91bD48c3BhbiBjbGFzcz1cIm5sXCI+IENoYXJpdGllcyBtYXkgaG93ZXZlciBiZSBwZXJtaXR0ZWQgPHNwYW4gY2xhc3M9XCJpdFwiPmFuIGVsZW1lbnQ8L3NwYW4+IG9mIHBvbGl0aWNhbCBhY3Rpdml0eSAmbWRhc2g7IHByb3ZpZGVkIGl0IGlzIG1lcmVseSBpbmNpZGVudGFsIHRvIHRoZSBtYWluIHB1cnBvc2UuIEUuZy4sIHRoZSBOU1BDQyBtYXkgY2FtcGFpZ24gZm9yIGNoYW5nZXMgaW4gdGhlIGxhdyBmb3IgdGhlIGZ1cnRoZXJhbmNlIG9mIHByb3RlY3Rpb24gb2YgY2hpbGRyZW4sIHdpdGhvdXQgamVvcGFyZGlzaW5nIGl0cyBjaGFyaXRhYmxlIHN0YXR1cy48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Q2hhcml0eSBDb21taXNzaW9uIGd1aWRhbmNlIGJsdXJzIHRoZSBsaW5lLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Q291bGQgYSBjYW1wYWlnbiBhZ2FpbnN0IGZyYWNraW5nIGJlIGEgdmFsaWQgcHVycG9zZSwgdW5kZXIgdGhpcyBoZWFkaW5nPzwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj5TMygxKShqKTwvc3Bhbj4gJm1kYXNoOyBSZWxpZWYgb2YgdGhvc2UgaW4gTmVlZDwvc3Bhbj48YnI+Li4uIGJlY2F1c2Ugb2YgeW91dGgsIGFnZSwgaWxsLWhlYWx0aCwgZGlzYWJpbGl0eSwgZmluYW5jaWFsIGhhcmRzaGlwLCBvciA8c3BhbiBjbGFzcz1cIml0XCI+b3RoZXIgZGlzYWR2YW50YWdlPC9zcGFuPi4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CZWluZyBvbGQgd2FzIGVub3VnaDsgcG92ZXJ0eSB3YXMgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdDwvc3Bhbj4gbmVjZXNzYXJ5IGFzIHdlbGwuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFJvYmluc29uPC9zcGFuPiAxOTUxLjwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cIml0XCI+Ti5CLiAkIVJlY3JlYXRpb25hbCBDaGFyaXRpZXMgQWN0IDE5NTghJCwgbm93IGNvbWluZyB1bmRlciB0aGlzIGhlYWRpbmcuIFNwZWNpZmllZCBwcmVzdW1wdGlvbiBvZiBjaGFyaXRhYmxlIHB1cnBvc2UgaW4gPHNwYW4gY2xhc3M9XCJiZFwiPnJlY3JlYXRpb25hbCBvcmdhbmlzYXRpb25zPC9zcGFuPiwgYXMgbG9uZyBhcyBwcm92aWRlZCBmb3IgcHVycG9zZXMgb2YgPHNwYW4gY2xhc3M9XCJiZFwiPnNvY2lhbCB3ZWxmYXJlPC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+UzMoMSkoayk8L3NwYW4+ICZtZGFzaDsgQW5pbWFsIFdlbGZhcmU8L3NwYW4+PGJyPkZvciB0aGUgd2VsZmFyZSBvZiBhbmltYWxzIGF0IGxhcmdlLiBGb3Igc3BlY2lmaWMgYW5pbWFscywgc2VlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBFVHMgZm9yIFBldHM8L3NwYW4+LiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlByZS0yMDA2LCB0aGVyZSBoYWQgdG8gYmUgYSBiZW5lZml0IGZvciA8c3BhbiBjbGFzcz1cIml0XCI+aHVtYW5zPC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgR3JvdmUtR3JhZHk8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QnV0IGl0IGNvdWxkIGJlIGZvdW5kIGNyZWF0aXZlbHksIGUuZy4sIGJ5IGRlY2lkaW5nIHRoYXQgdGhlIHB1cnBvc2Ugb2YgZGV2ZWxvcGluZyBhIGh1bWFuZSBtZXRob2Qgb2Ygc2xhdWdodGVyIHdvdWxkIDxzcGFuIGNsYXNzPVwiaXRcIj5tYWtlIHRoZSBtZWF0IHRhc3RlIG5pY2VyPC9zcGFuPiBmb3IgdGhvc2Ugd2hvIGF0ZSBpdCBrbm93aW5nIGl0cyBwcm92ZW5hbmNlLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBXZWRnd29vZDwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPlMzKDEpKGwpPC9zcGFuPiAmbWRhc2g7IEVmZmljaWVuY3kgb2YgdGhlIEFybWVkIEZvcmNlcyBvciBFbWVyZ2VuY3kgU2VydmljZXM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+U2luY2UgYXQgbGVhc3QgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgR3JheTwvc3Bhbj4gaW4gMTkyNS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlByb3Zpc2lvbiBvZiBhIGxpYnJhcnkgZm9yIGFybXkgb2ZmaWNlcnMgaXMgdmFsaWQuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEdvb2Q8L3NwYW4+IDE5MDUuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICIqPHNwYW4gY2xhc3M9XCJ1ZFwiPlMzKDEpKG0pPC9zcGFuPiAmbWRhc2g7IEFueSBvdGhlciBQdXJwb3NlPGJyPkZ1dHVyZS1wcm9vZmluZyBmb3IgdGhlIGFjdC4gQXQgKGlpKSwgYW55dGhpbmcgdGhhdCA8c3BhbiBjbGFzcz1cIml0XCI+bWF5IHJlYXNvbmFibHkgYmUgcmVnYXJkZWQgYXMgaW4gdGhlIHNwaXJpdCBvZjwvc3Bhbj4gKGEpIHRvIChsKS4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5FLmcuLCBub3QgbXVjaCBjaGFuZ2Ugd291bGQgYmUgbmVlZGVkIHRvIG1ha2UgdmFsaWQgY2hhcml0YWJsZSBwdXJwb3NlcyBvZiBwcm9tb3RpbmcgJm1kYXNoOzwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gSW5kdXN0cnkgYW5kIGNvbW1lcmNlIGluIGdlbmVyYWw8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBBZ3JpY3VsdHVyZTwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFB1YmxpYyBvcmRlcjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEV0aGljczwvc3Bhbj48L2xpPjwvdWw+PC91bD4iCiAgICBdLAogICAgIk5BTUUiOiAiT3RoZXIgQ2hhcml0YWJsZSBQdXJwb3NlcyB1bmRlciBDaGFyaXRpZXMgQWN0IDIwMTEiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNoYXJpdHkgQ29tbWlzc2lvbmVyJ3MgR3VpZGFuY2UgLSBTZXB0ZW1iZXIgMjAxMyIsCiAgICAgICAgIk90aGVyIENoYXJpdGFibGUgUHVycG9zZXMgdW5kZXIgQ2hhcml0aWVzIEFjdCAyMDExIiwKICAgICAgICAiQ2hhcml0eSAtIERlZmluaXRpb25zIiwKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiUHJldmVudGlvbiBvciBSZWxpZWYgb2YgUG92ZXJ0eSIsCiAgICAgICAgIlBvbGl0aWNhbCBQdXJwb3NlIG9mIGEgQ2hhcml0eSIsCiAgICAgICAgIkFkdmFuY2VtZW50IG9mIEVkdWNhdGlvbiIsCiAgICAgICAgIkFkdmFuY2VtZW50IG9mIFJlbGlnaW9uIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIlJlbWVkaWVzIGZvciBVbmF1dGhvcmlzZWQgUHJvZml0cyIsCiAgICAgICAgIlRoaXJkIFBhcnR5IExpYWJpbGl0eSIsCiAgICAgICAgIkVxdWl0eSB3aWxsIG5vdCBhbGxvdyBhIFN0YXR1dGUgdG8gYmUgYW4gQ2xvYWsgZm9yIEZyYXVkIgogICAgXSwKICAgICJOVU1CRVIiOiAiNzkiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlNzLjYxLTY3PC9zcGFuPiBvZiB0aGUgMjAxMSBBY3QuIEJsYWNrc3RvbmUmIzgyMTc7cyA8c3BhbiBjbGFzcz1cIml0XCI+UHJvcGVydHkgTGF3IDIwMTUtMTY8L3NwYW4+LCA8c3BhbiBjbGFzcz1cImJkXCI+ZnJvbSBwLiAzODg8L3NwYW4+IiwKICAgICAgICAiV2hlbiBhIHZhbGlkbHktY2hhcml0YWJsZSB0cnVzdCBjb21wbHlpbmcgd2l0aCBhbGwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+dGhyZWUgY29uZGl0aW9uczwvc3Bhbj4gZmFpbHMsIGl0cyBwcm9wZXJ0eSBtYXkgYmUgJiM4MjE2O2FwcGxpZWQgY3ktcHJcdTAwZThzLiYjODIxNzsgUmF0aGVyIHRoYW4gcmVzdWx0IGJhY2sgdG8gaXRzIHNldHRsb3JzIGFuZCB0ZXN0YXRvcnMsIHRoZWlyIHdpc2hlcyB3aWxsIGJlIHJlc3BlY3RlZCAmIzgyMTY7YXVzPHNwYW4gY2xhc3M9XCJiZFwiPnNpIHByXHUwMGU4czwvc3Bhbj4gcXVlIHBvc3NpYmxlJiM4MjE3Oy4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+UzYxPC9zcGFuPiBnaXZlcyB0cnVzdGVlcyB0aGUgZHV0eSB0byBhcHBseSB0cnVzdCBwcm9wZXJ0eSBjeS1wclx1MDBlOHMgd2hlbiBpdCA8c3BhbiBjbGFzcz1cIml0XCI+Y291bGQ8L3NwYW4+IG9yIDxzcGFuIGNsYXNzPVwiaXRcIj5tdXN0PC9zcGFuPiBiZSBhcHBsaWVkIGN5LXByXHUwMGU4cy4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkZhaWx1cmUgb2YgR2lmdDwvc3Bhbj48L3NwYW4+PGJyPlRoaXMgY2FuIGJlIDxzcGFuIGNsYXNzPVwiYmRcIj5pbml0aWFsIGZhaWx1cmU8L3NwYW4+IHdoZXJlIHRoZSBjaGFyaXR5IGNsb3NlcyA8c3BhbiBjbGFzcz1cIml0XCI+YmVmb3JlPC9zcGFuPiB0aGUgcHJvcGVydHkgdmVzdHMsIG9yIDxzcGFuIGNsYXNzPVwiYmRcIj5zdWJzZXF1ZW50IGZhaWx1cmU8L3NwYW4+IHdoZXJlIGl0IGRvZXMgc28gPHNwYW4gY2xhc3M9XCJpdFwiPmFmdGVyd2FyZHM8L3NwYW4+LiBJbiB0aGUgc2Vjb25kIGNhc2UsIGN5LXByXHUwMGU4cyBpcyBhcHBsaWVkIGF1dG9tYXRpY2FsbHkuIEluIHRoZSBmaXJzdCwgaXQgYXBwbGllcyBvbmx5IGlmIGEgPHNwYW4gY2xhc3M9XCJiZFwiPnBhcmFtb3VudCBjaGFyaXRhYmxlIGludGVudGlvbjwvc3Bhbj4gYmUgc2hvd24gb2YgdGhlIHRlc3RhdG9yL3NldHRsb3IuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkluaXRpYWwgRmFpbHVyZTwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPlQgbWFrZXMgYSB3aWxsIG9uIDFzdCBGZWIgJiM4MjE2OzE3IGxlYXZpbmcgXHUwMGEzMTBLIHRvIGNoYXJpdHkgQy4uLiB3aGljaCBjbG9zZXMgb24gdGhlIDI4dGggRmViLiBUIHRoZW4gZGllcyBvbiB0aGUgMXN0IE1hcmNoLCB0dXJuaW5nIGhpcyB3aWxsIGludG8gYSBwdWJsaWMgZG9jdW1lbnQuPC9zcGFuPiIsCiAgICAgICAgIklmIGEgPHNwYW4gY2xhc3M9XCJiZFwiPnBhcmFtb3VudCBjaGFyaXRhYmxlIGludGVudGlvbjwvc3Bhbj4gY2FuIGJlIHNob3duLCBjeS1wclx1MDBlOHMgd2lsbCBhcHBseS48YnI+SXQgd2lsbCBhcHBseSB3aGVuOiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlB1cnBvc2UgbWF0dGVyZWQgbW9yZSB0aGFuIGluc3RpdHV0aW9uLCBlc3BlY2lhbGx5IGlmIHRoZSBpbnN0aXR1dGlvbiBkaWRuJiM4MjE3O3QgZXZlbiBleGlzdC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgSGFyd29vZDwvc3Bhbj4gMTkzNi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkEgY29uZGl0aW9uIGF0dGFjaGVkIHRvIGEgZ2lmdCB3b3VsZCByZW5kZXIgaXQgaW52YWxpZC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgTHlzYWdodDwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5XaGVyZSBpdHMgY29udGV4dCBtYW5pZmVzdHMgYSBnZW5lcmFsIGNoYXJpdGFibGUgaW50ZW50aW9uICZtZGFzaDsgZS5nLiwgaWYgaXQmIzgyMTc7cyBvbmUgY2hhcml0YWJsZSBnaWZ0IGFtb25nc3QgbWFueS4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgU2F0dGVydGh3YWl0ZSYjODIxNztzIFdUPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5TdWJzZXF1ZW50IEZhaWx1cmU8L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiaXRcIj5UIGRpZXMsIHRoZW4gQyBmb2xkcywgc28gVCYjODIxNztzIGdpZnQgdmVzdGVkIHN1Y2Nlc3NmdWxseSBpbiBDLjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBTbGV2aW48L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgS2luZzwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIKICAgIF0sCiAgICAiTkFNRSI6ICJUaGUgQ3ktcHJcdTAwZThzIERvY3RyaW5lIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgQnJpdGlzaCBTY2hvb2wgb2YgRWd5cHRpYW4gQXJjaGVvbG9neSIsCiAgICAgICAgIlJlIER1cHJlZSdzIERlZWQgVHJ1c3QiLAogICAgICAgICJUaG9tcHNvbiB2IFRob21wc29uIiwKICAgICAgICAiUiAoZXggcC4gSG9ka2luKSB2IFJlZ2lzdHJhciIsCiAgICAgICAgIlJlIE5vdHRhZ2UiLAogICAgICAgICJSZSBNZWxvZHkiLAogICAgICAgICJSZSBSZXNjaCBXVCIsCiAgICAgICAgIklSQyB2IEJhZGRlbGV5IiwKICAgICAgICAiUmUgR3JheSIsCiAgICAgICAgIlJlIFBpbmlvbiIsCiAgICAgICAgIlJlIEdyb3ZlLUdyYWR5IiwKICAgICAgICAiQ291bmNpbCBvZiBMYXcgUmVwb3J0aW5nIHYgQUciCiAgICBdLAogICAgIk5VTUJFUiI6ICI4MCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjE5NzIiLAogICAgIk5BTUUiOiAiQmFsZHJ5IHYgRmVpbnR1Y2siLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkJhbGRyeSB2IEZlaW50dWNrIFsxOTcyXSAxIFdMUiA1NTIiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgY2hhcml0YWJsZSB0cnVzdCBmb3IgZWR1Y2F0aW9uLCBwdXJwb3J0aW5nIHRvIGhhdmUgYW1lbmRlZCBpdHMgYWltcyB0byBhbGxvdyBmb3IgdGhlbSB0byBiZSBuYWtlZGx5IHBvbGl0aWNhbCwgaGFzIGRvbmUgc28gdWx0cmEgdmlyZXMuIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJUb255IEJhbGRyeSAoaGVhZCBvZiBjaGFtYmVycyBhdCAxIEVzc2V4IENvdXJ0KSBzdWVkIHRoZSBzdHVkZW50cyYjODIxNzsgdW5pb24gb2YgaGlzIHVuaXZlcnNpdHksIHRoYXQgb2YgU3Vzc2V4LiBUaGUgc3R1ZGVudHMmIzgyMTc7IHVuaW9uIHdhcyBhbiBjaGFyaXRhYmxlIHRydXN0IGZvciBlZHVjYXRpb24sIGJ1dCBoYWQgcHVycG9ydGVkIHRvIGFtZW5kIGl0cyBjb25zdGl0dXRpb24gdG8gbWFrZSBpdHMgYWltcyB0aGUgcHJvbW90aW9uIG9mIHN1YmplY3RzIG9mIGludGVyZXN0IHRvIGl0cyBtZW1iZXJzLiBSZXNvbHV0aW9ucyB3ZXJlIHBhc3NlZCB2b3RpbmcgbW9uZXkgdG8gc29tZXRoaW5nIGNhbGxlZCAmIzgyMjA7V2FyIG9uIFdhbnQsJiM4MjIxOyBhbmQgdG8gYSBjYW1wYWlnbiBhZ2FpbnN0IHRoZSBlbmRpbmcgb2YgZnJlZSBtaWxrIGluIHNjaG9vbHMuIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgUHVycG9zZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkFJVEMncyBBcHBsaWNhdGlvbiBmb3IgUmVnaXN0cmF0aW9uIG9mIENoYXJpdHkiLAogICAgICAgICJSZSBHd3lvbiIsCiAgICAgICAgIlJlIENsYXJrIiwKICAgICAgICAiTmF0aW9uYWwgQW50aS1WaXZpc2VjdGlvbiBTb2NpZXR5IHYgSVJDIiwKICAgICAgICAiUmUgTWVsb2R5IiwKICAgICAgICAiTWNHb3Zlcm4gdiBBRyIsCiAgICAgICAgIlJlIE1hcnJpZXR0ZSIsCiAgICAgICAgIkFHIHYgUG93ZXIiLAogICAgICAgICJCb25hciBMYXcgTWVtb3JpYWwgVHJ1c3QgdiBJUkMiLAogICAgICAgICJSb3lhbCBDaG9pciBTb2NpZXR5IHYgSVJDIiwKICAgICAgICAiQ2h1cmNoIG9mIE5ldyBGYWl0aCB2IENvbW1pc3Npb25lcnMgZm9yIFBheXJvbGwgVGF4IiwKICAgICAgICAiUmUgR3JheSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjgxIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRPRE8iCiAgICBdLAogICAgIk5BTUUiOiAiSW5kZXBlbmRlbnQgU2Nob29scyBDb3VuY2lsIHYgQ2hhcml0eSBDb21taXNzaW9uIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJQdXJwb3NlcyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IFB1cnBvc2VzIC8gQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IFBvdmVydHkiLAogICAgIllFQVIiOiAiMTkyMyIsCiAgICAiTlVNQkVSIjogIjgyIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJBSVRDJ3MgQXBwbGljYXRpb24gZm9yIFJlZ2lzdHJhdGlvbiBvZiBDaGFyaXR5IiwKICAgICAgICAiSVJDIHYgQmFkZGVsZXkiLAogICAgICAgICJBRyB2IFBvd2VyIiwKICAgICAgICAiSm9zZXBoIFJvd250cmVlIE1lbW9yaWFsIFRydXN0IHYgQUciLAogICAgICAgICJUaG9tcHNvbiB2IFRob21wc29uIiwKICAgICAgICAiUmUgWW91bmciLAogICAgICAgICJSZSBDb3VsdGh1cnN0J3MgV2lsbCBUcnVzdCIsCiAgICAgICAgIk1hcnkgQ2xhcmsgSG9tZXMgVHJ1c3RlZXMgdiBBbmRlcnNvbiIsCiAgICAgICAgIlJlIE5peWF6aSdzIFdUIiwKICAgICAgICAiUmUgU2FuZGVycyBXVCIsCiAgICAgICAgIlJlIEx1Y2FzIiwKICAgICAgICAiUiAoZXggcC4gQnVsbCkgdiBSYWRpbyBBdXRob3JpdHkiCiAgICBdLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiUG92ZXJ0eSBpcyA8c3BhbiBjbGFzcz1cImJkXCI+cmVsYXRpdmU8L3NwYW4+IHRvIGFuIGluZGl2aWR1YWwmIzgyMTc7cyBjaXJjdW1zdGFuY2VzLiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiUmUgQ2xhcmtlIFsxOTIzXSAyIENoIDQwNyIsCiAgICAiTkFNRSI6ICJSZSBDbGFyayIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiUHVycG9zZXMiLAogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiUG92ZXJ0eSIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBQb3ZlcnR5IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlJlIENvdWx0aHVyc3QgV2lsbCBUcnVzdCBbMTk1MV0gQ2ggNjYiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIEx1Y2FzIiwKICAgICAgICAiUmUgTml5YXppJ3MgV1QiLAogICAgICAgICJBRyB2IFBvd2VyIiwKICAgICAgICAiTWFyeSBDbGFyayBIb21lcyBUcnVzdGVlcyB2IEFuZGVyc29uIiwKICAgICAgICAiSVJDIHYgQmFkZGVsZXkiLAogICAgICAgICJUaG9tcHNvbiB2IFRob21wc29uIiwKICAgICAgICAiUmUgQ2xhcmsiLAogICAgICAgICJKb3NlcGggUm93bnRyZWUgTWVtb3JpYWwgVHJ1c3QgdiBBRyIsCiAgICAgICAgIlJlIFNhbmRlcnMgV1QiLAogICAgICAgICJSZSBZb3VuZyIsCiAgICAgICAgIkFJVEMncyBBcHBsaWNhdGlvbiBmb3IgUmVnaXN0cmF0aW9uIG9mIENoYXJpdHkiLAogICAgICAgICJSZSBOb3R0YWdlIgogICAgXSwKICAgICJOVU1CRVIiOiAiODMiLAogICAgIllFQVIiOiAiMTk1MSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiRGVzdGl0dXRpb24gaXMgbm90IG5lY2Vzc2FyeSB0byBiZSBjb25zaWRlcmVkIGluIHBvdmVydHk7IG1lcmVseSA8c3BhbiBjbGFzcz1cIml0XCI+JiM4MjE2O3RvIGdvIHNob3J0IGluIG9yZGluYXJ5IGNpcmN1bXN0YW5jZXMmIzgyMTc7PC9zcGFuPi4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJQb3ZlcnR5IgogICAgXSwKICAgICJOQU1FIjogIlJlIENvdWx0aHVyc3QncyBXaWxsIFRydXN0Igp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IFBvdmVydHkiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiTWFyeSBDbGFyayBIb21lcyBUcnVzdGVlcyB2IEFuZGVyc29uIFsxOTA0XSAyIEtCIDY0NSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgQ2xhcmsiLAogICAgICAgICJSZSBMdWNhcyIsCiAgICAgICAgIkFHIHYgUG93ZXIiLAogICAgICAgICJSZSBOaXlhemkncyBXVCIsCiAgICAgICAgIlJlIFlvdW5nIiwKICAgICAgICAiUmUgU2FuZGVycyBXVCIsCiAgICAgICAgIlRob21wc29uIHYgVGhvbXBzb24iLAogICAgICAgICJBSVRDJ3MgQXBwbGljYXRpb24gZm9yIFJlZ2lzdHJhdGlvbiBvZiBDaGFyaXR5IiwKICAgICAgICAiSVJDIHYgQmFkZGVsZXkiLAogICAgICAgICJSZSBDb3VsdGh1cnN0J3MgV2lsbCBUcnVzdCIsCiAgICAgICAgIkpvc2VwaCBSb3dudHJlZSBNZW1vcmlhbCBUcnVzdCB2IEFHIiwKICAgICAgICAiQmFsZHJ5IHYgRmVpbnR1Y2siCiAgICBdLAogICAgIk5VTUJFUiI6ICI4NCIsCiAgICAiWUVBUiI6ICIxOTA0IiwKICAgICJIRUxEIjogWwogICAgICAgICJQZW9wbGUgd2lsbCBiZSBjb25zaWRlcmVkIHBvb3IgaWYgdGhlaXIgY2lyY3Vtc3RhbmNlcyBhcmUgPHNwYW4gY2xhc3M9XCJpdFwiPiYjODIxNjtnZW51aW5lbHkgc3RyYWl0ZW5lZCYjODIxNzs8L3NwYW4+IGFuZCB0aGV5IGFyZSB1bmFibGUgdG8gbWFpbnRhaW4gYSAmIzgyMTY7PHNwYW4gY2xhc3M9XCJpdFwiPm1vZGVzdCBzdGFuZGFyZCBvZiBsaXZpbmc8L3NwYW4+JiM4MjE2OyBmb3IgdGhlbXNlbHZlcyBhbmQgYW55IGRlcGVuZGVudHMuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiUG92ZXJ0eSIKICAgIF0sCiAgICAiTkFNRSI6ICJNYXJ5IENsYXJrIEhvbWVzIFRydXN0ZWVzIHYgQW5kZXJzb24iCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgUG92ZXJ0eSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSZSBTYW5kZXJzJiM4MjE3OyBXaWxsIFRydXN0IFsxOTU0XSBDaCAyNjUiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkpvc2VwaCBSb3dudHJlZSBNZW1vcmlhbCBUcnVzdCB2IEFHIiwKICAgICAgICAiUmUgWW91bmciLAogICAgICAgICJBSVRDJ3MgQXBwbGljYXRpb24gZm9yIFJlZ2lzdHJhdGlvbiBvZiBDaGFyaXR5IiwKICAgICAgICAiTWFyeSBDbGFyayBIb21lcyBUcnVzdGVlcyB2IEFuZGVyc29uIiwKICAgICAgICAiSVJDIHYgQmFkZGVsZXkiLAogICAgICAgICJBRyB2IFBvd2VyIiwKICAgICAgICAiUmUgQ2xhcmsiLAogICAgICAgICJSZSBOaXlhemkncyBXVCIsCiAgICAgICAgIlRob21wc29uIHYgVGhvbXBzb24iLAogICAgICAgICJSZSBDb3VsdGh1cnN0J3MgV2lsbCBUcnVzdCIsCiAgICAgICAgIlJlIEx1Y2FzIiwKICAgICAgICAiVGhvbWFzIHYgSG93ZWxsIgogICAgXSwKICAgICJOVU1CRVIiOiAiODUiLAogICAgIllFQVIiOiAiMTk1NCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIHdvcmtpbmcgY2xhc3NlcyBhcmUgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdDwvc3Bhbj4gaW5oZXJlbnRseSBwb29yLiIsCiAgICAgICAgIkNmLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBOaXlhemkmIzgyMTc7cyBXVDwvc3Bhbj4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJQb3ZlcnR5IgogICAgXSwKICAgICJOQU1FIjogIlJlIFNhbmRlcnMgV1QiCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgUG92ZXJ0eSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSZSBOaXlhemkmIzgyMTc7cyBXaWxsIFRydXN0IFsxOTc4XSAxIFdMUiA5MTAiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkFHIHYgUG93ZXIiLAogICAgICAgICJSZSBDbGFyayIsCiAgICAgICAgIlJlIEx1Y2FzIiwKICAgICAgICAiQUlUQydzIEFwcGxpY2F0aW9uIGZvciBSZWdpc3RyYXRpb24gb2YgQ2hhcml0eSIsCiAgICAgICAgIklSQyB2IEJhZGRlbGV5IiwKICAgICAgICAiUmUgQ291bHRodXJzdCdzIFdpbGwgVHJ1c3QiLAogICAgICAgICJKb3NlcGggUm93bnRyZWUgTWVtb3JpYWwgVHJ1c3QgdiBBRyIsCiAgICAgICAgIlRob21wc29uIHYgVGhvbXBzb24iLAogICAgICAgICJSZSBZb3VuZyIsCiAgICAgICAgIk1hcnkgQ2xhcmsgSG9tZXMgVHJ1c3RlZXMgdiBBbmRlcnNvbiIsCiAgICAgICAgIlJlIFNhbmRlcnMgV1QiLAogICAgICAgICJSZSBNYXJyaWV0dGUiCiAgICBdLAogICAgIk5VTUJFUiI6ICI4NiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIGludGVuZGVkIHVzZXJzIG9mIGEgd29ya2luZyBtZW4mIzgyMTc7cyBob3N0ZWwgaW4gQ3lwcnVzIDxzcGFuIGNsYXNzPVwiaXRcIj5hcmU8L3NwYW4+IGluaGVyZW50bHkgcG9vciwgc28gYSBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHRoZSBjb25zdHJ1Y3Rpb24gb2Ygc3VjaCBhIHRoaW5nIHdhcyB1cGhlbGQuIiwKICAgICAgICAiQ2YuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFNhbmRlcnMgV1Q8L3NwYW4+LiIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTc4IiwKICAgICJOQU1FIjogIlJlIE5peWF6aSdzIFdUIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiUG92ZXJ0eSIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBQb3ZlcnR5IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlJlIFlvdW5nIFsxOTUxXSBDaCAzNDQiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkFJVEMncyBBcHBsaWNhdGlvbiBmb3IgUmVnaXN0cmF0aW9uIG9mIENoYXJpdHkiLAogICAgICAgICJNYXJ5IENsYXJrIEhvbWVzIFRydXN0ZWVzIHYgQW5kZXJzb24iLAogICAgICAgICJBRyB2IFBvd2VyIiwKICAgICAgICAiUmUgTml5YXppJ3MgV1QiLAogICAgICAgICJJUkMgdiBCYWRkZWxleSIsCiAgICAgICAgIlJlIEx1Y2FzIiwKICAgICAgICAiUmUgQ2xhcmsiLAogICAgICAgICJSZSBDb3VsdGh1cnN0J3MgV2lsbCBUcnVzdCIsCiAgICAgICAgIlJlIFNhbmRlcnMgV1QiLAogICAgICAgICJKb3NlcGggUm93bnRyZWUgTWVtb3JpYWwgVHJ1c3QgdiBBRyIsCiAgICAgICAgIlRob21wc29uIHYgVGhvbXBzb24iLAogICAgICAgICJDb3VuY2lsIG9mIExhdyBSZXBvcnRpbmcgdiBBRyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjg3IiwKICAgICJIRUxEIjogWwogICAgICAgICJBIGNoYXJpdGFibGUgdHJ1c3QgZm9yIDxzcGFuIGNsYXNzPVwiaXRcIj4mIzgyMTY7ZGlzdHJlc3NlZCBnZW50bGVmb2xrJiM4MjE3Ozwvc3Bhbj4gJm1kYXNoOyBtZW1iZXJzIG9mIGEgUGFsbCBNYWxsIGNsdWIgd2hvIGhhZCA8c3BhbiBjbGFzcz1cIml0XCI+JiM4MjE2O2ZhbGxlbiBvbiBldmlsIGRheXMmIzgyMTc7PC9zcGFuPiB3YXMgZm91bmQgdG8gYmUgdmFsaWQsIGFzIGEgY2hhcml0YWJsZSBwdXJwb3NlIGZvciB0aGUgcmVsaWVmIG9mIHBvdmVydHkuICghKSIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTUxIiwKICAgICJOQU1FIjogIlJlIFlvdW5nIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiUG92ZXJ0eSIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBQb3ZlcnR5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBDb3VsdGh1cnN0J3MgV2lsbCBUcnVzdCIsCiAgICAgICAgIlJlIFNhbmRlcnMgV1QiLAogICAgICAgICJSZSBOaXlhemkncyBXVCIsCiAgICAgICAgIk1hcnkgQ2xhcmsgSG9tZXMgVHJ1c3RlZXMgdiBBbmRlcnNvbiIsCiAgICAgICAgIkFJVEMncyBBcHBsaWNhdGlvbiBmb3IgUmVnaXN0cmF0aW9uIG9mIENoYXJpdHkiLAogICAgICAgICJSZSBDbGFyayIsCiAgICAgICAgIlJlIEx1Y2FzIiwKICAgICAgICAiSVJDIHYgQmFkZGVsZXkiLAogICAgICAgICJUaG9tcHNvbiB2IFRob21wc29uIiwKICAgICAgICAiUmUgWW91bmciLAogICAgICAgICJKb3NlcGggUm93bnRyZWUgTWVtb3JpYWwgVHJ1c3QgdiBBRyIsCiAgICAgICAgIlJlIER1cHJlZSdzIERlZWQgVHJ1c3QiCiAgICBdLAogICAgIk5VTUJFUiI6ICI4OCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cIml0XCI+JiM4MjE2O1dpZG93cyBhbmQgb3JwaGFucyBpbiBhIHBhcnRpY3VsYXIgYXJlYXMmIzgyMTc7PC9zcGFuPiBtYXkgYmUgcG9vciBmb3IgdGhlIHB1cnBvc2VzIG9mIHRoZSB2YWxpZGl0eSBvZiBhIGNoYXJpdGFibGUgdHJ1c3QuIgogICAgXSwKICAgICJOQU1FIjogIkFHIHYgUG93ZXIiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJQb3ZlcnR5IgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IFBvdmVydHkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkFHIHYgUG93ZXIiLAogICAgICAgICJNYXJ5IENsYXJrIEhvbWVzIFRydXN0ZWVzIHYgQW5kZXJzb24iLAogICAgICAgICJSZSBDb3VsdGh1cnN0J3MgV2lsbCBUcnVzdCIsCiAgICAgICAgIkFJVEMncyBBcHBsaWNhdGlvbiBmb3IgUmVnaXN0cmF0aW9uIG9mIENoYXJpdHkiLAogICAgICAgICJSZSBDbGFyayIsCiAgICAgICAgIlJlIFNhbmRlcnMgV1QiLAogICAgICAgICJUaG9tcHNvbiB2IFRob21wc29uIiwKICAgICAgICAiUmUgWW91bmciLAogICAgICAgICJKb3NlcGggUm93bnRyZWUgTWVtb3JpYWwgVHJ1c3QgdiBBRyIsCiAgICAgICAgIklSQyB2IEJhZGRlbGV5IiwKICAgICAgICAiUmUgTml5YXppJ3MgV1QiLAogICAgICAgICJSZSBTaGF3IgogICAgXSwKICAgICJOVU1CRVIiOiAiODkiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIGNoYXJpdGFibGUgcHVycG9zZSBvZiBnaXZpbmcgPHNwYW4gY2xhc3M9XCJpdFwiPiYjODIxNjs1IEd1aW5lYSBhIHdlZWsgdG8gdGhlIGVsZGVzdCByZXNwZWN0YWJsZSBpbmhhYml0YW50IGluIEd1bnZpbGxlJiM4MjE3Ozwvc3Bhbj4gd2FzIGZvdW5kIHRvIGJlIHZhbGlkLiIKICAgIF0sCiAgICAiTkFNRSI6ICJSZSBMdWNhcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIlBvdmVydHkiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgUG92ZXJ0eSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgQ2xhcmsiLAogICAgICAgICJBRyB2IFBvd2VyIiwKICAgICAgICAiUmUgWW91bmciLAogICAgICAgICJSZSBOaXlhemkncyBXVCIsCiAgICAgICAgIkpvc2VwaCBSb3dudHJlZSBNZW1vcmlhbCBUcnVzdCB2IEFHIiwKICAgICAgICAiQUlUQydzIEFwcGxpY2F0aW9uIGZvciBSZWdpc3RyYXRpb24gb2YgQ2hhcml0eSIsCiAgICAgICAgIlJlIFNhbmRlcnMgV1QiLAogICAgICAgICJJUkMgdiBCYWRkZWxleSIsCiAgICAgICAgIlJlIENvdWx0aHVyc3QncyBXaWxsIFRydXN0IiwKICAgICAgICAiTWFyeSBDbGFyayBIb21lcyBUcnVzdGVlcyB2IEFuZGVyc29uIiwKICAgICAgICAiUmUgTHVjYXMiLAogICAgICAgICJCYWxkcnkgdiBGZWludHVjayIKICAgIF0sCiAgICAiTlVNQkVSIjogIjkwIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgY2hhcml0YWJsZSB0cnVzdCB0byBnaXZlIDxzcGFuIGNsYXNzPVwiaXRcIj4mIzgyMTY7Z2lmdHMgdG8gdW5zdWNjZXNzZnVsIGxpdGVyYXJ5IG1lbiYjODIxNzs8L3NwYW4+IHdhcyB2YWxpZC4iCiAgICBdLAogICAgIk5BTUUiOiAiVGhvbXBzb24gdiBUaG9tcHNvbiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIlBvdmVydHkiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBQdXJwb3NlcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgQ2xhcmsiLAogICAgICAgICJJbmRlcGVuZGVudCBTY2hvb2xzIENvdW5jaWwgdiBDaGFyaXR5IENvbW1pc3Npb24iLAogICAgICAgICJBSVRDJ3MgQXBwbGljYXRpb24gZm9yIFJlZ2lzdHJhdGlvbiBvZiBDaGFyaXR5IiwKICAgICAgICAiTmF0aW9uYWwgQW50aS1WaXZpc2VjdGlvbiBTb2NpZXR5IHYgSVJDIiwKICAgICAgICAiUmUgTHlzYWdodCIsCiAgICAgICAgIlJlIE5peWF6aSdzIFdUIiwKICAgICAgICAiUm95YWwgQ2hvaXIgU29jaWV0eSB2IElSQyIsCiAgICAgICAgIlJlIENvdWx0aHVyc3QncyBXaWxsIFRydXN0IiwKICAgICAgICAiUmUgSG9wa2luJ3MgV1QiLAogICAgICAgICJSZSBCcml0aXNoIFNjaG9vbCBvZiBFZ3lwdGlhbiBBcmNoZW9sb2d5IiwKICAgICAgICAiUiAoZXggcC4gSG9ka2luKSB2IFJlZ2lzdHJhciIsCiAgICAgICAgIlJlIE1lbG9keSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjkxIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBwdXJwb3NlIG9mIDxzcGFuIGNsYXNzPVwiaXRcIj4mIzgyMTY7cHJvdmlkaW5nIGtuaWNrZXJzIHRvIGJveXMmIzgyMTc7PC9zcGFuPiB3YXMgbm90IHZhbGlkIGFzIGEgY2hhcml0YWJsZSBwdXJwb3NlIGZvciB0aGUgcmVsaWVmIG9mIHBvdmVydHkuIgogICAgXSwKICAgICJOQU1FIjogIlJlIEd3eW9uIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJQdXJwb3NlcyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBQb3ZlcnR5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBMdWNhcyIsCiAgICAgICAgIkFHIHYgUG93ZXIiLAogICAgICAgICJSZSBOaXlhemkncyBXVCIsCiAgICAgICAgIkFJVEMncyBBcHBsaWNhdGlvbiBmb3IgUmVnaXN0cmF0aW9uIG9mIENoYXJpdHkiLAogICAgICAgICJSZSBDb3VsdGh1cnN0J3MgV2lsbCBUcnVzdCIsCiAgICAgICAgIlJlIFlvdW5nIiwKICAgICAgICAiSm9zZXBoIFJvd250cmVlIE1lbW9yaWFsIFRydXN0IHYgQUciLAogICAgICAgICJUaG9tcHNvbiB2IFRob21wc29uIiwKICAgICAgICAiTWFyeSBDbGFyayBIb21lcyBUcnVzdGVlcyB2IEFuZGVyc29uIiwKICAgICAgICAiUmUgQ2xhcmsiLAogICAgICAgICJSZSBTYW5kZXJzIFdUIiwKICAgICAgICAiSHViYmFyZCB2IFZvc3BlciIKICAgIF0sCiAgICAiTlVNQkVSIjogIjkyIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTk1NSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHBvdmVydHkgbXVzdCBhaW0gdG8gPHNwYW4gY2xhc3M9XCJpdFwiPnJlbGlldmU8L3NwYW4+IHRoZSBwb3ZlcnR5LiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIlBvdmVydHkiCiAgICBdLAogICAgIk5BTUUiOiAiSVJDIHYgQmFkZGVsZXkiCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgUG92ZXJ0eSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQUcgdiBQb3dlciIsCiAgICAgICAgIklSQyB2IEJhZGRlbGV5IiwKICAgICAgICAiQUlUQydzIEFwcGxpY2F0aW9uIGZvciBSZWdpc3RyYXRpb24gb2YgQ2hhcml0eSIsCiAgICAgICAgIlJlIENvdWx0aHVyc3QncyBXaWxsIFRydXN0IiwKICAgICAgICAiUmUgWW91bmciLAogICAgICAgICJSZSBMdWNhcyIsCiAgICAgICAgIlJlIENsYXJrIiwKICAgICAgICAiVGhvbXBzb24gdiBUaG9tcHNvbiIsCiAgICAgICAgIk1hcnkgQ2xhcmsgSG9tZXMgVHJ1c3RlZXMgdiBBbmRlcnNvbiIsCiAgICAgICAgIlJlIFNhbmRlcnMgV1QiLAogICAgICAgICJSZSBOaXlhemkncyBXVCIsCiAgICAgICAgIlJlIFJvYmluc29uIgogICAgXSwKICAgICJOVU1CRVIiOiAiOTMiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHBvdmVydHkgbXVzdCBub3QgbWVyZWx5IGVudGFpbCA8c3BhbiBjbGFzcz1cIml0XCI+YW11c2luZzwvc3Bhbj4gdGhlIHBvb3IsIGJ1dCA8c3BhbiBjbGFzcz1cIml0XCI+cmVsaWV2aW5nPC9zcGFuPiB0aGVpciBwb3ZlcnR5LiIKICAgIF0sCiAgICAiTkFNRSI6ICJKb3NlcGggUm93bnRyZWUgTWVtb3JpYWwgVHJ1c3QgdiBBRyIsCiAgICAiQ09NTUVOVCI6ICJUaGlzIHNlZW1zIGEgbGl0dGxlIHVuZmFpci4gV2hhdCBkbyB0aGUgcG9vciBuZWVkIG1vcmUgdGhhbiBoYXZpbmcgdGhlaXIgbWluZHMgdGFrZW4gb2ZmIHRoZWlyIG1pc2VyeT8gQXBhcnQgZnJvbSBjbG90aGVzLCBzaG9lcywgc2hlbHRlciBhbmQgZm9vZD8gVGhleSBuZWVkIDxzcGFuIGNsYXNzPVwiaXRcIj5jaGVlcmluZyB1cDwvc3Bhbj4uIiwKICAgICJDSVRBVElPTiI6ICJKb3NlcGggUm93bnRyZWUgTWVtb3JpYWwgVHJ1c3QgSG91c2luZyBBc3NvY2lhdGlvbiBMdGQgdiBBRyBbMTk4M10gMiBXTFIgMjg0IiwKICAgICJZRUFSIjogIjE5ODMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJQb3ZlcnR5IgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgUHVycG9zZXMgLyBDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgUG92ZXJ0eSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgQ2xhcmsiLAogICAgICAgICJSZSBTYW5kZXJzIFdUIiwKICAgICAgICAiUmUgTHVjYXMiLAogICAgICAgICJKb3NlcGggUm93bnRyZWUgTWVtb3JpYWwgVHJ1c3QgdiBBRyIsCiAgICAgICAgIklSQyB2IEJhZGRlbGV5IiwKICAgICAgICAiUmUgWW91bmciLAogICAgICAgICJSZSBDb3VsdGh1cnN0J3MgV2lsbCBUcnVzdCIsCiAgICAgICAgIlJlIE5peWF6aSdzIFdUIiwKICAgICAgICAiQUcgdiBQb3dlciIsCiAgICAgICAgIk1hcnkgQ2xhcmsgSG9tZXMgVHJ1c3RlZXMgdiBBbmRlcnNvbiIsCiAgICAgICAgIlRob21wc29uIHYgVGhvbXBzb24iLAogICAgICAgICJSZSBHd3lvbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjk0IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMjAwNiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiRGlzY3Vzc2luZyB3aGF0IDxzcGFuIGNsYXNzPVwiaXRcIj5wcmV2ZW50aW9uPC9zcGFuPiBvZiBwb3ZlcnR5IG1pZ2h0IG1lYW4sIGEgdmFsaWQgY2hhcml0YWJsZSBwdXJwb3NlIHdhcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiB0aGUgbWl0aWdhdGlvbiBvZiBmaW5hbmNpYWwgbG9zc2VzIHJlc3VsdGluZyBmcm9tIHVud2lzZSBpbnZlc3RtZW50cy4gTmV2ZXJ0aGVsZXNzLCBuYXJyb3cgZ3JvdW5kcyB3ZXJlIGZvdW5kIHRvIGFsbG93IHRoZSBhcHBsaWNhdGlvbi4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIlB1cnBvc2VzIiwKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIlBvdmVydHkiCiAgICBdLAogICAgIk5BTUUiOiAiQUlUQydzIEFwcGxpY2F0aW9uIGZvciBSZWdpc3RyYXRpb24gb2YgQ2hhcml0eSIKfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBFZHVjYXRpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIFBpbmlvbiIsCiAgICAgICAgIkNvdW5jaWwgb2YgTGF3IFJlcG9ydGluZyB2IEFHIiwKICAgICAgICAiUmUgTWFycmlldHRlIiwKICAgICAgICAiTWNHcmF0aCB2IENvaGVuIiwKICAgICAgICAiUmUgTG9wZXMiLAogICAgICAgICJSZSBIdW1tZWx0ZW5iZXJnIiwKICAgICAgICAiUm95YWwgQ2hvaXIgU29jaWV0eSB2IElSQyIsCiAgICAgICAgIlJlIFNoYXciLAogICAgICAgICJTb3V0aHdvb2QgdiBBRyIsCiAgICAgICAgIlJlIE1lbG9keSIsCiAgICAgICAgIlJlIEhvcGtpbidzIFdUIiwKICAgICAgICAiUmUgQnJpdGlzaCBTY2hvb2wgb2YgRWd5cHRpYW4gQXJjaGVvbG9neSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjk1IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTk0NSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBjaGVzcyB0b3VybmFtZW50IGZvciBib3lzIGluIFBvcnRzbW91dGggd2FzIGEgPHNwYW4gY2xhc3M9XCJpdFwiPnZhbGlkPC9zcGFuPiBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIGFkdmFuY2VtZW50IG9mIGVkdWNhdGlvbiAmbWRhc2g7IGJ1dCBzdWNoIGEgcHVycG9zZSB3YXMgZnVydGhlciBoZWxkIHRvIG1hcmsgb3V0IHRoZSBsaW1pdCBvZiB3aGF0IHdvdWxkIGJlIGFjY2VwdGVkLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIkVkdWNhdGlvbiIKICAgIF0sCiAgICAiTkFNRSI6ICJSZSBEdXByZWUncyBEZWVkIFRydXN0Igp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IEVkdWNhdGlvbiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJNY0dyYXRoIHYgQ29oZW4gWzE5NzhdIDEgTlNXTFIgNjIxIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBIb3BraW4ncyBXVCIsCiAgICAgICAgIlJlIEh1bW1lbHRlbmJlcmciLAogICAgICAgICJSZSBQaW5pb24iLAogICAgICAgICJSZSBNYXJyaWV0dGUiLAogICAgICAgICJTb3V0aHdvb2QgdiBBRyIsCiAgICAgICAgIlJveWFsIENob2lyIFNvY2lldHkgdiBJUkMiLAogICAgICAgICJSZSBTaGF3IiwKICAgICAgICAiQ291bmNpbCBvZiBMYXcgUmVwb3J0aW5nIHYgQUciLAogICAgICAgICJSZSBCcml0aXNoIFNjaG9vbCBvZiBFZ3lwdGlhbiBBcmNoZW9sb2d5IiwKICAgICAgICAiUmUgTWVsb2R5IiwKICAgICAgICAiUmUgTG9wZXMiLAogICAgICAgICJSZSBEdXByZWUncyBEZWVkIFRydXN0IgogICAgXSwKICAgICJOVU1CRVIiOiAiOTYiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkluIEF1c3RyYWxpYSwgdGhlIHByb3Zpc2lvbiBvZiBhIHJvc2UgZ2FyZGVuIGF0IGEgdW5pdmVyc2l0eSA8c3BhbiBjbGFzcz1cIml0XCI+d2FzPC9zcGFuPiBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZSBmb3IgdGhlIGFkdmFuY2VtZW50IG9mIGVkdWNhdGlvbi4iCiAgICBdLAogICAgIllFQVIiOiAiMTk3OCIsCiAgICAiTkFNRSI6ICJNY0dyYXRoIHYgQ29oZW4iLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJFZHVjYXRpb24iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgRWR1Y2F0aW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBIdW1tZWx0ZW5iZXJnIiwKICAgICAgICAiUmUgTWFycmlldHRlIiwKICAgICAgICAiUmUgU2hhdyIsCiAgICAgICAgIk1jR3JhdGggdiBDb2hlbiIsCiAgICAgICAgIlJlIEJyaXRpc2ggU2Nob29sIG9mIEVneXB0aWFuIEFyY2hlb2xvZ3kiLAogICAgICAgICJSZSBQaW5pb24iLAogICAgICAgICJSZSBIb3BraW4ncyBXVCIsCiAgICAgICAgIlNvdXRod29vZCB2IEFHIiwKICAgICAgICAiUm95YWwgQ2hvaXIgU29jaWV0eSB2IElSQyIsCiAgICAgICAgIlJlIER1cHJlZSdzIERlZWQgVHJ1c3QiLAogICAgICAgICJSZSBMb3BlcyIsCiAgICAgICAgIkNvdW5jaWwgb2YgTGF3IFJlcG9ydGluZyB2IEFHIgogICAgXSwKICAgICJOVU1CRVIiOiAiOTciLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIHByb3Zpc2lvbiBvZiA8c3BhbiBjbGFzcz1cIml0XCI+JiM4MjE2O2FuIGFubnVhbCB0cmVhdCBvciBmaWVsZCBkYXkgZm9yIHNjaG9vbCBjaGlsZHJlbiYjODIxNzs8L3NwYW4+IHdhcyBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZSBmb3IgZWR1Y2F0aW9uLiIKICAgIF0sCiAgICAiTkFNRSI6ICJSZSBNZWxvZHkiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJFZHVjYXRpb24iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgRWR1Y2F0aW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNY0dyYXRoIHYgQ29oZW4iLAogICAgICAgICJSZSBNYXJyaWV0dGUiLAogICAgICAgICJSZSBEdXByZWUncyBEZWVkIFRydXN0IiwKICAgICAgICAiUmUgTWVsb2R5IiwKICAgICAgICAiU291dGh3b29kIHYgQUciLAogICAgICAgICJSZSBTaGF3IiwKICAgICAgICAiUmUgSG9wa2luJ3MgV1QiLAogICAgICAgICJSZSBIdW1tZWx0ZW5iZXJnIiwKICAgICAgICAiUm95YWwgQ2hvaXIgU29jaWV0eSB2IElSQyIsCiAgICAgICAgIkNvdW5jaWwgb2YgTGF3IFJlcG9ydGluZyB2IEFHIiwKICAgICAgICAiUmUgUGluaW9uIiwKICAgICAgICAiUmUgQnJpdGlzaCBTY2hvb2wgb2YgRWd5cHRpYW4gQXJjaGVvbG9neSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjk4IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTkzMSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIHByb3Zpc2lvbiBvZiA8c3BhbiBjbGFzcz1cIml0XCI+ZWxlcGhhbnQgcmlkZXMgdG8gc2Nob29sY2hpbGRyZW48L3NwYW4+IHdhcyBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZS4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJFZHVjYXRpb24iCiAgICBdLAogICAgIk5BTUUiOiAiUmUgTG9wZXMiCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgRWR1Y2F0aW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBTaGF3IiwKICAgICAgICAiUmUgQnJpdGlzaCBTY2hvb2wgb2YgRWd5cHRpYW4gQXJjaGVvbG9neSIsCiAgICAgICAgIkNvdW5jaWwgb2YgTGF3IFJlcG9ydGluZyB2IEFHIiwKICAgICAgICAiUmUgSG9wa2luJ3MgV1QiLAogICAgICAgICJNY0dyYXRoIHYgQ29oZW4iLAogICAgICAgICJSZSBEdXByZWUncyBEZWVkIFRydXN0IiwKICAgICAgICAiUmUgTG9wZXMiLAogICAgICAgICJSZSBIdW1tZWx0ZW5iZXJnIiwKICAgICAgICAiUmUgUGluaW9uIiwKICAgICAgICAiUmUgTWVsb2R5IiwKICAgICAgICAiUmUgTWFycmlldHRlIiwKICAgICAgICAiU291dGh3b29kIHYgQUciCiAgICBdLAogICAgIk5VTUJFUiI6ICI5OSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjE5NDMiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBjaGFyaXRhYmxlIHB1cnBvc2Ugb2YgYWR2YW5jZW1lbnQgb2YgZWR1Y2F0aW9uIGlzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGxpbWl0ZWQgdG8gYm9vay1sZWFybmluZyBpbiBjbGFzc3Jvb21zICZtZGFzaDsgaXQgYWxzbyBpbmNsdWRlcyBlZHVjYXRpb24gb2YgPHNwYW4gY2xhc3M9XCJpdFwiPmFlc3RoZXRpYyB0YXN0ZTwvc3Bhbj4gYW5kIHNlbnNpYmlsaXR5LiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIkVkdWNhdGlvbiIKICAgIF0sCiAgICAiTkFNRSI6ICJSb3lhbCBDaG9pciBTb2NpZXR5IHYgSVJDIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IEVkdWNhdGlvbiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgSG9wa2luJ3MgV1QiLAogICAgICAgICJSZSBEdXByZWUncyBEZWVkIFRydXN0IiwKICAgICAgICAiUmUgTG9wZXMiLAogICAgICAgICJSZSBQaW5pb24iLAogICAgICAgICJSZSBNZWxvZHkiLAogICAgICAgICJSZSBTaGF3IiwKICAgICAgICAiUm95YWwgQ2hvaXIgU29jaWV0eSB2IElSQyIsCiAgICAgICAgIk1jR3JhdGggdiBDb2hlbiIsCiAgICAgICAgIlNvdXRod29vZCB2IEFHIiwKICAgICAgICAiUmUgQnJpdGlzaCBTY2hvb2wgb2YgRWd5cHRpYW4gQXJjaGVvbG9neSIsCiAgICAgICAgIlJlIEh1bW1lbHRlbmJlcmciLAogICAgICAgICJSZSBNYXJyaWV0dGUiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMDAiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIxOTczIiwKICAgICJIRUxEIjogWwogICAgICAgICJBZHZhbmNlbWVudCBvZiBlZHVjYXRpb24gZm9yIGEgY2hhcml0YWJsZSBwdXJwb3NlIGNhbiBpbmNsdWRlIDxzcGFuIGNsYXNzPVwiaXRcIj5hbnkgdXNlZnVsIGJyYW5jaCBvZiBrbm93bGVkZ2U8L3NwYW4+LiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIkVkdWNhdGlvbiIKICAgIF0sCiAgICAiTkFNRSI6ICJDb3VuY2lsIG9mIExhdyBSZXBvcnRpbmcgdiBBRyIKfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBFZHVjYXRpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJveWFsIENob2lyIFNvY2lldHkgdiBJUkMiLAogICAgICAgICJNY0dyYXRoIHYgQ29oZW4iLAogICAgICAgICJSZSBQaW5pb24iLAogICAgICAgICJSZSBEdXByZWUncyBEZWVkIFRydXN0IiwKICAgICAgICAiUmUgTWFycmlldHRlIiwKICAgICAgICAiUmUgU2hhdyIsCiAgICAgICAgIlJlIE1lbG9keSIsCiAgICAgICAgIlNvdXRod29vZCB2IEFHIiwKICAgICAgICAiQ291bmNpbCBvZiBMYXcgUmVwb3J0aW5nIHYgQUciLAogICAgICAgICJSZSBIb3BraW4ncyBXVCIsCiAgICAgICAgIlJlIEJyaXRpc2ggU2Nob29sIG9mIEVneXB0aWFuIEFyY2hlb2xvZ3kiLAogICAgICAgICJSZSBMb3BlcyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEwMSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjE5MjMiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBlc3RhYmxpc2htZW50IG9mIGEgc2Nob29sIHRvIHRyYWluIHNwaXJpdHVhbGlzdGljIG1lZGl1bXMgaXMgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdCB2YWxpZDwvc3Bhbj4gYXMgYSBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHRoZSBhZHZhbmNlbWVudCBvZiBlZHVjYXRpb24uIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiRWR1Y2F0aW9uIgogICAgXSwKICAgICJOQU1FIjogIlJlIEh1bW1lbHRlbmJlcmciCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgQ3VsdHVyZSAvIENoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBFZHVjYXRpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNvdW5jaWwgb2YgTGF3IFJlcG9ydGluZyB2IEFHIiwKICAgICAgICAiUmUgSG9wa2luJ3MgV1QiLAogICAgICAgICJSZSBCcml0aXNoIFNjaG9vbCBvZiBFZ3lwdGlhbiBBcmNoZW9sb2d5IiwKICAgICAgICAiUmUgRHVwcmVlJ3MgRGVlZCBUcnVzdCIsCiAgICAgICAgIlJlIEh1bW1lbHRlbmJlcmciLAogICAgICAgICJSZSBNZWxvZHkiLAogICAgICAgICJSZSBNYXJyaWV0dGUiLAogICAgICAgICJSb3lhbCBDaG9pciBTb2NpZXR5IHYgSVJDIiwKICAgICAgICAiUmUgTG9wZXMiLAogICAgICAgICJSZSBTaGF3IiwKICAgICAgICAiU291dGh3b29kIHYgQUciLAogICAgICAgICJNY0dyYXRoIHYgQ29oZW4iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMDIiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIxOTY1IiwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgZXN0YWJsaXNobWVudCBvZiBhIG11c2V1bSB0byBleGhpYml0IGEgY29sbGVjdGlvbiBvZiBhcnQgd2hpY2ggZXhwZXJ0IG9waW5pb24gZGVlbXMgdG8gYmUgPHNwYW4gY2xhc3M9XCJpdFwiPmEgd29ydGhsZXNzIHBpbGUgb2YganVuazwvc3Bhbj4sIGlzIG5vdCBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZSBmb3IgdGhlIGFkdmFuY2VtZW50IG9mIHRoZSBhcnRzIGFuZCBjdWx0dXJlLiBIZWxkIG9iaXRlciAmbWRhc2g7IHRoZSBlc3RhYmxpc2htZW50IG9mIDxzcGFuIGNsYXNzPVwiaXRcIj5hIHNjaG9vbCBmb3IgcGlja3BvY2tldHMgYW5kIHByb3N0aXR1dGVzPC9zcGFuPiB3b3VsZCBub3QgYmUgYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHRoZSBhZHZhbmNlbWVudCBvZiBlZHVjYXRpb24uIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiQ3VsdHVyZSIsCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJFZHVjYXRpb24iCiAgICBdLAogICAgIk5BTUUiOiAiUmUgUGluaW9uIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IEVkdWNhdGlvbiAmbWRhc2g7IFBvbGl0aWNhbCBQdXJwb3NlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBNYXJyaWV0dGUiLAogICAgICAgICJSZSBIdW1tZWx0ZW5iZXJnIiwKICAgICAgICAiUmUgTG9wZXMiLAogICAgICAgICJSZSBEdXByZWUncyBEZWVkIFRydXN0IiwKICAgICAgICAiUmUgU2hhdyIsCiAgICAgICAgIlJlIE1lbG9keSIsCiAgICAgICAgIkNvdW5jaWwgb2YgTGF3IFJlcG9ydGluZyB2IEFHIiwKICAgICAgICAiUmUgUGluaW9uIiwKICAgICAgICAiUm95YWwgQ2hvaXIgU29jaWV0eSB2IElSQyIsCiAgICAgICAgIk1jR3JhdGggdiBDb2hlbiIsCiAgICAgICAgIlJlIEhvcGtpbidzIFdUIiwKICAgICAgICAiUmUgQnJpdGlzaCBTY2hvb2wgb2YgRWd5cHRpYW4gQXJjaGVvbG9neSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEwMyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjIwMDAiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgcG9saXRpY2FsIGFpbSBtYXNxdWVyYWRpbmcgYXMgYW4gZWR1Y2F0aXZlIG9uZSBpcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90IHZhbGlkPC9zcGFuPiBhcyBhIGNoYXJpdGFibGUgcHVycG9zZS4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJFZHVjYXRpb24iLAogICAgICAgICJQb2xpdGljYWwgUHVycG9zZSIKICAgIF0sCiAgICAiTkFNRSI6ICJTb3V0aHdvb2QgdiBBRyIKfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBFZHVjYXRpb24iLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiUmUgU2hhdyBbMTk1N10gMSBXTFIgNzI5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBCcml0aXNoIFNjaG9vbCBvZiBFZ3lwdGlhbiBBcmNoZW9sb2d5IiwKICAgICAgICAiUmUgTWFycmlldHRlIiwKICAgICAgICAiUmUgRHVwcmVlJ3MgRGVlZCBUcnVzdCIsCiAgICAgICAgIk1jR3JhdGggdiBDb2hlbiIsCiAgICAgICAgIlJveWFsIENob2lyIFNvY2lldHkgdiBJUkMiLAogICAgICAgICJSZSBQaW5pb24iLAogICAgICAgICJDb3VuY2lsIG9mIExhdyBSZXBvcnRpbmcgdiBBRyIsCiAgICAgICAgIlJlIExvcGVzIiwKICAgICAgICAiUmUgSHVtbWVsdGVuYmVyZyIsCiAgICAgICAgIlJlIE1lbG9keSIsCiAgICAgICAgIlNvdXRod29vZCB2IEFHIiwKICAgICAgICAiUmUgSG9wa2luJ3MgV1QiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMDQiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlJlc2VhcmNoIGludG8gYSA0MC1sZXR0ZXIgYWxwaGFiZXQgaXMgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdCB2YWxpZDwvc3Bhbj4gYXMgYSBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIGVkdWNhdGlvbiAmbWRhc2g7IGZvciB3b250IG9mIHV0aWxpdHksIGFuZCBwZXJoYXBzIGFsc28sIGZvciBzdXJwbHVzIG9mIHBpc3MtdGFraW5nIGFuZCBmcml2b2xpdHkuIgogICAgXSwKICAgICJZRUFSIjogIjE5NTciLAogICAgIk5BTUUiOiAiUmUgU2hhdyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIkVkdWNhdGlvbiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBFZHVjYXRpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlNvdXRod29vZCB2IEFHIiwKICAgICAgICAiUmUgTWVsb2R5IiwKICAgICAgICAiUmUgTWFycmlldHRlIiwKICAgICAgICAiUmUgSHVtbWVsdGVuYmVyZyIsCiAgICAgICAgIlJlIFBpbmlvbiIsCiAgICAgICAgIk1jR3JhdGggdiBDb2hlbiIsCiAgICAgICAgIlJlIExvcGVzIiwKICAgICAgICAiUm95YWwgQ2hvaXIgU29jaWV0eSB2IElSQyIsCiAgICAgICAgIkNvdW5jaWwgb2YgTGF3IFJlcG9ydGluZyB2IEFHIiwKICAgICAgICAiUmUgU2hhdyIsCiAgICAgICAgIlJlIEJyaXRpc2ggU2Nob29sIG9mIEVneXB0aWFuIEFyY2hlb2xvZ3kiLAogICAgICAgICJSZSBEdXByZWUncyBEZWVkIFRydXN0IgogICAgXSwKICAgICJOVU1CRVIiOiAiMTA1IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTk2NSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiUmVzZWFyY2ggaW50byB3aGV0aGVyIHRoZSBTaGFrZXNwZWFyZSBwbGF5cyB3ZXJlIHdyaXR0ZW4gYnkgc29tZW9uZSBjYWxsZWQgRnJhbmNpcyBCYWNvbiBvciBzb21lb25lIGNhbGxlZCBXaWxsaWFtIFNoYWtlc3BlYXJlIDxzcGFuIGNsYXNzPVwiaXRcIj53YXMgdmFsaWQ8L3NwYW4+IGFzIGFuIGVkdWNhdGlvbmFsIGNoYXJpdGFibGUgcHVycG9zZSwgZGVzcGl0ZSBpdHMgcmVjb25kaXRlIGFuZCBzbGlnaHRseSBvYnNlc3NpdmUgY2hhcmFjdGVyLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIkVkdWNhdGlvbiIKICAgIF0sCiAgICAiTkFNRSI6ICJSZSBIb3BraW4ncyBXVCIKfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBFZHVjYXRpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIE1lbG9keSIsCiAgICAgICAgIlJlIExvcGVzIiwKICAgICAgICAiUmUgSG9wa2luJ3MgV1QiLAogICAgICAgICJDb3VuY2lsIG9mIExhdyBSZXBvcnRpbmcgdiBBRyIsCiAgICAgICAgIk1jR3JhdGggdiBDb2hlbiIsCiAgICAgICAgIlJlIEh1bW1lbHRlbmJlcmciLAogICAgICAgICJSZSBEdXByZWUncyBEZWVkIFRydXN0IiwKICAgICAgICAiUmUgUGluaW9uIiwKICAgICAgICAiUmUgTWFycmlldHRlIiwKICAgICAgICAiUm95YWwgQ2hvaXIgU29jaWV0eSB2IElSQyIsCiAgICAgICAgIlJlIFNoYXciLAogICAgICAgICJTb3V0aHdvb2QgdiBBRyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEwNiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjE5NTQiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlJlc2VhcmNoIGNhcnJpZWQgb3V0IGluIGZ1bGZpbG1lbnQgb2YgYSBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIGVkdWNhdGlvbiBtdXN0IGJlIGludGVuZGVkIHRvIGJlIGRpc3NlbWluYXRlZCwgcmF0aGVyIHRoYW4ga2VwdCBwcml2YXRlIG9yIHNpbXBseSBmb3IgdGhlIHByaXZhdGUgc2F0aXNmYWN0aW9uIG9mIHRoZSByZXNlYXJjaGVyLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIkVkdWNhdGlvbiIKICAgIF0sCiAgICAiTkFNRSI6ICJSZSBCcml0aXNoIFNjaG9vbCBvZiBFZ3lwdGlhbiBBcmNoZW9sb2d5Igp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IFJlbGlnaW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSIChleCBwLiBIb2RraW4pIHYgUmVnaXN0cmFyIiwKICAgICAgICAiSHViYmFyZCB2IFZvc3BlciIsCiAgICAgICAgIlVuaXRlZCBHcmFuZCBMb2RnZSBvZiBNYXNvbnMgdiBIb2xib3JuIEJDIiwKICAgICAgICAiR25vc3RpYyBDZW50cmUiLAogICAgICAgICJEcnVpZCBGb3VuZGF0aW9uIiwKICAgICAgICAiQ2h1cmNoIG9mIE5ldyBGYWl0aCB2IENvbW1pc3Npb25lcnMgZm9yIFBheXJvbGwgVGF4IiwKICAgICAgICAiUmUgUmVzY2ggV1QiLAogICAgICAgICJSZSBOaXlhemkncyBXVCIsCiAgICAgICAgIlJlIFdlZGd3b29kIiwKICAgICAgICAiVGhvbXBzb24gdiBUaG9tcHNvbiIsCiAgICAgICAgIlJlIEdvb2QiLAogICAgICAgICJJUkMgdiBNYWNtdWxsYW4iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMDciLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIxOTgwIiwKICAgICJIRUxEIjogWwogICAgICAgICJBIHJlbGlnaW9uIGlzIGJvdGggKGkpIGJlbGllZiBpbiA8c3BhbiBjbGFzcz1cIml0XCI+c29tZXRoaW5nIHN1cGVybmF0dXJhbDwvc3Bhbj4sIGFuZCAoaWkpIDxzcGFuIGNsYXNzPVwiaXRcIj5mYWl0aCBpbiBhbmQgd29yc2hpcCBvZjwvc3Bhbj4gdGhlIGFmb3Jlc2FpZC4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJSZWxpZ2lvbiIKICAgIF0sCiAgICAiTkFNRSI6ICJSZSBTb3V0aCBQbGFjZSBFdGhpY2FsIFNvY2lldHkiCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgUmVsaWdpb24iLAogICAgIkZMQUdTIjogWwogICAgICAgICJEZW5uaW5nIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTA4IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJVbml0ZWQgR3JhbmQgTG9kZ2Ugb2YgTWFzb25zIHYgSG9sYm9ybiBCQyIsCiAgICAgICAgIkdub3N0aWMgQ2VudHJlIiwKICAgICAgICAiUiAoZXggcC4gSG9ka2luKSB2IFJlZ2lzdHJhciIsCiAgICAgICAgIlJlIFNvdXRoIFBsYWNlIEV0aGljYWwgU29jaWV0eSIsCiAgICAgICAgIkRydWlkIEZvdW5kYXRpb24iLAogICAgICAgICJDaHVyY2ggb2YgTmV3IEZhaXRoIHYgQ29tbWlzc2lvbmVycyBmb3IgUGF5cm9sbCBUYXgiLAogICAgICAgICJSZSBHcmF5IiwKICAgICAgICAiVGhvbWFzIHYgSG93ZWxsIiwKICAgICAgICAiUmUgR29vZCIsCiAgICAgICAgIlJlIE1hcnJpZXR0ZSIsCiAgICAgICAgIlNvdXRod29vZCB2IEFHIiwKICAgICAgICAiUmUgWW91bmciCiAgICBdLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiU2NpZW50b2xvZ3kgaXMgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdDwvc3Bhbj4gYSB2YWxpZCByZWxpZ2lvbiBhcyBhIGNoYXJpdGFibGUgcHVycG9zZXMuIENmLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaHVyY2ggb2YgTmV3IEZhaXRoIHYgVGF4IENvbW1pc3Npb25lcnM8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ib2RraW48L3NwYW4+LiIKICAgIF0sCiAgICAiTkFNRSI6ICJIdWJiYXJkIHYgVm9zcGVyIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiUmVsaWdpb24iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgUmVsaWdpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkdub3N0aWMgQ2VudHJlIiwKICAgICAgICAiRHJ1aWQgRm91bmRhdGlvbiIsCiAgICAgICAgIlVuaXRlZCBHcmFuZCBMb2RnZSBvZiBNYXNvbnMgdiBIb2xib3JuIEJDIiwKICAgICAgICAiUiAoZXggcC4gSG9ka2luKSB2IFJlZ2lzdHJhciIsCiAgICAgICAgIlJlIFNvdXRoIFBsYWNlIEV0aGljYWwgU29jaWV0eSIsCiAgICAgICAgIkh1YmJhcmQgdiBWb3NwZXIiLAogICAgICAgICJBRyB2IFBvd2VyIiwKICAgICAgICAiUmUgTm90dGFnZSIsCiAgICAgICAgIkFJVEMncyBBcHBsaWNhdGlvbiBmb3IgUmVnaXN0cmF0aW9uIG9mIENoYXJpdHkiLAogICAgICAgICJSb3lhbCBDaG9pciBTb2NpZXR5IHYgSVJDIiwKICAgICAgICAiU291dGh3b29kIHYgQUciLAogICAgICAgICJCYWxkcnkgdiBGZWludHVjayIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEwOSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJJbiBBdXN0cmFsaWEsIHNjaWVudG9sb2d5IDxzcGFuIGNsYXNzPVwiaXRcIj5pcyB2YWxpZDwvc3Bhbj4gYXMgYSByZWxpZ2lvbiBmb3IgYSBjaGFyaXRhYmxlIHB1cnBvc2UuIENmLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IdWJiYXJkIHYgVm9zcGVyPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SG9ka2luPC9zcGFuPi4iCiAgICBdLAogICAgIkFLQSI6ICJDaHVyY2ggb2YgTmV3IEZhaXRoIHYgVGF4IENvbW1pc3Npb25lcnMiLAogICAgIk5BTUUiOiAiQ2h1cmNoIG9mIE5ldyBGYWl0aCB2IENvbW1pc3Npb25lcnMgZm9yIFBheXJvbGwgVGF4IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiUmVsaWdpb24iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgUmVsaWdpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkh1YmJhcmQgdiBWb3NwZXIiLAogICAgICAgICJEcnVpZCBGb3VuZGF0aW9uIiwKICAgICAgICAiVW5pdGVkIEdyYW5kIExvZGdlIG9mIE1hc29ucyB2IEhvbGJvcm4gQkMiLAogICAgICAgICJDaHVyY2ggb2YgTmV3IEZhaXRoIHYgQ29tbWlzc2lvbmVycyBmb3IgUGF5cm9sbCBUYXgiLAogICAgICAgICJSZSBTb3V0aCBQbGFjZSBFdGhpY2FsIFNvY2lldHkiLAogICAgICAgICJHbm9zdGljIENlbnRyZSIsCiAgICAgICAgIk1jR3JhdGggdiBDb2hlbiIsCiAgICAgICAgIkpvc2VwaCBSb3dudHJlZSBNZW1vcmlhbCBUcnVzdCB2IEFHIiwKICAgICAgICAiVGhvbXBzb24gdiBUaG9tcHNvbiIsCiAgICAgICAgIlJlIFlvdW5nIiwKICAgICAgICAiUmUgU2hhdyIsCiAgICAgICAgIlJlIENvdWx0aHVyc3QncyBXaWxsIFRydXN0IgogICAgXSwKICAgICJOVU1CRVIiOiAiMTEwIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkZvciBwdXJwb3NlcyBvZiBiZWluZyBhIHZhbGlkIHBsYWNlIHRvIGhvbGQgYSBtYXJyaWFnZSwgYSBzY2llbnRvbG9neSAmIzgyMjA7Y2hhcGVsJiM4MjIxOyBpcyBhIHBsYWNlIG9mIHdvcnNoaXAuIENmLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IdWJiYXJkIHYgVm9zcGVyPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2h1cmNoIG9mIE5ldyBGYWl0aCB2IFRheCBDb21taXNzaW9uZXJzPC9zcGFuPi4iCiAgICBdLAogICAgIkFLQSI6ICJIb2RraW4iLAogICAgIk5BTUUiOiAiUiAoZXggcC4gSG9ka2luKSB2IFJlZ2lzdHJhciIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIlJlbGlnaW9uIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IFJlbGlnaW9uICZtZGFzaDsgQWR2YW5jZW1lbnQiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIFNvdXRoIFBsYWNlIEV0aGljYWwgU29jaWV0eSIsCiAgICAgICAgIkNodXJjaCBvZiBOZXcgRmFpdGggdiBDb21taXNzaW9uZXJzIGZvciBQYXlyb2xsIFRheCIsCiAgICAgICAgIkRydWlkIEZvdW5kYXRpb24iLAogICAgICAgICJHbm9zdGljIENlbnRyZSIsCiAgICAgICAgIlIgKGV4IHAuIEhvZGtpbikgdiBSZWdpc3RyYXIiLAogICAgICAgICJIdWJiYXJkIHYgVm9zcGVyIiwKICAgICAgICAiSVJDIHYgQmFkZGVsZXkiLAogICAgICAgICJSZSBEdXByZWUncyBEZWVkIFRydXN0IiwKICAgICAgICAiSm9zZXBoIFJvd250cmVlIE1lbW9yaWFsIFRydXN0IHYgQUciLAogICAgICAgICJSZSBWZXJhbGwiLAogICAgICAgICJBSVRDJ3MgQXBwbGljYXRpb24gZm9yIFJlZ2lzdHJhdGlvbiBvZiBDaGFyaXR5IiwKICAgICAgICAiUmUgUm9iaW5zb24iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMTEiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgcmVsaWdpb24gaXMgPHNwYW4gY2xhc3M9XCJpdFwiPnByb21vdGluZyBpdCwgc3ByZWFkaW5nIGl0cyBtZXNzYWdlIHdpZGVyIGFtb25nIG1hbmtpbmQsIGFuZCB0YWtpbmcgcG9zaXRpdmUgc3RlcHMgdG8gc3VzdGFpbiBhbmQgaW5jcmVhc2U8L3NwYW4+LCB3aXRoIHBhc3RvcmFsIGFuZCBtaXNzaW9uYXJ5IGNoYXJhY3RlcmlzdGljcywgZXRjLiIKICAgIF0sCiAgICAiTkFNRSI6ICJVbml0ZWQgR3JhbmQgTG9kZ2Ugb2YgTWFzb25zIHYgSG9sYm9ybiBCQyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIlJlbGlnaW9uIiwKICAgICAgICAiQWR2YW5jZW1lbnQiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgUmVsaWdpb24iLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiR25vc3RpYyBDZW50cmUmIzgyMTc7cyBBcHBsaWNhdGlvbiBmb3IgQ2hhcml0YWJsZSBTdGF0dXMgWzIwMDldIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJIdWJiYXJkIHYgVm9zcGVyIiwKICAgICAgICAiQ2h1cmNoIG9mIE5ldyBGYWl0aCB2IENvbW1pc3Npb25lcnMgZm9yIFBheXJvbGwgVGF4IiwKICAgICAgICAiRHJ1aWQgRm91bmRhdGlvbiIsCiAgICAgICAgIlVuaXRlZCBHcmFuZCBMb2RnZSBvZiBNYXNvbnMgdiBIb2xib3JuIEJDIiwKICAgICAgICAiUmUgU291dGggUGxhY2UgRXRoaWNhbCBTb2NpZXR5IiwKICAgICAgICAiUiAoZXggcC4gSG9ka2luKSB2IFJlZ2lzdHJhciIsCiAgICAgICAgIlIgKGV4IHAuIEJ1bGwpIHYgUmFkaW8gQXV0aG9yaXR5IiwKICAgICAgICAiTWNHcmF0aCB2IENvaGVuIiwKICAgICAgICAiUmUgUm9iaW5zb24iLAogICAgICAgICJSZSBMb3BlcyIsCiAgICAgICAgIlJlIEdyYXkiLAogICAgICAgICJSZSBDbGFyayIKICAgIF0sCiAgICAiTlVNQkVSIjogIjExMiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiRGVueWluZyB0aGUgYXBwbGljYXRpb24sIHRoZSBDaGFyaXR5IENvbW1pc3Npb24gbGlzdGVkIHRoZXNlIGZvdXIgY29uZGl0aW9ucyBmb3IgYW4gZW50aXR5IHRvIGJlIGNvbnNpZGVyZWQgYSByZWxpZ2lvbiwgZm9yIHRoZSBwdXJwb3NlcyBvZiBjaGFyaXRhYmxlIHN0YXR1czogMS4gQmVsaWVmIGluIGEgZ29kL3N1cHJlbWUgYmVpbmcvZGl2aW5lL3BsdXJhbC90cmFuc2NlbmRlbnRhbCBiZWluZy9zcGlyaXR1YWwgcHJpbmNpcGxlOyAyLiBBIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGJlbGlldmVyIGFuZCBlbnRpdHkgKHdvcnNoaXApOyAzLiBBIGRlZ3JlZSBvZiBjb2dlbmN5LCBjb2hlc2lvbiwgc2VyaW91c25lc3Mgb3IgaW1wb3J0YW5jZTsgNC4gSWRlbnRpZmlhYmxlIHBvc2l0aXZlLCBiZW5lZmljaWFsLCBtb3JhbCBhbmQgZXRoaWNhbCBmcmFtZXdvcmsuIgogICAgXSwKICAgICJZRUFSIjogIjIwMDkiLAogICAgIk5BTUUiOiAiR25vc3RpYyBDZW50cmUiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJSZWxpZ2lvbiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBSZWxpZ2lvbiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJEcnVpZCBGb3VuZGF0aW9uJiM4MjE3O3MgQXBwbGljYXRpb24gZm9yIENoYXJpdGFibGUgU3RhdHVzIFsyMDA5XSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiSHViYmFyZCB2IFZvc3BlciIsCiAgICAgICAgIlVuaXRlZCBHcmFuZCBMb2RnZSBvZiBNYXNvbnMgdiBIb2xib3JuIEJDIiwKICAgICAgICAiQ2h1cmNoIG9mIE5ldyBGYWl0aCB2IENvbW1pc3Npb25lcnMgZm9yIFBheXJvbGwgVGF4IiwKICAgICAgICAiUmUgU291dGggUGxhY2UgRXRoaWNhbCBTb2NpZXR5IiwKICAgICAgICAiUiAoZXggcC4gSG9ka2luKSB2IFJlZ2lzdHJhciIsCiAgICAgICAgIkdub3N0aWMgQ2VudHJlIiwKICAgICAgICAiUmUgQ2xhcmsiLAogICAgICAgICJCYWxkcnkgdiBGZWludHVjayIsCiAgICAgICAgIkFHIHYgUG93ZXIiLAogICAgICAgICJNY0dyYXRoIHYgQ29oZW4iLAogICAgICAgICJSZSBNZWxvZHkiLAogICAgICAgICJJUkMgdiBCYWRkZWxleSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjExMyIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiT24gdGhlIGJhc2lzIG9mIHRoZSBjcml0ZXJpYSBzcGVsdCBvdXQgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R25vc3RpYyBDZW50cmU8L3NwYW4+LCB0aGUgYXBwbGljYXRpb24gZm9yIGNoYXJpdGFibGUgc3RhdHVzIHdhcyBhY2NlcHRlZC4iCiAgICBdLAogICAgIllFQVIiOiAiMjAwOSIsCiAgICAiTkFNRSI6ICJEcnVpZCBGb3VuZGF0aW9uIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiUmVsaWdpb24iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBJbnZhbGlkIENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBQb2xpdGljcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQm9uYXIgTGF3IE1lbW9yaWFsIFRydXN0IHYgSVJDIiwKICAgICAgICAiTmF0aW9uYWwgQW50aS1WaXZpc2VjdGlvbiBTb2NpZXR5IHYgSVJDIiwKICAgICAgICAiUmUgQnVzaG5lbGwiLAogICAgICAgICJBSVRDJ3MgQXBwbGljYXRpb24gZm9yIFJlZ2lzdHJhdGlvbiBvZiBDaGFyaXR5IiwKICAgICAgICAiSVJDIHYgQmFkZGVsZXkiLAogICAgICAgICJDb3VuY2lsIG9mIExhdyBSZXBvcnRpbmcgdiBBRyIsCiAgICAgICAgIlJlIFBpbmlvbiIsCiAgICAgICAgIkh1YmJhcmQgdiBWb3NwZXIiLAogICAgICAgICJHbm9zdGljIENlbnRyZSIsCiAgICAgICAgIlJlIE5vdHRhZ2UiLAogICAgICAgICJSb3lhbCBDaG9pciBTb2NpZXR5IHYgSVJDIiwKICAgICAgICAiUmUgTml5YXppJ3MgV1QiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMTQiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIxOTgyIiwKICAgICJIRUxEIjogWwogICAgICAgICJBZHZvY2FjeSBmb3IgYSBwb2xpdGljYWwgY2hhbmdlIDxzcGFuIGNsYXNzPVwiaXRcIj5jYW5ub3QgYmUgYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2U8L3NwYW4+IGFzIHRoZSBjb3VydHMgd291bGQgaGF2ZSBubyB3YXkgb2YgYWRqdWRpY2F0aW5nIHdoZXRoZXIgYSBwYXJ0aWN1bGFyIGNoYW5nZSB3b3VsZCBiZSBmb3IgPHNwYW4gY2xhc3M9XCJpdFwiPnB1YmxpYyBiZW5lZml0PC9zcGFuPiwgd2l0aG91dCB0YWtpbmcgaW5oZXJlbnRseSBwb2xpdGljYWwgc3RhbmNlcy4iLAogICAgICAgICJTbGFkZSBKICZtZGFzaDsgdGhlIGNvdXJ0cyBsYWNrIHRoZSBtZWFucyB0byBqdWRnZSBpZiB0aGUgcHJvcG9zZWQgY2hhbmdlIGFuaW1hdGluZyBzdWNoIGEgcHVycG9zZSB3b3VsZCBpbmRlZWQgYmUgZm9yIHB1YmxpYyBiZW5lZml0LiBUbyBhdHRlbXB0IHRvIGRvIHNvIHdvdWxkIGJlIHRvIHRyZXNwYXNzIG9uIHRoZSByb2xlIG9mIGxlZ2lzbGF0dXJlLCBhbmQgaW4gc28gZG9pbmcsIHdvdWxkIGplb3BhcmRpc2UgdGhlIGp1ZGljaWFyeSYjODIxNztzIHJlcHV0YXRpb24gZm9yIHBvbGl0aWNhbCBpbXBhcnRpYWxpdHkuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJJbnZhbGlkIENoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJQb2xpdGljcyIKICAgIF0sCiAgICAiTkFNRSI6ICJNY0dvdmVybiB2IEFHIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgSW52YWxpZCBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgUG9saXRpY3MiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIEJ1c2huZWxsIiwKICAgICAgICAiQm9uYXIgTGF3IE1lbW9yaWFsIFRydXN0IHYgSVJDIiwKICAgICAgICAiTWNHb3Zlcm4gdiBBRyIsCiAgICAgICAgIk1hcnkgQ2xhcmsgSG9tZXMgVHJ1c3RlZXMgdiBBbmRlcnNvbiIsCiAgICAgICAgIlNvdXRod29vZCB2IEFHIiwKICAgICAgICAiUmUgTWFycmlldHRlIiwKICAgICAgICAiSm9zZXBoIFJvd250cmVlIE1lbW9yaWFsIFRydXN0IHYgQUciLAogICAgICAgICJNY0dyYXRoIHYgQ29oZW4iLAogICAgICAgICJSZSBTb3V0aCBQbGFjZSBFdGhpY2FsIFNvY2lldHkiLAogICAgICAgICJVbml0ZWQgR3JhbmQgTG9kZ2Ugb2YgTWFzb25zIHYgSG9sYm9ybiBCQyIsCiAgICAgICAgIlJlIFNhdHRlcnRod2FpdGUncyBXVCIsCiAgICAgICAgIkluZGVwZW5kZW50IFNjaG9vbHMgQ291bmNpbCB2IENoYXJpdHkgQ29tbWlzc2lvbiIKICAgIF0sCiAgICAiQ09NTUVOVCI6ICJTZWUgYWxzbyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBTYXR0ZXJ0aHdhaXRlJiM4MjE3O3MgV1Q8L3NwYW4+IiwKICAgICJOVU1CRVIiOiAiMTE1IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTk0OCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQWR2b2NhY3kgZm9yIHNvbWV0aGluZyByZXF1aXJpbmcgYSBjaGFuZ2UgaW4gdGhlIGxhdyBpcyBwb2xpdGljYWw7IHRoZXJlZm9yZSwgaXQgaXMgbm90IGEgdmFsaWQgY2hhcml0YWJsZSBwdXJwb3NlLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiSW52YWxpZCBDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiUG9saXRpY3MiCiAgICBdLAogICAgIk5BTUUiOiAiTmF0aW9uYWwgQW50aS1WaXZpc2VjdGlvbiBTb2NpZXR5IHYgSVJDIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgSW52YWxpZCBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgUG9saXRpY3MiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkJvbmFyIExhdyBNZW1vcmlhbCBUcnVzdCB2IElSQyIsCiAgICAgICAgIk5hdGlvbmFsIEFudGktVml2aXNlY3Rpb24gU29jaWV0eSB2IElSQyIsCiAgICAgICAgIk1jR292ZXJuIHYgQUciLAogICAgICAgICJIdWJiYXJkIHYgVm9zcGVyIiwKICAgICAgICAiUmUgV2VkZ3dvb2QiLAogICAgICAgICJJbmRlcGVuZGVudCBTY2hvb2xzIENvdW5jaWwgdiBDaGFyaXR5IENvbW1pc3Npb24iLAogICAgICAgICJSZSBMb3BlcyIsCiAgICAgICAgIlJlIFdyaWdodCIsCiAgICAgICAgIlJlIENvdWx0aHVyc3QncyBXaWxsIFRydXN0IiwKICAgICAgICAiUmUgWW91bmciLAogICAgICAgICJNY0dyYXRoIHYgQ29oZW4iLAogICAgICAgICJBSVRDJ3MgQXBwbGljYXRpb24gZm9yIFJlZ2lzdHJhdGlvbiBvZiBDaGFyaXR5IgogICAgXSwKICAgICJOVU1CRVIiOiAiMTE2IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTk3NSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIHB1cnBvc2Ugb2YgPHNwYW4gY2xhc3M9XCJpdFwiPiYjODIxNjtkaXNzZW1pbmF0aW5nIHNvY2lhbGlzdCBtZWRpY2luZSYjODIxNzs8L3NwYW4+IGlzIG5vdCBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZS4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkludmFsaWQgQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIlBvbGl0aWNzIgogICAgXSwKICAgICJOQU1FIjogIlJlIEJ1c2huZWxsIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgSW52YWxpZCBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgUG9saXRpY3MiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIEJ1c2huZWxsIiwKICAgICAgICAiTWNHb3Zlcm4gdiBBRyIsCiAgICAgICAgIk5hdGlvbmFsIEFudGktVml2aXNlY3Rpb24gU29jaWV0eSB2IElSQyIsCiAgICAgICAgIlVuaXRlZCBHcmFuZCBMb2RnZSBvZiBNYXNvbnMgdiBIb2xib3JuIEJDIiwKICAgICAgICAiUmUgQ291bHRodXJzdCdzIFdpbGwgVHJ1c3QiLAogICAgICAgICJSZSBHb29kIiwKICAgICAgICAiQUlUQydzIEFwcGxpY2F0aW9uIGZvciBSZWdpc3RyYXRpb24gb2YgQ2hhcml0eSIsCiAgICAgICAgIlJlIFNsZXZpbiIsCiAgICAgICAgIlJlIEZpbmdlcidzIFdUIiwKICAgICAgICAiUmUgRHVwcmVlJ3MgRGVlZCBUcnVzdCIsCiAgICAgICAgIlJlIENsYXJrIiwKICAgICAgICAiUm95YWwgQ2hvaXIgU29jaWV0eSB2IElSQyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjExNyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJBIGRvbmF0aW9uIHRvIGEgcG9saXRpY2FsIHBhcnR5IGlzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGEgdmFsaWQgY2hhcml0YWJsZSBwdXJwb3NlLiIKICAgIF0sCiAgICAiTkFNRSI6ICJCb25hciBMYXcgTWVtb3JpYWwgVHJ1c3QgdiBJUkMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkludmFsaWQgQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIlBvbGl0aWNzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IEhlYWx0aCBhbmQgU2F2aW5nIExpdmVzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlRob21hcyB2IEhvd2VsbCAoMTg3NCkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIFJlc2NoIFdUIiwKICAgICAgICAiUmUgVmVyYWxsIiwKICAgICAgICAiSm9zZXBoIFJvd250cmVlIE1lbW9yaWFsIFRydXN0IHYgQUciLAogICAgICAgICJJUkMgdiBCYWRkZWxleSIsCiAgICAgICAgIlVuaXRlZCBHcmFuZCBMb2RnZSBvZiBNYXNvbnMgdiBIb2xib3JuIEJDIiwKICAgICAgICAiVGhvbXBzb24gdiBUaG9tcHNvbiIsCiAgICAgICAgIlJlIFNhbmRlcnMgV1QiLAogICAgICAgICJDb3VuY2lsIG9mIExhdyBSZXBvcnRpbmcgdiBBRyIsCiAgICAgICAgIk1jR3JhdGggdiBDb2hlbiIsCiAgICAgICAgIk1hcnkgQ2xhcmsgSG9tZXMgVHJ1c3RlZXMgdiBBbmRlcnNvbiIsCiAgICAgICAgIlJlIEx1Y2FzIiwKICAgICAgICAiUmUgR29vZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjExOCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBnaWZ0IHRvIHRoZSBSTkxJIGlzIGEgdmFsaWQgY2hhcml0YWJsZSBwdXJwb3NlLCBhcyB3b3VsZCBiZSBnaWZ0cyB0byBvdGhlciByZXNjdWUgc2VydmljZXMgJm1kYXNoOyBhcyBsb25nIGFzIHRoZXkgZG9uJiM4MjE3O3QgY2hhcmdlLiIKICAgIF0sCiAgICAiWUVBUiI6ICIxODc0IiwKICAgICJOQU1FIjogIlRob21hcyB2IEhvd2VsbCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIkhlYWx0aCBhbmQgU2F2aW5nIExpdmVzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IEhlYWx0aCBhbmQgU2F2aW5nIExpdmVzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlJlIFJlc2NoIFdpbGwgVHJ1c3QgKDE5NjkpIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJUaG9tYXMgdiBIb3dlbGwiLAogICAgICAgICJSZSBWZXJhbGwiLAogICAgICAgICJSZSBOaXlhemkncyBXVCIsCiAgICAgICAgIlJlIE5vdHRhZ2UiLAogICAgICAgICJSZSBDb3VsdGh1cnN0J3MgV2lsbCBUcnVzdCIsCiAgICAgICAgIk1hcnkgQ2xhcmsgSG9tZXMgVHJ1c3RlZXMgdiBBbmRlcnNvbiIsCiAgICAgICAgIkdub3N0aWMgQ2VudHJlIiwKICAgICAgICAiUmUgQnJpdGlzaCBTY2hvb2wgb2YgRWd5cHRpYW4gQXJjaGVvbG9neSIsCiAgICAgICAgIlJlIEdyb3ZlLUdyYWR5IiwKICAgICAgICAiUmUgTWVsb2R5IiwKICAgICAgICAiSHViYmFyZCB2IFZvc3BlciIsCiAgICAgICAgIlNvdXRod29vZCB2IEFHIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTE5IiwKICAgICJIRUxEIjogWwogICAgICAgICJQcm92aXNpb24gb2YgbWVkaWNhbCBjYXJlIGZvciB3aGljaCBhIGZlZSBpcyBjaGFyZ2VkIDxzcGFuIGNsYXNzPVwiaXRcIj5pczwvc3Bhbj4gYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2UuIgogICAgXSwKICAgICJZRUFSIjogIjE5NjkiLAogICAgIk5BTUUiOiAiUmUgUmVzY2ggV1QiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJIZWFsdGggYW5kIFNhdmluZyBMaXZlcyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBIZWFsdGggYW5kIFNhdmluZyBMaXZlcyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSZSBWZXJhbGwgKDE5MTYpIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJUaG9tYXMgdiBIb3dlbGwiLAogICAgICAgICJSZSBSZXNjaCBXVCIsCiAgICAgICAgIlJlIENvdWx0aHVyc3QncyBXaWxsIFRydXN0IiwKICAgICAgICAiU291dGh3b29kIHYgQUciLAogICAgICAgICJSZSBOb3R0YWdlIiwKICAgICAgICAiQ291bmNpbCBvZiBMYXcgUmVwb3J0aW5nIHYgQUciLAogICAgICAgICJIdWJiYXJkIHYgVm9zcGVyIiwKICAgICAgICAiSVJDIHYgQmFkZGVsZXkiLAogICAgICAgICJSZSBCcml0aXNoIFNjaG9vbCBvZiBFZ3lwdGlhbiBBcmNoZW9sb2d5IiwKICAgICAgICAiUmUgU291dGggUGxhY2UgRXRoaWNhbCBTb2NpZXR5IiwKICAgICAgICAiQUcgdiBQb3dlciIsCiAgICAgICAgIlVuaXRlZCBHcmFuZCBMb2RnZSBvZiBNYXNvbnMgdiBIb2xib3JuIEJDIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTIwIiwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgY3VyYXRpb24gYW5kIG1haW50ZW5hbmNlIG9mIGhpc3RvcmljYWxseSB2YWx1YWJsZSBvciBzaWduaWZpY2FudCBvYmplY3RzIGlzIGEgPHNwYW4gY2xhc3M9XCJpdFwiPnZhbGlkPC9zcGFuPiBjaGFyaXRhYmxlIHB1cnBvc2UuIgogICAgXSwKICAgICJZRUFSIjogIjE5MTYiLAogICAgIk5BTUUiOiAiUmUgVmVyYWxsIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiSGVhbHRoIGFuZCBTYXZpbmcgTGl2ZXMiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgQW1hdGV1ciBTcG9ydCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSZSBOb3R0YWdlIFsxOTg1XSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiSVJDIHYgTWFjbXVsbGFuIiwKICAgICAgICAiUmUgTWFycmlldHRlIiwKICAgICAgICAiUmUgTG9wZXMiLAogICAgICAgICJCYWxkcnkgdiBGZWludHVjayIsCiAgICAgICAgIlJlIFdlZGd3b29kIiwKICAgICAgICAiUmUgTml5YXppJ3MgV1QiLAogICAgICAgICJBRyB2IFBvd2VyIiwKICAgICAgICAiUmUgSG9wa2luJ3MgV1QiLAogICAgICAgICJSZSBWZXJhbGwiLAogICAgICAgICJKb3NlcGggUm93bnRyZWUgTWVtb3JpYWwgVHJ1c3QgdiBBRyIsCiAgICAgICAgIkFJVEMncyBBcHBsaWNhdGlvbiBmb3IgUmVnaXN0cmF0aW9uIG9mIENoYXJpdHkiLAogICAgICAgICJSZSBDbGFyayIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEyMSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQW1hdGV1ciB5YWNodCByYWNpbmcgd2FzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGEgdmFsaWQgY2hhcml0YWJsZSBwdXJwb3NlIHVuZGVyIHRoZSBwcmUtMjAwNiBsYXcuIgogICAgXSwKICAgICJZRUFSIjogIjE5ODUiLAogICAgIk5BTUUiOiAiUmUgTm90dGFnZSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIkFtYXRldXIgU3BvcnQiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgRWR1Y2F0aW9uIC8gQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IEFtYXRldXIgU3BvcnQiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiUmUgTWFycmlldHRlIFsxOTE1XSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgSG9wa2luJ3MgV1QiLAogICAgICAgICJSZSBOb3R0YWdlIiwKICAgICAgICAiTWNHcmF0aCB2IENvaGVuIiwKICAgICAgICAiUm95YWwgQ2hvaXIgU29jaWV0eSB2IElSQyIsCiAgICAgICAgIlNvdXRod29vZCB2IEFHIiwKICAgICAgICAiUmUgQnJpdGlzaCBTY2hvb2wgb2YgRWd5cHRpYW4gQXJjaGVvbG9neSIsCiAgICAgICAgIkNvdW5jaWwgb2YgTGF3IFJlcG9ydGluZyB2IEFHIiwKICAgICAgICAiUmUgTWVsb2R5IiwKICAgICAgICAiUmUgU2hhdyIsCiAgICAgICAgIlJlIER1cHJlZSdzIERlZWQgVHJ1c3QiLAogICAgICAgICJSZSBIdW1tZWx0ZW5iZXJnIiwKICAgICAgICAiSVJDIHYgTWFjbXVsbGFuIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTIyIiwKICAgICJIRUxEIjogWwogICAgICAgICJTcG9ydCBpbiBzY2hvb2xzIGlzIGZvciA8c3BhbiBjbGFzcz1cIml0XCI+ZWR1Y2F0aW9uIG9mIHRoZSBib2R5PC9zcGFuPiAmbWRhc2g7IGFuZCB3YXMgdGhlcmVmb3JlIGEgdmFsaWQgY2hhcml0YWJsZSBwdXJwb3NlIHVuZGVyIHRoZSBwcmUtMjAwNiBsYXcuIgogICAgXSwKICAgICJZRUFSIjogIjE5MTUiLAogICAgIk5BTUUiOiAiUmUgTWFycmlldHRlIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiRWR1Y2F0aW9uIiwKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIkFtYXRldXIgU3BvcnQiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgQW1hdGV1ciBTcG9ydCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJJUkMgdiBNYWNtdWxsYW4gWzE5ODFdIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBOb3R0YWdlIiwKICAgICAgICAiUmUgTWFycmlldHRlIiwKICAgICAgICAiVW5pdGVkIEdyYW5kIExvZGdlIG9mIE1hc29ucyB2IEhvbGJvcm4gQkMiLAogICAgICAgICJJUkMgdiBCYWRkZWxleSIsCiAgICAgICAgIlJlIFlvdW5nIiwKICAgICAgICAiUmUgV2VkZ3dvb2QiLAogICAgICAgICJSZSBDbGFyayIsCiAgICAgICAgIkh1YmJhcmQgdiBWb3NwZXIiLAogICAgICAgICJSZSBSb2JpbnNvbiIsCiAgICAgICAgIlJlIFNvdXRoIFBsYWNlIEV0aGljYWwgU29jaWV0eSIsCiAgICAgICAgIlJlIEhvcGtpbidzIFdUIiwKICAgICAgICAiVGhvbXBzb24gdiBUaG9tcHNvbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEyMyIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiSG91c2Ugb2YgTG9yZHMgYXV0aG9yaXR5IGZvciBQRSBpbiBTY2hvb2wgYW5kIFVuaXZlcnNpdHkgPHNwYW4gY2xhc3M9XCJpdFwiPmJlaW5nIHZhbGlkPC9zcGFuPiBhcyBhIGNoYXJpdGFibGUgdHJ1c3QsIGJlY2F1c2UgaXQgZW50YWlscyB0aGUgPHNwYW4gY2xhc3M9XCJpdFwiPmhvbGlzdGljIGRldmVsb3BtZW50PC9zcGFuPiBvZiB0aGUgcGVyc29uLiIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTgxIiwKICAgICJOQU1FIjogIklSQyB2IE1hY211bGxhbiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIkFtYXRldXIgU3BvcnQiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDaGFyaXRhYmxlIFB1cnBvc2VzICZtZGFzaDsgSHVtYW4gUmlnaHRzIGV0YyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSIChleCBwLiBCdWxsKSB2IFJhZGlvIEF1dGhvcml0eSBbMTk5OF0iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIENsYXJrIiwKICAgICAgICAiQ291bmNpbCBvZiBMYXcgUmVwb3J0aW5nIHYgQUciLAogICAgICAgICJNY0dyYXRoIHYgQ29oZW4iLAogICAgICAgICJEcnVpZCBGb3VuZGF0aW9uIiwKICAgICAgICAiQ2h1cmNoIG9mIE5ldyBGYWl0aCB2IENvbW1pc3Npb25lcnMgZm9yIFBheXJvbGwgVGF4IiwKICAgICAgICAiUmUgQnJpdGlzaCBTY2hvb2wgb2YgRWd5cHRpYW4gQXJjaGVvbG9neSIsCiAgICAgICAgIkpvc2VwaCBSb3dudHJlZSBNZW1vcmlhbCBUcnVzdCB2IEFHIiwKICAgICAgICAiUmUgV2VkZ3dvb2QiLAogICAgICAgICJCYWxkcnkgdiBGZWludHVjayIsCiAgICAgICAgIlVuaXRlZCBHcmFuZCBMb2RnZSBvZiBNYXNvbnMgdiBIb2xib3JuIEJDIiwKICAgICAgICAiSVJDIHYgQmFkZGVsZXkiLAogICAgICAgICJTb3V0aHdvb2QgdiBBRyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEyNCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSByYWRpbyBzdGF0aW9uIGZvciB0aGUgcHJvbW90aW9uIG9mIGh1bWFuIHJpZ2h0cyB3YXMgZGVlbWVkIHRvIGJlIHByb21vdGluZyBhIHB1cnBvc2UgbmVjZXNzaXRhdGluZyBhIHBvbGl0aWNhbCBjaGFuZ2UsIGFuZCB0aHVzIHdhcyBub3QgYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHRoZSBwcm9tb3Rpb24gb2YgaHVtYW4gcmlnaHRzLiIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTk4IiwKICAgICJOQU1FIjogIlIgKGV4IHAuIEJ1bGwpIHYgUmFkaW8gQXV0aG9yaXR5IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiSHVtYW4gUmlnaHRzIGV0YyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBSZWxpZWYgb2YgdGhvc2UgaW4gTmVlZCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSZSBSb2JpbnNvbiBbMTk1MV0iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIEh1bW1lbHRlbmJlcmciLAogICAgICAgICJSZSBHcm92ZS1HcmFkeSIsCiAgICAgICAgIkNodXJjaCBvZiBOZXcgRmFpdGggdiBDb21taXNzaW9uZXJzIGZvciBQYXlyb2xsIFRheCIsCiAgICAgICAgIlJlIENsYXJrIiwKICAgICAgICAiQUcgdiBQb3dlciIsCiAgICAgICAgIlJlIEhvcGtpbidzIFdUIiwKICAgICAgICAiQ291bmNpbCBvZiBMYXcgUmVwb3J0aW5nIHYgQUciLAogICAgICAgICJEcnVpZCBGb3VuZGF0aW9uIiwKICAgICAgICAiUm95YWwgQ2hvaXIgU29jaWV0eSB2IElSQyIsCiAgICAgICAgIkFJVEMncyBBcHBsaWNhdGlvbiBmb3IgUmVnaXN0cmF0aW9uIG9mIENoYXJpdHkiLAogICAgICAgICJSIChleCBwLiBIb2RraW4pIHYgUmVnaXN0cmFyIiwKICAgICAgICAiSHViYmFyZCB2IFZvc3BlciIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEyNSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSB0cnVzdCB0byBwdXQgdXAgYSBibG9jayBvZiBmbGF0cyBmb3IgdGhvc2UgPHNwYW4gY2xhc3M9XCJpdFwiPjY1IG9yIG9sZGVyPC9zcGFuPiBzdWNjZWVkZWQgYXMgYSBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHRoZSByZWxpZWYgb2YgdGhvc2UgaW4gbmVlZCBieSB2aXJ0dWUgb2YgYWdlLiBQb3ZlcnR5IHdhcyBub3QgbmVjZXNzYXJ5IGluIGFkZGl0aW9uIHRvIGFnZS4iCiAgICBdLAogICAgIllFQVIiOiAiMTk1MSIsCiAgICAiTkFNRSI6ICJSZSBSb2JpbnNvbiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIlJlbGllZiBvZiB0aG9zZSBpbiBOZWVkIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IEFuaW1hbCBXZWxmYXJlIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlJlIFdlZGd3b29kIFsxOTUxXSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgR3JvdmUtR3JhZHkiLAogICAgICAgICJBSVRDJ3MgQXBwbGljYXRpb24gZm9yIFJlZ2lzdHJhdGlvbiBvZiBDaGFyaXR5IiwKICAgICAgICAiUmUgRHVwcmVlJ3MgRGVlZCBUcnVzdCIsCiAgICAgICAgIlJlIFJlc2NoIFdUIiwKICAgICAgICAiUmUgSG9wa2luJ3MgV1QiLAogICAgICAgICJIdWJiYXJkIHYgVm9zcGVyIiwKICAgICAgICAiUmUgU291dGggUGxhY2UgRXRoaWNhbCBTb2NpZXR5IiwKICAgICAgICAiQ2h1cmNoIG9mIE5ldyBGYWl0aCB2IENvbW1pc3Npb25lcnMgZm9yIFBheXJvbGwgVGF4IiwKICAgICAgICAiVW5pdGVkIEdyYW5kIExvZGdlIG9mIE1hc29ucyB2IEhvbGJvcm4gQkMiLAogICAgICAgICJSZSBHcmF5IiwKICAgICAgICAiUmUgVmVyYWxsIiwKICAgICAgICAiTWFyeSBDbGFyayBIb21lcyBUcnVzdGVlcyB2IEFuZGVyc29uIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTI2IiwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgY2hhcml0YWJsZSBwdXJwb3NlIG9mIGZpbmRpbmcgYSBtb3JlIGh1bWFuZSBtYW5uZXIgb2Ygc2xhdWdodGVyaW5nIGFuaW1hbHMgZm9yIG1lYXQgd2FzIGhlbGQgdG8gYmUgPHNwYW4gY2xhc3M9XCJpdFwiPnZhbGlkPC9zcGFuPiwgZm9yIHRoZSBpbWFnaW5hdGl2ZSByZWFzb24gdGhhdCA8c3BhbiBjbGFzcz1cIml0XCI+aXQgd291bGQgdGFzdGUgYmV0dGVyPC9zcGFuPiB0byB0aG9zZSB3aG8gYXRlIGl0IGluIHRoZSBrbm93bGVkZ2Ugb2YgaXRzIHByb3ZlbmFuY2UuIgogICAgXSwKICAgICJZRUFSIjogIjE5NTEiLAogICAgIk5BTUUiOiAiUmUgV2VkZ3dvb2QiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJBbmltYWwgV2VsZmFyZSIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IENoYXJpdGFibGUgUHVycG9zZXMgJm1kYXNoOyBBbmltYWwgV2VsZmFyZSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSZSBHcm92ZS1HcmFkeSBbMTkyOV0iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIFdlZGd3b29kIiwKICAgICAgICAiUmUgTG9wZXMiLAogICAgICAgICJCYWxkcnkgdiBGZWludHVjayIsCiAgICAgICAgIkh1YmJhcmQgdiBWb3NwZXIiLAogICAgICAgICJNY0dyYXRoIHYgQ29oZW4iLAogICAgICAgICJSIChleCBwLiBCdWxsKSB2IFJhZGlvIEF1dGhvcml0eSIsCiAgICAgICAgIkRydWlkIEZvdW5kYXRpb24iLAogICAgICAgICJSIChleCBwLiBIb2RraW4pIHYgUmVnaXN0cmFyIiwKICAgICAgICAiUmUgVmVyYWxsIiwKICAgICAgICAiUmUgR3JheSIsCiAgICAgICAgIlJlIE1hcnJpZXR0ZSIsCiAgICAgICAgIlJlIFlvdW5nIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTI3IiwKICAgICJIRUxEIjogWwogICAgICAgICJQcmlvciB0byAyMDA2LCBhIGNoYXJpdGFibGUgcHVycG9zZSBmb3IgYW5pbWFsIHdlbGZhcmUgYWxzbyBoYWQgdG8gY29uZmVyIHNvbWUgYmVuZWZpdCBvbiA8c3BhbiBjbGFzcz1cIml0XCI+cGVvcGxlPC9zcGFuPi4gRm9yIHRoaXMgcmVhc29uLCB0aGUgcHJvdmlzaW9uIG9mIGFzIHJlZnVnZSBmb3IgPHNwYW4gY2xhc3M9XCJpdFwiPiYjODIxNjthbGwgYW5pbWFscywgdG8gbGl2ZSB0b2dldGhlciBpbiBoYXJtb255LCBmcmVlIGZyb20gaHVtYW4gbW9sZXN0YXRpb24mIzgyMTc7PC9zcGFuPiwgd2FzIG5vdCBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZS4iCiAgICBdLAogICAgIllFQVIiOiAiMTkyOSIsCiAgICAiTkFNRSI6ICJSZSBHcm92ZS1HcmFkeSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIkFuaW1hbCBXZWxmYXJlIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IEVmZmljaWVuY3kgb2YgQXJtZWQgRm9yY2VzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlJlIEdyYXkgWzE5MjVdIDEgQ2ggMzYyIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBHb29kIiwKICAgICAgICAiVGhvbWFzIHYgSG93ZWxsIiwKICAgICAgICAiUmUgVmVyYWxsIiwKICAgICAgICAiUmUgTm90dGFnZSIsCiAgICAgICAgIlJlIExvcGVzIiwKICAgICAgICAiQUcgdiBQb3dlciIsCiAgICAgICAgIlJveWFsIENob2lyIFNvY2lldHkgdiBJUkMiLAogICAgICAgICJHbm9zdGljIENlbnRyZSIsCiAgICAgICAgIlJlIEhvcGtpbidzIFdUIiwKICAgICAgICAiSVJDIHYgQmFkZGVsZXkiLAogICAgICAgICJSIChleCBwLiBCdWxsKSB2IFJhZGlvIEF1dGhvcml0eSIsCiAgICAgICAgIlJlIENsYXJrIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTI4IiwKICAgICJIRUxEIjogWwogICAgICAgICJQcm9tb3Rpb24gb2YgdGhlIGVmZmljaWVuY3kgb2YgdGhlIGFybWVkIGZvcmNlcyBvciBlbWVyZ2VuY3kgc2VydmljZXMgd2FzIGEgdmFsaWQgY2hhcml0YWJsZSBwdXJwb3NlIHVuZGVyIHRoZSBwcmUtMjAwNiBsYXcuIgogICAgXSwKICAgICJZRUFSIjogIjE5MjUiLAogICAgIk5BTUUiOiAiUmUgR3JheSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIkVmZmljaWVuY3kgb2YgQXJtZWQgRm9yY2VzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ2hhcml0YWJsZSBQdXJwb3NlcyAmbWRhc2g7IEVmZmljaWVuY3kgb2YgQXJtZWQgRm9yY2VzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlJlIEdvb2QgWzE5MjVdIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBHcmF5IiwKICAgICAgICAiUiAoZXggcC4gSG9ka2luKSB2IFJlZ2lzdHJhciIsCiAgICAgICAgIlJlIEx1Y2FzIiwKICAgICAgICAiSm9zZXBoIFJvd250cmVlIE1lbW9yaWFsIFRydXN0IHYgQUciLAogICAgICAgICJSZSBOb3R0YWdlIiwKICAgICAgICAiQ291bmNpbCBvZiBMYXcgUmVwb3J0aW5nIHYgQUciLAogICAgICAgICJTb3V0aHdvb2QgdiBBRyIsCiAgICAgICAgIlJlIFlvdW5nIiwKICAgICAgICAiUmUgUGluaW9uIiwKICAgICAgICAiVGhvbWFzIHYgSG93ZWxsIiwKICAgICAgICAiUmUgRHVwcmVlJ3MgRGVlZCBUcnVzdCIsCiAgICAgICAgIlJlIENsYXJrIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTI5IiwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgcHJvdmlzaW9uIG9mIGEgbGlicmFyeSBmb3IgYXJteSBvZmZpY2VycyB3YXMgYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHByb21vdGlvbiBvZiB0aGUgZWZmaWNpZW5jeSBvZiB0aGUgYXJtZWQgZm9yY2VzLiIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTI1IiwKICAgICJOQU1FIjogIlJlIEdvb2QiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkNoYXJpdGFibGUgUHVycG9zZXMiLAogICAgICAgICJFZmZpY2llbmN5IG9mIEFybWVkIEZvcmNlcyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IEN5LXByXHUwMGU4cyAmbWRhc2g7IEluaXRpYWwgRmFpbHVyZSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSZSBIYXJ3b29kIFsxOTM2XSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgU2F0dGVydGh3YWl0ZSdzIFdUIiwKICAgICAgICAiUmUgTHlzYWdodCIsCiAgICAgICAgIlJlIEZpbmdlcidzIFdUIiwKICAgICAgICAiUmUgS2luZyIsCiAgICAgICAgIlJlIFNsZXZpbiIsCiAgICAgICAgIlJlIFdyaWdodCIsCiAgICAgICAgIlJlIFNhbmRlcnMgV1QiLAogICAgICAgICJHbm9zdGljIENlbnRyZSIsCiAgICAgICAgIkFHIHYgUG93ZXIiLAogICAgICAgICJSZSBIb3BraW4ncyBXVCIsCiAgICAgICAgIlJlIExvcGVzIiwKICAgICAgICAiUmUgV2VkZ3dvb2QiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMzAiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIklmIHRoZSBjaGFyaXRhYmxlIHB1cnBvc2UgY2FuIGJlIHNob3duIHRvIGhhdmUgbWF0dGVyZWQgPHNwYW4gY2xhc3M9XCJpdFwiPm1vcmU8L3NwYW4+IHRvIHRoZSB0ZXN0YXRvciB0aGFuIHRoZSBwYXJ0aWN1bGFyIGNoYXJpdHksIHRoZW4gYSBnaWZ0IHRoYXQgd291bGQgdmVzdCA8c3BhbiBjbGFzcz1cIml0XCI+YWZ0ZXI8L3NwYW4+IHRoZSBjaGFyaXR5IGZvbGRzIHdpbGwgYmUgYXBwbGllZCBjeS1wclx1MDBlOHMuIE9yIGlmIHRoZSBnaWZ0IGZhaWxzIGJlY2F1c2UgdGhlIGNoYXJpdHkgZG9lc24mIzgyMTc7dCBleGlzdC4iCiAgICBdLAogICAgIllFQVIiOiAiMTkzNiIsCiAgICAiTkFNRSI6ICJSZSBIYXJ3b29kIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDeS1wclx1MDBlOHMiLAogICAgICAgICJJbml0aWFsIEZhaWx1cmUiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDeS1wclx1MDBlOHMgJm1kYXNoOyBJbml0aWFsIEZhaWx1cmUiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiUmUgTHlzYWdodCBbMTk2Nl0gQ2ggMTkxIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBGaW5nZXIncyBXVCIsCiAgICAgICAgIlJlIEhhcndvb2QiLAogICAgICAgICJSZSBTYXR0ZXJ0aHdhaXRlJ3MgV1QiLAogICAgICAgICJSZSBXcmlnaHQiLAogICAgICAgICJSZSBTbGV2aW4iLAogICAgICAgICJSZSBLaW5nIiwKICAgICAgICAiVGhvbXBzb24gdiBUaG9tcHNvbiIsCiAgICAgICAgIlJlIENvdWx0aHVyc3QncyBXaWxsIFRydXN0IiwKICAgICAgICAiQUlUQydzIEFwcGxpY2F0aW9uIGZvciBSZWdpc3RyYXRpb24gb2YgQ2hhcml0eSIsCiAgICAgICAgIkNodXJjaCBvZiBOZXcgRmFpdGggdiBDb21taXNzaW9uZXJzIGZvciBQYXlyb2xsIFRheCIsCiAgICAgICAgIlJlIER1cHJlZSdzIERlZWQgVHJ1c3QiLAogICAgICAgICJNY0dyYXRoIHYgQ29oZW4iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMzEiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBjeS1wclx1MDBlOHMgZG9jdHJpbmUgd2FzIGVtcGxveWVkIHRvIGRlbGV0ZSBhIGNvbmRpdGlvbiBhdHRhY2hlZCBieSB0aGUgdGVzdGF0b3Igb2YgYSBnaWZ0IGVzdGFibGlzaGluZyBhIHNjaG9sYXJzaGlwLCB0aGF0IGl0IHdhcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90IGZvciBSb21hbiBDYXRob2xpY3Mgb3IgSmV3czwvc3Bhbj4gKCEpLiIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTY2IiwKICAgICJOQU1FIjogIlJlIEx5c2FnaHQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNoYXJpdGllcyIsCiAgICAgICAgIkN5LXByXHUwMGU4cyIsCiAgICAgICAgIkluaXRpYWwgRmFpbHVyZSIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IEN5LXByXHUwMGU4cyAmbWRhc2g7IEluaXRpYWwgRmFpbHVyZSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmUgRmluZ2VyJ3MgV1QiLAogICAgICAgICJSZSBIYXJ3b29kIiwKICAgICAgICAiUmUgTHlzYWdodCIsCiAgICAgICAgIlJlIFNsZXZpbiIsCiAgICAgICAgIlJlIEtpbmciLAogICAgICAgICJSZSBXcmlnaHQiLAogICAgICAgICJSZSBMb3BlcyIsCiAgICAgICAgIk1jR3JhdGggdiBDb2hlbiIsCiAgICAgICAgIlJlIFdlZGd3b29kIiwKICAgICAgICAiUmUgRHVwcmVlJ3MgRGVlZCBUcnVzdCIsCiAgICAgICAgIklSQyB2IE1hY211bGxhbiIsCiAgICAgICAgIlJlIFZlcmFsbCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEzMiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjE5NjYiLAogICAgIk5BTUUiOiAiUmUgU2F0dGVydGh3YWl0ZSdzIFdUIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDeS1wclx1MDBlOHMiLAogICAgICAgICJJbml0aWFsIEZhaWx1cmUiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIlJlIFNhdHRlcnRod2FpdGUmIzgyMTc7cyBXVCAgKDE5NjYpIiwKICAgICJIRUxEIjogWwogICAgICAgICJDeS1wclx1MDBlOHMgd2lsbCBiZSBhcHBsaWVkIHRvIGEgdGVzdGFtZW50YXJ5IGNoYXJpdGFibGUgZ2lmdCB0aGF0IGZhaWxzIGluaXRpYWxseSwgd2hlbiBpdHMgY29udGV4dCBtYWtlcyBjbGVhciBhIGdlbmVyYWwgY2hhcml0YWJsZSBpbnRlbnRpb24uIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJUaGUgd2hvbGUgZXN0YXRlIHdhcyBsZWZ0IGluIGVxdWFsIHNoYXJlcyB0byBuaW5lIGluc3RpdHV0aW9ucyAmbWRhc2g7IG9uZSBvZiB3aGljaCB3YXMgdGhlIE5hdGlvbmFsIEFudGktVml2aXNlY3Rpb24gc29jaWV0eSwgYSBwb2xpdGljYWwgb3JnYW5pc2F0aW9uLiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyAmbWRhc2g7IEN5LXByXHUwMGU4cyAmbWRhc2g7IEluaXRpYWwgRmFpbHVyZSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSZSBGaW5nZXImIzgyMTc7cyBXVCBbMTk3Ml0gQ2ggMjg2IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBIYXJ3b29kIiwKICAgICAgICAiUmUgTHlzYWdodCIsCiAgICAgICAgIlJlIFNhdHRlcnRod2FpdGUncyBXVCIsCiAgICAgICAgIlJlIFNsZXZpbiIsCiAgICAgICAgIlJlIFdyaWdodCIsCiAgICAgICAgIlJlIEtpbmciLAogICAgICAgICJBSVRDJ3MgQXBwbGljYXRpb24gZm9yIFJlZ2lzdHJhdGlvbiBvZiBDaGFyaXR5IiwKICAgICAgICAiU291dGh3b29kIHYgQUciLAogICAgICAgICJNYXJ5IENsYXJrIEhvbWVzIFRydXN0ZWVzIHYgQW5kZXJzb24iLAogICAgICAgICJSZSBSZXNjaCBXVCIsCiAgICAgICAgIkFHIHYgUG93ZXIiLAogICAgICAgICJSZSBZb3VuZyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEzMyIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiV2hlcmUgdGhlcmUgaXMgYSBnZW5lcmFsIGNoYXJpdGFibGUgaW50ZW50aW9uLCBidXQgYSB0ZXN0YW1lbnRhcnkgZ2lmdCBoYXMgbmV2ZXJ0aGVsZXNzIGxlZnQgc3BlY2lmaWNhbGx5IHRvIGEgcGFydGljdWxhciBjaGFyaXR5IHdoaWNoIGlzIGRlZnVuY3QgYnkgdGhlIHRpbWUgdGhlIHRlc3RhdG9yIGRpZXMsIGl0IG1heSBzdGlsbCBiZSBhcHBsaWVkIGN5LXByXHUwMGU4cyAmbWRhc2g7IGVzcGVjaWFsbHkgaWYgbm8gbm8gaGVpcnMgdG8gdGhlIGVzdGF0ZSBjYW4gYmUgaWRlbnRpZmllZC4iCiAgICBdLAogICAgIllFQVIiOiAiMTk3MiIsCiAgICAiTkFNRSI6ICJSZSBGaW5nZXIncyBXVCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ3ktcHJcdTAwZThzIiwKICAgICAgICAiSW5pdGlhbCBGYWlsdXJlIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ3ktcHJcdTAwZThzICZtZGFzaDsgU3Vic2VxdWVudCBGYWlsdXJlIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlJlIFNsZXZpbiBbMTg5MV0gMiBDaCAyMzYiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIFdyaWdodCIsCiAgICAgICAgIlJlIEtpbmciLAogICAgICAgICJSZSBTYXR0ZXJ0aHdhaXRlJ3MgV1QiLAogICAgICAgICJSZSBMeXNhZ2h0IiwKICAgICAgICAiUmUgSGFyd29vZCIsCiAgICAgICAgIlJlIEZpbmdlcidzIFdUIiwKICAgICAgICAiQ291bmNpbCBvZiBMYXcgUmVwb3J0aW5nIHYgQUciLAogICAgICAgICJSZSBOb3R0YWdlIiwKICAgICAgICAiVGhvbXBzb24gdiBUaG9tcHNvbiIsCiAgICAgICAgIlJlIENvdWx0aHVyc3QncyBXaWxsIFRydXN0IiwKICAgICAgICAiUmUgSHVtbWVsdGVuYmVyZyIsCiAgICAgICAgIlJlIEdyb3ZlLUdyYWR5IgogICAgXSwKICAgICJOVU1CRVIiOiAiMTM0IiwKICAgICJIRUxEIjogWwogICAgICAgICJTaG91bGQgdGhlIHB1cnBvc2Ugb2YgYSBjaGFyaXR5IGZhaWwsIHByb3BlcnR5IHN1Y2Nlc3NmdWxseSB2ZXN0ZWQgaW4gaXQgd2lsbCBiZSBhcHBsaWVkIGN5LXByXHUwMGU4cyB0byBhbm90aGVyIGNoYXJpdHksIGV2ZW4gc2hvdWxkIGl0IGhhdmUgYmVlbiBnaXZlbiB3aXRoIG5vIGdlbmVyYWwgY2hhcml0YWJsZSBpbnRlbnRpb24uIgogICAgXSwKICAgICJZRUFSIjogIjE4OTEiLAogICAgIk5BTUUiOiAiUmUgU2xldmluIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJDeS1wclx1MDBlOHMiLAogICAgICAgICJTdWJzZXF1ZW50IEZhaWx1cmUiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJDaGFyaXRpZXMgJm1kYXNoOyBDeS1wclx1MDBlOHMgJm1kYXNoOyBTdWJzZXF1ZW50IEZhaWx1cmUiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiUmUgS2luZyBbMTkyM10gMSBDaCAyNDMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJlIFdyaWdodCIsCiAgICAgICAgIlJlIFNsZXZpbiIsCiAgICAgICAgIlJlIEZpbmdlcidzIFdUIiwKICAgICAgICAiUmUgTHlzYWdodCIsCiAgICAgICAgIlJlIFNhdHRlcnRod2FpdGUncyBXVCIsCiAgICAgICAgIlJlIEhhcndvb2QiLAogICAgICAgICJHbm9zdGljIENlbnRyZSIsCiAgICAgICAgIlJlIER1cHJlZSdzIERlZWQgVHJ1c3QiLAogICAgICAgICJSZSBWZXJhbGwiLAogICAgICAgICJSIChleCBwLiBIb2RraW4pIHYgUmVnaXN0cmFyIiwKICAgICAgICAiUmUgSG9wa2luJ3MgV1QiLAogICAgICAgICJSb3lhbCBDaG9pciBTb2NpZXR5IHYgSVJDIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTM1IiwKICAgICJIRUxEIjogWwogICAgICAgICJBbnl0aGluZyBsZWZ0IG92ZXIgb25jZSB0aGUgY2hhcml0YWJsZSBwdXJwb3NlIG9mIGEgZ2lmdCBoYXMgYmVlbiBhY2hpZXZlZCB3aWxsIGJlIGFwcGxpZWQgY3ktcHJcdTAwZThzIgogICAgXSwKICAgICJZRUFSIjogIjE5MjMiLAogICAgIk5BTUUiOiAiUmUgS2luZyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ3ktcHJcdTAwZThzIiwKICAgICAgICAiU3Vic2VxdWVudCBGYWlsdXJlIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiQ2hhcml0aWVzICZtZGFzaDsgQ3ktcHJcdTAwZThzICZtZGFzaDsgU3Vic2VxdWVudCBGYWlsdXJlIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlJlIFdyaWdodCBbMTk1NF0gQ2ggMzQ3IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBLaW5nIiwKICAgICAgICAiUmUgU2xldmluIiwKICAgICAgICAiUmUgRmluZ2VyJ3MgV1QiLAogICAgICAgICJSZSBTYXR0ZXJ0aHdhaXRlJ3MgV1QiLAogICAgICAgICJSZSBIYXJ3b29kIiwKICAgICAgICAiUmUgTHlzYWdodCIsCiAgICAgICAgIkNodXJjaCBvZiBOZXcgRmFpdGggdiBDb21taXNzaW9uZXJzIGZvciBQYXlyb2xsIFRheCIsCiAgICAgICAgIlJlIEh1bW1lbHRlbmJlcmciLAogICAgICAgICJOYXRpb25hbCBBbnRpLVZpdmlzZWN0aW9uIFNvY2lldHkgdiBJUkMiLAogICAgICAgICJEcnVpZCBGb3VuZGF0aW9uIiwKICAgICAgICAiUmUgUmVzY2ggV1QiLAogICAgICAgICJSZSBTaGF3IgogICAgXSwKICAgICJOVU1CRVIiOiAiMTM2IiwKICAgICJIRUxEIjogW10sCiAgICAiWUVBUiI6ICIxOTU0IiwKICAgICJOQU1FIjogIlJlIFdyaWdodCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2hhcml0aWVzIiwKICAgICAgICAiQ3ktcHJcdTAwZThzIiwKICAgICAgICAiU3Vic2VxdWVudCBGYWlsdXJlIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiUXVpc3RjbG9zZSBUcnVzdHMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlF1aXN0Y2xvc2UgVHJ1c3RzIC0gQW5hbHlzaXMiLAogICAgICAgICJGYWlyLURlYWxpbmciLAogICAgICAgICJVbmF1dGhvcmlzZWQgUHJvZml0cyAtIENvcnBvcmF0ZSBPcHBvcnR1bml0eSIsCiAgICAgICAgIkRpc2hvbmVzdHkgZm9yIERpc2hvbmVzdCBBc3Npc3RhbmNlIiwKICAgICAgICAiQ2hhcml0YWJsZSBQdXJwb3NlcyIsCiAgICAgICAgIlNlY3JldCBUcnVzdHMgLSBUaGVvcnkiLAogICAgICAgICJGb3JtYWxpdGllcyBmb3IgSW50ZXIgVml2b3MgRXhwcmVzcyBUcnVzdHMiLAogICAgICAgICJTZWxmLURlYWxpbmciLAogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQgLSBLbm93bGVkZ2UiLAogICAgICAgICJFcXVpdHkgdGVtcGVycyB0aGUgd2luZCB0byB0aGUgU2hvcm4gTGFtYiIsCiAgICAgICAgIkNoYXJpdHkgLSBEZWZpbml0aW9ucyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEzNyIsCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkludHJvPC9zcGFuPjwvc3Bhbj48YnI+VGhpcyBpcyBhIHJlbGF0aXZlbHkgcmVjZW50IGFwcGVuZGFnZSBvbiB0aGUgYm9keSBvZiByZXN1bHRpbmcgdHJ1c3RzLCBhbGJlaXQgdGhhdCBhbiBhbmFsb2dvdXMgYXJyYW5nZW1lbnQgaGFkIGJlZW4gcmVjb2duaXNlZCBhcyBhIHZhbGlkIHR5cGUgb2YgdHJ1c3Qgd2F5IGJhY2sgaW4gMTgwNi4gQ29udHJvdmVyc3kgYW5kIGRlYmF0ZSBvbmx5IGFmdGVyIDE5NzAsIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhcmNsYXkmIzgyMTc7cyBCYW5rIHYgUXVpc3RjbG9zZSBJbnZlc3RtZW50czwvc3Bhbj4uIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Fc3NlbmNlPC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5XaGVuIFggdHJhbnNmZXJzIHByb3BlcnR5IHRvIFkgZm9yIGEgc3BlY2lmaWMgcHVycG9zZSwgYnV0IHRoZSBwdXJwb3NlIGZhaWxzLCB0aGVuIHRoZSBwcm9wZXJ0eSBpcyBoZWxkIG9uIHJlc3VsdGluZyB0cnVzdCBmb3IgWC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZXJlZm9yZSwgd2hlbiBYIHRyYW5zZmVycyBwcm9wZXJ0eSB0byBZIHRvIGJlIHRyYW5zZmVycmVkIHRvIFogc28gdGhhdCBaIGNhbiBwYXkgYSBwcmUtYW5ub3VuY2VkIGRpdmlkZW5kICZtZGFzaDsgYnV0IGluIHRoZSBtZWFuLXRpbWUgWiBiZWNvbWVzIGluc29sdmVudCBhbmQgc28gY2Fubm90IGxlZ2FsbHkgZGlzYnVyc2UgYSBkaXZpZGVuZCAmbWRhc2g7IFkgaG9sZHMgdGhlIHByb3BlcnR5IG9uIHJlc3VsdGluZyB0cnVzdCBmb3IgWCBhbmQgbWF5IDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+IHVzZSBpdCBpbiBzZXR0bGVtZW50IG9mIGRlYnRzIG93ZWQgdG8gaXQgYnkgWi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBjcnVjaWFsIGNvbXBvbmVudCBpcyA8c3BhbiBjbGFzcz1cImJkXCI+aW5hYmlsaXR5PC9zcGFuPiBvZiBaIHRvIHVzZSB0aGUgbW9uZXkgZm9yIGFueSBvdGhlciBwdXJwb3NlLiBTZXR0bG9yIGFuZCBiZW5lZmljaWFyeSBoYXZlIGEgPHNwYW4gY2xhc3M9XCJiZFwiPmNvbW1vbiBpbnRlbnRpb248L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiQnV0ICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGlzIGlzIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+IHRoZSBzYW1lIHNpdHVhdGlvbiBhcyBhIHBlcnNvbmFsIGxvYW4gdGFrZW4gb3V0IGZvciBhIG5ldyA8cz55YWNodDwvcz4gY2FyLiBUaGUgYmFuayBtYXkgYXNrIHlvdSB3aHkgeW91IHdhbnQgdGhlIG1vbmV5LCBidXQgdGhleSBvbmx5IGRvIHNvIG91dCBvZiA8c3BhbiBjbGFzcz1cImJkXCI+Y3VyaW9zaXR5PC9zcGFuPjogeW91ciByZXNwb25zZSBkb2VzIG5vdCBiaW5kIHlvdS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNlcGFyYXRpb24gb2YgQ2hhdHRlbHM8L3NwYW4+LCBhcyBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBHb2xkY29ycDwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIExvbmRvbiBXaW5lPC9zcGFuPiBpcyBldmlkZW5jZSB0aGUgcHJvcGVydHkgd2FzIG5vdCBpbnRlbmRlZCB0byBiZSBhdCB0aGUgZnJlZSBkaXNwb3NhbCBvZiB0aGUgdHJhbnNmZXJlZS48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+VXNlPC9zcGFuPjwvc3Bhbj48YnI+SW4gcHJhY3RpY2UgdGhlc2UgYXJlIGV4dHJlbWVseSB1c2VmdWwgdG8gYnVzaW5lc3MuIFRoZXkgZW5hYmxlIGNvbXBhbmllcyBvdmVyIHdob20gdGhlIHZ1bHR1cmVzIGFyZSBjaXJjbGluZyB0byBidWxrIHVwIHRoZWlyIGJhbGFuY2Ugc2hlZXRzIGJ5IG9idGFpbmluZyBlbWVyZ2VuY3kgZnVuZHMgb3ZlciB3aGljaCB0aGUgbGVuZGVyIHdpbGwgcmV0YWluIGEgPHNwYW4gY2xhc3M9XCJiZFwiPnByb3ByaWV0YXJ5IGludGVyZXN0PC9zcGFuPiAmbWRhc2g7IGFuZCB0aGVyZWZvcmUgaGF2ZSBwcmlvcml0eSBzaG91bGQgdGhlIHdvcnN0IGNvbWUgdG8gdGhlIHdvcnN0IGZvciB0aGUgY29tcGFueSBpbiBxdWVzdGlvbi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+SG93ZXZlcjwvc3Bhbj4sIHRoZSB0cnVzdCB3aWxsIGVuZCB3aGVuIHRoZSB0cmFuc2ZlciB0byBaIGhhcHBlbnMuIEluIHRoYXQgZXZlbnR1YWxpdHksIFggd2lsbCBoYXZlIGEgbWVyZWx5IGNvbnRyYWN0dWFsIGNsYWltIG9uIHRoZSBtb25leS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkZlYXR1cmVzPC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+VHJhbnNmZXIgZm9yIGEgcGFydGljdWxhciBwdXJwb3NlPC9zcGFuPi4gVGhpcyBpcyBvZnRlbiB0aGUgc2FtZSBhcyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5RdWlzdGNsb3NlPC9zcGFuPiBpdHNlbGYsIGEgbG9hbiB0byBwYXkgY3JlZGl0b3JzLiBFLmcuLCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Sb3RobWFucyB2IEZyZWVtYW4gTWF0aGV3cyBUcmVhc3VyZTwvc3Bhbj4uIEl0IGNvdWxkIGJlIGZvciBhY3F1aXNpdGlvbiBvZiBwcm9wZXJ0eSAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvYmJvbGQgdiBCYWtld2VsbCBNYW5hZ2VtZW50PC9zcGFuPiwgZm9yIGludmVzdG1lbnQgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ud2luc2VjdHJhPC9zcGFuPiwgZXRjLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkV4Y2x1c2l2ZWx5IGZvciB0aGUgcHVycG9zZTwvc3Bhbj4uIFRoZSBiZW5lZmljaWFyeSBjYW5ub3QgYmUgZnJlZSB0byBkbyBhcyBoZSBjaG9vc2VzIHdpdGggdGhlIHByb3BlcnR5ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VHdpbnNlY3RyYTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+U2VwYXJhdGlvbiBvZiBwcm9wZXJ0eTwvc3Bhbj4uIFRoaXMgaXMgZXZpZGVuY2UgZm9yICgyKS4gVGhlIG1vbmV5IHdhcyBzZXBhcmF0ZSBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5RdWlzdGNsb3NlPC9zcGFuPiwgYnV0IDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlR3aW5zZWN0cmE8L3NwYW4+Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JbiB0aGUgYWJzZW5jZSBvZiBvdGhlciBpbmRpY2F0b3JzIG9mIGEgdHJ1c3QsIHRoZSBwcm9wZXJ0eSA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiBiZWluZyBrZXB0IHNlcGFyYXRlIHdpbGwgbmVnYXRpdmUgaXQgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SIHYgQ2xvd2VzIE5vIDI8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+RmFpbHVyZSBvZiBwdXJwb3NlPC9zcGFuPi4gQWx0aG91Z2ggc2l0dWF0aW9ucyBzdWNoIGFzIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEVWVFI8L3NwYW4+LCBpbiB3aGljaCB0aGUgcHVycG9zZSBzdGFydHMgdG8gYmUgY2FycmllZCBvdXQsIGJ1dCBpcyBub3QgY29tcGxldGVkIGJlZm9yZSB0aGUgY29tcGFueSBnb2VzIGJ1c3QuPC9zcGFuPjwvbGk+PC9vbD4iCiAgICBdLAogICAgIk5BTUUiOiAiUXVpc3RjbG9zZSBUcnVzdHMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlF1aXN0Y2xvc2UgVHJ1c3RzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiUXVpc3RjbG9zZSBUcnVzdHMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlF1aXN0Y2xvc2UgVHJ1c3RzIiwKICAgICAgICAiU2VsZi1EZWFsaW5nIiwKICAgICAgICAiQ2hhcml0eSBDb21taXNzaW9uZXIncyBHdWlkYW5jZSAtIFNlcHRlbWJlciAyMDEzIiwKICAgICAgICAiT3RoZXIgQ2hhcml0YWJsZSBQdXJwb3NlcyB1bmRlciBDaGFyaXRpZXMgQWN0IDIwMTEiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQgLSBLbm93bGVkZ2UiLAogICAgICAgICJUaGUgQ3ktcHJcdTAwZThzIERvY3RyaW5lIiwKICAgICAgICAiUHJldmVudGlvbiBvciBSZWxpZWYgb2YgUG92ZXJ0eSIsCiAgICAgICAgIkFkdmFuY2VtZW50IG9mIFJlbGlnaW9uIiwKICAgICAgICAiUG9saXRpY2FsIFB1cnBvc2Ugb2YgYSBDaGFyaXR5IiwKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIlRoaXJkIFBhcnR5IExpYWJpbGl0eSIsCiAgICAgICAgIkZhaXItRGVhbGluZyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEzOCIsCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlN1bW1hcnk8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5RdWlzdGNsb3NlIFRydXN0czwvc3Bhbj4gaGF2ZSBiZWVuIGV4cGxhaW5lZCBhcyAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkV4cHJlc3MgVHJ1c3RzPC9zcGFuPiBmb3IgPHNwYW4gY2xhc3M9XCJiZFwiPnRoaXJkIHBhcnRpZXM8L3NwYW4+ICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5RdWlzdGNsb3NlPC9zcGFuPiBpdHNlbGYpLCBmb3IgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5sZW5kZXI8L3NwYW4+IChIb2ZmbWFubiBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ud2luc2VjdHJhPC9zcGFuPikgYW5kIGZvciB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmJvcnJvd2VyPC9zcGFuPiAmbWRhc2g7IGFzIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlB1cnBvc2UgVHJ1c3RzPC9zcGFuPiB3aXRoIHRoZSBiZW5lZmljaWFsIGludGVyZXN0IG5vdCBoZWxkIGJ5IGFueW9uZSAoRVdDQSBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ud2luc2VjdHJhPC9zcGFuPikgJm1kYXNoOyBhcyBsb2FucyBzcGVjaWZpY2FsbHkgZW5mb3JjZWFibGUgaW4gZXF1aXR5IChDaGFtYmVycykgJm1kYXNoOyBhbmQgYXMgcHVyZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZXN1bHRpbmcgVHJ1c3RzPC9zcGFuPiAoTWlsbGV0dCBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ud2luc2VjdHJhPC9zcGFuPikuIiwKICAgICAgICAiRWFjaCBleHBsYW5hdGlvbiBoYXMgaXRzIGZsYXdzLiBJbiBWaXJnbyYjODIxNztzIHZpZXcsIHRoZSBjb25mdXNpb24gaXMgbGFyZ2VseSBkdWUgdG8gdGhpbmtpbmcgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UXVpc3RjbG9zZTwvc3Bhbj4gaXRzZWxmIGVzdGFibGlzaGVkIGEgbmV3IHNwZWNpZXMgb2YgdHJ1c3QuIFRoZXkgYXJlIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+LCBoZSBzYXlzIChwLjI4MiksIGNpdGluZyAgPHNwYW4gY2xhc3M9XCJsbmsgd2xzXCIgZGF0YS1sbj1cIiUyODE5ODUlMjklMjAxMDElMjBMUVIlMjAyNjlcIj5hbiBhcnRpY2xlPC9zcGFuPiBieSBMb3JkIE1pbGxldHQuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5WaXJnbyYjODIxNztzIEFuYWx5c2lzPC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICJUaGUgZnVuZGFtZW50YWwgZmxhdyBpcyB0aGUgYXR0ZW1wdCB0byBmaXQgdHJhbnNmZXJzIGZvciA8c3BhbiBjbGFzcz1cImJkXCI+ZGlmZmVyZW50PC9zcGFuPiBwdXJwb3NlcyBpbnRvIHRoZSBzYW1lIGNvbmNlcHR1YWwgbWVjaGFuaXNtLiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPklmIHRoZSBwdXJwb3NlIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhcmNsYXkmIzgyMTc7cyB2IFF1aXN0Y2xvc2U8L3NwYW4+IHdhcyB0byBwYXkgYSBkaXZpZGVuZCB0byBzaGFyZWhvbGRlcnMsIHdobyA8c3BhbiBjbGFzcz1cImJkXCI+Y291bGQgYmUgaWRlbnRpZmllZDwvc3Bhbj4sIHRoZW4gdGhlIHRydXN0IHdhcyB2YWxpZCBwZXIgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgRGVubGV5PC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPk9uIHRoZSBvdGhlciBoYW5kLCBoYWQgdGhlIHB1cnBvc2UgaW5zdGVhZCBiZWVuIDxzcGFuIGNsYXNzPVwiaXRcIj50byBzdXJlIHVwIHRoZSBjb21wYW55PC9zcGFuPiwgdGhlIHRydXN0IHdvdWxkIGhhdmUgZmFpbGVkIGluaXRpYWxseSwgdGhlIGJlbmVmaWNpYWwgaW50ZXJlc3QgYXV0b21hdGljYWxseSByZXN1bHRpbmcgYmFjayB0byB0aGUgc2V0dGxvci48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIlRoaXMgcmVjb25jaWxlcyBXaWxiZXJmb3JjZSBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5RdWlzdGNsb3NlPC9zcGFuPiB3aXRoIE1pbGxldHQgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VHdpbnNlY3RyYTwvc3Bhbj4sIGFuZCBhbGxvd3MgZm9yIG90aGVyIHNpdHVhdGlvbnMsIGUuZy4sIG1vbmV5IGxlbnQgZm9yIHRoZSBzcGVjaWZpYyBhbmQgZXhjbHVzaXZlIHB1cnBvc2Ugb2YgcGF5aW5nIGJvcnJvd2Vycywgd2hpY2ggd291bGQgYmUgY29uc3RydWFibGUgYXMgYSB0cnVzdCBmb3IgcGVyc29ucy4gSXQgY291bGQgYmUgcHV0IGluIHRlcm1zIG9mIGFuIGV4cHJlc3MgdHJ1c3QgZm9yIHRoZSBsZW5kZXIgd2l0aG91dCwgaW4gbW9zdCBzaXR1YXRpb25zLCBtYWtpbmcgYW55IGRpZmZlcmVuY2UgZXhjZXB0IGZvciBwcmV2ZW50aW5nIHRoZSBiZW5lZmljaWFyeSwgaWYgYSByZXN1bHRpbmcgdHJ1c3QgaXMgdGhlIHByZWZlcnJlZCByZWFkaW5nLCBmcm9tIGNhbGxpbmcgaW4gdGhlIGxvYW4gYXMgbG9uZyBhcyB0aGUgcHVycG9zZSBjb3VsZCBiZSBmdWxmaWxsZWQuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Db21wZXRpbmcgQW5hbHlzZXM8L3NwYW4+PC9zcGFuPiIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkV4cHJlc3MgVHJ1c3Q8L3NwYW4+IDxzcGFuIGNsYXNzPVwiYmRcIj5mb3IgdGhlIHRoaXJkIHBhcnRpZXM8L3NwYW4+ICZtZGFzaDsgdGhlIGNvbnZlbnRpb25hbCB2aWV3Li4uPGJyPi4uLiBhbmQgdGhhdCBvZiBMb3JkIFdpbGJlcmZvcmNlIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlF1aXN0Y2xvc2U8L3NwYW4+LCB0aGUgdGhpcmQgcGFydHkgYmVuZWZpY2lhcmllcyBiZWluZyB0aGUgc2hhcmVob2xkZXJzIG9mIFJvbGxzIFJhem9yLiBUaGUgdHJ1c3QgZmFpbGVkIGZvciBpbmFiaWxpdHkgZHVlIHRvIHJlY2VpdmVyc2hpcCBhbmQgYmVjYW1lIHJlcGxhY2VkIGJ5IGEgcmVzdWx0aW5nIHRydXN0Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGlzIGZhaWxzIHRvIGV4cGxhaW4gUXVpc3RjbG9zZSBjYXNlcyAoc2VlIFZpcmdvIHAuMjcyKSB3aGVyZSBpZGVudGlmaWFibGUgYmVuZWZpY2lhcmllcyBkbyA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiBsaWUgYmVoaW5kIHRoZSBwdXJwb3NlLCBzdWNoIHRydXN0cyAobm9uLWNoYXJpdGFibGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UHVycG9zZSBUcnVzdHM8L3NwYW4+KSBiZWluZyBnZW5lcmFsbHkgdm9pZC48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Ti5CLiwgb24gdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJlbmVmaWNpYXJ5IFByaW5jaXBsZTwvc3Bhbj4sIGEgdHJ1c3QgcHVycG9ydGluZyB0byBiZSBmb3IgYSBwdXJwb3NlIHdpbGwgc3VjY2VlZCBpZiB0aG9zZSB3aG8gd2lsbCBiZW5lZml0IGNhbiBiZSBpZGVudGlmaWVkICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgRGVubGV5PC9zcGFuPi48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QXMgTG9yZCBNaWxsZXR0IG9ic2VydmVkIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlR3aW5zZWN0cmE8L3NwYW4+LCB0aGUgYmVuZWZpY2lhcmllcyBvZiBhIHByaXZhdGUgZXhwcmVzcyB0cnVzdCA8c3BhbiBjbGFzcz1cImJkXCI+YXJlIGF0IGxpYmVydHkgdG8gdGVybWluYXRlPC9zcGFuPiB0aGUgdHJ1c3QgYW5kIDxzcGFuIGNsYXNzPVwiYmRcIj50cmFuc2ZlciB0aGUgcHJvcGVydHkgdG8gdGhlbXNlbHZlczwvc3Bhbj4uIFRoZSBpbnNvbHZlbmN5IGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlF1aXN0Y2xvc2U8L3NwYW4+LCB0aGVyZWZvcmUsIG91Z2h0IG5vdCBoYXZlIGJlZW4gYW4gb2JzdGFjbGUgdG8gdGhlIHRoaXJkIHBhcnRpZXMmIzgyMTc7IHJlY2VpdmluZyB0aGVpciBkaXZpZGVuZCAmbWRhc2g7IGFzIHRoZSBiZW5lZmljaWFsIGludGVyZXN0IDxzcGFuIGNsYXNzPVwiYmRcIj5uZXZlciBsYXkgd2l0aCBSb2xscyBSYXpvcjwvc3Bhbj4gZm9yIHRoZW0gc3Vic2VxdWVudGx5IHRvIGJlIHByb2hpYml0ZWQgZnJvbSBkaXNidXJzaW5nIHRvIHRoZSBzaGFyZWhvbGRlcnMuPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkV4cHJlc3MgVHJ1c3Q8L3NwYW4+IDxzcGFuIGNsYXNzPVwiYmRcIj5mb3IgdGhlIGxlbmRlcjwvc3Bhbj48YnI+TG9yZCBIb2ZmbWFubiBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ud2luc2VjdHJhPC9zcGFuPiBmYXZvdXJlZCB0aGlzIGFuYWx5c2lzLiBUaGUgbW9uZXkgYmVlbiBwYWlkIGludG8gdGhlIGFjY291bnQgb2YgYSBmaWR1Y2lhcnksIGEgc29saWNpdG9yLjwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BcHBsaWVkIHRvIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhcmNsYXkmIzgyMTc7cyB2IFF1aXN0Y2xvc2U8L3NwYW4+LCB0aGlzIHdvdWxkIG1lYW4gdGhlIGJlbmVmaWNpYXJ5LCBRdWlzdGNsb3NlLCB3b3VsZCBoYXZlIGJlZW4gYXQgbGliZXJ0eSB0byBjYWxsIGluIHRoZTwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QnV0IHRoZSBzdGlwdWxhdGlvbiBvZiBhbiBleGNsdXNpdmUgYW5kIHNwZWNpZmljIHVzZSBkZXByaXZlcyB0aGUgYmVuZWZpY2lhcmllcywgaW4gdGhpcyBhY2NvdW50LCBvZiB0aGVpciBjb252ZW50aW9uYWwgcmlnaHRzIGFzIGJlbmVmaWNpYXJpZXMgb2YgZXhwcmVzcyB0cnVzdHMuPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlB1cnBvc2UgVHJ1c3RzPC9zcGFuPiA8c3BhbiBjbGFzcz1cImJkXCI+aW4gc3VzcGVuZGVkIGFuaW1hdGlvbjwvc3Bhbj48YnI+VGhlIENvdXJ0IG9mIEFwcGVhbCBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ud2luc2VjdHJhPC9zcGFuPiBkZWNpZGVkIHRoZSBtb25leSB3YXMgaGVsZCBvbiBhIHB1cnBvc2UgdHJ1c3QsIGJ1dCB0aGF0IHRoZSBiZW5lZmljaWFsIGludGVyZXN0IHdvdWxkIG9ubHkgcHJlY2lwaXRhdGUgb25lIHdheSBvciB0aGUgb3RoZXIgb25jZSB0aGUgcHVycG9zZSBoYWQgYmVlbiAoYXR0ZW1wdGVkIHRvIGJlKSBjYXJyaWVkIG91dC48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SW4gdGhlIExvcmRzLCB0aGlzIHdhcyByZWplY3RlZCBhcyAmIzgyMTY7dW5vcnRob2RveCYjODIxNzsgPHNwYW4gY2xhc3M9XCJpbGNcIj5pLmUuLCAmIzgyMTY7ZnVja2luZyBzdHVwaWQmIzgyMTc7PC9zcGFuPiAmbWRhc2g7IHRoZSB3aG9sZSBwb2ludCBvZiByZXN1bHRpbmcgdHJ1c3RzIHdhcyB0byBlbnN1cmUgdGhhdCB0aGUgd2hvbGUgYmVuZWZpY2lhbCBpbnRlcmVzdCBvZiBhIHRydXN0IHdpdGggPHNwYW4gY2xhc3M9XCJpdFwiPnNvbWVvbmU8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5FeHByZXNzIFRydXN0czwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJiZFwiPmZvciB0aGUgYm9ycm93ZXI8L3NwYW4+IGZhaWxzIGFzIGFuIGFuYWx5c2lzIG9uIHRoZSBsaWJlcnR5IGl0IHdvdWxkIGVudGFpbCBvbiB0aGUgcGFydCBvZiB0aGUgYm9ycm93ZXIsIHdoaWNoIGdvZXMgYWdhaW5zdCB0aGUgUXVpc3RjbG9zZSByZXF1aXJlbWVudCB0aGF0IHRoZSBiZW5lZmljaWFyeSBpcyA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiB0byB1c2UgdGhlIG1vbmV5IGFzIGhlIHBsZWFzZXMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+QSBsb2FuIHdpdGggY29udHJhY3R1YWwgdGVybXMgZW5mb3JjZWFibGUgaW4gRXF1aXR5PC9zcGFuPiAmbWRhc2g7IHdoaWNoIHdvdWxkIG1lYW4gdGhlcmUgd2FzIG5vIHRydXN0IGF0IGFsbC4gRmF2b3VyZWQgYnkgQ2hhbWJlcnMgaW4gPHNwYW4gY2xhc3M9XCJpdFwiPlJlc3VsdGluZyBUcnVzdHM8L3NwYW4+LiBVc2VkIGluIHRoZSBDb3VydCBvZiBBcHBlYWwgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VHdpbnNlY3RyYTwvc3Bhbj4sIGJ1dCByZWplY3RlZCBpbiB0aGUgTG9yZHMgYnkgTWlsbGV0dCBvbiBncm91bmRzIHRoYXQgc3VjaCBhIGNvbnN0cnVjdGlvbiAmbWRhc2g7PC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPklzIGluY29uc2lzdGVudCB3aXRoIHRoZSBmaWR1Y2lhcnkgb2JsaWdhdGlvbnMgb2YgdGhlIGJvcnJvd2VyICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VHdpbnNlY3RyYTwvc3Bhbj4sIGlzIGluY29uc2lzdGVudCB3aXRoIHRoZSByZXF1aXJlbWVudCBvZiBzZXBhcmF0aW9uIG9mIGZ1bmRzLCBhbmQgZmFpbHMgdG8gZXhwbGFpbiBob3cgdGhlIGxlbmRlciBjYW4gaGF2ZSBhIHByb3ByaWV0YXJ5IHJpZ2h0Ljwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZXN1bHRpbmcgVHJ1c3RzPC9zcGFuPiA8c3BhbiBjbGFzcz1cImJkXCI+ZnJvbSB0aGUgd29yZCBnbzwvc3Bhbj4uIEFjY29yZGluZyB0byBMb3JkIE1pbGxldHQgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VHdpbnNlY3RyYTwvc3Bhbj4sIGEgUXVpc3RjbG9zZSB0cnVzdCBpcyByZWFsbHkgYSByZXN1bHRpbmcgdHJ1c3QgaW4gd2hpY2ggdGhlIGJvcnJvd2VyLCB0aGUgYmVuZWZpY2lhcnksIGhhcyBhIDxzcGFuIGNsYXNzPVwiYmRcIj5wb3dlciB0byBkaXNwb3NlIG9mIHRoZSBiZW5lZmljaWFsIGludGVyZXN0IGZvciB0aGUgc3BlY2lmaWMgcHVycG9zZTwvc3Bhbj4uIFNob3VsZCB0aGF0IHB1cnBvc2UgYmVjb21lIGZydXN0cmF0ZWQsIHRoZSBzZXR0bG9yIGNhbiByZXZva2UgdGhlIHBvd2VyIGFuZCBlbmZvcmNlIHRoZSB0cnVzdC48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIHJldGVudGlvbiBieSB0aGUgc2V0dGxvciBvZiBiZW5lZmljaWFsIGludGVyZXN0IGltcGxpZXMsIGhvd2V2ZXIsIHRoYXQgaXQgbXVzdCBiZSBhbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BdXRvbWF0aWMgUmVzdWx0aW5nIFRydXN0czwvc3Bhbj4uIEhvd2V2ZXIsIHN1Y2ggdHJ1c3RzIGFyaXNlIG9ubHkgd2hlbiBhbiA8c3BhbiBjbGFzcz1cImJkXCI+ZXhwcmVzcyB0cnVzdDwvc3Bhbj4gaGFzIGZhaWxlZC4gQnV0IHRoaXMgYW5hbHlzaXMgbWFrZXMgbm8gc3VnZ2VzdGlvbiBvZiBhbiBleHByZXNzIHRydXN0IGFuZCB2ZW50dXJlcyBubyBleHBsYW5hdGlvbiBmb3IgaG93IGFuIGF1dG9tYXRpYyByZXN1bHRpbmcgdHJ1c3QgY2FuIGFyaXNlcyBpbiBkZWZhdWx0Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+RnVydGhlcm1vcmUsIHR5cGljYWxseSBpbiBRdWlzdGNsb3NlIGNhc2VzLCB0aGUgdHJhbnNmZXIgb2YgYmVuZWZpY2lhbCBpbnRlcmVzdCBmcm9tIFggdG8gWiBkb2VzIG5vdCBmYWlsLiBTbyB0aGUgdHJ1c3QgPHNwYW4gY2xhc3M9XCJiZFwiPmNhbm5vdDwvc3Bhbj4gYmUgc2FpZCB0byBoYXZlIGZhaWxlZC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkluIFZpcmdvJiM4MjE3O3Mgb3BpbmlvbiAocHAuMjgxKSwgZWl0aGVyIExvcmQgTWlsbGV0dCBoYXMgaW52ZW50ZWQgYSB0aGlyZCBjYXRlZ29yeSBvZiByZXN1bHRpbmcgdHJ1c3RzLCBvciBoaXMgYW5hbHlzaXMgaXMgaW5jb3JyZWN0Ljwvc3Bhbj48L2xpPjwvdWw+PC9vbD4iCiAgICBdLAogICAgIk5BTUUiOiAiUXVpc3RjbG9zZSBUcnVzdHMgLSBBbmFseXNpcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiUXVpc3RjbG9zZSBUcnVzdHMiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJRdWlzdGNsb3NlIFRydXN0cyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUm90aG1hbnMgdiBGcmVlbWFuIE1hdGhldyBUcmVhc3VyZSIsCiAgICAgICAgIlIgdiBDbG93ZXMgTm8gMiIsCiAgICAgICAgIkJpZWJlciB2IFRlYXRoZXJzIiwKICAgICAgICAiUmUgRVZUUiIsCiAgICAgICAgIlR3aW5zZWN0cmEgdiBZYXJkbGV5IiwKICAgICAgICAiQWJlcmRlZW4gUmFpbHdheSB2IEJsYWlraWUiLAogICAgICAgICJSZSBIYXJ3b29kIiwKICAgICAgICAiS2FzcGVyYmF1ZXIgdiBHcmlmZml0aHMiLAogICAgICAgICJUaG9tYXMgdiBIb3dlbGwiLAogICAgICAgICJSZSBTb3V0aCBQbGFjZSBFdGhpY2FsIFNvY2lldHkiLAogICAgICAgICJSZSBTYXR0ZXJ0aHdhaXRlJ3MgV1QiLAogICAgICAgICJSIChleCBwLiBCdWxsKSB2IFJhZGlvIEF1dGhvcml0eSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEzOSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJBS0EiOiAiUXVpc3RjbG9zZTsgQmFyY2xheSdzIHYgUXVpc3RjbG9zZSIsCiAgICAiWUVBUiI6ICIxOTcwIiwKICAgICJOQU1FIjogIkJhcmNsYXkncyBCYW5rIHYgUXVpc3RjbG9zZSBJbnZlc3RtZW50cyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiUXVpc3RjbG9zZSBUcnVzdHMiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJGdW5kYW1lbnRhbCIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiQmFyY2xheSYjODIxNztzIEJhbmsgdiBRdWlzdGNsb3NlIEludmVzdG1lbnRzIFsxOTcwXSBBQyA1NjciLAogICAgIkhFTEQiOiBbCiAgICAgICAgIldoZW4gQSB0cmFuc2ZlcnMgcHJvcGVydHkgdG8gQiBmb3IgYSBzcGVjaWZpYyBwdXJwb3NlLCBidXQgdGhlIHB1cnBvc2UgZmFpbHMsIHRoZW4gdGhlIHByb3BlcnR5IGlzIGhlbGQgb24gcmVzdWx0aW5nIHRydXN0IGZvciBBLjxicj5UaGVyZWZvcmUsIHdoZW4gWCB0cmFuc2ZlcnMgcHJvcGVydHkgdG8gWSwgdG8gYmUgdHJhbnNmZXJyZWQgdG8gWiBmb3IgWiB0byBwYXkgYSBwcmUtYW5ub3VuY2VkIGRpdmlkZW5kLCBidXQgaW4gdGhlIG1lYW4tdGltZSBaIGJlY29tZXMgaW5zb2x2ZW50IGFuZCB0aGVyZWZvcmUgY2Fubm90IGxlZ2FsbHkgZG8gc28sIFkgaG9sZHMgdGhlIHByb3BlcnR5IG9uIHJlc3VsdGluZyB0cnVzdCBmb3IgWCwgYW5kIG1heSBub3QgdXNlIGl0LCBlLmcuLCBpbiBzZXR0bGVtZW50IG9mIGRlYnRzIG93ZWQgdG8gaXQgYnkgWi4gIEhvd2V2ZXIsIHRoaXMgc2l0dWF0aW9uIGlzIHByZWRpY2F0ZWQgb24gPHNwYW4gY2xhc3M9XCJiZFwiPlggYW5kIFogaGF2aW5nIHRoZSBzYW1lIGludGVudGlvbjwvc3Bhbj4uIiwKICAgICAgICAiTG9yZCBXaWxiZXJmb3JjZSBkZWNpZGVkIHRoZXJlIDxzcGFuIGNsYXNzPVwiYmRcIj53YXM8L3NwYW4+IGEgdHJ1c3QgZm9yIHRoZSBwdXJwb3NlIG9mIHBheWluZyB0aGUgc2hhcmVob2xkZXJzICZtZGFzaDsgYnV0IHRoZSB0cnVzdCBmYWlsZWQgZm9yIGluYWJpbGl0eS4gQnkgY29udHJhc3QgdG8gdGhlIGFib3ZlLCBoZSBmb3VuZCB0aGUgdHJ1c3Qgd2FzIGEgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RXhwcmVzcyBUcnVzdDwvc3Bhbj4gaW4gZmF2b3VyIG9mIHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+c2hhcmVob2xkZXJzPC9zcGFuPi4iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlJvbGxzIFJhem9yLCBhIGNvbXBhbnkgb24gdGhlIGJyaW5rIG9mIGluc29sdmVuY3ksIGhhZCBhIG1heGVkLW91dCB2YW5pbGxhIGJhbmsgYWNjb3VudCB3aXRoIEJhcmNsYXlcdTIwMTlzLiBRdWlzdGNsb3NlIGxlbnQgbW9uZXkgaW50byBhIHNlcGFyYXRlIGJhbmsgYWNjb3VudCB3aXRoIEJhcmNsYXkmIzgyMTc7cywgb25seSB0byBiZSB1c2VkIGZvciBvbmUgc3BlY2lmaWMgcHVycG9zZTogPHNwYW4gY2xhc3M9XCJiZFwiPnBheWluZyB0aGUgZGl2aWRlbmQ8L3NwYW4+LiBSb2xscyBSYXpvciByZWNlaXZlZCB0aGUgbW9uZXksIHRoZW4gd2VudCBpbnNvbHZlbnQgJm1kYXNoOyBhdCB3aGljaCBwb2ludCwgaW1tZWRpYXRlbHksIGl0IGJlY2FtZSBpbGxlZ2FsIHRvIHBheSB0aGUgZGl2aWRlbmQuIFNocmV3ZGx5LCBCYXJjbGF5XHUyMDE5cyBpbW1lZGlhdGVseSB0b29rIHRoZSBtb25leSBmcm9tIHRoZSBuZXcgYmFuayBhY2NvdW50IHRvIHBheSBvZmYgdGhlIG92ZXJkcmF3biBhY2NvdW50LiBUaGlzIHRoZXkgd2VyZSBlbnRpdGxlZCB0byBkbyA8c3BhbiBjbGFzcz1cImJkXCI+dW5sZXNzPC9zcGFuPiB0aGUgbW9uZXkgd2FzIG9uIHRydXN0IHRoZXkgaGFkIG5vdGljZSBvZiBpdC4iLAogICAgICAgICJRdWlzdGNsb3NlLCBvZiBjb3Vyc2UsIGNsYWltZWQgdGhhdCBCYXJjbGF5XHUyMDE5cyBoYWQgbm8gcmlnaHQgdG8gZG8gc28sIGFuZCBoYWQgbWlzYXBwcm9wcmlhdGVkIHByb3BlcnR5IHRoYXQgZGlkIG5vdCBiZWxvbmcgdG8gdGhlbS4gQmFyY2xheSYjODIxNztzIGNsYWltZWQgdGhlcmUgd2FzIG1lcmVseSBhIGNvbnRyYWN0dWFsIGFycmFuZ2VtZW50IGJldHdlZW4gUm9sbHMgUmF6b3IgYW5kIFF1aXN0bGNsb3NlLCBhbmQgdGhhdCB0aGUgbm9ybWFsIGluc29sdmVuY3kgcHJvY2VlZGluZ3Mgd291bGQgYXBwbHkgLVx1MjAxNCBhbmQgdGhhdCB1bnNlY3VyZWQgY3JlZGl0b3JzIHdvdWxkIGdldCBub3RoaW5nLiIsCiAgICAgICAgIkNmLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ud2luc2VjdHJhPC9zcGFuPi4gU2VlIGFsc28gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UXVpc3RjbG9zZSBUcnVzdHM8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5RdWlzdGNsb3NlIFRydXN0cyAtIEFuYWx5c2lzPC9zcGFuPi4iCiAgICBdLAogICAgIldJS0lMSU5LIjogWwogICAgICAgICJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXJjbGF5c19CYW5rX0x0ZF92X1F1aXN0Y2xvc2VfSW52ZXN0bWVudHNfTHRkIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiUXVpc3RjbG9zZSBUcnVzdHMgLyBGaWR1Y2lhcnkgRHV0aWVzICZtZGFzaDsgVGhpcmQgUGFydHkgTGlhYmlsaXR5ICZtZGFzaDsgRGlzaG9uZXN0IEFzc2lzdGFuY2UiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJveWFsIEJydW5laSB2IFRhbiIsCiAgICAgICAgIkJhcmxvdyBDbG93ZXMgdiBFdXJvdHJ1c3QiLAogICAgICAgICJCYXJuZXMgdiBBZGR5IiwKICAgICAgICAiQWJvdS1SYWhtYW4gdiBBYmFjaCIsCiAgICAgICAgIlN0YXJnbGFkZSB2IE5hc2giLAogICAgICAgICJBZ2lwIEFmcmljYSB2IEphY2tzb24iLAogICAgICAgICJSZWdhbCBDaW5lbWFzIHYgR3VsbGl2ZXIiLAogICAgICAgICJCcmF5IHYgRm9yZCIsCiAgICAgICAgIktlZWNoIHYgU2FuZGZvcmQiLAogICAgICAgICJBcm1zdHJvbmcgdiBXaW5uaW5ndG9uIiwKICAgICAgICAiUiB2IENsb3dlcyBObyAyIiwKICAgICAgICAiUmUgTW9udGFndSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE0MCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJBS0EiOiAiVHdpbnNlY3RyYSIsCiAgICAiWUVBUiI6ICIyMDAyIiwKICAgICJOQU1FIjogIlR3aW5zZWN0cmEgdiBZYXJkbGV5IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJRdWlzdGNsb3NlIFRydXN0cyIsCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJEaXNob25lc3QgQXNzaXN0YW5jZSIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIsCiAgICAgICAgIkxlYWRpbmciCiAgICBdLAogICAgIkNPTU1FTlQiOiAiT24gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGlzaG9uZXN0IEFzc2lzdGFuY2U8L3NwYW4+LCB0aGlzIGlzIHN0aWxsIHRlY2huaWNhbGx5IHRoZSBsZWFkaW5nIGNhc2UuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRhbjwvc3Bhbj4gaXMgVUtQQy4iLAogICAgIkNJVEFUSU9OIjogIlR3aW5zZWN0cmEgdiBZYXJkbGV5IFsyMDAyXSBVS0hMIDEyIiwKICAgICJIRUxEIjogWwogICAgICAgICIoMSkgRm9yIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRpc2hvbmVzdCBBc3Npc3RhbmNlPC9zcGFuPiwgaW4gYWRkaXRpb24gdG8gdGhlIHJlcXVpcmVtZW50IGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRhbjwvc3Bhbj4gb2Ygd2hldGhlciB0aGUgYWN0aW9ucyB3b3VsZCBoYXZlIGJlZW4gZG9uZSBhbiBob25lc3QgYW5kIHJlYXNvbmFibGUgcGVyc29uLCBkaXNob25lc3R5IGFsc28gZW50YWlscyB0aGF0IHRoZSBkZWZlbmRhbnQgcmVhbGlzZWQgaGlzIGFjdGlvbnMgd291bGQgYmUgY29uc2lkZXJlZCBkaXNob25lc3QuPGJyPigyKSBJbiBhIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlF1aXN0Y2xvc2UgVHJ1c3Q8L3NwYW4+LCBiZW5lZmljaWFsIGludGVyZXN0IHJlbWFpbnMgd2l0aCB0aGUgbGVuZGVyIHRocm91Z2hvdXQuIiwKICAgICAgICAiT24gKDIpIExvcmQgTWlsbGV0dCwgZGlzYXBwcm92aW5nIExvcmQgV2lsYmVyZm9yY2UmIzgyMTc7cyBhbmFseXNpcyBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5RdWlzdGNsb3NlPC9zcGFuPiBpdHNlbGYsIHByb3ZpZGVkIGFuIGFuYWx5c2lzIG9mIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5RdWlzdGNsb3NlIFRydXN0PC9zcGFuPi4gSGUgaGVsZCB0aGV5LCB3ZXJlIGVpdGhlciAmbWRhc2g7IChpaSkgZXhwcmVzcyB0cnVzdHMgZm9yIHRoZSBiZW5lZml0IG9mIHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+bGVuZGVyPC9zcGFuPjsgKGlpKSBleHByZXNzIHRydXN0cyBmb3IgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5ib3Jyb3dlcjwvc3Bhbj47IChpaWkpIHB1cnBvc2UgdHJ1c3RzLiBCdXQgdGhleSB3ZXJlIHByb2JhYmx5IG5vdCB3aGF0IHRoZSBFV0NBIGhhZCBoZWxkLCAoaXYpIHRydXN0cyBpbiB3aGljaCB0aGUgYmVuZWZpY2lhbCBpbnRlcmVzdCBpcyBoZWxkIGJ5IG5vLW9uZSB1bnRpbCB0aGUgcHVycG9zZSBpcyBiZWd1bi4iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIllhcmRsZXkgYW5kIGhpcyBzb2xpY2l0b3IsIExlYWNoLCBhbmQgYW5vdGhlciwgU2ltcywgd2VyZSBzdWVkIGZvciByZXBheW1lbnQgb2YgYSBsb2FuIG9mIFx1MDBhMzFtIG1hZGUgZm9yIHRoZSBzb2xlIGFuZCBleGNsdXNpdmUgcHVycG9zZSBvZiB0aGUgYWNxdWlzaXRpb24gb2YgcmVhbCBwcm9wZXJ0eS4gVGhlIG1vbmV5IGhhZCBiZWVuIHBhaWQgb24gY29uZGl0aW9uIG9mIHRoZXJlIGJlaW5nIGEgZ3VhcmFudG9yLiBMZWFjaCBkZWNsaW5lZC4gU2ltcyBhY2NlcHRlZCAmbWRhc2g7IGhlIG93ZWQgXHUwMGEzMS41TSB0byBZYXJkbGV5IGZyb20gcHJldmlvdXMgZGVhbGluZ3MsIHdoaWNoIFlhcmRsZXkgcHJvbWlzZWQgdG8gZm9yZ2l2ZSwgaWYgdGhlIGxvYW4gd2FzIHBhaWQgaW50byBTaW1zJiM4MjE3OyBhY2NvdW50LiBIZSwgaW4gdHVybiwgcHJvbWlzZWQgVHdpbnNlY3RyYSB0byByZWxlYXNlIHRoZSBtb25leSBvbmx5IHdoZW4gdGhlIHB1cnBvc2UgZm9yIHdoaWNoIGl0IHdhcyBtYWRlIGhhZCBiZWVuIGZ1bGZpbGxlZC4gSGUgd2VudCBhaGVhZCBhbmQgdHJhbnNmZXJyZWQgaXQgdG8gTGVhY2ggaXQgdG8gWWFyZGxleSYjODIxNztzIHNvbGljaXRvciBhbnl3YXkuIFlhcmRsZXksIGluIGJyZWFjaCBvZiBjb250cmFjdCwgcHJvbXB0bHkgdXNlZCBhIHRoaXJkIG9mIGl0IHRvIHBheSBvZmYgc29tZSBvZiBoaXMgZGVidHMuIFR3aW5zZWN0cmEgY2xhaW1lZCB0aGUgY29udHJhY3R1YWwgc3RpcHVsYXRpb24gb2YgdGhlIGV4Y2x1c2l2ZSBwdXJwb3NlIGZvciB0aGUgZnVuZHMgZXN0YWJsaXNoZWQgYSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5RdWlzdGNsb3NlIFRydXN0PC9zcGFuPi4iCiAgICBdLAogICAgIldJS0lMSU5LIjogWwogICAgICAgICJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Ud2luc2VjdHJhX0x0ZF92X1lhcmRsZXkiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJRdWlzdGNsb3NlIFRydXN0cyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQmllYmVyIHYgVGVhdGhlcnMiLAogICAgICAgICJUd2luc2VjdHJhIHYgWWFyZGxleSIsCiAgICAgICAgIkJhcmNsYXkncyBCYW5rIHYgUXVpc3RjbG9zZSBJbnZlc3RtZW50cyIsCiAgICAgICAgIlJvdGhtYW5zIHYgRnJlZW1hbiBNYXRoZXcgVHJlYXN1cmUiLAogICAgICAgICJSZSBFVlRSIiwKICAgICAgICAiUmUgV2VkZ3dvb2QiLAogICAgICAgICJBYm91LVJhaG1hbiB2IEFiYWNoIiwKICAgICAgICAiUGFsbWVyIHYgU2ltbW9uZHMiLAogICAgICAgICJUaG9tcHNvbiB2IFRob21wc29uIiwKICAgICAgICAiTmVsc29uIHYgTGFyaG9sdCIsCiAgICAgICAgIkJodWxsYXIgdiBCaHVsbGFyIiwKICAgICAgICAiS2VlY2ggdiBTYW5kZm9yZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE0MSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJJbiB0aGUgYWJzZW5jZSBvZiBvdGhlciBpbmRpY2F0b3JzIG9mIGEgdHJ1c3QsIHRoZSB0cnVzdCBwcm9wZXJ0eSA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiBiZWluZyBrZXB0IHNlcGFyYXRlIHdpbGwgbmVnYXRpdmUgdGhlIGV4aXN0ZW5jZSBvZiBhIHRydXN0LiIKICAgIF0sCiAgICAiTkFNRSI6ICJSIHYgQ2xvd2VzIE5vIDIiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlF1aXN0Y2xvc2UgVHJ1c3RzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiUXVpc3RjbG9zZSBUcnVzdHMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJvdGhtYW5zIHYgRnJlZW1hbiBNYXRoZXcgVHJlYXN1cmUiLAogICAgICAgICJCYXJjbGF5J3MgQmFuayB2IFF1aXN0Y2xvc2UgSW52ZXN0bWVudHMiLAogICAgICAgICJSIHYgQ2xvd2VzIE5vIDIiLAogICAgICAgICJUd2luc2VjdHJhIHYgWWFyZGxleSIsCiAgICAgICAgIkJpZWJlciB2IFRlYXRoZXJzIiwKICAgICAgICAiQmFsc3RvbiB2IEhlYWRsaW5lIiwKICAgICAgICAiUmUgUm9zZSAob2YgMTk1MikiLAogICAgICAgICJQYXVsIHYgQ29uc3RhbmNlIiwKICAgICAgICAiVGhvbWFzIHYgVGltZXMgQm9va3MiLAogICAgICAgICJSZSBCYWRlbiAobm8uIDIpIiwKICAgICAgICAiQmh1bGxhciB2IEJodWxsYXIiLAogICAgICAgICJNb3NzIHYgQ29vcGVyIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTQyIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBwdXJwb3NlIG9mIGEgUXVpc3RjbG9zZSB0cnVzdCBpcyBoZWxkIHRvIHN1Y2NlZWQgd2hlbiB0aGUgbW9uZXkgaXMgdXNlZCBmb3IgdGhlIGludGVuZGVkIHB1cnBvc2UsIGJ1dCB0aGUgdHJhbnNhY3Rpb24gaXMgbm90IGNvbXBsZXRlZCBiZWZvcmUgdGhlIGNvbXBhbnkgZ29lcyBiYW5rcnVwdC4gVGhlIGVxdWl0YWJsZSBpbnRlcmVzdCBpbiBlcXVpcG1lbnQgcHVyY2hhc2VkIHVzaW5nIGEgUXVpc3RjbG9zZSBsb2FuLCBidXQgbm90IGRlbGl2ZXJlZCBiZWZvcmUgdGhlIGNvbXBhbnkgd2VudCBiYW5rcnVwdCwgd291bGQgcmVzdWx0IHRvIHRoZSBzZXR0bG9yIG9mIHRoZSBRdWlzdGNsb3NlIHRydXN0LiIKICAgIF0sCiAgICAiTkFNRSI6ICJSZSBFVlRSIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJRdWlzdGNsb3NlIFRydXN0cyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlF1aXN0Y2xvc2UgVHJ1c3RzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJCYXJjbGF5J3MgQmFuayB2IFF1aXN0Y2xvc2UgSW52ZXN0bWVudHMiLAogICAgICAgICJUd2luc2VjdHJhIHYgWWFyZGxleSIsCiAgICAgICAgIlJlIEVWVFIiLAogICAgICAgICJCaWViZXIgdiBUZWF0aGVycyIsCiAgICAgICAgIlIgdiBDbG93ZXMgTm8gMiIsCiAgICAgICAgIlJlIENvb2tlJ3MgU1QiLAogICAgICAgICJSZSBSb2JpbnNvbiIsCiAgICAgICAgIkJvYXJkbWFuIHYgUGhpcHBzIiwKICAgICAgICAiSW5kZXBlbmRlbnQgU2Nob29scyBDb3VuY2lsIHYgQ2hhcml0eSBDb21taXNzaW9uIiwKICAgICAgICAiQ291bmNpbCBvZiBMYXcgUmVwb3J0aW5nIHYgQUciLAogICAgICAgICJBRyB2IEJsYWtlIiwKICAgICAgICAiTWNHcmF0aCB2IENvaGVuIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTQzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkVxdWl0eSBmYXN0ZW5zIGl0c2VsZiBvbnRvIHRoZSBjb25zY2llbmNlcyBvZiB0aGUgdHJhbnNmZXJlZXMgKHRoZSB0cnVzdGVlcyksIGFuZCB3aWxsIG5vdCB0aGVyZWZvcmUgcGVybWl0IHVzZSBvZiB0aGUgcHJvcGVydHkgZm9yIG90aGVyIHRoYW4gdGhlIHB1cnBvc2Ugc3RhdGVkIGluIGEgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UXVpc3RjbG9zZTwvc3Bhbj4gdHJ1c3QuIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBIGNvbnN0cnVjdGl2ZSB0cnVzdCB3YXMgcGxlYWRlZC4iCiAgICBdLAogICAgIk5BTUUiOiAiUm90aG1hbnMgdiBGcmVlbWFuIE1hdGhldyBUcmVhc3VyZSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiUXVpc3RjbG9zZSBUcnVzdHMiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJRdWlzdGNsb3NlIFRydXN0cyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUm90aG1hbnMgdiBGcmVlbWFuIE1hdGhldyBUcmVhc3VyZSIsCiAgICAgICAgIkJhcmNsYXkncyBCYW5rIHYgUXVpc3RjbG9zZSBJbnZlc3RtZW50cyIsCiAgICAgICAgIlJlIEVWVFIiLAogICAgICAgICJSIHYgQ2xvd2VzIE5vIDIiLAogICAgICAgICJUd2luc2VjdHJhIHYgWWFyZGxleSIsCiAgICAgICAgIk1vc3MgdiBDb29wZXIiLAogICAgICAgICJSZSBHb2xheSIsCiAgICAgICAgIk5lbHNvbiB2IExhcmhvbHQiLAogICAgICAgICJSZSBTbGV2aW4iLAogICAgICAgICJHdWlubmVzcyB2IFNhdW5kZXJzIiwKICAgICAgICAiTWlscm95IHYgTG9yZCIsCiAgICAgICAgIlJlIEJhZGVuIChuby4gMikiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNDQiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIyMDEyIiwKICAgICJOQU1FIjogIkJpZWJlciB2IFRlYXRoZXJzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJRdWlzdGNsb3NlIFRydXN0cyIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiQmllYmVyIHYgVGVhdGhlcnMgTHRkIChJbiBMaXF1aWRhdGlvbikgWzIwMTJdIEVXQ0EgQ2l2IDE0NjYiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlF1aXN0Y2xvc2UgdHJ1c3RzIG1heSBiZSB1cGhlbGQgZXZlbiBpZiBub3QgYWxsIHRoZWlyIHB1cnBvcnRlZCBjb25kaXRpb25zIGFyZSBtZXQsIGFuZCBvbmNlIHRoZSBwdXJwb3NlIGlzIGJlZ3VuLCB0aGV5IGRpZS4iLAogICAgICAgICJVbnRpbCBzdWZmaWNpZW50IGZ1bmRzIGhhZCBiZWVuIGFjY3VtdWxhdGVkLCB0aGVyZSBoYWQgaW5kZWVkIGJlZW4gYSBRdWlzdGNsb3NlIHRydXN0LiBCdXQgYXMgc29vbiBhcyB0aGUgc2NoZW1lIHdhcyBwdXQgaW50byBvcGVyYXRpb24sIGl0cyBydWxlcyB0b29rIG92ZXIsIHRoZSB0cnVzdCBiZWNhbWUgZXh0aW5jdCwgYW5kIHRoZSBiZW5lZmljaWFyaWVzIHdlcmUgZnJlZWQgb2YgdGhlIFF1aXN0Y2xvc2Ugb2JsaWdhdGlvbi4iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIk1vbmV5IGhhZCBiZWVuIHBhaWQgZm9yIHRoZSBwdXJwb3NlIG9mIG1ha2luZyBUViBwcm9kdWN0aW9ucywgb24gY29uZGl0aW9uIHRoYXQgKGkpIHN1ZmZpY2llbnQgZnVuZHMgd2VyZSBhY3F1aXJlZCBmb3IgdGhlIHNjaGVtZSB0byBydW4gYW5kIChpaSkgdGhhdCBpdCBiZSB1c2VkIGZvciBjZXJ0aWZpZWQgcHJvZHVjdGlvbnMgb25seS4gVGhlIGZpcnN0IG9mIHRoZXNlIGNvbmRpdGlvbnMgd2FzIG1ldCwgYnV0IG5vdCB0aGUgc2Vjb25kLiIKICAgIF0KfSwKewogICAgIllFQVIiOiAiMjAxNSIsCiAgICAiQ0lUQVRJT04iOiAiQ2hhbGlub3IgdiBKdWxpZSBCZWxsaXMgJmFtcDsgQ28gWzIwMTVdIEVXQ0EgQ2l2IDU5IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRvIHJpc2UgYWJvdmUgYmVpbmcgc2ltcGx5IGEgY29udHJhY3R1YWwgbG9hbiwgdGhlcmUgbXVzdCBiZSA8c3BhbiBjbGFzcz1cImJkXCI+aW50ZW50aW9uPC9zcGFuPiBvZiB0aGVyZSBiZWluZyBhIFF1aXN0Y2xvc2UgdHJ1c3QuIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJJbnZlc3RvcnMgaW4gYSBmYWlsZWQgaW52ZXN0bWVudCBjb21wYW55IGNsYWltZWQgYSBRdWlzdGNsb3NlIHRydXN0LCBhcyB0aGVpciBpbnZlc3RtZW50IGhhZCBiZWVuIGV4Y2x1c2l2ZWx5IGZvciBhIHNwZWNpZmljIHB1cnBvc2UuIgogICAgXSwKICAgICJOQU1FIjogIkNoYWxpbm9yIHYgSnVsaWUgQmVsbGlzIiwKICAgICJOVU1CRVIiOiAiMTQ1Igp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiVW5hdXRob3Jpc2VkIFByb2ZpdHMgLSBCcmliZXMiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJGYWlyLURlYWxpbmciLAogICAgICAgICJSZW1lZGllcyBmb3IgVW5hdXRob3Jpc2VkIFByb2ZpdHMiLAogICAgICAgICJVbmF1dGhvcmlzZWQgUHJvZml0cyAtIENvcnBvcmF0ZSBPcHBvcnR1bml0eSIsCiAgICAgICAgIk5vIFByb2ZpdCBSdWxlIiwKICAgICAgICAiU2VsZi1EZWFsaW5nIiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgUmVsaWdpb24iLAogICAgICAgICJEaXNwb3NpdGlvbiBvZiBFcXVpdGFibGUgSW50ZXJlc3RzIiwKICAgICAgICAiRGlzaG9uZXN0eSBmb3IgRGlzaG9uZXN0IEFzc2lzdGFuY2UiLAogICAgICAgICJTZWNyZXQgVHJ1c3RzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIFN1YmplY3QiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNDYiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5IYWxsbWFya3M8L3NwYW4+PC9zcGFuPjxicj5CaXJrcyAoPHNwYW4gY2xhc3M9XCJpdFwiPjE5OTAsIDI2IFVuaXYgV0FMUiAxLCAxODwvc3Bhbj4pIGlkZW50aWZpZXMgaGFsbG1hcmtzL2NoYXJhY3RlcmlzdGljcyBvZiBhIGZpZHVjaWFyeSAmbWRhc2g7IHNvbWVvbmUgaGF2aW5nIDxzcGFuIGNsYXNzPVwiYmRcIj5kaXNjcmV0aW9uIGFuZCBwb3dlcjwvc3Bhbj4gdG8gbWFuYWdlIGFub3RoZXImIzgyMTc7cyBhZmZhaXJzLCBpbiBjaXJjcyBpbiB3aGljaCBpdCB3b3VsZCA8c3BhbiBjbGFzcz1cImJkXCI+bm90IGJlIHJlYXNvbmFibGU8L3NwYW4+IHRvIGV4cGVjdCB0aGUgbGF0dGVyIHRvIG1vbml0b3IgYW5kIHRha2UgcHJlY2F1dGlvbnMgYWdhaW5zdCB0aGUgZmlkdWNpYXJ5LCB0byBwcm90ZWN0IGhpcyBvd24gaW50ZXJlc3RzLjxicj5UaGVyZWZvcmUsIGEgZmlkdWNpYXJ5IGR1dHkgaXMgc3RhbXBlZCB3aXRoICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+VW5kZXJ0YWtpbmcgdG8gYWN0PC9zcGFuPiBmb3IgYW5vdGhlci48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5SZWxpYW5jZTwvc3Bhbj4gYnkgdGhlIG90aGVyLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlZ1bG5lcmFiaWxpdHk8L3NwYW4+LCBhY3R1YWwgb3IgcG90ZW50aWFsLCBvZiB0aGUgb3RoZXIuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICJSZWNlbnQgYXV0aG9yaXR5IGlzIGdpdmVuIGJ5IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJyaXN0b2wgYW5kIFdlc3QgQlMgdiBNb3RoZXc8L3NwYW4+LCBpbiB3aGljaCBhIGZpZHVjaWFyeSBkdXR5IGlzIGFuIDxzcGFuIGNsYXNzPVwiYmRcIj51bmRlcnRha2luZzwvc3Bhbj4gKHNvbGljaXRlZCBvciAmIzgyMTY7b2ZmaWNpb3VzbHkgYXNzdW1lZCYjODIxNzspIHRvIDxzcGFuIGNsYXNzPVwiYmRcIj5hY3QgaW4gYW5vdGhlciYjODIxNztzIGJlc3QgaW50ZXJlc3RzPC9zcGFuPiwgZWl0aGVyIGluIGdlbmVyYWwgb3IgaW4gc3BlY2lmaWMgYW5kIGxpbWl0ZWQgcmVzcGVjdHMuIEFjdGluZyBzZWxmbGVzc2x5IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+d2l0aCB1bmRpdmlkZWQgbG95YWx0eTwvc3Bhbj4gaXMgZXhwZWN0ZWQuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5DYXRlZ29yaWVzPC9zcGFuPjwvc3Bhbj48YnI+VGhlIGNhdGVnb3JpZXMgb2YgcmVsYXRpb25zaGlwcyBiZWFyaW5nIGZpZHVjaWFyeSBkdXRpZXMgaXMgbm90IGNsb3NlZC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RW5nbGlzaCB2IERlZGhhbSBWYWxlPC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cIml0XCI+SXQgY29tcHJpc2VzIGF0IGxlYXN0PC9zcGFuPiAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlByaW5jaXBsZTwvc3Bhbj4gdG8gPHNwYW4gY2xhc3M9XCJiZFwiPmFnZW50PC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkRpcmVjdG9yPC9zcGFuPiB0byA8c3BhbiBjbGFzcz1cImJkXCI+Y29tcGFueTwvc3Bhbj4gJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BYmVyZGVlbiBSYWlsd2F5IHYgQmxhaWtpZTwvc3Bhbj4uIE5vdGUgdGhhdCB0aGlzIGlzIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+IHRvIHRoZSBzaGFyZWhvbGRlcnMuIE4uQi4sIG9mIGNvdXJzZSwgdGhhdCBsYW5kbWFyayBvZiBFbmdsaXNoIGxlZ2FsIGhpc3RvcnksIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhbHN0b24gdiBIZWFkbGluZTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+UHJvbW90ZXI8L3NwYW4+IHRvIDxzcGFuIGNsYXNzPVwiYmRcIj5jb21wYW55PC9zcGFuPiwgYXMgYSBwcm9tb3RlciBjYW4gZW50ZXIgaW50byBjb250cmFjdHMgb24gYmVoYWxmIG9mIHRoZSBjb21wYW55IDxzcGFuIGNsYXNzPVwiaXRcIj5iZWZvcmU8L3NwYW4+IGl0cyBpbmNvcnBvcmF0aW9uLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkV4ZWN1dG9yPC9zcGFuPiB0byA8c3BhbiBjbGFzcz1cImJkXCI+YmVuZWZpY2lhcmllczwvc3Bhbj4gb2YgYSB3aWxsLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj5TZW5pb3I8L3NwYW4+IGVtcGxveWVlPC9zcGFuPiB0byA8c3BhbiBjbGFzcz1cImJkXCI+Y29tcGFueTwvc3Bhbj4sIHNob3VsZCB0aGF0IHNlbmlvcml0eSB0cmFuc2xhdGUgaW50byAgbm9uLW5lZ2xpZ2libGUgZGlzY3JldGlvbiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRlc2NvIHYgUG9vazwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+VHJ1c3RlZTwvc3Bhbj4gdG8gPHNwYW4gY2xhc3M9XCJiZFwiPmJlbmVmaWNpYXJ5PC9zcGFuPi48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+UHJlbWlzZWQgb24gPHNwYW4gY2xhc3M9XCJiZFwiPmRpc2NyZXRpb25hcnkgcG93ZXJzPC9zcGFuPiBiZWluZyBhIGhhbGxtYXJrIG9mIGZpZHVjaWFyeSBkdXRpZXMuIFRydXN0ZWVzIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhcmUgVHJ1c3RzPC9zcGFuPiwgdGhlbiwgd2hvIGxhY2sgc3VjaCBwb3dlciwgc2hvdWxkIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+IGJlIGNvbnNpZGVyZWQgZmlkdWNpYXJpZXMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UcnVzdGVlcyBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5JbXBvc2VkIFRydXN0czwvc3Bhbj4sIGFsc28sIHdobyBoYXZlIG5vdCA8c3BhbiBjbGFzcz1cImJkXCI+dm9sdW50YXJpbHkgYXNzdW1lZDwvc3Bhbj4gdHJ1c3RlZXNoaXAsIG1pZ2h0IG5vdCBvd2UgZmlkdWNpYXJ5IGR1dGllcy48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlNvbGRpZXI8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+U3B5PC9zcGFuPiB0byA8c3BhbiBjbGFzcz1cImJkXCI+dGhlIENyb3duPC9zcGFuPiwgYWNjb3JkaW5nIHRvIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlYWRpbmcgdiBBRzwvc3Bhbj4gKGFsdGhvdWdoIHRoZSBmaW5kaW5nIG1heSBiZSBtb3JlIDxzcGFuIGNsYXNzPVwiaXRcIj5jb250cml2ZWQgcmVhc29uPC9zcGFuPiBhbmQgbGVzcyA8c3BhbiBjbGFzcz1cIml0XCI+cmVhc29uZWQgcmF0aW88L3NwYW4+KSBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QUcgdiBCbGFrZTwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkNvbXBhcmVkIHRvIENvbnRyYWN0dWFsIERlYWxpbmdzPC9zcGFuPjwvc3Bhbj48YnI+VGhlIGNvdXJ0cyBoYXZlIGdlbmVyYWxseSBiZWVuIHJlbHVjdGFudCB0byB0cmVhdCBidXNpbmVzcyBkZWFsaW5ncywgZ2VuZXJhbGx5IHVuZGVydGFrZW4gYXQgYXJtJiM4MjE3O3MgbGVuZ3RoLCBvbiBhbiBlcXVhbCBmb290aW5nIHRvIGZpZHVjaWFyeSBkdXRpZXMuIFRoaXMgaXMgYmVjYXVzZSB0aGV5IGxhY2sgdGhlIGhhbGxtYXJrcyBjaGFyYWN0ZXJpc3RpYyBvZiBmaWR1Y2lhcnkgZHV0aWVzLCBvZiA8c3BhbiBjbGFzcz1cImJkXCI+dHJ1c3QgYW5kIGNvbmZpZGVuY2U8L3NwYW4+ICAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBvbGx5IFBlY2sgdiBOYWRpcjwvc3Bhbj4uIENvbmZpcm1lZCBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBHb2xkY29ycDwvc3Bhbj4uIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QnVzaW5lc3MgZGVhbGluZ3MgYXJlIDxzcGFuIGNsYXNzPVwiaXRcIj5pbmhlcmVudGx5PC9zcGFuPiBzZWxmLWludGVyZXN0ZWQ6IHRoZSBhbnRpdGhlc2lzIG9mIHRoZSBsb3lhbHR5IGFuZCBzZWxmbGVzc25lc3MgcmVxdWlyZWQgb2YgYSBmaWR1Y2lhcnkuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPk5vIFByb2ZpdCwgTm8gQ29uZmxpY3Q8L3NwYW4+PC9zcGFuPjxicj5BS0EgdGhlIFJ1bGUgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+S2VlY2ggdiBTYW5kZm9yZDwvc3Bhbj4uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJyYXkgdiBGb3JkPC9zcGFuPiBwZXIgTG9yZCBIZXJzaGVsbCBwcm92aWRlcyBhIHBpdGh5IHJlc3RhdGVtZW50IGluIHRpbWVzIGNsb3NlciB0byBvdXIgb3duLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+VW5hdXRob3Jpc2VkIFByb2ZpdHM8L3NwYW4+PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBydWxlIGZvcmJpZGRpbmcgPHNwYW4gY2xhc3M9XCJpdFwiPnNlY3JldDwvc3Bhbj4gb3IgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+dW5hdXRob3Jpc2VkIHByb2ZpdHMgZnJvbSBjb21tZXJjaWFsIG9wcG9ydHVuaXRpZXM8L3NwYW4+IG1heSBub3QgaW4gaXRzZWxmIHN0b3AgYSBmaWR1Y2lhcnkgZnJvbSBleHBsb2l0aW5nIGFuIG9wcG9ydHVuaXR5IGxlYXJudCBhYm91dCBhcyBhIGZpZHVjaWFyeSAmbWRhc2g7IGJ1dCBpdCB3aWxsIGNhdXNlIHRoZSBlcXVpdGFibGUgaW50ZXJlc3Qgb2YgdGhlIHByb2ZpdCB0byBiZWxvbmcgdG8gdGhlIHByaW5jaXBhbC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Qm9hcmRtYW4gdiBQaGlwcHM8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEZvcmJpZGRlbiB0b28gaXMgdGhlIHRha2luZyBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CcmliZXM8L3NwYW4+LCBvciB3aGF0ZXZlciBicmliZXIgYW5kIGJyaWJlZCBwcmVmZXIgdG8gY2FsbCB0aGVtLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZWFkaW5nIHYgQUc8L3NwYW4+LCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NYW5rYXJpb3VzIDI8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlbWVkaWVzIGZvciB1bmF1dGhvcmlzZWQgcHJvZml0czwvc3Bhbj4gd2VyZSBlc3RhYmxpc2hlZCBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MaXN0ZXIgdiBTdHViYnM8L3NwYW4+IHRvIGJlIG1lcmVseSBwZXJzb25hbC48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEJ1dCBhZnRlciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BRyBmb3IgTlogdiBSZWlkPC9zcGFuPiBmb3VuZCBhIHByb3ByaWV0YXJ5IHJlbWVkeSwgdGhlIGRvbWVzdGljIGNvdXJ0cyBiZWNhbWUgaW5jcmVhc2luZ2x5IGRpc3NhdGlzZmllZCB0aGF0LCBiZWluZyBhIFByaXZ5IENvdW5jaWwgZGVjaXNpb24sIGl0IHdhcyBub3Qgb24gdGhlIG1lbnUuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVGhlIGxhdyBmaW5hbGx5IGNoYW5nZWQgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWFua2FyaW91cyAyPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5TZWxmLURlYWxpbmcgYW5kIEZhaXItRGVhbGluZzwvc3Bhbj48L3NwYW4+PGJyPk1lZ2FycnkgVkMsIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRpdG8gdiBXYWRkZWxsIChObyAyKTwvc3Bhbj4sIGZvdW5kIHRoZXNlIHdlcmUgdHdvIGRpc3RpbmN0IGJ1dCA8c3BhbiBjbGFzcz1cIml0XCI+YWxsaWVkPC9zcGFuPiBydWxlcy4gVGhleSBhcmUgc3VidHlwZXMgb2YgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5ubyBjb25mbGljdDwvc3Bhbj4gcnVsZS4gSW4gYm90aCBzY2VuYXJpb3MsIHRoZSB0cnVzdGVlIGlzIGVmZmVjdGl2ZWx5IGJvdGggaGFsdmVzIG9mIHRoZSBjb250cmFjdCBvZiBzYWxlLiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNlbGYtRGVhbGluZzwvc3Bhbj4sIHdoaWNoIGlzIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+IGFsbG93ZWQsIGlzIHdoZXJlIHRoZSB0cnVzdGVlIHB1cmNoYXNlcyB0aGUgdHJ1c3QgcHJvcGVydHkuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5GYWlyLURlYWxpbmc8L3NwYW4+LCB3aGVyZSB0aGUgdHJ1c3RlZSBhY3F1aXJlcyA8c3BhbiBjbGFzcz1cImJkXCI+c29tZTwvc3Bhbj4gb2YgdGhlIGJlbmVmaWNpYWwgaW50ZXJlc3QsIGlzIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3QgY29tcGxldGVseTwvc3Bhbj4gcHJvaGliaXRlZC48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIlRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHR3byBpcyB0aGF0IHRoZSBjb3VydHMgd2lsbCBzaW1wbHkgc2V0IHNlbGYtZGVhbGluZyBhc2lkZSwgYmFycmluZyBleGNlcHRpb25zLiBXaXRoIGZhaXItZGVhbGluZywgdGhlICBjaXJjdW1zdGFuY2VzIG9mIHRoZSB0cmFuc2FjdGlvbiB3aWxsIGJlIGV4YW1pbmVkIHRvIGFzc2VzcyB3aGV0aGVyIGl0IHdhcywgaW4gZmFjdCwgPHNwYW4gY2xhc3M9XCJiZFwiPmZhaXI8L3NwYW4+LiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+UmVtdW5lcmF0aW9uIG9mIEZpZHVjaWFyaWVzPC9zcGFuPjwvc3Bhbj48YnI+VGhlIGdlbmVyYWwgcnVsZSBpcyB0aGF0IGZpZHVjaWFyeSBkdXRpZXMgYXJlIHBlcmZvcm1lZCA8c3BhbiBjbGFzcz1cImJkXCI+d2l0aG91dDwvc3Bhbj4gcmVtdW5lcmF0aW9uLCBldmVuIGlmIHRoZSByZW11bmVyYXRpb24gaXMgaW5kaXJlY3QsIG5vdCBjb21pbmcgZnJvbSB0aGUgdHJ1c3QgZnVuZCAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIE1hY2FkYW08L3NwYW4+LiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkZvciA8c3BhbiBjbGFzcz1cImJkXCI+dHJ1c3RlZXM8L3NwYW4+LCBmcm9tIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJvYmluc29uIHYgUGV0dDwvc3Bhbj4gJm1kYXNoOyAmIzgyMTY7YSB0cnVzdGVlIHNoYWxsIGhhdmUgbm8gYWxsb3dhbmNlIGZvciBoaXMgY2FyZSBhbmQgdHJvdWJsZTogcmVhc29uIHNlZW1zIHRvIGJlIHRoYXQgaWYgaGUgY291bGQsIHRydXN0IG1pZ2h0IGJlIGxvYWRlZCBhbmQgcmVuZGVyZWQgb2YgbGl0dGxlIHZhbHVlLiYjODIxNzsgV3V0Pzwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Rm9yIDxzcGFuIGNsYXNzPVwiYmRcIj5kaXJlY3RvcnM8L3NwYW4+LCB0aGVyZSBpcyB0aGVvcmV0aWNhbGx5IDxzcGFuIGNsYXNzPVwiYmRcIj5ubzwvc3Bhbj4gcmVtdW5lcmF0aW9uICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R3Vpbm5lc3MgdiBTYXVuZGVyczwvc3Bhbj47IGJ1dCB0aGVzZSBkYXlzLCB0aGUgZXhjZXB0aW9uIGhhcyBiZWNvbWUgdGhlIHJ1bGUuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Gb3IgPHNwYW4gY2xhc3M9XCJiZFwiPmRpcmVjdG9yLXRydXN0ZWVzPC9zcGFuPiwgdGhlcmUgZ2VuZXJhbGx5IDxzcGFuIGNsYXNzPVwiYmRcIj5pczwvc3Bhbj4gcmVtdW5lcmF0aW9uIGlmIHRoZXkgYmVjYW1lIGRpcmVjdG9ycyA8c3BhbiBjbGFzcz1cImJkXCI+YmVmb3JlPC9zcGFuPiBoYXZpbmcgYmVjb21lIGEgdHJ1c3RlZS48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIlMyOCBvZiB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VHJ1c3RlZXMgQWN0IDIwMDA8L3NwYW4+IGFsbG93cyB0cnVzdCBpbnN0cnVtZW50cyB0byBwcm92aWRlIGZvciBjb21wZW5zYXRpb24gZm9yIHNlcnZpY2VzIHJlbmRlcmVkIGJ5IHRydXN0ZWVzLiBJbiBkZWZhdWx0IG9mIHN1Y2ggYSBwcm92aXNpb24sIFMyOSBwZXJtaXRzIDxzcGFuIGNsYXNzPVwiYmRcIj5yZWFzb25hYmxlPC9zcGFuPiByZW11bmVyYXRpb24gaWYgdGhlcmUgaXMgd3JpdHRlbiBhZ3JlZW1lbnQgdG8gdGhlIHNhbWUgZWZmZWN0LiBTMzEgZW50aXRsZXMgdHJ1c3RlZSB0byByZWltYnVyc2VtZW50IG9mIHRoZWlyIDxzcGFuIGNsYXNzPVwiYmRcIj5leHBlbnNlczwvc3Bhbj4gZnJvbSB0aGUgdHJ1c3QgZnVuZCAmbWRhc2g7IDxzcGFuIGNsYXNzPVwiYmRcIj5pbmNsdWRpbmc8L3NwYW4+IGxlZ2FsIGV4cGVuc2VzIHJlbGF0ZWQgdG8gYWN0aW9ucyBvbiB0aGUgdHJ1c3QuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5FeGNlcHRpb25zIHRvIHRoZSBSdWxlIEFnYWluc3QgUmVtdW5lcmF0aW9uPC9zcGFuPjwvc3Bhbj48YnI+VGhlIGNvdXJ0IG1heSBhdXRob3JpemUgcGF5bWVudCBvZiByZW11bmVyYXRpb24gdW5kZXIgUzQyIG9mIHRoZSBUcnVzdGVlcyBBY3QgMTkyNSAmbWRhc2g7IGVpdGhlciBpbiBhZHZhbmNlIG9yIGV4IHBvc3QgZmFjdG8uIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SXQgbWF5IGJlIGFwcHJvcHJpYXRlIDxzcGFuIGNsYXNzPVwiYmRcIj5ldmVuPC9zcGFuPiBpZiB0aGVyZSYjODIxNztzIGJlZW4gd3Jvbmdkb2luZyAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk8mIzgyMTc7U3VsbGl2YW4gdiBNYW5hZ2VtZW50IEFnZW5jeTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5PciB3aGVyZSB0cnVzdGVlcyBoYXZlIGdvbmUgYWJvdmUgYW5kIGJleW9uZCB3aGF0IHdvdWxkIG5vcm1hbGx5IGJlIGV4cGVjdGVkICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgRHVrZSBvZiBOb3Jmb2xrJiM4MjE3O3MgU2V0dGxlbWVudCBUcnVzdHM8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5UaGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q3JhZG9jayB2IFBpcGVyPC9zcGFuPiBydWxlPC9zcGFuPjwvc3Bhbj48YnI+V2hlbiB0aGUgdHJ1c3RlZSBpcyBhIHNvbGljaXRvciwgaGUgb3Igc2hlIDxzcGFuIGNsYXNzPVwiYmRcIj53aWxsPC9zcGFuPiBiZSBlbnRpdGxlZCB0byBjaGFyZ2UgaGlzIHVzdWFsIHByb2Zlc3Npb25hbCBjb3N0cyBmb3IgbGVnYWwgd29yayBkb25lIGFzIGEgdHJ1c3RlZS4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiCiAgICBdLAogICAgIk5BTUUiOiAiRmlkdWNpYXJ5IER1dGllcyIKfSwKewogICAgIkNBVEVHT1JZIjogIkZpZHVjaWFyeSBEdXRpZXMgJm1kYXNoOyBTZWxmLURlYWxpbmciLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJGYWlyLURlYWxpbmciLAogICAgICAgICJVbmF1dGhvcmlzZWQgUHJvZml0cyAtIEJyaWJlcyIsCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIC0gQ29ycG9yYXRlIE9wcG9ydHVuaXR5IiwKICAgICAgICAiTm8gUHJvZml0IFJ1bGUiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJSZW1lZGllcyBmb3IgVW5hdXRob3Jpc2VkIFByb2ZpdHMiLAogICAgICAgICJGb3JtYWxpdGllcyBmb3IgSW50ZXIgVml2b3MgRXhwcmVzcyBUcnVzdHMiLAogICAgICAgICJGb3JtYWxpdGllcyBmb3IgVGVzdGFtZW50YXJ5IFRydXN0cyIsCiAgICAgICAgIkFkdmFuY2VtZW50IG9mIEVkdWNhdGlvbiIsCiAgICAgICAgIkVxdWl0eSB0ZW1wZXJzIHRoZSB3aW5kIHRvIHRoZSBTaG9ybiBMYW1iIiwKICAgICAgICAiQ2hhcml0eSBDb21taXNzaW9uZXIncyBHdWlkYW5jZSAtIFNlcHRlbWJlciAyMDEzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTQ3IiwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+U3VtbWFyeTwvc3Bhbj48L3NwYW4+PGJyPlN1Y2ggdHJhbnNhY3Rpb25zLCB3aGVyZSB0aGUgdHJ1c3RlZSBzZWxscyB0aGUgdHJ1c3QgcHJvcGVydHkgdG8gaGltc2VsZiAob3IgaW5kZWVkLCBidXlzIGl0IGZyb20gaGltc2VsZikgYXJlIDxzcGFuIGNsYXNzPVwiaXRcIj52b2lkIGFiIGluaXRvPC9zcGFuPi4gVGhpcyBpcyBiZWNhdXNlIHRoZSBpbnRlcmVzdHMgb2YgYnV5ZXIsIHRoZSB0cnVzdGVlLCBhbmQgdGhlIHNlbGxlciwgdGhlIGJlbmVmaWNpYXJpZXMsIGFyZSBmdW5kYW1lbnRhbGx5IGF0IG9kZHMgYXMgY29uY2VybnMgcHJpY2UuIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIGJ1eWVyIG5hdHVyYWxseSB3YW50cyB0byBwYXkgYXMgbGl0dGxlIGFzIHBvc3NpYmxlLCB0aGUgYmVuZWZpY2lhcmllcyB3YW50IHRvIHJlY2VpdmUgYXMgbXVjaCBhcyBwb3NzaWJsZS48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIlRoZSByaWdodCB0byB2b2lkIHRoZSBwdXJjaGFzZSBpcyB2YWxpZCBhZ2FpbnN0IDxzcGFuIGNsYXNzPVwiYmRcIj5hbnkgc3Vic2VxdWVudCBwdXJjaGFzb3I8L3NwYW4+IGZyb20gdGhlIHRydXN0ZWUgd2hvIGhhZCBub3RpY2Ugb2YgdGhlIHRydXN0ICZtZGFzaDsgYnV0IG5vdCBhZ2FpbnN0IGEgYm9uYSBmaWRlIHB1cmNoYXNvciBmb3IgdmFsdWUgd2hvIGRpZCBub3QuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5EZXRhaWw8L3NwYW4+PC9zcGFuPjxicj5UaGUgY29uZGl0aW9uIGZvciBvdmVycmVhY2hpbmcgaXMgKGVzc2VudGlhbGx5KSBwYXltZW50IG9mIHRoZSBwdXJjaGFzZSBwcmljZSB0byA8c3BhbiBjbGFzcz1cImJkXCI+YXQgbGVhc3QgdHdvPC9zcGFuPiBvZiB0aGUgdHJ1c3RlZXMgb3IgdGhlIHRydXN0ZWUgY29tcGFueS4gPHNwYW4gY2xhc3M9XCJpbGNcIj5RdWVyeTogaXMgdGhpcyBqdXN0IGZvciBsYW5kLCBzYW1lIGFzIFMyIExQQSAxOTI1Pzwvc3Bhbj4iLAogICAgICAgICJTdWNoIGEgdHJhbnNhY3Rpb24gd291bGQgYmUgPHNwYW4gY2xhc3M9XCJiZFwiPnZvaWQgYWIgaW5pdGlvPC9zcGFuPiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRlbnRvbiB2IERvbm5lcjwvc3Bhbj4sIG9yIDxzcGFuIGNsYXNzPVwiYmRcIj52b2lkYWJsZTwvc3Bhbj4sIHJlc2NpbmRhYmxlIGJ5IHRoZSBiZW5lZmljaWFyaWVzICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RXggcCBMYWNleTwvc3Bhbj4sIGFuZCB0aGlzIGlzIG5vdCBjaGFuZ2VkIGJ5IHRoZSBob25lc3R5IG9mIHRoZSB0cnVzdGVlICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RXggcCBKYW1lczwvc3Bhbj4uIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5SYXRpb25hbGU8L3NwYW4+PC9zcGFuPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+RXhjZXB0aW9uczwvc3Bhbj48L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIGluc3RydW1lbnQgb2YgYSB0cnVzdCBtYXkgZXhwcmVzc2x5IGF1dGhvcmlzZXMgdGhlIHB1cmNoYXNlIG9mIGl0cyBwcm9wZXJ0eSBieSBhIHRydXN0ZWUuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5PciB0aGUgY2FzZSBtYXkgaGF2ZSA8c3BhbiBjbGFzcz1cIml0XCI+dmVyeTwvc3Bhbj4gZXhjZXB0aW9uYWwgZmFjdHMgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ib2xkZXIgdiBIb2xkZXI8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+T3IgdGhlIHB1cmNoYXNlIG1heSBoYXZlIGJlZW4gaW4gZXhpc3RlbmNlIDxzcGFuIGNsYXNzPVwiaXRcIj5iZWZvcmU8L3NwYW4+IHRoZSBmaWR1Y2lhcnkgZHV0eSBhcm9zZS4gRS5nLiwgd2VyZSB0aGUgZXhlY3V0b3IgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SG9sZGVyIHYgSG9sZGVyPC9zcGFuPiB0byBlbnRlciBpbnRvIGEgY29udHJhY3QgZm9yIHNhbGUgd2l0aCB0aGUgdGVzdGF0b3IsIHdobyB3YXMgdGhlbiB0byBkaWUgYmVmb3JlIGNvbnZleWFuY2UuPC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJTZWxmLURlYWxpbmciCiAgICBdLAogICAgIk5BTUUiOiAiU2VsZi1EZWFsaW5nIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRmlkdWNpYXJ5IER1dGllcyAmbWRhc2g7IEZhaXItRGVhbGluZyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiVW5hdXRob3Jpc2VkIFByb2ZpdHMgLSBDb3Jwb3JhdGUgT3Bwb3J0dW5pdHkiLAogICAgICAgICJTZWxmLURlYWxpbmciLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJGaWR1Y2lhcnkgRHV0aWVzIiwKICAgICAgICAiTm8gUHJvZml0IFJ1bGUiLAogICAgICAgICJSZW1lZGllcyBmb3IgVW5hdXRob3Jpc2VkIFByb2ZpdHMiLAogICAgICAgICJVbmF1dGhvcmlzZWQgUHJvZml0cyAtIEJyaWJlcyIsCiAgICAgICAgIlF1aXN0Y2xvc2UgVHJ1c3RzIC0gQW5hbHlzaXMiLAogICAgICAgICJDaGFyaXR5IC0gRGVmaW5pdGlvbnMiLAogICAgICAgICJJbmNvbXBsZXRlIENvbnN0aXR1dGlvbiBhbmQgRmFpbGVkIEdpZnRzIiwKICAgICAgICAiQ2hhcml0eSBDb21taXNzaW9uZXIncyBHdWlkYW5jZSAtIFNlcHRlbWJlciAyMDEzIiwKICAgICAgICAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyAtIEFzc2lzdGFuY2UgZm9yIFZvbHVudGVlcnMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNDgiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5TdW1tYXJ5PC9zcGFuPjwvc3Bhbj48YnI+SGVyZSwgdGhlIHRydXN0ZWUgcHVyY2hhc2VzIDxzcGFuIGNsYXNzPVwiaXRcIj5zb21lPC9zcGFuPiBvZiB0aGUgYmVuZWZpY2lhbCBpbnRlcmVzdC4gVGhleSBjb250aW51ZSBhcyBhIHRydXN0ZWUsIGJ1dCBiZWNvbWUgYWxzbyBhIGJlbmVmaWNpYXJ5LiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+Q29uZGl0aW9uczwvc3Bhbj48L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Q29tcGV0ZW50IGFuZCBpbmRlcGVuZGVudCBsZWdhbCBhZHZpY2UgaGFzIGJlZW4gcHJvdmlkZWQgdG8gdGhlIGJlbmVmaWNpYXJpZXMsIHRoZSBlbnN1cmUgdGhlIHB1cmNoYXNlIHByaWNlIGlzIGZhaXIuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgdHJ1c3RlZSBtdXN0IG1ha2UgYSBmdWxsIGRpc2Nsb3N1cmUgb2YgYWxsIHRoZSBmYWN0cyByZWxhdGluZyB0byB0aGUgcHJvcGVydHkuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlByaWNlPC9zcGFuPjwvc3Bhbj48YnI+VGhlIG1hcmtldCBwcmljZSBpcyBvZnRlbiBhIGdvb2QgaW5kaWNhdGlvbiBvZiBhIGZhaXIgcHJpY2UsIGJ1dCAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+RGVzcGVyYXRpb24gdG8gc2VsbCBvbiB0aGUgcGFydCBvZiB0aGUgYmVuZWZpY2lhcnkgbWF5IG1lYW4gYSBsb3dlciBwcmljZSB3b3VsZCBiZSBmYWlyLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VW5kdWUgaW5mbHVlbmNlLCBpbiBjb21iaW5hdGlvbiB3aXRoIGEgbWFya2V0IHByaWNlLCB3b3VsZCBiZSBwcm9oaWJpdGVkLjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGaWR1Y2lhcnkgRHV0aWVzIiwKICAgICAgICAiRmFpci1EZWFsaW5nIgogICAgXSwKICAgICJOQU1FIjogIkZhaXItRGVhbGluZyIKfSwKewogICAgIkNBVEVHT1JZIjogIkZpZHVjaWFyeSBEdXRpZXMgJm1kYXNoOyBVbmF1dGhvcmlzZWQgUHJvZml0cyAmbWRhc2g7IENvcnBvcmF0ZSBPcHBvcnR1bml0eSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiVW5hdXRob3Jpc2VkIFByb2ZpdHMgLSBCcmliZXMiLAogICAgICAgICJObyBQcm9maXQgUnVsZSIsCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJGYWlyLURlYWxpbmciLAogICAgICAgICJTZWxmLURlYWxpbmciLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJSZW1lZGllcyBmb3IgVW5hdXRob3Jpc2VkIFByb2ZpdHMiLAogICAgICAgICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzIC0gQXNzaXN0YW5jZSBmb3IgVm9sdW50ZWVycyIsCiAgICAgICAgIkVxdWl0eSB0ZW1wZXJzIHRoZSB3aW5kIHRvIHRoZSBTaG9ybiBMYW1iIiwKICAgICAgICAiQWR2YW5jZW1lbnQgb2YgUmVsaWdpb24iLAogICAgICAgICJDaGFyaXR5IC0gRGVmaW5pdGlvbnMiLAogICAgICAgICJEaXNob25lc3R5IGZvciBEaXNob25lc3QgQXNzaXN0YW5jZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE0OSIsCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJBS0EiOiAiVW5hdXRob3Jpc2VkIFByb2ZpdHMgZnJvbSBDb3Jwb3JhdGUgT3Bwb3J0dW5pdGllczsgU2VjcmV0IFByb2ZpdHMiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlNlZSBhbHNvIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlVuYXV0aG9yaXNlZCBQcm9maXRzIC0gQnJpYmVzPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmVtZWRpZXMgZm9yIFVuYXV0aG9yaXNlZCBQcm9maXRzPC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkRvY3RyaW5lIG9mIENvcnBvcmF0ZSBPcHBvcnR1bml0eTwvc3Bhbj48L3NwYW4+PGJyPlRoZSBkaXNjb3Zlcnkgb2YgYSBjb3Jwb3JhdGUgb3Bwb3J0dW5pdHkgYnkgYSBmaWR1Y2lhcnkgbXVzdCBiZSBvYnRhaW5lZCA8c3BhbiBjbGFzcz1cImJkXCI+Zm9yIHRoZSBwcmluY2lwYWw8L3NwYW4+IHRoZSBjb21wYW55LiBUaGUgb25seSBkZWZlbmNlIGZvciBub3QgZG9pbmcgc28gaXMgZnVsbCBkaXNjbG9zdXJlL2F1dGhvcmlzYXRpb24gJm1kYXNoOyBpbiB3aGljaCBjYXNlIGl0IHdvdWxkbiYjODIxNzt0IGJlIHNlY3JldC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmVnYWwgQ2luZW1hcyB2IEd1bGxpdmVyPC9zcGFuPi4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JdCBhcHBsaWVzIGV2ZW4gd2hlbiByZWdyZXR0YWJsZSBhbmQgcGVydmVyc2UgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Cb2FyZG1hbiB2IFBoaXBwczwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JdCBkZWZpbml0ZWx5IGFwcGxpZXMgd2hlbiB0aGUgZmlkdWNpYXJ5IGhhcyBiZWVuIHNuZWFreSAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkluZHVzdHJpYWwgRGV2ZWxvcG1lbnQgdiBDb29sZXk8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QXV0aG9yaXNhdGlvbiB0byBtYWtlIHByb2ZpdHMgbWF5IGJlIGluZWZmZWN0aXZlIGZvciB3b250IG9mIHBvd2VyICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R3Vpbm5lc3MgdiBTYXVuZGVyczwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgcnVsZSBhcHBsaWVzIGV2ZW4gd2hlbiB0aGUgcHJpbmNpcGFsIGRlY2xhcmVkIGl0c2VsZiBub3QgaW50ZXJlc3RlZCBpbiBhbnkgc3VjaCBvcHBvcnR1bml0aWVzICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Qmh1bGxhciB2IEJodWxsYXI8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5EZWZlbmNlczwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiYmRcIj5GdWxsIGRpc2Nsb3N1cmUgYW5kIGNvcnJlY3QgYXV0aG9yaXphdGlvbjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5TMTc1IG9mIENvbXBhbmllcyBBY3QgMjAwNi4gQnJlYWNoZXMgb2YgY29uZmxpY3Qgb2YgaW50ZXJlc3QgY2FuIGJlIGF1dGhvcml6ZWQgYnkgaW5kZXBlbmRlbnQgYm9hcmQgb2YgZGlyZWN0b3JzLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+UzIzOSwgJiM4MjE2O2FsbCBvdGhlciBicmVhY2hlcyBtdXN0IGJlIHJhdGlmaWVkIGJ5IG9yZGluYXJ5IHJlc29sdXRpb24gKDUwKyUgb2Ygc2hhcmVzKSYjODIxNjsgPHNwYW4gY2xhc3M9XCJpbGNcIj5DZi4gJiM4MjE2O3NwZWNpYWwgcmVzb2x1dGlvbiYjODIxNzsgaW4gd2hpY2ggY2FzZSBpdFx1MjAxOXMgNzUrJTwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIkluIDxzcGFuIGNsYXNzPVwiaXRcIj5vdGhlcjwvc3Bhbj4ganVyaXNkaWN0aW9ucywgPHNwYW4gY2xhc3M9XCJiZFwiPmZ1bGwgYW5kIGhvbmVzdCBkaXNjbG9zdXJlPC9zcGFuPiBieSBkaXJlY3RvcnMsIHBsdXMgIDxzcGFuIGNsYXNzPVwiYmRcIj5yZWplY3Rpb24gb2YgdGhlIG9wcG9ydHVuaXR5PC9zcGFuPiBieSB0aGUgY29tcGFueS4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5RdWVlbnNsYW5kIE1pbmVzIHYgSHVkc29uPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGVzbyBTaWx2ZXIgTWluZXMgdiBDcm9wcGVyPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5UZXJtaW5hdGlvbiBvZiBGaWR1Y2lhcnkgRHV0eTwvc3Bhbj48YnI+RmlkdWNpYXJ5IGR1dGllcyBkb24mIzgyMTc7dCBiaXRlIGZvciA8c3BhbiBjbGFzcz1cImJkXCI+bGlmZTwvc3Bhbj4uIElmIGEgZGlyZWN0b3IgcmVzaWducyBhbmQgc3Vic2VxdWVudGx5IGV4cGxvaXRzIGEgYnVzaW5lc3Mgb3Bwb3J0dW5pdHksIHdoZXRoZXIgb3Igbm90IHRoZSBmaWR1Y2lhcnkgZHV0eSBoYXMgYmVlbiBicmVhY2hlZCB3aWxsIGxhcmdlbHkgdHVybiBvbiB0aGUgZmFjdHMuIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SW5kdXN0cmlhbCBEZXZlbG9wbWVudCB2IENvb2xleTwvc3Bhbj4gdGhlIGludGVudGlvbiB3YXMgbWFuaWZlc3RseSBkaXNob25lc3QuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CYWxzdG9uIHYgSGVhZGxpbmU8L3NwYW4+LCBieSBjb250cmFzdCwgdGhlcmUgd2FzIGdlbnVpbmUgYW5kIHJlYXNvbmFibGUgZGlzc2F0aXNmYWN0aW9uIHdpdGggdGhlIHByaW5jaXBhbC4gVGhlIGNvcnBvcmF0ZSBvcHBvcnR1bml0eSBjb25zaXN0ZWQsIGluIGVmZmVjdCwgb2Ygc2F2aW5nIHRoZSBiYWNvbiBvZiBvbmUgb2YgQmFsc3RvbiYjODIxNztzIGNsaWVudHMsIGJ5IHNldHRpbmcgdXAgc2hvcCB0byBtYWtlIGEgcHJvZHVjdCBvbiB3aGljaCB0aGUgY2xpZW50IGRlcGVuZGVkLCBidXQgZm9yIHdoaWNoIEJhbHN0b24gaGFkIGphY2tlZCB1cCB0aGUgcHJpY2UgZml2ZS1mb2xkIGFuZCB3b3VsZCB0YWtlIG9yZGVycyBvbmx5IGZvciBhIGxpbWl0ZWQgcGVyaW9kLjxicj5TZWUgYWxzbyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Jc2xhbmQgRXhwb3J0IHYgVW1tYTwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICJTZWUgYWxzbyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZW1lZGllcyBmb3IgVW5hdXRob3Jpc2VkIFByb2ZpdHM8L3NwYW4+IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGaWR1Y2lhcnkgRHV0aWVzIiwKICAgICAgICAiVW5hdXRob3Jpc2VkIFByb2ZpdHMiLAogICAgICAgICJDb3Jwb3JhdGUgT3Bwb3J0dW5pdHkiCiAgICBdLAogICAgIk5BTUUiOiAiVW5hdXRob3Jpc2VkIFByb2ZpdHMgLSBDb3Jwb3JhdGUgT3Bwb3J0dW5pdHkiCn0sCnsKICAgICJDQVRFR09SWSI6ICJGaWR1Y2lhcnkgRHV0aWVzICZtZGFzaDsgVW5hdXRob3Jpc2VkIFByb2ZpdHMgJm1kYXNoOyBCcmliZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIC0gQ29ycG9yYXRlIE9wcG9ydHVuaXR5IiwKICAgICAgICAiTm8gUHJvZml0IFJ1bGUiLAogICAgICAgICJGaWR1Y2lhcnkgRHV0aWVzIiwKICAgICAgICAiUmVtZWRpZXMgZm9yIFVuYXV0aG9yaXNlZCBQcm9maXRzIiwKICAgICAgICAiRmFpci1EZWFsaW5nIiwKICAgICAgICAiS25vd2luZyBSZWNlaXB0IiwKICAgICAgICAiU2VsZi1EZWFsaW5nIiwKICAgICAgICAiT3RoZXIgQ2hhcml0YWJsZSBQdXJwb3NlcyB1bmRlciBDaGFyaXRpZXMgQWN0IDIwMTEiLAogICAgICAgICJDaGFyaXRpZXMiLAogICAgICAgICJQb2xpdGljYWwgUHVycG9zZSBvZiBhIENoYXJpdHkiLAogICAgICAgICJBZHZhbmNlbWVudCBvZiBFZHVjYXRpb24iLAogICAgICAgICJGb3JtYWxpdGllcyBmb3IgSW50ZXIgVml2b3MgRXhwcmVzcyBUcnVzdHMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNTAiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiQUtBIjogIkJyaWJlcyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiVGhlIG1vcmUgb2J2aW91c2x5IHNpbmlzdGVyIGNvdW50ZXJwYXJ0IHRvIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlVuYXV0aG9yaXNlZCBQcm9maXRzIC0gQ29ycG9yYXRlIE9wcG9ydHVuaXR5PC9zcGFuPiwgdGhpcyBoYXMgYSB2YXJpZXR5IG9mIG90aGVyIG5hbWVzLCB3aGljaCBhcmUgdW5pdGVkIGJ5IHRoZWlyIHByaW1hIGZhY2llIGRvZGdpbmVzcywgYW5kIHVzZSBvZiBkZWFkLWdpdmVhd2F5IHdvcmRzIGxpa2UgJiM4MjE2O3NwZWNpYWwuJiM4MjE3OyBFLmcuLCAmIzgyMTY7c3BlY2lhbCBjb21taXNzaW9uJiM4MjE3OywgJiM4MjE2O3NwZWNpYWwgcGF5bWVudCYjODIxNzssIGV0Yy4gSW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGVzY28gdiBQb29rPC9zcGFuPiwgaXQgd2FzIGEgJiM4MjE2O2NvbnN1bHRhbmN5IGZlZS4mIzgyMTc7IEluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1hbmthcmlvdXMgMTwvc3Bhbj4sICYjODIxNjticm9rZXJhZ2UgZmVlLiYjODIxNzsiLAogICAgICAgICJUaGUganVyaXNwcnVkZW50aWFsIGJlZHJvY2sgaXMgdGhhdCBicmliZXJ5IGlzIDxzcGFuIGNsYXNzPVwiYmRcIj5iYWQ8L3NwYW4+LCBhbmQgdGhhdCBpdHMgZmFjZSBzaG91bGQgYmVhciB0aGUgc2NhcnMgYW5kIGJydWlzZXMgb2YgcmVwZWF0ZWQsIHZpb2xlbnQgYXBwbGljYXRpb25zIG9mIHRoZSBsYXcmIzgyMTc7cyBqYWNrYm9vdC4gRm9yIHRoaXMgcmVhc29uLCB0aGUgYmFyIGZvciBsaWFiaWxpdHkgaXMgZmFpcmx5IGxvdy4gIE9uZSB3YXkgb3IgYW5vdGhlciwgYSBmaWR1Y2lhcnkgd2hvIHJlY2VpdmVzIGEgYnJpYmUgY2FuIGNvdW50IG9uIGl0IGJlaW5nIHRha2VuIG9mZiBoaW0uIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QXMgYSA8c3BhbiBjbGFzcz1cImJkXCI+cGVyc29uYWwgbGlhYmlsaXR5IHRvIGFjY291bnQ8L3NwYW4+ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TGlzdGVyIHYgU3R1YmJzPC9zcGFuPiwgYWx0aG91Z2ggdGhpcyBpcyBkZWZlYXRlZCB3aXRoIGVhc2UuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JbiA8c3BhbiBjbGFzcz1cImJkXCI+ZXF1aXRhYmxlIGFjY291bnRpbmc8L3NwYW4+ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmVhZGluZyB2IEFHPC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJpbGNcIj5UT0RPOiBVbnN1cmUsIGRvdWJ0ZnVsLCBtYXkgaGF2ZSByZWFkIGhlYWRub3RlcyB0b28gcXVpY2tseS4gSXQgbWF5IGp1c3QgYmUgJiM4MjE2O2FjY291bnRpbmcgb2YgcHJvZml0cywmIzgyMTc7IGkuZS4sIGZvbGxvd2luZyBMaXN0ZXIuIDxzcGFuIGNsYXNzPVwiYmRcIj5DaGVjayBpbiBjYXNlIGNhcmQuPC9zcGFuPjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkluIFByaXZ5IENvdW5jaWwganVyaXNkaWN0aW9ucywgYnkgPHNwYW4gY2xhc3M9XCJiZFwiPmNvbnN0cnVjdGl2ZSB0cnVzdDwvc3Bhbj4gJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BRyBmb3IgSEsgdiBSZWlkPC9zcGFuPiBVS1BDLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SW4gZG9tZXN0aWMgY2FzZXMsIHRvbywgc2luY2UgMjAxNSAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1hbmthcmlvdXMgMjwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICJNaXhpbmcgdGhlIGJyaWJlIHdpdGggdGhlIG1haW4gZnVuZCwgZS5nLiwgcGF5aW5nIDExMCUgYXMgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGFyYXlkYW4gSG9sZGluZ3MgdiBTb2xsYW5kPC9zcGFuPiwgbWF5IGdpdmUgcmlzZSB0byBhIHN0cm9uZ2VyIHJlbWVkeS4iLAogICAgICAgICJTZWUgYWxzbyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5VbmF1dGhvcmlzZWQgUHJvZml0cyAtIENvcnBvcmF0ZSBPcHBvcnR1bml0eTwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlbWVkaWVzIGZvciBVbmF1dGhvcmlzZWQgUHJvZml0czwvc3Bhbj4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlByb2ZpdHMgZnJvbSBhIEJyaWJlPzwvc3Bhbj48L3NwYW4+PGJyPkluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFHIGZvciBISyB2IFJlaWQ8L3NwYW4+LCBMb3JkIFRlbXBsZW1hbiBkZWNpZGVkIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkxpc3RlciB2IFN0dWJiczwvc3Bhbj4gd2FzIHdyb25nIG9uIHRoaXMgcG9pbnQsIG9uIHB1YmxpYyBwb2xpY3kgZ3JvdW5kcyBvZiBhdm9pZGluZyB1bmp1c3QgZW5yaWNobWVudC4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5DaXRpbmcgdGhlIG1heGltIDxzcGFuIGNsYXNzPVwiaXRcIj4mIzgyMTY7ZXF1aXR5IGxvb2tzIGFzIGRvbmUgdGhhdCB3aGljaCBvdWdodCB0byBiZSBkb25lJiM4MjE3Ozwvc3Bhbj4sIGhpcyB2aWV3IHdhcyB0aGF0IGEgYnJpYmUtdGFrZXIgPHNwYW4gY2xhc3M9XCJpdFwiPm91Z2h0PC9zcGFuPiB0byBnaXZlIHRoZSBicmliZSBzdHJhaWdodCB0byB0aGUgcHJpbmNpcGFsLjwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5NYXJnYXJldCBDYXJyYW4mIzgyMTc7cyB2aWV3IG9uIHRoaXMgaXMgdGhhdCBpdCYjODIxNztzIDxzcGFuIGNsYXNzPVwiYmRcIj5mbGF0IG91dCB3cm9uZzwvc3Bhbj4sIGEgY2xlYXIgbWlzdXNlIG9mIHRoZSBtYXhpbS4gV2hhdCA8c3BhbiBjbGFzcz1cIml0XCI+b3VnaHQ8L3NwYW4+IHRvIGhhdmUgYmVlbiBkb25lLCBpcyBlaXRoZXIgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj4gdGFraW5nIHRoZSBicmliZSBpbiB0aGUgZmlyc3QgcGxhY2UsIG9yIDxzcGFuIGNsYXNzPVwiYmRcIj5naXZpbmcgaXQgc3RyYWlnaHQgYmFjazwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkl0IHdhcyBjb25zaWRlcmVkIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNpbmNsYWlyIEludmVzdG1lbnRzIHYgVmVyc2FpbGxlczwvc3Bhbj4sIGJ1dCBjb3VsZCBub3QgYmUgYXBwbGllZCBpbiBmYXZvdXIgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TGlzdGVyIHYgU3R1YmJzPC9zcGFuPi4gSW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWFua2FyaW91cyAyPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U2luY2xhaXI8L3NwYW4+IHdhcyBxdWlldGx5IHNob3ZlZCB0byBvbmUgc2lkZSwgYW5kIGEgcHJvcHJpZXRhcnkgY2xhaW0gc3VjY2VlZGVkLjxicj48c3BhbiBjbGFzcz1cImlsY1wiPlRPRE8gR2V0IHJpZCBvZiB0aGlzIGluIGZhdm91ciBvZiB0aGUgc3R1ZmYgaW4gUmVtZWRpZXMgZm9yIFVuYXV0aG9yaXNlZCBQcm9maXRzPzwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIiwKICAgICAgICAiQnJpYmVzIgogICAgXSwKICAgICJOQU1FIjogIlVuYXV0aG9yaXNlZCBQcm9maXRzIC0gQnJpYmVzIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRmlkdWNpYXJ5IER1dGllcyAmbWRhc2g7IFJlbWVkaWVzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJVbmF1dGhvcmlzZWQgUHJvZml0cyAtIEJyaWJlcyIsCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJTZWxmLURlYWxpbmciLAogICAgICAgICJObyBQcm9maXQgUnVsZSIsCiAgICAgICAgIktub3dpbmcgUmVjZWlwdCIsCiAgICAgICAgIkZhaXItRGVhbGluZyIsCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIC0gQ29ycG9yYXRlIE9wcG9ydHVuaXR5IiwKICAgICAgICAiRm9ybWFsaXRpZXMgZm9yIFRlc3RhbWVudGFyeSBUcnVzdHMiLAogICAgICAgICJUaGUgQ3ktcHJcdTAwZThzIERvY3RyaW5lIiwKICAgICAgICAiRGlzaG9uZXN0IEFzc2lzdGFuY2UiLAogICAgICAgICJQcmVjYXRvcnkgV29yZHMiLAogICAgICAgICJQcmV2ZW50aW9uIG9yIFJlbGllZiBvZiBQb3ZlcnR5IgogICAgXSwKICAgICItLUVORC0tIjogIiIsCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJOVU1CRVIiOiAiMTUxIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+U3VtbWFyeTwvc3Bhbj48YnI+VGhpcyBjYW4gYmUgKGkpIDxzcGFuIGNsYXNzPVwiYmRcIj5yZXNjaXNzaW9uPC9zcGFuPiwgaWYgcHJhY3RpY2FsbHkgcG9zc2libGU7IChpaSkgPHNwYW4gY2xhc3M9XCJiZFwiPnBlcnNvbmFsIGxpYWJpbGl0eTwvc3Bhbj4sIHdoaWNoIGlzIGxpa2VseSB0byBiZSB3b3J0aGxlc3MgYWdhaW5zdCBhIHNlbGYtcmVzcGVjdGluZyBmcmF1ZHN0ZXI7ICZtZGFzaDsgb3IgKGlpaSkgcHJvcHJpZXRhcnkgY2xhaW1zLCBmYXIgJiM4MjE2O3N0cm9uZ2VyLiYjODIxNzsuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlJlc2Npc3Npb24gYW5kIFBlcnNvbmFsIExpYWJpbGl0eTwvc3Bhbj4iLAogICAgICAgICI8b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+UmVzY2lzc2lvbjwvc3Bhbj4sIGFzIGEgcHJhY3RpY2FsIG1hdHRlciwgaXMgb25seSBsaWtlbHkgdG8gYmUgYXZhaWxhYmxlIGluIHRoZSBhYnNlbmNlIG9mIGZyYXVkLCBhcyBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ib2xkZXIgdiBIb2xkZXI8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlBlcnNvbmFsIGxpYWJpbGl0eSB0byBhY2NvdW50PC9zcGFuPiBpcyBzdWJqZWN0IHRvIHRoZSBzYW1lIHdoZWV6eSBhbmFlbWlhIGFzIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPnRyYWNpbmcgYXQgY29tbW9uIGxhdzwvc3Bhbj4sIGkuZS4sIGRlZmVhdGVkIGJ5IGJhbmtydXB0Y3kgb3IgcnVkaW1lbnRhcnkgZWZmb3J0cyBoYXZlIGJlZW4gbWFkZSB0byBkaXNwb3NlIG9mIHRoZSBwcm9wZXJ0eS4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TGlzdGVyIHYgU3R1YmJzPC9zcGFuPi48L3NwYW4+PC9saT48L29sPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Qcm9wcmlldGFyeSBSZW1lZGllczwvc3Bhbj4iLAogICAgICAgICI8b2w+PGxpIHN0eWxlPVwiY291bnRlci1yZXNldDogaXRlbSAyO1wiPjxzcGFuIGNsYXNzPVwibmxcIj4gVGhlIG9yaWdpbmFsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkxpc3RlciB2IExpc3Rlcjwvc3Bhbj4gcG9zaXRpb24gdGhhdCBwcm9wcmlldGFyeSByZW1lZGllcyB3ZXJlIHVuYXZhaWxhYmxlIGZvciB1bmF1dGhvcmlzZWQgcHJvZml0cyB3YXMgc3ViamVjdCB0byBjcml0aWNpc20gaW4gdGhlIGhpZ2hlciBkb21lc3RpYyBjb3VydHMgYXMgc29vbiBhcyB0aGUgUHJpdnkgQ291bmNpbCBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BRyBmb3IgSEsgdiBSZWlkPC9zcGFuPiBkZWNpZGVkIHRoZXkgd2VyZSAmbWRhc2g7IGUuZy4sIE5ldWJlcmdlciBNUiBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TaW5jbGFpciB2IFZlcnNhaWxsZXM8L3NwYW4+LiBPZiB0aGlzIGhlIG1ha2VzIG5vIG1lbnRpb24gd2hlbiwgYSBmZXcgeWVhcnMgbGF0ZXIgaW4gdGhlIFVLU0MsIGhlIGZvdW5kIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1hbmthcmlvdXMgMjwvc3Bhbj4gdGhhdCB0aGUgZ2VuZXJhbCBydWxlIDxzcGFuIGNsYXNzPVwiYmRcIj5kaWQ8L3NwYW4+IGdpdmUgcHJvcHJpZXRhcnkgcmVtZWRpZXMgZm9yIGEgZmlkdWNpYXJ5JiM4MjE3O3MgdW5hdXRob3Jpc2VkIHByb2ZpdHMuPC9zcGFuPjwvbGk+PC9vbD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJSZW1lZGllcyIKICAgIF0sCiAgICAiTkFNRSI6ICJSZW1lZGllcyBmb3IgVW5hdXRob3Jpc2VkIFByb2ZpdHMiCn0sCnsKICAgICJDQVRFR09SWSI6ICJGaWR1Y2lhcnkgRHV0aWVzICZtZGFzaDsgTm8gUHJvZml0IFJ1bGUiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIC0gQnJpYmVzIiwKICAgICAgICAiRmFpci1EZWFsaW5nIiwKICAgICAgICAiS25vd2luZyBSZWNlaXB0IiwKICAgICAgICAiU2VsZi1EZWFsaW5nIiwKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIlJlbWVkaWVzIGZvciBVbmF1dGhvcmlzZWQgUHJvZml0cyIsCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIC0gQ29ycG9yYXRlIE9wcG9ydHVuaXR5IiwKICAgICAgICAiRXF1aXR5IHdpbGwgbm90IGFsbG93IGEgU3RhdHV0ZSB0byBiZSBhbiBDbG9hayBmb3IgRnJhdWQiLAogICAgICAgICJGb3JtYWxpdGllcyBmb3IgSW50ZXIgVml2b3MgRXhwcmVzcyBUcnVzdHMiLAogICAgICAgICJRdWlzdGNsb3NlIFRydXN0cyAtIEFuYWx5c2lzIiwKICAgICAgICAiRGlzaG9uZXN0eSBmb3IgRGlzaG9uZXN0IEFzc2lzdGFuY2UiLAogICAgICAgICJEaXNwb3NpdGlvbiBvZiBFcXVpdGFibGUgSW50ZXJlc3RzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTUyIiwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIldlaWdodHkgYXV0aG9yaXR5IGZvciB0aGlzIGlzIGZyb20gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QnJheSB2IEZvcmQ8L3NwYW4+LiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIk5vIFByb2ZpdCBSdWxlIgogICAgXSwKICAgICJOQU1FIjogIk5vIFByb2ZpdCBSdWxlIgp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRkhSIHYgQ2VkYXIgQ2FwaXRhbCIsCiAgICAgICAgIkd1aW5uZXNzIHYgU2F1bmRlcnMiLAogICAgICAgICJJbmR1c3RyaWFsIERldmVsb3BtZW50IHYgQ29vbGV5IiwKICAgICAgICAiRXggcCBMYWNleSIsCiAgICAgICAgIkJodWxsYXIgdiBCaHVsbGFyIiwKICAgICAgICAiQm9hcmRtYW4gdiBQaGlwcHMiLAogICAgICAgICJSZWFkaW5nIHYgQUciLAogICAgICAgICJMaXN0ZXIgdiBTdHViYnMiLAogICAgICAgICJFbmdsaXNoIHYgRGVkaGFtIFZhbGUiLAogICAgICAgICJPJ1N1bGxpdmFuIHYgTWFuYWdlbWVudCBBZ2VuY3kgWzE5ODVdIFFCIDQyOCIsCiAgICAgICAgIkRhcmF5ZGFuIEhvbGRpbmdzIHYgU29sbGFuZCIsCiAgICAgICAgIktlZWNoIHYgU2FuZGZvcmQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNTMiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiI0NBVEVHT1JZIjogIkZpZHVjaWFyeSBEdXRpZXM7IE5vIENvbmZsaWN0IFJ1bGUiLAogICAgIllFQVIiOiAiMTk5NyIsCiAgICAiTkFNRSI6ICJCcmlzdG9sIGFuZCBXZXN0IEJTIHYgTW90aGV3IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGaWR1Y2lhcnkgRHV0aWVzIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiSW1wb3J0YW50IiwKICAgICAgICAiRGVmaW5pdGlvbnMiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkJyaXN0b2wgYW5kIFdlc3QgQnVpbGRpbmcgU29jaWV0eSB2IE1vdGhldyBbMTk5N10gMiBXTFIgNDM2IiwKICAgICJIRUxEIjogWwogICAgICAgICJVc2VmdWwgbW9kZXJuIGF1dGhvcml0eSBmb3IgdGhlIG5hdHVyZSBvZiBhIGZpZHVjaWFyeSwgd2hpY2ggY29tcHJpc2VzIGFuIHVuZGVydGFraW5nIHRvIGFjdCBpbiBhbm90aGVyJiM4MjE3O3MgYmVzdCBpbnRlcmVzdCwgZ2VuZXJhbGx5IG9yIGZvciBzcGVjaWZpY3MuIFRoYXQgdGhlIGJlbmVmaWNpYXJ5IGhhcyBub3Qgc29saWNpdGVkIHRoZSBmaWR1Y2lhcnkgZHV0eSBpcyBpbW1hdGVyaWFsLiIsCiAgICAgICAgIiYjODIyMDtBIGZpZHVjaWFyeSBpcywgc2ltcGx5IHNvbWVvbmUgd2hvIDxzcGFuIGNsYXNzPVwiYmRcIj51bmRlcnRha2VzIHRvIGFjdCBmb3Igb3Igb24gYmVoYWxmIG9mIGFub3RoZXIgaW4gc29tZSBwYXJ0aWN1bGFyIG1hdHRlciBvciBtYXR0ZXJzPC9zcGFuPi4gVGhhdCB1bmRlcnRha2luZyBtYXkgYmUgb2YgZ2VuZXJhbCBjaGFyYWN0ZXIuIEl0IG1heSBiZSBzcGVjaWZpYyBhbmQgbGltaXRlZC4gSXQgaXMgaW1tYXRlcmlhbCB3aGV0aGVyIHRoZSB1bmRlcnRha2luZyBpcyBncmF0dWl0b3VzLiBBbmQgdGhlIHVuZGVydGFraW5nIG1heSBiZSBvZmZpY2lvdXNseSBhc3N1bWVkIHdpdGhvdXQgcmVxdWVzdC4uLiBbQSBmaWR1Y2lhcnldIGlzIGV4cGVjdGVkIHRvIGFjdCBpbiB0aGUgaW50ZXJlc3Qgb2YgdGhlIG90aGVyIFx1MjAxMyB0byBhY3Qgc2VsZmxlc3NseSBhbmQgd2l0aCB1bmRpdmlkZWQgbG95YWx0eSYjODIyMTsgKEZpbm4sIEZpZHVjaWFyeSBPYmxpZ2F0aW9ucykuIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRmlkdWNpYXJ5IER1dGllcyAmbWRhc2g7IENhdGVnb3JpZXMgb2YgUmVsYXRpb25zaGlwcyAmbWRhc2g7IFVuYXV0aG9yaXNlZCBQcm9maXRzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJHdWlubmVzcyB2IFNhdW5kZXJzIiwKICAgICAgICAiUmVnYWwgQ2luZW1hcyB2IEd1bGxpdmVyIiwKICAgICAgICAiQmh1bGxhciB2IEJodWxsYXIiLAogICAgICAgICJCYWxzdG9uIHYgSGVhZGxpbmUiLAogICAgICAgICJCb2FyZG1hbiB2IFBoaXBwcyIsCiAgICAgICAgIkluZHVzdHJpYWwgRGV2ZWxvcG1lbnQgdiBDb29sZXkiLAogICAgICAgICJPJ1N1bGxpdmFuIHYgTWFuYWdlbWVudCBBZ2VuY3kgWzE5ODVdIFFCIDQyOCIsCiAgICAgICAgIktlZWNoIHYgU2FuZGZvcmQiLAogICAgICAgICJGSFIgdiBDZWRhciBDYXBpdGFsIiwKICAgICAgICAiQnJpc3RvbCBhbmQgV2VzdCBCUyB2IE1vdGhldyIsCiAgICAgICAgIkJyYXkgdiBGb3JkIiwKICAgICAgICAiSG9sZGVyIHYgSG9sZGVyIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTU0IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMjAwMyIsCiAgICAiTkFNRSI6ICJUZXNjbyB2IFBvb2siLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJDYXRlZ29yaWVzIG9mIFJlbGF0aW9uc2hpcHMiLAogICAgICAgICJVbmF1dGhvcmlzZWQgUHJvZml0cyIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiVGVzY28gU3RvcmVzIHYgUG9vayBbMjAwM10gRVdIQyA4MjMgKENoKSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBzZW5pb3IgZW1wbG95ZWUgbWF5IG93ZSBhIGZpZHVjaWFyeSBkdXR5IHRvIGhpcyBlbXBsb3llci4iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRoZSByZXNwb25kZW50LCB0aGUgZS1Db21tZXJjZSBtYW5hZ2VyIGZvciBUZXNjbyBpbiBTb3V0aCBLb3JlYSwgd2FzIHBhaWQgXHUwMGEzNTAwSyBpbnZvaWNlcyBmb3Igc2VydmljZXMgdGhhdCB3ZXJlIG5ldmVyIGRlbGl2ZXJlZC4gSGUgYXJndWVkIGl0IHdhcyBpbiBmYWN0IGEgbG9hbi4iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJGaWR1Y2lhcnkgRHV0aWVzICZtZGFzaDsgQnJpYmVzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJEYXJheWRhbiBIb2xkaW5ncyB2IFNvbGxhbmQiLAogICAgICAgICJTaW5jbGFpciBJbnZlc3RtZW50cyB2IFZlcnNhaWxsZXMiLAogICAgICAgICJMaXN0ZXIgdiBTdHViYnMiLAogICAgICAgICJGSFIgdiBDZWRhciBDYXBpdGFsIiwKICAgICAgICAiQUcgZm9yIEhLIHYgUmVpZCIsCiAgICAgICAgIkJhbHN0b24gdiBIZWFkbGluZSIsCiAgICAgICAgIkluZHVzdHJpYWwgRGV2ZWxvcG1lbnQgdiBDb29sZXkiLAogICAgICAgICJSZSBEdWtlIG9mIE5vcmZvbGsncyBTVHMiLAogICAgICAgICJIb2xkZXIgdiBIb2xkZXIiLAogICAgICAgICJBYmVyZGVlbiBSYWlsd2F5IHYgQmxhaWtpZSIsCiAgICAgICAgIktlZWNoIHYgU2FuZGZvcmQiLAogICAgICAgICJBRyB2IEJsYWtlIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTU1IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTk1MSIsCiAgICAiTkFNRSI6ICJSZWFkaW5nIHYgQUciLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJCcmliZXMiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIlJlYWRpbmcgdiBBdHRvcm5leSBHZW5lcmFsIFsxOTUxXSBBQyA1MDciLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgZmlkdWNpYXJ5IGR1dHkgaXMgb3dlZCBieSBhIHNvbGRpZXIgdG8gdGhlIENyb3duLiBBIGZpZHVjaWFyeSB3aG8gbWFrZXMgYSBwcm9maXQgYnkgYWJ1c2Ugb2YgdGhlIGZpZHVjaWFyeSBkdXR5LCB3aGV0aGVyIGxlZ2FsIG9yIGlsbGVnYWwsIHdpbGwgYmUgbGlhYmxlIGZvciBhY2NvdW50aW5nIG9mIHByb2ZpdHMuIDxzcGFuIGNsYXNzPVwiaWxjXCI+VE9ETzogQ2hlY2sgd2hldGhlciB0aGlzIGlzIDxzcGFuIGNsYXNzPVwiYmRcIj5lcXVpdGFibGU8L3NwYW4+IGFjY291bnRpbmcgb2YgcHJvZml0cy48L3NwYW4+IiwKICAgICAgICAiUGVyIExvcmQgTm9ybWFuZCAmbWRhc2g7ICYjODIxNjt0aGUgc29sZGllciBvd2VkIGEgZmlkdWNpYXJ5IGR1dHkgdG8gdGhlIENyb3duIGFuZCBwcm9maXRzIGdhaW5lZCBieSBoaW0gYnkgdGhlIHVzZSBvciBhYnVzZSBvZiBoaXMgbWlsaXRhcnkgc3RhdHVzIHdlcmUgcmVjb3ZlcmFibGUgYnkgaXQuIDxzcGFuIGNsYXNzPVwiaXRcIj5RdWFlcmU8L3NwYW4+IHdoZXRoZXIgdGhlIENyb3duIGNvdWxkIGhhdmUgcmVjb3ZlcmVkIG9uIHRoZSBmb290aW5nIG9mIG1vbmV5IGhhZCBhbmQgcmVjZWl2ZWQuJiM4MjE3OyIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQW4gYXJteSBzZXJnZWFudCBpbiBFZ3lwdCBoYWQgZmFsbGVuIGludG8gdGhlIHNvbWV3aGF0IGFic2VudC1taW5kZWQgaGFiaXQgb2YgYWNjZXB0aW5nIGxhcmdlIHN1bXMgb2YgY2FzaCB0byBkcml2ZSBsb3JyaWVzIGNyYW1tZWQgd2l0aCBpbGxpY2l0IHNwaXJpdHMgZnJvbSBwbGFjZSB0byBwbGFjZSwgPHNwYW4gY2xhc3M9XCJiZFwiPndlYXJpbmcgaGlzIHVuaWZvcm08L3NwYW4+IHNvIGhlIHdvdWxkbiYjODIxNzt0IGdldCBzdG9wcGVkLiBIZSBjbGFpbWVkIGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5zdXNwZWN0ZWQ8L3NwYW4+LCBidXQgZGlkIG5vdCBfa25vdywgd2hhdCB3YXMgaW4gdGhlIGxvcnJpZXMuIEhlIHdhcyBpbXByaXNvbmVkLiBPbiByZWxlYXNlLCBoZSBjbGFpbWVkIGZvciB0aGUgcmV0dXJuIG9mIHRoZSBjYXNoLiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkVuZ2xpc2ggdiBEZWRoYW0gVmFsZSIsCiAgICAgICAgIlJlYWRpbmcgdiBBRyIsCiAgICAgICAgIkJodWxsYXIgdiBCaHVsbGFyIiwKICAgICAgICAiQnJheSB2IEZvcmQiLAogICAgICAgICJTaW5jbGFpciBJbnZlc3RtZW50cyB2IFZlcnNhaWxsZXMiLAogICAgICAgICJIb2xkZXIgdiBIb2xkZXIiLAogICAgICAgICJFeCBwIExhY2V5IiwKICAgICAgICAiQmFsc3RvbiB2IEhlYWRsaW5lIiwKICAgICAgICAiTydTdWxsaXZhbiB2IE1hbmFnZW1lbnQgQWdlbmN5IFsxOTg1XSBRQiA0MjgiLAogICAgICAgICJJbmR1c3RyaWFsIERldmVsb3BtZW50IHYgQ29vbGV5IiwKICAgICAgICAiQUcgZm9yIEhLIHYgUmVpZCIsCiAgICAgICAgIkJyaXN0b2wgYW5kIFdlc3QgQlMgdiBNb3RoZXciCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNTYiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiKGkpIEEgZmlkdWNpYXJ5IHVuanVzdGx5IGVucmljaGVkIGJ5IGEgYnJlYWNoIHRoYXQgY2F1c2VkIG5vIGRldHJpbWVudCB0byB0aGUgcHJpbmNpcGFsIHdpbGwgbmV2ZXJ0aGVsZXNzIGJlIGxpYWJsZSB0byBhY2NvdW50IGZvciBwcm9maXRzLiAoaWkpIFRoZSBjYXRlZ29yaWVzIG9mIHJlbGF0aW9uc2hpcHMgaW4gd2hpY2ggYSBmaWR1Y2lhcnkgZHV0eSBhcmlzZXMgaXMgbm90IGNsb3NlZC4gIENmLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZWFkaW5nIHYgQUc8L3NwYW4+LiIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiU2VjcmV0cyBkaXZ1bGdlZCBieSBHZW9yZ2UgQmxha2UgaW4gPHNwYW4gY2xhc3M9XCJpdFwiPk5vIE90aGVyIENob2ljZTwvc3Bhbj4gaGFkIGJlZW4gbGVhcm50IGFib3V0IHdoaWxzdCBzdGlsbCBodXNoLWh1c2gsIGFsdGhvdWdoIHRoZXkmIzgyMTc7ZCBjZWFzZWQgdG8gYmUgc28gYnkgdGhlIHRpbWUgaGUgcHVibGlzaGVkLiBUaGUgQ3Jvd24gc3VlZCBmb3IgdGhlIHJveWFsdGllcywgYXJndWluZyB0aGF0IHNpbmNlIHRoZXkmIzgyMTc7ZCBjb21lIGFib3V0IGluIGJyZWFjaCBvZiBmaWR1Y2lhcnkgZHV0eSwgQmxha2UgaGFkIGJlZW4gdW5qdXN0bHkgZW5yaWNoZWQuIgogICAgXSwKICAgICJOQU1FIjogIkFHIHYgQmxha2UiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJGaWR1Y2lhcnkgRHV0aWVzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIkVuZ2xpc2ggdiBEZWRoYW0gVmFsZSBQcm9wZXJ0aWVzIEx0ZCBbMTk3OF0gMSBXTFIgOTMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIk8nU3VsbGl2YW4gdiBNYW5hZ2VtZW50IEFnZW5jeSBbMTk4NV0gUUIgNDI4IiwKICAgICAgICAiRkhSIHYgQ2VkYXIgQ2FwaXRhbCIsCiAgICAgICAgIlNpbmNsYWlyIEludmVzdG1lbnRzIHYgVmVyc2FpbGxlcyIsCiAgICAgICAgIkV4IHAgTGFjZXkiLAogICAgICAgICJLZWVjaCB2IFNhbmRmb3JkIiwKICAgICAgICAiUmVhZGluZyB2IEFHIiwKICAgICAgICAiVHdpbnNlY3RyYSB2IFlhcmRsZXkiLAogICAgICAgICJJbmR1c3RyaWFsIERldmVsb3BtZW50IHYgQ29vbGV5IiwKICAgICAgICAiR3Vpbm5lc3MgdiBTYXVuZGVycyIsCiAgICAgICAgIkxpc3RlciB2IFN0dWJicyIsCiAgICAgICAgIkV4IHAgSmFtZXMiLAogICAgICAgICJBRyB2IEJsYWtlIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTU3IiwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgY2F0ZWdvcmllcyBvZiByZWxhdGlvbnNoaXBzIGluIHdoaWNoIGEgdGhlcmUgaXMgYSBmaWR1Y2lhcnkgZHV0eSBhcmUgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj4gY2xvc2VkLiIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTc4IiwKICAgICJOQU1FIjogIkVuZ2xpc2ggdiBEZWRoYW0gVmFsZSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkZpZHVjaWFyeSBEdXRpZXMgJm1kYXNoOyBObyBQcm9maXQgUnVsZSAvIEZpZHVjaWFyeSBEdXRpZXMgJm1kYXNoOyBObyBDb25mbGljdCBSdWxlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJLZWVjaCB2IFNhbmRmb3JkIiwKICAgICAgICAiTydTdWxsaXZhbiB2IE1hbmFnZW1lbnQgQWdlbmN5IFsxOTg1XSBRQiA0MjgiLAogICAgICAgICJHdWlubmVzcyB2IFNhdW5kZXJzIiwKICAgICAgICAiQWJlcmRlZW4gUmFpbHdheSB2IEJsYWlraWUiLAogICAgICAgICJSZSBNYWNhZGFtIiwKICAgICAgICAiRXggcCBMYWNleSIsCiAgICAgICAgIkFHIHYgQmxha2UiLAogICAgICAgICJCYWxzdG9uIHYgSGVhZGxpbmUiLAogICAgICAgICJCcmlzdG9sIGFuZCBXZXN0IEJTIHYgTW90aGV3IiwKICAgICAgICAiVHdpbnNlY3RyYSB2IFlhcmRsZXkiLAogICAgICAgICJFeCBwIEphbWVzIiwKICAgICAgICAiRGFyYXlkYW4gSG9sZGluZ3MgdiBTb2xsYW5kIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTU4IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTg5NiIsCiAgICAiTkFNRSI6ICJCcmF5IHYgRm9yZCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIk5vIFByb2ZpdCBSdWxlIiwKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIk5vIENvbmZsaWN0IFJ1bGUiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJJbXBvcnRhbnQiLAogICAgICAgICJEZWZpbml0aW9ucyIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiQnJheSB2IEZvcmQgWzE4OTZdIEFDIDQ0IiwKICAgICJIRUxEIjogWwogICAgICAgICJJbiB0aGUgYWJzZW5jZSBvZiBleHByZXNzIHBlcm1pc3Npb24sIGEgZmlkdWNpYXJ5IG1heSBub3QgbWFrZSBhIHByb2ZpdCBmcm9tIGhpcyBkdXR5LCBhbmQgbXVzdCBub3QgcHV0IGhpbXNlbGYgaW4gYSBwb3NpdGlvbiB3aGVyZSBoaXMgaW50ZXJlc3RzIGNvbmZsaWN0IHdpdGggaGlzIGZpZHVjaWFyeSBkdXR5LiBIb3dldmVyLCB0aGVyZSBhcmUgcG90ZW50aWFsbHkgPHNwYW4gY2xhc3M9XCJiZFwiPm1hbnk8L3NwYW4+IGNhc2VzIGluIHdoaWNoIGRlcGFydGluZyBmcm9tIHRoZXNlIHR3byBydWxlcyB3b3VsZCBub3QgYmUgaW1tb3JhbCwgd291bGQgZG8gbm8gZGFtYWdlLCBhbmQgd291bGQgbm90IG1ha2UgYW55b25lIHRoaW5rIGFueXRoaW5nIDxzcGFuIGNsYXNzPVwiYmRcIj53cm9uZzwvc3Bhbj4gd2FzIGJlaW5nIGRvbmUuIiwKICAgICAgICAiTG9yZCBIZXJzaGVsbCAmbWRhc2g7ICYjODIxNjtpdCBpcyBhbiBpbmZsZXhpYmxlIHJ1bGUgb2YgYSBDb3VydCBvZiBFcXVpdHkgdGhhdCBhIDxzcGFuIGNsYXNzPVwiYmRcIj5wZXJzb24gaW4gYSBmaWR1Y2lhcnkgcG9zaXRpb248L3NwYW4+IC4uLiBpcyA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiwgdW5sZXNzIG90aGVyd2lzZSBleHByZXNzbHkgcHJvdmlkZWQsIDxzcGFuIGNsYXNzPVwiYmRcIj5lbnRpdGxlZCB0byBtYWtlIGEgcHJvZml0PC9zcGFuPjsgaGUgaXMgbm90IGFsbG93ZWQgdG8gcHV0IGhpbXNlbGYgaW4gYSBwb3NpdGlvbiB3aGVyZSBoaXMgaW50ZXJlc3QgYW5kIGR1dGllcyBjb25mbGljdC4gLi4uIEJ1dCBJIGFtIHNhdGlzZmllZCB0aGF0IGl0IG1pZ2h0IGJlIGRlcGFydGVkIGZyb20gaW4gbWFueSBjYXNlcywgd2l0aG91dCBhbnkgYnJlYWNoIG9mIG1vcmFsaXR5LCB3aXRob3V0IGFueSB3cm9uZ2RvaW5nIGJlaW5nIGluZmxpY3RlZCBhbmQgd2l0aG91dCBhbnkgY29uc2Npb3VzbmVzcyBvZiB3cm9uZy1kb2luZyYjODIxNzsiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJGaWR1Y2lhcnkgRHV0aWVzICZtZGFzaDsgTm8gQ29uZmxpY3QgUnVsZSAmbWRhc2g7IFNlbGYtRGVhbGluZyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiS2VlY2ggdiBTYW5kZm9yZCIsCiAgICAgICAgIkhvbGRlciB2IEhvbGRlciIsCiAgICAgICAgIkV4IHAgTGFjZXkiLAogICAgICAgICJFeCBwIEphbWVzIiwKICAgICAgICAiQnJheSB2IEZvcmQiLAogICAgICAgICJJbmR1c3RyaWFsIERldmVsb3BtZW50IHYgQ29vbGV5IiwKICAgICAgICAiVGVzY28gdiBQb29rIiwKICAgICAgICAiRGFyYXlkYW4gSG9sZGluZ3MgdiBTb2xsYW5kIiwKICAgICAgICAiQUcgdiBCbGFrZSIsCiAgICAgICAgIlJlYWRpbmcgdiBBRyIsCiAgICAgICAgIk8nU3VsbGl2YW4gdiBNYW5hZ2VtZW50IEFnZW5jeSBbMTk4NV0gUUIgNDI4IiwKICAgICAgICAiUmUgTWFjYWRhbSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE1OSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjE4NTQiLAogICAgIk5BTUUiOiAiQWJlcmRlZW4gUmFpbHdheSB2IEJsYWlraWUiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJObyBDb25mbGljdCBSdWxlIiwKICAgICAgICAiU2VsZi1EZWFsaW5nIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJBYmVyZGVlbiBSbHkgdiBCbGFpa2llIEJyb3MgKDE4NTQpIDEgTWFjcS4gNDYxIiwKICAgICJIRUxEIjogWwogICAgICAgICJBIGRpcmVjdG9yIGhhcyBhIGZpZHVjaWFyeSBkdXR5IHRvIGhpcyBjb21wYW55LCBhbmQgbWF5IG5vdCBlbnRlciBpbnRvIGFuIGVuZ2FnZW1lbnQgd2hpY2ggd2lsbCBzZXQgaGlzIHBlcnNvbmFsIGludGVyZXN0cyBhZ2FpbnN0IHRob3NlIG9mIGhpcyBjb21wYW55LiIKICAgIF0sCiAgICAiV0lLSUxJTksiOiBbCiAgICAgICAgImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FiZXJkZWVuX1JseV9Db192X0JsYWlraWVfQnJvcyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkZpZHVjaWFyeSBEdXRpZXMgJm1kYXNoOyBObyBQcm9maXQgUnVsZSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSZSBNYWNhZGFtIFsxOTQ2XSBDaCA3MyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQnJheSB2IEZvcmQiLAogICAgICAgICJHdWlubmVzcyB2IFNhdW5kZXJzIiwKICAgICAgICAiS2VlY2ggdiBTYW5kZm9yZCIsCiAgICAgICAgIk8nU3VsbGl2YW4gdiBNYW5hZ2VtZW50IEFnZW5jeSBbMTk4NV0gUUIgNDI4IiwKICAgICAgICAiTGlzdGVyIHYgU3R1YmJzIiwKICAgICAgICAiUmUgRHVrZSBvZiBOb3Jmb2xrJ3MgU1RzIiwKICAgICAgICAiQm9hcmRtYW4gdiBQaGlwcHMiLAogICAgICAgICJTaW5jbGFpciBJbnZlc3RtZW50cyB2IFZlcnNhaWxsZXMiLAogICAgICAgICJIb2xkZXIgdiBIb2xkZXIiLAogICAgICAgICJEYXJheWRhbiBIb2xkaW5ncyB2IFNvbGxhbmQiLAogICAgICAgICJFbmdsaXNoIHYgRGVkaGFtIFZhbGUiLAogICAgICAgICJBYmVyZGVlbiBSYWlsd2F5IHYgQmxhaWtpZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE2MCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBmaWR1Y2lhcnkgbWF5IG5vdCBwcm9maXQsIGV2ZW4gd2hlbiB0aGUgcHJvZml0IGlzIG5vdCBmcm9tIHRoZSB0cnVzdCBmdW5kIGl0c2VsZiwgYnV0IGFyaXNlcyBpbmRpcmVjdGx5LiIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTQ2IiwKICAgICJOQU1FIjogIlJlIE1hY2FkYW0iLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJObyBQcm9maXQgUnVsZSIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkZpZHVjaWFyeSBEdXRpZXMgJm1kYXNoOyBObyBQcm9maXQgUnVsZSAvIEZpZHVjaWFyeSBEdXRpZXMgJm1kYXNoOyBObyBDb25mbGljdCBSdWxlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJCcmF5IHYgRm9yZCIsCiAgICAgICAgIkFiZXJkZWVuIFJhaWx3YXkgdiBCbGFpa2llIiwKICAgICAgICAiUmUgTWFjYWRhbSIsCiAgICAgICAgIkd1aW5uZXNzIHYgU2F1bmRlcnMiLAogICAgICAgICJPJ1N1bGxpdmFuIHYgTWFuYWdlbWVudCBBZ2VuY3kgWzE5ODVdIFFCIDQyOCIsCiAgICAgICAgIlNpbmNsYWlyIEludmVzdG1lbnRzIHYgVmVyc2FpbGxlcyIsCiAgICAgICAgIkJhbHN0b24gdiBIZWFkbGluZSIsCiAgICAgICAgIlJlYWRpbmcgdiBBRyIsCiAgICAgICAgIkVuZ2xpc2ggdiBEZWRoYW0gVmFsZSIsCiAgICAgICAgIkV4IHAgSmFtZXMiLAogICAgICAgICJBRyBmb3IgSEsgdiBSZWlkIiwKICAgICAgICAiQmh1bGxhciB2IEJodWxsYXIiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNjEiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIxNzI2IiwKICAgICJOQU1FIjogIktlZWNoIHYgU2FuZGZvcmQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJObyBQcm9maXQgUnVsZSIsCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJObyBDb25mbGljdCBSdWxlIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiSW1wb3J0YW50IgogICAgXSwKICAgICJDSVRBVElPTiI6ICJLZWVjaCB2IFNhbmRmb3JkICgxNzI2KSBTZWwuQ2FzLkNoLiA2MSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSB0cnVzdGVlIG93ZXMgYSBmaWR1Y2lhcnkgZHV0eSB0byB0aGUgdHJ1c3QmIzgyMTc7cyBiZW5lZmljaWFyaWVzLiBIZSBpcyB0aGVyZWZvcmUgcHJldmVudGVkIGZyb20gcHVyc3Vpbmcgb3Bwb3J0dW5pdGllcyByZWxhdGVkIHRvIHRoZSB0cnVzdCBwcm9wZXJ0eSBmcm9tIHdoaWNoIGNvbmZsaWN0cyBvZiBpbnRlcmVzdCB3b3VsZCBhcmlzZSwgYW5kIG1heSA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiBwcm9maXQgZnJvbSB0aGUgcHJvcGVydHkuIiwKICAgICAgICAiVGhlIGNvdXJ0IGRlY2lkZWQgdGhlIGRlZmVuZGFudCBpbiBmYWN0IGhlbGQgdGhlIGxlYXNlIGFuZCBpdHMgcHJvZml0cyBvbiB0cnVzdCBmb3IgdGhlIGNsYWltYW50LiIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiSW4gaW5mYW5jeSwgS2VlY2ggaGFkIGluaGVyaXRlZCB0aGUgbGVhc2Ugb24gUm9tZm9yZCBtYXJrZXQsIGFuZCBTYW5kZm9yZCBoYWQgYmVlbiBlbnRydXN0ZWQgd2l0aCB0aGUgcHJvcGVydHkuIFRoZSBsZWFzZSBjYW1lIHVwIGZvciByZW5ld2FsLCBidXQgdGhlIGxhbmRsb3JkIHJlZnVzZWQgdG8gcmVuZXcgaXQgdG8gYW4gaW5mYW50LCBvbiB0aGUgYmFzaXMgdGhhdCBoZSB3b3VsZCBsYWNrIGxlZ2FsIHJlbWVkaWVzIG9mIGVuZm9yY2VtZW50IGFnYWluc3QgYSBsZXNvciBub3QgPHNwYW4gY2xhc3M9XCJpdFwiPnN1aSBqdXJpczwvc3Bhbj4uIFNvIFNhbmRmb3JkIGhpbXNlbGYgdG9vayB0aGUgdGl0bGUgdG8gdGhlIGxlYXNlIGhpbXNlbGYuIFdoZW4gS2VlY2ggZ3JldyB1cCwgaGUgc3VlZCBTYW5kZm9yZCBmb3IgdGhlIHByb2ZpdCBoZSYjODIxNztkIG1hZGUsIG9uIHRoZSBiYXNpcyB0aGF0IDxzcGFuIGNsYXNzPVwiaXRcIj5oZTwvc3Bhbj4gb3VnaHQgdG8gaGF2ZSBtYWRlIGl0LiIKICAgIF0sCiAgICAiV0lLSUxJTksiOiBbCiAgICAgICAgImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0tlZWNoX3ZfU2FuZGZvcmQiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJGaWR1Y2lhcnkgRHV0aWVzICZtZGFzaDsgTm8gUHJvZml0IFJ1bGUgJm1kYXNoOyBSZW11bmVyYXRpb24gb2YgVHJ1c3RlZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIktlZWNoIHYgU2FuZGZvcmQiLAogICAgICAgICJSZSBEdWtlIG9mIE5vcmZvbGsncyBTVHMiLAogICAgICAgICJCcmF5IHYgRm9yZCIsCiAgICAgICAgIkd1aW5uZXNzIHYgU2F1bmRlcnMiLAogICAgICAgICJSZSBNYWNhZGFtIiwKICAgICAgICAiU2luY2xhaXIgSW52ZXN0bWVudHMgdiBWZXJzYWlsbGVzIiwKICAgICAgICAiRW5nbGlzaCB2IERlZGhhbSBWYWxlIiwKICAgICAgICAiRXggcCBMYWNleSIsCiAgICAgICAgIlJlYWRpbmcgdiBBRyIsCiAgICAgICAgIkJodWxsYXIgdiBCaHVsbGFyIiwKICAgICAgICAiRXggcCBKYW1lcyIsCiAgICAgICAgIlRlc2NvIHYgUG9vayIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE2MiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJFdmVuIHdoZXJlIHRoZXJlIGhhcyBiZWVuIHdyb25nZG9pbmcsIGl0IG1heSBiZSBhcHByb3ByaWF0ZSB0byByZW11bmVyYXRlIHRydXN0ZWVzLiIKICAgIF0sCiAgICAiTkFNRSI6ICJPJ1N1bGxpdmFuIHYgTWFuYWdlbWVudCBBZ2VuY3kgWzE5ODVdIFFCIDQyOCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIk5vIFByb2ZpdCBSdWxlIiwKICAgICAgICAiUmVtdW5lcmF0aW9uIG9mIFRydXN0ZWVzIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRmlkdWNpYXJ5IER1dGllcyAmbWRhc2g7IFJlbXVuZXJhdGlvbiBvZiBUcnVzdGVlcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiTydTdWxsaXZhbiB2IE1hbmFnZW1lbnQgQWdlbmN5IFsxOTg1XSBRQiA0MjgiLAogICAgICAgICJHdWlubmVzcyB2IFNhdW5kZXJzIiwKICAgICAgICAiQnJheSB2IEZvcmQiLAogICAgICAgICJFeCBwIExhY2V5IiwKICAgICAgICAiSW5kdXN0cmlhbCBEZXZlbG9wbWVudCB2IENvb2xleSIsCiAgICAgICAgIkV4IHAgSmFtZXMiLAogICAgICAgICJBRyBmb3IgSEsgdiBSZWlkIiwKICAgICAgICAiQm9hcmRtYW4gdiBQaGlwcHMiLAogICAgICAgICJCcmlzdG9sIGFuZCBXZXN0IEJTIHYgTW90aGV3IiwKICAgICAgICAiVHdpbnNlY3RyYSB2IFlhcmRsZXkiLAogICAgICAgICJIb2xkZXIgdiBIb2xkZXIiLAogICAgICAgICJFbmdsaXNoIHYgRGVkaGFtIFZhbGUiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNjMiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQUtBIjogIlJlIER1a2Ugb2YgTm9yZm9sayIsCiAgICAiWUVBUiI6ICIxOTgyIiwKICAgICJOQU1FIjogIlJlIER1a2Ugb2YgTm9yZm9saydzIFNUcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIlJlbXVuZXJhdGlvbiBvZiBUcnVzdGVlcyIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiUmUgRHVrZSBvZiBOb3Jmb2xrXHUyMDE5cyBTZXR0bGVtZW50IFRydXN0cyBbMTk4Ml0iLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkl0IG1heSBiZSBhcHByb3ByaWF0ZSB0byBhd2FyZCByZW11bmVyYXRpb24gdG8gdHJ1c3RlZXMgd2hvIHVuZGVydGFrZSA8c3BhbiBjbGFzcz1cImJkXCI+c2lnbmlmaWNhbnRseSBtb3JlIHRoYW4gd291bGQgbm9ybWFsbHkgYmUgZXhwZWN0ZWQ8L3NwYW4+ICZtZGFzaDsgc3VjaCBhcyB0aGUgdG90YWwgcmVkZXZlbG9wbWVudCBvZiBhIGxhcmdlIGxhbmRlZCBlc3RhdGUgYmVsb25naW5nIHRvIHRoZSB0cnVzdC4iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJGaWR1Y2lhcnkgRHV0aWVzICZtZGFzaDsgU2VsZi1EZWFsaW5nIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIkV4IHAgTGFjZXkgKDE4MDIpIDYgVmVzIDYyNSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiSG9sZGVyIHYgSG9sZGVyIiwKICAgICAgICAiQWJlcmRlZW4gUmFpbHdheSB2IEJsYWlraWUiLAogICAgICAgICJFeCBwIEphbWVzIiwKICAgICAgICAiSW5kdXN0cmlhbCBEZXZlbG9wbWVudCB2IENvb2xleSIsCiAgICAgICAgIkJodWxsYXIgdiBCaHVsbGFyIiwKICAgICAgICAiQnJheSB2IEZvcmQiLAogICAgICAgICJCYWxzdG9uIHYgSGVhZGxpbmUiLAogICAgICAgICJUd2luc2VjdHJhIHYgWWFyZGxleSIsCiAgICAgICAgIkRhcmF5ZGFuIEhvbGRpbmdzIHYgU29sbGFuZCIsCiAgICAgICAgIk8nU3VsbGl2YW4gdiBNYW5hZ2VtZW50IEFnZW5jeSBbMTk4NV0gUUIgNDI4IiwKICAgICAgICAiUmUgTWFjYWRhbSIsCiAgICAgICAgIlJlYWRpbmcgdiBBRyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE2NCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiV2hlcmUgYSB0cnVzdGVlIGhhcyBib3VnaHQgdGhlIHByb3BlcnR5IG9mIHRoZSB0cnVzdCwgdGhlIHRyYW5zYWN0aW9uIGlzIHZvaWRhYmxlIGJ5IHRoZSBiZW5lZmljaWFyaWVzLiIKICAgIF0sCiAgICAiWUVBUiI6ICIxODAyIiwKICAgICJOQU1FIjogIkV4IHAgTGFjZXkiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJTZWxmLURlYWxpbmciCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJGaWR1Y2lhcnkgRHV0aWVzICZtZGFzaDsgU2VsZi1EZWFsaW5nIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIkV4IHAgSmFtZXMgKDE4MDMpIDggVmVzIDMzNyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQWJlcmRlZW4gUmFpbHdheSB2IEJsYWlraWUiLAogICAgICAgICJIb2xkZXIgdiBIb2xkZXIiLAogICAgICAgICJFeCBwIExhY2V5IiwKICAgICAgICAiU2luY2xhaXIgSW52ZXN0bWVudHMgdiBWZXJzYWlsbGVzIiwKICAgICAgICAiRkhSIHYgQ2VkYXIgQ2FwaXRhbCIsCiAgICAgICAgIkxpc3RlciB2IFN0dWJicyIsCiAgICAgICAgIkJodWxsYXIgdiBCaHVsbGFyIiwKICAgICAgICAiQm9hcmRtYW4gdiBQaGlwcHMiLAogICAgICAgICJBRyBmb3IgSEsgdiBSZWlkIiwKICAgICAgICAiVGVzY28gdiBQb29rIiwKICAgICAgICAiQmFsc3RvbiB2IEhlYWRsaW5lIiwKICAgICAgICAiQUcgdiBCbGFrZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE2NSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiJiM4MjE2O1RoZSBwdXJjaGFzZSBvZiB0cnVzdCBwcm9wZXJ0eSBieSB0aGUgdHJ1c3RlZSBvbiBoaXMgb3duIGFjY291bnQgaXMgbm90IHBlcm1pdHRlZCBpbiBhbnkgY2FzZSwgPHNwYW4gY2xhc3M9XCJiZFwiPmhvd2V2ZXIgaG9uZXN0IHRoZSBjaXJjdW1zdGFuY2VzPC9zcGFuPi4gVGhlIGdlbmVyYWwgaW50ZXJlc3Qgb2YganVzdGljZSByZXF1aXJpbmcgaXQgdG8gYmUgZGVzdHJveWVkIGluIGV2ZXJ5IGludGVyZXN0Li4uIGFzIG5vIGNvdXJ0IGlzIGVxdWFsIHRvIHRoZSBleGFtaW5hdGlvbiBhbmQgYXNjZXJ0YWlubWVudCBvZiB0aGUgdHJ1dGggaW4gbXVjaCB0aGUgZ3JlYXRlciBudW1iZXIgb2YgY2FzZXMmIzgyMTc7IgogICAgXSwKICAgICJZRUFSIjogIjE4MDMiLAogICAgIk5BTUUiOiAiRXggcCBKYW1lcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIlNlbGYtRGVhbGluZyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkZpZHVjaWFyeSBEdXRpZXMgJm1kYXNoOyBTZWxmLURlYWxpbmcgJm1kYXNoOyBFeGNlcHRpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkV4IHAgTGFjZXkiLAogICAgICAgICJFeCBwIEphbWVzIiwKICAgICAgICAiQWJlcmRlZW4gUmFpbHdheSB2IEJsYWlraWUiLAogICAgICAgICJEYXJheWRhbiBIb2xkaW5ncyB2IFNvbGxhbmQiLAogICAgICAgICJCaHVsbGFyIHYgQmh1bGxhciIsCiAgICAgICAgIktlZWNoIHYgU2FuZGZvcmQiLAogICAgICAgICJSZSBNYWNhZGFtIiwKICAgICAgICAiRkhSIHYgQ2VkYXIgQ2FwaXRhbCIsCiAgICAgICAgIlR3aW5zZWN0cmEgdiBZYXJkbGV5IiwKICAgICAgICAiQm9hcmRtYW4gdiBQaGlwcHMiLAogICAgICAgICJFbmdsaXNoIHYgRGVkaGFtIFZhbGUiLAogICAgICAgICJPJ1N1bGxpdmFuIHYgTWFuYWdlbWVudCBBZ2VuY3kgWzE5ODVdIFFCIDQyOCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE2NiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjE5NjgiLAogICAgIk5BTUUiOiAiSG9sZGVyIHYgSG9sZGVyIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGaWR1Y2lhcnkgRHV0aWVzIiwKICAgICAgICAiU2VsZi1EZWFsaW5nIiwKICAgICAgICAiRXhjZXB0aW9uIgogICAgXSwKICAgICJDT01NRU5UIjogIk1hcmdhcmV0IENhcnJhbiYjODIxNztzIHZpZXcgaXMgdGhhdCB0aGlzIGlzIG5ldmVydGhlbGVzcyB3cm9uZ2x5IGRlY2lkZWQsIGFzIGFzc2VudCBvZiBiZW5lZmljaWFyaWVzIHByb3ZpZGVzIG5vIGRlZmVuY2UuIiwKICAgICJDSVRBVElPTiI6ICJIb2xkZXIgdiBIb2xkZXIgWzE5NjhdIENoIDM1MyIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBjbGFpbSBmb3IgcmVzY2lzc2lvbiBvZiBhIHNlbGYtZGVhbGluZyB0cmFuc2FjdGlvbiBieSBhIGZpZHVjaWFyeSB1c3VhbGx5IHN1Y2NlZWRzLiBCdXQgd2hlbiB0aGVyZSBpcyBubyBkaXNob25lc3R5LCBhbmQgYSBnZW51aW5lIGF0dGVtcHQgdG8gZW5kIHRoZSBmaWR1Y2lhcnkgcmVsYXRpb25zaGlwIHdoaWNoIGV2ZXJ5b25lIGNvbmNlcm5lZCBiZWxpZXZlcyBoYXMgc3VjY2VlZGVkOyBhbmQgd2hlbiB0aGUgYmVuZWZpY2lhcmllcyBhc3NlbnRlZCB0byB0aGUgcHVyY2hhc2U7IGFuZCB3aGVuIHRoZSBwdXJjaGFzZSBpcyBub3QgYXMgYSByZXN1bHQgb2Yga25vd2xlZGdlIG9idGFpbmVkIGFzIGEgZmlkdWNpYXJ5ICZtZGFzaDsgdGhlbiB0aGUgY291cnQgbWF5IDxzcGFuIGNsYXNzPVwiYmRcIj5yZWZ1c2U8L3NwYW4+IHRvIHJlc2NpbmQuIFRoZSBtYXhpbSA8c3BhbiBjbGFzcz1cIml0XCI+RGVsYXkgRGVmZWF0cyBFcXVpdHk8L3NwYW4+IG1heSBmdXJ0aGVyIG1pbGl0YXRlIGFnYWluc3Qgc3VjaCBhIGNsYWltLiIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiVGhlIGV4ZWN1dG9yIG9mIGEgd2lsbCB3YXMgYWxzbyBhIG1pbm9yIGJlbmVmaWNpYXJ5LiBCdXQgaGUgd2FudGVkIHRvIGJ1eSB0aGUgd2lsbCYjODIxNztzIG1haW4gcHJvcGVydHksIGEgZmFybS4gSGUgcmVhbGlzZWQgaGUgd2FzIHByZXZlbnRlZCBmcm9tIGRvaW5nIHNvIGFzIGV4ZWN1dG9yLCBhbHRob3VnaCBoaXMgZHV0aWVzIGFzIHN1Y2ggd2VyZSBvbmx5IG1pbm9yLiBIZSBhdHRlbXB0ZWQgdG8gZGlzY2xhaW0gZXhlY3V0b3JzaGlwLCBleHBsYWluaW5nIHdoeS4gVGhlIGJlbmVmaWNpYXJpZXMgZGlkbiYjODIxNzt0IG9iamVjdC4gVW5iZWtub3duc3QgdG8gYWxsLCB0aGUgZGlzY2xhaW1lciB3YXMgaW5lZmZlY3RpdmUsIGFzIGl0IGhhZG4mIzgyMTc7dCBiZWVuIGRvbmUgYnkgZGVlZCAmbWRhc2g7IGhlIHJlbWFpbmVkIGluIGEgZmlkdWNpYXJ5IHJlbGF0aW9uc2hpcCB3aXRoIHRoZSBiZW5lZmljaWFyaWVzIGFzIGhlIHB1cmNoYXNlZCB0aGVpciBwcm9wZXJ0eS4iLAogICAgICAgICJIZSB3ZW50IGFoZWFkIGFuZCBwdXJjaGFzZWQsIGFuZCBsYXRlciBnb3Qgc3VlZC4iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJGaWR1Y2lhcnkgRHV0aWVzICZtZGFzaDsgVW5hdXRob3Jpc2VkIFByb2ZpdHMgJm1kYXNoOyBDb3Jwb3JhdGUgT3Bwb3J0dW5pdHkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkJvYXJkbWFuIHYgUGhpcHBzIiwKICAgICAgICAiQmh1bGxhciB2IEJodWxsYXIiLAogICAgICAgICJCYWxzdG9uIHYgSGVhZGxpbmUiLAogICAgICAgICJJbmR1c3RyaWFsIERldmVsb3BtZW50IHYgQ29vbGV5IiwKICAgICAgICAiVGVzY28gdiBQb29rIiwKICAgICAgICAiR3Vpbm5lc3MgdiBTYXVuZGVycyIsCiAgICAgICAgIkFiZXJkZWVuIFJhaWx3YXkgdiBCbGFpa2llIiwKICAgICAgICAiUmUgTWFjYWRhbSIsCiAgICAgICAgIkFHIHYgQmxha2UiLAogICAgICAgICJSZWFkaW5nIHYgQUciLAogICAgICAgICJGSFIgdiBDZWRhciBDYXBpdGFsIiwKICAgICAgICAiQUcgZm9yIEhLIHYgUmVpZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE2NyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJBS0EiOiAiUmUgVGhvbXBzb24iLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlByb2ZpdHMgbWFkZSB0aHJvdWdoIGtub3dsZWRnZSBhcmlzaW5nIGJ5IHZpcnR1ZSBvZiBhIGZpZHVjaWFyeSBkdXR5IGFyZSB0aGUgcHJvcGVydHkgb2YgdGhlIHBlcnNvbiB0byB3aG9tIHRoZSBkdXR5IGlzIG93ZWQuIgogICAgXSwKICAgICJOQU1FIjogIlJlZ2FsIENpbmVtYXMgdiBHdWxsaXZlciIsCiAgICAiQ0lUQVRJT04iOiAiUmVnYWwgQ2luZW1hcyAoSGFzdGluZ3MpIEx0ZCB2IEd1bGxpdmVyIFsxOTQyXSAxIEFsbCBFUiAzNzgiLAogICAgIllFQVIiOiAiMTk0MiIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBwYXJlbnQgY29tcGFueSBjcmVhdGVkIGEgc3Vic2lkaWFyeSBjb21wYW55IHdpdGggYSBzaGFyZSBjYXBpdGFsIG9mIFx1MDBhMzVLLCBvbmx5IFx1MDBhMzJLIG9mIHdoaWNoIHdhcyBwYWlkLXVwLiBUaGUgbGFuZGxvcmQgb2YgdHdvIGNpbmVtYXMgZnJvbSB3aGljaCB0aGUgc3Vic2lkaWFyeSBjb21wYW55IHdhcyB0byBsZWFzZSB0d28gY2luZW1hcyA8c3BhbiBjbGFzcz1cIml0XCI+cmVmdXNlZDwvc3Bhbj4gdG8gYWdyZWUgdG8gdGhlIGxlYXNlIHVubGVzcyBhbGwgdGhlIHNoYXJlcyB3ZXJlIHBhaWQtdXAuIFJlZ2FsIGNvdWxkbiYjODIxNzt0IGZpbmQgdGhlIGV4dHJhIFx1MDBhMzNLLCBzbyBhdXRob3Jpc2VkIHRoZSBmb3VyIGRpcmVjdG9ycywgdGhlIHNvbGljaXRvciwgcGx1cyBvbmUgb2YgdGhlIGNoYWlybWFuJiM4MjE3O3MgcGFscywgdG8gZm9yd2FyZCBcdTAwYTM1MDAgZWFjaC4gRXZlcnl0aGluZyB3ZW50IGFoZWFkLiBUaGUgY29tcGFueSB3YXMgdGhlbiBib3VnaHQgb3V0LCBhbmQgYSBzdWJzdGFudGlhbCBwcm9maXQgd2FzIG1hZGUgZWFjaCBvZiB0aG9zZSB3aG8mIzgyMTc7ZCBmb3J3YXJkZWQgbW9uZXkuIFRoZSBhY3F1aXJpbmcgY29tcGFueSBzdWVkIHRoZW0gb24gdGhlIGJhc2lzIHRoYXQgc3VjaCBwcm9maXRzIHdlcmUgdW5hdXRob3Jpc2VkLiBUaGUgZm91ciBkaXJlY3RvcnMgPHNwYW4gY2xhc3M9XCJpdFwiPndlcmU8L3NwYW4+IGxpYWJsZSwgYnV0IG5laXRoZXIgdGhlIHNvbGljaXRvciBub3IgdGhlIGNoYWlybWFuXHUyMDE5cyBmcmllbmQuIFRoZSBzb2xpY2l0b3Igd2FzIG5vdCBhY2NvdW50YWJsZSBhcyBoaXMgcHJvZml0IHdhcyBmdWxseSBhdXRob3JpemVkLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIiwKICAgICAgICAiQ29ycG9yYXRlIE9wcG9ydHVuaXR5IgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRmlkdWNpYXJ5IER1dGllcyAmbWRhc2g7IFVuYXV0aG9yaXNlZCBQcm9maXRzICZtZGFzaDsgQ29ycG9yYXRlIE9wcG9ydHVuaXR5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJJbmR1c3RyaWFsIERldmVsb3BtZW50IHYgQ29vbGV5IiwKICAgICAgICAiQmh1bGxhciB2IEJodWxsYXIiLAogICAgICAgICJSZWdhbCBDaW5lbWFzIHYgR3VsbGl2ZXIiLAogICAgICAgICJCYWxzdG9uIHYgSGVhZGxpbmUiLAogICAgICAgICJHdWlubmVzcyB2IFNhdW5kZXJzIiwKICAgICAgICAiVGVzY28gdiBQb29rIiwKICAgICAgICAiRXggcCBKYW1lcyIsCiAgICAgICAgIkhvbGRlciB2IEhvbGRlciIsCiAgICAgICAgIkxpc3RlciB2IFN0dWJicyIsCiAgICAgICAgIlJlIER1a2Ugb2YgTm9yZm9saydzIFNUcyIsCiAgICAgICAgIlR3aW5zZWN0cmEgdiBZYXJkbGV5IiwKICAgICAgICAiRGFyYXlkYW4gSG9sZGluZ3MgdiBTb2xsYW5kIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTY4IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTk2NyIsCiAgICAiTkFNRSI6ICJCb2FyZG1hbiB2IFBoaXBwcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIiwKICAgICAgICAiQ29ycG9yYXRlIE9wcG9ydHVuaXR5IgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiS2V5IgogICAgXSwKICAgICJDT01NRU5UIjogIkNyaXRpY3MgYXJndWUgdGhhdCB0aGlzIGNhc2UgZGVtb25zdHJhdGVzIHRoZSBoYXJzaG5lc3Mgb2YgZmlkdWNpYXJ5IGR1dGllcy4gT24gdGhlIG90aGVyIGhhbmQsIEJvYXJkbWFuIGNvdWxkIGhhdmUgc291Z2h0IHRoZSBhdXRob3Jpc2F0aW9ucyBoZSBuZWVkZWQuIiwKICAgICJDSVRBVElPTiI6ICJCb2FyZG1hbiB2IFBoaXBwcyBbMTk2N10gMiBBQyA0NiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQ29uZmlkZW50aWFsIGluZm9ybWF0aW9uIHRoYXQgYmVjb21lcyBrbm93biB0byBhIGZpZHVjaWFyeSBhcyBhIGNvbnNlcXVlbmNlIG9mIGNhcnJ5aW5nIG91dCBoaXMgb3IgaGVyIGZpZHVjaWFyeSBkdXRpZXMsIG1heSBoYXZlIHByb3ByaWV0b3JpYWwgY2hhcmFjdGVyaXN0aWNzLCBhbmQgdGhlcmVmb3JlIGJlIHJpZ2h0bHkgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSB0cnVzdCBwcm9wZXJ0eSBoZWxkIGZvciB0aGUgYmVuZWZpY2lhcmllcy4gUHJvZml0cyBtYWRlIGFzIGEgcmVzdWx0IG9mIGFjdGluZyBvbiB0aGlzIGluZm9ybWF0aW9uLCB0aGVyZWZvcmUsIG1heSBiZWxvbmcgdG8gdGhlIHRydXN0IGZ1bmQuIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJUaGUgc3ViamVjdCBvZiBhIGZhbWlseSB0cnVzdCB3YXMgYSBtaW5vcml0eSBzaGFyZWhvbGRpbmcgaW4gYSB0ZXh0aWxlcyBjb25jZXJuIGluIHRoZSBibGFjayBjb3VudHJ5IGFuZCBBdXN0cmFsaWEuIEluIHRoZSBvcGluaW9uIG9mIHRoZSB0d28gYWN0aXZlIHRydXN0ZWVzLCB0aGUgc2hhcmVzIHByb2R1Y2VkIGEgcG9vciByZXR1cm4gdGhyb3VnaCBpbmVmZmljaWVudCBtYW5hZ2VtZW50LiBUb2dldGhlciB3aXRoIHRoZWlyIHNvbGljaXRvciwgQm9hcmRtYW4sIHRoZXkgaGF0Y2hlZCBhIHBsYW4gdG8gYXBwb2ludCBvbmUgb2YgdGhlIGJlbmVmaWNpYXJpZXMgKFBoaXBwcykgYSBkaXJlY3RvciBvZiB0aGUgY29tcGFueS4gVGhlIGFwcG9pbnRtZW50IHdhcyBkdWx5IG1hZGUuIiwKICAgICAgICAiQXMgYSBkaXJlY3RvciwgUGhpcHBzLCBhY2NvbXBhbmllZCBieSBCb2FyZG1hbiBhcyBwcm94eSBvbiBiZWhhbGYgb2YgdGhlIHRydXN0LCBhdHRlbmRlZCBpbnRlcm5hbCBtZWV0aW5ncyBhdCB3aGljaCBoZSBsZWFybnQgb2YgY29uZmlkZW50aWFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpbm5lciB3b3JraW5ncyBvZiB0aGUgY29tcGFueS4gQm9hcmRtYW4gcmVjb21tZW5kZWQgdG8gdGhlIHRydXN0IHRoYXQgaXQgcHVyY2hhc2UgbW9yZSBzaGFyZXMuIEl0IGRlY2xpbmVkIHRvIGRvIHNvLCBzbyBCb2FyZG1hbiBib3VnaHQgdGhlbSBoaW1zZWxmLiBIZSByZXZpdGFsaXNlZCB0aGUgY29tcGFueSwgcmVhbGlzaW5nIGEgc3Vic3RhbnRpYWwgcHJvZml0IGZvciB0aGUgdHJ1c3QgJm1kYXNoOyBidXQgYWxzbyBmb3IgaGlzIDxzcGFuIGNsYXNzPVwiYmRcIj5vd248L3NwYW4+IHNoYXJlcy4iLAogICAgICAgICJOby1vbmUgaGFkIGxvc3Qgb3V0LCBidXQgb25lIG9mIHRoZSBiZW5lZmljaWFyaWVzIG5ldmVydGhlbGVzcyBzdWVkIEJvYXJkbWFuIGZvciB0aGUgcHJvZml0IGhpcyBzaGFyZXMgaGFkIG1hZGUsIGNsYWltaW5nIHRoYXQgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5pbmZvcm1hdGlvbjwvc3Bhbj4gbGVhZGluZyBoaW0gdG8gYnV5IHRoZSBzaGFyZXMgaGFkIGJlZW4gb2J0YWluZWQgaW4gcGVyZm9ybWFuY2Ugb2YgaGlzIGZpZHVjaWFyeSBkdXR5IHRvIHRoZSB0cnVzdC4iLAogICAgICAgICJDb3VsZCA8c3BhbiBjbGFzcz1cIml0XCI+aW5mb3JtYXRpb248L3NwYW4+IGJlIHRoZSBzdWJqZWN0IHByb3BlcnR5IG9mIGEgdHJ1c3Q/IgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRmlkdWNpYXJ5IER1dGllcyAmbWRhc2g7IFVuYXV0aG9yaXNlZCBQcm9maXRzICZtZGFzaDsgQ29ycG9yYXRlIE9wcG9ydHVuaXR5ICZtZGFzaDsgRW5kIG9mIEZpZHVjaWFyeSBEdXR5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJCYWxzdG9uIHYgSGVhZGxpbmUiLAogICAgICAgICJSZWdhbCBDaW5lbWFzIHYgR3VsbGl2ZXIiLAogICAgICAgICJCb2FyZG1hbiB2IFBoaXBwcyIsCiAgICAgICAgIkJodWxsYXIgdiBCaHVsbGFyIiwKICAgICAgICAiR3Vpbm5lc3MgdiBTYXVuZGVycyIsCiAgICAgICAgIlRlc2NvIHYgUG9vayIsCiAgICAgICAgIk8nU3VsbGl2YW4gdiBNYW5hZ2VtZW50IEFnZW5jeSBbMTk4NV0gUUIgNDI4IiwKICAgICAgICAiRW5nbGlzaCB2IERlZGhhbSBWYWxlIiwKICAgICAgICAiQnJpc3RvbCBhbmQgV2VzdCBCUyB2IE1vdGhldyIsCiAgICAgICAgIkFHIHYgQmxha2UiLAogICAgICAgICJSZSBNYWNhZGFtIiwKICAgICAgICAiU2luY2xhaXIgSW52ZXN0bWVudHMgdiBWZXJzYWlsbGVzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTY5IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTk3MiIsCiAgICAiTkFNRSI6ICJJbmR1c3RyaWFsIERldmVsb3BtZW50IHYgQ29vbGV5IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGaWR1Y2lhcnkgRHV0aWVzIiwKICAgICAgICAiVW5hdXRob3Jpc2VkIFByb2ZpdHMiLAogICAgICAgICJDb3Jwb3JhdGUgT3Bwb3J0dW5pdHkiLAogICAgICAgICJFbmQgb2YgRmlkdWNpYXJ5IER1dHkiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkluZHVzdHJpYWwgRGV2ZWxvcG1lbnQgQ29uc3VsdGFudCBMdGQgdiBDb29sZXkgWzE5NzJdIDEgV0xSIDQ0MyIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiUHJvZml0cyBtYWRlIGZyb20gdGhlIGV4cGxvaXRhdGlvbiBvZiBhIGNvcnBvcmF0ZSBvcHBvcnR1bml0eSBsZWFybnQgYXMgYSBmaWR1Y2lhcnksIHdoaWNoIHdhcyBkaXNob25lc3R5IGVuZGVkIGluIG9yZGVyIHRvIHByb2ZpdCBmcm9tIHRoZSBvcHBvcnR1bml0eSwgd2lsbCBiZSBjb25zaWRlcmVkIHNlY3JldCBwcm9maXRzLCB0aGUgZXF1aXRhYmxlIGludGVyZXN0IG9mIHdoaWNoIGJlbG9uZ3MgdG8gdGhlIHByaW5jaXBhbCB0byB3aG9tIHRoZSBmaWR1Y2lhcnkgZHV0eSB3YXMgb3dlZC4iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRoZSBkZWZlbmRhbnQsIGFuIGFyY2hpdGVjdCwgcmVzaWduZWQgZnJvbSBib2FyZCwgcHJldGVuZGluZyB0byBiZSBpbGwuIEhlIHRoZW4gJiM4MjE2O3JlY292ZXJlZCYjODIxNzsgYW5kIHRvb2sgdXAgdGhlIG9mZmVyIG9mIGEgY29udHJhY3QgdGhhdCBoYWQgYmVlbiBtYWRlIHRvIGhpbSB3aGVuIGEgZGlyZWN0b3IuIEluIGZhY3QgdGhlIGNvbXBhbnkgd291bGQgbm90IGhhdmUgYmVlbiBhYmxlIHRvIHRha2UgdGhlIGNvbnRyYWN0LCBidXQgdGhhdCBkaWRuXHUyMDE5dCBtYXR0ZXIuIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRmlkdWNpYXJ5IER1dGllcyAmbWRhc2g7IFVuYXV0aG9yaXNlZCBQcm9maXRzICZtZGFzaDsgTm8gUHJvZml0IFJ1bGUiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkJyYXkgdiBGb3JkIiwKICAgICAgICAiQmFsc3RvbiB2IEhlYWRsaW5lIiwKICAgICAgICAiUmVnYWwgQ2luZW1hcyB2IEd1bGxpdmVyIiwKICAgICAgICAiSW5kdXN0cmlhbCBEZXZlbG9wbWVudCB2IENvb2xleSIsCiAgICAgICAgIlRlc2NvIHYgUG9vayIsCiAgICAgICAgIlJlIE1hY2FkYW0iLAogICAgICAgICJCaHVsbGFyIHYgQmh1bGxhciIsCiAgICAgICAgIkJvYXJkbWFuIHYgUGhpcHBzIiwKICAgICAgICAiTydTdWxsaXZhbiB2IE1hbmFnZW1lbnQgQWdlbmN5IFsxOTg1XSBRQiA0MjgiLAogICAgICAgICJLZWVjaCB2IFNhbmRmb3JkIiwKICAgICAgICAiQUcgdiBCbGFrZSIsCiAgICAgICAgIkRhcmF5ZGFuIEhvbGRpbmdzIHYgU29sbGFuZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE3MCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjE5OTAiLAogICAgIk5BTUUiOiAiR3Vpbm5lc3MgdiBTYXVuZGVycyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIiwKICAgICAgICAiTm8gUHJvZml0IFJ1bGUiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkd1aW5uZXNzIFBsYyB2IFNhdW5kZXJzIFsxOTkwXSAyIEFDIDY2MyIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBwdXJwb3J0ZWQgYXV0aG9yaXNhdGlvbiBmb3IgYSBmaWR1Y2lhcnkgdG8gbWFrZSBhIHByb2ZpdCBpcyBpbmVmZmVjdGl2ZSBpZiB0aGUgcGFydHkgcHVycG9ydGluZyB0byBtYWtlIGl0IGhhcyBubyBwb3dlciB0byBkbyBzbyAmbWRhc2g7IGFuZCBvbmx5IGEgYm9hcmQgb2YgZGlyZWN0b3JzIGNhbiBhdXRob3Jpc2UgcmVtdW5lcmF0aW9uIHRvIGJvYXJkIG1lbWJlcnMuIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJTYXVuZGVycyBoYWQgYmVlbiBhcHBvaW50ZWQgdG8gbmVnb3RpYXRlIGEgdGFrZW92ZXIgYmlkLCBmb3IgIHN1Y2Nlc3NmdWwgY29tcGxldGlvbiBvZiB3aGljaCBoZSB3YXMgdG8gYmUgcGFpZCBcdTAwYTM1LjJNLiBXaGVuY2UgYSBjb25mbGljdCBvZiBpbnRlcmVzdHMgJm1kYXNoOyBoaXMgam9iIGFzIGEgZGlyZWN0b3Igd2FzIHRvIGFjdCBpbiB0aGUgYmVzdCBpbnRlcmVzdCBvZiB0aGUgY29tcGFueSwgYW5kIGhpcyBpbnRlcmVzdHMgYXMgYSBtYW4gd2hvIHN0b29kIHRvIG1ha2UgXHUwMGEzNS4yTSB3YXMgdG8gbWFrZSBcdTAwYTM1LjJNLiBIZSBuZWdvdGlhdGVkIHRoZSB0YWtlb3ZlciBhbmQgd2FzIHBhaWQuLi4gYnV0IGhhZCB0byBwYXkgaXQgYmFjay4gQWxzbyB3b3VuZCB1cCBpbiBqYWlsLiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkZpZHVjaWFyeSBEdXRpZXMgJm1kYXNoOyBVbmF1dGhvcmlzZWQgUHJvZml0cyAmbWRhc2g7IENvcnBvcmF0ZSBPcHBvcnR1bml0eSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiSW5kdXN0cmlhbCBEZXZlbG9wbWVudCB2IENvb2xleSIsCiAgICAgICAgIkJhbHN0b24gdiBIZWFkbGluZSIsCiAgICAgICAgIkJvYXJkbWFuIHYgUGhpcHBzIiwKICAgICAgICAiUmVnYWwgQ2luZW1hcyB2IEd1bGxpdmVyIiwKICAgICAgICAiR3Vpbm5lc3MgdiBTYXVuZGVycyIsCiAgICAgICAgIlRlc2NvIHYgUG9vayIsCiAgICAgICAgIlJlYWRpbmcgdiBBRyIsCiAgICAgICAgIkV4IHAgTGFjZXkiLAogICAgICAgICJBRyB2IEJsYWtlIiwKICAgICAgICAiQWJlcmRlZW4gUmFpbHdheSB2IEJsYWlraWUiLAogICAgICAgICJGSFIgdiBDZWRhciBDYXBpdGFsIiwKICAgICAgICAiQUcgZm9yIEhLIHYgUmVpZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE3MSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjIwMDMiLAogICAgIk5BTUUiOiAiQmh1bGxhciB2IEJodWxsYXIiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJVbmF1dGhvcmlzZWQgUHJvZml0cyIsCiAgICAgICAgIkNvcnBvcmF0ZSBPcHBvcnR1bml0eSIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiQmh1bGxhciB2IEJodWxsYXIgWzIwMDNdIDIgQkNMQyAyNDEiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgZmlkdWNpYXJ5IGNhbiBiZSBhY2NvdW50YWJsZSBmb3IgdGhlIGV4cGxvaXRhdGlvbiBvZiBhIGNvcnBvcmF0ZSBvcHBvcnR1bml0eSA8c3BhbiBjbGFzcz1cImJkXCI+ZXZlbiB0aG91Z2g8L3NwYW4+IHRoZSBwcmluY2lwYWwgbWF5IGhhdmUgZm9yZXN3b3JuIGl0cyBleHBsb2l0YXRpb24uIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBIGdyb2Nlcnkgd2FzIG93bmVkIGVxdWFsbHkgYnkgdHdvIGZhbWlsaWVzLCB3aG8gZmVsbCBvdXQuIFRoZXkgYWdyZWVkIHRvIGxpdmUgb24gd2hhdCB0aGV5IGhhZCwgYW5kIG5vdCB0byBpbnZlc3QgaW4gYW55dGhpbmcgZWxzZS4gQnV0IG9uZSBvZiB0aGUgZGlyZWN0b3JzIHNhdyBhbiBvcHBvcnR1bml0eSB0byBidXkgYSBwcm9wZXJ0eSBuZXh0IHRvIHRoZSBvbmUgdGhleSBhbHJlYWR5IGhhZCAmbWRhc2g7IHNvIGhlIGNyZWF0ZWQgYSBuZXcgY29tcGFueSwgU2lsdmVyY3Jlc3QgYW5kIGJvdWdodCB0aGUgbmV3IHByb3BlcnR5LiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIkZpZHVjaWFyeSBEdXRpZXMgJm1kYXNoOyBVbmF1dGhvcmlzZWQgUHJvZml0cyAmbWRhc2g7IENvcnBvcmF0ZSBPcHBvcnR1bml0eSAmbWRhc2g7IEVuZCBvZiBGaWR1Y2lhcnkgRHV0eSAvIEZpZHVjaWFyeSBEdXRpZXMgJm1kYXNoOyBVbmF1dGhvcmlzZWQgUHJvZml0cyAmbWRhc2g7IENvcnBvcmF0ZSBPcHBvcnR1bml0eSAmbWRhc2g7IEVuZCBvZiBGaWR1Y2lhcnkgRHV0eSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJCYWxzdG9uIEx0ZCB2IEhlYWRsaW5lIEZpbHRlcnMgTHRkIFsxOTkwXSBGU1IgMzg1IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJJbmR1c3RyaWFsIERldmVsb3BtZW50IHYgQ29vbGV5IiwKICAgICAgICAiQm9hcmRtYW4gdiBQaGlwcHMiLAogICAgICAgICJSZWdhbCBDaW5lbWFzIHYgR3VsbGl2ZXIiLAogICAgICAgICJCaHVsbGFyIHYgQmh1bGxhciIsCiAgICAgICAgIlRlc2NvIHYgUG9vayIsCiAgICAgICAgIkd1aW5uZXNzIHYgU2F1bmRlcnMiLAogICAgICAgICJSZSBEdWtlIG9mIE5vcmZvbGsncyBTVHMiLAogICAgICAgICJEYXJheWRhbiBIb2xkaW5ncyB2IFNvbGxhbmQiLAogICAgICAgICJBYmVyZGVlbiBSYWlsd2F5IHYgQmxhaWtpZSIsCiAgICAgICAgIkFHIGZvciBISyB2IFJlaWQiLAogICAgICAgICJLZWVjaCB2IFNhbmRmb3JkIiwKICAgICAgICAiRXggcCBMYWNleSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE3MiIsCiAgICAiWUVBUiI6ICIxOTkwIiwKICAgICJIRUxEIjogWwogICAgICAgICJBIGRpcmVjdG9yJiM4MjE3O3MgaW50ZW50aW9uIHRvIGV4cGxvaXQgYSBjb3Jwb3JhdGUgb3Bwb3J0dW5pdHkgYWZ0ZXIgdGhlICB0ZXJtaW5hdGlvbiBvZiBkaXJlY3RvcnNoaXAgaXMgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdDwvc3Bhbj4gcGVyIHNlIGEgYnJlYWNoIG9mIGZpZHVjaWFyeSBkdXR5LCBwYXJ0aWN1bGFybHkgd2hlbiB0aGUgb3Bwb3J0dW5pdHkgPHNwYW4gY2xhc3M9XCJpdFwiPndhczwvc3Bhbj4gZXhwbG9pdGVkIGJ5IHRoZSBwcmluY2lwYWwsIHdobyBkZWNpZGVkIHRvIDxzcGFuIGNsYXNzPVwiaXRcIj5jZWFzZTwvc3Bhbj4gIGRvaW5nIHNvLiBOZWl0aGVyIGlzIGZhaWx1cmUgdG8gZGlzY2xvc2Ugc3VjaCBhbiBpbnRlbnRpb24gYSBicmVhY2guIiwKICAgICAgICAiRmFsY29uZXIgSiAmbWRhc2g7ICYjODIxNjtJbiBteSBqdWRnbWVudCBhbiBpbnRlbnRpb24gYnkgYSBkaXJlY3RvciBvZiBhIGNvbXBhbnkgdG8gc2V0IHVwIGJ1c2luZXNzIGluIGNvbXBldGl0aW9uIHdpdGggdGhlIGNvbXBhbnkgYWZ0ZXIgaGlzIGRpcmVjdG9yc2hpcCBoYXMgY2Vhc2VkIGlzIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3QgdG8gYmUgcmVnYXJkZWQgYXMgYSBjb25mbGljdGluZyBpbnRlcmVzdDwvc3Bhbj4gd2l0aGluIHRoZSBjb250ZXh0IG9mIHRoZSBwcmluY2lwbGUsIGhhdmluZyByZWdhcmQgdG8gdGhlIHJ1bGVzIG9mIHB1YmxpYyBwb2xpY3kgYXMgdG8gcmVzdHJhaW50IG9mIHRyYWRlLCBub3IgaXMgdGhlIHRha2luZyBvZiBhbnkgcHJlbGltaW5hcnkgc3RlcHMgdG8gaW52ZXN0aWdhdGUgb3IgZm9yd2FyZCB0aGF0IGludGVudGlvbiBzbyBsb25nIGFzIHRoZXJlIGlzIG5vIGFjdHVhbCBjb21wZXRpdGl2ZSBhY3Rpdml0eSwgc3VjaCBhcywgZm9yIGluc3RhbmNlLCBjb21wZXRpdGl2ZSB0ZW5kZXJpbmcgb3IgYWN0dWFsIHRyYWRpbmcsIHdoaWxlIGhlIHJlbWFpbnMgYSBkaXJlY3Rvci4mIzgyMTc7IgogICAgXSwKICAgICJOQU1FIjogIkJhbHN0b24gdiBIZWFkbGluZSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIiwKICAgICAgICAiQ29ycG9yYXRlIE9wcG9ydHVuaXR5IiwKICAgICAgICAiRW5kIG9mIEZpZHVjaWFyeSBEdXR5IiwKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIlVuYXV0aG9yaXNlZCBQcm9maXRzIiwKICAgICAgICAiQ29ycG9yYXRlIE9wcG9ydHVuaXR5IiwKICAgICAgICAiRW5kIG9mIEZpZHVjaWFyeSBEdXR5IgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRmlkdWNpYXJ5IER1dGllcyAmbWRhc2g7IEJyaWJlcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRkhSIHYgQ2VkYXIgQ2FwaXRhbCIsCiAgICAgICAgIlJlYWRpbmcgdiBBRyIsCiAgICAgICAgIlNpbmNsYWlyIEludmVzdG1lbnRzIHYgVmVyc2FpbGxlcyIsCiAgICAgICAgIkRhcmF5ZGFuIEhvbGRpbmdzIHYgU29sbGFuZCIsCiAgICAgICAgIkFHIGZvciBISyB2IFJlaWQiLAogICAgICAgICJSZSBNYWNhZGFtIiwKICAgICAgICAiQUcgdiBCbGFrZSIsCiAgICAgICAgIlJlZ2FsIENpbmVtYXMgdiBHdWxsaXZlciIsCiAgICAgICAgIk8nU3VsbGl2YW4gdiBNYW5hZ2VtZW50IEFnZW5jeSBbMTk4NV0gUUIgNDI4IiwKICAgICAgICAiRXggcCBKYW1lcyIsCiAgICAgICAgIkJhbHN0b24gdiBIZWFkbGluZSIsCiAgICAgICAgIktlZWNoIHYgU2FuZGZvcmQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNzMiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIxODkwIiwKICAgICJOQU1FIjogIkxpc3RlciB2IFN0dWJicyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIkJyaWJlcyIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiTGlzdGVyIHYgU3R1YmJzICgxODkwKSA0NSBDaCBEIDEiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkluIG9yZGVyIHRvIGF2b2lkIHVuanVzdCBlbnJpY2htZW50LCBhIGZpZHVjaWFyeSB3aG8gdG9vayBhIGJyaWJlIHdhcyBwZXJzb25hbGx5IGxpYWJsZSwgcmF0aGVyIHRoYW4gc3ViamVjdCB0byBhIHByb3ByaWV0YXJ5IHJlbWVkeS4gVWx0aW1hdGVseSBvdmVydHVybmVkIChhZnRlciBtdWNoIGNyaXRpY2lzbSkgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWFua2FyaW91cyAyPC9zcGFuPiIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBjaGFwIGhhZCB0YWtlbiBidW5ncyB0byBidXkgZHllcyBmcm9tIGEgcGFydGljdWxhciBjb21wYW55LCB0byB0aGUgcG90ZW50aWFsIGRldHJpbWVudCBvZiBoaXMgb3duLiBIZSBpbnZlc3RlZCB0aGUgbW9uZXkgaW4gbGFuZCwgd2hpY2ggd2VudCB1cCBpbiB2YWx1ZS4gU2hvdWxkIHRoZSBjbGFpbWFudCBnZXQgdGhlIGJlbmVmaXQgb2YgdGhlIGluY3JlYXNlZCB2YWx1ZSBvZiB0aGUgbGFuZD8iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJGaWR1Y2lhcnkgRHV0aWVzICZtZGFzaDsgQnJpYmVzICZtZGFzaDsgUHJvcHJpZXRhcnkgUmVtZWRpZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkRhcmF5ZGFuIEhvbGRpbmdzIHYgU29sbGFuZCIsCiAgICAgICAgIkxpc3RlciB2IFN0dWJicyIsCiAgICAgICAgIlJlYWRpbmcgdiBBRyIsCiAgICAgICAgIkZIUiB2IENlZGFyIENhcGl0YWwiLAogICAgICAgICJTaW5jbGFpciBJbnZlc3RtZW50cyB2IFZlcnNhaWxsZXMiLAogICAgICAgICJLZWVjaCB2IFNhbmRmb3JkIiwKICAgICAgICAiRXggcCBKYW1lcyIsCiAgICAgICAgIkJyYXkgdiBGb3JkIiwKICAgICAgICAiSG9sZGVyIHYgSG9sZGVyIiwKICAgICAgICAiSW5kdXN0cmlhbCBEZXZlbG9wbWVudCB2IENvb2xleSIsCiAgICAgICAgIlJlIE1hY2FkYW0iLAogICAgICAgICJCcmlzdG9sIGFuZCBXZXN0IEJTIHYgTW90aGV3IgogICAgXSwKICAgICJOVU1CRVIiOiAiMTc0IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNPVVJUIjogIlVLUEMiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgYnJpYmUgcGFpZCB0byBhIGZpZHVjaWFyeSBpcyByZWNvdmVyYWJsZSBieSB0aGUgcHJpbmNpcGFsIGluIGVxdWl0YWJsZSBhY2NvdW50aW5nLCBhbG9uZyB3aXRoIGFueSBwcm9maXRzIGl0IG1heSBoYXZlIG1hZGUuIDxzcGFuIGNsYXNzPVwiaXRcIj5FcXVpdHkgY29uc2lkZXJzIGFzIGRvbmUgdGhhdCB3aGljaCA8c3BhbiBjbGFzcz1cImJkXCI+b3VnaHQ8L3NwYW4+IHRvIGhhdmUgYmVlbiBkb25lPC9zcGFuPiwgc28gYSBmaWR1Y2lhcnkgd2hvIHRha2VzIGEgYnJpYmUgb3VnaHQgdG8gdHJhbnNmZXIgaXQgaW1tZWRpYXRlbHkgdG8gaGlzIHByaW5jaXBhbC4gVGhlIGJlbmVmaWNpYWwgaW50ZXJlc3Qgb2YgYSBicmliZSByZWNlaXZlZCBieSBhIGZpZHVjaWFyeSwgdGhlcmVmb3JlLCBiZWxvbmdzIGFiIGluaXRpbyB0byB0aGUgcHJpbmNpcGFsLiIsCiAgICAgICAgIkxvcmQgVGVtcGxlbWFuICZtZGFzaDsgJiM4MjE2O3RoZSBmYWxzZSBmaWR1Y2lhcnkgd2hvIHJlY2VpdmVkIHRoZSBicmliZSBpbiBicmVhY2ggb2YgZHV0eSA8c3BhbiBjbGFzcz1cImJkXCI+bXVzdCBwYXkgYW5kIGFjY291bnQgZm9yIHRoZSBicmliZSB0byB0aGUgcGVyc29uIHRvIHdob20gdGhhdCBkdXR5IHdhcyBvd2VkLiBJbiB0aGUgcHJlc2VudCBjYXNlLCBhcyBzb29uIGFzIHRoZSBmaXJzdCByZXNwb25kZW50IHJlY2VpdmVkIGEgYnJpYmUgaW4gYnJlYWNoIG9mIHRoZSBkdXRpZXMgaGUgb3dlZCB0byB0aGUgR292ZXJubWVudCBvZiBIb25nIEtvbmcsIGhlIGJlY2FtZSBhIGRlYnRvciBpbiBlcXVpdHkgdG8gdGhlIENyb3duIGZvciB0aGUgYW1vdW50IG9mIHRoYXQgYnJpYmUuPC9zcGFuPiBTbyBtdWNoIGlzIGFkbWl0dGVkLjxicj4mZW1zcDsmZW1zcDtCdXQgaWYgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5icmliZSBjb25zaXN0cyBvZiBwcm9wZXJ0eSB3aGljaCBpbmNyZWFzZXMgaW4gdmFsdWU8L3NwYW4+IG9yIGlmIGEgY2FzaCBicmliZSBpcyBpbnZlc3RlZCBhZHZhbnRhZ2VvdXNseSwgdGhlIGZhbHNlIDxzcGFuIGNsYXNzPVwiYmRcIj5maWR1Y2lhcnkgd2lsbCByZWNlaXZlIGEgYmVuZWZpdDwvc3Bhbj4gZnJvbSBoaXMgYnJlYWNoIG9mIGR1dHkgPHNwYW4gY2xhc3M9XCJiZFwiPnVubGVzcyBoZSBpcyBhY2NvdW50YWJsZSBub3Qgb25seSBmb3IgdGhlIG9yaWdpbmFsIGFtb3VudDwvc3Bhbj4gb3IgdmFsdWUgb2YgdGhlIGJyaWJlIDxzcGFuIGNsYXNzPVwiYmRcIj5idXQgYWxzbyBmb3IgdGhlIGluY3JlYXNlZCB2YWx1ZSBvZiB0aGUgcHJvcGVydHk8L3NwYW4+IHJlcHJlc2VudGluZyB0aGUgYnJpYmUuPGJyPiZlbXNwOyZlbXNwO0FzIHNvb24gYXMgdGhlIGJyaWJlIHdhcyByZWNlaXZlZCBpdCBzaG91bGQgaGF2ZSBiZWVuIHBhaWQgb3IgdHJhbnNmZXJyZWQgaW5zdGFudGVyIHRvIHRoZSBwZXJzb24gd2hvIHN1ZmZlcmVkIGZyb20gdGhlIGJyZWFjaCBvZiBkdXR5LiBFcXVpdHkgY29uc2lkZXJzIGFzIGRvbmUgdGhhdCB3aGljaCBvdWdodCB0byBoYXZlIGJlZW4gZG9uZS4gQXMgc29vbiBhcyB0aGUgYnJpYmUgd2FzIHJlY2VpdmVkLCB3aGV0aGVyIGluIGNhc2ggb3IgaW4ga2luZCwgdGhlIGZhbHNlIGZpZHVjaWFyeSBoZWxkIHRoZSBicmliZSBvbiBhIGNvbnN0cnVjdGl2ZSB0cnVzdCBmb3IgdGhlIHBlcnNvbiBpbmp1cmVkLiBUd28gb2JqZWN0aW9ucyBoYXZlIGJlZW4gcmFpc2VkIHRvIHRoaXMgYW5hbHlzaXMuIEZpcnN0IGl0IGlzIHNhaWQgdGhhdCBpZiB0aGUgZmlkdWNpYXJ5IGlzIGluIGVxdWl0eSBhIGRlYnRvciB0byB0aGUgcGVyc29uIGluanVyZWQsIGhlIGNhbm5vdCBhbHNvIGJlIGEgdHJ1c3RlZSBvZiB0aGUgYnJpYmUuIEJ1dCB0aGVyZSBpcyBubyByZWFzb24gd2h5IGVxdWl0eSBzaG91bGQgbm90IHByb3ZpZGUgdHdvIHJlbWVkaWVzLCBzbyBsb25nIGFzIHRoZXkgZG8gbm90IHJlc3VsdCBpbiBkb3VibGUgcmVjb3ZlcnkuIElmIHRoZSBwcm9wZXJ0eSByZXByZXNlbnRpbmcgdGhlIGJyaWJlIGV4Y2VlZHMgdGhlIG9yaWdpbmFsIGJyaWJlIGluIHZhbHVlLCB0aGUgZmlkdWNpYXJ5IGNhbm5vdCByZXRhaW4gdGhlIGJlbmVmaXQgb2YgdGhlIGluY3JlYXNlIGluIHZhbHVlIHdoaWNoIGhlIG9idGFpbmVkIHNvbGVseSBhcyBhIHJlc3VsdCBvZiBoaXMgYnJlYWNoIG9mIGR1dHkuIFNlY29uZGx5LCBpdCBpcyBzYWlkIHRoYXQgaWYgdGhlIGZhbHNlIGZpZHVjaWFyeSBob2xkcyBwcm9wZXJ0eSByZXByZXNlbnRpbmcgdGhlIGJyaWJlIGluIHRydXN0IGZvciB0aGUgcGVyc29uIGluanVyZWQsIGFuZCBpZiB0aGUgZmFsc2UgZmlkdWNpYXJ5IGlzIG9yIGJlY29tZXMgaW5zb2x2ZW50LCB0aGUgdW5zZWN1cmVkIGNyZWRpdG9ycyBvZiB0aGUgZmFsc2UgZmlkdWNpYXJ5IHdpbGwgYmUgZGVwcml2ZWQgb2YgdGhlaXIgcmlnaHQgdG8gc2hhcmUgaW4gdGhlIHByb2NlZWRzIG9mIHRoYXQgcHJvcGVydHkuIEJ1dCB0aGUgdW5zZWN1cmVkIGNyZWRpdG9ycyBjYW5ub3QgYmUgaW4gYSBiZXR0ZXIgcG9zaXRpb24gdGhhbiB0aGVpciBkZWJ0b3IuIFRoZSBhdXRob3JpdGllcyBzaG93IHRoYXQgcHJvcGVydHkgYWNxdWlyZWQgYnkgYSB0cnVzdGVlIGlubm9jZW50bHkgYnV0IGluIGJyZWFjaCBvZiB0cnVzdCBhbmQgdGhlIHByb3BlcnR5IGZyb20gdGltZSB0byB0aW1lIHJlcHJlc2VudGluZyB0aGUgc2FtZSBiZWxvbmcgaW4gZXF1aXR5IHRvIHRoZSBjZXN0dWkgcXVlIHRydXN0IGFuZCBub3QgdG8gdGhlIHRydXN0ZWUgcGVyc29uYWxseSB3aGV0aGVyIGhlIGlzIHNvbHZlbnQgb3IgaW5zb2x2ZW50LiBQcm9wZXJ0eSBhY3F1aXJlZCBieSBhIHRydXN0ZWUgYXMgYSByZXN1bHQgb2YgYSBjcmltaW5hbCBicmVhY2ggb2YgdHJ1c3QgYW5kIHRoZSBwcm9wZXJ0eSBmcm9tIHRpbWUgdG8gdGltZSByZXByZXNlbnRpbmcgdGhlIHNhbWUgbXVzdCBhbHNvIGJlbG9uZyBpbiBlcXVpdHkgdG8gaGlzIGNlc3R1aSBxdWUgdHJ1c3QgYW5kIG5vdCB0byB0aGUgdHJ1c3RlZSB3aGV0aGVyIGhlIGlzIHNvbHZlbnQgb3IgaW5zb2x2ZW50LiIKICAgIF0sCiAgICAiTkFNRSI6ICJBRyBmb3IgSEsgdiBSZWlkIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGaWR1Y2lhcnkgRHV0aWVzIiwKICAgICAgICAiQnJpYmVzIiwKICAgICAgICAiUHJvcHJpZXRhcnkgUmVtZWRpZXMiCiAgICBdLAogICAgIllFQVIiOiAiMTk5NCIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIlBlcnN1YXNpdmUiLAogICAgICAgICJDcml0aWNpc2VkIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJBdHRvcm5leSBHZW5lcmFsIGZvciBIb25nIEtvbmcgdiBSZWlkIFsxOTk0XSAxIEFDIDMyNCIsCiAgICAiQUtBIjogIkhLIHYgUmVpZCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiUmVpZCwgdGhlIGVxdWl2YWxlbnQgb2YgdGhlIERQUCBvZiBISywgaGFkIGFjY2VwdGVkIGJyaWJlcyB0byBwcmV2ZW50IHByb3NlY3V0aW9ucy4gSW52ZXN0ZWQgaW4gc29tZSBwcm9wZXJ0eSBpbiBOZXcgWmVhbGFuZCAmbWRhc2g7IGhlIHdhcyBoaW1zZWxmIGEgS2l3aS4iLAogICAgICAgICJUaGUgYXJndW1lbnQgd2FzIHB1dCB0aGF0LCBhcyA8c3BhbiBjbGFzcz1cIml0XCI+ZXF1aXR5IGxvb2tzIGFzIGRvbmUgdGhhdCB3aGljaCBvdWdodCB0byBiZSBkb25lPC9zcGFuPiwgaGUgPHNwYW4gY2xhc3M9XCJiZFwiPm91Z2h0PC9zcGFuPiB0byBoYXZlIGRvbmUgb24gaGF2aW5nIHJlY2VpdmVkIHRoZSBicmliZXMsIHdhcyB0byBnaXZlIHRoZW0gc3RyYWlnaHQgdG8gdGhlIHByaW5jaXBsZSwgdGhlIENyb3duLiBUaGUgYnJpYmUsIGl0IHdhcyB0aGVyZWZvcmUgYXNzZXJ0ZWQsIGJlbG9uZ2VkIHRvIHRoZSBwcmluY2lwbGUuIgogICAgXSwKICAgICJXSUtJTElOSyI6IFsKICAgICAgICAiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQS1HX2Zvcl9Ib25nX0tvbmdfdl9SZWlkIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRmlkdWNpYXJ5IER1dGllcyAmbWRhc2g7IEJyaWJlcyAvIEZpZHVjaWFyeSBEdXRpZXMgJm1kYXNoOyBCcmliZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkFHIGZvciBISyB2IFJlaWQiLAogICAgICAgICJMaXN0ZXIgdiBTdHViYnMiLAogICAgICAgICJSZWFkaW5nIHYgQUciLAogICAgICAgICJGSFIgdiBDZWRhciBDYXBpdGFsIiwKICAgICAgICAiU2luY2xhaXIgSW52ZXN0bWVudHMgdiBWZXJzYWlsbGVzIiwKICAgICAgICAiUmUgTWFjYWRhbSIsCiAgICAgICAgIlRlc2NvIHYgUG9vayIsCiAgICAgICAgIkJhbHN0b24gdiBIZWFkbGluZSIsCiAgICAgICAgIlJlIER1a2Ugb2YgTm9yZm9saydzIFNUcyIsCiAgICAgICAgIk8nU3VsbGl2YW4gdiBNYW5hZ2VtZW50IEFnZW5jeSBbMTk4NV0gUUIgNDI4IiwKICAgICAgICAiRXggcCBKYW1lcyIsCiAgICAgICAgIkJodWxsYXIgdiBCaHVsbGFyIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTc1IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgYnJpYmUgcGFpZCB0byBhIGZpZHVjaWFyeSA8c3BhbiBjbGFzcz1cImJkXCI+bWl4ZWQgaW50byB0aGUgcHJpbmNpcGxlIGZ1bmQ8L3NwYW4+IHdpbGwgZ2l2ZSByaXNlIHRvIGFuIGVxdWl0YWJsZSByZW1lZHkuIDxzcGFuIGNsYXNzPVwiaWxjXCI+VE9ETyAtIENoZWNrIHRoaXMsIHNlZW1zIGluY29uc2lzdGVudCB3aXRoIFNpbmNsYWlyLCBNYW5rYXJpb3VzLCBldGMuPC9zcGFuPiIKICAgIF0sCiAgICAiTkFNRSI6ICJEYXJheWRhbiBIb2xkaW5ncyB2IFNvbGxhbmQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJCcmliZXMiLAogICAgICAgICJGaWR1Y2lhcnkgRHV0aWVzIiwKICAgICAgICAiQnJpYmVzIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJEYXJheWRhbiBIb2xkaW5ncyBMdGQgdiBTb2xsYW5kIEludGVybmF0aW9uYWwgTHRkIFsyMDA0XSBFV0hDIDYyMiAoQ2gpIiwKICAgICJZRUFSIjogIjIwMDQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRoZSBwcmljZSBvZiBhIHB1cmNoYXNlIHdhcyBpbmZsYXRlZCBieSAxMCUsIGFzIGEgYnJpYmUuIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRmlkdWNpYXJ5IER1dGllcyAmbWRhc2g7IEJyaWJlcyAmbWRhc2g7IFJlbWVkaWVzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZWFkaW5nIHYgQUciLAogICAgICAgICJEYXJheWRhbiBIb2xkaW5ncyB2IFNvbGxhbmQiLAogICAgICAgICJMaXN0ZXIgdiBTdHViYnMiLAogICAgICAgICJBRyBmb3IgSEsgdiBSZWlkIiwKICAgICAgICAiRkhSIHYgQ2VkYXIgQ2FwaXRhbCIsCiAgICAgICAgIkFiZXJkZWVuIFJhaWx3YXkgdiBCbGFpa2llIiwKICAgICAgICAiRXggcCBKYW1lcyIsCiAgICAgICAgIk8nU3VsbGl2YW4gdiBNYW5hZ2VtZW50IEFnZW5jeSBbMTk4NV0gUUIgNDI4IiwKICAgICAgICAiUmUgRHVrZSBvZiBOb3Jmb2xrJ3MgU1RzIiwKICAgICAgICAiQmFsc3RvbiB2IEhlYWRsaW5lIiwKICAgICAgICAiSG9sZGVyIHYgSG9sZGVyIiwKICAgICAgICAiRXggcCBMYWNleSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE3NiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJBS0EiOiAiU2luY2xhaXIiLAogICAgIllFQVIiOiAiMjAxMSIsCiAgICAiTkFNRSI6ICJTaW5jbGFpciBJbnZlc3RtZW50cyB2IFZlcnNhaWxsZXMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJCcmliZXMiLAogICAgICAgICJSZW1lZGllcyIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIk5ldWJlcmdlciIKICAgIF0sCiAgICAiQ09NTUVOVCI6ICJWaXJnbyBwcmFpc2VzIHRoaXM7IG90aGVycyBhcmd1ZSBpdCBpZ25vcmVzIHRoZSBwdWJsaWMgcG9saWN5IGNvbnNpZGVyYXRpb24gYW5pbWF0aW5nIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFHIGZvciBISyB2IFJlaWQ8L3NwYW4+LiIsCiAgICAiQ0lUQVRJT04iOiAiU2luY2xhaXIgSW52ZXN0bWVudCAoVUspIEx0ZCB2IFZlcnNhaWxsZXMgVHJhZGUgRmluYW5jZSBMdGQgWzIwMTFdIDQgQWxsIEVSIDMzNSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQXR0cmFjdGl2ZSBQcml2eSBDb3VuY2lsIGRlY2lzaW9ucyBub3R3aXRoc3RhbmRpbmcsIHRoZSBnZW5lcmFsIHJ1bGUgaW4gZXN0YWJsaXNoZWQgcHJlY2VkZW50IGlzIHRoYXQgdGhlIHJlbWVkeSBmb3IgdW5hdXRob3Jpc2VkIHByb2ZpdHMgbWFkZSBpbiBicmVhY2ggb2YgZmlkdWNpYXJ5IGR1dHkgaXMgPHNwYW4gY2xhc3M9XCJiZFwiPnBlcnNvbmFsPC9zcGFuPi4gQSBwcm9wcmlldGFyeSByZW1lZHkgaXMgb25seSBhdmFpbGFibGUgaWYgdGhlIGFzc2V0IG9mIG1vbmV5IHdhcywgb3IgaGFkIGJlZW4sIDxzcGFuIGNsYXNzPVwiYmRcIj5iZW5lZmljaWFsbHk8L3NwYW4+IHRoZSBwcm9wZXJ0eSBvZiB0aGUgY2xhaW1hbnQgJm1kYXNoOyBvciB3aGVyZSB0aGUgdHJ1c3RlZSBhY3F1aXJlZCB0aGUgYXNzZXQgYnkgdGFraW5nIGFkdmFudGFnZSBvZiBhbiBvcHBvcnR1bml0eSBvciByaWdodCB3aGljaCB3YXMgdGhlIHByb3BlcnR5IG9mIHRoZSBiZW5lZmljaWFyeS4iLAogICAgICAgICJUaGlzIHByZWZlcmVuY2UgZm9yIHBlcnNvbmFsIHJlbWVkaWVzIGhhcyB0aGUgYWR2YW50YWdlIG9mIGxlYXZpbmcgbW9yZSBhc3NldHMgYXZhaWxhYmxlIHRvIGJlIGRpc3RyaWJ1dGVkIHRvIHRoZSBjcmVkaXRvcnMgb2YgYW4gaW5zb2x2ZW50IGNvbXBhbnkuIiwKICAgICAgICAiTmV1YmVyZ2VyIE1SLCBvYml0ZXIgJm1kYXNoOyB0aGUgQ291cnQgb2YgQXBwZWFsIGNhbiBvbmx5IGdldCBhd2F5IHdpdGggcHJlZmVycmluZyBhIG5vbi1iaW5kaW5nIFByaXZ5IENvdW5jaWwgZGVjaXNpb24gdG8gYSBiaW5kaW5nIGRvbWVzdGljIGF1dGhvcml0eSB3aGVuIGl0JiM4MjE3O3MgYSA8c3BhbiBjbGFzcz1cIml0XCI+Zm9yZWdvbmUgY29uY2x1c2lvbjwvc3Bhbj4gdGhhdCB0aGUgU3VwcmVtZSBDb3VydCB3b3VsZCBkbyBsaWtld2lzZS4iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlNpbmNsYWlyIGhhZCBwYWlkIHN1YnN0YW50aWFsIHN1bXMgdG8gYSBuZXR3b3JrIG9mIGNvbXBhbmllcyBvcGVyYXRlZCBieSB0d28gZ2VudGxlbWVuIGltcHJlc3NpdmUgaW4gdGhlaXIgY2FwYWNpdHkgdG8ga2VlcCBldmVyeW9uZSBob29kd2lua2VkIGZvciBoYWxmIGEgZGVjYWRlLiBJbiAxOTk5IHRoZXkgd2VyZSBmb3VuZCBvdXQgYW5kIGphaWxlZCwgYW5kIFZlcnNhaWxsZXMgcHV0IGludG8gYWRtaW5pc3RyYXRpb24uIFNpbmNsYWlyIHN1ZWQsIGNsYWltaW5nIGEgcHJvcHJpZXRhcnkgaW50ZXJlc3QgaW4gdGhlIG1vbmllcyBtYWRlIGJ5IHRoZSB0d28gcmF0YmFnIGZyYXVkc3RlcnMuIiwKICAgICAgICAiQXQgZmlyc3QgaW5zdGFuY2UsIExld2lzb24gSiBmb2xsb3dlZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MaXN0ZXIgdiBTdHViYnM8L3NwYW4+LCByZWdyZXR0aW5nIHRoYXQgaGUgY291bGQgbm90IGFwcGx5IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFHIGZvciBISyB2IFJlaWQ8L3NwYW4+LiBGaW5kaW5nIHRoYXQgbm8gdHJ1c3QgaGFkIGFyaXNlbiwgU2luY2xhaXImIzgyMTc7cyBjbGFpbSB3YXMgbWVyZWx5IGFzIGEgY29tbW9uLWxhdyBjcmVkaXRvci4iCiAgICBdLAogICAgIldJS0lMSU5LIjogWwogICAgICAgICJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TaW5jbGFpcl9JbnZlc3RtZW50c18oVUspX0x0ZF92X1ZlcnNhaWxsZXNfVHJhZGVfRmluYW5jZV9MdGQiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJGaWR1Y2lhcnkgRHV0aWVzICZtZGFzaDsgQnJpYmVzIC8gRmlkdWNpYXJ5IER1dGllcyAmbWRhc2g7IEJyaWJlcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQUcgZm9yIEhLIHYgUmVpZCIsCiAgICAgICAgIlJlYWRpbmcgdiBBRyIsCiAgICAgICAgIkxpc3RlciB2IFN0dWJicyIsCiAgICAgICAgIkRhcmF5ZGFuIEhvbGRpbmdzIHYgU29sbGFuZCIsCiAgICAgICAgIlNpbmNsYWlyIEludmVzdG1lbnRzIHYgVmVyc2FpbGxlcyIsCiAgICAgICAgIkV4IHAgSmFtZXMiLAogICAgICAgICJFeCBwIExhY2V5IiwKICAgICAgICAiVGVzY28gdiBQb29rIiwKICAgICAgICAiQnJpc3RvbCBhbmQgV2VzdCBCUyB2IE1vdGhldyIsCiAgICAgICAgIlJlIER1a2Ugb2YgTm9yZm9saydzIFNUcyIsCiAgICAgICAgIk8nU3VsbGl2YW4gdiBNYW5hZ2VtZW50IEFnZW5jeSBbMTk4NV0gUUIgNDI4IiwKICAgICAgICAiSW5kdXN0cmlhbCBEZXZlbG9wbWVudCB2IENvb2xleSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE3NyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDT1VSVCI6ICJVS1NDIiwKICAgICJZRUFSIjogIjIwMTQiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRhY2l0bHkgb3ZlcnJ1bGluZyBOZXViZXJnZXIgTVIgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U2luY2xhaXI8L3NwYW4+LCB0aGUgbGVhZGluZyBzcGVlY2ggZ2l2ZW4gYnkgTG9yZCBOZXViZXJnZXIgZm91bmQgdGhlIGdlbmVyYWwgcnVsZSB0byBiZSB0aGF0IGEgcHJpbmNpcGFsIGRvZXMgaW5kZWVkIG93biB0aGUgYmVuZWZpY2lhbCBpbnRlcmVzdCBvZiBhIGJlbmVmaXQgb3Igb3Bwb3J0dW5pdHkgYWNxdWlyZWQgYnkgYSBmaWR1Y2lhcnkgYnkgdmlydHVlIG9mIHRoZSBmaWR1Y2lhcnkgZHV0eS4iLAogICAgICAgICImIzgyMTY7QW4gYWdlbnQgaGF2aW5nIGFjcXVpcmVkIGJlbmVmaXQgd2hpY2ggY2FtZSB0byBoaXMgbm90aWNlIGFzIGEgcmVzdWx0IG9mIGhpcyBmaWR1Y2lhcnkgcG9zaXRpb24sIG9yIHRocm91Z2ggYW4gb3Bwb3J0dW5pdHkgcmVzdWx0aW5nIGZyb20gdGhhdCBwb3NpdGlvbiwgPHNwYW4gY2xhc3M9XCJiZFwiPnRoZSBnZW5lcmFsIHJ1bGUgd2FzIHRoYXQgaGUgd2FzIHRvIGJlIHRyZWF0ZWQgYXMgaGF2aW5nIGFjcXVpcmVkIHRoZSBiZW5lZml0IG9uIGJlaGFsZiBvZiBoaXMgcHJpbmNpcGFsLDwvc3Bhbj4gc28gdGhhdCB0aGUgYmVuZWZpdCB3YXMgb3duZWQgYnkgdGhlIHByaW5jaXBhbCwgd2hvIGhhZCBhY3F1aXJlZCA8c3BhbiBjbGFzcz1cImJkXCI+cHJvcHJpZXRhcnkgYXMgd2VsbCBhcyBwZXJzb25hbDwvc3Bhbj4gcmVtZWRpZXMgYWdhaW5zdCB0aGUgYWdlbnQmIzgyMTc7IgogICAgXSwKICAgICJOQU1FIjogIkZIUiB2IENlZGFyIENhcGl0YWwiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJCcmliZXMiLAogICAgICAgICJGaWR1Y2lhcnkgRHV0aWVzIiwKICAgICAgICAiQnJpYmVzIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiTmV1YmVyZ2VyIiwKICAgICAgICAiTGVhZGluZyIsCiAgICAgICAgIlJlY2VudCIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiRkhSIEV1cm9wZWFuIFZlbnR1cmVzIExMUCB2IENlZGFyIENhcGl0YWwgUGFydG5lcnMgTExDIFsyMDE0XSBVS1NDIDQ1IiwKICAgICJBS0EiOiAiTWFua2FyaW91cyAxOyBNYW5rYXJpb3VzIDIiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIk1hbmthcmlvdXMsIHRoZSByYXRiYWcgYmVoaW5kIENlZGFyIENhcGl0YWwsIGhhZCBhY3RlZCBmb3IgYm90aCBzaWRlcyBpbiBuZWdvdGlhdGlvbnMgZm9yIHRoZSBNb250ZSBDYXJsbyBob3RlbCwgaW5jbHVkaW5nIGEgJiM4MjE2O2ZlZSYjODIxNzsgb2YgJDEwTS4iCiAgICBdLAogICAgIldJS0lMSU5LIjogWwogICAgICAgICJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GSFJfRXVyb3BlYW5fVmVudHVyZXNfTExQX3ZfQ2VkYXJfQ2FwaXRhbF9QYXJ0bmVyc19MTEMiCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIktub3dpbmcgUmVjZWlwdCIsCiAgICAgICAgIkRpc2hvbmVzdHkgZm9yIERpc2hvbmVzdCBBc3Npc3RhbmNlIiwKICAgICAgICAiS25vd2luZyBSZWNlaXB0IC0gS25vd2xlZGdlIiwKICAgICAgICAiRGlzaG9uZXN0IEFzc2lzdGFuY2UiLAogICAgICAgICJRdWlzdGNsb3NlIFRydXN0cyAtIEFuYWx5c2lzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIFN1YmplY3QiLAogICAgICAgICJUaGUgQ3ktcHJcdTAwZThzIERvY3RyaW5lIiwKICAgICAgICAiUXVpc3RjbG9zZSBUcnVzdHMiLAogICAgICAgICJSZW1lZGllcyBmb3IgVW5hdXRob3Jpc2VkIFByb2ZpdHMiLAogICAgICAgICJTZWxmLURlYWxpbmciLAogICAgICAgICJBZHZhbmNlbWVudCBvZiBSZWxpZ2lvbiIsCiAgICAgICAgIkZvcm1hbGl0aWVzIGZvciBUZXN0YW1lbnRhcnkgVHJ1c3RzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTc4IiwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRoZXJlIGFyZSB0d28gbWVhbnMgYnkgd2hpY2ggYSA8c3BhbiBjbGFzcz1cImJkXCI+dGhpcmQgcGFydHk8L3NwYW4+IG1heSBiZSBsaWFibGUgZm9yIGEgZmlkdWNpYXJ5JiM4MjE3O3MgYnJlYWNoIG9mIGR1dHkgJm1kYXNoOyIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPktub3dpbmcgUmVjZWlwdDwvc3Bhbj48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Rm9yIHdoaWNoLCBzZWUgYXQgbGVhc3QgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmFkZW48L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CQ0NJIHYgQWtpbmRlbGU8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EaXNob25lc3QgQXNzaXN0YW5jZTwvc3Bhbj48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+TWFyZ2FyZXQgQ2FycmFuIGluc2lzdHMgdGhlIGxlYWRpbmcgY2FzZSBpcyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ud2luc2VjdHJhPC9zcGFuPiBub3QgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGFuPC9zcGFuPjsgYnV0IGl0JiM4MjE3O3MgcHJvYmFibHkgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U3RhcmdsYWRlIHYgTmFzaDwvc3Bhbj4sIGZvbGxvd2luZyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5FdXJvdHJ1c3Q8L3NwYW4+IGJhY2sgdG8gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGFuPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPjwvb2w+IiwKICAgICAgICAiR29vZCBhdXRob3JpdHkgZm9yIHRoaXMgdGF4b25vbXkgaXMgaXMgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmFybmVzIHYgQWRkeTwvc3Bhbj4uIgogICAgXSwKICAgICJOQU1FIjogIlRoaXJkIFBhcnR5IExpYWJpbGl0eSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVGhpcmQgUGFydHkgTGlhYmlsaXR5IgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiRmlkdWNpYXJ5IER1dGllcyAmbWRhc2g7IEtub3dpbmcgUmVjZWlwdCAvIFRoaXJkIFBhcnR5IExpYWJpbGl0eSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiS25vd2luZyBSZWNlaXB0IC0gS25vd2xlZGdlIiwKICAgICAgICAiRGlzaG9uZXN0IEFzc2lzdGFuY2UiLAogICAgICAgICJGYWlyLURlYWxpbmciLAogICAgICAgICJObyBQcm9maXQgUnVsZSIsCiAgICAgICAgIkRpc2hvbmVzdHkgZm9yIERpc2hvbmVzdCBBc3Npc3RhbmNlIiwKICAgICAgICAiVW5hdXRob3Jpc2VkIFByb2ZpdHMgLSBCcmliZXMiLAogICAgICAgICJVbmF1dGhvcmlzZWQgUHJvZml0cyAtIENvcnBvcmF0ZSBPcHBvcnR1bml0eSIsCiAgICAgICAgIlNlbGYtRGVhbGluZyIsCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJSZW1lZGllcyBmb3IgVW5hdXRob3Jpc2VkIFByb2ZpdHMiLAogICAgICAgICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJEaXNwb3NpdGlvbiBvZiBFcXVpdGFibGUgSW50ZXJlc3RzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTc5IiwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIkFLQSI6ICJVbmNvbnNjaW9uYWJsZSBSZWNlaXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBIHRoaXJkIHBhcnR5IHJlY2VpdmVzIHNvbWV0aGluZyB3aGVyZSBoZSBoYXMgPHNwYW4gY2xhc3M9XCJpdFwiPmtub3dsZWRnZTwvc3Bhbj4sIG9mIHdoaWNoIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhZGVuPC9zcGFuPiBlc3RhYmxpc2hlZCBmaXZlIGZ1enp5IGRlZ3JlZXMsIG9yLCBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Bcm1zdHJvbmcgdiBXaW5uaW5ndG9uPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJpdFwiPnVuY29uc2Npb25hYmlsaXR5PC9zcGFuPi4gSW4gY29tbWVyY2lhbCBzaXR1YXRpb25zLCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ba2luZGVsZTwvc3Bhbj4gY29uZmlybXMgMS0zIHdpbGwgYmUgZW5vdWdoIHRvIGVzdGFibGlzaCB0aGUgY2xhaW07IGluIG90aGVyIHNpdHVhdGlvbnMsIDEtNS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RWxlbWVudHM8L3NwYW4+IiwKICAgICAgICAiPG9sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkRpc3Bvc2l0aW9uIG9mIFByb3BlcnR5IGluIEJyZWFjaCBvZiBUcnVzdCBvciBGaWR1Y2lhcnkgRHV0eTwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5CZW5lZmljaWFsIHJlY2VpcHQ8L3NwYW4+PC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoYXQgdGhlIHJlY2VpcHQgaXMgYmVuZWZpY2lhbCBpcyByZWJ1dHRhYmx5IHByZXN1bWVkIGJ5IHRoZSBmYWN0IG9mIHRyYW5zZmVyICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QWdpcCBBZnJpY2EgdiBKYWNrc29uPC9zcGFuPi4gd2hpY2ggZXN0YWJsaXNoZWQgdGhhdCBtb25leSBwYWlkIGludG8gYW4gb3ZlcmRyYXduIGFjY291bnQgPHNwYW4gY2xhc3M9XCJpdFwiPmlzPC9zcGFuPiByZWNlaXZlZCBiZW5lZmljaWFsbHkuIEFwcHJvdmVkIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1UIFJlYWxpc2F0aW9ucyB2IERpZ2l0YWwgRXF1aXBtZW50IENvPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPktub3dsZWRnZTwvc3Bhbj4uPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlNpbmNlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFybXN0cm9uZyB2IFdpbm5pbmd0b248L3NwYW4+IHRoaXMgaXMgYWxzbyA8c3BhbiBjbGFzcz1cImJkXCI+dW5jb25zY2lvbmFiaWxpdHk8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIHNwZWN0cnVtIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhZGVuPC9zcGFuPiwgZGlzYXBwcm92ZWQgb2YgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QWtpbmRlbGU8L3NwYW4+LCBuZXZlcnRoZWxlc3MgaG9sZHMuIDEtMyBpbiBhIGNvbW1lcmNpYWwgY29udGV4dCwgMS01IG90aGVyd2lzZS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoaXMgZXhjdXNlcyBib25hIGZpZGUgZG9uZWVzIGFuZCBwdXJjaGFzb3JzLjwvc3Bhbj48L2xpPjwvdWw+PC9vbD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Lbm93bGVkZ2UgZm9yIEtub3dpbmcgUmVjZWlwdDwvc3Bhbj4gaXMgYSBsaXZlIGlzc3VlIGluIG1vc3Qgb2YgdGhlIGNhc2VzLiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFraW5kZWxlPC9zcGFuPiBsZWFkcywgYnV0IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFybXN0cm9uZyB2IFdpbm5pbmd0b248L3NwYW4+IGNvbWVzIGEgY2xvc2Ugc2Vjb25kLjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGaWR1Y2lhcnkgRHV0aWVzIiwKICAgICAgICAiS25vd2luZyBSZWNlaXB0IiwKICAgICAgICAiVGhpcmQgUGFydHkgTGlhYmlsaXR5IgogICAgXSwKICAgICJOQU1FIjogIktub3dpbmcgUmVjZWlwdCIKfSwKewogICAgIkNBVEVHT1JZIjogIlRoaXJkIFBhcnR5IExpYWJpbGl0eSAmbWRhc2g7IEtub3dpbmcgUmVjZWlwdCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiS25vd2luZyBSZWNlaXB0IiwKICAgICAgICAiRGlzaG9uZXN0eSBmb3IgRGlzaG9uZXN0IEFzc2lzdGFuY2UiLAogICAgICAgICJEaXNob25lc3QgQXNzaXN0YW5jZSIsCiAgICAgICAgIlRoaXJkIFBhcnR5IExpYWJpbGl0eSIsCiAgICAgICAgIkZvcm1hbGl0aWVzIGZvciBUZXN0YW1lbnRhcnkgVHJ1c3RzIiwKICAgICAgICAiU2VjcmV0IFRydXN0cyAtIFRoZW9yeSIsCiAgICAgICAgIlByZWNhdG9yeSBXb3JkcyIsCiAgICAgICAgIkVxdWl0eSB3aWxsIG5vdCBhbGxvdyBhIFN0YXR1dGUgdG8gYmUgYW4gQ2xvYWsgZm9yIEZyYXVkIiwKICAgICAgICAiRm9ybWFsaXRpZXMgZm9yIEludGVyIFZpdm9zIEV4cHJlc3MgVHJ1c3RzIiwKICAgICAgICAiQ2VydGFpbnR5IG9mIFN1YmplY3QiLAogICAgICAgICJObyBQcm9maXQgUnVsZSIsCiAgICAgICAgIlByaXZhdGUgRXhwcmVzcyBUcnVzdHMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxODAiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiQUtBIjogIktub3dsZWRnZSBmb3IgS25vd2luZyBSZWNlaXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJJbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CYWRlbiB2IFNvYyBHZW48L3NwYW4+LCBQZXRlciBHaWJzb24gSiwgc2V0IG91dCB3aGF0IGhhdmUgYmVjb21lIGtub3duIGFzIDxzcGFuIGNsYXNzPVwiYmRcIj50aGUgZml2ZSBkZWdyZWVzIG9mIGtub3dsZWRnZTwvc3Bhbj4uIEluIGRlY3JlYXNpbmcgb3JkZXIgb2YgY2VydGFpbnR5IGFuZCBkaWZmaWN1bHR5IHRvIGVzdGFibGlzaCBpbiBjb3VydC4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cIml0XCI+VGhleSBhcmU8L3NwYW4+ICZtZGFzaDsiLAogICAgICAgICI8b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BY3R1YWwgPHNwYW4gY2xhc3M9XCJiZFwiPmtub3dsZWRnZTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+V2lsZnVsbHkgc2h1dHRpbmcgb25lJiM4MjE3O3MgZXllcyB0byB0aGUgb2J2aW91czwvc3Bhbj4uPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPllvdSBkb24mIzgyMTc7dCBrbm93LCBidXQgeW91IDxzcGFuIGNsYXNzPVwiaXRcIj5rbm93PC9zcGFuPiwgYmVjYXVzZSB0aGUgY2lyY3Vtc3RhbmNlcyBhcmUgc2NyZWFtaW5nIGF0IHlvdS48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+V2lsZnVsbHkgYW5kIHJlY2tsZXNzbHkgPHNwYW4gY2xhc3M9XCJiZFwiPmZhaWxpbmcgdG8gbWFrZSBlbnF1aXJpZXM8L3NwYW4+IGFuIGhvbmVzdCBwZXJzb24gd291bGQgaGF2ZSBtYWRlLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+S25vd2xlZGdlIG9mIGNpcmN1bXN0YW5jZXMgd2hpY2ggd291bGQgPHNwYW4gY2xhc3M9XCJiZFwiPmluZGljYXRlIHRoZSBmYWN0czwvc3Bhbj4gdG8gYW4gaG9uZXN0IGFuZCByZWFzb25hYmxlIG1hbi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPktub3dsZWRnZSBvZiBjaXJjdW1zdGFuY2VzIHdoaWNoIHdvdWxkIHB1dCBzdWNoIGEgbWFuIDxzcGFuIGNsYXNzPVwiYmRcIj5vbiBhIGNvdXJzZSBvZiBpbnF1aXJ5PC9zcGFuPi48L3NwYW4+PC9saT48L29sPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5XaGljaCBjb3VudD88L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiaXRcIj5BbGwgZml2ZT88L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SW4gdGhlICYjODIxNjs1MHMgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TmVsc29uIHYgTGFyaG9sdDwvc3Bhbj4gRGVubmluZyBKIGZvdW5kIGtub3dsZWRnZSBpbiB0aGUgZmFpbHVyZSB0byBnbyBvbiBhIDxzcGFuIGNsYXNzPVwiYmRcIj5wYXRoIG9mIGlucXVpcnk8L3NwYW4+IGluIGZpc2h5IGNpcmN1bXN0YW5jZXMgJm1kYXNoOyBCYWRlbiA8c3BhbiBjbGFzcz1cImJkXCI+NTwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiaXRcIj5Pbmx5IHRoZSBmaXJzdCB0aHJlZT88L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q293YW4gZGUgR3Jvb3QgdiBFYWdsZSBUcnVzdDwvc3Bhbj4sIGtub3dsZWRnZSB3b3VsZCBvbmx5IGJlIGltcHV0ZWQgd2hlbiA8c3BhbiBjbGFzcz1cImJkXCI+R3Jvc3MgaXJyZWd1bGFyaXR5PC9zcGFuPiB3YXMgaWdub3JlZCAmbWRhc2g7IEJhZGVuIDxzcGFuIGNsYXNzPVwiYmRcIj4zPC9zcGFuPi4gQSBzaW1pbGFyIHJhdGlvIGFzIGFzIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNhcmwgWmVpc3MgdiBIZXJiZXJ0IFNtaXRoPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIE1vbnRhZ3UmIzgyMTc7cyBTZXR0bGVtZW50czwvc3Bhbj4sIGEgZGlzdGluY3Rpb24gd2FzIGRyYXduIGJldHdlZW4gPHNwYW4gY2xhc3M9XCJiZFwiPm5vdGljZTwvc3Bhbj4gKHdoaWNoIHdhcyBub3Qga25vd2xlZGdlKSBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPmtub3dsZWRnZTwvc3Bhbj4gKHdoaWNoIHdhcykuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cIml0XCI+Q3VycmVudGx5Li4uPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBsZWFkaW5nIGNhc2UgaXMgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QkNDSSB2IEFraW5kZWxlPC9zcGFuPiwgaW4gd2hpY2gsIGV2ZW4gd2hpbGUgZG91YnRpbmcgdGhlIHV0aWxpdHkgb2YgdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhZGVuPC9zcGFuPiBjcml0ZXJpYSwgaXQgd2FzIGhlbGQgdGhhdCA8c3BhbiBjbGFzcz1cImJkXCI+MS01PC9zcGFuPiBhcmUga25vd2xlZGdlIGZvciBub24tY29tbWVyY2lhbCBjaXJjdW1zdGFuY2VzOyBidXQgb25seSA8c3BhbiBjbGFzcz1cImJkXCI+MS0zPC9zcGFuPiBpbiBjb21tZXJjZS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFybXN0cm9uZyB2IFdpbm5pbmd0b248L3NwYW4+IHB1cnBvcnRzIHRvIGhhdmUgcmVjb25jaWxlZCB0aGUgdHdvLCBieSBzZWVpbmcgdGhlIHRlc3QgaW4gdGVybXMgb2YgPHNwYW4gY2xhc3M9XCJpdFwiPnVuY29uc2Npb25hYmlsaXR5PC9zcGFuPiByYXRoZXIgdGhhbiBrbm93bGVkZ2UuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RGVmZW5jZXM8L3NwYW4+IiwKICAgICAgICAiPG9sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkNoYW5nZSBvZiBQb3NpdGlvbjwvc3Bhbj48L3NwYW4+PC9saT48L29sPjx1bD48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+T25seSBpZiB0aGUgcmVjZWlwdCB3YXMgaW4gZ29vZCBmYWl0aC48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TGlwa2luIEdvcm1hbiB2IEthcnBuYWxlPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QWxpIHYgQWwtQmFzcmk8L3NwYW4+LCBhIGJvbmEgZmlkZSBwdXJjaGFzZXIgd2l0aG91dCBub3RpY2UuPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5JbmVxdWl0YWJsZSByZXN1bHQ8L3NwYW4+PC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIERpcGxvY2s8L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QaGlsbGlwIENvbGxpbnMgdiBEYXZpczwvc3Bhbj4gJm1kYXNoOyBzdWNjZWVkZWQuPC9zcGFuPjwvbGk+PC91bD48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVGhpcmQgUGFydHkgTGlhYmlsaXR5IiwKICAgICAgICAiS25vd2luZyBSZWNlaXB0IgogICAgXSwKICAgICJOQU1FIjogIktub3dpbmcgUmVjZWlwdCAtIEtub3dsZWRnZSIKfSwKewogICAgIkNBVEVHT1JZIjogIlRoaXJkIFBhcnR5IExpYWJpbGl0eSAvIFRoaXJkIFBhcnR5IExpYWJpbGl0eSAmbWRhc2g7IERpc2hvbmVzdCBBc3Npc3RhbmNlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJEaXNob25lc3R5IGZvciBEaXNob25lc3QgQXNzaXN0YW5jZSIsCiAgICAgICAgIktub3dpbmcgUmVjZWlwdCAtIEtub3dsZWRnZSIsCiAgICAgICAgIktub3dpbmcgUmVjZWlwdCIsCiAgICAgICAgIlRoaXJkIFBhcnR5IExpYWJpbGl0eSIsCiAgICAgICAgIkNlcnRhaW50eSBvZiBTdWJqZWN0IiwKICAgICAgICAiUXVpc3RjbG9zZSBUcnVzdHMiLAogICAgICAgICJQcmVjYXRvcnkgV29yZHMiLAogICAgICAgICJBZHZhbmNlbWVudCBvZiBFZHVjYXRpb24iLAogICAgICAgICJTZWNyZXQgVHJ1c3RzIiwKICAgICAgICAiTm8gUHJvZml0IFJ1bGUiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiRXF1aXR5IHdpbGwgbm90IGFsbG93IGEgU3RhdHV0ZSB0byBiZSBhbiBDbG9hayBmb3IgRnJhdWQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxODEiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiVGhlIGlzc3VlIGlzIHVzdWFsbHkgbm90IHdoZXRoZXIgdGhlcmUgaGFzIGJlZW4gYXNzaXN0YW5jZSwgYnV0IHdoZXRoZXIgdGhlcmUmIzgyMTc7cyBiZWVuIGVub3VnaCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5kaXNob25lc3R5PC9zcGFuPi4gVGhlIGN1cnJlbnQgYmluZGluZyBhdXRob3JpdHkgaXMgPHNwYW4gY2xhc3M9XCJpdFwiPnRlY2huaWNhbGx5PC9zcGFuPiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ud2luc2VjdHJhPC9zcGFuPiAoRVdDQSksIHdoaWNoIGFkZGVkIGEgc3ViamVjdGl2ZSBlbGVtZW50IHRvIHRoZSBvYmplY3RpdmUgbWVhc3VyZSBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UYW48L3NwYW4+IChQQykuIEhvd2V2ZXIsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRhbjwvc3Bhbj4gd2FzIHByZWZlcnJlZCBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5FdXJvdHJ1c3Q8L3NwYW4+IChQQyksIHdoaWNoIHdhcyBmb2xsb3dlZCBkb21lc3RpY2FsbHkgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U3RhcmdsYWRlIHYgTmFzaDwvc3Bhbj4uIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkVsZW1lbnRzPC9zcGFuPiIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPipGaWR1Y2lhcnkgZHV0eSBvciB0cnVzdCBvZiBwcm9wZXJ0eS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5CcmVhY2ggb2YgZHV0eSBieSBmaWR1Y2lhcnkgb3IgdHJ1c3RlZS48L3NwYW4+PC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPk9yaWdpbmFsbHkgKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhcm5lcyB2IEFkZHk8L3NwYW4+KSB0aGUgPHNwYW4gY2xhc3M9XCJpdFwiPmJyZWFjaDwvc3Bhbj4gaXRzZWxmIGhhZCB0byBiZSBkaXNob25lc3QsIG5vdCBqdXN0IHRoZSBhc3Npc3RhbmNlLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFJlbW92ZWQgdG8gcHJldmVudCBkaXNob25lc3QgYXNzaXN0YW5jZSA8c3BhbiBjbGFzcz1cIml0XCI+ZmFpbGluZzwvc3Bhbj4gd2hlbiBhIGZpZHVjaWFyeSBoYWQgYmVlbiBkdXBlZCBpbnRvIHRoZSBicmVhY2ggYnkgdGhlIHRoaXJkLXBhcnR5LCB0aGUgZmlkdWNpYXJ5IHRoZW1zZWx2ZXMgaGF2aW5nIGFjdGVkIHdpdGggcHJvYml0eS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoaXMgaXMgPHNwYW4gY2xhc3M9XCJiZFwiPnN0cmljdCBsaWFiaWxpdHk8L3NwYW4+ICZtZGFzaDsgYnV0IHRoZSBjb3VydCBoYXMgdGhlIHBvd2VyIHRvIGV4Y3VzZSBhbiBpbm5vY2VudCBicmVhY2guPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Bc3Npc3RhbmNlIGJ5IHRoZSAzcmQgUGFydHk8L3NwYW4+LCB3aGljaCBjYW5ub3QgYmUgPHNwYW4gY2xhc3M9XCJiZFwiPmluYWN0aW9uPC9zcGFuPi48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QSBwYXNzaXZlIHJvbGUgaXMgbm90IGVub3VnaC48YnI+PHNwYW4gY2xhc3M9XCJpbGNcIj5RdWVyeSAmbWRhc2g7IG1vbmV5ICYjODIxNjtwYXNzaXZlbHkmIzgyMTc7IGFycml2aW5nIGluIGFuIGFjY291bnQsIG9ic2VydmVkIGJ1dCBsZWZ0IHVubW9sZXN0ZWQgYnkgdGhlIHRoaXJkIHBhcnR5PyBQcmVzdW1hYmx5IGFzIHNvb24gYXMgaGUgdG91Y2hlcyBpdCwgdGhhdCB3b3VsZCBiZSBlbm91Z2g/PC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGlzaG9uZXN0eTwvc3Bhbj48L3NwYW4+IG9mIHRoZSB0aGlyZCBwYXJ0eS48YnI+V2hpY2ggcGFydHkgaGFzIHRoZSBidXJkZW4gb2YgcHJvb2YgaXMgc29tZXdoYXQgYmx1cnJlZC48L3NwYW4+PC9saT48L29sPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVGhpcmQgUGFydHkgTGlhYmlsaXR5IiwKICAgICAgICAiVGhpcmQgUGFydHkgTGlhYmlsaXR5IiwKICAgICAgICAiRGlzaG9uZXN0IEFzc2lzdGFuY2UiCiAgICBdLAogICAgIk5BTUUiOiAiRGlzaG9uZXN0IEFzc2lzdGFuY2UiCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkgJm1kYXNoOyBEaXNob25lc3QgQXNzaXN0YW5jZSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRGlzaG9uZXN0IEFzc2lzdGFuY2UiLAogICAgICAgICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQgLSBLbm93bGVkZ2UiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJDaGFyaXRhYmxlIFB1cnBvc2VzIiwKICAgICAgICAiRmlkdWNpYXJ5IER1dGllcyIsCiAgICAgICAgIkZvcm1hbGl0aWVzIGZvciBJbnRlciBWaXZvcyBFeHByZXNzIFRydXN0cyIsCiAgICAgICAgIkVxdWl0eSB3aWxsIG5vdCBhbGxvdyBhIFN0YXR1dGUgdG8gYmUgYW4gQ2xvYWsgZm9yIEZyYXVkIiwKICAgICAgICAiUHJpdmF0ZSBFeHByZXNzIFRydXN0cyIsCiAgICAgICAgIkRpc3Bvc2l0aW9uIG9mIEVxdWl0YWJsZSBJbnRlcmVzdHMiLAogICAgICAgICJDaGFyaXR5IENvbW1pc3Npb25lcidzIEd1aWRhbmNlIC0gU2VwdGVtYmVyIDIwMTMiLAogICAgICAgICJQcmVjYXRvcnkgV29yZHMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxODIiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiQUtBIjogIkRpc2hvbmVzdHkiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5EZXZlbG9wbWVudDwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPkZpcnN0bHk8L3NwYW4+ICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Sb3lhbCBCcnVuZWkgdiBUYW48L3NwYW4+IChQQyk8L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJpdFwiPkRpc2hvbmVzdHk8L3NwYW4+IHdhcyBuZWNlc3NhcnksIHJhdGhlciB0aGFuIGp1c3QgPHNwYW4gY2xhc3M9XCJpdFwiPmtub3dsZWRnZTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JdHMgdGVzdCBmb3IgZGlzaG9uZXN0eSB3YXMgPHNwYW4gY2xhc3M9XCJiZFwiPm9iamVjdGl2ZTwvc3Bhbj4gJm1kYXNoOzxicj48c3BhbiBjbGFzcz1cIml0XCI+V2VyZSB0aGUgYWN0aW9ucyBkaXNob25lc3QgYnkgdGhlIHN0YW5kYXJkIG9mIGFuIGhvbmVzdCBhbmQgcmVhc29uYWJsZSBwZXJzb24gaW4gdGhlIHNhbWUgY2lyY3M/PC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+PC9saT48L3VsPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJpdFwiPkJ1dDwvc3Bhbj4gJm1kYXNoOzwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ud2luc2VjdHJhIHYgWWFyZGxleTwvc3Bhbj4gKEVXQ0EpPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5UZWNobmljYWxseTwvc3Bhbj4gdGhlIGN1cnJlbnQgYmluZGluZyA8c3BhbiBjbGFzcz1cIml0XCI+ZG9tZXN0aWM8L3NwYW4+IGF1dGhvcml0eSBhY2NvcmRpbmcgdG8gTWFyZ2FyZXQgQ2FycmFuLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+TG9yZCBIdXR0b24gYWRkZWQgYSA8c3BhbiBjbGFzcz1cImJkXCI+c3ViamVjdGl2ZTwvc3Bhbj4gbGltYiB0byA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UYW48L3NwYW4+ICZtZGFzaDs8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cIml0XCI+V2VyZSB0aGUgYWN0aW9ucyBkaXNob25lc3QgYnkgdGhlIHN0YW5kYXJkIG9mIGFuIG9yZGluYXJ5IGFuZCByZWFzb25hYmxlIHBlcnNvbiAoYXMgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGFuPC9zcGFuPikgPHNwYW4gY2xhc3M9XCJiZFwiPmFuZCBkaWQgdGhleSByZWFsaXNlIGl0IHdhcyBkaXNob25lc3QgYnkgdGhhdCBzdGFuZGFyZDwvc3Bhbj4sIHJhdGhlciB0aGFuIGJ5IHRoZWlyIG93bj88L3NwYW4+PC9zcGFuPjwvbGk+PC91bD48L2xpPjwvdWw+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cIml0XCI+QnV0IHRoZW48L3NwYW4+ICZtZGFzaDs8L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RXVyb3RydXN0PC9zcGFuPiAoUEMpIGFjdGl2ZWx5IDxzcGFuIGNsYXNzPVwiaXRcIj5kaXNhZmZpcm1lZDwvc3Bhbj4gdGhlIHN1YmplY3RpdmUgY29tcG9uZW50IG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlR3aW5zZWN0cmE8L3NwYW4+IGFuZCBpbnN0ZWFkIGZvbGxvd2VkIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRhbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BYm91LVJhaG1hbiB2IEFiYWNoPC9zcGFuPiAoRVdDQSkgY29udHJvdmVyc2lhbGx5IGZvbGxvd2VkIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkV1cm90cnVzdDwvc3Bhbj4gcmF0aGVyIHRoYW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VHdpbnNlY3RyYTwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwiaXRcIj5BbmQgdGhlbjwvc3Bhbj4gJm1kYXNoOzwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TdGFyZ2xhZGUgdiBOYXNoPC9zcGFuPiAoRVdDQSk8L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIGNvdXJ0IHB1cnBvcnRlZCB0byBoYXZlIGZvbGxvdyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ud2luc2VjdHJhPC9zcGFuPiBldmVuIGFzIGl0IGFzc2VydGVkIGFuIHVuZGVyc3RhbmRpbmcgb2YgZGlzaG9uZXN0eSBhIDxzcGFuIGNsYXNzPVwiaXRcIj5sb3Q8L3NwYW4+IG1vcmUgbGlrZSB0aGF0IG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRhbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JdCBwdWxsZWQgdGhpcyBvZmYgYnkgaW1wbHlpbmcgdGhhdCB0aGUgdWx0aW1hdGUgYW5zd2VyIGFzIHRvIDxzcGFuIGNsYXNzPVwiaXRcIj53aGF0PC9zcGFuPiB0ZXN0IHNob3VsZCBhcHBseSBtdXN0IDxzcGFuIGNsYXNzPVwiaXRcIj5kZXBlbmQgb24gdGhlIGZhY3RzIG9mIHRoZSBjYXNlPC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJpbGNcIj5UaGlzIHNvdW5kcyBhIGxvdCBsaWtlIGEgbGlhYmlsaXR5IHdpdGhvdXQgYW55IGxlZ2FsIGNlcnRhaW50eS48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UbyBhdm9pZCB0aGUgZGlmZmljdWx0eSBvZiB0aGVyZSBiZWluZyB0d28gb2JqZWN0aXZlIHN0YW5kYXJkcyBvZiBob25lc3R5LCBpdCBoZWxkIHRoZSA8c3BhbiBjbGFzcz1cIml0XCI+b2JqZWN0aXZlPC9zcGFuPiBob25lc3R5IG9mIGFjdGlvbnMgd2FzIHRvIGJlIG1lYXN1cmVkIGFnYWluc3QgdGhlaXIgc2V0dGluZy4gVGhpcyBhbGxvd2VkIGZvciAmIzgyMTY7c2hhcnAmIzgyMTc7IGJ1dCBub3QgZGlzaG9uZXN0IGJ1c2luZXNzIHByYWN0aWNlLCB3aGljaCBtZW1iZXJzIG9mIHRoZSBwdWJsaWMgd291bGQgc3dlYXIgYmxpbmQgd2FzIHNhdGFuLXdvcnNoaXBwaW5nbHkgbWVuZGFjaW91cy48L3NwYW4+PC9saT48L3VsPjwvdWw+IgogICAgXSwKICAgICJOQU1FIjogIkRpc2hvbmVzdHkgZm9yIERpc2hvbmVzdCBBc3Npc3RhbmNlIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJEaXNob25lc3QgQXNzaXN0YW5jZSIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRoaXJkIFBhcnR5IExpYWJpbGl0eSAmbWRhc2g7IEtub3dpbmcgUmVjZWlwdCAmbWRhc2g7IERpc2hvbmVzdCBBc3Npc3RhbmNlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJCYWRlbiB2IFNvYyBHZW4iLAogICAgICAgICJSb3lhbCBCcnVuZWkgdiBUYW4iLAogICAgICAgICJCQ0NJIHYgQWtpbmRlbGUiLAogICAgICAgICJBYm91LVJhaG1hbiB2IEFiYWNoIiwKICAgICAgICAiUmUgTW9udGFndSIsCiAgICAgICAgIk5lbHNvbiB2IExhcmhvbHQiLAogICAgICAgICJUd2luc2VjdHJhIHYgWWFyZGxleSIsCiAgICAgICAgIkFybXN0cm9uZyB2IFdpbm5pbmd0b24iLAogICAgICAgICJNVCBSZWFsaXNhdGlvbnMgdiBEaWdpdGFsIEVxdWlwbWVudCBDbyIsCiAgICAgICAgIkFnaXAgQWZyaWNhIHYgSmFja3NvbiIsCiAgICAgICAgIkJhcmxvdyBDbG93ZXMgdiBFdXJvdHJ1c3QiLAogICAgICAgICJTdGFyZ2xhZGUgdiBOYXNoIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTgzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTg3NCIsCiAgICAiTkFNRSI6ICJCYXJuZXMgdiBBZGR5IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJEaXNob25lc3QgQXNzaXN0YW5jZSIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkhpc3RvcmljYWwiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkJhcm5lcyB2IEFkZHkgKDE4NzQpIExSIDkgQ2ggQXBwIDI0NCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiU3RyYW5nZXJzIGFyZSBub3QgbGlhYmxlIGZvciBicmVhY2hlcyBvZiBmaWR1Y2lhcnkgZHV0eSB1bmxlc3MgdGhleSA8c3BhbiBjbGFzcz1cImJkXCI+a25vd2luZ2x5IHJlY2VpdmU8L3NwYW4+IHByb3BlcnR5IG9yIDxzcGFuIGNsYXNzPVwiYmRcIj5kaXNob25lc3RseSBhc3Npc3Q8L3NwYW4+IGEgYnJlYWNoIG9mIHRoYXQgZHV0eS4iLAogICAgICAgICJMb3JkIFNlbGJvdXJuZSBMQyAtXHUyMDEzICYjODIxNjs8c3BhbiBjbGFzcz1cImJkXCI+U3RyYW5nZXJzIGFyZSBub3QgdG8gYmUgbWFkZSBjb25zdHJ1Y3RpdmUgdHJ1c3RlZXM8L3NwYW4+IGluIHRyYW5zYWN0aW9ucyB3aXRoaW4gdGhlaXIgbGVnYWwgcG93ZXJzLCB0cmFuc2FjdGlvbnMgcGVyaGFwcyBvZiB3aGljaCBhIENvdXJ0IG9mIEVxdWl0eSBtYXkgZGlzYXBwcm92ZSwgPHNwYW4gY2xhc3M9XCJiZFwiPnVubGVzczwvc3Bhbj4gdGhvc2UgYWdlbnRzIDxzcGFuIGNsYXNzPVwiYmRcIj5yZWNlaXZlPC9zcGFuPiBhbmQgYmVjb21lIGNoYXJnZWFibGUgd2l0aCA8c3BhbiBjbGFzcz1cImJkXCI+c29tZSBwYXJ0IG9mIHRoZSB0cnVzdCBwcm9wZXJ0eTwvc3Bhbj4sIG9yIHVubGVzcyB0aGV5IDxzcGFuIGNsYXNzPVwiYmRcIj5hc3Npc3Q8L3NwYW4+IHdpdGggdGhlIGtub3dsZWRnZSBpbiBhIGRpc2hvbmVzdCBhbmQgZnJhdWR1bGVudCBkZXNpZ24gb24gdGhlIHBhcnQgb2YgdGhlIHRydXN0ZWVzLiBUaGVzZSBhcmUgdGhlIHByaW5jaXBsZXMsIGFzIGl0IHNlZW1zIHRvIG1lLCB3aGljaCB3ZSBtdXN0IGJlYXIgaW4gbWluZCBpbiBkZWFsaW5nIHdpdGggdGhlIGZhY3RzIG9mIHRoaXMgY2FzZS4gSWYgdGhvc2UgcHJpbmNpcGxlcyB3ZXJlIGRpc3JlZ2FyZGVkLCBJIGtub3cgbm90IGhvdyBhbnlvbmUgY291bGQsIGluIHRyYW5zYWN0aW9ucyBhZG1pdHRpbmcgb2YgZG91YnQgYXMgdG8gdGhlIHZpZXcgd2hpY2ggYSBDb3VydCBvZiBFcXVpdHkgbWlnaHQgdGFrZSBvZiB0aGVtLCBzYWZlbHkgZGlzY2hhcmdlIHRoZSBvZmZpY2Ugb2Ygc29saWNpdG9yLCBvciBiYW5rZXIsIG9yIG9mIGFnZW50IG9mIGFueSBzb3J0IHRvIHRydXN0ZWVzLiBCdXQsIG9uIHRoZSBvdGhlciBoYW5kLCBpZiBwZXJzb25zIGRlYWxpbmcgaG9uZXN0bHkgYXMgYWdlbnRzIGFyZSBhdCBsaWJlcnR5IHRvIHJlbHkgb24gdGhlIGxlZ2FsIHBvd2VycyBvZiB0aGUgdHJ1c3RlZXMsIGFuZCBhcmUgbm90IHRvIGhhdmUgdGhlIGNoYXJhY3RlciBvZiB0cnVzdGVlcyBjb25zdHJ1Y3RpdmVseSBpbXBvc2VkIHVwb24gdGhlbSwgdGhlbiB0aGUgdHJhbnNhY3Rpb25zIG9mIG1hbmtpbmQgbWF5IHNhZmVseSBiZSBjYXJyaWVkIHRocm91Z2gsIGFuZCBJIGFwcHJlaGVuZCB0aG9zZSB3aG8gY3JlYXRlIGEgdHJ1c3QgZG8gZXhwcmVzc2x5IGludGVuZCwgaW4gdGhlIGFic2VuY2Ugb2YgZnJhdWQgYW5kIGRpc2hvbmVzdHksIHRvIGV4b25lcmF0ZSBzdWNoIGFnZW50cyBvZiBhbGwgY2xhc3NlcyBmb3JtIHRoZSByZXNwb25zaWJpbGl0aWVzIHdoaWNoIGFyZSBleHByZXNzbHkgaW5jdW1iZW50LCBieSByZWFzb25zIG9mIHRoZSBmaWR1Y2lhcnkgcmVsYXRpb24gdXBvbiB0aGUgdHJ1c3RlZXMmIzgyMTc7IgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiVGhpcmQgUGFydHkgTGlhYmlsaXR5ICZtZGFzaDsgS25vd2luZyBSZWNlaXB0IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJBZ2lwIEFmcmljYSB2IEphY2tzb24iLAogICAgICAgICJCYXJuZXMgdiBBZGR5IiwKICAgICAgICAiUmUgTW9udGFndSIsCiAgICAgICAgIk1UIFJlYWxpc2F0aW9ucyB2IERpZ2l0YWwgRXF1aXBtZW50IENvIiwKICAgICAgICAiQXJtc3Ryb25nIHYgV2lubmluZ3RvbiIsCiAgICAgICAgIkNvd2FuIGRlIEdyb290IHYgRWFnbGUgVHJ1c3QiLAogICAgICAgICJQaGlsIENvbGxpbnMgdiBEYXZpcyIsCiAgICAgICAgIkJDQ0kgdiBBa2luZGVsZSIsCiAgICAgICAgIkJhZGVuIHYgU29jIEdlbiIsCiAgICAgICAgIkJhcmxvdyBDbG93ZXMgdiBFdXJvdHJ1c3QiLAogICAgICAgICJTdGFyZ2xhZGUgdiBOYXNoIiwKICAgICAgICAiUm95YWwgQnJ1bmVpIHYgVGFuIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTg0IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIllFQVIiOiAiMTk0OCIsCiAgICAiTkFNRSI6ICJOZWxzb24gdiBMYXJob2x0IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJIaXN0b3JpY2FsIiwKICAgICAgICAiRGVubmluZyIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiTmVsc29uIHYgTGFyaG9sdCBbMTk0OF0iLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkZvcmVzaGFkb3dpbmcgUGV0ZXIgR2lic29uIEogaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmFkZW48L3NwYW4+ICZtZGFzaDsgdGhlIHJlY2VpcHQgb2YgPHNwYW4gY2xhc3M9XCJiZFwiPmVpZ2h0PC9zcGFuPiBjaGVxdWVzIGRyYXduIG9uIGFuIGVzdGF0ZSYjODIxNztzIGFjY291bnQgYnkgYW4gZXhlY3V0b3Igb3VnaHQgdG8gaGF2ZSBwdXQgdGhlIHJlY2lwaWVudCAmIzgyMTY7b24gYSBwYXRoIG9mIGlucXVpcnkuJiM4MjE3OyIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRoaXJkIFBhcnR5IExpYWJpbGl0eSAmbWRhc2g7IEtub3dpbmcgUmVjZWlwdCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiTmVsc29uIHYgTGFyaG9sdCIsCiAgICAgICAgIkNvd2FuIGRlIEdyb290IHYgRWFnbGUgVHJ1c3QiLAogICAgICAgICJBZ2lwIEFmcmljYSB2IEphY2tzb24iLAogICAgICAgICJBcm1zdHJvbmcgdiBXaW5uaW5ndG9uIiwKICAgICAgICAiUGhpbCBDb2xsaW5zIHYgRGF2aXMiLAogICAgICAgICJSZSBNb250YWd1IiwKICAgICAgICAiQkNDSSB2IEFraW5kZWxlIiwKICAgICAgICAiTVQgUmVhbGlzYXRpb25zIHYgRGlnaXRhbCBFcXVpcG1lbnQgQ28iLAogICAgICAgICJCYXJuZXMgdiBBZGR5IiwKICAgICAgICAiUm95YWwgQnJ1bmVpIHYgVGFuIiwKICAgICAgICAiQmFybG93IENsb3dlcyB2IEV1cm90cnVzdCIsCiAgICAgICAgIlR3aW5zZWN0cmEgdiBZYXJkbGV5IgogICAgXSwKICAgICJOVU1CRVIiOiAiMTg1IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkFLQSI6ICJCYWRlbiIsCiAgICAiWUVBUiI6ICIxOTkzIiwKICAgICJOQU1FIjogIkJhZGVuIHYgU29jIEdlbiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVGhpcmQgUGFydHkgTGlhYmlsaXR5IiwKICAgICAgICAiS25vd2luZyBSZWNlaXB0IgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiTGVhZGluZyIsCiAgICAgICAgIlBldGVyIEdpYnNvbiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiQmFkZW4gdiBTb2MgR2VuIFsxOTkzXSAxIFdMUiA1MDkiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkZvciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Lbm93aW5nIFJlY2VpcHQ8L3NwYW4+LCBrbm93bGVkZ2UgY2FuIGJlIGRlY29tcG9zZWQgaW50bzogMS4gYWN0dWFsIGtub3dsZWRnZTsgMi4gd2lsZnVsbHkgc2h1dHRpbmcgb25lJiM4MjE3O3MgZXllcyB0byB0aGUgb2J2aW91OyAzLiB3aWxmdWxseSBhbmQgcmVja2xlc3NseSA8c3BhbiBjbGFzcz1cImJkXCI+ZmFpbGluZyB0byBtYWtlIGVucXVpcmllczwvc3Bhbj4gYW4gaG9uZXN0IHBlcnNvbiB3b3VsZCBoYXZlIG1hZGU7IDQuIGtub3dsZWRnZSBvZiBjaXJjdW1zdGFuY2VzIHdoaWNoIHdvdWxkIDxzcGFuIGNsYXNzPVwiYmRcIj5pbmRpY2F0ZSB0aGUgZmFjdHM8L3NwYW4+LCB0byBhbiBob25lc3QgYW5kIHJlYXNvbmFibGUgbWFuOyBhbmQgNS4ga25vd2xlZGdlIG9mIGNpcmN1bXN0YW5jZXMgd2hpY2ggd291bGQgcHV0IHN1Y2ggYSBtYW4gPHNwYW4gY2xhc3M9XCJiZFwiPm9uIGEgY291cnNlIG9mIGlucXVpcnk8L3NwYW4+LiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRoaXJkIFBhcnR5IExpYWJpbGl0eSAmbWRhc2g7IEtub3dpbmcgUmVjZWlwdCAmbWRhc2g7IE1lYW5pbmcgb2YgS25vd2xlZGdlIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIkNvd2FuIGRlIEdyb290IFByb3BlcnRpZXMgTHRkIHYgRWFnbGUgVHJ1c3QgcGxjIFsxOTkyXSA0IEFsbCBFUiA3MDAiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkFybXN0cm9uZyB2IFdpbm5pbmd0b24iLAogICAgICAgICJCQ0NJIHYgQWtpbmRlbGUiLAogICAgICAgICJSZSBNb250YWd1IiwKICAgICAgICAiUGhpbCBDb2xsaW5zIHYgRGF2aXMiLAogICAgICAgICJNVCBSZWFsaXNhdGlvbnMgdiBEaWdpdGFsIEVxdWlwbWVudCBDbyIsCiAgICAgICAgIk5lbHNvbiB2IExhcmhvbHQiLAogICAgICAgICJBZ2lwIEFmcmljYSB2IEphY2tzb24iLAogICAgICAgICJCYWRlbiB2IFNvYyBHZW4iLAogICAgICAgICJCYXJuZXMgdiBBZGR5IiwKICAgICAgICAiUm95YWwgQnJ1bmVpIHYgVGFuIiwKICAgICAgICAiU3RhcmdsYWRlIHYgTmFzaCIsCiAgICAgICAgIkJhcmxvdyBDbG93ZXMgdiBFdXJvdHJ1c3QiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxODYiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkZvciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Lbm93aW5nIFJlY2VpcHQ8L3NwYW4+LCBhIHRoaXJkIHBhcnR5JiM4MjE3O3Mga25vd2xlZGdlIG9mIGJyZWFjaCBvZiBmaWR1Y2lhcnkgZHV0eSBtYXkgYmUgaW5mZXJyZWQgZnJvbSBrbm93bGVkZ2Ugb2YgYSBncm9zcyBpcnJlZ3VsYXJpdHksIGUuZy4sIGEgc2FsZSYjODIxNztzIHN1YnN0YW50aWFsIDxzcGFuIGNsYXNzPVwiaXRcIj51bmRlcnZhbHVlPC9zcGFuPi4iCiAgICBdLAogICAgIllFQVIiOiAiMTk5MiIsCiAgICAiTkFNRSI6ICJDb3dhbiBkZSBHcm9vdCB2IEVhZ2xlIFRydXN0IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJNZWFuaW5nIG9mIEtub3dsZWRnZSIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRoaXJkIFBhcnR5IExpYWJpbGl0eSAmbWRhc2g7IEtub3dpbmcgUmVjZWlwdCAmbWRhc2g7IEJlbmVmaWNpYWwgUmVjZWlwdCBieSBDcmVkaXRvciIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiTVQgUmVhbGlzYXRpb25zIHYgRGlnaXRhbCBFcXVpcG1lbnQgQ28iLAogICAgICAgICJSZSBNb250YWd1IiwKICAgICAgICAiTmVsc29uIHYgTGFyaG9sdCIsCiAgICAgICAgIkNvd2FuIGRlIEdyb290IHYgRWFnbGUgVHJ1c3QiLAogICAgICAgICJQaGlsIENvbGxpbnMgdiBEYXZpcyIsCiAgICAgICAgIkJhZGVuIHYgU29jIEdlbiIsCiAgICAgICAgIkJDQ0kgdiBBa2luZGVsZSIsCiAgICAgICAgIkJhcm5lcyB2IEFkZHkiLAogICAgICAgICJBcm1zdHJvbmcgdiBXaW5uaW5ndG9uIiwKICAgICAgICAiQWJvdS1SYWhtYW4gdiBBYmFjaCIsCiAgICAgICAgIkJhcmxvdyBDbG93ZXMgdiBFdXJvdHJ1c3QiLAogICAgICAgICJSb3lhbCBCcnVuZWkgdiBUYW4iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxODciLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQUtBIjogIkFnaXAgQWZyaWNhIiwKICAgICJZRUFSIjogIjE5OTAiLAogICAgIk5BTUUiOiAiQWdpcCBBZnJpY2EgdiBKYWNrc29uIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJCZW5lZmljaWFsIFJlY2VpcHQgYnkgQ3JlZGl0b3IiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkFnaXAgKEFmcmljYSkgdiBKYWNrc29uIFsxOTkwXSBDaCAyNjUiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIk1vbmV5IHBhaWQgaW50byBhIGJhbmsgYWNjb3VudCBpbiBjcmVkaXQgaXMgaGVsZCBvbiB0cnVzdCBieSB0aGUgYmFuayBmb3IgdGhlIGhvbGRlciBvZiB0aGUgYWNjb3VudDsgYnV0IG1vbmV5IHBhaWQgaW50byBhbiBhY2NvdW50IGluIGRlYnQgZW50YWlscyBhIHRyYW5zZmVyIG9mIGJlbmVmaWNpYWwgaW50ZXJlc3QgdG8gdGhlIGJhbmsgJm1kYXNoOyBhbmQgdGhlcmVmb3JlLCA8c3BhbiBjbGFzcz1cIml0XCI+YmVuZWZpY2lhbCByZWNlaXB0PC9zcGFuPiBieSB0aGUgYmFuay4iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkgJm1kYXNoOyBLbm93aW5nIFJlY2VpcHQgJm1kYXNoOyBCZW5lZmljaWFsIFJlY2VpcHQgYnkgQ3JlZGl0b3IiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiTVQgUmVhbGlzYXRpb25zIHYgRGlnaXRhbCBFcXVpcG1lbnQgQ28gWzIwMDNdIEVXQ0EgQ2l2IDQ5NCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQWdpcCBBZnJpY2EgdiBKYWNrc29uIiwKICAgICAgICAiTmVsc29uIHYgTGFyaG9sdCIsCiAgICAgICAgIkJDQ0kgdiBBa2luZGVsZSIsCiAgICAgICAgIkJhcm5lcyB2IEFkZHkiLAogICAgICAgICJCYWRlbiB2IFNvYyBHZW4iLAogICAgICAgICJBcm1zdHJvbmcgdiBXaW5uaW5ndG9uIiwKICAgICAgICAiUGhpbCBDb2xsaW5zIHYgRGF2aXMiLAogICAgICAgICJSZSBNb250YWd1IiwKICAgICAgICAiQ293YW4gZGUgR3Jvb3QgdiBFYWdsZSBUcnVzdCIsCiAgICAgICAgIlR3aW5zZWN0cmEgdiBZYXJkbGV5IiwKICAgICAgICAiU3RhcmdsYWRlIHYgTmFzaCIsCiAgICAgICAgIkJhcmxvdyBDbG93ZXMgdiBFdXJvdHJ1c3QiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxODgiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFzIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFnaXAgQWZyaWNhPC9zcGFuPiwgYSBjcmVkaXRvciB3aG8sIGluIHBheW1lbnQgb2YgYSBkZWJ0LCByZWNlaXZlcyBtb25leSB0YWtlbiBpbiBicmVhY2ggb2YgZmlkdWNpYXJ5IGR1dHkgb3IgdHJ1c3QgPHNwYW4gY2xhc3M9XCJpdFwiPmlzPC9zcGFuPiBpbiBiZW5lZmljaWFsIHJlY2VpcHQuIgogICAgXSwKICAgICJZRUFSIjogIjIwMDMiLAogICAgIk5BTUUiOiAiTVQgUmVhbGlzYXRpb25zIHYgRGlnaXRhbCBFcXVpcG1lbnQgQ28iLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRoaXJkIFBhcnR5IExpYWJpbGl0eSIsCiAgICAgICAgIktub3dpbmcgUmVjZWlwdCIsCiAgICAgICAgIkJlbmVmaWNpYWwgUmVjZWlwdCBieSBDcmVkaXRvciIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRoaXJkIFBhcnR5IExpYWJpbGl0eSAmbWRhc2g7IEtub3dpbmcgUmVjZWlwdCAmbWRhc2g7IE1lYW5pbmcgb2YgS25vd2xlZGdlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDb3dhbiBkZSBHcm9vdCB2IEVhZ2xlIFRydXN0IiwKICAgICAgICAiQkNDSSB2IEFraW5kZWxlIiwKICAgICAgICAiQXJtc3Ryb25nIHYgV2lubmluZ3RvbiIsCiAgICAgICAgIk5lbHNvbiB2IExhcmhvbHQiLAogICAgICAgICJBZ2lwIEFmcmljYSB2IEphY2tzb24iLAogICAgICAgICJQaGlsIENvbGxpbnMgdiBEYXZpcyIsCiAgICAgICAgIk1UIFJlYWxpc2F0aW9ucyB2IERpZ2l0YWwgRXF1aXBtZW50IENvIiwKICAgICAgICAiQmFkZW4gdiBTb2MgR2VuIiwKICAgICAgICAiQmFybmVzIHYgQWRkeSIsCiAgICAgICAgIkJhcmxvdyBDbG93ZXMgdiBFdXJvdHJ1c3QiLAogICAgICAgICJBYm91LVJhaG1hbiB2IEFiYWNoIiwKICAgICAgICAiU3RhcmdsYWRlIHYgTmFzaCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE4OSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJZRUFSIjogIjE5ODciLAogICAgIk5BTUUiOiAiUmUgTW9udGFndSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVGhpcmQgUGFydHkgTGlhYmlsaXR5IiwKICAgICAgICAiS25vd2luZyBSZWNlaXB0IiwKICAgICAgICAiTWVhbmluZyBvZiBLbm93bGVkZ2UiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIlJlIE1vbnRhZ3UmIzgyMTc7cyBTZXR0bGVtZW50cyBbMTk4N10gQ2guIDI2NCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBkaXN0aW5jdGlvbiBtdXN0IGJlIGRyYXduIGJldHdlZW4gaGF2aW5nIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3RpY2U8L3NwYW4+IG9mIHNvbWV0aGluZyBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPmtub3dpbmc8L3NwYW4+IGFib3V0IGl0LiBUaGVzZSBhcmUgbm90IHRoZSBzYW1lLCBhbmQgbWVyZWx5IGhhdmluZyBub3RpY2UgaXMgbm90IGVub3VnaCBmb3IgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+S25vd2luZyBSZWNlaXB0PC9zcGFuPi4iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRoZSAxMHRoIER1a2Ugb2YgTWFuY2hlc3RlciAod2hvc2UgdGl0bGUgZGVyaXZlZCBmcm9tIHRoZSBwaWZmbGluZyB2aWxsYWdlIG9mIEdvZG1hbmNoZXN0ZXIsIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IHRoZSBjaXR5KSwgdGhlIG9uZSB3aG8gc29sZCBvZmYgS2ltYm9sdG9uIENhc3RsZSwgaGFkIHRyZWF0ZWQgcHJvcGVydHkgZnJvbSB0cnVzdHMgc2V0dGxlZCBieSB0aGUgOXRoIER1a2UgYXMgaGlzIG93biBwcm9wZXJ0eS4gSGUgaGFkIGJlZW4gc2hvd24gdGhlIHRlcm1zIG9mIHRoZSBzZXR0bGVtZW50LCBidXQgbGF0ZXIgY2xhaW1lZCB0byBoYXZlIGZvcmdvdHRlbiB3aGF0IHRoZXkgd2VyZS4iCiAgICBdCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkgJm1kYXNoOyBLbm93aW5nIFJlY2VpcHQgJm1kYXNoOyBNZWFuaW5nIG9mIEtub3dsZWRnZSAmbWRhc2g7IFVuY29uc2Npb25hYmlsaXR5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJBcm1zdHJvbmcgdiBXaW5uaW5ndG9uIiwKICAgICAgICAiUmUgTW9udGFndSIsCiAgICAgICAgIkNvd2FuIGRlIEdyb290IHYgRWFnbGUgVHJ1c3QiLAogICAgICAgICJCYWRlbiB2IFNvYyBHZW4iLAogICAgICAgICJOZWxzb24gdiBMYXJob2x0IiwKICAgICAgICAiUGhpbCBDb2xsaW5zIHYgRGF2aXMiLAogICAgICAgICJCYXJuZXMgdiBBZGR5IiwKICAgICAgICAiTVQgUmVhbGlzYXRpb25zIHYgRGlnaXRhbCBFcXVpcG1lbnQgQ28iLAogICAgICAgICJBZ2lwIEFmcmljYSB2IEphY2tzb24iLAogICAgICAgICJBYm91LVJhaG1hbiB2IEFiYWNoIiwKICAgICAgICAiUm95YWwgQnJ1bmVpIHYgVGFuIiwKICAgICAgICAiVHdpbnNlY3RyYSB2IFlhcmRsZXkiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxOTAiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQUtBIjogIkFraW5kZWxlIiwKICAgICJZRUFSIjogIjIwMDEiLAogICAgIk5BTUUiOiAiQkNDSSB2IEFraW5kZWxlIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJNZWFuaW5nIG9mIEtub3dsZWRnZSIsCiAgICAgICAgIlVuY29uc2Npb25hYmlsaXR5IgogICAgXSwKICAgICJDSVRBVElPTiI6ICJCQ0NJIHYgQWtpbmRlbGUgWzIwMDFdIENoIDQzNyIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIGNsYXNzaWZpY2F0aW9uIG9mIGtub3dsZWRnZSBmcm9tIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhZGVuPC9zcGFuPiBpcyBvZiBubyBwYXJ0aWN1bGFyIHZhbHVlIGluIGtub3dpbmcgcmVjZWlwdC4gVGhlIHRlc3Qgc2hvdWxkIGJlIG9uZSBvZiA8c3BhbiBjbGFzcz1cIml0XCI+dW5jb25zY2lvbmFiaWxpdHk8L3NwYW4+LiBCdXQgaW4gYSBjb21tZXJjaWFsIGNvbnRleHQsIG5vdGhpbmcgc2hvcnQgb2YgdGhlIDNyZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CYWRlbjwvc3Bhbj4gbGV2ZWwgb2Yga25vd2xlZGdlIHdpbGwgZG8uIEFuIGludGVyZXN0IHJhdGUgdHdvIHBlcmNlbnQgaGlnaGVyIHRoYW4gdGhlIG1hcmtldCBhdmVyYWdlIHdpbGwgbm90IGJlIGVub3VnaC4iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkJDQ0lcdTIwMTlzIGRpcmVjdG9ycyBoYWQgZW50ZXJlZCBpbnRvIGZyYXVkdWxlbnQgdHJhbnNhY3Rpb25zIDxzcGFuIGNsYXNzPVwiaXRcIj53aXRoaW48L3NwYW4+IHRoZSBiYW5rLiBBa2luZGVsZSwgYSB3ZWFsdGh5IGJ1c2luZXNzbWFuIGZyb20gTmlnZXJpYSwgaGFkIG5lZ290aWF0ZWQgYW4gYWdyZWVtZW50IHdpdGggQkNDSS4gSW4gcmV0dXJuIGZvciBpbnZlc3RpbmcgYSBzdWJzdGFudGlhbCBzdW0gZm9yIGJldHdlZW4gMiBhbmQgNSB5ZWFycywgaGUgd291bGQgYmUgZ3VhcmFudGVlZCBhIDE1JSByZXR1cm4uIiwKICAgICAgICAiVGhlIGFycmFuZ2VtZW50IHdhcyB0aGF0IGhlIHdhcyB0byBwdXJjaGFzZSBzaGFyZXMsIHdoaWNoIHdlcmUgdG8gYmUgaGVsZCBieSBCQ0NJIGluIHRoZWlyIDxzcGFuIGNsYXNzPVwiYmRcIj5vd248L3NwYW4+IG5hbWUgZm9yIHVwIHRvIGZpdmUgeWVhcnMuIElmIGF0IGFueSBwb2ludCB0aGUgaW52ZXN0b3IgaW5kaWNhdGVkIGhlIHdhbnRlZCB0byBrZWVwIHRoZW0gZm9yIDxzcGFuIGNsYXNzPVwiYmRcIj5tb3JlPC9zcGFuPiwgdGhleSB3b3VsZCBiZSB0cmFuc2ZlcnJlZCBpbnRvIGhpcyBvd24gbmFtZS4iLAogICAgICAgICJBa2luZGVsZSBjbGFpbWVkIGhlJiM4MjE3O2QgbmV2ZXIgaW50ZW5kZWQgdG8ga2VlcCB0aGUgbW9uZXkgaW4gdGhlIGJhbmsgZm9yIG1vcmUgdGhhbiBmaXZlIHllYXJzICZtZGFzaDsgYnV0IGZvciB0aGUgdHdvIHllYXJzIHJlcXVpcmVkIGJ5IHRoZSBjb250cmFjdCwgYWZ0ZXIgd2hpY2ggdGltZSwgaGVcdTIwMTlkIHdpdGhkcmF3IHRoZSBjYXNoLiBIZSB3YXMgbm90IGF3YXJlIG9mIHRoZSAoZnJhdWR1bGVudCkgaW50ZXJuYWwgYXJyYW5nZW1lbnRzIGJ5IHdoaWNoIEJDQ0kgaGFkIG1hZ2lja2VkIHVwIHN1Y2ggYSByYXRlIG9mIHJldHVybi4gQnV0IGhlIDxzcGFuIGNsYXNzPVwiaXRcIj53YXM8L3NwYW4+IGF3YXJlIHRoZXkgaGFkIGZvcm0sIGFuZCBoYWQgYmVlbiB3YXJuZWQgYnkgYSBtaW5pc3RlciBpbiB0aGUgTmlnZXJpYW4gZ292ZXJubWVudCB0byBhdm9pZCBCQ0NJIGZvciB0aGUgc2FrZSBvZiBoaXMgb3duIHJlcHV0YXRpb24gJm1kYXNoOyB3aG8gbm9uZXRoZWxlc3MgcGVyc3VhZGVkIGhpbSBub3QgdG8gd2l0aGRyYXcgdGhlIHNoYXJlcyB0byBhdm9pZCAmIzgyMjA7dXBzZXR0aW5nIHRyaWJhbCBiYWxhbmNlcy4mIzgyMjE7IgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiVGhpcmQgUGFydHkgTGlhYmlsaXR5ICZtZGFzaDsgS25vd2luZyBSZWNlaXB0ICZtZGFzaDsgTWVhbmluZyBvZiBLbm93bGVkZ2UgJm1kYXNoOyBVbmNvbnNjaW9uYWJpbGl0eSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQkNDSSB2IEFraW5kZWxlIiwKICAgICAgICAiQ293YW4gZGUgR3Jvb3QgdiBFYWdsZSBUcnVzdCIsCiAgICAgICAgIlJlIE1vbnRhZ3UiLAogICAgICAgICJQaGlsIENvbGxpbnMgdiBEYXZpcyIsCiAgICAgICAgIkJhcm5lcyB2IEFkZHkiLAogICAgICAgICJNVCBSZWFsaXNhdGlvbnMgdiBEaWdpdGFsIEVxdWlwbWVudCBDbyIsCiAgICAgICAgIkJhZGVuIHYgU29jIEdlbiIsCiAgICAgICAgIk5lbHNvbiB2IExhcmhvbHQiLAogICAgICAgICJBZ2lwIEFmcmljYSB2IEphY2tzb24iLAogICAgICAgICJUd2luc2VjdHJhIHYgWWFyZGxleSIsCiAgICAgICAgIkJhcmxvdyBDbG93ZXMgdiBFdXJvdHJ1c3QiLAogICAgICAgICJTdGFyZ2xhZGUgdiBOYXNoIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTkxIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBkaXNhcHByb3ZhbCBvZiB0aGUgQ0EgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QWtpbmRlbGU8L3NwYW4+IG5vdHdpdGhzdGFuZGluZywgdGhlIGNhdGVnb3JpZXMgb2Yga25vd2xlZGdlIGlkZW50aWZpZWQgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmFkZW48L3NwYW4+IGFyZSBvZiB1c2VmdWwgYXBwbGljYXRpb24gdG8gbWVhc3VyZSB0aGUgPHNwYW4gY2xhc3M9XCJpdFwiPnVuY29uc2Npb25hYmlsaXR5PC9zcGFuPiBwcmVmZXJyZWQgdG8gPHNwYW4gY2xhc3M9XCJpdFwiPmtub3dsZWRnZTwvc3Bhbj4gaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QWtpbmRlbGU8L3NwYW4+LiIKICAgIF0sCiAgICAiTkFNRSI6ICJBcm1zdHJvbmcgdiBXaW5uaW5ndG9uIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJNZWFuaW5nIG9mIEtub3dsZWRnZSIsCiAgICAgICAgIlVuY29uc2Npb25hYmlsaXR5IgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiVGhpcmQgUGFydHkgTGlhYmlsaXR5ICZtZGFzaDsgS25vd2luZyBSZWNlaXB0ICZtZGFzaDsgRGVmZW5jZXMgJm1kYXNoOyBDaGFuZ2Ugb2YgUG9zaXRpb24iLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiUGhpbGxpcCBDb2xsaW5zIHYgRGF2aXMgWzIwMDBdIDMgQWxsIEVSIDgwOCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ293YW4gZGUgR3Jvb3QgdiBFYWdsZSBUcnVzdCIsCiAgICAgICAgIkJDQ0kgdiBBa2luZGVsZSIsCiAgICAgICAgIk5lbHNvbiB2IExhcmhvbHQiLAogICAgICAgICJCYWRlbiB2IFNvYyBHZW4iLAogICAgICAgICJSZSBNb250YWd1IiwKICAgICAgICAiQXJtc3Ryb25nIHYgV2lubmluZ3RvbiIsCiAgICAgICAgIk1UIFJlYWxpc2F0aW9ucyB2IERpZ2l0YWwgRXF1aXBtZW50IENvIiwKICAgICAgICAiQmFybmVzIHYgQWRkeSIsCiAgICAgICAgIkFnaXAgQWZyaWNhIHYgSmFja3NvbiIsCiAgICAgICAgIlN0YXJnbGFkZSB2IE5hc2giLAogICAgICAgICJBYm91LVJhaG1hbiB2IEFiYWNoIiwKICAgICAgICAiUm95YWwgQnJ1bmVpIHYgVGFuIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTkyIiwKICAgICJIRUxEIjogWwogICAgICAgICJBIGRlZmVuY2UgYWdhaW5zdCByZWNvdmVyeSBvZiBwcm9wZXJ0eSBrbm93aW5nbHkgcmVjZWl2ZWQgYnkgYSB0aGlyZCBwYXJ0eSBtYXkgYmUgZXN0YWJsaXNoZWQgaWYgdGhlIHByb3BlcnR5IHJlY2VpdmVkIGxlZCB0byBhIHNpZ25pZmljYW50IGNoYW5nZSBpbiB0aGUgcG9zaXRpb24gb2YgdGhlIHRoaXJkIHBhcnR5LiIKICAgIF0sCiAgICAiWUVBUiI6ICIyMDAwIiwKICAgICJOQU1FIjogIlBoaWwgQ29sbGlucyB2IERhdmlzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJLbm93aW5nIFJlY2VpcHQiLAogICAgICAgICJEZWZlbmNlcyIsCiAgICAgICAgIkNoYW5nZSBvZiBQb3NpdGlvbiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRoaXJkIFBhcnR5IExpYWJpbGl0eSAmbWRhc2g7IERpc2hvbmVzdCBBc3Npc3RhbmNlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJUd2luc2VjdHJhIHYgWWFyZGxleSIsCiAgICAgICAgIkJhcmxvdyBDbG93ZXMgdiBFdXJvdHJ1c3QiLAogICAgICAgICJCYXJuZXMgdiBBZGR5IiwKICAgICAgICAiQWJvdS1SYWhtYW4gdiBBYmFjaCIsCiAgICAgICAgIlN0YXJnbGFkZSB2IE5hc2giLAogICAgICAgICJCQ0NJIHYgQWtpbmRlbGUiLAogICAgICAgICJBcm1zdHJvbmcgdiBXaW5uaW5ndG9uIiwKICAgICAgICAiUmUgTW9udGFndSIsCiAgICAgICAgIlBoaWwgQ29sbGlucyB2IERhdmlzIiwKICAgICAgICAiQ293YW4gZGUgR3Jvb3QgdiBFYWdsZSBUcnVzdCIsCiAgICAgICAgIkFnaXAgQWZyaWNhIHYgSmFja3NvbiIsCiAgICAgICAgIk1UIFJlYWxpc2F0aW9ucyB2IERpZ2l0YWwgRXF1aXBtZW50IENvIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTkzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkFLQSI6ICJUYW4iLAogICAgIkNPVVJUIjogIlBDIiwKICAgICJZRUFSIjogIjE5OTUiLAogICAgIk5BTUUiOiAiUm95YWwgQnJ1bmVpIHYgVGFuIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJEaXNob25lc3QgQXNzaXN0YW5jZSIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIsCiAgICAgICAgIlBlcnN1YXNpdmUiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIlJveWFsIEJydW5laSBBaXJsaW5lcyB2IFRhbiBbMTk5NV0gMiBBQyAzNzgiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkluIHRoZSBQcml2eSBDb3VuY2lsICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGlzaG9uZXN0IEFzc2lzdGFuY2U8L3NwYW4+IHJlcXVpcmVzIGRpc2hvbmVzdHkgcmF0aGVyIHRoYW4gbWVyZWx5IGtub3dsZWRnZS4gV2hldGhlciB0aHJvdWdoIGFjdGlvbnMsIG9yIHBhc3NpdmVseSB0aHJvdWdoIGEgbGFjayBvZiBwcm9iaXR5LCBkaXNob25lc3R5IG11c3QgYmUgbWVhc3VyZWQgYWdhaW5zdCBob3cgYW4gaG9uZXN0IHBlcnNvbiB3b3VsZCBoYXZlIGJlaGF2ZWQgaW4gdGhlIGNpcmN1bXN0YW5jZXMuIEEgcGVyc29uIG1heSB0aGVyZWZvcmUgaGF2ZSBhIGNsZWFyIGNvbnNjaWVuY2UsIGJ1dCBieSB0aGlzIHN0YW5kYXJkIG5ldmVydGhlbGVzcyBiZSBkaXNob25lc3QuIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJUYW4gcmFuIGEgY29tcGFueSB0aGF0IGNvbnRyYWN0ZWQgd2l0aCBSb3lhbCBCcnVuZWkgdG8gc2VsbCB0aWNrZXRzLiBNb25leSBjb2xsZWN0ZWQgd2FzIHRvIGJlIGhlbGQgaW4gYSBzZXBhcmF0ZSBhY2NvdW50IG9uIHRydXN0IHRvIHRoZSBhaXJsaW5lLCB0byBiZSBhY2NvdW50ZWQgZm9yIHdpdGhpbiAzMCBkYXlzIG9mIHJlY2VpcHQuIiwKICAgICAgICAiSW4gZGlmZmljdWx0aWVzLCBoZSBkaXBwZWQgaW50byB0aGUgbW9uZXkuIEhlIGtuZXcgZG9pbmcgc28gd2FzIHdyb25nLCBidXQgaG9wZWQgdG8gcGF5IGl0IGJhY2sgYmVmb3JlIHRoZSAzMCBkYXlzIGhhZCBhcmlzZW4sIGFuZCwgbm8gaGFybSB1bHRpbWF0ZWx5IGhhdmluZyBiZWVuIGRvbmUsIG5vLW9uZSB3b3VsZCBiZSBhbnkgdGhlIHdpc2VyLiBIaXMgY29tcGFueSB0aGVuIHdlbnQgaW5zb2x2ZW50LiIsCiAgICAgICAgIlRoZSBBaXJsaW5lIHN1ZWQgaGltIGZvciBkaXNob25lc3QgYXNzaXN0YW5jZS4gSGUgYXJndWVkIGhpcyBpbnRlbnRpb24gd2FzIG5vdCB0byBkZWZyYXVkLCBhbmQgdGhhdCBvbiB0aGlzIGJhc2lzIGhlIGhhZCBub3QgYmVlbiBkaXNob25lc3QuIgogICAgXQp9LAp7CiAgICAiQ0FURUdPUlkiOiAiVGhpcmQgUGFydHkgTGlhYmlsaXR5ICZtZGFzaDsgRGlzaG9uZXN0IEFzc2lzdGFuY2UiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlR3aW5zZWN0cmEgdiBZYXJkbGV5IiwKICAgICAgICAiUm95YWwgQnJ1bmVpIHYgVGFuIiwKICAgICAgICAiQmFybmVzIHYgQWRkeSIsCiAgICAgICAgIkFib3UtUmFobWFuIHYgQWJhY2giLAogICAgICAgICJTdGFyZ2xhZGUgdiBOYXNoIiwKICAgICAgICAiUGhpbCBDb2xsaW5zIHYgRGF2aXMiLAogICAgICAgICJCQ0NJIHYgQWtpbmRlbGUiLAogICAgICAgICJSZSBNb250YWd1IiwKICAgICAgICAiQWdpcCBBZnJpY2EgdiBKYWNrc29uIiwKICAgICAgICAiTmVsc29uIHYgTGFyaG9sdCIsCiAgICAgICAgIkFybXN0cm9uZyB2IFdpbm5pbmd0b24iLAogICAgICAgICJCYWRlbiB2IFNvYyBHZW4iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxOTQiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ09VUlQiOiAiUEMiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlR3aW5zZWN0cmE8L3NwYW4+IHdhcyB3cm9uZyBpbiBhZGRpbmcgdG8gdGhlIG9iamVjdGl2ZSB0ZXN0IGZvciBkaXNob25lc3R5IG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRhbjwvc3Bhbj4uICYjODIxNjtLbm93bGVkZ2Ugb2YgdGhlIHRyYW5zYWN0aW9uIGhhcyB0byBiZSBzdWNoIGFzIHRvIHJlbmRlciB0aGUgcGFydGljaXBhdGlvbiBjb250cmFyeSB0byBub3JtYWxseSBhY2NlcHRhYmxlIHN0YW5kYXJkcyBvZiBjb25kdWN0LiBJdCBkb2VzIG5vdCByZXF1aXJlIHRoYXQgdGhlIGRlZmVuZGFudCBzaG91bGQgaGF2ZSBoYWQgYW55IHJlZmxlY3Rpb24gYWJvdXQgd2hhdCB0aG9zZSBub3JtYWxseSBhY2NlcHRhYmxlIHN0YW5kYXJkcyB3ZXJlLiYjODIxNzsiCiAgICBdLAogICAgIk5BTUUiOiAiQmFybG93IENsb3dlcyB2IEV1cm90cnVzdCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVGhpcmQgUGFydHkgTGlhYmlsaXR5IiwKICAgICAgICAiRGlzaG9uZXN0IEFzc2lzdGFuY2UiCiAgICBdLAogICAgIllFQVIiOiAiMjAwNiIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIsCiAgICAgICAgIlBlcnN1YXNpdmUiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkJhcmxvdyBDbG93ZXMgdiBFdXJvdHJ1c3QgWzIwMDZdIDEgQWxsIEVSIDMzMyIsCiAgICAiQUtBIjogIkV1cm90cnVzdCIKfSwKewogICAgIkNBVEVHT1JZIjogIlRoaXJkIFBhcnR5IExpYWJpbGl0eSAmbWRhc2g7IERpc2hvbmVzdCBBc3Npc3RhbmNlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJUd2luc2VjdHJhIHYgWWFyZGxleSIsCiAgICAgICAgIkJhcm5lcyB2IEFkZHkiLAogICAgICAgICJCYXJsb3cgQ2xvd2VzIHYgRXVyb3RydXN0IiwKICAgICAgICAiUm95YWwgQnJ1bmVpIHYgVGFuIiwKICAgICAgICAiU3RhcmdsYWRlIHYgTmFzaCIsCiAgICAgICAgIlJlIE1vbnRhZ3UiLAogICAgICAgICJDb3dhbiBkZSBHcm9vdCB2IEVhZ2xlIFRydXN0IiwKICAgICAgICAiQWdpcCBBZnJpY2EgdiBKYWNrc29uIiwKICAgICAgICAiQmFkZW4gdiBTb2MgR2VuIiwKICAgICAgICAiQkNDSSB2IEFraW5kZWxlIiwKICAgICAgICAiQXJtc3Ryb25nIHYgV2lubmluZ3RvbiIsCiAgICAgICAgIk5lbHNvbiB2IExhcmhvbHQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxOTUiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIyMDA2IiwKICAgICJOQU1FIjogIkFib3UtUmFobWFuIHYgQWJhY2giLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRoaXJkIFBhcnR5IExpYWJpbGl0eSIsCiAgICAgICAgIkRpc2hvbmVzdCBBc3Npc3RhbmNlIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiS2V5IgogICAgXSwKICAgICJDT01NRU5UIjogIkZvbGxvd2VkIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlN0YXJnbGFkZSB2IE5hc2g8L3NwYW4+LiIsCiAgICAiQ0lUQVRJT04iOiAiQWJvdS1SYWhtYW4gdiBBYmFjaCBbMjAwNl0gRVdDQSBDaXYgMTQ5MiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIEVXQ0EgZm9sbG93ZWQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RXVyb3RydXN0PC9zcGFuPiAoUEMpIGluIHByZWZlcmVuY2UgdG8gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VHdpbnNlY3RyYTwvc3Bhbj4gKEVXQ0EpLiBUaGUgYXBwcm9wcmlhdGUgdGVzdCBmb3IgZGlzaG9uZXN0eSB3YXMgd2hldGhlciB0aGUgc3RhbmRhcmRzIG9mIGNvbmR1Y3Qgd291bGQgcGVybWl0IHRoZSBhY3RzIGluIHF1ZXN0aW9uLiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRoaXJkIFBhcnR5IExpYWJpbGl0eSAmbWRhc2g7IERpc2hvbmVzdCBBc3Npc3RhbmNlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSb3lhbCBCcnVuZWkgdiBUYW4iLAogICAgICAgICJCYXJsb3cgQ2xvd2VzIHYgRXVyb3RydXN0IiwKICAgICAgICAiVHdpbnNlY3RyYSB2IFlhcmRsZXkiLAogICAgICAgICJBYm91LVJhaG1hbiB2IEFiYWNoIiwKICAgICAgICAiQmFybmVzIHYgQWRkeSIsCiAgICAgICAgIkFnaXAgQWZyaWNhIHYgSmFja3NvbiIsCiAgICAgICAgIkJDQ0kgdiBBa2luZGVsZSIsCiAgICAgICAgIk5lbHNvbiB2IExhcmhvbHQiLAogICAgICAgICJQaGlsIENvbGxpbnMgdiBEYXZpcyIsCiAgICAgICAgIkNvd2FuIGRlIEdyb290IHYgRWFnbGUgVHJ1c3QiLAogICAgICAgICJSZSBNb250YWd1IiwKICAgICAgICAiTVQgUmVhbGlzYXRpb25zIHYgRGlnaXRhbCBFcXVpcG1lbnQgQ28iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxOTYiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiWUVBUiI6ICIyMDEwIiwKICAgICJOQU1FIjogIlN0YXJnbGFkZSB2IE5hc2giLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRoaXJkIFBhcnR5IExpYWJpbGl0eSIsCiAgICAgICAgIkRpc2hvbmVzdCBBc3Npc3RhbmNlIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiS2V5IiwKICAgICAgICAiTGVhZGluZyIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiU3RhcmdsYWRlIFByb3BlcnRpZXMgdiBOYXNoIFsyMDEwXSBFV0NBIENpdiAxMzE0IiwKICAgICJIRUxEIjogWwogICAgICAgICJBbGJlaXQgcHVycG9ydGluZyB0byBmb2xsb3cgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VHdpbnNlY3RyYTwvc3Bhbj4sIHRoZSBzdWJqZWN0aXZlIGVsZW1lbnQgd2FzIG5ldmVydGhlbGVzcyBpcnJlbGV2YW50LiBUaGUgdGVzdCBmb3IgZGlzaG9uZXN0eSB3YXMgZ2VuZXJhbGx5IHRvIGJlIDxzcGFuIGNsYXNzPVwiYmRcIj5vYmplY3RpdmU8L3NwYW4+ICZtZGFzaDsgYnV0IHVsdGltYXRlbHksIHRoZSBjb3VydHMgYXJlIGF0IGxpYmVydHkgdG8gZGVjaWRlIG9uIHRoZSB0ZXN0IHRvIGJlIGFwcGxpZWQgdG8gZWFjaCBwYXR0ZXJuIG9mIGZhY3RzLiBUaGF0IGEgbGFyZ2UgYm9keSBvZiBvcGluaW9uIHNob3VsZCBkaXNzZW50IGFzIHRvIGhvbmVzdHkgaXMgYWxzbyBpcnJlbGV2YW50LiIKICAgIF0KfSwKewogICAgIkNBVEVHT1JZIjogIlRocmVlIENlcnRhaW50aWVzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgVGhpcmQgUGFydHkgTGlhYmlsaXR5IiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEZvcm1hbGl0aWVzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIENvbnN0aXR1dGlvbiBvZiBUcnVzdHMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgQ2hhcml0aWVzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFF1aXN0Y2xvc2UgVHJ1c3RzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFNlY3JldCBUcnVzdHMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxOTciLAogICAgIlRZUEUiOiAiQ2FzZSBPdmVydmlld3MiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5HZW5lcmFsPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5XcmlnaHQgdiBBdGt5bnM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+XHUyMDEzIHBlciBMb3JkIEVsZG9uICYjODIyMDtmaXJzdC4uLiB0aGUgd29yZCBtdXN0IGJlIGltcGVyYXRpdmUuLi47IHNlY29uZGx5Li4uIHRoZSBzdWJqZWN0IG11c3QgYmUgY2VydGFpbi4uLjsgYW5kIHRoaXJkbHkuLi4gdGhlIG9iamVjdCBtdXN0IGJlIGFzIGNlcnRhaW4gYXMgdGhlIHN1YmplY3QmIzgyMjE7PC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1jUGhhaWwgdiBEb3VsdG9uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlNvZnRlbmluZyB0aGUgPHNwYW4gY2xhc3M9XCJpdFwiPmZpeGVkIGxpc3Q8L3NwYW4+IHRlc3QgZm9yIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmNlcnRhaW50eSBvZiBvYmplY3Q8L3NwYW4+LCBMb3JkIFdpbGJlcmZvcmNlIGhlbGQgYSB0cnVzdCB3aWxsIG5vdCBmYWlsIGZvciB1bmNlcnRhaW50eSBvZiBvYmplY3QsIGlmIHRoZXJlIGlzIDxzcGFuIGNsYXNzPVwiaXRcIj5zdWZmaWNpZW50IHByYWN0aWNhbCBjZXJ0YWludHk8L3NwYW4+IGluIGl0cyBkZWZpbml0aW9uIHN1Y2ggdGhhdCBpdCBjb3VsZCBiZSBzYWlkIG9mIDxzcGFuIGNsYXNzPVwiaXRcIj5hbnkgZ2l2ZW4gcG9zdHVsYW50PC9zcGFuPiB3aGV0aGVyIG9yIG5vdCB0aGV5IGJlbG9uZyB0byB0aGUgY2xhc3Mgb2YgYmVuZWZpY2lhcmllcy48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Q2VydGFpbnR5IG9mIE9iamVjdDwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgQmFkZW4gKG5vLiAyKTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgQ0EgYWNjZXB0ZWQgdGhlIHRydXN0IGFzIHZhbGlkLCBhbHRob3VnaCB0aGUgdGVzdCB3YXMgaW50ZXJwcmV0ZWQgaW4gdGhyZWUgZGlmZmVyZW50IHdheXMgYnkgdGhlIGp1ZGdlcywgaW4gcmVnYXJkcyB0byB0aGUgZGV0ZXJtaW5hdGlvbiBvZiBjb25jZXB0dWFsIGFuZCBldmlkZW50aWFsIGNlcnRhaW50eS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Q2VydGFpbnR5IG9mIEludGVudGlvbjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGF1bCB2IENvbnN0YW5jZTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgZXNzZW5jZSBvZiB0aGUgcmVxdWlyZW1lbnQgb2YgY2VydGFpbnR5IG9mIGludGVudGlvbiBpcyB0aGF0IHRoZSBjcmVhdG9yIG9mIHRoZSB0cnVzdCBpbnRlbmRlZCB0byBjYXVzZSBzb21lb25lIHRvIGJlIHVuZGVyIGEgZHV0eSB0byBob2xkIHByb3BlcnR5IGZvciBhbm90aGVyLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBDaGFsbG9ubmVyIENsdWI8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QW1iaWd1aXR5IGFuZCBkaXNjcmVwYW5jeSBpbiB0aGUgY29uZGl0aW9ucyB1bmRlciB3aGljaCBtb25leSBzZXBhcmF0ZWQgb2ZmIGZyb20gYSBjb21wYW55JiM4MjE3O3MgbWFpbiBmdW5kcyBpbiBvcmRlciB0byBhdHRlbXB0IHRvIHByb3RlY3QgaXQgZnJvbSBjcmVkaXRvcnMsIGlmIHRoZSBjb21wYW55IHdlbnQgYmFua3J1cHQsIHdhcyBlbm91Z2ggdG8gZGVmZWF0IHRoZSBjbGFpbSB0aGF0IGFuIGV4cHJlc3MgdHJ1c3QgaGFkIGJlZW4gY3JlYXRlZC48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Q2VydGFpbnR5IG9mIEludGVudGlvbiAtIFByZWNhdG9yeSBXb3Jkczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgQWRhbXMgYW5kIEtlbnNpbmd0b24gVmVzdHJ5PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlRoZSB3b3JkaW5nIGRpZCBub3QgZXN0YWJsaXNoIGFuIGludGVudGlvbiB0byBjcmVhdGUgYSB0cnVzdDsgaXQgZXN0YWJsaXNoZWQgbWVyZWx5IGEgPHNwYW4gY2xhc3M9XCJiZFwiPndpc2g8L3NwYW4+Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MYW1iZSB2IEVhbWVzPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgcHJvdmlzaW9uIGluIGEgd2lsbCB0aGF0IGxlZnQgcHJvcGVydHkgdG8gdGhlIHRlc3RhdG9yJiM4MjE3O3Mgd2lmZSAmIzgyMjA7dG8gYmUgYXQgaGVyIGRpc3Bvc2FsIDxzcGFuIGNsYXNzPVwiYmRcIj5pbiBhbnkgd2F5IHNoZSBtYXkgdGhpbmsgYmVzdDwvc3Bhbj4gZm9yIHRoZSBiZW5lZml0IG9mIGhlcnNlbGYgYW5kIGhlciBmYW1pbHkmIzgyMjE7IGhhZCBub3Qgc3VjY2Vzc2Z1bGx5IGVzdGFibGlzaGVkIGEgdHJ1c3QuIE9iaXRlciwgdGhhdCB0aGUgcXVlc3Rpb24gb2Ygd2hldGhlciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5wcmVjYXRvcnkgd29yZHM8L3NwYW4+IHZpdGlhdGUgdGhlIGVzdGFibGlzaG1lbnQgb2YgYSB0cnVzdCBpcyBmb3IgdGhlIGp1ZGdlLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBIYW1pbHRvbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5QcmVjYXRvcnkgd29yZHMgbXVzdCBiZSByZWFkIGluIHRoZSBjb250ZXh0IG9mIHRoZSB3aG9sZSB3aWxsIGJlZm9yZSBkZWNpZGluZyB3aGV0aGVyIG9yIG5vdCB0aGV5IGNyZWF0ZSBhIHRydXN0Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBEaWdnbGVzPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPjxzcGFuIGNsYXNzPVwiaXRcIj5EZXNpcmU8L3NwYW4+ICZtZGFzaDsgcHJlY2F0b3J5IHdvcmRzLi4gZXRjLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db21pc2tleSB2IEJvd3JpbmctSGFuYnVyeTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5Gcm9tIHRoZSB3b3JkICYjODIxNjthYnNvbHV0ZWx5LCYjODIxNzsgaW4gJiM4MjE2O2Fic29sdXRlbHkgaW4gZnVsbCBjb25maWRlbmNlLCYjODIxNzsgYW4gaW5mZXJlbmNlIGNvdWxkIGJlIGRyYXduIHRoYXQgdGhlIHRlc3RhdG9yIHdhcyBub3QgbWVyZWx5IGV4cHJlc3NpbmcgYSB3aXNoLCBidXQgcmVmZXJyaW5nIHRvIGFuIGV4aXN0aW5nIGFycmFuZ2VtZW50Ljwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5DZXJ0YWludHkgb2YgSW50ZW50aW9uIC0gUHJlY2F0b3J5IFdvcmRzIC0gQm9pbGVycGxhdGU8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFN0ZWVsZSYjODIxNztzIFdUPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPld5bm4tUGFycnkgTEogJm1kYXNoOyBjb3B5aW5nIGZyb20gYSB3aWxsIHRoYXQgPHNwYW4gY2xhc3M9XCJpdFwiPmhhZDwvc3Bhbj4gYmVlbiBoZWxkIHRvIGJlIGEgdHJ1c3QgZWxzZXdoZXJlIDxzcGFuIGNsYXNzPVwiaXRcIj5kaWQgaW5kZWVkPC9zcGFuPiBlc3RhYmxpc2ggYSB0cnVzdCwgYXMgZG9pbmcgc28gY2xlYXJseSBlc3RhYmxpc2hlcyBpbnRlbnRpb24gdG8gY3JlYXRlIGEgdHJ1c3QuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkNlcnRhaW50eSBvZiBJbnRlbnRpb24gLSBUaGUgd29yZCAmIzgyMTY7VHJ1c3QmIzgyMTc7PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBLYXlmb3JkPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPk9wZW5pbmcgYW5kIHB1dHRpbmcgbW9uZXkgaW4gYW4gYWNjb3VudCBuYW1lZCAmIzgyMTY7Q3VzdG9tZXJzJiM4MjE3OyBUcnVzdCBEZXBvc2l0IEFjY291bnQsJiM4MjE3OyB3YXMsIGluIHRoZSBjaXJjcyBvZiBvbWlub3VzIGZpbmFuY2VzLCBlbm91Z2ggdG8gZXN0YWJsaXNoIGludGVudGlvbiB0byBjcmVhdGUgYSB0cnVzdCAod2l0aCBjb21wYW55IGFzIGJvdGggc2V0dGxvciBhbmQgdHJ1c3RlZSB3aXRoIGN1c3RvbWVycyBhcyBiZW5lZmljaWFyaWVzKS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Q2VydGFpbnR5IG9mIFN1YmplY3QgLSBJZGVudGlmaWNhdGlvbiBvZiBUcnVzdCBQcm9wZXJ0eTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGFsbWVyIHYgU2ltbW9uZHM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSB0cnVzdCB3aWxsIG5vdCBiZSB1cGhlbGQgaWYgdGhlIGRlc2NyaXB0aW9uIGlzIHZhZ3VlLiBBIHdpbGwgYXR0ZW1wdGluZyB0byBlc3RhYmxpc2ggYSB0cnVzdCBmb3IgJiM4MjE2O3RoZSBidWxrIG9mJiM4MjE3OyBhbiBlc3RhdGUgd2FzIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+IHVwaGVsZC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U3ByYW5nZSB2IEJhcm5hcmQ8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBkZXNjcmlwdGlvbiBvZiB0aGUgc3ViamVjdCBvZiBhIHRydXN0IHdoaWNoIGxlYXZlcyBvcGVuIHRoZSBwb3NzaWJpbGl0eSBvZiA8c3BhbiBjbGFzcz1cIml0XCI+Y29udGFpbmluZyBubyBwcm9wZXJ0eSBhdCBhbGw8L3NwYW4+LCB3aWxsIGZhaWwgZm9yIGEgbGFjayBvZiBjZXJ0YWludHkgb2Ygc3ViamVjdC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgR29sYXk8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSB3aWxsIGxlYXZpbmcgc29tZW9uZSBhIDxzcGFuIGNsYXNzPVwiaXRcIj5yZWFzb25hYmxlIGluY29tZTwvc3Bhbj4gYW5kIHRoZSByaWdodCB0byBsaXZlIGluIDxzcGFuIGNsYXNzPVwiaXRcIj5vbmUgb2Y8L3NwYW4+IHRoZSB0ZXN0YXRvciYjODIxNztzIGZsYXRzLCB3aXRob3V0IHNwZWNpZnlpbmcgd2hpY2gsIHdhcyA8c3BhbiBjbGFzcz1cIml0XCI+dXBoZWxkPC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SW4gdGhlIEVzdGF0ZSBvZiBMYXN0PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlNob3VsZCB0aGVyZSBiZSB1bmNlcnRhaW50eSBhcyB0byB0aGUgcHJvcGVydHkgY29tcHJpc2luZyB0aGUgcmVzaWR1ZSBvZiBhbiBlc3RhdGUsIGEgdHJ1c3QgcHVycG9ydGluZyB0byBoYXZlIGl0IGFzIGl0cyBzdWJqZWN0IG1hdHRlciB3aWxsIGZhaWwgZm9yIGEgbGFjayBjZXJ0YWludHkgb2Ygc3ViamVjdC4gQSB3aWxsIGF0dGVtcHRpbmcgdG8gZG8gc28gZm9yICYjODIyMDthbnl0aGluZyB0aGF0IGlzIGxlZnQmIzgyMjE7IGZhaWxlZCwgYW5kIHdhcyBoZWxkIGluc3RlYWQgdG8gYmUgYW4gYWJzb2x1dGUgZ2lmdC48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Q2VydGFpbnR5IG9mIFN1YmplY3QgLSBTZWdyZWdhdGlvbiBvZiBDaGF0dGVsczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgTG9uZG9uIFdpbmU8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+UGh5c2ljYWwgc2VncmVnYXRpb24gb2YgY2hhdHRlbHMgaXMgbmVjZXNzYXJ5IHRvIGlkZW50aWZ5IHRoZSBwcm9wZXJ0eSBvZiBhIHRydXN0LCBzbyB0aGUgYXR0ZW1wdCB0byBlc3RhYmxpc2ggYSB0cnVzdCBieSB0aGUgcHVyY2hhc2VycyBmYWlsZWQuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEdvbGRjb3JwPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkV2ZW4gd2hlbiBlYWNoIGNoYXR0ZWwgY29tcHJpc2luZyBhIHRydXN0IGZ1bmQgaXMgaW5zY3JpYmVkIHdpdGggbWVhbnMgb2YgdW5pcXVlIGlkZW50aWZpY2F0aW9uLCBzdG9yYWdlIHdpdGggbm9uLXRydXN0IGZ1bmQgcHJvcGVydHkgd2lsbCBkZWZlYXQgY2VydGFpbnR5IG9mIHN1YmplY3QuIEZ1cnRoZXJtb3JlIGNvbnRyYWN0dWFsIGRlYWxpbmdzIGdlbmVyYWxseSBsYWNrIHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+dHJ1c3Q8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+Y29uZmlkZW5jZTwvc3Bhbj4gdGhhdCBhcmUgdGhlIGhhbGxtYXJrcyBvZiBmaWR1Y2lhcnkgZHV0aWVzLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5DZXJ0YWludHkgb2YgU3ViamVjdCAtIEludGFuZ2libGUgUHJvcGVydHk8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkh1bnRlciB2IE1vc3M8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSB0cnVzdCBvZiBwYXJ0IG9mIGEgZnVuZ2libGUgbWFzcyBzdWNoIGFzIGEgc2hhcmVob2xkaW5nIG9yIGEgYmFuayBhY2NvdW50IHdpbGwgbm90IGZhaWwgZm9yIHVuY2VydGFpbnR5IG9mIHN1YmplY3QsIHNvIGxvbmcgYXMgdGhlIHNpemUgb2YgdGhlIHBhcnQgaXMgbm90IHVuY2VydGFpbi4gNSUgb2YgMTAwMCA8c3BhbiBjbGFzcz1cIml0XCI+aWRlbnRpY2FsPC9zcGFuPiBzaGFyZXMgZXF1YWxzIDUwIHNoYXJlcyAmbWRhc2g7IHRoZSB0cnVzdCB3YXMgdXBoZWxkLiBBbnkgNTAgb2YgdGhlIDEwMDAgc2hhcmVzIHdvdWxkIGhhdmUgZG9uZS4gRGlzdGluZ3Vpc2hlZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBMb25kb24gV2luZTwvc3Bhbj4uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhvbGxhbmQgdiBOZXdidXJ5PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPk5ldWJlcmdlciBKIGZvbGxvd2VkIHRoZSBydWxpbmcgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SHVudGVyIHYgTW9zczwvc3Bhbj4gZWFybGllciB0aGUgc2FtZSB5ZWFyLCBpbiB3aGljaCB0aGUgcnVsZSByZXF1aXJpbmcgc2VncmVnYXRpb24gb2YgdHJ1c3QgcHJvcGVydHkgZnJvbSBhIGxhcmdlciBtYXNzIHdhcyBmb3VuZCBub3QgdG8gYXBwbHkgdG8gZnVuZ2libGUgaW50YW5naWJsZXMuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkNlcnRhaW50eSBvZiBTdWJqZWN0IC0gSWRlbnRpZmljYXRpb24gb2YgVHJ1c3QgUHJvcGVydHkgLSBJbnRhbmdpYmxlIFByb3BlcnR5PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5XaGl0ZSB2IFNob3J0aGFsbDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5JbiB0aGUgQ291cnQgb2YgQXBwZWFsIGluIE5ldyBTb3V0aCBXYWxlcywgb24gdmVyeSBzaW1pbGFyIGZhY3RzIHRvIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkh1bnRlciB2IE1vc3M8L3NwYW4+LCB0aGUgcHJvYmxlbSBvZiBpZGVudGlmaWNhdGlvbiBvZiB0aGUgc2hhcmVzIGJlbG9uZ2luZyB0byB0aGUgY2xhaW1hbnQgb2YgdGhlIHRydXN0IHdhcyBuZWF0bHkgY2lyY3VtdmVudGVkIGJ5IGZpbmRpbmcgdGhhdCB0aGUgc2V0dGxvciBoYWQgZGVjbGFyZWQgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5lbnRpcmUgZnVuZDwvc3Bhbj4gYSB0cnVzdCwgd2l0aCBoZXJzZWxmIGFuZCB0aGUgY2xhaW1hbnQgYXMgYmVuZWZpY2lhcmllcy48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGVhcnNvbiB2IExlaG1hbiBCcm9zPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkJyaWdncyBKLCBvYml0ZXIgJm1kYXNoOyAxLiB0aGUgcHJpbmNpcGxlIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPldoaXRlIHYgU2hvcnRoYWxsPC9zcGFuPiAod2hpY2ggc2lkZS1zdGVwcGVkIHRoZSBwcm9ibGVtIG9mIGlkZW50aWZpY2F0aW9uIG9mIHVuc2VncmVnYXRlZCB0cnVzdCBwcm9wZXJ0eSBieSBjb250cml2aW5nIHRvIGZpbmQgYSB0cnVzdCBoYWQgYmVlbiBkZWNsYXJlZCBieSB0aGUgc2V0dGxvciBmb3IgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5lbnRpcmU8L3NwYW4+IGZ1bmQsIHdpdGggYm90aCBzZXR0bG9yIGFuZCByZWFsIGJlbmVmaWNpYXJ5IGFzIGJlbmVmaWNpYXJpZXMgb2YgPHNwYW4gY2xhc3M9XCJpdFwiPnVuZXF1YWw8L3NwYW4+IHByb3BvcnRpb25zKSBpcyBwcmVmZXJhYmxlIHRvIHRoZSBiaW5kaW5nIGF1dGhvcml0eS4gIDIuIEVsZWN0cm9uaWMgZG9jdW1lbnRhdGlvbiB3YXMgc3VmZmljaWVudCB0byBzYXRpc2Z5IHRoZSByZXF1aXJlbWVudCBvZiBTNTMoMSkoYykgTFBBLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5DZXJ0YWludHkgb2YgU3ViamVjdCAtIElkZW50aWZpY2F0aW9uIG9mIFRydXN0IFByb3BlcnR5IC0gSnVyaXNkaWN0aW9uIG92ZXIgQmVuZWZpY2lhcmllczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Qm95Y2UgdiBCb3ljZTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5FcXVpdHkgaGFzIGp1cmlzZGljdGlvbiBvdmVyIHRydXN0ZWVzLCBub3QgYmVuZWZpY2lhcmllcy4gQSB0cnVzdCB3aXRoIG1vcmUgdGhhbiBvbmUgYmVuZWZpY2lhcnkgaW4gd2hpY2ggdGhlIHNpemUgb2YgZWFjaCYjODIxNztzIHNoYXJlIG9mIHRoZSBjYWtlIGlzIGRldGVybWluZWQgYXMgYSBjb25zZXF1ZW5jZSBvZiBhIGNob2ljZSB0byBiZSBtYWRlIGJ5IGEgcGFydGljdWxhciwgZGVzaWduYXRlZCBiZW5lZmljaWFyeSwgaXMgdmFsaWQgJm1kYXNoOyBhbmQgdGhlIGNvdXJ0IGNhbm5vdCBjb21wZWwgdGhlIGJlbmVmaWNpYXJ5IGluIHF1ZXN0aW9uIHRvIG1ha2UgdGhlIGNob2ljZS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRocmVlIENlcnRhaW50aWVzIgogICAgXSwKICAgICJOQU1FIjogIkNhc2UgT3ZlcnZpZXdzIGZvciBUaHJlZSBDZXJ0YWludGllcyIKfSwKewogICAgIkNBVEVHT1JZIjogIkZvcm1hbGl0aWVzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgU2VjcmV0IFRydXN0cyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBRdWlzdGNsb3NlIFRydXN0cyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBDaGFyaXRpZXMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgVGhyZWUgQ2VydGFpbnRpZXMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxOTgiLAogICAgIlRZUEUiOiAiQ2FzZSBPdmVydmlld3MiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5HZW5lcmFsPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaG9tYXMgdiBUaW1lcyBCb29rczwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BbiBpbnRlciB2aXZvcyB0cnVzdCBvZiBjaGF0dGVscyBtYXkgYmUgdmFsaWRseSBlc3RhYmxpc2hlZCBieSB0aGUgc2V0dGxvciBzYXlpbmcgb2YgdGhlIHByb3BlcnR5OiAmIzgyMjA7eW91IGNhbiBrZWVwIGl0LCBpZiB5b3UgY2FuIGZpbmQgaXQuJiM4MjIxOzwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5HYXJkbmVyIHYgUm93ZTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIHRydXN0IG9mIGxhbmQgZm9yIHdoaWNoIHRoZXJlIGlzIG5vIGV2aWRlbmNlIGluIHdyaXRpbmcgc2lnbmVkIGJ5IHRoZSBzZXR0bG9yIGlzIHVuZW5mb3JjZWFibGUgcmF0aGVyIHRoYW4gdm9pZC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Um9jaGVmb3VjYWxkIHYgQm91c3RlYWQ8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIHNpZ25lZCB3cml0aW5nIG9mIGEgc2V0dGxvciBhdHRlc3RpbmcgdG8gYSB0cnVzdCBvZiBsYW5kIG5lZWQgbm90IGJlIGNvbnRlbXBvcmFyeSB3aXRoIHRoZSB0cnVzdCYjODIxNztzIGNyZWF0aW9uLiBGb3JtYWxpdHkgcnVsZXMgbWF5IG5vdCBiZSBhcHBsaWVkIHNob3VsZCBkb2luZyBzbyBmYWNpbGl0YXRlIGZyYXVkLCBhcyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5lcXVpdHkgd2lsbCBub3QgYWxsb3cgYSBzdGF0dXRlIHRvIGJlIGEgY2xvYWsgZm9yIGZyYXVkPC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RGlzcG9zaXRpb25zIG9mIEVxdWl0YWJsZSBJbnRlcmVzdHMgLSBTdWJ0cnVzdHM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk9uc2xvdyB2IFdhbGxpczwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5TdWJ0cnVzdHMgY2FuIGJlIDxzcGFuIGNsYXNzPVwiaXRcIj5hY3RpdmU8L3NwYW4+ICZtZGFzaDsgdGhlIHRydXN0ZWUgb2Ygd2hpY2gsIHRoZSBiZW5lZmljaWFyeSBvZiB0aGUgb3JpZ2luYWwgdHJ1c3QsIHN0aWxsIHJldGFpbnMgc29tZSBwYXJ0IG9mIHRoZSBvcmlnaW5hbCBiZW5lZmljaWFsIGludGVyZXN0OyBvciA8c3BhbiBjbGFzcz1cIml0XCI+cGFzc2l2ZTwvc3Bhbj4gJm1kYXNoOyBpbiB3aGljaCA8c3BhbiBjbGFzcz1cIml0XCI+YWxsPC9zcGFuPiB0aGUgYmVuZWZpY2lhcnkgb2YgdGhlIG9yaWdpbmFsIHRydXN0IHRyYW5zZmVycyA8c3BhbiBjbGFzcz1cIml0XCI+YWxsPC9zcGFuPiB0aGUgYmVuZWZpY2lhbCBpbnRlcmVzdCB0byB0aGUgYmVuZWZpY2lhcnkgb2YgdGhlIHN1YnRydXN0LiBUaGUgb3JpZ2luYWwgYmVuZWZpY2lhcnksIHRoZXJlZm9yZSwgJiM4MjE2O2Ryb3BzIG91dCBvZiB0aGUgcGljdHVyZS4mIzgyMTc7PC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGb3JtYWxpdGllcyIKICAgIF0sCiAgICAiTkFNRSI6ICJDYXNlIE92ZXJ2aWV3cyBmb3IgRm9ybWFsaXRpZXMiCn0sCnsKICAgICJDQVRFR09SWSI6ICJDb25zdGl0dXRpb24gb2YgVHJ1c3RzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgVGhpcmQgUGFydHkgTGlhYmlsaXR5IiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEZvcm1hbGl0aWVzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFRocmVlIENlcnRhaW50aWVzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFNlY3JldCBUcnVzdHMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgUXVpc3RjbG9zZSBUcnVzdHMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgQ2hhcml0aWVzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTk5IiwKICAgICJUWVBFIjogIkNhc2UgT3ZlcnZpZXdzIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+R2VuZXJhbDwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmxldGNoZXIgdiBGbGV0Y2hlcjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5HaXZlbiB0aGF0IGEgcHJvbWlzZSBpcyBhIGNob3NlIGluIGFjdGlvbiwgYSBwaWVjZSBvZiBpbnRhbmdpYmxlIGludGVsbGVjdHVhbCBwcm9wZXJ0eSwgYSBwcm9taXNlIGNhbiBiZSBoZWxkIG9uIHRydXN0Ljwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5GbGV0Y2hlciBDYXNlczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgQ29va2UmIzgyMTc7cyBTVDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5CdWNrbGV5IExKICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmxldGNoZXI8L3NwYW4+IGNvdWxkbiYjODIxNzt0IGJlIGFwcGxpZWQgdG8gcHJvcGVydHkgdGhhdCBkaWRuJiM4MjE3O3QgeWV0IGV4aXN0LiBUaGUgPHNwYW4gY2xhc3M9XCJpdFwiPnByb2NlZWRzIG9mIHNhbGU8L3NwYW4+IG9mIGEgdGhpbmcgYXJlIG5vdCB0aGUgc2FtZSB0aGluZyBhcyB0aGUgdGhpbmcuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkxsb3lkJiM4MjE3O3MgdiBIYXJwZXI8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+U29uIHByb21pc2VzIHRvIHBheSBvZmYgZGVidCwgZmF0aGVyIHNpZ25zIHRvIHNheSBoZSYjODIxNztsbCBwYXkgaW4gZGVmYXVsdC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgRmxhdmVsbDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIHByb21pc2UgdG8gcGF5IGFuIGFubnVpdHkgb2YgXHUwMGEzMzUwIHdhcyBkZWVtZWQgdG8gaGF2ZSBiZWVuIGhlbGQgb24gdHJ1c3QgZm9yIHRoZSBiZW5lZmljaWFyeS48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RG9uIEtpbmcgdiBGcmFuayBXYXJyZW48L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+RXZlbiB0aG91Z2ggbm8gc3VibWlzc2lvbnMgd2VyZSBtYWRlIG9uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkZsZXRjaGVyPC9zcGFuPiwgdGhlIHByaW5jaXBsZSB3YXMgbmV2ZXJ0aGVsZXNzIHVzZWQgaW4gdGhlIGp1ZGdtZW50LCB0aGUganVkZ2UgYXBwYXJlbnRseSBrZWVuIHRvIGZsYXVudCBoaXMgZmFtaWxpYXJpdHkgd2l0aCB0aGUgbW9yZSBhcmNhbmUgc2hhZnRzIGFuZCBjcmV2aWNlcyBvZiBlcXVpdHkuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlJ1bGUgaW4gU3Ryb25nIHYgQmlyZDwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U3Ryb25nIHYgQmlyZDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgZmFpbHVyZSBvZiBhIGdpZnQgd2lsbCBiZSBwZXJmZWN0ZWQgc2hvdWxkIHRoZSBsZWdhbCB0aXRsZSB0byB0aGUgcHJvcGVydHkgdmVzdCBpbiB0aGUgZG9uZWUgd2hlbiB0aGUgc2V0dGxvciBkaWVzLCBieSB2aXJ0dWUgb2YgdGhlIGRvbmVlIGJlaW5nIGFuIGV4ZWN1dG9yLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBSYWxsaTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5JZiBzb21lb25lIHdhcyBpbnRlbmRlZCB0byBiZSBhIHRydXN0ZWUgc2hvdWxkIGVuZCB1cCB3aXRoIHRoZSA8c3BhbiBjbGFzcz1cIml0XCI+cmlnaHQ8L3NwYW4+IHByb3BlcnR5LCBidXQgYnkgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj53cm9uZzwvc3Bhbj4gbWVhbnMsIGRvaW5nIHNvIHdvdWxkIG5ldmVydGhlbGVzcyBnaXZlIHRoZW0gdGhlIGFiaWxpdHkgdG8gY2Fycnkgb3V0IHRoZSB0cnVzdCAmbWRhc2g7IHdoaWNoIGlzIHdoYXQgdGhleSBtdXN0IGRvLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIKICAgIF0sCiAgICAiTkFNRSI6ICJDYXNlIE92ZXJ2aWV3cyBmb3IgQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIKfSwKewogICAgIkNBVEVHT1JZIjogIlNlY3JldCBUcnVzdHMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBRdWlzdGNsb3NlIFRydXN0cyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBGb3JtYWxpdGllcyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBUaHJlZSBDZXJ0YWludGllcyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBDaGFyaXRpZXMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIyMDAiLAogICAgIlRZUEUiOiAiQ2FzZSBPdmVydmlld3MiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5HZW5lcmFsPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5LYXNwZXJiYXVlciB2IEdyaWZmaXRoczwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5Nb2Rlcm4gQ0EgYXV0aG9yaXR5IG9uIHRoZSBjb25kaXRpb25zIGZvciBzZWNyZXQgdHJ1c3RzLiBQZXIgUGV0ZXIgR2lic29uIExKICZtZGFzaDsgJiM4MjIwO3RoZSBhdXRob3JpdGllcyBtYWtlIHBsYWluIHRoYXQgd2hhdCBpcyBuZWVkZWQgaXM6ICAxLiBhbiA8c3BhbiBjbGFzcz1cImJkXCI+aW50ZW50aW9uPC9zcGFuPiBieSB0aGUgdGVzdGF0b3IgdG8gY3JlYXRlIGEgdHJ1c3QsIHNhdGlzZnlpbmcgdGhlIHRyYWRpdGlvbmFsIHJlcXVpcmVtZW50cyBvZiB0aHJlZSBjZXJ0YWludGllcyAoLi4uKSAyLiB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmNvbW11bmljYXRpb248L3NwYW4+IG9mIHRoZSB0cnVzdCB0byB0aGUgbGVnYXRlZXMsIGFuZCAzLiA8c3BhbiBjbGFzcz1cImJkXCI+YWNjZXB0YW5jZTwvc3Bhbj4gb2YgdGhlIHRydXN0IGJ5IHRoZSBsZWdhdGVlLCB3aGljaCBjYW4gdGFrZSB0aGUgZm9ybSBvZiA8c3BhbiBjbGFzcz1cImJkXCI+c2lsZW50IGFjcXVpZXNjZW5jZTwvc3Bhbj4uJiM4MjIxOzwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5PdHRhd2F5IHYgTm9ybWFuPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFuIG9yYWwgRlNUIG9mIGxhbmQgd2FzIDxzcGFuIGNsYXNzPVwiaXRcIj51cGhlbGQ8L3NwYW4+LiBUaGUgZXZpZGVuY2UgZm9yIGV4aXN0ZW5jZSBvZiB0aGUgdHJ1c3QsIHdoaWNoIGdhdmUgdGhlIGxhbmQgdG8gdGhlIHRlc3RhdG9yJiM4MjE3O3MgY2hhdWZmZXVyLCB3YXMgYW4gb3ZlcmhlYXJkIHBob25lIGNvbnZlcnNhdGlvbi4gT3ZlcmhlYXJkIGJ5IHRoZSA8c3BhbiBjbGFzcz1cIml0XCI+Y2hhdWZmZXVyPC9zcGFuPi4gIEF0IG5vIHBvaW50IHdhcyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TNTMoMSkoYik8L3NwYW4+IG1lbnRpb25lZCwgYWx0aG91Z2ggb25lIHNrZWxldG9uIGhhZCAmIzgyMTY7cy41MygxKShiKT8mIzgyMTc7IHNjcmliYmxlZCBpbiB0aGUgbWFyZ2luLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ccm93biB2IFBvdXJhdTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BbiBvcmFsIHNlY3JldCB0cnVzdCBvZiBsYW5kIHdhcyBoZWxkIHZhbGlkLiBPYml0ZXIgJm1kYXNoOyAmIzgyMTY7YnV0IG5vdCBpbiBFbmdsYW5kLiYjODIxNzs8L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TW9zcyB2IENvb3Blcjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5Bbnl0aGluZyBvdGhlciB0aGFuIDxzcGFuIGNsYXNzPVwiaXRcIj5wb3NpdGl2ZSByZWplY3Rpb248L3NwYW4+IGJ5IHRoZSB0cnVzdGVlIG9mIGFuIEZTVCBpcyBhY2NlcHRhbmNlIG9mIHRydXN0ZWVzaGlwLCBpbmNsdWRpbmcgPHNwYW4gY2xhc3M9XCJpdFwiPnNpbGVuY2U8L3NwYW4+LiBFdmVuIGlmIHRoZSB0ZXN0YXRvciBkaWVzIGltbWVkaWF0ZWx5IGFmdGVyIGNvbW11bmljYXRpbmcgd2l0aCB0aGUgdHJ1c3RlZS4gT2xkLCBidXQgc3RpbGwgZ29vZCBsYXcuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkZ1bGx5IFNlY3JldCBUcnVzdHM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIE1hZGRvY2s8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+U2hvdWxkIHRoZSB0cnVzdGVlIG9mIGFuIEZTVCBwcmVkZWNlYXNlIHRoZSBzZXR0bG9yLCB0aGUgdHJ1c3Qgd2lsbCBmYWlsLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5JcnZpbmUgdiBTdWxsaXZhbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QcmVjYXRvcnkgd29yZHM8L3NwYW4+IG1heSBiZSBjb21wYXRpYmxlIHdpdGggYSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5GdWxseS1TZWNyZXQgVHJ1c3Q8L3NwYW4+ICZtZGFzaDsgYnV0IHdpdGhvdXQgYSBjbGVhciBvYmxpZ2F0aW9uIG9mIHRydXN0ZWVzaGlwIG9uIHRoZSBmYWNlIG9mIHRoZSB3aWxsLCB0aGV5IGNhbm5vdCBlc3RhYmxpc2ggYSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IYWxmLVNlY3JldCBUcnVzdDwvc3Bhbj4uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPldhbGdyYXZlIHYgVGViYnM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIGludGVuZGVkIHRydXN0ZWVzIG9mIGFuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkZTVDwvc3Bhbj4gbXVzdCBoYXZlIGJlZW4gaW5mb3JtZWQgb2YgdGhlIHRlcm1zIHdoaWxzdCB0aGUgdGVzdGF0b3Igd2FzIHN0aWxsIGxpdmluZy4gVGhlIHRlc3RhdG9yIG1lcmVseSBoYXZpbmcgd3JpdHRlbiBpbnN0cnVjdGlvbnMgdG8gdGhlIHRydXN0ZWVzIGlzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGVub3VnaC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgQm95ZXM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIHNldHRsb3Igb2YgYW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RlNUPC9zcGFuPiBtdXN0IGNvbW11bmljYXRlIG5vdCBvbmx5IHRoZSBmYWN0IG9mIHRydXN0ZWVzaGlwIHRvIHRoZSBpbnRlbmRlZCB0cnVzdGVlcyAmbWRhc2g7IGJ1dCBhbHNvIHRoZSA8c3BhbiBjbGFzcz1cIml0XCI+dGVybXM8L3NwYW4+IG9mIHRoZSB0cnVzdC48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+SGFsZiBTZWNyZXQgVHJ1c3RzPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CbGFja3dlbGwgdiBCbGFja3dlbGw8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SFNUPC9zcGFuPiB3YXMgdXBoZWxkIGRlc3BpdGUgY29tbXVuaWNhdGlvbiB0byB0aGUgaW50ZW5kZWQgdHJ1c3RlZXMgPHNwYW4gY2xhc3M9XCJpdFwiPnRoZSBuZXh0IGRheTwvc3Bhbj4uIFRoZSBydWxlIHRoYXQgY29tbXVuaWNhdGlvbiBvZiB0aGUgdGVybXMgdG8gdGhlIHRydXN0ZWVzIG9mIGFuIEhTVCA8c3BhbiBjbGFzcz1cIml0XCI+YmVmb3JlIG9yIGF0IHRoZSBzYW1lIHRpbWU8L3NwYW4+IGFzIHRoZSB3aWxsJiM4MjE3O3MgY3JlYXRpb24gaXMgdGhhdCB0aGUgdHJ1c3QgZXhpc3RzIGZyb20gdGhlIG1vbWVudCB0aGUgZGVlZCBvZiB3aWxsIGlzIGV4ZWN1dGVkLCB0aGUgdGVybXMgb2Ygd2hpY2ggYXJlIGltcGxpY2l0bHkgcGFydCBvZiBpdC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgS2Vlbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5FdmVuIHRob3VnaCBhIHRlcm0gaW4gYSB3aWxsIGVzdGFibGlzaGluZyBhbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IU1Q8L3NwYW4+IHJlZmVycyB0byA8c3BhbiBjbGFzcz1cIml0XCI+ZnV0dXJlPC9zcGFuPiBjb21tdW5pY2F0aW9uIG9mIHRoZSB0cnVzdCYjODIxNztzIHRlcm1zIHRvIGl0cyB0cnVzdGVlcywgaWYgdGhlIGNvbW11bmljYXRpb24gaGFzIGluIGZhY3QgYWxyZWFkeSB0YWtlbiBwbGFjZSwgdGhlIEhTVCB3aWxsIGJlIGRlZW1lZCB0byBoYXZlIGJlZW4gZXN0YWJsaXNoZWQuIEFsdGhvdWdoIGluIHRoaXMgY2FzZSwgaXQgZmFpbGVkIG9uIG90aGVyIGdyb3VuZHMuICYjODIyMDtBIHNoaXAgc2FpbGluZyB1bmRlciBzZWFsZWQgb3JkZXJzIGlzIHNhaWxpbmcgdW5kZXIgb3JkZXJzLCBhbHRob3VnaCB0aGUgY2FwdGFpbiBkb2Vzblx1MjAxOXQga25vdyB0aGUgZGVzdGluYXRpb24gdW50aWwgbGF0ZXIuIDxzcGFuIGNsYXNzPVwiYmRcIj5Qcm9ibGVtIHF1ZXN0aW9uPC9zcGFuPjogYSB0cnVzdGVlIGdpdmVuIGFuIGVudmVsb3BlLCB1bmRlcnN0YW5kaW5nIGl0IHRvIGNvbnRhaW4gdGVybXMgb2YgSFNULCBidXQgaW5zdHJ1Y3RlZCA8c3BhbiBjbGFzcz1cImJkXCI+bm90IHRvIG9wZW4gdW50aWwgZGVhdGg8L3NwYW4+IG9mIHNldHRsb3IgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImJkXCI+dmFsaWQgSFNULjwvc3Bhbj48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgQmF0ZW1hbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIGxldHRlciBjb250YWluaW5nIHRoZSB0ZXJtcyBvZiBhbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IU1Q8L3NwYW4+IHdyaXR0ZW4gPHNwYW4gY2xhc3M9XCJpdFwiPmJlZm9yZTwvc3Bhbj4gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgd2lsbCwgYnV0IG9ubHkgZ2l2ZW4gdG8gdGhlIHRydXN0ZWUgPHNwYW4gY2xhc3M9XCJpdFwiPmFmdGVyd2FyZHM8L3NwYW4+LCB3aWxsIG5vdCBiZSBjb25zaWRlcmVkIHRvIGJlIHZhbGlkIGNvbW11bmljYXRpb24gb2YgdGVybXMgdG8gdGhlIHRydXN0ZWUgcHJpb3IgdG8gZXhlY3V0aW9uIG9mIHRoZSB3aWxsLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBSZWVzPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlRoZSB0cnVzdGVlIG9mIGFuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhTVDwvc3Bhbj4gY2Fubm90IGJlIG9uZSBvZiBpdHMgYmVuZWZpY2lhcmllcyAmbWRhc2g7IGVzcGVjaWFsbHkgaWYgaGUgb3Igc2hlIGhhcHBlbnMgdG8gYmUgdGhlIHNvbGljaXRvciB3aG8gZHJhZnRlZCB0aGUgd2lsbC4gRXZlcnNoZWQgTVIgJm1kYXNoOyBhIGxvdCBvZiB3YW5rIGFib3V0IHB1YmxpYyBwb2xpY3ksIGV0Yy48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RGVob3JzIHRoZSBXaWxsPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBTbm93ZGVuPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPk1lZ2FycnkgVkMgJm1kYXNoOyBzZWNyZXQgdHJ1c3RzIGFyZSBpbiBmYWN0IGZvcm1lZCBpbnRlciB2aXZvcy4gVGhlIHdpbGwgbWVyZWx5IHB1dHMgdGhlbSB0b2dldGhlciwgaS5lLiwgPHNwYW4gY2xhc3M9XCJpdFwiPmNvbnN0aXR1dGVzPC9zcGFuPiB0aGVtLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiU2VjcmV0IFRydXN0cyIKICAgIF0sCiAgICAiTkFNRSI6ICJDYXNlIE92ZXJ2aWV3cyBmb3IgU2VjcmV0IFRydXN0cyIKfSwKewogICAgIkNBVEVHT1JZIjogIkNoYXJpdGllcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFNlY3JldCBUcnVzdHMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgVGhyZWUgQ2VydGFpbnRpZXMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgUXVpc3RjbG9zZSBUcnVzdHMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgQ29uc3RpdHV0aW9uIG9mIFRydXN0cyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgRm9ybWFsaXRpZXMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIyMDEiLAogICAgIlRZUEUiOiAiQ2FzZSBPdmVydmlld3MiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5QdXJwb3Nlczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SW5kZXBlbmRlbnQgU2Nob29scyBDb3VuY2lsIHYgQ2hhcml0eSBDb21taXNzaW9uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlRPRE88L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgR3d5b248L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIHB1cnBvc2Ugb2YgPHNwYW4gY2xhc3M9XCJpdFwiPiYjODIxNjtwcm92aWRpbmcga25pY2tlcnMgdG8gYm95cyYjODIxNzs8L3NwYW4+IHdhcyBub3QgdmFsaWQgYXMgYSBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHRoZSByZWxpZWYgb2YgcG92ZXJ0eS48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QUlUQyYjODIxNztzIEFwcGxpY2F0aW9uIGZvciBSZWdpc3RyYXRpb24gb2YgQ2hhcml0eTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5EaXNjdXNzaW5nIHdoYXQgPHNwYW4gY2xhc3M9XCJpdFwiPnByZXZlbnRpb248L3NwYW4+IG9mIHBvdmVydHkgbWlnaHQgbWVhbiwgYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2Ugd2FzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IHRoZSBtaXRpZ2F0aW9uIG9mIGZpbmFuY2lhbCBsb3NzZXMgcmVzdWx0aW5nIGZyb20gdW53aXNlIGludmVzdG1lbnRzLiBOZXZlcnRoZWxlc3MsIG5hcnJvdyBncm91bmRzIHdlcmUgZm91bmQgdG8gYWxsb3cgdGhlIGFwcGxpY2F0aW9uLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5DaGFyaXRhYmxlIFB1cnBvc2VzIC0gUG92ZXJ0eTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgQ2xhcms8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+UG92ZXJ0eSBpcyA8c3BhbiBjbGFzcz1cImJkXCI+cmVsYXRpdmU8L3NwYW4+IHRvIGFuIGluZGl2aWR1YWwmIzgyMTc7cyBjaXJjdW1zdGFuY2VzLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBDb3VsdGh1cnN0JiM4MjE3O3MgV2lsbCBUcnVzdDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5EZXN0aXR1dGlvbiBpcyBub3QgbmVjZXNzYXJ5IHRvIGJlIGNvbnNpZGVyZWQgaW4gcG92ZXJ0eTsgbWVyZWx5IDxzcGFuIGNsYXNzPVwiaXRcIj4mIzgyMTY7dG8gZ28gc2hvcnQgaW4gb3JkaW5hcnkgY2lyY3Vtc3RhbmNlcyYjODIxNzs8L3NwYW4+Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NYXJ5IENsYXJrIEhvbWVzIFRydXN0ZWVzIHYgQW5kZXJzb248L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+UGVvcGxlIHdpbGwgYmUgY29uc2lkZXJlZCBwb29yIGlmIHRoZWlyIGNpcmN1bXN0YW5jZXMgYXJlIDxzcGFuIGNsYXNzPVwiaXRcIj4mIzgyMTY7Z2VudWluZWx5IHN0cmFpdGVuZWQmIzgyMTc7PC9zcGFuPiBhbmQgdGhleSBhcmUgdW5hYmxlIHRvIG1haW50YWluIGEgJiM4MjE2OzxzcGFuIGNsYXNzPVwiaXRcIj5tb2Rlc3Qgc3RhbmRhcmQgb2YgbGl2aW5nPC9zcGFuPiYjODIxNjsgZm9yIHRoZW1zZWx2ZXMgYW5kIGFueSBkZXBlbmRlbnRzLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBTYW5kZXJzIFdUPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlRoZSB3b3JraW5nIGNsYXNzZXMgYXJlIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGluaGVyZW50bHkgcG9vci48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgTml5YXppJiM4MjE3O3MgV1Q8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIGludGVuZGVkIHVzZXJzIG9mIGEgd29ya2luZyBtZW4mIzgyMTc7cyBob3N0ZWwgaW4gQ3lwcnVzIDxzcGFuIGNsYXNzPVwiaXRcIj5hcmU8L3NwYW4+IGluaGVyZW50bHkgcG9vciwgc28gYSBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHRoZSBjb25zdHJ1Y3Rpb24gb2Ygc3VjaCBhIHRoaW5nIHdhcyB1cGhlbGQuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFlvdW5nPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgY2hhcml0YWJsZSB0cnVzdCBmb3IgPHNwYW4gY2xhc3M9XCJpdFwiPiYjODIxNjtkaXN0cmVzc2VkIGdlbnRsZWZvbGsmIzgyMTc7PC9zcGFuPiAmbWRhc2g7IG1lbWJlcnMgb2YgYSBQYWxsIE1hbGwgY2x1YiB3aG8gaGFkIDxzcGFuIGNsYXNzPVwiaXRcIj4mIzgyMTY7ZmFsbGVuIG9uIGV2aWwgZGF5cyYjODIxNzs8L3NwYW4+IHdhcyBmb3VuZCB0byBiZSB2YWxpZCwgYXMgYSBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHRoZSByZWxpZWYgb2YgcG92ZXJ0eS4gKCEpPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFHIHYgUG93ZXI8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+PHNwYW4gY2xhc3M9XCJpdFwiPiYjODIxNjtXaWRvd3MgYW5kIG9ycGhhbnMgaW4gYSBwYXJ0aWN1bGFyIGFyZWFzJiM4MjE3Ozwvc3Bhbj4gbWF5IGJlIHBvb3IgZm9yIHRoZSBwdXJwb3NlcyBvZiB0aGUgdmFsaWRpdHkgb2YgYSBjaGFyaXRhYmxlIHRydXN0Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBMdWNhczwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgY2hhcml0YWJsZSBwdXJwb3NlIG9mIGdpdmluZyA8c3BhbiBjbGFzcz1cIml0XCI+JiM4MjE2OzUgR3VpbmVhIGEgd2VlayB0byB0aGUgZWxkZXN0IHJlc3BlY3RhYmxlIGluaGFiaXRhbnQgaW4gR3VudmlsbGUmIzgyMTc7PC9zcGFuPiB3YXMgZm91bmQgdG8gYmUgdmFsaWQuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRob21wc29uIHYgVGhvbXBzb248L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBjaGFyaXRhYmxlIHRydXN0IHRvIGdpdmUgPHNwYW4gY2xhc3M9XCJpdFwiPiYjODIxNjtnaWZ0cyB0byB1bnN1Y2Nlc3NmdWwgbGl0ZXJhcnkgbWVuJiM4MjE3Ozwvc3Bhbj4gd2FzIHZhbGlkLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5JUkMgdiBCYWRkZWxleTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIGNoYXJpdGFibGUgcHVycG9zZSBmb3IgcG92ZXJ0eSBtdXN0IGFpbSB0byA8c3BhbiBjbGFzcz1cIml0XCI+cmVsaWV2ZTwvc3Bhbj4gdGhlIHBvdmVydHkuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkpvc2VwaCBSb3dudHJlZSBNZW1vcmlhbCBUcnVzdCB2IEFHPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgY2hhcml0YWJsZSBwdXJwb3NlIGZvciBwb3ZlcnR5IG11c3Qgbm90IG1lcmVseSBlbnRhaWwgPHNwYW4gY2xhc3M9XCJpdFwiPmFtdXNpbmc8L3NwYW4+IHRoZSBwb29yLCBidXQgPHNwYW4gY2xhc3M9XCJpdFwiPnJlbGlldmluZzwvc3Bhbj4gdGhlaXIgcG92ZXJ0eS48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QUlUQyYjODIxNztzIEFwcGxpY2F0aW9uIGZvciBSZWdpc3RyYXRpb24gb2YgQ2hhcml0eTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5EaXNjdXNzaW5nIHdoYXQgPHNwYW4gY2xhc3M9XCJpdFwiPnByZXZlbnRpb248L3NwYW4+IG9mIHBvdmVydHkgbWlnaHQgbWVhbiwgYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2Ugd2FzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IHRoZSBtaXRpZ2F0aW9uIG9mIGZpbmFuY2lhbCBsb3NzZXMgcmVzdWx0aW5nIGZyb20gdW53aXNlIGludmVzdG1lbnRzLiBOZXZlcnRoZWxlc3MsIG5hcnJvdyBncm91bmRzIHdlcmUgZm91bmQgdG8gYWxsb3cgdGhlIGFwcGxpY2F0aW9uLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5DaGFyaXRhYmxlIFB1cnBvc2VzIC0gRWR1Y2F0aW9uPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBEdXByZWUmIzgyMTc7cyBEZWVkIFRydXN0PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgY2hlc3MgdG91cm5hbWVudCBmb3IgYm95cyBpbiBQb3J0c21vdXRoIHdhcyBhIDxzcGFuIGNsYXNzPVwiaXRcIj52YWxpZDwvc3Bhbj4gY2hhcml0YWJsZSBwdXJwb3NlIGZvciBhZHZhbmNlbWVudCBvZiBlZHVjYXRpb24gJm1kYXNoOyBidXQgc3VjaCBhIHB1cnBvc2Ugd2FzIGZ1cnRoZXIgaGVsZCB0byBtYXJrIG91dCB0aGUgbGltaXQgb2Ygd2hhdCB3b3VsZCBiZSBhY2NlcHRlZC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWNHcmF0aCB2IENvaGVuPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkluIEF1c3RyYWxpYSwgdGhlIHByb3Zpc2lvbiBvZiBhIHJvc2UgZ2FyZGVuIGF0IGEgdW5pdmVyc2l0eSA8c3BhbiBjbGFzcz1cIml0XCI+d2FzPC9zcGFuPiBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZSBmb3IgdGhlIGFkdmFuY2VtZW50IG9mIGVkdWNhdGlvbi48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgTWVsb2R5PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlRoZSBwcm92aXNpb24gb2YgPHNwYW4gY2xhc3M9XCJpdFwiPiYjODIxNjthbiBhbm51YWwgdHJlYXQgb3IgZmllbGQgZGF5IGZvciBzY2hvb2wgY2hpbGRyZW4mIzgyMTc7PC9zcGFuPiB3YXMgYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIGVkdWNhdGlvbi48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgTG9wZXM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIHByb3Zpc2lvbiBvZiA8c3BhbiBjbGFzcz1cIml0XCI+ZWxlcGhhbnQgcmlkZXMgdG8gc2Nob29sY2hpbGRyZW48L3NwYW4+IHdhcyBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZS48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Um95YWwgQ2hvaXIgU29jaWV0eSB2IElSQzwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgY2hhcml0YWJsZSBwdXJwb3NlIG9mIGFkdmFuY2VtZW50IG9mIGVkdWNhdGlvbiBpcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBsaW1pdGVkIHRvIGJvb2stbGVhcm5pbmcgaW4gY2xhc3Nyb29tcyAmbWRhc2g7IGl0IGFsc28gaW5jbHVkZXMgZWR1Y2F0aW9uIG9mIDxzcGFuIGNsYXNzPVwiaXRcIj5hZXN0aGV0aWMgdGFzdGU8L3NwYW4+IGFuZCBzZW5zaWJpbGl0eS48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q291bmNpbCBvZiBMYXcgUmVwb3J0aW5nIHYgQUc8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QWR2YW5jZW1lbnQgb2YgZWR1Y2F0aW9uIGZvciBhIGNoYXJpdGFibGUgcHVycG9zZSBjYW4gaW5jbHVkZSA8c3BhbiBjbGFzcz1cIml0XCI+YW55IHVzZWZ1bCBicmFuY2ggb2Yga25vd2xlZGdlPC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgSHVtbWVsdGVuYmVyZzwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgZXN0YWJsaXNobWVudCBvZiBhIHNjaG9vbCB0byB0cmFpbiBzcGlyaXR1YWxpc3RpYyBtZWRpdW1zIGlzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3QgdmFsaWQ8L3NwYW4+IGFzIGEgY2hhcml0YWJsZSBwdXJwb3NlIGZvciB0aGUgYWR2YW5jZW1lbnQgb2YgZWR1Y2F0aW9uLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBQaW5pb248L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIGVzdGFibGlzaG1lbnQgb2YgYSBtdXNldW0gdG8gZXhoaWJpdCBhIGNvbGxlY3Rpb24gb2YgYXJ0IHdoaWNoIGV4cGVydCBvcGluaW9uIGRlZW1zIHRvIGJlIDxzcGFuIGNsYXNzPVwiaXRcIj5hIHdvcnRobGVzcyBwaWxlIG9mIGp1bms8L3NwYW4+LCBpcyBub3QgYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHRoZSBhZHZhbmNlbWVudCBvZiB0aGUgYXJ0cyBhbmQgY3VsdHVyZS4gSGVsZCBvYml0ZXIgJm1kYXNoOyB0aGUgZXN0YWJsaXNobWVudCBvZiA8c3BhbiBjbGFzcz1cIml0XCI+YSBzY2hvb2wgZm9yIHBpY2twb2NrZXRzIGFuZCBwcm9zdGl0dXRlczwvc3Bhbj4gd291bGQgbm90IGJlIGEgdmFsaWQgY2hhcml0YWJsZSBwdXJwb3NlIGZvciB0aGUgYWR2YW5jZW1lbnQgb2YgZWR1Y2F0aW9uLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBTaGF3PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlJlc2VhcmNoIGludG8gYSA0MC1sZXR0ZXIgYWxwaGFiZXQgaXMgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdCB2YWxpZDwvc3Bhbj4gYXMgYSBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIGVkdWNhdGlvbiAmbWRhc2g7IGZvciB3b250IG9mIHV0aWxpdHksIGFuZCBwZXJoYXBzIGFsc28sIGZvciBzdXJwbHVzIG9mIHBpc3MtdGFraW5nIGFuZCBmcml2b2xpdHkuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEhvcGtpbiYjODIxNztzIFdUPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlJlc2VhcmNoIGludG8gd2hldGhlciB0aGUgU2hha2VzcGVhcmUgcGxheXMgd2VyZSB3cml0dGVuIGJ5IHNvbWVvbmUgY2FsbGVkIEZyYW5jaXMgQmFjb24gb3Igc29tZW9uZSBjYWxsZWQgV2lsbGlhbSBTaGFrZXNwZWFyZSA8c3BhbiBjbGFzcz1cIml0XCI+d2FzIHZhbGlkPC9zcGFuPiBhcyBhbiBlZHVjYXRpb25hbCBjaGFyaXRhYmxlIHB1cnBvc2UsIGRlc3BpdGUgaXRzIHJlY29uZGl0ZSBhbmQgc2xpZ2h0bHkgb2JzZXNzaXZlIGNoYXJhY3Rlci48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgQnJpdGlzaCBTY2hvb2wgb2YgRWd5cHRpYW4gQXJjaGVvbG9neTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5SZXNlYXJjaCBjYXJyaWVkIG91dCBpbiBmdWxmaWxtZW50IG9mIGEgY2hhcml0YWJsZSBwdXJwb3NlIGZvciBlZHVjYXRpb24gbXVzdCBiZSBpbnRlbmRlZCB0byBiZSBkaXNzZW1pbmF0ZWQsIHJhdGhlciB0aGFuIGtlcHQgcHJpdmF0ZSBvciBzaW1wbHkgZm9yIHRoZSBwcml2YXRlIHNhdGlzZmFjdGlvbiBvZiB0aGUgcmVzZWFyY2hlci48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgTWFycmlldHRlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlNwb3J0IGluIHNjaG9vbHMgaXMgZm9yIDxzcGFuIGNsYXNzPVwiaXRcIj5lZHVjYXRpb24gb2YgdGhlIGJvZHk8L3NwYW4+ICZtZGFzaDsgYW5kIHdhcyB0aGVyZWZvcmUgYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2UgdW5kZXIgdGhlIHByZS0yMDA2IGxhdy48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Q2hhcml0YWJsZSBQdXJwb3NlcyAtIEN1bHR1cmU8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFBpbmlvbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgZXN0YWJsaXNobWVudCBvZiBhIG11c2V1bSB0byBleGhpYml0IGEgY29sbGVjdGlvbiBvZiBhcnQgd2hpY2ggZXhwZXJ0IG9waW5pb24gZGVlbXMgdG8gYmUgPHNwYW4gY2xhc3M9XCJpdFwiPmEgd29ydGhsZXNzIHBpbGUgb2YganVuazwvc3Bhbj4sIGlzIG5vdCBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZSBmb3IgdGhlIGFkdmFuY2VtZW50IG9mIHRoZSBhcnRzIGFuZCBjdWx0dXJlLiBIZWxkIG9iaXRlciAmbWRhc2g7IHRoZSBlc3RhYmxpc2htZW50IG9mIDxzcGFuIGNsYXNzPVwiaXRcIj5hIHNjaG9vbCBmb3IgcGlja3BvY2tldHMgYW5kIHByb3N0aXR1dGVzPC9zcGFuPiB3b3VsZCBub3QgYmUgYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHRoZSBhZHZhbmNlbWVudCBvZiBlZHVjYXRpb24uPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkNoYXJpdGFibGUgUHVycG9zZXMgLSBFZHVjYXRpb24gLSBQb2xpdGljYWwgUHVycG9zZTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U291dGh3b29kIHYgQUc8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBwb2xpdGljYWwgYWltIG1hc3F1ZXJhZGluZyBhcyBhbiBlZHVjYXRpdmUgb25lIGlzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3QgdmFsaWQ8L3NwYW4+IGFzIGEgY2hhcml0YWJsZSBwdXJwb3NlLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5DaGFyaXRhYmxlIFB1cnBvc2VzIC0gUmVsaWdpb248L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFNvdXRoIFBsYWNlIEV0aGljYWwgU29jaWV0eTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIHJlbGlnaW9uIGlzIGJvdGggKGkpIGJlbGllZiBpbiA8c3BhbiBjbGFzcz1cIml0XCI+c29tZXRoaW5nIHN1cGVybmF0dXJhbDwvc3Bhbj4sIGFuZCAoaWkpIDxzcGFuIGNsYXNzPVwiaXRcIj5mYWl0aCBpbiBhbmQgd29yc2hpcCBvZjwvc3Bhbj4gdGhlIGFmb3Jlc2FpZC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SHViYmFyZCB2IFZvc3Blcjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5TY2llbnRvbG9neSBpcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBhIHZhbGlkIHJlbGlnaW9uIGFzIGEgY2hhcml0YWJsZSBwdXJwb3Nlcy4gQ2YuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNodXJjaCBvZiBOZXcgRmFpdGggdiBUYXggQ29tbWlzc2lvbmVyczwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhvZGtpbjwvc3Bhbj4uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNodXJjaCBvZiBOZXcgRmFpdGggdiBDb21taXNzaW9uZXJzIGZvciBQYXlyb2xsIFRheDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5JbiBBdXN0cmFsaWEsIHNjaWVudG9sb2d5IDxzcGFuIGNsYXNzPVwiaXRcIj5pcyB2YWxpZDwvc3Bhbj4gYXMgYSByZWxpZ2lvbiBmb3IgYSBjaGFyaXRhYmxlIHB1cnBvc2UuIENmLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IdWJiYXJkIHYgVm9zcGVyPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SG9ka2luPC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UiAoZXggcC4gSG9ka2luKSB2IFJlZ2lzdHJhcjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5Gb3IgcHVycG9zZXMgb2YgYmVpbmcgYSB2YWxpZCBwbGFjZSB0byBob2xkIGEgbWFycmlhZ2UsIGEgc2NpZW50b2xvZ3kgJiM4MjIwO2NoYXBlbCYjODIyMTsgaXMgYSBwbGFjZSBvZiB3b3JzaGlwLiBDZi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SHViYmFyZCB2IFZvc3Blcjwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNodXJjaCBvZiBOZXcgRmFpdGggdiBUYXggQ29tbWlzc2lvbmVyczwvc3Bhbj4uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkdub3N0aWMgQ2VudHJlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkRlbnlpbmcgdGhlIGFwcGxpY2F0aW9uLCB0aGUgQ2hhcml0eSBDb21taXNzaW9uIGxpc3RlZCB0aGVzZSBmb3VyIGNvbmRpdGlvbnMgZm9yIGFuIGVudGl0eSB0byBiZSBjb25zaWRlcmVkIGEgcmVsaWdpb24sIGZvciB0aGUgcHVycG9zZXMgb2YgY2hhcml0YWJsZSBzdGF0dXM6IDEuIEJlbGllZiBpbiBhIGdvZC9zdXByZW1lIGJlaW5nL2RpdmluZS9wbHVyYWwvdHJhbnNjZW5kZW50YWwgYmVpbmcvc3Bpcml0dWFsIHByaW5jaXBsZTsgMi4gQSByZWxhdGlvbnNoaXAgYmV0d2VlbiBiZWxpZXZlciBhbmQgZW50aXR5ICh3b3JzaGlwKTsgMy4gQSBkZWdyZWUgb2YgY29nZW5jeSwgY29oZXNpb24sIHNlcmlvdXNuZXNzIG9yIGltcG9ydGFuY2U7IDQuIElkZW50aWZpYWJsZSBwb3NpdGl2ZSwgYmVuZWZpY2lhbCwgbW9yYWwgYW5kIGV0aGljYWwgZnJhbWV3b3JrLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EcnVpZCBGb3VuZGF0aW9uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPk9uIHRoZSBiYXNpcyBvZiB0aGUgY3JpdGVyaWEgc3BlbHQgb3V0IGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkdub3N0aWMgQ2VudHJlPC9zcGFuPiwgdGhlIGFwcGxpY2F0aW9uIGZvciBjaGFyaXRhYmxlIHN0YXR1cyB3YXMgYWNjZXB0ZWQuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkNoYXJpdGFibGUgUHVycG9zZXMgLSBSZWxpZ2lvbiAtIEFkdmFuY2VtZW50PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Vbml0ZWQgR3JhbmQgTG9kZ2Ugb2YgTWFzb25zIHYgSG9sYm9ybiBCQzwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BZHZhbmNlbWVudCBvZiByZWxpZ2lvbiBpcyA8c3BhbiBjbGFzcz1cIml0XCI+cHJvbW90aW5nIGl0LCBzcHJlYWRpbmcgaXRzIG1lc3NhZ2Ugd2lkZXIgYW1vbmcgbWFua2luZCwgYW5kIHRha2luZyBwb3NpdGl2ZSBzdGVwcyB0byBzdXN0YWluIGFuZCBpbmNyZWFzZTwvc3Bhbj4sIHdpdGggcGFzdG9yYWwgYW5kIG1pc3Npb25hcnkgY2hhcmFjdGVyaXN0aWNzLCBldGMuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkludmFsaWQgQ2hhcml0YWJsZSBQdXJwb3NlcyAtIFBvbGl0aWNzPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NY0dvdmVybiB2IEFHPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFkdm9jYWN5IGZvciBhIHBvbGl0aWNhbCBjaGFuZ2UgPHNwYW4gY2xhc3M9XCJpdFwiPmNhbm5vdCBiZSBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZTwvc3Bhbj4gYXMgdGhlIGNvdXJ0cyB3b3VsZCBoYXZlIG5vIHdheSBvZiBhZGp1ZGljYXRpbmcgd2hldGhlciBhIHBhcnRpY3VsYXIgY2hhbmdlIHdvdWxkIGJlIGZvciA8c3BhbiBjbGFzcz1cIml0XCI+cHVibGljIGJlbmVmaXQ8L3NwYW4+LCB3aXRob3V0IHRha2luZyBpbmhlcmVudGx5IHBvbGl0aWNhbCBzdGFuY2VzLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5OYXRpb25hbCBBbnRpLVZpdmlzZWN0aW9uIFNvY2lldHkgdiBJUkM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QWR2b2NhY3kgZm9yIHNvbWV0aGluZyByZXF1aXJpbmcgYSBjaGFuZ2UgaW4gdGhlIGxhdyBpcyBwb2xpdGljYWw7IHRoZXJlZm9yZSwgaXQgaXMgbm90IGEgdmFsaWQgY2hhcml0YWJsZSBwdXJwb3NlLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBCdXNobmVsbDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgcHVycG9zZSBvZiA8c3BhbiBjbGFzcz1cIml0XCI+JiM4MjE2O2Rpc3NlbWluYXRpbmcgc29jaWFsaXN0IG1lZGljaW5lJiM4MjE3Ozwvc3Bhbj4gaXMgbm90IGEgdmFsaWQgY2hhcml0YWJsZSBwdXJwb3NlLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Cb25hciBMYXcgTWVtb3JpYWwgVHJ1c3QgdiBJUkM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBkb25hdGlvbiB0byBhIHBvbGl0aWNhbCBwYXJ0eSBpcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Q2hhcml0YWJsZSBQdXJwb3NlcyAtIEhlYWx0aCBhbmQgU2F2aW5nIExpdmVzPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaG9tYXMgdiBIb3dlbGw8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBnaWZ0IHRvIHRoZSBSTkxJIGlzIGEgdmFsaWQgY2hhcml0YWJsZSBwdXJwb3NlLCBhcyB3b3VsZCBiZSBnaWZ0cyB0byBvdGhlciByZXNjdWUgc2VydmljZXMgJm1kYXNoOyBhcyBsb25nIGFzIHRoZXkgZG9uJiM4MjE3O3QgY2hhcmdlLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBSZXNjaCBXVDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5Qcm92aXNpb24gb2YgbWVkaWNhbCBjYXJlIGZvciB3aGljaCBhIGZlZSBpcyBjaGFyZ2VkIDxzcGFuIGNsYXNzPVwiaXRcIj5pczwvc3Bhbj4gYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2UuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFZlcmFsbDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgY3VyYXRpb24gYW5kIG1haW50ZW5hbmNlIG9mIGhpc3RvcmljYWxseSB2YWx1YWJsZSBvciBzaWduaWZpY2FudCBvYmplY3RzIGlzIGEgPHNwYW4gY2xhc3M9XCJpdFwiPnZhbGlkPC9zcGFuPiBjaGFyaXRhYmxlIHB1cnBvc2UuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkNoYXJpdGFibGUgUHVycG9zZXMgLSBBbWF0ZXVyIFNwb3J0PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBOb3R0YWdlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFtYXRldXIgeWFjaHQgcmFjaW5nIHdhcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZSB1bmRlciB0aGUgcHJlLTIwMDYgbGF3Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBNYXJyaWV0dGU8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+U3BvcnQgaW4gc2Nob29scyBpcyBmb3IgPHNwYW4gY2xhc3M9XCJpdFwiPmVkdWNhdGlvbiBvZiB0aGUgYm9keTwvc3Bhbj4gJm1kYXNoOyBhbmQgd2FzIHRoZXJlZm9yZSBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZSB1bmRlciB0aGUgcHJlLTIwMDYgbGF3Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5JUkMgdiBNYWNtdWxsYW48L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+SG91c2Ugb2YgTG9yZHMgYXV0aG9yaXR5IGZvciBQRSBpbiBTY2hvb2wgYW5kIFVuaXZlcnNpdHkgPHNwYW4gY2xhc3M9XCJpdFwiPmJlaW5nIHZhbGlkPC9zcGFuPiBhcyBhIGNoYXJpdGFibGUgdHJ1c3QsIGJlY2F1c2UgaXQgZW50YWlscyB0aGUgPHNwYW4gY2xhc3M9XCJpdFwiPmhvbGlzdGljIGRldmVsb3BtZW50PC9zcGFuPiBvZiB0aGUgcGVyc29uLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5DaGFyaXRhYmxlIFB1cnBvc2VzIC0gSHVtYW4gUmlnaHRzIGV0Yzwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UiAoZXggcC4gQnVsbCkgdiBSYWRpbyBBdXRob3JpdHk8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSByYWRpbyBzdGF0aW9uIGZvciB0aGUgcHJvbW90aW9uIG9mIGh1bWFuIHJpZ2h0cyB3YXMgZGVlbWVkIHRvIGJlIHByb21vdGluZyBhIHB1cnBvc2UgbmVjZXNzaXRhdGluZyBhIHBvbGl0aWNhbCBjaGFuZ2UsIGFuZCB0aHVzIHdhcyBub3QgYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHRoZSBwcm9tb3Rpb24gb2YgaHVtYW4gcmlnaHRzLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5DaGFyaXRhYmxlIFB1cnBvc2VzIC0gUmVsaWVmIG9mIHRob3NlIGluIE5lZWQ8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFJvYmluc29uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgdHJ1c3QgdG8gcHV0IHVwIGEgYmxvY2sgb2YgZmxhdHMgZm9yIHRob3NlIDxzcGFuIGNsYXNzPVwiaXRcIj42NSBvciBvbGRlcjwvc3Bhbj4gc3VjY2VlZGVkIGFzIGEgY2hhcml0YWJsZSBwdXJwb3NlIGZvciB0aGUgcmVsaWVmIG9mIHRob3NlIGluIG5lZWQgYnkgdmlydHVlIG9mIGFnZS4gUG92ZXJ0eSB3YXMgbm90IG5lY2Vzc2FyeSBpbiBhZGRpdGlvbiB0byBhZ2UuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkNoYXJpdGFibGUgUHVycG9zZXMgLSBBbmltYWwgV2VsZmFyZTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgV2VkZ3dvb2Q8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIGNoYXJpdGFibGUgcHVycG9zZSBvZiBmaW5kaW5nIGEgbW9yZSBodW1hbmUgbWFubmVyIG9mIHNsYXVnaHRlcmluZyBhbmltYWxzIGZvciBtZWF0IHdhcyBoZWxkIHRvIGJlIDxzcGFuIGNsYXNzPVwiaXRcIj52YWxpZDwvc3Bhbj4sIGZvciB0aGUgaW1hZ2luYXRpdmUgcmVhc29uIHRoYXQgPHNwYW4gY2xhc3M9XCJpdFwiPml0IHdvdWxkIHRhc3RlIGJldHRlcjwvc3Bhbj4gdG8gdGhvc2Ugd2hvIGF0ZSBpdCBpbiB0aGUga25vd2xlZGdlIG9mIGl0cyBwcm92ZW5hbmNlLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBHcm92ZS1HcmFkeTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5QcmlvciB0byAyMDA2LCBhIGNoYXJpdGFibGUgcHVycG9zZSBmb3IgYW5pbWFsIHdlbGZhcmUgYWxzbyBoYWQgdG8gY29uZmVyIHNvbWUgYmVuZWZpdCBvbiA8c3BhbiBjbGFzcz1cIml0XCI+cGVvcGxlPC9zcGFuPi4gRm9yIHRoaXMgcmVhc29uLCB0aGUgcHJvdmlzaW9uIG9mIGFzIHJlZnVnZSBmb3IgPHNwYW4gY2xhc3M9XCJpdFwiPiYjODIxNjthbGwgYW5pbWFscywgdG8gbGl2ZSB0b2dldGhlciBpbiBoYXJtb255LCBmcmVlIGZyb20gaHVtYW4gbW9sZXN0YXRpb24mIzgyMTc7PC9zcGFuPiwgd2FzIG5vdCBhIHZhbGlkIGNoYXJpdGFibGUgcHVycG9zZS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Q2hhcml0YWJsZSBQdXJwb3NlcyAtIEVmZmljaWVuY3kgb2YgQXJtZWQgRm9yY2VzPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBHcmF5PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlByb21vdGlvbiBvZiB0aGUgZWZmaWNpZW5jeSBvZiB0aGUgYXJtZWQgZm9yY2VzIG9yIGVtZXJnZW5jeSBzZXJ2aWNlcyB3YXMgYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2UgdW5kZXIgdGhlIHByZS0yMDA2IGxhdy48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgR29vZDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgcHJvdmlzaW9uIG9mIGEgbGlicmFyeSBmb3IgYXJteSBvZmZpY2VycyB3YXMgYSB2YWxpZCBjaGFyaXRhYmxlIHB1cnBvc2UgZm9yIHByb21vdGlvbiBvZiB0aGUgZWZmaWNpZW5jeSBvZiB0aGUgYXJtZWQgZm9yY2VzLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5DeS1wclx1MDBlOHMgLSBJbml0aWFsIEZhaWx1cmU8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEhhcndvb2Q8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+SWYgdGhlIGNoYXJpdGFibGUgcHVycG9zZSBjYW4gYmUgc2hvd24gdG8gaGF2ZSBtYXR0ZXJlZCA8c3BhbiBjbGFzcz1cIml0XCI+bW9yZTwvc3Bhbj4gdG8gdGhlIHRlc3RhdG9yIHRoYW4gdGhlIHBhcnRpY3VsYXIgY2hhcml0eSwgdGhlbiBhIGdpZnQgdGhhdCB3b3VsZCB2ZXN0IDxzcGFuIGNsYXNzPVwiaXRcIj5hZnRlcjwvc3Bhbj4gdGhlIGNoYXJpdHkgZm9sZHMgd2lsbCBiZSBhcHBsaWVkIGN5LXByXHUwMGU4cy4gT3IgaWYgdGhlIGdpZnQgZmFpbHMgYmVjYXVzZSB0aGUgY2hhcml0eSBkb2VzbiYjODIxNzt0IGV4aXN0Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBMeXNhZ2h0PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlRoZSBjeS1wclx1MDBlOHMgZG9jdHJpbmUgd2FzIGVtcGxveWVkIHRvIGRlbGV0ZSBhIGNvbmRpdGlvbiBhdHRhY2hlZCBieSB0aGUgdGVzdGF0b3Igb2YgYSBnaWZ0IGVzdGFibGlzaGluZyBhIHNjaG9sYXJzaGlwLCB0aGF0IGl0IHdhcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90IGZvciBSb21hbiBDYXRob2xpY3Mgb3IgSmV3czwvc3Bhbj4gKCEpLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBTYXR0ZXJ0aHdhaXRlJiM4MjE3O3MgV1Q8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+Q3ktcHJcdTAwZThzIHdpbGwgYmUgYXBwbGllZCB0byBhIHRlc3RhbWVudGFyeSBjaGFyaXRhYmxlIGdpZnQgdGhhdCBmYWlscyBpbml0aWFsbHksIHdoZW4gaXRzIGNvbnRleHQgbWFrZXMgY2xlYXIgYSBnZW5lcmFsIGNoYXJpdGFibGUgaW50ZW50aW9uLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBGaW5nZXImIzgyMTc7cyBXVDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5XaGVyZSB0aGVyZSBpcyBhIGdlbmVyYWwgY2hhcml0YWJsZSBpbnRlbnRpb24sIGJ1dCBhIHRlc3RhbWVudGFyeSBnaWZ0IGhhcyBuZXZlcnRoZWxlc3MgbGVmdCBzcGVjaWZpY2FsbHkgdG8gYSBwYXJ0aWN1bGFyIGNoYXJpdHkgd2hpY2ggaXMgZGVmdW5jdCBieSB0aGUgdGltZSB0aGUgdGVzdGF0b3IgZGllcywgaXQgbWF5IHN0aWxsIGJlIGFwcGxpZWQgY3ktcHJcdTAwZThzICZtZGFzaDsgZXNwZWNpYWxseSBpZiBubyBubyBoZWlycyB0byB0aGUgZXN0YXRlIGNhbiBiZSBpZGVudGlmaWVkLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5DeS1wclx1MDBlOHMgLSBTdWJzZXF1ZW50IEZhaWx1cmU8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFNsZXZpbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5TaG91bGQgdGhlIHB1cnBvc2Ugb2YgYSBjaGFyaXR5IGZhaWwsIHByb3BlcnR5IHN1Y2Nlc3NmdWxseSB2ZXN0ZWQgaW4gaXQgd2lsbCBiZSBhcHBsaWVkIGN5LXByXHUwMGU4cyB0byBhbm90aGVyIGNoYXJpdHksIGV2ZW4gc2hvdWxkIGl0IGhhdmUgYmVlbiBnaXZlbiB3aXRoIG5vIGdlbmVyYWwgY2hhcml0YWJsZSBpbnRlbnRpb24uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIEtpbmc8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QW55dGhpbmcgbGVmdCBvdmVyIG9uY2UgdGhlIGNoYXJpdGFibGUgcHVycG9zZSBvZiBhIGdpZnQgaGFzIGJlZW4gYWNoaWV2ZWQgd2lsbCBiZSBhcHBsaWVkIGN5LXByXHUwMGU4czwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBXcmlnaHQ8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+PC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaGFyaXRpZXMiCiAgICBdLAogICAgIk5BTUUiOiAiQ2FzZSBPdmVydmlld3MgZm9yIENoYXJpdGllcyIKfSwKewogICAgIkNBVEVHT1JZIjogIkZpZHVjaWFyeSBEdXRpZXMgLyBRdWlzdGNsb3NlIFRydXN0cyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFNlY3JldCBUcnVzdHMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgVGhpcmQgUGFydHkgTGlhYmlsaXR5IiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFRocmVlIENlcnRhaW50aWVzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIENoYXJpdGllcyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBDb25zdGl0dXRpb24gb2YgVHJ1c3RzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEZvcm1hbGl0aWVzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjAyIiwKICAgICJUWVBFIjogIkNhc2UgT3ZlcnZpZXdzIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+R2VuZXJhbDwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmFyY2xheSYjODIxNztzIEJhbmsgdiBRdWlzdGNsb3NlIEludmVzdG1lbnRzPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPldoZW4gQSB0cmFuc2ZlcnMgcHJvcGVydHkgdG8gQiBmb3IgYSBzcGVjaWZpYyBwdXJwb3NlLCBidXQgdGhlIHB1cnBvc2UgZmFpbHMsIHRoZW4gdGhlIHByb3BlcnR5IGlzIGhlbGQgb24gcmVzdWx0aW5nIHRydXN0IGZvciBBLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ud2luc2VjdHJhIHYgWWFyZGxleTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj4oMSkgRm9yIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRpc2hvbmVzdCBBc3Npc3RhbmNlPC9zcGFuPiwgaW4gYWRkaXRpb24gdG8gdGhlIHJlcXVpcmVtZW50IGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRhbjwvc3Bhbj4gb2Ygd2hldGhlciB0aGUgYWN0aW9ucyB3b3VsZCBoYXZlIGJlZW4gZG9uZSBhbiBob25lc3QgYW5kIHJlYXNvbmFibGUgcGVyc29uLCBkaXNob25lc3R5IGFsc28gZW50YWlscyB0aGF0IHRoZSBkZWZlbmRhbnQgcmVhbGlzZWQgaGlzIGFjdGlvbnMgd291bGQgYmUgY29uc2lkZXJlZCBkaXNob25lc3QuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlIgdiBDbG93ZXMgTm8gMjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5JbiB0aGUgYWJzZW5jZSBvZiBvdGhlciBpbmRpY2F0b3JzIG9mIGEgdHJ1c3QsIHRoZSB0cnVzdCBwcm9wZXJ0eSA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiBiZWluZyBrZXB0IHNlcGFyYXRlIHdpbGwgbmVnYXRpdmUgdGhlIGV4aXN0ZW5jZSBvZiBhIHRydXN0Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBFVlRSPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlRoZSBwdXJwb3NlIG9mIGEgUXVpc3RjbG9zZSB0cnVzdCBpcyBoZWxkIHRvIHN1Y2NlZWQgd2hlbiB0aGUgbW9uZXkgaXMgdXNlZCBmb3IgdGhlIGludGVuZGVkIHB1cnBvc2UsIGJ1dCB0aGUgdHJhbnNhY3Rpb24gaXMgbm90IGNvbXBsZXRlZCBiZWZvcmUgdGhlIGNvbXBhbnkgZ29lcyBiYW5rcnVwdC4gVGhlIGVxdWl0YWJsZSBpbnRlcmVzdCBpbiBlcXVpcG1lbnQgcHVyY2hhc2VkIHVzaW5nIGEgUXVpc3RjbG9zZSBsb2FuLCBidXQgbm90IGRlbGl2ZXJlZCBiZWZvcmUgdGhlIGNvbXBhbnkgd2VudCBiYW5rcnVwdCwgd291bGQgcmVzdWx0IHRvIHRoZSBzZXR0bG9yIG9mIHRoZSBRdWlzdGNsb3NlIHRydXN0Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Sb3RobWFucyB2IEZyZWVtYW4gTWF0aGV3IFRyZWFzdXJlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkVxdWl0eSBmYXN0ZW5zIGl0c2VsZiBvbnRvIHRoZSBjb25zY2llbmNlcyBvZiB0aGUgdHJhbnNmZXJlZXMgKHRoZSB0cnVzdGVlcyksIGFuZCB3aWxsIG5vdCB0aGVyZWZvcmUgcGVybWl0IHVzZSBvZiB0aGUgcHJvcGVydHkgZm9yIG90aGVyIHRoYW4gdGhlIHB1cnBvc2Ugc3RhdGVkIGluIGEgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UXVpc3RjbG9zZTwvc3Bhbj4gdHJ1c3QuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJpZWJlciB2IFRlYXRoZXJzPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlF1aXN0Y2xvc2UgdHJ1c3RzIG1heSBiZSB1cGhlbGQgZXZlbiBpZiBub3QgYWxsIHRoZWlyIHB1cnBvcnRlZCBjb25kaXRpb25zIGFyZSBtZXQsIGFuZCBvbmNlIHRoZSBwdXJwb3NlIGlzIGJlZ3VuLCB0aGV5IGRpZS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZpZHVjaWFyeSBEdXRpZXMiLAogICAgICAgICJRdWlzdGNsb3NlIFRydXN0cyIKICAgIF0sCiAgICAiTkFNRSI6ICJDYXNlIE92ZXJ2aWV3cyBmb3IgUXVpc3RjbG9zZSBUcnVzdHMiCn0sCnsKICAgICJDQVRFR09SWSI6ICJUaGlyZCBQYXJ0eSBMaWFiaWxpdHkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBRdWlzdGNsb3NlIFRydXN0cyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBTZWNyZXQgVHJ1c3RzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFRocmVlIENlcnRhaW50aWVzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEZvcm1hbGl0aWVzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIENvbnN0aXR1dGlvbiBvZiBUcnVzdHMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgQ2hhcml0aWVzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjAzIiwKICAgICJUWVBFIjogIkNhc2UgT3ZlcnZpZXdzIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+S25vd2luZyBSZWNlaXB0PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5OZWxzb24gdiBMYXJob2x0PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkZvcmVzaGFkb3dpbmcgUGV0ZXIgR2lic29uIEogaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmFkZW48L3NwYW4+ICZtZGFzaDsgdGhlIHJlY2VpcHQgb2YgPHNwYW4gY2xhc3M9XCJiZFwiPmVpZ2h0PC9zcGFuPiBjaGVxdWVzIGRyYXduIG9uIGFuIGVzdGF0ZSYjODIxNztzIGFjY291bnQgYnkgYW4gZXhlY3V0b3Igb3VnaHQgdG8gaGF2ZSBwdXQgdGhlIHJlY2lwaWVudCAmIzgyMTY7b24gYSBwYXRoIG9mIGlucXVpcnkuJiM4MjE3Ozwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CYWRlbiB2IFNvYyBHZW48L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+Rm9yIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPktub3dpbmcgUmVjZWlwdDwvc3Bhbj4sIGtub3dsZWRnZSBjYW4gYmUgZGVjb21wb3NlZCBpbnRvOiAxLiBhY3R1YWwga25vd2xlZGdlOyAyLiB3aWxmdWxseSBzaHV0dGluZyBvbmUmIzgyMTc7cyBleWVzIHRvIHRoZSBvYnZpb3U7IDMuIHdpbGZ1bGx5IGFuZCByZWNrbGVzc2x5IDxzcGFuIGNsYXNzPVwiYmRcIj5mYWlsaW5nIHRvIG1ha2UgZW5xdWlyaWVzPC9zcGFuPiBhbiBob25lc3QgcGVyc29uIHdvdWxkIGhhdmUgbWFkZTsgNC4ga25vd2xlZGdlIG9mIGNpcmN1bXN0YW5jZXMgd2hpY2ggd291bGQgPHNwYW4gY2xhc3M9XCJiZFwiPmluZGljYXRlIHRoZSBmYWN0czwvc3Bhbj4sIHRvIGFuIGhvbmVzdCBhbmQgcmVhc29uYWJsZSBtYW47IGFuZCA1LiBrbm93bGVkZ2Ugb2YgY2lyY3Vtc3RhbmNlcyB3aGljaCB3b3VsZCBwdXQgc3VjaCBhIG1hbiA8c3BhbiBjbGFzcz1cImJkXCI+b24gYSBjb3Vyc2Ugb2YgaW5xdWlyeTwvc3Bhbj4uPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPktub3dpbmcgUmVjZWlwdCAtIE1lYW5pbmcgb2YgS25vd2xlZGdlPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db3dhbiBkZSBHcm9vdCB2IEVhZ2xlIFRydXN0PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkZvciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Lbm93aW5nIFJlY2VpcHQ8L3NwYW4+LCBhIHRoaXJkIHBhcnR5JiM4MjE3O3Mga25vd2xlZGdlIG9mIGJyZWFjaCBvZiBmaWR1Y2lhcnkgZHV0eSBtYXkgYmUgaW5mZXJyZWQgZnJvbSBrbm93bGVkZ2Ugb2YgYSBncm9zcyBpcnJlZ3VsYXJpdHksIGUuZy4sIGEgc2FsZSYjODIxNztzIHN1YnN0YW50aWFsIDxzcGFuIGNsYXNzPVwiaXRcIj51bmRlcnZhbHVlPC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgTW9udGFndTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIGRpc3RpbmN0aW9uIG11c3QgYmUgZHJhd24gYmV0d2VlbiBoYXZpbmcgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdGljZTwvc3Bhbj4gb2Ygc29tZXRoaW5nIGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+a25vd2luZzwvc3Bhbj4gYWJvdXQgaXQuIFRoZXNlIGFyZSBub3QgdGhlIHNhbWUsIGFuZCBtZXJlbHkgaGF2aW5nIG5vdGljZSBpcyBub3QgZW5vdWdoIGZvciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Lbm93aW5nIFJlY2VpcHQ8L3NwYW4+Ljwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Lbm93aW5nIFJlY2VpcHQgLSBCZW5lZmljaWFsIFJlY2VpcHQgYnkgQ3JlZGl0b3I8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFnaXAgQWZyaWNhIHYgSmFja3Nvbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5Nb25leSBwYWlkIGludG8gYSBiYW5rIGFjY291bnQgaW4gY3JlZGl0IGlzIGhlbGQgb24gdHJ1c3QgYnkgdGhlIGJhbmsgZm9yIHRoZSBob2xkZXIgb2YgdGhlIGFjY291bnQ7IGJ1dCBtb25leSBwYWlkIGludG8gYW4gYWNjb3VudCBpbiBkZWJ0IGVudGFpbHMgYSB0cmFuc2ZlciBvZiBiZW5lZmljaWFsIGludGVyZXN0IHRvIHRoZSBiYW5rICZtZGFzaDsgYW5kIHRoZXJlZm9yZSwgPHNwYW4gY2xhc3M9XCJpdFwiPmJlbmVmaWNpYWwgcmVjZWlwdDwvc3Bhbj4gYnkgdGhlIGJhbmsuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1UIFJlYWxpc2F0aW9ucyB2IERpZ2l0YWwgRXF1aXBtZW50IENvPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFzIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFnaXAgQWZyaWNhPC9zcGFuPiwgYSBjcmVkaXRvciB3aG8sIGluIHBheW1lbnQgb2YgYSBkZWJ0LCByZWNlaXZlcyBtb25leSB0YWtlbiBpbiBicmVhY2ggb2YgZmlkdWNpYXJ5IGR1dHkgb3IgdHJ1c3QgPHNwYW4gY2xhc3M9XCJpdFwiPmlzPC9zcGFuPiBpbiBiZW5lZmljaWFsIHJlY2VpcHQuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPktub3dpbmcgUmVjZWlwdCAtIE1lYW5pbmcgb2YgS25vd2xlZGdlIC0gVW5jb25zY2lvbmFiaWxpdHk8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJDQ0kgdiBBa2luZGVsZTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgY2xhc3NpZmljYXRpb24gb2Yga25vd2xlZGdlIGZyb20gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmFkZW48L3NwYW4+IGlzIG9mIG5vIHBhcnRpY3VsYXIgdmFsdWUgaW4ga25vd2luZyByZWNlaXB0LiBUaGUgdGVzdCBzaG91bGQgYmUgb25lIG9mIDxzcGFuIGNsYXNzPVwiaXRcIj51bmNvbnNjaW9uYWJpbGl0eTwvc3Bhbj4uIEJ1dCBpbiBhIGNvbW1lcmNpYWwgY29udGV4dCwgbm90aGluZyBzaG9ydCBvZiB0aGUgM3JkIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhZGVuPC9zcGFuPiBsZXZlbCBvZiBrbm93bGVkZ2Ugd2lsbCBkby4gQW4gaW50ZXJlc3QgcmF0ZSB0d28gcGVyY2VudCBoaWdoZXIgdGhhbiB0aGUgbWFya2V0IGF2ZXJhZ2Ugd2lsbCBub3QgYmUgZW5vdWdoLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Bcm1zdHJvbmcgdiBXaW5uaW5ndG9uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlRoZSBkaXNhcHByb3ZhbCBvZiB0aGUgQ0EgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QWtpbmRlbGU8L3NwYW4+IG5vdHdpdGhzdGFuZGluZywgdGhlIGNhdGVnb3JpZXMgb2Yga25vd2xlZGdlIGlkZW50aWZpZWQgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmFkZW48L3NwYW4+IGFyZSBvZiB1c2VmdWwgYXBwbGljYXRpb24gdG8gbWVhc3VyZSB0aGUgPHNwYW4gY2xhc3M9XCJpdFwiPnVuY29uc2Npb25hYmlsaXR5PC9zcGFuPiBwcmVmZXJyZWQgdG8gPHNwYW4gY2xhc3M9XCJpdFwiPmtub3dsZWRnZTwvc3Bhbj4gaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QWtpbmRlbGU8L3NwYW4+Ljwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Lbm93aW5nIFJlY2VpcHQgLSBEZWZlbmNlcyAtIENoYW5nZSBvZiBQb3NpdGlvbjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGhpbCBDb2xsaW5zIHYgRGF2aXM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBkZWZlbmNlIGFnYWluc3QgcmVjb3Zlcnkgb2YgcHJvcGVydHkga25vd2luZ2x5IHJlY2VpdmVkIGJ5IGEgdGhpcmQgcGFydHkgbWF5IGJlIGVzdGFibGlzaGVkIGlmIHRoZSBwcm9wZXJ0eSByZWNlaXZlZCBsZWQgdG8gYSBzaWduaWZpY2FudCBjaGFuZ2UgaW4gdGhlIHBvc2l0aW9uIG9mIHRoZSB0aGlyZCBwYXJ0eS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RGlzaG9uZXN0IEFzc2lzdGFuY2U8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJveWFsIEJydW5laSB2IFRhbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5JbiB0aGUgUHJpdnkgQ291bmNpbCAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRpc2hvbmVzdCBBc3Npc3RhbmNlPC9zcGFuPiByZXF1aXJlcyBkaXNob25lc3R5IHJhdGhlciB0aGFuIG1lcmVseSBrbm93bGVkZ2UuIFdoZXRoZXIgdGhyb3VnaCBhY3Rpb25zLCBvciBwYXNzaXZlbHkgdGhyb3VnaCBhIGxhY2sgb2YgcHJvYml0eSwgZGlzaG9uZXN0eSBtdXN0IGJlIG1lYXN1cmVkIGFnYWluc3QgaG93IGFuIGhvbmVzdCBwZXJzb24gd291bGQgaGF2ZSBiZWhhdmVkIGluIHRoZSBjaXJjdW1zdGFuY2VzLiBBIHBlcnNvbiBtYXkgdGhlcmVmb3JlIGhhdmUgYSBjbGVhciBjb25zY2llbmNlLCBidXQgYnkgdGhpcyBzdGFuZGFyZCBuZXZlcnRoZWxlc3MgYmUgZGlzaG9uZXN0Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CYXJsb3cgQ2xvd2VzIHYgRXVyb3RydXN0PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlR3aW5zZWN0cmE8L3NwYW4+IHdhcyB3cm9uZyBpbiBhZGRpbmcgdG8gdGhlIG9iamVjdGl2ZSB0ZXN0IGZvciBkaXNob25lc3R5IG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRhbjwvc3Bhbj4uICYjODIxNjtLbm93bGVkZ2Ugb2YgdGhlIHRyYW5zYWN0aW9uIGhhcyB0byBiZSBzdWNoIGFzIHRvIHJlbmRlciB0aGUgcGFydGljaXBhdGlvbiBjb250cmFyeSB0byBub3JtYWxseSBhY2NlcHRhYmxlIHN0YW5kYXJkcyBvZiBjb25kdWN0LiBJdCBkb2VzIG5vdCByZXF1aXJlIHRoYXQgdGhlIGRlZmVuZGFudCBzaG91bGQgaGF2ZSBoYWQgYW55IHJlZmxlY3Rpb24gYWJvdXQgd2hhdCB0aG9zZSBub3JtYWxseSBhY2NlcHRhYmxlIHN0YW5kYXJkcyB3ZXJlLiYjODIxNzs8L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QWJvdS1SYWhtYW4gdiBBYmFjaDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgRVdDQSBmb2xsb3dlZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5FdXJvdHJ1c3Q8L3NwYW4+IChQQykgaW4gcHJlZmVyZW5jZSB0byA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ud2luc2VjdHJhPC9zcGFuPiAoRVdDQSkuIFRoZSBhcHByb3ByaWF0ZSB0ZXN0IGZvciBkaXNob25lc3R5IHdhcyB3aGV0aGVyIHRoZSBzdGFuZGFyZHMgb2YgY29uZHVjdCB3b3VsZCBwZXJtaXQgdGhlIGFjdHMgaW4gcXVlc3Rpb24uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlN0YXJnbGFkZSB2IE5hc2g8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QWxiZWl0IHB1cnBvcnRpbmcgdG8gZm9sbG93IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlR3aW5zZWN0cmE8L3NwYW4+LCB0aGUgc3ViamVjdGl2ZSBlbGVtZW50IHdhcyBuZXZlcnRoZWxlc3MgaXJyZWxldmFudC4gVGhlIHRlc3QgZm9yIGRpc2hvbmVzdHkgd2FzIGdlbmVyYWxseSB0byBiZSA8c3BhbiBjbGFzcz1cImJkXCI+b2JqZWN0aXZlPC9zcGFuPiAmbWRhc2g7IGJ1dCB1bHRpbWF0ZWx5LCB0aGUgY291cnRzIGFyZSBhdCBsaWJlcnR5IHRvIGRlY2lkZSBvbiB0aGUgdGVzdCB0byBiZSBhcHBsaWVkIHRvIGVhY2ggcGF0dGVybiBvZiBmYWN0cy4gVGhhdCBhIGxhcmdlIGJvZHkgb2Ygb3BpbmlvbiBzaG91bGQgZGlzc2VudCBhcyB0byBob25lc3R5IGlzIGFsc28gaXJyZWxldmFudC48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRoaXJkIFBhcnR5IExpYWJpbGl0eSIKICAgIF0sCiAgICAiTkFNRSI6ICJDYXNlIE92ZXJ2aWV3cyBmb3IgVGhpcmQgUGFydHkgTGlhYmlsaXR5Igp9XTs="; 

cardsLen = 204;

