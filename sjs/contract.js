cts_ = "WwogICAgIkNhc2UiLAogICAgIkNhc2UgT3ZlcnZpZXdzIiwKICAgICJDb25jZXB0IiwKICAgICJIZWFkbm90ZXMiLAogICAgIkhlbHAiLAogICAgIlRhYmxlIG9mIENvbnRlbnRzIgpd"; 

crt_ = "WwogICAgIkVXQ0EiLAogICAgIkVXSEMiLAogICAgIlVLSEwiLAogICAgIlVLUEMiLAogICAgIlVLU0MiCl0="; 

cnc_ = "WwogICAgIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSIsCiAgICAiQ29uc2lkZXJhdGlvbiAtIERldGFpbCIsCiAgICAiQ29uc2lkZXJhdGlvbiAtIE92ZXJ2aWV3IiwKICAgICJDb250cmFjdHVhbCBEdXRpZXMgYXMgQ29uc2lkZXJhdGlvbiIsCiAgICAiSW1wbGljYXRpb24gb2YgVGVybXMgLSBJbnRybyIsCiAgICAiSW5jb3Jwb3JhdGlvbiBvZiBDb25mbGljdGluZyBUZXJtcyIsCiAgICAiSW5jb3Jwb3JhdGlvbiBvZiBOZWdhdGl2ZSBUZXJtcyIsCiAgICAiSW5jb3Jwb3JhdGlvbiBvZiBQb3NpdGl2ZSBUZXJtcyIsCiAgICAiTWlzdGFrZSAtIEludHJvZHVjdGlvbiIsCiAgICAiT2ZmZXJzIiwKICAgICJQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICJSZXNwb25zZXMgdG8gT2ZmZXJzIgpd"; 

cgs_ = ""; 

pfl_ = "WwogICAgIjIwMTUvMjAxNiEiLAogICAgIkFwcHJvdmVkIiwKICAgICJBdGtpbiIsCiAgICAiQmluZ2hhbSIsCiAgICAiQnJhbXdlbGwiLAogICAgIkNyaXRpY2lzZWQiLAogICAgIkRlbm5pbmciLAogICAgIkRpcGxvY2siLAogICAgIkhhbGUiLAogICAgIkhpc3RvcmljYWwiLAogICAgIkhvZmZtYW4iLAogICAgIkhvZmZtYW5uIiwKICAgICJLZXkiLAogICAgIkxlYWRpbmciLAogICAgIk1jS2VuZHJpY2siLAogICAgIk5ldWJlcmdlciIsCiAgICAiT2J2aW91cyBOb25zZW5zZSIsCiAgICAiT3ZlcnJ1bGVkIiwKICAgICJQZXJzdWFzaXZlIiwKICAgICJQZXRlciBHaWJzb24iLAogICAgIlJlY2VudCIsCiAgICAiU3RleW4iLAogICAgIlRyZWl0ZWwiLAogICAgIlVuc2FmZSIsCiAgICAiV2lsYmVyZm9yY2UiLAogICAgImFwcGVhbC1vdXRzdGFuZGluZyIKXQ=="; 

ntn_ = '';

subject = 'contract';

enableTests = true;

currentTexture = 'img/textures/cream-paper.png';

defcols = '3';

darktheme = true;

cds_ = "IFsgewogICAgIlRZUEUiOiAiSGVscCIsCiAgICAiQ0FURUdPUlkiOiAiQ29udHJhY3QgTGF3IEdETCBGbGFzaGNhcmRzIiwKICAgICJURVJNUy1PRi1BUlQiOiAiY29uc2Vuc3VzIGFkIGlkZW07IGFkIGlkZW07IGxvY3VzIHBvZW5pdGVudGlhZSIsCiAgICAiTlVNQkVSIjogIjAiLAogICAgIllFQVIiOiAiMjAxNiIsCiAgICAiTUVUQS1OTy1TT1JUSU5HLUZPUi1UT0MiOiAiIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdCBMYXcgR0RMIEZsYXNoY2FyZHMiCiAgICBdLAogICAgIk5BTUUiOiAiQ2l0eSBHREwgQ29udHJhY3QgTGF3IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkZpbHRlcjwvc3Bhbj48L3NwYW4+PGJyPkVudGVyIG5hbWVzIG9mIDxzcGFuIGNsYXNzPVwiYmRcIj5jYXNlczwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwiYmRcIj5jYXRlZ29yaWVzPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJiZFwiPmNvbmNlcHRzPC9zcGFuPiwgb3IgZnJlZSB0ZXh0IGluIHF1b3Rlcy4gVGhlc2UgYnJvYWRlbiBvdXQgd2hhdCYjODIxNztzIGRpc3BsYXllZC4gQnkgY29udHJhc3QsIDxzcGFuIGNsYXNzPVwiYmRcIj50YWdzPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJiZFwiPmNvdXJ0czwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwiYmRcIj5jYXJkIHR5cGVzPC9zcGFuPiBhbGwgd2hpdHRsZSBkb3duIHdoYXQgeW91IHNlZS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkNvbmZpZyAmYW1wOyA8L3NwYW4+PC9zcGFuPjxicj5UaGUgb3B0aW9ucyBidXR0b24gKHRvcCBsZWZ0KSBicmluZ3MgdXAgYSBwYW5lbCB3aXRoIG9wdGlvbnMgdG8gZmlkZGxlIHdpdGguIFRoZXksIGxpa2UgdGhlIGNhcmRzIHlvdSYjODIxNztyZSBsb29raW5nIGF0LCBhcmUgcmVtZW1iZXJlZCB3aGVuIHlvdSBjb21lIGJhY2sgYSBkYXkgbGF0ZXIuIEJ1dCBpZiBzb21ldGhpbmcgZm91bHMgdXAsIGEgZGlzY3JlZXQgbGluayBvbiB0aGUgYm90dG9tIGxlZnQgbGV0cyB5b3UgPHNwYW4gY2xhc3M9XCJiZFwiPnJlc2V0IGV2ZXJ5dGhpbmc8L3NwYW4+LiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+aVBob25lczwvc3Bhbj48L3NwYW4+PGJyPlVzZSBvbiBpUGhvbmVzIGlzIHJlbmRlcmVkIG1vcmUgYmlkZGFibGUgYW5kIGxlc3MgY2x1dHRlcmVkIGJ5IHByZXNzaW5nIHRoZSAmIzgyMTY7c2hhcmUmIzgyMTc7IGJ1dHRvbiAoYm90dG9tIGNlbnRyZSkgaW4gc2FmYXJpLCB0aGVuIDxzcGFuIGNsYXNzPVwiYmRcIj5hZGQgdG8gaG9tZSBzY3JlZW48L3NwYW4+LiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+VGFnczwvc3Bhbj48L3NwYW4+PGJyPlRoZXNlLCBpbiB0aGUgcGFuZWwgb24gdGhlIHJpZ2h0LCBjYW4gYmUgZHJhZ2dlZCBvbnRvIG9yIGF3YXkgZnJvbSBjYXJkcywgb3IgaW50byB0aGUgZmlsdGVyIHRoaW5ndW1teSB1cCB0b3AuIFlvdSBjYW4gYWxzbyBtYWtlIHlvdXIgb3duLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+TGlua3M8L3NwYW4+PC9zcGFuPjxicj5MaW5rcyB0byBhbm90aGVyIGNhcmRzIGJyaW5nIHRoZW0gdXAsIGppZ2dsaW5nIGFyb3VuZCBhbmQgZmFkaW5nIG91dCB1bmxlc3MgeW91IGNsaWNrL3ByZXNzIHRvIGZhc3RlbiB0aGVtIGRvd24uIFdoeT8gTm8gaWRlYS4gPHNwYW4gY2xhc3M9XCJiZFwiPkNhc2UgY2FyZHM8L3NwYW4+IHNob3VsZCBoYXZlIDxzcGFuIGNsYXNzPVwiYmRcIj5PbiBXZXN0bGF3PC9zcGFuPiBvciA8c3BhbiBjbGFzcz1cImJkXCI+T24gY3VyaWEuZXU8L3NwYW4+IGF0IHRoZSB0b3AgbGVmdCwgd2hpY2ggc2hvdWxkIHRha2UgeW91IHN0cmFpZ2h0IHRvIHRoZSByZWxldmFudCBtYXRlcmlhbCBvbiB0aG9zZSBzaXRlcy4gT3RoZXIgbGlua3MgdG8sIGUuZy4sIGxlZ2lzbGF0aW9uLmdvdi51aywgb3Igd2lraXBlZGlhLCBpZiB0aGUgZW50cnkgd2FzIHBhcnRpY3VsYXJseSBoZWxwZnVsLCB3aWxsIHNob3cgdXAgd2hlbiBhcHByb3ByaWF0ZSBvciB3aGVuIHNvbWUgaW5leHBsaWNhYmxlIGV2ZW50IGNhdXNlZCBteSBsZXZlbCBvZiBpbnRlcmVzdCB0byByaXNlIGFib3ZlIHRoZSBlbmRsZXNzbHkgZ3JleSBhbmQgbGlzdGxlc3MgZHlzcGhvcmlhIGNvbnN0aXR1dGluZyBteSBtZW50YWwgYmFja2dyb3VuZCBub2lzZS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPk5vdGVzPC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cIml0XCI+PHNwYW4gY2xhc3M9XCJiZFwiPk5vdGUgd2VsbDwvc3Bhbj48L3NwYW4+ICZtZGFzaDsgdGhpcyB3YXMgY2h1Y2tlZCB0b2dldGhlciA8c3BhbiBjbGFzcz1cIml0XCI+aW4gYSBodXJyeTwvc3Bhbj4gc28gZGVmLiBoYXMgYnVncywgZ2xpdGNoZXMsIGhhbGYtcmVwaHJhc2VkIHNlbnRlbmNlcyBpbiB0aGUgY2FyZHMsIGV0Yy4gQW5kIGl0JiM4MjE3O3MgbWVhbnQgZm9yIHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+bGF0ZXN0IHZlcnNpb24gb2YgU2FmYXJpIG9yIENocm9tZTwvc3Bhbj4gb24gPHNwYW4gY2xhc3M9XCJiZFwiPk1hYzwvc3Bhbj4uIFdoYXQsIHlvdSYjODIxNztyZSBhIGxhdyBzdHVkZW50IGFuZCB5b3UgZG9uJiM4MjE3O3QgaGF2ZSBhIE1hYz88L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiU1BFQ0lBTCI6ICI8c3BhbiBjbGFzcz1cImJkXCI+SGVsbG8hPC9zcGFuPjxicj5UaGlzIGlzIGEgY29sbGVjdGlvbiBvZiBmbGFzaGNhcmRzIGZvciB0aGUgQ2l0eSBHREwuIEl0IGNvbnRhaW5zIGF0dGVtcHRzIHRvIGV4cGxhaW4gPHNwYW4gY2xhc3M9XCJsbmsgdHlwbG5cIj5Db25jZXB0PC9zcGFuPjxzcGFuIGNsYXNzPVwiaXRcIj5zPC9zcGFuPiwgY2FyZHMgY29udGFpbmluZyA8c3BhbiBjbGFzcz1cImxuayB0eXBsblwiPkNhc2UgT3ZlcnZpZXdzPC9zcGFuPiBmb3IgYSBnaXZlbiB0b3BpYywgY29udGFpbmluZyA8c3BhbiBjbGFzcz1cImxuayB0eXBsblwiPlN0YXR1dGU8L3NwYW4+PHNwYW4gY2xhc3M9XCJpdFwiPnM8L3NwYW4+LCBhbmQgbWFraW5nIHVwIHRoZSBidWxrIG9mIHRoZSBtYXRlcmlhbCAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIHR5cGxuXCI+Q2FzZTwvc3Bhbj48c3BhbiBjbGFzcz1cIml0XCI+czwvc3Bhbj4uIDxicj48YnI+Q2FzZXMgY2FuIGJlIG1hZGUgbGVzcyB3b3JkLWhlYXZ5IGJ5IGZpZGRsaW5nIGFyb3VuZCBpbiB0aGUgPHNwYW4+PGkgY2xhc3M9XCJtYXRlcmlhbC1pY29uc1wiIHN0eWxlPVwiZm9udC1zaXplOiA4MCUgIWltcG9ydGFudDtcIj5tZW51PC9pPjwvc3Bhbj4gb3B0aW9ucy4gVGhlcmUgeW91IGNhbiBhbHNvIGNoYW5nZSB0byBhIDxzcGFuIGNsYXNzPVwic2Fuc2ZvbnRcIj5zYW5zPC9zcGFuPiB0eXBlZmFjZSB3aGVuIEdhcmFtb25kIHN0YXJ0cyB0byBtYWtlIHlvdSB3YW50IHRvIHJpcCBvdXQgeW91ciBraWRuZXlzIGFuZCBzdHVmZiB0aGVtIGludG8geW91ciBleWUgc29ja2V0cy4gSWYgdGhlIHdhY2t5IGNhcmRzLWluLWEtcGlsZSBzY2h0aWNrIGdldHMgdXAgeW91ciBub3NlLCBhZGp1c3QgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5tZXNzaW5lc3M8L3NwYW4+LiBQbHVzIG90aGVyIHN0dWZmLiA8YnI+PGJyPlRoZXJlIGFyZSB0ZXN0cy4gQXJndWFibHkgYSBiaXQgZ2ltbWlja3ksIHRoZXkmIzgyMTc7cmUgYnkgbWVhbnMgb2YgbXVsdGlwbGUtZ3Vlc3NpbmcgdGhlIHJhdGlvIGJlbG9uZ2luZyB0byBhIGNhc2UsIG9yIHZpY2UtdmVyc2EuIFlvdSBjYW4gYWxzbyBkbyB0aGlzIGJ5IHR5cGluZyBpbiB0aGUgY2FzZSBuYW1lIGZvciBhIHJhdGlvIDxzcGFuIGNsYXNzPVwiaXRcIj53aXRob3V0PC9zcGFuPiBzZWVpbmcgYW55IGNob2ljZXMuIDxicj48YnI+RmxpcHBpbmcgY2FyZHMgYmFjayBhbmQgZm9ydGgsIG1vdmluZyB0byB0aGUgbmV4dCBvciBmZXRjaGluZyBiYWNrIHRoZSBsYXN0LCBpcyBhIG1hdHRlciBvZiB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmxlZnQ8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+cmlnaHQ8L3NwYW4+IGtleXMuIE9yLCBvbiBpT1MgZGV2aWNlcywgYSBtYXR0ZXIgb2YgZ3JlYXNpbmcgdXAgdGhlIHNjcmVlbiBieSA8c3BhbiBjbGFzcz1cImJkXCI+c3dpcGluZzwvc3Bhbj4gbGVmdCBvciByaWdodC4iLAogICAgIkZMQUdTIjogWwogICAgICAgICIyMDE1LzIwMTYhIgogICAgXQp9LAp7CiAgICAiTUVUQS1TVUJKRUNUIjogImNvbnRyYWN0IiwKICAgICJDQVRFR09SWSI6ICJPZmZlcnMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgTmVnYXRpdmUgVGVybXMiLAogICAgICAgICJJbXBsaWNhdGlvbiBvZiBUZXJtcyAtIEludHJvIiwKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBQb3NpdGl2ZSBUZXJtcyIsCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgQ29uZmxpY3RpbmcgVGVybXMiLAogICAgICAgICJNaXN0YWtlIC0gSW50cm9kdWN0aW9uIiwKICAgICAgICAiQ29uc2lkZXJhdGlvbiAtIERldGFpbCIsCiAgICAgICAgIkNvbnNpZGVyYXRpb24gLSBPdmVydmlldyIsCiAgICAgICAgIkNvbnRyYWN0dWFsIER1dGllcyBhcyBDb25zaWRlcmF0aW9uIiwKICAgICAgICAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIiwKICAgICAgICAiUmVzcG9uc2VzIHRvIE9mZmVycyIsCiAgICAgICAgIlByb21pc3NvcnkgRXN0b3BwZWwiCiAgICBdLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiTkFNRSI6ICJPZmZlcnMiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5PYmplY3RpdmUgVmlldyBvZiBPZmZlcjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JbnRlbnRpb24gYXNzZXNzZWQgPHNwYW4gY2xhc3M9XCJiZFwiPm9iamVjdGl2ZWx5PC9zcGFuPiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TbWl0aCB2IEh1Z2hlczwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5PZmZlcnMgbWFkZSB1bmRlciBhIG1pc2FwcHJlaGVuc2lvbiBhcyB0byA8c3BhbiBjbGFzcz1cIml0XCI+YXR0cmlidXRlPC9zcGFuPiBvZiBzdWJqZWN0IG1hdHRlciwgYWJvdXQgd2hpY2ggbm8gdGVybSBwcm92aWRlcywgYXJlIGJpbmRpbmc6IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJvc2UgdiBQaW08L3NwYW4+Ljxicj4uLi4gZXZlbiBpZiBvZmZlcmVlIDxzcGFuIGNsYXNzPVwiaXRcIj5rbmV3PC9zcGFuPiBvZiBvZmZlcm9yJiM4MjE3O3MgbWlzdGFrZSwgYnV0IGRpZCA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiB0aGluayBvZmZlcm9yIG1pc3VuZGVyc3Rvb2QgYSA8c3BhbiBjbGFzcz1cIml0XCI+dGVybTwvc3Bhbj4uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNtaXRoIHYgSHVnaGVzPC9zcGFuPiBhZ2Fpbi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkhhcnNoIGluIGhvdyBpdCBkaXNwZW5zZXMgd2l0aCB0aGUgaG9uZXN0bHkgbWlzdGFrZW4sIGJ1dCBpZiB0aGUgdmFsaWRpdHkgb2YgYW4gb2ZmZXIgd2VyZSBhIG1hdHRlciBvZiB0aGUgb2ZmZXJvciYjODIxNztzIDxzcGFuIGNsYXNzPVwiaXRcIj5zdWJqZWN0aXZlPC9zcGFuPiBpbnRlbnRpb24sIHRoZW4gdGhlIG9mZmVyJiM4MjE3O3MgdmFsaWRpdHkgJm1kYXNoOyBhbG9uZyB3aXRoIHRoZSB2YWxpZGl0eSBvZiBhbnkgY29udHJhY3QgYXJpc2luZyBmcm9tIGl0ICZtZGFzaDsgd291bGQgYmUgcmFkaWNhbGx5IGRlcHJpdmVkIG9mIGNlcnRhaW50eS48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5TbmFwcGluZy11cDwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPlNob3dzIGFic2VuY2Ugb2YgYWQgaWRlbSwgdGhlcmVmb3JlIHZvaWRzLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IYXJ0b2cgdiBDb2xpbiAmYW1wOyBTaGllbGRzPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2VudHJvdmluY2lhbDwvc3Bhbj4uIE9yIG9mZmVyZWUmIzgyMTc7cyBkaXNob25lc3R5LCBlc3BlY2lhbGx5IGluIGNlbnNvcmlvdXMgY291bnRyaWVzICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGlnaWxhbmRNYWxsLmNvbTwvc3Bhbj4uPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBmaW5kaW5nIHRoYXQgYW4gb2ZmZXJlZSBrbmV3IG9yIGNvdWxkIHJlYXNvbmFibHkgYmUgc2FpZCB0byBoYXZlIGtub3duIHRoYXQgYSA8c3BhbiBjbGFzcz1cImJkXCI+dGVybTwvc3Bhbj4gb2YgdGhlIG9mZmVyIHdhcyBtYWRlIGluIGVycm9yIChyYXRoZXIgdGhhbiBtZXJlbHkgYW4gYXNzdW1wdGlvbiksIGlzIGEgcHJpbWEgZmFjaWUgZGVtb25zdHJhdGlvbiBvZiB0aGUgYWJzZW5jZSBvZiBjb25zZW5zdXMgYWQgaWRlbSAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SGFydG9nIHYgQ29saW4gJmFtcDsgU2hpZWxkczwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNlbnRyb3ZpbmNpYWw8L3NwYW4+KS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBtb3JhbCB3b25raW5lc3Mgc2hvd24gYnkgdGhlIG9mZmVyZWUgaW4gaGF2aW5nIHRha2VuIGFkdmFudGFnZSBvZiB0aGUgdW5pbnRlbmRlZCBza2V3aW5nIG9mIHRoZSBiYXJnYWluIGluIHRoZWlyIGZhdm91ciwgd2FzIG5vdCB0aG91Z2h0IG9mIGFzIGltcG9ydGFudCB0byB0aGlzIGFuYWx5c2lzLCBhbHRob3VnaCBtdWNoIHdhcyBtYWRlIG9mIGl0IGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRpZ2lsYW5kTWFsbC5jb208L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkludml0YXRpb24gdG8gVHJlYXQ8L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiaXRcIj5BZHMgaW4gcHJpbnQsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBhcnRyaWRnZSB2IENyaXR0ZW5kZW48L3NwYW4+LCB3aW5kb3cgZGlzcGxheXMsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkZpc2hlciB2IEJlbGw8L3NwYW4+LCBhbmQgcHJpY2UtbGlzdHMsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkdyYWluZ2VyIHYgR291Z2g8L3NwYW4+ICZtZGFzaDsgIGFsbCB1c3VhbGx5IGludml0YXRpb25zIHRvIHRyZWF0LCBub3Qgb2ZmZXJzLjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5EaXN0aW5ndWlzaGVkIGZyb20gb2ZmZXIgYnkgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5pbnRlbnRpb248L3NwYW4+IG9mIHRoZSBzdGF0ZW1lbnQmIzgyMTc7cyBtYWtlciAgKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRyZWl0ZWwgMi0wMDY8L3NwYW4+KS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFkdmVydHMgZG8gPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj4gdXN1YWxseSBhbW91bnQgdG8gb2ZmZXJzICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QYXJ0cmlkZ2UgdiBDcml0dGVuZGVuPC9zcGFuPikuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BIHB1Ymxpc2hlZCBwcmljZS1saXN0IChsYWNraW5nICYjODIyMDtzdWJqZWN0IHRvIGF2YWlsYWJpbGl0eSYjODIyMTspIGlzIG5vdCBhbiBvZmZlciB0byBiZSBhY2NlcHRlZCBieSBwbGFjaW5nIGFuIG9yZGVyICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5HcmFpbmdlciB2IEdvdWdoPC9zcGFuPik8L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VG8gcHJldmVudCB0dXJuaW5nIGV4Y2VzcyBvcmRlcnMgaW50byBwb3RlbnRpYWwgc3VpdHMgZm9yIG5vbi1jb21wbGV0aW9uLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VHJpZXRlbCAoMi0wMTAgZm9vdG5vdGUpICZtZGFzaDsgZGlmZmVyZW50IGlmIG9ubHkgbWFkZSB0byBvbmUgaW5kaXZpZHVhbD88L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+UHJpY2VkIGdvb2RzIGluIHNob3Agd2luZG93cyBhcmUgaW52aXRhdGlvbnMgdG8gdHJlYXQgKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkZpc2hlciB2IEJlbGw8L3NwYW4+KS48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SWYgdGhleSB3ZXJlIG9mZmVycywgYSBzaG9wa2VlcGVyIGNvdWxkIG5vdCByZWZ1c2UgdG8gc2VydmUgeW91LCB0dXJmIHlvdSBvdXQgb2YgaGlzIHNob3AsIGV0Yy48L3NwYW4+PC9saT48L3VsPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlNlbGYtU2VydmljZTwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPkluIHNob3AsIG9mZmVyIG1hZGUgYnkgY3VzdG9tZXIgYXQgY2hlY2tvdXQsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJvb3RzIENhc2ggQ2hlbWlzdHM8L3NwYW4+LiAgVGlja2V0IG1hY2hpbmUgbWFrZXMgb2ZmZXIsIGNvaW5zIGFjY2VwdCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaG9ybnRvbiB2IFNob2UgTGFuZSBQYXJraW5nPC9zcGFuPi4gIENvbnRyYWN0IGNvbmNsdWRlZCBhdCBzdGFydCBvZiBwZXJmLCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaGFwbGV0b24gdiBCYXJyeTwvc3Bhbj4uPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5TaG9wczwvc3Bhbj48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+UHV0dGluZyBnb29kcyBpbiBiYXNrZXQgcHJlcGFyZXMgeW91IHRvIG1ha2UgYW4gb2ZmZXIgZm9yIHRoZW0gYXQgdGhlIGNoZWNrb3V0ICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Cb290cyBDYXNoIENoZW1pc3RzPC9zcGFuPikuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CdXQgaGF2aW5nIHNvbWUgY2hlZXNlIHNsaWNlZCBhbmQgd3JhcHBlZCB1cCBhdCB0aGUgY2hlZXNlIGNvdW50ZXIgbWF5IGJlIHRvIGhhdmUgY29uY2x1ZGVkIGEgY29udHJhY3QgdG8gcGF5IGZvciBpdC48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPk1hY2hpbmVzPC9zcGFuPjwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BIHRpY2tldCBtYWNoaW5lIG1ha2VzIHRoZSBvZmZlcjsgcHV0dGluZyBpbiBtb25leSBhY2NlcHRzIGl0ICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaG9ybnRvbiB2IFNob2UgTGFuZSBQYXJraW5nPC9zcGFuPikuPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5PdGhlciBBcnJhbmdlbWVudHM8L3NwYW4+PC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBhdmFpbGFiaWxpdHkgb2YgYSBzZXJ2aWNlIGZvciB3aGljaCBwYXltZW50IGlzIHBvdGVudGlhbGx5IHNvdWdodCBvbmx5IDxzcGFuIGNsYXNzPVwiaXRcIj5hZnRlcjwvc3Bhbj4gdXNlIG9mIHRoZSBzZXJ2aWNlIGhhcyBiZWd1biBpcyB0aGUgb2ZmZXI7IGJlZ2lubmluZyB0byB1c2UgdGhlIHNlcnZpY2UgYWNjZXB0cyBpdCAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2hhcGxldG9uIHYgQmFycnk8L3NwYW4+KS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPldlcmUgdGhlIGF2YWlsYWJpbGl0eSBvZiB0aGUgc2VydmljZSBtZXJlbHkgYW4gaW52aXRhdGlvbiB0byB0cmVhdCBhbmQgYmVnaW5uaW5nIHRvIHVzZSBpdCwgYW4gb2ZmZXIgb2ZmZXIsIGFjY2VwdGFuY2UgZm9yIHdoaWNoIHdhcyBjb2xsZWN0aW9uIG9mIHBheW1lbnQgdGhlIGFjY2VwdGFuY2UsIHRoZW4gcGF5bWVudCBmb3IgdGhlIHVzZSB1bnRpbCB0aGF0IHBvaW50IHdvdWxkIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGJlIGVuZm9yY2VhYmxlLjwvc3Bhbj48L2xpPjwvdWw+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+SW4gVW5pbGF0ZXJhbCBDb250cmFjdHM8L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiaXRcIj5Qcm9taXNlIG9mIHJld2FyZCBmb3IgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYW4gb2ZmZXIgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DYXJsaWxsPC9zcGFuPi48L3NwYW4+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkZvciBMYW5kPC9zcGFuPjxicj48c3BhbiBjbGFzcz1cIml0XCI+SW50ZW50aW9uIG5vdCBpbXB1dGVkIGxpZ2h0bHkgZm9yIGxhbmQgdHJ4IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhhcnZleSB2IEZhY2V5PC9zcGFuPi4gIFZhZ3VlbmVzcyBkZWZlYXRzIGZpbmRpbmcgaW50ZW50aW9uICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2xpZnRvbiB2IFBhbHVtYm88L3NwYW4+LiAgV29yZGluZyBvZiBkb2NzIGZ1bmRhbWVudGFsICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R2lic29uIHYgTWFuY2hlc3Rlcjwvc3Bhbj4uPC9zcGFuPjxicj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5FYWNoIHBpZWNlIG9mIGxhbmQgY29uc2lkZXJlZCB1bmlxdWUgJm1kYXNoOyB0aHJlc2hvbGQgZm9yIGltcHV0YXRpb24gb2YgaW50ZW50aW9uIHRvIGRlYWwgaW4gaXQgaXMgY29uc2VxdWVudGx5IGhpZ2guIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhhcnZleSB2IEZhY2V5PC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFzIHRoZSBzdW1zIGludm9sdmUgZ3Jvdywgc28gZG9lcyB0aGUgcHJlc3VtcHRpb24gdGhhdCB2YWd1ZW5lc3MgYW1vdW50cyB0byBpbnZpdGF0aW9uLCBub3Qgb2ZmZXIgYW5kIGFjY2VwdGFuY2UuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNsaWZ0b24gdiBQYWx1bWJvPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSB3b3JkaW5nIG9mIHRoZSBkb2N1bWVudHMgY2Fubm90IGJlIGlnbm9yZWQgaW4gZmF2b3VyIG9mIHRoZSBjb250ZXh0LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5HaWJzb24gdiBNYW5jaGVzdGVyPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5JbiBBdWN0aW9uczwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPkJpZCBpcyBvZmZlciwgZ2F2ZWwgYWNjZXB0YW5jZSAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBheW5lIHYgQ2F2ZTwvc3Bhbj4uICBBZCBmb3IgYXVjdGlvbiB3L28gcmVzZXJ2ZSwgdW5pbGF0ZXJhbCBvZmZlcjsgaGlnaGVzdCBiaWQsIGFjY2VwdGFuY2UgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5XYXJsb3cgdiBIYXJyaXNvbjwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhcnJpZSB2IERhdmllczwvc3Bhbj4uIDwvc3Bhbj48YnI+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+UGxhY2luZyBhIGJpZCBpcyBtYWtpbmcgYW4gb2ZmZXIuIEl0IGlzIGFjY2VwdGVkIHdoZW4gdGhlIGdhdmVsIGNvbWVzIGRvd24sIGFuZCB1bnRpbCB0aGVuLCBjYW4gdmFsaWRseSBiZSB3aXRoZHJhd24gKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBheW5lIHYgQ2F2ZTwvc3Bhbj4pLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIGFubm91bmNlbWVudCBvZiBhIHNhbGUgYnkgYXVjdGlvbiB0byB0aGUgaGlnaGVzdCBiaWRkZXIgPHNwYW4gY2xhc3M9XCJpdFwiPndpdGhvdXQgcmVzZXJ2ZTwvc3Bhbj4gaXMgYSB1bmlsYXRlcmFsIG9mZmVyLCBhY2NlcHRhbmNlIGZvciB3aGljaCBjb21lcyBpbiB0aGUgcGxhY2luZyBvZiB0aGUgaGlnaGVzdCBiaWQgKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPldhcmxvdyB2IEhhcnJpc29uPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmFycmllIHYgRGF2aWVzPC9zcGFuPikuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5XaXRob3V0IHN1Y2ggYSBzdGlwdWxhdGlvbiwgYW4gYWR2ZXJ0IGZvciBzcGVjaWZpYyBnb29kcyB0byBiZSBzb2xkIGF0IGF1Y3Rpb24gaXMgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdDwvc3Bhbj4gYSB1bmlsYXRlcmFsIG9mZmVyICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IYXJyaXMgdiBOaWNrZXJzb248L3NwYW4+KS48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+U28gYXMgdG8gYWxsb3cgdGhlbSB0byBiZSB3aXRoZHJhd24gZnJvbSBzYWxlIHdpdGhvdXQgbWFraW5nIHRoZSBhdWN0aW9uZWVyIGxpYWJsZSBmb3IgdHJhdmVsIGV4cGVuc2VzIG9mIGFsbCB0aG9zZSB3aG8gY2FtZSBieSByZWFzb24gb2YgYWR2ZXJ0Ljwvc3Bhbj48L2xpPjwvdWw+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+SW4gVGVuZGVyczwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPkludml0YXRpb25zIHRvIHRyZWF0LCB1bmxlc3MgcHJvbWlzZSB0byBzZWxsIHRvIGhpZ2hlc3QgYmlkZGVyICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U3BlbmNlciB2IEhhcmRpbmc8L3NwYW4+LiAgQ29uZGl0aW9ucyBtYXkgbWVhbiB1bmlsYXRlcmFsIG9mZmVyIHRvIGNvbnNpZGVyICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmxhY2twb29sIGFuZCBGeWxkZTwvc3Bhbj4uICBCaWQgcmVmZXJlbmNpbmcgb3RoZXIgYmlkIGludmFsaWQgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IYXJ2ZWxsYTwvc3Bhbj4uPC9zcGFuPjxicj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JbnZpdGF0aW9ucyB0byBzdWJtaXQgYmlkcyBhcmUgaW52aXRhdGlvbnMgdG8gdHJlYXQsIHVubGVzcyB0aGV5IGV2aW5jZSBpbnRlbnRpb24gdG8gc2VsbCB0byB0aGUgaGlnaGVzdCAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U3BlbmNlciB2IEhhcmRpbmc8L3NwYW4+KS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlNob3VsZCBjb21wbGV4IGNvbmRpdGlvbnMgYmUgcGxhY2VkIG9uIHRoZSBiaWRzIHRvIGJlIHN1Ym1pdHRlZCwgc3VjaCBhbiBpbnZpdGF0aW9uIG1heSBiZSBhIHVuaWxhdGVyYWwgb2ZmZXIgdG8gb3BlbiBhbmQgZXhhbWluZSBzdWNoIGJpZHMgKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJsYWNrcG9vbCBhbmQgRnlsZGU8L3NwYW4+KS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkEgc2VhbGVkIGJpZCBpbiB0ZXJtcyBvZiBhbm90aGVyIHNlYWxlZCBiaWQgZnVuZGFtZW50YWxseSB1bmRlcm1pbmVzIHRoZSBpZGVhIG9mIHNlYWxlZCBiaWRzLCBhbmQgc28gaXMgaW52YWxpZC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SGFydmVsbGEgdiBSb3lhbCBUcnVzdCBvZiBDYW5hZGE8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJOVU1CRVIiOiAiMSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiT2ZmZXJzIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJPZmZlcnMgJm1kYXNoOyBPYmplY3RpdmUgRGV0ZXJtaW5hdGlvbiBvZiBJbnRlbnRpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNod2VlIEtpbiBLb25nIHYgRGlnaWxhbmRNYWxsLmNvbSIsCiAgICAgICAgIlJvc2UgdiBQaW0iLAogICAgICAgICJDZW50cm92aW5jaWFsIHYgTWVyY2hhbnQgSW52ZXN0b3JzIiwKICAgICAgICAiSGFydG9nIHYgQ29saW4gJiBTaGllbGRzIiwKICAgICAgICAiQ2hhcGVsdG9uIHYgQmFycnkiLAogICAgICAgICJQYXJ0cmlkZ2UgdiBDcml0dGVuZGVuIiwKICAgICAgICAiV2FybG93IHYgSGFycmlzb24iLAogICAgICAgICJCb290cyBDYXNoIENoZW1pc3RzIiwKICAgICAgICAiQ2xpZnRvbiB2IFBhbHVtYm8iLAogICAgICAgICJHcmFpbmdlciB2IEdvdWdoIiwKICAgICAgICAiQmFycnkgdiBEYXZpZXMiLAogICAgICAgICJIYXJ2ZWxhIHYgUm95YWwgVHJ1c3Qgb2YgQ2FuYWRhIgogICAgXSwKICAgICJOVU1CRVIiOiAiMiIsCiAgICAiWUVBUiI6ICIxODcxIiwKICAgICJOQU1FIjogIlNtaXRoIHYgSHVnaGVzIiwKICAgICJDSVRBVElPTiI6ICJTbWl0aCB2IEh1Z2hlcyAoMTg3MSkgTFIgNiBRQiA1OTciLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk9mZmVycyIsCiAgICAgICAgIk9iamVjdGl2ZSBEZXRlcm1pbmF0aW9uIG9mIEludGVudGlvbiIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiUGFydGllcyB0byBhIGNvbnRyYWN0IGFyZSBkZWVtZWQgdG8gaGF2ZSBjb250cmFjdGVkIHVuZGVyIHRlcm1zIHRoYXQgY2FuIGJlIG9iamVjdGl2ZWx5IGRldGVybWluZWQsIHJhdGhlciB0aGFuIGFjY29yZGluZyB0byB0aGVpciBzdWJqZWN0aXZlIGJlbGllZnMuICBBbiBvZmZlcm9yJiM4MjE3O3MgbWlzdGFrZW4gYXNzdW1wdGlvbiBhYm91dCBhbiBhdHRyaWJ1dGUgb2YgdGhlIHN1YmplY3QgbWF0dGVyIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IHN0aXB1bGF0ZWQgaW4gdGhlIHRlcm1zIGRvZXMgbm90IGdpdmUgYSBnb29kIGNhdXNlIG9mIGFjdGlvbiwgZXZlbiBzaG91bGQgdGhlIG9mZmVyZWUga25vdyBvZiB0aGUgb3RoZXIgcGFydHkmIzgyMTc7cyBtaXN0YWtlbiBhc3N1bXB0aW9uLiAoU2hvdWxkIHRoZSBtaXN0YWtlbiBhc3N1bXB0aW9uIGNvbmNlcm4gYW4gYXR0cmlidXRlIG9mIHRoZSBzdWJqZWN0IG1hdHRlciA8c3BhbiBjbGFzcz1cIml0XCI+cHJvdmlkZWQgZm9yIGJ5IHRoZSB0ZXJtczwvc3Bhbj4sIG9uIHRoZSBvdGhlciBoYW5kLCB0aGUgb2ZmZXJlZSYjODIxNztzIGFjY2VwdGFuY2Ugd2lsbCBub3QgYmUgdmFsaWQsIHNlZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IYXJ0b2c8L3NwYW4+LikiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIk9mZmVycyAmbWRhc2g7IE9iamVjdGl2ZSBEZXRlcm1pbmF0aW9uIG9mIEludGVudGlvbiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2h3ZWUgS2luIEtvbmcgdiBEaWdpbGFuZE1hbGwuY29tIiwKICAgICAgICAiQ2VudHJvdmluY2lhbCB2IE1lcmNoYW50IEludmVzdG9ycyIsCiAgICAgICAgIkhhcnRvZyB2IENvbGluICYgU2hpZWxkcyIsCiAgICAgICAgIlNtaXRoIHYgSHVnaGVzIiwKICAgICAgICAiR2lic29uIHYgTWFuY2hlc3RlciIsCiAgICAgICAgIkhhcnZleSB2IEZhY2V5IiwKICAgICAgICAiQmxhY2twb29sIGFuZCBGeWxkZSIsCiAgICAgICAgIkNhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiLAogICAgICAgICJCb290cyBDYXNoIENoZW1pc3RzIiwKICAgICAgICAiRmlzaGVyIHYgQmVsbCIsCiAgICAgICAgIlBhcnRyaWRnZSB2IENyaXR0ZW5kZW4iLAogICAgICAgICJTcGVuY2VyIHYgSGFyZGluZyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjMiLAogICAgIllFQVIiOiAiMTk1MyIsCiAgICAiTkFNRSI6ICJSb3NlIHYgUGltIiwKICAgICJDSVRBVElPTiI6ICJSb3NlIHYgUGltIFsxOTUzXSAyUUIgNDUwIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJPZmZlcnMiLAogICAgICAgICJPYmplY3RpdmUgRGV0ZXJtaW5hdGlvbiBvZiBJbnRlbnRpb24iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkZldmVzLCBmZXZlcm9sZXMgYW5kIGZldmV0dGVzLiIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQW4gb2ZmZXJvciB3aG8gdGFrZXMgYmFkIGFkdmljZSwgb24gdGhlIGJhc2lzIG9mIHdoaWNoIG1ha2VzIGFuIGluY29ycmVjdCBhc3N1bXB0aW9uIGFib3V0IGFuIGF0dHJpYnV0ZSBvZiB0aGUgc3ViamVjdCBtYXR0ZXIgZm9yIHdoaWNoIG5vIGNvbnRyYWN0dWFsIHRlcm0gcHJvdmlkZXMsIGRvZXMgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdDwvc3Bhbj4gaGF2ZSBhIGNhdXNlIG9mIGFjdGlvbiBhZ2FpbnN0IHRoZSBwYXJ0eSB3aG8gZ2F2ZSB0aGUgYWR2aWNlLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiT2ZmZXJzICZtZGFzaDsgT2JqZWN0aXZlIERldGVybWluYXRpb24gb2YgSW50ZW50aW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDaHdlZSBLaW4gS29uZyB2IERpZ2lsYW5kTWFsbC5jb20iLAogICAgICAgICJSb3NlIHYgUGltIiwKICAgICAgICAiU21pdGggdiBIdWdoZXMiLAogICAgICAgICJDZW50cm92aW5jaWFsIHYgTWVyY2hhbnQgSW52ZXN0b3JzIiwKICAgICAgICAiRmlzaGVyIHYgQmVsbCIsCiAgICAgICAgIlBheW5lIHYgQ2F2ZSIsCiAgICAgICAgIkhhcnZleSB2IEZhY2V5IiwKICAgICAgICAiU3BlbmNlciB2IEhhcmRpbmciLAogICAgICAgICJDbGlmdG9uIHYgUGFsdW1ibyIsCiAgICAgICAgIkdyYWluZ2VyIHYgR291Z2giLAogICAgICAgICJHaWJzb24gdiBNYW5jaGVzdGVyIiwKICAgICAgICAiQmFycnkgdiBEYXZpZXMiCiAgICBdLAogICAgIllFQVIiOiAiMTkzOSIsCiAgICAiTlVNQkVSIjogIjQiLAogICAgIkFLQSI6ICJIYXJ0b2ciLAogICAgIk5BTUUiOiAiSGFydG9nIHYgQ29saW4gJiBTaGllbGRzIiwKICAgICJDSVRBVElPTiI6ICJIYXJ0b2cgdiBDb2xpbiAmYW1wOyBTaGllbGRzIFsxOTM5XSBBbGwgRVIgNTY2IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJPZmZlcnMiLAogICAgICAgICJPYmplY3RpdmUgRGV0ZXJtaW5hdGlvbiBvZiBJbnRlbnRpb24iCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRoZSBBcmdlbnRpbmlhbiBoYXJlIHNraW5zIGNhc2UuIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBIHRlcm0gb2YgYW4gb2ZmZXIgbWFkZSBpbiBlcnJvciwgaGF2aW5nIHRoZSBlZmZlY3Qgb2Ygc2tld2luZyB0aGUgYmFyZ2FpbiBjb25zaWRlcmFibHkgaW4gZmF2b3VyIG9mIHRoZSBvZmZlcmVlLCB3aWxsIG5vdCBiZSBoZWxkIHRvIGJlIHZhbGlkLCBzaG91bGQgdGhlIG9mZmVyZWUgc25hcCBpdCB1cCwga25vd2luZyBvciBzdHJvbmdseSBzdXNwZWN0aW5nIHRoZSBvZmZlcm9yJiM4MjE3O3MgbWlzdGFrZSA8c3BhbiBjbGFzcz1cIml0XCI+YXMgdG8gYSB0ZXJtPC9zcGFuPi4gQ2YuIHNpdHVhdGlvbiBpbiB3aGljaCBtaXN0YWtlIGlzIGFzIHRvIDxzcGFuIGNsYXNzPVwiYmRcIj5hc3N1bXB0aW9uPC9zcGFuPiBmb3Igd2hpY2ggdGhlcmUgaXMgbm8gdGVybS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiLAogICAgICAgICJUcmVpdGVsIiwKICAgICAgICAiTWNLZW5kcmljayIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiQ2VudHJvdmluY2lhbCBFc3RhdGVzIHYgTWVyY2hhbnQgSW52ZXN0b3JzIEFzc3VyYW5jZSBDb21wYW55IEx0ZCBbMTk4M10gQ29tIExSIDE1OCIsCiAgICAiTkFNRSI6ICJDZW50cm92aW5jaWFsIHYgTWVyY2hhbnQgSW52ZXN0b3JzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDaHdlZSBLaW4gS29uZyB2IERpZ2lsYW5kTWFsbC5jb20iLAogICAgICAgICJIYXJ0b2cgdiBDb2xpbiAmIFNoaWVsZHMiLAogICAgICAgICJTbWl0aCB2IEh1Z2hlcyIsCiAgICAgICAgIlJvc2UgdiBQaW0iLAogICAgICAgICJIYXJ2ZXkgdiBGYWNleSIsCiAgICAgICAgIldhcmxvdyB2IEhhcnJpc29uIiwKICAgICAgICAiSGFydmVsYSB2IFJveWFsIFRydXN0IG9mIENhbmFkYSIsCiAgICAgICAgIkJvb3RzIENhc2ggQ2hlbWlzdHMiLAogICAgICAgICJDbGlmdG9uIHYgUGFsdW1ibyIsCiAgICAgICAgIkdpYnNvbiB2IE1hbmNoZXN0ZXIiLAogICAgICAgICJDaGFwZWx0b24gdiBCYXJyeSIsCiAgICAgICAgIlBheW5lIHYgQ2F2ZSIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiT2ZmZXJzIiwKICAgICAgICAiT2JqZWN0aXZlIERldGVybWluYXRpb24gb2YgSW50ZW50aW9uIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBIG1pc3Rha2UgaW4gdGhlIHRlcm1zIG9mIGFuIG9mZmVyLCBvZiB3aGljaCBpdCB3b3VsZCBiZSByZWFzb25hYmxlIHNheSB0aGUgb2ZmZXJlZSBtdXN0IGhhdmUgcmVhbGlzZWQgd2FzIGEgbWlzdGFrZSwgd2lsbCBuZWdhdGl2ZSBjb25zZW5zdXMgYWQgaWRlbSBhbmQgdm9pZGluZyB0aGUgY29udHJhY3QuIEhvd2V2ZXIsIGFzIHRoaXMgaXMgYSBtYXR0ZXIgb2YgZmFjdCB0byBiZSBlc3RhYmxpc2hlZCBpbiBjb3VydCwgYW5kIGFuIGFwcGxpY2F0aW9uIGZvciBzdW1tYXJ5IGp1ZGdtZW50IG9uIHN1Y2ggZ3JvdW5kcyB3aWxsIHRoZXJlZm9yZSBmYWlsLiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiT2ZmZXJzICZtZGFzaDsgT2JqZWN0aXZlIERldGVybWluYXRpb24gb2YgSW50ZW50aW9uIiwKICAgICJOVU1CRVIiOiAiNSIsCiAgICAiWUVBUiI6ICIxOTgzIgp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJCeSBjb250cmFzdCB0byBlYXJsaWVyIGNhc2VzIGluIHdoaWNoIHRoZSBtb3JhbGl0eSBvZiBhbiBvZmZlcmVlJiM4MjE3O3MgdGFraW5nIGFkdmFudGFnZSBvZiBhbiBvZmZlcm9yJiM4MjE3O3MgbWlzdGFrZSwgYWJvdXQgd2hpY2ggaGUga25ldyBvciBjb3VsZCBiZSBzYWlkIHRvIGhhdmUga25vd24sIHdhcyBvZiBuZWdsaWdpYmxlIGltcG9ydGFuY2UsIHRoZSB1bmNvbnNjaW9uYWJsZSAmIzgyMjA7aW5kZWNlbnQgaGFzdGUmIzgyMjE7IG9mIHRob3NlIGFjY2VwdGluZyBzdWNoIG9mZmVycyAmIzgyMjA7aW4gdGhlIGRlYWQgb2YgbmlnaHQmIzgyMjE7IG1heSBiZSBvZiBtb3JlIHJlbGV2YW5jZSB0byBzbmFwcGluZy11cCBjYXNlcyBpbiBtb2Rlcm4gdGltZXMuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJPZmZlcnMgJm1kYXNoOyBPYmplY3RpdmUgRGV0ZXJtaW5hdGlvbiBvZiBJbnRlbnRpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNlbnRyb3ZpbmNpYWwgdiBNZXJjaGFudCBJbnZlc3RvcnMiLAogICAgICAgICJTbWl0aCB2IEh1Z2hlcyIsCiAgICAgICAgIlJvc2UgdiBQaW0iLAogICAgICAgICJIYXJ0b2cgdiBDb2xpbiAmIFNoaWVsZHMiLAogICAgICAgICJHcmFpbmdlciB2IEdvdWdoIiwKICAgICAgICAiQm9vdHMgQ2FzaCBDaGVtaXN0cyIsCiAgICAgICAgIkNsaWZ0b24gdiBQYWx1bWJvIiwKICAgICAgICAiQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIlNwZW5jZXIgdiBIYXJkaW5nIiwKICAgICAgICAiSGFycmlzIHYgTmlja2Vyc2VuIiwKICAgICAgICAiUGFydHJpZGdlIHYgQ3JpdHRlbmRlbiIsCiAgICAgICAgIlRob3JudG9uIHYgU2hvZSBMYW5lIFBhcmtpbmciCiAgICBdLAogICAgIllFQVIiOiAiMjAwNCIsCiAgICAiTlVNQkVSIjogIjYiLAogICAgIkFLQSI6ICJEaWdpbGFuZE1hbGwuY29tIiwKICAgICJOQU1FIjogIkNod2VlIEtpbiBLb25nIHYgRGlnaWxhbmRNYWxsLmNvbSIsCiAgICAiQ0lUQVRJT04iOiAiQ2h3ZWUgS2luIEtvbmcgdiBEaWdpTGFuZE1hbGwuY29tIFsyMDA0XSBTR0hDIDcxIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJPZmZlcnMiLAogICAgICAgICJPYmplY3RpdmUgRGV0ZXJtaW5hdGlvbiBvZiBJbnRlbnRpb24iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIk9mZmVycyAmbWRhc2g7IERpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0ICZtZGFzaDsgR2VuZXJhbGx5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDaGFwZWx0b24gdiBCYXJyeSIsCiAgICAgICAgIkJvb3RzIENhc2ggQ2hlbWlzdHMiLAogICAgICAgICJGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiR3JhaW5nZXIgdiBHb3VnaCIsCiAgICAgICAgIlRob3JudG9uIHYgU2hvZSBMYW5lIFBhcmtpbmciLAogICAgICAgICJXYXJsb3cgdiBIYXJyaXNvbiIsCiAgICAgICAgIkNsaWZ0b24gdiBQYWx1bWJvIiwKICAgICAgICAiSGFydmVsYSB2IFJveWFsIFRydXN0IG9mIENhbmFkYSIsCiAgICAgICAgIkhhcnZleSB2IEZhY2V5IiwKICAgICAgICAiSGFycmlzIHYgTmlja2Vyc2VuIiwKICAgICAgICAiR2lic29uIHYgTWFuY2hlc3RlciIsCiAgICAgICAgIlNwZW5jZXIgdiBIYXJkaW5nIgogICAgXSwKICAgICJOVU1CRVIiOiAiNyIsCiAgICAiWUVBUiI6ICIxOTY4IiwKICAgICJOQU1FIjogIlBhcnRyaWRnZSB2IENyaXR0ZW5kZW4iLAogICAgIkNJVEFUSU9OIjogIlBhcnRyaWRnZSB2IENyaXR0ZW5kZW4gWzE5NjhdIDEgV0xSIDEyMDQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk9mZmVycyIsCiAgICAgICAgIkRpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0IiwKICAgICAgICAiR2VuZXJhbGx5IgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBbiBhZHZlcnQgaW4gYSBuZXdzcGFwZXIgd2l0aCBhIGJyaWVmIGRlc2NyaXB0aW9uIGFuZCBhIHByaWNlIGlzIGFuIGludml0YXRpb24gdG8gdHJlYXQsIG5vdCBhbiBvZmZlci4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIk9mZmVycyAmbWRhc2g7IERpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0ICZtZGFzaDsgR2VuZXJhbGx5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDaGFwZWx0b24gdiBCYXJyeSIsCiAgICAgICAgIlRob3JudG9uIHYgU2hvZSBMYW5lIFBhcmtpbmciLAogICAgICAgICJCb290cyBDYXNoIENoZW1pc3RzIiwKICAgICAgICAiUGFydHJpZGdlIHYgQ3JpdHRlbmRlbiIsCiAgICAgICAgIkdyYWluZ2VyIHYgR291Z2giLAogICAgICAgICJDbGlmdG9uIHYgUGFsdW1ibyIsCiAgICAgICAgIkhhcnZleSB2IEZhY2V5IiwKICAgICAgICAiSGFycmlzIHYgTmlja2Vyc2VuIiwKICAgICAgICAiQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIlBheW5lIHYgQ2F2ZSIsCiAgICAgICAgIlNwZW5jZXIgdiBIYXJkaW5nIiwKICAgICAgICAiQmFycnkgdiBEYXZpZXMiCiAgICBdLAogICAgIk5VTUJFUiI6ICI4IiwKICAgICJZRUFSIjogIjE5NjEiLAogICAgIk5BTUUiOiAiRmlzaGVyIHYgQmVsbCIsCiAgICAiQ0lUQVRJT04iOiAiRmlzaGVyIHYgQmVsbCBbMTk2MV0gMSBRQiAzOTQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk9mZmVycyIsCiAgICAgICAgIkRpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0IiwKICAgICAgICAiR2VuZXJhbGx5IgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBIGRpc3BsYXkgaW4gYSBzaG9wIHdpbmRvdyBpcyBhbiBpbnZpdGF0aW9uIHRvIHRyZWF0LCBub3QgYW4gb2ZmZXIuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiS2V5IgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJPZmZlcnMgJm1kYXNoOyBEaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCAmbWRhc2g7IEdlbmVyYWxseSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2hhcGVsdG9uIHYgQmFycnkiLAogICAgICAgICJCb290cyBDYXNoIENoZW1pc3RzIiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgUGFya2luZyIsCiAgICAgICAgIlBhcnRyaWRnZSB2IENyaXR0ZW5kZW4iLAogICAgICAgICJGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiV2FybG93IHYgSGFycmlzb24iLAogICAgICAgICJCbGFja3Bvb2wgYW5kIEZ5bGRlIiwKICAgICAgICAiUGF5bmUgdiBDYXZlIiwKICAgICAgICAiSGFydmV5IHYgRmFjZXkiLAogICAgICAgICJIYXJyaXMgdiBOaWNrZXJzZW4iLAogICAgICAgICJIYXJ2ZWxhIHYgUm95YWwgVHJ1c3Qgb2YgQ2FuYWRhIiwKICAgICAgICAiU3BlbmNlciB2IEhhcmRpbmciCiAgICBdLAogICAgIk5VTUJFUiI6ICI5IiwKICAgICJZRUFSIjogIjE4OTYiLAogICAgIk5BTUUiOiAiR3JhaW5nZXIgdiBHb3VnaCIsCiAgICAiQ0lUQVRJT04iOiAiR3JhaW5nZXIgJmFtcDsgU29ucyB2IEdvdWdoIChTdXJ2ZXlvciBvZiBUYXhlcykgWzE4OTZdIEFDIDg1IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJPZmZlcnMiLAogICAgICAgICJEaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCIsCiAgICAgICAgIkdlbmVyYWxseSIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBwdWJsaXNoZWQgcHJpY2UgbGlzdCBpcyBhbiBpbnZpdGF0aW9uIHRvIHRyZWF0LCBub3QgYW4gb2ZmZXIgJm1kYXNoOyBmb3IgdGhlIHNvbGlkIGNvbW1lcmNpYWwgcmVhc29uIG9mIG5vdCB0dXJuaW5nIHVuZnVsZmlsbGFibGUgb3JkZXJzIGludG8gbGF3c3VpdHMgZm9yIG5vbi1jb21wbGV0aW9uLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIlRyZWl0ZWwiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIk9mZmVycyAmbWRhc2g7IERpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0ICZtZGFzaDsgR2VuZXJhbGx5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiQ2hhcGVsdG9uIHYgQmFycnkiLAogICAgICAgICJQYXJ0cmlkZ2UgdiBDcml0dGVuZGVuIiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgUGFya2luZyIsCiAgICAgICAgIkdyYWluZ2VyIHYgR291Z2giLAogICAgICAgICJTcGVuY2VyIHYgSGFyZGluZyIsCiAgICAgICAgIldhcmxvdyB2IEhhcnJpc29uIiwKICAgICAgICAiQ2xpZnRvbiB2IFBhbHVtYm8iLAogICAgICAgICJCbGFja3Bvb2wgYW5kIEZ5bGRlIiwKICAgICAgICAiR2lic29uIHYgTWFuY2hlc3RlciIsCiAgICAgICAgIkNhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiLAogICAgICAgICJQYXluZSB2IENhdmUiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMCIsCiAgICAiWUVBUiI6ICIxOTUzIiwKICAgICJOQU1FIjogIkJvb3RzIENhc2ggQ2hlbWlzdHMiLAogICAgIkNJVEFUSU9OIjogIlBoYXJtYWNldXRpY2FsIFNvY2lldHkgb2YgR3JlYXQgQnJpdGFpbiB2IEJvb3RzIENhc2ggQ2hlbWlzdHMgKFNvdXRoZXJuKSBMdGQgWzE5NTNdIDEgUUIgNDAxIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJPZmZlcnMiLAogICAgICAgICJEaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCIsCiAgICAgICAgIkdlbmVyYWxseSIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGFraW5nIGdvb2RzIG9mZiBzaGVsdmVzIGFuZCBwbGFjaW5nIHRoZW0gaW4geW91ciBiYXNrZXQgaXMgdG8gcHJlcGFyZSB0byBtYWtlIGFuIG9mZmVyIHRvIGJ1eSB0aGVtIGF0IHRoZSBjaGVja291dC4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIk9mZmVycyAmbWRhc2g7IERpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0ICZtZGFzaDsgR2VuZXJhbGx5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiUGFydHJpZGdlIHYgQ3JpdHRlbmRlbiIsCiAgICAgICAgIkJvb3RzIENhc2ggQ2hlbWlzdHMiLAogICAgICAgICJHcmFpbmdlciB2IEdvdWdoIiwKICAgICAgICAiQ2hhcGVsdG9uIHYgQmFycnkiLAogICAgICAgICJDbGlmdG9uIHYgUGFsdW1ibyIsCiAgICAgICAgIlNwZW5jZXIgdiBIYXJkaW5nIiwKICAgICAgICAiQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIkJhcnJ5IHYgRGF2aWVzIiwKICAgICAgICAiSGFycmlzIHYgTmlja2Vyc2VuIiwKICAgICAgICAiSGFydmV5IHYgRmFjZXkiLAogICAgICAgICJHaWJzb24gdiBNYW5jaGVzdGVyIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTEiLAogICAgIllFQVIiOiAiMTk3MSIsCiAgICAiTkFNRSI6ICJUaG9ybnRvbiB2IFNob2UgTGFuZSBQYXJraW5nIiwKICAgICJDSVRBVElPTiI6ICJUaG9ybnRvbiB2IFNob2UgTGFuZSBQYXJraW5nIFsxOTcxXSAyIFFCIDE2MyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiT2ZmZXJzIiwKICAgICAgICAiRGlzdGluZ3Vpc2hlZCBmcm9tIEludml0YXRpb24gdG8gVHJlYXQiLAogICAgICAgICJHZW5lcmFsbHkiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIldoZW4gYSBtYWNoaW5lcyBkaXNwZW5zZXMgdGlja2V0cyBpbiBleGNoYW5nZSBmb3IgbW9uZXksIHRoZSBtYWNoaW5lIG1ha2VzIHRoZSBvZmZlciwgd2hpY2ggaXMgYWNjZXB0ZWQgYnkgdGhlIHB1dHRpbmcgaW4gb2YgbW9uZXkuIFRlcm1zIGluY29ycG9yYXRlZCBhZnRlcndhcmRzLCBzdWNoIGFzIHByaW50ZWQgb24gdGhlIHRpY2tldCwgYXJlIG5vdCB2YWxpZGx5IGluY29ycG9yYXRlZC4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiLAogICAgICAgICJEZW5uaW5nIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJPZmZlcnMgJm1kYXNoOyBEaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCAmbWRhc2g7IEdlbmVyYWxseSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiR3JhaW5nZXIgdiBHb3VnaCIsCiAgICAgICAgIlBhcnRyaWRnZSB2IENyaXR0ZW5kZW4iLAogICAgICAgICJGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiQm9vdHMgQ2FzaCBDaGVtaXN0cyIsCiAgICAgICAgIlRob3JudG9uIHYgU2hvZSBMYW5lIFBhcmtpbmciLAogICAgICAgICJTcGVuY2VyIHYgSGFyZGluZyIsCiAgICAgICAgIkhhcnZleSB2IEZhY2V5IiwKICAgICAgICAiR2lic29uIHYgTWFuY2hlc3RlciIsCiAgICAgICAgIkNhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiLAogICAgICAgICJDbGlmdG9uIHYgUGFsdW1ibyIsCiAgICAgICAgIkJhcnJ5IHYgRGF2aWVzIiwKICAgICAgICAiSGFycmlzIHYgTmlja2Vyc2VuIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTIiLAogICAgIllFQVIiOiAiMTk0MCIsCiAgICAiTkFNRSI6ICJDaGFwZWx0b24gdiBCYXJyeSIsCiAgICAiQ0lUQVRJT04iOiAiQ2hhcGVsdG9uIHYgQmFycnkgVXJiYW4gRGlzdHJpY3QgQ291bmNpbCBbMTk0MF0gMSBLQiA1MzIiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk9mZmVycyIsCiAgICAgICAgIkRpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0IiwKICAgICAgICAiR2VuZXJhbGx5IgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJJbiBhcnJhbmdlbWVudHMgd2hlcmUgaXQgbWF5IG5vdCBjb21lIHRvIHRoZSBhdHRlbnRpb24gb2YgdGhlIHByb3ZpZGVyIG9mIGEgc2VydmljZSB0aGF0IHRoZSBzZXJ2aWNlIGlzIGJlaW5nIHVzZWQgdW50aWwgPHNwYW4gY2xhc3M9XCJpdFwiPmFmdGVyPC9zcGFuPiB0aGF0IHBlcmZvcm1hbmNlIGJlZ2lucywgdGhlIGNvbnRyYWN0IGlzIG5ldmVydGhlbGVzcyBjb25jbHVkZWQgd2hlbiB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIHNlcnZpY2UgPHNwYW4gY2xhc3M9XCJpdFwiPmJlZ2luczwvc3Bhbj4sIGFuZCBub3QgYXQgdGhlIHBvaW50IHdoZXJlIHBheW1lbnQgaXMgc291Z2h0LiBUaGUgYXZhaWxhYmlsaXR5IG9mIHRoZSBzZXJ2aWNlIGNvbnN0aXR1dGVzIHRoZSBvZmZlciwgdGhlIGFjdCBvZiBiZWdpbm5pbmcgdG8gdXNlIGl0LCB0aGUgYWNjZXB0YW5jZS4gVGVybXMgbWF5IG5vdCBvcmRpbmFyaWx5IGJlIGluY29ycG9yYXRlZCwgdGhlcmVmb3JlLCB3aGVuIHBheW1lbnQgaXMgc291Z2h0LiIsCiAgICAgICAgIklmIHRoZSBhdmFpbGFiaWxpdHkgb2YgdGhlIHNlcnZpY2Ugd2VyZSBtZXJlbHkgYW4gaW52aXRhdGlvbiB0byB0cmVhdCwgYW5kIHRoZSBhY3Qgb2YgYmVnaW5uaW5nIHRvIHVzZSBpdCBjb25zdGl0dXRlZCB0aGUgb2ZmZXIsIGFjY2VwdGVkIGJ5IHRoZSBjb2xsZWN0aW9uIG9mIHBheW1lbnQsIHRoZSB1c2VyIHdvdWxkIHJldGFpbiBsb2N1cyBwb2VuaXRlbnRpYWUgdW50aWwgdGhhdCBwb2ludC4gVGhpcyBhbmFseXNpcyB3b3VsZCBtaWxpdGF0ZSBhZ2FpbnN0IHN1Y2ggYXJyYW5nZW1lbnRzIGZvciBwcm92aWRpbmcgc2VydmljZXMuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiS2V5IgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJPZmZlcnMgJm1kYXNoOyBEaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCAmbWRhc2g7IEluIFVuaWxhdGVyYWwgQ29udHJhY3RzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiUGFydHJpZGdlIHYgQ3JpdHRlbmRlbiIsCiAgICAgICAgIkhhcnZleSB2IEZhY2V5IiwKICAgICAgICAiQ2hhcGVsdG9uIHYgQmFycnkiLAogICAgICAgICJCb290cyBDYXNoIENoZW1pc3RzIiwKICAgICAgICAiSGFydmVsYSB2IFJveWFsIFRydXN0IG9mIENhbmFkYSIsCiAgICAgICAgIlNwZW5jZXIgdiBIYXJkaW5nIiwKICAgICAgICAiQmxhY2twb29sIGFuZCBGeWxkZSIsCiAgICAgICAgIkNsaWZ0b24gdiBQYWx1bWJvIiwKICAgICAgICAiUGF5bmUgdiBDYXZlIiwKICAgICAgICAiQmFycnkgdiBEYXZpZXMiLAogICAgICAgICJHcmFpbmdlciB2IEdvdWdoIgogICAgXSwKICAgICJZRUFSIjogIjE4OTMiLAogICAgIk5VTUJFUiI6ICIxMyIsCiAgICAiQUtBIjogIkNhcmxpbGwiLAogICAgIk5BTUUiOiAiQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAiQ0lUQVRJT04iOiAiQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSBbMTg5M10gMSBRQiAyNTYiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk9mZmVycyIsCiAgICAgICAgIkRpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0IiwKICAgICAgICAiSW4gVW5pbGF0ZXJhbCBDb250cmFjdHMiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFuIGFkdmVydGlzZW1lbnQgcHJvbWlzaW5nIGEgcmV3YXJkIGZvciB0aGUgcGVyZm9ybWFuY2Ugb2YgYSBzcGVjaWZpYyBhY3Rpb24gaXMgbm90IGEgcHVmZiBub3IgYW4gaW52aXRhdGlvbiB0byB0cmVhdCwgYnV0IGEgdW5pbGF0ZXJhbCBjb250cmFjdCwgYmluZGluZyBvbiB0aGUgcGFydGllcyBvbiB2YWxpZCBwZXJmb3JtYW5jZSBhcyBzdGlwdWxhdGVkLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiSGFydmV5IHYgRmFjZXkgWzE4OTNdIEFDIDU1MiIsCiAgICAiTkFNRSI6ICJIYXJ2ZXkgdiBGYWNleSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiR2lic29uIHYgTWFuY2hlc3RlciIsCiAgICAgICAgIkNsaWZ0b24gdiBQYWx1bWJvIiwKICAgICAgICAiSGFycmlzIHYgTmlja2Vyc2VuIiwKICAgICAgICAiV2FybG93IHYgSGFycmlzb24iLAogICAgICAgICJQYXluZSB2IENhdmUiLAogICAgICAgICJTcGVuY2VyIHYgSGFyZGluZyIsCiAgICAgICAgIkNhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiLAogICAgICAgICJDaGFwZWx0b24gdiBCYXJyeSIsCiAgICAgICAgIkJsYWNrcG9vbCBhbmQgRnlsZGUiLAogICAgICAgICJCb290cyBDYXNoIENoZW1pc3RzIiwKICAgICAgICAiQmFycnkgdiBEYXZpZXMiLAogICAgICAgICJUaG9ybnRvbiB2IFNob2UgTGFuZSBQYXJraW5nIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJPZmZlcnMiLAogICAgICAgICJEaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCIsCiAgICAgICAgIkNvbnRyYWN0cyBJbnZvbHZpbmcgTGFuZCIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQXMgdGhlIGxhdyBkZWVtcyBlYWNoIHBsb3Qgb2YgbGFuZCB1bmlxdWUsIHRoZSBjb3VydHMgd2lsbCBub3QgaW1wdXRlIGludGVudGlvbiB0byBkaXNwb3NlIG9mIGl0IGxpZ2h0bHkuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJPZmZlcnMgJm1kYXNoOyBEaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCAmbWRhc2g7IENvbnRyYWN0cyBJbnZvbHZpbmcgTGFuZCIsCiAgICAiTlVNQkVSIjogIjE0IiwKICAgICJZRUFSIjogIjE4OTMiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIk9mZmVycyAmbWRhc2g7IERpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0ICZtZGFzaDsgQ29udHJhY3RzIEludm9sdmluZyBMYW5kIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJIYXJ2ZXkgdiBGYWNleSIsCiAgICAgICAgIkdpYnNvbiB2IE1hbmNoZXN0ZXIiLAogICAgICAgICJGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiUGF5bmUgdiBDYXZlIiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgUGFya2luZyIsCiAgICAgICAgIkJhcnJ5IHYgRGF2aWVzIiwKICAgICAgICAiSGFydmVsYSB2IFJveWFsIFRydXN0IG9mIENhbmFkYSIsCiAgICAgICAgIkNoYXBlbHRvbiB2IEJhcnJ5IiwKICAgICAgICAiSGFycmlzIHYgTmlja2Vyc2VuIiwKICAgICAgICAiV2FybG93IHYgSGFycmlzb24iLAogICAgICAgICJQYXJ0cmlkZ2UgdiBDcml0dGVuZGVuIiwKICAgICAgICAiU3BlbmNlciB2IEhhcmRpbmciCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNSIsCiAgICAiWUVBUiI6ICIxOTQ0IiwKICAgICJOQU1FIjogIkNsaWZ0b24gdiBQYWx1bWJvIiwKICAgICJDSVRBVElPTiI6ICJDbGlmdG9uIHYgUGFsdW1ibyBbMTk0NF0gMiBBbGwgRVIgNDk3IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJPZmZlcnMiLAogICAgICAgICJEaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCIsCiAgICAgICAgIkNvbnRyYWN0cyBJbnZvbHZpbmcgTGFuZCIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiV2hlbiB0aGUgc3ViamVjdCBtYXR0ZXIgaXMgbGFuZCwgdGhlIGhpZ2hlciB0aGUgc3VtcyBpbnZvbHZlZCwgdGhlIG1vcmUgdmFndWVuZXNzIHdpbGwgbWlsaXRhdGUgYWdhaW5zdCB0aGUgcHJlc3VtcHRpb24gb2YgaW50ZW50aW9uIHRvIGNvbnRyYWN0LiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiT2ZmZXJzICZtZGFzaDsgRGlzdGluZ3Vpc2hlZCBmcm9tIEludml0YXRpb24gdG8gVHJlYXQgJm1kYXNoOyBDb250cmFjdHMgSW52b2x2aW5nIExhbmQiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkhhcnZleSB2IEZhY2V5IiwKICAgICAgICAiQ2xpZnRvbiB2IFBhbHVtYm8iLAogICAgICAgICJCYXJyeSB2IERhdmllcyIsCiAgICAgICAgIkJsYWNrcG9vbCBhbmQgRnlsZGUiLAogICAgICAgICJGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiR3JhaW5nZXIgdiBHb3VnaCIsCiAgICAgICAgIlBhcnRyaWRnZSB2IENyaXR0ZW5kZW4iLAogICAgICAgICJDaGFwZWx0b24gdiBCYXJyeSIsCiAgICAgICAgIlBheW5lIHYgQ2F2ZSIsCiAgICAgICAgIlNwZW5jZXIgdiBIYXJkaW5nIiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgUGFya2luZyIsCiAgICAgICAgIkJvb3RzIENhc2ggQ2hlbWlzdHMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNiIsCiAgICAiWUVBUiI6ICIxOTc4IiwKICAgICJOQU1FIjogIkdpYnNvbiB2IE1hbmNoZXN0ZXIiLAogICAgIkNJVEFUSU9OIjogIkdpYnNvbiB2IE1hbmNoZXN0ZXIgQ2l0eSBDb3VuY2lsIFsxOTc4XSAxIFdMUiA1MjAiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk9mZmVycyIsCiAgICAgICAgIkRpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0IiwKICAgICAgICAiQ29udHJhY3RzIEludm9sdmluZyBMYW5kIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBbHRob3VnaCBvbiBhcHBlYWwgTG9yZCBEZW5uaW5nIGhhZCBjb25zdHJ1ZWQgdGhlIHdob2xlIGNvdXJzZSBvZiBkZWFsaW5nIGFzIGZvcm1pbmcgdGhlIGNvbnRyYWN0LCB0aGUgTG9yZHMgaGVsZCB0aGUgd29yZGluZyAmIzgyMTY7bWF5IGJlIHByZXBhcmVkJiM4MjE3OyB2aXRpYXRlZCBmaW5kaW5nIGEgbGV0dGVyIGluIGEgbGFuZCB0cmFuc2FjdGlvbiBjb25zdGl0dXRlZCBhbiBvZmZlci4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiLAogICAgICAgICJEZW5uaW5nIiwKICAgICAgICAiRGlwbG9jayIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiT2ZmZXJzICZtZGFzaDsgRGlzdGluZ3Vpc2hlZCBmcm9tIEludml0YXRpb24gdG8gVHJlYXQgJm1kYXNoOyBTYWxlcyBieSBBdWN0aW9ucyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiSGFycmlzIHYgTmlja2Vyc2VuIiwKICAgICAgICAiV2FybG93IHYgSGFycmlzb24iLAogICAgICAgICJCYXJyeSB2IERhdmllcyIsCiAgICAgICAgIlRob3JudG9uIHYgU2hvZSBMYW5lIFBhcmtpbmciLAogICAgICAgICJIYXJ2ZXkgdiBGYWNleSIsCiAgICAgICAgIkJsYWNrcG9vbCBhbmQgRnlsZGUiLAogICAgICAgICJHaWJzb24gdiBNYW5jaGVzdGVyIiwKICAgICAgICAiQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIlBhcnRyaWRnZSB2IENyaXR0ZW5kZW4iLAogICAgICAgICJGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiQ2xpZnRvbiB2IFBhbHVtYm8iLAogICAgICAgICJIYXJ2ZWxhIHYgUm95YWwgVHJ1c3Qgb2YgQ2FuYWRhIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTciLAogICAgIllFQVIiOiAiMTc4OSIsCiAgICAiTkFNRSI6ICJQYXluZSB2IENhdmUiLAogICAgIkNJVEFUSU9OIjogIlBheW5lIHYgQ2F2ZSAoMTc4OSkgMyBEdXJuICZhbXA7IEUgMTQ4IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJPZmZlcnMiLAogICAgICAgICJEaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCIsCiAgICAgICAgIlNhbGVzIGJ5IEF1Y3Rpb25zIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBIGJpZCBtYWRlIGluIGFuIGF1Y3Rpb24gaXMgYW4gb2ZmZXIuIFNob3VsZCBpdCBiZSB0aGUgaGlnaGVzdCwgaXQgaXMgYWNjZXB0ZWQgd2hlbiB0aGUgZ2F2ZWwgY29tZXMgZG93bi4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIk9mZmVycyAmbWRhc2g7IERpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0ICZtZGFzaDsgU2FsZXMgYnkgQXVjdGlvbnMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkJhcnJ5IHYgRGF2aWVzIiwKICAgICAgICAiV2FybG93IHYgSGFycmlzb24iLAogICAgICAgICJQYXluZSB2IENhdmUiLAogICAgICAgICJDaGFwZWx0b24gdiBCYXJyeSIsCiAgICAgICAgIlBhcnRyaWRnZSB2IENyaXR0ZW5kZW4iLAogICAgICAgICJTcGVuY2VyIHYgSGFyZGluZyIsCiAgICAgICAgIkhhcnZleSB2IEZhY2V5IiwKICAgICAgICAiSGFydmVsYSB2IFJveWFsIFRydXN0IG9mIENhbmFkYSIsCiAgICAgICAgIkJsYWNrcG9vbCBhbmQgRnlsZGUiLAogICAgICAgICJHaWJzb24gdiBNYW5jaGVzdGVyIiwKICAgICAgICAiQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIkJvb3RzIENhc2ggQ2hlbWlzdHMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxOCIsCiAgICAiWUVBUiI6ICIxODczIiwKICAgICJOQU1FIjogIkhhcnJpcyB2IE5pY2tlcnNlbiIsCiAgICAiQ0lUQVRJT04iOiAiSGFycmlzIHYgTmlja2Vyc2VuICgxODczKSBMUiA4IFFCIDI4NiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiT2ZmZXJzIiwKICAgICAgICAiRGlzdGluZ3Vpc2hlZCBmcm9tIEludml0YXRpb24gdG8gVHJlYXQiLAogICAgICAgICJTYWxlcyBieSBBdWN0aW9ucyIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQW4gYWR2ZXJ0aXNlbWVudCBmb3IgdGhlIHNhbGUgb2Ygc3BlY2lmaWMgZ29vZHMgYXQgYXVjdGlvbiBkb2VzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGZvcm0gYSB1bmlsYXRlcmFsIG9mZmVyIHdoaWNoIGlzIGFjY2VwdGVkIGJ5IGF0dGVuZGFuY2UuIE90aGVyd2lzZSwgdGhlIGF1Y3Rpb25lZXIgd291bGQgYmUgbGlhYmxlIGZvciBicmVhY2ggdG8gYWxsIHRob3NlIHdobyAmIzgyMjA7YWNjZXB0ZWQmIzgyMjE7IGJ5IHNob3dpbmcgdXAuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiS2V5IgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJXYXJsb3cgdiBIYXJyaXNvbiAoMTg1OSkgMSBFICZhbXA7IEIgMzA5IiwKICAgICJOQU1FIjogIldhcmxvdyB2IEhhcnJpc29uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJIYXJyaXMgdiBOaWNrZXJzZW4iLAogICAgICAgICJCYXJyeSB2IERhdmllcyIsCiAgICAgICAgIlBheW5lIHYgQ2F2ZSIsCiAgICAgICAgIkhhcnZleSB2IEZhY2V5IiwKICAgICAgICAiQ2xpZnRvbiB2IFBhbHVtYm8iLAogICAgICAgICJHcmFpbmdlciB2IEdvdWdoIiwKICAgICAgICAiSGFydmVsYSB2IFJveWFsIFRydXN0IG9mIENhbmFkYSIsCiAgICAgICAgIkNoYXBlbHRvbiB2IEJhcnJ5IiwKICAgICAgICAiQmxhY2twb29sIGFuZCBGeWxkZSIsCiAgICAgICAgIlNwZW5jZXIgdiBIYXJkaW5nIiwKICAgICAgICAiUGFydHJpZGdlIHYgQ3JpdHRlbmRlbiIsCiAgICAgICAgIlRob3JudG9uIHYgU2hvZSBMYW5lIFBhcmtpbmciCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk9mZmVycyIsCiAgICAgICAgIkRpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0IiwKICAgICAgICAiU2FsZXMgYnkgQXVjdGlvbnMiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBhZHZlcnRpc2VtZW50IG9mIGEgc2FsZSBieSBhdWN0aW9uIDxzcGFuIGNsYXNzPVwiaXRcIj53aXRob3V0IHJlc2VydmU8L3NwYW4+IGlzIGEgdW5pbGF0ZXJhbCBvZmZlciwgYWNjZXB0ZWQgYnkgdGhlIGhpZ2hlc3QgYmlkLiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiT2ZmZXJzICZtZGFzaDsgRGlzdGluZ3Vpc2hlZCBmcm9tIEludml0YXRpb24gdG8gVHJlYXQgJm1kYXNoOyBTYWxlcyBieSBBdWN0aW9ucyIsCiAgICAiTlVNQkVSIjogIjE5IiwKICAgICJZRUFSIjogIjE4NTkiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIk9mZmVycyAmbWRhc2g7IERpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0ICZtZGFzaDsgU2FsZXMgYnkgQXVjdGlvbnMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkhhcnJpcyB2IE5pY2tlcnNlbiIsCiAgICAgICAgIldhcmxvdyB2IEhhcnJpc29uIiwKICAgICAgICAiUGF5bmUgdiBDYXZlIiwKICAgICAgICAiQm9vdHMgQ2FzaCBDaGVtaXN0cyIsCiAgICAgICAgIkdyYWluZ2VyIHYgR291Z2giLAogICAgICAgICJIYXJ2ZXkgdiBGYWNleSIsCiAgICAgICAgIkdpYnNvbiB2IE1hbmNoZXN0ZXIiLAogICAgICAgICJDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDb21wYW55IiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgUGFya2luZyIsCiAgICAgICAgIlBhcnRyaWRnZSB2IENyaXR0ZW5kZW4iLAogICAgICAgICJGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiSGFydmVsYSB2IFJveWFsIFRydXN0IG9mIENhbmFkYSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIwIiwKICAgICJZRUFSIjogIjIwMDAiLAogICAgIk5BTUUiOiAiQmFycnkgdiBEYXZpZXMiLAogICAgIkNJVEFUSU9OIjogIkJhcnJ5IHYgRGF2aWVzIFsyMDAwXSAxIFdMUiAxOTYyIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJPZmZlcnMiLAogICAgICAgICJEaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCIsCiAgICAgICAgIlNhbGVzIGJ5IEF1Y3Rpb25zIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJNb2Rlcm4gYXV0aG9yaXR5IGZvciBhZHZlcnRpc2VtZW50cyBvZiBhIHNhbGUgYnkgYXVjdGlvbiB3aXRob3V0IHJlc2VydmUgYmVpbmcgdW5pbGF0ZXJhbCBvZmZlcnMgYWNjZXB0ZWQgYnkgcGxhY2luZyB0aGUgaGlnaGVzdCBiaWQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiS2V5IgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJPZmZlcnMgJm1kYXNoOyBEaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCAmbWRhc2g7IFNhbGVzIGJ5IFRlbmRlciIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQmxhY2twb29sIGFuZCBGeWxkZSIsCiAgICAgICAgIkhhcnZlbGEgdiBSb3lhbCBUcnVzdCBvZiBDYW5hZGEiLAogICAgICAgICJHcmFpbmdlciB2IEdvdWdoIiwKICAgICAgICAiSGFydmV5IHYgRmFjZXkiLAogICAgICAgICJCb290cyBDYXNoIENoZW1pc3RzIiwKICAgICAgICAiQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIkdpYnNvbiB2IE1hbmNoZXN0ZXIiLAogICAgICAgICJDaGFwZWx0b24gdiBCYXJyeSIsCiAgICAgICAgIkZpc2hlciB2IEJlbGwiLAogICAgICAgICJQYXluZSB2IENhdmUiLAogICAgICAgICJQYXJ0cmlkZ2UgdiBDcml0dGVuZGVuIiwKICAgICAgICAiSGFycmlzIHYgTmlja2Vyc2VuIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjEiLAogICAgIllFQVIiOiAiMTg3MCIsCiAgICAiTkFNRSI6ICJTcGVuY2VyIHYgSGFyZGluZyIsCiAgICAiQ0lUQVRJT04iOiAiU3BlbmNlciB2IEhhcmRpbmcgKDE4NzApIExSIDUgQ1AgNTYxIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJPZmZlcnMiLAogICAgICAgICJEaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCIsCiAgICAgICAgIlNhbGVzIGJ5IFRlbmRlciIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQW4gaW52aXRhdGlvbiB0byBzdWJtaXQgdGVuZGVycyBmb3IgcHVyY2hhc2UgbGFja3MgY29udHJhY3R1YWwgY2hhcmFjdGVyIGFuZCwgZm9yYmlkZGluZyBwcm9taXNlcyBhbW91bnRpbmcgdG8gYSB1bmlsYXRlcmFsIGNvbnRyYWN0IHRvIHNlbGwgdG8gdGhlIGhpZ2hlc3QgYmlkZGVyLCBpcyBub3QgYSB1bmlsYXRlcmFsIGNvbnRyYWN0LiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiT2ZmZXJzICZtZGFzaDsgRGlzdGluZ3Vpc2hlZCBmcm9tIEludml0YXRpb24gdG8gVHJlYXQgJm1kYXNoOyBTYWxlcyBieSBUZW5kZXIiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkhhcnZlbGEgdiBSb3lhbCBUcnVzdCBvZiBDYW5hZGEiLAogICAgICAgICJTcGVuY2VyIHYgSGFyZGluZyIsCiAgICAgICAgIlBheW5lIHYgQ2F2ZSIsCiAgICAgICAgIkdpYnNvbiB2IE1hbmNoZXN0ZXIiLAogICAgICAgICJCYXJyeSB2IERhdmllcyIsCiAgICAgICAgIkZpc2hlciB2IEJlbGwiLAogICAgICAgICJUaG9ybnRvbiB2IFNob2UgTGFuZSBQYXJraW5nIiwKICAgICAgICAiUGFydHJpZGdlIHYgQ3JpdHRlbmRlbiIsCiAgICAgICAgIkhhcnJpcyB2IE5pY2tlcnNlbiIsCiAgICAgICAgIldhcmxvdyB2IEhhcnJpc29uIiwKICAgICAgICAiR3JhaW5nZXIgdiBHb3VnaCIsCiAgICAgICAgIkhhcnZleSB2IEZhY2V5IgogICAgXSwKICAgICJOVU1CRVIiOiAiMjIiLAogICAgIllFQVIiOiAiMTk5MCIsCiAgICAiTkFNRSI6ICJCbGFja3Bvb2wgYW5kIEZ5bGRlIiwKICAgICJDSVRBVElPTiI6ICJCbGFja3Bvb2wgYW5kIEZ5bGRlIEFlcm9jbHViIEx0ZCB2IEJsYWNrcG9vbCBCb3JvdWdoIENvdW5jaWwgWzE5OTBdIDEgV0xSIDExOTUiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk9mZmVycyIsCiAgICAgICAgIkRpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0IiwKICAgICAgICAiU2FsZXMgYnkgVGVuZGVyIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBbiBpbnZpdGF0aW9uIHRvIHN1Ym1pdCB0ZW5kZXJzIGNvbmZvcm1pbmcgdG8gY2VydGFpbiBjcml0ZXJpYSB1bnRpbCBhIGNlcnRhaW4gZGF0ZSwgYWZ0ZXIgd2hpY2ggdGhleSB3aWxsIGJlIGV4YW1pbmVkLCBoYXMgbWFkZSBhIHVuaWxhdGVyYWwgb2ZmZXIgcHJvbWlzaW5nIHRoZSBvcGVuaW5nIGFuZCBjb25zaWRlcmF0aW9uIG9mIHRoZSBiaWRzIGluIGV4Y2hhbmdlIGZvciB0aGVpciB0aW1lbHkgYW5kIGNvbmZvcm1pbmcgc3VibWlzc2lvbi4gTm8gcHJvbWlzZSwgaG93ZXZlciwgaXMgaW1wbGllZCBhYm91dCB3aGljaCB3aWxsIHVsdGltYXRlbHkgYmUgYWNjZXB0ZWQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiS2V5IgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJPZmZlcnMgJm1kYXNoOyBEaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCAmbWRhc2g7IFNhbGVzIGJ5IFRlbmRlciIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiU3BlbmNlciB2IEhhcmRpbmciLAogICAgICAgICJCbGFja3Bvb2wgYW5kIEZ5bGRlIiwKICAgICAgICAiR3JhaW5nZXIgdiBHb3VnaCIsCiAgICAgICAgIlBhcnRyaWRnZSB2IENyaXR0ZW5kZW4iLAogICAgICAgICJIYXJ2ZXkgdiBGYWNleSIsCiAgICAgICAgIkJhcnJ5IHYgRGF2aWVzIiwKICAgICAgICAiSGFycmlzIHYgTmlja2Vyc2VuIiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgUGFya2luZyIsCiAgICAgICAgIlBheW5lIHYgQ2F2ZSIsCiAgICAgICAgIkNsaWZ0b24gdiBQYWx1bWJvIiwKICAgICAgICAiQm9vdHMgQ2FzaCBDaGVtaXN0cyIsCiAgICAgICAgIkNhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiCiAgICBdLAogICAgIllFQVIiOiAiMTk4NiIsCiAgICAiTlVNQkVSIjogIjIzIiwKICAgICJBS0EiOiAiSGFydmVsYSIsCiAgICAiTkFNRSI6ICJIYXJ2ZWxhIHYgUm95YWwgVHJ1c3Qgb2YgQ2FuYWRhIiwKICAgICJDSVRBVElPTiI6ICJIYXJ2ZWxhIEludmVzdG1lbnRzIEx0ZCB2IFJveWFsIFRydXN0IG9mIENhbmFkYSBMdGQgWzE5ODZdIEFDIDIwNyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiT2ZmZXJzIiwKICAgICAgICAiRGlzdGluZ3Vpc2hlZCBmcm9tIEludml0YXRpb24gdG8gVHJlYXQiLAogICAgICAgICJTYWxlcyBieSBUZW5kZXIiCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlNpciBMZW9uYXJkIE91dGVyYnJpZGdlIHN1Ym1pdHRlZCBhIGJpZCBvZiAmIzgyMTY7JDIsMTAwLDAwMCBvciAkMTAxLDAwMCBpbiBleGNlc3Mgb2YgYW55IG90aGVyIG9mZmVyLiYjODIxNzsiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIldoZW4gYW4gaW52aXRhdGlvbiBpcyBtYWRlIHRvIHN1Ym1pdCBjbG9zZWQgYmlkcyBwcm9taXNlcyB0byBzZWxsIHRvIHRoZSBoaWdoZXN0IGJpZGRlciwgYSBiaWQgcHV0dGluZyBpdHNlbGYgaW4gdGVybXMgb2YgPHNwYW4gY2xhc3M9XCJpdFwiPmFub3RoZXI8L3NwYW4+IGJpZCB3aWxsIG5vdCBiZSB2YWxpZC4iCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIkNBVEVHT1JZIjogIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNvbnNpZGVyYXRpb24gLSBPdmVydmlldyIsCiAgICAgICAgIkltcGxpY2F0aW9uIG9mIFRlcm1zIC0gSW50cm8iLAogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIE5lZ2F0aXZlIFRlcm1zIiwKICAgICAgICAiQ29udHJhY3R1YWwgRHV0aWVzIGFzIENvbnNpZGVyYXRpb24iLAogICAgICAgICJPZmZlcnMiLAogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIENvbmZsaWN0aW5nIFRlcm1zIiwKICAgICAgICAiQ29uc2lkZXJhdGlvbiAtIERldGFpbCIsCiAgICAgICAgIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSIsCiAgICAgICAgIlByb21pc3NvcnkgRXN0b3BwZWwiLAogICAgICAgICJNaXN0YWtlIC0gSW50cm9kdWN0aW9uIiwKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBQb3NpdGl2ZSBUZXJtcyIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiUmVzcG9uc2VzIHRvIE9mZmVycyIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkNvdW50ZXItT2ZmZXJzPC9zcGFuPjxicj48c3BhbiBjbGFzcz1cIml0XCI+Q291bnRlci1vZmZlciB0ZXJtaW5hdGVzIG9mZmVyICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SHlkZSB2IFdyZW5jaDwvc3Bhbj4uICBFbnF1aXJ5IGRvZXMgbm90ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U3RldmVuc29uIHYgTWNMZWFuPC9zcGFuPi4gIEV2ZW4gaWYgZW5xdWlyeSBpcyBhYm91dCBhIG5ldyB0ZXJtLCBldmVuIHByaWNlLCBhcyBsb25nIGFzIG5vdCBhIHByb3Bvc2FsICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R2lic29uIC0gQ291bnRlci1PZmZlcnM8L3NwYW4+Ljwvc3Bhbj48YnI+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QSBjb3VudGVyLW9mZmVyIHRlcm1pbmF0ZXMgdGhlIG9mZmVyIHRvIHdoaWNoIGl0IHJlc3BvbmRzLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IeWRlIHYgV3JlbmNoPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFuIGVucXVpcnkgZm9sbG93aW5nIGFuIG9mZmVyIHdoaWNoIGRvZXMgbm90IGV2aW5jZSBuZXcgdGVybXMgZG9lcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBkbyBzby4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U3RldmVuc29uLCBKYWNxdWVzIHYgTWNMZWFuPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFzIGxvbmcgYXMgYSByZXNwb25zZSBmYWxscyBzaG9ydCBvZiA8c3BhbiBjbGFzcz1cIml0XCI+cHJvcG9zaW5nPC9zcGFuPiBuZXcgdGVybXMsIGl0IG1heSA8c3BhbiBjbGFzcz1cIml0XCI+ZW5xdWlyZTwvc3Bhbj4gYWJvdXQgdGhlbSB3aXRob3V0IGJlaW5nIGEgY291bnRlci1vZmZlci4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R2lic29uIC0gQ291bnRlci1PZmZlcnM8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkJhdHRsZSBvZiB0aGUgRm9ybXM8L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiaXRcIj5MYXN0IFRzJmFtcDtDcyBwcmVzZW50ZWQgYW5kICh0YWNpdGx5KSBhY2NlcHRlZCBnb3Zlcm4gJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CUlMgdiBBVkM8L3NwYW4+LiBQcm9zcGVjdGl2ZSBhbm51bGF0aW9uIG9mIGZ1cnRoZXIgdGVybXMgaW5lZmZlY3RpdmUgaXRzZWxmIGFubnVsbGVkIGJ5IGNvdW50ZXItb2ZmZXIgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5FeC1DZWxsLU88L3NwYW4+LiAgSW50ZW50aW9uIGFzIHRvIHdob3NlIFRzJmFtcDtDcyBhc3Nlc3NlZCBvYmplY3RpdmVseSAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRla2RhdGE8L3NwYW4+Ljwvc3Bhbj48YnI+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIGxhc3QgdG8gcHJlc2VudCB0ZXJtcyBtYWtlcyB0aGUgb2ZmZXIsIGZvciB3aGljaCBhY2NlcHRhbmNlIG1heSBiZSBieSBjb25kdWN0LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CUlMgdiBBcnRodXIgQ3J1dGNobGV5PC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkEgdGVybSBwdXJwb3J0aW5nIHRvIHByb3NwZWN0aXZlbHkgZXhjbHVkZSBpbXBvc2l0aW9uIG9mIG90aGVyIHBhcnR5JiM4MjE3O3MgdGVybXMgaXMgZ29vZCBvbmx5IGZvciBhcyBsb25nIGFzIG5vdCBpbXBsaWNpdGx5IGNhbmNlbGxlZCBieSBvdGhlciBwYXJ0eSYjODIxNztzIHByZXNlbnRhdGlvbiBvZiB0ZXJtcy4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QnV0bGVyIHYgRXgtQ2VsbC1PPC9zcGFuPiwgRGVubmluZy48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBwYXJ0aWVzJiM4MjE3OyBpbnRlbnRpb25zIGFib3V0IHdob3NlIHRlcm1zIGFwcGx5IGlzIGEgbWF0dGVyIGZvciBvYmplY3RpdmUgZXZhbHVhdGlvbiwgZXZlbiBpZiBjb250cmFkaWN0ZWQgYnkgcHJpb3IgZGVhbGluZy4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGVrZGF0YSB2IEFtcGhlbm9sPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5XaXRoZHJhd2FsIGFuZCBMYXBzZTwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPk9mZmVycyBvcGVuIGZvciBhIHBlcmlvZCBtYXkgYmUgd2l0aGRyYXduICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Um91dGxlZGdlIHYgR3JhbnQ8L3NwYW4+LiAgVW5sZXNzIG9mZmVyZWUgaGFzIGFuIG9wdGlvbiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1vdW50Zm9yZCB2IFNjb3R0PC9zcGFuPi4gIENvbW11bmljYXRpb24gb2Ygd2l0aGRyYXdhbCBtdXN0IGJlIGVmZmVjdGl2ZSAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJ5cm5lIHYgVmFuIFRpZW5ob3Zlbjwvc3Bhbj4uICBOZWVkIG5vdCBiZSBkaXJlY3QgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EaWNraW5zb24gdiBEb2Rkczwvc3Bhbj4uIEV4cGlyZXMgYWZ0ZXIgYSByZWFzb25hYmxlIHRpbWUgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5WaWN0b3JpYSBIb3RlbCB2IE1vbnRlZmlvcmU8L3NwYW4+Ljwvc3Bhbj48YnI+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QW4gb2ZmZXIgYW5ub3VuY2luZyBvcGVuIGZvciBhIHNwZWNpZmljIHBlcmlvZCBtYXkgYmUgdmFsaWRseSB3aXRoZHJhd24gYmVmb3JlIHRoZSBwZXJpb2QgZXhwaXJlcy4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Um91dGxlZGdlIHYgR3JhbnQ8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VW5sZXNzIHRoZSBwcm9zcGVjdGl2ZSBvZmZlcmVlIGhhcyBpbiBlZmZlY3QgcGFpZCBmb3IgYW4gb3B0aW9uLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Nb3VudGZvcmQgdiBTY290dDwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5XaXRoZHJhd2FsIG11c3QgYmUgY29tbXVuaWNhdGVkIHRvIG9mZmVyZWUocykgZWZmZWN0aXZlbHksIGFuZCB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+cG9zdGFsIHJ1bGU8L3NwYW4+IGRvZXMgbm90IGFwcGx5LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CeXJuZSB2IFZhbiBUaWVuaG92ZW48L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+U3VjaCBjb21tdW5pY2F0aW9uIG5lZWQgbm90IGhhcHBlbiBkaXJlY3RseSwgYnV0IG9mZmVyZWUgbXVzdCA8c3BhbiBjbGFzcz1cIml0XCI+a25vdzwvc3Bhbj4gYWJvdXQgaXQuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRpY2tpbnNvbiB2IERvZGRzPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPjxvbD48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJpdFwiPkluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJ5cm5lIHYgVmFuIFRpZW5ob3Zlbjwvc3Bhbj4sIG9mZmVyZWUga25ldyBvZmZlciA8c3BhbiBjbGFzcz1cImJkXCI+d2FzPC9zcGFuPiBpbnRlbmRlZDsgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGlja2luc29uIHYgRG9kZHM8L3NwYW4+LCBvZmZlcmVlIGtuZXcgaXQgd2FzIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+PC9zcGFuPi48L3NwYW4+PC9saT48L29sPjx1bD48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VW5pbGF0ZXJhbCBvZmZlcnMgbWFkZSBwdWJsaWNseSBtdXN0IGJlIHdpdGhkcmF3biBpbiB0aGUgc2FtZSBtYW5uZXIgYXMgdGhleSB3ZXJlIG1hZGUuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNodWV5IHYgVVM8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QW4gb2ZmZXIgd2hpY2ggbWFrZXMgbm8gc3RpcHVsYXRpb24gYXMgdG8gaXRzIHBlcmlvZCBvZiB2YWxpZGl0eSBuZXZlcnRoZWxlc3MgbGFwc2VzIGFmdGVyIGEgcmVhc29uYWJsZSB0aW1lLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SYW1zZ2F0ZSBWaWN0b3JpYSBIb3RlbCB2IE1vbnRlZmlvcmU8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPktub3dsZWRnZSBvZiBPZmZlcjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPk9mZmVyZWUmIzgyMTc7cyBtb3RpdmUgaW4gYWNjZXB0aW5nIG9mZmVyIGlycmVsZXZhbnQgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5XaWxsaWFtcyB2IENhcndhcmRpbmU8L3NwYW4+LiAgSWRlbnRpY2FsIGNyb3NzLW9mZmVycyBub3QgYSBjb250cmFjdCAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRpbm4gdiBIb2ZmbWFubjwvc3Bhbj4uICBObyBhY2NlcHRhbmNlIGluIGlnbm9yYW5jZSBvZiBvZmZlciAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlIgdiBDbGFya2U8L3NwYW4+Ljwvc3Bhbj48YnI+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIG1vdGl2ZSBmb3Igd2hpY2ggYW4gb2ZmZXJlZSBwZXJmb3JtcyB0aGUgYWN0aW9uIHN0aXB1bGF0ZWQgYSB1bmlsYXRlcmFsIGNvbnRyYWN0IDxzcGFuIGNsYXNzPVwiaXRcIj5rbm93bjwvc3Bhbj4gdG8gdGhlIG9mZmVyZWUgaXMgaXJyZWxldmFudCBhcyB0byB0aGUgdmFsaWRpdHkgb2Ygb2ZmZXJlZSYjODIxNztzIGFjY2VwdGFuY2UuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPldpbGxpYW1zIHYgQ2Fyd2FyZGluZTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BbiBvZmZlcmVlIG11c3Qga25vdyBhYm91dCB0aGUgb2ZmZXIuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlIgdiBDbGFyazwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5XaGVuIGlkZW50aWNhbCBvZmZlcnMgYXJlIG1hZGUgYnkgYm90aCBwYXJ0aWVzIGJ1dCBjcm9zcyBpbiB0aGUgcG9zdCwgdGhlcmUgaXMgbm8gYWNjZXB0YW5jZSwgc28gbm8gY29udHJhY3QuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRpbm4gdiBIb2ZmbWFubjwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+QWNjZXB0YW5jZSBJbiBVbmlsYXRlcmFsIENvbnRyYWN0czwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPlRyYWRpdGlvbmFsbHkgJm1kYXNoOyB3aGVuIHRoZSBhY3Rpb24gaXMgZnVsbHkgcGVyZm9ybWVkLiAgTW9kZXJuIHZpZXcgJm1kYXNoOyBtYXkgY29tZSB3aGVuIGJlZ2lucyBpZiBhY3Rpb24gb2Ygc2lnbmlmaWNhbnQgZGV0cmltZW50IHRvIG9mZmVyZWUuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkVycmluZ3RvbiB2IEVycmluZ3Rvbjwvc3Bhbj4uICBFeGNlcHQgaWYgYWN0aW9uIG51Z2F0b3J5LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MdXhvciB2IENvb3Blcjwvc3Bhbj4uICBPZmZlcm9yIG1heSBub3Qgd2l0aGRyYXcgYnkgbml4aW5nIHBlcmYgb2YgYWN0aW9uICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGF1bGlhIHYgRm91ciBNaWxsYmFuayBOb21pbmVlczwvc3Bhbj4uPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkEgc3BlY2lmaWVkIGFjdGlvbiBiZWluZyBzaWduaWZpY2FudGx5IGxvbmcgYW5kIGRldHJpbWVudGFsIGdvZXMgaW4gZmF2b3VyIG9mIGZpbmRpbmcgdGhlIGNvbnRyYWN0IGlzIGJpbmRpbmcgd2hlbiBvZmZlcmVlIDxzcGFuIGNsYXNzPVwiaXRcIj5iZWdpbnM8L3NwYW4+IHRvIHBlcmZvcm0uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkVycmluZ3RvbiB2IEVycmluZ3Rvbjwvc3Bhbj4sIERlbm5pbmcuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CeSBjb250cmFzdCwgc2hvdWxkIHRoZSBkZXRyaW1lbnQgaW4gcGVyZm9ybWluZyB0aGUgYWN0aW9uIGJlIGluc2lnbmlmaWNhbnQsIG9yIGFtb3VudCB0byBhbiBvcmRpbmFyeSBidXNpbmVzcyByaXNrLCB0aGUgdHJhZGl0aW9uYWwgdmlldyB3aWxsIHByZXZhaWwgYW5kIHJlcXVpcmUgdGhlIGFjdGlvbiB0byBiZSBjb21wbGV0ZWQgYmVmb3JlIHBhcnRpZXMgYXJlIGJvdW5kLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MdXhvciB2IENvb3Blcjwvc3Bhbj4pLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QW4gb2ZmZXJvciBtYXkgbm90IGZydXN0cmF0ZSB0aGUgYWN0aW9uIGZvciBhY2NlcHRhbmNlIGluIGFuIGVmZm9ydCB0byB3aXRoZHJhdyB0aGUgb2ZmZXIuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRhdWxpYSB2IEZvdXIgTWlsbGJhbmsgTm9taW5lZXM8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJOVU1CRVIiOiAiMjQiLAogICAgIk5BTUUiOiAiUmVzcG9uc2VzIHRvIE9mZmVycyIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiUmVzcG9uc2VzIHRvIE9mZmVycyAmbWRhc2g7IENvdW50ZXItT2ZmZXIiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkdpYnNvbiAtIENvdW50ZXItT2ZmZXJzIiwKICAgICAgICAiU3RldmVuc29uLCBKYWNxdWVzIHYgTWFjTGVhbiIsCiAgICAgICAgIkJ5cm5lIHYgVmFuIFRpZW5ob3ZlbiIsCiAgICAgICAgIkRpY2tpbnNvbiB2IERvZGRzIiwKICAgICAgICAiQnV0bGVyIHYgRXgtQ2VsbC1PIiwKICAgICAgICAiU2h1ZXkgdiBVbml0ZWQgU3RhdGVzIiwKICAgICAgICAiV2lsbGlhbXMgdiBDYXJ3YXJkaW5lIiwKICAgICAgICAiVmljdG9yaWEgSG90ZWwgdiBNb250ZWZpb3JlIiwKICAgICAgICAiTHV4b3IgdiBDb29wZXIiLAogICAgICAgICJCUlMgdiBBcnRodXIgQ3J1dGNobGV5IiwKICAgICAgICAiVGVrZGF0YSB2IEFtcGhlbm9sIiwKICAgICAgICAiVGlubiB2IEhvZmZtYW4iCiAgICBdLAogICAgIk5VTUJFUiI6ICIyNSIsCiAgICAiWUVBUiI6ICIxODQwIiwKICAgICJOQU1FIjogIkh5ZGUgdiBXcmVuY2giLAogICAgIkNJVEFUSU9OIjogIkh5ZGUgdiBXcmVuY2ggKDE4NDApIDMgQmVhdiAzMzQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJDb3VudGVyLU9mZmVyIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJSZXNwb25kaW5nIHRvIGFuIG9mZmVyIHdpdGggYSBzdWdnZXN0aW9uIG9mIGEgbG93ZXIgcHJpY2UgY2FuY2VscyB0aGUgb3JpZ2luYWwgb2ZmZXIgYW5kIG1ha2VzIGEgbmV3IG9uZS4gVGhlIG9yaWdpbmFsIG9mZmVyIGNhbm5vdCB0aGVuIHZhbGlkbHkgYmUgYWNjZXB0ZWQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiS2V5IgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJSZXNwb25zZXMgdG8gT2ZmZXJzICZtZGFzaDsgQ291bnRlci1PZmZlciIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiSHlkZSB2IFdyZW5jaCIsCiAgICAgICAgIkdpYnNvbiAtIENvdW50ZXItT2ZmZXJzIiwKICAgICAgICAiV2lsbGlhbXMgdiBDYXJ3YXJkaW5lIiwKICAgICAgICAiQnV0bGVyIHYgRXgtQ2VsbC1PIiwKICAgICAgICAiU2h1ZXkgdiBVbml0ZWQgU3RhdGVzIiwKICAgICAgICAiVGVrZGF0YSB2IEFtcGhlbm9sIiwKICAgICAgICAiUm91dGxlZGdlIHYgR3JhbnQiLAogICAgICAgICJUaW5uIHYgSG9mZm1hbiIsCiAgICAgICAgIkVycmluZ3RvbiB2IEVycmluZ3RvbiIsCiAgICAgICAgIlIgdiBDbGFya2UiLAogICAgICAgICJEYXVsaWEgTHRkIHYgRm91ciBNaWxsYmFuayBOb21pbmVlcyBMdGQiLAogICAgICAgICJCUlMgdiBBcnRodXIgQ3J1dGNobGV5IgogICAgXSwKICAgICJOVU1CRVIiOiAiMjYiLAogICAgIllFQVIiOiAiMTg4MCIsCiAgICAiTkFNRSI6ICJTdGV2ZW5zb24sIEphY3F1ZXMgdiBNYWNMZWFuIiwKICAgICJDSVRBVElPTiI6ICJTdGV2ZW5zb24sIEphY3F1ZXMgdiBNYWNMZWFuICgxODgwKSA1IFFCRCAzNDYiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJDb3VudGVyLU9mZmVyIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBbiBlbnF1aXJ5IGluIHJlc3BvbnNlIHRvIGFuIG9mZmVyIGlzIG5vdCBhIGNvdW50ZXItb2ZmZXIsIHRoZXJlZm9yZSBkb2VzIG5vdCB0ZXJtaW5hdGUgdGhlIG9yaWdpbmFsIG9mZmVyLiBUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGEgY291bnRlci1vZmZlciBhbmQgYW4gZW5xdWlyeSBtYXkgYmUgZGlzY2VybmVkIGJ5IGFza2luZyB3aGV0aGVyIHRoZSByZXNwb25zZSBsZWF2ZXMgb3BlbiB0aGUgcG9zc2liaWxpdHkgb2YgYWNjZXB0aW5nIHRoZSBvZmZlciAmbWRhc2g7IG9yIHNob3dzIGFuIGludGVudGlvbiB0byBtb2RpZnkgdGhlIHRlcm1zLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiUmVzcG9uc2VzIHRvIE9mZmVycyAmbWRhc2g7IENvdW50ZXItT2ZmZXIiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkh5ZGUgdiBXcmVuY2giLAogICAgICAgICJTdGV2ZW5zb24sIEphY3F1ZXMgdiBNYWNMZWFuIiwKICAgICAgICAiTHV4b3IgdiBDb29wZXIiLAogICAgICAgICJEYXVsaWEgTHRkIHYgRm91ciBNaWxsYmFuayBOb21pbmVlcyBMdGQiLAogICAgICAgICJCdXRsZXIgdiBFeC1DZWxsLU8iLAogICAgICAgICJSb3V0bGVkZ2UgdiBHcmFudCIsCiAgICAgICAgIlRla2RhdGEgdiBBbXBoZW5vbCIsCiAgICAgICAgIkVycmluZ3RvbiB2IEVycmluZ3RvbiIsCiAgICAgICAgIlNodWV5IHYgVW5pdGVkIFN0YXRlcyIsCiAgICAgICAgIlIgdiBDbGFya2UiLAogICAgICAgICJNb3VudGZvcmQgdiBTY290dCIsCiAgICAgICAgIkJ5cm5lIHYgVmFuIFRpZW5ob3ZlbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjI3IiwKICAgICJZRUFSIjogIjE5NzgiLAogICAgIk5BTUUiOiAiR2lic29uIC0gQ291bnRlci1PZmZlcnMiLAogICAgIkNJVEFUSU9OIjogIkdpYnNvbiB2IE1hbmNoZXN0ZXIgQ0MgKENvdW50ZXItT2ZmZXJzKSBbMTk3OF0gMSBXTFIgNTIwIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJSZXNwb25zZXMgdG8gT2ZmZXJzIiwKICAgICAgICAiQ291bnRlci1PZmZlciIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSByZXNwb25zZSB0byBhbiBvZmZlciA8c3BhbiBjbGFzcz1cIml0XCI+ZW5xdWlyaW5nPC9zcGFuPiBhYm91dCB0aGUgcG9zc2liaWxpdHkgb2YgbmV3IHRlcm1zIHJhdGhlciB0aGFuIDxzcGFuIGNsYXNzPVwiaXRcIj5wcm9wb3Npbmc8L3NwYW4+IG5ldyB0ZXJtcywgd2lsbCBub3QgYmUgYSBjb3VudGVyIG9mZmVyLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIGxhc3Qgc2V0IG9mIHRlcm1zIGFuZCBjb25kaXRpb25zIHByZXNlbnRlZCBieSBhIHBhcnR5IHdpbGwgZ292ZXJuIGEgY29udHJhY3QsIHNob3VsZCB0aGUgb3RoZXIgcGFydHkgYmUgZGVlbWVkIGJ5IGNvbmR1Y3QgdG8gaGF2ZSBhY2NlcHRlZCB0aGVtLCBhcyBieSBkb2luZyBzbywgdGhlIGZpcnN0IHBhcnR5IGhhcyBwcm9wb3NlZCBkaWZmZXJlbnQgdGVybXMsIGFuZCBoYXMgdGhlcmVmb3JlIG1hZGUgYSBjb3VudGVyLW9mZmVyLCBhbm51bGxpbmcgdGhlIGZpcnN0LiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiUmVzcG9uc2VzIHRvIE9mZmVycyAmbWRhc2g7IEJhdHRsZSBvZiB0aGUgRm9ybXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlRla2RhdGEgdiBBbXBoZW5vbCIsCiAgICAgICAgIkJ1dGxlciB2IEV4LUNlbGwtTyIsCiAgICAgICAgIkh5ZGUgdiBXcmVuY2giLAogICAgICAgICJNb3VudGZvcmQgdiBTY290dCIsCiAgICAgICAgIlNodWV5IHYgVW5pdGVkIFN0YXRlcyIsCiAgICAgICAgIlIgdiBDbGFya2UiLAogICAgICAgICJUaW5uIHYgSG9mZm1hbiIsCiAgICAgICAgIlZpY3RvcmlhIEhvdGVsIHYgTW9udGVmaW9yZSIsCiAgICAgICAgIkdpYnNvbiAtIENvdW50ZXItT2ZmZXJzIiwKICAgICAgICAiRGF1bGlhIEx0ZCB2IEZvdXIgTWlsbGJhbmsgTm9taW5lZXMgTHRkIiwKICAgICAgICAiRXJyaW5ndG9uIHYgRXJyaW5ndG9uIiwKICAgICAgICAiTHV4b3IgdiBDb29wZXIiCiAgICBdLAogICAgIllFQVIiOiAiMTk2OCIsCiAgICAiTlVNQkVSIjogIjI4IiwKICAgICJBS0EiOiAiQlJTIHYgQVZDIiwKICAgICJOQU1FIjogIkJSUyB2IEFydGh1ciBDcnV0Y2hsZXkiLAogICAgIkNJVEFUSU9OIjogIkJSUyB2IEFydGh1ciBDcnV0Y2hsZXkgTHRkIFsxOTY4XSAxIEFsbCBFUiA4MTEiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJCYXR0bGUgb2YgdGhlIEZvcm1zIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiS2V5IgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJQcm9zcGVjdGl2ZWx5IGVudHJlbmNoaW5nIHRoZSBvcGVyYXRpb24gb25lJiM4MjE3O3Mgb3duIHRlcm1zIGFuZCBjb25kaXRpb25zIHdpbGwgb25seSBzdWNjZWVkIGluIGRvaW5nIHNvIHdoaWxlIHRoZSBvZmZlciBvZiB3aGljaCB0aGV5IGFyZSBhIHBhcnQgaXMgdmFsaWQuIEFzIHNvb24gYXMgdGhlIG90aGVyIHBhcnR5IG1ha2VzIGEgY291bnRlci1vZmZlciwgdGhlIHB1cnBvcnRlZCB0ZXJtIGNlYXNlcyB0byBoYXZlIGFueSByZWxldmFuY2UuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJSZXNwb25zZXMgdG8gT2ZmZXJzICZtZGFzaDsgQmF0dGxlIG9mIHRoZSBGb3JtcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiVGVrZGF0YSB2IEFtcGhlbm9sIiwKICAgICAgICAiQlJTIHYgQXJ0aHVyIENydXRjaGxleSIsCiAgICAgICAgIkJ5cm5lIHYgVmFuIFRpZW5ob3ZlbiIsCiAgICAgICAgIlNodWV5IHYgVW5pdGVkIFN0YXRlcyIsCiAgICAgICAgIldpbGxpYW1zIHYgQ2Fyd2FyZGluZSIsCiAgICAgICAgIkx1eG9yIHYgQ29vcGVyIiwKICAgICAgICAiRXJyaW5ndG9uIHYgRXJyaW5ndG9uIiwKICAgICAgICAiTW91bnRmb3JkIHYgU2NvdHQiLAogICAgICAgICJWaWN0b3JpYSBIb3RlbCB2IE1vbnRlZmlvcmUiLAogICAgICAgICJUaW5uIHYgSG9mZm1hbiIsCiAgICAgICAgIlN0ZXZlbnNvbiwgSmFjcXVlcyB2IE1hY0xlYW4iLAogICAgICAgICJIeWRlIHYgV3JlbmNoIgogICAgXSwKICAgICJZRUFSIjogIjE5NzkiLAogICAgIk5VTUJFUiI6ICIyOSIsCiAgICAiQUtBIjogIkV4LUNlbGwtTyIsCiAgICAiTkFNRSI6ICJCdXRsZXIgdiBFeC1DZWxsLU8iLAogICAgIkNJVEFUSU9OIjogIkJ1dGxlciBNYWNoaW5lIFRvb2wgQ28gTHRkIHYgRXgtQ2VsbC1PIENvcnAgWzE5NzldIDEgV0xSIDQwMSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiUmVzcG9uc2VzIHRvIE9mZmVycyIsCiAgICAgICAgIkJhdHRsZSBvZiB0aGUgRm9ybXMiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIlJlc3BvbnNlcyB0byBPZmZlcnMgJm1kYXNoOyBCYXR0bGUgb2YgdGhlIEZvcm1zIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJCUlMgdiBBcnRodXIgQ3J1dGNobGV5IiwKICAgICAgICAiQnV0bGVyIHYgRXgtQ2VsbC1PIiwKICAgICAgICAiUiB2IENsYXJrZSIsCiAgICAgICAgIlNodWV5IHYgVW5pdGVkIFN0YXRlcyIsCiAgICAgICAgIlZpY3RvcmlhIEhvdGVsIHYgTW9udGVmaW9yZSIsCiAgICAgICAgIk1vdW50Zm9yZCB2IFNjb3R0IiwKICAgICAgICAiSHlkZSB2IFdyZW5jaCIsCiAgICAgICAgIlRpbm4gdiBIb2ZmbWFuIiwKICAgICAgICAiUm91dGxlZGdlIHYgR3JhbnQiLAogICAgICAgICJHaWJzb24gLSBDb3VudGVyLU9mZmVycyIsCiAgICAgICAgIldpbGxpYW1zIHYgQ2Fyd2FyZGluZSIsCiAgICAgICAgIlN0ZXZlbnNvbiwgSmFjcXVlcyB2IE1hY0xlYW4iCiAgICBdLAogICAgIllFQVIiOiAiMjAwOSIsCiAgICAiTlVNQkVSIjogIjMwIiwKICAgICJBS0EiOiAiVGVrZGF0YSIsCiAgICAiTkFNRSI6ICJUZWtkYXRhIHYgQW1waGVub2wiLAogICAgIkNJVEFUSU9OIjogIlRla2RhdGEgSW50ZXJjb25uZWN0aW9ucyBMdGQgdiBBbXBoZW5vbCBMdGQgWzIwMDldIEVXQ0EgQ2l2IDEyMDkiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJCYXR0bGUgb2YgdGhlIEZvcm1zIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJNb2Rlcm4gYXV0aG9yaXR5IGZvciB0aGUgc3RhbmRhcmQgYW5hbHlzaXMgaW4gJiM4MjE2O2JhdHRsZSBvZiB0aGUgZm9ybXMmIzgyMTc7IGNhc2VzLiBUaGUgJiM4MjIwO2xhc3Qgc2hvdCYjODIyMTsgd2lucyBldmVuIHNob3VsZCB0aGVyZSBiZSBjb250cmFkaWN0b3J5IGV2aWRlbmNlIGZyb20gdGhlIGJ1c2luZXNzIGNvbnRleHQgYW5kIHRoZSBwYXJ0aWVzJiM4MjE3OyBwcmlvciBkZWFsaW5ncyBhcyB0byB3aGljaCBzZXQgb2YgdGVybXMgYW5kIGNvbmRpdGlvbnMgPHNwYW4gY2xhc3M9XCJpdFwiPndhczwvc3Bhbj4gaW50ZW5kZWQgdG8gZ292ZXJuLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiUmVzcG9uc2VzIHRvIE9mZmVycyAmbWRhc2g7IFdpdGhkcmF3YWwgYW5kIExhcHNlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNb3VudGZvcmQgdiBTY290dCIsCiAgICAgICAgIlZpY3RvcmlhIEhvdGVsIHYgTW9udGVmaW9yZSIsCiAgICAgICAgIlNodWV5IHYgVW5pdGVkIFN0YXRlcyIsCiAgICAgICAgIkJ5cm5lIHYgVmFuIFRpZW5ob3ZlbiIsCiAgICAgICAgIkRpY2tpbnNvbiB2IERvZGRzIiwKICAgICAgICAiQnV0bGVyIHYgRXgtQ2VsbC1PIiwKICAgICAgICAiRXJyaW5ndG9uIHYgRXJyaW5ndG9uIiwKICAgICAgICAiSHlkZSB2IFdyZW5jaCIsCiAgICAgICAgIlIgdiBDbGFya2UiLAogICAgICAgICJCUlMgdiBBcnRodXIgQ3J1dGNobGV5IiwKICAgICAgICAiU3RldmVuc29uLCBKYWNxdWVzIHYgTWFjTGVhbiIsCiAgICAgICAgIlRla2RhdGEgdiBBbXBoZW5vbCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjMxIiwKICAgICJZRUFSIjogIjE4MjgiLAogICAgIk5BTUUiOiAiUm91dGxlZGdlIHYgR3JhbnQiLAogICAgIkNJVEFUSU9OIjogIlJvdXRsZWRnZSB2IEdyYW50ICgxODI4KSA0IEJpbmcgNjUzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJSZXNwb25zZXMgdG8gT2ZmZXJzIiwKICAgICAgICAiV2l0aGRyYXdhbCBhbmQgTGFwc2UiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFuIG9mZmVyIHZhbGlkIGZvciBhIGNlcnRhaW4gcGVyaW9kIGNhbiBuZXZlcnRoZWxlc3MgYmUgd2l0aGRyYXduIGJ5IHRoZSBvZmZlcm9yIGJlZm9yZSB0aGUgcGVyaW9kIGVsYXBzZXMgJm1kYXNoOyB3aG8sIHRoZXJlIGJlaW5nIG5vIGFjY2VwdGFuY2UgYW5kIGNvbnNpZGVyYXRpb24sIGlzIG5vdCBib3VuZC4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIlJlc3BvbnNlcyB0byBPZmZlcnMgJm1kYXNoOyBXaXRoZHJhd2FsIGFuZCBMYXBzZSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiU2h1ZXkgdiBVbml0ZWQgU3RhdGVzIiwKICAgICAgICAiUm91dGxlZGdlIHYgR3JhbnQiLAogICAgICAgICJWaWN0b3JpYSBIb3RlbCB2IE1vbnRlZmlvcmUiLAogICAgICAgICJEaWNraW5zb24gdiBEb2RkcyIsCiAgICAgICAgIkJ5cm5lIHYgVmFuIFRpZW5ob3ZlbiIsCiAgICAgICAgIlRpbm4gdiBIb2ZmbWFuIiwKICAgICAgICAiVGVrZGF0YSB2IEFtcGhlbm9sIiwKICAgICAgICAiTHV4b3IgdiBDb29wZXIiLAogICAgICAgICJSIHYgQ2xhcmtlIiwKICAgICAgICAiSHlkZSB2IFdyZW5jaCIsCiAgICAgICAgIlN0ZXZlbnNvbiwgSmFjcXVlcyB2IE1hY0xlYW4iLAogICAgICAgICJEYXVsaWEgTHRkIHYgRm91ciBNaWxsYmFuayBOb21pbmVlcyBMdGQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIzMiIsCiAgICAiWUVBUiI6ICIxOTc1IiwKICAgICJOQU1FIjogIk1vdW50Zm9yZCB2IFNjb3R0IiwKICAgICJDSVRBVElPTiI6ICJNb3VudGZvcmQgdiBTY290dCBbMTk3NV0gQWxsIEVSIDE5OCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiUmVzcG9uc2VzIHRvIE9mZmVycyIsCiAgICAgICAgIldpdGhkcmF3YWwgYW5kIExhcHNlIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJJZiB0aGUgcHJvc3BlY3RpdmUgb2ZmZXJlZSBvZiBhbiBvZmZlciB2YWxpZCBkdXJpbmcgYSBjZXJ0YWluIHBlcmlvZCBvbmx5IGhhcyA8c3BhbiBjbGFzcz1cIml0XCI+cGFpZDwvc3Bhbj4gZm9yIHRoZSBjaGFuY2UgdG8gYWNjZXB0LCB0aGVuIGhlIGhhcyBwYWlkIGZvciBhbiBvcHRpb24gdG8gY29udHJhY3QsIGFuZCB0aGUgcHJpbmNpcGxlIG9mZmVyIGNhbm5vdCB2YWxpZGx5IGJlIHdpdGhkcmF3biBiZWZvcmUgdGhlIHBlcmlvZCBlbGFwc2VzLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiQnlybmUgdiBWYW4gVGllbmhvdmVuICgxODgwKSA1IENQRCAzNDQiLAogICAgIk5BTUUiOiAiQnlybmUgdiBWYW4gVGllbmhvdmVuIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNb3VudGZvcmQgdiBTY290dCIsCiAgICAgICAgIlNodWV5IHYgVW5pdGVkIFN0YXRlcyIsCiAgICAgICAgIlZpY3RvcmlhIEhvdGVsIHYgTW9udGVmaW9yZSIsCiAgICAgICAgIlJvdXRsZWRnZSB2IEdyYW50IiwKICAgICAgICAiRGlja2luc29uIHYgRG9kZHMiLAogICAgICAgICJEYXVsaWEgTHRkIHYgRm91ciBNaWxsYmFuayBOb21pbmVlcyBMdGQiLAogICAgICAgICJSIHYgQ2xhcmtlIiwKICAgICAgICAiR2lic29uIC0gQ291bnRlci1PZmZlcnMiLAogICAgICAgICJFcnJpbmd0b24gdiBFcnJpbmd0b24iLAogICAgICAgICJMdXhvciB2IENvb3BlciIsCiAgICAgICAgIldpbGxpYW1zIHYgQ2Fyd2FyZGluZSIsCiAgICAgICAgIkJ1dGxlciB2IEV4LUNlbGwtTyIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiUmVzcG9uc2VzIHRvIE9mZmVycyIsCiAgICAgICAgIldpdGhkcmF3YWwgYW5kIExhcHNlIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgd2l0aGRyYXdhbCBvZiBhbiBvZmZlciBtdXN0IGJlIGNvbW11bmljYXRlZCB0byB0aGUgb2ZmZXJlZSA8c3BhbiBjbGFzcz1cIml0XCI+ZWZmZWN0aXZlbHk8L3NwYW4+LiBUaGUgcG9zdGFsIHJ1bGUgZG9lcyBub3QgYXBwbHkgdG8gc3VjaCBjb21tdW5pY2F0aW9uLiBXZXJlIGl0IHRvIGRvIHNvLCB0aGUgc2VuZGVyIG9mIGFuIGFjY2VwdGFuY2UgYnkgcG9zdCB3b3VsZCBub3Qga25vdyB3aGV0aGVyIHRoZSBvZmZlcm9yIGhhZCByZWNlaXZlZCBpdCBiZWZvcmUgc2VuZGluZyBhIHdpdGhkcmF3YWwuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJSZXNwb25zZXMgdG8gT2ZmZXJzICZtZGFzaDsgV2l0aGRyYXdhbCBhbmQgTGFwc2UiLAogICAgIk5VTUJFUiI6ICIzMyIsCiAgICAiWUVBUiI6ICIxODgwIgp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJSZXNwb25zZXMgdG8gT2ZmZXJzICZtZGFzaDsgV2l0aGRyYXdhbCBhbmQgTGFwc2UiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlJvdXRsZWRnZSB2IEdyYW50IiwKICAgICAgICAiQnlybmUgdiBWYW4gVGllbmhvdmVuIiwKICAgICAgICAiVmljdG9yaWEgSG90ZWwgdiBNb250ZWZpb3JlIiwKICAgICAgICAiU2h1ZXkgdiBVbml0ZWQgU3RhdGVzIiwKICAgICAgICAiTW91bnRmb3JkIHYgU2NvdHQiLAogICAgICAgICJHaWJzb24gLSBDb3VudGVyLU9mZmVycyIsCiAgICAgICAgIkJSUyB2IEFydGh1ciBDcnV0Y2hsZXkiLAogICAgICAgICJTdGV2ZW5zb24sIEphY3F1ZXMgdiBNYWNMZWFuIiwKICAgICAgICAiVGVrZGF0YSB2IEFtcGhlbm9sIiwKICAgICAgICAiUiB2IENsYXJrZSIsCiAgICAgICAgIkVycmluZ3RvbiB2IEVycmluZ3RvbiIsCiAgICAgICAgIkJ1dGxlciB2IEV4LUNlbGwtTyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjM0IiwKICAgICJZRUFSIjogIjE4NzYiLAogICAgIk5BTUUiOiAiRGlja2luc29uIHYgRG9kZHMiLAogICAgIkNJVEFUSU9OIjogIkRpY2tpbnNvbiB2IERvZGRzICgxODc2KSAyIENoIDQ2MyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiUmVzcG9uc2VzIHRvIE9mZmVycyIsCiAgICAgICAgIldpdGhkcmF3YWwgYW5kIExhcHNlIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJDb21tdW5pY2F0aW9uIHRvIHRoZSBvZmZlcmVlIG9mIGFuIG9mZmVyJiM4MjE3O3Mgd2l0aGRyYXdhbCBtYXkgYmUgaW5kaXJlY3QsIGFzIGxvbmcgYXMgdGhlIG9mZmVyZWUga25vd3Mgb2YgaXQuIFNob3VsZCBzdWNoIGFuIG9mZmVyZWUgdGhlbiBwdXJwb3J0IHRvIGFjY2VwdCwgZG9pbmcgc28gd291bGQgaXRzZWxmIGRlbW9uc3RyYXRlIHRoZSBhYnNlbmNlIG9mIGEgY29uc2Vuc3VzIGFkIGlkZW0sIGFuZCBjb3VsZCBub3QgdGhlcmVmb3JlIGJlIGVmZmVjdGl2ZS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiLAogICAgICAgICJUcmVpdGVsIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJSZXNwb25zZXMgdG8gT2ZmZXJzICZtZGFzaDsgV2l0aGRyYXdhbCBhbmQgTGFwc2UiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlZpY3RvcmlhIEhvdGVsIHYgTW9udGVmaW9yZSIsCiAgICAgICAgIk1vdW50Zm9yZCB2IFNjb3R0IiwKICAgICAgICAiRGlja2luc29uIHYgRG9kZHMiLAogICAgICAgICJSb3V0bGVkZ2UgdiBHcmFudCIsCiAgICAgICAgIkJ5cm5lIHYgVmFuIFRpZW5ob3ZlbiIsCiAgICAgICAgIkRhdWxpYSBMdGQgdiBGb3VyIE1pbGxiYW5rIE5vbWluZWVzIEx0ZCIsCiAgICAgICAgIkx1eG9yIHYgQ29vcGVyIiwKICAgICAgICAiVGlubiB2IEhvZmZtYW4iLAogICAgICAgICJTdGV2ZW5zb24sIEphY3F1ZXMgdiBNYWNMZWFuIiwKICAgICAgICAiSHlkZSB2IFdyZW5jaCIsCiAgICAgICAgIldpbGxpYW1zIHYgQ2Fyd2FyZGluZSIsCiAgICAgICAgIkVycmluZ3RvbiB2IEVycmluZ3RvbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjM1IiwKICAgICJZRUFSIjogIjE4NjUiLAogICAgIk5BTUUiOiAiU2h1ZXkgdiBVbml0ZWQgU3RhdGVzIiwKICAgICJDSVRBVElPTiI6ICJTaHVleSB2IFVuaXRlZCBTdGF0ZXMgKDE4NjUpIDkyIFVTIDczIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJSZXNwb25zZXMgdG8gT2ZmZXJzIiwKICAgICAgICAiV2l0aGRyYXdhbCBhbmQgTGFwc2UiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFuIG9mZmVyIG1hZGUgcHVibGljbHkgd2lsbCBiZSBoZWxkIHRvIGhhdmUgYmVlbiB2YWxpZGx5IHdpdGhkcmF3biwgaWYgZG9uZSBzbyBieSB0aGUgc2FtZSBtZWFucy4gVGhlcmUgaXMgbm8gcmVxdWlyZW1lbnQsIGhvd2V2ZXIsIHRoYXQgc3VjaCB3aXRoZHJhd2FsIHNob3VsZCBoYXZlIGJlZW4gc2VlbiBieSBhbnlvbmUgaW4gcGFydGljdWxhciwgZS5nLiwgc29tZW9uZSBlbmdhZ2VkIGluIHBlcmZvcm1pbmcgdGhlIGFjdGlvbiBmb3IgdGhlIG9mZmVyJiM4MjE3O3MgYWNjZXB0YW5jZS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlJhbXNnYXRlIFZpY3RvcmlhIEhvdGVsIHYgTW9udGVmaW9yZSAoMTg2NikgTFIgMSBFeCAxMDkiLAogICAgIk5BTUUiOiAiVmljdG9yaWEgSG90ZWwgdiBNb250ZWZpb3JlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNb3VudGZvcmQgdiBTY290dCIsCiAgICAgICAgIkRpY2tpbnNvbiB2IERvZGRzIiwKICAgICAgICAiQnlybmUgdiBWYW4gVGllbmhvdmVuIiwKICAgICAgICAiUm91dGxlZGdlIHYgR3JhbnQiLAogICAgICAgICJTaHVleSB2IFVuaXRlZCBTdGF0ZXMiLAogICAgICAgICJSIHYgQ2xhcmtlIiwKICAgICAgICAiRXJyaW5ndG9uIHYgRXJyaW5ndG9uIiwKICAgICAgICAiVGlubiB2IEhvZmZtYW4iLAogICAgICAgICJUZWtkYXRhIHYgQW1waGVub2wiLAogICAgICAgICJIeWRlIHYgV3JlbmNoIiwKICAgICAgICAiV2lsbGlhbXMgdiBDYXJ3YXJkaW5lIiwKICAgICAgICAiQnV0bGVyIHYgRXgtQ2VsbC1PIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJSZXNwb25zZXMgdG8gT2ZmZXJzIiwKICAgICAgICAiV2l0aGRyYXdhbCBhbmQgTGFwc2UiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFuIG9mZmVyIHRoYXQgaXMgbm90IGV4cGxpY2l0bHkgb2YgdmFsaWRpdHkgZm9yIGEgbGltaXRlZCBwZXJpb2Qgd2lsbCBuZXZlcnRoZWxlc3MgYmUgZGVlbWVkIHRvIGhhdmUgZWxhcHNlZCwgaW52YWxpZGF0aW5nIGEgcHVycG9ydGVkIGFjY2VwdGFuY2UgY29taW5nIG11Y2ggbGF0ZXIuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJSZXNwb25zZXMgdG8gT2ZmZXJzICZtZGFzaDsgV2l0aGRyYXdhbCBhbmQgTGFwc2UiLAogICAgIk5VTUJFUiI6ICIzNiIsCiAgICAiWUVBUiI6ICIxODY2Igp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJXaWxsaWFtcyB2IENhcndhcmRpbmUgKDE4MzMpIDUgQyAmYW1wOyBQIDU2NiIsCiAgICAiTkFNRSI6ICJXaWxsaWFtcyB2IENhcndhcmRpbmUiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlIgdiBDbGFya2UiLAogICAgICAgICJUaW5uIHYgSG9mZm1hbiIsCiAgICAgICAgIkVycmluZ3RvbiB2IEVycmluZ3RvbiIsCiAgICAgICAgIkx1eG9yIHYgQ29vcGVyIiwKICAgICAgICAiRGF1bGlhIEx0ZCB2IEZvdXIgTWlsbGJhbmsgTm9taW5lZXMgTHRkIiwKICAgICAgICAiR2lic29uIC0gQ291bnRlci1PZmZlcnMiLAogICAgICAgICJCeXJuZSB2IFZhbiBUaWVuaG92ZW4iLAogICAgICAgICJIeWRlIHYgV3JlbmNoIiwKICAgICAgICAiVmljdG9yaWEgSG90ZWwgdiBNb250ZWZpb3JlIiwKICAgICAgICAiU3RldmVuc29uLCBKYWNxdWVzIHYgTWFjTGVhbiIsCiAgICAgICAgIlRla2RhdGEgdiBBbXBoZW5vbCIsCiAgICAgICAgIkJSUyB2IEFydGh1ciBDcnV0Y2hsZXkiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJBY2NlcHRhbmNlIiwKICAgICAgICAiS25vd2xlZGdlIG9mIE9mZmVyIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBbiBhY3Rpb24gY29uZm9ybWluZyB0byB0aGUgcmVxdWlyZW1lbnQgZm9yIGFjY2VwdGFuY2Ugb2YgYSB1bmlsYXRlcmFsIG9mZmVyIHdhcyBoZWxkIHRvIGhhdmUgYWNjZXB0ZWQgdGhlIGNvbnRyYWN0LCBldmVuIHRob3VnaCB0aGUgcGVyc29uIHdhcyB1bmF3YXJlIG9mIHRoZSBvZmZlci4iCiAgICBdLAogICAgIkNBVEVHT1JZIjogIlJlc3BvbnNlcyB0byBPZmZlcnMgJm1kYXNoOyBBY2NlcHRhbmNlICZtZGFzaDsgS25vd2xlZGdlIG9mIE9mZmVyIiwKICAgICJOVU1CRVIiOiAiMzciLAogICAgIllFQVIiOiAiMTgzMyIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiUmVzcG9uc2VzIHRvIE9mZmVycyAmbWRhc2g7IEFjY2VwdGFuY2UgJm1kYXNoOyBLbm93bGVkZ2Ugb2YgT2ZmZXIgJm1kYXNoOyBDcm9zcy1vZmZlcnMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIldpbGxpYW1zIHYgQ2Fyd2FyZGluZSIsCiAgICAgICAgIlIgdiBDbGFya2UiLAogICAgICAgICJEYXVsaWEgTHRkIHYgRm91ciBNaWxsYmFuayBOb21pbmVlcyBMdGQiLAogICAgICAgICJMdXhvciB2IENvb3BlciIsCiAgICAgICAgIkVycmluZ3RvbiB2IEVycmluZ3RvbiIsCiAgICAgICAgIk1vdW50Zm9yZCB2IFNjb3R0IiwKICAgICAgICAiVmljdG9yaWEgSG90ZWwgdiBNb250ZWZpb3JlIiwKICAgICAgICAiRGlja2luc29uIHYgRG9kZHMiLAogICAgICAgICJSb3V0bGVkZ2UgdiBHcmFudCIsCiAgICAgICAgIkJ5cm5lIHYgVmFuIFRpZW5ob3ZlbiIsCiAgICAgICAgIlNodWV5IHYgVW5pdGVkIFN0YXRlcyIsCiAgICAgICAgIlRla2RhdGEgdiBBbXBoZW5vbCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjM4IiwKICAgICJZRUFSIjogIjE4NzMiLAogICAgIk5BTUUiOiAiVGlubiB2IEhvZmZtYW4iLAogICAgIkNJVEFUSU9OIjogIlRpbm4gdiBIb2ZmbWFuICZhbXA7IENvICgxODczKSAyOSBMVCAyNzEiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJBY2NlcHRhbmNlIiwKICAgICAgICAiS25vd2xlZGdlIG9mIE9mZmVyIiwKICAgICAgICAiQ3Jvc3Mtb2ZmZXJzIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJQYXJ0aWVzIHRyZWF0ZWQgYnkgcG9zdCBhYm91dCBzYWxlIG9mIDgwMCB0b25zIG9mIGlyb24uIE9uZSBwYXJ0eSBzZW50IGxldHRlciBvZmZlcmluZyBzYWxlIGF0IDY5cy90b24uIEJlZm9yZSB0aGF0IGxldHRlciBhcnJpdmVkLCB0aGUgb3RoZXIgcGFydHkgc2VudCBsZXR0ZXIgb2ZmZXJpbmcgcHVyY2hhc2UgYXQgNjlzL3Rvbi4gU2Vjb25kIGxldHRlciBoZWxkIGJ5IG1ham9yaXR5IG9mIGNvdXJ0IHRvIGJlIGNvdW50ZXIgb2ZmZXIuIEJ1dCBpbiBvYml0ZXIsIGp1ZGdlbWVudCB0aGF0IG9mZmVycyBjcm9zc2VkIGluIHRoZSBwb3N0IGRvIG5vdCBmb3JtIGEgY29udHJhY3QuIEZ1cnRoZXIgY29tbXVuaWNhdGlvbiB3b3VsZCBoYXZlIGJlZW4gbmVjZXNzYXJ5IChmcm9tIGVpdGhlciBwYXJ0eSkgZm9yIGEgY29udHJhY3QuIiwKICAgICAgICAiQmxhY2tidXJuIEogZXhwcmVzc2VkIHRoZSBvcGluaW9uIHRoYXQgaXQgd291bGQgZ28gYWdhaW5zdCBlc3RhYmxpc2hlZCBwcmFjdGljZSB0byBhZG1pdCB0aGlzIGNvbmNhdGVuYXRpb24gb2YgY2lyY3Vtc3RhbmNlcyBhcyBhIGNvbnRyYWN0LiIsCiAgICAgICAgIkhvbmV5bWFuIEogZGlzc2VudGVkLCBhcyB0aGUgcGFydGllcyB3ZXJlIHBsYWlubHkgYWQgaWRlbS4iLAogICAgICAgICJUaGUgaW1wcmVzc2lvbiBpcyBnaXZlbiB0aGF0IHRoZSBjb25jcmV0ZSBvZiB0aGUgcHJpbmNpcGxlcyBvZiBjb250cmFjdCBsYXcgaGFkIG5vdCwgYnkgdGhpcyB0aW1lLCB3aG9sbHkgZmlybWVkIGFuZCBkcmllZC4iCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkZ1bmN0aW9uYWxseSBpZGVudGljYWwgY3Jvc3NlZC1vZmZlcnMgZG8gbm90IGZvcm0gYSBjb250cmFjdC4iCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIlJlc3BvbnNlcyB0byBPZmZlcnMgJm1kYXNoOyBBY2NlcHRhbmNlICZtZGFzaDsgS25vd2xlZGdlIG9mIE9mZmVyIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJXaWxsaWFtcyB2IENhcndhcmRpbmUiLAogICAgICAgICJUaW5uIHYgSG9mZm1hbiIsCiAgICAgICAgIkRhdWxpYSBMdGQgdiBGb3VyIE1pbGxiYW5rIE5vbWluZWVzIEx0ZCIsCiAgICAgICAgIkVycmluZ3RvbiB2IEVycmluZ3RvbiIsCiAgICAgICAgIkx1eG9yIHYgQ29vcGVyIiwKICAgICAgICAiVGVrZGF0YSB2IEFtcGhlbm9sIiwKICAgICAgICAiQlJTIHYgQXJ0aHVyIENydXRjaGxleSIsCiAgICAgICAgIlZpY3RvcmlhIEhvdGVsIHYgTW9udGVmaW9yZSIsCiAgICAgICAgIlN0ZXZlbnNvbiwgSmFjcXVlcyB2IE1hY0xlYW4iLAogICAgICAgICJIeWRlIHYgV3JlbmNoIiwKICAgICAgICAiR2lic29uIC0gQ291bnRlci1PZmZlcnMiLAogICAgICAgICJSb3V0bGVkZ2UgdiBHcmFudCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjM5IiwKICAgICJZRUFSIjogIjE5MjciLAogICAgIk5BTUUiOiAiUiB2IENsYXJrZSIsCiAgICAiQ0lUQVRJT04iOiAiUiB2IENsYXJrZSAoMTkyNykgNDAgQ0xSIDIyNyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiUmVzcG9uc2VzIHRvIE9mZmVycyIsCiAgICAgICAgIkFjY2VwdGFuY2UiLAogICAgICAgICJLbm93bGVkZ2Ugb2YgT2ZmZXIiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgdW5pbGF0ZXJhbCBjb250cmFjdCBjYW5ub3QgYmUgdmFsaWRseSBhY2NlcHRlZCBieSBzb21lb25lIHVuYXdhcmUgb2YgaXRzIGV4aXN0ZW5jZSAmbWRhc2g7IGVzcGVjaWFsbHkgaWYgdGhleSBoYXBwZW4gdG8gYmUgYSB3YW50ZWQgbWFuLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIk1jS2VuZHJpY2siCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIlJlc3BvbnNlcyB0byBPZmZlcnMgJm1kYXNoOyBBY2NlcHRhbmNlICZtZGFzaDsgSW4gVW5pbGF0ZXJhbCBDb250cmFjdHMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkVycmluZ3RvbiB2IEVycmluZ3RvbiIsCiAgICAgICAgIkRhdWxpYSBMdGQgdiBGb3VyIE1pbGxiYW5rIE5vbWluZWVzIEx0ZCIsCiAgICAgICAgIlRpbm4gdiBIb2ZmbWFuIiwKICAgICAgICAiV2lsbGlhbXMgdiBDYXJ3YXJkaW5lIiwKICAgICAgICAiUiB2IENsYXJrZSIsCiAgICAgICAgIkdpYnNvbiAtIENvdW50ZXItT2ZmZXJzIiwKICAgICAgICAiQlJTIHYgQXJ0aHVyIENydXRjaGxleSIsCiAgICAgICAgIkRpY2tpbnNvbiB2IERvZGRzIiwKICAgICAgICAiSHlkZSB2IFdyZW5jaCIsCiAgICAgICAgIk1vdW50Zm9yZCB2IFNjb3R0IiwKICAgICAgICAiVGVrZGF0YSB2IEFtcGhlbm9sIiwKICAgICAgICAiVmljdG9yaWEgSG90ZWwgdiBNb250ZWZpb3JlIgogICAgXSwKICAgICJOVU1CRVIiOiAiNDAiLAogICAgIllFQVIiOiAiMTk0MSIsCiAgICAiTkFNRSI6ICJMdXhvciB2IENvb3BlciIsCiAgICAiQ0lUQVRJT04iOiAiTHV4b3IgKEVhc3Rib3VybmUpIEx0ZCB2IENvb3BlciBbMTk0MV0gQUMgMTA4IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJSZXNwb25zZXMgdG8gT2ZmZXJzIiwKICAgICAgICAiQWNjZXB0YW5jZSIsCiAgICAgICAgIkluIFVuaWxhdGVyYWwgQ29udHJhY3RzIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgdHJhZGl0aW9uYWwgdmlldywgdGhhdCBhIHVuaWxhdGVyYWwgb2ZmZXIgaXMgdmFsaWRseSBhY2NlcHRlZCB3aGVuIGl0cyBzcGVjaWZpZWQgYWN0aW9uIGlzIDxzcGFuIGNsYXNzPVwiaXRcIj5jb21wbGV0ZTwvc3Bhbj4sIHdpbGwgcHJldmFpbCB3aGVuIHRoZSBhY3Rpb24gZW50YWlscyBubyBzaWduaWZpY2FudCBkZXRyaW1lbnQgdG8gdGhlIG9mZmVyZWUgZGlzdGluZ3Vpc2hhYmxlIGZyb20gYW4gPHNwYW4gY2xhc3M9XCJpdFwiPm9yZGluYXJ5IGJ1c2luZXNzIHJpc2s8L3NwYW4+LiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiUmVzcG9uc2VzIHRvIE9mZmVycyAmbWRhc2g7IEFjY2VwdGFuY2UgJm1kYXNoOyBJbiBVbmlsYXRlcmFsIENvbnRyYWN0cyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRGF1bGlhIEx0ZCB2IEZvdXIgTWlsbGJhbmsgTm9taW5lZXMgTHRkIiwKICAgICAgICAiTHV4b3IgdiBDb29wZXIiLAogICAgICAgICJXaWxsaWFtcyB2IENhcndhcmRpbmUiLAogICAgICAgICJUaW5uIHYgSG9mZm1hbiIsCiAgICAgICAgIlIgdiBDbGFya2UiLAogICAgICAgICJTaHVleSB2IFVuaXRlZCBTdGF0ZXMiLAogICAgICAgICJCdXRsZXIgdiBFeC1DZWxsLU8iLAogICAgICAgICJEaWNraW5zb24gdiBEb2RkcyIsCiAgICAgICAgIlJvdXRsZWRnZSB2IEdyYW50IiwKICAgICAgICAiQnlybmUgdiBWYW4gVGllbmhvdmVuIiwKICAgICAgICAiU3RldmVuc29uLCBKYWNxdWVzIHYgTWFjTGVhbiIsCiAgICAgICAgIk1vdW50Zm9yZCB2IFNjb3R0IgogICAgXSwKICAgICJOVU1CRVIiOiAiNDEiLAogICAgIllFQVIiOiAiMTk1MiIsCiAgICAiTkFNRSI6ICJFcnJpbmd0b24gdiBFcnJpbmd0b24iLAogICAgIkNJVEFUSU9OIjogIkVycmluZ3RvbiB2IEVycmluZ3RvbiBhbmQgV29vZHMgWzE5NTJdIDEgS0IgMjkwIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJSZXNwb25zZXMgdG8gT2ZmZXJzIiwKICAgICAgICAiQWNjZXB0YW5jZSIsCiAgICAgICAgIkluIFVuaWxhdGVyYWwgQ29udHJhY3RzIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJTaG91bGQgdGhlIGFjdGlvbiBmb3IgYWNjZXB0YW5jZSBvZiBhIHVuaWxhdGVyYWwgb2ZmZXIgZW50YWlsIGEgc2lnbmlmaWNhbnQgZGV0cmltZW50IHRvIHRoZSBvZmZlcmVlLCB0aGVuIHRoZSBvZmZlciBtYXkgYmUgZGVlbWVkIHRvIGhhdmUgYmVlbiBhY2NlcHRlZCB3aGVuIGl0cyBwZXJmb3JtYW5jZSA8c3BhbiBjbGFzcz1cIml0XCI+YmVnaW5zPC9zcGFuPiAmbWRhc2g7IGJ5IGNvbnRyYXN0IHRvIHRoZSB0cmFkaXRpb25hbCBhcHByb2FjaCwgaW4gd2hpY2ggYWNjZXB0YW5jZSBvY2N1cnMgd2hlbiB0aGUgYWN0aW9uIGlzIGNvbXBsZXRlLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIsCiAgICAgICAgIkRlbm5pbmciCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIlJlc3BvbnNlcyB0byBPZmZlcnMgJm1kYXNoOyBBY2NlcHRhbmNlICZtZGFzaDsgSW4gVW5pbGF0ZXJhbCBDb250cmFjdHMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkVycmluZ3RvbiB2IEVycmluZ3RvbiIsCiAgICAgICAgIkx1eG9yIHYgQ29vcGVyIiwKICAgICAgICAiVGlubiB2IEhvZmZtYW4iLAogICAgICAgICJSIHYgQ2xhcmtlIiwKICAgICAgICAiV2lsbGlhbXMgdiBDYXJ3YXJkaW5lIiwKICAgICAgICAiTW91bnRmb3JkIHYgU2NvdHQiLAogICAgICAgICJTaHVleSB2IFVuaXRlZCBTdGF0ZXMiLAogICAgICAgICJSb3V0bGVkZ2UgdiBHcmFudCIsCiAgICAgICAgIkJ1dGxlciB2IEV4LUNlbGwtTyIsCiAgICAgICAgIlN0ZXZlbnNvbiwgSmFjcXVlcyB2IE1hY0xlYW4iLAogICAgICAgICJCUlMgdiBBcnRodXIgQ3J1dGNobGV5IiwKICAgICAgICAiVGVrZGF0YSB2IEFtcGhlbm9sIgogICAgXSwKICAgICJOVU1CRVIiOiAiNDIiLAogICAgIllFQVIiOiAiMTk3OCIsCiAgICAiTkFNRSI6ICJEYXVsaWEgTHRkIHYgRm91ciBNaWxsYmFuayBOb21pbmVlcyBMdGQiLAogICAgIkNJVEFUSU9OIjogIkRhdWxpYSBMdGQgdiBGb3VyIE1pbGxiYW5rIE5vbWluZWVzIEx0ZCBbMTk3OF0gQ2ggMjMxIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJSZXNwb25zZXMgdG8gT2ZmZXJzIiwKICAgICAgICAiQWNjZXB0YW5jZSIsCiAgICAgICAgIkluIFVuaWxhdGVyYWwgQ29udHJhY3RzIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJPbmNlIHRoZSBvZmZlcmVlIGhhcyBzdGFydGVkIHRvIHBlcmZvcm0gdGhlIGFjdGlvbiBmb3IgYWNjZXB0YW5jZSBvZiBhIHVuaWxhdGVyYWwgb2ZmZXIsIGl0cyBvZmZlcm9yIG1heSBub3QgZWZmZWN0IHdpdGhkcmF3YWwgYnkgc2NvdGNoaW5nIHRoZSBvZmZlcmVlJiM4MjE3O3MgcGVyZm9ybWFuY2UuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiS2V5IgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJDQVRFR09SWSI6ICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgTmVnYXRpdmUgVGVybXMiLAogICAgICAgICJDb25zaWRlcmF0aW9uIC0gRGV0YWlsIiwKICAgICAgICAiUmVzcG9uc2VzIHRvIE9mZmVycyIsCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgQ29uZmxpY3RpbmcgVGVybXMiLAogICAgICAgICJDb25zaWRlcmF0aW9uIC0gT3ZlcnZpZXciLAogICAgICAgICJNaXN0YWtlIC0gSW50cm9kdWN0aW9uIiwKICAgICAgICAiQ29udHJhY3R1YWwgRHV0aWVzIGFzIENvbnNpZGVyYXRpb24iLAogICAgICAgICJQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiT2ZmZXJzIiwKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBQb3NpdGl2ZSBUZXJtcyIsCiAgICAgICAgIkltcGxpY2F0aW9uIG9mIFRlcm1zIC0gSW50cm8iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQWNjZXB0YW5jZSBtdXN0IGJlIGNvbW11bmljYXRlZCB0byB0aGUgb2ZmZXJvci4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SG9sd2VsbCB2IEh1Z2hlczwvc3Bhbj4sIGFwYXJ0IGZyb20gPHNwYW4gY2xhc3M9XCJpdFwiPnVuaWxhdGVyYWw8L3NwYW4+IG9mZmVycy4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2FybGlsbCAtIEFjY2VwdGFuY2U8L3NwYW4+LiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5CeSBDb25kdWN0PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cIml0XCI+QWN0cyBtYXkgdmFsaWRseSBzaG93IGFjY2VwdGFuY2UsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJyb2dkZW48L3NwYW4+LCBidXQgb25seSBpZiBvZmZlciBkb2VzIGluIGZhY3QgZXhpc3QuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJyaXRpc2ggU3RlZWwgdiBDbGV2ZWxhbmQgQnJpZGdlPC9zcGFuPi48L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QWNjZXB0YW5jZSBtYXkgYmUgZGVtb25zdHJhdGVkIGJ5IDxzcGFuIGNsYXNzPVwiaXRcIj5hY3RzPC9zcGFuPiByYXRoZXIgdGhhbiB3b3JkcywgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QnJvZ2Rlbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Ob3QgYnkgcHV0dGluZyB0aGUgb2ZmZXIgaW4gYSBkcmF3ZXIsIGJ1dCBieSA8c3BhbiBjbGFzcz1cIml0XCI+YWN0aW5nIG9uIGl0PC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkJ1dCBvbmx5IGlmIHRoZXJlIHdhcyBhbiBvZmZlciBpbiB0aGUgZmlyc3QgcGxhY2UuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJyaXRpc2ggU3RlZWwgdiBDbGV2ZWxhbmQgQnJpZGdlPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5CeSBTaWxlbmNlL0luYWN0aW9uPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPk9mZmVycyBkZWNsYXJpbmcgdGhlbXNlbHZlcyBhY2NlcHRlZCBieSB0aGUgb2ZmZXJlZSYjODIxNztzIDxzcGFuIGNsYXNzPVwiaXRcIj5zaWxlbmNlPC9zcGFuPiBhcmUgbm90IHZhbGlkLCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5GZWx0aG91c2UgdiBCaW5kbGV5PC9zcGFuPi48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGh1cyBzYXZpbmcgYSByZWNpcGllbnQgb2YgZnJlcXVlbnQgYW5kIG11bHRpcGxlIG9mZmVycyBmcm9tIGdvaW5nIHRvIHRoZSB0cm91YmxlIG9mIGV4cGxpY2l0bHkgcmVqZWN0aW5nLjwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5TaWxlbmNlIG9mIGJvdGggcGFydGllcyB3aWxsIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGFtb3VudCB0byBhYmFuZG9ubWVudCBvZiBhIGNvbnRyYWN0dWFsIHVuZGVydGFraW5nLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaGUgTGVvbmlkYXMgRDwvc3Bhbj4uPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZXkgbWF5IGFyaXNlIHRocm91Z2ggbXV0dWFsIHVuZXhwcmVzc2VkIHdpc2ggdGhhdCBtYXR0ZXIgd2lsbCBmb3JnZXQgYWJvdXQgdGhlbSwgJiM4MjIwO2RpZSBhIG5hdHVyYWwgZGVhdGguJiM4MjIxOzwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+T3IgdGhyb3VnaCBhbnkgb2YgdXN1YWwgcmVhc29ucyBvZiBhZG1pbmlzdHJhdGl2ZSBidW5nbGluZywgaW5kZWNpc2lvbiwgZG93bnJpZ2h0IDxzcGFuIGNsYXNzPVwiaXRcIj5zbG90aDwvc3Bhbj4sIGV0Yy48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+UmVwdWRpYXRpb24gb2YgYSBjb250cmFjdCBpbiBicmVhY2ggd2lsbCwgbmV2ZXJ0aGVsZXNzLCBiZSBkZWVtZWQgdG8gYmUgJiM4MjIwO2FjY2VwdGVkJiM4MjIxOyBieSB0aGUgb3RoZXIgcGFydHkmIzgyMTc7cyBzaWxlbmNlLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QWNjZXB0YW5jZSBzdWJqZWN0IHRvIG5vIGluZGljYXRpb24gdG8gY29udHJhcnkgYmVmb3JlIGEgZ2l2ZW4gZGF0ZSZtZGFzaDthbmQgcmVtYWlucyBzaWxlbnQmbWRhc2g7dGhlIG9mZmVyIHZhbGlkbHkgYWNjZXB0ZWQgYWZ0ZXIgdGhhdCBkYXRlLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBTZWxlY3Rtb3ZlPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5NZWFucyBvZiBUcmFuc21pc3Npb248L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiaXRcIj5PZmZlcm9yIG1heSBub21pbmF0ZSBleGNsdXNpdmUgbW9kZTogPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RWxpYXNvbiB2IEhlbnNoYXc8L3NwYW4+LCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NdWxjYWlyZSB2IE5ld3MgR3JvdXA8L3NwYW4+LiAgRWxlY3Ryb25pYyBhY2NlcHRhbmNlIHZhbGlkIG9ubHkgb24gcmVjZWlwdDogPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RW50b3JlcyB2IE1pbGVzPC9zcGFuPi48L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QW4gb2ZmZXJvciBpcyBmcmVlIHRvIHN0aXB1bGF0ZSB0aGUgbWVhbnMgYnkgd2hpY2ggYWNjZXB0YW5jZSBpcyB0byBiZSBjb21tdW5pY2F0ZWQuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkVsaWFzb24gdiBIZW5zaGF3PC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFjY2VwdGFuY2UgdHJhbnNtaXR0ZWQgZWxlY3Ryb25pY2FsbHkgaXMgdmFsaWQgd2hlbiByZWNlaXZlZC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RW50b3JlcyB2IE1pbGVzPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFuIG9mZmVyb3IgYWxsb3dpbmcgZWxlY3Ryb25pYyBhY2NlcHRhbmNlIG1heSBub3QgcmVseSBvbiBmYWlsdXJlIHRvIG9wZXJhdGUgZGV2aWNlLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaGUgQnJpbW5lczwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+UG9zdGFsIFJ1bGU8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+JiM4MjIwO1Bvc3RpbmcmIzgyMjE7IG1lYW5zIGhhbmRpbmcgdG8gdGhlIGNvbnRyb2wgb2YgdGhlIHBvc3Qgb2ZmaWNlLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BZGFtcyB2IExpbnNlbGw8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiaXRcIj5FaXRoZXIgYnk8L3NwYW4+ICZtZGFzaDs8L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFBvcHBpbmcgaXQgaW50byBhIHBpbGxhciBib3guPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gSGFuZGluZyB0byBhbiBlbXBsb3llZSA8c3BhbiBjbGFzcz1cIml0XCI+YXV0aG9yaXNlZCB0byByZWNlaXZlIG1haWw8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IENmLiBoYW5kZWQgdG8gYSBwb3N0bWFuLCB3aGljaCA8c3BhbiBjbGFzcz1cIml0XCI+d291bGRuJiM4MjE3O3Q8L3NwYW4+IGNvdW50LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZSBMb25kb24gYW5kIE5vcnRoZXJuIEJhbms8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJpdFwiPkl0IGFwcGxpZXM8L3NwYW4+ICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5FdmVuIGlmIHRoZSBsZXR0ZXIgbmV2ZXIgYXJyaXZlcy4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SG91c2Vob2xkIEZpcmUgSW5zdXJhbmNlIHYgR3JhbnQ8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+V2hlcmUgcGFydGllcyBjb3VsZCByZWFzb25hYmx5IGJlIHNhaWQgdG8gaGF2ZSBjb250ZW1wbGF0ZWQgdGhhdCBhY2NlcHRhbmNlIG1pZ2h0IGJlIHBvc3RlZC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SGVudGhvcm4gdiBGcmFzZXI8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJpdFwiPkl0IGRvZXMgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj4gYXBwbHk8L3NwYW4+ICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5XaGVuIHRoZSBvZmZlciYjODIxNztzIGxhbmd1YWdlIGltcGxpY2l0bHkgJiM4MjIwO291c3RzJiM4MjIxOyBieSByZXF1aXJpbmcgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdGljZTwvc3Bhbj4gb2YgYWNjZXB0YW5jZSAod2hpY2ggbmVjZXNzaXRhdGVzIHRoZSBvZmZlcm9yIGJlaW5nIDxzcGFuIGNsYXNzPVwiaXRcIj5tYWRlIGF3YXJlPC9zcGFuPikuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhvbHdlbGwgdiBIdWdoZXM8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+V2hlbiBtaXNhZGRyZXNzZWQuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPktvcmJldGlzIHYgVHJhbnNncmFpbiBTaGlwcGluZzwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UbyA8c3BhbiBjbGFzcz1cIml0XCI+aW1tZWRpYXRlPC9zcGFuPiBlbGVjdHJvbmljIGNvbW11bmljYXRpb24uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkVudG9yZXMgdiBNaWxlczwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UbyBlbWFpbC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R3JlZW5jbG9zZSB2IE5hdCBXZXN0PC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRvIGNvbW11bmljYXRpb24gPHNwYW4gY2xhc3M9XCJpdFwiPm90aGVyPC9zcGFuPiB0aGFuIGFjY2VwdGFuY2UuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+UG9zdGFsIFJ1bGU6IHdpdGhkcmF3YWwgb2YgYWNjZXB0YW5jZT88L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IE5vIGF1dGhvcml0eSBmb3Igd2hldGhlciwgd2hlbiB0aGUgQSBhY2NlcHRzIGJ5IHBvc3QgPHNwYW4gY2xhc3M9XCJpdFwiPmJ1dCBzdWJzZXF1ZW50bHkgd2l0aGRyYXdzIHRoYXQgYWNjZXB0YW5jZTwvc3Bhbj4gaW4gYSBtYW5uZXIgcmVhY2hpbmcgdGhlIG9mZmVyb3IgPHNwYW4gY2xhc3M9XCJpdFwiPmJlZm9yZSB0aGUgYWNjZXB0YW5jZTwvc3Bhbj4sIHdoZXRoZXIgdGhhdCB3aXRoZHJhd2FsIGlzIGVmZmVjdGl2ZSBvciBub3QuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgZGVkdWN0aXZlIGFwcHJvYWNoIHdvdWxkIGJlIHRoYXQgYWNjZXB0YW5jZSBpcyBiaW5kaW5nIG9uY2UgPHNwYW4gY2xhc3M9XCJpdFwiPnBvc3RlZDwvc3Bhbj4sIHNvIHN1YnNlcXVlbnQgd2l0aGRyYXdhbCBpcyA8c3BhbiBjbGFzcz1cIml0XCI+aW5lZmZlY3RpdmU8L3NwYW4+LCB3aGV0aGVyIHJlYWNoaW5nIG9mZmVyb3IgYmVmb3JlIG9yIGFmdGVyIGFjY2VwdGFuY2UgZG9lcy48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEJ1dCB0aGF0IHdvdWxkIGJlIGJsb29keSBzaWxseS48L3NwYW4+PC9saT48L3VsPjwvdWw+IgogICAgXSwKICAgICJOVU1CRVIiOiAiNDMiLAogICAgIk5BTUUiOiAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIgp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDbyAoMTg5MykgMSBRQiAyNTYiLAogICAgIk5BTUUiOiAiQ2FybGlsbCAtIEFjY2VwdGFuY2UiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkJyb2dkZW4gdiBNZXRyb3BvbGl0YW4gUmFpbHdheSIsCiAgICAgICAgIkJyaXRpc2ggU3RlZWwgdiBDbGV2ZWxhbmQgQnJpZGdlIiwKICAgICAgICAiSG91c2Vob2xkIEZpcmUgSW5zdXJhbmNlIHYgR3JhbnQiLAogICAgICAgICJWaXRvbCBTQSB2IE5vcmVsZiBMdGQiLAogICAgICAgICJFbnRvcmVzIHYgTWlsZXMiLAogICAgICAgICJSZSBTZWxlY3Rtb3ZlIiwKICAgICAgICAiSGVudGhvcm4gdiBGcmFzZXIiLAogICAgICAgICJIb2x3ZWxsIHYgSHVnaGVzIiwKICAgICAgICAiRmVsdGhvdXNlIHYgQmluZGxleSIsCiAgICAgICAgIkVsaWFzb24gdiBIZW5zaGF3IiwKICAgICAgICAiTXVsY2FpcmUgdiBOZXdzIEdyb3VwIiwKICAgICAgICAiVGhlIEJyaW1uZXMiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSIsCiAgICAgICAgIkFjY2VwdGFuY2UgQnkgQ29uZHVjdCIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIG1ha2VyIG9mIGEgdW5pbGF0ZXJhbCBvZmZlciBpbXBsaWNpdGx5IGRpc3BlbnNlcyB3aXRoIHRoZSBuZWNlc3NpdHkgZm9yIGFjY2VwdGFuY2UgdG8gYmUgY29tbXVuaWNhdGUgaWYgaXQgc3BlY2lmaWVzIGFuIGFjdGlvbiB0aGUgcGVyZm9ybWFuY2Ugb2Ygd2hpY2ggZG9lcyBub3QgcGVyIHNlIG5lY2Vzc2l0YXRlIGNvbW11bmljYXRpb24gd2l0aCBvZmZlcm9yLiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlICZtZGFzaDsgQWNjZXB0YW5jZSBCeSBDb25kdWN0IiwKICAgICJOVU1CRVIiOiAiNDQiLAogICAgIllFQVIiOiAiMTg5MyIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiQnJvZ2RlbiB2IE1ldHJvcG9saXRhbiBSYWlsd2F5ICgxODc2KSAyIEFwcCBDYXMgNjY2IiwKICAgICJOQU1FIjogIkJyb2dkZW4gdiBNZXRyb3BvbGl0YW4gUmFpbHdheSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2FybGlsbCAtIEFjY2VwdGFuY2UiLAogICAgICAgICJCcml0aXNoIFN0ZWVsIHYgQ2xldmVsYW5kIEJyaWRnZSIsCiAgICAgICAgIkhvdXNlaG9sZCBGaXJlIEluc3VyYW5jZSB2IEdyYW50IiwKICAgICAgICAiUmUgU2VsZWN0bW92ZSIsCiAgICAgICAgIkVsaWFzb24gdiBIZW5zaGF3IiwKICAgICAgICAiVml0b2wgU0EgdiBOb3JlbGYgTHRkIiwKICAgICAgICAiSGVudGhvcm4gdiBGcmFzZXIiLAogICAgICAgICJNdWxjYWlyZSB2IE5ld3MgR3JvdXAiLAogICAgICAgICJUaGUgQnJpbW5lcyIsCiAgICAgICAgIkZlbHRob3VzZSB2IEJpbmRsZXkiLAogICAgICAgICJFbnRvcmVzIHYgTWlsZXMiLAogICAgICAgICJIb2x3ZWxsIHYgSHVnaGVzIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UiLAogICAgICAgICJBY2NlcHRhbmNlIEJ5IENvbmR1Y3QiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFuIGFjdCBmcm9tIHdoaWNoIGFjY2VwdGFuY2Ugb2YgYW4gb2ZmZXIgY2FuIHJlYXNvbmFibHkgYmUgaW5mZXJyZWQgYnkgdGhlIG9mZmVyb3IgaXMgPHNwYW4gY2xhc3M9XCJpdFwiPnZhbGlkIGFjY2VwdGFuY2U8L3NwYW4+LCBkZXNwaXRlIHRoZSBhYnNlbmNlIG9mIGV4cGxpY2l0IHdvcmRzIHRvIHRoYXQgZWZmZWN0LiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlICZtZGFzaDsgQWNjZXB0YW5jZSBCeSBDb25kdWN0IiwKICAgICJOVU1CRVIiOiAiNDUiLAogICAgIllFQVIiOiAiMTg3NiIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiQnJpdGlzaCBTdGVlbCBDb3Jwb3JhdGlvbiB2IENsZXZlbGFuZCBCcmlkZ2UgYW5kIEVuZ2luZWVyaW5nIENvIEx0ZCBbMTk4NF0gMSBBbGwgRVIgNTA0IiwKICAgICJOQU1FIjogIkJyaXRpc2ggU3RlZWwgdiBDbGV2ZWxhbmQgQnJpZGdlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJCcm9nZGVuIHYgTWV0cm9wb2xpdGFuIFJhaWx3YXkiLAogICAgICAgICJDYXJsaWxsIC0gQWNjZXB0YW5jZSIsCiAgICAgICAgIlRoZSBCcmltbmVzIiwKICAgICAgICAiTXVsY2FpcmUgdiBOZXdzIEdyb3VwIiwKICAgICAgICAiSG9sd2VsbCB2IEh1Z2hlcyIsCiAgICAgICAgIkhvdXNlaG9sZCBGaXJlIEluc3VyYW5jZSB2IEdyYW50IiwKICAgICAgICAiUmUgU2VsZWN0bW92ZSIsCiAgICAgICAgIlRoZSBMZW9uaWRhcyBEIiwKICAgICAgICAiRWxpYXNvbiB2IEhlbnNoYXciLAogICAgICAgICJGZWx0aG91c2UgdiBCaW5kbGV5IiwKICAgICAgICAiRW50b3JlcyB2IE1pbGVzIiwKICAgICAgICAiVml0b2wgU0EgdiBOb3JlbGYgTHRkIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UiLAogICAgICAgICJBY2NlcHRhbmNlIEJ5IENvbmR1Y3QiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFjdHMgY2Fubm90IG5vdCBiZSB0YWtlbiBhcyBhY2NlcHRhbmNlIG9mIGFuIG9mZmVyIGlmIG5vIGNsZWFyIG9mZmVyIGhhcyBiZWVuIG1hZGUsIGUuZy4sIGlmIHRoZSBsaW5lIGZyb20gbmVnb3RpYXRpb24gdG8gb2ZmZXIgaGFzIG5vdCBvYnZpb3VzbHkgYmVlbiBjcm9zc2VkLiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlICZtZGFzaDsgQWNjZXB0YW5jZSBCeSBDb25kdWN0IiwKICAgICJOVU1CRVIiOiAiNDYiLAogICAgIllFQVIiOiAiMTk4NCIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiRmVsdGhvdXNlIHYgQmluZGxleSAoMTg2MikgMTEgQ0JOUyA4NjkiLAogICAgIk5BTUUiOiAiRmVsdGhvdXNlIHYgQmluZGxleSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiVGhlIExlb25pZGFzIEQiLAogICAgICAgICJSZSBTZWxlY3Rtb3ZlIiwKICAgICAgICAiVml0b2wgU0EgdiBOb3JlbGYgTHRkIiwKICAgICAgICAiQ2FybGlsbCAtIEFjY2VwdGFuY2UiLAogICAgICAgICJIb2x3ZWxsIHYgSHVnaGVzIiwKICAgICAgICAiSGVudGhvcm4gdiBGcmFzZXIiLAogICAgICAgICJCcm9nZGVuIHYgTWV0cm9wb2xpdGFuIFJhaWx3YXkiLAogICAgICAgICJCcml0aXNoIFN0ZWVsIHYgQ2xldmVsYW5kIEJyaWRnZSIsCiAgICAgICAgIk11bGNhaXJlIHYgTmV3cyBHcm91cCIsCiAgICAgICAgIkVudG9yZXMgdiBNaWxlcyIsCiAgICAgICAgIkhvdXNlaG9sZCBGaXJlIEluc3VyYW5jZSB2IEdyYW50IiwKICAgICAgICAiRWxpYXNvbiB2IEhlbnNoYXciCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSIsCiAgICAgICAgIkFjY2VwdGFuY2UgQnkgU2lsZW5jZS9JbmFjdGl2aXR5IgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBbiBvZmZlcmVlJiM4MjE3O3Mgc2lsZW5jZSBhbmQgaW5hY3Rpb24gaXMgaW5jYXBhYmxlIG9mIGJlaW5nIHZhbGlkIGFjY2VwdGFuY2UsIGV2ZW4gc2hvdWxkIHRoZSB0ZXJtcyBvZiB0aGUgb2ZmZXIgc3RpcHVsYXRlIG90aGVyd2lzZS4iCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSAmbWRhc2g7IEFjY2VwdGFuY2UgQnkgU2lsZW5jZS9JbmFjdGl2aXR5IiwKICAgICJOVU1CRVIiOiAiNDciLAogICAgIllFQVIiOiAiMTg2MiIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlICZtZGFzaDsgQWNjZXB0YW5jZSBCeSBTaWxlbmNlL0luYWN0aXZpdHkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkZlbHRob3VzZSB2IEJpbmRsZXkiLAogICAgICAgICJWaXRvbCBTQSB2IE5vcmVsZiBMdGQiLAogICAgICAgICJSZSBTZWxlY3Rtb3ZlIiwKICAgICAgICAiQ2FybGlsbCAtIEFjY2VwdGFuY2UiLAogICAgICAgICJNdWxjYWlyZSB2IE5ld3MgR3JvdXAiLAogICAgICAgICJIb3VzZWhvbGQgRmlyZSBJbnN1cmFuY2UgdiBHcmFudCIsCiAgICAgICAgIlRoZSBCcmltbmVzIiwKICAgICAgICAiSG9sd2VsbCB2IEh1Z2hlcyIsCiAgICAgICAgIkJyaXRpc2ggU3RlZWwgdiBDbGV2ZWxhbmQgQnJpZGdlIiwKICAgICAgICAiSGVudGhvcm4gdiBGcmFzZXIiLAogICAgICAgICJFbGlhc29uIHYgSGVuc2hhdyIsCiAgICAgICAgIkVudG9yZXMgdiBNaWxlcyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjQ4IiwKICAgICJZRUFSIjogIjE5ODUiLAogICAgIk5BTUUiOiAiVGhlIExlb25pZGFzIEQiLAogICAgIkNJVEFUSU9OIjogIlRoZSBMZW9uaWRhcyBEIFsxOTg1XSAxIFdMUiA5MjUiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSIsCiAgICAgICAgIkFjY2VwdGFuY2UgQnkgU2lsZW5jZS9JbmFjdGl2aXR5IgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBbiBhZ3JlZW1lbnQgdG8gYWJhbmRvbiBhIGNvdXJzZSBvZiBhY3Rpb24gb24gd2hpY2ggcGFydGllcyB0byBhIGNvbnRyYWN0IGVuZ2FnZWQsIHN1Y2ggYXMgYXJiaXRyYXRpb24sIG1heSBub3QgYmUgaW5mZXJyZWQgZnJvbSB0aGUgcHJvdHJhY3RlZCBzaWxlbmNlIG9mIGJvdGggcGFydGllcy4gQWx0aG91Z2ggbG9uZyBzaWxlbmNlIGFuZCBpbmFjdGlvbiBvZnRlbiBjb21lcyByZWZsZWN0cyBhIHNoYXJlZCBkZXNpcmUgdG8gbGV0IGEgbWF0dGVyIGV2YXBvcmF0ZSwgc2lsZW5jZSBhbmQgaW5hY3Rpb24gYXJlIGFsc28gY29uc2lzdGVudCB3aXRoIGZvcmdldGZ1bG5lc3MsIHNsb3RoIGFuZCBhZG1pbmlzdHJhdGl2ZSBmdWNrdXAuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiVHJlaXRlbCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlICZtZGFzaDsgQWNjZXB0YW5jZSBCeSBTaWxlbmNlL0luYWN0aXZpdHkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlRoZSBMZW9uaWRhcyBEIiwKICAgICAgICAiRmVsdGhvdXNlIHYgQmluZGxleSIsCiAgICAgICAgIlJlIFNlbGVjdG1vdmUiLAogICAgICAgICJDYXJsaWxsIC0gQWNjZXB0YW5jZSIsCiAgICAgICAgIkJyaXRpc2ggU3RlZWwgdiBDbGV2ZWxhbmQgQnJpZGdlIiwKICAgICAgICAiVGhlIEJyaW1uZXMiLAogICAgICAgICJIb2x3ZWxsIHYgSHVnaGVzIiwKICAgICAgICAiTXVsY2FpcmUgdiBOZXdzIEdyb3VwIiwKICAgICAgICAiQnJvZ2RlbiB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IiwKICAgICAgICAiRWxpYXNvbiB2IEhlbnNoYXciLAogICAgICAgICJIb3VzZWhvbGQgRmlyZSBJbnN1cmFuY2UgdiBHcmFudCIsCiAgICAgICAgIkhlbnRob3JuIHYgRnJhc2VyIgogICAgXSwKICAgICJOVU1CRVIiOiAiNDkiLAogICAgIllFQVIiOiAiMTk5NiIsCiAgICAiTkFNRSI6ICJWaXRvbCBTQSB2IE5vcmVsZiBMdGQiLAogICAgIkNJVEFUSU9OIjogIlZpdG9sIFNBIHYgTm9yZWxmIEx0ZCBbMTk5Nl0gQUMgNjAwIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UiLAogICAgICAgICJBY2NlcHRhbmNlIEJ5IFNpbGVuY2UvSW5hY3Rpdml0eSIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIHJ1bGUgYWdhaW5zdCBhY2NlcHRhbmNlIGJ5IHNpbGVuY2Ugb3IgaW5hY3Rpb24gZG9lcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBhcHBseSB0byB0aGUgcmVwdWRpYXRpb24gb2YgYSBjb250cmFjdCBieSBvbmUgcGFydHksIHdoaWNoIHRoZSBvdGhlciBoYXMgYnJlYWNoZWQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiVHJlaXRlbCIsCiAgICAgICAgIlN0ZXluIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UgJm1kYXNoOyBBY2NlcHRhbmNlIEJ5IFNpbGVuY2UvSW5hY3Rpdml0eSIsCiAgICAiLS1DQVRFR09SWSI6ICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2U7IEFjY2VwdGFuY2UgQnkgU2lsZW5jZS9JbmFjdGl2aXR5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJUaGUgTGVvbmlkYXMgRCIsCiAgICAgICAgIlZpdG9sIFNBIHYgTm9yZWxmIEx0ZCIsCiAgICAgICAgIkZlbHRob3VzZSB2IEJpbmRsZXkiLAogICAgICAgICJIZW50aG9ybiB2IEZyYXNlciIsCiAgICAgICAgIlRoZSBCcmltbmVzIiwKICAgICAgICAiRWxpYXNvbiB2IEhlbnNoYXciLAogICAgICAgICJIb2x3ZWxsIHYgSHVnaGVzIiwKICAgICAgICAiQnJpdGlzaCBTdGVlbCB2IENsZXZlbGFuZCBCcmlkZ2UiLAogICAgICAgICJFbnRvcmVzIHYgTWlsZXMiLAogICAgICAgICJDYXJsaWxsIC0gQWNjZXB0YW5jZSIsCiAgICAgICAgIkhvdXNlaG9sZCBGaXJlIEluc3VyYW5jZSB2IEdyYW50IiwKICAgICAgICAiQnJvZ2RlbiB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IgogICAgXSwKICAgICItLUhFTEQiOiAiLi4uIiwKICAgICJZRUFSIjogIjE5OTUiLAogICAgIk5BTUUiOiAiUmUgU2VsZWN0bW92ZSIsCiAgICAiLS1OQU1FIjogIkRyZXNkbmVyIEtsZWlud29ydCBMdGQgdiBBdHRyaWxsIiwKICAgICJDSVRBVElPTiI6ICJSZSBTZWxlY3Rtb3ZlIEx0ZCBbMTk5NV0gMSBXTFIgNDc0IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UiLAogICAgICAgICJBY2NlcHRhbmNlIEJ5IFNpbGVuY2UvSW5hY3Rpdml0eSIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiT2JpdGVyLCBQZXRlciBHaWJzb24gSmFoaHN0aWNlOiB3aGVuIGFuIG9mZmVyZWUgZGVjbGFyZXMgdGhlIG9mZmVyIHNob3VsZCBiZSBjb25zaWRlcmVkIGFjY2VwdGVkLCB1bmxlc3MgYnkgYSBjZXJ0YWluIHRpbWUgYW4gaW5kaWNhdGlvbiBpcyBnaXZlbiB0byB0aGUgY29udHJhcnksIHRoZSBvZmZlciBoYXMgYmVlbiB2YWxpZGx5IGFjY2VwdGVkLiIKICAgIF0sCiAgICAiLS1DSVRBVElPTiI6ICJEcmVzZG5lciBLbGVpbndvcnQgTHRkIHYgQXR0cmlsbCBbMjAxM10gRVdDQSBDaXYgMzk0IiwKICAgICJOVU1CRVIiOiAiNTAiLAogICAgIkZMQUdTIjogWwogICAgICAgICJQZXRlciBHaWJzb24iCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIk11bGNhaXJlIHYgTmV3cyBHcm91cCBbMjAxMV0gRVdIQyAzNDY5IENoIiwKICAgICJOQU1FIjogIk11bGNhaXJlIHYgTmV3cyBHcm91cCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRWxpYXNvbiB2IEhlbnNoYXciLAogICAgICAgICJFbnRvcmVzIHYgTWlsZXMiLAogICAgICAgICJUaGUgQnJpbW5lcyIsCiAgICAgICAgIkJyb2dkZW4gdiBNZXRyb3BvbGl0YW4gUmFpbHdheSIsCiAgICAgICAgIlRoZSBMZW9uaWRhcyBEIiwKICAgICAgICAiQnJpdGlzaCBTdGVlbCB2IENsZXZlbGFuZCBCcmlkZ2UiLAogICAgICAgICJGZWx0aG91c2UgdiBCaW5kbGV5IiwKICAgICAgICAiVml0b2wgU0EgdiBOb3JlbGYgTHRkIiwKICAgICAgICAiUmUgU2VsZWN0bW92ZSIsCiAgICAgICAgIkhvdXNlaG9sZCBGaXJlIEluc3VyYW5jZSB2IEdyYW50IiwKICAgICAgICAiSGVudGhvcm4gdiBGcmFzZXIiLAogICAgICAgICJDYXJsaWxsIC0gQWNjZXB0YW5jZSIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIiwKICAgICAgICAiVHJhbnNtaXNzaW9uIG9mIEFjY2VwdGFuY2UiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFuIG9mZmVyb3IgaXMgZnJlZSB0byBzdGlwdWxhdGUgdGhhdCBhbiBvZmZlciBjYW4gb25seSBiZSB2YWxpZGx5IGFjY2VwdGVkIGluIGEgcGFydGljdWxhciB3YXkuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UgJm1kYXNoOyBUcmFuc21pc3Npb24gb2YgQWNjZXB0YW5jZSIsCiAgICAiTlVNQkVSIjogIjUxIiwKICAgICJZRUFSIjogIjIwMTEiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIkVsaWFzb24gdiBIZW5zaGF3ICgxODE5KSBXaGVhdCAyMjUiLAogICAgIk5BTUUiOiAiRWxpYXNvbiB2IEhlbnNoYXciLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlRoZSBCcmltbmVzIiwKICAgICAgICAiRW50b3JlcyB2IE1pbGVzIiwKICAgICAgICAiTXVsY2FpcmUgdiBOZXdzIEdyb3VwIiwKICAgICAgICAiRmVsdGhvdXNlIHYgQmluZGxleSIsCiAgICAgICAgIkJyaXRpc2ggU3RlZWwgdiBDbGV2ZWxhbmQgQnJpZGdlIiwKICAgICAgICAiUmUgU2VsZWN0bW92ZSIsCiAgICAgICAgIkhvbHdlbGwgdiBIdWdoZXMiLAogICAgICAgICJWaXRvbCBTQSB2IE5vcmVsZiBMdGQiLAogICAgICAgICJIb3VzZWhvbGQgRmlyZSBJbnN1cmFuY2UgdiBHcmFudCIsCiAgICAgICAgIlRoZSBMZW9uaWRhcyBEIiwKICAgICAgICAiSGVudGhvcm4gdiBGcmFzZXIiLAogICAgICAgICJDYXJsaWxsIC0gQWNjZXB0YW5jZSIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIiwKICAgICAgICAiVHJhbnNtaXNzaW9uIG9mIEFjY2VwdGFuY2UiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFuIG9mZmVyb3IgaXMgZnJlZSB0byBzcGVjaWZ5IHRoZSBtZWFucyBieSB3aGljaCBhY2NlcHRhbmNlIHNob3VsZCBiZSBjb21tdW5pY2F0ZWQuIEFjY2VwdGFuY2VzIGNvbW11bmljYXRlZCBieSBvdGhlciBtZWFucyB3aWxsIGJlIGludmFsaWQgb25seSBzaG91bGQgdGhhdCBvdGhlciBtZWFucyBiZSBleGNsdWRlZCBieSB0aGUgc3RpcHVsYXRpb24sIG9yIGJ5IHRoZSByZWFzb24gZm9yIHdoaWNoIHN0aXB1bGF0aW9uIHdhcyBtYWRlLiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlICZtZGFzaDsgVHJhbnNtaXNzaW9uIG9mIEFjY2VwdGFuY2UiLAogICAgIk5VTUJFUiI6ICI1MiIsCiAgICAiWUVBUiI6ICIxODE5Igp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UgJm1kYXNoOyBUcmFuc21pc3Npb24gb2YgQWNjZXB0YW5jZSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiVGhlIEJyaW1uZXMiLAogICAgICAgICJNdWxjYWlyZSB2IE5ld3MgR3JvdXAiLAogICAgICAgICJFbGlhc29uIHYgSGVuc2hhdyIsCiAgICAgICAgIkZlbHRob3VzZSB2IEJpbmRsZXkiLAogICAgICAgICJIb3VzZWhvbGQgRmlyZSBJbnN1cmFuY2UgdiBHcmFudCIsCiAgICAgICAgIkNhcmxpbGwgLSBBY2NlcHRhbmNlIiwKICAgICAgICAiQnJpdGlzaCBTdGVlbCB2IENsZXZlbGFuZCBCcmlkZ2UiLAogICAgICAgICJIb2x3ZWxsIHYgSHVnaGVzIiwKICAgICAgICAiQnJvZ2RlbiB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IiwKICAgICAgICAiVGhlIExlb25pZGFzIEQiLAogICAgICAgICJSZSBTZWxlY3Rtb3ZlIiwKICAgICAgICAiSGVudGhvcm4gdiBGcmFzZXIiCiAgICBdLAogICAgIk5VTUJFUiI6ICI1MyIsCiAgICAiWUVBUiI6ICIxOTU1IiwKICAgICJOQU1FIjogIkVudG9yZXMgdiBNaWxlcyIsCiAgICAiQ0lUQVRJT04iOiAiRW50b3JlcyB2IE1pbGVzIEZhciBFYXN0IENvcnBvcmF0aW9uIFsxOTU1XSAyIFFCIDMyNyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIiwKICAgICAgICAiVHJhbnNtaXNzaW9uIG9mIEFjY2VwdGFuY2UiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFuIGFjY2VwdGFuY2UgdHJhbnNtaXR0ZWQgZWxlY3Ryb25pY2FsbHkgd2lsbCBiZSBkZWVtZWQgdG8gYmUgYWNjZXB0ZWQgYXQgdGhlIHRpbWUgYW5kIHBsYWNlIG9mIGl0cyByZWNlaXB0LiBTaG91bGQgYSBtZXNzYWdlIGFjY2VwdGluZyBhbiBvZmZlciBub3QgZ2V0IHRocm91Z2gsIGJ1dCB0aGUgc2VuZGVyIHJlYXNvbmFibHkgYmVsaWV2ZXMgaXQgaGFzLCB0aGUgb2ZmZXIgd2lsbCBub3QgaGF2ZSBiZWVuIGFjY2VwdGVkLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkRlbm5pbmciCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlRoZSBCcmltbmVzIFsxOTc1XSBRQiA5MjkiLAogICAgIk5BTUUiOiAiVGhlIEJyaW1uZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkVudG9yZXMgdiBNaWxlcyIsCiAgICAgICAgIkVsaWFzb24gdiBIZW5zaGF3IiwKICAgICAgICAiTXVsY2FpcmUgdiBOZXdzIEdyb3VwIiwKICAgICAgICAiVml0b2wgU0EgdiBOb3JlbGYgTHRkIiwKICAgICAgICAiQnJpdGlzaCBTdGVlbCB2IENsZXZlbGFuZCBCcmlkZ2UiLAogICAgICAgICJIb3VzZWhvbGQgRmlyZSBJbnN1cmFuY2UgdiBHcmFudCIsCiAgICAgICAgIkhlbnRob3JuIHYgRnJhc2VyIiwKICAgICAgICAiUmUgU2VsZWN0bW92ZSIsCiAgICAgICAgIkhvbHdlbGwgdiBIdWdoZXMiLAogICAgICAgICJDYXJsaWxsIC0gQWNjZXB0YW5jZSIsCiAgICAgICAgIkZlbHRob3VzZSB2IEJpbmRsZXkiLAogICAgICAgICJUaGUgTGVvbmlkYXMgRCIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIiwKICAgICAgICAiVHJhbnNtaXNzaW9uIG9mIEFjY2VwdGFuY2UiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFuIG9mZmVyb3Igd2hvc2Ugb2ZmZXIgYWxsb3dzIGZvciBhY2NlcHRhbmNlIGJ5IGVsZWN0cm9uaWMgbWVhbnMgbWF5IG5vdCByZWx5IG9uIGZhaWx1cmUgdG8gY2hlY2sgd2hldGhlciBtZXNzYWdlcyB3ZXJlIHZhbGlkbHkgcmVjZWl2ZWQuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UgJm1kYXNoOyBUcmFuc21pc3Npb24gb2YgQWNjZXB0YW5jZSIsCiAgICAiTlVNQkVSIjogIjU0IiwKICAgICJZRUFSIjogIjE5NzUiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSAmbWRhc2g7IFBvc3RhbCBSdWxlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJIb2x3ZWxsIHYgSHVnaGVzIiwKICAgICAgICAiSGVudGhvcm4gdiBGcmFzZXIiLAogICAgICAgICJWaXRvbCBTQSB2IE5vcmVsZiBMdGQiLAogICAgICAgICJGZWx0aG91c2UgdiBCaW5kbGV5IiwKICAgICAgICAiTXVsY2FpcmUgdiBOZXdzIEdyb3VwIiwKICAgICAgICAiVGhlIExlb25pZGFzIEQiLAogICAgICAgICJFbGlhc29uIHYgSGVuc2hhdyIsCiAgICAgICAgIkNhcmxpbGwgLSBBY2NlcHRhbmNlIiwKICAgICAgICAiUmUgU2VsZWN0bW92ZSIsCiAgICAgICAgIkJyaXRpc2ggU3RlZWwgdiBDbGV2ZWxhbmQgQnJpZGdlIiwKICAgICAgICAiVGhlIEJyaW1uZXMiLAogICAgICAgICJFbnRvcmVzIHYgTWlsZXMiCiAgICBdLAogICAgIk5VTUJFUiI6ICI1NSIsCiAgICAiWUVBUiI6ICIxODc5IiwKICAgICJOQU1FIjogIkhvdXNlaG9sZCBGaXJlIEluc3VyYW5jZSB2IEdyYW50IiwKICAgICJDSVRBVElPTiI6ICJIb3VzZWhvbGQgRmlyZSBJbnN1cmFuY2UgQ28gdiBHcmFudCAoMTg3OSkgNCBFeCBEIDIxNiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIiwKICAgICAgICAiUG9zdGFsIFJ1bGUiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkV2ZW4gd2hlbiBhIGxldHRlciBhY2NlcHRpbmcgYW4gb2ZmZXIgbmV2ZXIgYXJyaXZlcywgdGhlIHBvc3RhbCBydWxlIGNhdXNlcyBpdCBuZXZlcnRoZWxlc3MgdG8gYmUgPHNwYW4gY2xhc3M9XCJpdFwiPnZhbGlkIGFjY2VwdGFuY2U8L3NwYW4+LiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkJyYW13ZWxsIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJIZW50aG9ybiB2IEZyYXNlciAoMTg5MikgMiBDaCAyNyIsCiAgICAiTkFNRSI6ICJIZW50aG9ybiB2IEZyYXNlciIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiSG91c2Vob2xkIEZpcmUgSW5zdXJhbmNlIHYgR3JhbnQiLAogICAgICAgICJIb2x3ZWxsIHYgSHVnaGVzIiwKICAgICAgICAiQ2FybGlsbCAtIEFjY2VwdGFuY2UiLAogICAgICAgICJUaGUgQnJpbW5lcyIsCiAgICAgICAgIlZpdG9sIFNBIHYgTm9yZWxmIEx0ZCIsCiAgICAgICAgIlJlIFNlbGVjdG1vdmUiLAogICAgICAgICJGZWx0aG91c2UgdiBCaW5kbGV5IiwKICAgICAgICAiTXVsY2FpcmUgdiBOZXdzIEdyb3VwIiwKICAgICAgICAiRWxpYXNvbiB2IEhlbnNoYXciLAogICAgICAgICJCcml0aXNoIFN0ZWVsIHYgQ2xldmVsYW5kIEJyaWRnZSIsCiAgICAgICAgIlRoZSBMZW9uaWRhcyBEIiwKICAgICAgICAiRW50b3JlcyB2IE1pbGVzIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UiLAogICAgICAgICJQb3N0YWwgUnVsZSIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIHBvc3RhbCBydWxlIGZvciBhY2NlcHRhbmNlIGFwcGxpZXMgd2hlbiBpdCBjb3VsZCBiZSBzYWlkIHRvIGhhdmUgb2NjdXJyZWQgdG8gdGhlIHBhcnRpZXMgdGhhdCBhY2NlcHRhbmNlIG1pZ2h0IGJlIHBvc3RlZDsgaS5lLiwgb25seSB3aGVuIGl0IHdvdWxkIGJlIDxzcGFuIGNsYXNzPVwiaXRcIj5yZWFzb25hYmxlPC9zcGFuPiB0byBhY2NlcHQgYW4gb2ZmZXIgYnkgcG9zdC4iCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSAmbWRhc2g7IFBvc3RhbCBSdWxlIiwKICAgICJOVU1CRVIiOiAiNTYiLAogICAgIllFQVIiOiAiMTg5MiIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlICZtZGFzaDsgUG9zdGFsIFJ1bGUiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkhlbnRob3JuIHYgRnJhc2VyIiwKICAgICAgICAiSG91c2Vob2xkIEZpcmUgSW5zdXJhbmNlIHYgR3JhbnQiLAogICAgICAgICJNdWxjYWlyZSB2IE5ld3MgR3JvdXAiLAogICAgICAgICJGZWx0aG91c2UgdiBCaW5kbGV5IiwKICAgICAgICAiQnJpdGlzaCBTdGVlbCB2IENsZXZlbGFuZCBCcmlkZ2UiLAogICAgICAgICJFbGlhc29uIHYgSGVuc2hhdyIsCiAgICAgICAgIkNhcmxpbGwgLSBBY2NlcHRhbmNlIiwKICAgICAgICAiQnJvZ2RlbiB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IiwKICAgICAgICAiRW50b3JlcyB2IE1pbGVzIiwKICAgICAgICAiVGhlIEJyaW1uZXMiLAogICAgICAgICJSZSBTZWxlY3Rtb3ZlIiwKICAgICAgICAiVGhlIExlb25pZGFzIEQiCiAgICBdLAogICAgIk5VTUJFUiI6ICI1NyIsCiAgICAiWUVBUiI6ICIxOTc0IiwKICAgICJOQU1FIjogIkhvbHdlbGwgdiBIdWdoZXMiLAogICAgIkNJVEFUSU9OIjogIkhvbHdlbGwgU2VjdXJpdGllcyBMdGQgdiBIdWdoZXMgWzE5NzRdIDEgV0xSIDE1NSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIiwKICAgICAgICAiUG9zdGFsIFJ1bGUiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBwb3N0YWwgcnVsZSBtYXkgYmUgaW1wbGljaXRseSBvdXN0ZWQgYnkgdGhlIGxhbmd1YWdlIG9mIGFuIG9mZmVyLCBzdWNoIGFzIGEgcmVxdWlyZW1lbnQgdG8gZ2l2ZSA8c3BhbiBjbGFzcz1cIml0XCI+bm90aWNlPC9zcGFuPiBvZiBhY2NlcHRhbmNlIHRvIHRoZSBvZmZlcm9yLiBFdmVuIHNob3VsZCB0aGUgYWNjZXB0ZWQgdGVzdCBmb3IgdGhlIHBvc3RhbCBydWxlIGJlIG1ldCAmbWRhc2g7IHRoYXQgYWNjZXB0YW5jZSBieSBwb3N0IHdhcyBjb250ZW1wbGF0ZWQgJm1kYXNoOyB0aGUgcG9zdGFsIHJ1bGUgd2lsbCBub3QgYXBwbHkuIFRoZSBwb3N0YWwgcnVsZSB3aWxsIG5vdCBiZSBpbXBvc2VkLCBldmVuIHdoZW4gbG9naWNhbCB0byBkbyBzbyBvbiBhcHBsaWNhdGlvbiBvZiBwcmVjZWRlbnQsIHdoZW4gdGhhdCB3b3VsZCBsZWFkIHRvICYjODIxNjttYW5pZmVzdCBpbmNvbnZlbmllbmNlIGFuZCBhYnN1cmRpdHkuJiM4MjE3OyIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkJyYW13ZWxsIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJDQVRFR09SWSI6ICJDb25zaWRlcmF0aW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDb25zaWRlcmF0aW9uIC0gRGV0YWlsIiwKICAgICAgICAiSW1wbGljYXRpb24gb2YgVGVybXMgLSBJbnRybyIsCiAgICAgICAgIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFBvc2l0aXZlIFRlcm1zIiwKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBOZWdhdGl2ZSBUZXJtcyIsCiAgICAgICAgIk9mZmVycyIsCiAgICAgICAgIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSIsCiAgICAgICAgIkNvbnRyYWN0dWFsIER1dGllcyBhcyBDb25zaWRlcmF0aW9uIiwKICAgICAgICAiUHJvbWlzc29yeSBFc3RvcHBlbCIsCiAgICAgICAgIk1pc3Rha2UgLSBJbnRyb2R1Y3Rpb24iLAogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIENvbmZsaWN0aW5nIFRlcm1zIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb25zaWRlcmF0aW9uIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Q29uc2lkZXJhdGlvbjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPkl0IG11c3Q8L3NwYW4+ICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CZSBzdWZmaWNpZW50LCBidXQgbmVlZCBub3QgYmUgYWRlcXVhdGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q3VycmllIHYgTWlzYTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CZSBvZiBzb21lIHZhbHVlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRob21hcyB2IFRob21hczwvc3Bhbj4uPGJyPk9yIGFtb3VudCB0byBldmlkZW5jZSBvZiBkZXRyaW1lbnQgaGF2aW5nIHBhc3NlZCwgYXQgbGVhc3QgcG90ZW50aWFsbHksIGZyb20gdGhlIHByb21pc2VlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNoYXBwZWxsIHYgTmVzdGxlPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkhhdmUgYmVlbiByZXF1ZXN0ZWQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29tYmUgdiBDb21iZTwvc3Bhbj4uPGJyPjxzcGFuIGNsYXNzPVwiaXRcIj5Vbmxlc3M8L3NwYW4+IGl0IGNhbiBiZSByZWFkIGluIHRvIHRoZSBwcm9taXNlLiBSZWFkIGluIDxzcGFuIGNsYXNzPVwiaXRcIj5kZWVwbHk8L3NwYW4+LCBpZiBuZWNlc3NhcnkgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TaGFkd2VsbCB2IFNoYWR3ZWxsPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkVudGFpbCBkZXRyaW1lbnQgdG8gcHJvbWlzZWUsIG90aGVyd2lzZSB3aWxsIGJlIGFuICh1bmVuZm9yY2VhYmxlKSBjb25kaXRpb25hbCBnaWZ0IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRpY2tpbnNvbiB2IEFiZWw8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJpdFwiPkl0IG11c3QgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj48L3NwYW4+ICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CZSBwYXN0IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJvc2NvcmxhIHYgVGhvbWFzPC9zcGFuPi48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFVubGVzcyA8c3BhbiBjbGFzcz1cIml0XCI+dW5kZXJ0YWtlbjwvc3Bhbj4gb24gYmFzaXMgb2YgcGF5bWVudCBsYXRlciwgaW4gd2hpY2ggY2FzZSwgY2FuIGJlIGhvb2tlZCB1cCB3aXRoIGxhdGVyIHByb21pc2UgYnkgPHNwYW4gY2xhc3M9XCJiZFwiPmltcGxpZWQgYXNzdW1wc2l0PC9zcGFuPiwgbWFraW5nIHRoZSBwcm9taXNlIGVuZm9yY2VhYmxlLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QYW8gT24gdiBMYXUgTG9uZzwvc3Bhbj4sICA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MYW1wbGVpZ2ggdiBCcmFpdGh3YWl0PC9zcGFuPi48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Q29uc2lzdCBvZiBwZXJmb3JtYW5jZSBvZiBhbiBleGlzdGluZyA8c3BhbiBjbGFzcz1cIml0XCI+bGVnYWw8L3NwYW4+IGR1dHkuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbGxpbnMgdiBHb2RlZnJveTwvc3Bhbj4uPGJyPjxzcGFuIGNsYXNzPVwiaXRcIj5Vbmxlc3M8L3NwYW4+IHN1Y2ggcGVyZm9ybWFuY2UgZ29lcyBiZXlvbmQgdGhlIHN0cmljdGx5IG9ibGlnYXRvcnkgdG8gdGhlIGJlbmVmaXQgb2YgcHJvbWlzb3IgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R2xhc2Jyb29rIHYgR2xhbW9yZ2FuPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPjxzcGFuIGNsYXNzPVwibmxcIj4gQnV0IGl0IDxzcGFuIGNsYXNzPVwiYmRcIj5tYXk8L3NwYW4+Li4uPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkJlIGZvcmJlYXJpbmcgdG8gYnJpbmcgYSBsZWdhbCBjbGFpbSwgZXZlbiBpZiBvYmplY3RpdmVseSB3b3J0aGxlc3MgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29vayB2IFdyaWdodDwvc3Bhbj4uPGJyPjxzcGFuIGNsYXNzPVwiaXRcIj5Vbmxlc3M8L3NwYW4+IHRoZSBwcm9taXNlZSBrbm93cyBpdCwgYW5kIHdvdWxkIHRoZXJlZm9yZSBiZSBleHRvcnRpb24gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+V2FkZSB2IFNpbWVvbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5QZXJmb3JtYW5jZSBvZiBhbiBleGlzdGluZyA8c3BhbiBjbGFzcz1cIml0XCI+Y29udHJhY3R1YWw8L3NwYW4+IGR1dHkgb3dlZCB0byBhIDNyZC1wYXJ0eSwgaWYgbW9yZSBjb252ZW50aW9uYWwgYXR0ZW1wdHMgdG8gZmluZCBjb25zaWRlcmF0aW9uIGZhaWwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGhlIEV1cnltZWRvbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICJOb3cgcmVhZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db25zaWRlcmF0aW9uIC0gRGV0YWlsPC9zcGFuPi4iCiAgICBdLAogICAgIk5VTUJFUiI6ICI1OCIsCiAgICAiTkFNRSI6ICJDb25zaWRlcmF0aW9uIC0gT3ZlcnZpZXciCn0sCnsKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIk5BTUUiOiAiQ29uc2lkZXJhdGlvbiAtIERldGFpbCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ29uc2lkZXJhdGlvbiAtIE92ZXJ2aWV3IiwKICAgICAgICAiT2ZmZXJzIiwKICAgICAgICAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIiwKICAgICAgICAiTWlzdGFrZSAtIEludHJvZHVjdGlvbiIsCiAgICAgICAgIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIE5lZ2F0aXZlIFRlcm1zIiwKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBQb3NpdGl2ZSBUZXJtcyIsCiAgICAgICAgIkNvbnRyYWN0dWFsIER1dGllcyBhcyBDb25zaWRlcmF0aW9uIiwKICAgICAgICAiUHJvbWlzc29yeSBFc3RvcHBlbCIsCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgQ29uZmxpY3RpbmcgVGVybXMiLAogICAgICAgICJJbXBsaWNhdGlvbiBvZiBUZXJtcyAtIEludHJvIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb25zaWRlcmF0aW9uIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJDb25zaWRlcmF0aW9uIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RWxlbWVudHMgb2YgRGVmaW5pdGlvbjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPkl0PC9zcGFuPiAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwiYmRcIj5JcyB0aGUgcmVhc29uIGEgcHJvbWlzZSBiZWNvbWVzIGJpbmRpbmcuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEVudGFpbHMgPHNwYW4gY2xhc3M9XCJpdFwiPmRldHJpbWVudDwvc3Bhbj4gdG8gcHJvbWlzZWUgYW5kIG9mdGVuLCA8c3BhbiBjbGFzcz1cIml0XCI+YmVuZWZpdDwvc3Bhbj4gdG8gcHJvbWlzb3IgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q3VycmllIHYgTWlzYTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gSXMgZnVuZGFtZW50YWwgdG8gdGhlIG5hdHVyZSBvZiBjb250cmFjdCBhcyBhIDxzcGFuIGNsYXNzPVwiaXRcIj5iYXJnYWluPC9zcGFuPiwgaW4gd2hpY2ggb25lIHByb21pc2UgaXMgZXhjaGFuZ2VkIGZvciBhbm90aGVyICg8c3BhbiBjbGFzcz1cIml0XCI+SGFtc29uPC9zcGFuPikuPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBpcyBwYXJ0IG9mIGFuICYjODIxNjtpbmRpdmlzaWJsZSB0cmluaXR5JiM4MjE3OywgYWxvbmcgd2l0aCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5vZmZlcjwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPmFjY2VwdGFuY2U8L3NwYW4+LCBhbmQgbm90IGp1c3QgYSAmIzgyMTY7Y29pbmNpZGVudGFsIDxzcGFuIGNsYXNzPVwibG5rIGdzbG5cIj50b20tdGl0PC9zcGFuPi4mIzgyMTc7PC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBtdXN0IGJlIG9mIHNvbWUgdmFsdWUgJiM4MjE2O2luIHRoZSBleWUgb2YgdGhlIGxhdyYjODIxNzssIFBhdHRlc29uIEogaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGhvbWFzIHYgVGhvbWFzPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBJcyBhIHNob3J0ZXIgd2F5IG9mIHNheWluZyAmIzgyMTY7anVkaWNpYWwgZGlzY3JldGlvbiYjODIxNzsgb3IgJiM4MjE2O3RoZSByZWFzb24gdG8gZW5mb3JjZSB0aGUgY29udHJhY3QmIzgyMTc7Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IG11c3QgYmUgPHNwYW4gY2xhc3M9XCJiZFwiPnN1ZmZpY2llbnQ8L3NwYW4+IGJ1dCBuZWVkIG5vdCBiZSA8c3BhbiBjbGFzcz1cImJkXCI+YWRlcXVhdGU8L3NwYW4+IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNoYXBwZWxsIHYgTmVzdGxlPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5TdWZmaWNpZW5jeSBhbmQgQWRlcXVhY3k8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Q29uc2lkZXJhdGlvbiBtdXN0IGJlIDxzcGFuIGNsYXNzPVwiYmRcIj5zdWZmaWNpZW50PC9zcGFuPjogaXQgbXVzdCBiZSBjb25zaXN0ZW50IHdpdGggdGhlIGJvZHkgb2YgcnVsZXMgZW1lcmdpbmcgZnJvbSB0aGUgY2FzZXMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JZiBjb25zaWRlcmF0aW9uIGhhZCB0byBiZSA8c3BhbiBjbGFzcz1cIml0XCI+YWRlcXVhdGU8L3NwYW4+ICZtZGFzaDsgb2YgZXF1aXZhbGVudCB2YWx1ZSB0byB0aGUgcHJvbWlzZSBmb3Igd2hpY2ggaXQmIzgyMTc7cyBiZWluZyBleGNoYW5nZWQgJm1kYXNoOyB0aGUgcHJvbWlzZXMgd291bGQgaGF2ZSB0byBiZSBhYmxlIHRvIGJlIDxzcGFuIGNsYXNzPVwiaXRcIj52YWx1ZWQ8L3NwYW4+IGJ5IHRoZSBjb3VydHMsIGFuZCBhIDxzcGFuIGNsYXNzPVwiaXRcIj5iYWQgYmFyZ2Fpbjwvc3Bhbj4gd291bGQgdHVybiBpbnRvIGFuIDxzcGFuIGNsYXNzPVwiaXRcIj5pbnZhbGlkIGNvbnRyYWN0PC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5WYWx1ZTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Tb21lIHZhbHVlIDxzcGFuIGNsYXNzPVwiaXRcIj5pbiB0aGUgZXllIG9mIHRoZSBsYXc8L3NwYW4+LCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaG9tYXMgdiBUaG9tYXM8L3NwYW4+LCBpcyB0YWtlbiBieSBUcmVpdGVsICgzLTAyNykgdG8gbWVhbiA8c3BhbiBjbGFzcz1cIml0XCI+ZWNvbm9taWM8L3NwYW4+IHZhbHVlLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+U2VudGltZW50IGlzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IHN1ZmZpY2llbnQsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRob21hcyB2IFRob21hczwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5FdmlkZW5jZSBvZiBiZW5lZml0IGNvbmZlcnJlZCBvbiBwcm9taXNvciwgYWx0aG91Z2ggd29ydGhsZXNzIHBlciBzZSAmbWRhc2g7IG1heSBiZSBnb29kIGNvbnNpZGVyYXRpb24gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2hhcHBlbGwgdiBOZXN0bGU8L3NwYW4+Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Qcm9mZXNzb3IgU21pdGgmIzgyMTc7cyB2aWV3OiBjb25zaWRlcmF0aW9uIG91Z2h0IHRvIGJlIDxzcGFuIGNsYXNzPVwiaXRcIj5hbnl0aGluZzwvc3Bhbj4gcmVxdWVzdGVkIG9mIHRoZSBwcm9taXNlZSwgd2hldGhlciBvciBub3QgYSByZWFsIGJlbmVmaXQgb3IgZGV0cmltZW50IGhhcyBiZWVuIGNvbmZlcnJlZCBvciBzdWZmZXJlZC4gQWxzbyBEZW5uaW5nJiM4MjE3O3MgdmlldyBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5XYXJkIHYgQnloYW08L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+V2hpY2ggY2FuIGJlIHJlY29uY2lsZWQgd2l0aCBjb252ZW50aW9uYWwgdmlldyBieSBvYnNlcnZpbmcgdGhhdCBwZXJmb3JtYW5jZSBvZiBhIHJlcXVlc3QgaXMsIGluIGFuZCBvZiBpdHNlbGYsIGRldHJpbWVudGFsIHRvIGl0cyBwZXJmb3JtZXIgJm1kYXNoOyBhbmQgZ2V0dGluZyB3aGF0IHByb21pc29yIGFza2VkIGZvciwgYmVuZWZpY2lhbC48L3NwYW4+PC9saT48L3VsPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkZvcmJlYXJhbmNlIG9mIExlZ2FsIENsYWltczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CZWluZyBzcGFyZWQgdGhlIGV4cGVuc2Ugb2YgZGVmZW5kaW5nIGFuIGFjdGlvbiA8c3BhbiBjbGFzcz1cImJkXCI+aXM8L3NwYW4+IGdvb2QgY29uc2lkZXJhdGlvbiwgZXZlbiBpZiB0aGUgYWN0aW9uIHdvdWxkIHByb3ZlIHdvcnRobGVzcyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db29rIHYgV3JpZ2h0PC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlNob3VsZCB0aGUgYWN0aW9uJiM4MjE3O3MgPHNwYW4gY2xhc3M9XCJpdFwiPmNsYWltYW50PC9zcGFuPiBrbm93cyBpdCB3b3VsZCBmYWlsLCBob3dldmVyLCB0aGVuIHN1Y2ggZm9yYmVhcmFuY2Ugd291bGQgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj4gYmUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+V2FkZSB2IFNpbWVvbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5PdXQgb2YgY291cnQgc2V0dGxlbWVudCBzaG91bGQgYmUgZW5jb3VyYWdlZDsgb24gdGhlIG90aGVyLCBsZWdhbCBmb3JjZSBtdXN0IG5vdCBiZSBnaXZlbiB0byBleHRvcnRpb24uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+TXVzdCBiZSBSZXF1ZXN0ZWQ8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIGNvbnNpZGVyYXRpb24gY2xhaW1lZCBieSBwcm9taXNlZSBtdXN0IGhhdmUgYmVlbiByZXF1ZXN0ZWQgYnkgcHJvbWlzb3IgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29tYmUgdiBDb21iZTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Vbmxlc3Mgc3VmZmljaWVudCB0aGUgcHJvbWlzZWUgaGFzIGNoYW5nZWQgaGlzIHBvc2l0aW9uIHN1ZmZpY2llbnRseSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TaGFkd2VsbCB2IFNoYWR3ZWxsPC9zcGFuPi48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Ti5CLiBkaWN0YSBvZiBFcmxlIENKLCBzdGF0aW5nLCBpbiBlZmZlY3QsIHRoYXQgdGFraW5nIHRoZSByaXNrIG9mIHRoZSBjb250cmFjdCBiZWluZyBicmVhY2hlZCBpcyBzdWZmaWNpZW50IGRldHJpbWVudC48L3NwYW4+PC9saT48L3VsPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkNvbXBhcmVkIHRvIENvbmRpdGlvbmFsIEdpZnRzPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkEgcHJvbWlzZSB2YWxpZCBvbiBhIHBhcnRpY3VsYXIgY29uZGl0aW9uIG5vdCBlbnRhaWxpbmcgZGV0cmltZW50IHRvIHRoZSBwcm9taXNlZSwgaXMgYSA8c3BhbiBjbGFzcz1cImJkXCI+Z2lmdDwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGlja2luc29uIHYgQWJlbDwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+UGFzdCBDb25zaWRlcmF0aW9uPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBkZXRyaW1lbnQgb2YgdGhlIGNvbnNpZGVyYXRpb24gbXVzdCA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBoYXZlIGJlZW4gc3VmZmVyZWQgYnkgdGhlIHByb21pc2VlIGJlZm9yZSB0aGUgcHJvbWlzZSB3YXMgbWFkZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Sb3Njb3JsYSB2IFRob21hczwvc3Bhbj4uPGJyPiA8c3BhbiBjbGFzcz1cIml0XCI+SG93ZXZlcjwvc3Bhbj4uLi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5JbXBsaWVkIEFzc3VtcHNpdDwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JZiB1bmRlcnRha2VuIGF0IHJlcXVlc3Qgb2YgcHJvbWlzb3IsIG9uIHVuZGVyc3RhbmRpbmcgdGhhdCBwYXltZW50IHdvdWxkIGNvbWUgbGF0ZXIsIG9uIHNoYXJlZCBhc3N1bXB0aW9uIHRoYXQgYXJyYW5nZW1lbnRzIGZvciBwYXltZW50IHdvdWxkIGJlIG1hZGUgc3Vic2VxdWVudGx5LCB0aGlzIGRvY3RyaW5lIG1heSB0cmVhdCBwYXN0IGNvbnNpZGVyYXRpb24gYW5kIGxhdGVyIHByb21pc2UgYXMgb25lIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkxhbXBsZWlnaCB2IEJyYWl0aHdhaXQ8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Q29tcHJpc2VzIGFuIGFjdCBkb25lIGJ5IHByb21pc2VlLCBhdCByZXF1ZXN0IG9mIHByb21pc29yLCBvbiB1bmRlcnN0YW5kaW5nIG9mIGxhdGVyIHBheW1lbnQgJm1kYXNoOyBMb3JkIFNjYXJtYW4gaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGFvIE9uIHYgTGF1IExvbmc8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkxlZ2FsIER1dGllczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgcGVyZm9ybWFuY2Ugb2YgYSBsZWdhbCBkdXR5IG93ZWQgaW5kZXBlbmRlbnRseSBpcyBub3QgZ29vZCBjb25zaWRlcmF0aW9uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbGxpbnMgdiBHb2RlZnJveTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Vbmxlc3MgaXQgZ29lcyBiZXlvbmQgd2hhdCBpcyBvYmxpZ2F0b3J5LCBpbiB3aGljaCBjYXNlIGl0IDxzcGFuIGNsYXNzPVwiaXRcIj5taWdodDwvc3Bhbj4gYmUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R2xhc2Jyb29rIHYgR2xhbW9yZ2FuPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Db250cmFjdHVhbCBEdXRpZXMgdG8gVGhpcmQgUGFydGllczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgY291cnRzIHdpbGwgZXhoaWJpdCBzaWduaWZpY2FudCByZWx1Y3RhbmNlIHRvIHRyZWF0IGEgYnVzaW5lc3MgYXJyYW5nZW1lbnQgZm9yIHdoaWNoIG5vIGNvbnNpZGVyYXRpb24gY2FuIGJlIGZvdW5kIGFsb25nIGNvbnZlbnRpb25hbCBsaW5lcyBhcyBjb25zaXN0aW5nIG9mIGdyYXR1aXRvdXMgKGFuZCB0aGVyZWZvcmUgdW5lbmZvcmNlYWJsZSkgcHJvbWlzZXMuIFRvIGFjaGlldmUgc3VjaCBlbmRzLCBhbiBleGlzdGluZyBjb250cmFjdHVhbCBkdXR5IG1heSBiZSBjb25zdHJ1ZWQgYXMgY29uc2lkZXJhdGlvbiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGhlIEV1cnltZWRvbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+V2hpdGUgdiBCbHVldHQ8L3NwYW4+PC9zcGFuPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MaXBraW4gR29ybWFuIHYgS2FycG5hbGU8L3NwYW4+PC9zcGFuPiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjU5Igp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJUaG9tYXMgdiBUaG9tYXMgWzE4NDJdIDIgUUIgODUxIiwKICAgICJOQU1FIjogIlRob21hcyB2IFRob21hcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiTGFtcGxlaWdoIHYgQnJhdGh3YWl0IiwKICAgICAgICAiQ2hhcHBlbGwgdiBOZXN0bGUiLAogICAgICAgICJEaWNraW5zb24gdiBBYmVsIiwKICAgICAgICAiUm9zY29ybGEgdiBUaG9tYXMiLAogICAgICAgICJQYW8gT24gdiBMYXUgTG9uZyIsCiAgICAgICAgIlRoZSBFdXJ5bWVkb24iLAogICAgICAgICJDb29rIHYgV3JpZ2h0IiwKICAgICAgICAiV2FkZSB2IFNpbWVvbiIsCiAgICAgICAgIkNvbGxpbnMgdiBHb2RlZnJveSIsCiAgICAgICAgIkdsYXNicm9vayB2IEdsYW1vcmdhbiIsCiAgICAgICAgIlNoYWR3ZWxsIHYgU2hhZHdlbGwiLAogICAgICAgICJDb21iZSB2IENvbWJlIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb25zaWRlcmF0aW9uIiwKICAgICAgICAiRGVmaW5pdGlvbnMgb2YgQ29uc2lkZXJhdGlvbiIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQ29uc2lkZXJhdGlvbiBtdXN0IGJlIG9mIDxzcGFuIGNsYXNzPVwiaXRcIj5zb21lIHZhbHVlIGluIHRoZSBleWUgb2YgdGhlIGxhdzwvc3Bhbj4uIFRoaXMgdmFsdWUgbmVlZCBub3QgYmUgZXF1aXZhbGVudCB0byB0aGF0IG9mIHRoZSBwcm9taXNlIGZvciB3aGljaCBpdCBpcyBleGNoYW5nZWQuIChTZW50aW1lbnQsIHNheXMgVHJlaXRlbCBvZiB0aGlzIGNhc2UsIGEgdGhpbmcgZnVuZGFtZW50YWxseSBsYWNraW5nIHF1YW50aWZpYWJpbGl0eSwgaXMgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdDwvc3Bhbj4gZW5vdWdoLikiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkNvbnNpZGVyYXRpb24gJm1kYXNoOyBEZWZpbml0aW9ucyBvZiBDb25zaWRlcmF0aW9uIiwKICAgICJOVU1CRVIiOiAiNjAiLAogICAgIllFQVIiOiAiMTg0MiIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiQ29uc2lkZXJhdGlvbiAmbWRhc2g7IENvbnNpZGVyYXRpb24gTXVzdCBCZSBvZiBTb21lIHZhbHVlIEluIEV5ZSBvZiBMYXciLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkdsYXNicm9vayB2IEdsYW1vcmdhbiIsCiAgICAgICAgIkRpY2tpbnNvbiB2IEFiZWwiLAogICAgICAgICJUaGUgRXVyeW1lZG9uIiwKICAgICAgICAiQ29tYmUgdiBDb21iZSIsCiAgICAgICAgIlBhbyBPbiB2IExhdSBMb25nIiwKICAgICAgICAiTGFtcGxlaWdoIHYgQnJhdGh3YWl0IiwKICAgICAgICAiU2hhZHdlbGwgdiBTaGFkd2VsbCIsCiAgICAgICAgIldhcmQgdiBCeWhhbSIsCiAgICAgICAgIldhZGUgdiBTaW1lb24iLAogICAgICAgICJDb29rIHYgV3JpZ2h0IiwKICAgICAgICAiQ29sbGlucyB2IEdvZGVmcm95IiwKICAgICAgICAiUm9zY29ybGEgdiBUaG9tYXMiCiAgICBdLAogICAgIk5VTUJFUiI6ICI2MSIsCiAgICAiWUVBUiI6ICIxOTYwIiwKICAgICJOQU1FIjogIkNoYXBwZWxsIHYgTmVzdGxlIiwKICAgICJDSVRBVElPTiI6ICJDaGFwcGVsbCAmYW1wOyBDbyB2IE5lc3RsZSBDbyBMdGQgWzE5NjBdIEFDIDg3IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb25zaWRlcmF0aW9uIiwKICAgICAgICAiQ29uc2lkZXJhdGlvbiBNdXN0IEJlIG9mIFNvbWUgdmFsdWUgSW4gRXllIG9mIExhdyIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQW4gaXRlbSBvZiBubyBlY29ub21pYyB2YWx1ZSA8c3BhbiBjbGFzcz1cIml0XCI+bWF5IHdlbGw8L3NwYW4+IGJlIHN1ZmZpY2llbnQgY29uc2lkZXJhdGlvbiwgaWYgaXQgc2hvd3MgZXZpZGVuY2Ugb2YgZGV0cmltZW50IHN1ZmZlcmVkIGJ5IHByb21pc2VlIG9yIGJlbmVmaXQgY29uZmVycmVkIG9uIHByb21pc29yLiBUaGlzIG1heSBob2xkIGV2ZW4gaWYgdGhlIGV2aWRlbmNlIGlzIG5vIG1vcmUgdGhhbiBzcGVjdWxhdGl2ZS4iLAogICAgICAgICJMb3JkIFJlaWQgcGlubmVkIGhpcyByZWFzb25pbmcgdG8gdGhlIG9ic2VydmF0aW9uIHRoYXQsIG9uIHRoZSBldmlkZW5jZSBvZiBpbmNyZWFzZWQgc2FsZXMsIGluIGF0IGxlYXN0IDxzcGFuIGNsYXNzPVwiaXRcIj5zb21lPC9zcGFuPiBjYXNlcywgdGhlIHdyYXBwZXJzIHdvdWxkIGluZGVlZCBzaG93IGV2aWRlbmNlIG9mIGRldHJpbWVudCBzdWZmZXJlZCBvciBiZW5lZml0IGJlc3Rvd2VkLCBhcyB0aGUgc2FsZXMgZm9yIHdoaWNoIHRoZXkgd2VyZSBldmlkZW5jZSB3b3VsZCBoYXZlIGJlZW4gaW5kdWNlZCBieSB0aGUgcHJvbWlzZSBvZiB0aGUgY29udHJhY3QuIiwKICAgICAgICAiTG9yZCBTb21lcnZlbGwgb2YgSGFycm93IHByZXN1bWVkIHRoZSBjb25zaWRlcmF0aW9uJiM4MjE3O3MgbGFjayBvZiBlY29ub21pYyB2YWx1ZSBpcnJlbGV2YW50IHdoZW4gY29uc2lkZXJlZCBhZ2FpbnN0IGZyZWVkb20gb2YgY29udHJhY3QuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiVHJlaXRlbCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiQ29uc2lkZXJhdGlvbiAmbWRhc2g7IENvbnNpZGVyYXRpb24gSW4gQ29tcHJvbWlzZXMgb2YgTGVnYWwgQ2xhaW1zIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJXYWRlIHYgU2ltZW9uIiwKICAgICAgICAiV2FyZCB2IEJ5aGFtIiwKICAgICAgICAiTGFtcGxlaWdoIHYgQnJhdGh3YWl0IiwKICAgICAgICAiU2hhZHdlbGwgdiBTaGFkd2VsbCIsCiAgICAgICAgIlJvc2NvcmxhIHYgVGhvbWFzIiwKICAgICAgICAiVGhvbWFzIHYgVGhvbWFzIiwKICAgICAgICAiQ29tYmUgdiBDb21iZSIsCiAgICAgICAgIkNvbGxpbnMgdiBHb2RlZnJveSIsCiAgICAgICAgIlBhbyBPbiB2IExhdSBMb25nIiwKICAgICAgICAiVGhlIEV1cnltZWRvbiIsCiAgICAgICAgIkdsYXNicm9vayB2IEdsYW1vcmdhbiIsCiAgICAgICAgIkNoYXBwZWxsIHYgTmVzdGxlIgogICAgXSwKICAgICJOVU1CRVIiOiAiNjIiLAogICAgIllFQVIiOiAiMTg2MSIsCiAgICAiTkFNRSI6ICJDb29rIHYgV3JpZ2h0IiwKICAgICJDSVRBVElPTiI6ICJDb29rIHYgV3JpZ2h0ICgxODYxKSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc2lkZXJhdGlvbiIsCiAgICAgICAgIkNvbnNpZGVyYXRpb24gSW4gQ29tcHJvbWlzZXMgb2YgTGVnYWwgQ2xhaW1zIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJCZWluZyBzcGFyZWQgdGhlIGV4cGVuc2Ugb2YgZGVmZW5kaW5nIGEgbGVnYWwgYWN0aW9uIHRoZSBoeXBvdGhldGljYWwgPHNwYW4gY2xhc3M9XCJpdFwiPnJlc3BvbmRlbnQ8L3NwYW4+IG9mIHdoaWNoIGtub3dzIHdvdWxkIGJlIHdvcnRobGVzcywgaXMgZ29vZCBjb25zaWRlcmF0aW9uLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIk1jS2VuZHJpY2siCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIldhZGUgdiBTaW1lb24gKDE4NDYpIDIgQ0IgNTQ4IiwKICAgICJOQU1FIjogIldhZGUgdiBTaW1lb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNvb2sgdiBXcmlnaHQiLAogICAgICAgICJQYW8gT24gdiBMYXUgTG9uZyIsCiAgICAgICAgIldhcmQgdiBCeWhhbSIsCiAgICAgICAgIkNoYXBwZWxsIHYgTmVzdGxlIiwKICAgICAgICAiTGFtcGxlaWdoIHYgQnJhdGh3YWl0IiwKICAgICAgICAiQ29sbGlucyB2IEdvZGVmcm95IiwKICAgICAgICAiQ29tYmUgdiBDb21iZSIsCiAgICAgICAgIlRoZSBFdXJ5bWVkb24iLAogICAgICAgICJUaG9tYXMgdiBUaG9tYXMiLAogICAgICAgICJEaWNraW5zb24gdiBBYmVsIiwKICAgICAgICAiU2hhZHdlbGwgdiBTaGFkd2VsbCIsCiAgICAgICAgIlJvc2NvcmxhIHYgVGhvbWFzIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb25zaWRlcmF0aW9uIiwKICAgICAgICAiQ29uc2lkZXJhdGlvbiBJbiBDb21wcm9taXNlcyBvZiBMZWdhbCBDbGFpbXMiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkJlaW5nIHNwYXJlZCB0aGUgZXhwZW5zZSBvZiBkZWZlbmRpbmcgYSBsZWdhbCBhY3Rpb24gdGhlIGNsYWltYW50IGtub3dzIHdvdWxkIDxzcGFuIGNsYXNzPVwiaXRcIj5mYWlsPC9zcGFuPiwgaS5lLiwgd291bGQgYnJpbmcgaW4gYmFkIGZhaXRoLCBpcyA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiBzdWZmaWNpZW50IGNvbnNpZGVyYXRpb24uICBGb3IgaXQgdG8gYmUgb3RoZXJ3aXNlIHdvdWxkIGJlIHRvIGdpdmUgY29udHJhY3R1YWwgZm9yY2UgdG8gZXh0b3J0aW9uIGJ5IHRoaXMgbWVhbnMuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJDb25zaWRlcmF0aW9uICZtZGFzaDsgQ29uc2lkZXJhdGlvbiBJbiBDb21wcm9taXNlcyBvZiBMZWdhbCBDbGFpbXMiLAogICAgIk5VTUJFUiI6ICI2MyIsCiAgICAiWUVBUiI6ICIxODQ2Igp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJDb21iZSB2IENvbWJlIFsxOTUxXSAyIEtCIDIxNSIsCiAgICAiTkFNRSI6ICJDb21iZSB2IENvbWJlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJTaGFkd2VsbCB2IFNoYWR3ZWxsIiwKICAgICAgICAiUGFvIE9uIHYgTGF1IExvbmciLAogICAgICAgICJDaGFwcGVsbCB2IE5lc3RsZSIsCiAgICAgICAgIldhZGUgdiBTaW1lb24iLAogICAgICAgICJHbGFzYnJvb2sgdiBHbGFtb3JnYW4iLAogICAgICAgICJSb3Njb3JsYSB2IFRob21hcyIsCiAgICAgICAgIkRpY2tpbnNvbiB2IEFiZWwiLAogICAgICAgICJDb2xsaW5zIHYgR29kZWZyb3kiLAogICAgICAgICJXYXJkIHYgQnloYW0iLAogICAgICAgICJDb29rIHYgV3JpZ2h0IiwKICAgICAgICAiTGFtcGxlaWdoIHYgQnJhdGh3YWl0IiwKICAgICAgICAiVGhlIEV1cnltZWRvbiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc2lkZXJhdGlvbiIsCiAgICAgICAgIkNvbnNpZGVyYXRpb24gTXVzdCBCZSBSZXF1ZXN0ZWQiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBjb25zaWRlcmF0aW9uIHByb3ZpZGVkIGJ5IGEgcHJvbWlzZWUgaGF2ZSBiZWVuIHJlcXVlc3RlZCBieSB0aGUgcHJvbWlzb3IuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJDb25zaWRlcmF0aW9uICZtZGFzaDsgQ29uc2lkZXJhdGlvbiBNdXN0IEJlIFJlcXVlc3RlZCIsCiAgICAiTlVNQkVSIjogIjY0IiwKICAgICJZRUFSIjogIjE5NTEiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlNoYWR3ZWxsIHYgU2hhZHdlbGwgKDE4NjApIENCIChOUykgMTU5IiwKICAgICJOQU1FIjogIlNoYWR3ZWxsIHYgU2hhZHdlbGwiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNvbWJlIHYgQ29tYmUiLAogICAgICAgICJXYWRlIHYgU2ltZW9uIiwKICAgICAgICAiUm9zY29ybGEgdiBUaG9tYXMiLAogICAgICAgICJUaGUgRXVyeW1lZG9uIiwKICAgICAgICAiQ29sbGlucyB2IEdvZGVmcm95IiwKICAgICAgICAiTGFtcGxlaWdoIHYgQnJhdGh3YWl0IiwKICAgICAgICAiR2xhc2Jyb29rIHYgR2xhbW9yZ2FuIiwKICAgICAgICAiUGFvIE9uIHYgTGF1IExvbmciLAogICAgICAgICJDb29rIHYgV3JpZ2h0IiwKICAgICAgICAiRGlja2luc29uIHYgQWJlbCIsCiAgICAgICAgIldhcmQgdiBCeWhhbSIsCiAgICAgICAgIkNoYXBwZWxsIHYgTmVzdGxlIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb25zaWRlcmF0aW9uIiwKICAgICAgICAiQ29uc2lkZXJhdGlvbiBNdXN0IEJlIFJlcXVlc3RlZCIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiRXZlbiB0aG91Z2ggbm90aGluZyB3YXMgcmVxdWVzdGVkIG9mIHRoZSBwcm9taXNlZSwgZ29vZCBjb25zaWRlcmF0aW9uIHdhcyB0byBiZSBmb3VuZCBpbiBoYXZpbmcgPHNwYW4gY2xhc3M9XCJpdFwiPmdvdCBtYXJyaWVkPC9zcGFuPiwgYXMgcGVyIHRoZSAoYWxiZWl0IGluZXhwbGljaXQpIHN0aXB1bGF0aW9uIG9mIHRoZSBvZmZlci4gVG8gZG8gc28gd2FzIHRvIGhhdmUgc3VmZmVyZWQgZGV0cmltZW50LCBpbiB0aGUgc2Vuc2Ugb2YgYSA8c3BhbiBjbGFzcz1cIml0XCI+Y2hhbmdlIG9mIHBvc2l0aW9uPC9zcGFuPi4iCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkNvbnNpZGVyYXRpb24gJm1kYXNoOyBDb25zaWRlcmF0aW9uIE11c3QgQmUgUmVxdWVzdGVkIiwKICAgICJOVU1CRVIiOiAiNjUiLAogICAgIllFQVIiOiAiMTg2MCIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiRGlja2luc29uIHYgQWJlbCBbMTk2OV0gMSBXTFIgMjk1IiwKICAgICJOQU1FIjogIkRpY2tpbnNvbiB2IEFiZWwiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlRoZSBFdXJ5bWVkb24iLAogICAgICAgICJDb21iZSB2IENvbWJlIiwKICAgICAgICAiVGhvbWFzIHYgVGhvbWFzIiwKICAgICAgICAiU2hhZHdlbGwgdiBTaGFkd2VsbCIsCiAgICAgICAgIkNvbGxpbnMgdiBHb2RlZnJveSIsCiAgICAgICAgIlJvc2NvcmxhIHYgVGhvbWFzIiwKICAgICAgICAiV2FkZSB2IFNpbWVvbiIsCiAgICAgICAgIkxhbXBsZWlnaCB2IEJyYXRod2FpdCIsCiAgICAgICAgIkdsYXNicm9vayB2IEdsYW1vcmdhbiIsCiAgICAgICAgIkNvb2sgdiBXcmlnaHQiLAogICAgICAgICJXYXJkIHYgQnloYW0iLAogICAgICAgICJQYW8gT24gdiBMYXUgTG9uZyIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc2lkZXJhdGlvbiIsCiAgICAgICAgIkNvbnNpZGVyYXRpb24gRGlzdGluZ3Vpc2hlZCBGcm9tIENvbmRpdGlvbmFsIEdpZnRzIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBIHByb21pc2UgdmFsaWQgb25seSBvbiBmdWxmaWxtZW50IG9mIGEgY29uZGl0aW9uIGZhaWxzIHRvIGJlIGVuZm9yY2VhYmxlIGluIGNvbnRyYWN0LCBzaG91bGQgdGhhdCBjb25kaXRpb24gZW50YWlsIG5vIGRldHJpbWVudCBwYXNzaW5nIGZyb20gdGhlIHByb21pc2VlLiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiQ29uc2lkZXJhdGlvbiAmbWRhc2g7IENvbnNpZGVyYXRpb24gRGlzdGluZ3Vpc2hlZCBGcm9tIENvbmRpdGlvbmFsIEdpZnRzIiwKICAgICJOVU1CRVIiOiAiNjYiLAogICAgIllFQVIiOiAiMTk2OSIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiUm9zY29ybGEgdiBUaG9tYXMgKDE4NDIpIDMgUUIgMjM0IiwKICAgICJOQU1FIjogIlJvc2NvcmxhIHYgVGhvbWFzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJXYWRlIHYgU2ltZW9uIiwKICAgICAgICAiUGFvIE9uIHYgTGF1IExvbmciLAogICAgICAgICJXYXJkIHYgQnloYW0iLAogICAgICAgICJDaGFwcGVsbCB2IE5lc3RsZSIsCiAgICAgICAgIkRpY2tpbnNvbiB2IEFiZWwiLAogICAgICAgICJMYW1wbGVpZ2ggdiBCcmF0aHdhaXQiLAogICAgICAgICJTaGFkd2VsbCB2IFNoYWR3ZWxsIiwKICAgICAgICAiQ29vayB2IFdyaWdodCIsCiAgICAgICAgIkNvbGxpbnMgdiBHb2RlZnJveSIsCiAgICAgICAgIlRob21hcyB2IFRob21hcyIsCiAgICAgICAgIlRoZSBFdXJ5bWVkb24iLAogICAgICAgICJHbGFzYnJvb2sgdiBHbGFtb3JnYW4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnNpZGVyYXRpb24iLAogICAgICAgICJDb25zaWRlcmF0aW9uIE11c3QgTm90IEJlIFBhc3QiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgcHJvbWlzZSBtYXkgbm90IGJlIHN1cHBvcnRlZCBieSBhIGRldHJpbWVudCBpbmN1cnJlZCBieSB0aGUgcHJvbWlzZWUgPHNwYW4gY2xhc3M9XCJpdFwiPmJlZm9yZTwvc3Bhbj4gdGhlIHByb21pc2Ugd2FzIG1hZGUuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJDb25zaWRlcmF0aW9uICZtZGFzaDsgQ29uc2lkZXJhdGlvbiBNdXN0IE5vdCBCZSBQYXN0IiwKICAgICJOVU1CRVIiOiAiNjciLAogICAgIllFQVIiOiAiMTg0MiIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiTGFtcGxlaWdoIHYgQnJhdGh3YWl0ICgxNjE1KSBIb2IgMTA1IiwKICAgICJOQU1FIjogIkxhbXBsZWlnaCB2IEJyYXRod2FpdCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUGFvIE9uIHYgTGF1IExvbmciLAogICAgICAgICJSb3Njb3JsYSB2IFRob21hcyIsCiAgICAgICAgIkNvbWJlIHYgQ29tYmUiLAogICAgICAgICJDb2xsaW5zIHYgR29kZWZyb3kiLAogICAgICAgICJDb29rIHYgV3JpZ2h0IiwKICAgICAgICAiVGhvbWFzIHYgVGhvbWFzIiwKICAgICAgICAiV2FyZCB2IEJ5aGFtIiwKICAgICAgICAiR2xhc2Jyb29rIHYgR2xhbW9yZ2FuIiwKICAgICAgICAiU2hhZHdlbGwgdiBTaGFkd2VsbCIsCiAgICAgICAgIldhZGUgdiBTaW1lb24iLAogICAgICAgICJUaGUgRXVyeW1lZG9uIiwKICAgICAgICAiQ2hhcHBlbGwgdiBOZXN0bGUiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnNpZGVyYXRpb24iLAogICAgICAgICJEb2N0cmluZSBvZiBJbXBsaWVkIEFzc3VtcHNpdCIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBzZXJ2aWNlIHBlcmZvcm1lZCBvbiB0aGUgdW5kZXJzdGFuZGluZyB0aGF0IHBheW1lbnQgd291bGQgY29tZSBsYXRlciBtYXkgYmUgZW1wbG95ZWQgdG8gc3VwcG9ydGluZyBhIHN1YnNlcXVlbnQgcHJvbWlzZSB0byBwYXksIHRocm91Z2ggdGhlIGRvY3RyaW5lIG9mIGltcGxpZWQgYXNzdW1wc2l0LiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiQ29uc2lkZXJhdGlvbiAmbWRhc2g7IERvY3RyaW5lIG9mIEltcGxpZWQgQXNzdW1wc2l0IiwKICAgICJOVU1CRVIiOiAiNjgiLAogICAgIllFQVIiOiAiMTYxNSIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiQ29uc2lkZXJhdGlvbiAmbWRhc2g7IERvY3RyaW5lIG9mIEltcGxpZWQgQXNzdW1wc2l0IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJMYW1wbGVpZ2ggdiBCcmF0aHdhaXQiLAogICAgICAgICJXYXJkIHYgQnloYW0iLAogICAgICAgICJDaGFwcGVsbCB2IE5lc3RsZSIsCiAgICAgICAgIldhZGUgdiBTaW1lb24iLAogICAgICAgICJUaG9tYXMgdiBUaG9tYXMiLAogICAgICAgICJUaGUgRXVyeW1lZG9uIiwKICAgICAgICAiUm9zY29ybGEgdiBUaG9tYXMiLAogICAgICAgICJDb2xsaW5zIHYgR29kZWZyb3kiLAogICAgICAgICJDb29rIHYgV3JpZ2h0IiwKICAgICAgICAiR2xhc2Jyb29rIHYgR2xhbW9yZ2FuIiwKICAgICAgICAiRGlja2luc29uIHYgQWJlbCIsCiAgICAgICAgIkNvbWJlIHYgQ29tYmUiCiAgICBdLAogICAgIk5VTUJFUiI6ICI2OSIsCiAgICAiWUVBUiI6ICIxOTgwIiwKICAgICJOQU1FIjogIlBhbyBPbiB2IExhdSBMb25nIiwKICAgICJDSVRBVElPTiI6ICJQYW8gT24gdiBMYXUgWWl1IExvbmcgWzE5ODBdIEFDIDYxNCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc2lkZXJhdGlvbiIsCiAgICAgICAgIkRvY3RyaW5lIG9mIEltcGxpZWQgQXNzdW1wc2l0IgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBcyBwYXJ0IG9mIGEgY29tcGxleCBkZWFsIGJldHdlZW4gdHdvIGNvbXBhbmllcyAodGhlIG1haW4gYWdyZWVtZW50KSwgdGhlIHBsYWludGlmZnMgd2VyZSB0byByZWNlaXZlIHNoYXJlcyBmcm9tIHRoZSBkZWZlbmRhbnRzLiBTaW5jZSB0aGV5IGFncmVlZCBub3QgdG8gZGlzcG9zZSBvZiB0aGUgc2hhcmVzIGZvciBhIHN0YXRlZCBwZXJpb2QsIHRoZXkgbmVnb3RpYXRlZCBhbiB1bmRlcnRha2luZyBmcm9tIHRoZSBkZWZlbmRhbnRzIHRvIGJ1eSB0aGUgc2hhcmVzIGJhY2sgYXQgYSBzdGF0ZWQgdmFsdWUgaW4gb3JkZXIgdG8gbGVzc2VuIHRoZWlyIGV4cG9zdXJlIHRvIGEgcG9zc2libGUgZmFsbCBpbiB0aGUgc2hhcmUgcHJpY2UuIFdoZW4gdGhlIHBsYWludGlmZnMgbGF0ZXIgcmVhbGlzZWQgdGhhdCB0aGlzIHVuZGVydGFraW5nIGxlZnQgdGhlbSB2dWxuZXJhYmxlIHRvIGdpdmUgdXAgdGhlIHNoYXJlcyBhdCB0aGUgc2FtZSB2YWx1ZSBldmVuIGlmIHRoZXkgaGFkIHJpc2VuIGFib3ZlIGl0IG9uIHRoZSBvcGVuIG1hcmtldCwgdGhleSBpbnNpc3RlZCBvbiB0aGUgZGVmZW5kYW50cyBncmFudGluZyB0aGVtIGEgZ3VhcmFudGVlIHRoYXQgd291bGQgcHJvdGVjdCB0aGVtIGlmIHRoZSBzaGFyZSBwcmljZSBmZWxsLCBidXQgbGVhdmUgdGhlbSBmcmVlIHRvIHByb2ZpdCBpZiB0aGUgcHJpY2Ugcm9zZS4gVGhlIHN0YXRlZCBjb25zaWRlcmF0aW9uIHdhcyB0aGUgcGxhaW50aWZmc1x1MjAxOSBwZXJmb3JtYW5jZSBvZiB0aGUgbWFpbiBhZ3JlZW1lbnQuIEluIGZhY3QgdGhlIHNoYXJlIHByaWNlIHNsdW1wZWQsIGFuZCB0aGUgZGVmZW5kYW50cyBsYXRlciBtYWludGFpbmVkIHRoYXQgdGhleSByZWNlaXZlZCBubyBjb25zaWRlcmF0aW9uIGZvciB0aGUgZ3VhcmFudGVlIHRoZXkgaGFkIGdpdmVuLCBzaW5jZSBpdCB3YXMgcGFzdCAoYW5kIHRoZXkgYXJndWVkIHRoYXQgdGhlIGd1YXJhbnRlZSBoYWQgYmVlbiBwcm9jdXJlZCBieSBlY29ub21pYyBkdXJlc3MpLiBUaGUgUHJpdnkgQ291bmNpbCBoZWxkIHRoYXQgdGhlIG1haW4gYWdyZWVtZW50IHdhcyBub3QgZnVsbHkgZXhlY3V0ZWQgYXQgdGhlIHRpbWUgdGhlIGd1YXJhbnRlZSB3YXMgZ2l2ZW4sIHNvIHRoYXQgc3VmZmljaWVudCBjb25zaWRlcmF0aW9uIHdhcyBnaXZlbiBieSB0aGUgcGxhaW50aWZmc1x1MjAxOSBwcm9taXNlIHRvIHBlcmZvcm0gaXQuIEl0IHdhcyBub3Qgdm9pZGFibGUgZm9yIGR1cmVzcy4iCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIk9iaXRlciwgTG9yZCBTY2FybWFuIHN0YXRlZCBoaXMgdW5kZXJzdGFuZGluZyBvZiB0aGUgY29uZGl0aW9ucyBmb3IgaW1wbGllZCBhc3N1bXBzaXQ6IDxzcGFuIGNsYXNzPVwiYmRcIj4oaSk8L3NwYW4+IGFuIGFjdCBkb25lIGJ5IHByb21pc2VlIGZvciBwcm9taXNvciwgPHNwYW4gY2xhc3M9XCJiZFwiPihpaSk8L3NwYW4+IGF0IHByb21pc29yJiM4MjE3O3MgcmVxdWVzdCwgYW5kIDxzcGFuIGNsYXNzPVwiYmRcIj4oaWlpKTwvc3Bhbj4gdW5kZXJzdG9vZCBieSBib3RoIHBhcnRpZXMgdG8gaGF2ZSBiZWVuIHBlcmZvcm1lZCBmb3IgdGhlIGJlbmVmaXQgb2YgdGhlIHByb21pc2UgKGkuZS4sIHBheW1lbnQpLiIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiQ29sbGlucyB2IEdvZGVmcm95ICgxODMxKSAxIEIgJmFtcDsgQWQgOTUwIiwKICAgICJOQU1FIjogIkNvbGxpbnMgdiBHb2RlZnJveSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiV2FyZCB2IEJ5aGFtIiwKICAgICAgICAiR2xhc2Jyb29rIHYgR2xhbW9yZ2FuIiwKICAgICAgICAiQ29tYmUgdiBDb21iZSIsCiAgICAgICAgIkNoYXBwZWxsIHYgTmVzdGxlIiwKICAgICAgICAiTGFtcGxlaWdoIHYgQnJhdGh3YWl0IiwKICAgICAgICAiU2hhZHdlbGwgdiBTaGFkd2VsbCIsCiAgICAgICAgIkRpY2tpbnNvbiB2IEFiZWwiLAogICAgICAgICJQYW8gT24gdiBMYXUgTG9uZyIsCiAgICAgICAgIkNvb2sgdiBXcmlnaHQiLAogICAgICAgICJUaG9tYXMgdiBUaG9tYXMiLAogICAgICAgICJUaGUgRXVyeW1lZG9uIiwKICAgICAgICAiUm9zY29ybGEgdiBUaG9tYXMiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnNpZGVyYXRpb24iLAogICAgICAgICJQZXJmb3JtYW5jZSBvZiBFeGlzdGluZyBMZWdhbCBEdXRpZXMgYXMgQ29uc2lkZXJhdGlvbiIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIHBlcmZvcm1hbmNlIG9mIGEgbGVnYWwgb2JsaWdhdGlvbiBzdWNoIGFzIGdpdmluZyBldmlkZW5jZSBvbiBzdWJwb2VuYSB3aWxsIG5vdCBiZSBnb29kIGNvbnNpZGVyYXRpb24gZm9yIGEgcHJvbWlzZSBvZiByZWltYnVyc2VtZW50LiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiQ29uc2lkZXJhdGlvbiAmbWRhc2g7IFBlcmZvcm1hbmNlIG9mIEV4aXN0aW5nIExlZ2FsIER1dGllcyBhcyBDb25zaWRlcmF0aW9uIiwKICAgICJOVU1CRVIiOiAiNzAiLAogICAgIllFQVIiOiAiMTgzMSIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiQ29uc2lkZXJhdGlvbiAmbWRhc2g7IFBlcmZvcm1hbmNlIG9mIEV4aXN0aW5nIExlZ2FsIER1dGllcyBhcyBDb25zaWRlcmF0aW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDb2xsaW5zIHYgR29kZWZyb3kiLAogICAgICAgICJXYXJkIHYgQnloYW0iLAogICAgICAgICJSb3Njb3JsYSB2IFRob21hcyIsCiAgICAgICAgIlRob21hcyB2IFRob21hcyIsCiAgICAgICAgIlNoYWR3ZWxsIHYgU2hhZHdlbGwiLAogICAgICAgICJMYW1wbGVpZ2ggdiBCcmF0aHdhaXQiLAogICAgICAgICJQYW8gT24gdiBMYXUgTG9uZyIsCiAgICAgICAgIlRoZSBFdXJ5bWVkb24iLAogICAgICAgICJDaGFwcGVsbCB2IE5lc3RsZSIsCiAgICAgICAgIkRpY2tpbnNvbiB2IEFiZWwiLAogICAgICAgICJDb21iZSB2IENvbWJlIiwKICAgICAgICAiV2FkZSB2IFNpbWVvbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjcxIiwKICAgICJZRUFSIjogIjE5MjUiLAogICAgIk5BTUUiOiAiR2xhc2Jyb29rIHYgR2xhbW9yZ2FuIiwKICAgICJDSVRBVElPTiI6ICJHbGFzYnJvb2sgQnJvcyBMdGQgdiBHbGFtb3JnYW4gQ291bnR5IENvdW5jaWwgWzE5MjVdIEFDIDI3MCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc2lkZXJhdGlvbiIsCiAgICAgICAgIlBlcmZvcm1hbmNlIG9mIEV4aXN0aW5nIExlZ2FsIER1dGllcyBhcyBDb25zaWRlcmF0aW9uIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgcGVyZm9ybWFuY2Ugb2YgYSBsZWdhbCBkdXR5IG1heSBiZSBnb29kIGNvbnNpZGVyYXRpb24gc2hvdWxkIGl0IGdvIGJleW9uZCB3aGF0IGlzIG9ibGlnYXRvcnkuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXRraW4iLAogICAgICAgICJEZW5uaW5nIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJDb25zaWRlcmF0aW9uICZtZGFzaDsgUGVyZm9ybWFuY2Ugb2YgRXhpc3RpbmcgTGVnYWwgRHV0aWVzIGFzIENvbnNpZGVyYXRpb24iLAogICAgIi0tQ0FURUdPUlkiOiAiQ29uc2lkZXJhdGlvbjsgUGVyZm9ybWFuY2Ugb2YgQ29udHJhY3R1YWwgRHV0aWVzIE93ZWQgdG8gYSBUaGlyZCBQYXJ0eSBhcyBDb25zaWRlcmF0aW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJHbGFzYnJvb2sgdiBHbGFtb3JnYW4iLAogICAgICAgICJDb2xsaW5zIHYgR29kZWZyb3kiLAogICAgICAgICJXYWRlIHYgU2ltZW9uIiwKICAgICAgICAiQ29vayB2IFdyaWdodCIsCiAgICAgICAgIkNoYXBwZWxsIHYgTmVzdGxlIiwKICAgICAgICAiTGFtcGxlaWdoIHYgQnJhdGh3YWl0IiwKICAgICAgICAiUGFvIE9uIHYgTGF1IExvbmciLAogICAgICAgICJSb3Njb3JsYSB2IFRob21hcyIsCiAgICAgICAgIkRpY2tpbnNvbiB2IEFiZWwiLAogICAgICAgICJUaG9tYXMgdiBUaG9tYXMiLAogICAgICAgICJTaGFkd2VsbCB2IFNoYWR3ZWxsIiwKICAgICAgICAiQ29tYmUgdiBDb21iZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjcyIiwKICAgICJZRUFSIjogIjE5NTYiLAogICAgIk5BTUUiOiAiV2FyZCB2IEJ5aGFtIiwKICAgICItLU5BTUUiOiAiU2NvdHNvbiB2IFBlZ2ciLAogICAgIkNJVEFUSU9OIjogIldhcmQgdiBCeWhhbSBbMTk1Nl0gMSBXTFIgNDk2IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb25zaWRlcmF0aW9uIiwKICAgICAgICAiUGVyZm9ybWFuY2Ugb2YgRXhpc3RpbmcgTGVnYWwgRHV0aWVzIGFzIENvbnNpZGVyYXRpb24iCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkRlbm5pbmcgTEogZG91YnRlZCB0aGUgcnVsZSB0aGF0IHBlcmZvcm1hbmNlIG9mIGFuIGV4aXN0aW5nIGR1dHkgY291bGQgbm90IGJlIGdvb2QgY29uc2lkZXJhdGlvbiwgb24gdGhlIGJhc2lzIHRoYXQgbWVyZWx5IGdldHRpbmcgc29tZXRoaW5nIHJlcXVlc3RlZCB3b3VsZCBiZSBvZiBiZW5lZml0IHRvIHByb21pc29yLiBUaGlzIGRyZXcgbmVhciB0byB0aGUgQzE4dGggdmlldyBhcnRpY3VsYXRlZCBieSBMb3JkIE1hbnNmaWVsZCwgdGhhdCBzdWZmaWNpZW50IGNvbnNpZGVyYXRpb24gaXMgdG8gYmUgZm91bmQgaW4gdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj4mIzgyMjA7dGllcyBvZiBjb25zY2llbmNlIHVwb24gYW4gdXByaWdodCBtaW5kJiM4MjIxOzwvc3Bhbj4uIgogICAgXSwKICAgICItLUNJVEFUSU9OIjogIlNjb3Rzb24gdiBQZWdnICgxODYxKSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkRlbm5pbmciCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIkNvbnNpZGVyYXRpb24gJm1kYXNoOyBQZXJmb3JtYW5jZSBvZiBDb250cmFjdHVhbCBEdXRpZXMgT3dlZCB0byBhIFRoaXJkIFBhcnR5IGFzIENvbnNpZGVyYXRpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlRob21hcyB2IFRob21hcyIsCiAgICAgICAgIkxhbXBsZWlnaCB2IEJyYXRod2FpdCIsCiAgICAgICAgIlNoYWR3ZWxsIHYgU2hhZHdlbGwiLAogICAgICAgICJDb2xsaW5zIHYgR29kZWZyb3kiLAogICAgICAgICJHbGFzYnJvb2sgdiBHbGFtb3JnYW4iLAogICAgICAgICJSb3Njb3JsYSB2IFRob21hcyIsCiAgICAgICAgIlBhbyBPbiB2IExhdSBMb25nIiwKICAgICAgICAiRGlja2luc29uIHYgQWJlbCIsCiAgICAgICAgIldhcmQgdiBCeWhhbSIsCiAgICAgICAgIkNvbWJlIHYgQ29tYmUiLAogICAgICAgICJDb29rIHYgV3JpZ2h0IiwKICAgICAgICAiQ2hhcHBlbGwgdiBOZXN0bGUiCiAgICBdLAogICAgIllFQVIiOiAiMTk1NiIsCiAgICAiTlVNQkVSIjogIjczIiwKICAgICJBS0EiOiAiTmV3IFplYWxhbmQgU2hpcHBpbmcgdiBTYXR0ZXJ0aHdhaXRlIiwKICAgICJOQU1FIjogIlRoZSBFdXJ5bWVkb24iLAogICAgIkNJVEFUSU9OIjogIk5ldyBaZWFsYW5kIFNoaXBwaW5nIENvIEx0ZCB2IFNhdHRlcnRod2FpdGUgKFRoZSBFdXJ5bWVkb24pIFsxOTU2XSAxIFdMUiA0OTYiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnNpZGVyYXRpb24iLAogICAgICAgICJQZXJmb3JtYW5jZSBvZiBDb250cmFjdHVhbCBEdXRpZXMgT3dlZCB0byBhIFRoaXJkIFBhcnR5IGFzIENvbnNpZGVyYXRpb24iCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFuIGV4aXN0aW5nIGNvbnRyYWN0dWFsIGR1dHkgb3dlZCA8c3BhbiBjbGFzcz1cIml0XCI+dG8gYSAzcmQgdGhpcmQgcGFydHk8L3NwYW4+IG1heSBwcmVzc2VkIGludG8gdGhlIG1vdWxkIG9mIGdvb2QgY29uc2lkZXJhdGlvbiwgc2hvdWxkIG5vdGhpbmcgZWxzZSBiZSBmb3VuZCB0byBlbmZvcmNlIGEgYnVzaW5lc3MgYXJyYW5nZW1lbnQgb2YgbXV0dWFsbHktcHJvZml0YWJsZSBjaGFyYWN0ZXIgaW4gdGhlIG5vcm1hbCBjb3Vyc2Ugb2YgZXZlbnRzLiIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiTkFNRSI6ICJDb250cmFjdHVhbCBEdXRpZXMgYXMgQ29uc2lkZXJhdGlvbiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUHJvbWlzc29yeSBFc3RvcHBlbCIsCiAgICAgICAgIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJDb25zaWRlcmF0aW9uIC0gT3ZlcnZpZXciLAogICAgICAgICJJbXBsaWNhdGlvbiBvZiBUZXJtcyAtIEludHJvIiwKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBDb25mbGljdGluZyBUZXJtcyIsCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgUG9zaXRpdmUgVGVybXMiLAogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIE5lZ2F0aXZlIFRlcm1zIiwKICAgICAgICAiQ29uc2lkZXJhdGlvbiAtIERldGFpbCIsCiAgICAgICAgIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSIsCiAgICAgICAgIk9mZmVycyIsCiAgICAgICAgIk1pc3Rha2UgLSBJbnRyb2R1Y3Rpb24iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRvd2FyZHMgUHJvbWlzc29yeSBFc3RvcHBlbCIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+SW50cm88L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+UGVyZm9ybWFuY2UgYWxyZWFkeSBvd2VkIGJ5IHByb21pc2VlIHRvIHByb21pc29yIGlzIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3QgZ29vZCBjb25zaWRlcmF0aW9uPC9zcGFuPiBmb3IgcHJvbWlzZSBvZiBtb3JlIHBheS4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U3RpbGsgdiBNeXJpY2s8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VW5sZXNzIHRoZSBwZXJmb3JtYW5jZSBpbiBxdWVzdGlvbiB3b3VsZCByZWFsbHkgYmUgPHNwYW4gY2xhc3M9XCJiZFwiPm5ldzwvc3Bhbj4gZHV0aWVzLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IYXJ0bGV5IHYgUG9uc29uYnk8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJpdFwiPkhvd2V2ZXI8L3NwYW4+ICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5TaW5jZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5XaWxsaWFtcyB2IFJvZmZleTwvc3Bhbj4sIHBlcmZvcm1hbmNlIG9mIDxzcGFuIGNsYXNzPVwiYmRcIj5zZXJ2aWNlcyBleHBlY3RlZCB0byBmYWxsIHNob3J0PC9zcGFuPiAoYW5kIGluIGRvaW5nIHNvLCB0byBjYXVzZSBkZXRyaW1lbnQgdG8gdGhlIG90aGVyIHBhcnR5KSBtaWdodCBiZSA8c3BhbiBjbGFzcz1cImJkXCI+Y29uc3RydWVkIGFzIGNvbmZlcnJpbmcgYSBiZW5lZml0PC9zcGFuPiBvbiB0aGUgb3RoZXIgcGFydHkgKG9mIGF2b2lkaW5nIHRoZSBkZXRyaW1lbnQpLCBhbmQgdGhlcmVmb3JlIGJlIDxzcGFuIGNsYXNzPVwiYmRcIj5nb29kIGNvbnNpZGVyYXRpb248L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QnV0IG9ubHkgaW4gY29udHJhY3RzIGZvciBzZXJ2aWNlcy4gTm90LCBlLmcuLCByZXBheWluZyBtb25leS4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmUgU2VsZWN0bW92ZSAtIFBFPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5QYXJ0LVBheW1lbnQgb2YgRGVidDwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPklzIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+IGdvb2QgY29uc2lkZXJhdGlvbjwvc3Bhbj4gJm1kYXNoOyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkZvciBhIHByb21pc2UgdG8gZm9yZ2l2ZSB0aGUgZnVsbCBhbW91bnQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Rm9ha2VzIHYgQmVlcjwvc3Bhbj4sIGNvbmZpcm1pbmcgdGhlIHJ1bGUgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGlubmVsJiM4MjE3O3MgQ2FzZTwvc3Bhbj4uPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBFeGNlcHQgaWYgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdCB5ZXQgZHVlPC9zcGFuPiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QaW5uZWwmIzgyMTc7cyBDYXNlPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJpdFwiPkl0IDxzcGFuIGNsYXNzPVwiYmRcIj5pczwvc3Bhbj4sIHRob3VnaCwgaWYgcHJvZmZlcmVkPC9zcGFuPiAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkluIGFub3RoZXIgcGxhY2U8L3NwYW4+IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlZhbmJlcmdlbiB2IFN0LiBFZG11bmRzPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5CeSBhIHRoaXJkIHBhcnR5PC9zcGFuPiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IaXJhY2hhbmQgUHVuYW1jaGFuZCB2IFRlbXBsZTwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIk5VTUJFUiI6ICI3NCIKfSwKewogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiTkFNRSI6ICJQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDb250cmFjdHVhbCBEdXRpZXMgYXMgQ29uc2lkZXJhdGlvbiIsCiAgICAgICAgIkltcGxpY2F0aW9uIG9mIFRlcm1zIC0gSW50cm8iLAogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIE5lZ2F0aXZlIFRlcm1zIiwKICAgICAgICAiQ29uc2lkZXJhdGlvbiAtIE92ZXJ2aWV3IiwKICAgICAgICAiTWlzdGFrZSAtIEludHJvZHVjdGlvbiIsCiAgICAgICAgIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFBvc2l0aXZlIFRlcm1zIiwKICAgICAgICAiQ29uc2lkZXJhdGlvbiAtIERldGFpbCIsCiAgICAgICAgIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSIsCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgQ29uZmxpY3RpbmcgVGVybXMiLAogICAgICAgICJPZmZlcnMiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRvd2FyZHMgUHJvbWlzc29yeSBFc3RvcHBlbCIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+SW50cm88L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SHVnaGVzIHYgTWV0cm9wb2xpdGFuIFJhaWx3YXk8L3NwYW4+IGlzIHRoZSBsZWFkaW5nIGNhc2UsIGFjY29yZGluZyB0byBUcmVpdGVsLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2VudHJhbCBMb25kb24gdiBIaWdoIFRyZWVzPC9zcGFuPiBnZXRzIG1vcmUgYXR0ZW50aW9uLCBiZWNhdXNlIERlbm5pbmcuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+UmVxdWlyZW1lbnRzPC9zcGFuPiIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFzc3VyYW5jZS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlJlbGlhbmNlIGJ5IHByb21pc2VlLCB3aGljaCBuZWVkIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGJlIGRldHJpbWVudGFsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRoZSBQb3N0IENoYXNlcjwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JbmVxdWl0YWJpbGl0eSBvZiBwcm9taXNvciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaGUgUG9zdCBDaGFzZXI8L3NwYW4+Ljxicj48c3BhbiBjbGFzcz1cIml0XCI+YW5kPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPk5vPC9zcGFuPiBpbmVxdWl0YWJpbGl0eSBvZiBwcm9taXNlZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EJmFtcDtDIEJ1aWxkZXJzIHYgUmVlczwvc3Bhbj4uPC9zcGFuPjwvbGk+PC9vbD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RmVhdHVyZXM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IElzIGEgc2hpZWxkLCBub3QgYSBzd29yZCAmbWRhc2g7IGNvdW5zZWwgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGhlIFBvc3QgQ2hhc2VyPC9zcGFuPi48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbWJlIHYgQ29tYmU8L3NwYW4+IGl0IG1heSBoYXZlIHRvZWQgdGhlIGxpbmUuPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBBY3RzIHRvIDxzcGFuIGNsYXNzPVwiaXRcIj5zdXNwZW5kPC9zcGFuPiBsZWdhbCByaWdodHMsIG5vdCBleHRpbmd1aXNoIHRoZW0gYWx0b2dldGhlci4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VG9vbCBNZXRhbCB2IFR1bmdzdGVuIEVsZWN0cmljPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjc1Igp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJTdGlsayB2IE15cmljayAoMTgwOSkgMiBDYW1wIDMxNzsgNiBFc3AgMTI5IiwKICAgICJOQU1FIjogIlN0aWxrIHYgTXlyaWNrIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJIaXJhY2hhbmQgUHVuYW1jaGFuZCB2IFRlbXBsZSIsCiAgICAgICAgIlZhbmJlcmdlbiB2IFN0IEVkbXVuZHMiLAogICAgICAgICJIYXJ0bGV5IHYgUG9uc29uYnkiLAogICAgICAgICJGb2FrZXMgdiBCZWVyIiwKICAgICAgICAiUGlubmVsJ3MgQ2FzZSIsCiAgICAgICAgIlRoZSBQb3N0IENoYXNlciIsCiAgICAgICAgIkQmQyBCdWlsZGVycyB2IFJlZXMiLAogICAgICAgICJXaWxsaWFtcyB2IFJvZmZleSIsCiAgICAgICAgIkh1Z2hlcyB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IiwKICAgICAgICAiUmUgU2VsZWN0bW92ZSAtIFBFIiwKICAgICAgICAiQ2VudHJhbCBMb25kb24gdiBIaWdoIFRyZWVzIiwKICAgICAgICAiV2FybG93IHYgSGFycmlzb24iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRvd2FyZHMgUHJvbWlzc29yeSBFc3RvcHBlbCIsCiAgICAgICAgIkV4aXN0aW5nIENvbnRyYWN0dWFsIE9ibGlnYXRpb25zIGFzIENvbnNpZGVyYXRpb24iCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlBlcmZvcm1hbmNlIG9mIGEgY29udHJhY3R1YWwgb2JsaWdhdGlvbiBhbHJlYWR5IG93ZWQgYnkgcHJvbWlzZWUgdG8gcHJvbWlzb3IgY2Fubm90IHByb3ZpZGUgY29uc2lkZXJhdGlvbiBmb3IgYSBuZXcgcHJvbWlzZSwgd2hpY2gsIGJ5IGNvbnNlcXVlbmNlLCB3aWxsIG5vdCBiZSBlbmZvcmNlYWJsZSBieSB0aGUgcHJvbWlzZWUuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJUb3dhcmRzIFByb21pc3NvcnkgRXN0b3BwZWwgJm1kYXNoOyBFeGlzdGluZyBDb250cmFjdHVhbCBPYmxpZ2F0aW9ucyBhcyBDb25zaWRlcmF0aW9uIiwKICAgICJOVU1CRVIiOiAiNzYiLAogICAgIllFQVIiOiAiMTgwOSIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiSGFydGxleSB2IFBvbnNvbmJ5ICgxODU3KSA3IEUmYW1wO0IgODcyIiwKICAgICJOQU1FIjogIkhhcnRsZXkgdiBQb25zb25ieSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUGlubmVsJ3MgQ2FzZSIsCiAgICAgICAgIkhpcmFjaGFuZCBQdW5hbWNoYW5kIHYgVGVtcGxlIiwKICAgICAgICAiRm9ha2VzIHYgQmVlciIsCiAgICAgICAgIlZhbmJlcmdlbiB2IFN0IEVkbXVuZHMiLAogICAgICAgICJTdGlsayB2IE15cmljayIsCiAgICAgICAgIlRoZSBQb3N0IENoYXNlciIsCiAgICAgICAgIldpbGxpYW1zIHYgUm9mZmV5IiwKICAgICAgICAiUmUgU2VsZWN0bW92ZSAtIFBFIiwKICAgICAgICAiRCZDIEJ1aWxkZXJzIHYgUmVlcyIsCiAgICAgICAgIkh1Z2hlcyB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IiwKICAgICAgICAiQ2VudHJhbCBMb25kb24gdiBIaWdoIFRyZWVzIiwKICAgICAgICAiT2xsZXkgdiBNYXJsYm9yb3VnaCBDb3VydCBIb3RlbCIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiRXhpc3RpbmcgQ29udHJhY3R1YWwgT2JsaWdhdGlvbnMgYXMgQ29uc2lkZXJhdGlvbiIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiU2hvdWxkIGEgcHJvbWlzZSBwdXJwb3J0aW5nIHRvIGJlIGluIGV4Y2hhbmdlIGZvciBwZXJmb3JtYW5jZSBvZiBleGlzdGluZyBjb250cmFjdHVhbCBvYmxpZ2F0aW9ucyBlbnRhaWwsIGluIHBvaW50IG9mIGZhY3QsIHBlcmZvcm1hbmNlIGZvciB3aGljaCB0aGUgY29udHJhY3QgZG9lcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBwcm92aWRlLCBhIG5ldyBjb250cmFjdCB3aWxsIGhhdmUgYmVlbiBlc3RhYmxpc2hlZCwgYW5kIHRoZSBwcm9taXNlIHdpbGwgYmUgZW5mb3JjZWFibGUuICBUaGUgcnVsZSB0aGF0IGV4aXN0aW5nIGNvbnRyYWN0dWFsIGR1dGllcyBhcmUgbm90IGdvb2QgY29uc2lkZXJhdGlvbiBmb3Igc3VjaCBhIHByb21pc2UgY2Fubm90IHRoZXJlZm9yZSBhcHBseSBpbiBzdWNoIGNpcmN1bXN0YW5jZXMuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJUb3dhcmRzIFByb21pc3NvcnkgRXN0b3BwZWwgJm1kYXNoOyBFeGlzdGluZyBDb250cmFjdHVhbCBPYmxpZ2F0aW9ucyBhcyBDb25zaWRlcmF0aW9uIiwKICAgICJOVU1CRVIiOiAiNzciLAogICAgIllFQVIiOiAiMTg1NyIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiV2lsbGlhbXMgdiBSb2ZmZXkgQnJvcyBbMTk5MV0gMSBRQiAxIiwKICAgICJOQU1FIjogIldpbGxpYW1zIHYgUm9mZmV5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZSBTZWxlY3Rtb3ZlIC0gUEUiLAogICAgICAgICJQaW5uZWwncyBDYXNlIiwKICAgICAgICAiRCZDIEJ1aWxkZXJzIHYgUmVlcyIsCiAgICAgICAgIlRoZSBQb3N0IENoYXNlciIsCiAgICAgICAgIlZhbmJlcmdlbiB2IFN0IEVkbXVuZHMiLAogICAgICAgICJTdGlsayB2IE15cmljayIsCiAgICAgICAgIkNlbnRyYWwgTG9uZG9uIHYgSGlnaCBUcmVlcyIsCiAgICAgICAgIkhhcnRsZXkgdiBQb25zb25ieSIsCiAgICAgICAgIkh1Z2hlcyB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IiwKICAgICAgICAiRm9ha2VzIHYgQmVlciIsCiAgICAgICAgIkhpcmFjaGFuZCBQdW5hbWNoYW5kIHYgVGVtcGxlIiwKICAgICAgICAiRWNheSB2IEdvZGZyZXkiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRvd2FyZHMgUHJvbWlzc29yeSBFc3RvcHBlbCIsCiAgICAgICAgIkV2YXNpb24gb2YgdGhlIFJ1bGUgaW4gU3RpbGsgdiBNeXJpY2siCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkluIGEgY29udHJhY3QgdG8gc3VwcGx5IGdvb2RzIG9yIHNlcnZpY2VzLCBpZiB0aGUgaW5hZGVxdWFjeSBvZiB0aGUgcGVyZm9ybWFuY2Ugb2Ygb25lIHBhcnR5IGNvbWVzIHRvIHRoZSBhdHRlbnRpb24gb2YgdGhlIG90aGVyLCB3aG8gdGhlbiBwcm9taXNlcyBhZGRpdGlvbmFsIHBheW1lbnQsIHNob3VsZCB0aGUgcGVyZm9ybWFuY2UgYmUgY29tcGxldGVkIGFkZXF1YXRlbHkgYW5kIG9uIHRpbWU7IHRoZSBiZW5lZml0IHRoZSBhZGVxdWF0ZSBhbmQgdGltZWx5IGNvbXBsZXRpb24gb2YgcGVyZm9ybWFuY2Ugd291bGQgY29uZmVyIChlLmcuLCBieSBhdm9pZGluZyBhIHBlbmFsdHkgdW5kZXIgYW5vdGhlciBjb250cmFjdCkgd2lsbCBiZSBnb29kIGNvbnNpZGVyYXRpb24gZm9yIHRoZSBwcm9taXNlLCB3aGljaCBpbiBjb25zZXF1ZW5jZSB3aWxsIGJlIGVuZm9yY2VhYmxlLiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsICZtZGFzaDsgRXZhc2lvbiBvZiB0aGUgUnVsZSBpbiBTdGlsayB2IE15cmljayIsCiAgICAiTlVNQkVSIjogIjc4IiwKICAgICJZRUFSIjogIjE5OTEiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlJlIFNlbGVjdG1vdmUgTHRkIFsxOTk1XSAyIEFsbCBFUiA1MzEiLAogICAgIk5BTUUiOiAiUmUgU2VsZWN0bW92ZSAtIFBFIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJXaWxsaWFtcyB2IFJvZmZleSIsCiAgICAgICAgIlN0aWxrIHYgTXlyaWNrIiwKICAgICAgICAiQ2VudHJhbCBMb25kb24gdiBIaWdoIFRyZWVzIiwKICAgICAgICAiSHVnaGVzIHYgTWV0cm9wb2xpdGFuIFJhaWx3YXkiLAogICAgICAgICJEJkMgQnVpbGRlcnMgdiBSZWVzIiwKICAgICAgICAiSGFydGxleSB2IFBvbnNvbmJ5IiwKICAgICAgICAiUGlubmVsJ3MgQ2FzZSIsCiAgICAgICAgIkZvYWtlcyB2IEJlZXIiLAogICAgICAgICJUaGUgUG9zdCBDaGFzZXIiLAogICAgICAgICJIaXJhY2hhbmQgUHVuYW1jaGFuZCB2IFRlbXBsZSIsCiAgICAgICAgIlZhbmJlcmdlbiB2IFN0IEVkbXVuZHMiLAogICAgICAgICJEaWNraW5zb24gdiBEb2RkcyIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiRXZhc2lvbiBvZiB0aGUgUnVsZSBpbiBTdGlsayB2IE15cmljayIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIHJlY2VudCBmaW5kaW5nIHRoYXQgcGVyZm9ybWFuY2Ugb2YgZXhpc3RpbmcgY29udHJhY3R1YWwgZHV0aWVzIGNhbiBiZSBnb29kIGNvbnNpZGVyYXRpb24gZm9yIGEgcHJvbWlzZSwgaWYgc3VjaCBkdXRpZXMgYXJlIHVubGlrZWx5IHRvIGJlIGZ1bGZpbGxlZCBvbiB0aW1lLCBjYXVzaW5nIGEgZGV0cmltZW50IHRvIHRoZSBvdGhlciBwYXJ0eSAmbWRhc2g7IGRvZXMgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdDwvc3Bhbj4gYXBwbHkgdG8gc2l0dWF0aW9ucyB3aGVyZSB0aGUgcGVyZm9ybWFuY2UgaW4gcXVlc3Rpb24gaXMgdGhlIHJlcGF5aW5nIG9mIGEgZGVidC4iCiAgICBdLAogICAgIkNBVEVHT1JZIjogIlRvd2FyZHMgUHJvbWlzc29yeSBFc3RvcHBlbCAmbWRhc2g7IEV2YXNpb24gb2YgdGhlIFJ1bGUgaW4gU3RpbGsgdiBNeXJpY2siLAogICAgIk5VTUJFUiI6ICI3OSIsCiAgICAiWUVBUiI6ICIxOTk1Igp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJQaW5uZWwmIzgyMTc7cyBDYXNlICgxNjAyKSA1IFJlcCAxMTdhIiwKICAgICJOQU1FIjogIlBpbm5lbCdzIENhc2UiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlZhbmJlcmdlbiB2IFN0IEVkbXVuZHMiLAogICAgICAgICJGb2FrZXMgdiBCZWVyIiwKICAgICAgICAiU3RpbGsgdiBNeXJpY2siLAogICAgICAgICJIaXJhY2hhbmQgUHVuYW1jaGFuZCB2IFRlbXBsZSIsCiAgICAgICAgIkhhcnRsZXkgdiBQb25zb25ieSIsCiAgICAgICAgIkQmQyBCdWlsZGVycyB2IFJlZXMiLAogICAgICAgICJXaWxsaWFtcyB2IFJvZmZleSIsCiAgICAgICAgIkh1Z2hlcyB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IiwKICAgICAgICAiUmUgU2VsZWN0bW92ZSAtIFBFIiwKICAgICAgICAiQ2VudHJhbCBMb25kb24gdiBIaWdoIFRyZWVzIiwKICAgICAgICAiVGhlIFBvc3QgQ2hhc2VyIiwKICAgICAgICAiQ2hhcGVsdG9uIHYgQmFycnkiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlRvd2FyZHMgUHJvbWlzc29yeSBFc3RvcHBlbCIsCiAgICAgICAgIkV4aXN0aW5nIENvbnRyYWN0dWFsIE9ibGlnYXRpb25zIGFzIENvbnNpZGVyYXRpb24iLAogICAgICAgICJQYXJ0IFBheW1lbnQgb2YgYSBEZWJ0IGFzIENvbnNpZGVyYXRpb24iCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlBhcnQtcGF5bWVudCBvZiBhIGRlYnQgPHNwYW4gY2xhc3M9XCJpdFwiPm9uIHRoZSBkdWUgZGF5PC9zcGFuPiBpcyBub3QgZ29vZCBjb25zaWRlcmF0aW9uIGZvciBhIHByb21pc2UgdG8gZGlzY2hhcmdlIHRoZSBkZWJ0LiBTaG91bGQgaXQgY29tZSA8c3BhbiBjbGFzcz1cIml0XCI+YmVmb3JlPC9zcGFuPiwgb3IgPHNwYW4gY2xhc3M9XCJpdFwiPmJlIG1hZGUgaW4gYW5vdGhlciBwbGFjZTwvc3Bhbj4sIGhvd2V2ZXIsIGl0IG1heSBiZS4iCiAgICBdLAogICAgIkNBVEVHT1JZIjogIlRvd2FyZHMgUHJvbWlzc29yeSBFc3RvcHBlbCAmbWRhc2g7IEV4aXN0aW5nIENvbnRyYWN0dWFsIE9ibGlnYXRpb25zIGFzIENvbnNpZGVyYXRpb24gJm1kYXNoOyBQYXJ0IFBheW1lbnQgb2YgYSBEZWJ0IGFzIENvbnNpZGVyYXRpb24iLAogICAgIk5VTUJFUiI6ICI4MCIsCiAgICAiWUVBUiI6ICIxNjAyIgp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJUb3dhcmRzIFByb21pc3NvcnkgRXN0b3BwZWwgJm1kYXNoOyBFeGlzdGluZyBDb250cmFjdHVhbCBPYmxpZ2F0aW9ucyBhcyBDb25zaWRlcmF0aW9uICZtZGFzaDsgUGFydCBQYXltZW50IG9mIGEgRGVidCBhcyBDb25zaWRlcmF0aW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJQaW5uZWwncyBDYXNlIiwKICAgICAgICAiVmFuYmVyZ2VuIHYgU3QgRWRtdW5kcyIsCiAgICAgICAgIlN0aWxrIHYgTXlyaWNrIiwKICAgICAgICAiSGlyYWNoYW5kIFB1bmFtY2hhbmQgdiBUZW1wbGUiLAogICAgICAgICJIYXJ0bGV5IHYgUG9uc29uYnkiLAogICAgICAgICJDZW50cmFsIExvbmRvbiB2IEhpZ2ggVHJlZXMiLAogICAgICAgICJSZSBTZWxlY3Rtb3ZlIC0gUEUiLAogICAgICAgICJEJkMgQnVpbGRlcnMgdiBSZWVzIiwKICAgICAgICAiSHVnaGVzIHYgTWV0cm9wb2xpdGFuIFJhaWx3YXkiLAogICAgICAgICJXaWxsaWFtcyB2IFJvZmZleSIsCiAgICAgICAgIlRoZSBQb3N0IENoYXNlciIsCiAgICAgICAgIlRoZSBCcmltbmVzIgogICAgXSwKICAgICJOVU1CRVIiOiAiODEiLAogICAgIllFQVIiOiAiMTg4NCIsCiAgICAiTkFNRSI6ICJGb2FrZXMgdiBCZWVyIiwKICAgICJDSVRBVElPTiI6ICJGb2FrZXMgdiBCZWVyICgxODg0KSA5IEFwcCBDYXMgNjA1IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUb3dhcmRzIFByb21pc3NvcnkgRXN0b3BwZWwiLAogICAgICAgICJFeGlzdGluZyBDb250cmFjdHVhbCBPYmxpZ2F0aW9ucyBhcyBDb25zaWRlcmF0aW9uIiwKICAgICAgICAiUGFydCBQYXltZW50IG9mIGEgRGVidCBhcyBDb25zaWRlcmF0aW9uIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgcnVsZSBhZ2FpbnN0IHBhcnQgcGF5bWVudCBvZiBhIGRlYnQgYXMgdmFsaWQgY29uc2lkZXJhdGlvbiBmcm9tIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBpbm5lbCYjODIxNztzIENhc2U8L3NwYW4+IHdhcyB1cGhlbGQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiVHJlaXRlbCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiVmFuYmVyZ2VuIHYgU3QgRWRtdW5kcyBQcm9wZXJ0aWVzICgxOTMzKSIsCiAgICAiTkFNRSI6ICJWYW5iZXJnZW4gdiBTdCBFZG11bmRzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJQaW5uZWwncyBDYXNlIiwKICAgICAgICAiRm9ha2VzIHYgQmVlciIsCiAgICAgICAgIlN0aWxrIHYgTXlyaWNrIiwKICAgICAgICAiSGFydGxleSB2IFBvbnNvbmJ5IiwKICAgICAgICAiSGlyYWNoYW5kIFB1bmFtY2hhbmQgdiBUZW1wbGUiLAogICAgICAgICJXaWxsaWFtcyB2IFJvZmZleSIsCiAgICAgICAgIlJlIFNlbGVjdG1vdmUgLSBQRSIsCiAgICAgICAgIlRoZSBQb3N0IENoYXNlciIsCiAgICAgICAgIkQmQyBCdWlsZGVycyB2IFJlZXMiLAogICAgICAgICJDZW50cmFsIExvbmRvbiB2IEhpZ2ggVHJlZXMiLAogICAgICAgICJIdWdoZXMgdiBNZXRyb3BvbGl0YW4gUmFpbHdheSIsCiAgICAgICAgIkVjYXkgdiBHb2RmcmV5IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUb3dhcmRzIFByb21pc3NvcnkgRXN0b3BwZWwiLAogICAgICAgICJFeGlzdGluZyBDb250cmFjdHVhbCBPYmxpZ2F0aW9ucyBhcyBDb25zaWRlcmF0aW9uIiwKICAgICAgICAiUGFydCBQYXltZW50IG9mIGEgRGVidCBhcyBDb25zaWRlcmF0aW9uIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgcnVsZSBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QaW5uZWwmIzgyMTc7cyBDYXNlPC9zcGFuPiBvbiB0aGUgaW5zdWZmaWNpZW5jeSBvZiBwYXJ0LXBheW1lbnQgb2YgYSBkZWJ0IGFzIGNvbnNpZGVyYXRpb24gaXMgPHNwYW4gY2xhc3M9XCJpdFwiPmF2b2lkZWQ8L3NwYW4+IHdoZW4gcGF5bWVudCBpcyBwcm9mZmVyZWQgPHNwYW4gY2xhc3M9XCJpdFwiPmluIGFub3RoZXIgcGxhY2U8L3NwYW4+IGZyb20gd2hlcmUgdGhlIGRlYnQgaXMgZHVlLiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsICZtZGFzaDsgRXhpc3RpbmcgQ29udHJhY3R1YWwgT2JsaWdhdGlvbnMgYXMgQ29uc2lkZXJhdGlvbiAmbWRhc2g7IFBhcnQgUGF5bWVudCBvZiBhIERlYnQgYXMgQ29uc2lkZXJhdGlvbiIsCiAgICAiTlVNQkVSIjogIjgyIiwKICAgICJZRUFSIjogIjE5MzMiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIkhpcmFjaGFuZCBQdW5hbWNoYW5kIHYgVGVtcGxlIFsxOTExXSAyIEtCIDMzMCIsCiAgICAiTkFNRSI6ICJIaXJhY2hhbmQgUHVuYW1jaGFuZCB2IFRlbXBsZSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRm9ha2VzIHYgQmVlciIsCiAgICAgICAgIlN0aWxrIHYgTXlyaWNrIiwKICAgICAgICAiSGFydGxleSB2IFBvbnNvbmJ5IiwKICAgICAgICAiVmFuYmVyZ2VuIHYgU3QgRWRtdW5kcyIsCiAgICAgICAgIlBpbm5lbCdzIENhc2UiLAogICAgICAgICJUaGUgUG9zdCBDaGFzZXIiLAogICAgICAgICJDZW50cmFsIExvbmRvbiB2IEhpZ2ggVHJlZXMiLAogICAgICAgICJXaWxsaWFtcyB2IFJvZmZleSIsCiAgICAgICAgIkQmQyBCdWlsZGVycyB2IFJlZXMiLAogICAgICAgICJSZSBTZWxlY3Rtb3ZlIC0gUEUiLAogICAgICAgICJIdWdoZXMgdiBNZXRyb3BvbGl0YW4gUmFpbHdheSIsCiAgICAgICAgIlJhZmZsZXMgdiBXaWNoZWxoYXVzIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUb3dhcmRzIFByb21pc3NvcnkgRXN0b3BwZWwiLAogICAgICAgICJFeGlzdGluZyBDb250cmFjdHVhbCBPYmxpZ2F0aW9ucyBhcyBDb25zaWRlcmF0aW9uIiwKICAgICAgICAiRXZhc2lvbiBvZiBSdWxlIEluIFBpbm5lbCdzIENhc2UiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgZGVidCBwYXllZCBpbiBwYXJ0IDxzcGFuIGNsYXNzPVwiaXRcIj5ieSBhIHRoaXJkIHBhcnR5PC9zcGFuPiB3YXMgaGVsZCB0byBhdm9pZCB0aGUgcnVsZSBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QaW5uZWwmIzgyMTc7cyBDYXNlPC9zcGFuPi4iCiAgICBdLAogICAgIkNBVEVHT1JZIjogIlRvd2FyZHMgUHJvbWlzc29yeSBFc3RvcHBlbCAmbWRhc2g7IEV4aXN0aW5nIENvbnRyYWN0dWFsIE9ibGlnYXRpb25zIGFzIENvbnNpZGVyYXRpb24gJm1kYXNoOyBFdmFzaW9uIG9mIFJ1bGUgSW4gUGlubmVsJ3MgQ2FzZSIsCiAgICAiTlVNQkVSIjogIjgzIiwKICAgICJZRUFSIjogIjE5MTEiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIldoZW4gb25lIHBhcnR5IGFjdHMgaW4gc3VjaCBhIHdheSBhcyB0byBzdXBwb3NlIHRoZXkgd2lsbCBub3QgZW5mb3JjZSBhIHJpZ2h0IHVuZGVyIGNvbnRyYWN0ICZtZGFzaDsgYW5kIHRoZSBvdGhlciBwYXJ0eSByZWxpZXMgb24gaXQgJm1kYXNoOyB0aGVuIHRoZXkgd2lsbCBiZSBlc3RvcHBlZCBmcm9tIGVuZm9yY2luZyBpdCwgaWYgZG9pbmcgc28gd291bGQgYmUgaW5lcXVpdGFibGUuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJUb3dhcmRzIFByb21pc3NvcnkgRXN0b3BwZWwgJm1kYXNoOyBQcm9taXNzb3J5IEVzdG9wcGVsICZtZGFzaDsgRXF1aXR5J3MgRXZhc2lvbiBvZiBQaW5uZWwncyBDYXNlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDZW50cmFsIExvbmRvbiB2IEhpZ2ggVHJlZXMiLAogICAgICAgICJTdGlsayB2IE15cmljayIsCiAgICAgICAgIkhhcnRsZXkgdiBQb25zb25ieSIsCiAgICAgICAgIkQmQyBCdWlsZGVycyB2IFJlZXMiLAogICAgICAgICJSZSBTZWxlY3Rtb3ZlIC0gUEUiLAogICAgICAgICJXaWxsaWFtcyB2IFJvZmZleSIsCiAgICAgICAgIlZhbmJlcmdlbiB2IFN0IEVkbXVuZHMiLAogICAgICAgICJUaGUgUG9zdCBDaGFzZXIiLAogICAgICAgICJQaW5uZWwncyBDYXNlIiwKICAgICAgICAiRm9ha2VzIHYgQmVlciIsCiAgICAgICAgIkhpcmFjaGFuZCBQdW5hbWNoYW5kIHYgVGVtcGxlIiwKICAgICAgICAiVGhvbXBzb24gdiBMTVMiCiAgICBdLAogICAgIllFQVIiOiAiMTg3NyIsCiAgICAiTlVNQkVSIjogIjg0IiwKICAgICJBS0EiOiAiSHVnaGVzIiwKICAgICJOQU1FIjogIkh1Z2hlcyB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IiwKICAgICJDSVRBVElPTiI6ICJIdWdoZXMgdiBNZXRyb3BvbGl0YW4gUmFpbHdheSBDbyAoMTg3NykgMiBBcHAgQ2FzIDQzOSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiUHJvbWlzc29yeSBFc3RvcHBlbCIsCiAgICAgICAgIkVxdWl0eSdzIEV2YXNpb24gb2YgUGlubmVsJ3MgQ2FzZSIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkxlYWRpbmciCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIlRvd2FyZHMgUHJvbWlzc29yeSBFc3RvcHBlbCAmbWRhc2g7IFByb21pc3NvcnkgRXN0b3BwZWwgJm1kYXNoOyBFcXVpdHkncyBFdmFzaW9uIG9mIFBpbm5lbCdzIENhc2UiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkh1Z2hlcyB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IiwKICAgICAgICAiU3RpbGsgdiBNeXJpY2siLAogICAgICAgICJIYXJ0bGV5IHYgUG9uc29uYnkiLAogICAgICAgICJXaWxsaWFtcyB2IFJvZmZleSIsCiAgICAgICAgIkQmQyBCdWlsZGVycyB2IFJlZXMiLAogICAgICAgICJGb2FrZXMgdiBCZWVyIiwKICAgICAgICAiVGhlIFBvc3QgQ2hhc2VyIiwKICAgICAgICAiUmUgU2VsZWN0bW92ZSAtIFBFIiwKICAgICAgICAiVmFuYmVyZ2VuIHYgU3QgRWRtdW5kcyIsCiAgICAgICAgIlBpbm5lbCdzIENhc2UiLAogICAgICAgICJIaXJhY2hhbmQgUHVuYW1jaGFuZCB2IFRlbXBsZSIsCiAgICAgICAgIkJyaXRpc2ggU3RlZWwgdiBDbGV2ZWxhbmQgQnJpZGdlIgogICAgXSwKICAgICJOVU1CRVIiOiAiODUiLAogICAgIllFQVIiOiAiMTk0NyIsCiAgICAiTkFNRSI6ICJDZW50cmFsIExvbmRvbiB2IEhpZ2ggVHJlZXMiLAogICAgIkNJVEFUSU9OIjogIkNlbnRyYWwgTG9uZG9uIFByb3BlcnR5IFRydXN0IHYgSGlnaCBUcmVlcyBIb3VzZSBMdGQgWzE5NDddIEtCIDEzMCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiUHJvbWlzc29yeSBFc3RvcHBlbCIsCiAgICAgICAgIkVxdWl0eSdzIEV2YXNpb24gb2YgUGlubmVsJ3MgQ2FzZSIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiT2JpdGVyLCBEZW5uaW5nIEogaGVsZCB0aGF0IGEgcGFydHkgd2hvIGFncmVlZCBub3QgdG8gZW5mb3JjZSBhIHJpZ2h0IG9mIHBheW1lbnQgd291bGQgYmUgZXN0b3BwZWQgZnJvbSB0aGVuIGNsYWltaW5nIHRoZSBtb25leSwgdW5kZXIgdW5kZXIgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SHVnaGVzPC9zcGFuPi4gUHJvbWlzc29yeSBlc3RvcHBlbCBnZW5lcmFsbHkgPHNwYW4gY2xhc3M9XCJpdFwiPnN1c3BlbmRzPC9zcGFuPiBsZWdhbCByaWdodHMgcmF0aGVyIHRoYW4gPHNwYW4gY2xhc3M9XCJpdFwiPmV4dGluZ3Vpc2hpbmcgdGhlbTwvc3Bhbj4uIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRGVubmluZyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsICZtZGFzaDsgQ2hhcmFjdGVyaXN0aWNzIG9mIFByb21pc3NvcnkgRXN0b3BwZWwgJm1kYXNoOyBSZWxpYW5jZSBhbmQgSW5lcXVpdHkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkQmQyBCdWlsZGVycyB2IFJlZXMiLAogICAgICAgICJIdWdoZXMgdiBNZXRyb3BvbGl0YW4gUmFpbHdheSIsCiAgICAgICAgIlJlIFNlbGVjdG1vdmUgLSBQRSIsCiAgICAgICAgIlN0aWxrIHYgTXlyaWNrIiwKICAgICAgICAiV2lsbGlhbXMgdiBSb2ZmZXkiLAogICAgICAgICJWYW5iZXJnZW4gdiBTdCBFZG11bmRzIiwKICAgICAgICAiRm9ha2VzIHYgQmVlciIsCiAgICAgICAgIkNlbnRyYWwgTG9uZG9uIHYgSGlnaCBUcmVlcyIsCiAgICAgICAgIkhhcnRsZXkgdiBQb25zb25ieSIsCiAgICAgICAgIkhpcmFjaGFuZCBQdW5hbWNoYW5kIHYgVGVtcGxlIiwKICAgICAgICAiUGlubmVsJ3MgQ2FzZSIsCiAgICAgICAgIkNyb3NzbGV5IHYgRmFpdGhmdWwiCiAgICBdLAogICAgIk5VTUJFUiI6ICI4NiIsCiAgICAiWUVBUiI6ICIxOTgyIiwKICAgICJOQU1FIjogIlRoZSBQb3N0IENoYXNlciIsCiAgICAiQ0lUQVRJT04iOiAiU29jaWV0ZSBJdGFsby1CZWxnZSB2IFBhbG0gYW5kIFZlZ2V0YWJsZSBPaWxzLCBNYWxheXNpYSAoVGhlIFBvc3QgQ2hhc2VyKSBbMTk4Ml0gQWxsIEVSIDE5IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUb3dhcmRzIFByb21pc3NvcnkgRXN0b3BwZWwiLAogICAgICAgICJDaGFyYWN0ZXJpc3RpY3Mgb2YgUHJvbWlzc29yeSBFc3RvcHBlbCIsCiAgICAgICAgIlJlbGlhbmNlIGFuZCBJbmVxdWl0eSIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiUHJvbWlzc29yeSBlc3RvcHBlbCBpcyBvbmx5IG9wZW4gYXMgYSBkZWZlbmNlLCBub3QgYW4gYXR0YWNrLiBJdCBkb2VzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3QgcmVxdWlyZSBkZXRyaW1lbnRhbCByZWxpYW5jZTwvc3Bhbj4gYnkgdGhlIHBhcnR5IGhvcGluZyB0byBlc3RhYmxpc2ggaXQsIGJ1dCBpdCA8c3BhbiBjbGFzcz1cIml0XCI+ZG9lcyByZXF1aXJlIGluZXF1aXRhYmlsaXR5PC9zcGFuPiB0byB0aGUgYXNzdXJhbmNlLCBieSB0aGUgb3RoZXIuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRGVubmluZyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsICZtZGFzaDsgQ2hhcmFjdGVyaXN0aWNzIG9mIFByb21pc3NvcnkgRXN0b3BwZWwgJm1kYXNoOyBSZWxpYW5jZSBhbmQgSW5lcXVpdHkiLAogICAgIi0tQ0FURUdPUlkiOiAiVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsOyBDaGFyYWN0ZXJpc3RpY3Mgb2YgUHJvbWlzc29yeSBFc3RvcHBlbDsgUmVsaWFuY2UgYW5kIEluZXF1aXR5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJUaGUgUG9zdCBDaGFzZXIiLAogICAgICAgICJIdWdoZXMgdiBNZXRyb3BvbGl0YW4gUmFpbHdheSIsCiAgICAgICAgIlBpbm5lbCdzIENhc2UiLAogICAgICAgICJSZSBTZWxlY3Rtb3ZlIC0gUEUiLAogICAgICAgICJGb2FrZXMgdiBCZWVyIiwKICAgICAgICAiU3RpbGsgdiBNeXJpY2siLAogICAgICAgICJIYXJ0bGV5IHYgUG9uc29uYnkiLAogICAgICAgICJWYW5iZXJnZW4gdiBTdCBFZG11bmRzIiwKICAgICAgICAiQ2VudHJhbCBMb25kb24gdiBIaWdoIFRyZWVzIiwKICAgICAgICAiV2lsbGlhbXMgdiBSb2ZmZXkiLAogICAgICAgICJIaXJhY2hhbmQgUHVuYW1jaGFuZCB2IFRlbXBsZSIsCiAgICAgICAgIlRpbm4gdiBIb2ZmbWFuIgogICAgXSwKICAgICJOVU1CRVIiOiAiODciLAogICAgIllFQVIiOiAiMTk2NiIsCiAgICAiTkFNRSI6ICJEJkMgQnVpbGRlcnMgdiBSZWVzIiwKICAgICItLU5BTUUiOiAiQ29sbGllciB2IFdyaWdodCIsCiAgICAiQ0lUQVRJT04iOiAiRCAmYW1wOyBDIEJ1aWxkZXJzIEx0ZCB2IFJlZXMgWzE5NjZdIDIgUUIgNjE3IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUb3dhcmRzIFByb21pc3NvcnkgRXN0b3BwZWwiLAogICAgICAgICJDaGFyYWN0ZXJpc3RpY3Mgb2YgUHJvbWlzc29yeSBFc3RvcHBlbCIsCiAgICAgICAgIlJlbGlhbmNlIGFuZCBJbmVxdWl0eSIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIGRlZmVuY2Ugb2YgcHJvbWlzc29yeSBlc3RvcHBlbCA8c3BhbiBjbGFzcz1cIml0XCI+ZmFpbHM8L3NwYW4+IHdoZW4gdGhlIHBhcnR5IHNlZWtpbmcgdG8gcmVseSBvbiBpdCBoYXMgaGltc2VsZiBiZWhhdmVkIGluZXF1aXRhYmx5LiIKICAgIF0sCiAgICAiLS1DSVRBVElPTiI6ICJDb2xsaWVyIHYgV3JpZ2h0IChIb2xkaW5ncykgTHRkIFsyMDA3XSBFV0NBIENpdiAxMzI5IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRGVubmluZyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiQ0FURUdPUlkiOiAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBDb25mbGljdGluZyBUZXJtcyIsCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgUG9zaXRpdmUgVGVybXMiLAogICAgICAgICJDb25zaWRlcmF0aW9uIC0gT3ZlcnZpZXciLAogICAgICAgICJDb25zaWRlcmF0aW9uIC0gRGV0YWlsIiwKICAgICAgICAiQ29udHJhY3R1YWwgRHV0aWVzIGFzIENvbnNpZGVyYXRpb24iLAogICAgICAgICJJbXBsaWNhdGlvbiBvZiBUZXJtcyAtIEludHJvIiwKICAgICAgICAiTWlzdGFrZSAtIEludHJvZHVjdGlvbiIsCiAgICAgICAgIk9mZmVycyIsCiAgICAgICAgIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UiLAogICAgICAgICJQcm9taXNzb3J5IEVzdG9wcGVsIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zIgogICAgXSwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkludHJvPC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaHJlZSB2YWxpZCB3YXlzIGFjY29yZGluZyB0byBEZW5uaW5nIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk9sbGV5IHYgTWFybGJvcm91Z2ggQ291cnQ8L3NwYW4+ICZtZGFzaDsgQnkgc2lnbmF0dXJlLCBtb3N0IGRlZmluaXRpdmVseSwgYnkgZXhwcmVzcyB3cml0dGVuL3B1YmxpYyBub3RpY2UsIGFuZCBieSBleHByZXNzIG9yYWwgc3RhdGVtZW50Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QnV0IGEgY291cnNlIG9mIHByaW9yIGRlYWxpbmcgbWF5LCBpZiBpdCBzaG93cyBrbm93bGVkZ2Ugb2YgdGVybS4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWNDdXRjaGVvbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5FeGNsdXNpb24gY2xhdXNlcyBhcmUgY29uc3RydWVkIDxzcGFuIGNsYXNzPVwiaXRcIj5jb250cmEgcHJvZmVyZW50dW08L3NwYW4+LCBhbHRob3VnaCBqdXJpc3BydWRlbnRpYWwgZGlzYXBwcm92YWwgb2YgdGhpcyBwcmFjdGljZSBzaW5jZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5VQ1RBPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+QnkgU2lnbmF0dXJlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPlJlcXVpcmVtZW50czwvc3Bhbj4gJm1kYXNoOyIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImJkXCI+U2lnbmF0dXJlPC9zcGFuPiwgaW4gZ2VuZXJhbC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TCYjODIxNztFc3RyYW5nZSB2IEdyYXVjb2I8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwiYmRcIj5FeHBlY3RhdGlvbiBvZiBjb250cmFjdHVhbCBlZmZlY3Q8L3NwYW4+IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkdyb2dhbiB2IFJvYmVydCBNZXJlZGl0aCBQbGFudDwvc3Bhbj4uPC9zcGFuPjwvbGk+PC9vbD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cIml0XCI+RXhjZXB0aW9uczwvc3Bhbj4gJm1kYXNoOyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImJkXCI+T25lcm91cyB0ZXJtczwvc3Bhbj4gYXJlIDxzcGFuIGNsYXNzPVwiaXRcIj5wb3RlbnRpYWxseTwvc3Bhbj4gbm90IGluY29ycG9yYXRlZC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGlsZGVuIHYgR2xlbmRlbm5pbmc8L3NwYW4+Ljxicj5JZiBBIGtub3dzIEIgaGFzOjwvc3Bhbj48b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+bm90IHJlYWQ8L3NwYW4+IGJlZm9yZSBzaWduaW5nOyBhbmQgaGFzPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+Y29udHJhc3RpbmcgZXhwZWN0YXRpb25zPC9zcGFuPiwgb2Ygd2hpY2ggQSBoYXMgbm90IGRpc2FidXNlZCB0aGVtLjwvc3Bhbj48L2xpPjwvb2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJiZFwiPk1lbmRhY2lvdXMvaW5jb21wbGV0ZSBleHBsYW5hdGlvbiBvZiB0ZXJtPC9zcGFuPiB3aWxsIHJlcGxhY2UgdGVybSwgY2F1c2luZyBleHBsYW5hdGlvbiB0byBiZSBiaW5kaW5nLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZzwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkJ5IE5vdGljZTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiaXRcIj5SZXF1aXJlbWVudHM8L3NwYW4+ICZtZGFzaDsiLAogICAgICAgICI8b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJiZFwiPkF0IG9yIGJlZm9yZSBjb250cmFjdCBmb3JtYXRpb248L3NwYW4+LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5PbGxleSB2IE1hcmxib3JvdWdoIENvdXJ0PC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2hhcGxldG9uIHYgQmFycnk8L3NwYW4+Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gTWF5IGJlIGNvbnN0cnVlZCBhcyBmdW5jdGlvbiBvZiBuYXR1cmUgb2YgY2xhdXNlLjwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJiZFwiPlJlYXNvbmFibGU8L3NwYW4+IGJ1dCBhIHRhZCBsYXRlIGR1ZSB0byBodXJyaWVkIGNpcmNzPyA8c3BhbiBjbGFzcz1cImJkXCI+SW5jb3Jwb3JhdGVkPC9zcGFuPiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ccml0aXNoIENyYW5lIEhpcmU8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwiYmRcIj5PbmVyb3VzPC9zcGFuPiBidXQganVzdCBhZnRlcj8gPHNwYW4gY2xhc3M9XCJiZFwiPk5vdCBpbmNvcnBvcmF0ZWQ8L3NwYW4+IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRob3JudG9uIHYgU2hvZSBMYW5lIC0gSW5jb3Jwb3JhdGlvbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImJkXCI+RXhjZXB0aW9uczwvc3Bhbj4gZ2VuZXJhbGx5IGZvciByZWFzb25zIG9mIGNvbW1lcmNpYWwgZXhwZWRpZW5jeSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QYXJrZXIgdiBTb3V0aCBFYXN0ZXJuPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGhvbXBzb24gdiBMTVM8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJiZFwiPlJlYXNvbmFibGUgZXhwZWN0YXRpb24gb2YgY29udHJhY3R1YWwgZWZmZWN0PC9zcGFuPiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ccml0aXNoIENyYW5lIEhpcmU8L3NwYW4+Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gVGhlIHdvcmQgJiM4MjE2O3JlY2VpcHQmIzgyMTc7IGlzIG5vIGJhci4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGFya2VyIHYgU291dGggRWFzdGVybjwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImJkXCI+RGVncmVlIG9mIGF0dGVudGlvbjwvc3Bhbj4gaW4gcHJvcG9ydGlvbiB0byBidXJkZW4gb2YgY2xhdXNlLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaG9tcHNvbiB2IExNUzwvc3Bhbj4gYXQgb25lIGVuZCwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SW50ZXJmb3RvPC9zcGFuPiBhdCB0aGUgb3RoZXIuPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImJkXCI+UmVhc29uYWJsZTwvc3Bhbj46ICYjODIxNjtzZWUgdGVybXMgb24gYmFjayYjODIxNzsgaXMgZ2VuZXJhbGx5IGVub3VnaC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGhvbXBzb24gdiBMTVM8L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJiZFwiPk9uZXJvdXM8L3NwYW4+OiAmIzgyMTY7ZmFpciBhbmQgcmVhc29uYWJsZSBhdHRlbnRpb24mIzgyMTc7IG9yIGF0IHJvY2stYm90dG9tLCAmIzgyMTY7ZGlmZmVyZW50aWF0aW9uJiM4MjE3OyBvZiB0ZXJtLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5JbnRlcmZvdG88L3NwYW4+Ljxicj48c3BhbiBjbGFzcz1cIml0XCI+KE9yIHJlZCBmbGFzaGluZyBsaWdodHMsIHBlciBEZW5uaW5nIExKIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNwdXJsaW5nIHYgQnJhZHNoYXc8L3NwYW4+Lik8L3NwYW4+PC9zcGFuPjwvbGk+PC91bD48L29sPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+QnkgQ291cnNlIG9mIFByaW9yIERlYWxpbmc8L3NwYW4+PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBPbmx5IHJlbGV2YW50IHdoZW4gPHNwYW4gY2xhc3M9XCJiZFwiPnNob3dzIGtub3dsZWRnZTwvc3Bhbj4gb2YgdGhlIHRlcm0gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWNDdXRjaGVvbiB2IE1hY0JyYXluZTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gTi5CLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ccml0aXNoIENyYW5lIEhpcmU8L3NwYW4+IDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGRlY2lkZWQgb24gdGhlc2UgZ3JvdW5kcy48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjg4IiwKICAgICJOQU1FIjogIkluY29ycG9yYXRpb24gb2YgTmVnYXRpdmUgVGVybXMiCn0sCnsKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIk5BTUUiOiAiSW5jb3Jwb3JhdGlvbiBvZiBQb3NpdGl2ZSBUZXJtcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBOZWdhdGl2ZSBUZXJtcyIsCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgQ29uZmxpY3RpbmcgVGVybXMiLAogICAgICAgICJDb250cmFjdHVhbCBEdXRpZXMgYXMgQ29uc2lkZXJhdGlvbiIsCiAgICAgICAgIlByb21pc3NvcnkgRXN0b3BwZWwiLAogICAgICAgICJNaXN0YWtlIC0gSW50cm9kdWN0aW9uIiwKICAgICAgICAiUmVzcG9uc2VzIHRvIE9mZmVycyIsCiAgICAgICAgIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSIsCiAgICAgICAgIkNvbnNpZGVyYXRpb24gLSBEZXRhaWwiLAogICAgICAgICJPZmZlcnMiLAogICAgICAgICJJbXBsaWNhdGlvbiBvZiBUZXJtcyAtIEludHJvIiwKICAgICAgICAiQ29uc2lkZXJhdGlvbiAtIE92ZXJ2aWV3IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkludHJvPC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gUG9zaXRpdmUgdGVybXMvd2FycmFudGllcyBmYWlsaW5nIHRvIGJlIGluY29ycG9yYXRlZCByZWNlZGVkIHRvIHN0YXR1cyBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5yZXByZXNlbnRhdGlvbjwvc3Bhbj4sIGJ5IGNvbnRyYXN0IHRvIG5lZ2F0aXZlIHRlcm1zL2V4Y2x1c2lvbnMsIHdoaWNoIGV2YXBvcmF0ZS48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+QSBUZXJtIG9yIGEgUmVwcmVzZW50YXRpb24/PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPkVzc2VudGlhbCB0ZXN0PC9zcGFuPiAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwiYmRcIj5JbnRlbnRpb248L3NwYW4+LCBvYmplY3RpdmVseSBhc3Nlc3NlZC4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SGVpbGJ1dCB2IEJ1Y2tsZXRvbjwvc3Bhbj4gcGVyIEhvbHQgQ0ouPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cIml0XCI+V291bGQgYW4gPHNwYW4gY2xhc3M9XCJiZFwiPmludGVsbGlnZW50IGJ5c3RhbmRlcjwvc3Bhbj4gdGhpbmssIG9uIHRoZSBldmlkZW5jZSwgYSB3YXJyYW50eSB3YXMgaW50ZW5kZWQ/PC9zcGFuPiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Pc2NhciBDaGVzczwvc3Bhbj4gcGVyIERlbm5pbmcgTEouPC9zcGFuPjwvbGk+PC91bD48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiaXRcIj5TdWJzaWRpYXJ5IHRlc3RzPC9zcGFuPiAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwiYmRcIj5JbXBvcnRhbmNlIG9mIFN0YXRlbWVudDwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmFubmVybWFuIHYgV2hpdGU8L3NwYW4+LCBob3BzLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwiYmRcIj5FeHBlcnRpc2UgdG8gZ2l2ZSBXYXJyYW50eTwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+T3NjYXIgQ2hlc3M8L3NwYW4+LCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EaWNrIEJlbnRsZXk8L3NwYW4+OyBjYXJzLjwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gSW50ZWxsaWdlbnQgYnlzdGFuZGVyIHdvdWxkbiYjODIxNzt0IHRha2Ugbm9uLWV4cGVydCYjODIxNztzIHN0YXRlbWVudCBhcyBhIHdhcnJhbnR5LCBpZiBtYWtpbmcgaXQgd291bGQgcmVhc29uYWJseSBiZSBhc3N1bWVkIHRvIHJlcXVpcmUgZXhwZXJ0aXNlLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Pc2NhciBDaGVzczwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gQnV0IDxzcGFuIGNsYXNzPVwiaXRcIj53b3VsZDwvc3Bhbj4sIGlmIG1hZGUgYnkgYW4gZXhwZXJ0LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EaWNrIEJlbnRsZXk8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJiZFwiPkFzc3VtcHRpb24gb2YgUmVzcG9uc2liaWxpdHk8L3NwYW4+PC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBBIHRlbGxzIEIgaGUgPHNwYW4gY2xhc3M9XCJpdFwiPmRvZXNuJiM4MjE3O3Q8L3NwYW4+IG5lZWQgdG8gaW5zcGVjdCwgYXMgd291bGQgc2F5IGlmIGFueXRoaW5nIGFtaXNzPyBQZXIgc2UsIGEgPHNwYW4gY2xhc3M9XCJiZFwiPndhcnJhbnR5PC9zcGFuPiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TY2hhd2VsIHYgUmVhZGU8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEEgdGVsbHMgQiBoZSA8c3BhbiBjbGFzcz1cIml0XCI+c2hvdWxkPC9zcGFuPiBpbnNwZWN0LCBidXQgQiBjYW4mIzgyMTc7dCBiZSBhcnNlZD8gQSYjODIxNztzIHN0YXRlbWVudHMgd2lsbCBiZSA8c3BhbiBjbGFzcz1cImJkXCI+cmVwcmVzZW50YXRpb248L3NwYW4+IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkVjYXkgdiBHb2RmcmV5PC9zcGFuPi48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IDxzcGFuIGNsYXNzPVwiYmRcIj5Xcml0aW5nPC9zcGFuPjwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5GYWlsaW5nIHRvIHJlZmxlY3Qgc3RhdGVtZW50cyBjb21pbmcgZWFybGllciBnaXZlcyByaXNlIHRvIHByZXN1bXB0aW9uIGFnYWluc3Qgc3VjaCBzdGF0ZW1lbnRzIGJlaW5nIHRlcm1zLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QnV0IHRoZSBsYXRlciB0aGV5IGNvbWUsIHRoZSBsaWtlbGllciB0aGF0IHRoZXkgPHNwYW4gY2xhc3M9XCJiZFwiPmFyZTwvc3Bhbj4uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPklubnRyZXByZW5ldXI8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+PC91bD4iCiAgICBdLAogICAgIk5VTUJFUiI6ICI4OSIKfSwKewogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiTkFNRSI6ICJJbmNvcnBvcmF0aW9uIG9mIENvbmZsaWN0aW5nIFRlcm1zIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFBvc2l0aXZlIFRlcm1zIiwKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBOZWdhdGl2ZSBUZXJtcyIsCiAgICAgICAgIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiSW1wbGljYXRpb24gb2YgVGVybXMgLSBJbnRybyIsCiAgICAgICAgIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSIsCiAgICAgICAgIkNvbnNpZGVyYXRpb24gLSBPdmVydmlldyIsCiAgICAgICAgIkNvbnNpZGVyYXRpb24gLSBEZXRhaWwiLAogICAgICAgICJNaXN0YWtlIC0gSW50cm9kdWN0aW9uIiwKICAgICAgICAiQ29udHJhY3R1YWwgRHV0aWVzIGFzIENvbnNpZGVyYXRpb24iLAogICAgICAgICJPZmZlcnMiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgVGVybXMiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkluY29ycG9yYXRpb24gb2YgVGVybXMiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5PcmFsIGNvbnRyYWN0czwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BbGwgZXhjaGFuZ2VzIGJldHdlZW4gdGhlIHBhcnRpZXMgd2lsbCBiZSBjb25zaWRlcmVkLCBpbiBkZXRlcm1pbmluZyB3aGF0IHRoZSB0ZXJtcyB3ZXJlLjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPldyaXR0ZW4gQ29udHJhY3RzOiBQYXJvbCBFdmlkZW5jZSBSdWxlPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoaXMgcHJldmVudHMgdGhlIGNvbnNpZGVyYXRpb24gb2YgPHNwYW4gY2xhc3M9XCJpdFwiPmV4dHJpbnNpYyBldmlkZW5jZTwvc3Bhbj4gaW4gY29uZmxpY3Qgd2l0aCB0aGUgcGFwZXIgdGVybXMuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkphY29icyB2IEJhdGF2aWE8L3NwYW4+LjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkphY29icyB2IEJhdGF2aWE8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QW4gZXhjZXB0aW9uIG1heSBiZSBtYWRlIGZvciByZXBlYXRlZCwgZXhwcmVzcyBzdGF0ZW1lbnRzIHByZWNpcGl0YXRpbmcgdGhlIGNvbnRyYWN0LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db3VjaG1hbiB2IEhpbGw8L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIk5VTUJFUiI6ICI5MCIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyAmbWRhc2g7IE5lZ2F0aXZlICZtZGFzaDsgQnkgU2lnbmF0dXJlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyIsCiAgICAgICAgIkdyb2dhbiB2IFJvYmluIE1lcmVkaXRoIFBsYW50IiwKICAgICAgICAiSW50ZXJmb3RvIiwKICAgICAgICAiQnJpdGlzaCBDcmFuZSBIaXJlIiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgLSBJbmNvcnBvcmF0aW9uIiwKICAgICAgICAiVGhvbXBzb24gdiBMTVMiLAogICAgICAgICJQYXJrZXIgdiBTb3V0aCBFYXN0ZXJuIiwKICAgICAgICAiQ3Jvb2tzIHYgQWxsZW4iLAogICAgICAgICJPbGxleSB2IE1hcmxib3JvdWdoIENvdXJ0IEhvdGVsIiwKICAgICAgICAiU3B1cmxpbmcgdiBCcmFkc2hhdyIsCiAgICAgICAgIk1jQ3V0Y2hlb24gdiBNYWNCcmF5bmUiLAogICAgICAgICJCYW5uZXJtYW4gdiBXaGl0ZSIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTM0IiwKICAgICJOVU1CRVIiOiAiOTEiLAogICAgIkFLQSI6ICJMRXN0cmFuZ2UgdiBHcmF1Y29iIiwKICAgICJOQU1FIjogIkwnRXN0cmFuZ2UgdiBHcmF1Y29iIiwKICAgICJDSVRBVElPTiI6ICJMJiM4MjE3O0VzdHJhbmdlIHYgR3JhdWNvYiBbMTkzNF0gMiBLQiAzOTQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgVGVybXMiLAogICAgICAgICJOZWdhdGl2ZSIsCiAgICAgICAgIkJ5IFNpZ25hdHVyZSIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGVybXMgd2hpY2ggb25lIHBhcnR5IGhhcyBmYWlsZWQgdG8gcmVhZCBhcmUgc3VjY2Vzc2Z1bGx5IGluY29ycG9yYXRlZCBpbnRvIGEgY29udHJhY3QgYnkgdGhhdCBwYXJ0eSYjODIxNztzIHNpZ25hdHVyZSwgZXZlbiB0aG91Z2ggdGhlIHRlcm1zIGFyZSBvbmVyb3VzIGV4Y2x1c2lvbiBjbGF1c2VzLCBza2V3aW5nIHRoZSBiYXJnYWluIGFnYWluc3QgdGhlIHBhcnR5IHRvIHN1Y2ggYSBkZWdyZWUgdGhhdCwgaGFkIHRoZXkgcmVhZCB0aGVtLCB0aGV5IG1pZ2h0IG5vdCBoYXZlIHNpZ25lZC4gRGVubmluZyB3YXMgY291bnNlbCBmb3IgdGhlIHNlbGxlciBvZiB0aGUgY2lnZ2llIG1hY2hpbmUsIGluIHRoaXMgY2FzZSwgYW5kIGxhdGVyIHNwb2tlIHNwb2tlIGluIFBhcmxpYW1lbnQgb2YgaGlzIHJlZ3JldCBpbiB0aGUgbWF0dGVyKS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJEZW5uaW5nIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJPc2NhciBDaGVzcyB2IFdpbGxpYW1zIiwKICAgICAgICAiU3B1cmxpbmcgdiBCcmFkc2hhdyIsCiAgICAgICAgIk1jQ3V0Y2hlb24gdiBNYWNCcmF5bmUiLAogICAgICAgICJKYWNvYnMgdiBCYXRhdmlhIiwKICAgICAgICAiQnJpdGlzaCBDcmFuZSBIaXJlIiwKICAgICAgICAiT2xsZXkgdiBNYXJsYm9yb3VnaCBDb3VydCBIb3RlbCIsCiAgICAgICAgIkwnRXN0cmFuZ2UgdiBHcmF1Y29iIiwKICAgICAgICAiQ3Jvb2tzIHYgQWxsZW4iLAogICAgICAgICJIZWlsYnV0IHYgQnVja2xldG9uIiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgLSBJbmNvcnBvcmF0aW9uIiwKICAgICAgICAiSW50ZXJmb3RvIiwKICAgICAgICAiU2NoYXdlbCB2IFJlYWRlIgogICAgXSwKICAgICJOVU1CRVIiOiAiOTIiLAogICAgIllFQVIiOiAiMTk3OCIsCiAgICAiTkFNRSI6ICJUaWxkZW4gdiBDbGVuZGlubmluZyIsCiAgICAiQ0lUQVRJT04iOiAiVGlsZGVuIFJlbnQtQS1DYXIgQ28gdiBDbGVuZGlubmluZyAoMTk3OCkgODggRExSICgzZCkgNDAwIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJVbnJlYXNvbmFibHkgb25lcm91cyBleGNsdXNpb24gY2xhdXNlcyBtaWdodCA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBiZSBzdWNjZXNzZnVsbHkgaW5jb3Jwb3JhdGVkIGJ5IHNpZ25hdHVyZSB3aGVuIHRoZSBwYXJ0eSByZWx5aW5nIG9uIHRoZW0ga25vd3MgdGhlIG90aGVyIHBhcnR5IGlzIHVuYXdhcmUgb2YgdGhlbS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJQZXJzdWFzaXZlIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJHcm9nYW4gdiBSb2JpbiBNZXJlZGl0aCBQbGFudCBIaXJlIFsxOTk2XSBDTEMgMTEyNyIsCiAgICAiTkFNRSI6ICJHcm9nYW4gdiBSb2JpbiBNZXJlZGl0aCBQbGFudCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ3VydGlzIHYgQ2hlbWljYWwgQ2xlYW5pbmciLAogICAgICAgICJMJ0VzdHJhbmdlIHYgR3JhdWNvYiIsCiAgICAgICAgIlRob21wc29uIHYgTE1TIiwKICAgICAgICAiUGFya2VyIHYgU291dGggRWFzdGVybiIsCiAgICAgICAgIlRob3JudG9uIHYgU2hvZSBMYW5lIC0gSW5jb3Jwb3JhdGlvbiIsCiAgICAgICAgIkludGVyZm90byIsCiAgICAgICAgIk1jQ3V0Y2hlb24gdiBNYWNCcmF5bmUiLAogICAgICAgICJDcm9va3MgdiBBbGxlbiIsCiAgICAgICAgIkJyaXRpc2ggQ3JhbmUgSGlyZSIsCiAgICAgICAgIk9sbGV5IHYgTWFybGJvcm91Z2ggQ291cnQgSG90ZWwiLAogICAgICAgICJTcHVybGluZyB2IEJyYWRzaGF3IiwKICAgICAgICAiRGljayBCZW50bGV5IHYgSGFyb2xkIFNtaXRoIEx0ZCIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIsCiAgICAgICAgIk5lZ2F0aXZlIiwKICAgICAgICAiQnkgU2lnbmF0dXJlIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJUZXJtcyBvbiBvciByZWZlcnJlZCB0byBieSBhIGRvY3VtZW50IHN1Y2ggYXMgYSB0aW1lc2hlZXQsIHdpbGwgb25seSBiZSB2YWxpZGx5IGluY29ycG9yYXRlZCBpZiA8c3BhbiBjbGFzcz1cIml0XCI+YSByZWFzb25hYmxlIHBlcnNvbjwvc3Bhbj4gd291bGQgZXhwZWN0IHRoZW0gdG8gaGF2ZSBjb250cmFjdHVhbCBlZmZlY3QuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zICZtZGFzaDsgTmVnYXRpdmUgJm1kYXNoOyBCeSBTaWduYXR1cmUiLAogICAgIk5VTUJFUiI6ICI5MyIsCiAgICAiWUVBUiI6ICIxOTk2Igp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zICZtZGFzaDsgTmVnYXRpdmUgJm1kYXNoOyBCeSBTaWduYXR1cmUiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkwnRXN0cmFuZ2UgdiBHcmF1Y29iIiwKICAgICAgICAiR3JvZ2FuIHYgUm9iaW4gTWVyZWRpdGggUGxhbnQiLAogICAgICAgICJQYXJrZXIgdiBTb3V0aCBFYXN0ZXJuIiwKICAgICAgICAiQnJpdGlzaCBDcmFuZSBIaXJlIiwKICAgICAgICAiU3B1cmxpbmcgdiBCcmFkc2hhdyIsCiAgICAgICAgIk9sbGV5IHYgTWFybGJvcm91Z2ggQ291cnQgSG90ZWwiLAogICAgICAgICJDcm9va3MgdiBBbGxlbiIsCiAgICAgICAgIlRob21wc29uIHYgTE1TIiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgLSBJbmNvcnBvcmF0aW9uIiwKICAgICAgICAiTWNDdXRjaGVvbiB2IE1hY0JyYXluZSIsCiAgICAgICAgIkludGVyZm90byIsCiAgICAgICAgIkphY29icyB2IEJhdGF2aWEiCiAgICBdLAogICAgIk5VTUJFUiI6ICI5NCIsCiAgICAiWUVBUiI6ICIxOTUxIiwKICAgICJOQU1FIjogIkN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nIiwKICAgICJDSVRBVElPTiI6ICJDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyAmYW1wOyBEeWVpbmcgQ28gWzE5NTFdIDEgS0IgODA1IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zIiwKICAgICAgICAiTmVnYXRpdmUiLAogICAgICAgICJCeSBTaWduYXR1cmUiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIldoZW4gdGhlIHBhcnR5IHJlbHlpbmcgb24gdGVybXMgaW5jb3Jwb3JhdGVkIGJ5IHNpZ25hdHVyZSBmYWlscyB0byBleHBsYWluIHRoZW0gY29ycmVjdGx5LCBvciBkb2VzIHNvIG1lbmRhY2lvdXNseSBzbyBhcyB0byBsaW1pdCB0aGUgb3RoZXIgcGFydHkmIzgyMTc7cyB1bmRlcnN0YW5kaW5nIG9mIHRoZW0sIHRoZXkgd2lsbCBiZSBpbmNvcnBvcmF0ZWQgPHNwYW4gY2xhc3M9XCJpdFwiPm9ubHkgdG8gdGhlIGV4dGVudCBvZiB0aGUgZXhwbGFuYXRpb248L3NwYW4+LiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkRlbm5pbmciCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIkluY29ycG9yYXRpb24gb2YgVGVybXMgJm1kYXNoOyBOZWdhdGl2ZSAmbWRhc2g7IEJ5IE5vdGljZSAmbWRhc2g7IFRpbWluZyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgLSBJbmNvcnBvcmF0aW9uIiwKICAgICAgICAiSW50ZXJmb3RvIiwKICAgICAgICAiQ3Jvb2tzIHYgQWxsZW4iLAogICAgICAgICJNY0N1dGNoZW9uIHYgTWFjQnJheW5lIiwKICAgICAgICAiUGFya2VyIHYgU291dGggRWFzdGVybiIsCiAgICAgICAgIlNwdXJsaW5nIHYgQnJhZHNoYXciLAogICAgICAgICJUaG9tcHNvbiB2IExNUyIsCiAgICAgICAgIkJyaXRpc2ggQ3JhbmUgSGlyZSIsCiAgICAgICAgIkdyb2dhbiB2IFJvYmluIE1lcmVkaXRoIFBsYW50IiwKICAgICAgICAiQ3VydGlzIHYgQ2hlbWljYWwgQ2xlYW5pbmciLAogICAgICAgICJMJ0VzdHJhbmdlIHYgR3JhdWNvYiIsCiAgICAgICAgIkJhbm5lcm1hbiB2IFdoaXRlIgogICAgXSwKICAgICJOVU1CRVIiOiAiOTUiLAogICAgIllFQVIiOiAiMTk0OSIsCiAgICAiTkFNRSI6ICJPbGxleSB2IE1hcmxib3JvdWdoIENvdXJ0IEhvdGVsIiwKICAgICJDSVRBVElPTiI6ICJPbGxleSB2IE1hcmxib3JvdWdoIENvdXJ0IEhvdGVsIFsxOTQ5XSAxIEtCIDUzMiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIsCiAgICAgICAgIk5lZ2F0aXZlIiwKICAgICAgICAiQnkgTm90aWNlIiwKICAgICAgICAiVGltaW5nIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJEZW5uaW5nIExKIGFkdW1icmF0ZWQgKCYjODIyMDthZHVtYnJhdGVkJiM4MjIxOyA/PyBmZnMuKSB0aGUgd2F5cyBpbiB3aGljaCBvbmUgcGFydHkgY2FuIHNob3cgYW5vdGhlciYjODIxNztzIGNvbnNlbnQgdG8gYSB0ZXJtIHRodXMgJm1kYXNoOyA8c3BhbiBjbGFzcz1cIml0XCI+JiM4MjIwO3RoZSBiZXN0IHdheSBvZiBwcm92aW5nIGl0IGlzIGJ5IGEgd3JpdHRlbiBkb2N1bWVudCBzaWduZWQgYnkgdGhlIHBhcnR5PC9zcGFuPiB0byBiZSBib3VuZC4gIEFub3RoZXIgd2F5IGlzIGJ5IGhhbmRpbmcgaGltIDxzcGFuIGNsYXNzPVwiaXRcIj5iZWZvcmUgb3IgYXQgdGhlIHRpbWUgb2YgdGhlIGNvbnRyYWN0IGEgd3JpdHRlbiBub3RpY2U8L3NwYW4+IHNwZWNpZnlpbmcgaXRzIHRlcm1zIGFuZCBtYWtpbmcgaXQgY2xlYXIgdG8gaGltIHRoYXQgdGhlIGNvbnRyYWN0IGlzIG9uIHRob3NlIHRlcm1zLiAgPHNwYW4gY2xhc3M9XCJpdFwiPkEgcHJvbWluZW50IHB1YmxpYyBub3RpY2Ugd2hpY2ggaXMgcGxhaW4gZm9yIGFsbCB0byBzZWU8L3NwYW4+IHdoZW4gaGUgbWFrZXMgdGhlIGNvbnRyYWN0IG9yIDxzcGFuIGNsYXNzPVwiaXRcIj5hbiBleHByZXNzIG9yYWwgc3RpcHVsYXRpb248L3NwYW4+IHdvdWxkLCBubyBkb3VidCwgaGF2ZSB0aGUgc2FtZSBlZmZlY3QuICA8c3BhbiBjbGFzcz1cIml0XCI+QnV0IG5vdGhpbmcgc2hvcnQ8L3NwYW4+IG9mIG9uZSBvZiB0aGVzZSB0aHJlZSB3YXlzIHdpbGwgc3VmZmljZS4mIzgyMjE7IgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRGVubmluZyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyAmbWRhc2g7IE5lZ2F0aXZlICZtZGFzaDsgQnkgTm90aWNlICZtZGFzaDsgVGltaW5nIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJPbGxleSB2IE1hcmxib3JvdWdoIENvdXJ0IEhvdGVsIiwKICAgICAgICAiSW50ZXJmb3RvIiwKICAgICAgICAiQnJpdGlzaCBDcmFuZSBIaXJlIiwKICAgICAgICAiVGhvbXBzb24gdiBMTVMiLAogICAgICAgICJTcHVybGluZyB2IEJyYWRzaGF3IiwKICAgICAgICAiUGFya2VyIHYgU291dGggRWFzdGVybiIsCiAgICAgICAgIkNyb29rcyB2IEFsbGVuIiwKICAgICAgICAiTWNDdXRjaGVvbiB2IE1hY0JyYXluZSIsCiAgICAgICAgIkdyb2dhbiB2IFJvYmluIE1lcmVkaXRoIFBsYW50IiwKICAgICAgICAiTCdFc3RyYW5nZSB2IEdyYXVjb2IiLAogICAgICAgICJDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyIsCiAgICAgICAgIlRpbGRlbiB2IENsZW5kaW5uaW5nIgogICAgXSwKICAgICJOVU1CRVIiOiAiOTYiLAogICAgIllFQVIiOiAiMTk3MSIsCiAgICAiTkFNRSI6ICJUaG9ybnRvbiB2IFNob2UgTGFuZSAtIEluY29ycG9yYXRpb24iLAogICAgIkNJVEFUSU9OIjogIlRob3JudG9uIHYgU2hvZSBMYW5lIFBhcmtpbmcgWzE5NzFdIDIgUUIgMTYzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zIiwKICAgICAgICAiTmVnYXRpdmUiLAogICAgICAgICJCeSBOb3RpY2UiLAogICAgICAgICJUaW1pbmciCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBvbmVyb3VzIG5hdHVyZSBvZiBhbiBleGNsdXNpb24gY2xhdXNlIG1heSBpbmZvcm0gdGhlIGNvdXJ0JiM4MjE3O3MgY29uc3RydWN0aW9uIGFzIHRvIHdoZW4gdGhlIGNvbnRyYWN0IGlzIGZvcm1lZC4gU2hvdWxkIGl0IGNvbWUgYSBtb21lbnQgdG9vIGxhdGUsIGl0IG1heSA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBiZSB2YWxpZGx5IGluY29ycG9yYXRlZC4gKENsYXVzZXMgc3VjaCBhcyBhbW9uZ3N0IHRob3NlIGluIHF1ZXN0aW9uLCBzZWVraW5nIHRvIGV4Y2x1ZGUgbGlhYmlsaXR5IGZvciBwZXJzb25hbCBpbmp1cnksIGFyZSBub3cgaW52YWxpZCwgYnkgUzIoMSkgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VUNUQTwvc3Bhbj4uIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRGVubmluZyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyAmbWRhc2g7IE5lZ2F0aXZlICZtZGFzaDsgQnkgTm90aWNlICZtZGFzaDsgTmF0dXJlIG9mIERvY3VtZW50LCBFeHBlY3RhdGlvbnMgb2YgUGFydGllcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiSW50ZXJmb3RvIiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgLSBJbmNvcnBvcmF0aW9uIiwKICAgICAgICAiQ3Jvb2tzIHYgQWxsZW4iLAogICAgICAgICJQYXJrZXIgdiBTb3V0aCBFYXN0ZXJuIiwKICAgICAgICAiTWNDdXRjaGVvbiB2IE1hY0JyYXluZSIsCiAgICAgICAgIk9sbGV5IHYgTWFybGJvcm91Z2ggQ291cnQgSG90ZWwiLAogICAgICAgICJTcHVybGluZyB2IEJyYWRzaGF3IiwKICAgICAgICAiVGhvbXBzb24gdiBMTVMiLAogICAgICAgICJMJ0VzdHJhbmdlIHYgR3JhdWNvYiIsCiAgICAgICAgIkN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nIiwKICAgICAgICAiR3JvZ2FuIHYgUm9iaW4gTWVyZWRpdGggUGxhbnQiLAogICAgICAgICJIZWlsYnV0IHYgQnVja2xldG9uIgogICAgXSwKICAgICJZRUFSIjogIjE5NzUiLAogICAgIk5VTUJFUiI6ICI5NyIsCiAgICAiQUtBIjogIkJyaXRpc2ggQ3JhbmUgSGlyZSB2IElwc3dpY2giLAogICAgIk5BTUUiOiAiQnJpdGlzaCBDcmFuZSBIaXJlIiwKICAgICJDSVRBVElPTiI6ICJCcml0aXNoIENyYW5lIEhpcmUgQ29ycG9yYXRpb24gTHRkIHYgSXBzd2ljaCBQbGFudCBIaXJlIEx0ZCBbMTk3NV0gUUIgMzAzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zIiwKICAgICAgICAiTmVnYXRpdmUiLAogICAgICAgICJCeSBOb3RpY2UiLAogICAgICAgICJOYXR1cmUgb2YgRG9jdW1lbnQsIEV4cGVjdGF0aW9ucyBvZiBQYXJ0aWVzIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBbHRob3VnaCB0aGUgcGFydGllcyA8c3BhbiBjbGFzcz1cIml0XCI+aGFkPC9zcGFuPiBkb25lIGJ1c2luZXNzIHR3aWNlIG9uIHRoZSBzYW1lIHRlcm1zIChzdWNoIHRoYXQgaXQgbWF5IHBsYXVzaWJseSBoYXZlIGJlZW4gYXJndWVkIHRoYXQgdGhlIGV4Y2x1c2lvbiBjbGF1c2Ugd2FzIGluY29ycG9yYXRlZCBieSB0aGVpciBjb3Vyc2Ugb2YgcHJpb3IgZGVhbGluZyksIHRoZSBleGNsdXNpb24gY2xhdXNlIHdhcyBoZWxkIHZhbGlkbHkgaW5jb3Jwb3JhdGVkIGJlY2F1c2U6IChpKSBib3RoIHBhcnRpZXMgd2VyZSBhd2FyZSBlYWNoIG90aGVyIGNvbnRyYWN0ZWQgb24gKGZsYXZvdXJzIG9mKSBpbmR1c3RyeSBzdGFuZGFyZCB0ZXJtcyBmb3Igc3VjaCBjb250cmFjdHMgc28gPHNwYW4gY2xhc3M9XCJpdFwiPmNvdWxkIHJlYXNvbmFibHkgYmUgZXhwZWN0ZWQgdG8gc3VwcG9zZSBzdWNoIHRlcm1zIHdvdWxkIGdvdmVybjwvc3Bhbj47IChpaSkgdGhlIHVyZ2VuY3kgaW4gd2hpY2ggaXQgd2FzIGNvbmNsdWRlZCB3YWl2ZWQgdGhlIHVzdWFsIG5lZWQgZm9yIGZvcm1hbGl0eTsgKGlpaSkgdGhlIHdyaXR0ZW4gc3RhdGVtZW50IG9mIHRlcm1zIGNhbWUgYSBsaXR0bGUgbGF0ZSwgYnV0IHRoZSBkZWZlbmRhbnQgaGFkIG5vdGljZSBvZiBpdC4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJEZW5uaW5nIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zICZtZGFzaDsgTmVnYXRpdmUgJm1kYXNoOyBCeSBOb3RpY2UgJm1kYXNoOyBUaWNrZXQgQ2FzZXMgLSBSZWFzb25hYmxlbmVzcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiVGhvbXBzb24gdiBMTVMiLAogICAgICAgICJCcml0aXNoIENyYW5lIEhpcmUiLAogICAgICAgICJDcm9va3MgdiBBbGxlbiIsCiAgICAgICAgIkludGVyZm90byIsCiAgICAgICAgIk1jQ3V0Y2hlb24gdiBNYWNCcmF5bmUiLAogICAgICAgICJTcHVybGluZyB2IEJyYWRzaGF3IiwKICAgICAgICAiT2xsZXkgdiBNYXJsYm9yb3VnaCBDb3VydCBIb3RlbCIsCiAgICAgICAgIlRob3JudG9uIHYgU2hvZSBMYW5lIC0gSW5jb3Jwb3JhdGlvbiIsCiAgICAgICAgIkN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nIiwKICAgICAgICAiTCdFc3RyYW5nZSB2IEdyYXVjb2IiLAogICAgICAgICJHcm9nYW4gdiBSb2JpbiBNZXJlZGl0aCBQbGFudCIsCiAgICAgICAgIkJhbm5lcm1hbiB2IFdoaXRlIgogICAgXSwKICAgICJOVU1CRVIiOiAiOTgiLAogICAgIllFQVIiOiAiMTg3NyIsCiAgICAiTkFNRSI6ICJQYXJrZXIgdiBTb3V0aCBFYXN0ZXJuIiwKICAgICJDSVRBVElPTiI6ICJQYXJrZXIgdiBTb3V0aCBFYXN0ZXJuIFJhaWx3YXkgQ28gKDE4NzcpIDIgQ1BEIDQxNiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIsCiAgICAgICAgIk5lZ2F0aXZlIiwKICAgICAgICAiQnkgTm90aWNlIiwKICAgICAgICAiVGlja2V0IENhc2VzIC0gUmVhc29uYWJsZW5lc3MiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgcGVyc29uIHdobyBidXlzIGEgdGlja2V0IGZvciBzb21ldGhpbmcsIG9uIHRoZSBiYWNrIG9mIHdoaWNoIHRoZXJlIHRoZXJlIGFyZSB0ZXJtcywgaXMgbmV2ZXJ0aGVsZXNzIHN0aWxsIGZyZWUgdG8gYWNjZXB0IG9yIHJlamVjdCB0aGUgb2ZmZXIgb24gdGhlIGJhc2lzIG9mIGhpcyBlc3RpbWF0aW9uIG9mIHdoZXRoZXIgaGUgd2FudHMgdG8gYmUgYm91bmQgYnkgdGhvc2UgdGVybXMuIFdoaWNoIGlzIG9idmlvdXNseSBub25zZW5zaWNhbCBib2xsb2NrcyBmcm9tIGV2ZXJ5IGNvbmNlaXZhYmxlIHBvaW50IG9mIHZpZXcgJm1kYXNoOyBleGNlcHQgZm9yIDxzcGFuIGNsYXNzPVwiaXRcIj5wcmFnbWF0aWMgY29tbWVyY2lhbCBuZWNlc3NpdHk8L3NwYW4+LiAgTWVsaXNoIExKIGhlbGQgdGhhdCBhIHJhaWx3YXkgY29tcGFueSB3YXMgZW50aXRsZWQgdG8gZXhwZWN0IHNvbWVvbmUgZGVwb3NpdGluZyBhIGJhZyBjb3VsZCByZWFkIEVuZ2xpc2gsIGFuZCB0aGF0IGEgcGFydGljdWxhcmx5IGlnbm9yYW50LCBpbGxpdGVyYXRlIG9yIGZlY2tsZXNzIHBlcnNvbiBzaG91bGQgbm90IGJlIHB1dCBpbiBhIGJldHRlciBwb3NpdGlvbiB0aGFuIGFub3RoZXIsIGJ5IGJlaW5nIHNwYXJlZCB0aGUgYnVyZGVuIG9mIGFuIGV4Y2x1c2lvbiBjbGF1c2UgdG8gd2hpY2ggdGhlIG1vcmUgY2FyZWZ1bCB3b3VsZCBiZSBoZWxkLiAoQWNjb3JkaW5nIHRvIEdyZWdvcnkgQ2xhcmtlLCAyMDA4LCB0aGUgbGl0ZXJhY3kgcmF0ZSBpbiBFbmdsYW5kIGluIHRoZSAxODgwcyB3YXMgbm8gbW9yZSB0aGFuIDgwJSBmb3IgbWVuLCA3MCUgZm9yIHdvbWVuKS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJPYnZpb3VzIE5vbnNlbnNlIiwKICAgICAgICAiSGlzdG9yaWNhbCIsCiAgICAgICAgIlVuc2FmZSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyAmbWRhc2g7IE5lZ2F0aXZlICZtZGFzaDsgQnkgTm90aWNlICZtZGFzaDsgVGlja2V0IENhc2VzIC0gUmVhc29uYWJsZW5lc3MiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlBhcmtlciB2IFNvdXRoIEVhc3Rlcm4iLAogICAgICAgICJNY0N1dGNoZW9uIHYgTWFjQnJheW5lIiwKICAgICAgICAiQnJpdGlzaCBDcmFuZSBIaXJlIiwKICAgICAgICAiT2xsZXkgdiBNYXJsYm9yb3VnaCBDb3VydCBIb3RlbCIsCiAgICAgICAgIkludGVyZm90byIsCiAgICAgICAgIlNwdXJsaW5nIHYgQnJhZHNoYXciLAogICAgICAgICJDcm9va3MgdiBBbGxlbiIsCiAgICAgICAgIlRob3JudG9uIHYgU2hvZSBMYW5lIC0gSW5jb3Jwb3JhdGlvbiIsCiAgICAgICAgIkN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nIiwKICAgICAgICAiTCdFc3RyYW5nZSB2IEdyYXVjb2IiLAogICAgICAgICJHcm9nYW4gdiBSb2JpbiBNZXJlZGl0aCBQbGFudCIsCiAgICAgICAgIlRpbGRlbiB2IENsZW5kaW5uaW5nIgogICAgXSwKICAgICJOVU1CRVIiOiAiOTkiLAogICAgIllFQVIiOiAiMTkzMCIsCiAgICAiTkFNRSI6ICJUaG9tcHNvbiB2IExNUyIsCiAgICAiQ0lUQVRJT04iOiAiVGhvbXBzb24gdiBMb25kb24sIE1pZGxhbmQgYW5kIFNjb3R0aXNoIFJhaWx3YXkgWzE5MzBdIDEgS0IgNDEiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgVGVybXMiLAogICAgICAgICJOZWdhdGl2ZSIsCiAgICAgICAgIkJ5IE5vdGljZSIsCiAgICAgICAgIlRpY2tldCBDYXNlcyAtIFJlYXNvbmFibGVuZXNzIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJUZXJtcyBzZXQgb3V0IG9yIHJlZmVycmVkIHRvIG9uIHRoZSBmYWNlIG9mIGEgY29udHJhY3R1YWwgZG9jdW1lbnQgYXJlIHVzdWFsbHkgdmFsaWRseSBpbmNvcnBvcmF0ZWQuICBBIHRyaXBseS1pbmRpcmVjdCB3cml0dGVuIG5vdGljZSBvZiB0ZXJtcyAmbWRhc2g7IGZyb250IG9mIHRpY2tldCByZWZlcnJpbmcgdG8gYmFjazsgYmFjayBvZiB0aWNrZXQgcmVmZXJyaW5nIHRvIHRlcm1zIDxzcGFuIGNsYXNzPVwiaXRcIj5pbiBhIHZhcmlldHkgb2Ygb3RoZXIgZG9jdW1lbnRzPC9zcGFuPiwgb2J0YWluYWJsZSBlbHNld2hlcmUsIDxzcGFuIGNsYXNzPVwiaXRcIj5mb3IgYSBmZWU8L3NwYW4+ICZtZGFzaDsgZ2l2ZW4gPHNwYW4gY2xhc3M9XCJpdFwiPmFmdGVyPC9zcGFuPiBjb25jbHVzaW9uIG9mIGNvbnRyYWN0IHRvIGEgd29tYW4gPHNwYW4gY2xhc3M9XCJpdFwiPndobyBjb3VsZCBub3QgcmVhZDwvc3Bhbj4sIHdhcyBoZWxkIHRvIGhhdmUgdmFsaWRseSBpbmNvcnBvcmF0ZWQgdGhlbS4gRXZlbiBhdCBmaXJzdCBpbnN0YW5jZSwgd2hlcmUgdGhlIGp1cnkgaGFkIGZvdW5kIG90aGVyd2lzZS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJPYnZpb3VzIE5vbnNlbnNlIiwKICAgICAgICAiSGlzdG9yaWNhbCIsCiAgICAgICAgIlVuc2FmZSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyAmbWRhc2g7IE5lZ2F0aXZlICZtZGFzaDsgQnkgTm90aWNlICZtZGFzaDsgT25lcm91cyBPciBVbnVzdWFsIFRlcm1zIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDcm9va3MgdiBBbGxlbiIsCiAgICAgICAgIk1jQ3V0Y2hlb24gdiBNYWNCcmF5bmUiLAogICAgICAgICJTcHVybGluZyB2IEJyYWRzaGF3IiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgLSBJbmNvcnBvcmF0aW9uIiwKICAgICAgICAiUGFya2VyIHYgU291dGggRWFzdGVybiIsCiAgICAgICAgIkJyaXRpc2ggQ3JhbmUgSGlyZSIsCiAgICAgICAgIlRob21wc29uIHYgTE1TIiwKICAgICAgICAiT2xsZXkgdiBNYXJsYm9yb3VnaCBDb3VydCBIb3RlbCIsCiAgICAgICAgIkdyb2dhbiB2IFJvYmluIE1lcmVkaXRoIFBsYW50IiwKICAgICAgICAiTCdFc3RyYW5nZSB2IEdyYXVjb2IiLAogICAgICAgICJDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyIsCiAgICAgICAgIlNjaGF3ZWwgdiBSZWFkZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEwMCIsCiAgICAiWUVBUiI6ICIxOTg5IiwKICAgICJOQU1FIjogIkludGVyZm90byIsCiAgICAiQ0lUQVRJT04iOiAiSW50ZXJmb3RvIFBpY3R1cmUgTGlicmFyeSBMdGQgdiBTdGlsZXR0byBWaXN1YWwgUHJvZHVjdGlvbnMgTHRkIFsxOTg5XSBRQiA0MzMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgVGVybXMiLAogICAgICAgICJOZWdhdGl2ZSIsCiAgICAgICAgIkJ5IE5vdGljZSIsCiAgICAgICAgIk9uZXJvdXMgT3IgVW51c3VhbCBUZXJtcyIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiUGFydGljdWxhcmx5IG9uZXJvdXMgb3IgdW51c3VhbCB0ZXJtcyB0b2VpbmcgdGhlIGxpbmUgc2VwYXJhdGluZyB0aGVtIGZyb20gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+cGVuYWx0eSBjbGF1c2VzPC9zcGFuPiB3aWxsIG5vdCBiZSB2YWxpZGx5IGluY29ycG9yYXRlZCBpZiBub3QgPHNwYW4gY2xhc3M9XCJpdFwiPmZhaXJseSBhbmQgcmVhc29uYWJseSBkcmF3biB0byB0aGUgb3RoZXImIzgyMTc7cyBhdHRlbnRpb248L3NwYW4+IChCaW5naGFtKSBvciBhdCBsZWFzdCwgPHNwYW4gY2xhc3M9XCJpdFwiPmRpZmZlcmVudGlhdGVkPC9zcGFuPiAoRGlsbG9uKS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJCaW5naGFtIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJDcm9va3MgdiBBbGxlbiAoMTg3MCkgNSBRQkQgMzgiLAogICAgIk5BTUUiOiAiQ3Jvb2tzIHYgQWxsZW4iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIk1jQ3V0Y2hlb24gdiBNYWNCcmF5bmUiLAogICAgICAgICJJbnRlcmZvdG8iLAogICAgICAgICJTcHVybGluZyB2IEJyYWRzaGF3IiwKICAgICAgICAiUGFya2VyIHYgU291dGggRWFzdGVybiIsCiAgICAgICAgIlRob3JudG9uIHYgU2hvZSBMYW5lIC0gSW5jb3Jwb3JhdGlvbiIsCiAgICAgICAgIlRob21wc29uIHYgTE1TIiwKICAgICAgICAiT2xsZXkgdiBNYXJsYm9yb3VnaCBDb3VydCBIb3RlbCIsCiAgICAgICAgIkJyaXRpc2ggQ3JhbmUgSGlyZSIsCiAgICAgICAgIkwnRXN0cmFuZ2UgdiBHcmF1Y29iIiwKICAgICAgICAiR3JvZ2FuIHYgUm9iaW4gTWVyZWRpdGggUGxhbnQiLAogICAgICAgICJDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyIsCiAgICAgICAgIlNjaGF3ZWwgdiBSZWFkZSIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIsCiAgICAgICAgIk5lZ2F0aXZlIiwKICAgICAgICAiQnkgTm90aWNlIiwKICAgICAgICAiT25lcm91cyBPciBVbnVzdWFsIFRlcm1zIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBIHRlcm0gdGhhdCB3b3VsZCBub3Qgbm9ybWFsbHkgYmUgZXhwZWN0ZWQgYnkgb25lIHBhcnR5IG11c3QgYmUgbWFkZSA8c3BhbiBjbGFzcz1cIml0XCI+Y29uc3BpY3VvdXM8L3NwYW4+IGJ5IHRoZSBvdGhlciwgaWYgc2Vla2luZyB0byBpbmNvcnBvcmF0ZSBpdCBieSBub3RpY2UuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zICZtZGFzaDsgTmVnYXRpdmUgJm1kYXNoOyBCeSBOb3RpY2UgJm1kYXNoOyBPbmVyb3VzIE9yIFVudXN1YWwgVGVybXMiLAogICAgIk5VTUJFUiI6ICIxMDEiLAogICAgIllFQVIiOiAiMTg3MCIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyAmbWRhc2g7IE5lZ2F0aXZlICZtZGFzaDsgQnkgTm90aWNlICZtZGFzaDsgT25lcm91cyBPciBVbnVzdWFsIFRlcm1zIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNY0N1dGNoZW9uIHYgTWFjQnJheW5lIiwKICAgICAgICAiQ3Jvb2tzIHYgQWxsZW4iLAogICAgICAgICJJbnRlcmZvdG8iLAogICAgICAgICJCcml0aXNoIENyYW5lIEhpcmUiLAogICAgICAgICJQYXJrZXIgdiBTb3V0aCBFYXN0ZXJuIiwKICAgICAgICAiVGhvbXBzb24gdiBMTVMiLAogICAgICAgICJPbGxleSB2IE1hcmxib3JvdWdoIENvdXJ0IEhvdGVsIiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgLSBJbmNvcnBvcmF0aW9uIiwKICAgICAgICAiQ3VydGlzIHYgQ2hlbWljYWwgQ2xlYW5pbmciLAogICAgICAgICJMJ0VzdHJhbmdlIHYgR3JhdWNvYiIsCiAgICAgICAgIkdyb2dhbiB2IFJvYmluIE1lcmVkaXRoIFBsYW50IiwKICAgICAgICAiRGljayBCZW50bGV5IHYgSGFyb2xkIFNtaXRoIEx0ZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEwMiIsCiAgICAiWUVBUiI6ICIxOTU2IiwKICAgICJOQU1FIjogIlNwdXJsaW5nIHYgQnJhZHNoYXciLAogICAgIkNJVEFUSU9OIjogIlNwdXJsaW5nIHYgQnJhZHNoYXcgKDE5NTYpIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zIiwKICAgICAgICAiTmVnYXRpdmUiLAogICAgICAgICJCeSBOb3RpY2UiLAogICAgICAgICJPbmVyb3VzIE9yIFVudXN1YWwgVGVybXMiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkRlbm5pbmcgTEogJm1kYXNoOyBcdTIwMWNTb21lIGNsYXVzZXMgd2hpY2ggSSBoYXZlIHNlZW4gd291bGQgbmVlZCB0byBiZSA8c3BhbiBjbGFzcz1cIml0XCI+cHJpbnRlZCBpbiByZWQgaW5rIG9uIHRoZSBmYWNlIG9mIHRoZSBkb2N1bWVudDwvc3Bhbj4gd2l0aCBhIHJlZCBoYW5kIHBvaW50aW5nIHRvIGl0IGJlZm9yZSB0aGUgbm90aWNlIGNvdWxkIGJlIGhlbGQgdG8gYmUgc3VmZmljaWVudFx1MjAxZC4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJEZW5uaW5nIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zICZtZGFzaDsgTmVnYXRpdmUgJm1kYXNoOyBCeSBOb3RpY2UgJm1kYXNoOyBPbmVyb3VzIE9yIFVudXN1YWwgVGVybXMgLyBJbmNvcnBvcmF0aW9uIG9mIFRlcm1zICZtZGFzaDsgTmVnYXRpdmUgJm1kYXNoOyBCeSBDb3Vyc2Ugb2YgRGVhbGluZyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiU3B1cmxpbmcgdiBCcmFkc2hhdyIsCiAgICAgICAgIkNyb29rcyB2IEFsbGVuIiwKICAgICAgICAiSW50ZXJmb3RvIiwKICAgICAgICAiVGhvbXBzb24gdiBMTVMiLAogICAgICAgICJCcml0aXNoIENyYW5lIEhpcmUiLAogICAgICAgICJUaG9ybnRvbiB2IFNob2UgTGFuZSAtIEluY29ycG9yYXRpb24iLAogICAgICAgICJQYXJrZXIgdiBTb3V0aCBFYXN0ZXJuIiwKICAgICAgICAiT2xsZXkgdiBNYXJsYm9yb3VnaCBDb3VydCBIb3RlbCIsCiAgICAgICAgIkN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nIiwKICAgICAgICAiTCdFc3RyYW5nZSB2IEdyYXVjb2IiLAogICAgICAgICJHcm9nYW4gdiBSb2JpbiBNZXJlZGl0aCBQbGFudCIsCiAgICAgICAgIk9zY2FyIENoZXNzIHYgV2lsbGlhbXMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMDMiLAogICAgIllFQVIiOiAiMTk2NCIsCiAgICAiTkFNRSI6ICJNY0N1dGNoZW9uIHYgTWFjQnJheW5lIiwKICAgICJDSVRBVElPTiI6ICJNY0N1dGNoZW9uIHYgRGF2aWQgTWFjQnJheW5lIEx0ZCBbMTk2NF0gMSBXTFIgMTI1IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zIiwKICAgICAgICAiTmVnYXRpdmUiLAogICAgICAgICJCeSBOb3RpY2UiLAogICAgICAgICJPbmVyb3VzIE9yIFVudXN1YWwgVGVybXMiLAogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zIiwKICAgICAgICAiTmVnYXRpdmUiLAogICAgICAgICJCeSBDb3Vyc2Ugb2YgRGVhbGluZyIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBjb3Vyc2Ugb2YgcHJpb3IgZGVhbGluZyBvbmx5IHZhbGlkbHkgaW5jb3Jwb3JhdGVzIGFuIGV4Y2x1c2lvbiBjbGF1c2UsIHdoZW4gdGhhdCBwcmlvciBkZWFsaW5nIDxzcGFuIGNsYXNzPVwiaXRcIj5kZW1vbnN0cmF0ZXMgYWN0dWFsIGtub3dsZWRnZSBvZiB0aGUgY2xhdXNlPC9zcGFuPiBieSB0aGUgcGFydHkgYWdhaW5zdCB3aG9tIGl0IGlzIGJlaW5nIHVzZWQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRGVubmluZyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyAmbWRhc2g7IFBvc2l0aXZlICZtZGFzaDsgVGVybXMgb3IgUmVwcmVzZW50YXRpb25zICZtZGFzaDsgSW50ZW50aW9uIG9mIFBhcnRpZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIk9zY2FyIENoZXNzIHYgV2lsbGlhbXMiLAogICAgICAgICJCYW5uZXJtYW4gdiBXaGl0ZSIsCiAgICAgICAgIkRpY2sgQmVudGxleSB2IEhhcm9sZCBTbWl0aCBMdGQiLAogICAgICAgICJTY2hhd2VsIHYgUmVhZGUiLAogICAgICAgICJFY2F5IHYgR29kZnJleSIsCiAgICAgICAgIklubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biIsCiAgICAgICAgIlRpbGRlbiB2IENsZW5kaW5uaW5nIiwKICAgICAgICAiU3B1cmxpbmcgdiBCcmFkc2hhdyIsCiAgICAgICAgIkNyb29rcyB2IEFsbGVuIiwKICAgICAgICAiTCdFc3RyYW5nZSB2IEdyYXVjb2IiLAogICAgICAgICJNY0N1dGNoZW9uIHYgTWFjQnJheW5lIiwKICAgICAgICAiSmFjb2JzIHYgQmF0YXZpYSIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTEzIiwKICAgICJOVU1CRVIiOiAiMTA0IiwKICAgICJBS0EiOiAiSGVpbGJ1dCIsCiAgICAiTkFNRSI6ICJIZWlsYnV0IHYgQnVja2xldG9uIiwKICAgICJDSVRBVElPTiI6ICJIZWlsYnV0LCBTeW1vbnMgJmFtcDsgQ28gdiBCdWNrbGV0b24gWzE5MTNdIEFDIDMwIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zIiwKICAgICAgICAiUG9zaXRpdmUiLAogICAgICAgICJUZXJtcyBvciBSZXByZXNlbnRhdGlvbnMiLAogICAgICAgICJJbnRlbnRpb24gb2YgUGFydGllcyIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiVGhlIGtleSBxdWVzdGlvbiBpbiBkZXRlcm1pbmluZyB3aGV0aGVyIGEgc3RhdGVtZW50IGlzIGEgdGVybSBvciBhIHJlcHJlc2VudGF0aW9uLCB0byB3aGljaCBhbGwgb3RoZXIgdGVzdHMgYXJlIHN1YnNpZGlhcnksIGlzIDxzcGFuIGNsYXNzPVwiaXRcIj50aGUgaW50ZW50aW9ucyBvZiB0aGUgcGFydGllczwvc3Bhbj4sIG9iamVjdGl2ZWx5IGRldGVybWluZWQuIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJCYW5uZXJtYW4gdiBXaGl0ZSAoMTg2MSkgMTAgQ0IgTlMgODQ0IiwKICAgICJOQU1FIjogIkJhbm5lcm1hbiB2IFdoaXRlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJTY2hhd2VsIHYgUmVhZGUiLAogICAgICAgICJFY2F5IHYgR29kZnJleSIsCiAgICAgICAgIkRpY2sgQmVudGxleSB2IEhhcm9sZCBTbWl0aCBMdGQiLAogICAgICAgICJPc2NhciBDaGVzcyB2IFdpbGxpYW1zIiwKICAgICAgICAiSW5udHJlcHJlbmV1ciBQdWIgQ28gdiBFYXN0IENyb3duIiwKICAgICAgICAiSGVpbGJ1dCB2IEJ1Y2tsZXRvbiIsCiAgICAgICAgIkludGVyZm90byIsCiAgICAgICAgIkN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nIiwKICAgICAgICAiQ3Jvb2tzIHYgQWxsZW4iLAogICAgICAgICJUaG9ybnRvbiB2IFNob2UgTGFuZSAtIEluY29ycG9yYXRpb24iLAogICAgICAgICJUaWxkZW4gdiBDbGVuZGlubmluZyIsCiAgICAgICAgIkwnRXN0cmFuZ2UgdiBHcmF1Y29iIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zIiwKICAgICAgICAiUG9zaXRpdmUiLAogICAgICAgICJUZXJtcyBvciBSZXByZXNlbnRhdGlvbnMiLAogICAgICAgICJTdWJzaWRpYXJ5IFRlc3RzIiwKICAgICAgICAiSW1wb3J0YW5jZSBvZiBTdGF0ZW1lbnQiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIldoZW4gb25lIHBhcnR5IG1ha2VzIGl0IGNsZWFyIGl0IHdpbGwgb25seSBjb250cmFjdCBvbiB0aGUgYmFzaXMgb2YgdGhlIG90aGVyJiM4MjE3O3Mgd2FycmFudHksIHRoZSB3YXJyYW50eSBjYW5ub3QgYmUgYSAmIzgyMjA7bWVyZSYjODIyMTsgcmVwcmVzZW50YXRpb24sIGFuZCBtdXN0IHRoZXJlZm9yZSBiZSBhIHRlcm0uIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zICZtZGFzaDsgUG9zaXRpdmUgJm1kYXNoOyBUZXJtcyBvciBSZXByZXNlbnRhdGlvbnMgJm1kYXNoOyBTdWJzaWRpYXJ5IFRlc3RzICZtZGFzaDsgSW1wb3J0YW5jZSBvZiBTdGF0ZW1lbnQiLAogICAgIk5VTUJFUiI6ICIxMDUiLAogICAgIllFQVIiOiAiMTg2MSIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyAmbWRhc2g7IFBvc2l0aXZlICZtZGFzaDsgVGVybXMgb3IgUmVwcmVzZW50YXRpb25zICZtZGFzaDsgU3Vic2lkaWFyeSBUZXN0cyAmbWRhc2g7IEV4cGVydGlzZSB0byBnaXZlIFdhcnJhbnR5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJEaWNrIEJlbnRsZXkgdiBIYXJvbGQgU21pdGggTHRkIiwKICAgICAgICAiRWNheSB2IEdvZGZyZXkiLAogICAgICAgICJCYW5uZXJtYW4gdiBXaGl0ZSIsCiAgICAgICAgIlNjaGF3ZWwgdiBSZWFkZSIsCiAgICAgICAgIklubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biIsCiAgICAgICAgIkhlaWxidXQgdiBCdWNrbGV0b24iLAogICAgICAgICJHcm9nYW4gdiBSb2JpbiBNZXJlZGl0aCBQbGFudCIsCiAgICAgICAgIkwnRXN0cmFuZ2UgdiBHcmF1Y29iIiwKICAgICAgICAiSW50ZXJmb3RvIiwKICAgICAgICAiU3B1cmxpbmcgdiBCcmFkc2hhdyIsCiAgICAgICAgIkN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nIiwKICAgICAgICAiSmFjb2JzIHYgQmF0YXZpYSIKICAgIF0sCiAgICAiWUVBUiI6ICIxOTU3IiwKICAgICJOVU1CRVIiOiAiMTA2IiwKICAgICJBS0EiOiAiT3NjYXIgQ2hlc3MiLAogICAgIk5BTUUiOiAiT3NjYXIgQ2hlc3MgdiBXaWxsaWFtcyIsCiAgICAiQ0lUQVRJT04iOiAiT3NjYXIgQ2hlc3MgTHRkIHYgV2lsbGlhbXMgWzE5NTddIDEgV0xSIDM3MCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIsCiAgICAgICAgIlBvc2l0aXZlIiwKICAgICAgICAiVGVybXMgb3IgUmVwcmVzZW50YXRpb25zIiwKICAgICAgICAiU3Vic2lkaWFyeSBUZXN0cyIsCiAgICAgICAgIkV4cGVydGlzZSB0byBnaXZlIFdhcnJhbnR5IgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBIHN0YXRlbWVudCBhYm91dCBhIGRldGFpbCBvZiBhIGNvbnRyYWN0JiM4MjE3O3Mgc3ViamVjdCBtYXR0ZXIsIHRoZSBtYWtpbmcgb2Ygd2hpY2ggd291bGQgYmUgcmVhc29uYWJseSBhc3N1bWVkIHRvIHJlcXVpcmUgZXhwZXJ0aXNlICZtZGFzaDsgd2hpY2ggY291bGQgbm90IGJlIHJlYXNvbmFibHkgYXNzdW1lZCBvZiB0aGUgc3RhdGVtZW50JiM4MjE3O3MgbWFrZXIgJm1kYXNoOyB3b3VsZCBub3QgYmUgY29uc2lkZXJlZCBieSBhIHJlYXNvbmFibGUgYnlzdGFuZGVyIHRvIGhhdmUgYmVlbiBpbnRlbmRlZCB0byBoYXZlIGNvbnRyYWN0dWFsIGVmZmVjdCwgYnV0IG1lcmVseSBhIHJlcHJlc2VudGF0aW9uLjxicj4mZW1zcDsmZW1zcDtEZW5uaW5nIExKICZtZGFzaDsgdGhlIG1lYW5pbmcgb2YgJiM4MjE2O2ludGVudGlvbiYjODIxNzsgaW4gdGhlIGVzc2VudGlhbCB0ZXN0IGZvciBkaXN0aW5ndWlzaGluZyBiZXR3ZWVuIHRlcm1zIGFuZCByZXByZXNlbnRhdGlvbnMgaXMgd2hldGhlciBhbiA8c3BhbiBjbGFzcz1cIml0XCI+aW50ZWxsaWdlbnQgYnlzdGFuZGVyPC9zcGFuPiB3b3VsZCB0aGluayBpdCB3YXMgaW50ZW5kZWQgYXMgYSB0ZXJtLCBnaXZlbiB0aGUgb2JqZWN0aXZlIGV2aWRlbmNlLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkRlbm5pbmciCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIkluY29ycG9yYXRpb24gb2YgVGVybXMgJm1kYXNoOyBQb3NpdGl2ZSAmbWRhc2g7IFRlcm1zIG9yIFJlcHJlc2VudGF0aW9ucyAmbWRhc2g7IFN1YnNpZGlhcnkgVGVzdHMgJm1kYXNoOyBFeHBlcnRpc2UgdG8gZ2l2ZSBXYXJyYW50eSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiT3NjYXIgQ2hlc3MgdiBXaWxsaWFtcyIsCiAgICAgICAgIlNjaGF3ZWwgdiBSZWFkZSIsCiAgICAgICAgIkJhbm5lcm1hbiB2IFdoaXRlIiwKICAgICAgICAiRWNheSB2IEdvZGZyZXkiLAogICAgICAgICJJbm50cmVwcmVuZXVyIFB1YiBDbyB2IEVhc3QgQ3Jvd24iLAogICAgICAgICJIZWlsYnV0IHYgQnVja2xldG9uIiwKICAgICAgICAiTCdFc3RyYW5nZSB2IEdyYXVjb2IiLAogICAgICAgICJQYXJrZXIgdiBTb3V0aCBFYXN0ZXJuIiwKICAgICAgICAiQnJpdGlzaCBDcmFuZSBIaXJlIiwKICAgICAgICAiU3B1cmxpbmcgdiBCcmFkc2hhdyIsCiAgICAgICAgIkNyb29rcyB2IEFsbGVuIiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgLSBJbmNvcnBvcmF0aW9uIgogICAgXSwKICAgICJZRUFSIjogIjE5NjUiLAogICAgIk5VTUJFUiI6ICIxMDciLAogICAgIkFLQSI6ICJEaWNrIEJlbnRsZXkiLAogICAgIk5BTUUiOiAiRGljayBCZW50bGV5IHYgSGFyb2xkIFNtaXRoIEx0ZCIsCiAgICAiQ0lUQVRJT04iOiAiRGljayBCZW50bGV5IFByb2R1Y3Rpb25zIEx0ZCB2IEhhcm9sZCBTbWl0aCAoTW90b3JzKSBMdGQgWzE5NjVdIDEgV0xSIDYyMyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIsCiAgICAgICAgIlBvc2l0aXZlIiwKICAgICAgICAiVGVybXMgb3IgUmVwcmVzZW50YXRpb25zIiwKICAgICAgICAiU3Vic2lkaWFyeSBUZXN0cyIsCiAgICAgICAgIkV4cGVydGlzZSB0byBnaXZlIFdhcnJhbnR5IgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJCeSBjb250cmFzdCB0byA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Pc2NhciBDaGVzczwvc3Bhbj4sIGEgc3RhdGVtZW50IHJlcXVpcmluZyBleHBlcnRpc2UsIGNvbWluZyBmcm9tIHNvbWVvbmUgd2hvIG1pZ2h0IHJlYXNvbmFibHkgYmUgZXhwZWN0ZWQgdG8gaGF2ZSB0aGF0IGV4cGVydGlzZSwgbWlnaHQgYmUgcmVhc29uYWJseSBpbmZlcnJlZCB0byBiZSBhIHdhcnJhbnR5IHJhdGhlciB0aGFuIGEgbWVyZSByZXByZXNlbnRhdGlvbi4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJEZW5uaW5nIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJTY2hhd2VsIHYgUmVhZGUgWzE5MTJdIElSIDY0IiwKICAgICJOQU1FIjogIlNjaGF3ZWwgdiBSZWFkZSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRWNheSB2IEdvZGZyZXkiLAogICAgICAgICJJbm50cmVwcmVuZXVyIFB1YiBDbyB2IEVhc3QgQ3Jvd24iLAogICAgICAgICJCYW5uZXJtYW4gdiBXaGl0ZSIsCiAgICAgICAgIk9zY2FyIENoZXNzIHYgV2lsbGlhbXMiLAogICAgICAgICJEaWNrIEJlbnRsZXkgdiBIYXJvbGQgU21pdGggTHRkIiwKICAgICAgICAiSGVpbGJ1dCB2IEJ1Y2tsZXRvbiIsCiAgICAgICAgIlBhcmtlciB2IFNvdXRoIEVhc3Rlcm4iLAogICAgICAgICJKYWNvYnMgdiBCYXRhdmlhIiwKICAgICAgICAiTWNDdXRjaGVvbiB2IE1hY0JyYXluZSIsCiAgICAgICAgIkwnRXN0cmFuZ2UgdiBHcmF1Y29iIiwKICAgICAgICAiVGhvcm50b24gdiBTaG9lIExhbmUgLSBJbmNvcnBvcmF0aW9uIiwKICAgICAgICAiVGlsZGVuIHYgQ2xlbmRpbm5pbmciCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgVGVybXMiLAogICAgICAgICJQb3NpdGl2ZSIsCiAgICAgICAgIlRlcm1zIG9yIFJlcHJlc2VudGF0aW9ucyIsCiAgICAgICAgIlN1YnNpZGlhcnkgVGVzdHMiLAogICAgICAgICJBc3N1bXB0aW9uIG9mIFJlc3BvbnNpYmlsaXR5IgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBJiM4MjE3O3Mgc3RhdGVtZW50IHRoYXQgQiBuZWVkIG5vdCBpbnNwZWN0IHRoZSBzdWJqZWN0IG1hdHRlciwgYmVjYXVzZSBoYWQgdGhlcmUgYmVlbiBhbnl0aGluZyB3cm9uZyB3aXRoIGl0LCBoZSB3b3VsZCBoYXZlIGluZm9ybWVkIGhpbSAmbWRhc2g7IGlzIGl0c2VsZiBhIHdhcnJhbnR5LiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyAmbWRhc2g7IFBvc2l0aXZlICZtZGFzaDsgVGVybXMgb3IgUmVwcmVzZW50YXRpb25zICZtZGFzaDsgU3Vic2lkaWFyeSBUZXN0cyAmbWRhc2g7IEFzc3VtcHRpb24gb2YgUmVzcG9uc2liaWxpdHkiLAogICAgIk5VTUJFUiI6ICIxMDgiLAogICAgIllFQVIiOiAiMTkxMiIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiRWNheSB2IEdvZGZyZXkgKDE5NDcpIDgwIExsIEwgUmVwIDI4NiIsCiAgICAiTkFNRSI6ICJFY2F5IHYgR29kZnJleSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiU2NoYXdlbCB2IFJlYWRlIiwKICAgICAgICAiT3NjYXIgQ2hlc3MgdiBXaWxsaWFtcyIsCiAgICAgICAgIkRpY2sgQmVudGxleSB2IEhhcm9sZCBTbWl0aCBMdGQiLAogICAgICAgICJCYW5uZXJtYW4gdiBXaGl0ZSIsCiAgICAgICAgIklubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biIsCiAgICAgICAgIkhlaWxidXQgdiBCdWNrbGV0b24iLAogICAgICAgICJQYXJrZXIgdiBTb3V0aCBFYXN0ZXJuIiwKICAgICAgICAiVGlsZGVuIHYgQ2xlbmRpbm5pbmciLAogICAgICAgICJHcm9nYW4gdiBSb2JpbiBNZXJlZGl0aCBQbGFudCIsCiAgICAgICAgIk1jQ3V0Y2hlb24gdiBNYWNCcmF5bmUiLAogICAgICAgICJPbGxleSB2IE1hcmxib3JvdWdoIENvdXJ0IEhvdGVsIiwKICAgICAgICAiTCdFc3RyYW5nZSB2IEdyYXVjb2IiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgVGVybXMiLAogICAgICAgICJQb3NpdGl2ZSIsCiAgICAgICAgIlRlcm1zIG9yIFJlcHJlc2VudGF0aW9ucyIsCiAgICAgICAgIlN1YnNpZGlhcnkgVGVzdHMiLAogICAgICAgICJBc3N1bXB0aW9uIG9mIFJlc3BvbnNpYmlsaXR5IgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJXaGVuIGEgYnV5ZXIgaXMgZW5jb3VyYWdlZCBieSBhIHNlbGxlciB0byBpbnNwZWN0IGdvb2RzIGZvciBoaW1zZWxmLCBoaXMgZmFpbHVyZSB0byBkbyBzbyB3aWxsIGJlIHRha2VuIGFzIGFuIGFzc3VtcHRpb24gb2YgcmVzcG9uc2liaWxpdHkgZm9yIHRoZSBzdWJqZWN0IG1hdHRlciwgYW5kIHdpbGwgbWlsaXRhdGUgYWdhaW5zdCB0aGUgY29uc3RydWN0aW9uIG9mIHN0YXRlbWVudHMgbWFkZSBieSB0aGUgc2VsbGVyIGFzIHdhcnJhbnRpZXMsIHJhdGhlciB0aGFuIG1lcmUgcmVycGVzZW50YXRpb25zLiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyAmbWRhc2g7IFBvc2l0aXZlICZtZGFzaDsgVGVybXMgb3IgUmVwcmVzZW50YXRpb25zICZtZGFzaDsgU3Vic2lkaWFyeSBUZXN0cyAmbWRhc2g7IEFzc3VtcHRpb24gb2YgUmVzcG9uc2liaWxpdHkiLAogICAgIk5VTUJFUiI6ICIxMDkiLAogICAgIllFQVIiOiAiMTk0NyIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyAmbWRhc2g7IFBvc2l0aXZlICZtZGFzaDsgVGVybXMgb3IgUmVwcmVzZW50YXRpb25zICZtZGFzaDsgU3Vic2lkaWFyeSBUZXN0cyAmbWRhc2g7IFdyaXRpbmciLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkJhbm5lcm1hbiB2IFdoaXRlIiwKICAgICAgICAiU2NoYXdlbCB2IFJlYWRlIiwKICAgICAgICAiT3NjYXIgQ2hlc3MgdiBXaWxsaWFtcyIsCiAgICAgICAgIkRpY2sgQmVudGxleSB2IEhhcm9sZCBTbWl0aCBMdGQiLAogICAgICAgICJFY2F5IHYgR29kZnJleSIsCiAgICAgICAgIkhlaWxidXQgdiBCdWNrbGV0b24iLAogICAgICAgICJMJ0VzdHJhbmdlIHYgR3JhdWNvYiIsCiAgICAgICAgIkN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nIiwKICAgICAgICAiUGFya2VyIHYgU291dGggRWFzdGVybiIsCiAgICAgICAgIkdyb2dhbiB2IFJvYmluIE1lcmVkaXRoIFBsYW50IiwKICAgICAgICAiU3B1cmxpbmcgdiBCcmFkc2hhdyIsCiAgICAgICAgIk1jQ3V0Y2hlb24gdiBNYWNCcmF5bmUiCiAgICBdLAogICAgIllFQVIiOiAiMjAwMCIsCiAgICAiTlVNQkVSIjogIjExMCIsCiAgICAiQUtBIjogIklubnRyZXByZW5ldXIiLAogICAgIk5BTUUiOiAiSW5udHJlcHJlbmV1ciBQdWIgQ28gdiBFYXN0IENyb3duIiwKICAgICJDSVRBVElPTiI6ICJJbm50cmVwcmVuZXVyIFB1YiBDbyB2IEVhc3QgQ3Jvd24gTHRkIFsyMDAwXSAyIExsb3lkJiM4MjE3O3MgUmVwIDYxMSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIsCiAgICAgICAgIlBvc2l0aXZlIiwKICAgICAgICAiVGVybXMgb3IgUmVwcmVzZW50YXRpb25zIiwKICAgICAgICAiU3Vic2lkaWFyeSBUZXN0cyIsCiAgICAgICAgIldyaXRpbmciCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBjbG9zZXIgYSBzdGF0ZW1lbnQgY29tZXMgdG8gdGhlIHdyaXR0ZW4gY29uY2x1c2lvbiBvZiBhIGNvbnRyYWN0LCB0aGUgbW9yZSBsaWtlbHkgaXQgaXMgdG8gYmUgc2VlbiBhcyBhIGZhY3RvciBwcmVjaXBpdGF0aW5nIHRoZSBjb250cmFjdCwgYW5kIHRoZXJlZm9yZSwgdG8gYmUgY29uc3RydWVkIGFzIGEgdGVybS4gU3RhdGVtZW50cyBtYWRlIDxzcGFuIGNsYXNzPVwiaXRcIj5lYXJsaWVyPC9zcGFuPiwgYnV0IDxzcGFuIGNsYXNzPVwiaXRcIj5ub3QgaW4gdGhlIHdyaXR0ZW4gdGVybXM8L3NwYW4+LCBieSBjb250cmFzdCwgd2lsbCBiZSBwcmVzdW1lZCA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiB0byBiZSB0ZXJtcy4iCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIkphY29icyB2IEJhdGF2aWEgKDE5MjQpIiwKICAgICJOQU1FIjogIkphY29icyB2IEJhdGF2aWEiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkJyaXRpc2ggQ3JhbmUgSGlyZSIsCiAgICAgICAgIkVjYXkgdiBHb2RmcmV5IiwKICAgICAgICAiUGFya2VyIHYgU291dGggRWFzdGVybiIsCiAgICAgICAgIlNwdXJsaW5nIHYgQnJhZHNoYXciLAogICAgICAgICJNY0N1dGNoZW9uIHYgTWFjQnJheW5lIiwKICAgICAgICAiQmFubmVybWFuIHYgV2hpdGUiLAogICAgICAgICJPc2NhciBDaGVzcyB2IFdpbGxpYW1zIiwKICAgICAgICAiSW5udHJlcHJlbmV1ciBQdWIgQ28gdiBFYXN0IENyb3duIiwKICAgICAgICAiRGljayBCZW50bGV5IHYgSGFyb2xkIFNtaXRoIEx0ZCIsCiAgICAgICAgIkNyb29rcyB2IEFsbGVuIiwKICAgICAgICAiR3JvZ2FuIHYgUm9iaW4gTWVyZWRpdGggUGxhbnQiLAogICAgICAgICJUaG9tcHNvbiB2IExNUyIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIsCiAgICAgICAgIkNvbmZsaWN0aW5nIiwKICAgICAgICAiUGFyb2wgRXZpZGVuY2UgUnVsZSIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQXV0aG9yaXR5IGZvciB0aGUgUGFyb2wgRXZpZGVuY2UgUnVsZSBnb3Zlcm5pbmcgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+aW5jb3Jwb3JhdGlvbiBvZiBjb25mbGljdGluZyB0ZXJtczwvc3Bhbj4uIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJJbmNvcnBvcmF0aW9uIG9mIFRlcm1zICZtZGFzaDsgQ29uZmxpY3RpbmcgJm1kYXNoOyBQYXJvbCBFdmlkZW5jZSBSdWxlIiwKICAgICJOVU1CRVIiOiAiMTExIiwKICAgICJZRUFSIjogIjE5MjQiCn0sCnsKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIk5BTUUiOiAiSW1wbGljYXRpb24gb2YgVGVybXMgLSBJbnRybyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmVzcG9uc2VzIHRvIE9mZmVycyIsCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgTmVnYXRpdmUgVGVybXMiLAogICAgICAgICJQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiTWlzdGFrZSAtIEludHJvZHVjdGlvbiIsCiAgICAgICAgIkluY29ycG9yYXRpb24gb2YgQ29uZmxpY3RpbmcgVGVybXMiLAogICAgICAgICJPZmZlcnMiLAogICAgICAgICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UiLAogICAgICAgICJDb25zaWRlcmF0aW9uIC0gRGV0YWlsIiwKICAgICAgICAiQ29udHJhY3R1YWwgRHV0aWVzIGFzIENvbnNpZGVyYXRpb24iLAogICAgICAgICJDb25zaWRlcmF0aW9uIC0gT3ZlcnZpZXciLAogICAgICAgICJJbmNvcnBvcmF0aW9uIG9mIFBvc2l0aXZlIFRlcm1zIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbXBsaWNhdGlvbiBvZiBUZXJtcyIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiSW1wbGljYXRpb24gb2YgVGVybXMiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5JbXBsaWNhdGlvbiBmcm9tIEN1c3RvbTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JLmUuLCBpZiAmIzgyMjA7MTAwMCYjODIyMTsgaGFwcGVucyB0byBtZWFuICYjODIyMDsxMjAwJiM4MjIxOywgYXMgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U21pdGggdiBXaWxzb248L3NwYW4+LiBBbHNvIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkh1dHRvbiB2IFdhcnJlbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5NaWdodCBhbHNvIGluY2x1ZGUgYnVzaW5lc3MgcHJhY3RpY2UuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+SW1wbGljYXRpb24gaW4gRmFjdDwvc3Bhbj4gZ2l2ZXMgZWZmZWN0IHRvIHdoYXQgdGhlIHBhcnRpZXMgbXVzdCBoYXZlIGludGVuZGVkLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiaXRcIj5JdCByZXF1aXJlczwvc3Bhbj4gJm1kYXNoOyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImJkXCI+TmVjZXNzaXR5PC9zcGFuPiwgbm90IG1lcmVseSByZWFzb25hYmxlbmVzcy4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmVpZ2F0ZSB2IFVuaW9uPC9zcGFuPi4gVGhlIHBhcnRpZXMgd291bGQgaGF2ZSBzYWlkICYjODIyMDtidXQgb2YgY291cnNlLCYjODIyMTsgaGFkIHRoZXkgYmVlbiBhc2tlZC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiA8c3BhbiBjbGFzcz1cImJkXCI+T2ZmaWNpb3VzIEJ5c3RhbmRlcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U2hpcmxhdyB2IFNvdXRoZXJuIEZvdW5kcmllczwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJiZFwiPkJ1c2luZXNzIGVmZmljYWN5PC9zcGFuPiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaGUgTW9vcmNvY2s8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkltcGxpY2F0aW9uIGluIExhdzwvc3Bhbj4gYWRkcyB3aGF0IDxzcGFuIGNsYXNzPVwiaXRcIj5vdWdodDwvc3Bhbj4gdG8gaGF2ZSBiZWVuIGluIHRoZSBjb250cmFjdC4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gSW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TGl2ZXJwb29sIENDIHYgSXJ3aW48L3NwYW4+LCBMb3JkIFdpbGJlcmZvcmNlIGhlbGQgaXQgbXVzdCBiZSA8c3BhbiBjbGFzcz1cIml0XCI+bmVjZXNzYXJ5PC9zcGFuPjsgRGVubmluZyBvbiBhcHBlYWwgaGFkIHNhaWQgPHNwYW4gY2xhc3M9XCJpdFwiPnJlYXNvbmFibGU8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNjYWxseTwvc3Bhbj4sIGFsdGhvdWdoIHRoZSB0ZXN0IG9mIG5lY2Vzc2l0eSB3YXMgY29uZmlybWVkLCBpdCB3YXMgY29uc3RydWVkIHNvIGFzIHRvIGFtb3VudCB0byBhIHRlc3Qgb2YgPHNwYW4gY2xhc3M9XCJpdFwiPnJlYXNvbmFibGVuZXNzPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBJbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Dcm9zc2xleSB2IEZhaXRoZnVsPC9zcGFuPiwgbm8gdGVybSB3YXMgZm91bmQgdG8gYmUgaW1wbGllZCBieSBsYXcgYXMgdG8gYW4gZW1wbG95ZXImIzgyMTc7cyBsb29raW5nIGFmdGVyIGhpcyBlbXBsb3llZSYjODIxNztzIDxzcGFuIGNsYXNzPVwiaXRcIj5maW5hbmNlczwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMTIiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIkltcGxpY2F0aW9uIG9mIFRlcm1zIiwKICAgICItLUNBVEVHT1JZIjogIkltcGxpY2F0aW9uIG9mIFRlcm1zOyBUZXJtcyBJbXBsaWVkIEJ5IEN1c3RvbSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ3Jvc3NsZXkgdiBGYWl0aGZ1bCIsCiAgICAgICAgIlNjYWxseSB2IFNvdXRoZXJuIEhlYWx0aCBCb2FyZCIsCiAgICAgICAgIlJlaWdhdGUgdiBVbmlvbiIsCiAgICAgICAgIkxpdmVycG9vbCBDQyB2IElyd2luIiwKICAgICAgICAiVGhlIE1vb3Jjb2NrIiwKICAgICAgICAiU2hpcmxhdyB2IFNvdXRoZXJuIEZvdW5kcmllcyIsCiAgICAgICAgIkh1Z2hlcyB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IiwKICAgICAgICAiQ2hhcGVsdG9uIHYgQmFycnkiLAogICAgICAgICJMYW1wbGVpZ2ggdiBCcmF0aHdhaXQiLAogICAgICAgICJEaWNraW5zb24gdiBBYmVsIiwKICAgICAgICAiVGhvbWFzIHYgVGhvbWFzIiwKICAgICAgICAiUiB2IENsYXJrZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjExMyIsCiAgICAiWUVBUiI6ICIxODMyIiwKICAgICJOQU1FIjogIlNtaXRoIHYgV2lsc29uIiwKICAgICItLU5BTUUiOiAiSHV0dG9uIHYgV2FycmVuIiwKICAgICJDSVRBVElPTiI6ICJTbWl0aCB2IFdpbHNvbiAoMTgzMikgMyBCIGFuZCBBZG9sIDcyOCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW1wbGljYXRpb24gb2YgVGVybXMiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgdGVybSBtYXkgYmUgaW1wbGllZCBpbnRvIGEgY29udHJhY3QgYnkgbG9jYWwgY3VzdG9tLCBwcmVzdW1hYmx5IGFzIGEgY29uY2Vzc2lvbiB0byBiYWNrd2FyZG5lc3MuIEUuZy4sICYjODIyMDsxMDAwJiM4MjIxOyBub3QsIGluIGEgZ2l2ZW4gcGxhY2UsIG1lYW5pbmcgJiM4MjIwOzEwMDAmIzgyMjE7IGJ1dCAmIzgyMjA7MTIwMC4mIzgyMjE7IgogICAgXSwKICAgICItLUNJVEFUSU9OIjogIkh1dHRvbiB2IFdhcnJlbiAoMTgzNikgMSBNICZhbXA7IFcgNDY2Igp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJUaGUgTW9vcmNvY2sgKDE4ODkpIDE0IFBEIDY0IiwKICAgICJOQU1FIjogIlRoZSBNb29yY29jayIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiU2hpcmxhdyB2IFNvdXRoZXJuIEZvdW5kcmllcyIsCiAgICAgICAgIlJlaWdhdGUgdiBVbmlvbiIsCiAgICAgICAgIkNyb3NzbGV5IHYgRmFpdGhmdWwiLAogICAgICAgICJMaXZlcnBvb2wgQ0MgdiBJcndpbiIsCiAgICAgICAgIlNtaXRoIHYgV2lsc29uIiwKICAgICAgICAiU2NhbGx5IHYgU291dGhlcm4gSGVhbHRoIEJvYXJkIiwKICAgICAgICAiUm91dGxlZGdlIHYgR3JhbnQiLAogICAgICAgICJIYXJ0bGV5IHYgUG9uc29uYnkiLAogICAgICAgICJUaGUgUG9zdCBDaGFzZXIiLAogICAgICAgICJQYW8gT24gdiBMYXUgTG9uZyIsCiAgICAgICAgIlRpbm4gdiBIb2ZmbWFuIiwKICAgICAgICAiRm9ha2VzIHYgQmVlciIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW1wbGljYXRpb24gb2YgVGVybXMiLAogICAgICAgICJJbXBsaWVkIEluIEZhY3QgKGJ5IFByZXN1bWVkIEludGVudGlvbnMpIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBIHRlcm0gc291Z2h0IHRvIGJlIGltcGxpZWQgaW50byBhIGNvbnRyYWN0IG11c3Qgbm90IGRldHJhY3QgZnJvbSB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmJ1c2luZXNzIGVmZmljYWN5PC9zcGFuPiBvZiB0aGUgZGVhbGluZ3MgYXQgaGFuZC4iCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkltcGxpY2F0aW9uIG9mIFRlcm1zICZtZGFzaDsgSW1wbGllZCBJbiBGYWN0IChieSBQcmVzdW1lZCBJbnRlbnRpb25zKSIsCiAgICAiTlVNQkVSIjogIjExNCIsCiAgICAiWUVBUiI6ICIxODg5Igp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJSZWlnYXRlIHYgVW5pb24gTWFudWZhY3R1cmluZyBDbyBbMTkxOF0gMSBLQiA1OTIiLAogICAgIk5BTUUiOiAiUmVpZ2F0ZSB2IFVuaW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJTaGlybGF3IHYgU291dGhlcm4gRm91bmRyaWVzIiwKICAgICAgICAiVGhlIE1vb3Jjb2NrIiwKICAgICAgICAiU21pdGggdiBXaWxzb24iLAogICAgICAgICJDcm9zc2xleSB2IEZhaXRoZnVsIiwKICAgICAgICAiTGl2ZXJwb29sIENDIHYgSXJ3aW4iLAogICAgICAgICJTY2FsbHkgdiBTb3V0aGVybiBIZWFsdGggQm9hcmQiLAogICAgICAgICJDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDb21wYW55IiwKICAgICAgICAiVml0b2wgU0EgdiBOb3JlbGYgTHRkIiwKICAgICAgICAiVGhlIEV1cnltZWRvbiIsCiAgICAgICAgIkNod2VlIEtpbiBLb25nIHYgRGlnaWxhbmRNYWxsLmNvbSIsCiAgICAgICAgIkh1Z2hlcyB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IiwKICAgICAgICAiUGFvIE9uIHYgTGF1IExvbmciCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkltcGxpY2F0aW9uIG9mIFRlcm1zIiwKICAgICAgICAiSW1wbGllZCBJbiBGYWN0IChieSBQcmVzdW1lZCBJbnRlbnRpb25zKSIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSB0ZXJtIGNhbiBvbmx5IGJlIGltcGxpZWQgaW4gZmFjdCBpZiBpdCBpcyA8c3BhbiBjbGFzcz1cImJkXCI+bmVjZXNzYXJ5PC9zcGFuPiBmb3IgdGhlIGNvbnRyYWN0ICZtZGFzaDsgdGhhdCB0aGUgcGFydGllcyB0byB0aGUgY29udHJhY3Qgd291bGQgaGF2ZSBoYXZlIHNhaWQgJiM4MjIwO2J1dCBvZiBjb3Vyc2UmIzgyMjE7IGhhZCB0aGV5IHRob3VnaHQgb2Ygd2hldGhlciB0aGUgdGVybSBvdWdodCB0byBiZSBwcmVzZW50LiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiSW1wbGljYXRpb24gb2YgVGVybXMgJm1kYXNoOyBJbXBsaWVkIEluIEZhY3QgKGJ5IFByZXN1bWVkIEludGVudGlvbnMpIiwKICAgICJOVU1CRVIiOiAiMTE1IiwKICAgICJZRUFSIjogIjE5MTgiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlNoaXJsYXcgdiBTb3V0aGVybiBGb3VuZHJpZXMgTHRkIFsxOTM5XSAyIEtCIDIwNiIsCiAgICAiTkFNRSI6ICJTaGlybGF3IHYgU291dGhlcm4gRm91bmRyaWVzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZWlnYXRlIHYgVW5pb24iLAogICAgICAgICJUaGUgTW9vcmNvY2siLAogICAgICAgICJMaXZlcnBvb2wgQ0MgdiBJcndpbiIsCiAgICAgICAgIkNyb3NzbGV5IHYgRmFpdGhmdWwiLAogICAgICAgICJTY2FsbHkgdiBTb3V0aGVybiBIZWFsdGggQm9hcmQiLAogICAgICAgICJTbWl0aCB2IFdpbHNvbiIsCiAgICAgICAgIkNvb3BlciB2IFBoaWJicyIsCiAgICAgICAgIkNoYXBlbHRvbiB2IEJhcnJ5IiwKICAgICAgICAiUm9zZSB2IFBpbSIsCiAgICAgICAgIkhhcnZleSB2IEZhY2V5IiwKICAgICAgICAiSG9sd2VsbCB2IEh1Z2hlcyIsCiAgICAgICAgIkhhcnRsZXkgdiBQb25zb25ieSIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW1wbGljYXRpb24gb2YgVGVybXMiLAogICAgICAgICJJbXBsaWVkIEluIEZhY3QgKGJ5IFByZXN1bWVkIEludGVudGlvbnMpIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgdGVzdCBmb3IgaW1wbGljYXRpb24gb2YgYSB0ZXJtIGluIGZhY3QgaXMgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5vZmZpY2lvdXMgYnlzdGFuZGVyIHRlc3Q8L3NwYW4+ICZtZGFzaDsgdGhhdCBzdWNoIGEgcGVyc29uIHdvdWxkIHNheSAmIzgyMjA7YnV0IG9mIGNvdXJzZSEmIzgyMjE7IgogICAgXSwKICAgICJDQVRFR09SWSI6ICJJbXBsaWNhdGlvbiBvZiBUZXJtcyAmbWRhc2g7IEltcGxpZWQgSW4gRmFjdCAoYnkgUHJlc3VtZWQgSW50ZW50aW9ucykiLAogICAgIk5VTUJFUiI6ICIxMTYiLAogICAgIllFQVIiOiAiMTkzOSIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiSW1wbGljYXRpb24gb2YgVGVybXMgJm1kYXNoOyBDb2FsZXNjZW5jZSBvZiBDb250cmFjdHVhbCBJbnRlcnByZXRhdGlvbiBhbmQgSW1wbGljYXRpb24gb2YgVGVybXMgaW4gRmFjdCAvIEltcGxpY2F0aW9uIG9mIFRlcm1zICZtZGFzaDsgSW1wbGllZCBpbiBMYXcgKGJ5IExlZ2FsIFJlbGF0aW9uc2hpcCBvZiBQYXJ0aWVzKSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiU2NhbGx5IHYgU291dGhlcm4gSGVhbHRoIEJvYXJkIiwKICAgICAgICAiQ3Jvc3NsZXkgdiBGYWl0aGZ1bCIsCiAgICAgICAgIlNoaXJsYXcgdiBTb3V0aGVybiBGb3VuZHJpZXMiLAogICAgICAgICJTbWl0aCB2IFdpbHNvbiIsCiAgICAgICAgIlRoZSBNb29yY29jayIsCiAgICAgICAgIlJlaWdhdGUgdiBVbmlvbiIsCiAgICAgICAgIlRpbGRlbiB2IENsZW5kaW5uaW5nIiwKICAgICAgICAiR2lic29uIHYgTWFuY2hlc3RlciIsCiAgICAgICAgIlRob3JudG9uIHYgU2hvZSBMYW5lIFBhcmtpbmciLAogICAgICAgICJXYWRlIHYgU2ltZW9uIiwKICAgICAgICAiQmxhY2twb29sIGFuZCBGeWxkZSIsCiAgICAgICAgIlBhbyBPbiB2IExhdSBMb25nIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTE3IiwKICAgICJZRUFSIjogIjIwMDkiLAogICAgIk5BTUUiOiAiTGl2ZXJwb29sIENDIHYgSXJ3aW4iLAogICAgIkNJVEFUSU9OIjogIkxpdmVycG9vbCBDaXR5IENvdW5jaWwgdiBJcndpbiBbMTk3N10gQUMgMjM5IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbXBsaWNhdGlvbiBvZiBUZXJtcyIsCiAgICAgICAgIkNvYWxlc2NlbmNlIG9mIENvbnRyYWN0dWFsIEludGVycHJldGF0aW9uIGFuZCBJbXBsaWNhdGlvbiBvZiBUZXJtcyBpbiBGYWN0IiwKICAgICAgICAiSW1wbGljYXRpb24gb2YgVGVybXMiLAogICAgICAgICJJbXBsaWVkIGluIExhdyAoYnkgTGVnYWwgUmVsYXRpb25zaGlwIG9mIFBhcnRpZXMpIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJJbiB0aGUgTG9yZHM6IGEgdGVybSByZXF1aXJlZCBieSBsYXcgb2YgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHBhcnRpZXMgd2lsbCBiZSBpbXBsaWVkIGludG8gYSBjb250cmFjdCBsYWNraW5nIGl0LCBzaG91bGQgdG8gZG8gc28gYmUgPHNwYW4gY2xhc3M9XCJpdFwiPm5lY2Vzc2FyeTwvc3Bhbj4uIEluIHRoZSBDb3VydCBvZiBBcHBlYWwsIERlbm5pbmcgaGFkIHNsaXBwZWQgdXAgaW4gaG9sZGluZyB0aGUgdGVzdCB0byBiZSBvbmUgb2YgPHNwYW4gY2xhc3M9XCJpdFwiPnJlYXNvbmFibGVuZXNzPC9zcGFuPi4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJEZW5uaW5nIiwKICAgICAgICAiV2lsYmVyZm9yY2UiLAogICAgICAgICJSZWNlbnQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIkltcGxpY2F0aW9uIG9mIFRlcm1zICZtZGFzaDsgSW1wbGllZCBpbiBMYXcgKGJ5IExlZ2FsIFJlbGF0aW9uc2hpcCBvZiBQYXJ0aWVzKSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiTGl2ZXJwb29sIENDIHYgSXJ3aW4iLAogICAgICAgICJDcm9zc2xleSB2IEZhaXRoZnVsIiwKICAgICAgICAiU2hpcmxhdyB2IFNvdXRoZXJuIEZvdW5kcmllcyIsCiAgICAgICAgIlRoZSBNb29yY29jayIsCiAgICAgICAgIlNtaXRoIHYgV2lsc29uIiwKICAgICAgICAiUmVpZ2F0ZSB2IFVuaW9uIiwKICAgICAgICAiTCdFc3RyYW5nZSB2IEdyYXVjb2IiLAogICAgICAgICJDZW50cm92aW5jaWFsIHYgTWVyY2hhbnQgSW52ZXN0b3JzIiwKICAgICAgICAiRmVsdGhvdXNlIHYgQmluZGxleSIsCiAgICAgICAgIk9sbGV5IHYgTWFybGJvcm91Z2ggQ291cnQgSG90ZWwiLAogICAgICAgICJIYXJ0b2cgdiBDb2xpbiAmIFNoaWVsZHMiLAogICAgICAgICJUaGUgUG9zdCBDaGFzZXIiCiAgICBdLAogICAgIllFQVIiOiAiMTk5MiIsCiAgICAiTlVNQkVSIjogIjExOCIsCiAgICAiQUtBIjogIlNjYWxseSIsCiAgICAiTkFNRSI6ICJTY2FsbHkgdiBTb3V0aGVybiBIZWFsdGggQm9hcmQiLAogICAgIkNJVEFUSU9OIjogIlNjYWxseSB2IFNvdXRoZXJuIEhlYWx0aCBhbmQgU29jaWFsIFNlcnZpY2VzIEJvYXJkIFsxOTkyXSAxIEFDIDI5NCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW1wbGljYXRpb24gb2YgVGVybXMiLAogICAgICAgICJJbXBsaWVkIGluIExhdyAoYnkgTGVnYWwgUmVsYXRpb25zaGlwIG9mIFBhcnRpZXMpIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJQb2xpY3kgYW5kIGZhaXJuZXNzIG1heSBiZSBjb25zaWRlcmVkIHdoZW4gYXNzZXNzaW5nIHdoZXRoZXIgYSB0ZXJtIHNob3VsZCBiZSBpbXBsaWVkIGJ5IGxhdy4iCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIkNyb3NzbGV5IHYgRmFpdGhmdWwgJmFtcDsgR291bGQgSG9sZGluZ3MgWzIwMDRdIEVXQ0EgQ2l2IDI5MyIsCiAgICAiTkFNRSI6ICJDcm9zc2xleSB2IEZhaXRoZnVsIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJMaXZlcnBvb2wgQ0MgdiBJcndpbiIsCiAgICAgICAgIlNjYWxseSB2IFNvdXRoZXJuIEhlYWx0aCBCb2FyZCIsCiAgICAgICAgIlNtaXRoIHYgV2lsc29uIiwKICAgICAgICAiVGhlIE1vb3Jjb2NrIiwKICAgICAgICAiUmVpZ2F0ZSB2IFVuaW9uIiwKICAgICAgICAiU2hpcmxhdyB2IFNvdXRoZXJuIEZvdW5kcmllcyIsCiAgICAgICAgIkhhcnJpcyB2IE5pY2tlcnNlbiIsCiAgICAgICAgIkNvb2sgdiBXcmlnaHQiLAogICAgICAgICJIYXJ0bGV5IHYgUG9uc29uYnkiLAogICAgICAgICJCYXJyeSB2IERhdmllcyIsCiAgICAgICAgIlZhbmJlcmdlbiB2IFN0IEVkbXVuZHMiLAogICAgICAgICJGb2FrZXMgdiBCZWVyIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbXBsaWNhdGlvbiBvZiBUZXJtcyIsCiAgICAgICAgIkltcGxpZWQgaW4gTGF3IChieSBMZWdhbCBSZWxhdGlvbnNoaXAgb2YgUGFydGllcykiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBjb250cmFjdHVhbCByZWxhdGlvbnNoaXAgYmV0d2VlbiBlbXBsb3llciBhbmQgZW1wbG95ZWUgZG9lcyBub3QgcmVxdWlyZSB0aGUgZW1wbG95ZXIgdG8gbG9vayBhZnRlciB0aGUgZW1wbG95ZWUmIzgyMTc7cyA8c3BhbiBjbGFzcz1cIml0XCI+ZmluYW5jaWFsPC9zcGFuPiB3ZWxsYmVpbmcsIGFuZCBhIHRlcm0gdG8gdGhhdCBlZmZlY3QgY2Fubm90IGJlIGltcGxpZWQuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJJbXBsaWNhdGlvbiBvZiBUZXJtcyAmbWRhc2g7IEltcGxpZWQgaW4gTGF3IChieSBMZWdhbCBSZWxhdGlvbnNoaXAgb2YgUGFydGllcykiLAogICAgIk5VTUJFUiI6ICIxMTkiLAogICAgIllFQVIiOiAiMjAwNCIKfSwKewogICAgIlRZUEUiOiAiVGFibGUgb2YgQ29udGVudHMiLAogICAgIkNBVEVHT1JZIjogIkNsYXNzaWZpY2F0aW9uIG9mIFRlcm1zIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDb250cm9sIG9mIEV4ZW1wdGlvbiBDbGF1c2VzIGluIFVDVEEgMTk5NyBhbmQgQ1JBIDIwMTUgLSBUYWJsZSBvZiBDb250ZW50cyIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ2xhc3NpZmljYXRpb24gb2YgVGVybXMiCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+Q29udGVudHM8L3NwYW4+PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkwgU2NodWxlciBBRyB2IFdpY2ttYW4gTWFjaGluZSBUb29sIFNhbGVzIEx0ZDwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhvbmcgS29uZyBGaXIgU2hpcHBpbmcgQ28gTHRkIHYgS2F3YXNha2kgS2lzZW4gS2Fpc2hhIEx0ZDwvc3Bhbj4gLSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NYXJlZGVsYW50byBDb21wYW5pYSBOYXZpZXJhIFNBIHYgQmVyZ2JhdSBIYW5kZWwgR21iSCAoVGhlIE1paGFsaXMgQW5nZWxpcyk8L3NwYW4+IC0gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2VoYXZlIE5WIHYgQnJlbWVyIEhhbmRlbHNnZXNlbGxzY2hhZnQgbWJIIChUaGUgSGFuc2EgTm9yZCk8L3NwYW4+IC0gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QnVuZ2UgQ29ycG9yYXRpb24gdiBUcmFkYXggRXhwb3J0IFNBPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJOVU1CRVIiOiAiMTIwIiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiSG9mZm1hbiIKICAgIF0sCiAgICAiTkFNRSI6ICJDbGFzc2lmaWNhdGlvbiBvZiBUZXJtcyAtIFRhYmxlIG9mIENvbnRlbnRzIgp9LAp7CiAgICAiVFlQRSI6ICJUYWJsZSBvZiBDb250ZW50cyIsCiAgICAiQ0FURUdPUlkiOiAiRXhlbXB0aW9uIENsYXVzZXMgKFVDVEEgMTk5NyBhbmQgQ1JBIDIwMTUpIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDbGFzc2lmaWNhdGlvbiBvZiBUZXJtcyAtIFRhYmxlIG9mIENvbnRlbnRzIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJFeGVtcHRpb24gQ2xhdXNlcyAoVUNUQSAxOTk3IGFuZCBDUkEgMjAxNSkiCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+Q29udGVudHM8L3NwYW4+PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPldhbGxpcywgU29uICZhbXA7IFdlbGxzIHYgUHJhdHQgJmFtcDsgSGF5bmVzPC9zcGFuPiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFuZHJld3MgQnJvcyAoQm91cm5lbW91dGgpIEx0ZCB2IFNpbmdlciAmYW1wOyBDbyBMdGQ8L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BaWxzYSBDcmFpZyBGaXNoaW5nIENvIEx0ZCB2IE1hbHZlcm4gRmlzaGluZyBDbyBMdGQgYW5kIFNlY3VyaWNvciAoU2NvdGxhbmQpIEx0ZDwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkthcnNhbGVzIChIYXJyb3cpIEx0ZCB2IFdhbGxpczwvc3Bhbj4gJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TdWlzc2UgQXRsYW50aXF1ZSBTb2NpZXRlIGQmIzgyMTc7QXJtZW1lbnQgTWFyaXRpbWUgU0EgdiBOViBSb3R0ZXJkYW1zY2hlIEtvbGVuIENlbnRyYWxlPC9zcGFuPiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhhcmJ1dHQmIzgyMTc7cyBQbGFzdGljaW5lIEx0ZCB2IFdheW5lIFRhbmsgYW5kIFB1bXAgQ28gTHRkPC9zcGFuPiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydDwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNhbmFkYSBTdGVhbXNoaXAgTGluZXMgTHRkIHYgVGhlIEtpbmc8L3NwYW4+ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZDwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEyMSIsCiAgICAiTkFNRSI6ICJDb250cm9sIG9mIEV4ZW1wdGlvbiBDbGF1c2VzIGluIFVDVEEgMTk5NyBhbmQgQ1JBIDIwMTUgLSBUYWJsZSBvZiBDb250ZW50cyIKfSwKewogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiTkFNRSI6ICJNaXN0YWtlIC0gSW50cm9kdWN0aW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJPZmZlcnMiLAogICAgICAgICJJbXBsaWNhdGlvbiBvZiBUZXJtcyAtIEludHJvIiwKICAgICAgICAiQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIiwKICAgICAgICAiQ29uc2lkZXJhdGlvbiAtIE92ZXJ2aWV3IiwKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBOZWdhdGl2ZSBUZXJtcyIsCiAgICAgICAgIlJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBQb3NpdGl2ZSBUZXJtcyIsCiAgICAgICAgIkNvbnRyYWN0dWFsIER1dGllcyBhcyBDb25zaWRlcmF0aW9uIiwKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBDb25mbGljdGluZyBUZXJtcyIsCiAgICAgICAgIkNvbnNpZGVyYXRpb24gLSBEZXRhaWwiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk1pc3Rha2UiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIk1pc3Rha2UiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5NdXR1YWwgTWlzdGFrZTwvc3Bhbj48YnI+V2hlcmUgcGFydGllcyBhcmUgYXQgY3Jvc3MgcHVycG9zZXMsIGVhY2ggbGFib3VyaW5nIHVuZGVyIGhpcyBvd24gbWlzYXBwcmVoZW5zaW9uLiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPklzc3Vlczo8L3NwYW4+PG9sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEFyZSB0aGV5IGp1c3QgcHJpdmF0ZSBtaXNhcHByZWhlbnNpb25zLCBvciBkbyB0aGV5IHNob3cgYSBmbGF3IGluIHRoZSBjb250cmFjdCBpdHNlbGY/PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gSXMgb25lIHBhcnR5IG1vcmUgdG8gYmxhbWUgdGhhbiB0aGUgb3RoZXIgJm1kYXNoOyBpcyBpdCBpbiBmYWN0IHVuaWxhdGVyYWwgbWlzdGFrZT8gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGVubnkgdiBIYW5kY29jazwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gQ291bGQgdGhlIGFtYmlndWl0eSBiZSBpcm9uZWQgb3V0LCBhbmQgdGhlIGNvbnRyYWN0IG1hZGUgdG8gd29yaz88L3NwYW4+PC9saT48L29sPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlVuaWxhdGVyYWw8L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiYmRcIj5JbiBwZXJzb248L3NwYW4+LCB0aGUgcGFydGllcyBhcmUgcHJlc3VtZWQgdG8gaGF2ZSA8c3BhbiBjbGFzcz1cIml0XCI+Y29udHJhY3RlZDwvc3Bhbj4gd2l0aCBvbmUgYW5vdGhlci4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q3VuZHkgdiBMaW5kc2F5PC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJpdFwiPk5vdDwvc3Bhbj4gdGhhdCB0aGV5IGFyZSBwcmVzdW1lZCB0byBoYXZlIDxzcGFuIGNsYXNzPVwiaXRcIj5pbnRlbmRlZDwvc3Bhbj4gdG8gZG8gc28uIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFRoZSBjb250cmFjdCBpcyA8c3BhbiBjbGFzcz1cIml0XCI+dm9pZGFibGU8L3NwYW4+LCBub3Qgdm9pZC48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFNob3VsZCB0aGUgaW5ub2NlbnQgcGFydHkgdm9pZCB0aGUgY29udHJhY3QgYmVmb3JlIHRoZSByb2d1ZSBzZWxscyB0aGUgZ29vZHMgb24sIHRoZSBjb250cmFjdCBjYW4gYmUgcmVzY2luZGVkLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IEFmdGVyIGEgYm9uYSBmaWRlIDNyZC1wYXJ0eSBidXlzIHRoZSBnb29kcywgb2J0YWluaW5nIGdvb2QgbGVnYWwgdGl0bGUsIGl0IGNhbm5vdC48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGhpbGxpcHMgdiBCcm9va3M8L3NwYW4+LCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MZXdpcyB2IEF2ZXJ5PC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U2hvZ2FuIEZpbmFuY2U8L3NwYW4+Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SW5ncmFtIHYgTGl0dGxlPC9zcGFuPiBkaXN0aW5ndWlzaGVkIG9uIGdyb3VuZHMgdGhhdCBpbnRlbnRpb24gbXVzdCBoYXZlIGJlZW4gdG8gZG8gYnVzaW5lc3Mgd2l0aCB0aGUgcmVhbCBIdXRjaGluc29uICZtZGFzaDsgYnV0IG92ZXJ0dXJuZWQgYnkgRGVubmluZyBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MZXdpcyB2IEF2ZXJ5PC9zcGFuPi48L3NwYW4+PC9saT48L3VsPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkF0IGEgZGlzdGFuY2U8L3NwYW4+LCB0aGUgY29udHJhY3QgaXMgZ2VuZXJhbGx5IDxzcGFuIGNsYXNzPVwiaXRcIj52b2lkIGFiIGluaXRpbzwvc3Bhbj4gaWYgdGhlIGZyYXVkIGluZHVjZWQgdGhlIGNvbnRyYWN0LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DdW5keSB2IExpbmRzYXk8L3NwYW4+LiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBJZiB0aGUgZmFsc2UgaWRlbnRpdHkgd2FzIDxzcGFuIGNsYXNzPVwiaXRcIj5pbnZlbnRlZDwvc3Bhbj4sIGhvd2V2ZXIsIHRoZSBjb250cmFjdCBpcyBtZXJlbHkgdm9pZGFibGUuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPktpbmcmIzgyMTc7cyBOb3J0b24gTWV0YWwgdiBFdHJpZGdlPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5SYXRpb25hbGUgZm9yIERpc3RpbmN0aW9uPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiBUaGUgc2hvcGtlZXBlciBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QaGlsbGlwcyB2IEJyb29rczwvc3Bhbj4gd291bGQgaGF2ZSBiZWVuIGhhcHB5IHRvIGRvIGJ1c2luZXNzIHdpdGggPHNwYW4gY2xhc3M9XCJpdFwiPmFueW9uZTwvc3Bhbj4gc28gbG9uZyBhcyB0aGV5IGNvdWxkIHBheS4gQXMgcHJlc3VtYWJseSB0aGV5IHdvdWxkIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPktpbmcmIzgyMTc7cyBOb3J0b24gTWV0YWwgdiBFdHJpZGdlPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Db21tb248L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiaXRcIj5BcyBwZXJmb3JtYW5jZSB3b3VsZCBiZSBpbXBvc3NpYmxlLCB0aGUgY29udHJhY3Qgd2lsbCBiZSA8c3BhbiBjbGFzcz1cImJkXCI+dm9pZDwvc3Bhbj4gZm9yPC9zcGFuPiAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlJlcyBleHRpbmN0YTwvc3Bhbj4sIHRoZSBzdWJqZWN0IG1hdHRlciBub3QgaW4gZmFjdCBleGlzdGluZy4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q291dHVyaWVyIHYgSGFzdGllPC9zcGFuPi48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+IFVubGVzcyB0aGUgY29udHJhY3Qgd2FzIGluZHVjZWQgYnkgb25lIHBhcnR5JiM4MjE3O3MgZ3VhcmFudGVlaW5nIHRoYXQgaXQgPHNwYW4gY2xhc3M9XCJpdFwiPmRpZDwvc3Bhbj4uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1jUmFlIHYgQ29tbW9ud2VhbHRoIERpc3Bvc2FscyBDb21taXNzaW9uPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlJlcyBzdWE8L3NwYW4+LCBhIGNvbnRyYWN0IHB1cnBvcnRpbmcgdG8gc2VsbCBzb21ldGhpbmcgdG8gaXRzIG93bmVyLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db29wZXIgdiBQaGlwcHM8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJpdFwiPkJ1dCB3aWxsIG5vdCBiZSB2b2lkIGZvcjwvc3Bhbj4gJm1kYXNoOyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5BdHRyaWJ1dGUgb2Ygc3ViamVjdDwvc3Bhbj4sIHVubGVzcyBpdCBpcyA8c3BhbiBjbGFzcz1cIml0XCI+d2hvbGx5IGZ1bmRhbWVudGFsPC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmVsbCB2IExldmVyIEJyb3RoZXJzPC9zcGFuPi48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+RS5nLiwgc2VjdXJlZG5lc3Mgb2YgYSBkZWJ0LiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Bc3NvY2lhdGVkIEphcGFuZXNlIEJhbmsgdiBDcmVkaXQgZHUgTm9yZDwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5SZWNlbnRseSByZWFzc2VydGVkIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkdyZWF0IFBlYWNlIFNoaXBwaW5nPC9zcGFuPiwgYWZ0ZXIgRGVubmluZyYjODIxNztzIGVxdWl0eSBmcm9saWNrIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNvbGxlIHYgQnV0Y2hlcjwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD48L3VsPiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEyMiIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiTWlzdGFrZSAmbWRhc2g7IE11dHVhbCBNaXN0YWtlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJGYWxjayB2IFdpbGxpYW1zIiwKICAgICAgICAiRGVubnkgdiBIYW5jb2NrIiwKICAgICAgICAiTGV3aXMgdiBBdmVyYXkiLAogICAgICAgICJDdW5keSB2IExpbmRzYXkiLAogICAgICAgICJLaW5nJ3MgTm9ydG9uIE1ldGFsIHYgRWRyaWRnZSIsCiAgICAgICAgIkdyZWF0IFBlYWNlIFNoaXBwaW5nIiwKICAgICAgICAiTWNSYWUgdiBDb21tb253ZWFsdGggRGlzcG9zYWxzIENvbW1pc3Npb24iLAogICAgICAgICJDb29wZXIgdiBQaGliYnMiLAogICAgICAgICJJbmdyYW0gdiBMaXR0bGUiLAogICAgICAgICJTb2xsZSB2IEJ1dGNoZXIiLAogICAgICAgICJTaG9ndW4gRmluYW5jZSIsCiAgICAgICAgIkFzc29jaWF0ZWQgSmFwYW5lc2UgQmFuayB2IENyZWRpdCBkdSBOb3JkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTIzIiwKICAgICJZRUFSIjogIjE4NjQiLAogICAgIk5BTUUiOiAiUmFmZmxlcyB2IFdpY2hlbGhhdXMiLAogICAgIkNJVEFUSU9OIjogIlJhZmZsZXMgdiBXaWNoZWxoYXVzICgxODY0KSAyIEggJmFtcDsgQyA5MDYiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk1pc3Rha2UiLAogICAgICAgICJNdXR1YWwgTWlzdGFrZSIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBjb250cmFjdCB3YXMgdW5kZXJtaW5lZCBieSBvbmUgcGFydHkmIzgyMTc7cyB1bmNlcnRhaW50eSBhcyB0byB3aGljaCBvZiB0aGUgdHdvIHNoaXBzIG5hbWVkIDxzcGFuIGNsYXNzPVwiaXRcIj5QZWVybGVzczwvc3Bhbj4gdGhlIGNvbnRyYWN0IHBlcnRhaW5lZC4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJNY0tlbmRyaWNrIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDSVRBVElPTiI6ICJGYWxjayB2IFdpbGxpYW1zIFsxOTAwXSBBQyAxNzYiLAogICAgIk5BTUUiOiAiRmFsY2sgdiBXaWxsaWFtcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRGVubnkgdiBIYW5jb2NrIiwKICAgICAgICAiUmFmZmxlcyB2IFdpY2hlbGhhdXMiLAogICAgICAgICJCZWxsIHYgTGV2ZXIgQnJvcyIsCiAgICAgICAgIlBoaWxsaXBzIHYgQnJvb2tzIiwKICAgICAgICAiR3JlYXQgUGVhY2UgU2hpcHBpbmciLAogICAgICAgICJNY1JhZSB2IENvbW1vbndlYWx0aCBEaXNwb3NhbHMgQ29tbWlzc2lvbiIsCiAgICAgICAgIkluZ3JhbSB2IExpdHRsZSIsCiAgICAgICAgIlNvbGxlIHYgQnV0Y2hlciIsCiAgICAgICAgIkxld2lzIHYgQXZlcmF5IiwKICAgICAgICAiS2luZydzIE5vcnRvbiBNZXRhbCB2IEVkcmlkZ2UiLAogICAgICAgICJDdW5keSB2IExpbmRzYXkiLAogICAgICAgICJDb29wZXIgdiBQaGliYnMiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk1pc3Rha2UiLAogICAgICAgICJNdXR1YWwgTWlzdGFrZSIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiV2hlbiBvbmUgcGFydHkgdGhpbmtzIGEgY29udHJhY3QgaGFzIGJlZW4gZm9ybWVkIGZvciBhIGxhcmdlIHNoaXBtZW50IG9mIDxzcGFuIGNsYXNzPVwiaXRcIj5iaXJkLXNoaXQ8L3NwYW4+LCB5ZXQgdGhlIG90aGVyIHRoaW5rcyBpdCYjODIxNztzIGZvciA8c3BhbiBjbGFzcz1cIml0XCI+c2hhbGU8L3NwYW4+ICZtZGFzaDsgeWV0IG5laXRoZXIgaXMgY2FwYWJsZSBvZiBkZW1vbnN0cmF0aW5nIHdoeSB0aGVpciB1bmRlcnN0YW5kaW5nIHdhcyB0aGUgb25seSByZWFsaXN0aWMgb25lICZtZGFzaDsgdGhlIGNvbnRyYWN0IHdpbGwgYmUgdm9pZCBmb3IgbXV0dWFsIG1pc3Rha2UuIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJNaXN0YWtlICZtZGFzaDsgTXV0dWFsIE1pc3Rha2UiLAogICAgIk5VTUJFUiI6ICIxMjQiLAogICAgIllFQVIiOiAiMTkwMCIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiRGVubnkgdiBIYW5jb2NrICgxODcwKSBMUiA2IENoIEFwcCAxIiwKICAgICJOQU1FIjogIkRlbm55IHYgSGFuY29jayIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmFmZmxlcyB2IFdpY2hlbGhhdXMiLAogICAgICAgICJGYWxjayB2IFdpbGxpYW1zIiwKICAgICAgICAiR3JlYXQgUGVhY2UgU2hpcHBpbmciLAogICAgICAgICJTaG9ndW4gRmluYW5jZSIsCiAgICAgICAgIkluZ3JhbSB2IExpdHRsZSIsCiAgICAgICAgIkNvdXR1cmllciB2IEhhc3RpZSIsCiAgICAgICAgIkJlbGwgdiBMZXZlciBCcm9zIiwKICAgICAgICAiQXNzb2NpYXRlZCBKYXBhbmVzZSBCYW5rIHYgQ3JlZGl0IGR1IE5vcmQiLAogICAgICAgICJLaW5nJ3MgTm9ydG9uIE1ldGFsIHYgRWRyaWRnZSIsCiAgICAgICAgIkNvb3BlciB2IFBoaWJicyIsCiAgICAgICAgIkxld2lzIHYgQXZlcmF5IiwKICAgICAgICAiQ3VuZHkgdiBMaW5kc2F5IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJNaXN0YWtlIiwKICAgICAgICAiTXV0dWFsIE1pc3Rha2UiLAogICAgICAgICJNaXN0YWtlIiwKICAgICAgICAiVW5pbGF0ZXJhbCIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSBzaXR1YXRpb24gd2hpY2ggYXQgZmlyc3Qgc2lnaHQgYXBwZWFycyB0byBiZSBhIG11dHVhbCBtaXN0YWtlIG1heSwgb24gY2xvc2VyIGluc3BlY3Rpb24sIHJlYWxseSBiZSBhIHVuaWxhdGVyYWwgbWlzdGFrZS4iCiAgICBdLAogICAgIkNBVEVHT1JZIjogIk1pc3Rha2UgJm1kYXNoOyBNdXR1YWwgTWlzdGFrZSAvIE1pc3Rha2UgJm1kYXNoOyBVbmlsYXRlcmFsIiwKICAgICJOVU1CRVIiOiAiMTI1IiwKICAgICJZRUFSIjogIjE4NzAiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIk1pc3Rha2UgJm1kYXNoOyBVbmlsYXRlcmFsIE1pc3Rha2UgLyBNaXN0YWtlICZtZGFzaDsgVW5pbGF0ZXJhbCBNaXN0YWtlICZtZGFzaDsgXCJNaXN0YWtlblwiIElkZW50aXR5ICZtZGFzaDsgSW50ZXIgQWJzZW50ZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlNob2d1biBGaW5hbmNlIiwKICAgICAgICAiS2luZydzIE5vcnRvbiBNZXRhbCB2IEVkcmlkZ2UiLAogICAgICAgICJMZXdpcyB2IEF2ZXJheSIsCiAgICAgICAgIkluZ3JhbSB2IExpdHRsZSIsCiAgICAgICAgIlBoaWxsaXBzIHYgQnJvb2tzIiwKICAgICAgICAiRGVubnkgdiBIYW5jb2NrIiwKICAgICAgICAiTWNSYWUgdiBDb21tb253ZWFsdGggRGlzcG9zYWxzIENvbW1pc3Npb24iLAogICAgICAgICJDb3V0dXJpZXIgdiBIYXN0aWUiLAogICAgICAgICJCZWxsIHYgTGV2ZXIgQnJvcyIsCiAgICAgICAgIkdyZWF0IFBlYWNlIFNoaXBwaW5nIiwKICAgICAgICAiU29sbGUgdiBCdXRjaGVyIiwKICAgICAgICAiRmFsY2sgdiBXaWxsaWFtcyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEyNiIsCiAgICAiWUVBUiI6ICIxODc4IiwKICAgICJOQU1FIjogIkN1bmR5IHYgTGluZHNheSIsCiAgICAiQ0lUQVRJT04iOiAiQ3VuZHkgdiBMaW5kc2F5ICgxODc4KSAzIEFwcCBDYXMgNDU5IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJNaXN0YWtlIiwKICAgICAgICAiVW5pbGF0ZXJhbCBNaXN0YWtlIiwKICAgICAgICAiTWlzdGFrZSIsCiAgICAgICAgIlVuaWxhdGVyYWwgTWlzdGFrZSIsCiAgICAgICAgIlwiTWlzdGFrZW5cIiBJZGVudGl0eSIsCiAgICAgICAgIkludGVyIEFic2VudGVzIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJXaGVuIHBhcnRpZXMgY29udHJhY3QgYXQgYSBkaXN0YW5jZSwgdGhlaXIgaWRlbnRpdGllcyB3aWxsIGJlIGNvbnN0cnVlZCBmcm9tIHRoZSBjb250cmFjdCBpdHNlbGYuIFNob3VsZCB0aGUgY29udHJhY3QgaGF2ZSBiZWVuIGluZHVjZWQgYnkgb25lIHBhcnR5IGZyYXVkdWxlbnRseSBtaXNyZXByZXNlbnRpbmcgdGhlbXNlbHZlcyB0byBiZSBzb21lb25lIGVsc2UsIHRoZSBjb250cmFjdCB3aWxsIGJlIDxzcGFuIGNsYXNzPVwiaXRcIj52b2lkPC9zcGFuPiBhYiBpbml0aW8uIChJbiBwZXJzb24sIGhvd2V2ZXIsIHRoZXJlIGlzIGEgc3Ryb25nIHByZXN1bXB0aW9uIHRoYXQgdGhlIHBhcnRpZXMgdG8gdGhlIGNvbnRyYWN0IGFyZSB0aGUgcGVvcGxlIHBoeXNpY2FsbHkgcHJlc2VudC4pIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQnJhbXdlbGwiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIktpbmcmIzgyMTc7cyBOb3J0b24gTWV0YWwgQ28gTHRkIHYgRWRyaWRnZSwgTWVycmV0dCAmYW1wOyBDbyAoMTg5NykgMTQgVExSIDk4IiwKICAgICJOQU1FIjogIktpbmcncyBOb3J0b24gTWV0YWwgdiBFZHJpZGdlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJTaG9ndW4gRmluYW5jZSIsCiAgICAgICAgIkN1bmR5IHYgTGluZHNheSIsCiAgICAgICAgIlBoaWxsaXBzIHYgQnJvb2tzIiwKICAgICAgICAiTGV3aXMgdiBBdmVyYXkiLAogICAgICAgICJJbmdyYW0gdiBMaXR0bGUiLAogICAgICAgICJHcmVhdCBQZWFjZSBTaGlwcGluZyIsCiAgICAgICAgIkZhbGNrIHYgV2lsbGlhbXMiLAogICAgICAgICJSYWZmbGVzIHYgV2ljaGVsaGF1cyIsCiAgICAgICAgIkNvdXR1cmllciB2IEhhc3RpZSIsCiAgICAgICAgIk1jUmFlIHYgQ29tbW9ud2VhbHRoIERpc3Bvc2FscyBDb21taXNzaW9uIiwKICAgICAgICAiRGVubnkgdiBIYW5jb2NrIiwKICAgICAgICAiQ29vcGVyIHYgUGhpYmJzIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJNaXN0YWtlIiwKICAgICAgICAiVW5pbGF0ZXJhbCBNaXN0YWtlIiwKICAgICAgICAiXCJNaXN0YWtlblwiIElkZW50aXR5IiwKICAgICAgICAiSW50ZXIgQWJzZW50ZXMiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgY29udHJhY3QgY29uY2x1ZGVkIGF0IGEgZGlzdGFuY2Ugd2l0aCBhIGZyYXVkc3RlciBvcGVyYXRpbmcgdW5kZXIgYSA8c3BhbiBjbGFzcz1cIml0XCI+ZmljdGl0aW91czwvc3Bhbj4gYWxpYXMsIHJhdGhlciB0aGFuIHRoZSBpZGVudGl0eSBvZiBzb21lb25lIGVsc2UsIHdpbGwgYmUgdm9pZGFibGUgZm9yIG1pc3JlcHJlc2VudGF0aW9uICZtZGFzaDsgYnV0IDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IHZvaWQgYWIgaW5pdGlvLiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiTWlzdGFrZSAmbWRhc2g7IFVuaWxhdGVyYWwgTWlzdGFrZSAmbWRhc2g7IFwiTWlzdGFrZW5cIiBJZGVudGl0eSAmbWRhc2g7IEludGVyIEFic2VudGVzIiwKICAgICJOVU1CRVIiOiAiMTI3IiwKICAgICJZRUFSIjogIjE4OTciCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNJVEFUSU9OIjogIlBoaWxsaXBzIHYgQnJvb2tzIEx0ZCBbMTkxOV0gMiBLQiAyNDMiLAogICAgIk5BTUUiOiAiUGhpbGxpcHMgdiBCcm9va3MiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkluZ3JhbSB2IExpdHRsZSIsCiAgICAgICAgIkxld2lzIHYgQXZlcmF5IiwKICAgICAgICAiU2hvZ3VuIEZpbmFuY2UiLAogICAgICAgICJDdW5keSB2IExpbmRzYXkiLAogICAgICAgICJLaW5nJ3MgTm9ydG9uIE1ldGFsIHYgRWRyaWRnZSIsCiAgICAgICAgIlJhZmZsZXMgdiBXaWNoZWxoYXVzIiwKICAgICAgICAiQXNzb2NpYXRlZCBKYXBhbmVzZSBCYW5rIHYgQ3JlZGl0IGR1IE5vcmQiLAogICAgICAgICJDb29wZXIgdiBQaGliYnMiLAogICAgICAgICJDb3V0dXJpZXIgdiBIYXN0aWUiLAogICAgICAgICJGYWxjayB2IFdpbGxpYW1zIiwKICAgICAgICAiQmVsbCB2IExldmVyIEJyb3MiLAogICAgICAgICJEZW5ueSB2IEhhbmNvY2siCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk1pc3Rha2UiLAogICAgICAgICJVbmlsYXRlcmFsIE1pc3Rha2UiLAogICAgICAgICJcIk1pc3Rha2VuXCIgSWRlbnRpdHkiLAogICAgICAgICJJbnRlciBQcmFlc2VudGVzIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBIGNvbnRyYWN0IGluIHBlcnNvbiB3aXRoIGEgZnJhdWRzdGVyLCB3aG8gaW5kdWNlcyB0aGUgY29udHJhY3QgYnkgYXNzdW1pbmcgdGhlIGlkZW50aXR5IG9mIHNvbWVvbmUgZWxzZSwgaXMgdm9pZGFibGUgZm9yIG1pc3JlcHJlc2VudGF0aW9uLCBidXQgbm90IHZvaWQgYWIgaW5pdGlvLiIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiTWlzdGFrZSAmbWRhc2g7IFVuaWxhdGVyYWwgTWlzdGFrZSAmbWRhc2g7IFwiTWlzdGFrZW5cIiBJZGVudGl0eSAmbWRhc2g7IEludGVyIFByYWVzZW50ZXMiLAogICAgIk5VTUJFUiI6ICIxMjgiLAogICAgIllFQVIiOiAiMTkxOSIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiTWlzdGFrZSAmbWRhc2g7IFVuaWxhdGVyYWwgTWlzdGFrZSAmbWRhc2g7IFwiTWlzdGFrZW5cIiBJZGVudGl0eSAmbWRhc2g7IEludGVyIFByYWVzZW50ZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkxld2lzIHYgQXZlcmF5IiwKICAgICAgICAiUGhpbGxpcHMgdiBCcm9va3MiLAogICAgICAgICJDdW5keSB2IExpbmRzYXkiLAogICAgICAgICJTaG9ndW4gRmluYW5jZSIsCiAgICAgICAgIktpbmcncyBOb3J0b24gTWV0YWwgdiBFZHJpZGdlIiwKICAgICAgICAiRGVubnkgdiBIYW5jb2NrIiwKICAgICAgICAiU29sbGUgdiBCdXRjaGVyIiwKICAgICAgICAiTWNSYWUgdiBDb21tb253ZWFsdGggRGlzcG9zYWxzIENvbW1pc3Npb24iLAogICAgICAgICJDb3V0dXJpZXIgdiBIYXN0aWUiLAogICAgICAgICJHcmVhdCBQZWFjZSBTaGlwcGluZyIsCiAgICAgICAgIkNvb3BlciB2IFBoaWJicyIsCiAgICAgICAgIkJlbGwgdiBMZXZlciBCcm9zIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTI5IiwKICAgICJZRUFSIjogIjE5NjAiLAogICAgIk5BTUUiOiAiSW5ncmFtIHYgTGl0dGxlIiwKICAgICJDSVRBVElPTiI6ICJJbmdyYW0gdiBMaXR0bGUgWzE5NjBdIDMgV0xSIDUwNCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiTWlzdGFrZSIsCiAgICAgICAgIlVuaWxhdGVyYWwgTWlzdGFrZSIsCiAgICAgICAgIlwiTWlzdGFrZW5cIiBJZGVudGl0eSIsCiAgICAgICAgIkludGVyIFByYWVzZW50ZXMiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBwcmVzdW1wdGlvbiB0aGF0IHBhcnRpZXMgY29udHJhY3RpbmcgaW4gcGVyc29uIGFyZSB0aG9zZSBwaHlzaWNhbGx5IHByZXNlbnQgY2FuIGJlIHJlYnV0dGVkLCBieSBzaG93aW5nIHRoZSB0cnVlIGludGVudGlvbiBvZiB0aGUgaW5ub2NlbnQgcGFydHkgd2FzIHRvIGNvbnRyYWN0IHdpdGggdGhlIHBlcnNvbiB3aG9zZSBpZGVudGl0eSB0aGUgZnJhdWRzdGVyIGhhZCBhc3N1bWVkLiAoTGF0ZXIgb3ZlcnR1cm5lZCBmb3Igd29udCBvZiB0cnVlIGRpc3RpbmN0aW9uIGZyb20gZWFybGllciBhdXRob3JpdHkuKSIsCiAgICAgICAgIlBlYXJjZSBMSiAmbWRhc2g7ICYjODIyMDtJdCBpcyBub3QgZWFzeSB0byBkZWNpZGUgd2hldGhlciB0aGUgdmVuZG9yIHdhcyBzZWxsaW5nIHRvIHRoZSBtYW4gaW4gaGVyIGRyYXdpbmctcm9vbSAoZnJhdWR1bGVudGx5IG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIGEgbWFuIG9mIHN1YnN0YW5jZSB3aXRoIHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSByZWFsIEh1dGNoaW5zb24pIG9yIHRvIFAuRy5NLkh1dGNoaW5zb24gb2YgU3RhbnN0ZWFkIEhvdXNlIChmcmF1ZHVsZW50bHkgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG1hbiBpbiBoZXIgZHJhd2luZy1yb29tKS4mIzgyMjE7IgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQ3JpdGljaXNlZCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiTWlzdGFrZSAmbWRhc2g7IFVuaWxhdGVyYWwgTWlzdGFrZSAmbWRhc2g7IFwiTWlzdGFrZW5cIiBJZGVudGl0eSAmbWRhc2g7IEludGVyIFByYWVzZW50ZXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlBoaWxsaXBzIHYgQnJvb2tzIiwKICAgICAgICAiSW5ncmFtIHYgTGl0dGxlIiwKICAgICAgICAiU2hvZ3VuIEZpbmFuY2UiLAogICAgICAgICJDdW5keSB2IExpbmRzYXkiLAogICAgICAgICJLaW5nJ3MgTm9ydG9uIE1ldGFsIHYgRWRyaWRnZSIsCiAgICAgICAgIkNvb3BlciB2IFBoaWJicyIsCiAgICAgICAgIkFzc29jaWF0ZWQgSmFwYW5lc2UgQmFuayB2IENyZWRpdCBkdSBOb3JkIiwKICAgICAgICAiU29sbGUgdiBCdXRjaGVyIiwKICAgICAgICAiRmFsY2sgdiBXaWxsaWFtcyIsCiAgICAgICAgIkJlbGwgdiBMZXZlciBCcm9zIiwKICAgICAgICAiR3JlYXQgUGVhY2UgU2hpcHBpbmciLAogICAgICAgICJSYWZmbGVzIHYgV2ljaGVsaGF1cyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEzMCIsCiAgICAiWUVBUiI6ICIxOTcyIiwKICAgICJOQU1FIjogIkxld2lzIHYgQXZlcmF5IiwKICAgICJDSVRBVElPTiI6ICJMZXdpcyB2IEF2ZXJheSBbMTk3Ml0gMSBRQiAxOTgiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk1pc3Rha2UiLAogICAgICAgICJVbmlsYXRlcmFsIE1pc3Rha2UiLAogICAgICAgICJcIk1pc3Rha2VuXCIgSWRlbnRpdHkiLAogICAgICAgICJJbnRlciBQcmFlc2VudGVzIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5JbmdyYW0gdiBMaXR0bGU8L3NwYW4+IHdhcyB3cm9uZ2x5IGRlY2lkZWQgJm1kYXNoOyB0aGVyZSB3ZXJlIG5vIHRydWUgZ3JvdW5kcyBmb3IgZGlzdGluZ3Vpc2hpbmcgZnJvbSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QaGlsbGlwcyB2IEJyb29rczwvc3Bhbj4sIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRGVubmluZyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiTWlzdGFrZSAmbWRhc2g7IFVuaWxhdGVyYWwgTWlzdGFrZSAmbWRhc2g7IFwiTWlzdGFrZW5cIiBJZGVudGl0eSAmbWRhc2g7IEludGVyIEFic2VudGVzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDdW5keSB2IExpbmRzYXkiLAogICAgICAgICJLaW5nJ3MgTm9ydG9uIE1ldGFsIHYgRWRyaWRnZSIsCiAgICAgICAgIkxld2lzIHYgQXZlcmF5IiwKICAgICAgICAiUGhpbGxpcHMgdiBCcm9va3MiLAogICAgICAgICJJbmdyYW0gdiBMaXR0bGUiLAogICAgICAgICJDb3V0dXJpZXIgdiBIYXN0aWUiLAogICAgICAgICJTb2xsZSB2IEJ1dGNoZXIiLAogICAgICAgICJSYWZmbGVzIHYgV2ljaGVsaGF1cyIsCiAgICAgICAgIkRlbm55IHYgSGFuY29jayIsCiAgICAgICAgIkFzc29jaWF0ZWQgSmFwYW5lc2UgQmFuayB2IENyZWRpdCBkdSBOb3JkIiwKICAgICAgICAiQmVsbCB2IExldmVyIEJyb3MiLAogICAgICAgICJGYWxjayB2IFdpbGxpYW1zIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTMxIiwKICAgICJZRUFSIjogIjIwMDMiLAogICAgIk5BTUUiOiAiU2hvZ3VuIEZpbmFuY2UiLAogICAgIkNJVEFUSU9OIjogIlNob2d1biBGaW5hbmNlIEx0ZCB2IEh1ZHNvbiBbMjAwM10gVUtITCA2MiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiTWlzdGFrZSIsCiAgICAgICAgIlVuaWxhdGVyYWwgTWlzdGFrZSIsCiAgICAgICAgIlwiTWlzdGFrZW5cIiBJZGVudGl0eSIsCiAgICAgICAgIkludGVyIEFic2VudGVzIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJCeSBtYWpvcml0eSwgdGhlIHJ1bGUgdGhhdCBjb250cmFjdHMgaW50ZXIgcHJhZXNlbnRlcyBhcmUgdm9pZGFibGUgZm9yIG1pc3Rha2Ugb2YgaWRlbnRpdHksIGJ1dCB0aG9zZSBpbnRlciBhYnNlbnRlcyBhcmUgdm9pZCBhYiBpbml0aW8sIHJlbWFpbnMgZ29vZCBsYXcuIERpc3NlbnRpbmcsIExvcmQgTmljaG9sbHMgY3JpdGljaXNlZCB0aGUgYXJiaXRyYXJ5IG5hdHVyZSBvZiB0aGUgZGlzdGluY3Rpb24uIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiTGVhZGluZyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiQ291dHVyaWVyIHYgSGFzdGllICgxODU2KSIsCiAgICAiTkFNRSI6ICJDb3V0dXJpZXIgdiBIYXN0aWUiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIk1jUmFlIHYgQ29tbW9ud2VhbHRoIERpc3Bvc2FscyBDb21taXNzaW9uIiwKICAgICAgICAiR3JlYXQgUGVhY2UgU2hpcHBpbmciLAogICAgICAgICJDb29wZXIgdiBQaGliYnMiLAogICAgICAgICJBc3NvY2lhdGVkIEphcGFuZXNlIEJhbmsgdiBDcmVkaXQgZHUgTm9yZCIsCiAgICAgICAgIlNvbGxlIHYgQnV0Y2hlciIsCiAgICAgICAgIkJlbGwgdiBMZXZlciBCcm9zIiwKICAgICAgICAiRmFsY2sgdiBXaWxsaWFtcyIsCiAgICAgICAgIkN1bmR5IHYgTGluZHNheSIsCiAgICAgICAgIkluZ3JhbSB2IExpdHRsZSIsCiAgICAgICAgIlJhZmZsZXMgdiBXaWNoZWxoYXVzIiwKICAgICAgICAiS2luZydzIE5vcnRvbiBNZXRhbCB2IEVkcmlkZ2UiLAogICAgICAgICJTaG9ndW4gRmluYW5jZSIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiTWlzdGFrZSIsCiAgICAgICAgIkNvbW1vbiBNaXN0YWtlIiwKICAgICAgICAiUmVzIEV4dGluY3RhIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJBIGNvbnRyYWN0IGZvciBzb21ldGhpbmcgd2hpY2ggZG9lc24mIzgyMTc7dCBleGlzdCBpcyA8c3BhbiBjbGFzcz1cIml0XCI+dm9pZDwvc3Bhbj4uIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJNaXN0YWtlICZtZGFzaDsgQ29tbW9uIE1pc3Rha2UgJm1kYXNoOyBSZXMgRXh0aW5jdGEiLAogICAgIk5VTUJFUiI6ICIxMzIiLAogICAgIllFQVIiOiAiMTg1NiIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0lUQVRJT04iOiAiTWNSYWUgdiBDb21tb253ZWFsdGggRGlzcG9zYWxzIENvbW1pc3Npb24gKDE5NTEpIDg0IENMUiAzNzciLAogICAgIk5BTUUiOiAiTWNSYWUgdiBDb21tb253ZWFsdGggRGlzcG9zYWxzIENvbW1pc3Npb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNvdXR1cmllciB2IEhhc3RpZSIsCiAgICAgICAgIkFzc29jaWF0ZWQgSmFwYW5lc2UgQmFuayB2IENyZWRpdCBkdSBOb3JkIiwKICAgICAgICAiR3JlYXQgUGVhY2UgU2hpcHBpbmciLAogICAgICAgICJDb29wZXIgdiBQaGliYnMiLAogICAgICAgICJCZWxsIHYgTGV2ZXIgQnJvcyIsCiAgICAgICAgIlNvbGxlIHYgQnV0Y2hlciIsCiAgICAgICAgIlJhZmZsZXMgdiBXaWNoZWxoYXVzIiwKICAgICAgICAiUGhpbGxpcHMgdiBCcm9va3MiLAogICAgICAgICJLaW5nJ3MgTm9ydG9uIE1ldGFsIHYgRWRyaWRnZSIsCiAgICAgICAgIkxld2lzIHYgQXZlcmF5IiwKICAgICAgICAiRmFsY2sgdiBXaWxsaWFtcyIsCiAgICAgICAgIlNob2d1biBGaW5hbmNlIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJNaXN0YWtlIiwKICAgICAgICAiQ29tbW9uIE1pc3Rha2UiLAogICAgICAgICJSZXMgRXh0aW5jdGEiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIklmIHRoZSBzdWJqZWN0IG1hdHRlciBvZiBhIGNvbnRyYWN0IGRvZXMgbm90IGluIGZhY3QgZXhpc3QsIHRoZW4gdGhlIGNvbnRyYWN0IGlzIGluY2FwYWJsZSBvZiBwZXJmb3JtYW5jZSBhbmQgYXMgc3VjaCwgaXMgdm9pZC4iCiAgICBdLAogICAgIkNBVEVHT1JZIjogIk1pc3Rha2UgJm1kYXNoOyBDb21tb24gTWlzdGFrZSAmbWRhc2g7IFJlcyBFeHRpbmN0YSIsCiAgICAiTlVNQkVSIjogIjEzMyIsCiAgICAiWUVBUiI6ICIxOTUxIgp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJNaXN0YWtlICZtZGFzaDsgQ29tbW9uIE1pc3Rha2UgJm1kYXNoOyBSZXMgU3VhIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNY1JhZSB2IENvbW1vbndlYWx0aCBEaXNwb3NhbHMgQ29tbWlzc2lvbiIsCiAgICAgICAgIlNvbGxlIHYgQnV0Y2hlciIsCiAgICAgICAgIkFzc29jaWF0ZWQgSmFwYW5lc2UgQmFuayB2IENyZWRpdCBkdSBOb3JkIiwKICAgICAgICAiQmVsbCB2IExldmVyIEJyb3MiLAogICAgICAgICJDb3V0dXJpZXIgdiBIYXN0aWUiLAogICAgICAgICJHcmVhdCBQZWFjZSBTaGlwcGluZyIsCiAgICAgICAgIkZhbGNrIHYgV2lsbGlhbXMiLAogICAgICAgICJQaGlsbGlwcyB2IEJyb29rcyIsCiAgICAgICAgIkRlbm55IHYgSGFuY29jayIsCiAgICAgICAgIkluZ3JhbSB2IExpdHRsZSIsCiAgICAgICAgIlNob2d1biBGaW5hbmNlIiwKICAgICAgICAiTGV3aXMgdiBBdmVyYXkiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMzQiLAogICAgIllFQVIiOiAiMTg2NyIsCiAgICAiTkFNRSI6ICJDb29wZXIgdiBQaGliYnMiLAogICAgIkNJVEFUSU9OIjogIkNvb3BlciB2IFBoaWJicyAoMTg2NykgTFIgMiBITCAxNDkiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk1pc3Rha2UiLAogICAgICAgICJDb21tb24gTWlzdGFrZSIsCiAgICAgICAgIlJlcyBTdWEiCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgY29udHJhY3QgdGhhdCBwdXJwb3J0cyB0byBzZWxsIGdvb2RzIHRvIHRoZWlyIG93bmVyIGNhbm5vdCBiZSBwZXJmb3JtZWQuIENvbnNlcXVlbnRseSwgaXQgaXMgPHNwYW4gY2xhc3M9XCJpdFwiPnZvaWQ8L3NwYW4+LiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkRlbm5pbmciCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JZIjogIk1pc3Rha2UgJm1kYXNoOyBDb21tb24gTWlzdGFrZSAmbWRhc2g7IFN1YmplY3QgTWF0dGVyIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJHcmVhdCBQZWFjZSBTaGlwcGluZyIsCiAgICAgICAgIkFzc29jaWF0ZWQgSmFwYW5lc2UgQmFuayB2IENyZWRpdCBkdSBOb3JkIiwKICAgICAgICAiU29sbGUgdiBCdXRjaGVyIiwKICAgICAgICAiTWNSYWUgdiBDb21tb253ZWFsdGggRGlzcG9zYWxzIENvbW1pc3Npb24iLAogICAgICAgICJDb3V0dXJpZXIgdiBIYXN0aWUiLAogICAgICAgICJDb29wZXIgdiBQaGliYnMiLAogICAgICAgICJGYWxjayB2IFdpbGxpYW1zIiwKICAgICAgICAiTGV3aXMgdiBBdmVyYXkiLAogICAgICAgICJSYWZmbGVzIHYgV2ljaGVsaGF1cyIsCiAgICAgICAgIktpbmcncyBOb3J0b24gTWV0YWwgdiBFZHJpZGdlIiwKICAgICAgICAiSW5ncmFtIHYgTGl0dGxlIiwKICAgICAgICAiQ3VuZHkgdiBMaW5kc2F5IgogICAgXSwKICAgICJOVU1CRVIiOiAiMTM1IiwKICAgICJZRUFSIjogIjE5MzIiLAogICAgIk5BTUUiOiAiQmVsbCB2IExldmVyIEJyb3MiLAogICAgIkNJVEFUSU9OIjogIkJlbGwgdiBMZXZlciBCcm9zIEx0ZCBbMTkzMl0gQUMgMTYxIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJNaXN0YWtlIiwKICAgICAgICAiQ29tbW9uIE1pc3Rha2UiLAogICAgICAgICJTdWJqZWN0IE1hdHRlciIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQ29tbW9uIG1pc3Rha2UgYXMgdG8gYSBxdWFsaXR5IG9mIHN1YmplY3QgbWF0dGVyIG11c3QgYmUgPHNwYW4gY2xhc3M9XCJpdFwiPmZ1bmRhbWVudGFsPC9zcGFuPiBiZWZvcmUgaXQgdm9pZHMgdGhlIGNvbnRyYWN0LiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkF0a2luIiwKICAgICAgICAiTWNLZW5kcmljayIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiTWlzdGFrZSAmbWRhc2g7IENvbW1vbiBNaXN0YWtlICZtZGFzaDsgU3ViamVjdCBNYXR0ZXIiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkdyZWF0IFBlYWNlIFNoaXBwaW5nIiwKICAgICAgICAiU29sbGUgdiBCdXRjaGVyIiwKICAgICAgICAiQmVsbCB2IExldmVyIEJyb3MiLAogICAgICAgICJNY1JhZSB2IENvbW1vbndlYWx0aCBEaXNwb3NhbHMgQ29tbWlzc2lvbiIsCiAgICAgICAgIkNvb3BlciB2IFBoaWJicyIsCiAgICAgICAgIkNvdXR1cmllciB2IEhhc3RpZSIsCiAgICAgICAgIlJhZmZsZXMgdiBXaWNoZWxoYXVzIiwKICAgICAgICAiS2luZydzIE5vcnRvbiBNZXRhbCB2IEVkcmlkZ2UiLAogICAgICAgICJEZW5ueSB2IEhhbmNvY2siLAogICAgICAgICJMZXdpcyB2IEF2ZXJheSIsCiAgICAgICAgIlNob2d1biBGaW5hbmNlIiwKICAgICAgICAiUGhpbGxpcHMgdiBCcm9va3MiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMzYiLAogICAgIllFQVIiOiAiMTk4OSIsCiAgICAiTkFNRSI6ICJBc3NvY2lhdGVkIEphcGFuZXNlIEJhbmsgdiBDcmVkaXQgZHUgTm9yZCIsCiAgICAiQ0lUQVRJT04iOiAiQXNzb2NpYXRlZCBKYXBhbmVzZSBCYW5rIChJbnRlcm5hdGlvbmFsKSBMdGQgdiBDcmVkaXQgZHUgTm9yZCBbMTk4OV0gMSBXTFIgMjU1IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJNaXN0YWtlIiwKICAgICAgICAiQ29tbW9uIE1pc3Rha2UiLAogICAgICAgICJTdWJqZWN0IE1hdHRlciIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiQ29tbW9uIG1pc3Rha2Ugb2Ygc3ViamVjdCBtYXR0ZXIsIGFzIHRvIHdoZXRoZXIgYSBkZWJ0IGlzIHNlY3VyZWQgb3IgdW5zZWN1cmVkLCBtYXkgY2F1c2UgdGhlIGNvbnRyYWN0IHRvIGJlIHZvaWRhYmxlLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIlN0ZXluIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SWSI6ICJNaXN0YWtlICZtZGFzaDsgQ29tbW9uIE1pc3Rha2UgJm1kYXNoOyBTdWJqZWN0IE1hdHRlciIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQXNzb2NpYXRlZCBKYXBhbmVzZSBCYW5rIHYgQ3JlZGl0IGR1IE5vcmQiLAogICAgICAgICJCZWxsIHYgTGV2ZXIgQnJvcyIsCiAgICAgICAgIkdyZWF0IFBlYWNlIFNoaXBwaW5nIiwKICAgICAgICAiQ291dHVyaWVyIHYgSGFzdGllIiwKICAgICAgICAiQ29vcGVyIHYgUGhpYmJzIiwKICAgICAgICAiTWNSYWUgdiBDb21tb253ZWFsdGggRGlzcG9zYWxzIENvbW1pc3Npb24iLAogICAgICAgICJQaGlsbGlwcyB2IEJyb29rcyIsCiAgICAgICAgIkN1bmR5IHYgTGluZHNheSIsCiAgICAgICAgIkluZ3JhbSB2IExpdHRsZSIsCiAgICAgICAgIlNob2d1biBGaW5hbmNlIiwKICAgICAgICAiRmFsY2sgdiBXaWxsaWFtcyIsCiAgICAgICAgIktpbmcncyBOb3J0b24gTWV0YWwgdiBFZHJpZGdlIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTM3IiwKICAgICJZRUFSIjogIjE5NTAiLAogICAgIk5BTUUiOiAiU29sbGUgdiBCdXRjaGVyIiwKICAgICJDSVRBVElPTiI6ICJTb2xsZSB2IEJ1dGNoZXIgWzE5NTBdIDEgS0IgNjcxIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJNaXN0YWtlIiwKICAgICAgICAiQ29tbW9uIE1pc3Rha2UiLAogICAgICAgICJTdWJqZWN0IE1hdHRlciIKICAgIF0sCiAgICAiSEVMRCI6IFsKICAgICAgICAiRXF1aXR5IG1heSByZWNvZ25pc2UgYSA8c3BhbiBjbGFzcz1cIml0XCI+c29tZXdoYXQgbGVzczwvc3Bhbj4gZnVuZGFtZW50YWwgbWlzdGFrZSB0aGFuIHRoZSBjb21tb24gbGF3IGFkbWl0cywgYXMgZ3JvdW5kcyBmb3Igc2V0dGluZyBhc2lkZSBhIGNvbnRyYWN0LiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkRlbm5pbmciLAogICAgICAgICJBdGtpbiIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUlkiOiAiTWlzdGFrZSAmbWRhc2g7IENvbW1vbiBNaXN0YWtlICZtZGFzaDsgU3ViamVjdCBNYXR0ZXIiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlNvbGxlIHYgQnV0Y2hlciIsCiAgICAgICAgIkFzc29jaWF0ZWQgSmFwYW5lc2UgQmFuayB2IENyZWRpdCBkdSBOb3JkIiwKICAgICAgICAiQmVsbCB2IExldmVyIEJyb3MiLAogICAgICAgICJDb29wZXIgdiBQaGliYnMiLAogICAgICAgICJDb3V0dXJpZXIgdiBIYXN0aWUiLAogICAgICAgICJNY1JhZSB2IENvbW1vbndlYWx0aCBEaXNwb3NhbHMgQ29tbWlzc2lvbiIsCiAgICAgICAgIkRlbm55IHYgSGFuY29jayIsCiAgICAgICAgIlNob2d1biBGaW5hbmNlIiwKICAgICAgICAiRmFsY2sgdiBXaWxsaWFtcyIsCiAgICAgICAgIktpbmcncyBOb3J0b24gTWV0YWwgdiBFZHJpZGdlIiwKICAgICAgICAiSW5ncmFtIHYgTGl0dGxlIiwKICAgICAgICAiQ3VuZHkgdiBMaW5kc2F5IgogICAgXSwKICAgICJZRUFSIjogIjIwMDIiLAogICAgIk5VTUJFUiI6ICIxMzgiLAogICAgIkFLQSI6ICJHcmVhdCBQZWFjZSBTaGlwcGluZyB2IFRzYXZsaXJpcyIsCiAgICAiTkFNRSI6ICJHcmVhdCBQZWFjZSBTaGlwcGluZyIsCiAgICAiQ0lUQVRJT04iOiAiR3JlYXQgUGVhY2UgU2hpcHBpbmcgTHRkIHYgVHNhdmxpcmlzIChJbnRlcm5hdGlvbmFsKSBMdGQgWzIwMDJdIEVXQ0EgQ2l2IDE0MDciLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk1pc3Rha2UiLAogICAgICAgICJDb21tb24gTWlzdGFrZSIsCiAgICAgICAgIlN1YmplY3QgTWF0dGVyIgogICAgXSwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgZGVjaXNpb24gaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U29sbGUgdiBCdXRjaGVyPC9zcGFuPiB3YXMgZnVuZGFtZW50YWxseSBpbmNvbXBhdGlibGUgd2l0aCB0aGUgcnVsZSBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CZWxsIHYgTGV2ZXIgQnJvczwvc3Bhbj4uIEl0IHdhcyB0aGVyZWZvcmUgbm90IGZvbGxvd2VkLiIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0hDIiwKICAgICJDQVRFR09SWSI6ICJDb250cmFjdHMgLyBDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogTGFuZGxvcmQgYW5kIFRlbmFudCAmbWRhc2g7IENvbnNpZGVyYXRpb24gJm1kYXNoOyBNaXN0YWtlICZtZGFzaDsgT2ZmZXIgYW5kIEFjY2VwdGFuY2UgLyBBbmltYWxzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbW1lcmNpYWwgTGF3ICZtZGFzaDsgQWR2ZXJ0aXNlbWVudHMgJm1kYXNoOyBCaXJkcyAmbWRhc2g7IENvbnNlcnZhdGlvbiAmbWRhc2g7IEZvcm1hdGlvbiBvZiBDb250cmFjdCAmbWRhc2g7IE9mZmVycyBGb3IgU2FsZSAvIENyaW1pbmFsIExhdyAmbWRhc2g7IE9mZmVuc2l2ZSBXZWFwb25zICZtZGFzaDsgU2FsZSBvZiBHb29kcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29udHJhY3RzIiwKICAgICAgICAiQ29udHJhY3RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IExhbmRsb3JkIGFuZCBUZW5hbnQiLAogICAgICAgICJDb25zaWRlcmF0aW9uIiwKICAgICAgICAiTWlzdGFrZSIsCiAgICAgICAgIk9mZmVyIGFuZCBBY2NlcHRhbmNlIiwKICAgICAgICAiQW5pbWFscyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb21tZXJjaWFsIExhdyIsCiAgICAgICAgIkFkdmVydGlzZW1lbnRzIiwKICAgICAgICAiQmlyZHMiLAogICAgICAgICJDb25zZXJ2YXRpb24iLAogICAgICAgICJGb3JtYXRpb24gb2YgQ29udHJhY3QiLAogICAgICAgICJPZmZlcnMgRm9yIFNhbGUiLAogICAgICAgICJDcmltaW5hbCBMYXciLAogICAgICAgICJPZmZlbnNpdmUgV2VhcG9ucyIsCiAgICAgICAgIlNhbGUgb2YgR29vZHMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIih3bCkgQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ28iLAogICAgICAgICIod2wpIEFzc29jaWF0ZWQgSmFwYW5lc2UgQmFuayAoSW50ZXJuYXRpb25hbCkgTHRkIHYgQ3JlZGl0IGR1IE5vcmQiLAogICAgICAgICIod2wpIEhhcnZlbGEgSW52ZXN0bWVudHMgTHRkIHYgUm95YWwgVHJ1c3Qgb2YgQ2FuYWRhIEx0ZCIsCiAgICAgICAgIih3bCkgUGFvIE9uIHYgTGF1IFlpdSBMb25nIiwKICAgICAgICAiKHdsKSBUaGUgQnJpbW5lcyIsCiAgICAgICAgIih3bCkgQ291cnRuZXkgJiBGYWlyYmFpcm4gTHRkIHYgVG9sYWluaSBCcm9zIChIb3RlbHMpIEx0ZCIsCiAgICAgICAgIih3bCkgU3VkYnJvb2sgVHJhZGluZyBFc3RhdGUgTHRkIHYgRWdnbGV0b24iLAogICAgICAgICIod2wpIEluZ3JhbSB2IExpdHRsZSIsCiAgICAgICAgIih3bCkgU2hvZ3VuIEZpbmFuY2UgTHRkIHYgSHVkc29uIiwKICAgICAgICAiKHdsKSBUZWtkYXRhIEludGVyY29ubmVjdGlvbnMgTHRkIHYgQW1waGVub2wgTHRkIiwKICAgICAgICAiKHdsKSBMIEogS29yYmV0aXMgdiBUcmFuc2dyYWluIFNoaXBwaW5nIEJWIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTM5IiwKICAgICJZRUFSIjogIjE5NjEiLAogICAgIk5BTUUiOiAiKHdsKSBGaXNoZXIgdiBCZWxsIiwKICAgICJDSVQiOiAiWzE5NjFdIDEgUUIgMzk0IiwKICAgICJDSVRBVElPTiI6ICJGaXNoZXIgdiBCZWxsIFsxOTYxXSAxIFFCIDM5NCIsCiAgICAiSlVER0UiOiAiTG9yZCBQYXJrZXIgTENKOyBBc2h3b3J0aCBKOyBFbHdlcyBKIiwKICAgICJIRUxEIjogWwogICAgICAgICJ0aGUga25pZmUgd2FzIG5vdCBvZmZlcmVkIGZvciBzYWxlIHNpbmNlLCBpbiB0aGUgYWJzZW5jZSBvZiBhbnkgZGVmaW5pdGlvbiBpbiB0aGUgUmVzdHJpY3Rpb24gb2YgT2ZmZW5zaXZlIFdlYXBvbnMgQWN0LCAxOTU5LCBleHRlbmRpbmcgdGhlIG1lYW5pbmcgb2YgdGhhdCB0ZXJtLCBpdCBtdXN0IGJlIGdpdmVuIHRoZSBtZWFuaW5nIGF0dHJpYnV0ZWQgdG8gaXQgaW4gdGhlIG9yZGluYXJ5IGxhdyBvZiBjb250cmFjdC4gKCBNYWdvciBhbmQgU3QgTWVsbG9ucyBSdXJhbCBEQyB2IE5ld3BvcnQgQ29ycCBbMTk0Ny01MV0gQy5MLlkuIDU4MTIgZm9sbG93ZWQ7IEtlYXRpbmcgdiBIb3J3b29kICgxOTI2KSAxMzUgTC5ULiAyOSBkaXN0aW5ndWlzaGVkIGFuZCBXaWxlcyB2IE1hZGRpc29uIFsxOTQzXSAxIEFsbCBFLlIuIDMxNSBkaXN0aW5ndWlzaGVkKS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0NBIiwKICAgICJDQVRFR09SWSI6ICJIZWFsdGggT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogU2FsZSBvZiBHb29kcyAmbWRhc2g7IFBoYXJtYWNpc3RzICZtZGFzaDsgUG9pc29ucyAmbWRhc2g7IFNhbGUgb2YgR29vZHMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkhlYWx0aCBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBTYWxlIG9mIEdvb2RzIiwKICAgICAgICAiUGhhcm1hY2lzdHMiLAogICAgICAgICJQb2lzb25zIiwKICAgICAgICAiU2FsZSBvZiBHb29kcyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBCcml0aXNoIENyYW5lIEhpcmUgQ29ycG9yYXRpb24gTHRkIHYgSXBzd2ljaCBQbGFudCBIaXJlIEx0ZCIsCiAgICAgICAgIih3bCkgRmlzaGVyIHYgQmVsbCIsCiAgICAgICAgIih3bCkgS2Fyc2FsZXMgKEhhcnJvdykgTHRkIHYgV2FsbGlzIiwKICAgICAgICAiKHdsKSBTaG9ndW4gRmluYW5jZSBMdGQgdiBIdWRzb24iLAogICAgICAgICIod2wpIFdpbGxpYW0gU2luZGFsbCBwbGMgdiBDYW1icmlkZ2VzaGlyZSBDb3VudHkgQ291bmNpbCIsCiAgICAgICAgIih3bCkgT3NjYXIgQ2hlc3MgTHRkIHYgV2lsbGlhbXMiLAogICAgICAgICIod2wpIENpdHkgYW5kIFdlc3RtaW5zdGVyIFByb3BlcnRpZXMgdiBNdWRkIiwKICAgICAgICAiKHdsKSBHZW9yZ2UgTWl0Y2hlbGwgKENoZXN0ZXJoYWxsKSBMdGQgdiBGaW5uZXkgTG9jayBTZWVkcyIsCiAgICAgICAgIih3bCkgUmVhcmRvbiBTbWl0aCBMaW5lIEx0ZCB2IFluZ3ZhciBIYW5zZW4tVGFuZ2VuIiwKICAgICAgICAiKHdsKSBTdWRicm9vayBUcmFkaW5nIEVzdGF0ZSBMdGQgdiBFZ2dsZXRvbiIsCiAgICAgICAgIih3bCkgQWxwZW5zdG93IHYgUmVnYWxpYW4gUHJvcGVydGllcyIsCiAgICAgICAgIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE0MCIsCiAgICAiWUVBUiI6ICIxOTUzIiwKICAgICJOQU1FIjogIih3bCkgUGhhcm1hY2V1dGljYWwgU29jaWV0eSBvZiBHcmVhdCBCcml0YWluIHYgQm9vdHMgQ2FzaCBDaGVtaXN0cyAoU291dGhlcm4pIEx0ZCIsCiAgICAiQ0lUIjogIlsxOTUzXSAxIFFCIDQwMSIsCiAgICAiQ0lUQVRJT04iOiAiUGhhcm1hY2V1dGljYWwgU29jaWV0eSBvZiBHcmVhdCBCcml0YWluIHYgQm9vdHMgQ2FzaCBDaGVtaXN0cyAoU291dGhlcm4pIEx0ZCBbMTk1M10gMSBRQiA0MDEiLAogICAgIkpVREdFIjogIlJvbWVyIExKIiwKICAgICJIRUxEIjogWwogICAgICAgICJhIHNhbGUgd2FzIG5vdCBjb21wbGV0ZWQgdW50aWwgdGhlIGN1c3RvbWVyJiM4MjE3O3Mgb2ZmZXIgdG8gYnV5IGhhZCBiZWVuIGFjY2VwdGVkIGJ5IHRoZSBkZWZlbmRhbnRzIGJ5IHRoZWlyIGFjY2VwdGFuY2Ugb2YgdGhlIHB1cmNoYXNlIHByaWNlLCB3aGljaCBhY2NlcHRhbmNlIHRvb2sgcGxhY2UgdW5kZXIgdGhlIHN1cGVydmlzaW9uIG9mIGEgcmVnaXN0ZXJlZCBwaGFybWFjaXN0IGFzIHJlcXVpcmVkIGJ5IHRoZSBQaGFybWFjeSBhbmQgUG9pc29ucyBBY3QgMTkzMyBzLjE4KDEpKGEpKGlpaSkgLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyAmbWRhc2g7IENhciBQYXJrcyAmbWRhc2g7IEV4Y2x1c2lvbiBDbGF1c2VzICZtZGFzaDsgTGlhYmlsaXRpZXMgJm1kYXNoOyBOb3RpY2UgJm1kYXNoOyBUaWNrZXRzIC8gQ29udHJhY3RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbW1lcmNpYWwgTGF3ICZtZGFzaDsgQWR2ZXJ0aXNlbWVudHMgJm1kYXNoOyBDb25kaXRpb25hbCBPZmZlcnMgJm1kYXNoOyBDb25zaWRlcmF0aW9uICZtZGFzaDsgSW5jb252ZW5pZW5jZSAmbWRhc2g7IE5vdGljZSAmbWRhc2g7IE9mZmVyIGFuZCBBY2NlcHRhbmNlICZtZGFzaDsgUGVyZm9ybWFuY2UgJm1kYXNoOyBVbmlsYXRlcmFsIENvbnRyYWN0cyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29udHJhY3RzIiwKICAgICAgICAiQ2FyIFBhcmtzIiwKICAgICAgICAiRXhjbHVzaW9uIENsYXVzZXMiLAogICAgICAgICJMaWFiaWxpdGllcyIsCiAgICAgICAgIk5vdGljZSIsCiAgICAgICAgIlRpY2tldHMiLAogICAgICAgICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29tbWVyY2lhbCBMYXciLAogICAgICAgICJBZHZlcnRpc2VtZW50cyIsCiAgICAgICAgIkNvbmRpdGlvbmFsIE9mZmVycyIsCiAgICAgICAgIkNvbnNpZGVyYXRpb24iLAogICAgICAgICJJbmNvbnZlbmllbmNlIiwKICAgICAgICAiTm90aWNlIiwKICAgICAgICAiT2ZmZXIgYW5kIEFjY2VwdGFuY2UiLAogICAgICAgICJQZXJmb3JtYW5jZSIsCiAgICAgICAgIlVuaWxhdGVyYWwgQ29udHJhY3RzIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvIiwKICAgICAgICAiKHdsKSBGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiKHdsKSBXaGl0ZSAmIENhcnRlciAoQ291bmNpbHMpIEx0ZCB2IE1jR3JlZ29yIiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQiLAogICAgICAgICIod2wpIE5pY29sZW5lIHYgU2ltbW9uZHMiLAogICAgICAgICIod2wpIEVkbW9uZHMgdiBMYXdzb24iLAogICAgICAgICIod2wpIEhhcnZlbGEgSW52ZXN0bWVudHMgTHRkIHYgUm95YWwgVHJ1c3Qgb2YgQ2FuYWRhIEx0ZCIsCiAgICAgICAgIih3bCkgSiBFdmFucyAmIFNvbiAoUG9ydHNtb3V0aCkgdiBBbmRyZWEgTWVyemFyaW8gTHRkIiwKICAgICAgICAiKHdsKSBQYW8gT24gdiBMYXUgWWl1IExvbmciLAogICAgICAgICIod2wpIEwgSiBLb3JiZXRpcyB2IFRyYW5zZ3JhaW4gU2hpcHBpbmcgQlYiLAogICAgICAgICIod2wpIENoYXBwZWxsICYgQ28gdiBOZXN0bGUgQ28gTHRkIiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQgTHRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTQxIiwKICAgICJZRUFSIjogIjE4OTMiLAogICAgIkNPVU5TRUwiOiAiRm9yIHRoZSBhcHBlbGxhbnQ6IE1yIEZpbmxheSBRQywgVCBUZXJyZWxsLiBGb3IgdGhlIHJlc3BvbmRlbnQ6IE1yIERpY2tlbnMgUUMsIFdCIEFsbGVuLiIsCiAgICAiQUJTVFJBQ1QiOiBbCiAgICAgICAgIlRoZSBhcHBlbGxhbnQgY29tcGFueSAoQikgYXBwZWFsZWQgYWdhaW5zdCBhIGRlY2lzaW9uIHRoYXQgaXQgd2FzIGxpYWJsZSBmb3IgYSBjbGFpbSBmb3IgZGFtYWdlcyBicm91Z2h0IGJ5IHRoZSByZXNwb25kZW50IChDKS4iLAogICAgICAgICJCIHdhcyB0aGUgbWFudWZhY3R1cmVyIG9mIGEgbWVkaWNhbCBwcmVwYXJhdGlvbiBjYWxsZWQgdGhlIGNhcmJvbGljIHNtb2tlIGJhbGwsIHdoaWNoIHdhcyBkZXNpZ25lZCB0byBwcmV2ZW50IHRoZSB1c2VyIGZyb20gY29udHJhY3RpbmcgZmx1LiBCIHBsYWNlZCBhbiBhZHZlcnRpc2VtZW50IGluIG5ld3NwYXBlcnMgd2hpY2ggc3RhdGVkIHRoYXQgYSByZXdhcmQgb2YgXHUwMGEzMTAwIHdvdWxkIGJlIHBhaWQgdG8gYW55b25lIHdobyBjb250cmFjdGVkIGZsdSBvciBhIGNvbGQgYWZ0ZXIgdXNpbmcgdGhlIHNtb2tlIGJhbGwgdGhyZWUgdGltZXMgcGVyIGRheSBmb3IgdHdvIHdlZWtzIGFjY29yZGluZyB0byB0aGUgZGlyZWN0aW9ucyBzdXBwbGllZCB3aXRoIGVhY2ggYmFsbC4gVGhlIGFkdmVydGlzZW1lbnQgZnVydGhlciBzdGF0ZWQgdGhhdCBCIGhhZCBkZXBvc2l0ZWQgXHUwMGEzMSwwMDAgd2l0aCBhIG5hbWVkIGJhbmsgdG8gc2hvdyB0aGUgc2luY2VyaXR5IG9mIGl0cyBvZmZlci4gQyBwdXJjaGFzZWQgYSBiYWxsIGluIHJlbGlhbmNlIG9uIEImIzgyMTc7cyBhZHZlcnQgYW5kIHVzZWQgaXQgYXMgZGlyZWN0ZWQgYnV0IGNvbnRyYWN0ZWQgZmx1IHdoaWxzdCB1c2luZyBpdC4iLAogICAgICAgICJCIGFyZ3VlZCB0aGF0IGl0cyBhZHZlcnRpc2VtZW50IGRpZCBub3QgYW1vdW50IHRvIGEgY29udHJhY3R1YWxseSBiaW5kaW5nIHByb21pc2UgYXMgaXQgd2FzIGFkZHJlc3NlZCB0byB0aGUgd29ybGQgaW4gZ2VuZXJhbCwgaXQgd2FzIHRvbyB2YWd1ZSwgYW5kIHdhcyBub3QgbGltaXRlZCBieSB0aW1lLiBCIGZ1cnRoZXIgYXJndWVkIHRoYXQgaWYgdGhlIGFkdmVydCB3YXMgYW4gb2ZmZXIsIEMgaGFkIG5vdCBjb21tdW5pY2F0ZWQgaGVyIGludGVudGlvbiB0byBhY2NlcHQgaXQuIgogICAgXSwKICAgICJOQU1FIjogIih3bCkgQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAiQ0lUIjogIlsxODkzXSAxIFFCIDI1NiIsCiAgICAiQ0lUQVRJT04iOiAiQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSBbMTg5M10gMSBRQiAyNTYiLAogICAgIkpVREdFIjogIkxpbmRsZXkgTEo7IEJvd2VuIExKOyBBTCBTbWl0aCBMSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQXBwZWFsIGRpc21pc3NlZC4iLAogICAgICAgICIoMSkgVGhlIGFkdmVydGlzZW1lbnQgc3RhdGVkIHRoYXQgXHUwMGEzMSwwMDAgd2FzIGxvZGdlZCBhdCBhIGJhbmsuIFRoZXJlZm9yZSBpdCBjb3VsZCBub3QgYmUgc2FpZCB0aGF0IHRoZSBzdGF0ZW1lbnQgdGhhdCBcdTAwYTMxMDAgd291bGQgYmUgcGFpZCB3YXMgaW50ZW5kZWQgdG8gYmUgbWVyZSBwdWZmLiBJdCB3YXMgYW4gb2ZmZXIgbWFkZSB0byBhbGwgdGhlIHdvcmxkLCBidXQgdGhlcmUgd2FzIG5vIHJlYXNvbiB3aHkgYW4gb2ZmZXIgc2hvdWxkIG5vdCBiZSBtYWRlIHRvIGFsbCB0aGUgd29ybGQgd2hpY2ggd2FzIHRvIHJpcGVuIGludG8gYSBjb250cmFjdCB3aGVuIGFueW9uZSBjYW1lIGZvcndhcmQgYW5kIHBlcmZvcm1lZCB0aGUgY29uZGl0aW9uIHJlcXVpcmVkLCBTcGVuY2VyIHYgSGFyZGluZyAoMTg2OS03MCkgTC5SLiA1IEMuUC4gNTYxIGNvbnNpZGVyZWQuICgyKSBHZW5lcmFsbHksIHdoZW4gYW4gb2ZmZXIgd2FzIG1hZGUsIGluIG9yZGVyIHRvIG1ha2UgYSBiaW5kaW5nIGNvbnRyYWN0IGl0IHdhcyBuZWNlc3Nhcnkgbm90IG9ubHkgdGhhdCBpdCB3YXMgYWNjZXB0ZWQgYnV0IHRoYXQgdGhlIGFjY2VwdGFuY2Ugd2FzIG5vdGlmaWVkLiBIb3dldmVyLCB0aGUgaW5zdGFudCBjYXNlIHdhcyBhbiBleGNlcHRpb24gdG8gdGhhdCBydWxlOyB0aGUgbm90aWZpY2F0aW9uIG9mIGFjY2VwdGFuY2UgZGlkIG5vdCBoYXZlIHRvIHByZWNlZGUgdGhlIHBlcmZvcm1hbmNlLiBUaGUgcGVyc29uIHdobyBtYWRlIHRoZSBvZmZlciBjb3VsZCBkaXNwZW5zZSB3aXRoIG5vdGljZSBpZiBoZSB0aG91Z2h0IGl0IGRlc2lyYWJsZSB0byBkbyBzby4gQiBoYWQgc2hvd24gYnkgaXRzIGxhbmd1YWdlIGFuZCBmcm9tIHRoZSBuYXR1cmUgb2YgdGhlIHRyYW5zYWN0aW9uIHRoYXQgaXQgZGlkIG5vdCBleHBlY3QgYW5kIGRpZCBub3QgcmVxdWlyZSBub3RpY2Ugb2YgYWNjZXB0YW5jZSwgYXBhcnQgZnJvbSBub3RpY2Ugb2YgdGhlIHBlcmZvcm1hbmNlLiBBbnlvbmUgd2hvIHBlcmZvcm1lZCB0aGUgY29uZGl0aW9ucyBzZXQgb3V0IGluIHRoZSBhZHZlcnRpc2VtZW50IGhhZCBhY2NlcHRlZCB0aGUgb2ZmZXIsIFdpbGxpYW1zIHYgQ2Fyd2FyZGluZSAxMTAgRS5SLiA1OTAgYW5kIEJyb2dkZW4gdiBNZXRyb3BvbGl0YW4gUmFpbHdheSBDbyAoMTg3NykgMiBBcHAuIENhcy4gNjY2IGFwcGxpZWQuIFRoZSBhZHZlcnRpc2VtZW50IHRoZXJlZm9yZSBjb250YWluZWQgYWxsIG9mIHRoZSBuZWNlc3NhcnkgZWxlbWVudHMgdG8gZm9ybSBhIGJpbmRpbmcgY29udHJhY3QgZW5mb3JjZWFibGUgaW4gbGF3LCBzYXZlIGZvciB0d28gcG90ZW50aWFsIHByb2JsZW1zOiBmaXJzdGx5LCBpdCB3YXMgbm90IGxpbWl0ZWQgYnkgdGltZSwgYW5kIHNlY29uZGx5IHRoZSBxdWVzdGlvbiBvZiBjb25zaWRlcmF0aW9uLiAoMykgQSByZWFzb25hYmxlIHBlcnNvbiB3b3VsZCBub3QgdW5kZXJzdGFuZCBCJiM4MjE3O3MgYWR2ZXJ0aXNlbWVudCB0byBtZWFuIHRoYXQgaWYgYSBwZXJzb24gdXNlZCBhIHNtb2tlIGJhbGwgdGhyZWUgdGltZXMgZGFpbHkgZm9yIHR3byB3ZWVrcyB0aGV5IHdlcmUgZ3VhcmFudGVlZCBhZ2FpbnN0IGNvbnRyYWN0aW5nIGZsdSBmb3IgdGhlIHJlc3Qgb2YgdGhlaXIgbGlmZS4gVGhlcmUgd2VyZSBhIG51bWJlciBvZiByZWFzb25hYmxlIGNvbnN0cnVjdGlvbnMgdG8gYmUgcHV0IG9uIHRoZSBhZHZlcnRpc2VtZW50IGJ1dCB0aGUgcHJlZmVycmVkIGNvbnN0cnVjdGlvbiB3YXMgdGhhdCB0aGUgcmV3YXJkIHdhcyBvZmZlcmVkIHRvIGFueSBwZXJzb24gd2hvIGNvbnRyYWN0ZWQgZmx1IGluIHRoZSBjdXJyZW50IGVwaWRlbWljIHdpdGhpbiBhIHJlYXNvbmFibGUgdGltZSBhZnRlciBoYXZpbmcgdXNlZCB0aGUgc21va2UgYmFsbCwgb3Igd2hpbHN0IHVzaW5nIHRoZSBiYWxsLiAoNCkgQSB1c2UgYnkgdGhlIHB1YmxpYyBvZiB0aGUgc21va2UgYmFsbCBhcyBhIHJlc3VsdCBvZiB0aGUgYWR2ZXJ0aXNlbWVudCB3YXMgZGlyZWN0bHkgYmVuZWZpY2lhbCB0byBCLiBUaGVyZWZvcmUsIEIgcmVjZWl2ZWQgYW4gYWR2YW50YWdlIHdoaWNoIHdhcyBlbm91Z2ggdG8gY29uc3RpdHV0ZSBhIGNvbnNpZGVyYXRpb24uIEluIGFkZGl0aW9uLCBpbmNvbnZlbmllbmNlIHN1c3RhaW5lZCBieSBvbmUgcGFydHkgYXQgdGhlIHJlcXVlc3Qgb2YgdGhlIG90aGVyIHdhcyBlbm91Z2ggdG8gY3JlYXRlIGEgY29uc2lkZXJhdGlvbiwgR2VyaGFyZCB2IEJhdGVzIDExOCBFLlIuIDg0NSBjb25zaWRlcmVkLiBUaGUgcGVyc29uIHdobyBhY3RlZCB1cG9uIHRoZSBhZHZlcnRpc2VtZW50IHB1dCBoaW1zZWxmIHRvIHNvbWUgaW5jb252ZW5pZW5jZSBhdCBCJiM4MjE3O3MgcmVxdWVzdC4gVGhhdCB3YXMgYW1wbGUgY29uc2lkZXJhdGlvbiBmb3IgQiYjODIxNztzIHByb21pc2UuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiUmVhbCBQcm9wZXJ0eSBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMgJm1kYXNoOyBDb250cmFjdCBGb3IgU2FsZSBvZiBMYW5kICZtZGFzaDsgU3BlY2lmaWMgUGVyZm9ybWFuY2UgLyBDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogRGFtYWdlcyAmbWRhc2g7IEFnZW5jeSAmbWRhc2g7IEF1Y3Rpb25zICZtZGFzaDsgQ29sbGF0ZXJhbCBDb250cmFjdHMgJm1kYXNoOyBPZmZlciBhbmQgQWNjZXB0YW5jZSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiUmVhbCBQcm9wZXJ0eSBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMiLAogICAgICAgICJDb250cmFjdCBGb3IgU2FsZSBvZiBMYW5kIiwKICAgICAgICAiU3BlY2lmaWMgUGVyZm9ybWFuY2UiLAogICAgICAgICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogRGFtYWdlcyIsCiAgICAgICAgIkFnZW5jeSIsCiAgICAgICAgIkF1Y3Rpb25zIiwKICAgICAgICAiQ29sbGF0ZXJhbCBDb250cmFjdHMiLAogICAgICAgICJPZmZlciBhbmQgQWNjZXB0YW5jZSIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBEYXVsaWEgTHRkIHYgRm91ciBNaWxsYmFuayBOb21pbmVlcyBMdGQiLAogICAgICAgICIod2wpIEFscGVuc3RvdyB2IFJlZ2FsaWFuIFByb3BlcnRpZXMiLAogICAgICAgICIod2wpIEhvbHdlbGwgU2VjdXJpdGllcyBMdGQgdiBIdWdoZXMiLAogICAgICAgICIod2wpIEwgSiBLb3JiZXRpcyB2IFRyYW5zZ3JhaW4gU2hpcHBpbmcgQlYiLAogICAgICAgICIod2wpIEdyYW4gR2VsYXRvIEx0ZCB2IFJpY2hjbGlmZiAoR3JvdXApIEx0ZCIsCiAgICAgICAgIih3bCkgVGVrZGF0YSBJbnRlcmNvbm5lY3Rpb25zIEx0ZCB2IEFtcGhlbm9sIEx0ZCIsCiAgICAgICAgIih3bCkgVGhlIEJyaW1uZXMiLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvIiwKICAgICAgICAiKHdsKSBGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiKHdsKSBIYXJ2ZWxhIEludmVzdG1lbnRzIEx0ZCB2IFJveWFsIFRydXN0IG9mIENhbmFkYSBMdGQiLAogICAgICAgICIod2wpIElubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biBMdGQiLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNDIiLAogICAgIllFQVIiOiAiMjAwMCIsCiAgICAiQ09VTlNFTCI6ICJGb3IgSDogVmluY2VudCBNb3Jhbi4gRm9yIEI6IEFkcmlhbiBJbGVzLiIsCiAgICAiTkFNRSI6ICIod2wpIEJhcnJ5IHYgRGF2aWVzIiwKICAgICJDSVQiOiAiWzIwMDBdIDEgV0xSIDE5NjIiLAogICAgIkNJVEFUSU9OIjogIkJhcnJ5IHYgRGF2aWVzIFsyMDAwXSAxIFdMUiAxOTYyIiwKICAgICJKVURHRSI6ICJQaWxsIExKOyBTaXIgTXVycmF5IFN0dWFydC1TbWl0aCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiZGlzbWlzc2luZyB0aGUgYXBwZWFsLCB0aGF0ICgxKSB0aGUgaGlnaGVzdCBiaWRkZXIgYXQgYW4gYXVjdGlvbiB3aXRob3V0IHJlc2VydmUgY291bGQgbm90IGJlIHJlamVjdGVkIHNpbXBseSBiZWNhdXNlIHRoZSBiaWQgd2FzIHRvbyBsb3csIFdhcmxvdyB2IEhhcnJpc29uIDEyMCBFLlIuIDkyMCBmb2xsb3dlZC4gVGhlIGF1Y3Rpb25lZXIgd2FzIG9ibGlnZWQsIGJ5IHZpcnR1ZSBvZiBhIGNvbGxhdGVyYWwgd2FycmFudHksIHRvIHNlbGwgdG8gdGhlIGhpZ2hlc3QgYmlkZGVyIGFuZCBhIGZhaWx1cmUgdG8gZG8gc28gYW1vdW50ZWQgdG8gYSBicmVhY2g7ICgyKSB0aGUgZGV0cmltZW50IHRvIHRoZSBiaWRkZXIgYXJpc2luZyBmcm9tIHRoZSBmYWN0IHRoYXQgaGlzIGJpZCBjb3VsZCBiZSBhY2NlcHRlZCB1bmxlc3Mgd2l0aGRyYXduIGFuZCB0aGUgYmVuZWZpdCB0byB0aGUgYXVjdGlvbmVlciBhcmlzaW5nIGZyb20gdGhlIGZhY3QgdGhhdCB0aGUgc2FsZSBwcmljZSB3YXMgZHJpdmVuIHVwIGJ5IHRoZSBiaWQsIHdhcyBhZGVxdWF0ZSBjb25zaWRlcmF0aW9uLCBhbmQgKDMpIGFsdGhvdWdoIHRoZSBjb250cmFjdCBvZiBzYWxlIGV4aXN0ZWQgYmV0d2VlbiB2ZW5kb3IgYW5kIHB1cmNoYXNlciwgYSBjb2xsYXRlcmFsIGFncmVlbWVudCBleGlzdGVkIGJldHdlZW4gSCBhbmQgQi4gV2hlcmUgdGhlIHNlbGxlciByZWZ1c2VkIHRvIGNvbnRpbnVlIHdpdGggdGhlIHNhbGUsIHRoZSBtZWFzdXJlIG9mIGRhbWFnZXMgd2FzIHRvIGJlIGRldGVybWluZWQgd2l0aCByZWZlcmVuY2UgdG8gdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgY29udHJhY3QgcHJpY2UgYW5kIHRoZSBjdXJyZW50IG1hcmtldCB2YWx1ZSBvZiB0aGUgZ29vZHMgYnkgdmlydHVlIG9mIHRoZSBTYWxlIG9mIEdvb2RzIEFjdCAxOTc5IHMuNTEoMykuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiT3ZlcnJ1bGVkIiwKICAgICAgICAiRGVubmluZyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0NBIiwKICAgICJDQVRFR09SWSI6ICJDb250cmFjdHMgJm1kYXNoOyBJbXBsaWVkIFRlcm1zICZtZGFzaDsgVGVuZGVycyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29udHJhY3RzIiwKICAgICAgICAiSW1wbGllZCBUZXJtcyIsCiAgICAgICAgIlRlbmRlcnMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgU3VkYnJvb2sgVHJhZGluZyBFc3RhdGUgTHRkIHYgRWdnbGV0b24iLAogICAgICAgICIod2wpIFNjYWxseSB2IFNvdXRoZXJuIEhlYWx0aCBhbmQgU29jaWFsIFNlcnZpY2VzIEJvYXJkIiwKICAgICAgICAiKHdsKSBPY2VhbiBUcmFtcCBUYW5rZXJzIENvcnBvcmF0aW9uIHYgViIsCiAgICAgICAgIih3bCkgQ3Jvc3NsZXkgdiBGYWl0aGZ1bCAmIEdvdWxkIEhvbGRpbmdzIiwKICAgICAgICAiKHdsKSBOaWNvbGVuZSB2IFNpbW1vbmRzIiwKICAgICAgICAiKHdsKSBFZG1vbmRzIHYgTGF3c29uIiwKICAgICAgICAiKHdsKSBFc3NvIFBldHJvbGV1bSBDbyBMdGQgdiBNYXJkb24iLAogICAgICAgICIod2wpIFdoaXRlICYgQ2FydGVyIChDb3VuY2lscykgTHRkIHYgTWNHcmVnb3IiLAogICAgICAgICIod2wpIFBhcmtlciB2IENsYXJrIiwKICAgICAgICAiKHdsKSBCcml0aXNoIENyYW5lIEhpcmUgQ29ycG9yYXRpb24gTHRkIHYgSXBzd2ljaCBQbGFudCBIaXJlIEx0ZCIsCiAgICAgICAgIih3bCkgQXR0b3JuZXkgR2VuZXJhbCBvZiBCZWxpemUgdiBCZWxpemUgVGVsZWNvbSBMdGQiLAogICAgICAgICIod2wpIFJlIFNlbGVjdG1vdmUgTHRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTQzIiwKICAgICJZRUFSIjogIjE5OTAiLAogICAgIk5BTUUiOiAiKHdsKSBCbGFja3Bvb2wgYW5kIEZ5bGRlIEFlcm9jbHViIEx0ZCB2IEJsYWNrcG9vbCBCb3JvdWdoIENvdW5jaWwiLAogICAgIkNJVCI6ICJbMTk5MF0gMSBXTFIgMTE5NSIsCiAgICAiQ0lUQVRJT04iOiAiQmxhY2twb29sIGFuZCBGeWxkZSBBZXJvY2x1YiBMdGQgdiBCbGFja3Bvb2wgQm9yb3VnaCBDb3VuY2lsIFsxOTkwXSAxIFdMUiAxMTk1IiwKICAgICJKVURHRSI6ICJTdG9ja2VyIExKOyBCaW5naGFtIExKOyBGYXJxdWhhcnNvbiBMSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQXBwZWFsIGRpc21pc3NlZC4gVGhlIGludml0YXRpb24gdG8gdGVuZGVyIHByZXNjcmliZWQgdGhlIHByb2NlZHVyZSBmb3IgdGhlIHN1Ym1pc3Npb24gb2YgdGVuZGVycy4gQkZBQyBjb21wbGllZCB3aXRoIHRob3NlIHRlcm1zLiBUaGUgaW52aXRhdGlvbiBwcm92aWRlZCBpbXBsaWVkbHkgdGhhdCBpZiBCRkFDIGNvbmZvcm1lZCB0byBpdHMgdGVybXMgdGhleSB3ZXJlIGVudGl0bGVkIHRvIGhhdmUgdGhlaXIgdGVuZGVyIGNvbnNpZGVyZWQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiLAogICAgICAgICJCaW5naGFtIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIlVLSEwiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyAmbWRhc2g7IE9mZmVyIGFuZCBBY2NlcHRhbmNlICZtZGFzaDsgU2hhcmUgU2FsZXMgJm1kYXNoOyBUZW5kZXIgT2ZmZXJzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJPZmZlciBhbmQgQWNjZXB0YW5jZSIsCiAgICAgICAgIlNoYXJlIFNhbGVzIiwKICAgICAgICAiVGVuZGVyIE9mZmVycyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiKHdsKSBMIEogS29yYmV0aXMgdiBUcmFuc2dyYWluIFNoaXBwaW5nIEJWIiwKICAgICAgICAiKHdsKSBDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDb21wYW55IiwKICAgICAgICAiKHdsKSBUZWtkYXRhIEludGVyY29ubmVjdGlvbnMgTHRkIHYgQW1waGVub2wgTHRkIiwKICAgICAgICAiKHdsKSBKIEV2YW5zICYgU29uIChQb3J0c21vdXRoKSB2IEFuZHJlYSBNZXJ6YXJpbyBMdGQiLAogICAgICAgICIod2wpIE9jZWFuIFRyYW1wIFRhbmtlcnMgQ29ycG9yYXRpb24gdiBWIiwKICAgICAgICAiKHdsKSBCcml0aXNoIFN0ZWVsIENvcnBvcmF0aW9uIHYgQ2xldmVsYW5kIEJyaWRnZSBhbmQgRW5naW5lZXJpbmcgQ28gTHRkIiwKICAgICAgICAiKHdsKSBOaWNvbGVuZSB2IFNpbW1vbmRzIiwKICAgICAgICAiKHdsKSBFc3NvIFBldHJvbGV1bSBDbyBMdGQgdiBNYXJkb24iLAogICAgICAgICIod2wpIEJhcnJ5IHYgRGF2aWVzIiwKICAgICAgICAiKHdsKSBHcmVhdCBQZWFjZSBTaGlwcGluZyBMdGQgdiBUc2F2bGlyaXMgKEludGVybmF0aW9uYWwpIEx0ZCIsCiAgICAgICAgIih3bCkgQXNzb2NpYXRlZCBKYXBhbmVzZSBCYW5rIChJbnRlcm5hdGlvbmFsKSBMdGQgdiBDcmVkaXQgZHUgTm9yZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE0NCIsCiAgICAiWUVBUiI6ICIxOTg2IiwKICAgICJOQU1FIjogIih3bCkgSGFydmVsYSBJbnZlc3RtZW50cyBMdGQgdiBSb3lhbCBUcnVzdCBvZiBDYW5hZGEgTHRkIiwKICAgICJDSVQiOiAiWzE5ODZdIEFDIDIwNyIsCiAgICAiQ0lUQVRJT04iOiAiSGFydmVsYSBJbnZlc3RtZW50cyBMdGQgdiBSb3lhbCBUcnVzdCBvZiBDYW5hZGEgTHRkIFsxOTg2XSBBQyAyMDciLAogICAgIkpVREdFIjogIkxvcmQgRnJhc2VyIG9mIFR1bGx5YmVsdG9uOyBMb3JkIERpcGxvY2s7IExvcmQgRWRtdW5kLURhdmllczsgTG9yZCBCcmlkZ2Ugb2YgSGFyd2ljaDsgTG9yZCBUZW1wbGVtYW4iLAogICAgIkhFTEQiOiBbCiAgICAgICAgInRoYXQgd2hldGhlciBEMSBoYWQgaW52aXRlZCBQIGFuZCBEMiB0byB0YWtlIHBhcnQgaW4gYSBmaXhlZCBiaWQgb3IgYW4gYXVjdGlvbiBzYWxlICh3aGVyZSB0aGUgcHJpY2UgY291bGQgYmUgYWRqdXN0ZWQgYnkgcmVmZXJlbmNlIHRvIHRoZSBvdGhlciBiaWQpIGRlcGVuZGVkIHVwb24gdGhlaXIgcHJlc3VtZWQgaW50ZW50aW9uLCB3aGljaCB3YXMgZGVkdWNlZCBmcm9tIHRoZSB0ZXJtcyBvZiB0aGUgaW52aXRhdGlvbiByZWFkIGFzIGEgd2hvbGUuIFRoZWlyIHVuZGVydGFraW5nIHRvIGFjY2VwdCB0aGUgaGlnaGVzdCBvZmZlciwgdGhlIGZhY3QgdGhhdCB0aGUgc2FtZSBpbnZpdGF0aW9uIGhhZCBiZWVuIGdpdmVuIHRvIGJvdGgsIGFuZCB0aGVpciBpbnNpc3RlbmNlIG9uIGNvbmZpZGVudGlhbGl0eSBzaG93ZWQgdGhhdCB0aGV5IHdpc2hlZCB0byBvYnRhaW4gdGhlIGJlc3QgcHJpY2Ugb24gYSBmaXhlZCBiaWRkaW5nIHNjYWxlLiBUaGUgdXNlIG9mIHRoZSB3b3JkICYjODIyMDtvZmZlciYjODIyMTsgZGlkIG5vdCBkaXNwbGFjZSB0aGF0IHByZXN1bWVkIGludGVudGlvbi4gRDIgaGFkIG5vdCBiZWVuIGVudGl0bGVkIHRvIHN1Ym1pdCBvciBEMSB0byBhY2NlcHQgYSByZWZlcmVudGlhbCBiaWQgKCBTb3V0aCBIZXR0b24gQ29hbCBDbyB2IEhhc3dlbGwgU2hvdHRvbiBhbmQgRWFzaW5ndG9uIENvYWwgYW5kIENva2UgQ28gWzE4OThdIDEgQ2guIDQ2NSBhcHByb3ZlZDsgU1NJIEludmVzdG9ycyBMdGQgdiBLb3JlYSBUdW5nc3RlbiBNaW5pbmcgQ28gTHRkIDQ0OSBOLlkuUy4yZCAxNzMgYXBwbGllZCkuIEFsdGhvdWdoIEQxJiM4MjE3O3MgY29uZHVjdCBpbiBkZWNsaW5pbmcgdG8gY29tcGxldGUgd2l0aCBQIHdhcyBub3QgYmxhbWV3b3J0aHksIHNpbmNlIHRoZXkgdGhvdWdodCBtaXN0YWtlbmx5IHRoYXQgdGhleSB3ZXJlIHVuZGVyIGFuIG9ibGlnYXRpb24gdG8gYWNjZXB0IEQyJiM4MjE3O3MgcmVmZXJlbnRpYWwgYmlkLCB0aGUgZmFpbHVyZSB0byBjb21wbGV0ZSBoYWQgYmVlbiBkdWUgdG8gZGVsYXkgb24gdGhlaXIgcGFydCB3aXRoaW4gdGhlIG1lYW5pbmcgb2YgdGhlIGludml0YXRpb24gYW5kIHNvIHRoZXkgd2VyZSBub3QgZW50aXRsZWQgdG8gaW50ZXJlc3QgYXQgdGhlIGNvbnRyYWN0dWFsIHBlbmFsIHJhdGUgaW1wb3NlZCBieSB0aGUgaW52aXRhdGlvbi4gSG93ZXZlciBQIHNob3VsZCBub3QsIGluIGFsbCB0aGUgY2lyY3Vtc3RhbmNlcywgaGF2ZSB0aGUgYmVuZWZpdCBvZiB0aGUgaW50ZXJlc3QgYXR0cmlidXRhYmxlIHRvIHRoZSBwdXJjaGFzZSBtb25leSBhcyB3ZWxsIGFzIHRoZSBwcm9maXRzIGF0dHJpYnV0YWJsZSB0byB0aGUgc2hhcmVzIHNpbmNlIE9jdG9iZXIgMTUsIDE5ODEsIGFuZCBhY2NvcmRpbmdseSwgYXMgYSBjb25kaXRpb24gb2YgYmVpbmcgZ3JhbnRlZCBzcGVjaWZpYyBwZXJmb3JtYW5jZSwgdGhleSBzaG91bGQgYmUgcmVxdWlyZWQgdG8gcGF5IGludGVyZXN0IHRvIEQxIG9uIHRoZSBwdXJjaGFzZSBwcmljZSBvZiBHQlAgMiwxNzUsMDAwIGZyb20gdGhhdCBkYXRlIHVudGlsIGFjdHVhbCBwYXltZW50IGF0IHRoZSBzaG9ydCB0ZXJtIGludGVyZXN0IHJhdGUuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiTmVnbGlnZW5jZSAmbWRhc2g7IENvbXBlbnNhdG9yeSBEYW1hZ2VzICZtZGFzaDsgVGhlZnQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk5lZ2xpZ2VuY2UiLAogICAgICAgICJDb21wZW5zYXRvcnkgRGFtYWdlcyIsCiAgICAgICAgIlRoZWZ0IgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIEhlZGxleSBCeXJuZSAmIENvIEx0ZCB2IEhlbGxlciAmIFBhcnRuZXJzIiwKICAgICAgICAiKHdsKSBPbGxleSB2IE1hcmxib3JvdWdoIENvdXJ0IEhvdGVsIiwKICAgICAgICAiKHdsKSBSb3lzY290IFRydXN0IHYgUm9nZXJzb24iLAogICAgICAgICIod2wpIEVzc28gUGV0cm9sZXVtIENvIEx0ZCB2IE1hcmRvbiIsCiAgICAgICAgIih3bCkgQ2FwYXJvIEluZHVzdHJpZXMgcGxjIHYgRGlja21hbiIsCiAgICAgICAgIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIsCiAgICAgICAgIih3bCkgTWNDdWxsb3VnaCB2IExhbmUgRm94IGFuZCBQYXJ0bmVycyBMdGQiLAogICAgICAgICIod2wpIEhlbmRlcnNvbiB2IE1lcnJldHQgU3luZGljYXRlcyIsCiAgICAgICAgIih3bCkgRWxpYXNvbiB2IEhlbnNoYXciLAogICAgICAgICIod2wpIE92ZXJicm9va2UgRXN0YXRlcyBMdGQgdiBHbGVuY29tYmUgUHJvcGVydGllcyBMdGQiLAogICAgICAgICIod2wpIFRpbm4gdiBIb2ZmbWFuICYgQ28iLAogICAgICAgICIod2wpIEJhcnJ5IHYgRGF2aWVzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTQ1IiwKICAgICJZRUFSIjogIjE5NjgiLAogICAgIk5BTUUiOiAiKHdsKSBCUlMgdiBBcnRodXIgQ3J1dGNobGV5IEx0ZCIsCiAgICAiQ0lUIjogIlsxOTY4XSAxIEFsbCBFUiA4MTEiLAogICAgIkNJVEFUSU9OIjogIkJSUyB2IEFydGh1ciBDcnV0Y2hsZXkgTHRkIFsxOTY4XSAxIEFsbCBFUiA4MTEiLAogICAgIkpVREdFIjogIkxvcmQgUGVhcnNvbjsgRGFuY2t3ZXJ0cyBMSjsgU2FjaHMgTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIigxKSB0aGF0IHRoZSBkZWZlbmRhbnQmIzgyMTc7cyBzeXN0ZW0gb2YgcHJvdGVjdGlvbiB3YXMgbm90IGFkZXF1YXRlIGluIHRoZSBjaXJjdW1zdGFuY2VzIGFuZCB0aGUgZGVmZW5kYW50cyBoYWQgZmFpbGVkIHRvIHByb3ZlIHRoYXQgdGhlIGxvc3Mgd2FzIG5vdCBkdWUgdG8gdGhlaXIgbmVnbGlnZW5jZTsgKDIpIHRoYXQgdGhlIGRlZmVuZGFudHMsIHRoZXJlZm9yZSwgd2VyZSBsaWFibGUgaW4gZGFtYWdlcyB0byB0aGUgcGxhaW50aWZmczsgKDMpIHRoYXQgdGhlIGRlZmVuZGFudCYjODIxNztzIGxpYWJpbGl0eSB3YXMgbGltaXRlZCB0byBHQlAgODAwIHBlciB0b24sIHRoZSBkZWZlbmRhbnRzJiM4MjE3OyBjb25kaXRpb25zIG9mIGNhcnJpYWdlIGJlaW5nIGluY29ycG9yYXRlZCBpbiB0aGUgY29udHJhY3Q7IGFuZCAoNCkgdGhhdCB0aGUganVkZ2UmIzgyMTc7cyBmaW5kaW5nIHRoYXQgdGhlIHRoaXJkIHBhcnRpZXMgaGFkIGJlZW4gbmVnbGlnZW50LCBidXQgdGhhdCB0aGlzIG5lZ2xpZ2VuY2UgaGFkIG5vdCBjYXVzZWQgbG9zcywgd291bGQgbm90IGJlIGRpc3R1cmJlZC4gUGVyIGN1cmlhbTogYXBhcnQgZnJvbSB0aGVpciBvcmlnaW5hbCBsaWFiaWxpdHkgdW5kZXIgKDEpIGFib3ZlLCB0aGUgZGVmZW5kYW50cyB3ZXJlIGxpYWJsZSBmb3IgYW55IG5lZ2xpZ2VuY2Ugb2YgdGhlIHRoaXJkIHBhcnRpZXMuIChEZWNpc2lvbiBvZiBDYWlybnMgSi4gWzE5NjddIEMuTC5ZLiAyNjk1IHJldmVyc2VkOyBkaWN0dW0gb2YgRmVudG9uIEF0a2luc29uLCBRLkMuIGluIEFkYW1zIChEdXJoYW0pIEx0ZCB2IFRydXN0IEhvdXNlcyBMdGQgWzE5NjBdIDEgTGxveWQmIzgyMTc7cyBSZXAuIDM4MCBhcHBsaWVkKS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0NBIiwKICAgICJDQVRFR09SWSI6ICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29uc3RydWN0aW9uIExhdyAmbWRhc2g7IENvbnRyYWN0IFRlcm1zICZtZGFzaDsgT2ZmZXIgYW5kIEFjY2VwdGFuY2UgLyBTYWxlIG9mIEdvb2RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbnRyYWN0cyAmbWRhc2g7IENvbmR1Y3QgJm1kYXNoOyBGb3JtYXRpb24gb2YgQ29udHJhY3QgJm1kYXNoOyBPZmZlciBhbmQgQWNjZXB0YW5jZSAmbWRhc2g7IFN0YW5kYXJkIFRlcm1zIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29uc3RydWN0aW9uIExhdyIsCiAgICAgICAgIkNvbnRyYWN0IFRlcm1zIiwKICAgICAgICAiT2ZmZXIgYW5kIEFjY2VwdGFuY2UiLAogICAgICAgICJTYWxlIG9mIEdvb2RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbnRyYWN0cyIsCiAgICAgICAgIkNvbmR1Y3QiLAogICAgICAgICJGb3JtYXRpb24gb2YgQ29udHJhY3QiLAogICAgICAgICJPZmZlciBhbmQgQWNjZXB0YW5jZSIsCiAgICAgICAgIlN0YW5kYXJkIFRlcm1zIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIFRoZSBCcmltbmVzIiwKICAgICAgICAiKHdsKSBDaGFydGJyb29rIEx0ZCB2IFBlcnNpbW1vbiBIb21lcyBMdGQiLAogICAgICAgICIod2wpIEZpc2hlciB2IEJlbGwiLAogICAgICAgICIod2wpIEFzc29jaWF0ZWQgSmFwYW5lc2UgQmFuayAoSW50ZXJuYXRpb25hbCkgTHRkIHYgQ3JlZGl0IGR1IE5vcmQiLAogICAgICAgICIod2wpIFBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCIsCiAgICAgICAgIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIsCiAgICAgICAgIih3bCkgUmVhcmRvbiBTbWl0aCBMaW5lIEx0ZCB2IFluZ3ZhciBIYW5zZW4tVGFuZ2VuIiwKICAgICAgICAiKHdsKSBEYXZpcyBDb250cmFjdG9ycyBMdGQgdiBGYXJlaGFtIFVyYmFuIERpc3RyaWN0IENvdW5jaWwiLAogICAgICAgICIod2wpIEludGVyZm90byBQaWN0dXJlIExpYnJhcnkgTHRkIHYgU3RpbGV0dG8gVmlzdWFsIFByb2R1Y3Rpb25zIEx0ZCIsCiAgICAgICAgIih3bCkgU2NoYXdlbCB2IFJlYWRlIiwKICAgICAgICAiKHdsKSBDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyAmIER5ZWluZyBDbyIsCiAgICAgICAgIih3bCkgT3NjYXIgQ2hlc3MgTHRkIHYgV2lsbGlhbXMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNDYiLAogICAgIllFQVIiOiAiMjAwOSIsCiAgICAiQ09VTlNFTCI6ICJGb3IgdGhlIGFwcGVsbGFudDogQWxhc3RhaXIgVG9tc29uLiBGb3IgdGhlIHJlc3BvbmRlbnQ6IE1hbGNvbG0gQ2hhcHBsZS4iLAogICAgIkFCU1RSQUNUIjogWwogICAgICAgICJUaGUgYXBwZWxsYW50IHNlbGxlciAoUykgYXBwZWFsZWQgYWdhaW5zdCBhIGRlY2lzaW9uIHRoYXQgdGhlIHBhcnRpZXMmIzgyMTc7IGRlYWxpbmdzIHdlcmUgb24gdGhlIHRlcm1zIG9mIHRoZSByZXNwb25kZW50IGJ1eWVyIChCKS4iLAogICAgICAgICJUaGUgcGFydGllcyB3ZXJlIHBhcnQgb2YgYSBjaGFpbiBvZiBzdXBwbGllcnMgdG8gUm9sbHMgUm95Y2UgYXMgdWx0aW1hdGUgcHVyY2hhc2VyLiBSb2xscyBSb3ljZSBuZWVkZWQgZW5naW5lIGNvbnRyb2wgc3lzdGVtcyBmb3IgaW5zdGFsbGF0aW9uIGluIGl0cyBhZXJvIGVuZ2luZXMuIEl0IGJvdWdodCBzdWNoIHN5c3RlbXMgZnJvbSBHb29kcmljaCB3aGljaCBpdHNlbGYgYm91Z2h0IGNhYmxlIGFzc2VtYmx5IGl0ZW1zIHN1Y2ggYXMgY2FibGUgaGFybmVzc2VzIGZvciBpbnRlcm5hbCB3aXJpbmcgZnJvbSBCLiBJbiBvcmRlciB0byBtYW51ZmFjdHVyZSB0aGUgaGFybmVzc2VzIEIgYWNxdWlyZWQgY29ubmVjdG9ycyBmcm9tIFMuIFRoZSBwYXJ0aWVzIGhhZCBiZWVuIGRvaW5nIGJ1c2luZXNzIGZvciBvdmVyIDIwIHllYXJzLiBGb3IgbW9zdCwgaWYgbm90IGFsbCwgb2YgdGhhdCB0aW1lIHRoZSBzdXBwbHkgb2YgY29ubmVjdG9ycyBoYWQgYmVlbiBjb250cm9sbGVkIGJ5IEdvb2RyaWNoIHdoaWNoIHJlcXVpcmVkIEIgdG8gcHVyY2hhc2UgdGhlIGNvbm5lY3RvcnMgZnJvbSBTIHRvIGEgc3BlY2lmaWNhdGlvbiByZXF1aXJlZCBieSBHb29kcmljaCBhbmQgYXQgYSBwcmljZSBkZXRlcm1pbmVkIGJ5IEdvb2RyaWNoLiBTIGhhZCBhbHNvIGhhZCBhIGxvbmcgdGVybSBjb250cmFjdCB3aXRoIEdvb2RyaWNoIHB1cnN1YW50IHRvIHdoaWNoIGl0IGFncmVlZCB0byBzdXBwbHkgY29ubmVjdG9ycyB0byBCIGZvciB0aGUgcHJpY2UgZGV0ZXJtaW5lZCBieSBHb29kcmljaC4gQiBzZW50IHB1cmNoYXNlIG9yZGVycyB0byBTIGNvbnRhaW5pbmcgQiYjODIxNztzIG93biB0ZXJtcyBhbmQgY29uZGl0aW9ucy4gUyBhY2tub3dsZWRnZWQgdGhlIHB1cmNoYXNlIG9yZGVycyBieSBzZW5kaW5nIGFuIGFja25vd2xlZGdtZW50IHdoaWNoIHN0YXRlZCB0aGF0IFMmIzgyMTc7cyBvd24gdGVybXMgYW5kIGNvbmRpdGlvbnMgYXBwbGllZC4gQWx0aG91Z2ggYW4gb2ZmZXIgdG8gYnV5IG9uIHRoZSBwdXJjaGFzZXImIzgyMTc7cyB0ZXJtcyB3aGljaCB3YXMgZm9sbG93ZWQgYnkgYW4gYWNrbm93bGVkZ2VtZW50IG9mIHB1cmNoYXNlIG9uIHRoZSBzZWxsZXImIzgyMTc7cyB0ZXJtcyBhbmQgdGhlbiBkZWxpdmVyeSB3b3VsZCBub3JtYWxseSByZXN1bHQgaW4gYSBjb250cmFjdCBvbiB0aGUgc2VsbGVyJiM4MjE3O3MgdGVybXMsIHRoZSBqdWRnZSBoZWxkIHRoYXQgQiYjODIxNztzIHRlcm1zIGFwcGxpZWQgYmVjYXVzZSBpdCB3YXMgbmV2ZXIgaW50ZW5kZWQgdGhhdCBTJiM4MjE3O3MgdGVybXMgc2hvdWxkIGFwcGx5IGFuZCB0aGUgcGFydGllcyBoYWQgYWx3YXlzIGludGVuZGVkIHRoYXQgQiYjODIxNztzIHRlcm1zIHdlcmUgdG8gYXBwbHkuIiwKICAgICAgICAiUyBzdWJtaXR0ZWQgdGhhdCB0aGUganVkZ2Ugc2hvdWxkIG5vdCBoYXZlIGFuYWx5c2VkIHRoZSBvdmVyYWxsIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZSBwYXJ0aWVzIGFuZCBjb21lIHRvIHRoZSBjb25jbHVzaW9uIHdoaWNoIGhlIGRpZCwgYnV0IHNob3VsZCBoYXZlIGFwcGxpZWQgdGhlIHRyYWRpdGlvbmFsIG9mZmVyIGFuZCBhY2NlcHRhbmNlIGFuYWx5c2lzIHJlc3VsdGluZyBpbiBhIGNvbnRyYWN0IG9uIFMmIzgyMTc7cyB0ZXJtcy4iCiAgICBdLAogICAgIk5BTUUiOiAiKHdsKSBUZWtkYXRhIEludGVyY29ubmVjdGlvbnMgTHRkIHYgQW1waGVub2wgTHRkIiwKICAgICJDSVQiOiAiWzIwMDldIEVXQ0EgQ2l2IDEyMDkiLAogICAgIkNJVEFUSU9OIjogIlRla2RhdGEgSW50ZXJjb25uZWN0aW9ucyBMdGQgdiBBbXBoZW5vbCBMdGQgWzIwMDldIEVXQ0EgQ2l2IDEyMDkiLAogICAgIkpVREdFIjogIlBpbGwgTEo7IER5c29uIExKOyBMb25nbW9yZSBMSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQXBwZWFsIGFsbG93ZWQuIiwKICAgICAgICAiVGhlIHRyYWRpdGlvbmFsIG9mZmVyIGFuZCBhY2NlcHRhbmNlIGFuYWx5c2lzIGhhZCB0byBiZSBhZG9wdGVkIHVubGVzcyB0aGUgZG9jdW1lbnRzIHBhc3NpbmcgYmV0d2VlbiB0aGUgcGFydGllcyBhbmQgdGhlaXIgY29uZHVjdCBzaG93ZWQgdGhhdCB0aGVpciBjb21tb24gaW50ZW50aW9uIHdhcyB0aGF0IHNvbWUgb3RoZXIgdGVybXMgd2VyZSBpbnRlbmRlZCB0byBwcmV2YWlsLCBCdXRsZXIgTWFjaGluZSBUb29sIENvIHYgRXgtY2VsbC1vIENvcnAgKEVuZ2xhbmQpIFsxOTc5XSAxIFcuTC5SLiA0MDEgY29uc2lkZXJlZC4gVGhlIHRyYWRpdGlvbmFsIGFuYWx5c2lzIHdvdWxkIGNvbmNsdWRlIHRoYXQgdGhlIHRlcm1zIG9uIFMmIzgyMTc7cyBhY2tub3dsZWRnbWVudCB3b3VsZCBiZSB0aGUgdGVybXMgb24gd2hpY2ggdGhlIHBhcnRpZXMgY29udHJhY3RlZC4gVGhlIGp1ZGdlIGdhdmUgd2VpZ2h0IHRvIHRoZSBmYWN0IHRoYXQgdGhlIGNvbm5lY3RvcnMgd2VyZSBpdGVtcyBvZiBjb25zaWRlcmFibGUgc29waGlzdGljYXRpb24gd2hpY2ggd2VyZSB0byBiZSBmaXR0ZWQgaW50byBhZXJvIGVuZ2luZSBjb250cm9sIHN5c3RlbXMgc28gdGhhdCBkZWxpdmVyeSB0aW1lcyBhbmQgcXVhbGl0eSBjb250cm9sIHdlcmUgaW1wb3J0YW50OyB0aGUgcHJlLWV4aXN0aW5nIGFncmVlbWVudCBiZXR3ZWVuIFMgYW5kIEdvb2RyaWNoIHdoaWNoIGNvbW1pdHRlZCBTIHRvIG1ha2Ugc3VwcGxpZXMgb24gdGVybXMgd2hpY2ggbGFyZ2VseSBjb3JyZXNwb25kZWQgdG8gdGhvc2Ugb2YgQjsgYW5kIHRoZSBmYWN0IHRoYXQgUyBkaWQgbm90IG1lbnRpb24gaXRzIG93biB0ZXJtcyBiZWZvcmUgdGhlIHNlcnZpY2Ugb2YgdGhlIGRlZmVuY2UuIFRoZSBjb250ZXh0IG9mIHRoZSBwYXJ0aWVzJiM4MjE3OyByZWxhdGlvbnNoaXAgd2FzIGltcG9ydGFudCBidXQgdGhlIGZhY3RvcnMgb24gd2hpY2ggdGhlIGp1ZGdlIHJlbGllZCBkaWQgbm90IGp1c3RpZnkgaGlzIGNvbmNsdXNpb24uIFRoZSBmYWN0IHRoYXQgZGVsaXZlcnkgdGltZXMgYW5kIHF1YWxpdHkgY29udHJvbCB3ZXJlIGVzc2VudGlhbCB3YXMgdHJ1ZSBpbiBtYW55IGNvbW1lcmNpYWwgcmVsYXRpb25zaGlwcyBhbmQgY291bGQgYmUgbm8gbW9yZSB0aGFuIGEgYmFja2dyb3VuZCBmYWN0b3IuIFRoZXJlIHdhcyBubyBwcmVjaXNlIG1hdGNoaW5nIGJldHdlZW4gdGhlIHRlcm1zIG9mIHRoZSBhZ3JlZW1lbnQgYmV0d2VlbiBTIGFuZCBHb29kcmljaCBhbmQgQiYjODIxNztzIHRlcm1zLiBUaGUgcGFydGllcyBoYWQgaGFkIGFuIG9wcG9ydHVuaXR5IHRvIGFncmVlIGEgc2luZ2xlIHNldCBvZiB0ZXJtcyBidXQgZGlkIG5vdCBkbyBzby4gVGhlIHRlcm1zIG9mIHRoZSBwb3N0LWRpc3B1dGUgY29ycmVzcG9uZGVuY2Ugd2VyZSBub3QgYXMgc2lnbmlmaWNhbnQgYXMgdGhlIGp1ZGdlIHRob3VnaHQuIEl0IGNvdWxkIG5vdCBiZSBpbmZlcnJlZCBmcm9tIHRoZSBjb3JyZXNwb25kZW5jZSB0aGF0IFMmIzgyMTc7cyBuZXZlciBpbnRlbmRlZCBpdHMgdGVybXMgYW5kIGNvbmRpdGlvbnMgdG8gYXBwbHkuIEFsdGhvdWdoIHRoZSBjb250ZXh0IG9mIGEgbG9uZyB0ZXJtIHJlbGF0aW9uc2hpcCBhbmQgdGhlIGNvbmR1Y3Qgb2YgdGhlIHBhcnRpZXMgbWlnaHQgYmUgc3Ryb25nIGVub3VnaCB0byBkaXNwbGFjZSB0aGUgcmVzdWx0IHdoaWNoIGEgdHJhZGl0aW9uYWwgb2ZmZXIgYW5kIGFjY2VwdGFuY2UgYW5hbHlzaXMgd291bGQgZGljdGF0ZSwgdGhlIGNpcmN1bXN0YW5jZXMgd2VyZSBub3Qgc3Ryb25nIGVub3VnaCB0byBkbyBzbyBpbiB0aGUgaW5zdGFudCBjYXNlLiBUaGUganVkZ2Ugc2hvdWxkIGhhdmUgaGVsZCB0aGF0IFMmIzgyMTc7cyB0ZXJtcyBhbmQgY29uZGl0aW9ucyBhcHBsaWVkLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkFkbWluaXN0cmF0aXZlIExhdyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBIdW1hbiBSaWdodHMgJm1kYXNoOyBEZXBvcnRhdGlvbiAmbWRhc2g7IERldGVudGlvbiAmbWRhc2g7IElsbGVnYWwgRW50cmFudHMgJm1kYXNoOyBNYXJyaWFnZSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQWRtaW5pc3RyYXRpdmUgTGF3IE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IEh1bWFuIFJpZ2h0cyIsCiAgICAgICAgIkRlcG9ydGF0aW9uIiwKICAgICAgICAiRGV0ZW50aW9uIiwKICAgICAgICAiSWxsZWdhbCBFbnRyYW50cyIsCiAgICAgICAgIk1hcnJpYWdlIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIEVhc3QgdiBNYXVyZXIiLAogICAgICAgICIod2wpIFRla2RhdGEgSW50ZXJjb25uZWN0aW9ucyBMdGQgdiBBbXBoZW5vbCBMdGQiLAogICAgICAgICIod2wpIFBhbmtoYW5pYSB2IEhhY2tuZXkgQm9yb3VnaCBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBJbm50cmVwcmVuZXVyIFB1YiBDbyB2IEVhc3QgQ3Jvd24gTHRkIiwKICAgICAgICAiKHdsKSBEcmVzZG5lciBLbGVpbndvcnQgTHRkIHYgQXR0cmlsbCIsCiAgICAgICAgIih3bCkgQXNzb2NpYXRlZCBKYXBhbmVzZSBCYW5rIChJbnRlcm5hdGlvbmFsKSBMdGQgdiBDcmVkaXQgZHUgTm9yZCIsCiAgICAgICAgIih3bCkgQ2hhcnRicm9vayBMdGQgdiBQZXJzaW1tb24gSG9tZXMgTHRkIiwKICAgICAgICAiKHdsKSBCUlMgdiBBcnRodXIgQ3J1dGNobGV5IEx0ZCIsCiAgICAgICAgIih3bCkgTmljb2xlbmUgdiBTaW1tb25kcyIsCiAgICAgICAgIih3bCkgT3ZlcmJyb29rZSBFc3RhdGVzIEx0ZCB2IEdsZW5jb21iZSBQcm9wZXJ0aWVzIEx0ZCIsCiAgICAgICAgIih3bCkgTCBKIEtvcmJldGlzIHYgVHJhbnNncmFpbiBTaGlwcGluZyBCViIsCiAgICAgICAgIih3bCkgQ2FwYXJvIEluZHVzdHJpZXMgcGxjIHYgRGlja21hbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE0NyIsCiAgICAiWUVBUiI6ICIxOTc2IiwKICAgICJOQU1FIjogIih3bCkgTW91bnRmb3JkIHYgU2NvdHQiLAogICAgIkNJVCI6ICJbMTk3Nl0gUUIgMTk4IiwKICAgICJDSVRBVElPTiI6ICJNb3VudGZvcmQgdiBTY290dCBbMTk3Nl0gUUIgMTk4IiwKICAgICJKVURHRSI6ICJMb3JkIERlbm5pbmcgTVI7IExvcmQgV2lkZ2VyeSBMQ0o7IEphbWVzIExKOyBNYXkgSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiZGlzbWlzc2luZyB0aGUgYXBwZWFsLCB0aGF0IHRoZSByaWdodCB0byBtYXJyeSBnaXZlbiBpbiBBcnQuMTIoMSkgY291bGQgYmUgcmVzdHJpY3RlZCBieSB0aGUgY2lyY3Vtc3RhbmNlcyBhbmQgaW4gcGFydGljdWxhciBieSB0aGUgY2lyY3Vtc3RhbmNlIG9mIHRoZSBhcHBlbGxhbnQgYmVpbmcgbGF3ZnVsbHkgZGV0YWluZWQgdW5kZXIgQXJ0LjUoMSkoZik7IHRoZSBTZWNyZXRhcnkgb2YgU3RhdGUgd2FzIGVudGl0bGVkIHRvIHJlZnVzZSB0byBmYWNpbGl0YXRlIHRoZSBtYXJyaWFnZS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIsCiAgICAgICAgIkRlbm5pbmciCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdIQyIsCiAgICAiQ0FURUdPUlkiOiAiRW52aXJvbm1lbnQgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQWRtaW5pc3RyYXRpdmUgTGF3ICZtZGFzaDsgQWRtaW5pc3RyYXRpdmUgRGVjaXNpb24tTWFraW5nICZtZGFzaDsgTmFtZXMgJm1kYXNoOyBOYXRpb25hbCBQYXJrIEF1dGhvcml0aWVzICZtZGFzaDsgTmF0aW9uYWwgUGFya3MgJm1kYXNoOyBQdWJsaWMgQXV0aG9yaXRpZXMgJm1kYXNoOyBSZWJyYW5kaW5nIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIENyb3NzbGV5IHYgRmFpdGhmdWwgJiBHb3VsZCBIb2xkaW5ncyIsCiAgICAgICAgIih3bCkgSGFydmVsYSBJbnZlc3RtZW50cyBMdGQgdiBSb3lhbCBUcnVzdCBvZiBDYW5hZGEgTHRkIiwKICAgICAgICAiKHdsKSBJbnRlcmZvdG8gUGljdHVyZSBMaWJyYXJ5IEx0ZCB2IFN0aWxldHRvIFZpc3VhbCBQcm9kdWN0aW9ucyBMdGQiLAogICAgICAgICIod2wpIEthcnNhbGVzIChIYXJyb3cpIEx0ZCB2IFdhbGxpcyIsCiAgICAgICAgIih3bCkgSGVkbGV5IEJ5cm5lICYgQ28gTHRkIHYgSGVsbGVyICYgUGFydG5lcnMiLAogICAgICAgICIod2wpIEtsZWlud29ydCBCZW5zb24gTHRkIHYgTWFsYXlzaWEgTWluaW5nIENvcnBvcmF0aW9uIiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQgTHRkIiwKICAgICAgICAiKHdsKSBNZXJyaXR0IHYgTWVycml0dCIsCiAgICAgICAgIih3bCkgTCBKIEtvcmJldGlzIHYgVHJhbnNncmFpbiBTaGlwcGluZyBCViIsCiAgICAgICAgIih3bCkgRGF2aXMgQ29udHJhY3RvcnMgTHRkIHYgRmFyZWhhbSBVcmJhbiBEaXN0cmljdCBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBSZWFyZG9uIFNtaXRoIExpbmUgTHRkIHYgWW5ndmFyIEhhbnNlbi1UYW5nZW4iLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTQ4IiwKICAgICJZRUFSIjogIjIwMTYiLAogICAgIkNPVU5TRUwiOiAiRm9yIHRoZSBjbGFpbWFudHM6IEdyZWdvcnkgSm9uZXMgUUMsIENoYXJsZXMgU3RyZWV0ZW4uIEZvciB0aGUgZGVmZW5kYW50OiBOaWdlbCBHaWZmaW4gUUMsIENocmlzdG9waGVyIEtuaWdodC4iLAogICAgIkFCU1RSQUNUIjogWwogICAgICAgICJUaGUgY2xhaW1hbnRzLCByZXNpZGVudHMgb2YgdGhlIEJyb2FkcywgYXBwbGllZCBmb3IganVkaWNpYWwgcmV2aWV3IG9mIGEgcmVzb2x1dGlvbiBieSB0aGUgZGVmZW5kYW50IHRvIHJlLWJyYW5kIHRoZSBhcmVhIGFzICYjODIyMDtUaGUgQnJvYWRzIE5hdGlvbmFsIFBhcmsmIzgyMjE7IGZvciB0aGUgcHVycG9zZXMgb2YgYXR0cmFjdGluZyB0b3VyaXN0cy4iLAogICAgICAgICJUaGUgQnJvYWRzIHdhcyBub3QgZGVzaWduYXRlZCBhcyBhIE5hdGlvbmFsIFBhcmsgdW5kZXIgdGhlIE5hdGlvbmFsIFBhcmtzIGFuZCBBY2Nlc3MgdG8gdGhlIENvdW50cnlzaWRlIEFjdCAxOTQ5LCBub3Igd2FzIHRoZSBkZWZlbmRhbnQgYSBOYXRpb25hbCBQYXJrIEF1dGhvcml0eS4gSXQgd2FzIGNvbnN0aXR1dGVkIHVuZGVyIHRoZSBOb3Jmb2xrIGFuZCBTdWZmb2xrIEJyb2FkcyBBY3QgMTk4OCwgd2hpY2ggaW1wb3NlZCB2YXJpb3VzIGR1dGllcyB1cG9uIGl0IGZvciB0aGUgbWFuYWdlbWVudCBvZiB0aGUgQnJvYWRzLiBIb3dldmVyLCB0aGUgYXJlYSBoYWQgYmVlbiB0cmVhdGVkIGZvciBtYW55IHllYXJzIGFzIGZvcm1pbmcgcGFydCBvZiB0aGUgJiM4MjIwO2ZhbWlseSYjODIyMTsgb2YgTmF0aW9uYWwgUGFya3MuIEl0IHdhcyBjb21tb24gZ3JvdW5kIHRoYXQgdGhlIGRlZmVuZGFudCBoYWQgbm90IHNvdWdodCB0byByZS1icmFuZCBpdHNlbGYgb3IgZGVzY3JpYmUgaXRzZWxmIGFzIGEgTmF0aW9uYWwgUGFyayBBdXRob3JpdHkuIEJ5IGl0cyByZXNvbHV0aW9uIGl0IHB1cnBvcnRlZCBvbmx5IHRvIHJlLWJyYW5kIHRoZSBhcmVhIGtub3duIGFzICYjODIyMDt0aGUgQnJvYWRzJiM4MjIxOyBieSBkZXNjcmliaW5nIGl0IGFzICYjODIyMDtUaGUgQnJvYWRzIE5hdGlvbmFsIFBhcmsmIzgyMjE7LiBUaGUgY2xhaW1hbnRzJiM4MjE3OyBtYWluIGNvbmNlcm4gd2FzIHRvIGVuc3VyZSB0aGF0IHRoZSBiaW9kaXZlcnNpdHkgYW5kIGVudmlyb25tZW50YWwgdmFsdWUgb2YgdGhlIEJyb2FkcyB3YXMgY29uc2VydmVkLCBlaXRoZXIgYnkgaXQgZnVsbHkgYmVjb21pbmcgYSBOYXRpb25hbCBQYXJrIG9yLCBhdCB0aGUgdmVyeSBsZWFzdCBjb25maXJtaW5nIGl0cyBhcHBsaWNhdGlvbiBvZiB0aGUgJiM4MjIwO1NhbmRmb3JkIFByaW5jaXBsZSYjODIyMTssIGVuY2Fwc3VsYXRlZCBpbiBzLjExQSgyKSBvZiB0aGUgMTk0OSBBY3QsIHdoaWNoIHJlcXVpcmVkIE5hdGlvbmFsIFBhcmtzIHRvIHB1dCB0aGUgcHJlc2VydmF0aW9uIGFuZCBuYXR1cmFsIGJlYXV0eSBvZiBzdWNoIGFyZWFzIGJlZm9yZSB0aGUgcHJvbW90aW9uIG9mIHB1YmxpYyBlbmpveW1lbnQgd2hlcmUgdGhlcmUgd2FzIGEgY29uZmxpY3QgYmV0d2VlbiB0aGUgdHdvLiIsCiAgICAgICAgIlRoZSBpc3N1ZSB3YXMgd2hldGhlciBhIHB1YmxpYyBib2R5IHdoaWNoIHdhcyBub3QgYSBOYXRpb25hbCBQYXJrIGNvdWxkIHJlcHJlc2VudCBpdHNlbGYgYXMgYSBOYXRpb25hbCBQYXJrLCBhbmQgZW5qb3kgdGhlIGJlbmVmaXRzIG9mIHN1Y2ggYSBzdGF0dXMgd2l0aG91dCBiZWluZyBzdWJqZWN0IHRvIHRoZSBsZWdhbCBkdXRpZXMgaW1wb3NlZCB1cG9uIE5hdGlvbmFsIFBhcmtzLiIsCiAgICAgICAgIlRoZSBjbGFpbWFudHMgc3VibWl0dGVkIHRoYXQgdGhlIGRlZmVuZGFudCYjODIxNztzIHJlc29sdXRpb24gd2FzOiIsCiAgICAgICAgIigxKSBpcnJhdGlvbmFsIGFuZCBpbnZhbGlkIGJlY2F1c2UgaXQgd2FzIG91dHNpZGUgdGhlIHNjb3BlIG9mIHRoZSBMb2NhbCBHb3Zlcm5tZW50IEFjdCAxOTcyIHMuMTExLCBhbmQgYmVjYXVzZSBpdCBhdHRyaWJ1dGVkIHRvIHRoZSBCcm9hZHMgYSBzdGF0dXRvcnkgdGVybSB3aGljaCBjb3VsZCBvbmx5IGJlIGVtcGxveWVkIGZvciBhcmVhcyBzdGF0dXRvcmlseSBkZXNpZ25hdGVkIGFzIE5hdGlvbmFsIFBhcmtzIHVuZGVyIHRoZSAxOTQ5IEFjdDsiLAogICAgICAgICIoMikgbWlzbGVhZGluZyBhcyB0byB0aGUgc2NvcGUgb2YgdGhlIGRlZmVuZGFudCYjODIxNztzIHN0YXR1dG9yeSBmdW5jdGlvbnMgYmVjYXVzZSBpdCBsZWQgdGhlIHB1YmxpYyBpbnRvIHRoaW5raW5nIHRoYXQgdGhlIFNhbmRmb3JkIFByaW5jaXBsZSB3YXMgYXBwbGljYWJsZSB3aXRoaW4gdGhlIEJyb2FkcyB3aGVuIGl0IHdhcyBub3Q7IiwKICAgICAgICAiKDMpIHByb2NlZHVyYWxseSB1bmZhaXIgYmVjYXVzZSBpdCBpbnZvbHZlZCBhIGRlY2lzaW9uIG5vdCB0byBwdXJzdWUgdGhlIGxvbmcgdGVybSB2aXNpb24gb2YgdGhlIEJyb2FkcyBQbGFuIDIwMTEgdG8gYmVjb21lIGEgTmF0aW9uYWwgUGFyayAoYW5kIHRoZXJlYnkgYWRvcHQgdGhlIFNhbmRmb3JkIFByaW5jaXBsZSkgd2l0aG91dCBhbnkgY29uc3VsdGF0aW9uIG9uIHRoYXQgcG9pbnQuIgogICAgXSwKICAgICJOQU1FIjogIih3bCkgUmFtc2dhdGUgVmljdG9yaWEgSG90ZWwgdiBNb250ZWZpb3JlIiwKICAgICJDSVQiOiAiWzIwMTZdIEVXSEMgNzk5IChBZG1pbikiLAogICAgIkNJVEFUSU9OIjogIlJhbXNnYXRlIFZpY3RvcmlhIEhvdGVsIHYgTW9udGVmaW9yZSBbMjAxNl0gRVdIQyA3OTkgKEFkbWluKSIsCiAgICAiSlVER0UiOiAiSG9sZ2F0ZSBKIiwKICAgICJIRUxEIjogWwogICAgICAgICJBcHBsaWNhdGlvbiByZWZ1c2VkLiIsCiAgICAgICAgIigxKSBUaGUgQnJvYWRzIHNoYXJlZCBtYW55IG9mIHRoZSBzdGF0dXRvcnkgY2hhcmFjdGVyaXN0aWNzIG9mIGEgTmF0aW9uYWwgUGFyaywgYXMgd2FzIGV2aWRlbnQgZnJvbSB0aGUgMTk0OSBhbmQgMTk4OCBBY3RzLCBhbmQgZnJvbSB0aGUgZmFjdCB0aGF0IGEgY2lyY3VsYXIgaXNzdWVkIHRvIE5hdGlvbmFsIFBhcmtzIGJ5IHRoZSBEZXBhcnRtZW50IG9mIHRoZSBFbnZpcm9ubWVudCwgRm9vZCBhbmQgUnVyYWwgQWZmYWlycyB3YXMgc2FpZCB0byBhcHBseSBlcXVhbGx5IHRvIHRoZSBCcm9hZHMgb24gYWNjb3VudCBvZiBpdHMgc2ltaWxhcml0aWVzIHdpdGggTmF0aW9uYWwgUGFya3MuIFRoZSBkZWZlbmRhbnQmIzgyMTc7cyByZXNvbHV0aW9uIGRpZCBub3QgYnJlYWNoIHRoZSBsZWdpc2xhdGlvbiBiZWNhdXNlIGl0IGRpZCBub3Qgc2VlayB0byB0cmVhdCB0aGUgQnJvYWRzIGFzIGEgTmF0aW9uYWwgUGFyaywgb25seSB0byBhZG9wdCB0aGUgbmFtZSBmb3IgbWFya2V0aW5nIHB1cnBvc2VzLiBUaGUgY29kZSBjb250YWluZWQgaW4gdGhlIDE5NDkgQWN0IHdhcyBub3Qgc3BlY2lmaWNhbGx5IGRpcmVjdGVkIHRvIHRoZSB1c2Ugb2YgYSBicmFuZCBuYW1lIGZvciBhIE5hdGlvbmFsIFBhcmsuIEJ5IHZpcnR1ZSBvZiB0aGUgTG9jYWwgR292ZXJubWVudCBBY3QgMTk3MiBzLjE0NCBhbmQgcy4yNjVBLCB0aGUgZGVmZW5kYW50IHdhcyBlbXBvd2VyZWQgdG8gZW5jb3VyYWdlIHBlcnNvbnMgdG8gdmlzaXQgdGhlIEJyb2FkcyBmb3IgcmVjcmVhdGlvbi4gQnkgcy4yKDcpIG9mIHRoZSAxOTg4IEFjdCBhbmQgcy4xMTEgb2YgdGhlIDE5NzIgQWN0IGl0IGNvdWxkIGRvIGFueXRoaW5nIG5lY2Vzc2FyeSBvciBleHBlZGllbnQgZm9yIGVuYWJsaW5nIGl0IHRvIGNhcnJ5IG91dCBpdHMgZnVuY3Rpb25zLiBTdWNoIGZ1bmN0aW9ucyBpbmNsdWRlZCAmIzgyMjA7cHJvbW90aW9uJiM4MjIxOzsgd2hpY2ggaW5jbHVkZWQgbWFya2V0aW5nIHRoZSBCcm9hZHMgdG8gdGhlIHB1YmxpYy4gVGhlIGRlZmVuZGFudCYjODIxNztzIG9iamVjdGl2ZXMgaW4gYWRvcHRpbmcgdGhlIGJyYW5kIG5hbWUgZmVsbCB3aXRoaW4gdGhlIGFtYml0IG9mIHRob3NlIHByb3Zpc2lvbnMuIEZ1cnRoZXJtb3JlLCBpdCB3YXMgbGVnYWxseSBwb3NzaWJsZSB0byBzZXBhcmF0ZSB0aGUgdXNlIG9mICYjODIyMDtOYXRpb25hbCBQYXJrJiM4MjIxOyBhcyBhIGJyYW5kIG5hbWUgZnJvbSB0aGUgbGVnYWwgc3RhdHVzIG9mIGEgTmF0aW9uYWwgUGFyay4gVGhlIHBocmFzZSAmIzgyMjA7TmF0aW9uYWwgUGFyayYjODIyMTsgaGFkIGJlY29tZSBlc3RhYmxpc2hlZCBhcyBhbiBvcmRpbmFyeSBwYXJ0IG9mIEVuZ2xpc2ggbGFuZ3VhZ2UgYW5kIE5hdGlvbmFsIFBhcmsgbGVnaXNsYXRpb24gaGFkIG5vIGxlZ2FsIG1vbm9wb2x5IG92ZXIgdGhlIHVzZSBvZiB0aGUgdGVybS4gVGhlcmUgd2FzIG5vIGJhc2lzIG9uIHdoaWNoIHRvIGltcGx5IGEgUGFybGlhbWVudGFyeSBpbnRlbnRpb24gdG8gcHJvaGliaXQgdGhlIHVzZSBvZiB0aGUgdGVybSAmIzgyMjA7TmF0aW9uYWwgUGFyayYjODIyMTsgb3V0c2lkZSB0aGUgY29kZSBiYXNlZCB1cG9uIHRoZSAxOTQ5IEFjdCAoc2VlIHBhcmFzIDI2LCA2MSwgNjctNjksIDczLCA3NSwgNzcgb2YganVkZ21lbnQpLiIsCiAgICAgICAgIigyKSBXaGV0aGVyIGEgc3RhdGVtZW50IG9yIGRlY2lzaW9uIGJ5IGEgcHVibGljIGJvZHkgaGFkIHRoZSBlZmZlY3Qgb2YgbWlzbGVhZGluZyB0aGUgcHVibGljIHdhcyBhbiBvYmplY3RpdmUgcXVlc3Rpb247IHRoZSBjb3VydCYjODIxNztzIHJvbGUgd2FzIG5vdCBsaW1pdGVkIHRvIHJldmlld2luZyB0aGUgZGVjaXNpb24gb24gV2VkbmVzYnVyeSBwcmluY2lwbGVzLiBUaGUgZGVmZW5kYW50JiM4MjE3O3MgYnJhbmRpbmcgZGVjaXNpb24gaGFkIG5vdCBoYWQgYSBtaXNsZWFkaW5nIGVmZmVjdCB3aXRoIHJlZ2FyZCB0byB0aGUgU2FuZGZvcmQgUHJpbmNpcGxlLCBhbmQgd2FzIG5vdCBpcnJhdGlvbmFsLiBFdmVuIHdpdGhpbiBhIE5hdGlvbmFsIFBhcmssIGNvbnNlcnZhdGlvbiBkaWQgbm90IGhhdmUgdG8gYmUgdGhlIHVwcGVybW9zdCBjb25zaWRlcmF0aW9uLiBTZWN0aW9uIDExQSgyKSBvZiB0aGUgMTk0OSBBY3Qgb25seSByZXF1aXJlZCB0aGUgcmVsZXZhbnQgYXV0aG9yaXR5IHRvICYjODIyMDtoYXZlIHJlZ2FyZCYjODIyMTsgdG8gdGhlIHR3aW4gcHVycG9zZXMuIEl0IGRpZCBub3QgZGVhbCB3aXRoIGFsbCByZWxldmFudCBjb25zaWRlcmF0aW9ucyBzdWNoIGFzIHRoZSBuZWVkIGZvciBkZXZlbG9wbWVudC4gVGhlIGNsYWltYW50cyYjODIxNzsgcmVsaWFuY2UgdXBvbiB0aGUgU2FuZGZvcmQgUHJpbmNpcGxlIGFzIHRoZSBrZXkgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBCcm9hZHMgYW5kIE5hdGlvbmFsIFBhcmtzIHdhcyB1bnN1c3RhaW5hYmxlLiBJbnRyb2R1Y2luZyB0aGUgU2FuZGZvcmQgUHJpbmNpcGxlIGludG8gdGhlIEJyb2FkcyB3b3VsZCBpbnZvbHZlIGFtZW5kaW5nIGxlZ2lzbGF0aW9uLCBhbmQgc3VjaCBhbWVuZG1lbnRzIGNvdWxkIG5vdCBiZSBjb250ZW1wbGF0ZWQgd2l0aG91dCBQYXJsaWFtZW50IGNvbnNpZGVyaW5nIGEgbnVtYmVyIG9mIG1hdHRlcnMuIEFzIHRoZSBkZWZlbmRhbnQgd2FzIG9ubHkgYWRvcHRpbmcgYSBicmFuZCBuYW1lLCBhbmQgdGhlIGxlZ2FsIHJlZ2ltZSB3aXRoaW4gdGhlIEJyb2FkcyByZW1haW5lZCB1bmFsdGVyZWQsIHRoZSByZXNvbHV0aW9uIHdhcyBvbmx5IGNvbmNlcm5lZCB3aXRoIGhvdyB0aGUgQnJvYWRzIHNob3VsZCBiZSBtYXJrZXRlZC4gSW4gb3JkZXIgdG8gbWFrZSBhIGxhd2Z1bCBuYW1lIGNob2ljZSwgaXQgaGFkIG5vdCBiZWVuIG5lY2Vzc2FyeSBmb3IgdGhlIGRlZmVuZGFudCB0byBkZWNpZGUgYWJvdXQgdGhlIGludHJvZHVjdGlvbiBvZiB0aGUgU2FuZGZvcmQgUHJpbmNpcGxlIChwYXJhcyA2LCA4MS04MiwgODUsIDg3LCA5MS05MiwgOTUsIDk3KS4iLAogICAgICAgICIoMykgVGhlIDIwMTEgUGxhbiBkaWQgbm90IHNlZWsgdG8gcHJvbW90ZSB0aGUgYWRvcHRpb24gb2YgdGhlIFNhbmRmb3JkIFByaW5jaXBsZS4gRm9yIHRoYXQgcmVhc29uIGFuZCBvdGhlcnMsIHRoZSBjbGFpbWFudHMmIzgyMTc7IHN1Ym1pc3Npb25zIHJlZ2FyZGluZyBkZWZlY3RpdmUgY29uc3VsdGF0aW9uIGZhaWxlZCAocGFyYXMgMTA0LTExMikuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJFbnZpcm9ubWVudCBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBBZG1pbmlzdHJhdGl2ZSBMYXciLAogICAgICAgICJBZG1pbmlzdHJhdGl2ZSBEZWNpc2lvbi1NYWtpbmciLAogICAgICAgICJOYW1lcyIsCiAgICAgICAgIk5hdGlvbmFsIFBhcmsgQXV0aG9yaXRpZXMiLAogICAgICAgICJOYXRpb25hbCBQYXJrcyIsCiAgICAgICAgIlB1YmxpYyBBdXRob3JpdGllcyIsCiAgICAgICAgIlJlYnJhbmRpbmciCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdIQyIsCiAgICAiQ0FURUdPUlkiOiAiU2hpcHBpbmcgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29udHJhY3RzICZtZGFzaDsgQXV0aG9yaXR5ICZtZGFzaDsgQ29uZGl0aW9ucyAmbWRhc2g7IEd1YXJhbnRlZXMgJm1kYXNoOyBJbnRlcm1lZGlhdGUgVGVybXMgJm1kYXNoOyBNZWFzdXJlIG9mIERhbWFnZXMgJm1kYXNoOyBUaW1lIENoYXJ0ZXJzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTaGlwcGluZyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMiLAogICAgICAgICJBdXRob3JpdHkiLAogICAgICAgICJDb25kaXRpb25zIiwKICAgICAgICAiR3VhcmFudGVlcyIsCiAgICAgICAgIkludGVybWVkaWF0ZSBUZXJtcyIsCiAgICAgICAgIk1lYXN1cmUgb2YgRGFtYWdlcyIsCiAgICAgICAgIlRpbWUgQ2hhcnRlcnMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgVHJhbnNmaWVsZCBTaGlwcGluZyBJbmMgdiBNZXJjYXRvciBTaGlwcGluZyBJbmMgKFRoZSBBY2hpbGxlYXMpIiwKICAgICAgICAiKHdsKSBIIFBhcnNvbnMgKExpdmVzdG9jaykgTHRkIHYgVXR0bGV5IEluZ2hhbSAmIENvIiwKICAgICAgICAiKHdsKSBHZW9yZ2UgTWl0Y2hlbGwgKENoZXN0ZXJoYWxsKSBMdGQgdiBGaW5uZXkgTG9jayBTZWVkcyIsCiAgICAgICAgIih3bCkgQXNzb2NpYXRlZCBKYXBhbmVzZSBCYW5rIChJbnRlcm5hdGlvbmFsKSBMdGQgdiBDcmVkaXQgZHUgTm9yZCIsCiAgICAgICAgIih3bCkgRWFzdCB2IE1hdXJlciIsCiAgICAgICAgIih3bCkgRmluZWx2ZXQgQUcgdiBWaW5hdmEgU2hpcHBpbmcgQ28gTHRkLCBUaGUgQ2hyeXNhbGlzIiwKICAgICAgICAiKHdsKSBBbHBlbnN0b3cgdiBSZWdhbGlhbiBQcm9wZXJ0aWVzIiwKICAgICAgICAiKHdsKSBNY0N1dGNoZW9uIHYgRGF2aWQgTWFjQnJheW5lIEx0ZCIsCiAgICAgICAgIih3bCkgU2NoYXdlbCB2IFJlYWRlIiwKICAgICAgICAiKHdsKSBSb3lzY290IFRydXN0IHYgUm9nZXJzb24iLAogICAgICAgICIod2wpIEludGVyZm90byBQaWN0dXJlIExpYnJhcnkgTHRkIHYgU3RpbGV0dG8gVmlzdWFsIFByb2R1Y3Rpb25zIEx0ZCIsCiAgICAgICAgIih3bCkgUmUgU2VsZWN0bW92ZSBMdGQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNDkiLAogICAgIllFQVIiOiAiMjAxNSIsCiAgICAiQ09VTlNFTCI6ICJGb3IgdGhlIGNsYWltYW50OiBOZXZpbCBQaGlsbGlwcywgTmF0YWxpZSBNb29yZS4gRm9yIHRoZSBkZWZlbmRhbnQ6IE1pY2hhZWwgQ29idXJuIFFDLiIsCiAgICAiQUJTVFJBQ1QiOiBbCiAgICAgICAgIlRoZSBjbGFpbWFudCBzaGlwb3duZXIgY2xhaW1lZCB1bmRlciBndWFyYW50ZWVzIGdpdmVuIGJ5IHRoZSBkZWZlbmRhbnQgZ3VhcmFudG9yIGluIHJlc3BlY3Qgb2YgdGhyZWUgY2hhcnRlcnBhcnRpZXMuIiwKICAgICAgICAiVGhlIHNoaXBvd25lciBvd25lZCB0aHJlZSB2ZXNzZWxzIHdoaWNoIGl0IGhhZCBsZXQgb24gbG9uZy10ZXJtIE5ZUEUgMTk5MyBjaGFydGVycGFydGllcyB0byB0aGUgY2hhcnRlcmVyLCBhIHN1YnNpZGlhcnkgb2YgdGhlIGd1YXJhbnRvci4gQWZ0ZXIgYSB5ZWFyLCB0aGUgY2hhcnRlcmVyIGZlbGwgaW50byBhcnJlYXJzIGluIHBheW1lbnQgb2YgaGlyZS4gVGhlIHNoaXBvd25lciB3aXRoZHJldyB0aGUgdmVzc2VscywgdGVybWluYXRlZCB0aGUgY2hhcnRlcnBhcnRpZXMgYW5kIGJlZ2FuIGFyYml0cmF0aW9uIHByb2NlZWRpbmdzIGFnYWluc3QgdGhlIGNoYXJ0ZXJlci4gVGhvc2UgcHJvY2VlZGluZ3Mgd2VyZSBzdGF5ZWQgd2hlbiB0aGUgY2hhcnRlcmVyIHdlbnQgaW50byBsaXF1aWRhdGlvbi4gVGhlIHNoaXBvd25lciBiZWdhbiB0aGUgaW5zdGFudCBwcm9jZWVkaW5ncyBhZ2FpbnN0IHRoZSBndWFyYW50b3IsIGNsYWltaW5nIHRoZSBiYWxhbmNlIGR1ZSB1bmRlciB0aGUgY2hhcnRlcnMsIGRhbWFnZXMgZm9yIGxvc3Mgb2YgYmFyZ2FpbiBpbiByZXNwZWN0IG9mIHRoZSB1bmV4cGlyZWQgdGVybXMsIGFuZCB0aGUgY29zdHMgb2YgdGhlIGFyYml0cmF0aW9uIHByb2NlZWRpbmdzLiBUaGUgZ3VhcmFudG9yIGFzc2VydGVkIHRoYXQgaXQgd2FzIG5vdCBib3VuZCBieSB0aGUgZ3VhcmFudGVlcyBiZWNhdXNlIHRoZXkgaGFkIGJlZW4gc2lnbmVkLCB3aXRob3V0IGF1dGhvcml0eSwgYnkgaXRzIGV4ZWN1dGl2ZSBib2FyZCBjaGFpcm1hbiAoSiksIGFuZCBiZWNhdXNlIHRoZXkgaGFkIG5vdCBiZWVuIHJlZ2lzdGVyZWQgYnkgdGhlIFN0YXRlIEFkbWluaXN0cmF0aW9uIG9mIEZvcmVpZ24gRXhjaGFuZ2UgKFNBRkUpLiBBbHRlcm5hdGl2ZWx5LCBpdCBjbGFpbWVkIHRoYXQgaXQgd2FzIG5vdCBsaWFibGUgaW4gcmVzcGVjdCBvZiB0aGUgdW5leHBpcmVkIHBlcmlvZHMgYmVjYXVzZSB0aGUgcmlnaHQgb2Ygd2l0aGRyYXdhbCB3YXMgYSBjb250cmFjdHVhbCBvcHRpb24gYW5kIHRoZXJlIGhhZCBiZWVuIG5vIHJlcHVkaWF0b3J5IGJyZWFjaCBvciByZW51bmNpYXRpb24uIFRoZSBjZW50cmFsIGlzc3VlcyB3ZXJlIChpKSB3aGV0aGVyIHRoZSBndWFyYW50b3Igd2FzIGJvdW5kIGJ5IHRoZSBndWFyYW50ZWVzOyAoaWkpIHdoZXRoZXIgcGF5bWVudCBvZiBoaXJlIHdhcyBhIGNvbmRpdGlvbiBvZiB0aGUgY2hhcnRlcnBhcnRpZXM7IChpaWkpIGlmIG5vdCwgd2hldGhlciB0aGUgY2hhcnRlcmVyIGhhZCByZXB1ZGlhdGVkIG9yIHJlbm91bmNlZCB0aGUgY2hhcnRlcnBhcnRpZXM7IChpdikgdGhlIGNvcnJlY3QgbWV0aG9kIG9mIGFzc2Vzc2luZyBkYW1hZ2VzIHdoZXJlIHRoZXJlIHdhcyBubyBtYXJrZXQgZm9yIGEgcmVwbGFjZW1lbnQgdGltZSBjaGFydGVyIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIHVuZXhwaXJlZCB0ZXJtOyAodikgd2hldGhlciB0aGUgYXJiaXRyYXRpb24gY29zdHMgZmVsbCB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBndWFyYW50ZWVzLiIKICAgIF0sCiAgICAiTkFNRSI6ICIod2wpIFRpbm4gdiBIb2ZmbWFuICYgQ28iLAogICAgIkNJVCI6ICJbMjAxNV0gRVdIQyA3MTggKENvbW0pIiwKICAgICJDSVRBVElPTiI6ICJUaW5uIHYgSG9mZm1hbiAmYW1wOyBDbyBbMjAxNV0gRVdIQyA3MTggKENvbW0pIiwKICAgICJKVURHRSI6ICJQb3BwbGV3ZWxsIEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkp1ZGdtZW50IGZvciBjbGFpbWFudC4iLAogICAgICAgICIoMSkgSiBoYWQgaGFkIGFjdHVhbCBhdXRob3JpdHkgdG8gYmluZCB0aGUgZ3VhcmFudG9yLiBBY3R1YWwgYXV0aG9yaXR5IHdhcyBnb3Zlcm5lZCBieSBDaGluZXNlIGxhdyBhbmQgd2FzIGVzdGFibGlzaGVkIGlmIHRoZSBndWFyYW50b3IgaGFkIGV4cHJlc3NseSBhdXRob3Jpc2VkIEogdG8gc2lnbiB0aGUgZ3VhcmFudGVlcywgaGFkIGtub3duIHRoYXQgaGUgd2FzIHNpZ25pbmcgYnV0IGhhZCBkb25lIG5vdGhpbmcgdG8gcmVwdWRpYXRlIGhpcyBhc3NlcnRpb24gb2YgYXV0aG9yaXR5LCBvciBpZiBKIGhhZCBiZWVuIHBlcmZvcm1pbmcgYSBkdXR5LXJlbGF0ZWQgYWN0aXZpdHkgaW4gc2lnbmluZy4gVGhlIGV2aWRlbmNlIHNob3dlZCB0aGF0IGFsbCB0aG9zZSBjb25kaXRpb25zIHdlcmUgZXN0YWJsaXNoZWQuIEluIGFueSBldmVudCwgSiBoYWQgaGFkIG9zdGVuc2libGUgYXV0aG9yaXR5LCBvciB0aGUgZ3VhcmFudG9yIGhhZCByYXRpZmllZCB0aGUgZ3VhcmFudGVlcyBieSBhZG9wdGluZyB0aGVtLiBUaGUgU0FGRSBwcm92aXNpb25zIHdlcmUgbm90IGFwcGxpY2FibGUsIEVtZXJhbGRpYW4gTHRkIFBhcnRuZXJzaGlwIHYgV2VsbG1peCBTaGlwcGluZyBMdGQgKFRoZSBWaW5lKSBbMjAxMF0gRVdIQyAxNDExIChDb21tKSwgWzIwMTFdIDEgTGxveWQmIzgyMTc7cyBSZXAuIDMwMSBhcHBsaWVkIChzZWUgcGFyYXMgNjctNzAsIDc4LTkxIG9mIGp1ZGdtZW50KS4gKDIpIFRoZSBhdXRob3JpdGllcyB3ZXJlIGRpdmlkZWQgYXMgdG8gd2hldGhlciB0aGUgcGF5bWVudCBvZiBoaXJlIHdhcyBhIGNvbmRpdGlvbi4gRmFjZWQgd2l0aCB0aGUgY29uZmxpY3RpbmcgZGVjaXNpb25zIG9mIFRlbmF4IFN0ZWFtc2hpcCBDbyB2IE93bmVycyBvZiB0aGUgTW90b3IgVmVzc2VsIEJyaW1uZXMgKFRoZSBCcmltbmVzKSBbMTk3M10gMSBXLkwuUi4gMzg2IGFuZCBLdXdhaXQgUm9ja3MgQ28gdiBBTU4gQnVsa2NhcnJpZXJzIEluYyBbMjAxM10gRVdIQyA4NjUgKENvbW0pLCBbMjAxM10gMiBBbGwgRS5SLiAoQ29tbSkgNjg5IChUaGUgQXN0cmEpLCB0aGUgaW5zdGFudCBjb3VydCBmb2xsb3dlZCB0aGUgZm9ybWVyLCBUaGUgQnJpbW5lcyBhcHBsaWVkLCBUaGUgQXN0cmEgbm90IGFwcGxpZWQuIEluIHRoZSBhYnNlbmNlIG9mIGNsZWFyIGxhbmd1YWdlLCBhIGNvbnRyYWN0dWFsIHRlcm1pbmF0aW9uIGNsYXVzZSB3YXMgdG8gYmUgdHJlYXRlZCBhcyBhbiBvcHRpb24gdG8gY2FuY2VsIHdoaWNoIGRpZCBub3QgY29uZmVyIGdyZWF0ZXIgcmlnaHRzIHRvIGRhbWFnZXMgYXQgY29tbW9uIGxhdyB0aGFuIHdvdWxkIG90aGVyd2lzZSBleGlzdCwgRmluYW5jaW5ncyBMdGQgdiBCYWxkb2NrIFsxOTYzXSAyIFEuQi4gMTA0IGZvbGxvd2VkLiBUaGVyZSB3YXMgbm8gc3VjaCBjbGVhciBsYW5ndWFnZSBpbiB0aGUgaW5zdGFudCBjaGFydGVycGFydGllcywgYW5kIHNvIHRoZSB3aXRoZHJhd2FsIGNsYXVzZSBkaWQgbm90IG1ha2UgcGF5bWVudCBvZiBoaXJlIGEgY29uZGl0aW9uLiBOb3Igd291bGQgcGF5bWVudCBvZiBoaXJlIGJlIHRyZWF0ZWQgYXMgYSBjb25kaXRpb24gd2l0aG91dCB0aGUgd2l0aGRyYXdhbCBjbGF1c2UuIEZpcnN0LCBwcm92aWRpbmcgZm9yIGFuIGV4cHJlc3MgcmlnaHQgb2Ygd2l0aGRyYXdhbCBmb3Igbm9uLXBheW1lbnQgc3VnZ2VzdGVkIHRoYXQsIHdpdGhvdXQgc3VjaCBwcm92aXNpb24sIHRoZXJlIHdvdWxkIGJlIG5vIHN1Y2ggcmlnaHQuIFNlY29uZCwgdGhlcmUgd2FzIGEgcHJlc3VtcHRpb24gaW4gbWVyY2FudGlsZSBjb250cmFjdHMgdGhhdCBzdGlwdWxhdGlvbnMgYXMgdG8gdGhlIHRpbWUgb2YgcGF5bWVudCB3ZXJlIG5vdCBjb25kaXRpb25zIHVubGVzcyBpbmRpY2F0ZWQgaW4gdGhlIGNvbnRyYWN0LiBUaGlyZCwgYnJlYWNoZXMgbWlnaHQgcmFuZ2UgZnJvbSB0aGUgdHJpdmlhbCB0byB0aGUgc2VyaW91cywgd2hpY2ggcG9pbnRlZCB0b3dhcmRzIHRoZSB3aXRoZHJhd2FsIHRlcm0gYmVpbmcgaW5ub21pbmF0ZSwgQnVuZ2UgQ29ycCB2IFRyYWRheCBFeHBvcnQgU0EgWzE5ODFdIDEgVy5MLlIuIDcxMSBjb25zaWRlcmVkIGFuZCBGZWRlcmFsIENvbW1lcmNlICZhbXA7IE5hdmlnYXRpb24gQ28gTHRkIHYgTW9sZW5hIEFscGhhIEluYyAoVGhlIE5hbmZyaSkgWzE5NzldIEEuQy4gNzU3IGZvbGxvd2VkLiBGb3VydGgsIGl0IGNvdWxkIG5vdCBoYXZlIGJlZW4gaW50ZW5kZWQgdGhhdCwgd2l0aG91dCBleHByZXNzIGFncmVlbWVudCwgZnJhY3Rpb25hbGx5IGxhdGUgcGF5bWVudCB3b3VsZCBlbnRpdGxlIHRoZSBvd25lcnMgdG8gdGVybWluYXRlIHRoZSBjaGFydGVyLiBDb25zaWRlcmF0aW9ucyBvZiBjb21tZXJjaWFsIGNlcnRhaW50eSBkaWQgbm90IHBvaW50IHRvIGEgZGlmZmVyZW50IGNvbmNsdXNpb24uIFVudGlsIFRoZSBBc3RyYSAsIHNoaXBvd25lcnMgYW5kIGNoYXJ0ZXJlcnMgaGFkIG9wZXJhdGVkIG9uIHRoZSBmb290aW5nIHRoYXQgdGhlIHBheW1lbnQgb2YgaGlyZSB3YXMgbm90IGEgY29uZGl0aW9uLCBhbmQgdGhlIHN0YW5kYXJkIGZvcm1zIG9mIHRpbWUgY2hhcnRlciBoYWQgbm90IGJlZW4gYWx0ZXJlZCB0byBpbmRpY2F0ZSB0aGF0IGl0IHdhcy4gSW5zb2ZhciBhcyB0aGUgZGljdGEgaW4gQS9TIFRhbmtleHByZXNzIHYgQ29tcGFnbmllIEZpbmFuY2llcmUgQmVsZ2UgZGVzIFBldHJvbGVzIFNBIFsxOTQ5XSBBLkMuIDc2LCBCdW5nZSAsIGFuZCBBZm92b3MgU2hpcHBpbmcgQ28gU0EgdiBSIFBhZ25hbiAmYW1wOyBGcmF0ZWxsaSAoVGhlIEFmb3ZvcykgWzE5ODNdIDEgVy5MLlIuIDE5NSBzdGF0ZWQgdGhhdCBwYXltZW50IG9mIGhpcmUgd2FzIGEgY29uZGl0aW9uLCB0aGV5IGhhZCBub3QgYmVlbiBtYWRlIGFmdGVyIGFyZ3VtZW50IGFuZCB3ZXJlIGNvdW50ZXJiYWxhbmNlZCBieSBUaGUgQnJpbW5lcyA7IFRoZSBQZXRyb2ZpbmEsIEJ1bmdlIGFuZCBUaGUgQWZvdm9zIGNvbnNpZGVyZWQgKHBhcmFzIDkyLTk1LCAxODgtMjA3KS4gKDMpIFRoZSBjaGFydGVyZXIgaGFkIHJlbm91bmNlZCB0aGUgY2hhcnRlcnBhcnRpZXMuIENvbmR1Y3QgZmFsbGluZyBzaG9ydCBvZiByZXB1ZGlhdGlvbiBtaWdodCBhbW91bnQgdG8gcmVudW5jaWF0aW9uIGlmIGEgcmVhc29uYWJsZSBvYnNlcnZlciB3b3VsZCBjb25jbHVkZSB0aGF0IHRoZSBjaGFydGVyZXIgaW50ZW5kZWQgbm90IHRvIHBlcmZvcm0gc28gYXMgdG8gZGVwcml2ZSB0aGUgc2hpcG93bmVyIG9mIHN1YnN0YW50aWFsbHkgaXRzIHdob2xlIGJlbmVmaXQgKHBhcmFzIDIwOC0yMTIpLiAoNCkgV2hlcmUgYSBjaGFydGVyZXIgcmVwdWRpYXRlZCBhIHRpbWUgY2hhcnRlciBhbmQsIGF0IHRoZSBkYXRlIG9mIHRlcm1pbmF0aW9uLCB0aGVyZSB3YXMgYW4gYXZhaWxhYmxlIG1hcmtldCBpbiB3aGljaCB0byBsZXQgdGhlIHZlc3NlbCBvbiBmb3IgdGhlIGZ1bGwgbGVuZ3RoIG9mIHRoZSB1bmV4cGlyZWQgdGVybSBvbiBtYXRlcmlhbGx5IGVxdWl2YWxlbnQgdGVybXMgc2F2ZSBhcyB0byBoaXJlLCBkYW1hZ2VzIHdlcmUgYXNzZXNzZWQgYnkgcmVmZXJlbmNlIHRvIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGNoYXJ0ZXJwYXJ0eSByYXRlIGFuZCB0aGUgcmF0ZSBmb3IgdGhlIHN1YnN0aXR1dGUgY2hhcnRlci4gV2hlcmUgdGhlcmUgd2FzIG5vIHN1Y2ggYXZhaWxhYmxlIG1hcmtldCwgdGhlIG93bmVyIGhhZCB0byBtaXRpZ2F0ZSBoaXMgbG9zcyBieSBlbXBsb3lpbmcgdGhlIHZlc3NlbCBpbiBhIGRpZmZlcmVudCB3YXksIGFuZCBoaXMgbG9zcyB3YXMgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBoaXMgYWN0dWFsIGVhcm5pbmdzIGFuZCB3aGF0IGhlIHdvdWxkIGhhdmUgZWFybmVkIHVuZGVyIHRoZSBvcmlnaW5hbCBjaGFydGVycGFydHksIFpvZGlhYyBNYXJpdGltZSBBZ2VuY2llcyBMdGQgdiBGb3J0ZXNjdWUgTWV0YWxzIEdyb3VwIEx0ZCAoVGhlIEtpbGRhcmUpIFsyMDEwXSBFV0hDIDkwMyAoQ29tbSksIFsyMDExXSAyIExsb3lkJiM4MjE3O3MgUmVwLiAzNjAgYW5kIEdsb3J5IFdlYWx0aCBTaGlwcGluZyBQdGUgTHRkIHYgS29yZWEgTGluZSBDb3JwIChUaGUgV3JlbikgWzIwMTFdIEVXSEMgMTgxOSAoQ29tbSksIFsyMDEyXSAxIEFsbCBFLlIuIChDb21tKSA0MDIgYXBwbGllZC4gVGhlIGF2YWlsYWJpbGl0eSBvZiBzaG9ydGVyIGNoYXJ0ZXJzIGRpZCBub3QgY29uc3RpdHV0ZSBhbiBhdmFpbGFibGUgbWFya2V0IChwYXJhcyAyMTYtMjI3KS4gKDUpIFRoZSBhcmJpdHJhdGlvbiBjb3N0cyBmZWxsIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhlIGd1YXJhbnRlZXMuIFRoZXkgd2VyZSBsb3NzZXMgaW5jdXJyZWQgJiM4MjIwO2FzIGEgcmVzdWx0IG9yIGFyaXNpbmcgb3V0IG9mJiM4MjIxOyB0aGUgY2hhcnRlcmVyJiM4MjE3O3MgZGVmYXVsdCB3aXRoaW4gdGhlIG1lYW5pbmcgb2YgdGhlIGd1YXJhbnRlZXMgKHBhcmFzIDI0MS0yNDYpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgImFwcGVhbC1vdXRzdGFuZGluZyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0NBIiwKICAgICJDQVRFR09SWSI6ICJMYW5kbG9yZCBhbmQgVGVuYW50ICZtZGFzaDsgQ29udHJhY3R1YWwgUmlnaHRzICZtZGFzaDsgRXF1aXRhYmxlIEludGVyZXN0cyAmbWRhc2g7IExpY2VuY2VzICZtZGFzaDsgVGVuYW5jaWVzIGF0IFdpbGwgJm1kYXNoOyBVbmlsYXRlcmFsIENvbnRyYWN0cyAvIFJlYWwgUHJvcGVydHkgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29udHJhY3RzICZtZGFzaDsgQ29udHJhY3QgRm9yIFNhbGUgb2YgTGFuZCAmbWRhc2g7IEZvcm1hdGlvbiBvZiBDb250cmFjdCAmbWRhc2g7IFVuaWxhdGVyYWwgQ29udHJhY3RzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJMYW5kbG9yZCBhbmQgVGVuYW50IiwKICAgICAgICAiQ29udHJhY3R1YWwgUmlnaHRzIiwKICAgICAgICAiRXF1aXRhYmxlIEludGVyZXN0cyIsCiAgICAgICAgIkxpY2VuY2VzIiwKICAgICAgICAiVGVuYW5jaWVzIGF0IFdpbGwiLAogICAgICAgICJVbmlsYXRlcmFsIENvbnRyYWN0cyIsCiAgICAgICAgIlJlYWwgUHJvcGVydHkgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29udHJhY3RzIiwKICAgICAgICAiQ29udHJhY3QgRm9yIFNhbGUgb2YgTGFuZCIsCiAgICAgICAgIkZvcm1hdGlvbiBvZiBDb250cmFjdCIsCiAgICAgICAgIlVuaWxhdGVyYWwgQ29udHJhY3RzIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIEFscGVuc3RvdyB2IFJlZ2FsaWFuIFByb3BlcnRpZXMiLAogICAgICAgICIod2wpIEJhcnJ5IHYgRGF2aWVzIiwKICAgICAgICAiKHdsKSBIb2x3ZWxsIFNlY3VyaXRpZXMgTHRkIHYgSHVnaGVzIiwKICAgICAgICAiKHdsKSBDb3VydG5leSAmIEZhaXJiYWlybiBMdGQgdiBUb2xhaW5pIEJyb3MgKEhvdGVscykgTHRkIiwKICAgICAgICAiKHdsKSBBc3NvY2lhdGVkIEphcGFuZXNlIEJhbmsgKEludGVybmF0aW9uYWwpIEx0ZCB2IENyZWRpdCBkdSBOb3JkIiwKICAgICAgICAiKHdsKSBHcmVhdCBQZWFjZSBTaGlwcGluZyBMdGQgdiBUc2F2bGlyaXMgKEludGVybmF0aW9uYWwpIEx0ZCIsCiAgICAgICAgIih3bCkgVGVrZGF0YSBJbnRlcmNvbm5lY3Rpb25zIEx0ZCB2IEFtcGhlbm9sIEx0ZCIsCiAgICAgICAgIih3bCkgQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIih3bCkgVGhlIEJyaW1uZXMiLAogICAgICAgICIod2wpIENpdHkgYW5kIFdlc3RtaW5zdGVyIFByb3BlcnRpZXMgdiBNdWRkIiwKICAgICAgICAiKHdsKSBQYXJrZXIgdiBDbGFyayIsCiAgICAgICAgIih3bCkgRmlzaGVyIHYgQmVsbCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE1MCIsCiAgICAiWUVBUiI6ICIxOTc4IiwKICAgICJOQU1FIjogIih3bCkgRGF1bGlhIEx0ZCB2IEZvdXIgTWlsbGJhbmsgTm9taW5lZXMgTHRkIiwKICAgICJDSVQiOiAiWzE5NzhdIENoIDIzMSIsCiAgICAiQ0lUQVRJT04iOiAiRGF1bGlhIEx0ZCB2IEZvdXIgTWlsbGJhbmsgTm9taW5lZXMgTHRkIFsxOTc4XSBDaCAyMzEiLAogICAgIkpVREdFIjogIkdvZmYgTEo7IEJ1Y2tsZXkgTEo7IE9yciBMSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiZGlzbWlzc2luZyB0aGUgYXBwZWFsLCB0aGF0ICgxKSBEIEx0ZCwgaGF2aW5nIHNhdGlzZmllZCB0aGUgY29uZGl0aW9ucyBzcGVjaWZpZWQsIHRoZXJlIHdhcyBhIHZhbGlkIHVuaWxhdGVyYWwgY29udHJhY3Qgb2Ygd2hpY2ggRiBMdGQgd2VyZSBpbiBicmVhY2g7IGFsdGhvdWdoIHRoZSB1bmlsYXRlcmFsIGNvbnRyYWN0IHdhcyBub3QgZm9yIHRoZSBzYWxlIG9mIGxhbmQgb3IgYW4gaW50ZXJlc3QgaW4gbGFuZCwgcy40MCBvZiB0aGUgQWN0IGFwcGxpZWQgdG8gaXQgYW5kLCBpbiB0aGUgYWJzZW5jZSBvZiBhIG1lbW9yYW5kdW0gaW4gd3JpdGluZywgdGhlcmUgaGFkIHRvIGJlIGFuIGFjdCBvZiBwYXJ0IHBlcmZvcm1hbmNlIGJlZm9yZSBpdCBjb3VsZCBiZSBlbmZvcmNlZDsgKDIpIEQgTHRkJiM4MjE3O3MgYWN0cyBkaWQgbm90IHBvaW50IHRvIHRoZXJlIGJlaW5nIHNvbWUgY29udHJhY3Qgc28gdGhlcmUgd2FzIG5vIGFjdCBvZiBwYXJ0IHBlcmZvcm1hbmNlIHRvIGV4Y2x1ZGUgdGhlIHByb3Zpc2lvbnMgb2Ygcy40MCgxKSBvZiB0aGUgQWN0LiAoV2FybG93IHYgSGFycmlzb24gMTIwIEUuUi4gOTIwIGRpc3Rpbmd1aXNoZWQgYW5kIEpvaG5zdG9uIHYgQm95ZXMgWzE4OTldIDIgQ2guIDczIGRpc3Rpbmd1aXNoZWQ7IFN0ZWFkbWFuIHYgU3RlYWRtYW4gWzE5NzZdIEEuQy4gNTM2IGFwcGxpZWQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb21tZXJjaWFsIExhdyAmbWRhc2g7IEFkdmVydGlzZW1lbnRzICZtZGFzaDsgQ29uZGl0aW9uYWwgT2ZmZXJzICZtZGFzaDsgQ29uc2lkZXJhdGlvbiAmbWRhc2g7IEluY29udmVuaWVuY2UgJm1kYXNoOyBOb3RpY2UgJm1kYXNoOyBPZmZlciBhbmQgQWNjZXB0YW5jZSAmbWRhc2g7IFBlcmZvcm1hbmNlICZtZGFzaDsgVW5pbGF0ZXJhbCBDb250cmFjdHMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnRyYWN0cyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb21tZXJjaWFsIExhdyIsCiAgICAgICAgIkFkdmVydGlzZW1lbnRzIiwKICAgICAgICAiQ29uZGl0aW9uYWwgT2ZmZXJzIiwKICAgICAgICAiQ29uc2lkZXJhdGlvbiIsCiAgICAgICAgIkluY29udmVuaWVuY2UiLAogICAgICAgICJOb3RpY2UiLAogICAgICAgICJPZmZlciBhbmQgQWNjZXB0YW5jZSIsCiAgICAgICAgIlBlcmZvcm1hbmNlIiwKICAgICAgICAiVW5pbGF0ZXJhbCBDb250cmFjdHMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIih3bCkgRmlzaGVyIHYgQmVsbCIsCiAgICAgICAgIih3bCkgSGFydmVsYSBJbnZlc3RtZW50cyBMdGQgdiBSb3lhbCBUcnVzdCBvZiBDYW5hZGEgTHRkIiwKICAgICAgICAiKHdsKSBJbnRlcmZvdG8gUGljdHVyZSBMaWJyYXJ5IEx0ZCB2IFN0aWxldHRvIFZpc3VhbCBQcm9kdWN0aW9ucyBMdGQiLAogICAgICAgICIod2wpIE1jQ3V0Y2hlb24gdiBEYXZpZCBNYWNCcmF5bmUgTHRkIiwKICAgICAgICAiKHdsKSBDaGFwcGVsbCAmIENvIHYgTmVzdGxlIENvIEx0ZCIsCiAgICAgICAgIih3bCkgTCBKIEtvcmJldGlzIHYgVHJhbnNncmFpbiBTaGlwcGluZyBCViIsCiAgICAgICAgIih3bCkgS2Fyc2FsZXMgKEhhcnJvdykgTHRkIHYgV2FsbGlzIiwKICAgICAgICAiKHdsKSBUZWtkYXRhIEludGVyY29ubmVjdGlvbnMgTHRkIHYgQW1waGVub2wgTHRkIiwKICAgICAgICAiKHdsKSBIb2x3ZWxsIFNlY3VyaXRpZXMgTHRkIHYgSHVnaGVzIiwKICAgICAgICAiKHdsKSBEYXVsaWEgTHRkIHYgRm91ciBNaWxsYmFuayBOb21pbmVlcyBMdGQiLAogICAgICAgICIod2wpIFJlIFNlbGVjdG1vdmUgTHRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTUxIiwKICAgICJZRUFSIjogIjE4OTMiLAogICAgIkNPVU5TRUwiOiAiRm9yIHRoZSBhcHBlbGxhbnQ6IE1yIEZpbmxheSBRQywgVCBUZXJyZWxsLiBGb3IgdGhlIHJlc3BvbmRlbnQ6IE1yIERpY2tlbnMgUUMsIFdCIEFsbGVuLiIsCiAgICAiQUJTVFJBQ1QiOiBbCiAgICAgICAgIlRoZSBhcHBlbGxhbnQgY29tcGFueSAoQikgYXBwZWFsZWQgYWdhaW5zdCBhIGRlY2lzaW9uIHRoYXQgaXQgd2FzIGxpYWJsZSBmb3IgYSBjbGFpbSBmb3IgZGFtYWdlcyBicm91Z2h0IGJ5IHRoZSByZXNwb25kZW50IChDKS4iLAogICAgICAgICJCIHdhcyB0aGUgbWFudWZhY3R1cmVyIG9mIGEgbWVkaWNhbCBwcmVwYXJhdGlvbiBjYWxsZWQgdGhlIGNhcmJvbGljIHNtb2tlIGJhbGwsIHdoaWNoIHdhcyBkZXNpZ25lZCB0byBwcmV2ZW50IHRoZSB1c2VyIGZyb20gY29udHJhY3RpbmcgZmx1LiBCIHBsYWNlZCBhbiBhZHZlcnRpc2VtZW50IGluIG5ld3NwYXBlcnMgd2hpY2ggc3RhdGVkIHRoYXQgYSByZXdhcmQgb2YgXHUwMGEzMTAwIHdvdWxkIGJlIHBhaWQgdG8gYW55b25lIHdobyBjb250cmFjdGVkIGZsdSBvciBhIGNvbGQgYWZ0ZXIgdXNpbmcgdGhlIHNtb2tlIGJhbGwgdGhyZWUgdGltZXMgcGVyIGRheSBmb3IgdHdvIHdlZWtzIGFjY29yZGluZyB0byB0aGUgZGlyZWN0aW9ucyBzdXBwbGllZCB3aXRoIGVhY2ggYmFsbC4gVGhlIGFkdmVydGlzZW1lbnQgZnVydGhlciBzdGF0ZWQgdGhhdCBCIGhhZCBkZXBvc2l0ZWQgXHUwMGEzMSwwMDAgd2l0aCBhIG5hbWVkIGJhbmsgdG8gc2hvdyB0aGUgc2luY2VyaXR5IG9mIGl0cyBvZmZlci4gQyBwdXJjaGFzZWQgYSBiYWxsIGluIHJlbGlhbmNlIG9uIEImIzgyMTc7cyBhZHZlcnQgYW5kIHVzZWQgaXQgYXMgZGlyZWN0ZWQgYnV0IGNvbnRyYWN0ZWQgZmx1IHdoaWxzdCB1c2luZyBpdC4iLAogICAgICAgICJCIGFyZ3VlZCB0aGF0IGl0cyBhZHZlcnRpc2VtZW50IGRpZCBub3QgYW1vdW50IHRvIGEgY29udHJhY3R1YWxseSBiaW5kaW5nIHByb21pc2UgYXMgaXQgd2FzIGFkZHJlc3NlZCB0byB0aGUgd29ybGQgaW4gZ2VuZXJhbCwgaXQgd2FzIHRvbyB2YWd1ZSwgYW5kIHdhcyBub3QgbGltaXRlZCBieSB0aW1lLiBCIGZ1cnRoZXIgYXJndWVkIHRoYXQgaWYgdGhlIGFkdmVydCB3YXMgYW4gb2ZmZXIsIEMgaGFkIG5vdCBjb21tdW5pY2F0ZWQgaGVyIGludGVudGlvbiB0byBhY2NlcHQgaXQuIgogICAgXSwKICAgICJOQU1FIjogIih3bCkgQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ28iLAogICAgIkNJVCI6ICJbMTg5M10gMSBRQiAyNTYiLAogICAgIkNJVEFUSU9OIjogIkNhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvIFsxODkzXSAxIFFCIDI1NiIsCiAgICAiSlVER0UiOiAiTGluZGxleSBMSjsgQm93ZW4gTEo7IEFMIFNtaXRoIExKIiwKICAgICJIRUxEIjogWwogICAgICAgICJBcHBlYWwgZGlzbWlzc2VkLiIsCiAgICAgICAgIigxKSBUaGUgYWR2ZXJ0aXNlbWVudCBzdGF0ZWQgdGhhdCBcdTAwYTMxLDAwMCB3YXMgbG9kZ2VkIGF0IGEgYmFuay4gVGhlcmVmb3JlIGl0IGNvdWxkIG5vdCBiZSBzYWlkIHRoYXQgdGhlIHN0YXRlbWVudCB0aGF0IFx1MDBhMzEwMCB3b3VsZCBiZSBwYWlkIHdhcyBpbnRlbmRlZCB0byBiZSBtZXJlIHB1ZmYuIEl0IHdhcyBhbiBvZmZlciBtYWRlIHRvIGFsbCB0aGUgd29ybGQsIGJ1dCB0aGVyZSB3YXMgbm8gcmVhc29uIHdoeSBhbiBvZmZlciBzaG91bGQgbm90IGJlIG1hZGUgdG8gYWxsIHRoZSB3b3JsZCB3aGljaCB3YXMgdG8gcmlwZW4gaW50byBhIGNvbnRyYWN0IHdoZW4gYW55b25lIGNhbWUgZm9yd2FyZCBhbmQgcGVyZm9ybWVkIHRoZSBjb25kaXRpb24gcmVxdWlyZWQsIFNwZW5jZXIgdiBIYXJkaW5nICgxODY5LTcwKSBMLlIuIDUgQy5QLiA1NjEgY29uc2lkZXJlZC4gKDIpIEdlbmVyYWxseSwgd2hlbiBhbiBvZmZlciB3YXMgbWFkZSwgaW4gb3JkZXIgdG8gbWFrZSBhIGJpbmRpbmcgY29udHJhY3QgaXQgd2FzIG5lY2Vzc2FyeSBub3Qgb25seSB0aGF0IGl0IHdhcyBhY2NlcHRlZCBidXQgdGhhdCB0aGUgYWNjZXB0YW5jZSB3YXMgbm90aWZpZWQuIEhvd2V2ZXIsIHRoZSBpbnN0YW50IGNhc2Ugd2FzIGFuIGV4Y2VwdGlvbiB0byB0aGF0IHJ1bGU7IHRoZSBub3RpZmljYXRpb24gb2YgYWNjZXB0YW5jZSBkaWQgbm90IGhhdmUgdG8gcHJlY2VkZSB0aGUgcGVyZm9ybWFuY2UuIFRoZSBwZXJzb24gd2hvIG1hZGUgdGhlIG9mZmVyIGNvdWxkIGRpc3BlbnNlIHdpdGggbm90aWNlIGlmIGhlIHRob3VnaHQgaXQgZGVzaXJhYmxlIHRvIGRvIHNvLiBCIGhhZCBzaG93biBieSBpdHMgbGFuZ3VhZ2UgYW5kIGZyb20gdGhlIG5hdHVyZSBvZiB0aGUgdHJhbnNhY3Rpb24gdGhhdCBpdCBkaWQgbm90IGV4cGVjdCBhbmQgZGlkIG5vdCByZXF1aXJlIG5vdGljZSBvZiBhY2NlcHRhbmNlLCBhcGFydCBmcm9tIG5vdGljZSBvZiB0aGUgcGVyZm9ybWFuY2UuIEFueW9uZSB3aG8gcGVyZm9ybWVkIHRoZSBjb25kaXRpb25zIHNldCBvdXQgaW4gdGhlIGFkdmVydGlzZW1lbnQgaGFkIGFjY2VwdGVkIHRoZSBvZmZlciwgV2lsbGlhbXMgdiBDYXJ3YXJkaW5lIDExMCBFLlIuIDU5MCBhbmQgQnJvZ2RlbiB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IENvICgxODc3KSAyIEFwcC4gQ2FzLiA2NjYgYXBwbGllZC4gVGhlIGFkdmVydGlzZW1lbnQgdGhlcmVmb3JlIGNvbnRhaW5lZCBhbGwgb2YgdGhlIG5lY2Vzc2FyeSBlbGVtZW50cyB0byBmb3JtIGEgYmluZGluZyBjb250cmFjdCBlbmZvcmNlYWJsZSBpbiBsYXcsIHNhdmUgZm9yIHR3byBwb3RlbnRpYWwgcHJvYmxlbXM6IGZpcnN0bHksIGl0IHdhcyBub3QgbGltaXRlZCBieSB0aW1lLCBhbmQgc2Vjb25kbHkgdGhlIHF1ZXN0aW9uIG9mIGNvbnNpZGVyYXRpb24uICgzKSBBIHJlYXNvbmFibGUgcGVyc29uIHdvdWxkIG5vdCB1bmRlcnN0YW5kIEImIzgyMTc7cyBhZHZlcnRpc2VtZW50IHRvIG1lYW4gdGhhdCBpZiBhIHBlcnNvbiB1c2VkIGEgc21va2UgYmFsbCB0aHJlZSB0aW1lcyBkYWlseSBmb3IgdHdvIHdlZWtzIHRoZXkgd2VyZSBndWFyYW50ZWVkIGFnYWluc3QgY29udHJhY3RpbmcgZmx1IGZvciB0aGUgcmVzdCBvZiB0aGVpciBsaWZlLiBUaGVyZSB3ZXJlIGEgbnVtYmVyIG9mIHJlYXNvbmFibGUgY29uc3RydWN0aW9ucyB0byBiZSBwdXQgb24gdGhlIGFkdmVydGlzZW1lbnQgYnV0IHRoZSBwcmVmZXJyZWQgY29uc3RydWN0aW9uIHdhcyB0aGF0IHRoZSByZXdhcmQgd2FzIG9mZmVyZWQgdG8gYW55IHBlcnNvbiB3aG8gY29udHJhY3RlZCBmbHUgaW4gdGhlIGN1cnJlbnQgZXBpZGVtaWMgd2l0aGluIGEgcmVhc29uYWJsZSB0aW1lIGFmdGVyIGhhdmluZyB1c2VkIHRoZSBzbW9rZSBiYWxsLCBvciB3aGlsc3QgdXNpbmcgdGhlIGJhbGwuICg0KSBBIHVzZSBieSB0aGUgcHVibGljIG9mIHRoZSBzbW9rZSBiYWxsIGFzIGEgcmVzdWx0IG9mIHRoZSBhZHZlcnRpc2VtZW50IHdhcyBkaXJlY3RseSBiZW5lZmljaWFsIHRvIEIuIFRoZXJlZm9yZSwgQiByZWNlaXZlZCBhbiBhZHZhbnRhZ2Ugd2hpY2ggd2FzIGVub3VnaCB0byBjb25zdGl0dXRlIGEgY29uc2lkZXJhdGlvbi4gSW4gYWRkaXRpb24sIGluY29udmVuaWVuY2Ugc3VzdGFpbmVkIGJ5IG9uZSBwYXJ0eSBhdCB0aGUgcmVxdWVzdCBvZiB0aGUgb3RoZXIgd2FzIGVub3VnaCB0byBjcmVhdGUgYSBjb25zaWRlcmF0aW9uLCBHZXJoYXJkIHYgQmF0ZXMgMTE4IEUuUi4gODQ1IGNvbnNpZGVyZWQuIFRoZSBwZXJzb24gd2hvIGFjdGVkIHVwb24gdGhlIGFkdmVydGlzZW1lbnQgcHV0IGhpbXNlbGYgdG8gc29tZSBpbmNvbnZlbmllbmNlIGF0IEImIzgyMTc7cyByZXF1ZXN0LiBUaGF0IHdhcyBhbXBsZSBjb25zaWRlcmF0aW9uIGZvciBCJiM4MjE3O3MgcHJvbWlzZS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0hDIiwKICAgICJDQVRFR09SWSI6ICJDb25zdHJ1Y3Rpb24gTGF3IE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IERpc3B1dGUgUmVzb2x1dGlvbiAmbWRhc2g7IEFkanVkaWNhdGlvbiAmbWRhc2g7IEFkanVkaWNhdGlvbiAmbWRhc2g7IEFkanVkaWNhdG9ycycgUG93ZXJzIGFuZCBEdXRpZXMgJm1kYXNoOyBDb25zdHJ1Y3Rpb24gQ29udHJhY3RzICZtZGFzaDsgRW5mb3JjZW1lbnQgJm1kYXNoOyBKdXJpc2RpY3Rpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgUGFya2VyIHYgQ2xhcmsiLAogICAgICAgICIod2wpIENoYXJ0YnJvb2sgTHRkIHYgUGVyc2ltbW9uIEhvbWVzIEx0ZCIsCiAgICAgICAgIih3bCkgVGhlIEJyaW1uZXMiLAogICAgICAgICIod2wpIEN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nICYgRHllaW5nIENvIiwKICAgICAgICAiKHdsKSBMIEogS29yYmV0aXMgdiBUcmFuc2dyYWluIFNoaXBwaW5nIEJWIiwKICAgICAgICAiKHdsKSBBbHBlbnN0b3cgdiBSZWdhbGlhbiBQcm9wZXJ0aWVzIiwKICAgICAgICAiKHdsKSBTY2FsbHkgdiBTb3V0aGVybiBIZWFsdGggYW5kIFNvY2lhbCBTZXJ2aWNlcyBCb2FyZCIsCiAgICAgICAgIih3bCkgUmUgU2VsZWN0bW92ZSBMdGQiLAogICAgICAgICIod2wpIEJsYWNrcG9vbCBhbmQgRnlsZGUgQWVyb2NsdWIgTHRkIHYgQmxhY2twb29sIEJvcm91Z2ggQ291bmNpbCIsCiAgICAgICAgIih3bCkgUGhhcm1hY2V1dGljYWwgU29jaWV0eSBvZiBHcmVhdCBCcml0YWluIHYgQm9vdHMgQ2FzaCBDaGVtaXN0cyAoU291dGhlcm4pIEx0ZCIsCiAgICAgICAgIih3bCkgQmFycnkgdiBEYXZpZXMiLAogICAgICAgICIod2wpIFJhbXNnYXRlIFZpY3RvcmlhIEhvdGVsIHYgTW9udGVmaW9yZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE1MiIsCiAgICAiWUVBUiI6ICIyMDE1IiwKICAgICJDT1VOU0VMIjogIkZvciB0aGUgY2xhaW1hbnQ6IFdpbGxpYW0gV2ViYi4gRm9yIHRoZSBkZWZlbmRhbnQ6IEJlbiBQaWxsaW5nIFFDLCBBbGV4YW5kZXIgV3JpZ2h0LiIsCiAgICAiQUJTVFJBQ1QiOiBbCiAgICAgICAgIkEgY2xhaW1hbnQgYXBwbGllZCBmb3Igc3VtbWFyeSBqdWRnbWVudCBvbiBpdHMgY2xhaW0gdG8gZW5mb3JjZSBhbiBhZGp1ZGljYXRvciYjODIxNztzIGF3YXJkLiIsCiAgICAgICAgIlRoZSBjbGFpbWFudCBoYWQgY2FycmllZCBvdXQgZ3JvdW5kd29ya3MgZm9yIHRoZSBkZWZlbmRhbnQgdW5kZXIgYSBjb25zdHJ1Y3Rpb24gY29udHJhY3QuIFRoZXJlIHdhcyBhIGRpc3B1dGUgYmV0d2VlbiB0aGUgcGFydGllcyBhcyB0byBob3cgdGhlIGNvbnRyYWN0IHdhcyBmb3JtZWQuIFRoZSBjbGFpbWFudCYjODIxNztzIGNhc2Ugd2FzIHRoYXQgaXQgd2FzIGZvcm1lZCBieSB0aGUgZGVmZW5kYW50JiM4MjE3O3MgYWNjZXB0YW5jZSBvZiBpdHMgcHJpY2UgYnJlYWtkb3duLiBUaGUgZGVmZW5kYW50IGhhZCBlbWFpbGVkIHRoZSBjbGFpbWFudCBvbiA1IERlY2VtYmVyIDIwMTQsIHN0YXRpbmcgdGhhdCBpdCB3b3VsZCAmIzgyMjA7cGxhY2UgdGhlIG9yZGVyIGZvciB0aGUgYWdyZWVkIHZhbHVlIGFzIGF0dGFjaGVkIFtpbiB0aGUgY2xhaW1hbnQmIzgyMTc7cyBicmVha2Rvd25dJiM4MjIwOyBhbmQgd291bGQgJiM4MjIwO3JhaXNlIHRoZSBsZXR0ZXIgb2YgaW50ZW50IGZvciB0aGlzIHZhbHVlIG9uIE1vbmRheSYjODIyMTsuIEl0IHdhcyB0aGUgZGVmZW5kYW50JiM4MjE3O3MgY2FzZSB0aGF0IHRoZSBjb250cmFjdCB3YXMgZm9ybWVkIGVpdGhlciBieSB0aGUgbGV0dGVyIG9mIGludGVudCwgb3IgYnkgdGhlIGxldHRlciBvZiBpbnRlbnQgcGx1cyBlbWFpbHMgYW5kIHRoZSBwbGFjaW5nIG9mIGEgc3ViLWNvbnRyYWN0IG9yZGVyIHdoaWNoIGluY29ycG9yYXRlZCBhIHN0YW5kYXJkIGZvcm0gb2YgSkNUIHdvcmRpbmcuIFRoZSBkZWZlbmRhbnQgaGFkIHNlbnQgdGhlIGxldHRlciBvZiBpbnRlbnQgb24gOCBEZWNlbWJlciwgYnV0IHRoZSBjbGFpbWFudCBkZW5pZWQgcmVjZWl2aW5nIGl0LiBTb21lIG1vbnRocyBsYXRlciwgdGhlIGRlZmVuZGFudCBzZW50IHRoZSBzdWItY29udHJhY3Qgb3JkZXIgdG8gdGhlIGNsYWltYW50LCBzcGVjaWZ5aW5nIHZhcmlvdXMgY29udHJhY3QgdGVybXMuIFRoZSBjbGFpbWFudCBkaWQgbm90IHNpZ24gb3IgcmV0dXJuIGl0LiBIb3dldmVyLCB0aGUgY2xhaW1hbnQgbGF0ZXIgcmFpc2VkIGEgbnVtYmVyIG9mIGlzc3VlcyBieSBlbWFpbCBjb25jZXJuaW5nIHBheW1lbnQsIGFuZCB0aGUgZGVmZW5kYW50IGFzc2VydGVkIHRoYXQgdGhlIHN1Yi1jb250cmFjdCBvcmRlciBoYWQgYmVlbiBhY2NlcHRlZCBieSBjb25kdWN0LiBGb2xsb3dpbmcgYSBwYXltZW50IGRpc3B1dGUsIGFuIGFkanVkaWNhdG9yIGZvdW5kIHRoYXQgYSBwYXkgbGVzcyBub3RpY2Ugd2FzIGludmFsaWQgYXMgaXQgaGFkIG5vdCBiZWVuIG1hZGUgaW4gdGltZSwgYW5kIHRoYXQgdGhlIGZ1bGwgYW1vdW50IGNsYWltZWQgd2FzIGR1ZS4iLAogICAgICAgICJUaGUgY2xhaW1hbnQgc3VibWl0dGVkIHRoYXQgdGhlIGFkanVkaWNhdG9yIHdvdWxkIGhhdmUgYWNxdWlyZWQganVyaXNkaWN0aW9uIGJ5IHRoZSBzYW1lIHByb2NlZHVyYWwgcm91dGUgd2hpY2hldmVyIGNvbnRyYWN0dWFsIGludGVycHJldGF0aW9uIHdhcyBwcmVmZXJyZWQsIGFuZCBldmVuIGlmIGhlIGhhZCBtaXNpbnRlcnByZXRlZCB0aGUgc3Vic3RhbnRpdmUgY29udHJhY3R1YWwgcHJvdmlzaW9ucyB0aGF0IHdhcyBubyBiYXIgdG8gZW5mb3JjZW1lbnQgb2YgaGlzIGRlY2lzaW9uLiIKICAgIF0sCiAgICAiTkFNRSI6ICIod2wpIEJyb2dkZW4gdiBNZXRyb3BvbGl0YW4gUmFpbHdheSIsCiAgICAiQ0lUIjogIlsyMDE1XSBFV0hDIDM3MzcgKFRDQykiLAogICAgIkNJVEFUSU9OIjogIkJyb2dkZW4gdiBNZXRyb3BvbGl0YW4gUmFpbHdheSBbMjAxNV0gRVdIQyAzNzM3IChUQ0MpIiwKICAgICJKVURHRSI6ICJTdHVhcnQtU21pdGggSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQXBwbGljYXRpb24gZ3JhbnRlZC4iLAogICAgICAgICIoMSkgSXQgd2FzIHJlYXNvbmFibHkgYXJndWFibGUgdGhhdCB0aGUgcGFydGllcyBoYWQgcHJvY2VlZGVkIG9uIHRoZSBiYXNpcyBvZiB0aGUgcHJvbWlzZWQgbGV0dGVyIG9mIGludGVudCBhbmQgc3Vic2VxdWVudGx5IG9uIHRoZSBiYXNpcyBvZiB0aGUgbGV0dGVyIG9mIGludGVudCBwbHVzIHRoZSBlbWFpbHMuIFVuZGVyIGVpdGhlciBvZiB0aG9zZSByb3V0ZXMsIHRoZSBTY2hlbWUgZm9yIENvbnN0cnVjdGlvbiBDb250cmFjdHMgKEVuZ2xhbmQgYW5kIFdhbGVzKSBSZWd1bGF0aW9ucyAxOTk4IHdvdWxkIGhhdmUgYXBwbGllZCwgd2l0aCBubyBzcGVjaWZpZWQgYWRqdWRpY2F0b3Igbm9taW5hdGluZyBib2R5LCBzbyB0aGF0IHRoZSBwcm9jZWR1cmFsIHJvdXRlIHRvIGFkanVkaWNhdGlvbiB3b3VsZCBoYXZlIGJlZW4gdGhlIHNhbWUgYXMgaWYgdGhlIDUgRGVjZW1iZXIgMjAxNCBlbWFpbCBoYWQgZm9ybWVkIHRoZSBiYXNpcyBvZiB0aGUgY29udHJhY3QuIEhvd2V2ZXIsIHRoZXJlIHdlcmUgYSBudW1iZXIgb2YgcHJvYmxlbXMgd2l0aCB0aGUgbGV0dGVyIG9mIGludGVudC4gSXQgcmVmZXJyZWQgdG8gYSBmb3JtIG9mIEpDVCBjb250cmFjdCB3aGljaCBkaWQgbm90IGV4aXN0LiBXaGlsZSBpdCB3YXMgY2xlYXIgdGhhdCBzb21ldGhpbmcgaGFkIGdvbmUgd3Jvbmcgd2l0aCB0aGUgbGFuZ3VhZ2UsIGl0IHdhcyBub3QgY2xlYXIgd2hhdCBhIHJlYXNvbmFibGUgcGVyc29uIHdvdWxkIGhhdmUgdW5kZXJzdG9vZCB0aGUgcGFydGllcyB0byBoYXZlIG1lYW50LCBDaGFydGJyb29rIEx0ZCB2IFBlcnNpbW1vbiBIb21lcyBMdGQgWzIwMDldIFVLSEwgMzgsIFsyMDA5XSAxIEEuQy4gMTEwMSBmb2xsb3dlZC4gVGhlIEpDVCB0ZXJtcyB3ZXJlIG5vdCBpbmNvcnBvcmF0ZWQuIEluIGFkZGl0aW9uLCBubyB2YWx1YXRpb24gc2NoZWR1bGUgaGFkIGJlZW4gYXR0YWNoZWQgdG8gdGhlIGxldHRlciBvZiBpbnRlbnQsIHNvIHRoZXJlIHdhcyBubyB3YXkgb2YgaWRlbnRpZnlpbmcgdGhlIGRhdGVzIGZvciBwYXltZW50LiBUaGUgbWVjaGFuaXNtIHByb3ZpZGVkIGJ5IHRoZSBsZXR0ZXIgd2FzIGlub3BlcmFibGUgYW5kIGluYWRlcXVhdGUuIFRoZSBkZWZlbmRhbnQgcmVsaWVkIG9uIGVtYWlscyB0byBwbHVnIHRoZSBnYXAgbGVmdCBieSB0aGUgZmFpbHVyZSB0byBwcm92aWRlIGEgdmFsdWF0aW9uIHNjaGVkdWxlLiBIb3dldmVyLCBldmVuIGlmIHRoZSBsZXR0ZXIgcGx1cyB0aGUgZW1haWxzIHdhcyB0aGUgcHJvcGVyIGJhc2lzIGZvciB0aGUgcGFydGllcyYjODIxNzsgY29udHJhY3R1YWwgb2JsaWdhdGlvbnMsIHRoZXkgbWFkZSBwYXltZW50IGNvbmRpdGlvbmFsIHVwb24gdGhlIHBlcmZvcm1hbmNlIG9mIG9ibGlnYXRpb25zIHVuZGVyIHRoZSBtYWluIGNvbnRyYWN0LCB3aGljaCB3YXMgYW4gaW5hZGVxdWF0ZSBtZWNoYW5pc20gcHVyc3VhbnQgdG8gdGhlIEhvdXNpbmcgR3JhbnRzLCBDb25zdHJ1Y3Rpb24gYW5kIFJlZ2VuZXJhdGlvbiBBY3QgMTk5NiBzLjExMC4gVGhlcmVmb3JlLCB0aGUgU2NoZW1lIGFwcGxpZWQgdG8gZXN0YWJsaXNoIHRoZSByZXF1aXNpdGUgZGF0ZSBmb3IgcGF5bWVudCBhbmQgcGF5IGxlc3Mgbm90aWNlcy4gVGhhdCBtZWFudCB0aGVyZSB3b3VsZCBoYXZlIGJlZW4gbm8gc3Vic3RhbnRpdmUgZGlmZmVyZW5jZSBpbiB0aGUgYWRqdWRpY2F0b3ImIzgyMTc7cyBkZWNpc2lvbiBvbiB0aGUgYWJzZW5jZSBvZiBhIHZhbGlkIHBheSBsZXNzIG5vdGljZSAoc2VlIHBhcmFzIDEyLTE3LCAyMCwgMzcgb2YganVkZ21lbnQpLiIsCiAgICAgICAgIigyKSBJdCB3YXMgYWxzbyByZWFzb25hYmx5IGFyZ3VhYmxlIHRoYXQgdGhlIGNsYWltYW50IGhhZCBhY2NlcHRlZCB0aGUgc3ViLWNvbnRyYWN0IG9yZGVyIGJ5IGNvbmR1Y3QuIFRoZSBTY2hlbWUgd291bGQgaGF2ZSBhcHBsaWVkIHdpdGggbm8gc3BlY2lmaWVkIG5vbWluYXRpbmcgYm9keSBzbyB0aGF0IHRoZSBwcm9jZWR1cmFsIHJvdXRlIHRvIGFkanVkaWNhdGlvbiB3b3VsZCBoYXZlIGJlZW4gdGhlIHNhbWUgYXMgaWYgdGhlIERlY2VtYmVyIGVtYWlsIGZvcm1lZCB0aGUgYmFzaXMgb2YgdGhlIGNvbnRyYWN0LiBJdCB3YXMgcmVhc29uYWJseSBhcmd1YWJsZSB0aGF0LCBpZiBvcGVyYXRpdmUsIHRoZSBzdWItY29udHJhY3Qgb3JkZXIgbWFkZSBwcm92aXNpb24gZm9yIHBheW1lbnQsIHdoaWNoIG1lYW50IHRoYXQgdGhlIGFkanVkaWNhdG9yJiM4MjE3O3Mgc3Vic3RhbnRpdmUgZGVjaXNpb24gd2FzIHdyb25nIChwYXJhLjM3KS4iLAogICAgICAgICIoMykgVGhlIGNvdXJ0IHRoZXJlZm9yZSBoYWQgdG8gY29uc2lkZXIgd2hhdCB0aGUgcG9zaXRpb24gd291bGQgYmUgaWYgdGhlIGFkanVkaWNhdG9yIGhhZCBjb25jbHVkZWQgdGhhdCBoZSBoYWQganVyaXNkaWN0aW9uLCBidXQgdGhlIHByb3BlciBjb250cmFjdHVhbCBiYXNpcyBvZiBqdXJpc2RpY3Rpb24gY291bGQgbWFrZSBhIGRpZmZlcmVuY2UgdG8gdGhlIHN1YnN0YW50aXZlIG91dGNvbWUuIFRoZSBsZWdhbCBwb2xpY3kgd2FzIHRoYXQgcmVhc29uYWJseSBhcmd1YWJsZSBjaGFsbGVuZ2VzIHRvIGFuIGFkanVkaWNhdG9yJiM4MjE3O3MganVyaXNkaWN0aW9uIG1pZ2h0IGJlIGEgcmVhc29uIGZvciBub3QgZW5mb3JjaW5nIGEgZGVjaXNpb24sIGJ1dCB0aGUgbWVyZSBhc3NlcnRpb24gdGhhdCBoZSBoYWQgbWlzdW5kZXJzdG9vZCB0aGUgZmFjdHVhbCBvciBsZWdhbCBiYXNpcyBmb3IgaGlzIHN1YnN0YW50aXZlIGRlY2lzaW9uIHdhcyBub3QsIFB1cnRvbiAodC9hIFJpY2h3b29kIEludGVyaW9ycykgdiBLaWxrZXIgUHJvamVjdHMgTHRkIFsyMDE1XSBFV0hDIDI2MjQgKFRDQyksIFsyMDE1XSBCLkwuUi4gNzU0IGFwcGxpZWQuIEluIHRoZSBpbnN0YW50IGNhc2UsIHRoZSBhZGp1ZGljYXRvciBoYWQganVyaXNkaWN0aW9uIGJlY2F1c2UsIGhvd2V2ZXIgdGhlIGNvbnRyYWN0dWFsIGFycmFuZ2VtZW50cyB3ZXJlIGNvcnJlY3RseSB0byBiZSBkZXNjcmliZWQsIHRoZXkgbWFuZGF0ZWQgdGhlIHVzZSBvZiB0aGUgU2NoZW1lIGFuZCBoZSB3YXMgcHJvcGVybHkgYXBwb2ludGVkIGJ5IHRoZSBTY2hlbWUmIzgyMTc7cyBwcm9jZWR1cmUuIFRoZSBwb3NzaWJsZSBkaWZmZXJlbmNlIGluIHN1YnN0YW50aXZlIG91dGNvbWUgdGhhdCBjb3VsZCBhcmlzZSBmcm9tIGlkZW50aWZ5aW5nIHRoZSBjb250cmFjdCBjb3JyZWN0bHkgZGlkIG5vdCBnbyB0byBqdXJpc2RpY3Rpb24sIGJ1dCB0byBzdWJzdGFudGl2ZSBvdXRjb21lIG9ubHkuIElmIHRoZSBhZGp1ZGljYXRvciBoYWQgbWFkZSBhbiBlcnJvciBvZiBsYXcgaW4gcmVmZXJyaW5nIHRvIHRoZSB3cm9uZyBjb250cmFjdHVhbCBwcm92aXNpb25zIHdoZW4gZGVjaWRpbmcgdGhlIHN1YnN0YW50aXZlIHF1ZXN0aW9uIHJlZmVycmVkIHRvIGhpbSwgdGhhdCBmZWxsIHdpdGhpbiB0aGUgY2F0ZWdvcnkgb2YgZXJyb3JzIG9mIHByb2NlZHVyZSwgZmFjdCBvciBsYXcsIHdoaWNoIHRoZSBDb3VydCBvZiBBcHBlYWwgaGFkIHJlcGVhdGVkbHkgZW1waGFzaXNlZCBzaG91bGQgbm90IHByZXZlbnQgZW5mb3JjZW1lbnQsIENhcmlsbGlvbiBDb25zdHJ1Y3Rpb24gTHRkIHYgRGV2b25wb3J0IFJveWFsIERvY2t5YXJkIEx0ZCBbMjAwNV0gRVdIQyA3NzggKFRDQyksIFsyMDA1XSBCLkwuUi4gMzEwIGFwcGxpZWQgYW5kIEMmYW1wO0IgU2NlbmUgQ29uY2VwdCBEZXNpZ24gTHRkIHYgSXNvYmFycyBMdGQgWzIwMDJdIEVXQ0EgQ2l2IDQ2LCBbMjAwMl0gQy5MLkMuIDY1MiBmb2xsb3dlZC4gVGhlIGNsYWltYW50IHdhcyB0aGVyZWZvcmUgZW50aXRsZWQgdG8gZW5mb3JjZSB0aGUgYXdhcmQgYW5kIHN1bW1hcnkganVkZ21lbnQgd2FzIGVudGVyZWQgaW4gdGhlIGNsYWltYW50JiM4MjE3O3MgZmF2b3VyIChwYXJhcyA0NC00NSwgNTItNTQpLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc3RydWN0aW9uIExhdyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBEaXNwdXRlIFJlc29sdXRpb24iLAogICAgICAgICJBZGp1ZGljYXRpb24iLAogICAgICAgICJBZGp1ZGljYXRpb24iLAogICAgICAgICJBZGp1ZGljYXRvcnMnIFBvd2VycyBhbmQgRHV0aWVzIiwKICAgICAgICAiQ29uc3RydWN0aW9uIENvbnRyYWN0cyIsCiAgICAgICAgIkVuZm9yY2VtZW50IiwKICAgICAgICAiSnVyaXNkaWN0aW9uIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXSEMiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyAmbWRhc2g7IENvbnRyYWN0cyAmbWRhc2g7IExldHRlcnMgb2YgSW50ZW50ICZtZGFzaDsgUXVhbnR1bSBNZXJ1aXQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnRyYWN0cyIsCiAgICAgICAgIkNvbnRyYWN0cyIsCiAgICAgICAgIkxldHRlcnMgb2YgSW50ZW50IiwKICAgICAgICAiUXVhbnR1bSBNZXJ1aXQiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgTCBKIEtvcmJldGlzIHYgVHJhbnNncmFpbiBTaGlwcGluZyBCViIsCiAgICAgICAgIih3bCkgSGFydmVsYSBJbnZlc3RtZW50cyBMdGQgdiBSb3lhbCBUcnVzdCBvZiBDYW5hZGEgTHRkIiwKICAgICAgICAiKHdsKSBDaGFwcGVsbCAmIENvIHYgTmVzdGxlIENvIEx0ZCIsCiAgICAgICAgIih3bCkgU3VkYnJvb2sgVHJhZGluZyBFc3RhdGUgTHRkIHYgRWdnbGV0b24iLAogICAgICAgICIod2wpIEJyaXRpc2ggQ3JhbmUgSGlyZSBDb3Jwb3JhdGlvbiBMdGQgdiBJcHN3aWNoIFBsYW50IEhpcmUgTHRkIiwKICAgICAgICAiKHdsKSBKIEV2YW5zICYgU29uIChQb3J0c21vdXRoKSB2IEFuZHJlYSBNZXJ6YXJpbyBMdGQiLAogICAgICAgICIod2wpIENvbGxpZXIgdiBXcmlnaHQgKEhvbGRpbmdzKSBMdGQiLAogICAgICAgICIod2wpIFRvb2wgTWV0YWwgTWFudWZhY3R1cmluZyBDbyBMdGQgdiBUdW5nc3RlbiBFbGVjdHJpYyBDbyBMdGQiLAogICAgICAgICIod2wpIEVzc28gUGV0cm9sZXVtIENvIEx0ZCB2IE1hcmRvbiIsCiAgICAgICAgIih3bCkgT2NlYW4gVHJhbXAgVGFua2VycyBDb3Jwb3JhdGlvbiB2IFYiLAogICAgICAgICIod2wpIENvdXJ0bmV5ICYgRmFpcmJhaXJuIEx0ZCB2IFRvbGFpbmkgQnJvcyAoSG90ZWxzKSBMdGQiLAogICAgICAgICIod2wpIFBhbyBPbiB2IExhdSBZaXUgTG9uZyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE1MyIsCiAgICAiWUVBUiI6ICIxOTg0IiwKICAgICJOQU1FIjogIih3bCkgQnJpdGlzaCBTdGVlbCBDb3Jwb3JhdGlvbiB2IENsZXZlbGFuZCBCcmlkZ2UgYW5kIEVuZ2luZWVyaW5nIENvIEx0ZCIsCiAgICAiQ0lUIjogIlsxOTg0XSAxIEFsbCBFUiA1MDQiLAogICAgIkNJVEFUSU9OIjogIkJyaXRpc2ggU3RlZWwgQ29ycG9yYXRpb24gdiBDbGV2ZWxhbmQgQnJpZGdlIGFuZCBFbmdpbmVlcmluZyBDbyBMdGQgWzE5ODRdIDEgQWxsIEVSIDUwNCIsCiAgICAiSlVER0UiOiAiUm9iZXJ0IEdvZmYgSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAidGhhdCBubyBjb250cmFjdCBoYWQgaW4gZmFjdCBiZWVuIG1hZGUgYnkgdGhlIGxldHRlciBvZiBpbnRlbnQsIG5vciBoYWQgYW4gZXhlY3V0b3J5IGNvbnRyYWN0IGJlZW4gY3JlYXRlZCBieSBQIGFjY2VlZGluZyB0byB0aGUgcmVxdWVzdCB0byBiZWdpbiB3b3JrIG9uIHRoZSBub2RlczsgaW4gdGhlIGNpcmN1bXN0YW5jZXMgRCB3ZXJlIGxpYWJsZSB0byBwYXkgYSByZWFzb25hYmxlIHN1bSBmb3Igd29yayBkb25lIGF0IHRoZWlyIHJlcXVlc3QgKEhpY2sgdiBSYXltb25kICZhbXA7IFJlaWQgWzE4OTNdIEEuQy4gMjIgYXBwbGllZCkuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiQ29udHJhY3RzICZtZGFzaDsgQWdyZWVtZW50cyAmbWRhc2g7IEFycmVhcnMgJm1kYXNoOyBDb25zaWRlcmF0aW9uICZtZGFzaDsgSW5zdGFsbWVudHMgJm1kYXNoOyBUYXggJm1kYXNoOyBXaW5kaW5nLVVwIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJBZ3JlZW1lbnRzIiwKICAgICAgICAiQXJyZWFycyIsCiAgICAgICAgIkNvbnNpZGVyYXRpb24iLAogICAgICAgICJJbnN0YWxtZW50cyIsCiAgICAgICAgIlRheCIsCiAgICAgICAgIldpbmRpbmctVXAiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgUGFvIE9uIHYgTGF1IFlpdSBMb25nIiwKICAgICAgICAiKHdsKSBDb2xsaWVyIHYgV3JpZ2h0IChIb2xkaW5ncykgTHRkIiwKICAgICAgICAiKHdsKSBGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiKHdsKSBTdWRicm9vayBUcmFkaW5nIEVzdGF0ZSBMdGQgdiBFZ2dsZXRvbiIsCiAgICAgICAgIih3bCkgQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIih3bCkgRWRtb25kcyB2IExhd3NvbiIsCiAgICAgICAgIih3bCkgQ2hhcHBlbGwgJiBDbyB2IE5lc3RsZSBDbyBMdGQiLAogICAgICAgICIod2wpIEVzc28gUGV0cm9sZXVtIENvIEx0ZCB2IE1hcmRvbiIsCiAgICAgICAgIih3bCkgR3JlYXQgUGVhY2UgU2hpcHBpbmcgTHRkIHYgVHNhdmxpcmlzIChJbnRlcm5hdGlvbmFsKSBMdGQiLAogICAgICAgICIod2wpIFBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCIsCiAgICAgICAgIih3bCkgQnJpdGlzaCBDcmFuZSBIaXJlIENvcnBvcmF0aW9uIEx0ZCB2IElwc3dpY2ggUGxhbnQgSGlyZSBMdGQiLAogICAgICAgICIod2wpIFBhcmtlciB2IENsYXJrIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTU0IiwKICAgICJZRUFSIjogIjE5OTUiLAogICAgIkNPVU5TRUwiOiAiRm9yIFM6IENocmlzdG9waGVyIE51Z2VlLiBGb3IgSW5sYW5kIFJldmVudWU6IEEuVy5ILiBDaGFybGVzLiIsCiAgICAiTkFNRSI6ICIod2wpIFJlIFNlbGVjdG1vdmUgTHRkIiwKICAgICJDSVQiOiAiWzE5OTVdIDEgV0xSIDQ3NCIsCiAgICAiQ0lUQVRJT04iOiAiUmUgU2VsZWN0bW92ZSBMdGQgWzE5OTVdIDEgV0xSIDQ3NCIsCiAgICAiSlVER0UiOiAiQmFsY29tYmUgTEo7IFN0dWFydC1TbWl0aCBMSjsgUGV0ZXIgR2lic29uIExKIiwKICAgICJIRUxEIjogWwogICAgICAgICJkaXNtaXNzaW5nIFMmIzgyMTc7cyBhcHBlYWwsIHRoYXQgKDEpIHRoZSBjb2xsZWN0b3Igb2YgdGF4ZXMgd2hvIG1ldCB3aXRoIFMgZGlkIG5vdCBoYXZlIGFjdHVhbCBhdXRob3JpdHkgdG8gbWFrZSBzdWNoIGFuIGFncmVlbWVudCBvciBvdGhlcndpc2UgYmluZCB0aGUgUmV2ZW51ZS4gRnVydGhlciwgdGhlcmUgd2FzIG5vIHJlcHJlc2VudGF0aW9uIGJ5IHRoZSBSZXZlbnVlIHRoYXQgdGhlIHRheCBjb2xsZWN0b3IgaGFkIHRoZSBSZXZlbnVlJiM4MjE3O3MgYXV0aG9yaXR5IHRvIGFjY2VwdCB0aGUgb2ZmZXJlZCBpbnN0YWxtZW50IHByb3Bvc2FsICggQXJtYWdhcyBMdGQgdiBNdW5kb2dhcyBTQSAoVGhlIE9jZWFuIEZyb3N0KSBbMTk4Nl0gQS5DLiA3MTcgYXBwbGllZCk7ICgyKSBhbiBhZ3JlZW1lbnQgdG8gcGF5IHRoZSBhcnJlYXJzIG9mIHRheCBpbiBpbnN0YWxtZW50cyB3b3VsZCBub3QgaGF2ZSBiZWVuIGVuZm9yY2VhYmxlIGJlY2F1c2UgdGhlcmUgd2FzIG5vIGNvbnNpZGVyYXRpb24gb24gdGhlIHBhcnQgb2YgdGhlIFJldmVudWUgKCBGb2FrZXMgdiBCZWVyICgxODg0KSA5IEFwcC4gQ2FzLiA2MDUgYXBwbGllZCk7ICgzKSBhcyB0aGUgdGF4IGNvbGxlY3RvciBoYWQgbm8gYXV0aG9yaXR5IHRvIG1ha2UgdGhlIGFncmVlbWVudCwgbmVpdGhlciBjb3VsZCBoZSBtYWtlIHRoZSBwcm9taXNlIG9uIHdoaWNoIHRoZSBlc3RvcHBlbCBhcmd1bWVudCB3YXMgYmFzZWQ7IGFuZCAoNCkgYXMgUyBoYWQgZmFpbGVkIHRvIHBheSB0aGUgaW5zdGFsbWVudHMgaXQgd2FzIGVudGlyZWx5IGZhaXIgb2YgdGhlIFJldmVudWUgdG8gc2VlayB0byBlbmZvcmNlIHRoZSBkZWJ0LiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkVtcGxveW1lbnQgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29udHJhY3RzICZtZGFzaDsgQmFua2luZyBhbmQgRmluYW5jZSAmbWRhc2g7IEJvbnVzIFBheW1lbnRzICZtZGFzaDsgQ29udHJhY3RzIG9mIEVtcGxveW1lbnQgJm1kYXNoOyBJbnZlc3RtZW50IEJhbmtzICZtZGFzaDsgTXV0dWFsIFRydXN0IGFuZCBDb25maWRlbmNlICZtZGFzaDsgUHJvbWlzZXMgJm1kYXNoOyBTdGFmZiBIYW5kYm9va3MgJm1kYXNoOyBUZXJtcyBhbmQgQ29uZGl0aW9ucyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRW1wbG95bWVudCBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMiLAogICAgICAgICJCYW5raW5nIGFuZCBGaW5hbmNlIiwKICAgICAgICAiQm9udXMgUGF5bWVudHMiLAogICAgICAgICJDb250cmFjdHMgb2YgRW1wbG95bWVudCIsCiAgICAgICAgIkludmVzdG1lbnQgQmFua3MiLAogICAgICAgICJNdXR1YWwgVHJ1c3QgYW5kIENvbmZpZGVuY2UiLAogICAgICAgICJQcm9taXNlcyIsCiAgICAgICAgIlN0YWZmIEhhbmRib29rcyIsCiAgICAgICAgIlRlcm1zIGFuZCBDb25kaXRpb25zIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIEJhbmsgb2YgQ3JlZGl0IGFuZCBDb21tZXJjZSBJbnRlcm5hdGlvbmFsIFNBIHYgQWxpIiwKICAgICAgICAiKHdsKSBDcm9zc2xleSB2IEZhaXRoZnVsICYgR291bGQgSG9sZGluZ3MiLAogICAgICAgICIod2wpIEJsYWNrcG9vbCBhbmQgRnlsZGUgQWVyb2NsdWIgTHRkIHYgQmxhY2twb29sIEJvcm91Z2ggQ291bmNpbCIsCiAgICAgICAgIih3bCkgS2luZydzIE5vcnRvbiBNZXRhbCBDbyBMdGQgdiBFZHJpZGdlLCBNZXJyZXR0ICYgQ28iLAogICAgICAgICIod2wpIFBhbyBPbiB2IExhdSBZaXUgTG9uZyIsCiAgICAgICAgIih3bCkgQWxwZW5zdG93IHYgUmVnYWxpYW4gUHJvcGVydGllcyIsCiAgICAgICAgIih3bCkgSG9sd2VsbCBTZWN1cml0aWVzIEx0ZCB2IEh1Z2hlcyIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IEx0ZCIsCiAgICAgICAgIih3bCkgTWVycml0dCB2IE1lcnJpdHQiLAogICAgICAgICIod2wpIE9zY2FyIENoZXNzIEx0ZCB2IFdpbGxpYW1zIiwKICAgICAgICAiKHdsKSBDb2xsaWVyIHYgV3JpZ2h0IChIb2xkaW5ncykgTHRkIiwKICAgICAgICAiKHdsKSBLYXJzYWxlcyAoSGFycm93KSBMdGQgdiBXYWxsaXMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNTUiLAogICAgIllFQVIiOiAiMjAxMyIsCiAgICAiQ09VTlNFTCI6ICJGb3IgdGhlIGFwcGVsbGFudHM6IFRob21hcyBMaW5kZW4gUUMsIE1hcnRpbiBDaGFtYmVybGFpbiwgT2xpdmVyIEpvbmVzLiBGb3IgdGhlIGZpcnN0IHJlc3BvbmRlbnQ6IE5pZ2VsIFRvenppIFFDLCBLYXRlIExpdmVzZXkuIEZvciB0aGUgc2Vjb25kIHJlc3BvbmRlbnRzOiBBbmRyZXcgSG9jaGhhdXNlciBRQywgRGF2aWQgQ3JhaWcuIiwKICAgICJBQlNUUkFDVCI6IFsKICAgICAgICAiVGhlIGFwcGVsbGFudHMgKEQgYW5kIEMpIGFwcGVhbGVkIGFnYWluc3QgYSBkZWNpc2lvbiAoWzIwMTJdIEVXSEMgMTE4OSAoUUIpLCBbMjAxMl0gSS5SLkwuUi4gNTUzKSB0aGF0IEQgaGFkIHdyb25nZnVsbHkgZGVuaWVkIHRoZSByZXNwb25kZW50cywgaXRzIGVtcGxveWVlcyBhbmQgZm9ybWVyIGVtcGxveWVlcywgdGhlaXIgY29udHJhY3R1YWwgZW50aXRsZW1lbnQgdG8gY2VydGFpbiBkaXNjcmV0aW9uYXJ5IGJvbnVzZXMuIiwKICAgICAgICAiRCB3YXMgYW4gaW52ZXN0bWVudCBiYW5rIGluIERyZXNkbmVyIEJhbmsgZ3JvdXAgKERCKS4gT24gQXVndXN0IDE4LCAyMDA4LCBzaG9ydGx5IGJlZm9yZSBhIHRha2VvdmVyIGJ5IEMsIEQgYW5ub3VuY2VkIHRvIGl0cyBlbXBsb3llZXMgaW4gYSAmIzgyMjA7dG93biBoYWxsJiM4MjIxOyBtZWV0aW5nIGJyb2FkY2FzdCBvdmVyIHRoZSBjb21wYW55IGludHJhbmV0IHRoYXQgREImIzgyMTc7cyBib2FyZCBoYWQgYXBwcm92ZWQgYSAmIzgyMjA7Z3VhcmFudGVlZCYjODIyMTsgbWluaW11bSBib251cyBwb29sLCB3aGljaCB3b3VsZCBiZSBhbGxvY2F0ZWQgdG8gaW5kaXZpZHVhbHMgb24gYSBkaXNjcmV0aW9uYXJ5IGJhc2lzIGFjY29yZGluZyB0byBpbmRpdmlkdWFsIHBlcmZvcm1hbmNlICYjODIyMDtpbiB0aGUgdXN1YWwgd2F5JiM4MjIxOy4gVGhlIGFpbSB3YXMgdG8gcmV0YWluIGVtcGxveWVlcyBhdCBhIHRpbWUgb2Ygc3BlY3VsYXRpb24gYWJvdXQgREImIzgyMTc7cyBmdXR1cmUuIEluIERlY2VtYmVyIDIwMDgsIGEgbGV0dGVyIHRvIGVhY2ggZW1wbG95ZWUgY29uZmlybWVkIHRoYXQgYSBkaXNjcmV0aW9uYXJ5IGJvbnVzIGZvciAyMDA4IGhhZCBiZWVuIHByb3Zpc2lvbmFsbHkgYXdhcmRlZCBhdCBhIHNwZWNpZmllZCBzdW0sIHN1YmplY3QgdG8gYSAmIzgyMjA7bWF0ZXJpYWwgYWR2ZXJzZSBjaGFuZ2UgY2xhdXNlJiM4MjIxOyAoTUFDIGNsYXVzZSkuIE9uIHRoZSBzYW1lIGRheSwgZW1wbG95ZWVzIHdlcmUgcmVhc3N1cmVkIGF0IGEgZnVydGhlciB0b3duIGhhbGwgbWVldGluZyB0aGF0IHRoZSBNQUMgY2xhdXNlIHdhcyB1bmxpa2VseSB0byBiZSBpbnZva2VkLiBJbiBKYW51YXJ5IDIwMDksIGFmdGVyIHRoZSBhY3F1aXNpdGlvbiBvZiBEQiBieSBDLCB0aGUgTUFDIGNsYXVzZSB3YXMgaW52b2tlZCBhbmQgRCYjODIxNztzIGVtcGxveWVlcyB3ZXJlIHRvbGQgdGhhdCB0aGVpciBib251cyBhd2FyZHMgd291bGQgYmUgY3V0IGJ5IDkwIHBlciBjZW50LiBUaGUgaXNzdWVzIHdlcmUgKGkpIHdoZXRoZXIgdGhlIEF1Z3VzdCAxOCBhbm5vdW5jZW1lbnQgY3JlYXRlZCBhbiBvYmxpZ2F0aW9uIHRvIHBheSB0aGUgYm9udXMgc3VtcyBjbGFpbWVkOyAoaWkpIHdoZXRoZXIgdGhlIGludHJvZHVjdGlvbiBvZiB0aGUgTUFDIGNsYXVzZSB3YXMgYSBicmVhY2ggb2YgdGhlIGltcGxpZWQgZHV0eSBvZiBtdXR1YWwgdHJ1c3QgYW5kIGNvbmZpZGVuY2UuIFRoZSBmaXJzdCBxdWVzdGlvbiBpbnZvbHZlZCBjb25zaWRlcmF0aW9uIG9mIHRocmVlIHN1Yi1pc3N1ZXM6IGZpcnN0LCB3aGV0aGVyIHRoZSBhbm5vdW5jZW1lbnQgd2FzIGFuIGV4ZXJjaXNlIG9mIEQmIzgyMTc7cyBwb3dlciB0byB1bmlsYXRlcmFsbHkgdmFyeSBpdHMgZW1wbG95ZWVzJiM4MjE3OyB0ZXJtcyBhbmQgY29uZGl0aW9ucyB1bmRlciBjbC4xLjQgb2YgdGhlIGVtcGxveWVlIGhhbmRib29rLCB3aGljaCBhbGxvd2VkIHN1Y2ggdmFyaWF0aW9uIGlmIHRoZSBjaGFuZ2VzIHdlcmUgbWFkZSBieSBhIG1lbWJlciBvZiB0aGUgaHVtYW4gcmVzb3VyY2VzIGRlcGFydG1lbnQgYW5kIG5vdGlmaWVkIGluIHdyaXRpbmcsIGFuZCBhbHNvIHByb3ZpZGVkIHRoYXQgYSBjaGFuZ2UgYWZmZWN0aW5nIGEgZ3JvdXAgb2YgcGVvcGxlIGNvdWxkIGJlIG5vdGlmaWVkIGJ5ICYjODIyMDtkaXNwbGF5JiM4MjIxOyBvbiB0aGUgY29tcGFueSBpbnRyYW5ldDsgc2Vjb25kLCB3aGV0aGVyIHRoZSBhbm5vdW5jZW1lbnQgd2FzIGludGVuZGVkIHRvIGJlIGxlZ2FsbHkgYmluZGluZyBzbyBhcyB0byBiZSBjYXBhYmxlIG9mIGhhdmluZyBjb250cmFjdHVhbCBlZmZlY3Q7IHRoaXJkLCB3aGV0aGVyIHRoZSBlbXBsb3llZXMgaGFkIGJlZW4gb2JsaWdlZCB0byBjb21tdW5pY2F0ZSBhY2NlcHRhbmNlIG9mIHRoZSBib251cyBvZmZlci4gVGhlIGp1ZGdlIGZvdW5kIHRoYXQgRCYjODIxNztzIGNvbW11bmljYXRpb25zIGFtb3VudGVkIHRvIGEgdmFyaWF0aW9uIHVuZGVyIGNsLjEuNCBhbmQgd2VyZSBpbnRlbmRlZCB0byBiZSBsZWdhbGx5IGJpbmRpbmcsIGFuZCB0aGF0IHRoZSBpbnRyb2R1Y3Rpb24gb2YgdGhlIE1BQyBjbGF1c2Ugd2FzIGEgYnJlYWNoIG9mIHRoZSBpbXBsaWVkIGR1dHkgb2YgbXV0dWFsIHRydXN0IGFuZCBjb25maWRlbmNlLiIKICAgIF0sCiAgICAiTkFNRSI6ICIod2wpIERyZXNkbmVyIEtsZWlud29ydCBMdGQgdiBBdHRyaWxsIiwKICAgICJDSVQiOiAiWzIwMTNdIEVXQ0EgQ2l2IDM5NCIsCiAgICAiQ0lUQVRJT04iOiAiRHJlc2RuZXIgS2xlaW53b3J0IEx0ZCB2IEF0dHJpbGwgWzIwMTNdIEVXQ0EgQ2l2IDM5NCIsCiAgICAiSlVER0UiOiAiTWF1cmljZSBLYXkgTEo7IEVsaWFzIExKOyBCZWF0c29uIExKIiwKICAgICJIRUxEIjogWwogICAgICAgICJBcHBlYWwgZGlzbWlzc2VkLiIsCiAgICAgICAgIigxKSAoYSkgVGhlIHZhcmlhdGlvbiBoYWQgYmVlbiBlZmZlY3RlZCBpbiBhY2NvcmRhbmNlIHdpdGggY2wuMS40LiBEJiM4MjE3O3MgY29tbXVuaWNhdGlvbnMgaGFkIGJlZW4gbWFkZSB3aXRoIHRoZSBhcHByb3ZhbCBvZiB0aGUgYm9hcmQgb2YgdGhlIHJlbXVuZXJhdGlvbiBjb21taXR0ZWUuIFNpbmNlIHRoZSBIUiBkaXJlY3RvciB3YXMgYSBtZW1iZXIgb2YgdGhhdCBib2FyZCwgbm8gZnVydGhlciBlbmRvcnNlbWVudCBieSBIUiB3YXMgbmVjZXNzYXJ5LiBNb3Jlb3ZlciwgdGhlcmUgd2FzIG5vIHJlYXNvbiB3aHkgY29tcGxpYW5jZSBjb3VsZCBub3QgYmUgYWNoaWV2ZWQgYnkgdHdvIGRvY3VtZW50cy4gQSBjaGFuZ2UgYWZmZWN0aW5nIGEgZ3JvdXAgb2YgcGVvcGxlIGRpZCBub3QgbmVlZCB0byBiZSBpbiB3cml0aW5nLCBidXQgbmVlZGVkIG9ubHkgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSBjb21wYW55IGludHJhbmV0LiBUaGUgQXVndXN0IDE4IGFubm91bmNlbWVudCBjb3VsZCBiZSBzYWlkIHRvIGhhdmUgYmVlbiAmIzgyMjA7ZGlzcGxheWVkJiM4MjIxOyBvbiBEJiM4MjE3O3MgaW50cmFuZXQgYnkgcmVhc29uIG9mIGl0cyBoYXZpbmcgYmVlbiBicm9hZGNhc3QsIGV2ZW4gaWYgdGhlIGJyb2FkY2FzdCBjb3VsZCBub3QgYmUgdmlld2VkIGFmdGVyIHRoZSBldmVudCAoc2VlIHBhcmFzIDUyLTU0IG9mIGp1ZGdtZW50KTsgKGIpIHRoZXJlIHdhcyBvdmVyd2hlbG1pbmcgZXZpZGVuY2UgdGhhdCBEIGhhZCBpbnRlbmRlZCBpdHMgcHJvbWlzZSB0byBiZSBsZWdhbGx5IGJpbmRpbmcuIFdoZXJlIGEgdGVybSB3YXMgYmVpbmcgaW50cm9kdWNlZCBpbnRvIGEgcHJlLWV4aXN0aW5nIGNvbnRyYWN0dWFsIHJlbGF0aW9uc2hpcCwgdGhlcmUgd2FzIGEgdmVyeSBzdHJvbmcgcHJlc3VtcHRpb24gdGhhdCBpdCB3YXMgaW50ZW5kZWQgdG8gYmUgbGVnYWxseSBiaW5kaW5nLCBhbmQgdGhlIG9udXMgd2FzIG9uIHRoZSBwYXJ0eSBhc3NlcnRpbmcgdGhhdCB0aGVyZSB3YXMgbm8gaW50ZW50aW9uIHRvIGNyZWF0ZSBsZWdhbCByZWxhdGlvbnMgdG8gZXN0YWJsaXNoIHRoYXQgZmFjdC4gVGhlIG5hdHVyYWwgaW5mZXJlbmNlIHdhcyB0aGF0IGFueSBwcm9taXNlcyBtYWRlIHRvIHN0YWZmIHJlbGF0aW5nIHRvIHRoZSB0ZXJtcyBvZiB0aGVpciBlbXBsb3ltZW50IHdvdWxkIHRha2UgZWZmZWN0IGluIHRoZSBzYW1lIHdheSBhcyBvdGhlciBjb250cmFjdHVhbCB0ZXJtcy4gVGhhdCB3YXMgc3VwcG9ydGVkIGJ5IGEgbnVtYmVyIG9mIG1hdHRlcnM6IEQmIzgyMTc7cyBjaGllZiBleGVjdXRpdmUgb2ZmaWNlciBoYWQgbWFkZSB0aGUgcHJvbWlzZSwgd2hpY2ggaW1wbGllZCB0aGF0IGl0IG11c3QgaGF2ZSBiZWVuIGFwcHJvdmVkIGF0IHRoZSBoaWdoZXN0IGxldmVsOyBpdCB3YXMgcGFydCBvZiBhIHZpdGFsbHkgaW1wb3J0YW50IHN0YWZmIHJldGVudGlvbiBzdHJhdGVneSB0byBwcmV2ZW50IHRoZSBwb3RlbnRpYWwgY29sbGFwc2Ugb2YgdGhlIGludmVzdG1lbnQgYmFua2luZyBkaXZpc2lvbjsgdGhlIG5hdHVyZSBvZiB0aGUgcHJvbWlzZSBhc3N1cmVkIHN0YWZmIHRoYXQgdGhlIGZ1bmQgd2FzIGd1YXJhbnRlZWQgY29tZSB3aGF0IG1heTsgYW5kIGl0IHdhcyByZWxhdGVkIHRvIHBheSwgdGhlIG1vc3QgZnVuZGFtZW50YWwgb2JsaWdhdGlvbiB1bmRlciB0aGUgZW1wbG95bWVudCBjb250cmFjdCAocGFyYXMgODAtODEsIDg5LCA5Nik7IChjKSBEJiM4MjE3O3MgZW1wbG95ZWVzIHdlcmUgdW5kZXIgbm8gb2JsaWdhdGlvbiB0byBjb21tdW5pY2F0ZSBhY2NlcHRhbmNlIG9mIHRoZSBib251cyBvZmZlci4gRCBoYWQgcGxhaW5seSBkaXNwZW5zZWQgd2l0aCB0aGUgbmVlZCBmb3IgYW55IHJlc3BvbnNlOiBpdCBoYWQgbWFkZSBhIHByb21pc2Ugd2l0aG91dCBhbnkgZGlzYWR2YW50YWdlIHRvIGl0cyBlbXBsb3llZXMsIGFuZCBub2JvZHkgaGVhcmluZyB0aGUgYW5ub3VuY2VtZW50IHdvdWxkIGV4cGVjdCB0aGF0IGFuIGVtcGxveWVlIGNvdWxkIG9ubHkgYmVuZWZpdCBpZiBoZSBwb3NpdGl2ZWx5IGFjY2VwdGVkIHRoZSBvZmZlci4gVGhhdCB3b3VsZCBoYXZlIGhhZCB0aGUgYml6YXJyZSByZXN1bHQgdGhhdCBldmVuIGlmIG9ubHkgYSBtaW5vcml0eSBvZiB0aGUgcmVsZXZhbnQgZW1wbG95ZWVzIGFjY2VwdGVkIHRoZSBvZmZlciwgRCB3b3VsZCBoYXZlIGhhZCB0byBwYXkgdGhlbSB0aGUgd2hvbGUgb2YgdGhlIGJvbnVzIHBvb2wuIEV2ZW4gaWYgdGhlcmUgd2FzIG5vIHVuaWxhdGVyYWwgY2hhbmdlIHB1cnN1YW50IHRvIGNsLjEuNCwgdGhlcmUgd2FzIGEgYmluZGluZyBjb250cmFjdHVhbCBvYmxpZ2F0aW9uIHRvIHBheSBib251cyBwYXltZW50cyBpbiB0aGUgdXN1YWwgd2F5LCBhdCBsZWFzdCB0byB0aGUgbGltaXRzIG9mIHRoZSBndWFyYW50ZWVkIGZ1bmQgKHBhcmFzIDk3LTEwMCkuICgyKSBUaGUgaW50cm9kdWN0aW9uIG9mIHRoZSBNQUMgY2xhdXNlIHdhcyBhIGJyZWFjaCBvZiB0aGUgaW1wbGllZCBkdXR5IG9mIG11dHVhbCB0cnVzdCBhbmQgY29uZmlkZW5jZS4gVGhlIGp1ZGdlIGhhZCBiZWVuIGVudGl0bGVkIHRvIGZpbmQgdGhhdCB0aGUgTUFDIGNsYXVzZSBoYWQgYmVlbiBpbnRyb2R1Y2VkIGFzIGEgcmVzdWx0IG9mIHByZXNzdXJlIGZyb20gQywgd2hpY2ggaGFkIGJlZW4gY29uY2VybmVkIGFib3V0IHRoZSBwdWJsaWMmIzgyMTc7cyBuZWdhdGl2ZSBwZXJjZXB0aW9uIG9mIGxhcmdlIGJvbnVzIHBheW1lbnRzLiBIZSBoYWQgb2JqZWN0aXZlbHkgYW5hbHlzZWQgdGhlIHF1ZXN0aW9uIG9mIHdoZXRoZXIgdHJ1c3QgYW5kIGNvbmZpZGVuY2UgaGFkIGJlZW4gdW5kZXJtaW5lZCBhbmQgdGhlcmUgd2FzIGFtcGxlIGV2aWRlbmNlIHRvIHN1cHBvcnQgaGlzIGNvbmNsdXNpb24gdGhhdCBpdCBoYWQgKHBhcmFzIDEzMC0xNDApLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXSEMiLAogICAgIkNBVEVHT1JZIjogIlNoaXBwaW5nIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IE5lZ2xpZ2VuY2UgJm1kYXNoOyBDYXJnbyAmbWRhc2g7IERhbWFnZSAmbWRhc2g7IEhhZ3VlIFJ1bGVzICZtZGFzaDsgSW50ZXJwcmV0YXRpb24gJm1kYXNoOyBOZWdsaWdlbmNlIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTaGlwcGluZyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBOZWdsaWdlbmNlIiwKICAgICAgICAiQ2FyZ28iLAogICAgICAgICJEYW1hZ2UiLAogICAgICAgICJIYWd1ZSBSdWxlcyIsCiAgICAgICAgIkludGVycHJldGF0aW9uIiwKICAgICAgICAiTmVnbGlnZW5jZSIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBIb2xsaWVyIHYgUmFtYmxlciBNb3RvcnMgKEFNQykgTHRkIiwKICAgICAgICAiKHdsKSBJbnZlc3RvcnMnIENvbXBlbnNhdGlvbiBTY2hlbWUgTHRkIHYgV2VzdCBCcm9td2ljaCBCdWlsZGluZyBTb2NpZXR5IiwKICAgICAgICAiKHdsKSBIZW5kZXJzb24gdiBNZXJyZXR0IFN5bmRpY2F0ZXMiLAogICAgICAgICIod2wpIEJhbmsgb2YgQ3JlZGl0IGFuZCBDb21tZXJjZSBJbnRlcm5hdGlvbmFsIFNBIHYgQWxpIiwKICAgICAgICAiKHdsKSBBbHBlbnN0b3cgdiBSZWdhbGlhbiBQcm9wZXJ0aWVzIiwKICAgICAgICAiKHdsKSBDYXBhcm8gSW5kdXN0cmllcyBwbGMgdiBEaWNrbWFuIiwKICAgICAgICAiKHdsKSBFc3NvIFBldHJvbGV1bSBDbyBMdGQgdiBNYXJkb24iLAogICAgICAgICIod2wpIEF0dG9ybmV5IEdlbmVyYWwgb2YgQmVsaXplIHYgQmVsaXplIFRlbGVjb20gTHRkIiwKICAgICAgICAiKHdsKSBIZWRsZXkgQnlybmUgJiBDbyBMdGQgdiBIZWxsZXIgJiBQYXJ0bmVycyIsCiAgICAgICAgIih3bCkgUm95c2NvdCBUcnVzdCB2IFJvZ2Vyc29uIiwKICAgICAgICAiKHdsKSBCUlMgdiBBcnRodXIgQ3J1dGNobGV5IEx0ZCIsCiAgICAgICAgIih3bCkgQ2hhcnRicm9vayBMdGQgdiBQZXJzaW1tb24gSG9tZXMgTHRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTU2IiwKICAgICJZRUFSIjogIjE5OTkiLAogICAgIkNPVU5TRUwiOiAiRm9yIEc6IFJCUyBNY2ZhcmxhbiBRLkMuIGFuZCBQQyBLaW5nLiBGb3IgTTogQUogU3VsbGl2YW4gUS5DLiBhbmQgTkcgUmVpbi4iLAogICAgIk5BTUUiOiAiKHdsKSBFbGlhc29uIHYgSGVuc2hhdyIsCiAgICAiQ0lUIjogIlsxOTk5XSAxIExsb3lkJiM4MjE3O3MgUmVwIDUxMiIsCiAgICAiQ0lUQVRJT04iOiAiRWxpYXNvbiB2IEhlbnNoYXcgWzE5OTldIDEgTGxveWQmIzgyMTc7cyBSZXAgNTEyIiwKICAgICJKVURHRSI6ICJDYWxsaW5hbiwgSi47IEhheW5lIEo7IEd1bW1vdyBKOyBHYXVkcm9uIEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImRpc21pc3NpbmcgdGhlIGFwcGVhbCwgdGhhdCB0aGUgZXZpZGVuY2UgZGVtb25zdHJhdGVkIG5vIG5lZ2xpZ2VuY2Ugb24gdGhlIHBhcnQgb2YgTSBpbiBlZmZlY3Rpbmcgc3RhYmlsaXR5IGNhbGN1bGF0aW9ucy4gQWxsIHN1Y2ggY2FsY3VsYXRpb25zIGhhZCBiZWVuIHdpdGhpbiB0aGUgcGFyYW1ldGVycyBzZXQgYnkgdGhlIG1hc3Rlciwgd2hvIGhhZCBvcGVyYXRlZCB0aGUgdmVzc2VsIGFkZXF1YXRlbHkgaW4gdGhlIGNvbmRpdGlvbnMuIEluIGNvbnNpZGVyaW5nIHdoZXRoZXIgb3Igbm90IGV2ZW50cyByZXN1bHRlZCBmcm9tIHBlcmlscyBvZiB0aGUgc2VhLCBpdCB3YXMgbmVjZXNzYXJ5IHRvIGhhdmUgcmVnYXJkIHRvIHRoZSBjb25kaXRpb24gb2YgdGhlIHZlc3NlbCwgd2hldGhlciB0aGUgZXZlbnRzIGFzc2VydGVkIGFzICYjODIyMDtwZXJpbHMmIzgyMjE7IHdlcmUgdW5leHBlY3RlZCBvciBhICYjODIyMDtmcmVhayBvY2N1cnJlbmNlJiM4MjIxOywgYW5kIHRoZSBpbnRlbnNpdHkgb2YgdGhlIGNvbmRpdGlvbnMgd2hpY2ggaGFkIGNhdXNlZCB0aGUgZGFtYWdlLiBPbiB0aGUgZmFjdHMgdGhlcmUgd2FzIG5vIGV2aWRlbmNlIHRoYXQgTSBoYWQgYmVlbiBuZWdsaWdlbnQgaW4gcHJlcGFyaW5nIHRoZSB2ZXNzZWwgZm9yIHRoZSB2b3lhZ2UuIEZvcmVzZWVhYmlsaXR5IG9mIGFkdmVyc2Ugd2VhdGhlciBkaWQgbm90IHByZWNsdWRlIHRoZSBvcGVyYXRpb24gb2YgdGhlIGltbXVuaXR5IGNvbnRhaW5lZCBpbiBBcnQuSVYgci4yKGMpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDaXZpbCBQcm9jZWR1cmUgJm1kYXNoOyBGb3JtYXRpb24gb2YgQ29udHJhY3QgJm1kYXNoOyBKdXJpc2RpY3Rpb24gJm1kYXNoOyBPZmZlciBhbmQgQWNjZXB0YW5jZSAmbWRhc2g7IFRlbGV4IC8gU2hpcHBpbmcgJm1kYXNoOyBDaGFydGVycGFydGllcyAmbWRhc2g7IEhpcmluZyAmbWRhc2g7IFBheW1lbnRzICZtZGFzaDsgUmVwdWRpYXRpb24gJm1kYXNoOyBTaGlwb3duZXJzICZtZGFzaDsgU2hpcHBpbmcgQ29udHJhY3RzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ2l2aWwgUHJvY2VkdXJlIiwKICAgICAgICAiRm9ybWF0aW9uIG9mIENvbnRyYWN0IiwKICAgICAgICAiSnVyaXNkaWN0aW9uIiwKICAgICAgICAiT2ZmZXIgYW5kIEFjY2VwdGFuY2UiLAogICAgICAgICJUZWxleCIsCiAgICAgICAgIlNoaXBwaW5nIiwKICAgICAgICAiQ2hhcnRlcnBhcnRpZXMiLAogICAgICAgICJIaXJpbmciLAogICAgICAgICJQYXltZW50cyIsCiAgICAgICAgIlJlcHVkaWF0aW9uIiwKICAgICAgICAiU2hpcG93bmVycyIsCiAgICAgICAgIlNoaXBwaW5nIENvbnRyYWN0cyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBMIEogS29yYmV0aXMgdiBUcmFuc2dyYWluIFNoaXBwaW5nIEJWIiwKICAgICAgICAiKHdsKSBIb25nIEtvbmcgRmlyIFNoaXBwaW5nIENvIEx0ZCB2IEthd2FzYWtpIEtpc2VuIEthaXNoYSBMdGQiLAogICAgICAgICIod2wpIFdoaXRlICYgQ2FydGVyIChDb3VuY2lscykgTHRkIHYgTWNHcmVnb3IiLAogICAgICAgICIod2wpIEFsYmVydCB2IE1vdG9yIEluc3VyZXJzJyBCdXJlYXUiLAogICAgICAgICIod2wpIEZpc2hlciB2IEJlbGwiLAogICAgICAgICIod2wpIEggUGFyc29ucyAoTGl2ZXN0b2NrKSBMdGQgdiBVdHRsZXkgSW5naGFtICYgQ28iLAogICAgICAgICIod2wpIFRla2RhdGEgSW50ZXJjb25uZWN0aW9ucyBMdGQgdiBBbXBoZW5vbCBMdGQiLAogICAgICAgICIod2wpIE9jZWFuIFRyYW1wIFRhbmtlcnMgQ29ycG9yYXRpb24gdiBWIiwKICAgICAgICAiKHdsKSBDb3VydG5leSAmIEZhaXJiYWlybiBMdGQgdiBUb2xhaW5pIEJyb3MgKEhvdGVscykgTHRkIiwKICAgICAgICAiKHdsKSBIYXJ2ZWxhIEludmVzdG1lbnRzIEx0ZCB2IFJveWFsIFRydXN0IG9mIENhbmFkYSBMdGQiLAogICAgICAgICIod2wpIFBhbyBPbiB2IExhdSBZaXUgTG9uZyIsCiAgICAgICAgIih3bCkgQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ28iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNTciLAogICAgIllFQVIiOiAiMTk3NSIsCiAgICAiTkFNRSI6ICIod2wpIFRoZSBCcmltbmVzIiwKICAgICJDSVQiOiAiWzE5NzVdIFFCIDkyOSIsCiAgICAiQ0lUQVRJT04iOiAiVGhlIEJyaW1uZXMgWzE5NzVdIFFCIDkyOSIsCiAgICAiSlVER0UiOiAiRWRtdW5kIERhdmllcyBMSjsgTWVnYXcgTEo7IENhaXJucyBMSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAidGhhdCAoMSkgdGhlIGNoYXJ0ZXJlcnMmIzgyMTc7IGZhaWx1cmUgdG8gcGF5IG9uIHRoZSBkdWUgZGF0ZSBkaWQgbm90IGFtb3VudCB0byBhIHJlcHVkaWF0aW9uIHNpbmNlIG5vIHN1Y2ggaW50ZW50aW9uIGhhZCBiZWVuIGV2aW5jZWQ7IGJ1dCAoMikgdGhlIHNoaXBvd25lcnMgaGFkIHZhbGlkbHkgZXhlcmNpc2VkIHRoZWlyIHJpZ2h0IG9mIHdpdGhkcmF3YWwgYXMgdGhleSBoYWQgbm90IHJlY2VpdmVkIHBheW1lbnQgb24gdGhlIGR1ZSBkYXRlIGFuZCB0aGV5IGhhZCBwcm9iYWJseSB3aXRoZHJhd24gYmVmb3JlIHBheW1lbnQgaGFkIGJlZW4gbWFkZS4gKENhciAmYW1wOyBVbml2ZXJzYWwgRmluYW5jZSBDbyBMdGQgdiBDYWxkd2VsbCBbMTk2NV0gMSBRLkIuIDUyNSByZWZlcnJlZCB0byBhbmQgRW1wcmVzYSBDdWJhbmEgZGUgRmxldGVzIHYgTGFnb25pc2kgU2hpcHBpbmcgQ28gTHRkIChUaGUgR2Vvcmdpb3MgQykgWzE5NzFdIDEgUS5CLiA0ODggcmVmZXJyZWQgdG8pLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkNvbXBhbnkgTGF3IE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbnRyYWN0cyAmbWRhc2g7IEFjY2VwdGFuY2UgJm1kYXNoOyBMZXR0ZXJzIG9mIEFsbG90bWVudCAmbWRhc2g7IE5vbi1EZWxpdmVyeSAmbWRhc2g7IFBvc3RhbCBTZXJ2aWNlcyAvIFJlYWwgUHJvcGVydHkgJm1kYXNoOyBDb250cmFjdCBGb3IgU2FsZSBvZiBMYW5kICZtZGFzaDsgRG9jdW1lbnQgRXhjaGFuZ2VzICZtZGFzaDsgT2ZmZXIgYW5kIEFjY2VwdGFuY2UgJm1kYXNoOyBPcHRpb25zICZtZGFzaDsgUG9zdGFsIFNlcnZpY2UiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgQmFycnkgdiBEYXZpZXMiLAogICAgICAgICIod2wpIEFscGVuc3RvdyB2IFJlZ2FsaWFuIFByb3BlcnRpZXMiLAogICAgICAgICIod2wpIFN1ZGJyb29rIFRyYWRpbmcgRXN0YXRlIEx0ZCB2IEVnZ2xldG9uIiwKICAgICAgICAiKHdsKSBDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDb21wYW55IiwKICAgICAgICAiKHdsKSBUaGUgQnJpbW5lcyIsCiAgICAgICAgIih3bCkgT2NlYW4gVHJhbXAgVGFua2VycyBDb3Jwb3JhdGlvbiB2IFYiLAogICAgICAgICIod2wpIEZpc2hlciB2IEJlbGwiLAogICAgICAgICIod2wpIEhhcnZlbGEgSW52ZXN0bWVudHMgTHRkIHYgUm95YWwgVHJ1c3Qgb2YgQ2FuYWRhIEx0ZCIsCiAgICAgICAgIih3bCkgTCBKIEtvcmJldGlzIHYgVHJhbnNncmFpbiBTaGlwcGluZyBCViIsCiAgICAgICAgIih3bCkgV2lsbGlhbSBTaW5kYWxsIHBsYyB2IENhbWJyaWRnZXNoaXJlIENvdW50eSBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBEYXVsaWEgTHRkIHYgRm91ciBNaWxsYmFuayBOb21pbmVlcyBMdGQiLAogICAgICAgICIod2wpIFRla2RhdGEgSW50ZXJjb25uZWN0aW9ucyBMdGQgdiBBbXBoZW5vbCBMdGQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNTgiLAogICAgIllFQVIiOiAiMTk3NCIsCiAgICAiQ09VTlNFTCI6ICJGb3IgdGhlIGFwcGVsbGFudDogTXIgRmlubGF5LCBNciBEaWxsd3luLiIsCiAgICAiQUJTVFJBQ1QiOiBbCiAgICAgICAgIlRoZSBhcHBlbGxhbnQgKEcpIGFwcGVhbGVkIGFnYWluc3QgYSBkZWNpc2lvbiBmaW5kaW5nIGhpbSB0byBiZSBhIHNoYXJlaG9sZGVyIGluIHRoZSByZXNwb25kZW50IGNvbXBhbnkgKEgpLiIsCiAgICAgICAgIkcgaGFkIGFwcGxpZWQgZm9yIHNoYXJlcyBpbiBIIGFuZCBhIGxldHRlciB3YXMgcG9zdGVkIHRvIGhpbSBjb250YWluaW5nIHRoZSBub3RpY2Ugb2YgYWxsb3RtZW50LiBHIG5ldmVyIHJlY2VpdmVkIHRoZSBsZXR0ZXIuIEggd2VudCBpbnRvIGxpcXVpZGF0aW9uIGFuZCB0aGUgbGlxdWlkYXRvciBicm91Z2h0IHByb2NlZWRpbmdzIHNlZWtpbmcgcGF5bWVudCBmcm9tIEcgZm9yIHRoZSBzaGFyZXMuIEcgZGVuaWVkIGJlaW5nIGEgc2hhcmVob2xkZXIuIiwKICAgICAgICAiRyBhcmd1ZWQgdGhhdCBmb3IgaGltIHRvIGJlIGEgc2hhcmVob2xkZXIgdGhlIGFsbG90bWVudCBvZiBzaGFyZXMgaGFkIHRvIGhhdmUgYmVlbiBjb21tdW5pY2F0ZWQgdG8gaGltIGFuZCBhIGxldHRlciBwb3N0ZWQgYnV0IG5vdCByZWNlaXZlZCBkaWQgbm90IGFtb3VudCB0byAmIzgyMTY7Y29tbXVuaWNhdGlvbiYjODIxNzsuIiwKICAgICAgICAiKEJyYW13ZWxsIEwuSi4gZGlzc2VudGluZykgRyB3YXMgYSBzaGFyZWhvbGRlci4gSGUgaGFkIG1hZGUgYW4gYXBwbGljYXRpb24gZm9yIHNoYXJlcyBpbiBIIGluIGNpcmN1bXN0YW5jZXMgd2hpY2ggaGFkIHRvIGltcGx5IHRoYXQgaGUgYXV0aG9yaXNlZCBIIHRvIHNlbmQgdGhlIGFsbG90bWVudCBub3RpY2UgYnkgcG9zdC4gVGhlIGNvbnRyYWN0IHdhcyBtYWRlIGZyb20gdGhlIHRpbWUgdGhlIGFjY2VwdGFuY2Ugd2FzIHBvc3RlZCBieSBIIGFuZCB0aGVyZSB3YXMgbm8gZGlzdGluY3Rpb24gYmV0d2VlbiBhIGRlbGF5IGluIGRlbGl2ZXJ5IGJ5IHRoZSBQb3N0IE9mZmljZSBhbmQgaXRzIGZhaWx1cmUgdG8gZGVsaXZlciBhdCBhbGwsIER1bmxvcCB2IEhpZ2dpbnMgOSBFLlIuIDgwNSBmb2xsb3dlZCwgQnJpdGlzaCAmYW1wOyBBbWVyaWNhbiBUZWxlZ3JhcGggQ28gTHRkIHYgQ29sc29uICgxODcwLTcxKSBMLlIuIDYgRXguIDEwOCBkaXNhcHByb3ZlZC4gQWx0aG91Z2ggb24gb2NjYXNpb25zIGluY29udmVuaWVuY2UgYW5kIGhhcmRzaGlwIG1heSBmb2xsb3cgZnJvbSBoYXZpbmcgYSBiaW5kaW5nIGNvbnRyYWN0IGJlaW5nIGZvcm1lZCB3aGVuIGFuIG9mZmVyIHdhcyBwb3N0ZWQsIGl0IHdhcyBpbXBvc3NpYmxlIHRvIGFkanVzdCBjb25mbGljdGluZyByaWdodHMgb2YgdGhlIHBhcnRpZXMgc3VjaCB0aGF0IHRoZSBjb25zZXF1ZW5jZXMgZm9sbG93aW5nIGEgbWlzdGFrZSBvbiB0aGUgcGFydCBvZiBhIG11dHVhbCBhZ2VudCwgYmVpbmcgdGhlIFBvc3QgT2ZmaWNlIGluIHRoZSBpbnN0YW50IGNhc2UsIHdlcmUgYm9ybmUgZXF1YWxseSBieSBhbGwgcGFydGllcy4gRnVydGhlciwgdGhlcmUgd291bGQgbm90IG5lY2Vzc2FyaWx5IGJlIGdyZWF0IGluY29udmVuaWVuY2Ugb3IgaGFyZHNoaXAgYmVjYXVzZSB0aGUgb2ZmZXJvciBjb3VsZCBhbHdheXMgY2hvb3NlIHRvIG1ha2UgdGhlIGZvcm1hdGlvbiBvZiB0aGUgY29udHJhY3QgZGVwZW5kZW50IHVwb24gYWN0dWFsIGNvbW11bmljYXRpb24gb2YgdGhlIGFjY2VwdGFuY2UuIChQZXIgQnJhbXdlbGwgTC5KKSBwb3N0aW5nIGEgbGV0dGVyIGRpZCBub3QgZGlmZmVyIGZyb20gb3RoZXIgZm9ybXMgb2YgY29tbXVuaWNhdGlvbiBpbiB0aGF0IGZvciBhIHBlcnNvbiB0byBiZSBhZmZlY3RlZCBieSBhIGNvbW11bmljYXRpb24sIGl0IG11c3QgaGF2ZSByZWFjaGVkIGhpbS4iCiAgICBdLAogICAgIk5BTUUiOiAiKHdsKSBIb2x3ZWxsIFNlY3VyaXRpZXMgTHRkIHYgSHVnaGVzIiwKICAgICJDSVQiOiAiWzE5NzRdIDEgV0xSIDE1NSIsCiAgICAiQ0lUQVRJT04iOiAiSG9sd2VsbCBTZWN1cml0aWVzIEx0ZCB2IEh1Z2hlcyBbMTk3NF0gMSBXTFIgMTU1IiwKICAgICJKVURHRSI6ICJSdXNzZWxsIExKOyBCdWNrbGV5IExKOyBMYXd0b24gTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImRpZmZlcmVudCBjb25zaWRlcmF0aW9ucyBhcHBsaWVkIGZyb20gdGhlIG1lcmUgYWNjZXB0YW5jZSBvZiBhbiBvZmZlciwgYW5kIHRoZSBvcHRpb24gd2FzIG5vdCB2YWxpZGx5IGV4ZXJjaXNlZC4gKCBIZW50aG9ybiB2IEZyYXNlciBbMTg5Ml0gMiBDaC4gMjcgZGlzdGluZ3Vpc2hlZCBhbmQgQnJ1bmVyIHYgTW9vcmUgWzE5MDRdIDEgQ2guIDMwNSBkaXN0aW5ndWlzaGVkKS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29tcGFueSBMYXcgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29udHJhY3RzIiwKICAgICAgICAiQWNjZXB0YW5jZSIsCiAgICAgICAgIkxldHRlcnMgb2YgQWxsb3RtZW50IiwKICAgICAgICAiTm9uLURlbGl2ZXJ5IiwKICAgICAgICAiUG9zdGFsIFNlcnZpY2VzIiwKICAgICAgICAiUmVhbCBQcm9wZXJ0eSIsCiAgICAgICAgIkNvbnRyYWN0IEZvciBTYWxlIG9mIExhbmQiLAogICAgICAgICJEb2N1bWVudCBFeGNoYW5nZXMiLAogICAgICAgICJPZmZlciBhbmQgQWNjZXB0YW5jZSIsCiAgICAgICAgIk9wdGlvbnMiLAogICAgICAgICJQb3N0YWwgU2VydmljZSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0hDIiwKICAgICJDQVRFR09SWSI6ICJBcmJpdHJhdGlvbiBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBTaGlwcGluZyAmbWRhc2g7IENvbnRyYWN0cyAmbWRhc2g7IEFwcG9pbnRtZW50cyAmbWRhc2g7IEFyYml0cmF0b3JzICZtZGFzaDsgQ2hhcnRlcnBhcnRpZXMgJm1kYXNoOyBEZW11cnJhZ2UgJm1kYXNoOyBFeHRlbnNpb25zIG9mIFRpbWUgJm1kYXNoOyBKdXJpc2RpY3Rpb24gJm1kYXNoOyBPZmZlciBhbmQgQWNjZXB0YW5jZSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQXJiaXRyYXRpb24gT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogU2hpcHBpbmciLAogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJBcHBvaW50bWVudHMiLAogICAgICAgICJBcmJpdHJhdG9ycyIsCiAgICAgICAgIkNoYXJ0ZXJwYXJ0aWVzIiwKICAgICAgICAiRGVtdXJyYWdlIiwKICAgICAgICAiRXh0ZW5zaW9ucyBvZiBUaW1lIiwKICAgICAgICAiSnVyaXNkaWN0aW9uIiwKICAgICAgICAiT2ZmZXIgYW5kIEFjY2VwdGFuY2UiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgVGhlIEJyaW1uZXMiLAogICAgICAgICIod2wpIE9jZWFuIFRyYW1wIFRhbmtlcnMgQ29ycG9yYXRpb24gdiBWIiwKICAgICAgICAiKHdsKSBIYXJ2ZWxhIEludmVzdG1lbnRzIEx0ZCB2IFJveWFsIFRydXN0IG9mIENhbmFkYSBMdGQiLAogICAgICAgICIod2wpIEZpc2hlciB2IEJlbGwiLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiLAogICAgICAgICIod2wpIEggUGFyc29ucyAoTGl2ZXN0b2NrKSBMdGQgdiBVdHRsZXkgSW5naGFtICYgQ28iLAogICAgICAgICIod2wpIENvbGxpZXIgdiBXcmlnaHQgKEhvbGRpbmdzKSBMdGQiLAogICAgICAgICIod2wpIFRvb2wgTWV0YWwgTWFudWZhY3R1cmluZyBDbyBMdGQgdiBUdW5nc3RlbiBFbGVjdHJpYyBDbyBMdGQiLAogICAgICAgICIod2wpIFBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCIsCiAgICAgICAgIih3bCkgUGFvIE9uIHYgTGF1IFlpdSBMb25nIiwKICAgICAgICAiKHdsKSBCYW5rIG9mIENyZWRpdCBhbmQgQ29tbWVyY2UgSW50ZXJuYXRpb25hbCBTQSB2IEFsaSIsCiAgICAgICAgIih3bCkgVHJhbnNmaWVsZCBTaGlwcGluZyBJbmMgdiBNZXJjYXRvciBTaGlwcGluZyBJbmMgKFRoZSBBY2hpbGxlYXMpIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTU5IiwKICAgICJZRUFSIjogIjIwMDUiLAogICAgIkNPVU5TRUwiOiAiRm9yIHRoZSBhcHBsaWNhbnQ6IEQgTGV3aXMuIEZvciB0aGUgcmVzcG9uZGVudDogUiBBc3dhbmkuIiwKICAgICJOQU1FIjogIih3bCkgTCBKIEtvcmJldGlzIHYgVHJhbnNncmFpbiBTaGlwcGluZyBCViIsCiAgICAiQ0lUIjogIlsyMDA1XSBFV0hDIDEzNDUgKFFCKSIsCiAgICAiQ0lUQVRJT04iOiAiTCBKIEtvcmJldGlzIHYgVHJhbnNncmFpbiBTaGlwcGluZyBCViBbMjAwNV0gRVdIQyAxMzQ1IChRQikiLAogICAgIkpVREdFIjogIlRvdWxzb24gSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAicmVmdXNpbmcgdGhlIGFwcGxpY2F0aW9ucywgdGhhdCAoMSkgcnVsZXMgYWJvdXQgb2ZmZXIgYW5kIGFjY2VwdGFuY2Ugc2hvdWxkIGJlIGNsZWFyIHNvIHRoYXQgcGFydGllcyBrbmV3IHdoZXJlIHRoZXkgc3Rvb2QuIEEgc2l0dWF0aW9uIGluIHdoaWNoIGl0IHdhcyB1bmNsZWFyIHdoZXRoZXIgYSBjb250cmFjdCBoYWQgYmVlbiBmb3JtZWQgdW50aWwgYSBjb3VydCBkZWNpZGVkIHRoZSBpc3N1ZSBpbiB0aGUgZXhlcmNpc2Ugb2Ygc29tZSBmb3JtIG9mIGdlbmVyYWwgZGlzY3JldGlvbiB3b3VsZCBiZSB1bnNhdGlzZmFjdG9yeS4gQWNjZXB0YW5jZSBieSBwb3N0IHdhcyBjb21wbGV0ZSBhcyBzb29uIGFzIHRoZSBsZXR0ZXIsIHByb3Blcmx5IGFkZHJlc3NlZCwgd2FzIHB1dCBpbnRvIHRoZSBwb3N0LWJveCwgQWRhbXMgdiBMaW5kc2VsbCAxMDYgRS5SLiAyNTAgYW5kIEVudG9yZXMgTHRkIHYgTWlsZXMgRmFyIEVhc3QgQ29ycCBbMTk1NV0gMiBRLkIuIDMyNyBjb25zaWRlcmVkLiBJZiB0aGUgbGV0dGVyIHdhcyB3cm9uZ2x5IGFkZHJlc3NlZCBkaWZmZXJlbnQgY29uc2lkZXJhdGlvbnMgYXBwbGllZC4gSXQgd2FzIHVuZmFpciB0byB0aGUgaW50ZW5kZWQgcmVjaXBpZW50IHRoYXQgaGUgc2hvdWxkIGJlIGJvdW5kIGJ5IHNvbWV0aGluZyB3aGljaCBoZSB3YXMgdW5saWtlbHkgdG8gcmVjZWl2ZSBiZWNhdXNlIG9mIHRoZSBmYXVsdCBvZiB0aGUgc2VuZGVyLiBBbnkgc3VjaCBydWxlIGhhZCB0aGUgcG90ZW50aWFsIG9mIGdpdm5nIGEgY2FyZWxlc3Mgd291bGQtYmUgYWNjZXB0b3IgYW4gdW5mYWlyIGFkdmFudGFnZS4gVGhlIHBvc3RhbCBydWxlIHNob3VsZCBub3QgYXBwbHkgdG8gbWlzZGlyZWN0ZWQgbGV0dGVycyBvZiBhY2NlcHRhbmNlLiBBIG1pc2RpcmVjdGVkIGFjY2VwdGFuY2Ugc2hvdWxkIHRha2UgZWZmZWN0LCBpZiBhdCBhbGwsIGF0IHRoZSB0aW1lIHdoaWNoIHdhcyBsZWFzdCBmYXZvdXJhYmxlIHRvIHRoZSBwYXJ0eSByZXNwb25zaWJsZSBmb3IgdGhlIG1pc2RpcmVjdGlvbi4gKDIpIFRoZSBsZXR0ZXIgb2Ygb2ZmZXIgd2FzIGltcGxpY2l0bHkgb3BlbiBmb3IgYWNjZXB0YW5jZSBvbmx5IHdpdGhpbiBhIHJlYXNvbmFibGUgcGVyaW9kLiBUaGUgZmF4IHRvIFIsIHdoaWNoIHdhcyBjb3BpZWQgdG8gQywgd2FzIHNlbnQgYXBwcm94aW1hdGVseSBlaWdodCBtb250aHMgYWZ0ZXIgQyYjODIxNztzIG9mZmVyIHRvIGFncmVlIHRvIHRoZSBhcHBvaW50bWVudCBvZiBSLiBJbiB0aGUgY2lyY3Vtc3RhbmNlcyBlaWdodCBtb250aHMgd2FzIGZhciBpbiBleGNlc3Mgb2YgYSByZWFzb25hYmxlIHBlcmlvZCBmb3IgYWNjZXB0YW5jZSBvZiBDJiM4MjE3O3Mgb2ZmZXIuIEl0IGZvbGxvd2VkIHRoYXQgdGhlcmUgaGFkIGJlZW4gbm8gYWdyZWVtZW50IHRvIHRoZSBhcHBvaW50bWVudCBvZiBSLCBhbmQgdGhhdCBoZSBoYWQgbm8ganVyaXNkaWN0aW9uIHVuZGVyIHRoZSBjaGFydGVycGFydHkuICgzKSBBbiBleHRlbnNpb24gb2YgdGltZSBmb3IgY29tbWVuY2VtZW50IG9mIHRoZSBhcmJpdHJhbCBwcm9jZWVkaW5ncyB1bmRlciBzLjEyIHdhcyByZWZ1c2VkLiBUaGUgY2xlcmljYWwgZXJyb3IgaW4gZmFpbGluZyB0byBzZW5kIHRoZSBmYXggdG8gdGhlIHJpZ2h0IG51bWJlciBhbmQgYW4gb21pc3Npb24gdG8gY2hhc2UgbWF0dGVycyB1cCB3aXRoIGFueSBwcm9tcHRpdHVkZSB3ZXJlIG5vdCB3aXRoaW4gdGhlIHJlYXNvbmFibGUgY29udGVtcGxhdGlvbiBvZiB0aGUgcGFydGllcyBhdCB0aGUgdGltZSB3aGVuIHRoZSBjb250cmFjdCB3YXMgbWFkZSBhcyB0aGUga2luZCBvZiBjaXJjdW1zdGFuY2UgdGhhdCBtaWdodCB0cmlnZ2VyIGFuIGV4dGVuc2lvbiBvZiB0aW1lLCBIYXJib3VyICZhbXA7IEdlbmVyYWwgV29ya3MgTHRkIHYgRW52aXJvbm1lbnQgQWdlbmN5IFsyMDAwXSAxIFcuTC5SLiA5NTAgY29uc2lkZXJlZC4gSXQgd291bGQgbm90IGJlIGp1c3QgdG8gZXh0ZW5kIHRoZSB0aW1lIGZvciBjb21tZW5jaW5nIGFyYml0cmF0aW9uIHByb2NlZWRpbmdzIGluIGNpcmN1bXN0YW5jZXMgd2hlcmUgQyBoYWQgdGhlIGJlbmVmaXQgb2YgYSBjb250cmFjdHVhbCB0aW1lIGJhci4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0hDIiwKICAgICJDQVRFR09SWSI6ICJSZWFsIFByb3BlcnR5IE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbnRyYWN0cyAmbWRhc2g7IENvbmRpdGlvbnMgJm1kYXNoOyBDb250cmFjdCBGb3IgU2FsZSBvZiBMYW5kICZtZGFzaDsgSW50ZXJwcmV0YXRpb24gLyBDb250cmFjdHMgJm1kYXNoOyBDb250cmFjdCBGb3IgU2FsZSBvZiBMYW5kICZtZGFzaDsgRm9ybWFsaXRpZXMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlJlYWwgUHJvcGVydHkgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29udHJhY3RzIiwKICAgICAgICAiQ29uZGl0aW9ucyIsCiAgICAgICAgIkNvbnRyYWN0IEZvciBTYWxlIG9mIExhbmQiLAogICAgICAgICJJbnRlcnByZXRhdGlvbiIsCiAgICAgICAgIkNvbnRyYWN0cyIsCiAgICAgICAgIkNvbnRyYWN0IEZvciBTYWxlIG9mIExhbmQiLAogICAgICAgICJGb3JtYWxpdGllcyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBEYXVsaWEgTHRkIHYgRm91ciBNaWxsYmFuayBOb21pbmVlcyBMdGQiLAogICAgICAgICIod2wpIEJhcnJ5IHYgRGF2aWVzIiwKICAgICAgICAiKHdsKSBJbnRlcmZvdG8gUGljdHVyZSBMaWJyYXJ5IEx0ZCB2IFN0aWxldHRvIFZpc3VhbCBQcm9kdWN0aW9ucyBMdGQiLAogICAgICAgICIod2wpIEJhbmsgb2YgQ3JlZGl0IGFuZCBDb21tZXJjZSBJbnRlcm5hdGlvbmFsIFNBIHYgQWxpIiwKICAgICAgICAiKHdsKSBTdWRicm9vayBUcmFkaW5nIEVzdGF0ZSBMdGQgdiBFZ2dsZXRvbiIsCiAgICAgICAgIih3bCkgSGVkbGV5IEJ5cm5lICYgQ28gTHRkIHYgSGVsbGVyICYgUGFydG5lcnMiLAogICAgICAgICIod2wpIEJyaXRpc2ggU3RlZWwgQ29ycG9yYXRpb24gdiBDbGV2ZWxhbmQgQnJpZGdlIGFuZCBFbmdpbmVlcmluZyBDbyBMdGQiLAogICAgICAgICIod2wpIEN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nICYgRHllaW5nIENvIiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQiLAogICAgICAgICIod2wpIEZpc2hlciB2IEJlbGwiLAogICAgICAgICIod2wpIEVzc28gUGV0cm9sZXVtIENvIEx0ZCB2IE1hcmRvbiIsCiAgICAgICAgIih3bCkgTCBKIEtvcmJldGlzIHYgVHJhbnNncmFpbiBTaGlwcGluZyBCViIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE2MCIsCiAgICAiWUVBUiI6ICIxOTg1IiwKICAgICJOQU1FIjogIih3bCkgQWxwZW5zdG93IHYgUmVnYWxpYW4gUHJvcGVydGllcyIsCiAgICAiQ0lUIjogIlsxOTg1XSAxIFdMUiA3MjEiLAogICAgIkNJVEFUSU9OIjogIkFscGVuc3RvdyB2IFJlZ2FsaWFuIFByb3BlcnRpZXMgWzE5ODVdIDEgV0xSIDcyMSIsCiAgICAiSlVER0UiOiAiTm91cnNlIEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgInRoYXQgYW4gb3JkZXIgdmFjYXRpbmcgYSBjYXV0aW9uIG9yIGFuIGVzdGF0ZSBjb250cmFjdCBjb3VsZCBhbmQgb3VnaHQgdG8gYmUgbWFkZSBvbiBtb3Rpb24gaWYgdGhlcmUgd2FzIG5vIGZhaXIgYXJndWFibGUgY2FzZSBpbiBzdXBwb3J0IG9mIHJlZ2lzdHJhdGlvbiB3aGljaCBvdWdodCB0byBnbyB0byB0cmlhbC4gSWYgdGhlIGlzc3VlcyB3ZXJlIGRlZmluZWQgYW5kIHRoZWlyIHJlc29sdXRpb24gZGVwZW5kZWQgb25seSBvbiBhc2NlcnRhaW5lZCBkb2N1bWVudHMgYW5kIGFmZmlkYXZpdCBldmlkZW5jZSwgdGhleSBjb3VsZCBhbmQgb3VnaHQgdG8gYmUgZGVjaWRlZCwgZXZlbiB0aG91Z2ggdGhleSBpbnZvbHZlZCBhIGRpZmZpY3VsdCBxdWVzdGlvbiBvZiBjb25zdHJ1Y3Rpb24gb3IgbGF3LiBBY2NvcmRpbmdseSwgYWx0aG91Z2ggdGhlIGNvbnN0cnVjdGlvbiBvZiB0aGUgbGV0dGVycyB3YXMgZGlmZmljdWx0LCB0aGV5IHNob3VsZCBiZSBkZWNpZGVkIG9uIHRoZSBtb3Rpb24gKEhleXdvb2QgdiBCREMgUHJvcGVydGllcyBMdGQgKE5vLjEpIFsxOTYzXSAxIFcuTC5SLiA5NzUsIFJhd2xwbHVnIENvIEx0ZCB2IEthbXZhbGUgUHJvcGVydGllcyBMdGQgKDE5NjkpIDIwIFAuICZhbXA7IEMuUi4gMzIsIENsZWFyYnJvb2sgUHJvcGVydHkgSG9sZGluZ3MgTHRkIHYgVmVycmllciBbMTk3NF0gMSBXLkwuUi4gMjQzIGFuZCBUaXZlcnRvbiBFc3RhdGVzIEx0ZCB2IFdlYXJ3ZWxsIEx0ZCBbMTk3NV0gQ2guIDE0NiBhcHBsaWVkKS4gVGhlIG1vdGlvbiB3YXMgZGlzbWlzc2VkIHNpbmNlIG9uIHRoZWlyIHRydWUgY29uc3RydWN0aW9uIHRoZSBsZXR0ZXJzIHdoaWNoIGNvbnN0aXR1dGVkIGEgZGV0YWlsZWQgZG9jdW1lbnQgcmVwbGFjaW5nIGEgcHJldmlvdXMgYmluZGluZyBhZ3JlZW1lbnQgcHJvdmlkZWQgYSB2ZXJ5IHN0cm9uZyBhbmQgZXhjZXB0aW9uYWwgY29udGV4dCBpbiB3aGljaCB0aGUgd29yZHMgJiM4MjIwO3N1YmplY3QgdG8gY29udHJhY3QmIzgyMjE7IHNob3VsZCBub3QgYmUgZ2l2ZW4gdGhlaXIgcHJpbWEgZmFjaWUgbWVhbmluZyB3aGVyZWJ5IGVpdGhlciBwYXJ0eSBjb3VsZCB3aXRoZHJhdyBiZWZvcmUgY29udHJhY3RzIHdlcmUgZXhjaGFuZ2VkLiBBY2NvcmRpbmdseSB3aGVuIHRoZSBkZWZlbmRhbnRzIGFjY2VwdGVkIHRoZSBwbGFpbnRpZmZzJiM4MjE3OyBub3RpY2Ugb2Ygd2lsbGluZ25lc3MgdG8gc2VsbCwgdGhlcmUgd2FzIGFuIGFncmVlbWVudCBmb3IgdGhlIHNhbGUgb2YgdGhlIHBsYWludGlmZnMmIzgyMTc7IGludGVyZXN0IGluIHRoZSBsYW5kIHVuZGVyIHdoaWNoIHRoZSBkZWZlbmRhbnRzIHRvb2sgYW4gZXF1aXRhYmxlIGludGVyZXN0IChDaGlsbGluZ3dvcnRoIHYgRXNjaGUgWzE5MjRdIDEgQ2guIDk3IGNvbnNpZGVyZWQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyAmbWRhc2g7IEJ1aWxkaW5nIGFuZCBFbmdpbmVlcmluZyBDb250cmFjdHMgJm1kYXNoOyBGb3JtYXRpb24gb2YgQ29udHJhY3QgJm1kYXNoOyBQcmljaW5nIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJCdWlsZGluZyBhbmQgRW5naW5lZXJpbmcgQ29udHJhY3RzIiwKICAgICAgICAiRm9ybWF0aW9uIG9mIENvbnRyYWN0IiwKICAgICAgICAiUHJpY2luZyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBQYXJrZXIgdiBDbGFyayIsCiAgICAgICAgIih3bCkgQXNzb2NpYXRlZCBKYXBhbmVzZSBCYW5rIChJbnRlcm5hdGlvbmFsKSBMdGQgdiBDcmVkaXQgZHUgTm9yZCIsCiAgICAgICAgIih3bCkgRmlzaGVyIHYgQmVsbCIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IEx0ZCIsCiAgICAgICAgIih3bCkgQnJpdGlzaCBDcmFuZSBIaXJlIENvcnBvcmF0aW9uIEx0ZCB2IElwc3dpY2ggUGxhbnQgSGlyZSBMdGQiLAogICAgICAgICIod2wpIEhlZGxleSBCeXJuZSAmIENvIEx0ZCB2IEhlbGxlciAmIFBhcnRuZXJzIiwKICAgICAgICAiKHdsKSBTaG9ndW4gRmluYW5jZSBMdGQgdiBIdWRzb24iLAogICAgICAgICIod2wpIFBhbyBPbiB2IExhdSBZaXUgTG9uZyIsCiAgICAgICAgIih3bCkgU3VkYnJvb2sgVHJhZGluZyBFc3RhdGUgTHRkIHYgRWdnbGV0b24iLAogICAgICAgICIod2wpIElubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biBMdGQiLAogICAgICAgICIod2wpIE5pY29sZW5lIHYgU2ltbW9uZHMiLAogICAgICAgICIod2wpIERhdmlzIENvbnRyYWN0b3JzIEx0ZCB2IEZhcmVoYW0gVXJiYW4gRGlzdHJpY3QgQ291bmNpbCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE2MSIsCiAgICAiWUVBUiI6ICIxOTc1IiwKICAgICJOQU1FIjogIih3bCkgQ291cnRuZXkgJiBGYWlyYmFpcm4gTHRkIHYgVG9sYWluaSBCcm9zIChIb3RlbHMpIEx0ZCIsCiAgICAiQ0lUIjogIlsxOTc1XSAxIFdMUiAyOTciLAogICAgIkNJVEFUSU9OIjogIkNvdXJ0bmV5ICZhbXA7IEZhaXJiYWlybiBMdGQgdiBUb2xhaW5pIEJyb3MgKEhvdGVscykgTHRkIFsxOTc1XSAxIFdMUiAyOTciLAogICAgIkpVREdFIjogIkxvcmQgRGVubmluZyBNUjsgTG9yZCBEaXBsb2NrOyBMYXd0b24gTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImFsbG93aW5nIEQmIzgyMTc7cyBhcHBlYWwsIHRoYXQgYmVjYXVzZSB0aGVyZSB3YXMgbm8gYWdyZWVtZW50IGFzIHRvIHByaWNlLCB3aGljaCB3ZW50IHRvIHRoZSB2ZXJ5IHJvb3Qgb2YgYSBidWlsZGluZyBjb250cmFjdCwgdGhpcyB3YXMgb25seSBhIGNvbnRyYWN0IHRvIG5lZ290aWF0ZSwgYW5kIG5vdCBlbmZvcmNlYWJsZSBpbiBsYXcuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiLAogICAgICAgICJEZW5uaW5nIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIlVLSEwiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBUb3J0cyAmbWRhc2g7IExvY2tvdXQgQWdyZWVtZW50cyAmbWRhc2g7IE5lZ290aWF0aW9ucyAmbWRhc2g7IFNhbGUgb2YgQnVzaW5lc3MiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnRyYWN0cyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBUb3J0cyIsCiAgICAgICAgIkxvY2tvdXQgQWdyZWVtZW50cyIsCiAgICAgICAgIk5lZ290aWF0aW9ucyIsCiAgICAgICAgIlNhbGUgb2YgQnVzaW5lc3MiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgRWFzdCB2IE1hdXJlciIsCiAgICAgICAgIih3bCkgQ2hhcnRicm9vayBMdGQgdiBQZXJzaW1tb24gSG9tZXMgTHRkIiwKICAgICAgICAiKHdsKSBJbm50cmVwcmVuZXVyIFB1YiBDbyB2IEVhc3QgQ3Jvd24gTHRkIiwKICAgICAgICAiKHdsKSBXaGl0ZSAmIENhcnRlciAoQ291bmNpbHMpIEx0ZCB2IE1jR3JlZ29yIiwKICAgICAgICAiKHdsKSBIb2xsaWVyIHYgUmFtYmxlciBNb3RvcnMgKEFNQykgTHRkIiwKICAgICAgICAiKHdsKSBDaGFwcGVsbCAmIENvIHYgTmVzdGxlIENvIEx0ZCIsCiAgICAgICAgIih3bCkgR3JvZ2FuIHYgUm9iaW4gTWVyZWRpdGggUGxhbnQgSGlyZSIsCiAgICAgICAgIih3bCkgQ29sbGllciB2IFdyaWdodCAoSG9sZGluZ3MpIEx0ZCIsCiAgICAgICAgIih3bCkgTWNDdWxsb3VnaCB2IExhbmUgRm94IGFuZCBQYXJ0bmVycyBMdGQiLAogICAgICAgICIod2wpIEludmVzdG9ycycgQ29tcGVuc2F0aW9uIFNjaGVtZSBMdGQgdiBXZXN0IEJyb213aWNoIEJ1aWxkaW5nIFNvY2lldHkiLAogICAgICAgICIod2wpIFNob2d1biBGaW5hbmNlIEx0ZCB2IEh1ZHNvbiIsCiAgICAgICAgIih3bCkgR3JhbiBHZWxhdG8gTHRkIHYgUmljaGNsaWZmIChHcm91cCkgTHRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTYyIiwKICAgICJZRUFSIjogIjE5OTIiLAogICAgIkNPVU5TRUwiOiAiRm9yIFc6IFBoaWxpcCBOYXVnaHRvbiBRLkMuIGFuZCBBbmd1cyBNb29uLiBGb3IgTTogU3RhbmxleSBCcm9kaWUgUS5DLiBhbmQgRWR3YXJkIENvaGVuLiIsCiAgICAiTkFNRSI6ICIod2wpIFdhbGZvcmQgdiBNaWxlcyIsCiAgICAiQ0lUIjogIlsxOTkyXSAyIEFDIDEyOCIsCiAgICAiQ0lUQVRJT04iOiAiV2FsZm9yZCB2IE1pbGVzIFsxOTkyXSAyIEFDIDEyOCIsCiAgICAiSlVER0UiOiAiTG9yZCBLZWl0aCBvZiBLaW5rZWw7IExvcmQgQWNrbmVyOyBMb3JkIEdvZmYgb2YgQ2hpZXZlbGV5OyBMb3JkIEphdW5jZXkgb2YgVHVsbGljaGV0dGxlOyBMb3JkIEJyb3duZS1XaWxraW5zb24iLAogICAgIkhFTEQiOiBbCiAgICAgICAgImRpc21pc3NpbmcgVyYjODIxNztzIGFwcGVhbCwgdGhhdCBhICYjODIyMDtsb2NrLW91dCYjODIyMTsgYWdyZWVtZW50IGNvdWxkIGJlIGVuZm9yY2VhYmxlIGJ1dCB0aGlzIGFncmVlbWVudCB3YXMgbm90IGFzIGl0IGFtb3VudGVkIHRvIGFuIGFncmVlbWVudCB0byBuZWdvdGlhdGUgZm9yIGFuIHVuc3BlY2lmaWVkIHBlcmlvZCBhbmQgc28gYSB2ZW5kb3Igd2FzIG5vdCBvYmxpZ2VkIHRvIGNvbmNsdWRlIHRoZSBjb250cmFjdCBhbmQgd291bGQgbm90IGtub3cgd2hlbiBoZSB3YXMgZW50aXRsZWQgdG8gd2l0aGRyYXcgZnJvbSBuZWdvdGlhdGlvbnMuIFRoZSBjb3VydHMgY291bGQgbm90IGJlIGV4cGVjdGVkIHRvIGRlY2lkZSBzdWJqZWN0aXZlbHkgd2hldGhlciBhIHByb3BlciByZWFzb24gZm9yIGVuZGluZyBuZWdvdGlhdGlvbnMgZXhpc3RlZCAoQ291cnRuZXkgJmFtcDsgRmFpcmJhaXJuIEx0ZCB2IFRvbGFpbmkgQnJvdGhlcnMgKEhvdGVscykgTHRkIFsxOTc1XSAxIFcuTC5SLiAyOTcgYXBwcm92ZWQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIlVLSEwiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyAmbWRhc2g7IEFncmVlbWVudHMgJm1kYXNoOyBDZXJ0YWludHkgJm1kYXNoOyBDb21taXNzaW9uICZtZGFzaDsgSW1wbGllZCBUZXJtcyAmbWRhc2g7IExldHRlcnMgJm1kYXNoOyBTYWxlIG9mIEdvb2RzIC8gTGFuZGxvcmQgYW5kIFRlbmFudCBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMgJm1kYXNoOyBDb250cmFjdHMgJm1kYXNoOyBPcHRpb25zICZtZGFzaDsgVmFsdWF0aW9uIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJBZ3JlZW1lbnRzIiwKICAgICAgICAiQ2VydGFpbnR5IiwKICAgICAgICAiQ29tbWlzc2lvbiIsCiAgICAgICAgIkltcGxpZWQgVGVybXMiLAogICAgICAgICJMZXR0ZXJzIiwKICAgICAgICAiU2FsZSBvZiBHb29kcyIsCiAgICAgICAgIkxhbmRsb3JkIGFuZCBUZW5hbnQgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29udHJhY3RzIiwKICAgICAgICAiQ29udHJhY3RzIiwKICAgICAgICAiT3B0aW9ucyIsCiAgICAgICAgIlZhbHVhdGlvbiIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBSZSBTZWxlY3Rtb3ZlIEx0ZCIsCiAgICAgICAgIih3bCkgU2hvZ3VuIEZpbmFuY2UgTHRkIHYgSHVkc29uIiwKICAgICAgICAiKHdsKSBDb2xsaWVyIHYgV3JpZ2h0IChIb2xkaW5ncykgTHRkIiwKICAgICAgICAiKHdsKSBCbGFja3Bvb2wgYW5kIEZ5bGRlIEFlcm9jbHViIEx0ZCB2IEJsYWNrcG9vbCBCb3JvdWdoIENvdW5jaWwiLAogICAgICAgICIod2wpIEJyaXRpc2ggQ3JhbmUgSGlyZSBDb3Jwb3JhdGlvbiBMdGQgdiBJcHN3aWNoIFBsYW50IEhpcmUgTHRkIiwKICAgICAgICAiKHdsKSBLYXJzYWxlcyAoSGFycm93KSBMdGQgdiBXYWxsaXMiLAogICAgICAgICIod2wpIEZpc2hlciB2IEJlbGwiLAogICAgICAgICIod2wpIFBhbmtoYW5pYSB2IEhhY2tuZXkgQm9yb3VnaCBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBFc3NvIFBldHJvbGV1bSBDbyBMdGQgdiBNYXJkb24iLAogICAgICAgICIod2wpIElubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biBMdGQiLAogICAgICAgICIod2wpIFBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCIsCiAgICAgICAgIih3bCkgSGVkbGV5IEJ5cm5lICYgQ28gTHRkIHYgSGVsbGVyICYgUGFydG5lcnMiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNjMiLAogICAgIllFQVIiOiAiMTk4MyIsCiAgICAiTkFNRSI6ICIod2wpIFN1ZGJyb29rIFRyYWRpbmcgRXN0YXRlIEx0ZCB2IEVnZ2xldG9uIiwKICAgICJDSVQiOiAiWzE5ODNdIDEgQUMgNDQ0IiwKICAgICJDSVRBVElPTiI6ICJTdWRicm9vayBUcmFkaW5nIEVzdGF0ZSBMdGQgdiBFZ2dsZXRvbiBbMTk4M10gMSBBQyA0NDQiLAogICAgIkpVREdFIjogIkxvcmQgRGlwbG9jazsgTG9yZCBGcmFzZXI7IExvcmQgUnVzc2VsbDsgTG9yZCBTY2FybWFuOyBMb3JkIEJyaWRnZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiYWxsb3dpbmcgdGhlIGxlc3NlZSYjODIxNztzIGFwcGVhbCwgdGhhdCBzaW5jZSB0aGUgcHJpY2Ugd2FzIGNhcGFibGUgb2YgYmVpbmcgYXNjZXJ0YWluZWQsIGEgY29tcGxldGUgY29udHJhY3Qgd2FzIGNvbnN0aXR1dGVkOyB0aGUgY291cnQgY291bGQgYW5kIHdvdWxkLCBpZiB0aGUgbWFjaGluZXJ5IG9mIGFzY2VydGFpbmluZyBhIHByaWNlIGJyb2tlIGRvd24sIHN1YnN0aXR1dGUgaXRzIG93biB0byBhc2NlcnRhaW4gYSBmYWlyIGFuZCByZWFzb25hYmxlIHByaWNlIChWaWNrZXJzIHYgVmlja2VycyAoMTg2NykgTC5SLiA0IEVxLiA1MjkgYW5kIEFnYXIgdiBNYWNrbGV3IDU3IEUuUi4gNDA1IG92ZXJydWxlZCkuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiQ29udHJhY3RzICZtZGFzaDsgQWNxdWllc2NlbmNlICZtZGFzaDsgQnJlYWNoIG9mIENvbnRyYWN0ICZtZGFzaDsgRXhjbHVzaW9uIENsYXVzZXMgJm1kYXNoOyBGb3JjZSBNYWpldXJlICZtZGFzaDsgVW5jZXJ0YWludHkiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnRyYWN0cyIsCiAgICAgICAgIkFjcXVpZXNjZW5jZSIsCiAgICAgICAgIkJyZWFjaCBvZiBDb250cmFjdCIsCiAgICAgICAgIkV4Y2x1c2lvbiBDbGF1c2VzIiwKICAgICAgICAiRm9yY2UgTWFqZXVyZSIsCiAgICAgICAgIlVuY2VydGFpbnR5IgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIFBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCIsCiAgICAgICAgIih3bCkgSiBFdmFucyAmIFNvbiAoUG9ydHNtb3V0aCkgdiBBbmRyZWEgTWVyemFyaW8gTHRkIiwKICAgICAgICAiKHdsKSBPY2VhbiBUcmFtcCBUYW5rZXJzIENvcnBvcmF0aW9uIHYgViIsCiAgICAgICAgIih3bCkgQ3VydGlzIHYgQ2hlbWljYWwgQ2xlYW5pbmcgJiBEeWVpbmcgQ28iLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiLAogICAgICAgICIod2wpIFBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCBMdGQiLAogICAgICAgICIod2wpIFBhbyBPbiB2IExhdSBZaXUgTG9uZyIsCiAgICAgICAgIih3bCkgR2VvcmdlIE1pdGNoZWxsIChDaGVzdGVyaGFsbCkgTHRkIHYgRmlubmV5IExvY2sgU2VlZHMiLAogICAgICAgICIod2wpIEhhcnZlbGEgSW52ZXN0bWVudHMgTHRkIHYgUm95YWwgVHJ1c3Qgb2YgQ2FuYWRhIEx0ZCIsCiAgICAgICAgIih3bCkgS2Fyc2FsZXMgKEhhcnJvdykgTHRkIHYgV2FsbGlzIiwKICAgICAgICAiKHdsKSBPbGxleSB2IE1hcmxib3JvdWdoIENvdXJ0IEhvdGVsIiwKICAgICAgICAiKHdsKSBIZWRsZXkgQnlybmUgJiBDbyBMdGQgdiBIZWxsZXIgJiBQYXJ0bmVycyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE2NCIsCiAgICAiWUVBUiI6ICIxOTUzIiwKICAgICJOQU1FIjogIih3bCkgTmljb2xlbmUgdiBTaW1tb25kcyIsCiAgICAiQ0lUIjogIlsxOTUzXSAxIFFCIDU0MyIsCiAgICAiQ0lUQVRJT04iOiAiTmljb2xlbmUgdiBTaW1tb25kcyBbMTk1M10gMSBRQiA1NDMiLAogICAgIkpVREdFIjogIkhvZHNvbiBMSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAidGhlIGxldHRlciBvZiBBdWd1c3QgMTYgd2FzIGFuIGFjY2VwdGFuY2Ugb2YgdGhlIGNvbnRyYWN0LCBib3RoIHBhcnRpZXMgYXNzdW1pbmcgdGhhdCB0aGUgdXN1YWwgY29uZGl0aW9ucyBvZiBhY2NlcHRhbmNlIGFwcGxpZWQ7IHRoZSB3b3JkczogJiM4MjIwO0kgYXNzdW1lIHdlIGFyZSBpbiBhZ3JlZW1lbnQgdGhhdCB0aGUgdXN1YWwgY29uZGl0aW9ucyBvZiBhY2NlcHRhbmNlIGFwcGx5JiM4MjIxOyB3ZXJlIG1lYW5pbmdsZXNzLCBhbmQgb3VnaHQgdG8gYmUgaWdub3JlZDsgY29uc2VxdWVudGx5LCB0aGVyZSB3YXMgYSBjb250cmFjdCBiZXR3ZWVuIHRoZSBwYXJ0aWVzIHdoaWNoIHdhcyBicm9rZW4gYnkgdGhlIGRlZmVuZGFudCwgQnJpdGlzaCBFbGVjdHJpY2FsIGFuZCBBc3NvY2lhdGVkIEluZHVzdHJpZXMgKENhcmRpZmYpIEx0ZCB2IFBhdGxleSBQcmVzc2luZ3MgTHRkIFsxOTUzXSAxIFcuTC5SLiAyODAgZGlzdGluZ3Vpc2hlZCBhbmQgRyBTY2FtbWVsbCBhbmQgTmVwaGV3IEx0ZCB2IEhDJmFtcDtKRyBPdXN0b24gWzE5NDFdIEEuQy4gMjUxIGRpc3Rpbmd1aXNoZWQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiVUtITCIsCiAgICAiQ0FURUdPUlkiOiAiSW50ZWxsZWN0dWFsIFByb3BlcnR5ICZtZGFzaDsgQWR2ZXJ0aXNlbWVudHMgJm1kYXNoOyBDb250cmFjdHMgJm1kYXNoOyBDb3B5cmlnaHQgJm1kYXNoOyBNdXNpY2FsIFdvcmtzICZtZGFzaDsgUHJpY2UgTWFya2luZyAmbWRhc2g7IFJveWFsdGllcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZWxsZWN0dWFsIFByb3BlcnR5IiwKICAgICAgICAiQWR2ZXJ0aXNlbWVudHMiLAogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJDb3B5cmlnaHQiLAogICAgICAgICJNdXNpY2FsIFdvcmtzIiwKICAgICAgICAiUHJpY2UgTWFya2luZyIsCiAgICAgICAgIlJveWFsdGllcyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDb21wYW55IiwKICAgICAgICAiKHdsKSBGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiKHdsKSBQYW8gT24gdiBMYXUgWWl1IExvbmciLAogICAgICAgICIod2wpIEN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nICYgRHllaW5nIENvIiwKICAgICAgICAiKHdsKSBJbnRlcmZvdG8gUGljdHVyZSBMaWJyYXJ5IEx0ZCB2IFN0aWxldHRvIFZpc3VhbCBQcm9kdWN0aW9ucyBMdGQiLAogICAgICAgICIod2wpIEFscGVuc3RvdyB2IFJlZ2FsaWFuIFByb3BlcnRpZXMiLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvIiwKICAgICAgICAiKHdsKSBXaGl0ZSAmIENhcnRlciAoQ291bmNpbHMpIEx0ZCB2IE1jR3JlZ29yIiwKICAgICAgICAiKHdsKSBDb2xsaWVyIHYgV3JpZ2h0IChIb2xkaW5ncykgTHRkIiwKICAgICAgICAiKHdsKSBCcml0aXNoIFN0ZWVsIENvcnBvcmF0aW9uIHYgQ2xldmVsYW5kIEJyaWRnZSBhbmQgRW5naW5lZXJpbmcgQ28gTHRkIiwKICAgICAgICAiKHdsKSBCYW5rIG9mIENyZWRpdCBhbmQgQ29tbWVyY2UgSW50ZXJuYXRpb25hbCBTQSB2IEFsaSIsCiAgICAgICAgIih3bCkgSGFydmVsYSBJbnZlc3RtZW50cyBMdGQgdiBSb3lhbCBUcnVzdCBvZiBDYW5hZGEgTHRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTY1IiwKICAgICJZRUFSIjogIjE5NjAiLAogICAgIk5BTUUiOiAiKHdsKSBDaGFwcGVsbCAmIENvIHYgTmVzdGxlIENvIEx0ZCIsCiAgICAiQ0lUIjogIlsxOTYwXSBBQyA4NyIsCiAgICAiQ0lUQVRJT04iOiAiQ2hhcHBlbGwgJmFtcDsgQ28gdiBOZXN0bGUgQ28gTHRkIFsxOTYwXSBBQyA4NyIsCiAgICAiSlVER0UiOiAiVmlzY291bnQgU2ltb25kczsgTG9yZCBSZWlkOyBMb3JkIFR1Y2tlcjsgTG9yZCBTb21lcnZlbGwgb2YgSGFycm93IiwKICAgICJIRUxEIjogWwogICAgICAgICJ0aGVyZSB3YXMgbm8gJiM4MjIwO29yZGluYXJ5IHJldGFpbCBzZWxsaW5nIHByaWNlJiM4MjIxOyB3aXRoaW4gdGhlIENvcHlyaWdodCBBY3QgMTk1NiBzLjggYmVjYXVzZSB0aGUgMXMuIDZkLiB3YXMgbm90IHRoZSB3aG9sZSBjb25zaWRlcmF0aW9uIGZvciB0aGUgc2FsZSBvZiB0aGUgcmVjb3JkczsgYWNjb3JkaW5nbHksIG5laXRoZXIgTi4gQ28uIG5vciB0aGUgcmVjb3JkIG1hbnVmYWN0dXJlcnMgd2VyZSBwcm90ZWN0ZWQgYnkgdGhlIHByb3Zpc2lvbnMgb2YgQ29weXJpZ2h0IEFjdCAxOTU2IHMuOC4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJVS1BDIiwKICAgICJDQVRFR09SWSI6ICJGYW1pbHkgTGF3IE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENpdmlsIFByb2NlZHVyZSAmbWRhc2g7IENhdXNlcyBvZiBBY3Rpb24gJm1kYXNoOyBDb25zaWRlcmF0aW9uICZtZGFzaDsgRGl2b3JjZSAmbWRhc2g7IE1haW50ZW5hbmNlIEFncmVlbWVudHMgLyBUYXggJm1kYXNoOyBBc3Nlc3NtZW50ICZtZGFzaDsgUGF5bWVudHMgJm1kYXNoOyBTYWxlIG9mIExhbmQgLyBDb250cmFjdHMgJm1kYXNoOyBDb25zaWRlcmF0aW9uICZtZGFzaDsgQ29udHJhY3R1YWwgTGlhYmlsaXR5ICZtZGFzaDsgRWNvbm9taWMgRHVyZXNzICZtZGFzaDsgT3BlcmF0aW5nIEFncmVlbWVudHMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZhbWlseSBMYXcgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ2l2aWwgUHJvY2VkdXJlIiwKICAgICAgICAiQ2F1c2VzIG9mIEFjdGlvbiIsCiAgICAgICAgIkNvbnNpZGVyYXRpb24iLAogICAgICAgICJEaXZvcmNlIiwKICAgICAgICAiTWFpbnRlbmFuY2UgQWdyZWVtZW50cyIsCiAgICAgICAgIlRheCIsCiAgICAgICAgIkFzc2Vzc21lbnQiLAogICAgICAgICJQYXltZW50cyIsCiAgICAgICAgIlNhbGUgb2YgTGFuZCIsCiAgICAgICAgIkNvbnRyYWN0cyIsCiAgICAgICAgIkNvbnNpZGVyYXRpb24iLAogICAgICAgICJDb250cmFjdHVhbCBMaWFiaWxpdHkiLAogICAgICAgICJFY29ub21pYyBEdXJlc3MiLAogICAgICAgICJPcGVyYXRpbmcgQWdyZWVtZW50cyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBSZSBTZWxlY3Rtb3ZlIEx0ZCIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQgTHRkIiwKICAgICAgICAiKHdsKSBGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiKHdsKSBXaGl0ZSAmIENhcnRlciAoQ291bmNpbHMpIEx0ZCB2IE1jR3JlZ29yIiwKICAgICAgICAiKHdsKSBDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDb21wYW55IiwKICAgICAgICAiKHdsKSBFZG1vbmRzIHYgTGF3c29uIiwKICAgICAgICAiKHdsKSBBbHBlbnN0b3cgdiBSZWdhbGlhbiBQcm9wZXJ0aWVzIiwKICAgICAgICAiKHdsKSBKIEV2YW5zICYgU29uIChQb3J0c21vdXRoKSB2IEFuZHJlYSBNZXJ6YXJpbyBMdGQiLAogICAgICAgICIod2wpIEFzc29jaWF0ZWQgSmFwYW5lc2UgQmFuayAoSW50ZXJuYXRpb25hbCkgTHRkIHYgQ3JlZGl0IGR1IE5vcmQiLAogICAgICAgICIod2wpIE5pY29sZW5lIHYgU2ltbW9uZHMiLAogICAgICAgICIod2wpIEludGVyZm90byBQaWN0dXJlIExpYnJhcnkgTHRkIHYgU3RpbGV0dG8gVmlzdWFsIFByb2R1Y3Rpb25zIEx0ZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE2NiIsCiAgICAiWUVBUiI6ICIxOTgwIiwKICAgICJOQU1FIjogIih3bCkgUGFvIE9uIHYgTGF1IFlpdSBMb25nIiwKICAgICJDSVQiOiAiWzE5ODBdIEFDIDYxNCIsCiAgICAiQ0lUQVRJT04iOiAiUGFvIE9uIHYgTGF1IFlpdSBMb25nIFsxOTgwXSBBQyA2MTQiLAogICAgIkpVREdFIjogIkxvcmQgV2lsYmVyZm9yY2U7IFZpc2NvdW50IERpbGhvcm5lOyBMb3JkIFNpbW9uIG9mIEdsYWlzZGFsZTsgTG9yZCBTYWxtb247IExvcmQgU2Nhcm1hbiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAidGhhdCAoMSkgYW4gYW50ZWNlZGVudCBhY3QgY291bGQgYmUgdmFsaWQgY29uc2lkZXJhdGlvbiB3aGVyZSBpdCB3YXMgZG9uZSBhdCB0aGUgcHJvbWlzb3ImIzgyMTc7cyByZXF1ZXN0LCB3aGVyZSB0aGUgcGFydGllcyB1bmRlcnN0b29kIHRoYXQgc3VjaCBhY3Qgd2FzIHRvIGJlIHJlbXVuZXJhdGVkIGJ5IHRoZSBjb25mZXJtZW50IG9mIGEgYmVuZWZpdCBhbmQgd2hlcmUgc3VjaCBiZW5lZml0IHdvdWxkIGhhdmUgYmVlbiBlbmZvcmNlYWJsZSBpZiBwcm9taXNlZCBpbiBhZHZhbmNlOyBhbmQgc3VjaCBjcml0ZXJpYSB3ZXJlIGhlcmUgc2F0aXNmaWVkOyAoMikgYSBwcm9taXNlIHRvIHBlcmZvcm0gYSBjb250cmFjdHVhbCBvYmxpZ2F0aW9uIGZvciB0aGUgYmVuZWZpdCBvZiBhIHRoaXJkIHBhcnR5IHdhcyBnb29kIGNvbnNpZGVyYXRpb247IGFuZCAoMykgdGhlIGNvbW1lcmNpYWwgcHJlc3N1cmUgdG8gd2hpY2ggdGhlIGRlZmVuZGFudHMgaGFkIGJlZW4gc3ViamVjdGVkIGhhZCBub3QgYmVlbiBzdWNoIGFzIHRvIG5lZ2F0aXZlIHRoZWlyIGNvbnNlbnQgdG8gdGhlIGluZGVtbml0eSBhZ3JlZW1lbnQuIChDYXNleSYjODIxNztzIFBhdGVudHMsIFJlIFsxODkyXSAxIENoLiAxMDQgYXBwbGllZCBhbmQgTmV3IFplYWxhbmQgU2hpcHBpbmcgQ28gTHRkIHYgQU0gU2F0dGVydGh3YWl0ZSAmYW1wOyBDbyBMdGQgKFRoZSBFdXJ5bWVkb24pIFsxOTc1XSBBLkMuIDE1NCBhcHBsaWVkKS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0hDIiwKICAgICJDQVRFR09SWSI6ICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogRXF1aXR5ICZtZGFzaDsgUHJvbWlzc29yeSBFc3RvcHBlbCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29udHJhY3RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IEVxdWl0eSIsCiAgICAgICAgIlByb21pc3NvcnkgRXN0b3BwZWwiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgQ29sbGllciB2IFdyaWdodCAoSG9sZGluZ3MpIEx0ZCIsCiAgICAgICAgIih3bCkgR3JvZ2FuIHYgUm9iaW4gTWVyZWRpdGggUGxhbnQgSGlyZSIsCiAgICAgICAgIih3bCkgQ3VydGlzIHYgQ2hlbWljYWwgQ2xlYW5pbmcgJiBEeWVpbmcgQ28iLAogICAgICAgICIod2wpIEluZ3JhbSB2IExpdHRsZSIsCiAgICAgICAgIih3bCkgUGFvIE9uIHYgTGF1IFlpdSBMb25nIiwKICAgICAgICAiKHdsKSBDaGFwcGVsbCAmIENvIHYgTmVzdGxlIENvIEx0ZCIsCiAgICAgICAgIih3bCkgSGVkbGV5IEJ5cm5lICYgQ28gTHRkIHYgSGVsbGVyICYgUGFydG5lcnMiLAogICAgICAgICIod2wpIFdhbGZvcmQgdiBNaWxlcyIsCiAgICAgICAgIih3bCkgUGhhcm1hY2V1dGljYWwgU29jaWV0eSBvZiBHcmVhdCBCcml0YWluIHYgQm9vdHMgQ2FzaCBDaGVtaXN0cyAoU291dGhlcm4pIEx0ZCIsCiAgICAgICAgIih3bCkgTW91bnRmb3JkIHYgU2NvdHQiLAogICAgICAgICIod2wpIERhdmlzIENvbnRyYWN0b3JzIEx0ZCB2IEZhcmVoYW0gVXJiYW4gRGlzdHJpY3QgQ291bmNpbCIsCiAgICAgICAgIih3bCkgSGVuZGVyc29uIHYgTWVycmV0dCBTeW5kaWNhdGVzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTY3IiwKICAgICJZRUFSIjogIjE5NDciLAogICAgIkFCU1RSQUNUIjogWwogICAgICAgICJUaGUgcGxhaW50aWZmIGxlc3NvciAoQykgc291Z2h0IHRvIHJlY292ZXIgcmVudCBmcm9tIHRoZSBkZWZlbmRhbnQgbGVzc2VlIChIKS4iLAogICAgICAgICJCeSBhIGxlYXNlIG1hZGUgaW4gMTkzNywgQyBoYWQgZ3JhbnRlZCBIIGEgdGVuYW5jeSBvZiBhIGJsb2NrIG9mIGZsYXRzIGluIExvbmRvbiBmb3IgYSB0ZXJtIG9mIDk5IHllYXJzIGF0IGEgZ3JvdW5kIHJlbnQgb2YgXHUwMGEzMiw1MDAgYSB5ZWFyLiBUaGUgYmxvY2sgb2YgZmxhdHMgd2FzIGEgbmV3IG9uZSBhbmQgd2FzIG5vdCBmdWxseSBvY2N1cGllZCBhdCB0aGUgc3RhcnQgb2YgdGhlIFNlY29uZCBXb3JsZCBXYXIgb3dpbmcgdG8gdGhlIGFic2VuY2Ugb2YgcGVvcGxlIGZyb20gTG9uZG9uLiBXaXRoIHdhciBjb25kaXRpb25zIHByZXZhaWxpbmcsIGl0IHdhcyBhcHBhcmVudCB0byB0aG9zZSByZXNwb25zaWJsZSB0aGF0IHRoZSByZW50IHVuZGVyIHRoZSBsZWFzZSBjb3VsZCBub3QgYmUgcGFpZCBvdXQgb2YgdGhlIHByb2ZpdHMgb2YgdGhlIGZsYXRzLCBhbmQgZGlzY3Vzc2lvbnMgdG9vayBwbGFjZSBiZXR3ZWVuIHRoZSBkaXJlY3RvcnMgb2YgQyBhbmQgSCB3aGljaCByZXN1bHRlZCBpbiBhbiB3cml0dGVuIGFycmFuZ2VtZW50IHdoZXJlYnkgdGhlIGdyb3VuZCByZW50IHdvdWxkIGJlIHJlZHVjZWQgYXMgZnJvbSB0aGUgY29tbWVuY2VtZW50IG9mIHRoZSBsZWFzZSB0byBcdTAwYTMxLDI1MCBwZXIgYW5udW0uIEggcGFpZCB0aGUgcmVkdWNlZCByZW50IGZyb20gMTk0MSB0byB0aGUgYmVnaW5uaW5nIG9mIDE5NDUsIGJ5IHdoaWNoIHRpbWUgYWxsIHRoZSBmbGF0cyBpbiB0aGUgYmxvY2sgd2VyZSBmdWxseSBsZXQsIGFuZCBjb250aW51ZWQgdG8gcGF5IGl0IHRoZXJlYWZ0ZXIuIEMgc291Z2h0IHRvIHJlY292ZXIgXHUwMGEzNjI1LCBiZWluZyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHJlbnQgYXQgdGhlIHJhdGUgb2YgXHUwMGEzMiw1MDAgcGVyIGFubnVtIGFuZCByZW50IGF0IHRoZSByYXRlIG9mIFx1MDBhMzEsMjUwIHBlciBhbm51bSBmb3IgdGhlIGxhc3QgdHdvIHF1YXJ0ZXJzIG9mIDE5NDUuIEJ5IGl0cyBkZWZlbmNlIEggcGxlYWRlZCB0aGF0IHRoZXJlIGhhZCBiZWVuIGFuIGFncmVlbWVudCB0aGF0IHRoZSByZW50IHNob3VsZCBiZSBcdTAwYTMxLDI1MCBvbmx5IGFuZCB0aGF0IHN1Y2ggYWdyZWVtZW50IHJlbGF0ZWQgdG8gdGhlIHdob2xlIHRlcm0gb2YgdGhlIGxlYXNlLiBJbiB0aGUgYWx0ZXJuYXRpdmUsIEggYXNzZXJ0ZWQgdGhhdCBDIHdhcyBlc3RvcHBlZCBmcm9tIGFsbGVnaW5nIHRoYXQgdGhlIHJlbnQgZXhjZWVkZWQgXHUwMGEzMSwyNTAgcGVyIGFubnVtLiIKICAgIF0sCiAgICAiTkFNRSI6ICIod2wpIENlbnRyYWwgTG9uZG9uIFByb3BlcnR5IFRydXN0IHYgSGlnaCBUcmVlcyBIb3VzZSBMdGQiLAogICAgIkNJVCI6ICJbMTk0N10gS0IgMTMwIiwKICAgICJDSVRBVElPTiI6ICJDZW50cmFsIExvbmRvbiBQcm9wZXJ0eSBUcnVzdCB2IEhpZ2ggVHJlZXMgSG91c2UgTHRkIFsxOTQ3XSBLQiAxMzAiLAogICAgIkpVREdFIjogIkRlbm5pbmcgSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiSnVkZ21lbnQgZm9yIHBsYWludGlmZi4iLAogICAgICAgICJUaGVyZSBoYWQgYmVlbiBhIHNlcmllcyBvZiBkZWNpc2lvbnMgb3ZlciB0aGUgbGFzdCA1MCB5ZWFycyB3aGljaCwgYWx0aG91Z2ggdGhleSB3ZXJlIHNhaWQgdG8gYmUgY2FzZXMgb2YgZXN0b3BwZWwsIHdlcmUgbm90IHJlYWxseSBzdWNoLiBUaGV5IHdlcmUgY2FzZXMgaW4gd2hpY2ggYSBwcm9taXNlIHdhcyBtYWRlIHdoaWNoIHdhcyBpbnRlbmRlZCB0byBjcmVhdGUgbGVnYWwgcmVsYXRpb25zIGFuZCB3aGljaCwgdG8gdGhlIGtub3dsZWRnZSBvZiB0aGUgcGVyc29uIG1ha2luZyB0aGUgcHJvbWlzZSwgd2FzIGdvaW5nIHRvIGJlIGFjdGVkIG9uIGJ5IHRoZSBwZXJzb24gdG8gd2hvbSBpdCB3YXMgbWFkZSBhbmQgd2hpY2ggd2FzIGluIGZhY3QgYWN0ZWQgb24uIEluIHN1Y2ggY2FzZXMsIHRoZSBjb3VydHMgaGFkIHNhaWQgdGhhdCB0aGUgcHJvbWlzZSBoYWQgdG8gYmUgaG9ub3VyZWQuIEluIGVhY2ggY2FzZSwgdGhlIGNvdXJ0IGhlbGQgdGhlIHByb21pc2UgdG8gYmUgYmluZGluZyBvbiB0aGUgcGFydHkgbWFraW5nIGl0LCBldmVuIHRob3VnaCB1bmRlciB0aGUgb2xkIGNvbW1vbiBsYXcgaXQgbWlnaHQgYmUgZGlmZmljdWx0IHRvIGZpbmQgYW55IGNvbnNpZGVyYXRpb24gZm9yIGl0LiBUaGUgY291cnRzIGhhZCBub3QgZ29uZSBzbyBmYXIgYXMgdG8gZ2l2ZSBhIGNhdXNlIG9mIGFjdGlvbiBpbiBkYW1hZ2VzIGZvciB0aGUgYnJlYWNoIG9mIHN1Y2ggYSBwcm9taXNlLCBidXQgdGhleSBoYWQgcmVmdXNlZCB0byBhbGxvdyB0aGUgcGFydHkgbWFraW5nIGl0IHRvIGFjdCBpbmNvbnNpc3RlbnRseSB3aXRoIGl0LiBJdCB3YXMgaW4gdGhhdCBzZW5zZSwgYW5kIHRoYXQgc2Vuc2Ugb25seSwgdGhhdCBzdWNoIGEgcHJvbWlzZSBnYXZlIHJpc2UgdG8gYW4gZXN0b3BwZWwuIFRoZSB0aW1lIGhhZCBub3cgY29tZSBmb3IgdGhlIHZhbGlkaXR5IG9mIHN1Y2ggYSBwcm9taXNlIHRvIGJlIHJlY29nbmlzZWQuIFRoZSBsb2dpY2FsIGNvbnNlcXVlbmNlLCBubyBkb3VidCwgd2FzIHRoYXQgYSBwcm9taXNlIHRvIGFjY2VwdCBhIHNtYWxsZXIgc3VtIGluIGRpc2NoYXJnZSBvZiBhIGxhcmdlciBzdW0sIGlmIGFjdGVkIG9uLCB3YXMgYmluZGluZyBub3R3aXRoc3RhbmRpbmcgdGhlIGFic2VuY2Ugb2YgY29uc2lkZXJhdGlvbjsgYW5kIGlmIHRoZSBmdXNpb24gb2YgbGF3IGFuZCBlcXVpdHkgbGVkIHRvIHRoYXQgcmVzdWx0LCBzbyBtdWNoIHRoZSBiZXR0ZXIuIEEgYmluZGluZyBwcm9taXNlIGhhZCBiZWVuIG1hZGUgaW4gdGhlIGluc3RhbnQgY2FzZS4gQXMgdG8gdGhlIHNjb3BlIG9mIHRoYXQgcHJvbWlzZSwgdGhlIGV2aWRlbmNlIHNob3dlZCB0aGF0IEMgaGFkIGFncmVlZCB0aGF0IHRoZSBncm91bmQgcmVudCB3b3VsZCBiZSByZWR1Y2VkIHRvIFx1MDBhMzEsMjUwIGEgeWVhciBhcyBhIHRlbXBvcmFyeSBleHBlZGllbnQgd2hpbGUgdGhlIGJsb2NrIG9mIGZsYXRzIHdhcyBub3QgZnVsbHksIG9yIHN1YnN0YW50aWFsbHkgZnVsbHksIGxldCBvd2luZyB0byB0aGUgY29uZGl0aW9ucyBwcmV2YWlsaW5nLiBXaGVuIHRoZSBmbGF0cyBiZWNhbWUgZnVsbHkgbGV0LCBlYXJseSBpbiAxOTQ1LCB0aGUgcmVkdWN0aW9uIGNlYXNlZCB0byBhcHBseS4gUmVudCB3YXMgdGhlcmVmb3JlIHBheWFibGUgYXQgdGhlIGZ1bGwgcmF0ZSBmb3IgdGhlIGxhc3QgdHdvIHF1YXJ0ZXJzIG9mIDE5NDUuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiLAogICAgICAgICJEZW5uaW5nIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIlVLUEMiLAogICAgIkNBVEVHT1JZIjogIkVxdWl0eSBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMgJm1kYXNoOyBDb250cmFjdCBUZXJtcyAmbWRhc2g7IEVzdG9wcGVsICZtZGFzaDsgSGlyZSBQdXJjaGFzZSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRXF1aXR5IE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbnRyYWN0cyIsCiAgICAgICAgIkNvbnRyYWN0IFRlcm1zIiwKICAgICAgICAiRXN0b3BwZWwiLAogICAgICAgICJIaXJlIFB1cmNoYXNlIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIFJveXNjb3QgVHJ1c3QgdiBSb2dlcnNvbiIsCiAgICAgICAgIih3bCkgS2Fyc2FsZXMgKEhhcnJvdykgTHRkIHYgV2FsbGlzIiwKICAgICAgICAiKHdsKSBDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyAmIER5ZWluZyBDbyIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IEx0ZCIsCiAgICAgICAgIih3bCkgUmVhcmRvbiBTbWl0aCBMaW5lIEx0ZCB2IFluZ3ZhciBIYW5zZW4tVGFuZ2VuIiwKICAgICAgICAiKHdsKSBDaGFydGJyb29rIEx0ZCB2IFBlcnNpbW1vbiBIb21lcyBMdGQiLAogICAgICAgICIod2wpIFRla2RhdGEgSW50ZXJjb25uZWN0aW9ucyBMdGQgdiBBbXBoZW5vbCBMdGQiLAogICAgICAgICIod2wpIERhdmlzIENvbnRyYWN0b3JzIEx0ZCB2IEZhcmVoYW0gVXJiYW4gRGlzdHJpY3QgQ291bmNpbCIsCiAgICAgICAgIih3bCkgU2hvZ3VuIEZpbmFuY2UgTHRkIHYgSHVkc29uIiwKICAgICAgICAiKHdsKSBJbnRlcmZvdG8gUGljdHVyZSBMaWJyYXJ5IEx0ZCB2IFN0aWxldHRvIFZpc3VhbCBQcm9kdWN0aW9ucyBMdGQiLAogICAgICAgICIod2wpIE9zY2FyIENoZXNzIEx0ZCB2IFdpbGxpYW1zIiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNjgiLAogICAgIllFQVIiOiAiMTk2NCIsCiAgICAiTkFNRSI6ICIod2wpIEFqYXlpIChFQSkgdiBCcmlzY29lIChOaWdlcmlhKSBMdGQiLAogICAgIkNJVCI6ICJbMTk2NF0gMSBXTFIgMTMyNiIsCiAgICAiQ0lUQVRJT04iOiAiQWpheWkgKEVBKSB2IEJyaXNjb2UgKE5pZ2VyaWEpIEx0ZCBbMTk2NF0gMSBXTFIgMTMyNiIsCiAgICAiSlVER0UiOiAiTG9yZCBIb2Rzb247IExvcmQgTW9ycmlzIG9mIEJvcnRoLXktR2VzdDsgTG9yZCBHdWVzdCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAidGhhdCBQJiM4MjE3O3MgYWN0aW9uIHN1Y2NlZWRlZC4gKEJpcm1pbmdoYW0gJmFtcDsgRGlzdHJpY3QgTGFuZCBDbyB2IExvbmRvbiAmYW1wOyBOb3J0aCBXZXN0ZXJuIFJhaWx3YXkgQ28gKE5vLjIpICgxODg4KSA0MCBDaC4gRC4gMjY4IGRpc3Rpbmd1aXNoZWQsIGFuZCBUdW5nc3RlbiBFbGVjdHJpYyBDbyBMdGQgdiBUb29sIE1ldGFsIE1hbnVmYWN0dXJpbmcgQ28gTHRkIChOby4zKSBbMTk1NV0gMSBXLkwuUi4gNzYxIGRpc3Rpbmd1aXNoZWQ7IENlQ2VudHJhbCBMb25kb24gUHJvcGVydHkgVHJ1c3QgTHRkIHYgSGlnaCBUcmVlcyBIb3VzZSBMdGQgWzE5NDddIEsuQi4gMTMwIGNvbnNpZGVyZWQsIGFuZCBDb21iZSB2IENvbWJlIFsxOTUxXSAyIEsuQi4gMjE1IGNvbnNpZGVyZWQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXSEMiLAogICAgIkNBVEVHT1JZIjogIkNyaW1pbmFsIFByb2NlZHVyZSAmbWRhc2g7IEFzc2Vzc21lbnQgJm1kYXNoOyBDb3N0cyAmbWRhc2g7IENvdXJ0cyAmbWRhc2g7IExlZ2FsIFJlcHJlc2VudGF0aW9uIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDcmltaW5hbCBQcm9jZWR1cmUiLAogICAgICAgICJBc3Nlc3NtZW50IiwKICAgICAgICAiQ29zdHMiLAogICAgICAgICJDb3VydHMiLAogICAgICAgICJMZWdhbCBSZXByZXNlbnRhdGlvbiIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBQYW8gT24gdiBMYXUgWWl1IExvbmciLAogICAgICAgICIod2wpIEJyaXRpc2ggQ3JhbmUgSGlyZSBDb3Jwb3JhdGlvbiBMdGQgdiBJcHN3aWNoIFBsYW50IEhpcmUgTHRkIiwKICAgICAgICAiKHdsKSBIIFBhcnNvbnMgKExpdmVzdG9jaykgTHRkIHYgVXR0bGV5IEluZ2hhbSAmIENvIiwKICAgICAgICAiKHdsKSBIZWRsZXkgQnlybmUgJiBDbyBMdGQgdiBIZWxsZXIgJiBQYXJ0bmVycyIsCiAgICAgICAgIih3bCkgQnJpdGlzaCBTdGVlbCBDb3Jwb3JhdGlvbiB2IENsZXZlbGFuZCBCcmlkZ2UgYW5kIEVuZ2luZWVyaW5nIENvIEx0ZCIsCiAgICAgICAgIih3bCkgQ2FwYXJvIEluZHVzdHJpZXMgcGxjIHYgRGlja21hbiIsCiAgICAgICAgIih3bCkgRmluZWx2ZXQgQUcgdiBWaW5hdmEgU2hpcHBpbmcgQ28gTHRkLCBUaGUgQ2hyeXNhbGlzIiwKICAgICAgICAiKHdsKSBBdHRvcm5leSBHZW5lcmFsIG9mIEJlbGl6ZSB2IEJlbGl6ZSBUZWxlY29tIEx0ZCIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IiwKICAgICAgICAiKHdsKSBIb2xsaWVyIHYgUmFtYmxlciBNb3RvcnMgKEFNQykgTHRkIiwKICAgICAgICAiKHdsKSBBc3NvY2lhdGVkIEphcGFuZXNlIEJhbmsgKEludGVybmF0aW9uYWwpIEx0ZCB2IENyZWRpdCBkdSBOb3JkIiwKICAgICAgICAiKHdsKSBIb2x3ZWxsIFNlY3VyaXRpZXMgTHRkIHYgSHVnaGVzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTY5IiwKICAgICJZRUFSIjogIjE5ODIiLAogICAgIk5BTUUiOiAiKHdsKSBTb2NpZXRlIEl0YWxvLUJlbGdlIHYgUGFsbSBhbmQgVmVnZXRhYmxlIE9pbHMsIE1hbGF5c2lhIChUaGUgUG9zdCBDaGFzZXIpIiwKICAgICJDSVQiOiAiWzE5ODJdIDEgV0xSIDYzMSIsCiAgICAiQ0lUQVRJT04iOiAiU29jaWV0ZSBJdGFsby1CZWxnZSB2IFBhbG0gYW5kIFZlZ2V0YWJsZSBPaWxzLCBNYWxheXNpYSAoVGhlIFBvc3QgQ2hhc2VyKSBbMTk4Ml0gMSBXTFIgNjMxIiwKICAgICJKVURHRSI6ICJMb3JkIExhbmUgTENKOyBXb29sZiBKIiwKICAgICJIRUxEIjogWwogICAgICAgICJncmFudGluZyB0aGUgYXBwbGljYXRpb24sIHRoYXQgYWx0aG91Z2ggdGhlIGxvY2FsIGF1dGhvcml0eSB3YXMgZW50aXRsZWQgdG8gYmUgcmVpbWJ1cnNlZCBmb3IgY29zdHMgcHJvcGVybHkgaW5jdXJyZWQsIHRoZSBhbW91bnQgb2YgY29zdHMgd2FzIHNvIGdyZWF0IHRoYXQgdGhlIGluZmVyZW5jZSB0byBiZSBkcmF3biB3YXMgdGhhdCB0aGUganVzdGljZXMgaGFkIGVycmVkIGluIGxhdyBpbiBleGVyY2lzaW5nIHRoZWlyIGRpc2NyZXRpb24gKFIuIHYgU3QgQWxiYW5zIENyb3duIENvdXJ0IEV4IHAuIENpbm5hbW9uZCBbMTk4MV0gUS5CLiA0ODAgYXBwbGllZCkuIFRoZSBqdXN0aWNlcyYjODIxNzsgcmVhc29ucyBkaXNjbG9zZWQgdGhhdCB0aGV5IHRvb2sgaW50byBhY2NvdW50IHRoZSBpcnJlbGV2YW50IG1hdHRlcnMgb2YgdGhlIHNvdXJjZSBvZiB0aGUgbG9jYWwgYXV0aG9yaXR5JiM4MjE3O3MgcmV2ZW51ZSBhbmQgaXRzIGR1dHkgdG8gcHJvc2VjdXRlIHN1Y2ggY2FzZXMuIEl0IHdhcyBpbmFwcHJvcHJpYXRlIHRvIHVzZSBhIHNjYWxlIG9mIGNvc3RzIGF3YXJkZWQgaW4gbGVnYWwgYWlkIGNhc2VzIHRvIGEgc2l0dWF0aW9uIHdoZXJlIGEgbGVnYWxseSB1bnF1YWxpZmllZCBvZmZpY2VyIG9mIHRoZSBhdXRob3JpdHkgY29uZHVjdGVkIHRoZSBwcm9zZWN1dGlvbiBhbmQgdGhlcmUgd2FzIG5vIGxlZ2FsIHJlcHJlc2VudGF0aW9uLCBvciB0byBtdWx0aXBseSB0aGUgY29zdHMgYnkgdGhlIG51bWJlciBvZiBzdW1tb25zZXMgaXNzdWVkIGFzIGEgcmVzdWx0IG9mIHRoZSBpbnNwZWN0aW9uIG9mIHRoZSBwcmVtaXNlcy4gSW4gdGhlIGNpcmN1bXN0YW5jZXMgdGhlIG9yZGVyIGZvciBjb3N0cywgd2hpY2ggc2hvdWxkIGhhdmUgYmVlbiBHQlAgNzQsIHdvdWxkIGJlIHF1YXNoZWQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiQ29udHJhY3RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IEJhbmtpbmcgYW5kIEZpbmFuY2UgJm1kYXNoOyBBY2NvcmQgYW5kIFNhdGlzZmFjdGlvbiAmbWRhc2g7IENoZXF1ZXMgJm1kYXNoOyBEZWZlbmNlcyAvIENvbnRyYWN0cyAmbWRhc2g7IEFncmVlbWVudHMgJm1kYXNoOyBQcm9taXNzb3J5IEVzdG9wcGVsICZtZGFzaDsgU3RhdHV0b3J5IERlbWFuZHMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnRyYWN0cyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBCYW5raW5nIGFuZCBGaW5hbmNlIiwKICAgICAgICAiQWNjb3JkIGFuZCBTYXRpc2ZhY3Rpb24iLAogICAgICAgICJDaGVxdWVzIiwKICAgICAgICAiRGVmZW5jZXMiLAogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJBZ3JlZW1lbnRzIiwKICAgICAgICAiUHJvbWlzc29yeSBFc3RvcHBlbCIsCiAgICAgICAgIlN0YXR1dG9yeSBEZW1hbmRzIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIFN1ZGJyb29rIFRyYWRpbmcgRXN0YXRlIEx0ZCB2IEVnZ2xldG9uIiwKICAgICAgICAiKHdsKSBSZSBTZWxlY3Rtb3ZlIEx0ZCIsCiAgICAgICAgIih3bCkgSW50ZXJmb3RvIFBpY3R1cmUgTGlicmFyeSBMdGQgdiBTdGlsZXR0byBWaXN1YWwgUHJvZHVjdGlvbnMgTHRkIiwKICAgICAgICAiKHdsKSBOaWNvbGVuZSB2IFNpbW1vbmRzIiwKICAgICAgICAiKHdsKSBFc3NvIFBldHJvbGV1bSBDbyBMdGQgdiBNYXJkb24iLAogICAgICAgICIod2wpIEhlZGxleSBCeXJuZSAmIENvIEx0ZCB2IEhlbGxlciAmIFBhcnRuZXJzIiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQgTHRkIiwKICAgICAgICAiKHdsKSBIYXJ2ZWxhIEludmVzdG1lbnRzIEx0ZCB2IFJveWFsIFRydXN0IG9mIENhbmFkYSBMdGQiLAogICAgICAgICIod2wpIEN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nICYgRHllaW5nIENvIiwKICAgICAgICAiKHdsKSBQYW8gT24gdiBMYXUgWWl1IExvbmciLAogICAgICAgICIod2wpIFBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCIsCiAgICAgICAgIih3bCkgR3JlYXQgUGVhY2UgU2hpcHBpbmcgTHRkIHYgVHNhdmxpcmlzIChJbnRlcm5hdGlvbmFsKSBMdGQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNzAiLAogICAgIllFQVIiOiAiMjAwNyIsCiAgICAiQ09VTlNFTCI6ICJGb3IgdGhlIGFwcGVsbGFudDogRGF2aWQgVWZmLiBGb3IgdGhlIHJlc3BvbmRlbnQ6IFNpd2FyZCBBdGtpbnMuIiwKICAgICJBQlNUUkFDVCI6IFsKICAgICAgICAiVGhlIGFwcGVsbGFudCAoQykgYXBwZWFsZWQgYWdhaW5zdCBhIGRlY2lzaW9uIG5vdCB0byBzZXQgYXNpZGUgYSBzdGF0dXRvcnkgZGVtYW5kIHNlcnZlZCBvbiBoaW0gYnkgdGhlIHJlc3BvbmRlbnQgKFcpLiIsCiAgICAgICAgIlcgaGFkIG9idGFpbmVkIGEganVkZ21lbnQgYnkgY29uc2VudCBhZ2FpbnN0IHRocmVlIHBhcnRuZXJzIG9mIHdob20gQyB3YXMgb25lLiBUaGUgcGFydG5lcnMmIzgyMTc7IGxpYWJpbGl0eSB3YXMgam9pbnQuIFRoZSBjb25zZW50IG9yZGVyIHByb3ZpZGVkIGZvciB0aGUgdGhyZWUgcGFydG5lcnMgdG8gcGF5IHRoZSBqdWRnbWVudCBkZWJ0IGJ5IG1vbnRobHkgaW5zdGFsbWVudHMuIEMgaGFkIHBhaWQgYSB0aGlyZCBvZiB0aGUgZGVidCBieSBpbnN0YWxtZW50cy4gSGlzIHBhcnRuZXJzIGhhZCBiZWNvbWUgYmFua3J1cHQuIFcgc2VydmVkIGEgc3RhdHV0b3J5IGRlbWFuZCBvbiBDIGZvciB0aGUgYmFsYW5jZSBvZiB0aGUganVkZ21lbnQgZGVidC4gQyBhcHBsaWVkIHRvIHNldCBhc2lkZSB0aGUgZGVtYW5kIHJlbHlpbmcgb24gYW4gYWxsZWdlZCBhZ3JlZW1lbnQgYnkgVyB0aGF0IGlmIEMgY29udGludWVkIHRvIHBheSBoaXMgc2hhcmUgb2YgdGhlIGp1ZGdtZW50IFcgd291bGQgbm90IGxvb2sgdG8gaGltIGJ1dCBvbmx5IHRvIGhpcyBwYXJ0bmVycyBmb3IgdGhlIGJhbGFuY2UuIiwKICAgICAgICAiQyBzdWJtaXR0ZWQgdGhhdCAoMSkgaGlzIGFsbGVnZWQgYWdyZWVtZW50IHdpdGggVyB3YXMgYmluZGluZyBiZWNhdXNlIGJ5IGFncmVlaW5nIHRvIGFjY2VwdCBzb2xlIHJlc3BvbnNpYmlsaXR5IGZvciBoaXMgb25lLXRoaXJkIHNoYXJlIGhlIGdhdmUgY29uc2lkZXJhdGlvbiBmb3IgVyYjODIxNztzIHByb21pc2UgdG8gYWNjZXB0IGhpbSBhcyBhIGRlYnRvciBmb3Igb25seSBhIG9uZS10aGlyZCBzaGFyZSBvZiB0aGUganVkZ21lbnQgZGVidDsgKDIpIGEgcHJvbWlzc29yeSBlc3RvcHBlbCBwcmV2ZW50ZWQgVyBmcm9tIHByb2NlZWRpbmcgYWdhaW5zdCBoaW0gZm9yIG1vcmUgdGhhbiBhIG9uZS10aGlyZCBzaGFyZSBvZiB0aGUgZGVidC4iCiAgICBdLAogICAgIk5BTUUiOiAiKHdsKSBDb2xsaWVyIHYgV3JpZ2h0IChIb2xkaW5ncykgTHRkIiwKICAgICJDSVQiOiAiWzIwMDddIEVXQ0EgQ2l2IDEzMjkiLAogICAgIkNJVEFUSU9OIjogIkNvbGxpZXIgdiBXcmlnaHQgKEhvbGRpbmdzKSBMdGQgWzIwMDddIEVXQ0EgQ2l2IDEzMjkiLAogICAgIkpVREdFIjogIk11bW1lcnkgTEo7IEFyZGVuIExKOyBMb25nbW9yZSBMSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQXBwZWFsIGFsbG93ZWQuIiwKICAgICAgICAiKDEpIFRoZSBtZXJlIGZhY3QgdGhhdCBhIGNyZWRpdG9yIGFncmVlZCB3aXRoIGEgam9pbnQgZGVidG9yIHRvIGFjY2VwdCBwYXltZW50IGZyb20gaGltIGFsb25lIG9mIGhpcyBwcm9wb3J0aW9uYXRlIHNoYXJlIGRpZCBub3QgcmVzdWx0IGluIGEgYmluZGluZyBhZ3JlZW1lbnQuIFRoZSBhbGxlZ2VkIGFncmVlbWVudCBtYWRlIGJldHdlZW4gQyBhbmQgVyB3YXMgbWVyZWx5IHRvIGFjY2VwdCBhIGxlc3NlciBzdW0gZnJvbSBDIHRoYW4gdGhhdCB3aGljaCB3YXMgZHVlIGFuZCB0aGF0IHdhcyBub3QgYSBiaW5kaW5nIGFncmVlbWVudCBpbiBsYXcgc2luY2UgaXQgaGFkIG5vIGNvbnNpZGVyYXRpb24gdG8gc3VwcG9ydCBpdCwgRm9ha2VzIHYgQmVlciAoMTg4NCkgOSBBcHAuIENhcy4gNjA1IGFwcGxpZWQuICgyKSBUaGVyZSB3YXMgYSByZWFsIHByb3NwZWN0IG9mIHN1Y2Nlc3Mgb24gdGhlIHByb21pc3NvcnkgZXN0b3BwZWwgaXNzdWUuIEl0IHdhcyBhcmd1YWJsZSB0aGF0IHRoZXJlIHdhcyBhbiBhZ3JlZW1lbnQgb3IgcmVwcmVzZW50YXRpb24gYnkgVyBub3QgdG8gc3VlIEMgZm9yIHRoZSBmdWxsIGp1ZGdtZW50IHN1bS4gSXQgY291bGQgYmUgc3VmZmljaWVudCByZWxpYW5jZSBmb3IgdGhlIHB1cnBvc2Ugb2YgcHJvbWlzc29yeSBlc3RvcHBlbCBpZiBhIGxlc3NlciBwYXltZW50IHdhcyBtYWRlIGFzIGFncmVlZCwgcHJvdmlkZWQgdGhlcmUgd2FzIGFuIGFjY29yZCwgRCZhbXA7QyBCdWlsZGVycyBMdGQgdiBSZWVzIFsxOTY2XSAyIFEuQi4gNjE3IGNvbnNpZGVyZWQuIEl0IHdhcyBhcmd1YWJsZSB0aGF0IGl0IHdvdWxkIGJlIGluZXF1aXRhYmxlIGZvciBXIHRvIHJlc2lsZSBmcm9tIGl0cyBwcm9taXNlLCBEJmFtcDtDIEJ1aWxkZXJzIEx0ZCB2IFJlZXMgY29uc2lkZXJlZC4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJVS0hMIiwKICAgICJDQVRFR09SWSI6ICJDb250cmFjdHMgJm1kYXNoOyBMZWdhbCBSaWdodHMgJm1kYXNoOyBQZW5hbHR5IENsYXVzZXMgJm1kYXNoOyBTdXNwZW5zaW9uICZtZGFzaDsgVmFyaWF0aW9uIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJMZWdhbCBSaWdodHMiLAogICAgICAgICJQZW5hbHR5IENsYXVzZXMiLAogICAgICAgICJTdXNwZW5zaW9uIiwKICAgICAgICAiVmFyaWF0aW9uIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIFNob2d1biBGaW5hbmNlIEx0ZCB2IEh1ZHNvbiIsCiAgICAgICAgIih3bCkgQnJpdGlzaCBTdGVlbCBDb3Jwb3JhdGlvbiB2IENsZXZlbGFuZCBCcmlkZ2UgYW5kIEVuZ2luZWVyaW5nIENvIEx0ZCIsCiAgICAgICAgIih3bCkgTmljb2xlbmUgdiBTaW1tb25kcyIsCiAgICAgICAgIih3bCkgQ2hhcHBlbGwgJiBDbyB2IE5lc3RsZSBDbyBMdGQiLAogICAgICAgICIod2wpIEJyaXRpc2ggQ3JhbmUgSGlyZSBDb3Jwb3JhdGlvbiBMdGQgdiBJcHN3aWNoIFBsYW50IEhpcmUgTHRkIiwKICAgICAgICAiKHdsKSBBc3NvY2lhdGVkIEphcGFuZXNlIEJhbmsgKEludGVybmF0aW9uYWwpIEx0ZCB2IENyZWRpdCBkdSBOb3JkIiwKICAgICAgICAiKHdsKSBTdWRicm9vayBUcmFkaW5nIEVzdGF0ZSBMdGQgdiBFZ2dsZXRvbiIsCiAgICAgICAgIih3bCkgUGFya2VyIHYgQ2xhcmsiLAogICAgICAgICIod2wpIEZpc2hlciB2IEJlbGwiLAogICAgICAgICIod2wpIENvdXJ0bmV5ICYgRmFpcmJhaXJuIEx0ZCB2IFRvbGFpbmkgQnJvcyAoSG90ZWxzKSBMdGQiLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiLAogICAgICAgICIod2wpIEhlZGxleSBCeXJuZSAmIENvIEx0ZCB2IEhlbGxlciAmIFBhcnRuZXJzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTcxIiwKICAgICJZRUFSIjogIjE5NTUiLAogICAgIk5BTUUiOiAiKHdsKSBUb29sIE1ldGFsIE1hbnVmYWN0dXJpbmcgQ28gTHRkIHYgVHVuZ3N0ZW4gRWxlY3RyaWMgQ28gTHRkIiwKICAgICJDSVQiOiAiWzE5NTVdIDEgV0xSIDc2MSIsCiAgICAiQ0lUQVRJT04iOiAiVG9vbCBNZXRhbCBNYW51ZmFjdHVyaW5nIENvIEx0ZCB2IFR1bmdzdGVuIEVsZWN0cmljIENvIEx0ZCBbMTk1NV0gMSBXTFIgNzYxIiwKICAgICJKVURHRSI6ICJWaXNjb3VudCBTaW1vbmRzOyBMb3JkIE9ha3NleTsgTG9yZCBUdWNrZXI7IExvcmQgQ29oZW4iLAogICAgIkhFTEQiOiBbCiAgICAgICAgIm9uIGFwcGVhbCwgdGhlIGRlbGl2ZXJ5IG9mIHRoZSBjb3VudGVyY2xhaW0gd2FzIHN1ZmZpY2llbnQgbm90aWNlIG9mIHRlcm1pbmF0aW9uIG9mIHRoZSBhcnJhbmdlbWVudCBmb3Igc3VzcGVuc2lvbiBvZiBwYXltZW50IG9mIGNvbXBlbnNhdGlvbjsgdGhlIGNvbXBlbnNhdGlvbiBjbGF1c2UgZGlkIG5vdCBpbXBvc2UgYSBwZW5hbHR5LCBub3Igd2FzIGl0IGluIHJlc3RyYWludCBvZiB0cmFkZSwgbm9yIGRpZCBpdCBvZmZlbmQgYWdhaW5zdCB0aGUgUGF0ZW50cyBhbmQgRGVzaWducyBBY3QgMTkwNyBzLjM4KDEpKGEpICwgd2hpY2ggaW52YWxpZGF0ZXMgYSBjbGF1c2UgaW4gYSBsaWNlbmNlIHJlc3RyaWN0aW5nIHRoZSBsaWNlbnNlZSBmcm9tIHVzaW5nIG1hdGVyaWFsIHN1cHBsaWVkIGJ5IGEgcGVyc29uIG90aGVyIHRoYW4gdGhlIGxpY2Vuc29yOyBjb25zZXF1ZW50bHksIHRoZSBhcHBlYWwgbXVzdCBiZSBhbGxvd2VkLiBIdWdoZXMgdiBNZXRyb3BvbGl0YW4gUmFpbHdheSBDbyAoMTg3NykgMiBBcHAuIENhcy4gNDM5IGFwcGxpZWQ7IGFuZCBCaXJtaW5naGFtICZhbXA7IERpc3RyaWN0IExhbmQgQ28gdiBMb25kb24gJmFtcDsgTm9ydGggV2VzdGVybiBSYWlsd2F5IENvIChOby4yKSAoMTg4OCkgNDAgQ2guIEQuIDI2OCBhcHBsaWVkOyBDYW5hZGlhbiBQYWNpZmljIFJhaWx3YXkgQ28gdiBLaW5nLCBUaGUgWzE5MzFdIEEuQy4gNDE0IGRpc3Rpbmd1aXNoZWQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIlVLSEwiLAogICAgIkNBVEVHT1JZIjogIlJvYWQgVHJhZmZpYyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBUcmFuc3BvcnQgJm1kYXNoOyBJbnN1cmFuY2UgJm1kYXNoOyBDYXJzICZtZGFzaDsgSGlyaW5nICZtZGFzaDsgTW90b3IgSW5zdXJhbmNlICZtZGFzaDsgTW90b3IgSW5zdXJlcnMnIEJ1cmVhdSAmbWRhc2g7IFBhc3NlbmdlcnMgJm1kYXNoOyBQYXltZW50cyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiUm9hZCBUcmFmZmljIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IFRyYW5zcG9ydCIsCiAgICAgICAgIkluc3VyYW5jZSIsCiAgICAgICAgIkNhcnMiLAogICAgICAgICJIaXJpbmciLAogICAgICAgICJNb3RvciBJbnN1cmFuY2UiLAogICAgICAgICJNb3RvciBJbnN1cmVycycgQnVyZWF1IiwKICAgICAgICAiUGFzc2VuZ2VycyIsCiAgICAgICAgIlBheW1lbnRzIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIFRoZSBCcmltbmVzIiwKICAgICAgICAiKHdsKSBQYW8gT24gdiBMYXUgWWl1IExvbmciLAogICAgICAgICIod2wpIEJyaXRpc2ggQ3JhbmUgSGlyZSBDb3Jwb3JhdGlvbiBMdGQgdiBJcHN3aWNoIFBsYW50IEhpcmUgTHRkIiwKICAgICAgICAiKHdsKSBXaGl0ZSAmIENhcnRlciAoQ291bmNpbHMpIEx0ZCB2IE1jR3JlZ29yIiwKICAgICAgICAiKHdsKSBLaW5nJ3MgTm9ydG9uIE1ldGFsIENvIEx0ZCB2IEVkcmlkZ2UsIE1lcnJldHQgJiBDbyIsCiAgICAgICAgIih3bCkgT3NjYXIgQ2hlc3MgTHRkIHYgV2lsbGlhbXMiLAogICAgICAgICIod2wpIEhvbGxpZXIgdiBSYW1ibGVyIE1vdG9ycyAoQU1DKSBMdGQiLAogICAgICAgICIod2wpIFNob2d1biBGaW5hbmNlIEx0ZCB2IEh1ZHNvbiIsCiAgICAgICAgIih3bCkgSGVuZGVyc29uIHYgTWVycmV0dCBTeW5kaWNhdGVzIiwKICAgICAgICAiKHdsKSBPdmVyYnJvb2tlIEVzdGF0ZXMgTHRkIHYgR2xlbmNvbWJlIFByb3BlcnRpZXMgTHRkIiwKICAgICAgICAiKHdsKSBCUlMgdiBBcnRodXIgQ3J1dGNobGV5IEx0ZCIsCiAgICAgICAgIih3bCkgVGlubiB2IEhvZmZtYW4gJiBDbyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE3MiIsCiAgICAiWUVBUiI6ICIxOTcyIiwKICAgICJOQU1FIjogIih3bCkgQWxiZXJ0IHYgTW90b3IgSW5zdXJlcnMnIEJ1cmVhdSIsCiAgICAiQ0lUIjogIlsxOTcyXSBBQyAzMDEiLAogICAgIkNJVEFUSU9OIjogIkFsYmVydCB2IE1vdG9yIEluc3VyZXJzJiM4MjE3OyBCdXJlYXUgWzE5NzJdIEFDIDMwMSIsCiAgICAiSlVER0UiOiAiTG9yZCBEb25vdmFuOyBWaXNjb3VudCBEaWxob3JuZTsgTG9yZCBQZWFyc29uOyBMb3JkIERpcGxvY2s7IExvcmQgQ3Jvc3Mgb2YgQ2hlbHNlYSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAidGhhdCBhIGNvbnRyYWN0IGZvciBwYXltZW50IHdhcyB1bm5lY2Vzc2FyeSBhbmQgdGhhdCB0aGUgc3lzdGVtYXRpYyBjYXJyeWluZyBvZiBwYXNzZW5nZXJzIGluIHRoZSBleHBlY3RhdGlvbiBvZiBwYXltZW50IGNvbnN0aXR1dGVkIHRoZSB2ZWhpY2xlIG9uZSB1c2VkIGZvciBjYXJyeWluZyBwYXNzZW5nZXJzIGZvciBoaXJlIG9yIHJld2FyZC4gKCBDb3dhcmQgdiBNb3RvciBJbnN1cmVycyYjODIxNzsgQnVyZWF1IFsxOTYzXSAxIFEuQi4gMjU5IGNvbnNpZGVyZWQgYW5kIENvbm5lbGwgdiBNb3RvciBJbnN1cmVycyYjODIxNzsgQnVyZWF1IFsxOTY5XSAyIFEuQi4gNDk0IGNvbnNpZGVyZWQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkZhbWlseSBMYXcgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogUmVhbCBQcm9wZXJ0eSAmbWRhc2g7IEFncmVlbWVudHMgJm1kYXNoOyBNYXRyaW1vbmlhbCBIb21lICZtZGFzaDsgU2VwYXJhdGlvbiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBQZXR0aXR0IHYgUGV0dGl0dCIsCiAgICAgICAgIih3bCkgQ29sbGllciB2IFdyaWdodCAoSG9sZGluZ3MpIEx0ZCIsCiAgICAgICAgIih3bCkgU3VkYnJvb2sgVHJhZGluZyBFc3RhdGUgTHRkIHYgRWdnbGV0b24iLAogICAgICAgICIod2wpIFJlIFNlbGVjdG1vdmUgTHRkIiwKICAgICAgICAiKHdsKSBLaW5nJ3MgTm9ydG9uIE1ldGFsIENvIEx0ZCB2IEVkcmlkZ2UsIE1lcnJldHQgJiBDbyIsCiAgICAgICAgIih3bCkgTWNDdWxsb3VnaCB2IExhbmUgRm94IGFuZCBQYXJ0bmVycyBMdGQiLAogICAgICAgICIod2wpIEVkbW9uZHMgdiBMYXdzb24iLAogICAgICAgICIod2wpIEtsZWlud29ydCBCZW5zb24gTHRkIHYgTWFsYXlzaWEgTWluaW5nIENvcnBvcmF0aW9uIiwKICAgICAgICAiKHdsKSBUb29sIE1ldGFsIE1hbnVmYWN0dXJpbmcgQ28gTHRkIHYgVHVuZ3N0ZW4gRWxlY3RyaWMgQ28gTHRkIiwKICAgICAgICAiKHdsKSBPc2NhciBDaGVzcyBMdGQgdiBXaWxsaWFtcyIsCiAgICAgICAgIih3bCkgQnJpdGlzaCBTdGVlbCBDb3Jwb3JhdGlvbiB2IENsZXZlbGFuZCBCcmlkZ2UgYW5kIEVuZ2luZWVyaW5nIENvIEx0ZCIsCiAgICAgICAgIih3bCkgR3JlYXQgUGVhY2UgU2hpcHBpbmcgTHRkIHYgVHNhdmxpcmlzIChJbnRlcm5hdGlvbmFsKSBMdGQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNzMiLAogICAgIllFQVIiOiAiMTk3MCIsCiAgICAiTkFNRSI6ICIod2wpIE1lcnJpdHQgdiBNZXJyaXR0IiwKICAgICJDSVQiOiAiWzE5NzBdIDEgV0xSIDEyMTEiLAogICAgIkNJVEFUSU9OIjogIk1lcnJpdHQgdiBNZXJyaXR0IFsxOTcwXSAxIFdMUiAxMjExIiwKICAgICJKVURHRSI6ICJMb3JkIERlbm5pbmcgTVI7IFdpZGdlcnkgTEo7IEthcm1pbnNraSBMSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAidGhhdCB0aGUgd2lmZSB3YXMgZW50aXRsZWQgdG8gYSBkZWNsYXJhdGlvbiB0aGF0IHNoZSB3YXMgdGhlIHNvbGUgb3duZXIgb2YgdGhlIGhvdXNlIGFuZCBhbiBvcmRlciB0aGF0IHRoZSBodXNiYW5kIGpvaW4gaW4gdHJhbnNmZXJyaW5nIGl0IHRvIGhlci4gKCBCYWxmb3VyIHYgQmFsZm91ciBbMTkxOV0gMiBLLkIuIDU3MSBjb25zaWRlcmVkOyBhbmQgR291bGQgdiBHb3VsZCBbMTk3MF0gMSBRLkIuIDI3NSBjb25zaWRlcmVkOyBKb25lcyB2IFBhZGF2YXR0b24gWzE5NjldIDEgVy5MLlIuIDMyOCBkaXN0aW5ndWlzaGVkKS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJEZW5uaW5nIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGYW1pbHkgTGF3IE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IFJlYWwgUHJvcGVydHkiLAogICAgICAgICJBZ3JlZW1lbnRzIiwKICAgICAgICAiTWF0cmltb25pYWwgSG9tZSIsCiAgICAgICAgIlNlcGFyYXRpb24iCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiVUtITCIsCiAgICAiQ0FURUdPUlkiOiAiRmFtaWx5IExhdyAmbWRhc2g7IE1hdHJpbW9uaWFsIEhvbWUgJm1kYXNoOyBTYWxlIG9mIExhbmQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZhbWlseSBMYXciLAogICAgICAgICJNYXRyaW1vbmlhbCBIb21lIiwKICAgICAgICAiU2FsZSBvZiBMYW5kIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIE1lcnJpdHQgdiBNZXJyaXR0IiwKICAgICAgICAiKHdsKSBQYW8gT24gdiBMYXUgWWl1IExvbmciLAogICAgICAgICIod2wpIEJyb2dkZW4gdiBNZXRyb3BvbGl0YW4gUmFpbHdheSIsCiAgICAgICAgIih3bCkgRWFzdCB2IE1hdXJlciIsCiAgICAgICAgIih3bCkgQmFuayBvZiBDcmVkaXQgYW5kIENvbW1lcmNlIEludGVybmF0aW9uYWwgU0EgdiBBbGkiLAogICAgICAgICIod2wpIEogRXZhbnMgJiBTb24gKFBvcnRzbW91dGgpIHYgQW5kcmVhIE1lcnphcmlvIEx0ZCIsCiAgICAgICAgIih3bCkgQ2hhcHBlbGwgJiBDbyB2IE5lc3RsZSBDbyBMdGQiLAogICAgICAgICIod2wpIENhdmVuZGlzaCBTcXVhcmUgSG9sZGluZyBCViB2IFRhbGFsIEVsIE1ha2Rlc3NpOyBQYXJraW5nRXllIEx0ZCB2IEJlYXZpcyIsCiAgICAgICAgIih3bCkgQnJpdGlzaCBDcmFuZSBIaXJlIENvcnBvcmF0aW9uIEx0ZCB2IElwc3dpY2ggUGxhbnQgSGlyZSBMdGQiLAogICAgICAgICIod2wpIE92ZXJicm9va2UgRXN0YXRlcyBMdGQgdiBHbGVuY29tYmUgUHJvcGVydGllcyBMdGQiLAogICAgICAgICIod2wpIEhvbGxpZXIgdiBSYW1ibGVyIE1vdG9ycyAoQU1DKSBMdGQiLAogICAgICAgICIod2wpIERhdWxpYSBMdGQgdiBGb3VyIE1pbGxiYW5rIE5vbWluZWVzIEx0ZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE3NCIsCiAgICAiWUVBUiI6ICIxOTcwIiwKICAgICJOQU1FIjogIih3bCkgUGV0dGl0dCB2IFBldHRpdHQiLAogICAgIkNJVCI6ICJbMTk3MF0gQUMgNzc3IiwKICAgICJDSVRBVElPTiI6ICJQZXR0aXR0IHYgUGV0dGl0dCBbMTk3MF0gQUMgNzc3IiwKICAgICJKVURHRSI6ICJMb3JkIFJlaWQ7IExvcmQgTW9ycmlzIG9mIEJvcnRoLXktR2VzdDsgTG9yZCBIb2Rzb247IExvcmQgVXBqb2huOyBMb3JkIERpcGxvY2siLAogICAgIkhFTEQiOiBbCiAgICAgICAgImFsbG93aW5nIFcmIzgyMTc7cyBhcHBlYWwsICgxKSB0aGF0IHMuMTcgd2FzIG1lcmVseSBwcm9jZWR1cmFsLCBhbmQgKDIpIHRoYXQgaW4gdGhlIGFic2VuY2Ugb2YgYW55IGFncmVlbWVudCBvciBlc3RvcHBlbCB0byB0aGUgY29udHJhcnkgVyB3YXMgYWJzb2x1dGVseSBlbnRpdGxlZCB0byB0aGUgaG9tZSBvciB0aGUgcHJvY2VlZHMgb2YgaXRzIHNhbGUuICggQXBwbGV0b24gdiBBcHBsZXRvbiBbMTk2NV0gMSBXLkwuUi4gMjUgb3ZlcnJ1bGVkKS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0hDIiwKICAgICJDQVRFR09SWSI6ICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogRmFtaWx5IExhdyAmbWRhc2g7IEVuZm9yY2VtZW50ICZtZGFzaDsgRmFtaWxpZXMgJm1kYXNoOyBJbnRlbnRpb24gLyBDb250cmFjdHMgJm1kYXNoOyBGb3JtYXRpb24gb2YgQ29udHJhY3QgJm1kYXNoOyBJbnRlbnRpb24gJm1kYXNoOyBTdWNjZXNzaW9uIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogRmFtaWx5IExhdyIsCiAgICAgICAgIkVuZm9yY2VtZW50IiwKICAgICAgICAiRmFtaWxpZXMiLAogICAgICAgICJJbnRlbnRpb24iLAogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJGb3JtYXRpb24gb2YgQ29udHJhY3QiLAogICAgICAgICJJbnRlbnRpb24iLAogICAgICAgICJTdWNjZXNzaW9uIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIEFzc29jaWF0ZWQgSmFwYW5lc2UgQmFuayAoSW50ZXJuYXRpb25hbCkgTHRkIHYgQ3JlZGl0IGR1IE5vcmQiLAogICAgICAgICIod2wpIEVkbW9uZHMgdiBMYXdzb24iLAogICAgICAgICIod2wpIEN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nICYgRHllaW5nIENvIiwKICAgICAgICAiKHdsKSBGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiKHdsKSBDb3VydG5leSAmIEZhaXJiYWlybiBMdGQgdiBUb2xhaW5pIEJyb3MgKEhvdGVscykgTHRkIiwKICAgICAgICAiKHdsKSBHcmVhdCBQZWFjZSBTaGlwcGluZyBMdGQgdiBUc2F2bGlyaXMgKEludGVybmF0aW9uYWwpIEx0ZCIsCiAgICAgICAgIih3bCkgQWxwZW5zdG93IHYgUmVnYWxpYW4gUHJvcGVydGllcyIsCiAgICAgICAgIih3bCkgSiBFdmFucyAmIFNvbiAoUG9ydHNtb3V0aCkgdiBBbmRyZWEgTWVyemFyaW8gTHRkIiwKICAgICAgICAiKHdsKSBCbGFja3Bvb2wgYW5kIEZ5bGRlIEFlcm9jbHViIEx0ZCB2IEJsYWNrcG9vbCBCb3JvdWdoIENvdW5jaWwiLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiLAogICAgICAgICIod2wpIEJyaXRpc2ggQ3JhbmUgSGlyZSBDb3Jwb3JhdGlvbiBMdGQgdiBJcHN3aWNoIFBsYW50IEhpcmUgTHRkIiwKICAgICAgICAiKHdsKSBPY2VhbiBUcmFtcCBUYW5rZXJzIENvcnBvcmF0aW9uIHYgViIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE3NSIsCiAgICAiWUVBUiI6ICIxOTYwIiwKICAgICJOQU1FIjogIih3bCkgUGFya2VyIHYgQ2xhcmsiLAogICAgIkNJVCI6ICJbMTk2MF0gMSBXTFIgMjg2IiwKICAgICJDSVRBVElPTiI6ICJQYXJrZXIgdiBDbGFyayBbMTk2MF0gMSBXTFIgMjg2IiwKICAgICJKVURHRSI6ICJEZXZsaW4gSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiYm90aCBzaWRlcyBoYXZpbmcgaW50ZW5kZWQgdG8gY3JlYXRlIGEgbGVnYWxseSBiaW5kaW5nIGFycmFuZ2VtZW50LCB0aGVyZSB3YXMgYSBnb29kIGNvbnRyYWN0IG9mIHdoaWNoIEMuJiM4MjE3O3MgbGV0dGVyIHdhcyBhIHN1ZmZpY2llbnQgbWVtb3JhbmR1bTsgYWNjb3JkaW5nbHkgdGhlIFAucyB3ZXJlIGVudGl0bGVkIHRvIGRhbWFnZXMgZm9yIGJyZWFjaCBvZiB0aGVpciByaWdodCB0byBsaXZlIGluIHRoZSBDLnMmIzgyMTc7IGhvdXNlIHVudGlsIHRoZSBkZWF0aCBvZiB0aGUgc3Vydml2b3Igb2YgdGhlIEMucywgYW5kIE1ycy4gUC4gd2FzIGVudGl0bGVkIHRvIGRhbWFnZXMgZm9yIGxvc3Mgb2YgdGhlIHZhbHVlIG9mIGhlciBwcm9zcGVjdHMgb2YgdGFraW5nIGEgc2hhcmUgb2YgdGhlIEMucyYjODIxNzsgaG91c2UgYXQgdGhlaXIgZGVhdGguIChIYW1tZXJzbGV5IHYgRGUgQmllbCA4IEUuUi4gMTMxMiBhcHBsaWVkOyBub3QgZm9sbG93aW5nIGRpY3R1bSBvZiBGcnkgSi4gaW4gTXVuZGF5IHYgQXNwcmV5ICgxODgwKSAxMyBDaC4gRC4gODU1IGFwcGxpZWQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyAmbWRhc2g7IENvbnNpZGVyYXRpb24gJm1kYXNoOyBFeCBHcmF0aWEgUGF5bWVudHMgJm1kYXNoOyBJbnRlbnRpb24gLyBFbXBsb3ltZW50ICZtZGFzaDsgQXBwcmVudGljZXNoaXAgJm1kYXNoOyBCYXJyaXN0ZXJzICZtZGFzaDsgQ29udHJhY3Qgb2YgRW1wbG95bWVudCAmbWRhc2g7IE1pbmltdW0gV2FnZSAmbWRhc2g7IFB1cGlsbGFnZSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29udHJhY3RzIiwKICAgICAgICAiQ29uc2lkZXJhdGlvbiIsCiAgICAgICAgIkV4IEdyYXRpYSBQYXltZW50cyIsCiAgICAgICAgIkludGVudGlvbiIsCiAgICAgICAgIkVtcGxveW1lbnQiLAogICAgICAgICJBcHByZW50aWNlc2hpcCIsCiAgICAgICAgIkJhcnJpc3RlcnMiLAogICAgICAgICJDb250cmFjdCBvZiBFbXBsb3ltZW50IiwKICAgICAgICAiTWluaW11bSBXYWdlIiwKICAgICAgICAiUHVwaWxsYWdlIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIFBhbyBPbiB2IExhdSBZaXUgTG9uZyIsCiAgICAgICAgIih3bCkgUmUgU2VsZWN0bW92ZSBMdGQiLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiLAogICAgICAgICIod2wpIFNjYWxseSB2IFNvdXRoZXJuIEhlYWx0aCBhbmQgU29jaWFsIFNlcnZpY2VzIEJvYXJkIiwKICAgICAgICAiKHdsKSBQYXJrZXIgdiBDbGFyayIsCiAgICAgICAgIih3bCkgRmlzaGVyIHYgQmVsbCIsCiAgICAgICAgIih3bCkgU3VkYnJvb2sgVHJhZGluZyBFc3RhdGUgTHRkIHYgRWdnbGV0b24iLAogICAgICAgICIod2wpIEdyZWF0IFBlYWNlIFNoaXBwaW5nIEx0ZCB2IFRzYXZsaXJpcyAoSW50ZXJuYXRpb25hbCkgTHRkIiwKICAgICAgICAiKHdsKSBQYW5raGFuaWEgdiBIYWNrbmV5IEJvcm91Z2ggQ291bmNpbCIsCiAgICAgICAgIih3bCkgQ29sbGllciB2IFdyaWdodCAoSG9sZGluZ3MpIEx0ZCIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IiwKICAgICAgICAiKHdsKSBKIEV2YW5zICYgU29uIChQb3J0c21vdXRoKSB2IEFuZHJlYSBNZXJ6YXJpbyBMdGQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNzYiLAogICAgIllFQVIiOiAiMjAwMCIsCiAgICAiQ09VTlNFTCI6ICJGb3IgRTogUm9iaW4gQWxsZW4gUS5DLiBhbmQgUGF1bCBFcHN0ZWluLiBGb3IgTDogSmFtZXMgR291ZGllIFEuQy4sIFNlYW4gSm9uZXMgYW5kIEFueWEgUHJvb3BzLiIsCiAgICAiTkFNRSI6ICIod2wpIEVkbW9uZHMgdiBMYXdzb24iLAogICAgIkNJVCI6ICJbMjAwMF0gUUIgNTAxIiwKICAgICJDSVRBVElPTiI6ICJFZG1vbmRzIHYgTGF3c29uIFsyMDAwXSBRQiA1MDEiLAogICAgIkpVREdFIjogIkxvcmQgQmluZ2hhbSBvZiBDb3JuaGlsbDsgUGlsbCBMSjsgSGFsZSBMSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiYWxsb3dpbmcgdGhlIGFwcGVhbCwgdGhhdCAoMSkgdGhlcmUgd2FzIGEgYmluZGluZyBjb250cmFjdCBmb3IgdGhlIHByb3Zpc2lvbiBvZiBlZHVjYXRpb24gYW5kIHRyYWluaW5nIHdoaWNoIGltcGxpZWRseSBpbmNvcnBvcmF0ZWQgcmVndWxhdG9yeSBtYXRlcmlhbHMgZ292ZXJuaW5nIHB1cGlsbGFnZTsgKDIpIGEgYnJvYWQgdmlldyBoYWQgdG8gYmUgdGFrZW4gb2YgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIEUgYW5kIHRoZSBiYXJyaXN0ZXJzJiM4MjE3OyBjaGFtYmVycy4gSXQgd2FzIGluIHRoZSBjaGFtYmVycyYjODIxNzsgbG9uZyB0ZXJtIGludGVyZXN0cyB0byBhdHRyYWN0IHRhbGVudGVkIHB1cGlscyBhbmQsIHJlZ2FyZGxlc3Mgb2Ygd2hldGhlciBFIHdhcyBhIHByb3NwZWN0aXZlIGNhbmRpZGF0ZSBmb3IgdGVuYW5jeSBvciBub3QsIGhlciBhZ3JlZW1lbnQgdG8gdGhhdCBwb3RlbnRpYWxseSBwcm9kdWN0aXZlIHJlbGF0aW9uc2hpcCBoYWQgYmVlbiBjb25zaWRlcmF0aW9uIGZvciB0aGUgb2ZmZXIsIGFuZCAoMykgdGhlIGNvbnN0cnVjdGlvbiBvZiAmIzgyMjA7YXBwcmVudGljZXNoaXAmIzgyMjE7IGluIHMuNTQoMikgb2YgdGhlIDE5OTggQWN0IHdhcyBpbnRlbmRlZCB0byBiZSB1bmxlZ2FsaXN0aWMgYW5kIGNvdmVyZWQgbGVhcm5lZCBwcm9mZXNzaW9ucy4gSG93ZXZlciwgYSBjYXJkaW5hbCBpbmdyZWRpZW50IG9mIGFuIGFwcHJlbnRpY2VzaGlwIHdhcyBhIG11dHVhbCBjb3ZlbmFudCB3aGVyZWJ5IHRoZSBtYXN0ZXIgdW5kZXJ0b29rIHRvIGVkdWNhdGUgYW5kIHRyYWluIHRoZSBhcHByZW50aWNlLCB3aG8sIGluIHJldHVybiwgd2FzIGJvdW5kIHRvIHNlcnZlIGFuZCB3b3JrIGZvciB0aGUgbWFzdGVyLiBJbiB0aGUgaW5zdGFudCBjYXNlLCB0aGVyZSBoYWQgYmVlbiBubyBleHBlY3RhdGlvbiBvbiBFIHRvIHByb3ZpZGUgdmFsdWFibGUgc2VydmljZSBhbmQgc2hlIHdhcyBub3Qgb2JsaWdlZCB0byBkbyBhbnl0aGluZyB3aGljaCB3YXMgbm90IGNvbmR1Y2l2ZSB0byBoZXIgb3duIHRyYWluaW5nLCBoZW5jZSBzaGUgZGlkIG5vdCB3b3JrIHVuZGVyIGEgY29udHJhY3Qgb2YgYXBwcmVudGljZXNoaXAgb3IgYW4gZXF1aXZhbGVudCBjb250cmFjdC4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIsCiAgICAgICAgIkhhbGUiLAogICAgICAgICJCaW5naGFtIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkNvbXBhbnkgTGF3ICZtZGFzaDsgQ29tZm9ydCBMZXR0ZXJzICZtZGFzaDsgQ29udHJhY3R1YWwgTGlhYmlsaXR5ICZtZGFzaDsgR3JvdXBzIG9mIENvbXBhbmllcyAmbWRhc2g7IExvYW5zIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb21wYW55IExhdyIsCiAgICAgICAgIkNvbWZvcnQgTGV0dGVycyIsCiAgICAgICAgIkNvbnRyYWN0dWFsIExpYWJpbGl0eSIsCiAgICAgICAgIkdyb3VwcyBvZiBDb21wYW5pZXMiLAogICAgICAgICJMb2FucyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQiLAogICAgICAgICIod2wpIENhdmVuZGlzaCBTcXVhcmUgSG9sZGluZyBCViB2IFRhbGFsIEVsIE1ha2Rlc3NpOyBQYXJraW5nRXllIEx0ZCB2IEJlYXZpcyIsCiAgICAgICAgIih3bCkgUGFvIE9uIHYgTGF1IFlpdSBMb25nIiwKICAgICAgICAiKHdsKSBNY1JhZSB2IENvbW1vbndlYWx0aCBEaXNwb3NhbHMgQ29tbWlzc2lvbiIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IEx0ZCIsCiAgICAgICAgIih3bCkgRGF2aXMgQ29udHJhY3RvcnMgTHRkIHYgRmFyZWhhbSBVcmJhbiBEaXN0cmljdCBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBFZG1vbmRzIHYgTGF3c29uIiwKICAgICAgICAiKHdsKSBCcml0aXNoIENyYW5lIEhpcmUgQ29ycG9yYXRpb24gTHRkIHYgSXBzd2ljaCBQbGFudCBIaXJlIEx0ZCIsCiAgICAgICAgIih3bCkgU3VkYnJvb2sgVHJhZGluZyBFc3RhdGUgTHRkIHYgRWdnbGV0b24iLAogICAgICAgICIod2wpIEZpbmVsdmV0IEFHIHYgVmluYXZhIFNoaXBwaW5nIENvIEx0ZCwgVGhlIENocnlzYWxpcyIsCiAgICAgICAgIih3bCkgQWxwZW5zdG93IHYgUmVnYWxpYW4gUHJvcGVydGllcyIsCiAgICAgICAgIih3bCkgTmljb2xlbmUgdiBTaW1tb25kcyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE3NyIsCiAgICAiWUVBUiI6ICIxOTg5IiwKICAgICJOQU1FIjogIih3bCkgS2xlaW53b3J0IEJlbnNvbiBMdGQgdiBNYWxheXNpYSBNaW5pbmcgQ29ycG9yYXRpb24iLAogICAgIkNJVCI6ICJbMTk4OV0gMSBXTFIgMzc5IiwKICAgICJDSVRBVElPTiI6ICJLbGVpbndvcnQgQmVuc29uIEx0ZCB2IE1hbGF5c2lhIE1pbmluZyBDb3Jwb3JhdGlvbiBbMTk4OV0gMSBXTFIgMzc5IiwKICAgICJKVURHRSI6ICJSYWxwaCBHaWJzb24gTEo7IEZveCBMSjsgTmljaG9sbHMgTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImFsbG93aW5nIHRoZSBhcHBlYWwsIHRoYXQgYSBsZXR0ZXIgb2YgY29tZm9ydCBmcm9tIGEgcGFyZW50IGNvbXBhbnkgdG8gYSBsZW5kZXIgZGlkIG5vdCBoYXZlIGNvbnRyYWN0dWFsIGVmZmVjdCBpZiBpdCB3YXMgbWVyZWx5IGEgc3RhdGVtZW50IG9mIHByZXNlbnQgZmFjdCByZWdhcmRpbmcgdGhlIHBhcmVudCBjb21wYW55JiM4MjE3O3MgaW50ZW50aW9ucyBhbmQgd2FzIG5vdCBhIGNvbnRyYWN0dWFsIHByb21pc2UgYXMgdG8gdGhlIHBhcmVudCBjb21wYW55JiM4MjE3O3MgZnV0dXJlIGNvbmR1Y3QuIE9uIHRoZSBmYWN0cywgdGhlIGxldHRlciBvZiBjb21mb3J0IHdhcyBpbiB0ZXJtcyBhIHN0YXRlbWVudCBvZiBwcmVzZW50IGZhY3QgYW5kIG5vdCBhIHByb21pc2UgYXMgdG8gZnV0dXJlIGNvbmR1Y3QgYW5kIGluIHRoZSBjb250ZXh0IGluIHdoaWNoIHRoZSBsZXR0ZXJzIHdlcmUgd3JpdHRlbiB3YXMgbm90IGludGVuZGVkIHRvIGJlIGFueXRoaW5nIG90aGVyIHRoYW4gYSByZXByZXNlbnRhdGlvbiBvZiBmYWN0IGdpdmluZyByaXNlIHRvIG5vIG1vcmUgdGhhbiBhIG1vcmFsIHJlc3BvbnNpYmlsaXR5IG9uIHRoZSBwYXJ0IG9mIHRoZSBkZWZlbmRhbnRzIHRvIG1lZXQgTSYjODIxNztzIGRlYnQgKCBFZHdhcmRzIHYgU2t5d2F5cyBbMTk2NF0gMSBXLkwuUi4gMzQ5IGRpc3Rpbmd1aXNoZWQ7IGFuZCBFc3NvIFBldHJvbGV1bSBDbyBMdGQgdiBNYXJkb24gWzE5NzZdIFEuQi4gODAxIGNvbnNpZGVyZWQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkNvbnN0cnVjdGlvbiBMYXcgJm1kYXNoOyBCdWlsZGluZyBhbmQgRW5naW5lZXJpbmcgQ29udHJhY3RzICZtZGFzaDsgU3VwcGx5IG9mIFNlcnZpY2VzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb25zdHJ1Y3Rpb24gTGF3IiwKICAgICAgICAiQnVpbGRpbmcgYW5kIEVuZ2luZWVyaW5nIENvbnRyYWN0cyIsCiAgICAgICAgIlN1cHBseSBvZiBTZXJ2aWNlcyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBEYXZpcyBDb250cmFjdG9ycyBMdGQgdiBGYXJlaGFtIFVyYmFuIERpc3RyaWN0IENvdW5jaWwiLAogICAgICAgICIod2wpIENvdXJ0bmV5ICYgRmFpcmJhaXJuIEx0ZCB2IFRvbGFpbmkgQnJvcyAoSG90ZWxzKSBMdGQiLAogICAgICAgICIod2wpIE5pY29sZW5lIHYgU2ltbW9uZHMiLAogICAgICAgICIod2wpIFdpbGxpYW0gU2luZGFsbCBwbGMgdiBDYW1icmlkZ2VzaGlyZSBDb3VudHkgQ291bmNpbCIsCiAgICAgICAgIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIsCiAgICAgICAgIih3bCkgRmlzaGVyIHYgQmVsbCIsCiAgICAgICAgIih3bCkgRXNzbyBQZXRyb2xldW0gQ28gTHRkIHYgTWFyZG9uIiwKICAgICAgICAiKHdsKSBDb2xsaWVyIHYgV3JpZ2h0IChIb2xkaW5ncykgTHRkIiwKICAgICAgICAiKHdsKSBCUlMgdiBBcnRodXIgQ3J1dGNobGV5IEx0ZCIsCiAgICAgICAgIih3bCkgTW91bnRmb3JkIHYgU2NvdHQiLAogICAgICAgICIod2wpIEggUGFyc29ucyAoTGl2ZXN0b2NrKSBMdGQgdiBVdHRsZXkgSW5naGFtICYgQ28iLAogICAgICAgICIod2wpIEdlb3JnZSBNaXRjaGVsbCAoQ2hlc3RlcmhhbGwpIEx0ZCB2IEZpbm5leSBMb2NrIFNlZWRzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTc4IiwKICAgICJZRUFSIjogIjE5OTYiLAogICAgIkNPVU5TRUwiOiAiRm9yIFRDRTogU3RlcGhlbiBNYWxlcy4gRm9yIFJNOiBNYXJrIFR1cm5lci4gRm9yIEc6IE5vdCByZXByZXNlbnRlZC4iLAogICAgIk5BTUUiOiAiKHdsKSBHcm9nYW4gdiBSb2JpbiBNZXJlZGl0aCBQbGFudCBIaXJlIiwKICAgICJDSVQiOiAiWzE5OTZdIENMQyAxMTI3IiwKICAgICJDSVRBVElPTiI6ICJHcm9nYW4gdiBSb2JpbiBNZXJlZGl0aCBQbGFudCBIaXJlIFsxOTk2XSBDTEMgMTEyNyIsCiAgICAiSlVER0UiOiAiUnVzc2VsbCBMSjsgTWNDb3dhbiBMSjsgQXVsZCBMSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiYWxsb3dpbmcgdGhlIGFwcGVhbCwgdGhhdCBhIHRpbWUgc2hlZXQgZm9yIHdvcmsgZG9uZSB1bmRlciBhbiBleGlzdGluZyBjb250cmFjdCB3YXMgYSByZWNvcmQgb2YgYSBwYXJ0eSYjODIxNztzIHBlcmZvcm1hbmNlIG9mIGNvbnRyYWN0dWFsIG9ibGlnYXRpb25zLiBJdCB3YXMgbm90IGEgZG9jdW1lbnQgd2l0aCBjb250cmFjdHVhbCBlZmZlY3QuIENvbnRyYWN0dWFsIGVmZmVjdCBjb3VsZCBvbmx5IGJlIGVzdGFibGlzaGVkIGJ5IHZhcmlhdGlvbiBvZiB0aGUgb3JpZ2luYWwgY29udHJhY3QuIFRoZSBDUEEgY29uZGl0aW9ucyB3ZXJlIHRoZXJlZm9yZSBub3QgaW5jb3Jwb3JhdGVkIGFuZCBUQ0Ugd2VyZSBub3QgYm91bmQgdG8gaW5kZW1uaWZ5IFJNLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyAmbWRhc2g7IENvbnRyYWN0IFRlcm1zICZtZGFzaDsgRW5mb3JjZW1lbnQgJm1kYXNoOyBFeGNsdXNpb24gQ2xhdXNlcyAmbWRhc2g7IE1pc3JlcHJlc2VudGF0aW9uIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJDb250cmFjdCBUZXJtcyIsCiAgICAgICAgIkVuZm9yY2VtZW50IiwKICAgICAgICAiRXhjbHVzaW9uIENsYXVzZXMiLAogICAgICAgICJNaXNyZXByZXNlbnRhdGlvbiIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQiLAogICAgICAgICIod2wpIFBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCBMdGQiLAogICAgICAgICIod2wpIFJveXNjb3QgVHJ1c3QgdiBSb2dlcnNvbiIsCiAgICAgICAgIih3bCkgUGFya2VyIHYgQ2xhcmsiLAogICAgICAgICIod2wpIFBhbmtoYW5pYSB2IEhhY2tuZXkgQm9yb3VnaCBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDb21wYW55IiwKICAgICAgICAiKHdsKSBJbnRlcmZvdG8gUGljdHVyZSBMaWJyYXJ5IEx0ZCB2IFN0aWxldHRvIFZpc3VhbCBQcm9kdWN0aW9ucyBMdGQiLAogICAgICAgICIod2wpIElubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biBMdGQiLAogICAgICAgICIod2wpIEogRXZhbnMgJiBTb24gKFBvcnRzbW91dGgpIHYgQW5kcmVhIE1lcnphcmlvIEx0ZCIsCiAgICAgICAgIih3bCkgTmljb2xlbmUgdiBTaW1tb25kcyIsCiAgICAgICAgIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIsCiAgICAgICAgIih3bCkgRXNzbyBQZXRyb2xldW0gQ28gTHRkIHYgTWFyZG9uIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTc5IiwKICAgICJZRUFSIjogIjE5NTEiLAogICAgIk5BTUUiOiAiKHdsKSBDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyAmIER5ZWluZyBDbyIsCiAgICAiQ0lUIjogIlsxOTUxXSAxIEtCIDgwNSIsCiAgICAiQ0lUQVRJT04iOiAiQ3VydGlzIHYgQ2hlbWljYWwgQ2xlYW5pbmcgJmFtcDsgRHllaW5nIENvIFsxOTUxXSAxIEtCIDgwNSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAib24gYXBwZWFsLCB0aGF0IHRoZXJlIHBsYWlubHkgaGFkIGJlZW4gYSBtaXNyZXByZXNlbnRhdGlvbiwgYW5kIG93aW5nIHRvIHRoYXQgbWlzcmVwcmVzZW50YXRpb24gdGhlIGV4Y2VwdGlvbiBuZXZlciBiZWNhbWUgcGFydCBvZiB0aGUgY29udHJhY3QgYmV0d2VlbiB0aGUgcGFydGllcywgTG93IHYgQm91dmVyaWUgWzE4OTFdIDMgQ2guIDgyICwgUi4gdiBMb3JkIEt5bHNhbnQgWzE5MzJdIDEgSy5CLiA0NDIgLCBMJiM4MjE3O0VzdHJhbmdlIHYgRiBHcmF1Y29iIEx0ZCBbMTkzNF0gMiBLLkIuIDM5NCBhbmQgT2xsZXkgdiBNYXJsYm9yb3VnaCBDb3VydCBMdGQgWzE5NDhdIDEgQWxsIEUuUi4gOTU1IGFwcGxpZWQuIFBlciBEZW5uaW5nLCBMLkouOiAmIzgyMjA7SSBkbyBub3Qgd2lzaCBpdCB0byBiZSBzdXBwb3NlZCB0aGF0IHRoZSBjbGVhbmVycyB3b3VsZCBoYXZlIGJlZW4gYmV0dGVyIG9mZiBpZiB0aGUgYXNzaXN0YW50IGhhZCBzaW1wbHkgaGFuZGVkIG92ZXIgdGhlIGRvY3VtZW50IHRvIHRoZSBjdXN0b21lciB3aXRob3V0IGFza2luZyBoZXIgdG8gc2lnbiBpdDsgb3IgaWYgYSBjdXN0b21lciB3YXMgbm90IHNvIGlucXVpcmluZyBhcyB0aGUgcGxhaW50aWZmLCBidXQgd2FzIGFuIHVuc3VzcGVjdGluZyBwZXJzb24gd2hvIHNpZ25lZCB3aGF0ZXZlciBzaGUgd2FzIGFza2VkIHdpdGhvdXQgcXVlc3Rpb24mIzgyMjE7OiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIk5lZ2xpZ2VuY2UgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29udHJhY3RzICZtZGFzaDsgRXhjbHVzaW9uIENsYXVzZXMgJm1kYXNoOyBIb3RlbHMgJm1kYXNoOyBJbnRlbnRpb24gdG8gQ3JlYXRlIExlZ2FsIFJlbGF0aW9ucyAmbWRhc2g7IE5vdGljZXMgJm1kYXNoOyBUaGVmdCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiTmVnbGlnZW5jZSBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMiLAogICAgICAgICJFeGNsdXNpb24gQ2xhdXNlcyIsCiAgICAgICAgIkhvdGVscyIsCiAgICAgICAgIkludGVudGlvbiB0byBDcmVhdGUgTGVnYWwgUmVsYXRpb25zIiwKICAgICAgICAiTm90aWNlcyIsCiAgICAgICAgIlRoZWZ0IgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIEogRXZhbnMgJiBTb24gKFBvcnRzbW91dGgpIHYgQW5kcmVhIE1lcnphcmlvIEx0ZCIsCiAgICAgICAgIih3bCkgR2VvcmdlIE1pdGNoZWxsIChDaGVzdGVyaGFsbCkgTHRkIHYgRmlubmV5IExvY2sgU2VlZHMiLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiLAogICAgICAgICIod2wpIEN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nICYgRHllaW5nIENvIiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQgTHRkIiwKICAgICAgICAiKHdsKSBDaXR5IGFuZCBXZXN0bWluc3RlciBQcm9wZXJ0aWVzIHYgTXVkZCIsCiAgICAgICAgIih3bCkgTmljb2xlbmUgdiBTaW1tb25kcyIsCiAgICAgICAgIih3bCkgQlJTIHYgQXJ0aHVyIENydXRjaGxleSBMdGQiLAogICAgICAgICIod2wpIEhvbGxpZXIgdiBSYW1ibGVyIE1vdG9ycyAoQU1DKSBMdGQiLAogICAgICAgICIod2wpIFBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCIsCiAgICAgICAgIih3bCkgQmFuayBvZiBDcmVkaXQgYW5kIENvbW1lcmNlIEludGVybmF0aW9uYWwgU0EgdiBBbGkiLAogICAgICAgICIod2wpIFNjaGF3ZWwgdiBSZWFkZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE4MCIsCiAgICAiWUVBUiI6ICIxOTQ5IiwKICAgICJDT1VOU0VMIjogIkZvciB0aGUgYXBwZWxsYW50OiBNb250YWd1ZSBCZXJyeW1hbiBLQywgUGhpbmVhcyBRdWFzcywgRGluZ2xlIEZvb3QuIEZvciB0aGUgcmVzcG9uZGVudDogR2x5bi1Kb25lcyBLQywgR0cgQmFrZXIuIiwKICAgICJBQlNUUkFDVCI6IFsKICAgICAgICAiVGhlIGFwcGVsbGFudCBob3RlbCBvd25lciAoTSkgYXBwZWFsZWQgYWdhaW5zdCBhIGRlY2lzaW9uICggWzE5NDhdIDEgQWxsIEUuUi4gOTU1ICkgdGhhdCBpdCBoYWQgbmVnbGlnZW50bHkgYWxsb3dlZCB0aGUgdGhlZnQgb2YgdGhlIHBvc3Nlc3Npb25zIG9mIHRoZSByZXNwb25kZW50IGd1ZXN0IChPKSBmcm9tIGl0cyBob3RlbC4iLAogICAgICAgICJNIHJhbiBhIHJlc2lkZW50aWFsIGhvdGVsIHdoZXJlIE8gaGFkIHN0YXllZCBmb3Igc2V2ZXJhbCBtb250aHMuIEluIE8mIzgyMTc7cyBiZWRyb29tIHdhcyBhIG5vdGljZSBzdGF0aW5nIHRoYXQgTSB3b3VsZCBub3QgYmUgbGlhYmxlIGZvciBhcnRpY2xlcyBsb3N0IG9yIHN0b2xlbiB1bmxlc3MgaGFuZGVkIHRvIE0gZm9yIHNhZmUgY3VzdG9keS4gTyB3ZW50IG91dCBvZiB0aGUgaG90ZWwsIGxlYXZpbmcgaGVyIHJvb20ga2V5IG9uIGEga2V5IHJhY2sgaW4gcmVjZXB0aW9uLiBXaGlsZSBNJiM4MjE3O3Mgc3RhZmYgd2VyZSBub3Qgd2F0Y2hpbmcsIGEgbWFuIHRvb2sgdGhlIGtleSBhbmQgc3RvbGUgaXRlbXMgZnJvbSBPJiM4MjE3O3Mgcm9vbS4gVGhlIGp1ZGdlIGZvdW5kIHRoYXQgTSBoYWQgYmVlbiBuZWdsaWdlbnQsIHRoYXQgdGhlIG5lZ2xpZ2VuY2UgaGFkIGNhdXNlZCBPJiM4MjE3O3MgbG9zcywgdGhhdCB0aGUgaG90ZWwgd2FzIGEgcHJpdmF0ZSBob3RlbCByYXRoZXIgdGhhbiBhIGNvbW1vbiBpbm4sIGFuZCB0aGF0IGFsdGhvdWdoIE8gaGFkIHNlZW4gdGhlIG5vdGljZSwgaXRzIHRlcm1zIHdlcmUgYW1iaWd1b3VzIGFuZCBoYWQgbm90IGFic29sdmVkIE0gZnJvbSBsaWFiaWxpdHkuIiwKICAgICAgICAiTSBhcmd1ZWQgdGhhdCAoMSkgb24gdGhlIGZhY3RzLCBpdCBoYWQgbm90IGJlZW4gbmVnbGlnZW50OyAoMikgdGhlIG5vdGljZSBmb3JtZWQgcGFydCBvZiB0aGUgY29udHJhY3QgYmV0d2VlbiBpdCBhbmQgTyBhbmQgb3BlcmF0ZWQgdG8gZXhlbXB0IGl0IGZyb20gbGlhYmlsaXR5IGZvciBuZWdsaWdlbmNlOyAoMykgaXRzIGxpYWJpbGl0eSB3YXMgbGltaXRlZCB0byB0aGF0IG9mIGEgcmVzaWRlbnRpYWwgaG90ZWwuIgogICAgXSwKICAgICJOQU1FIjogIih3bCkgT2xsZXkgdiBNYXJsYm9yb3VnaCBDb3VydCBIb3RlbCIsCiAgICAiQ0lUIjogIlsxOTQ5XSAxIEtCIDUzMiIsCiAgICAiQ0lUQVRJT04iOiAiT2xsZXkgdiBNYXJsYm9yb3VnaCBDb3VydCBIb3RlbCBbMTk0OV0gMSBLQiA1MzIiLAogICAgIkpVREdFIjogIkJ1Y2tuaWxsIExKOyBEZW5uaW5nIExKOyBTaW5nbGV0b24gTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFwcGVhbCBkaXNtaXNzZWQuIiwKICAgICAgICAiKDEpIE0gaGFkIGJlZW4gbmVnbGlnZW50IGFuZCB3YXMgbGlhYmxlIGF0IGNvbW1vbiBsYXcgZm9yIE8mIzgyMTc7cyBsb3NzLiBPIGhhZCBsZWZ0IHRoZSBrZXkgaW4gTSYjODIxNztzIGNoYXJnZSwgYW5kIGl0IHdhcyBNJiM4MjE3O3MgZHV0eSB0byB0YWtlIHJlYXNvbmFibGUgY2FyZSB0byBzZWUgdGhhdCBpdCB3YXMgbm90IHRha2VuIGJ5IGFuIHVuYXV0aG9yaXNlZCBwZXJzb24uIEl0IGhhZCBiZWVuIHRha2VuLCBhbmQgcmVhc29uYWJseSBmb3Jlc2VlYWJsZSBjb25zZXF1ZW5jZXMgaGFkIGZvbGxvd2VkOiBhIHRoaWVmIGhhZCB1c2VkIGl0IHRvIHN0ZWFsIGZyb20gdGhlIHJvb20uICgyKSBNIGNvdWxkIG5vdCByZWx5IG9uIHRoZSBub3RpY2UgaW4gdGhlIGJlZHJvb20uIEl0IGNvdWxkIG5vdCBmb3JtIHBhcnQgb2YgdGhlIGNvbnRyYWN0LiBUaG9zZSByZWx5aW5nIG9uIGEgY29udHJhY3QgdG8gZXhlbXB0IHRoZW1zZWx2ZXMgZnJvbSBjb21tb24gbGF3IGxpYWJpbGl0eSBoYWQgdG8gc3RyaWN0bHkgcHJvdmUgaXRzIHRlcm1zIGFuZCB0aGUgaW50ZW50aW9uIHRvIGNyZWF0ZSBsZWdhbCByZWxhdGlvbnMuIFRoZSBiZXN0IHdheSBvZiBwcm92aW5nIGludGVudGlvbiB3YXMgYnkgYSB3cml0dGVuIGRvY3VtZW50IHNpZ25lZCBieSB0aGUgcGFydHkgdG8gYmUgYm91bmQuIEFub3RoZXIgd2F5IHdhcyBoYW5kaW5nIGhpbSBiZWZvcmUgb3IgYXQgdGhlIHRpbWUgb2YgdGhlIGNvbnRyYWN0IGEgd3JpdHRlbiBub3RpY2Ugc3BlY2lmeWluZyBpdHMgdGVybXMgYW5kIG1ha2luZyBpdCBjbGVhciB0aGF0IHRoZSBjb250cmFjdCB3YXMgb24gdGhvc2UgdGVybXMuIFRoZSBzYW1lIGVmZmVjdCBjb3VsZCBiZSBhY2hpZXZlZCBieSBhIHByb21pbmVudCBwdWJsaWMgbm90aWNlIG1hZGUgcGxhaW4gZm9yIHRoZSBwYXJ0eSB0byBzZWUgd2hlbiBoZSBtYWRlIHRoZSBjb250cmFjdCwgb3IgYnkgYW4gZXhwcmVzcyBvcmFsIHN0aXB1bGF0aW9uLiBOb3RoaW5nIHNob3J0IG9mIG9uZSBvZiB0aG9zZSB3YXlzIHdvdWxkIHN1ZmZpY2UuIE5vdGljZXMgcHV0IHVwIGluIGJlZHJvb21zIGRpZCBub3QgbWFrZSBhIGNvbnRyYWN0OiBhcyBhIHJ1bGUsIGd1ZXN0cyBkaWQgbm90IHNlZSB0aGVtIHVudGlsIGFmdGVyIHRoZXkgaGFkIGJlZW4gYWNjZXB0ZWQgYXMgZ3Vlc3RzLiAoMykgVGhlIHF1ZXN0aW9uIG9mIHdoZXRoZXIsIGhhZCBPIGFncmVlZCB0byBiZSBib3VuZCBieSBpdCwgdGhlIG5vdGljZSB3b3VsZCBoYXZlIGV4ZW1wdGVkIE0gZnJvbSBsaWFiaWxpdHkgZm9yIGl0cyBuZWdsaWdlbmNlIHNob3VsZCBub3QgZGVwZW5kIG9uIHdoZXRoZXIgdGhlIGhvdGVsIHdhcyBhIGNvbW1vbiBpbm4gd2l0aCB0aGUgbGlhYmlsaXR5IG9mIGFuIGluc3VyZXIsIG9yIGEgcHJpdmF0ZSBob3RlbCB3aXRoIGxpYWJpbGl0eSBvbmx5IGZvciBuZWdsaWdlbmNlLiBJdCBzaG91bGQgZGVwZW5kIG9uIHRoZSB3b3JkcyBvZiB0aGUgY29udHJhY3QuIEluIG9yZGVyIHRvIGV4ZW1wdCBhIHBlcnNvbiBmcm9tIGxpYWJpbGl0eSBmb3IgbmVnbGlnZW5jZSwgdGhlIGV4ZW1wdGlvbiBzaG91bGQgYmUgY2xlYXIgb24gdGhlIGZhY2Ugb2YgdGhlIGNvbnRyYWN0OyBpdCBzaG91bGQgbm90IGRlcGVuZCBvbiB3aGF0IHZpZXcgdGhlIGNvdXJ0cyBtaWdodCB0YWtlIG9mIHRoZSBuYXR1cmUgb2YgdGhlIGhvdGVsLiBXaGV0aGVyIGl0IHdhcyBhIGNvbW1vbiBpbm4gb3IgYSBwcml2YXRlIGhvdGVsLCBhIG5vdGljZSBpbiB0aGUgdGVybXMgb2YgdGhhdCBpbiB0aGUgaW5zdGFudCBjYXNlIHdvdWxkIG5vdCBleGVtcHQgdGhlIGhvdGVsIGZyb20gbGlhYmlsaXR5IGZvciBuZWdsaWdlbmNlIGJ1dCBvbmx5IGZyb20gYW55IGxpYWJpbGl0eSBhcyBpbnN1cmVyLiBUaGUgbm90aWNlIGNvdWxkIGJlIGNvbnN0cnVlZCBhcyBhIHdhcm5pbmcgdGhhdCB0aGUgaG90ZWwgd2FzIG5vdCBsaWFibGUgaW4gdGhlIGFic2VuY2Ugb2YgbmVnbGlnZW5jZS4gQXMgc3VjaCBpdCBzZXJ2ZWQgYSB1c2VmdWwgcHVycG9zZSBvZiB3YXJuaW5nIHRoZSBndWVzdCB0byB0YWtlIGNhcmUgb2YgaGlzIHRoaW5nczsgaXQgd2FzIHVubmVjZXNzYXJ5IHRvIGdvIGZ1cnRoZXIgYW5kIGNvbnN0cnVlIGl0IGFzIGEgY29udHJhY3R1YWwgZXhlbXB0aW9uLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIiwKICAgICAgICAiRGVubmluZyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0NBIiwKICAgICJDQVRFR09SWSI6ICJDb250cmFjdHMgJm1kYXNoOyBDcmFuZXMgJm1kYXNoOyBIaXJpbmcgJm1kYXNoOyBMYW5kIERyYWluYWdlICZtZGFzaDsgTm90aWNlICZtZGFzaDsgU2FsZSBvZiBHb29kcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29udHJhY3RzIiwKICAgICAgICAiQ3JhbmVzIiwKICAgICAgICAiSGlyaW5nIiwKICAgICAgICAiTGFuZCBEcmFpbmFnZSIsCiAgICAgICAgIk5vdGljZSIsCiAgICAgICAgIlNhbGUgb2YgR29vZHMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgU3VkYnJvb2sgVHJhZGluZyBFc3RhdGUgTHRkIHYgRWdnbGV0b24iLAogICAgICAgICIod2wpIFNob2d1biBGaW5hbmNlIEx0ZCB2IEh1ZHNvbiIsCiAgICAgICAgIih3bCkgS2Fyc2FsZXMgKEhhcnJvdykgTHRkIHYgV2FsbGlzIiwKICAgICAgICAiKHdsKSBGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiKHdsKSBDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDb21wYW55IiwKICAgICAgICAiKHdsKSBJbnRlcmZvdG8gUGljdHVyZSBMaWJyYXJ5IEx0ZCB2IFN0aWxldHRvIFZpc3VhbCBQcm9kdWN0aW9ucyBMdGQiLAogICAgICAgICIod2wpIEdlb3JnZSBNaXRjaGVsbCAoQ2hlc3RlcmhhbGwpIEx0ZCB2IEZpbm5leSBMb2NrIFNlZWRzIiwKICAgICAgICAiKHdsKSBCcml0aXNoIFN0ZWVsIENvcnBvcmF0aW9uIHYgQ2xldmVsYW5kIEJyaWRnZSBhbmQgRW5naW5lZXJpbmcgQ28gTHRkIiwKICAgICAgICAiKHdsKSBSZWFyZG9uIFNtaXRoIExpbmUgTHRkIHYgWW5ndmFyIEhhbnNlbi1UYW5nZW4iLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvIiwKICAgICAgICAiKHdsKSBCbGFja3Bvb2wgYW5kIEZ5bGRlIEFlcm9jbHViIEx0ZCB2IEJsYWNrcG9vbCBCb3JvdWdoIENvdW5jaWwiLAogICAgICAgICIod2wpIENvbGxpZXIgdiBXcmlnaHQgKEhvbGRpbmdzKSBMdGQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxODEiLAogICAgIllFQVIiOiAiMTk3NSIsCiAgICAiTkFNRSI6ICIod2wpIEJyaXRpc2ggQ3JhbmUgSGlyZSBDb3Jwb3JhdGlvbiBMdGQgdiBJcHN3aWNoIFBsYW50IEhpcmUgTHRkIiwKICAgICJDSVQiOiAiWzE5NzVdIFFCIDMwMyIsCiAgICAiQ0lUQVRJT04iOiAiQnJpdGlzaCBDcmFuZSBIaXJlIENvcnBvcmF0aW9uIEx0ZCB2IElwc3dpY2ggUGxhbnQgSGlyZSBMdGQgWzE5NzVdIFFCIDMwMyIsCiAgICAiSlVER0UiOiAiTG9yZCBEZW5uaW5nIE1SOyBNZWdhdyBMSjsgU2lyIEVyaWMgU2FjaHMiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImFsbG93aW5nIFAmIzgyMTc7cyBjbGFpbSwgdGhhdCBQJiM4MjE3O3MgY29uZGl0aW9ucyBvZiBoaXJlIGFwcGxpZWQgc2luY2UgYm90aCBwYXJ0aWVzIHdlcmUgaW4gdGhlIHRyYWRlIGFuZCBvZiBlcXVhbCBiYXJnYWluaW5nIHBvd2VyIGFuZCBvbiB0aGUgZXZpZGVuY2UgRCBhbmQgUCBib3RoIHVuZGVyc3Rvb2QgdGhhdCBQJiM4MjE3O3MgY29uZGl0aW9ucyBvZiBoaXJlIHdvdWxkIGFwcGx5LiAoRGljdHVtIG9mIExvcmQgUmVpZCBpbiBNY0N1dGNoZW9uIHYgRGF2aWQgTWFjQnJheW5lIEx0ZCBbMTk2NF0gMSBXLkwuUi4gMTI1IGFwcGxpZWQ7IEhvbGxpZXIgdiBSYW1ibGVyIE1vdG9ycyAoQU1DKSBMdGQgWzE5NzJdIDIgUS5CLiA3MSBkaXN0aW5ndWlzaGVkKS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIsCiAgICAgICAgIkRlbm5pbmciCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiQ29udHJhY3RzICZtZGFzaDsgQ29uZGl0aW9ucyAmbWRhc2g7IENvbnRyYWN0IFRlcm1zICZtZGFzaDsgTm90aWNlIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJDb25kaXRpb25zIiwKICAgICAgICAiQ29udHJhY3QgVGVybXMiLAogICAgICAgICJOb3RpY2UiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgQWxwZW5zdG93IHYgUmVnYWxpYW4gUHJvcGVydGllcyIsCiAgICAgICAgIih3bCkgTWNDdXRjaGVvbiB2IERhdmlkIE1hY0JyYXluZSBMdGQiLAogICAgICAgICIod2wpIEJyaXRpc2ggQ3JhbmUgSGlyZSBDb3Jwb3JhdGlvbiBMdGQgdiBJcHN3aWNoIFBsYW50IEhpcmUgTHRkIiwKICAgICAgICAiKHdsKSBDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyAmIER5ZWluZyBDbyIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IEx0ZCIsCiAgICAgICAgIih3bCkgS2Fyc2FsZXMgKEhhcnJvdykgTHRkIHYgV2FsbGlzIiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQiLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiLAogICAgICAgICIod2wpIE9jZWFuIFRyYW1wIFRhbmtlcnMgQ29ycG9yYXRpb24gdiBWIiwKICAgICAgICAiKHdsKSBQYW5raGFuaWEgdiBIYWNrbmV5IEJvcm91Z2ggQ291bmNpbCIsCiAgICAgICAgIih3bCkgU3VkYnJvb2sgVHJhZGluZyBFc3RhdGUgTHRkIHYgRWdnbGV0b24iLAogICAgICAgICIod2wpIEwgSiBLb3JiZXRpcyB2IFRyYW5zZ3JhaW4gU2hpcHBpbmcgQlYiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxODIiLAogICAgIllFQVIiOiAiMTk4OSIsCiAgICAiTkFNRSI6ICIod2wpIEludGVyZm90byBQaWN0dXJlIExpYnJhcnkgTHRkIHYgU3RpbGV0dG8gVmlzdWFsIFByb2R1Y3Rpb25zIEx0ZCIsCiAgICAiQ0lUIjogIlsxOTg5XSBRQiA0MzMiLAogICAgIkNJVEFUSU9OIjogIkludGVyZm90byBQaWN0dXJlIExpYnJhcnkgTHRkIHYgU3RpbGV0dG8gVmlzdWFsIFByb2R1Y3Rpb25zIEx0ZCBbMTk4OV0gUUIgNDMzIiwKICAgICJKVURHRSI6ICJEaWxsb24gTEo7IEJpbmdoYW0gTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImFsbG93aW5nIHRoZSBhcHBlYWwsIHRoYXQgd2hlcmUgYSBjb25kaXRpb24gd2FzIHBhcnRpY3VsYXJseSBvbmVyb3VzIG9yIHVudXN1YWwsIHRoZSBwYXJ0eSBzZWVraW5nIHRvIGVuZm9yY2UgaXQgaGFkIHRvIHNob3cgdGhhdCBpdCBoYWQgYmVlbiBmYWlybHkgYW5kIHJlYXNvbmFibHkgYnJvdWdodCB0byB0aGUgb3RoZXImIzgyMTc7cyBhdHRlbnRpb24uIFRoZSBjb25kaXRpb24gd2FzIHVucmVhc29uYWJsZSBhbmQgZXh0b3J0aW9uYXRlIGFuZCBoYWQgbm90IGJlZW4gc3VmZmljaWVudGx5IGJyb3VnaHQgdG8gdGhlIGRlZmVuZGFudCYjODIxNztzIGF0dGVudGlvbi4gSXQgZGlkIG5vdCBmb3JtIHBhcnQgb2YgdGhlIGNvbnRyYWN0IChUaG9ybnRvbiB2IFNob2UgTGFuZSBQYXJraW5nIFsxOTcxXSAyIFEuQi4gMTYzIGFwcGxpZWQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIiwKICAgICAgICAiQmluZ2hhbSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJVS0hMIiwKICAgICJDQVRFR09SWSI6ICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogTmVnbGlnZW5jZSAmbWRhc2g7IENhcnJpYWdlIEJ5IFNlYSAmbWRhc2g7IENvbmRpdGlvbnMgJm1kYXNoOyBOb3RpY2UgJm1kYXNoOyBPcmFsIENvbnRyYWN0cyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29udHJhY3RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IE5lZ2xpZ2VuY2UiLAogICAgICAgICJDYXJyaWFnZSBCeSBTZWEiLAogICAgICAgICJDb25kaXRpb25zIiwKICAgICAgICAiTm90aWNlIiwKICAgICAgICAiT3JhbCBDb250cmFjdHMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgSW50ZXJmb3RvIFBpY3R1cmUgTGlicmFyeSBMdGQgdiBTdGlsZXR0byBWaXN1YWwgUHJvZHVjdGlvbnMgTHRkIiwKICAgICAgICAiKHdsKSBUaW5uIHYgSG9mZm1hbiAmIENvIiwKICAgICAgICAiKHdsKSBKIEV2YW5zICYgU29uIChQb3J0c21vdXRoKSB2IEFuZHJlYSBNZXJ6YXJpbyBMdGQiLAogICAgICAgICIod2wpIEFscGVuc3RvdyB2IFJlZ2FsaWFuIFByb3BlcnRpZXMiLAogICAgICAgICIod2wpIEthcnNhbGVzIChIYXJyb3cpIEx0ZCB2IFdhbGxpcyIsCiAgICAgICAgIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIsCiAgICAgICAgIih3bCkgQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIih3bCkgQ2l0eSBhbmQgV2VzdG1pbnN0ZXIgUHJvcGVydGllcyB2IE11ZGQiLAogICAgICAgICIod2wpIFJveXNjb3QgVHJ1c3QgdiBSb2dlcnNvbiIsCiAgICAgICAgIih3bCkgT2NlYW4gVHJhbXAgVGFua2VycyBDb3Jwb3JhdGlvbiB2IFYiLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvIiwKICAgICAgICAiKHdsKSBHZW9yZ2UgTWl0Y2hlbGwgKENoZXN0ZXJoYWxsKSBMdGQgdiBGaW5uZXkgTG9jayBTZWVkcyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE4MyIsCiAgICAiWUVBUiI6ICIxOTY0IiwKICAgICJOQU1FIjogIih3bCkgTWNDdXRjaGVvbiB2IERhdmlkIE1hY0JyYXluZSBMdGQiLAogICAgIkNJVCI6ICJbMTk2NF0gMSBXTFIgMTI1IiwKICAgICJDSVRBVElPTiI6ICJNY0N1dGNoZW9uIHYgRGF2aWQgTWFjQnJheW5lIEx0ZCBbMTk2NF0gMSBXTFIgMTI1IiwKICAgICJKVURHRSI6ICJMb3JkIFJlaWQ7IExvcmQgSG9kc29uOyBMb3JkIEd1ZXN0OyBMb3JkIERldmxpbjsgTG9yZCBQZWFyY2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImFsbG93aW5nIEEmIzgyMTc7cyBhcHBlYWwsIHRoYXQgdGhpcyB3YXMgYW4gb3JhbCBjb250cmFjdCBhbmQgdGhlIGNvbmRpdGlvbnMgcmVsaWVkIG9uIHdlcmUgbm90IGltcG9ydGVkIGludG8gaXQgc28gYXMgdG8gZXhlbXB0IFIgZnJvbSBsaWFiaWxpdHkgaW4gbmVnbGlnZW5jZS4gKFJldmVyc2luZyBkZWNpc2lvbiBvZiBDb3VydCBvZiBTZXNzaW9uLCBTZWNvbmQgRGl2aXNpb247IGRpc3Rpbmd1aXNoZWQgb2JzZXJ2YXRpb25zIG9mIEJhZ2dhbGxheSBMLkouIGluIFBhcmtlciB2IFNvdXRoIEVhc3Rlcm4gUmFpbHdheSBDbyAoMTg3Ni03NykgTC5SLiAyIEMuUC5ELiA0MTYpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkNyaXRpY2lzZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiU2FsZSBvZiBHb29kcyAmbWRhc2g7IENhcnMgJm1kYXNoOyBDb250cmFjdCBUZXJtcyAmbWRhc2g7IFNhbGUgb2YgR29vZHMgJm1kYXNoOyBXYXJyYW50aWVzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTYWxlIG9mIEdvb2RzIiwKICAgICAgICAiQ2FycyIsCiAgICAgICAgIkNvbnRyYWN0IFRlcm1zIiwKICAgICAgICAiU2FsZSBvZiBHb29kcyIsCiAgICAgICAgIldhcnJhbnRpZXMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgU2hvZ3VuIEZpbmFuY2UgTHRkIHYgSHVkc29uIiwKICAgICAgICAiKHdsKSBSb3lzY290IFRydXN0IHYgUm9nZXJzb24iLAogICAgICAgICIod2wpIENpdHkgYW5kIFdlc3RtaW5zdGVyIFByb3BlcnRpZXMgdiBNdWRkIiwKICAgICAgICAiKHdsKSBSZWFyZG9uIFNtaXRoIExpbmUgTHRkIHYgWW5ndmFyIEhhbnNlbi1UYW5nZW4iLAogICAgICAgICIod2wpIEthcnNhbGVzIChIYXJyb3cpIEx0ZCB2IFdhbGxpcyIsCiAgICAgICAgIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIsCiAgICAgICAgIih3bCkgRGF2aXMgQ29udHJhY3RvcnMgTHRkIHYgRmFyZWhhbSBVcmJhbiBEaXN0cmljdCBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBUZWtkYXRhIEludGVyY29ubmVjdGlvbnMgTHRkIHYgQW1waGVub2wgTHRkIiwKICAgICAgICAiKHdsKSBJbnRlcmZvdG8gUGljdHVyZSBMaWJyYXJ5IEx0ZCB2IFN0aWxldHRvIFZpc3VhbCBQcm9kdWN0aW9ucyBMdGQiLAogICAgICAgICIod2wpIEdlb3JnZSBNaXRjaGVsbCAoQ2hlc3RlcmhhbGwpIEx0ZCB2IEZpbm5leSBMb2NrIFNlZWRzIiwKICAgICAgICAiKHdsKSBDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyAmIER5ZWluZyBDbyIsCiAgICAgICAgIih3bCkgU3VkYnJvb2sgVHJhZGluZyBFc3RhdGUgTHRkIHYgRWdnbGV0b24iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxODQiLAogICAgIllFQVIiOiAiMTk1NyIsCiAgICAiTkFNRSI6ICIod2wpIE9zY2FyIENoZXNzIEx0ZCB2IFdpbGxpYW1zIiwKICAgICJDSVQiOiAiWzE5NTddIDEgV0xSIDM3MCIsCiAgICAiQ0lUQVRJT04iOiAiT3NjYXIgQ2hlc3MgTHRkIHYgV2lsbGlhbXMgWzE5NTddIDEgV0xSIDM3MCIsCiAgICAiSlVER0UiOiAiRGVubmluZyBMSjsgSG9kc29uIExKOyBNb3JyaXMgTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIm9uIHRoZSBmYWN0cywgdGhlIGRlZmVuZGFudCwgaW4gb2ZmZXJpbmcgYSAxOTQ4IE1vcnJpcyBhbmQgcHJvZHVjaW5nIHRoZSByZWdpc3RyYXRpb24gYm9vaywgZGlkIG5vdCBpbnRlbmQgdG8gYmluZCBoaW1zZWxmIHNvIGFzIHRvIHdhcnJhbnQgdGhhdCBpdCB3YXMgYSAxOTQ4IG1vZGVsOyBhY2NvcmRpbmdseSB0aGUgcGxhaW50aWZmcyYjODIxNzsgY2xhaW0gZmFpbGVkLiBQYXNsZXkgdiBGcmVlbWFuIDEwMCBFLlIuIDQ1MCBhcHBsaWVkOyBhbmQgSGVpbGJ1dCBTeW1vbnMgJmFtcDsgQ28gdiBCdWNrbGV0b24gWzE5MTNdIEEuQy4gMzAgYXBwbGllZCIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIiwKICAgICAgICAiRGVubmluZyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0hDIiwKICAgICJDQVRFR09SWSI6ICJTYWxlIG9mIEdvb2RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbnRyYWN0cyAmbWRhc2g7IENvbnRyYWN0cyBvZiBTYWxlICZtZGFzaDsgTWlzcmVwcmVzZW50YXRpb24gJm1kYXNoOyBXYXJyYW50aWVzIC8gRGFtYWdlcyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMgJm1kYXNoOyBBdmlhdGlvbiAmbWRhc2g7IEFpcmNyYWZ0IENvbXBvbmVudHMgJm1kYXNoOyBCcmVhY2ggb2YgQ29udHJhY3QgJm1kYXNoOyBNZWFzdXJlIG9mIERhbWFnZXMgJm1kYXNoOyBNaXRpZ2F0aW9uIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTYWxlIG9mIEdvb2RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbnRyYWN0cyIsCiAgICAgICAgIkNvbnRyYWN0cyBvZiBTYWxlIiwKICAgICAgICAiTWlzcmVwcmVzZW50YXRpb24iLAogICAgICAgICJXYXJyYW50aWVzIiwKICAgICAgICAiRGFtYWdlcyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMiLAogICAgICAgICJBdmlhdGlvbiIsCiAgICAgICAgIkFpcmNyYWZ0IENvbXBvbmVudHMiLAogICAgICAgICJCcmVhY2ggb2YgQ29udHJhY3QiLAogICAgICAgICJNZWFzdXJlIG9mIERhbWFnZXMiLAogICAgICAgICJNaXRpZ2F0aW9uIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIFJveXNjb3QgVHJ1c3QgdiBSb2dlcnNvbiIsCiAgICAgICAgIih3bCkgRWFzdCB2IE1hdXJlciIsCiAgICAgICAgIih3bCkgVHJhbnNmaWVsZCBTaGlwcGluZyBJbmMgdiBNZXJjYXRvciBTaGlwcGluZyBJbmMgKFRoZSBBY2hpbGxlYXMpIiwKICAgICAgICAiKHdsKSBJbm50cmVwcmVuZXVyIFB1YiBDbyB2IEVhc3QgQ3Jvd24gTHRkIiwKICAgICAgICAiKHdsKSBFc3NvIFBldHJvbGV1bSBDbyBMdGQgdiBNYXJkb24iLAogICAgICAgICIod2wpIEdlb3JnZSBNaXRjaGVsbCAoQ2hlc3RlcmhhbGwpIEx0ZCB2IEZpbm5leSBMb2NrIFNlZWRzIiwKICAgICAgICAiKHdsKSBQYW5raGFuaWEgdiBIYWNrbmV5IEJvcm91Z2ggQ291bmNpbCIsCiAgICAgICAgIih3bCkgSG9uZyBLb25nIEZpciBTaGlwcGluZyBDbyBMdGQgdiBLYXdhc2FraSBLaXNlbiBLYWlzaGEgTHRkIiwKICAgICAgICAiKHdsKSBDYXZlbmRpc2ggU3F1YXJlIEhvbGRpbmcgQlYgdiBUYWxhbCBFbCBNYWtkZXNzaTsgUGFya2luZ0V5ZSBMdGQgdiBCZWF2aXMiLAogICAgICAgICIod2wpIFRpbm4gdiBIb2ZmbWFuICYgQ28iLAogICAgICAgICIod2wpIEhlZGxleSBCeXJuZSAmIENvIEx0ZCB2IEhlbGxlciAmIFBhcnRuZXJzIiwKICAgICAgICAiKHdsKSBUZWtkYXRhIEludGVyY29ubmVjdGlvbnMgTHRkIHYgQW1waGVub2wgTHRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTg1IiwKICAgICJZRUFSIjogIjIwMTUiLAogICAgIkNPVU5TRUwiOiAiRm9yIHRoZSBjbGFpbWFudDogR3V5IE1vcnB1c3MgUUMsIFBhdHJpY2lhIEVkd2FyZHMuIEZvciB0aGUgZmlyc3QgZGVmZW5kYW50OiBIaWxhcnkgSGVpbGJyb24gUUMsIERhdmlkIFNjYW5uZWxsLiIsCiAgICAiQUJTVFJBQ1QiOiBbCiAgICAgICAgIlRoZSBjbGFpbWFudCBhaXJsaW5lIChUKSBjbGFpbWVkIGRhbWFnZXMgZm9yIHRoZSBicmVhY2ggb2YgdGhyZWUgY29udHJhY3RzIG1hZGUgd2l0aCB0aGUgZGVmZW5kYW50IChLKSwgYSBKYXBhbmVzZSBjb21wYW55IHdoaWNoIG1hbnVmYWN0dXJlZCBhaXJjcmFmdCBzZWF0cy4iLAogICAgICAgICJVbmRlciB0aGUgY29udHJhY3RzLCBLIGhhZCBhZ3JlZWQgdG8gc3VwcGx5IGVjb25vbXktY2xhc3Mgc2VhdHMgZm9yIHRocmVlIGdyb3VwcyBvZiBhaXJjcmFmdC4gU29tZSBvZiB0aGUgc2VhdHMgd2VyZSBkZWxpdmVyZWQgbGF0ZSBhbmQgb3RoZXJzIHdlcmUgbm90IGRlbGl2ZXJlZCBhdCBhbGwuIEFtb25nIG90aGVyIGNvbnNlcXVlbmNlcyBvZiB0aG9zZSBkZWZhdWx0cywgVCB3YXMgcHJldmVudGVkIGZyb20gdXNpbmcgZml2ZSBuZXcgYWlyY3JhZnQgZm9yIGFyb3VuZCAxOCBtb250aHMgdW50aWwgc2VhdHMgd2VyZSBvYnRhaW5lZCBmcm9tIGFub3RoZXIgc3VwcGxpZXIuIEsgaGFkIGFkbWl0dGVkIGxpYWJpbGl0eS4gVGhlIGlzc3VlcyB3aGljaCByZW1haW5lZCBpbiBkaXNwdXRlIGNvbmNlcm5lZCB0aGUgbWVhc3VyZSBvZiBkYW1hZ2VzLiBUaGUgbGFyZ2VzdCBpdGVtIG9mIGRhbWFnZXMgY2xhaW1lZCAoanVzdCB1bmRlciAkMTYyIG1pbGxpb24pIHdhcyB0aGUgY29zdCBvZiBsZWFzaW5nIGFpcmNyYWZ0IGZyb20gYSB0aGlyZCBwYXJ0eSBmb3IgYSB0aHJlZS15ZWFyIHBlcmlvZC4gSW4gYWRkaXRpb24sIGRhbWFnZXMgb2YgJDIxIG1pbGxpb24gd2VyZSBzb3VnaHQgaW4gcmVzcGVjdCBvZiB0aGUgY29zdCBvZiBidXlpbmcgYW5kIGluc3RhbGxpbmcgcmVwbGFjZW1lbnQgc2VhdHMgZm9yIHNvbWUgb2YgdGhlIGFpcmNyYWZ0LiBBIGNlbnRyYWwgcGxhbmsgb2YgdGhlIGRlZmVuY2Ugd2FzIHRoYXQsIGV2ZW4gd2hlcmUgY29zdHMgd2VyZSBpbmN1cnJlZCBieSBUIGFzIGEgcmVzdWx0IG9mIEsmIzgyMTc7cyBicmVhY2hlcyBvZiBjb250cmFjdCwgVCBoYWQgYWxzbyBnYWluZWQgY2VydGFpbiBiZW5lZml0cyBmcm9tIHRoZSBtaXRpZ2F0aW5nIGFjdGlvbnMgdGFrZW4gd2hpY2ggaGFkIHRvIGJlIGJyb3VnaHQgaW50byBhY2NvdW50IGluIGNhbGN1bGF0aW5nIGRhbWFnZXMuIFRodXMsIEsgY2xhaW1lZCB0aGF0IFQgY291bGQgbm90IHJlY292ZXIgdGhlIGNvc3Qgb2YgdGhlIGxlYXNlcywgYXMgdGhlIGJlbmVmaXRzIGdhaW5lZCBmcm9tIGxlYXNpbmcgdGhlIGFpcmNyYWZ0IGFuZCBvdGhlciBtaXRpZ2F0aW5nIHN0ZXBzIHRha2VuIGJ5IFQgbm90IG9ubHkgZWxpbWluYXRlZCB0aGUgbG9zc2VzIHdoaWNoIHdvdWxkIG90aGVyd2lzZSBoYXZlIHJlc3VsdGVkIGZyb20gdGhlIGxvc3Mgb2YgYWlyY3JhZnQgY2FwYWNpdHkgY2F1c2VkIGJ5IEsmIzgyMTc7cyBicmVhY2hlcyBvZiBjb250cmFjdCBidXQgY292ZXJlZCB0aGUgY29zdCBvZiB0aGUgbGVhc2VzIGFzIHdlbGwuIEsgYWxzbyBhc3NlcnRlZCB0aGF0IHRoZSByZXBsYWNlbWVudCBzZWF0cyBib3VnaHQgYnkgVCB3ZXJlIGxpZ2h0ZXIgdGhhbiB0aGUgc2VhdHMgb3JkZXJlZCBhbmQgdGhhdCB0aGUgaW5zdGFsbGF0aW9uIG9mIGxpZ2h0ZXIgc2VhdHMgaGFkIGdlbmVyYXRlZCBhbmQgd291bGQgY29udGludWUgdG8gZ2VuZXJhdGUgc2F2aW5ncyBpbiB0aGUgY29zdCBvZiBmdWVsIGZvciB3aGljaCBUIHNob3VsZCBnaXZlIGNyZWRpdC4gSyBhbHNvIG1haW50YWluZWQgdGhhdCBjZXJ0YWluIGNyZWRpdHMgZ3JhbnRlZCB0byBUIHdoZW4gaXQgYm91Z2h0IGZ1cnRoZXIgYWlyY3JhZnQgd2VyZSBhdHRyaWJ1dGFibGUgdG8gdGhlIGRlbGF5cyBpbiB0aGUgZGVsaXZlcnkgb2YgYWlyY3JhZnQgY2F1c2VkIGJ5IEsmIzgyMTc7cyBicmVhY2hlcyBhbmQgaGFkIHRoZXJlZm9yZSB0byBiZSBicm91Z2h0IGludG8gYWNjb3VudC4iCiAgICBdLAogICAgIk5BTUUiOiAiKHdsKSBTY2hhd2VsIHYgUmVhZGUiLAogICAgIkNJVCI6ICJbMjAxNV0gRVdIQyAxMjUwIChDb21tKSIsCiAgICAiQ0lUQVRJT04iOiAiU2NoYXdlbCB2IFJlYWRlIFsyMDE1XSBFV0hDIDEyNTAgKENvbW0pIiwKICAgICJKVURHRSI6ICJMZWdnYXR0IEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkRhbWFnZXMgYXNzZXNzZWQuIiwKICAgICAgICAiKDEpIFdoZW4gVCBlbnRlcmVkIGludG8gdGhlIGxlYXNlcywgaXQgY291bGQgcmVhc29uYWJseSBoYXZlIGV4cGVjdGVkIHRvIG9idGFpbiByZXBsYWNlbWVudCBzZWF0cyBmb3IgdGhlIHJlbGV2YW50IGFpcmNyYWZ0IGFuZCBicmluZyB0aGVtIGludG8gc2VydmljZSB3ZWxsIHdpdGhpbiB0d28geWVhcnMgb2YgdGhlIGxlYXNlIHRlcm1zLiBBY2NvcmRpbmdseSwgd2hpbGUgdGhlIG1haW4gcmVhc29uIGZvciBsZWFzaW5nIHRoZSBhaXJjcmFmdCB3YXMgdG8gbWl0aWdhdGUgdGhlIGNvbnNlcXVlbmNlcyBvZiBLJiM4MjE3O3MgYnJlYWNoZXMgb2YgY29udHJhY3QsIHRoYXQgcmVhc29uIGRpZCBub3QganVzdGlmeSBsZWFzaW5nIHRoZSBhaXJjcmFmdCBmb3IgdGhyZWUgeWVhcnMgcmF0aGVyIHRoYW4gdHdvLiBUaGUgY2hvaWNlIG9mIGEgdGhyZWUteWVhciByYXRoZXIgdGhhbiBhIHR3by15ZWFyIGxlYXNlIHRlcm0gd2FzIGRyaXZlbiBieSBvdGhlciBjb21tZXJjaWFsIGNvbnNpZGVyYXRpb25zLiBUaGUgZGVjaXNpb24gdG8gbGVhc2UgdGhlIGFpcmNyYWZ0IGZvciBhIHRoaXJkIHllYXIgd2FzIG5vdCBhIHN0ZXAgd2hpY2ggd2FzIHRha2VuIG5vciB3aGljaCBpdCB3b3VsZCBoYXZlIGJlZW4gcmVhc29uYWJsZSBmb3IgVCB0byB0YWtlIGluIG1pdGlnYXRpb24gb2YgbG9zcyBhbmQgd2FzIHRoZXJlZm9yZSBub3QgYXR0cmlidXRhYmxlIHRvIEsmIzgyMTc7cyBicmVhY2hlcyBvZiBjb250cmFjdC4gSyBoYWQgZmFpbGVkIHRvIHByb3ZlIHRoYXQgdGhlIG5ldCBiZW5lZml0cyB3aGljaCBUIGhhZCBvYnRhaW5lZCBmcm9tIGhhdmluZyB0aGUgdGhyZWUgbGVhc2VkIGFpcmNyYWZ0IGluIGl0cyBmbGVldCBkdXJpbmcgdGhlIGZpcnN0IHR3byB5ZWFycyBvZiB0aGUgbGVhc2VzIHdlcmUgc3VmZmljaWVudCB0byBvZmZzZXQgYWxsIHRoZSBsb3NzZXMgcmVzdWx0aW5nIGZyb20gdGhlIGRlbGF5ZWQgZW50cnkgaW50byBzZXJ2aWNlLCBvciB0aGUgcmVzdHJpY3RlZCB1c2UsIG9mIHRoZSBhaXJjcmFmdCBjYXVzZWQgYnkgSyYjODIxNztzIGJyZWFjaGVzIG9mIGNvbnRyYWN0LiBUIHdhcyBlbnRpdGxlZCB0byByZWNvdmVyIGxlYXNlIGNvc3RzIG9mICQxMDcgbWlsbGlvbiAoc2VlIHBhcmFzIDU2LCA2MiwgMTM4LTEzOSBvZiBqdWRnbWVudCkuICgyKSBJZiBhcyBhIHJlc3VsdCBvZiBidXlpbmcgbGlnaHRlciByZXBsYWNlbWVudCBzZWF0cyBpbiBtaXRpZ2F0aW9uIG9mIGl0cyBsb3NzIFQgaGFkIHNhdmVkIG9yIHdvdWxkIHNhdmUgbW9uZXksIHRoZSBhbW91bnQgc2F2ZWQgd291bGQgaGF2ZSB0byBiZSBicm91Z2h0IGludG8gYWNjb3VudCBpbiB0aGUgYXNzZXNzbWVudCBvZiBkYW1hZ2VzLiBIb3dldmVyLCB0aGUgYnVyZGVuIG9mIHByb29mIHdhcyBvbiBLIHRvIGVzdGFibGlzaCB0aGUgZmFjdCBhbmQgYW1vdW50IG9mIGFueSBzdWNoIHNhdmluZy4gSXQgaGFkIG5vdCBkaXNjaGFyZ2VkIHRoYXQgYnVyZGVuIGluIHJlbGF0aW9uIHRvIHdoYXQgd2VyZSBrbm93biBhcyB0aGUgUmVjYXJvIHNlYXRzLiBIb3dldmVyLCBpbiByZWxhdGlvbiB0byB3aGF0IHdlcmUga25vd24gYXMgdGhlIFpJTSBzZWF0cywgdGhlIGV4cGVydCBldmlkZW5jZSBkaWQganVzdGlmeSBhIGZpbmRpbmcgdGhhdCBUIGhhZCBpbmN1cnJlZCBhIHNhdmluZyB3aGljaCBzaG91bGQgYmUgYnJvdWdodCBpbnRvIGFjY291bnQgKHBhcmFzIDE0NCwgMTUyLCAxNTgpLiAoMykgVCBoYWQgb2J0YWluZWQgYSBwcmljZSByZWR1Y3Rpb24gZnJvbSB0aGUgc3VwcGxpZXIgb2YgdGhlIGFpcmNyYWZ0IGluIHdoaWNoIEsmIzgyMTc7cyBzZWF0cyB3ZXJlIHRvIGJlIGluc3RhbGxlZC4gVGhlcmUgd2VyZSB0d28gZWZmZWN0aXZlIGNhdXNlcyBvZiB0aGF0IHJlZHVjdGlvbjogSyYjODIxNztzIGJyZWFjaCBvZiBjb250cmFjdCBhbmQgdGhlIGJhcmdhaW5pbmcgcG93ZXIgd2hpY2ggVCB3YXMgYWJsZSB0byBleHBsb2l0IHRocm91Z2ggYmVpbmcgYSBnb29kIGN1c3RvbWVyIG9mIHRoZSBzdXBwbGllci4gV2hlbiB0aGUgZGVmZW5kYW50JiM4MjE3O3MgYnJlYWNoIG9mIGNvbnRyYWN0IGNvbWJpbmVkIHdpdGggYW5vdGhlciBlZmZlY3RpdmUgY2F1c2UgdG8gcmVzdWx0IGluIGxvc3MgdG8gdGhlIGNsYWltYW50LCB0aGUgbG9zcyB3YXMgcmVjb3ZlcmFibGU7IHRoZSBzYW1lIHByaW5jaXBsZSBoYWQgdG8gYXBwbHkgdG8gZ2FpbnMuIENyZWRpdCBoYWQgdGhlcmVmb3JlIHRvIGJlIGdpdmVuIGluIHRoZSBjYWxjdWxhdGlvbiBvZiBkYW1hZ2VzIGZvciB0aGUgYmVuZWZpdCB0byBUIG9mIHRoZSBwcmljZSByZWR1Y3Rpb24uIEZ1cnRoZXIsIFQgaGFkIGJlZW4gZ3JhbnRlZCB2YXJpb3VzIGNyZWRpdHMgb24gdGhlIHB1cmNoYXNlIG9mIG5ldyBhaXJjcmFmdCBhZnRlciB0aGUgcmVsZXZhbnQgZXZlbnRzLiBUaHJlZSBjcmVkaXRzIHJlbWFpbmVkIGluIGRpc3B1dGUuIE9uZSB3YXMgYSBjcmVkaXQgdG8gb2Zmc2V0IHRoZSBhbW91bnQgb2YgYW4gaW52b2ljZSB3aGljaCB0aGUgc3VwcGxpZXIgaGFkIGlzc3VlZCB0byBUIGNsYWltaW5nICYjODIyMDtkaXNydXB0aW9uIGNvc3RzJiM4MjIxOyByZXN1bHRpbmcgZnJvbSB0aGUgZGVsYXllZCBkZWxpdmVyeSBjYXVzZWQgYnkgSyYjODIxNztzIGJyZWFjaGVzLiBUIGhhZCBmYWlsZWQgdG8gcHJvdmUgdGhhdCBpdCB3YXMgbGlhYmxlIHRvIHBheSB0aGUgc3VtIG9mZnNldCBhbmQgd2FzIHRoZXJlZm9yZSBub3QgZW50aXRsZWQgdG8gcmVjb3ZlciB0aGF0IHN1bSBmcm9tIEsuIFRoZSByZWNlaXB0IGJ5IFQgb2YgdGhlIG90aGVyIHR3byBjcmVkaXRzIGhhZCBub3QgYmVlbiBjYXVzZWQgYnkgSyYjODIxNztzIGJyZWFjaGVzIG9mIGNvbnRyYWN0LiBJdCB3YXMgcmVhc29uYWJsZSB0byBpbmZlciB0aGF0IHRoZSBzdXBwbGllciB3b3VsZCBoYXZlIGJlZW4gd2lsbGluZyB0byBtYWtlIHNpbWlsYXIgY3JlZGl0cyBhdmFpbGFibGUgdG8gVCBhcyBhbiBpbmNlbnRpdmUgdG8gYnV5IG5ldyBhaXJjcmFmdCBpcnJlc3BlY3RpdmUgb2YgdGhlIHByb2JsZW1zIGNhdXNlZCBieSBLJiM4MjE3O3MgYnJlYWNoZXMgb2YgY29udHJhY3QuIFRob3NlIGNyZWRpdHMgd2VyZSB0aGVyZWZvcmUgbm90IHRvIGJlIGJyb3VnaHQgaW50byBhY2NvdW50IGluIHRoZSBhc3Nlc3NtZW50IG9mIGRhbWFnZXMgKHBhcmFzIDE3MiwgMTc2LTE3OSwgMTg3LTE4OCwgMTkxKS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIsCiAgICAgICAgIkRlbm5pbmciCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdIQyIsCiAgICAiQ0FURUdPUlkiOiAiQ29udHJhY3RzICZtZGFzaDsgQmVlciAmbWRhc2g7IENvbGxhdGVyYWwgQ29udHJhY3RzICZtZGFzaDsgTWlzcmVwcmVzZW50YXRpb24gJm1kYXNoOyBUaWUtSW5zICZtZGFzaDsgV2FycmFudGllcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29udHJhY3RzIiwKICAgICAgICAiQmVlciIsCiAgICAgICAgIkNvbGxhdGVyYWwgQ29udHJhY3RzIiwKICAgICAgICAiTWlzcmVwcmVzZW50YXRpb24iLAogICAgICAgICJUaWUtSW5zIiwKICAgICAgICAiV2FycmFudGllcyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBQYW5raGFuaWEgdiBIYWNrbmV5IEJvcm91Z2ggQ291bmNpbCIsCiAgICAgICAgIih3bCkgSGVkbGV5IEJ5cm5lICYgQ28gTHRkIHYgSGVsbGVyICYgUGFydG5lcnMiLAogICAgICAgICIod2wpIFJveXNjb3QgVHJ1c3QgdiBSb2dlcnNvbiIsCiAgICAgICAgIih3bCkgU2NoYXdlbCB2IFJlYWRlIiwKICAgICAgICAiKHdsKSBDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyAmIER5ZWluZyBDbyIsCiAgICAgICAgIih3bCkgRXNzbyBQZXRyb2xldW0gQ28gTHRkIHYgTWFyZG9uIiwKICAgICAgICAiKHdsKSBDaGFwcGVsbCAmIENvIHYgTmVzdGxlIENvIEx0ZCIsCiAgICAgICAgIih3bCkgVG9vbCBNZXRhbCBNYW51ZmFjdHVyaW5nIENvIEx0ZCB2IFR1bmdzdGVuIEVsZWN0cmljIENvIEx0ZCIsCiAgICAgICAgIih3bCkgQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIih3bCkgQXNzb2NpYXRlZCBKYXBhbmVzZSBCYW5rIChJbnRlcm5hdGlvbmFsKSBMdGQgdiBDcmVkaXQgZHUgTm9yZCIsCiAgICAgICAgIih3bCkgSW50ZXJmb3RvIFBpY3R1cmUgTGlicmFyeSBMdGQgdiBTdGlsZXR0byBWaXN1YWwgUHJvZHVjdGlvbnMgTHRkIiwKICAgICAgICAiKHdsKSBCcml0aXNoIFN0ZWVsIENvcnBvcmF0aW9uIHYgQ2xldmVsYW5kIEJyaWRnZSBhbmQgRW5naW5lZXJpbmcgQ28gTHRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTg2IiwKICAgICJZRUFSIjogIjIwMDAiLAogICAgIkNPVU5TRUwiOiAiRm9yIEk6IE5pY2hvbGFzIERvd2RpbmcgUS5DLiBhbmQgTWFydGluIFJvZGdlci4gRm9yIEU6IFJvYmVydCBCYWlsZXktS2luZy4iLAogICAgIk5BTUUiOiAiKHdsKSBJbm50cmVwcmVuZXVyIFB1YiBDbyB2IEVhc3QgQ3Jvd24gTHRkIiwKICAgICJDSVQiOiAiWzIwMDBdIDIgTGxveWQmIzgyMTc7cyBSZXAgNjExIiwKICAgICJDSVRBVElPTiI6ICJJbm50cmVwcmVuZXVyIFB1YiBDbyB2IEVhc3QgQ3Jvd24gTHRkIFsyMDAwXSAyIExsb3lkJiM4MjE3O3MgUmVwIDYxMSIsCiAgICAiSlVER0UiOiAiTGlnaHRtYW4gSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiZ2l2aW5nIGp1ZGdtZW50IGZvciBJIGFuZCBkaXNtaXNzaW5nIHRoZSBjb3VudGVyY2xhaW0sIHRoYXQgdGhlICYjODIyMDtlbnRpcmUgYWdyZWVtZW50JiM4MjIxOyBjbGF1c2UgY29udGFpbmVkIGluIHRoZSBsZWFzZSBub3Qgb25seSBoYWQgdGhlIGVmZmVjdCBvZiByZW5kZXJpbmcgZXZpZGVuY2Ugb2YgdGhlIGFsbGVnZWQgY29sbGF0ZXJhbCB3YXJyYW50eSBpbmFkbWlzc2libGUsIGJ1dCBhbHNvIGRlcHJpdmVkIHRoZSB3YXJyYW50eSBvZiBhbGwgbGVnYWwgZWZmZWN0LCBEZWVwYWsgRmVydGlsaXNlcnMgJmFtcDsgUGV0cm9jaGVtaWNhbHMgQ29ycCBMdGQgdiBEYXZ5IE1jS2VlIChMb25kb24pIEx0ZCBbMTk5OF0gMiBMbG95ZCYjODIxNztzIFJlcC4gMTM5IGFwcGxpZWQuIEZ1cnRoZXIsIHRoZSBhZ3JlZW1lbnQgY2xhdXNlIHdhcyBub3QgaW4gYnJlYWNoIG9mIHRoZSBNaXNyZXByZXNlbnRhdGlvbiBBY3QgMTk2NyBzLjMgd2hpY2ggd2FzIGluYXBwbGljYWJsZSB0byBhIGNvbnRyYWN0dWFsIHByb3Zpc2lvbiB3aGljaCBkZWZpbmVkIHdoZXJlIHRoZSB0ZXJtcyBvZiB0aGUgY29udHJhY3Qgd2VyZSB0byBiZSBmb3VuZCwgTWNHcmF0aCB2IFNoYWggKDE5ODkpIDU3IFAuICZhbXA7IEMuUi4gNDUyIGFwcGxpZWQuIEluIGFueSBldmVudCwgdGhlIHJlZmVyZW5jZSB0byBhIHJlbGVhc2UgZnJvbSB0aGUgdGllIGluIDE5OTEgd2FzIGluc3VmZmljaWVudCB0byBzdXBwb3J0IHRoZSBnaXZpbmcgb2YgdGhlIGFsbGVnZWQgY29sbGF0ZXJhbCB3YXJyYW50eSB0byBFIHdoaWNoLCBvd2luZyB0byB0aGUgcGFzc2FnZSBvZiB0aW1lLCB3b3VsZCBoYXZlIGJlZW4gaW52YWxpZCBhdCB0aGUgdGltZSBvZiB0aGUgZXhlY3V0aW9uIG9mIHRoZSBhZ3JlZW1lbnQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdIQyIsCiAgICAiQ0FURUdPUlkiOiAiU2FsZSBvZiBHb29kcyAmbWRhc2g7IEV4Y2x1c2lvbiBDbGF1c2VzICZtZGFzaDsgT3JhbCBDb250cmFjdHMgJm1kYXNoOyBTYWxlIG9mIEdvb2RzICZtZGFzaDsgV2FycmFudGllcyAvIExhbmRsb3JkIGFuZCBUZW5hbnQgJm1kYXNoOyBCcmVhY2ggJm1kYXNoOyBDb3ZlbmFudHMgJm1kYXNoOyBSZXB1ZGlhdGlvbiAmbWRhc2g7IFdhaXZlciIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiU2FsZSBvZiBHb29kcyIsCiAgICAgICAgIkV4Y2x1c2lvbiBDbGF1c2VzIiwKICAgICAgICAiT3JhbCBDb250cmFjdHMiLAogICAgICAgICJTYWxlIG9mIEdvb2RzIiwKICAgICAgICAiV2FycmFudGllcyIsCiAgICAgICAgIkxhbmRsb3JkIGFuZCBUZW5hbnQiLAogICAgICAgICJCcmVhY2giLAogICAgICAgICJDb3ZlbmFudHMiLAogICAgICAgICJSZXB1ZGlhdGlvbiIsCiAgICAgICAgIldhaXZlciIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBKIEV2YW5zICYgU29uIChQb3J0c21vdXRoKSB2IEFuZHJlYSBNZXJ6YXJpbyBMdGQiLAogICAgICAgICIod2wpIE9zY2FyIENoZXNzIEx0ZCB2IFdpbGxpYW1zIiwKICAgICAgICAiKHdsKSBHZW9yZ2UgTWl0Y2hlbGwgKENoZXN0ZXJoYWxsKSBMdGQgdiBGaW5uZXkgTG9jayBTZWVkcyIsCiAgICAgICAgIih3bCkgSG9uZyBLb25nIEZpciBTaGlwcGluZyBDbyBMdGQgdiBLYXdhc2FraSBLaXNlbiBLYWlzaGEgTHRkIiwKICAgICAgICAiKHdsKSBSb3lzY290IFRydXN0IHYgUm9nZXJzb24iLAogICAgICAgICIod2wpIFJlYXJkb24gU21pdGggTGluZSBMdGQgdiBZbmd2YXIgSGFuc2VuLVRhbmdlbiIsCiAgICAgICAgIih3bCkgT2xsZXkgdiBNYXJsYm9yb3VnaCBDb3VydCBIb3RlbCIsCiAgICAgICAgIih3bCkgU2NoYXdlbCB2IFJlYWRlIiwKICAgICAgICAiKHdsKSBDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyAmIER5ZWluZyBDbyIsCiAgICAgICAgIih3bCkgQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIsCiAgICAgICAgIih3bCkgUGhhcm1hY2V1dGljYWwgU29jaWV0eSBvZiBHcmVhdCBCcml0YWluIHYgQm9vdHMgQ2FzaCBDaGVtaXN0cyAoU291dGhlcm4pIEx0ZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE4NyIsCiAgICAiWUVBUiI6ICIxOTU5IiwKICAgICJOQU1FIjogIih3bCkgQ2l0eSBhbmQgV2VzdG1pbnN0ZXIgUHJvcGVydGllcyB2IE11ZGQiLAogICAgIkNJVCI6ICJbMTk1OV0gQ2ggMTI5IiwKICAgICJDSVRBVElPTiI6ICJDaXR5IGFuZCBXZXN0bWluc3RlciBQcm9wZXJ0aWVzIHYgTXVkZCBbMTk1OV0gQ2ggMTI5IiwKICAgICJKVURHRSI6ICJIYXJtYW4gSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiKDEpIGhhdmluZyByZWdhcmQgdG8gdGhlIG5hdHVyZSBvZiB0aGUgcHJvcGVydHkgYW5kIHRvIHRoZSBjb3ZlbmFudCB0byB1c2UgaXQgZm9yIHNob3dyb29tcywgZXRjLiwgb25seSwgdGhlIHRlbmFudCBieSB1c2luZyBpdCBmb3IgcmVzaWRlbnRpYWwgcHVycG9zZXMgd2FzIGluIGJyZWFjaCBvZiBjb3ZlbmFudCBhbmQgdGhlIGNvdW50ZXJjbGFpbSBmb3IgcmVjdGlmaWNhdGlvbiBmYWlsZWQ7ICgyKSBhbHRob3VnaCB0aGUgbGFuZGxvcmRzJiM4MjE3OyBrbm93bGVkZ2Ugd2FpdmVkIHBhc3QgYnJlYWNoZXMsIHRoYXQga25vd2xlZGdlIGRpZCBub3QgYW1vdW50IHRvIGEgcmVsZWFzZSBieSB0aGVtIG9mIHRoZSBjb3ZlbmFudDsgKDMpIHRoZSBjbGFpbSBmb3IgZm9yZmVpdHVyZSBmYWlsZWQgYmVjYXVzZSB0aGUgdGVuYW50IGhhZCBleGVjdXRlZCB0aGUgbGVhc2UgaW4gcmVsaWFuY2Ugb24gYSBwcm9taXNlIG1hZGUgdG8gaGltIGJ5IHRoZSBsYW5kbG9yZHMgYXQgdGhlIHRpbWUgbm90IHRvIGVuZm9yY2UgYWdhaW5zdCBoaW0gcGVyc29uYWxseSB0aGUgY292ZW5hbnQgdG8gdXNlIHRoZSBwcmVtaXNlcyBmb3IgYnVzaW5lc3MgcHVycG9zZXMgb25seSwgYW5kIHRodXMgYW4gZW5mb3JjZWFibGUgY29udHJhY3QgaGFkIGJlZW4gY29uc3RpdHV0ZWQgZnJvbSB3aGljaCB0aGUgbGFuZGxvcmRzIGNvdWxkIG5vdCByZXNpbGUuICggV2lsbGlhbSBQb3J0ZXIgJmFtcDsgQ28gTHRkLCBSZSBbMTkzN10gMiBBbGwgRS5SLiAzNjEgYXBwbGllZCkuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiQ29udHJhY3RzICZtZGFzaDsgRXhjbHVzaW9uIENsYXVzZXMgJm1kYXNoOyBPcmFsIENvbnRyYWN0cyAmbWRhc2g7IFN0YW5kYXJkIEZvcm1zIG9mIENvbnRyYWN0IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJFeGNsdXNpb24gQ2xhdXNlcyIsCiAgICAgICAgIk9yYWwgQ29udHJhY3RzIiwKICAgICAgICAiU3RhbmRhcmQgRm9ybXMgb2YgQ29udHJhY3QiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IiwKICAgICAgICAiKHdsKSBDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDb21wYW55IiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQgTHRkIiwKICAgICAgICAiKHdsKSBDaXR5IGFuZCBXZXN0bWluc3RlciBQcm9wZXJ0aWVzIHYgTXVkZCIsCiAgICAgICAgIih3bCkgTmljb2xlbmUgdiBTaW1tb25kcyIsCiAgICAgICAgIih3bCkgQ3VydGlzIHYgQ2hlbWljYWwgQ2xlYW5pbmcgJiBEeWVpbmcgQ28iLAogICAgICAgICIod2wpIEVkbW9uZHMgdiBMYXdzb24iLAogICAgICAgICIod2wpIEludGVyZm90byBQaWN0dXJlIExpYnJhcnkgTHRkIHYgU3RpbGV0dG8gVmlzdWFsIFByb2R1Y3Rpb25zIEx0ZCIsCiAgICAgICAgIih3bCkgSGVkbGV5IEJ5cm5lICYgQ28gTHRkIHYgSGVsbGVyICYgUGFydG5lcnMiLAogICAgICAgICIod2wpIEZpc2hlciB2IEJlbGwiLAogICAgICAgICIod2wpIEdyZWF0IFBlYWNlIFNoaXBwaW5nIEx0ZCB2IFRzYXZsaXJpcyAoSW50ZXJuYXRpb25hbCkgTHRkIiwKICAgICAgICAiKHdsKSBUb29sIE1ldGFsIE1hbnVmYWN0dXJpbmcgQ28gTHRkIHYgVHVuZ3N0ZW4gRWxlY3RyaWMgQ28gTHRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTg4IiwKICAgICJZRUFSIjogIjE5NzYiLAogICAgIk5BTUUiOiAiKHdsKSBKIEV2YW5zICYgU29uIChQb3J0c21vdXRoKSB2IEFuZHJlYSBNZXJ6YXJpbyBMdGQiLAogICAgIkNJVCI6ICJbMTk3Nl0gMSBXTFIgMTA3OCIsCiAgICAiQ0lUQVRJT04iOiAiSiBFdmFucyAmYW1wOyBTb24gKFBvcnRzbW91dGgpIHYgQW5kcmVhIE1lcnphcmlvIEx0ZCBbMTk3Nl0gMSBXTFIgMTA3OCIsCiAgICAiSlVER0UiOiAiTG9yZCBEZW5uaW5nIE1SOyBSb3NraWxsIExKOyBHZW9mZnJleSBMYW5lIExKIiwKICAgICJIRUxEIjogWwogICAgICAgICJhbGxvd2luZyB0aGUgYXBwZWFsLCB0aGF0ICgxKSB0aGUgb3JhbCBhc3N1cmFuY2UgYW1vdW50ZWQgdG8gYW4gZW5mb3JjZWFibGUgY29udHJhY3R1YWwgcHJvbWlzZTsgKDIpIHRoZSBvcmFsIHByb21pc2Ugb3ZlcnJvZGUgdGhlIHByaW50ZWQgY29uZGl0aW9ucy4gKERpY3R1bSBvZiBMb3JkIERlbm5pbmcgTS5SLiBpbiBNZW5kZWxzc29obiB2IE5vcm1hbmQgWzE5NzBdIDEgUS5CLiAxNzcgYXBwbGllZCkuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiLAogICAgICAgICJEZW5uaW5nIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBOZWdsaWdlbmNlICZtZGFzaDsgQ29udHJhY3RzICZtZGFzaDsgTWlzcmVwcmVzZW50YXRpb24gJm1kYXNoOyBOZWdsaWdlbmNlIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogTmVnbGlnZW5jZSIsCiAgICAgICAgIkNvbnRyYWN0cyIsCiAgICAgICAgIk1pc3JlcHJlc2VudGF0aW9uIiwKICAgICAgICAiTmVnbGlnZW5jZSIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBIZWRsZXkgQnlybmUgJiBDbyBMdGQgdiBIZWxsZXIgJiBQYXJ0bmVycyIsCiAgICAgICAgIih3bCkgUm95c2NvdCBUcnVzdCB2IFJvZ2Vyc29uIiwKICAgICAgICAiKHdsKSBIb2xsaWVyIHYgUmFtYmxlciBNb3RvcnMgKEFNQykgTHRkIiwKICAgICAgICAiKHdsKSBQYW5raGFuaWEgdiBIYWNrbmV5IEJvcm91Z2ggQ291bmNpbCIsCiAgICAgICAgIih3bCkgTWNDdWxsb3VnaCB2IExhbmUgRm94IGFuZCBQYXJ0bmVycyBMdGQiLAogICAgICAgICIod2wpIElubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biBMdGQiLAogICAgICAgICIod2wpIEN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nICYgRHllaW5nIENvIiwKICAgICAgICAiKHdsKSBDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDb21wYW55IiwKICAgICAgICAiKHdsKSBHcmVhdCBQZWFjZSBTaGlwcGluZyBMdGQgdiBUc2F2bGlyaXMgKEludGVybmF0aW9uYWwpIEx0ZCIsCiAgICAgICAgIih3bCkgUmUgU2VsZWN0bW92ZSBMdGQiLAogICAgICAgICIod2wpIEdyYW4gR2VsYXRvIEx0ZCB2IFJpY2hjbGlmZiAoR3JvdXApIEx0ZCIsCiAgICAgICAgIih3bCkgSW50ZXJmb3RvIFBpY3R1cmUgTGlicmFyeSBMdGQgdiBTdGlsZXR0byBWaXN1YWwgUHJvZHVjdGlvbnMgTHRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTg5IiwKICAgICJZRUFSIjogIjE5NzYiLAogICAgIk5BTUUiOiAiKHdsKSBFc3NvIFBldHJvbGV1bSBDbyBMdGQgdiBNYXJkb24iLAogICAgIkNJVCI6ICJbMTk3Nl0gUUIgODAxIiwKICAgICJDSVRBVElPTiI6ICJFc3NvIFBldHJvbGV1bSBDbyBMdGQgdiBNYXJkb24gWzE5NzZdIFFCIDgwMSIsCiAgICAiSlVER0UiOiAiTG9yZCBEZW5uaW5nIE1SOyBPcm1yb2QgTEo7IFNoYXcgTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIigxKSB0aGUgc3RhdGVtZW50IGFzIHRvIHBvdGVudGlhbCB0aHJvdWdocHV0IHdhcyBhIGNvbnRyYWN0dWFsIHdhcnJhbnR5LCBhbmQgdGhlIHBsYWludGlmZnMgd2VyZSBsaWFibGUgZm9yIGRhbWFnZXMgZm9yIGl0cyBicmVhY2g7ICgyKSB0aGUgc3RhdGVtZW50IHdhcyBhIG5lZ2xpZ2VudCByZXByZXNlbnRhdGlvbiBtYWRlIGJ5IGEgcGFydHkgaG9sZGluZyBoaW1zZWxmIG91dCBhcyBoYXZpbmcgc3BlY2lhbCBleHBlcnRpc2UgaW4gY2lyY3Vtc3RhbmNlcyB3aGVyZSBhIGR1dHkgb2YgY2FyZSBleGlzdGVkIHRvIHRha2UgY2FyZSB0aGF0IGl0IHdhcyBjb3JyZWN0OyAoMykgdGhlIG1lYXN1cmUgb2YgZGFtYWdlIGluIGJvdGggY2FzZXMgd2FzIHRoZSBzYW1lLCBpLmUuIHdoYXQgRCBoYWQgbG9zdCBieSBiZWluZyBpbmR1Y2VkIHRvIGVudGVyIGludG8gdGhlIGNvbnRyYWN0LCB3aGljaCBzaG91bGQgYmUgYXNzZXNzZWQgb24gdGhlIHNhbWUgbGluZXMgYXMgZGFtYWdlcyBmb3IgcGVyc29uYWwgaW5qdXJpZXMgdG8gaW5jbHVkZSBlc3RpbWF0ZWQgbG9zcyBvZiBlYXJuaW5ncy4gKCBIZWRsZXkgQnlybmUgJmFtcDsgQ28gTHRkIHYgSGVsbGVyICZhbXA7IFBhcnRuZXJzIEx0ZCBbMTk2NF0gQS5DLiA0NjUgYXBwbGllZCBCaXNzZXQgdiBXaWxraW5zb24gWzE5MjddIEEuQy4gMTc3IGRpc3Rpbmd1aXNoZWQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkNyaXRpY2lzZWQiLAogICAgICAgICJEZW5uaW5nIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIlVLSEwiLAogICAgIkNBVEVHT1JZIjogIlNoaXBwaW5nIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IFNhbGUgb2YgR29vZHMgJm1kYXNoOyBDb250cmFjdCBUZXJtcyAmbWRhc2g7IFNhbGUgb2YgR29vZHMgJm1kYXNoOyBTaGlwcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiU2hpcHBpbmcgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogU2FsZSBvZiBHb29kcyIsCiAgICAgICAgIkNvbnRyYWN0IFRlcm1zIiwKICAgICAgICAiU2FsZSBvZiBHb29kcyIsCiAgICAgICAgIlNoaXBzIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIEthcnNhbGVzIChIYXJyb3cpIEx0ZCB2IFdhbGxpcyIsCiAgICAgICAgIih3bCkgT3NjYXIgQ2hlc3MgTHRkIHYgV2lsbGlhbXMiLAogICAgICAgICIod2wpIFdpbGxpYW0gU2luZGFsbCBwbGMgdiBDYW1icmlkZ2VzaGlyZSBDb3VudHkgQ291bmNpbCIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IEx0ZCIsCiAgICAgICAgIih3bCkgQnJpdGlzaCBDcmFuZSBIaXJlIENvcnBvcmF0aW9uIEx0ZCB2IElwc3dpY2ggUGxhbnQgSGlyZSBMdGQiLAogICAgICAgICIod2wpIFRyYW5zZmllbGQgU2hpcHBpbmcgSW5jIHYgTWVyY2F0b3IgU2hpcHBpbmcgSW5jIChUaGUgQWNoaWxsZWFzKSIsCiAgICAgICAgIih3bCkgUm95c2NvdCBUcnVzdCB2IFJvZ2Vyc29uIiwKICAgICAgICAiKHdsKSBDaGFydGJyb29rIEx0ZCB2IFBlcnNpbW1vbiBIb21lcyBMdGQiLAogICAgICAgICIod2wpIEludGVyZm90byBQaWN0dXJlIExpYnJhcnkgTHRkIHYgU3RpbGV0dG8gVmlzdWFsIFByb2R1Y3Rpb25zIEx0ZCIsCiAgICAgICAgIih3bCkgQWpheWkgKEVBKSB2IEJyaXNjb2UgKE5pZ2VyaWEpIEx0ZCIsCiAgICAgICAgIih3bCkgR2VvcmdlIE1pdGNoZWxsIChDaGVzdGVyaGFsbCkgTHRkIHYgRmlubmV5IExvY2sgU2VlZHMiLAogICAgICAgICIod2wpIFRla2RhdGEgSW50ZXJjb25uZWN0aW9ucyBMdGQgdiBBbXBoZW5vbCBMdGQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxOTAiLAogICAgIllFQVIiOiAiMTk3NiIsCiAgICAiTkFNRSI6ICIod2wpIFJlYXJkb24gU21pdGggTGluZSBMdGQgdiBZbmd2YXIgSGFuc2VuLVRhbmdlbiIsCiAgICAiQ0lUIjogIlsxOTc2XSAxIFdMUiA5ODkiLAogICAgIkNJVEFUSU9OIjogIlJlYXJkb24gU21pdGggTGluZSBMdGQgdiBZbmd2YXIgSGFuc2VuLVRhbmdlbiBbMTk3Nl0gMSBXTFIgOTg5IiwKICAgICJKVURHRSI6ICJMb3JkIFdpbGJlcmZvcmNlOyBWaXNjb3VudCBEaWxob3JuZTsgTG9yZCBTaW1vbiBvZiBHbGFpc2RhbGU7IExvcmQgS2lsYnJhbmRvbjsgTG9yZCBSdXNzZWxsIG9mIEtpbGxvd2VuIiwKICAgICJIRUxEIjogWwogICAgICAgICJzb21lIG9mIHRoZSBjYXNlcyBvbiBkZXNjcmlwdGlvbiBpbiBzYWxlIG9mIGdvb2RzIHdlcmUgZXhjZXNzaXZlbHkgdGVjaG5pY2FsOyB0aGV5IHNob3VsZCBub3QgYmUgZXh0ZW5kZWQgYW5kIHdlcmUgZHVlIGZvciBmcmVzaCBleGFtaW5hdGlvbi4gVGhlIGh1bGwgYW5kIHlhcmQgbnVtYmVyIGhhZCBubyBzcGVjaWFsIHNpZ25pZmljYW5jZSBhbmQgY291bGQgbm90IGJlIHRyZWF0ZWQgYXMgYSBjb25kaXRpb24uIEluIGFueSBldmVudCwgdGhlIHdvcmRzIHdlcmUgbmV2ZXIgcGFydCBvZiB0aGUgZGVzY3JpcHRpb24sIHRoZXkgd2VyZSB0aGVyZSBtZXJlbHkgdG8gaWRlbnRpZnkgdGhlIHZlc3NlbCwgd2hpY2ggd2FzIHRoZSBvbmUgY29udHJhY3RlZCBmb3IuIChEaWN0dW0gb2YgUm9za2lsbCBMLkouIGluIENlaGF2ZSBOViB2IEJyZW1lciBIYW5kZWxzIEdtYkggKFRoZSBIYW5zYSBOb3JkKSBbMTk3Nl0gUS5CLiA0NCBhcHByb3ZlZCkuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiVUtITCIsCiAgICAiQ0FURUdPUlkiOiAiQmFua2luZyBhbmQgRmluYW5jZSBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMgJm1kYXNoOyBBc3NpZ25tZW50ICZtZGFzaDsgSG9tZSBJbmNvbWUgUGxhbnMgJm1kYXNoOyBJbnRlcnByZXRhdGlvbiAmbWRhc2g7IEludmVzdG9ycyBDb21wZW5zYXRpb24gU2NoZW1lICZtZGFzaDsgUmVzY2lzc2lvbiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQmFua2luZyBhbmQgRmluYW5jZSBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMiLAogICAgICAgICJBc3NpZ25tZW50IiwKICAgICAgICAiSG9tZSBJbmNvbWUgUGxhbnMiLAogICAgICAgICJJbnRlcnByZXRhdGlvbiIsCiAgICAgICAgIkludmVzdG9ycyBDb21wZW5zYXRpb24gU2NoZW1lIiwKICAgICAgICAiUmVzY2lzc2lvbiIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBFbGlhc29uIHYgSGVuc2hhdyIsCiAgICAgICAgIih3bCkgR3JlYXQgUGVhY2UgU2hpcHBpbmcgTHRkIHYgVHNhdmxpcmlzIChJbnRlcm5hdGlvbmFsKSBMdGQiLAogICAgICAgICIod2wpIEJhbmsgb2YgQ3JlZGl0IGFuZCBDb21tZXJjZSBJbnRlcm5hdGlvbmFsIFNBIHYgQWxpIiwKICAgICAgICAiKHdsKSBBbHBlbnN0b3cgdiBSZWdhbGlhbiBQcm9wZXJ0aWVzIiwKICAgICAgICAiKHdsKSBBdHRvcm5leSBHZW5lcmFsIG9mIEJlbGl6ZSB2IEJlbGl6ZSBUZWxlY29tIEx0ZCIsCiAgICAgICAgIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIsCiAgICAgICAgIih3bCkgV2lsbGlhbSBTaW5kYWxsIHBsYyB2IENhbWJyaWRnZXNoaXJlIENvdW50eSBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBDaGFydGJyb29rIEx0ZCB2IFBlcnNpbW1vbiBIb21lcyBMdGQiLAogICAgICAgICIod2wpIERhdmlzIENvbnRyYWN0b3JzIEx0ZCB2IEZhcmVoYW0gVXJiYW4gRGlzdHJpY3QgQ291bmNpbCIsCiAgICAgICAgIih3bCkgRWFzdCB2IE1hdXJlciIsCiAgICAgICAgIih3bCkgRmlzaGVyIHYgQmVsbCIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IEx0ZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE5MSIsCiAgICAiWUVBUiI6ICIxOTk4IiwKICAgICJDT1VOU0VMIjogIkZvciBJQ1M6IEdlb2ZmcmV5IFZvcyBRLkMuLCBEZW5pcyBCcm9jayAoU29saWNpdG9yIEFkdm9jYXRlKSBhbmQgR3V5IE1vcnB1c3MuIEZvciBXQkJTOiBEYXZpZCBPbGl2ZXIgUS5DLiwgQW5kcmV3IEhvY2hoYXVzZXIgUS5DLiBhbmQgVmVybm9uIEZseW5uLiIsCiAgICAiTkFNRSI6ICIod2wpIEludmVzdG9ycycgQ29tcGVuc2F0aW9uIFNjaGVtZSBMdGQgdiBXZXN0IEJyb213aWNoIEJ1aWxkaW5nIFNvY2lldHkiLAogICAgIkNJVCI6ICJbMTk5OF0gMSBXTFIgODk2IiwKICAgICJDSVRBVElPTiI6ICJJbnZlc3RvcnMmIzgyMTc7IENvbXBlbnNhdGlvbiBTY2hlbWUgTHRkIHYgV2VzdCBCcm9td2ljaCBCdWlsZGluZyBTb2NpZXR5IFsxOTk4XSAxIFdMUiA4OTYiLAogICAgIkpVREdFIjogIkxvcmQgR29mZiBvZiBDaGlldmVsZXk7IExvcmQgTGxveWQgb2YgQmVyd2ljazsgTG9yZCBIb2ZmbWFubjsgTG9yZCBIb3BlIG9mIENyYWlnaGVhZDsgTG9yZCBDbHlkZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiYWxsb3dpbmcgdGhlIGFwcGVhbCwgdGhhdCBvbiB0aGUgcHJvcGVyIGNvbnN0cnVjdGlvbiBvZiB0aGUgY2xhaW0gZm9ybSwgcGFydGljdWxhcmx5IGluIHRoZSBsaWdodCBvZiB0aGUgYWNjb21wYW55aW5nIGV4cGxhbmF0b3J5IG5vdGUsIGl0IHdhcyBjbGVhciB0aGF0IGFsbCBjbGFpbXMgZm9yIGRhbWFnZXMgYW5kIGNvbXBlbnNhdGlvbiBieSB0aGUgaW52ZXN0b3JzIGhhZCBiZWVuIHZhbGlkbHkgYXNzaWduZWQgdG8gSUNTLCBzdWNoIHRoYXQgdGhlIGludmVzdG9ycyB3ZXJlIG5vdCBlbnRpdGxlZCB0byBtYWludGFpbiB0aGVpciBjbGFpbXMgYWdhaW5zdCBXLCBidXQgSUNTIGNvdWxkIHZhbGlkbHkgbWFpbnRhaW4gdGhlbS4gVGhlIGludmVzdG9ycyByZXRhaW5lZCB0aGUgcmlnaHQgdG8gc2VlayByZXNjaXNzaW9uIG9mIHRoZWlyIG1vcnRnYWdlcyBvbiB3aGF0ZXZlciB0ZXJtcyB0aGUgY291cnQgc2F3IGZpdCwgYXMgdGhlIHJpZ2h0IHRvIHNlZWsgcmVzY2lzc2lvbiB3YXMgbm90IGFzc2lnbmFibGUgYXMgYSBjaG9zZSBpbiBhY3Rpb24sIGJ1dCB3YXMgYSByaWdodCB3aGljaCBhdHRhY2hlZCB0byB0aGUgbW9ydGdhZ2VkIHByb3BlcnR5IGFuZCBjb3VsZCBvbmx5IGJlIGVuZm9yY2VkIGJ5IHRoZSBvd25lciBvZiB0aGUgcHJvcGVydHkuIFNpbWlsYXJseSwgdGhlIHBvc3NpYmlsaXR5IG9mIGFuIGFiYXRlbWVudCBvZiB0aGUgZGVidCBhcyBwYXJ0IG9mIHRoZSBwcm9jZXNzIG9mIHJlc2Npc3Npb24gd2FzIG5vdCBhbiBhc3NpZ25hYmxlIGNob3NlIGluIGFjdGlvbiwgYW5kIHNvIGRpZCBub3QgcmVkdWNlIHRoZSBzY29wZSBvZiB0aGUgY2hvc2UgaW4gYWN0aW9uIHdoaWNoIGhhZCBiZWVuIGFzc2lnbmVkIHRvIElDUy4gVGhlIGZhY3QgdGhhdCB0aGUgcXVhbnR1bSBvZiBkYW1hZ2VzIHJlY292ZXJlZCBieSBJQ1MgbWlnaHQgYmUgYWZmZWN0ZWQgYnkgd2hldGhlciBvciBub3QgdGhlIGludmVzdG9ycyBtYW5hZ2VkIHRvIHNlY3VyZSByZXNjaXNzaW9uIG9mIHRoZWlyIG1vcnRnYWdlcyBkaWQgbm90IG1lYW4gdGhhdCB0aGUgaW52ZXN0b3JzIGhhZCB0cmllZCB0byBhc3NpZ24gZGlmZmVyZW50IHJlbWVkaWVzIGluIHJlc3BlY3Qgb2YgdGhlIHNhbWUgY2hvc2UgaW4gYWN0aW9uLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIiwKICAgICAgICAiSG9mZm1hbm4iCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiVUtITCIsCiAgICAiQ0FURUdPUlkiOiAiU2FsZSBvZiBHb29kcyAmbWRhc2g7IENvbmRpdGlvbnMgJm1kYXNoOyBDb250cmFjdHMgb2YgU2FsZSAmbWRhc2g7IEV4Y2x1c2lvbiBDbGF1c2VzICZtZGFzaDsgTGltaXQgb2YgTGlhYmlsaXR5IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTYWxlIG9mIEdvb2RzIiwKICAgICAgICAiQ29uZGl0aW9ucyIsCiAgICAgICAgIkNvbnRyYWN0cyBvZiBTYWxlIiwKICAgICAgICAiRXhjbHVzaW9uIENsYXVzZXMiLAogICAgICAgICJMaW1pdCBvZiBMaWFiaWxpdHkiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgQ2l0eSBhbmQgV2VzdG1pbnN0ZXIgUHJvcGVydGllcyB2IE11ZGQiLAogICAgICAgICIod2wpIFdpbGxpYW0gU2luZGFsbCBwbGMgdiBDYW1icmlkZ2VzaGlyZSBDb3VudHkgQ291bmNpbCIsCiAgICAgICAgIih3bCkgTWNDdXRjaGVvbiB2IERhdmlkIE1hY0JyYXluZSBMdGQiLAogICAgICAgICIod2wpIEFscGVuc3RvdyB2IFJlZ2FsaWFuIFByb3BlcnRpZXMiLAogICAgICAgICIod2wpIFRpbm4gdiBIb2ZmbWFuICYgQ28iLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiLAogICAgICAgICIod2wpIFJlYXJkb24gU21pdGggTGluZSBMdGQgdiBZbmd2YXIgSGFuc2VuLVRhbmdlbiIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IiwKICAgICAgICAiKHdsKSBIb2xsaWVyIHYgUmFtYmxlciBNb3RvcnMgKEFNQykgTHRkIiwKICAgICAgICAiKHdsKSBTaG9ndW4gRmluYW5jZSBMdGQgdiBIdWRzb24iLAogICAgICAgICIod2wpIEogRXZhbnMgJiBTb24gKFBvcnRzbW91dGgpIHYgQW5kcmVhIE1lcnphcmlvIEx0ZCIsCiAgICAgICAgIih3bCkgTmljb2xlbmUgdiBTaW1tb25kcyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE5MiIsCiAgICAiWUVBUiI6ICIxOTgzIiwKICAgICJOQU1FIjogIih3bCkgR2VvcmdlIE1pdGNoZWxsIChDaGVzdGVyaGFsbCkgTHRkIHYgRmlubmV5IExvY2sgU2VlZHMiLAogICAgIkNJVCI6ICJbMTk4M10gMiBBQyA4MDMiLAogICAgIkNJVEFUSU9OIjogIkdlb3JnZSBNaXRjaGVsbCAoQ2hlc3RlcmhhbGwpIEx0ZCB2IEZpbm5leSBMb2NrIFNlZWRzIFsxOTgzXSAyIEFDIDgwMyIsCiAgICAiSlVER0UiOiAiTG9yZCBEaXBsb2NrOyBMb3JkIFNjYXJtYW47IExvcmQgUm9za2lsbDsgTG9yZCBCcmlkZ2Ugb2YgSGFyd2ljaDsgTG9yZCBCcmlnaHRtYW4iLAogICAgIkhFTEQiOiBbCiAgICAgICAgImRpc21pc3NpbmcgRCYjODIxNztzIGFwcGVhbCwgdGhhdCBhbHRob3VnaCB0aGUgY29uZGl0aW9ucyBkaWQgbGltaXQgdGhlaXIgbGlhYmlsaXR5IHVuZGVyIGNvbnRyYWN0LCByZWxpYW5jZSBvbiB0aGUgY29uZGl0aW9ucyB3b3VsZCBub3QgYmUgZmFpciBhbmQgcmVhc29uYWJsZSB3aXRoaW4gdGhlIG1lYW5pbmcgb2YgdGhlIFNhbGUgb2YgR29vZHMgQWN0IDE5Nzkgcy41NSAuICggQWlsc2EgQ3JhaWcgRmlzaGluZyBDbyBMdGQgdiBNYWx2ZXJuIEZpc2hpbmcgQ28gTHRkIChUaGUgU3RyYXRoYWxsYW4pIFsxOTgzXSAxIFcuTC5SLiA5NjQgYXBwbGllZCkuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiVUtITCIsCiAgICAiQ0FURUdPUlkiOiAiRW1wbG95bWVudCBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMgJm1kYXNoOyBBY2FzICZtZGFzaDsgQ29udHJhY3RzICZtZGFzaDsgSW50ZXJwcmV0YXRpb24gJm1kYXNoOyBSZWxlYXNlICZtZGFzaDsgVW5jb25zY2lvbmFiaWxpdHkiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkVtcGxveW1lbnQgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29udHJhY3RzIiwKICAgICAgICAiQWNhcyIsCiAgICAgICAgIkNvbnRyYWN0cyIsCiAgICAgICAgIkludGVycHJldGF0aW9uIiwKICAgICAgICAiUmVsZWFzZSIsCiAgICAgICAgIlVuY29uc2Npb25hYmlsaXR5IgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIEFscGVuc3RvdyB2IFJlZ2FsaWFuIFByb3BlcnRpZXMiLAogICAgICAgICIod2wpIFN1ZGJyb29rIFRyYWRpbmcgRXN0YXRlIEx0ZCB2IEVnZ2xldG9uIiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQiLAogICAgICAgICIod2wpIERyZXNkbmVyIEtsZWlud29ydCBMdGQgdiBBdHRyaWxsIiwKICAgICAgICAiKHdsKSBHcmVhdCBQZWFjZSBTaGlwcGluZyBMdGQgdiBUc2F2bGlyaXMgKEludGVybmF0aW9uYWwpIEx0ZCIsCiAgICAgICAgIih3bCkgQ2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueSIsCiAgICAgICAgIih3bCkgQnJpdGlzaCBTdGVlbCBDb3Jwb3JhdGlvbiB2IENsZXZlbGFuZCBCcmlkZ2UgYW5kIEVuZ2luZWVyaW5nIENvIEx0ZCIsCiAgICAgICAgIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIsCiAgICAgICAgIih3bCkgUGFua2hhbmlhIHYgSGFja25leSBCb3JvdWdoIENvdW5jaWwiLAogICAgICAgICIod2wpIElubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biBMdGQiLAogICAgICAgICIod2wpIEF0dG9ybmV5IEdlbmVyYWwgb2YgQmVsaXplIHYgQmVsaXplIFRlbGVjb20gTHRkIiwKICAgICAgICAiKHdsKSBDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyAmIER5ZWluZyBDbyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE5MyIsCiAgICAiWUVBUiI6ICIyMDAxIiwKICAgICJDT1VOU0VMIjogIkZvciBCQ0NJOiBDaHJpc3RvcGhlciBKZWFucyBRLkMuIGFuZCBEYW5pZWwgU3RpbGl0ei4gRm9yIE46IFJvYmluIEFsbGVuIFEuQy4sIElzYWFjIEphY29iIGFuZCBUaG9tYXMgQ29naGxpbi4iLAogICAgIk5BTUUiOiAiKHdsKSBCYW5rIG9mIENyZWRpdCBhbmQgQ29tbWVyY2UgSW50ZXJuYXRpb25hbCBTQSB2IEFsaSIsCiAgICAiQ0lUIjogIlsyMDAxXSBVS0hMIDgiLAogICAgIkNJVEFUSU9OIjogIkJhbmsgb2YgQ3JlZGl0IGFuZCBDb21tZXJjZSBJbnRlcm5hdGlvbmFsIFNBIHYgQWxpIFsyMDAxXSBVS0hMIDgiLAogICAgIkpVREdFIjogIkxvcmQgQmluZ2hhbSBvZiBDb3JuaGlsbDsgTG9yZCBCcm93bmUtV2lsa2luc29uOyBMb3JkIE5pY2hvbGxzIG9mIEJpcmtlbmhlYWQ7IExvcmQgSG9mZm1hbm47IExvcmQgQ2x5ZGUiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImRpc21pc3NpbmcgdGhlIGFwcGVhbCwgKExvcmQgSG9mZm1hbm4gZGlzc2VudGluZyksIHRoYXQgdGhlIGNsYXVzZSBjb3VsZCBub3QgYmUgcmVhZCB0byBtZWFuIGxpdGVyYWxseSB0aGF0IEJDQ0kgd2FzIHJlbGVhc2VkIGZyb20gYWxsIGZ1dHVyZSBsaWFiaWxpdHkuIEEgbG9uZyBsaW5lIG9mIGF1dGhvcml0eSBoYWQgc3RhdGVkIHRoYXQgaW4gdGhlIGFic2VuY2Ugb2YgZXhwcmVzcyBsYW5ndWFnZSwgdGhlIGNvdXJ0cyB3ZXJlIHJlbHVjdGFudCB0byBpbmZlciB0aGF0IGEgcGVyc29uIGhhZCBpbnRlbmRlZCB0byBzdXJyZW5kZXIgcmlnaHRzIGFuZCBjbGFpbXMgb2Ygd2hpY2ggaGUgd2FzIHVuYXdhcmUsIEdyYW50IHYgSm9obiBHcmFudCAmYW1wOyBTb25zIFB0eSBMdGQgKDE5NTQpIDkxIEMuTC5SLiAxMTIgY29uc2lkZXJlZC4gTmVpdGhlciBwYXJ0eSBjb3VsZCByZWFsaXN0aWNhbGx5IGhhdmUgYW50aWNpcGF0ZWQgTiYjODIxNztzIGNsYWltIGFuZCBvbiBhbiBlcXVpdGFibGUgY29uc3RydWN0aW9uIG9mIHRoZWlyIGFncmVlbWVudCwgaXQgd2FzIGltcG9zc2libGUgdG8gY29uY2x1ZGUsIGluIHRoZSBhYnNlbmNlIG9mIGFuIGV4cHJlc3MgaW5kaWNhdGlvbiwgdGhhdCB0aGV5IGhhZCBpbnRlbmRlZCB0aGUgYWdyZWVtZW50IHRvIGV4dGVuZCB0byB0aGUgcmVsZWFzZSBvZiByaWdodHMgd2hpY2ggdGhleSBjb3VsZCBuZXZlciBoYXZlIGNvbnRlbXBsYXRlZCBvciBmb3Jlc2Vlbi4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIsCiAgICAgICAgIkJpbmdoYW0iLAogICAgICAgICJIb2ZmbWFubiIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJVS0hMIiwKICAgICJDQVRFR09SWSI6ICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29uc3RydWN0aW9uIExhdyAmbWRhc2g7IEFkbWlzc2liaWxpdHkgJm1kYXNoOyBBZ3JlZW1lbnQgJm1kYXNoOyBDb25zdHJ1Y3Rpb24gQ29udHJhY3RzICZtZGFzaDsgQ29udHJhY3QgVGVybXMgJm1kYXNoOyBJbnRlcnByZXRhdGlvbiAmbWRhc2g7IE1pc3Rha2UgJm1kYXNoOyBOZWdvdGlhdGlvbnMgJm1kYXNoOyBSZWN0aWZpY2F0aW9uIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29uc3RydWN0aW9uIExhdyIsCiAgICAgICAgIkFkbWlzc2liaWxpdHkiLAogICAgICAgICJBZ3JlZW1lbnQiLAogICAgICAgICJDb25zdHJ1Y3Rpb24gQ29udHJhY3RzIiwKICAgICAgICAiQ29udHJhY3QgVGVybXMiLAogICAgICAgICJJbnRlcnByZXRhdGlvbiIsCiAgICAgICAgIk1pc3Rha2UiLAogICAgICAgICJOZWdvdGlhdGlvbnMiLAogICAgICAgICJSZWN0aWZpY2F0aW9uIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIEhvbGxpZXIgdiBSYW1ibGVyIE1vdG9ycyAoQU1DKSBMdGQiLAogICAgICAgICIod2wpIFRla2RhdGEgSW50ZXJjb25uZWN0aW9ucyBMdGQgdiBBbXBoZW5vbCBMdGQiLAogICAgICAgICIod2wpIEludGVyZm90byBQaWN0dXJlIExpYnJhcnkgTHRkIHYgU3RpbGV0dG8gVmlzdWFsIFByb2R1Y3Rpb25zIEx0ZCIsCiAgICAgICAgIih3bCkgQnJvZ2RlbiB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IiwKICAgICAgICAiKHdsKSBXYWxmb3JkIHYgTWlsZXMiLAogICAgICAgICIod2wpIEdyZWF0IFBlYWNlIFNoaXBwaW5nIEx0ZCB2IFRzYXZsaXJpcyAoSW50ZXJuYXRpb25hbCkgTHRkIiwKICAgICAgICAiKHdsKSBBbHBlbnN0b3cgdiBSZWdhbGlhbiBQcm9wZXJ0aWVzIiwKICAgICAgICAiKHdsKSBDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyAmIER5ZWluZyBDbyIsCiAgICAgICAgIih3bCkgQmFuayBvZiBDcmVkaXQgYW5kIENvbW1lcmNlIEludGVybmF0aW9uYWwgU0EgdiBBbGkiLAogICAgICAgICIod2wpIE9zY2FyIENoZXNzIEx0ZCB2IFdpbGxpYW1zIiwKICAgICAgICAiKHdsKSBBc3NvY2lhdGVkIEphcGFuZXNlIEJhbmsgKEludGVybmF0aW9uYWwpIEx0ZCB2IENyZWRpdCBkdSBOb3JkIiwKICAgICAgICAiKHdsKSBFbGlhc29uIHYgSGVuc2hhdyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE5NCIsCiAgICAiWUVBUiI6ICIyMDA5IiwKICAgICJDT1VOU0VMIjogIkZvciB0aGUgYXBwZWxsYW50OiBDaHJpc3RvcGhlciBOdWdlZSBRQywgSnVsaWFuIEdyZWVuaGlsbC4gRm9yIHRoZSByZXNwb25kZW50OiBSb2JlcnQgTWlsZXMgUUMsIFRpbW90aHkgTW9yc2hlYWQuIiwKICAgICJBQlNUUkFDVCI6IFsKICAgICAgICAiVGhlIGFwcGVsbGFudCBkZXZlbG9wZXIgKFApIGFwcGVhbGVkIGFnYWluc3QgYSBkZWNpc2lvbiAoIFsyMDA4XSBFV0NBIENpdiAxODMsIFsyMDA4XSAyIEFsbCBFLlIuIChDb21tKSAzODcgKSBpbiBmYXZvdXIgb2YgdGhlIHJlc3BvbmRlbnQgKEMpIGNvbmNlcm5pbmcgdGhlIGludGVycHJldGF0aW9uIG9mIGFuIGFncmVlbWVudCB0byBkZXZlbG9wIEMmIzgyMTc7cyBsYW5kLiIsCiAgICAgICAgIlVuZGVyIHRoZSBhZ3JlZW1lbnQgUCB3YXMgdG8gb2J0YWluIHBsYW5uaW5nIHBlcm1pc3Npb24sIGNvbnN0cnVjdCBhIGRldmVsb3BtZW50IG9uIHRoZSBzaXRlIGFuZCB0aGVuIHNlbGwgdGhlIHByb3BlcnRpZXMuIFRoZSBwcmljZSBwYXlhYmxlIGJ5IFAgdW5kZXIgdGhlIGFncmVlbWVudCBpbmNsdWRlZCBhbiAmIzgyMjA7QWRkaXRpb25hbCBSZXNpZGVudGlhbCBQYXltZW50JiM4MjIxOyAoQVJQKSBkZWZpbmVkIGFzICYjODIyMDsyMy40JSBvZiB0aGUgcHJpY2UgYWNoaWV2ZWQgZm9yIGVhY2ggUmVzaWRlbnRpYWwgVW5pdCBpbiBleGNlc3Mgb2YgdGhlIE1pbmltdW0gR3VhcmFudGVlZCBSZXNpZGVudGlhbCBVbml0IFZhbHVlIGxlc3MgdGhlIENvc3RzIGFuZCBJbmNlbnRpdmVzJiM4MjIxOy4gVGhlIGp1ZGdlIGF0IGZpcnN0IGluc3RhbmNlIGFuZCB0aGUgQ291cnQgb2YgQXBwZWFsIGFncmVlZCB3aXRoIEMmIzgyMTc7cyBpbnRlcnByZXRhdGlvbiBvZiB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgQVJQLiIsCiAgICAgICAgIlAmIzgyMTc7cyBhcmd1bWVudCwgaWYgaXQgZmFpbGVkIG9uIHRoZSBjb25zdHJ1Y3Rpb24gaXNzdWUsIHdhcyB0aGF0IHRoZSBIb3VzZSBzaG91bGQgdGFrZSBpbnRvIGFjY291bnQgdGhlIHByZS1jb250cmFjdHVhbCBuZWdvdGlhdGlvbnMuIFAgc3VibWl0dGVkIHRoYXQgdGhlIHJ1bGUgaW4gUHJlbm4gdiBTaW1tb25kcyBbMTk3MV0gMSBXLkwuUi4gMTM4MSB0aGF0IHByZS1jb250cmFjdHVhbCBuZWdvdGlhdGlvbnMgd2VyZSBpbmFkbWlzc2libGUgaW4gY29uc3RydWluZyBhIGNvbnRyYWN0IHdhcyBpbGxvZ2ljYWwgYW5kIHByZXZlbnRlZCBhIGNvdXJ0IGZyb20gcHV0dGluZyBpdHNlbGYgaW4gdGhlIHBvc2l0aW9uIG9mIHRoZSBwYXJ0aWVzIGFuZCBhc2NlcnRhaW5pbmcgdGhlaXIgdHJ1ZSBpbnRlbnQuIFAgYWxzbyBzdWJtaXR0ZWQgdGhhdCB0aGUganVkZ2UgYW5kIHRoZSBDb3VydCBvZiBBcHBlYWwgaGFkIG1pc3VuZGVyc3Rvb2QgdGhlIHByaW5jaXBsZXMgb24gd2hpY2ggcmVjdGlmaWNhdGlvbiBjb3VsZCBiZSBkZWNyZWVkLiIKICAgIF0sCiAgICAiTkFNRSI6ICIod2wpIENoYXJ0YnJvb2sgTHRkIHYgUGVyc2ltbW9uIEhvbWVzIEx0ZCIsCiAgICAiQ0lUIjogIlsyMDA5XSBVS0hMIDM4IiwKICAgICJDSVRBVElPTiI6ICJDaGFydGJyb29rIEx0ZCB2IFBlcnNpbW1vbiBIb21lcyBMdGQgWzIwMDldIFVLSEwgMzgiLAogICAgIkpVREdFIjogIkxvcmQgSG9wZSBvZiBDcmFpZ2hlYWQ7IExvcmQgSG9mZm1hbm47IExvcmQgUm9kZ2VyIG9mIEVhcmxzZmVycnk7IExvcmQgV2Fsa2VyIG9mIEdlc3Rpbmd0aG9ycGU7IEJhcm9uZXNzIEhhbGUgb2YgUmljaG1vbmQiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFwcGVhbCBhbGxvd2VkLiIsCiAgICAgICAgIigxKSBMYXdyZW5jZSBDb2xsaW5zIEwuSi4gYmVsb3cgaGFkIHJpZ2h0bHkgY29uY2x1ZGVkIHRoYXQgUCBoYWQgZGVtb25zdHJhdGVkIHRoYXQgc29tZXRoaW5nIGhhZCBnb25lIHdyb25nIHdpdGggdGhlIGxhbmd1YWdlIGluIHRoZSBjb250cmFjdC4gVG8gaW50ZXJwcmV0IHRoZSBkZWZpbml0aW9uIG9mIHRoZSBBUlAgaW4gYWNjb3JkYW5jZSB3aXRoIG9yZGluYXJ5IHJ1bGVzIG9mIHN5bnRheCBtYWRlIG5vIGNvbW1lcmNpYWwgc2Vuc2UuIFRoZSBBUlAgaGFkIHRvIG1lYW4gdGhlIGFtb3VudCBieSB3aGljaCAyMy40IHBlciBjZW50IG9mIHRoZSBhY2hpZXZlZCBwcmljZSBleGNlZWRlZCB0aGUgbWluaW11bSBndWFyYW50ZWVkIHJlc2lkZW50aWFsIHVuaXQgdmFsdWUuIFRoZXJlIHdhcyBubyBsaW1pdCB0byB0aGUgYW1vdW50IG9mICYjODIyMDtyZWQgaW5rJiM4MjIxOyBvciB2ZXJiYWwgcmVhcnJhbmdlbWVudCBvciBjb3JyZWN0aW9uIHdoaWNoIHRoZSBjb3VydCB3YXMgYWxsb3dlZCB3aGVuIGRldGVybWluaW5nIHdoZXRoZXIgdGhlcmUgd2FzIGEgY2xlYXIgbWlzdGFrZS4gQWxsIHRoYXQgd2FzIHJlcXVpcmVkIHdhcyB0aGF0IGl0IHNob3VsZCBiZSBjbGVhciB0aGF0IHNvbWV0aGluZyBoYWQgZ29uZSB3cm9uZyB3aXRoIHRoZSBsYW5ndWFnZSBhbmQgdGhhdCBpdCBzaG91bGQgYmUgY2xlYXIgd2hhdCBhIHJlYXNvbmFibGUgcGVyc29uIHdvdWxkIGhhdmUgdW5kZXJzdG9vZCB0aGUgcGFydGllcyB0byBoYXZlIG1lYW50LCBJbnZlc3RvcnMgQ29tcGVuc2F0aW9uIFNjaGVtZSBMdGQgdiBXZXN0IEJyb213aWNoIEJ1aWxkaW5nIFNvY2lldHkgKE5vLjEpIFsxOTk4XSAxIFcuTC5SLiA4OTYgLCBFYXN0IHYgUGFudGlsZXMgKFBsYW50IEhpcmUpIFsxOTgyXSAyIEUuRy5MLlIuIDExMSBhbmQgS1BNRyB2IE5ldHdvcmsgUmFpbCBJbmZyYXN0cnVjdHVyZSBMdGQgWzIwMDddIEVXQ0EgQ2l2IDM2MywgWzIwMDddIEJ1cy4gTC5SLiAxMzM2IGFwcGxpZWQuIEJvdGggb2YgdGhvc2UgcmVxdWlyZW1lbnRzIHdlcmUgc2F0aXNmaWVkIGluIHRoZSBpbnN0YW50IGNhc2UuICgyKSAoT2JpdGVyKSAoYSkgSXQgd291bGQgbm90IGJlIGluY29uc2lzdGVudCB3aXRoIHRoZSBFbmdsaXNoIG9iamVjdGl2ZSB0aGVvcnkgb2YgY29udHJhY3R1YWwgaW50ZXJwcmV0YXRpb24gdG8gYWRtaXQgZXZpZGVuY2Ugb2YgcHJldmlvdXMgY29tbXVuaWNhdGlvbnMgYmV0d2VlbiB0aGUgcGFydGllcyBhcyBwYXJ0IG9mIHRoZSBiYWNrZ3JvdW5kIHdoaWNoIG1pZ2h0IGNhc3QgbGlnaHQgb24gd2hhdCB0aGV5IG1lYW50IGJ5IHRoZSBsYW5ndWFnZSB0aGV5IHVzZWQuIFByaW1hIGZhY2llLCBwcmUtY29udHJhY3R1YWwgbmVnb3RpYXRpb25zIHdlcmUgcG90ZW50aWFsbHkgcmVsZXZhbnQgYmFja2dyb3VuZCwgQmFuayBvZiBDcmVkaXQgYW5kIENvbW1lcmNlIEludGVybmF0aW9uYWwgU0EgKEluIExpcXVpZGF0aW9uKSB2IEFsaSAoTm8uMSkgWzIwMDFdIFVLSEwgOCwgWzIwMDJdIDEgQS5DLiAyNTEgY29uc2lkZXJlZC4gSG93ZXZlciwgc3VjaCBtYXRlcmlhbCB3b3VsZCB1c3VhbGx5IGJlIGluYWRtaXNzaWJsZSBiZWNhdXNlIGl0IHdhcyBpcnJlbGV2YW50IHRvIHRoZSBxdWVzdGlvbiBiZWZvcmUgdGhlIGNvdXJ0LCBuYW1lbHkgd2hhdCB0aGUgcGFydGllcyB3b3VsZCByZWFzb25hYmx5IGJlIHRha2VuIHRvIGhhdmUgbWVhbnQgYnkgdGhlIGxhbmd1YWdlIGV2ZW50dWFsbHkgdXNlZCBpbiB0aGUgYWdyZWVtZW50LiBUaGVyZSB3YXMgbm8gY2xlYXJseSBlc3RhYmxpc2hlZCBjYXNlIGZvciBkZXBhcnRpbmcgZnJvbSB0aGUgZXhjbHVzaW9uYXJ5IHJ1bGUsIGV2ZW4gdGhvdWdoIGl0IG1pZ2h0IG1lYW4gdGhhdCBpbiBzb21lIGNhc2VzIHBhcnRpZXMgd291bGQgYmUgYm91bmQgYnkgYSBjb250cmFjdCBpbiB0ZXJtcyB3aGljaCwgdXBvbiBhIGZ1bGwgaW52ZXN0aWdhdGlvbiBvZiB0aGUgY291cnNlIG9mIG5lZ290aWF0aW9ucywgYSByZWFzb25hYmxlIG9ic2VydmVyIHdvdWxkIG5vdCBoYXZlIHRha2VuIHRoZW0gdG8gaGF2ZSBpbnRlbmRlZCwgUHJlbm4gY29uc2lkZXJlZC4gVGhlcmUgd2FzIGEgcG93ZXIgdG8gZGVwYXJ0IGZyb20gdGhlIHJ1bGUsIGJ1dCB0aGF0IHBvd2VyIHdhcyBvbmx5IGludGVuZGVkIHRvIGJlIGFwcGxpZWQgaW4gYSBzbWFsbCBudW1iZXIgb2YgY2FzZXMgaW4gd2hpY2ggcHJldmlvdXMgZGVjaXNpb25zIG9mIHRoZSBIb3VzZSB3ZXJlIHRob3VnaHQgdG8gYmUgaW1wZWRpbmcgdGhlIHByb3BlciBkZXZlbG9wbWVudCBvZiB0aGUgbGF3IG9yIHRvIGhhdmUgbGVkIHRvIHJlc3VsdHMgd2hpY2ggd2VyZSB1bmp1c3Qgb3IgY29udHJhcnkgdG8gcHVibGljIHBvbGljeSwgSm9uZXMgdiBTZWNyZXRhcnkgb2YgU3RhdGUgZm9yIFNvY2lhbCBTZXJ2aWNlcyBbMTk3Ml0gQS5DLiA5NDQgY29uc2lkZXJlZDsgKGIpIEV2aWRlbmNlIGNvdWxkIGJlIGFkZHVjZWQgdGhhdCB0aGUgcGFydGllcyB0byBhIGNvbnRyYWN0IGhhYml0dWFsbHkgdXNlZCB3b3JkcyBpbiBhbiB1bmNvbnZlbnRpb25hbCBzZW5zZSBpbiBvcmRlciB0byBzdXBwb3J0IGFuIGFyZ3VtZW50IHRoYXQgd29yZHMgaW4gdGhlIGNvbnRyYWN0IHNob3VsZCBiZWFyIGEgc2ltaWxhciB1bmNvbnZlbnRpb25hbCBtZWFuaW5nICh0aGUgJiM4MjIwO3ByaXZhdGUgZGljdGlvbmFyeSYjODIyMTsgcHJpbmNpcGxlKS4gSG93ZXZlciwgdGhlIGRlY2lzaW9uIGluIFBhcnRlbnJlZWRlcmVpIE1TIEthcmVuIE9sdG1hbm4gdiBTY2Fyc2RhbGUgU2hpcHBpbmcgQ28gKFRoZSBLYXJlbiBPbHRtYW5uKSBbMTk3Nl0gMiBMbG95ZCYjODIxNztzIFJlcC4gNzA4ICwgd2hpY2ggaW52b2x2ZWQgYSBjaG9pY2UgYmV0d2VlbiB0d28gcGVyZmVjdGx5IGNvbnZlbnRpb25hbCBtZWFuaW5ncyBvZiB0aGUgd29yZCAmIzgyMjA7YWZ0ZXImIzgyMjE7LCB3YXMgYW4gaWxsZWdpdGltYXRlIGV4dGVuc2lvbiBvZiB0aGUgJiM4MjIwO3ByaXZhdGUgZGljdGlvbmFyeSYjODIyMTsgcHJpbmNpcGxlIHdoaWNoLCB0YWtlbiB0byBpdHMgbG9naWNhbCBjb25jbHVzaW9uLCB3b3VsZCBkZXN0cm95IHRoZSBleGNsdXNpb25hcnkgcnVsZSBhbmQgYW55IGFkdmFudGFnZXMgd2hpY2ggaXQgbWlnaHQgaGF2ZSwgVGhlIEthcmVuIE9sdG1hbm4gY29uc2lkZXJlZC4gKDMpIChPYml0ZXIpIEpvc2NlbHluZSB2IE5pc3NlbiBbMTk3MF0gMiBRLkIuIDg2IGV4dGVuZGVkIHRoZSBhdmFpbGFiaWxpdHkgb2YgcmVjdGlmaWNhdGlvbiB0byBjYXNlcyB3aGVyZSB0aGVyZSBoYWQgbm90IGJlZW4gYW55IGVuZm9yY2VhYmxlIHByaW9yIGFncmVlbWVudCwgSm9zY2VseW5lIGNvbnNpZGVyZWQuIEluIGNvbnNpZGVyaW5nIHJlY3RpZmljYXRpb24sIHRoZSBxdWVzdGlvbiB3YXMgd2hhdCBhbiBvYmplY3RpdmUgb2JzZXJ2ZXIgd291bGQgaGF2ZSB0aG91Z2h0IHRoZSBwYXJ0aWVzJiM4MjE3OyBpbnRlbnRpb25zIHdlcmUsIEZyZWRlcmljayBFIFJvc2UgKExvbmRvbikgTHRkIHYgV2lsbGlhbSBIIFBpbSBKdW5pb3IgJmFtcDsgQ28gTHRkIFsxOTUzXSAyIFEuQi4gNDUwIGFuZCBFdGFibGlzc2VtZW50cyBMZXZ5IChHZW9yZ2VzIGV0IFBhdWwpIHYgQWRkZXJsZXkgTmF2aWdhdGlvbiBDbyBQYW5hbWEgU0EgKFRoZSBPbHltcGljIFByaWRlKSBbMTk4MF0gMiBMbG95ZCYjODIxNztzIFJlcC4gNjcgY29uc2lkZXJlZC4gRXZpZGVuY2UgYXMgdG8gd2hhdCB0ZXJtcyBhIHBhcnR5IHVuZGVyc3Rvb2QgdG8gaGF2ZSBiZWVuIGFncmVlZCBjb3VsZCBiZSBzaWduaWZpY2FudCBpbiBhIGNhc2Ugd2hlcmUgdGhlIHByaW9yIGNvbnNlbnN1cyB3YXMgYmFzZWQgb24gb3JhbCBleGNoYW5nZXMgb3IgY29uZHVjdCwgYnV0IHdoZXJlIHRoZSBwcmlvciBjb25zZW5zdXMgd2FzIGV4cHJlc3NlZCBlbnRpcmVseSBpbiB3cml0aW5nIHN1Y2ggZXZpZGVuY2Ugd2FzIGxpa2VseSB0byBjYXJyeSB2ZXJ5IGxpdHRsZSB3ZWlnaHQsIENhcm1pY2hhZWwgdiBOYXRpb25hbCBQb3dlciBQbGMgWzE5OTldIDEgVy5MLlIuIDIwNDIgYW5kIEdlb3JnZSBDb2hlbiBTb25zICZhbXA7IENvIEx0ZCB2IERvY2tzIGFuZCBJbmxhbmQgV2F0ZXJ3YXlzIEV4ZWN1dGl2ZSAoMTk1MCkgODQgTGwuIEwuIFJlcC4gOTcgY29uc2lkZXJlZC4gSG93ZXZlciwgaXQgd291bGQgbm90IGJlIGluYWRtaXNzaWJsZS4gSW4gdGhlIGluc3RhbnQgY2FzZSwgb24gdGhlIGFzc3VtcHRpb24gdGhhdCB0aGUganVkZ2Ugd2FzIHJpZ2h0IGluIGhpcyBjb25zdHJ1Y3Rpb24gb2YgdGhlIEFSUCBkZWZpbml0aW9uLCBib3RoIHBhcnRpZXMgd2VyZSBtaXN0YWtlbiBpbiB0aGlua2luZyB0aGF0IGl0IHJlZmxlY3RlZCB0aGVpciBwcmlvciBjb25zZW5zdXMsIHNvIFAgd2FzIGVudGl0bGVkIHRvIHJlY3RpZmljYXRpb24uIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiLAogICAgICAgICJIYWxlIiwKICAgICAgICAiSG9mZm1hbm4iCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiVUtQQyIsCiAgICAiQ0FURUdPUlkiOiAiQ29udHJhY3RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbXBhbnkgTGF3ICZtZGFzaDsgQXJ0aWNsZXMgb2YgQXNzb2NpYXRpb24gJm1kYXNoOyBCZWxpemUgJm1kYXNoOyBEaXJlY3RvcnMgJm1kYXNoOyBJbXBsaWVkIFRlcm1zICZtZGFzaDsgSW50ZXJwcmV0YXRpb24gJm1kYXNoOyBWYWNhdGlvbiBvZiBPZmZpY2UiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnRyYWN0cyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb21wYW55IExhdyIsCiAgICAgICAgIkFydGljbGVzIG9mIEFzc29jaWF0aW9uIiwKICAgICAgICAiQmVsaXplIiwKICAgICAgICAiRGlyZWN0b3JzIiwKICAgICAgICAiSW1wbGllZCBUZXJtcyIsCiAgICAgICAgIkludGVycHJldGF0aW9uIiwKICAgICAgICAiVmFjYXRpb24gb2YgT2ZmaWNlIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIEFscGVuc3RvdyB2IFJlZ2FsaWFuIFByb3BlcnRpZXMiLAogICAgICAgICIod2wpIENyb3NzbGV5IHYgRmFpdGhmdWwgJiBHb3VsZCBIb2xkaW5ncyIsCiAgICAgICAgIih3bCkgQ2hhcnRicm9vayBMdGQgdiBQZXJzaW1tb24gSG9tZXMgTHRkIiwKICAgICAgICAiKHdsKSBTdWRicm9vayBUcmFkaW5nIEVzdGF0ZSBMdGQgdiBFZ2dsZXRvbiIsCiAgICAgICAgIih3bCkgU2NhbGx5IHYgU291dGhlcm4gSGVhbHRoIGFuZCBTb2NpYWwgU2VydmljZXMgQm9hcmQiLAogICAgICAgICIod2wpIEludmVzdG9ycycgQ29tcGVuc2F0aW9uIFNjaGVtZSBMdGQgdiBXZXN0IEJyb213aWNoIEJ1aWxkaW5nIFNvY2lldHkiLAogICAgICAgICIod2wpIEhvbGxpZXIgdiBSYW1ibGVyIE1vdG9ycyAoQU1DKSBMdGQiLAogICAgICAgICIod2wpIEthcnNhbGVzIChIYXJyb3cpIEx0ZCB2IFdhbGxpcyIsCiAgICAgICAgIih3bCkgQmxhY2twb29sIGFuZCBGeWxkZSBBZXJvY2x1YiBMdGQgdiBCbGFja3Bvb2wgQm9yb3VnaCBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBFbGlhc29uIHYgSGVuc2hhdyIsCiAgICAgICAgIih3bCkgQmFuayBvZiBDcmVkaXQgYW5kIENvbW1lcmNlIEludGVybmF0aW9uYWwgU0EgdiBBbGkiLAogICAgICAgICIod2wpIFNjaGF3ZWwgdiBSZWFkZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE5NSIsCiAgICAiWUVBUiI6ICIyMDA5IiwKICAgICJDT1VOU0VMIjogIkZvciB0aGUgYXBwZWxsYW50czogUmljaGFyZCBTbm93ZGVuIFFDLCBFYW1vbiBDb3VydGVuYXkgU0MgKEJlbGl6ZSBCYXIpLiBGb3IgdGhlIHJlc3BvbmRlbnRzOiBEYXZpZCBPbGl2ZXIgUUMuIiwKICAgICJBQlNUUkFDVCI6IFsKICAgICAgICAiVGhlIGFwcGVsbGFudHMgKFgpIGFwcGVhbGVkIGFnYWluc3QgYSBkZWNpc2lvbiBvZiB0aGUgQ291cnQgb2YgQXBwZWFsIG9mIEJlbGl6ZSBvbiB0aGUgY29uc3RydWN0aW9uIG9mIGFuIGFydGljbGUgaW4gdGhlIGFydGljbGVzIG9mIGFzc29jaWF0aW9uIG9mIGEgY29tcGFueSAoQikgd2hpY2ggaGFkIGJlZW4gZm9ybWVkIHRvIHRha2Ugb3ZlciB0aGUgdW5kZXJ0YWtpbmcgb2YgdGhlIEJlbGl6ZSBUZWxlY29tbXVuaWNhdGlvbnMgQXV0aG9yaXR5LiIsCiAgICAgICAgIlRoZSBhcnRpY2xlIHByb3ZpZGVkIGFzIGZvbGxvd3M6ICYjODIyMDtUaGUgaG9sZGVyIG9mIHRoZSBTcGVjaWFsIFNoYXJlIHNoYWxsIHNvIGxvbmcgYXMgaXQgaXMgdGhlIGhvbGRlciBvZiBDIE9yZGluYXJ5IHNoYXJlcyBhbW91bnRpbmcgdG8gMzcuNSUgb3IgbW9yZSBvZiB0aGUgaXNzdWVkIHNoYXJlIGNhcGl0YWwgb2YgdGhlIENvbXBhbnkgYmUgZW50aXRsZWQgYXQgYW55IHRpbWUgYnkgd3JpdHRlbiBub3RpY2Ugc2VydmVkIHVwb24gdGhlIENvbXBhbnkgdG8gYXBwb2ludCB0d28gb2YgdGhlIERpcmVjdG9ycyBkZXNpZ25hdGVkIEMgRGlyZWN0b3JzIGFuZCBieSBsaWtlIG5vdGljZSB0byByZW1vdmUgYW55IERpcmVjdG9yIHNvIGFwcG9pbnRlZCBhbmQgYXBwb2ludCBhbm90aGVyIGluIGhpcyBvciBoZXIgcGxhY2UmIzgyMjE7LiBUaGUgZmlyc3QgcmVzcG9uZGVudCAoUikgYWNxdWlyZWQgZnJvbSB0aGUgQmVsaXplIEdvdmVybm1lbnQgdGhlIHNwZWNpYWwgc2hhcmUgcmVmZXJyZWQgdG8gaW4gdGhlIGFydGljbGUgYW5kIGEgbWFqb3JpdHkgb2YgdGhlIGlzc3VlZCBzaGFyZSBjYXBpdGFsLiBJdCBhcHBvaW50ZWQgZWlnaHQgZGlyZWN0b3JzLCBpbmNsdWRpbmcgdHdvIHNwZWNpYWwgQyBkaXJlY3RvcnMuIFIgcGxlZGdlZCB0aGUgb3JkaW5hcnkgc2hhcmVzIHRvIHRoZSBHb3Zlcm5tZW50IHRvIHNlY3VyZSBib3Jyb3dpbmdzIHdoaWNoIGhhZCBmaW5hbmNlZCB0aGUgcHVyY2hhc2UuIFdpdGhpbiBsZXNzIHRoYW4gYSB5ZWFyLCBob3dldmVyLCBpdCBkZWZhdWx0ZWQgb24gaXRzIG9ibGlnYXRpb25zLiBQdXJzdWFudCB0byB0aGUgcGxlZGdlIGFncmVlbWVudCwgdGhlIEdvdmVybm1lbnQgdG9vayBiYWNrIGEgc3Vic3RhbnRpYWwgbnVtYmVyIG9mIHRoZSBvcmRpbmFyeSBzaGFyZXMuIFRoZSByZXN1bHQgd2FzIHRoYXQgUiB3YXMgbGVmdCB3aXRoIHRoZSBzcGVjaWFsIHNoYXJlIGFuZCBDIHNoYXJlcyBhbW91bnRpbmcgdG8gbGVzcyB0aGFuIDM3LjUgcGVyIGNlbnQgb2YgdGhlIGlzc3VlZCBzaGFyZSBjYXBpdGFsLiBUaGUgcXVlc3Rpb24gd2hpY2ggdGhlbiBhcm9zZSB3YXMgd2hldGhlciB0aGUgdHdvIHNwZWNpYWwgQyBkaXJlY3RvcnMgYXBwb2ludGVkIGJ5IFIgcmVtYWluZWQgbWVtYmVycyBvZiB0aGUgYm9hcmQuIFVuZGVyIHRoZSBhcnRpY2xlcywgdGhlIG9ubHkgcGVyc29uIHdobyBoYWQgdGhlIHBvd2VyIHRvIHJlbW92ZSB0aGVtIHdhcyB0aGUgcGVyc29uIHdobyB3b3VsZCBoYXZlIGhhZCB0aGUgcG93ZXIgdG8gYXBwb2ludCB0aGVtLCBuYW1lbHkgYSBzcGVjaWFsIHNoYXJlaG9sZGVyIGhvbGRpbmcgQyBzaGFyZXMgYW1vdW50aW5nIHRvIDM3LjUgcGVyIGNlbnQgb2YgdGhlIGlzc3VlZCBzaGFyZSBjYXBpdGFsLiBCdXQgdGhlIHJlc3VsdCBvZiBSJiM4MjE3O3MgZGVmYXVsdCB3YXMgdGhhdCBubyBzdWNoIHBlcnNvbiBleGlzdGVkLCBub3Igd2FzIHRoZXJlIGFueSBleHByZXNzIHByb3Zpc2lvbiBpbiB0aGUgYXJ0aWNsZXMgdGhhdCBpbiBzdWNoIGNpcmN1bXN0YW5jZXMgYSBzcGVjaWFsIEMgZGlyZWN0b3IgdmFjYXRlZCBvZmZpY2UuIFRoZSBDb3VydCBvZiBBcHBlYWwgcmVqZWN0ZWQgWCYjODIxNztzIGNvbnRlbnRpb24gdGhhdCB0aGUgYXJ0aWNsZXMgc2hvdWxkIGJlIGNvbnN0cnVlZCBhcyBwcm92aWRpbmcgYnkgaW1wbGljYXRpb24gdGhhdCBhIGRpcmVjdG9yIGFwcG9pbnRlZCBieSB2aXJ0dWUgb2YgYSBzcGVjaWZpZWQgc2hhcmVob2xkaW5nIHdvdWxkIHZhY2F0ZSBoaXMgb2ZmaWNlIGlmIHRoZXJlIHdhcyBubyBsb25nZXIgYW55IGhvbGRlciBvZiBzdWNoIGEgc2hhcmVob2xkaW5nLiIKICAgIF0sCiAgICAiTkFNRSI6ICIod2wpIEF0dG9ybmV5IEdlbmVyYWwgb2YgQmVsaXplIHYgQmVsaXplIFRlbGVjb20gTHRkIiwKICAgICJDSVQiOiAiWzIwMDldIFVLUEMgMTAiLAogICAgIkNJVEFUSU9OIjogIkF0dG9ybmV5IEdlbmVyYWwgb2YgQmVsaXplIHYgQmVsaXplIFRlbGVjb20gTHRkIFsyMDA5XSBVS1BDIDEwIiwKICAgICJKVURHRSI6ICJMb3JkIEhvZmZtYW5uOyBMb3JkIFJvZGdlciBvZiBFYXJsc2ZlcnJ5OyBCYXJvbmVzcyBIYWxlIG9mIFJpY2htb25kOyBMb3JkIENhcnN3ZWxsOyBMb3JkIEJyb3duIG9mIEVhdG9uLXVuZGVyLUhleXdvb2QiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFwcGVhbCBhbGxvd2VkLiIsCiAgICAgICAgIigxKSBJdCB3YXMgYXBwcm9wcmlhdGUgdG8gbWFrZSBzb21lIGdlbmVyYWwgb2JzZXJ2YXRpb25zIGFib3V0IHRoZSBwcm9jZXNzIG9mIGltcGx5aW5nIHRlcm1zIGludG8gYSBjb250cmFjdC4gVGhlIHByb3Bvc2l0aW9uIHRoYXQgdGhlIGltcGxpY2F0aW9uIG9mIGEgdGVybSB3YXMgYW4gZXhlcmNpc2UgaW4gdGhlIGNvbnN0cnVjdGlvbiBvZiB0aGUgcmVsZXZhbnQgaW5zdHJ1bWVudCBhcyBhIHdob2xlIHdhcyBub3Qgb25seSBhIG1hdHRlciBvZiBsb2dpYyAoYXMgYSBjb3VydCBoYWQgbm8gcG93ZXIgdG8gYWx0ZXIgd2hhdCB0aGUgaW5zdHJ1bWVudCBtZWFudCkgYnV0IGFsc28gd2VsbCBzdXBwb3J0ZWQgYnkgYXV0aG9yaXR5LiBJbiBldmVyeSBjYXNlIGluIHdoaWNoIGl0IHdhcyBzYWlkIHRoYXQgc29tZSBwcm92aXNpb24gb3VnaHQgdG8gYmUgaW1wbGllZCBpbiBhbiBpbnN0cnVtZW50LCB0aGUgcXVlc3Rpb24gZm9yIHRoZSBjb3VydCB3b3VsZCBiZSB3aGV0aGVyIHN1Y2ggYSBwcm92aXNpb24gd291bGQgc3BlbGwgb3V0IGluIGV4cHJlc3Mgd29yZHMgd2hhdCB0aGUgaW5zdHJ1bWVudCwgcmVhZCBhZ2FpbnN0IHRoZSByZWxldmFudCBiYWNrZ3JvdW5kLCB3b3VsZCByZWFzb25hYmx5IGJlIHVuZGVyc3Rvb2QgdG8gbWVhbi4gSXQgd291bGQgYmUgbm90aWNlZCBmcm9tIExvcmQgUGVhcnNvbiYjODIxNztzIHNwZWVjaCBpbiBUcm9sbG9wZSAmYW1wOyBDb2xscyBMdGQgdiBOb3J0aCBXZXN0IE1ldHJvcG9saXRhbiBSZWdpb25hbCBIb3NwaXRhbCBCb2FyZCBbMTk3M10gMSBXLkwuUi4gNjAxIHRoYXQgdGhhdCBxdWVzdGlvbiBjb3VsZCBiZSByZWZvcm11bGF0ZWQgaW4gdmFyaW91cyB3YXlzIHdoaWNoIGEgY291cnQgbWlnaHQgZmluZCBoZWxwZnVsIGluIHByb3ZpZGluZyBhbiBhbnN3ZXIgLSB0aGUgaW1wbGllZCB0ZXJtIGhhZCB0byAmIzgyMjA7Z28gd2l0aG91dCBzYXlpbmcmIzgyMjE7LCBpdCBoYWQgdG8gYmUgJiM4MjIwO25lY2Vzc2FyeSB0byBnaXZlIGJ1c2luZXNzIGVmZmljYWN5IHRvIHRoZSBjb250cmFjdCYjODIyMTsgYW5kIHNvIG9uIC0gYnV0IHRob3NlIHdlcmUgbm90IHRvIGJlIHRyZWF0ZWQgYXMgZGlmZmVyZW50IG9yIGFkZGl0aW9uYWwgdGVzdHMuIFRoZXJlIHdhcyBvbmx5IG9uZSBxdWVzdGlvbiwgbmFtZWx5IHdoYXQgdGhlIGluc3RydW1lbnQsIHJlYWQgYXMgYSB3aG9sZSBhZ2FpbnN0IHRoZSByZWxldmFudCBiYWNrZ3JvdW5kLCB3b3VsZCByZWFzb25hYmx5IGJlIHVuZGVyc3Rvb2QgdG8gbWVhbi4gSW4gQlAgUmVmaW5lcnkgKFdlc3Rlcm5wb3J0KSBQdHkgTHRkIHYgU2hpcmUgb2YgSGFzdGluZ3MgMTgwIEMuTC5SLiAyNjYsIExvcmQgU2ltb24gb2YgR2xhaXNkYWxlIGhhZCBzYWlkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGhhZCB0byBiZSBtZXQgYmVmb3JlIGEgdGVybSBjb3VsZCBiZSBpbXBsaWVkOiBpdCBoYWQgdG8gYmUgcmVhc29uYWJsZSBhbmQgZXF1aXRhYmxlOyBpdCBoYWQgdG8gYmUgbmVjZXNzYXJ5IHRvIGdpdmUgYnVzaW5lc3MgZWZmaWNhY3kgdG8gdGhlIGNvbnRyYWN0LCBzbyB0aGF0IG5vIHRlcm0gd291bGQgYmUgaW1wbGllZCBpZiB0aGUgY29udHJhY3Qgd2FzIGVmZmVjdGl2ZSB3aXRob3V0IGl0OyBpdCBoYWQgdG8gYmUgc28gb2J2aW91cyB0aGF0ICYjODIyMDtpdCBbd2VudF0gd2l0aG91dCBzYXlpbmcmIzgyMjE7OyBpdCBoYWQgdG8gYmUgY2FwYWJsZSBvZiBjbGVhciBleHByZXNzaW9uOyBmdXJ0aGVyLCBpdCBoYWQgbm90IHRvIGNvbnRyYWRpY3QgYW55IGV4cHJlc3MgdGVybSBvZiB0aGUgY29udHJhY3QuIFRoYXQgbGlzdCB3YXMgYmVzdCByZWdhcmRlZCwgbm90IGFzIHNlcmllcyBvZiBpbmRlcGVuZGVudCB0ZXN0cyB3aGljaCBoYWQgZWFjaCB0byBiZSBzdXJtb3VudGVkLCBidXQgcmF0aGVyIGFzIGEgY29sbGVjdGlvbiBvZiBkaWZmZXJlbnQgd2F5cyBpbiB3aGljaCBqdWRnZXMgaGFkIHRyaWVkIHRvIGV4cHJlc3MgdGhlIGNlbnRyYWwgaWRlYSB0aGF0IHRoZSBwcm9wb3NlZCBpbXBsaWVkIHRlcm0gaGFkIHRvIHNwZWxsIG91dCB3aGF0IHRoZSBjb250cmFjdCBhY3R1YWxseSBtZWFudCwgb3IgaW4gd2hpY2ggdGhleSBoYWQgZXhwbGFpbmVkIHdoeSB0aGV5IGRpZCBub3QgdGhpbmsgdGhhdCBpdCBkaWQgc28sIFRyb2xsb3BlLCBCUCBSZWZpbmVyeSwgRXF1aXRhYmxlIExpZmUgQXNzdXJhbmNlIFNvY2lldHkgdiBIeW1hbiBbMjAwMl0gMSBBLkMuIDQwOCBhbmQgTW9vcmNvY2ssIFRoZSAoMTg4OSkgMTQgUC5ELiA2NCBjb25zaWRlcmVkLiAoMikgVGhlIENvdXJ0IG9mIEFwcGVhbCBoYWQgYmVlbiB3cm9uZyBub3QgdG8gaW1wbHkgdGhlIHRlcm0gYXJndWVkIGZvciBieSBYIGludG8gdGhlIGFydGljbGUuIFRoZSBpbXBsaWNhdGlvbiB3YXMgcmVxdWlyZWQgdG8gYXZvaWQgZGVmZWF0aW5nIHdoYXQgYXBwZWFyZWQgdG8gaGF2ZSBiZWVuIHRoZSBvdmVycmlkaW5nIHB1cnBvc2Ugb2YgdGhlIG1hY2hpbmVyeSBvZiBhcHBvaW50bWVudCBhbmQgcmVtb3ZhbCBvZiBkaXJlY3RvcnMsIG5hbWVseSB0byBlbnN1cmUgdGhhdCB0aGUgYm9hcmQgcmVmbGVjdGVkIHRoZSBhcHByb3ByaWF0ZSBzaGFyZWhvbGRlciBpbnRlcmVzdHMgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBzY2hlbWUgbGFpZCBvdXQgaW4gdGhlIGFydGljbGVzLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkNyaXRpY2lzZWQiLAogICAgICAgICJIYWxlIiwKICAgICAgICAiSG9mZm1hbm4iCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiVUtITCIsCiAgICAiQ0FURUdPUlkiOiAiTGFuZGxvcmQgYW5kIFRlbmFudCAmbWRhc2g7IEFjY2VzcyAmbWRhc2g7IEZsYXRzICZtZGFzaDsgSW1wbGllZCBUZXJtcyAmbWRhc2g7IFJlcGFpcnMgJm1kYXNoOyBUZW5hbmNpZXMgLyBFbXBsb3ltZW50ICZtZGFzaDsgQ29sbGVjdGl2ZSBCYXJnYWluaW5nICZtZGFzaDsgQ29udHJhY3Qgb2YgRW1wbG95bWVudCAmbWRhc2g7IER1dHkgb2YgQ2FyZSAmbWRhc2g7IEVjb25vbWljIExvc3MgJm1kYXNoOyBJbXBsaWVkIFRlcm1zIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJMYW5kbG9yZCBhbmQgVGVuYW50IiwKICAgICAgICAiQWNjZXNzIiwKICAgICAgICAiRmxhdHMiLAogICAgICAgICJJbXBsaWVkIFRlcm1zIiwKICAgICAgICAiUmVwYWlycyIsCiAgICAgICAgIlRlbmFuY2llcyIsCiAgICAgICAgIkVtcGxveW1lbnQiLAogICAgICAgICJDb2xsZWN0aXZlIEJhcmdhaW5pbmciLAogICAgICAgICJDb250cmFjdCBvZiBFbXBsb3ltZW50IiwKICAgICAgICAiRHV0eSBvZiBDYXJlIiwKICAgICAgICAiRWNvbm9taWMgTG9zcyIsCiAgICAgICAgIkltcGxpZWQgVGVybXMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgSGVkbGV5IEJ5cm5lICYgQ28gTHRkIHYgSGVsbGVyICYgUGFydG5lcnMiLAogICAgICAgICIod2wpIENhcGFybyBJbmR1c3RyaWVzIHBsYyB2IERpY2ttYW4iLAogICAgICAgICIod2wpIENyb3NzbGV5IHYgRmFpdGhmdWwgJiBHb3VsZCBIb2xkaW5ncyIsCiAgICAgICAgIih3bCkgRWRtb25kcyB2IExhd3NvbiIsCiAgICAgICAgIih3bCkgR3JlYXQgUGVhY2UgU2hpcHBpbmcgTHRkIHYgVHNhdmxpcmlzIChJbnRlcm5hdGlvbmFsKSBMdGQiLAogICAgICAgICIod2wpIEhvbGxpZXIgdiBSYW1ibGVyIE1vdG9ycyAoQU1DKSBMdGQiLAogICAgICAgICIod2wpIE1jUmFlIHYgQ29tbW9ud2VhbHRoIERpc3Bvc2FscyBDb21taXNzaW9uIiwKICAgICAgICAiKHdsKSBBdHRvcm5leSBHZW5lcmFsIG9mIEJlbGl6ZSB2IEJlbGl6ZSBUZWxlY29tIEx0ZCIsCiAgICAgICAgIih3bCkgQmxhY2twb29sIGFuZCBGeWxkZSBBZXJvY2x1YiBMdGQgdiBCbGFja3Bvb2wgQm9yb3VnaCBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBEYXVsaWEgTHRkIHYgRm91ciBNaWxsYmFuayBOb21pbmVlcyBMdGQiLAogICAgICAgICIod2wpIENpdHkgYW5kIFdlc3RtaW5zdGVyIFByb3BlcnRpZXMgdiBNdWRkIiwKICAgICAgICAiKHdsKSBHcmFuIEdlbGF0byBMdGQgdiBSaWNoY2xpZmYgKEdyb3VwKSBMdGQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxOTYiLAogICAgIllFQVIiOiAiMTk5MiIsCiAgICAiTkFNRSI6ICIod2wpIFNjYWxseSB2IFNvdXRoZXJuIEhlYWx0aCBhbmQgU29jaWFsIFNlcnZpY2VzIEJvYXJkIiwKICAgICJDSVQiOiAiWzE5OTJdIDEgQUMgMjk0IiwKICAgICJDSVRBVElPTiI6ICJTY2FsbHkgdiBTb3V0aGVybiBIZWFsdGggYW5kIFNvY2lhbCBTZXJ2aWNlcyBCb2FyZCBbMTk5Ml0gMSBBQyAyOTQiLAogICAgIkpVREdFIjogIkxvcmQgTG93cnk7IExvcmQgSmF1bmNleSBvZiBUdWxsaWNoZXR0bGU7IExvcmQgR29mZiBvZiBDaGlldmVsZXk7IExvcmQgUm9za2lsbDsgTG9yZCBCcmlkZ2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImRpc21pc3NpbmcgRHMmIzgyMTc7IGFwcGVhbCwgdGhhdCAoMSkgd2hlcmUgdGhlIHRlcm1zIG9mIGFuIGVtcGxveWVlJiM4MjE3O3MgY29udHJhY3Qgb2YgZW1wbG95bWVudCBoYWQgbm90IGJlZW4gbmVnb3RpYXRlZCB3aXRoIHRoZSBpbmRpdmlkdWFsIGVtcGxveWVlIGJ1dCByZXN1bHRlZCBmcm9tIG5lZ290aWF0aW9ucyB3aXRoIGEgcmVwcmVzZW50YXRpdmUgYm9keSBvciB3ZXJlIG90aGVyd2lzZSBpbmNvcnBvcmF0ZWQgYnkgcmVmZXJlbmNlLCBhbmQgYSBwYXJ0aWN1bGFyIHRlcm0gb2YgdGhlIGNvbnRyYWN0IG1hZGUgYXZhaWxhYmxlIHRvIHRoZSBlbXBsb3llZSBhIHZhbHVhYmxlIHJpZ2h0IGNvbnRpbmdlbnQgdXBvbiBoaXMgdGFraW5nIGFjdGlvbiB0byBhdmFpbCBoaW1zZWxmIG9mIGl0cyBiZW5lZml0IGFuZCB0aGUgZW1wbG95ZWUgY291bGQgbm90LCBpbiBhbGwgdGhlIGNpcmN1bXN0YW5jZXMsIHJlYXNvbmFibHkgYmUgZXhwZWN0ZWQgdG8gYmUgYXdhcmUgb2YgdGhlIHRlcm0gdW5sZXNzIGl0IHdhcyBkcmF3biB0byBoaXMgYXR0ZW50aW9uLCBpdCB3YXMgYW4gaW1wbGllZCB0ZXJtIG9mIHRoZSBjb250cmFjdCB0aGF0IHRoZSBlbXBsb3llciB3YXMgdW5kZXIgYW4gb2JsaWdhdGlvbiB0byB0YWtlIHJlYXNvbmFibGUgc3RlcHMgdG8gYnJpbmcgaXQgdG8gdGhlIGF0dGVudGlvbiBvZiB0aGUgZW1wbG95ZWUuIEFjY29yZGluZ2x5LCB0aGVyZSB3YXMgc3VjaCBhbiBpbXBsaWVkIHRlcm0gaW4gUHMmIzgyMTc7IGNvbnRyYWN0IG9mIHdoaWNoIERzIHdlcmUgaW4gYnJlYWNoOyAoMikgdGhlIGFjdGlvbnMgd2VyZSBub3QgdGltZS1iYXJyZWQgYmVjYXVzZSBEcyBoYWQgYmVlbiBpbiBicmVhY2ggb2YgYSBjb250aW51aW5nIG9ibGlnYXRpb24gdG8gYnJpbmcgdGhlIHJpZ2h0IHRvIHB1cmNoYXNlICYjODIyMDthZGRlZCB5ZWFycyYjODIyMTsgdG8gUHMmIzgyMTc7IGF0dGVudGlvbiB1bmRlciB0aGUgMTk3NCBSZWd1bGF0aW9ucyB1bnRpbCB0aGV5IHdlcmUgc3VwZXJzZWRlZCBieSB0aGUgMTk4MyBSZWd1bGF0aW9ucy4gUGVyIGN1cmlhbTogYSBicmVhY2ggYnkgYW4gZW1wbG95ZXIgb2YgdGhlIGR1dHkgaW1wb3NlZCBieSBzLjQoMSkgb2YgdGhlIDE5NjUgQWN0IHRvIGdpdmUgYW4gZW1wbG95ZWUgd3JpdHRlbiBwYXJ0aWN1bGFycyBvZiB0aGUgdGVybXMgb2YgaGlzIGVtcGxveW1lbnQgaXMgcmVtZWRpYWJsZSBvbmx5IGJ5IHJlY291cnNlIHRvIGFuIGluZHVzdHJpYWwgdHJpYnVuYWwgYXMgcHJvdmlkZWQgYnkgcy41IGFuZCBjb25mZXJzIG5vIGNpdmlsIHJpZ2h0IG9mIGFjdGlvbiBpbiB0aGUgZW1wbG95ZWUgZm91bmRpbmcgaW4gZGFtYWdlcy4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0NBIiwKICAgICJDQVRFR09SWSI6ICJFbXBsb3ltZW50IE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbnRyYWN0cyAmbWRhc2g7IENvbnRyYWN0IG9mIEVtcGxveW1lbnQgJm1kYXNoOyBFYXJseSBSZXRpcmVtZW50ICZtZGFzaDsgRW1wbG95ZXJzJyBEdXRpZXMgJm1kYXNoOyBJbGwgSGVhbHRoICZtZGFzaDsgSW1wbGllZCBUZXJtcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRW1wbG95bWVudCBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMiLAogICAgICAgICJDb250cmFjdCBvZiBFbXBsb3ltZW50IiwKICAgICAgICAiRWFybHkgUmV0aXJlbWVudCIsCiAgICAgICAgIkVtcGxveWVycycgRHV0aWVzIiwKICAgICAgICAiSWxsIEhlYWx0aCIsCiAgICAgICAgIkltcGxpZWQgVGVybXMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgU2NhbGx5IHYgU291dGhlcm4gSGVhbHRoIGFuZCBTb2NpYWwgU2VydmljZXMgQm9hcmQiLAogICAgICAgICIod2wpIEthcnNhbGVzIChIYXJyb3cpIEx0ZCB2IFdhbGxpcyIsCiAgICAgICAgIih3bCkgQXR0b3JuZXkgR2VuZXJhbCBvZiBCZWxpemUgdiBCZWxpemUgVGVsZWNvbSBMdGQiLAogICAgICAgICIod2wpIEJhbmsgb2YgQ3JlZGl0IGFuZCBDb21tZXJjZSBJbnRlcm5hdGlvbmFsIFNBIHYgQWxpIiwKICAgICAgICAiKHdsKSBEcmVzZG5lciBLbGVpbndvcnQgTHRkIHYgQXR0cmlsbCIsCiAgICAgICAgIih3bCkgRWRtb25kcyB2IExhd3NvbiIsCiAgICAgICAgIih3bCkgU3VkYnJvb2sgVHJhZGluZyBFc3RhdGUgTHRkIHYgRWdnbGV0b24iLAogICAgICAgICIod2wpIEJsYWNrcG9vbCBhbmQgRnlsZGUgQWVyb2NsdWIgTHRkIHYgQmxhY2twb29sIEJvcm91Z2ggQ291bmNpbCIsCiAgICAgICAgIih3bCkgSW5ncmFtIHYgTGl0dGxlIiwKICAgICAgICAiKHdsKSBGaXNoZXIgdiBCZWxsIiwKICAgICAgICAiKHdsKSBHcmFuIEdlbGF0byBMdGQgdiBSaWNoY2xpZmYgKEdyb3VwKSBMdGQiLAogICAgICAgICIod2wpIENpdHkgYW5kIFdlc3RtaW5zdGVyIFByb3BlcnRpZXMgdiBNdWRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTk3IiwKICAgICJZRUFSIjogIjIwMDQiLAogICAgIkNPVU5TRUwiOiAiRm9yIHRoZSBhcHBlbGxhbnQ6IEEgV2hpdGUgUUMuIEZvciB0aGUgZGVmZW5kYW50OiBKIENhdmFuYWdoIFFDLCBEIE91ZGtlcmsuIiwKICAgICJOQU1FIjogIih3bCkgQ3Jvc3NsZXkgdiBGYWl0aGZ1bCAmIEdvdWxkIEhvbGRpbmdzIiwKICAgICJDSVQiOiAiWzIwMDRdIEVXQ0EgQ2l2IDI5MyIsCiAgICAiQ0lUQVRJT04iOiAiQ3Jvc3NsZXkgdiBGYWl0aGZ1bCAmYW1wOyBHb3VsZCBIb2xkaW5ncyBbMjAwNF0gRVdDQSBDaXYgMjkzIiwKICAgICJKVURHRSI6ICJTaXIgQW5kcmV3IE1vcnJpdHQgVkM7IER5c29uIExKOyBUaG9tYXMgTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImRpc21pc3NpbmcgdGhlIGFwcGVhbCwgdGhhdCB0aGUganVkZ2UgaGFkIGJlZW4gcmlnaHQgdG8gcmVqZWN0IHRoZSBwcm9wb3NpdGlvbiB0aGF0IGl0IHdhcyBhbiBpbXBsaWVkIHRlcm0gb2YgZXZlcnkgY29udHJhY3Qgb2YgZW1wbG95bWVudCB0aGF0IGFuIGVtcGxveWVyIG91Z2h0IHRvIHRha2UgcmVhc29uYWJsZSBjYXJlIG9mIGFuIGVtcGxveWVlJiM4MjE3O3MgZWNvbm9taWMgd2VsbCBiZWluZy4gSW4gZGVjaWRpbmcgd2hldGhlciBzdWNoIGEgdGVybSB3YXMgdG8gYmUgaW1wbGllZCwgaXQgd2FzIGJldHRlciB0byBmb2N1cyBvbiBxdWVzdGlvbnMgb2YgcmVhc29uYWJsZW5lc3MsIGZhaXJuZXNzIGFuZCB0aGUgYmFsYW5jaW5nIG9mIGNvbXBldGluZyBwb2xpY3kgY29uc2lkZXJhdGlvbnMgcmF0aGVyIHRoYW4gb24gdGhlIGVsdXNpdmUgY29uY2VwdCBvZiAmIzgyMjA7bmVjZXNzaXR5JiM4MjIxOy4gVGhlIGltcGxpY2F0aW9uIG9mIHN1Y2ggYSB0ZXJtIHdvdWxkIGludHJvZHVjZSBhIG1ham9yIGV4dGVuc2lvbiBvZiB0aGUgcmVsZXZhbnQgbGF3LCB3aGVuIGluIHRoZSByZWNlbnQgZGVjaXNpb25zIG9mIFNjYWxseSB2IFNvdXRoZXJuIEhlYWx0aCBhbmQgU29jaWFsIFNlcnZpY2VzIEJvYXJkIFsxOTkyXSAxIEEuQy4gMjk0IGFuZCBTcHJpbmcgdiBHdWFyZGlhbiBBc3N1cmFuY2UgUGxjIFsxOTk1XSAyIEEuQy4gMjk2IHRoZSBIb3VzZSBvZiBMb3JkcyBoYWQgcmVmdXNlZCB0byBkbyBzby4gU2Vjb25kbHksIHN1Y2ggYW4gaW1wbGllZCB0ZXJtIHdvdWxkIGltcG9zZSBhbiB1bmZhaXIgYW5kIHVucmVhc29uYWJsZSBidXJkZW4gdXBvbiBlbXBsb3llcnMsIFNjYWxseSAsIFNwcmluZyAsIFVuaXZlcnNpdHkgb2YgTm90dGluZ2hhbSB2IEV5ZXR0IChOby4xKSBbMTk5OV0gMiBBbGwgRS5SLiA0MzcgYW5kIEhhZ2VuIHYgSUNJIENoZW1pY2FscyAmYW1wOyBQb2x5bWVycyBMdGQgWzIwMDJdIEkuUi5MLlIuIDMxIGFwcGxpZWQsIE91dHJhbSB2IEFjYWRlbXkgUGxhc3RpY3MgTHRkIFsyMDAxXSBJLkMuUi4gMzY3IGNvbnNpZGVyZWQsIFJlaWQgdiBSdXNoICZhbXA7IFRvbXBraW5zIEdyb3VwIFsxOTkwXSAxIFcuTC5SLiAyMTIgZG91YnRlZC4gT24gdGhlIGV2aWRlbmNlLCBpdCB3YXMgY2xlYXIgdGhhdCBDIGhhZCBkZWNpZGVkIHRvIHJldGlyZSBvbiBoaXMgb3duIGluaXRpYXRpdmUuIEYgaGFkIG5vdCBjYXVzZWQgb3IgY29udHJpYnV0ZWQgdG8gdGhhdCBkZWNpc2lvbi4gSXQgd2FzIGVxdWFsbHkgY2xlYXIgdGhhdCBGIHdhcyByZWFzb25hYmx5IGVudGl0bGVkIHRvIGNvbmNsdWRlIHRoYXQgQyBrbmV3LCBvciByZWFzb25hYmx5IGhhZCBvcGVuIHRvIGhpbSB0aGUgbWVhbnMgb2YgZmluZGluZyBvdXQsIHRoZSB0ZXJtcyBvZiB0aGUgc2NoZW1lLCBpbmNsdWRpbmcgdGhvc2UgYXMgdG8gY2Vzc2F0aW9uIG9mIHRoZSByaWdodCB0byBiZW5lZml0IG9uIHRlcm1pbmF0aW9uIG9mIGVtcGxveW1lbnQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiU2hpcHBpbmcgJm1kYXNoOyBDaGFydGVycGFydGllcyAmbWRhc2g7IFNlYXdvcnRoaW5lc3MgJm1kYXNoOyBXYXJyYW50aWVzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTaGlwcGluZyIsCiAgICAgICAgIkNoYXJ0ZXJwYXJ0aWVzIiwKICAgICAgICAiU2Vhd29ydGhpbmVzcyIsCiAgICAgICAgIldhcnJhbnRpZXMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgSCBQYXJzb25zIChMaXZlc3RvY2spIEx0ZCB2IFV0dGxleSBJbmdoYW0gJiBDbyIsCiAgICAgICAgIih3bCkgT2NlYW4gVHJhbXAgVGFua2VycyBDb3Jwb3JhdGlvbiB2IFYiLAogICAgICAgICIod2wpIFRoZSBCcmltbmVzIiwKICAgICAgICAiKHdsKSBSb3lzY290IFRydXN0IHYgUm9nZXJzb24iLAogICAgICAgICIod2wpIFRyYW5zZmllbGQgU2hpcHBpbmcgSW5jIHYgTWVyY2F0b3IgU2hpcHBpbmcgSW5jIChUaGUgQWNoaWxsZWFzKSIsCiAgICAgICAgIih3bCkgT3NjYXIgQ2hlc3MgTHRkIHYgV2lsbGlhbXMiLAogICAgICAgICIod2wpIEZpbmVsdmV0IEFHIHYgVmluYXZhIFNoaXBwaW5nIENvIEx0ZCwgVGhlIENocnlzYWxpcyIsCiAgICAgICAgIih3bCkgR3JlYXQgUGVhY2UgU2hpcHBpbmcgTHRkIHYgVHNhdmxpcmlzIChJbnRlcm5hdGlvbmFsKSBMdGQiLAogICAgICAgICIod2wpIFNjaGF3ZWwgdiBSZWFkZSIsCiAgICAgICAgIih3bCkgQ2l0eSBhbmQgV2VzdG1pbnN0ZXIgUHJvcGVydGllcyB2IE11ZGQiLAogICAgICAgICIod2wpIElubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biBMdGQiLAogICAgICAgICIod2wpIEwgSiBLb3JiZXRpcyB2IFRyYW5zZ3JhaW4gU2hpcHBpbmcgQlYiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxOTgiLAogICAgIllFQVIiOiAiMTk2MiIsCiAgICAiTkFNRSI6ICIod2wpIEhvbmcgS29uZyBGaXIgU2hpcHBpbmcgQ28gTHRkIHYgS2F3YXNha2kgS2lzZW4gS2Fpc2hhIEx0ZCIsCiAgICAiQ0lUIjogIlsxOTYyXSAyIFFCIDI2IiwKICAgICJDSVRBVElPTiI6ICJIb25nIEtvbmcgRmlyIFNoaXBwaW5nIENvIEx0ZCB2IEthd2FzYWtpIEtpc2VuIEthaXNoYSBMdGQgWzE5NjJdIDIgUUIgMjYiLAogICAgIkpVREdFIjogIlNlbGxlcnMgTEo7IFVwam9obiBMSjsgRGlwbG9jayBMSiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiYWx0aG91Z2ggdGhlIG93bmVycyB3ZXJlIGFkbWl0dGVkbHkgaW4gYnJlYWNoIG9mIHRoZWlyIG9ibGlnYXRpb24gdG8gZGVsaXZlciBhIHNlYXdvcnRoeSBzaGlwLCBzZWF3b3J0aGluZXNzIHdhcyBub3QgYSBjb25kaXRpb24gb2YgdGhlIGNoYXJ0ZXJwYXJ0eSB0aGUgYnJlYWNoIG9mIHdoaWNoIGVudGl0bGVkIHRoZSBjaGFydGVyZXJzIGF0IG9uY2UgdG8gcmVwdWRpYXRlOyBzaW5jZSwgdGhlcmVmb3JlLCB0aGUgZGVsYXlzIGNhdXNlZCBieSB0aGUgYnJlYWtkb3ducyBhbmQgcmVwYWlycyB3ZXJlIG5vdCBzdWZmaWNpZW50IGZvciB0aGUgY29udHJhY3QgdG8gYmUgZnJ1c3RyYXRlZCwgdGhlIGNoYXJ0ZXJlcnMmIzgyMTc7IGNsYWltIGZhaWxlZCBhbmQgdGhlIGFwcGVhbCBtdXN0IGJlIGRpc21pc3NlZC4gSGF2ZWxvY2sgdiBHZWRkZXMgKDE4MDkpIDEwIEVhLiA1NTUgYXBwbGllZDsgRGF2aWRzb24gdiBHd3lubmUgMTA0IEUuUi4gMTQ5IGFwcGxpZWQ7IFRhcnJhYm9jaGlhIHYgSGlja2llIDE1NiBFLlIuIDExNjggYXBwbGllZDsgSiZhbXA7RSBLaXNoIHYgQ2hhcmxlcyBUYXlsb3IgJmFtcDsgU29ucyAmYW1wOyBDbyBbMTkxMl0gQS5DLiA2MDQgYXBwbGllZDsgSmFja3NvbiB2IFVuaW9uIE1hcmluZSBJbnN1cmFuY2UgQ28gTHRkICgxODc0LTc1KSBMLlIuIDEwIEMuUC4gMTI1IGNvbnNpZGVyZWQ7IFVuaXZlcnNhbCBDYXJnbyBDYXJyaWVycyBDb3JwIHYgQ2l0YXRpIChOby4xKSBbMTk1N10gMSBXLkwuUi4gOTc5IGFwcHJvdmVkIGFuZCBhcHBsaWVkLiBQZXIgRGlwbG9jaywgTC5KLjogVGhlIHNoaXBvd25lciYjODIxNztzIHVuZGVydGFraW5nIHRvIGRlbGl2ZXIgYSBzZWF3b3J0aHkgc2hpcCBpcyBuZWl0aGVyIGEgJiM4MjIwO2NvbmRpdGlvbiYjODIyMTsgbm9yIGEgJiM4MjIwO3dhcnJhbnR5JiM4MjIxOyBidXQgb25lIG9mIHRoYXQgbGFyZ2UgY2xhc3Mgb2YgY29udHJhY3R1YWwgdW5kZXJ0YWtpbmdzIG9uZSBicmVhY2ggb2Ygd2hpY2ggbWF5IGhhdmUgdGhlIHNhbWUgZWZmZWN0IGFzIHRoYXQgYXNjcmliZWQgdG8gYSBicmVhY2ggb2YgJiM4MjIwO2NvbmRpdGlvbiYjODIyMTsgdW5kZXIgdGhlIFNhbGUgb2YgR29vZHMgQWN0IDE4OTMgYW5kIGEgZGlmZmVyZW50IGJyZWFjaCBvZiB3aGljaCBtYXkgaGF2ZSBvbmx5IHRoZSBzYW1lIGVmZmVjdCBhcyB0aGF0IGFzY3JpYmVkIHRvIGEgYnJlYWNoIG9mICYjODIyMDt3YXJyYW50eSYjODIyMTsgdW5kZXIgdGhhdCBBY3QuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiU2FsZSBvZiBHb29kcyAmbWRhc2g7IENvbnRyYWN0IFRlcm1zICZtZGFzaDsgTm90aWNlICZtZGFzaDsgVGltZSBMaW1pdHMgLyBDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29uc3VtZXIgTGF3ICZtZGFzaDsgQnJlYWNoIG9mIENvbnRyYWN0ICZtZGFzaDsgQ29uZGl0aW9ucyBvZiBTYWxlICZtZGFzaDsgSGlyZSBQdXJjaGFzZSAmbWRhc2g7IEltcGxpZWQgVGVybXMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlNhbGUgb2YgR29vZHMiLAogICAgICAgICJDb250cmFjdCBUZXJtcyIsCiAgICAgICAgIk5vdGljZSIsCiAgICAgICAgIlRpbWUgTGltaXRzIiwKICAgICAgICAiQ29udHJhY3RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbnN1bWVyIExhdyIsCiAgICAgICAgIkJyZWFjaCBvZiBDb250cmFjdCIsCiAgICAgICAgIkNvbmRpdGlvbnMgb2YgU2FsZSIsCiAgICAgICAgIkhpcmUgUHVyY2hhc2UiLAogICAgICAgICJJbXBsaWVkIFRlcm1zIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIEFqYXlpIChFQSkgdiBCcmlzY29lIChOaWdlcmlhKSBMdGQiLAogICAgICAgICIod2wpIENhdmVuZGlzaCBTcXVhcmUgSG9sZGluZyBCViB2IFRhbGFsIEVsIE1ha2Rlc3NpOyBQYXJraW5nRXllIEx0ZCB2IEJlYXZpcyIsCiAgICAgICAgIih3bCkgQnJpdGlzaCBDcmFuZSBIaXJlIENvcnBvcmF0aW9uIEx0ZCB2IElwc3dpY2ggUGxhbnQgSGlyZSBMdGQiLAogICAgICAgICIod2wpIFJveXNjb3QgVHJ1c3QgdiBSb2dlcnNvbiIsCiAgICAgICAgIih3bCkgU3VkYnJvb2sgVHJhZGluZyBFc3RhdGUgTHRkIHYgRWdnbGV0b24iLAogICAgICAgICIod2wpIFJlYXJkb24gU21pdGggTGluZSBMdGQgdiBZbmd2YXIgSGFuc2VuLVRhbmdlbiIsCiAgICAgICAgIih3bCkgSW50ZXJmb3RvIFBpY3R1cmUgTGlicmFyeSBMdGQgdiBTdGlsZXR0byBWaXN1YWwgUHJvZHVjdGlvbnMgTHRkIiwKICAgICAgICAiKHdsKSBPc2NhciBDaGVzcyBMdGQgdiBXaWxsaWFtcyIsCiAgICAgICAgIih3bCkgU2hvZ3VuIEZpbmFuY2UgTHRkIHYgSHVkc29uIiwKICAgICAgICAiKHdsKSBBdHRvcm5leSBHZW5lcmFsIG9mIEJlbGl6ZSB2IEJlbGl6ZSBUZWxlY29tIEx0ZCIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IEx0ZCIsCiAgICAgICAgIih3bCkgU2NoYXdlbCB2IFJlYWRlIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTk5IiwKICAgICJZRUFSIjogIjE5NTYiLAogICAgIk5BTUUiOiAiKHdsKSBLYXJzYWxlcyAoSGFycm93KSBMdGQgdiBXYWxsaXMiLAogICAgIkNJVCI6ICJbMTk1Nl0gMSBXTFIgOTM2IiwKICAgICJDSVRBVElPTiI6ICJLYXJzYWxlcyAoSGFycm93KSBMdGQgdiBXYWxsaXMgWzE5NTZdIDEgV0xSIDkzNiIsCiAgICAiSlVER0UiOiAiRGVubmluZyBMSjsgQmlya2V0dCBMSjsgUGFya2VyIExKIiwKICAgICJIRUxEIjogWwogICAgICAgICJ0aGUgbGVuZGVyIHdhcyBpbiBicmVhY2ggb2YgdGhlIGltcGxpZWQgb2JsaWdhdGlvbiB0byBkZWxpdmVyIHRoZSBjYXIgaW4gc3Vic3RhbnRpYWxseSB0aGUgc2FtZSBjb25kaXRpb24gYXMgd2hlbiB0aGUgZGVmZW5kYW50IHNhdyBpdCBmaXJzdCwgYW5kLCB0aGF0IGJyZWFjaCBnb2luZyB0byB0aGUgcm9vdCBvZiB0aGUgY29udHJhY3QsIHRoZSBsZW5kZXIgd2FzIG5vdCBlbnRpdGxlZCB0byByZWx5IG9uIHRoZSBleGVtcHRpb24gY2xhdXNlIGluIHRoZSBhZ3JlZW1lbnQsIHNvIHRoYXQgaGUgd2FzIG5vdCBlbnRpdGxlZCB0byBzdWNjZWVkOyBpbiBhbnkgY2FzZSwgd2hlbiBnb29kcyBhcmUgbGV0IG9uIGhpcmUtcHVyY2hhc2UgYW5kIHRoZXJlIGlzIGEgcmVmdXNhbCBieSB0aGUgaGlyZXIgdG8gdGFrZSB0aGVtLCB0aGUgcHJvcGVyIHJlbWVkeSBpcyBkYW1hZ2VzIGZvciBmYWlsdXJlIHRvIGFjY2VwdCBkZWxpdmVyeSwgYW5kLCBzaW5jZSB0aGUgYXNzaWdubWVudCBieSBNIEYsIEx0ZCB0byB0aGUgcGxhaW50aWZmIGRpZCBub3QgY292ZXIgYSBjbGFpbSBmb3IgZGFtYWdlcywgdGhlIHBsYWludGlmZiBjb21wYW55IHdhcyBvbiB0aGF0IGdyb3VuZCBkZWJhcnJlZCBmcm9tIHN1Y2NlZWRpbmcuIEFsZXhhbmRlciB2IFJhaWx3YXkgRXhlY3V0aXZlIFsxOTUxXSAyIEsuQi4gODgyIGNvbnNpZGVyZWQ7IGFuZCBTbWVhdG9uIEhhbnNjb21iICZhbXA7IENvIHYuIFNhc3Nvb24gSSBTZXR0eSwgU29uICZhbXA7IENvIChOby4xKSBbMTk1M10gQy5MLlkuIDE0NCBjb25zaWRlcmVkOyBBbmRyZXdzIEJyb3MgKEJvdXJuZW1vdXRoKSBMdGQgdiBTaW5nZXIgJmFtcDsgQ28gTHRkIFsxOTM0XSAxIEsuQi4gMTcgY29uc2lkZXJlZDsgTmF0aW9uYWwgQ2FzaCBSZWdpc3RlciBDbyBMdGQgdiBTdGFubGV5IFsxOTIxXSAzIEsuQi4gMjkyIGZvbGxvd2VkLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkNyaXRpY2lzZWQiLAogICAgICAgICJEZW5uaW5nIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIlVLSEwiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyAmbWRhc2g7IENvbnRyYWN0IFRlcm1zICZtZGFzaDsgQ29udHJhY3R1YWwgTGlhYmlsaXR5ICZtZGFzaDsgRXhjbHVzaW9uIENsYXVzZXMgJm1kYXNoOyBGdW5kYW1lbnRhbCBCcmVhY2ggJm1kYXNoOyBTZWN1cml0eSBDb21wYW5pZXMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnRyYWN0cyIsCiAgICAgICAgIkNvbnRyYWN0IFRlcm1zIiwKICAgICAgICAiQ29udHJhY3R1YWwgTGlhYmlsaXR5IiwKICAgICAgICAiRXhjbHVzaW9uIENsYXVzZXMiLAogICAgICAgICJGdW5kYW1lbnRhbCBCcmVhY2giLAogICAgICAgICJTZWN1cml0eSBDb21wYW5pZXMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IEx0ZCIsCiAgICAgICAgIih3bCkgQ3VydGlzIHYgQ2hlbWljYWwgQ2xlYW5pbmcgJiBEeWVpbmcgQ28iLAogICAgICAgICIod2wpIFBhbyBPbiB2IExhdSBZaXUgTG9uZyIsCiAgICAgICAgIih3bCkgTmljb2xlbmUgdiBTaW1tb25kcyIsCiAgICAgICAgIih3bCkgSW50ZXJmb3RvIFBpY3R1cmUgTGlicmFyeSBMdGQgdiBTdGlsZXR0byBWaXN1YWwgUHJvZHVjdGlvbnMgTHRkIiwKICAgICAgICAiKHdsKSBKIEV2YW5zICYgU29uIChQb3J0c21vdXRoKSB2IEFuZHJlYSBNZXJ6YXJpbyBMdGQiLAogICAgICAgICIod2wpIENhcmxpbGwgdiBDYXJib2xpYyBTbW9rZSBCYWxsIENvbXBhbnkiLAogICAgICAgICIod2wpIEhvbGxpZXIgdiBSYW1ibGVyIE1vdG9ycyAoQU1DKSBMdGQiLAogICAgICAgICIod2wpIE9zY2FyIENoZXNzIEx0ZCB2IFdpbGxpYW1zIiwKICAgICAgICAiKHdsKSBDaXR5IGFuZCBXZXN0bWluc3RlciBQcm9wZXJ0aWVzIHYgTXVkZCIsCiAgICAgICAgIih3bCkgUmUgU2VsZWN0bW92ZSBMdGQiLAogICAgICAgICIod2wpIFdoaXRlICYgQ2FydGVyIChDb3VuY2lscykgTHRkIHYgTWNHcmVnb3IiCiAgICBdLAogICAgIk5VTUJFUiI6ICIyMDAiLAogICAgIllFQVIiOiAiMTk4MCIsCiAgICAiTkFNRSI6ICIod2wpIFBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCIsCiAgICAiQ0lUIjogIlsxOTgwXSBBQyA4MjciLAogICAgIkNJVEFUSU9OIjogIlBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCBbMTk4MF0gQUMgODI3IiwKICAgICJKVURHRSI6ICJMb3JkIFdpbGJlcmZvcmNlOyBMb3JkIERpcGxvY2s7IExvcmQgU2FsbW9uOyBMb3JkIEtlaXRoIG9mIEtpbmtlbDsgTG9yZCBTY2FybWFuIiwKICAgICJIRUxEIjogWwogICAgICAgICJhbGxvd2luZyB0aGUgZGVmZW5kYW50cyYjODIxNzsgYXBwZWFsLCB0aGF0IHdoZXRoZXIgYW4gZXhjbHVzaW9uIGNsYXVzZSB3YXMgYXB0IHRvIGV4Y2x1ZGUgb3IgbGltaXQgbGlhYmlsaXR5IHdhcyBhIG1hdHRlciBvZiBjb25zdHJ1Y3Rpb24gb2YgdGhlIGNvbnRyYWN0OyB0aGF0IHRoZSBmYWN0IHRoYXQgYSBicmVhY2ggbWF5IGJlIHN1Y2ggYXMgdG8ganVzdGlmeSB0aGUgaW5ub2NlbnQgcGFydHkgaW4gdGVybWluYXRpbmcgb3IgdHJlYXRpbmcgYXMgcmVwdWRpYXRlZCB0aGUgY29udHJhY3QgZGlkIG5vdCBtZWFuIHRoYXQgdGhlIHRlcm1zIG9mIHRoZSBjb250cmFjdCBpbiBzbyBmYXIgYXMgdGhleSBnb3Zlcm5lZCBsaWFiaWxpdHkgd2VyZSBub3QgdG8gYmUgZW5mb3JjZWQ7IHRoYXQsIGdlbmVyYWxseSwgcGFydGllcyB0byBhIGNvbnRyYWN0LCB3aGVuIHRoZXkgYmFyZ2FpbmVkIG9uIGVxdWFsIHRlcm1zLCBzaG91bGQgYmUgYXQgbGliZXJ0eSB0byBhcHBvcnRpb24gbGlhYmlsaXR5IGluIHRoZSBjb250cmFjdCBhcyB0aGV5IHNhdyBmaXQ7IGFuZCB0aGF0IHRoZSB3b3JkaW5nIG9mIHRoZSBleGNsdXNpb24gY2xhdXNlIGluIHRoZSBpbnN0YW50IGNhc2Ugd2FzIGFkZXF1YXRlIHRvIGV4Y2x1ZGUgbGlhYmlsaXR5IGZvciB3aGF0IG9jY3VycmVkLiAoRGVjaXNpb24gb2YgQ291cnQgb2YgQXBwZWFsIHJldmVyc2VkIFN1aXNzZSBBdGxhbnRpcXVlIFNvY2lldGUgZCYjODIxNztBcm1lbWVudCBTQSB2IE5WIFJvdHRlcmRhbXNjaGUgS29sZW4gQ2VudHJhbGUgWzE5NjddIDEgQS5DLiAzNjEgOyBDaGFydGVyaG91c2UgQ3JlZGl0IENvIHYgVG9sbHkgWzE5NjNdIDIgUS5CLiA2ODMgLCBIYXJidXR0JiM4MjE3O3MgUGxhc3RpY2luZSBMdGQgdiBXYXluZSBUYW5rICZhbXA7IFB1bXAgQ28gTHRkIFsxOTcwXSAxIFEuQi4gNDQ3IGFuZCBXYXRoZXMgKFdlc3Rlcm4pIEx0ZCB2IEF1c3RpbnMgKE1lbnN3ZWFyKSBMdGQgWzE5NzZdIDEgTGxveWQmIzgyMTc7cyBSZXAuIDE0IG92ZXJydWxlZCkuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiQ29udHJhY3RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IE5lZ2xpZ2VuY2UgJm1kYXNoOyBDYW5hZGEgJm1kYXNoOyBDcm93biBTZXJ2YW50cyAmbWRhc2g7IEV4Y2x1c2lvbiBDbGF1c2VzICZtZGFzaDsgSW50ZXJwcmV0YXRpb24gLyBDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogTmVnbGlnZW5jZSAmbWRhc2g7IENhcnMgJm1kYXNoOyBDb250cmFjdCBUZXJtcyAmbWRhc2g7IEV4Y2x1c2lvbiBDbGF1c2VzICZtZGFzaDsgTmVnbGlnZW5jZSAmbWRhc2g7IFJlcGFpcnMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnRyYWN0cyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBOZWdsaWdlbmNlIiwKICAgICAgICAiQ2FuYWRhIiwKICAgICAgICAiQ3Jvd24gU2VydmFudHMiLAogICAgICAgICJFeGNsdXNpb24gQ2xhdXNlcyIsCiAgICAgICAgIkludGVycHJldGF0aW9uIiwKICAgICAgICAiQ29udHJhY3RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IE5lZ2xpZ2VuY2UiLAogICAgICAgICJDYXJzIiwKICAgICAgICAiQ29udHJhY3QgVGVybXMiLAogICAgICAgICJFeGNsdXNpb24gQ2xhdXNlcyIsCiAgICAgICAgIk5lZ2xpZ2VuY2UiLAogICAgICAgICJSZXBhaXJzIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIFJveXNjb3QgVHJ1c3QgdiBSb2dlcnNvbiIsCiAgICAgICAgIih3bCkgRWxpYXNvbiB2IEhlbnNoYXciLAogICAgICAgICIod2wpIE9zY2FyIENoZXNzIEx0ZCB2IFdpbGxpYW1zIiwKICAgICAgICAiKHdsKSBFc3NvIFBldHJvbGV1bSBDbyBMdGQgdiBNYXJkb24iLAogICAgICAgICIod2wpIENoYXJ0YnJvb2sgTHRkIHYgUGVyc2ltbW9uIEhvbWVzIEx0ZCIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IEx0ZCIsCiAgICAgICAgIih3bCkgQ3VydGlzIHYgQ2hlbWljYWwgQ2xlYW5pbmcgJiBEeWVpbmcgQ28iLAogICAgICAgICIod2wpIFBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCIsCiAgICAgICAgIih3bCkgQWxwZW5zdG93IHYgUmVnYWxpYW4gUHJvcGVydGllcyIsCiAgICAgICAgIih3bCkgT2xsZXkgdiBNYXJsYm9yb3VnaCBDb3VydCBIb3RlbCIsCiAgICAgICAgIih3bCkgQWxiZXJ0IHYgTW90b3IgSW5zdXJlcnMnIEJ1cmVhdSIsCiAgICAgICAgIih3bCkgTmljb2xlbmUgdiBTaW1tb25kcyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIwMSIsCiAgICAiWUVBUiI6ICIxOTcyIiwKICAgICJOQU1FIjogIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIsCiAgICAiQ0lUIjogIlsxOTcyXSAyIFFCIDcxIiwKICAgICJDSVRBVElPTiI6ICJIb2xsaWVyIHYgUmFtYmxlciBNb3RvcnMgKEFNQykgTHRkIFsxOTcyXSAyIFFCIDcxIiwKICAgICJKVURHRSI6ICJTYWxtb24gTEo7IFN0YW1wIExKOyBMYXRleSBKIiwKICAgICJIRUxEIjogWwogICAgICAgICJ0aGF0IEQgd2VyZSBsaWFibGUgdG8gUCBmb3IgdGhlaXIgbmVnbGlnZW5jZSBiZWNhdXNlICgxKSB0aGV5IGhhZCBub3QgZXN0YWJsaXNoZWQgYSBjb3Vyc2Ugb2YgZGVhbGluZyBhbmQgc28gdGhlIGNsYXVzZSB3YXMgbm90IGluY29ycG9yYXRlZCBpbnRvIHRoZSBvcmFsIGNvbnRyYWN0OyBhbmQgKDIpIGV2ZW4gaWYgaXQgaGFkIGJlZW4sIHRoZSB3b3JkaW5nIG9mIHRoZSBjbGF1c2Ugd2FzIG5vdCBzdWZmaWNpZW50bHkgcGxhaW4gdG8gZXhjbHVkZSBsaWFiaWxpdHkgZm9yIG5lZ2xpZ2VuY2UuIFBlciBTYWxtb24sIEwuSi4gSW4gb3JkZXIgdG8gZXN0YWJsaXNoIHRoYXQgYSB0ZXJtIGhhcyBiZWVuIGltcGxpZWQgaW50byBhIGNvbnRyYWN0IGJ5IGEgY291cnNlIG9mIGRlYWxpbmcsIGl0IGlzIG5vdCBlc3NlbnRpYWwgdG8gc2hvdyB0aGF0IHRoZSBwYXJ0eSBjaGFyZ2VkIGhhZCBhY3R1YWwgYW5kIG5vdCBtZXJlbHkgY29uc3RydWN0aXZlIGtub3dsZWRnZSBvZiB0aGUgdGVybSBhbmQgd2l0aCBzdWNoIGFjdHVhbCBrbm93bGVkZ2UgaGFkIGluIGZhY3QgYXNzZW50ZWQgdG8gaXQuIChEaWN0dW0gb2YgRGVubmluZywgTC5KLiBpbiBPbGxleSB2IE1hcmxib3JvdWdoIENvdXJ0IEx0ZCBbMTk0OF0gMSBBbGwgRS5SLiA5NTUgYXBwbGllZCwgZGljdGEgb2YgU2NydXR0b24sIEwuSi4gaW4gUnV0dGVyIHYgUGFsbWVyIFsxOTIyXSAyIEsuQi4gODcgZXhwbGFpbmVkOyBhbmQgb2YgTG9yZCBHcmVlbmUgTS5SLiBpbiBBbGRlcnNsYWRlIHYgSGVuZG9uIExhdW5kcnkgTHRkIFsxOTQ1XSBLLkIuIDE4OSBleHBsYWluZWQ7IFR1cm5lciB2IENpdmlsIFNlcnZpY2UgU3VwcGx5IEFzc29jaWF0aW9uIEx0ZCBbMTkyNl0gMSBLLkIuIDUwIG92ZXJydWxlZCBhbmQgRmFnYW4gdiBHcmVlbiAmYW1wOyBFZHdhcmRzIEx0ZCBbMTkyNl0gMSBLLkIuIDEwMiBvdmVycnVsZWQ7IGRpY3R1bSBvZiBMb3JkIERldmxpbiBpbiBNY0N1dGNoZW9uIHYgRGF2aWQgTWFjQnJheW5lIEx0ZCBbMTk2NF0gMSBXLkwuUi4gMTI1IGRpc2FwcHJvdmVkKS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0hDIiwKICAgICJDQVRFR09SWSI6ICJDb250cmFjdHMgJm1kYXNoOyBDb21tZXJjaWFsIFByb3BlcnR5ICZtZGFzaDsgTWlzcmVwcmVzZW50YXRpb24gJm1kYXNoOyBNaXN0YWtlIG9mIExhdyAmbWRhc2g7IFNhbGUgQnkgQXVjdGlvbiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29udHJhY3RzIiwKICAgICAgICAiQ29tbWVyY2lhbCBQcm9wZXJ0eSIsCiAgICAgICAgIk1pc3JlcHJlc2VudGF0aW9uIiwKICAgICAgICAiTWlzdGFrZSBvZiBMYXciLAogICAgICAgICJTYWxlIEJ5IEF1Y3Rpb24iCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgSGVkbGV5IEJ5cm5lICYgQ28gTHRkIHYgSGVsbGVyICYgUGFydG5lcnMiLAogICAgICAgICIod2wpIElubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biBMdGQiLAogICAgICAgICIod2wpIEVzc28gUGV0cm9sZXVtIENvIEx0ZCB2IE1hcmRvbiIsCiAgICAgICAgIih3bCkgQ3VydGlzIHYgQ2hlbWljYWwgQ2xlYW5pbmcgJiBEeWVpbmcgQ28iLAogICAgICAgICIod2wpIFBhbyBPbiB2IExhdSBZaXUgTG9uZyIsCiAgICAgICAgIih3bCkgQWxwZW5zdG93IHYgUmVnYWxpYW4gUHJvcGVydGllcyIsCiAgICAgICAgIih3bCkgT2NlYW4gVHJhbXAgVGFua2VycyBDb3Jwb3JhdGlvbiB2IFYiLAogICAgICAgICIod2wpIFRvb2wgTWV0YWwgTWFudWZhY3R1cmluZyBDbyBMdGQgdiBUdW5nc3RlbiBFbGVjdHJpYyBDbyBMdGQiLAogICAgICAgICIod2wpIEJyaXRpc2ggQ3JhbmUgSGlyZSBDb3Jwb3JhdGlvbiBMdGQgdiBJcHN3aWNoIFBsYW50IEhpcmUgTHRkIiwKICAgICAgICAiKHdsKSBTdWRicm9vayBUcmFkaW5nIEVzdGF0ZSBMdGQgdiBFZ2dsZXRvbiIsCiAgICAgICAgIih3bCkgUmUgU2VsZWN0bW92ZSBMdGQiLAogICAgICAgICIod2wpIEJsYWNrcG9vbCBhbmQgRnlsZGUgQWVyb2NsdWIgTHRkIHYgQmxhY2twb29sIEJvcm91Z2ggQ291bmNpbCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIwMiIsCiAgICAiWUVBUiI6ICIyMDAyIiwKICAgICJOQU1FIjogIih3bCkgUGFua2hhbmlhIHYgSGFja25leSBCb3JvdWdoIENvdW5jaWwiLAogICAgIkNJVCI6ICJbMjAwMl0gRVdIQyAyNDQxIChDaCkiLAogICAgIkNJVEFUSU9OIjogIlBhbmtoYW5pYSB2IEhhY2tuZXkgQm9yb3VnaCBDb3VuY2lsIFsyMDAyXSBFV0hDIDI0NDEgKENoKSIsCiAgICAiSlVER0UiOiAiUmV4IFRlZGQgUUMiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImdpdmluZyBqdWRnbWVudCBmb3IgdGhlIGNsYWltYW50IGluIHBhcnQsIHRoYXQgb24gYSBwcm9wZXIgY29uc3RydWN0aW9uIG9mIHRoZSByZXByZXNlbnRhdGlvbnMgbWFkZSBpbiB0aGUgY2F0YWxvZ3VlLCBILCBieSBpdHMgYWdlbnRzLCBoYWQgcmVwcmVzZW50ZWQgdGhhdCB0aGUgYXJyYW5nZW1lbnQgYmV0d2VlbiBIIGFuZCBOQ1AgaGFkIHRoZSBsZWdhbCBjaGFyYWN0ZXIgb2YgYSBsaWNlbmNlIGFuZCB3YXMgdGVybWluYWJsZSBvbiB0aHJlZSBtb250aHMgbm90aWNlLiBJbiB2aWV3IG9mIHRoZSBmYWN0IHRoYXQgdGhlIHRydWUgbGVnYWwgY2hhcmFjdGVyIG9mIE5DUCYjODIxNztzIGludGVyZXN0IHdhcyBhIGJ1c2luZXNzIHRlbmFuY3kgcHJvdGVjdGVkIHVuZGVyIHRoZSAxOTU0IEFjdCB0aGVyZSB3YXMgYSBjbGVhciBtaXNyZXByZXNlbnRhdGlvbi4gVGhlICYjODIyMDttaXNyZXByZXNlbnRhdGlvbiBvZiBsYXcmIzgyMjE7IHJ1bGUgbm8gbG9uZ2VyIGV4aXN0ZWQgZm9sbG93aW5nIHRoZSBkZWNpc2lvbiBvZiB0aGUgSG91c2Ugb2YgTG9yZHMgaW4gS2xlaW53b3J0IEJlbnNvbiBMdGQgdiBMaW5jb2xuIENpdHkgQ291bmNpbCBbMTk5OV0gMiBBLkMuIDM0OSBhbmQgYWNjb3JkaW5nbHkgdGhlIG1pc3JlcHJlc2VudGF0aW9uIHdhcyBhY3Rpb25hYmxlLCBLbGVpbndvcnQgY29uc2lkZXJlZC4gVGhlIHRlcm1pbm9sb2d5IHVzZWQgaGFkIGJlZW4gZGVsaWJlcmF0ZSB3aXRoIHRoZSBhaW0gb2YgY29uY2VhbGluZyB0aGUgZXhpc3RlbmNlIG9mIGEgcHJvdGVjdGVkIHRlbmFuY3kuIFAgaGFkIGJlZW4gaW5kdWNlZCB0byBwdXJjaGFzZSBpbiByZWxpYW5jZSB1cG9uIHRoZSByZXByZXNlbnRhdGlvbiBhbmQgaXQgaGFkIGJlZW4gcmVhc29uYWJsZSBmb3IgaGltIHNvIHRvIHJlbHkuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiVUtITCIsCiAgICAiQ0FURUdPUlkiOiAiQ29udHJhY3RzICZtZGFzaDsgTWlzcmVwcmVzZW50YXRpb24gJm1kYXNoOyBNdXNpYyBJbmR1c3RyeSAmbWRhc2g7IFNwb25zb3JzaGlwIC8gTmVnbGlnZW5jZSAmbWRhc2g7IEFkdmljZSAmbWRhc2g7IEJhbmtzICZtZGFzaDsgRHV0eSBvZiBDYXJlICZtZGFzaDsgRWNvbm9taWMgTG9zcyAmbWRhc2g7IE5lZ2xpZ2VudCBNaXNzdGF0ZW1lbnQgJm1kYXNoOyBQcm9mZXNzaW9uYWwgTmVnbGlnZW5jZSAmbWRhc2g7IFJlbGlhbmNlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIENhcGFybyBJbmR1c3RyaWVzIHBsYyB2IERpY2ttYW4iLAogICAgICAgICIod2wpIEhlbmRlcnNvbiB2IE1lcnJldHQgU3luZGljYXRlcyIsCiAgICAgICAgIih3bCkgRXNzbyBQZXRyb2xldW0gQ28gTHRkIHYgTWFyZG9uIiwKICAgICAgICAiKHdsKSBHcmFuIEdlbGF0byBMdGQgdiBSaWNoY2xpZmYgKEdyb3VwKSBMdGQiLAogICAgICAgICIod2wpIFJveXNjb3QgVHJ1c3QgdiBSb2dlcnNvbiIsCiAgICAgICAgIih3bCkgU2NhbGx5IHYgU291dGhlcm4gSGVhbHRoIGFuZCBTb2NpYWwgU2VydmljZXMgQm9hcmQiLAogICAgICAgICIod2wpIFBhbmtoYW5pYSB2IEhhY2tuZXkgQm9yb3VnaCBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyAmIER5ZWluZyBDbyIsCiAgICAgICAgIih3bCkgTWNDdWxsb3VnaCB2IExhbmUgRm94IGFuZCBQYXJ0bmVycyBMdGQiLAogICAgICAgICIod2wpIElubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biBMdGQiLAogICAgICAgICIod2wpIFNob2d1biBGaW5hbmNlIEx0ZCB2IEh1ZHNvbiIsCiAgICAgICAgIih3bCkgR3JlYXQgUGVhY2UgU2hpcHBpbmcgTHRkIHYgVHNhdmxpcmlzIChJbnRlcm5hdGlvbmFsKSBMdGQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIyMDMiLAogICAgIllFQVIiOiAiMTk2NCIsCiAgICAiQ09VTlNFTCI6ICJGb3IgdGhlIGFwcGVsbGFudHM6IEdlcmFsZCBHYXJkaW5lciBRQywgREdBIExvd2UuIEZvciB0aGUgcmVzcG9uZGVudHM6IEpvaG4gRm9zdGVyIFFDLCBKTSBTaGF3LCBMIEJsb20tQ29vcGVyLCBCIEFubnMuIiwKICAgICJBQlNUUkFDVCI6IFsKICAgICAgICAiVGhlIGFwcGVsbGFudCBjb21wYW55IChIKSBhcHBlYWxlZCBhZ2FpbnN0IHRoZSBDb3VydCBvZiBBcHBlYWwmIzgyMTc7cyBkZWNpc2lvbiB0aGF0IGl0IGNvdWxkIG5vdCByZWNvdmVyIGRhbWFnZXMgYXJpc2luZyBmcm9tIG1vbmV5cyBsb3N0IGluIHJlbGlhbmNlIG9uIHRoZSBjcmVkaXQgcmVmZXJlbmNlIGdpdmVuIGJ5IHRoZSByZXNwb25kZW50IGJhbmsgKFgpIGluIHJlc3BlY3Qgb2Ygb25lIG9mIFgmIzgyMTc7cyBjdXN0b21lcnMgKEUpLiIsCiAgICAgICAgIkggd2FzIGFuIGFkdmVydGlzaW5nIGFnZW50IHdobyBoYWQgcGxhY2VkIHN1YnN0YW50aWFsIG9yZGVycyBmb3IgYWR2ZXJ0aXNpbmcgc3BhY2UgZm9yIEUsIGZvciB3aGljaCBIIHdhcyBwZXJzb25hbGx5IGxpYWJsZS4gSCBoYWQgdGhlbiBlbnF1aXJlZCBvZiBYIGFzIHRvIHRoZSBjcmVkaXR3b3J0aGluZXNzIG9mIEUsIGFuZCBpbiByZWxpYW5jZSBvbiB0aGUgcmVwcmVzZW50YXRpb25zIEggcmVmcmFpbmVkIGZyb20gY2FuY2VsbGluZyB0aGUgb3JkZXJzIHRvIHJlbGlldmUgaXRzIHBlcnNvbmFsIGxpYWJpbGl0eS4gSCBiZWNhbWUgZG91YnRmdWwgYWJvdXQgdGhlIGZpbmFuY2lhbCBwb3NpdGlvbiBvZiBFLCBhbmQgaXQgc291Z2h0IGEgZnVydGhlciByZWZlcmVuY2UgJiM4MjIwO3dpdGhvdXQgcmVzcG9uc2liaWxpdHkmIzgyMjE7IGZyb20gWC4gWCYjODIxNztzIHJlc3BvbnNlIHRvIEgsIHN0YXRlZCB0byBiZSAmIzgyMjA7Zm9yIHlvdXIgcHJpdmF0ZSB1c2UgYW5kIHdpdGhvdXQgcmVzcG9uc2liaWxpdHkgb24gdGhlIHBhcnQgb2YgdGhlIGJhbmsmIzgyMjE7LCB3YXMgdGhhdCBFIHdhcyBjb25zaWRlcmVkIGdvb2QgZm9yIGl0cyBvcmRpbmFyeSBidXNpbmVzcyBlbmdhZ2VtZW50cy4gQWZ0ZXIgdGhhdCBjb21tdW5pY2F0aW9uLCBIIGxvc3QgbW9uZXkgd2hlbiBFIHdlbnQgaW50byBsaXF1aWRhdGlvbi4gSCBzb3VnaHQgdG8gcmVjb3ZlciB0aGUgbW9uZXkgbG9zdCBieSBhIGNsYWltIGluIG5lZ2xpZ2VuY2UgYWdhaW5zdCBYLiBCeSBhdXRob3JpdHkgYmluZGluZyB1cG9uIHRoZW0sIGJvdGggdGhlIGp1ZGdlIGF0IGZpcnN0IGluc3RhbmNlIGFuZCB0aGUgQ291cnQgb2YgQXBwZWFsIGNvbnNpZGVyZWQgdGhlbXNlbHZlcyBkcml2ZW4gdG8gdGhlIGNvbmNsdXNpb24gdGhhdCBubyBzdWNoIGFjdGlvbiBjb3VsZCBsaWUgaW4gdGhlIGFic2VuY2Ugb2YgYSBjb250cmFjdCBvciBmaWR1Y2lhcnkgcmVsYXRpb25zaGlwLCBhbmQgdGhhdCBubyBzcGVjaWFsIHJlbGF0aW9uc2hpcCBpbnZvbHZpbmcgYSBkdXR5IG9mIGNhcmUgY291bGQgYmUgaW5mZXJyZWQuIgogICAgXSwKICAgICJOQU1FIjogIih3bCkgSGVkbGV5IEJ5cm5lICYgQ28gTHRkIHYgSGVsbGVyICYgUGFydG5lcnMiLAogICAgIkNJVCI6ICJbMTk2NF0gQUMgNDY1IiwKICAgICJDSVRBVElPTiI6ICJIZWRsZXkgQnlybmUgJmFtcDsgQ28gTHRkIHYgSGVsbGVyICZhbXA7IFBhcnRuZXJzIFsxOTY0XSBBQyA0NjUiLAogICAgIkpVREdFIjogIkxvcmQgUmVpZDsgTG9yZCBNb3JyaXM7IExvcmQgSG9kc29uOyBMb3JkIERldmxpbjsgTG9yZCBQZWFyY2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFwcGVhbCBkaXNtaXNzZWQuIiwKICAgICAgICAiKDEpIChQZXIgTG9yZCBSZWlkKSBUaGUgcHJpbmNpcGxlIGluIERvbm9naHVlIHYgU3RldmVuc29uIFsxOTMyXSBBLkMuIDU2MiBoYWQgbm8gZGlyZWN0IGJlYXJpbmcgb24gdGhlIGluc3RhbnQgY2FzZS4gRG9ub2dodWUgc2V0IG91dCB0byByZWZsZWN0IHRoZSBzdGFuZGFyZHMgb2YgdGhlIHJlYXNvbmFibGUgbWFuIGJ1dCByZWFzb25hYmxlIHBlb3BsZSBvZnRlbiBzdGF0ZWQgb3BpbmlvbnMgd2l0aG91dCB0YWtpbmcgY2FyZSwgc28gdGhlIGxhdyBoYWQgdG8gdHJlYXQgd29yZHMgYW5kIGFjdHMgZGlmZmVyZW50bHkgLiBJdCB3YXMgY2xlYXIgdGhhdCBsaWFiaWxpdHkgZm9yIG5lZ2xpZ2VudCBtaXNzdGF0ZW1lbnQgY291bGQgbm90IGJlIGZvdW5kZWQgb24gdGhlIERvbm9naHVlIHByaW5jaXBsZSBhbG9uZTsgc29tZXRoaW5nIG1vcmUgd2FzIHJlcXVpcmVkLCBuYW1lbHkgdGhhdCB0aGUgcmVwcmVzZW50b3IgaGFkIGV4cHJlc3NseSBvciBpbXBsaWVkbHkgdW5kZXJ0YWtlbiByZXNwb25zaWJpbGl0eSBmb3IgdGhlaXIgc3RhdGVtZW50LCBEb25vZ2h1ZSBjb25zaWRlcmVkLiBUaGUgZGVjaXNpb24gaW4gRGVycnkgdiBQZWVrICgxODg5KSAxNCBBcHAuIENhcy4gMzM3IGhhZCBub3QgZXN0YWJsaXNoZWQgYW55IHVuaXZlcnNhbCBydWxlIHRoYXQsIGluIHRoZSBhYnNlbmNlIG9mIGFueSBjb250cmFjdCwgYW4gaW5ub2NlbnQgKG5vdCBmcmF1ZHVsZW50KSBidXQgbmVnbGlnZW50IG1pc3JlcHJlc2VudGF0aW9uIGNvdWxkIG5vdCBnaXZlIHJpc2UgdG8gYW4gYWN0aW9uLCBOb2N0b24gdiBMb3JkIEFzaGJ1cnRvbiBbMTkxNF0gQS5DLiA5MzIgYXBwbGllZCwgRGVycnkgY29uc2lkZXJlZC4gSW4gdGhlIGxpZ2h0IG9mIHRoZSBkZWNpc2lvbiBpbiBSb2JpbnNvbiB2IE5hdGlvbmFsIEJhbmsgb2YgU2NvdGxhbmQgTHRkIDE5MTYgUy5DLiAoSC5MLikgMTU0LCBjb25jZXJuaW5nIGEgZHV0eSBvZiBjYXJlIGFyaXNpbmcgZnJvbSBvdGhlciAmIzgyMjA7c3BlY2lhbCByZWxhdGlvbnNoaXBzJiM4MjIxOyx0aGVyZSB3YXMgbm8gbG9naWNhbCBzdG9wcGluZyBwbGFjZSBzaG9ydCBvZiBhbGwgdGhvc2UgcmVsYXRpb25zaGlwcyB3aGVyZSB0aGUgcGFydHkgc2Vla2luZyB0aGUgYWR2aWNlIHdhcyByZWFzb25hYmx5IHRydXN0aW5nIHRoZSBvdGhlciB0byBleGVyY2lzZSBzdWNoIGEgZGVncmVlIG9mIGNhcmUgYXMgdGhlIGNpcmN1bXN0YW5jZXMgcmVxdWlyZWQsIGFuZCB3aGVyZSB0aGUgcmVwcmVzZW50b3Iga25ldyBvciBzaG91bGQgcmVhc29uYWJseSBoYXZlIGtub3duIHRoYXQgdGhlIGlucXVpcmVyIHdvdWxkIHJlbHkgb24gaGltLCBSb2JpbnNvbiBhcHBsaWVkLCBDYW5kbGVyIHYgQ3JhbmUgQ2hyaXN0bWFzICZhbXA7IENvIFsxOTUxXSAyIEsuQi4gMTY0IG92ZXJydWxlZCwgTGUgTGlldnJlIHYgR291bGQgWzE4OTNdIDEgUS5CLiA0OTEgbm90IGZvbGxvd2VkIGFuZCBDYW5uIHYgV2lsbHNvbiAoMTg4OCkgMzkgQ2guIEQuIDM5IGFwcHJvdmVkLiBUaGUgcmVsZXZhbnQgcXVlc3Rpb24gaW4gdGhlIGluc3RhbnQgY2FzZSB3YXMgd2hldGhlciBhbiB1bmRlcnRha2luZyB0byBhc3N1bWUgYSBkdXR5IHRvIHRha2UgY2FyZSBjb3VsZCBiZSBpbmZlcnJlZC4gU2luY2UgSCYjODIxNztzIGlucXVpcnkgaGFkIGJlZW4gcmVxdWVzdGVkICYjODIyMDt3aXRob3V0IHJlc3BvbnNpYmlsaXR5JiM4MjIxOyBmcm9tIFgsIGl0IHdhcyBjbGVhciB0aGF0IG5vIHN1Y2ggZHV0eSBjb3VsZCBiZSBpbmZlcnJlZC4gKDIpIChQZXIgTG9yZCBNb3JyaXMpIEl0IHNob3VsZCBiZSByZWdhcmRlZCBhcyBzZXR0bGVkIHRoYXQgaWYgc29tZW9uZSBwb3NzZXNzZWQgb2YgYSBzcGVjaWFsIHNraWxsIHVuZGVydG9vaywgaXJyZXNwZWN0aXZlIG9mIGNvbnRyYWN0LCB0byBhcHBseSB0aGF0IHNraWxsIGZvciB0aGUgYXNzaXN0YW5jZSBvZiBhbm90aGVyIHBlcnNvbiB3aG8gcmVsaWVkIHVwb24gc3VjaCBza2lsbCwgYSBkdXR5IG9mIGNhcmUgc2hvdWxkIGFyaXNlLiBUaGF0IHRoZSBzZXJ2aWNlIHdhcyBnaXZlbiBieSB3b3JkcyBtYWRlIG5vIGRpZmZlcmVuY2UuIFdoZXJlIGEgcGVyc29uIHdhcyBzbyBwbGFjZWQgdGhhdCBvdGhlcnMgY291bGQgcmVhc29uYWJseSByZWx5IG9uIGhpcyBza2lsbCwgYW5kIHRoYXQgcGVyc29uIGFsbG93ZWQgaGlzIGFkdmljZSB0byBiZSBwYXNzZWQgb24gdG8gYW5vdGhlciB3aG9tIGhlIGtuZXcgb3Igc2hvdWxkIGhhdmUga25vd24gd291bGQgcmVseSBvbiBpdCwgYSBkdXR5IG9mIGNhcmUgYWxzbyBhcm9zZS4gKDMpIChQZXIgTG9yZCBIb2Rzb24pIEEgYmFua2VyIGdpdmluZyByZWZlcmVuY2VzIGFzIHRvIGNyZWRpdC13b3J0aGluZXNzIHdhcyBub3QgdW5kZXIgYSBsZWdhbCBvYmxpZ2F0aW9uIHRvIGRvIG1vcmUgdGhhbiB0byBnaXZlIGhvbmVzdCBhbnN3ZXJzIHRvIHRoZSBiZXN0IG9mIGhpcyBhY3R1YWwga25vd2xlZGdlLiBIb3dldmVyLCBpbiBhY2NvcmRhbmNlIHdpdGggTG9yZCBNb3JyaXMsIHdoZXJlIGEgcGVyc29uIGdhdmUgYWR2aWNlIGluIHRoZSBrbm93bGVkZ2UgdGhhdCBpdCB3b3VsZCByZWFzb25hYmx5IGJlIHJlbGllZCB1cG9uLCBhIGR1dHkgb2YgY2FyZSBhcm9zZS4gKDQpIChQZXIgTG9yZCBEZXZsaW4pIFRoZSBwcm9ibGVtIGluIGlzc3VlIHdhcyBhIGJ5LXByb2R1Y3Qgb2YgdGhlIGRvY3RyaW5lIG9mIGNvbnNpZGVyYXRpb24gaW4gRW5nbGlzaCBsYXcuIFRoZSBzcGVjaWFsIHJlbGF0aW9uc2hpcCByZXF1aXJlZCB0byBlc3RhYmxpc2ggYSBkdXR5IG9mIGNhcmUgYXJvc2UgaW4gcmVsYXRpb25zaGlwcyAmIzgyMjA7ZXF1aXZhbGVudCB0byBjb250cmFjdCYjODIyMTsgd2hlcmUgdGhlcmUgd2FzIGFuIGFzc3VtcHRpb24gb2YgcmVzcG9uc2liaWxpdHkgd2hpY2gsIGJ1dCBmb3IgdGhlIGFic2VuY2Ugb2YgY29uc2lkZXJhdGlvbiwgd291bGQgY29uc3RpdHV0ZSBhIGNvbnRyYWN0LiBUaGUgcmVzcG9uc2liaWxpdHkgd2FzIG5vdCBvbmUgaW1wbGllZCBieSBsYXcsIGJ1dCBvbmUgd2hpY2ggd2FzIHZvbHVudGFyaWx5IGFjY2VwdGVkIGVpdGhlciBnZW5lcmFsbHkgd2hlcmUgYSBnZW5lcmFsIHJlbGF0aW9uc2hpcCB3YXMgY3JlYXRlZCBvciBzcGVjaWZpY2FsbHkgaW4gcmVsYXRpb24gdG8gYSBwYXJ0aWN1bGFyIHRyYW5zYWN0aW9uLiBXaGVyZSB0aGVyZSB3YXMgYSBnZW5lcmFsIHJlbGF0aW9uc2hpcCAoc3VjaCBhcyB0aGF0IG9mIHNvbGljaXRvci9jbGllbnQsIGJhbmtlci9jdXN0b21lciwgYWx0aG91Z2ggdGhlcmUgd2VyZSBvdGhlcnMgeWV0IHRvIGJlIGVzdGFibGlzaGVkKSBpdCB3YXMgdW5uZWNlc3NhcnkgdG8gcHJvdmUgYW55IG1vcmUgdGhhbiBpdHMgZXhpc3RlbmNlLCBhbmQgdGhlIGR1dHkgZm9sbG93ZWQuIFdoZXJlIGEgcGFydGljdWxhciByZWxhdGlvbnNoaXAgd2FzIGNyZWF0ZWQgYWQgaG9jIChhcyBpbiB0aGUgaW5zdGFudCBjYXNlKSB0aGUgZmFjdHMgaGFkIHRvIGJlIGV4YW1pbmVkIHRvIHNlZSBpZiB0aGVyZSB3YXMgYW4gZXhwcmVzcyBvciBpbXBsaWVkIHVuZGVydGFraW5nIG9mIHJlc3BvbnNpYmlsaXR5LiAoNSkgKFBlciBMb3JkIFBlYXJjZSkgVG8gaW1wb3J0IGEgZHV0eSBvZiBjYXJlLCB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIHBhcnRpZXMgaGFkIG5vcm1hbGx5IHRvIGNvbmNlcm4gYSBidXNpbmVzcyBvciBwcm9mZXNzaW9uYWwgdHJhbnNhY3Rpb24gd2hvc2UgbmF0dXJlIG1hZGUgY2xlYXIgdGhlIGdyYXZpdHkgb2YgdGhlIGlucXVpcnkuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnRyYWN0cyIsCiAgICAgICAgIk1pc3JlcHJlc2VudGF0aW9uIiwKICAgICAgICAiTXVzaWMgSW5kdXN0cnkiLAogICAgICAgICJTcG9uc29yc2hpcCIsCiAgICAgICAgIk5lZ2xpZ2VuY2UiLAogICAgICAgICJBZHZpY2UiLAogICAgICAgICJCYW5rcyIsCiAgICAgICAgIkR1dHkgb2YgQ2FyZSIsCiAgICAgICAgIkVjb25vbWljIExvc3MiLAogICAgICAgICJOZWdsaWdlbnQgTWlzc3RhdGVtZW50IiwKICAgICAgICAiUHJvZmVzc2lvbmFsIE5lZ2xpZ2VuY2UiLAogICAgICAgICJSZWxpYW5jZSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJVS0hMIiwKICAgICJDQVRFR09SWSI6ICJOZWdsaWdlbmNlICZtZGFzaDsgQXVkaXRvcnMgJm1kYXNoOyBEdXR5IG9mIENhcmUgJm1kYXNoOyBFY29ub21pYyBMb3NzICZtZGFzaDsgUHJvZmVzc2lvbmFsIE5lZ2xpZ2VuY2UgJm1kYXNoOyBTaGFyZWhvbGRlcnMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk5lZ2xpZ2VuY2UiLAogICAgICAgICJBdWRpdG9ycyIsCiAgICAgICAgIkR1dHkgb2YgQ2FyZSIsCiAgICAgICAgIkVjb25vbWljIExvc3MiLAogICAgICAgICJQcm9mZXNzaW9uYWwgTmVnbGlnZW5jZSIsCiAgICAgICAgIlNoYXJlaG9sZGVycyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBIZWRsZXkgQnlybmUgJiBDbyBMdGQgdiBIZWxsZXIgJiBQYXJ0bmVycyIsCiAgICAgICAgIih3bCkgSGVuZGVyc29uIHYgTWVycmV0dCBTeW5kaWNhdGVzIiwKICAgICAgICAiKHdsKSBTY2FsbHkgdiBTb3V0aGVybiBIZWFsdGggYW5kIFNvY2lhbCBTZXJ2aWNlcyBCb2FyZCIsCiAgICAgICAgIih3bCkgQlJTIHYgQXJ0aHVyIENydXRjaGxleSBMdGQiLAogICAgICAgICIod2wpIFJveXNjb3QgVHJ1c3QgdiBSb2dlcnNvbiIsCiAgICAgICAgIih3bCkgTWNSYWUgdiBDb21tb253ZWFsdGggRGlzcG9zYWxzIENvbW1pc3Npb24iLAogICAgICAgICIod2wpIE1jQ3VsbG91Z2ggdiBMYW5lIEZveCBhbmQgUGFydG5lcnMgTHRkIiwKICAgICAgICAiKHdsKSBHcmFuIEdlbGF0byBMdGQgdiBSaWNoY2xpZmYgKEdyb3VwKSBMdGQiLAogICAgICAgICIod2wpIEhvbGxpZXIgdiBSYW1ibGVyIE1vdG9ycyAoQU1DKSBMdGQiLAogICAgICAgICIod2wpIEVzc28gUGV0cm9sZXVtIENvIEx0ZCB2IE1hcmRvbiIsCiAgICAgICAgIih3bCkgRWxpYXNvbiB2IEhlbnNoYXciLAogICAgICAgICIod2wpIEhhcnZlbGEgSW52ZXN0bWVudHMgTHRkIHYgUm95YWwgVHJ1c3Qgb2YgQ2FuYWRhIEx0ZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIwNCIsCiAgICAiWUVBUiI6ICIxOTkwIiwKICAgICJDT1VOU0VMIjogIkZvciBDOiBDaHJpc3RvcGhlciBCYXRodXJzdCBRLkMuLCBNaWNoYWVsIEJyaW5kbGUgYW5kIENyYWlnIE9yci4gRm9yIFRSOiBQZXRlciBHb2xkc21pdGggUS5DLiBhbmQgU3RlcGhlbiBNb3JpYXJ0eS4iLAogICAgIk5BTUUiOiAiKHdsKSBDYXBhcm8gSW5kdXN0cmllcyBwbGMgdiBEaWNrbWFuIiwKICAgICJDSVQiOiAiWzE5OTBdIDIgQUMgNjA1IiwKICAgICJDSVRBVElPTiI6ICJDYXBhcm8gSW5kdXN0cmllcyBwbGMgdiBEaWNrbWFuIFsxOTkwXSAyIEFDIDYwNSIsCiAgICAiSlVER0UiOiAiTG9yZCBKYXVuY2V5IG9mIFR1bGxpY2hldHRsZTsgTG9yZCBPbGl2ZXIgb2YgQXlsbWVydG9uOyBMb3JkIFJvc2tpbGw7IExvcmQgQWNrbmVyOyBMb3JkIEJyaWRnZSBvZiBIYXJ3aWNoIiwKICAgICJIRUxEIjogWwogICAgICAgICJhbGxvd2luZyB0aGUgYXBwZWFsLCB0aGF0IG5vIGR1dHkgd2FzIG93ZWQgZWl0aGVyIHRvIGV4aXN0aW5nIHNoYXJlaG9sZGVycywgb3IgdG8gcG90ZW50aWFsIGludmVzdG9ycywgc2luY2UgZm9yIGEgZHV0eSB0byBhcmlzZSwgdGhyZWUgZmFjdG9ycyBoYWQgdG8gZXhpc3QsIG5hbWVseTogKDEpIGEgc3VmZmljaWVudCBkZWdyZWUgb2YgcHJveGltaXR5IGluIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgcGFydGllczsgKDIpIHRoZSBrbm93bGVkZ2UgdGhhdCB0aGUgcmVwb3J0IHdvdWxkIGJlIGNvbW11bmljYXRlZCB0byB0aGUgc2hhcmVob2xkZXIgb3IgaW52ZXN0b3IgaW4gY29ubmVjdGlvbiB3aXRoIGEgcGFydGljdWxhciB0cmFuc2FjdGlvbiBpbiB0aGUgY29udGVtcGxhdGlvbiBvZiB0aGUgcGFydGllcywgU21pdGggdiBFcmljIFMgQnVzaCAoQSBGaXJtKSBbMTk5MF0gMSBBLkMuIDgzMSBhcHBsaWVkLCBhbmQgKDMpIHRoZSBzaGFyZWhvbGRlciBvciBpbnZlc3RvciB3b3VsZCBwbGFjZSByZWxpYW5jZSBvbiB0aGUgcmVwb3J0IHdoZW4gZGVjaWRpbmcgd2hldGhlciB0byBlbnRlciBpbnRvIHRoZSByZWxldmFudCB0cmFuc2FjdGlvbi4gQXVkaXRvcnMgb2YgYSBwdWJsaWMgY29tcGFueSByb3V0aW5lbHkgcHJlcGFyaW5nIGFjY291bnRzLCBpbiBjb250cmFzdCB0byB0aGUgcHJlcGFyYXRpb24gb2YgYSByZXBvcnQgZm9yIGEgc3BlY2lmaWMgcHVycG9zZSBmb3IgYW4gaWRlbnRpZmllZCBwYXJ0eSwgb3dlZCBubyBkdXR5IHRvIHRoZSBwdWJsaWMgYXQgbGFyZ2Ugd2hvIG1pZ2h0IHBsYWNlIHJlbGlhbmNlIG9uIGNvbXBhbnkgYWNjb3VudHMgd2hlbiBtYWtpbmcgaW52ZXN0bWVudCBkZWNpc2lvbnMuIFRvIGltcG9zZSBzdWNoIGEgbGlhYmlsaXR5IHdvdWxkIG9wZW4gdGhlIGZsb29kZ2F0ZXMgdG8gYW4gaW5kZXRlcm1pbmF0ZWx5IHdpZGUgY2xhc3Mgb2YgcGVvcGxlLCBKRUIgRmFzdGVuZXJzIEx0ZCB2IE1hcmtzIEJsb29tICZhbXA7IENvIFsxOTgxXSAzIEFsbCBFLlIuIDI4OSBkaXN0aW5ndWlzaGVkLiBGdXJ0aGVybW9yZSwgaXQgd2FzIG5lY2Vzc2FyeSB0byBpbXBvc2Ugc29tZSBsaW1pdCBvbiBsaWFiaWxpdHkgZm9yIGVjb25vbWljIGxvc3MgYXJpc2luZyBpbiB0aGUgYWJzZW5jZSBvZiBhIGNvbnRyYWN0dWFsIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZSBwYXJ0aWVzLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIlVLSEwiLAogICAgIkNBVEVHT1JZIjogIk5lZ2xpZ2VuY2UgJm1kYXNoOyBBZ2VudHMnIExpYWJpbGl0aWVzICZtZGFzaDsgRHV0eSBvZiBDYXJlICZtZGFzaDsgSW5zdXJhbmNlICZtZGFzaDsgTGxveWQnUyAmbWRhc2g7IFByb2Zlc3Npb25hbCBOZWdsaWdlbmNlIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJOZWdsaWdlbmNlIiwKICAgICAgICAiQWdlbnRzJyBMaWFiaWxpdGllcyIsCiAgICAgICAgIkR1dHkgb2YgQ2FyZSIsCiAgICAgICAgIkluc3VyYW5jZSIsCiAgICAgICAgIkxsb3lkJ1MiLAogICAgICAgICJQcm9mZXNzaW9uYWwgTmVnbGlnZW5jZSIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBIZWRsZXkgQnlybmUgJiBDbyBMdGQgdiBIZWxsZXIgJiBQYXJ0bmVycyIsCiAgICAgICAgIih3bCkgQ2FwYXJvIEluZHVzdHJpZXMgcGxjIHYgRGlja21hbiIsCiAgICAgICAgIih3bCkgQWxiZXJ0IHYgTW90b3IgSW5zdXJlcnMnIEJ1cmVhdSIsCiAgICAgICAgIih3bCkgTWNSYWUgdiBDb21tb253ZWFsdGggRGlzcG9zYWxzIENvbW1pc3Npb24iLAogICAgICAgICIod2wpIEtpbmcncyBOb3J0b24gTWV0YWwgQ28gTHRkIHYgRWRyaWRnZSwgTWVycmV0dCAmIENvIiwKICAgICAgICAiKHdsKSBNY0N1bGxvdWdoIHYgTGFuZSBGb3ggYW5kIFBhcnRuZXJzIEx0ZCIsCiAgICAgICAgIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIsCiAgICAgICAgIih3bCkgRWxpYXNvbiB2IEhlbnNoYXciLAogICAgICAgICIod2wpIEdyYW4gR2VsYXRvIEx0ZCB2IFJpY2hjbGlmZiAoR3JvdXApIEx0ZCIsCiAgICAgICAgIih3bCkgU2NhbGx5IHYgU291dGhlcm4gSGVhbHRoIGFuZCBTb2NpYWwgU2VydmljZXMgQm9hcmQiLAogICAgICAgICIod2wpIEJSUyB2IEFydGh1ciBDcnV0Y2hsZXkgTHRkIiwKICAgICAgICAiKHdsKSBFc3NvIFBldHJvbGV1bSBDbyBMdGQgdiBNYXJkb24iCiAgICBdLAogICAgIk5VTUJFUiI6ICIyMDUiLAogICAgIllFQVIiOiAiMTk5NSIsCiAgICAiQ09VTlNFTCI6ICJGb3IgbWVtYmVycyYjODIxNzsgYWdlbnRzOiBCZXJuYXJkIEVkZXIgUS5DLiwgRGF2aWQgRm94dG9uIGFuZCBDaHJpc3RvcGhlciBCdXRjaGVyLiBGb3IgbWFuYWdpbmcgYWdlbnRzOiBBbnRob255IFRlbXBsZSBRLkMuLCBKb2huIFJvd2xhbmQsIEFpZGVuIENocmlzdGllIEhvdWdodG9uLiBGb3IgTmFtZXM6IEFudGhvbnkgQm9zd29vZCBRLkMuLCBHZW9mZnJleSBWb3MgUS5DLiwgU3RlcGhlbiBNb3JpYXJ0eSwgTWFyY3VzIFNtaXRoLCBKb25hdGhhbiBHYWlzbWFuIGFuZCBEYXZpZCBMb3JkLiIsCiAgICAiTkFNRSI6ICIod2wpIEhlbmRlcnNvbiB2IE1lcnJldHQgU3luZGljYXRlcyIsCiAgICAiQ0lUIjogIlsxOTk1XSAyIEFDIDE0NSIsCiAgICAiQ0lUQVRJT04iOiAiSGVuZGVyc29uIHYgTWVycmV0dCBTeW5kaWNhdGVzIFsxOTk1XSAyIEFDIDE0NSIsCiAgICAiSlVER0UiOiAiTG9yZCBLZWl0aCBvZiBLaW5rZWw7IExvcmQgR29mZiBvZiBDaGlldmVsZXk7IExvcmQgQnJvd25lLVdpbGtpbnNvbjsgTG9yZCBNdXN0aWxsOyBMb3JkIE5vbGFuIiwKICAgICJIRUxEIjogWwogICAgICAgICJkaXNtaXNzaW5nIEQmIzgyMTc7cyBhcHBlYWwsIHRoYXQgKDEpIHRoZSBkdXR5IG9mIGV4ZXJjaXNpbmcgcmVhc29uYWJsZSBza2lsbCBhbmQgY2FyZSBleGlzdHMgd2hlcmUgYSBwZXJzb24gdW5kZXJ0YWtlcyB0byBwZXJmb3JtIHByb2Zlc3Npb25hbCBvciBxdWFzaS1wcm9mZXNzaW9uYWwgc2VydmljZXMgZm9yIGFub3RoZXI7ICgyKSB0aGUgdW5kZXJ0YWtpbmcgb2Ygc3VjaCBkdXRpZXMsIHRvZ2V0aGVyIHdpdGggYSByZWxpYW5jZSBvbiB0aGVtIGlzIHN1ZmZpY2llbnQgdG8gZ2l2ZSByaXNlIHRvIGEgZHV0eSBvZiBjYXJlIGluIHRvcnQsIHVubGVzcyB0aGlzIGlzIHByZWNsdWRlZCBieSBjb250cmFjdHVhbCBhZ3JlZW1lbnQgYmV0d2VlbiB0aGUgcGFydGllczsgKDMpIEQgdW5kZXJ0b29rIHRvIGFjdCBhcyB0aGUgdW5kZXJ3cml0aW5nIGFnZW50cyBvZiBQIGFuZCBzbyB3ZXJlIGxpYWJsZSBmb3IgYW55IGxhY2sgb2Ygc2tpbGwgb3IgY2FyZSBvbiB0aGUgcGFydCBvZiB0aGUgbWFuYWdpbmcgYWdlbnRzIHRvIHdob20gdGhleSBkZWxlZ2F0ZWQgdGhlaXIgdW5kZXJ3cml0aW5nIGR1dGllcyBIZWRsZXkgQnlybmUgJmFtcDsgQ28gdiBIZWxsZXIgJmFtcDsgUGFydG5lcnMgWzE5NjRdIEEuQy4gMjY1LCBbMTk2M10gQy5MLlkuIDI0MTYgYXBwbGllZDsgTWlkbGFuZCBCYW5rIFRydXN0IENvIEx0ZCB2IEhldHQgU3R1YmJzICZhbXA7IEtlbXAgWzE5NzldIENoLiAzODQgYXBwcm92ZWQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiTmVnbGlnZW5jZSAmbWRhc2g7IEVzdGF0ZSBBZ2VudHMgJm1kYXNoOyBNaXNyZXByZXNlbnRhdGlvbiAmbWRhc2g7IE5lZ2xpZ2VuY2UiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk5lZ2xpZ2VuY2UiLAogICAgICAgICJFc3RhdGUgQWdlbnRzIiwKICAgICAgICAiTWlzcmVwcmVzZW50YXRpb24iLAogICAgICAgICJOZWdsaWdlbmNlIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIFJveXNjb3QgVHJ1c3QgdiBSb2dlcnNvbiIsCiAgICAgICAgIih3bCkgSGVkbGV5IEJ5cm5lICYgQ28gTHRkIHYgSGVsbGVyICYgUGFydG5lcnMiLAogICAgICAgICIod2wpIEVzc28gUGV0cm9sZXVtIENvIEx0ZCB2IE1hcmRvbiIsCiAgICAgICAgIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIsCiAgICAgICAgIih3bCkgUGFua2hhbmlhIHYgSGFja25leSBCb3JvdWdoIENvdW5jaWwiLAogICAgICAgICIod2wpIEN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nICYgRHllaW5nIENvIiwKICAgICAgICAiKHdsKSBIZW5kZXJzb24gdiBNZXJyZXR0IFN5bmRpY2F0ZXMiLAogICAgICAgICIod2wpIEVhc3QgdiBNYXVyZXIiLAogICAgICAgICIod2wpIEJSUyB2IEFydGh1ciBDcnV0Y2hsZXkgTHRkIiwKICAgICAgICAiKHdsKSBHcmFuIEdlbGF0byBMdGQgdiBSaWNoY2xpZmYgKEdyb3VwKSBMdGQiLAogICAgICAgICIod2wpIENhcGFybyBJbmR1c3RyaWVzIHBsYyB2IERpY2ttYW4iLAogICAgICAgICIod2wpIElubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biBMdGQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIyMDYiLAogICAgIkNPVU5TRUwiOiAiRm9yIE06IFBhdWwgTW9yZ2FuIFEuQy4gYW5kIFBoaWxpcCBIYXZlcnMgUS5DLiBGb3IgTEY6IFJ1cGVydCBKYWNrc29uIFEuQy4gYW5kIFJpY2hhcmQgTHluYWdoLiIsCiAgICAiTkFNRSI6ICIod2wpIE1jQ3VsbG91Z2ggdiBMYW5lIEZveCBhbmQgUGFydG5lcnMgTHRkIiwKICAgICJDSVQiOiAiNDkgQ29uIExSIDEyNCIsCiAgICAiQ0lUQVRJT04iOiAiTWNDdWxsb3VnaCB2IExhbmUgRm94IGFuZCBQYXJ0bmVycyBMdGQgNDkgQ29uIExSIDEyNCIsCiAgICAiSlVER0UiOiAiTm91cnNlIExKOyBIb2Job3VzZSBMSjsgU2lyIENocmlzdG9waGVyIFNsYWRlIiwKICAgICJIRUxEIjogWwogICAgICAgICJhcHBlYWwgZGlzbWlzc2VkLiBMRiBkaWQgbm90IG93ZSBhIGR1dHkgb2YgY2FyZSB0byBNIGJlY2F1c2UgdGhleSBoYWQgaW5jbHVkZWQgYSBkaXNjbGFpbWVyIGluIHRoZWlyIHNhbGVzIHBhcnRpY3VsYXJzIHdoaWNoIG5lZ2F0aXZlZCB0aGUgZWxlbWVudCBvZiBwcm94aW1pdHkgYW5kIHRoZSBhc3N1bXB0aW9uIG9mIHJlc3BvbnNpYmlsaXR5IGZvciB0aGUgc3RhdGVtZW50IHJlcXVpcmVkIHRvIGVzdGFibGlzaCBuZWdsaWdlbmNlLCBIZWRsZXkgQnlybmUgJmFtcDsgQ28gTHRkIHYgSGVsbGVyICZhbXA7IFBhcnRuZXJzIEx0ZCBbMTk2NF0gQS5DLiA0NjUgZm9sbG93ZWQuIEZ1cnRoZXJtb3JlLCBpdCB3YXMgbm90IHVuZmFpciB3aXRoaW4gcy4xMSBvZiB0aGUgVW5mYWlyIENvbnRyYWN0IFRlcm1zIEFjdCAxOTc3IHRvIGFsbG93IExGIHRvIHJlbHkgb24gdGhlIGRpc2NsYWltZXIuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiQ29tcGFueSBMYXcgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogRGFtYWdlcyAmbWRhc2g7IERhbWFnZXMgJm1kYXNoOyBGcmF1ZCAmbWRhc2g7IE1pc3JlcHJlc2VudGF0aW9uICZtZGFzaDsgU2FsZSBvZiBCdXNpbmVzcyAvIERhbWFnZXMgJm1kYXNoOyBEZWNlaXQgJm1kYXNoOyBNZWFzdXJlIG9mIERhbWFnZXMgJm1kYXNoOyBQcm9maXRzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb21wYW55IExhdyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBEYW1hZ2VzIiwKICAgICAgICAiRGFtYWdlcyIsCiAgICAgICAgIkZyYXVkIiwKICAgICAgICAiTWlzcmVwcmVzZW50YXRpb24iLAogICAgICAgICJTYWxlIG9mIEJ1c2luZXNzIiwKICAgICAgICAiRGFtYWdlcyIsCiAgICAgICAgIkRlY2VpdCIsCiAgICAgICAgIk1lYXN1cmUgb2YgRGFtYWdlcyIsCiAgICAgICAgIlByb2ZpdHMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgUm95c2NvdCBUcnVzdCB2IFJvZ2Vyc29uIiwKICAgICAgICAiKHdsKSBIIFBhcnNvbnMgKExpdmVzdG9jaykgTHRkIHYgVXR0bGV5IEluZ2hhbSAmIENvIiwKICAgICAgICAiKHdsKSBUcmFuc2ZpZWxkIFNoaXBwaW5nIEluYyB2IE1lcmNhdG9yIFNoaXBwaW5nIEluYyAoVGhlIEFjaGlsbGVhcykiLAogICAgICAgICIod2wpIFNjaGF3ZWwgdiBSZWFkZSIsCiAgICAgICAgIih3bCkgU2hvZ3VuIEZpbmFuY2UgTHRkIHYgSHVkc29uIiwKICAgICAgICAiKHdsKSBUaW5uIHYgSG9mZm1hbiAmIENvIiwKICAgICAgICAiKHdsKSBQYW5raGFuaWEgdiBIYWNrbmV5IEJvcm91Z2ggQ291bmNpbCIsCiAgICAgICAgIih3bCkgSGVkbGV5IEJ5cm5lICYgQ28gTHRkIHYgSGVsbGVyICYgUGFydG5lcnMiLAogICAgICAgICIod2wpIEVzc28gUGV0cm9sZXVtIENvIEx0ZCB2IE1hcmRvbiIsCiAgICAgICAgIih3bCkgR3JhbiBHZWxhdG8gTHRkIHYgUmljaGNsaWZmIChHcm91cCkgTHRkIiwKICAgICAgICAiKHdsKSBXYWxmb3JkIHYgTWlsZXMiLAogICAgICAgICIod2wpIEN1cnRpcyB2IENoZW1pY2FsIENsZWFuaW5nICYgRHllaW5nIENvIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjA3IiwKICAgICJZRUFSIjogIjE5OTEiLAogICAgIk5BTUUiOiAiKHdsKSBFYXN0IHYgTWF1cmVyIiwKICAgICJDSVQiOiAiWzE5OTFdIDEgV0xSIDQ2MSIsCiAgICAiQ0lUQVRJT04iOiAiRWFzdCB2IE1hdXJlciBbMTk5MV0gMSBXTFIgNDYxIiwKICAgICJKVURHRSI6ICJNdXN0aWxsIExKOyBCdXRsZXItU2xvc3MgSjsgQmVsZGFtIExKIiwKICAgICJIRUxEIjogWwogICAgICAgICJhbGxvd2luZyB0aGUgYXBwZWFsIGluIHBhcnQsIHRoYXQgKDEpIGRhbWFnZXMgZm9yIGRlY2VpdCB3ZXJlIGFzc2Vzc2VkIG9uIHRoZSBiYXNpcyB0aGF0IFAgc2hvdWxkIGJlIGNvbXBlbnNhdGVkIGZvciBhbGwgbG9zc2VzIHN1ZmZlcmVkLCBhbmQgdGhhdCB3aGVyZSB0aGUgbG9zc2VzIHdlcmUgbWFkZSBpbiB0aGUgY291cnNlIG9mIHJ1bm5pbmcgYSBidXNpbmVzcywgdGhlIGFzc2Vzc21lbnQgb2YgZGFtYWdlcyB3b3VsZCBpbmNsdWRlIGJvdGggYWN0dWFsIGxvc3NlcyBpbmN1cnJyZWQgYW5kIGxvc3Mgb2YgcHJvZml0cyB0aGF0IGNvdWxkIHJlYXNvbmFibHkgaGF2ZSBiZWVuIGFudGljaXBhdGVkOyAoMikgUCBoYWQgZmFpbGVkIHRvIGVhcm4gZXhwZWN0ZWQgcHJvZml0cyBmcm9tIHRoZSBidXNpbmVzcyBhbmQgd2FzIGVudGl0bGVkIHRvIHRoZSBsb3NzIG9mIGV4cGVjdGVkIHByb2ZpdHMsIGJ1dCB0aGUganVkZ2UgaGFkIGVycmVkIGluIGFzc2Vzc2luZyBkYW1hZ2VzIG9uIHRoZSBiYXNpcyB0aGF0IEQmIzgyMTc7cyBzdGF0ZW1lbnQgYW1vdW50ZWQgdG8gYSB3YXJyYW50eSB0aGF0IHRoZSBidXNpbmVzcyB3b3VsZCBoYXZlIHJlbWFpbmVkIGF0IHRoZSBzYW1lIGxldmVsLCBhbmQgYXBwcm9wcmlhdGUgZGFtYWdlcyBmb3IgbG9zcyBvZiBleHBlY3RlZCBwcm9maXRzIHdlcmUgR0JQIDEwLDAwMCAoRG95bGUgdiBPbGJ5IChJcm9ubW9uZ2VycykgTHRkIFsxOTY5XSAyIFEuQi4gMTU4IGFwcGxpZWQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBOZWdsaWdlbmNlICZtZGFzaDsgQ29udHJhY3QgVGVybXMgJm1kYXNoOyBNaXNyZXByZXNlbnRhdGlvbiAmbWRhc2g7IE5lZ2xpZ2VuY2UgJm1kYXNoOyBXYXJyYW50aWVzIC8gRGFtYWdlcyAmbWRhc2g7IEZvcmVzZWVhYmlsaXR5ICZtZGFzaDsgSGlyZSBQdXJjaGFzZSAmbWRhc2g7IE1lYXN1cmUgb2YgRGFtYWdlcyAmbWRhc2g7IE1pc3JlcHJlc2VudGF0aW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIEggUGFyc29ucyAoTGl2ZXN0b2NrKSBMdGQgdiBVdHRsZXkgSW5naGFtICYgQ28iLAogICAgICAgICIod2wpIEVzc28gUGV0cm9sZXVtIENvIEx0ZCB2IE1hcmRvbiIsCiAgICAgICAgIih3bCkgU2NoYXdlbCB2IFJlYWRlIiwKICAgICAgICAiKHdsKSBIb2xsaWVyIHYgUmFtYmxlciBNb3RvcnMgKEFNQykgTHRkIiwKICAgICAgICAiKHdsKSBFYXN0IHYgTWF1cmVyIiwKICAgICAgICAiKHdsKSBNY0N1bGxvdWdoIHYgTGFuZSBGb3ggYW5kIFBhcnRuZXJzIEx0ZCIsCiAgICAgICAgIih3bCkgQ3VydGlzIHYgQ2hlbWljYWwgQ2xlYW5pbmcgJiBEeWVpbmcgQ28iLAogICAgICAgICIod2wpIE9zY2FyIENoZXNzIEx0ZCB2IFdpbGxpYW1zIiwKICAgICAgICAiKHdsKSBJbm50cmVwcmVuZXVyIFB1YiBDbyB2IEVhc3QgQ3Jvd24gTHRkIiwKICAgICAgICAiKHdsKSBBamF5aSAoRUEpIHYgQnJpc2NvZSAoTmlnZXJpYSkgTHRkIiwKICAgICAgICAiKHdsKSBLYXJzYWxlcyAoSGFycm93KSBMdGQgdiBXYWxsaXMiLAogICAgICAgICIod2wpIEhlZGxleSBCeXJuZSAmIENvIEx0ZCB2IEhlbGxlciAmIFBhcnRuZXJzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjA4IiwKICAgICJZRUFSIjogIjE5OTEiLAogICAgIk5BTUUiOiAiKHdsKSBSb3lzY290IFRydXN0IHYgUm9nZXJzb24iLAogICAgIkNJVCI6ICJbMTk5MV0gMiBRQiAyOTciLAogICAgIkNJVEFUSU9OIjogIlJveXNjb3QgVHJ1c3QgdiBSb2dlcnNvbiBbMTk5MV0gMiBRQiAyOTciLAogICAgIkpVREdFIjogIkJhbGNvbWJlIExKOyBSYWxwaCBHaWJzb24gTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImRpc21pc3NpbmcgdGhlIGFwcGVhbCBhbmQgYWxsb3dpbmcgdGhlIGNyb3NzLWFwcGVhbCwgdGhhdCAoMSkgdGhlIG1lYXN1cmUgb2YgZGFtYWdlcyByZWNvdmVyYWJsZSBmb3IgaW5ub2NlbnQgbWlzcmVwcmVzZW50YXRpb24gdW5kZXIgcy4yKDEpIG9mIHRoZSAxOTY3IEFjdCB3YXMgdGhlIG1lYXN1cmUgZm9yIGZyYXVkdWxlbnQgbWlzcmVwcmVzZW50YXRpb24gcmF0aGVyIHRoYW4gZm9yIG5lZ2xpZ2VuY2U7ICgyKSBQIHdhcyBlbnRpdGxlZCB0byByZWNvdmVyIGRhbWFnZXMgZm9yIGFsbCBsb3NzZXMgc3VmZmVyZWQgYnkgaXQsIGZsb3dpbmcgZnJvbSB0aGUgZGVhbGVyJiM4MjE3O3MgbWlzcmVwcmVzZW50YXRpb24sIHByb3ZpZGVkIHRoYXQgdGhleSB3ZXJlIG5vdCB0b28gcmVtb3RlOyAoMykgc2luY2UgaXQgd2FzIHJlYXNvbmFibHkgZm9yZXNlZWFibGUgYnkgRCB0aGF0IEMgbWlnaHQgd3JvbmdmdWxseSBzZWxsIHRoZSBjYXIgYW5kIFAgdGhlcmVieSB3b3VsZCBzdWZmZXIgbG9zcywgdGhlIHNhbGUgYnkgQyB3YXMgbm90IGEgbm92dXMgYWN0dXMgaW50ZXJ2ZW5pZW5zOyBhY2NvcmRpbmdseSB0aGUganVkZ2UmIzgyMTc7cyBvcmRlciB3YXMgdmFyaWVkICggRG95bGUgdiBPbGJ5IChJcm9ubW9uZ2VycykgTHRkIFsxOTY5XSAyIFEuQi4gMTU4IGFwcGxpZWQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogTmVnbGlnZW5jZSIsCiAgICAgICAgIkNvbnRyYWN0IFRlcm1zIiwKICAgICAgICAiTWlzcmVwcmVzZW50YXRpb24iLAogICAgICAgICJOZWdsaWdlbmNlIiwKICAgICAgICAiV2FycmFudGllcyIsCiAgICAgICAgIkRhbWFnZXMiLAogICAgICAgICJGb3Jlc2VlYWJpbGl0eSIsCiAgICAgICAgIkhpcmUgUHVyY2hhc2UiLAogICAgICAgICJNZWFzdXJlIG9mIERhbWFnZXMiLAogICAgICAgICJNaXNyZXByZXNlbnRhdGlvbiIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJFV0hDIiwKICAgICJDQVRFR09SWSI6ICJMZWdhbCBQcm9mZXNzaW9uIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IEFnZW5jeSAmbWRhc2g7IEFnZW5jeSAmbWRhc2g7IENvbnZleWFuY2luZyAmbWRhc2g7IER1dHkgb2YgQ2FyZSAmbWRhc2g7IE1pc3JlcHJlc2VudGF0aW9uICZtZGFzaDsgU29saWNpdG9ycyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiTGVnYWwgUHJvZmVzc2lvbiBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBBZ2VuY3kiLAogICAgICAgICJBZ2VuY3kiLAogICAgICAgICJDb252ZXlhbmNpbmciLAogICAgICAgICJEdXR5IG9mIENhcmUiLAogICAgICAgICJNaXNyZXByZXNlbnRhdGlvbiIsCiAgICAgICAgIlNvbGljaXRvcnMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgSGVkbGV5IEJ5cm5lICYgQ28gTHRkIHYgSGVsbGVyICYgUGFydG5lcnMiLAogICAgICAgICIod2wpIE1jUmFlIHYgQ29tbW9ud2VhbHRoIERpc3Bvc2FscyBDb21taXNzaW9uIiwKICAgICAgICAiKHdsKSBFYXN0IHYgTWF1cmVyIiwKICAgICAgICAiKHdsKSBSb3lzY290IFRydXN0IHYgUm9nZXJzb24iLAogICAgICAgICIod2wpIFNjYWxseSB2IFNvdXRoZXJuIEhlYWx0aCBhbmQgU29jaWFsIFNlcnZpY2VzIEJvYXJkIiwKICAgICAgICAiKHdsKSBDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyAmIER5ZWluZyBDbyIsCiAgICAgICAgIih3bCkgQmFycnkgdiBEYXZpZXMiLAogICAgICAgICIod2wpIEhlbmRlcnNvbiB2IE1lcnJldHQgU3luZGljYXRlcyIsCiAgICAgICAgIih3bCkgU2NoYXdlbCB2IFJlYWRlIiwKICAgICAgICAiKHdsKSBDYXBhcm8gSW5kdXN0cmllcyBwbGMgdiBEaWNrbWFuIiwKICAgICAgICAiKHdsKSBNY0N1bGxvdWdoIHYgTGFuZSBGb3ggYW5kIFBhcnRuZXJzIEx0ZCIsCiAgICAgICAgIih3bCkgSW5udHJlcHJlbmV1ciBQdWIgQ28gdiBFYXN0IENyb3duIEx0ZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIwOSIsCiAgICAiWUVBUiI6ICIxOTkyIiwKICAgICJOQU1FIjogIih3bCkgR3JhbiBHZWxhdG8gTHRkIHYgUmljaGNsaWZmIChHcm91cCkgTHRkIiwKICAgICJDSVQiOiAiWzE5OTJdIENoIDU2MCIsCiAgICAiQ0lUQVRJT04iOiAiR3JhbiBHZWxhdG8gTHRkIHYgUmljaGNsaWZmIChHcm91cCkgTHRkIFsxOTkyXSBDaCA1NjAiLAogICAgIkpVREdFIjogIlNpciBEb25hbGQgTmljaG9sbHMgVkMiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImRpc21pc3NpbmcgdGhlIGNsYWltIGFnYWluc3QgdGhlIHNvbGljaXRvcnMgYW5kIGdpdmluZyBqdWRnbWVudCBmb3IgRyBhZ2FpbnN0IFIsIHRoYXQgaW4gbm9ybWFsIGNvbnZleWFuY2luZyB0cmFuc2FjdGlvbnMgYSBwdXJjaGFzZXIgaGFkIGEgcmVtZWR5IGFnYWluc3QgdGhlIHNlbGxlciBmb3IgYW55IG1pc3JlcHJlc2VudGF0aW9ucyBhbmQgc28gYSBzZWxsZXImIzgyMTc7cyBzb2xpY2l0b3Igb3dlZCB0aGUgYnV5ZXIgbm8gZHV0eSBvZiBjYXJlLiBJZiBhIHNvbGljaXRvciBzdGVwcGVkIG91dHNpZGUgdGhlIHJvbGUgb2Ygc29saWNpdG9yIGZvciBoaXMgY2xpZW50IGFuZCBhY2NlcHRlZCBhIGRpcmVjdCByZXNwb25zaWJpbGl0eSB0byB0aGUgYnV5ZXIgdGhlbiBhIGR1dHkgb2YgY2FyZSBtaWdodCBhcmlzZSwgYnV0IHRoYXQgaGFkIG5vdCBoYXBwZW5lZCBoZXJlLiBUaGUgYW5zd2VyIGdpdmVuIHRvIHRoZSBlbnF1aXJ5IHdhcyBhIG1pc3JlcHJlc2VudGF0aW9uIGJ5IFIgdXBvbiB3aGljaCBHIGhhZCByZWxpZWQgYW5kIEcgd2FzIGVudGl0bGVkIHRvIGRhbWFnZXMuIEEgZGVmZW5jZSB0aGF0IEcgaGFkIGJlZW4gY29udHJpYnV0b3JpbHkgbmVnbGlnZW50IChieSBmYWlsaW5nIHRvIGNhbGwgZm9yIHRoZSBoZWFkIGxlYXNlKSB3YXMgb3BlbiB0byBSIGJ1dCwgb24gdGhlIGZhY3RzLCBkaWQgbm90IHN1Y2NlZWQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiU2FsZSBvZiBHb29kcyAmbWRhc2g7IENvbnRyYWN0cyBvZiBTYWxlICZtZGFzaDsgUmVzY2lzc2lvbiAmbWRhc2g7IFRpdGxlIHRvIEdvb2RzIC8gUmVhbCBQcm9wZXJ0eSAmbWRhc2g7IEVhc2VtZW50cyAmbWRhc2g7IFByZWxpbWluYXJ5IElucXVpcmllcyAmbWRhc2g7IFJlYWwgUHJvcGVydHkgJm1kYXNoOyBSZXNjaXNzaW9uICZtZGFzaDsgU3RhbmRhcmQgRm9ybXMgb2YgQ29udHJhY3QiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlNhbGUgb2YgR29vZHMiLAogICAgICAgICJDb250cmFjdHMgb2YgU2FsZSIsCiAgICAgICAgIlJlc2Npc3Npb24iLAogICAgICAgICJUaXRsZSB0byBHb29kcyIsCiAgICAgICAgIlJlYWwgUHJvcGVydHkiLAogICAgICAgICJFYXNlbWVudHMiLAogICAgICAgICJQcmVsaW1pbmFyeSBJbnF1aXJpZXMiLAogICAgICAgICJSZWFsIFByb3BlcnR5IiwKICAgICAgICAiUmVzY2lzc2lvbiIsCiAgICAgICAgIlN0YW5kYXJkIEZvcm1zIG9mIENvbnRyYWN0IgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIFNob2d1biBGaW5hbmNlIEx0ZCB2IEh1ZHNvbiIsCiAgICAgICAgIih3bCkgR2VvcmdlIE1pdGNoZWxsIChDaGVzdGVyaGFsbCkgTHRkIHYgRmlubmV5IExvY2sgU2VlZHMiLAogICAgICAgICIod2wpIFBoYXJtYWNldXRpY2FsIFNvY2lldHkgb2YgR3JlYXQgQnJpdGFpbiB2IEJvb3RzIENhc2ggQ2hlbWlzdHMgKFNvdXRoZXJuKSBMdGQiLAogICAgICAgICIod2wpIEdyZWF0IFBlYWNlIFNoaXBwaW5nIEx0ZCB2IFRzYXZsaXJpcyAoSW50ZXJuYXRpb25hbCkgTHRkIiwKICAgICAgICAiKHdsKSBLYXJzYWxlcyAoSGFycm93KSBMdGQgdiBXYWxsaXMiLAogICAgICAgICIod2wpIEogRXZhbnMgJiBTb24gKFBvcnRzbW91dGgpIHYgQW5kcmVhIE1lcnphcmlvIEx0ZCIsCiAgICAgICAgIih3bCkgQ2l0eSBhbmQgV2VzdG1pbnN0ZXIgUHJvcGVydGllcyB2IE11ZGQiLAogICAgICAgICIod2wpIE9jZWFuIFRyYW1wIFRhbmtlcnMgQ29ycG9yYXRpb24gdiBWIiwKICAgICAgICAiKHdsKSBIb2x3ZWxsIFNlY3VyaXRpZXMgTHRkIHYgSHVnaGVzIiwKICAgICAgICAiKHdsKSBSZWFyZG9uIFNtaXRoIExpbmUgTHRkIHYgWW5ndmFyIEhhbnNlbi1UYW5nZW4iLAogICAgICAgICIod2wpIEJyaXRpc2ggQ3JhbmUgSGlyZSBDb3Jwb3JhdGlvbiBMdGQgdiBJcHN3aWNoIFBsYW50IEhpcmUgTHRkIiwKICAgICAgICAiKHdsKSBGaXNoZXIgdiBCZWxsIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjEwIiwKICAgICJZRUFSIjogIjE5OTQiLAogICAgIkNPVU5TRUwiOiAiRm9yIEM6IFRlcmVuY2UgRXRoZXJ0b24gUS5DLiBhbmQgU3RldmVuIEtvdmF0cy4gRm9yIFdTOiBKdWxlcyBTaGVyIFEuQy4gYW5kIFJleml5YSBIYXJyaXNvbi4iLAogICAgIk5BTUUiOiAiKHdsKSBXaWxsaWFtIFNpbmRhbGwgcGxjIHYgQ2FtYnJpZGdlc2hpcmUgQ291bnR5IENvdW5jaWwiLAogICAgIkNJVCI6ICJbMTk5NF0gMSBXTFIgMTAxNiIsCiAgICAiQ0lUQVRJT04iOiAiV2lsbGlhbSBTaW5kYWxsIHBsYyB2IENhbWJyaWRnZXNoaXJlIENvdW50eSBDb3VuY2lsIFsxOTk0XSAxIFdMUiAxMDE2IiwKICAgICJKVURHRSI6ICJSdXNzZWxsIExKOyBFdmFucyBMSjsgSG9mZm1hbm4gTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImFsbG93aW5nIHRoZSBhcHBlYWwsIHRoYXQgKDEpIFYgd2FzIHJlcXVpcmVkIHRvIGRpc2Nsb3NlIGVhc2VtZW50cyBhbmQgZW5jdW1icmFuY2VzIG9mIHdoaWNoIGl0IGhhZCBrbm93bGVkZ2Ugb3IgbWVhbnMgb2Yga25vd2xlZGdlLiBUaGUgTmF0aW9uYWwgQ29uZGl0aW9ucyBvZiBTYWxlIGxlZnQgbm8gcm9vbSBmb3IgcmVzY2lzc2lvbiBvbiB0aGUgZ3JvdW5kcyBvZiBtaXN0YWtlIGFuZCBjYXN0IHRoZSByaXNrIG9uIHRvIFAgYXMgdG8gdGhlIGV4aXN0ZW5jZSBvZiBlbmN1bWJyYW5jZXM7ICgyKSB0aGVyZSB3YXMgbm8gZXZpZGVuY2Ugb2YgbWlzcmVwcmVzZW50YXRpb24gYnkgViwgZWl0aGVyIG5lZ2xpZ2VudCBvciBvdGhlcndpc2U7ICgzKSB0aGUgcHJlc2VuY2Ugb2YgdGhlIHNld2VyIGRpZCBub3Qgc2VyaW91c2x5IGludGVyZmVyZSB3aXRoIHRoZSB1c2Ugb2YgdGhlIGxhbmQgc28gaXQgd291bGQgYmUgaW5lcXVpdGFibGUgZm9yIHRoZSBjb250cmFjdCB0byBiZSByZXNjaW5kZWQuIERhbWFnZXMgd291bGQgaGF2ZSBiZWVuIGF3YXJkZWQgaW4gbGlldSBvZiByZXNjaXNzaW9uIHVuZGVyIHRoZSBNaXNyZXByZXNlbnRhdGlvbiBBY3QgMTk2NyBzLjIoMiksIGhhZCB0aGVyZSBiZWVuIG1pc3JlcHJlc2VudGF0aW9uIChBc3NvY2lhdGVkIEphcGFuZXNlIEJhbmsgKEludGVybmF0aW9uYWwpIEx0ZCB2IENyZWRpdCBkdSBOb3JkIFNBIFsxOTg5XSAxIFcuTC5SLiAyNTUgYXBwbGllZDsgR3Jpc3QgdiBCYWlsZXkgWzE5NjddIENoLiA1MzIsIExhdXJlbmNlIHYgTGV4Y291cnQgSG9sZGluZ3MgWzE5NzhdIDEgVy5MLlIuIDExMjggZG91YnRlZCkuIFtQZXIgY3VyaWFtOiBUaGUgYXBwcm9wcmlhdGUgbWVhc3VyZSBvZiBkYW1hZ2VzIGF3YXJkZWQgaW4gbGlldSBvZiByZXNjaXNzaW9uIHVuZGVyIHRoZSBNaXNyZXByZXNlbnRhdGlvbiBBY3QgMTk2Nywgcy4yKDIpLCBpcyBkaWZmZXJlbnQgZnJvbSB0aGF0IHVuZGVyIHMuMigxKSwgYmVpbmcgdGhlIGRpZmZlcmVuY2UgaW4gdmFsdWUgYmV0d2VlbiB3aGF0IFAgd2FzIG1pc2xlZCBpbnRvIHRoaW5raW5nIGhlIHdhcyBidXlpbmcgYW5kIHRoZSB2YWx1ZSBvZiB3aGF0IGhlIGluIGZhY3QgcmVjZWl2ZWQsIGFuZCBkYW1hZ2VzIHNob3VsZCB0aGVyZWZvcmUgbmV2ZXIgZXhjZWVkIHRoZSBzdW0gd2hpY2ggd291bGQgaGF2ZSBiZWVuIHBheWFibGUgaGFkIHRoZSByZXByZXNlbnRhdGlvbiBiZWVuIGEgd2FycmFudHkuXSIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIiwKICAgICAgICAiSG9mZm1hbm4iCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdIQyIsCiAgICAiQ0FURUdPUlkiOiAiSW5zb2x2ZW5jeSBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBUcnVzdHMgJm1kYXNoOyBJbnN1cmFuY2UgJm1kYXNoOyBBZG1pbmlzdHJhdGlvbiAmbWRhc2g7IEFkbWluaXN0cmF0b3JzJyBQb3dlcnMgYW5kIER1dGllcyAmbWRhc2g7IEFwcG9ydGlvbm1lbnQgJm1kYXNoOyBDbGllbnQgQWNjb3VudHMgJm1kYXNoOyBEaXN0cmlidXRpb24gJm1kYXNoOyBFcXVpdGFibGUgSnVyaXNkaWN0aW9uICZtZGFzaDsgSW5zdXJhbmNlIEludGVybWVkaWFyaWVzICZtZGFzaDsgSW5zdXJhbmNlIFByZW1pdW1zICZtZGFzaDsgUmVtdW5lcmF0aW9uICZtZGFzaDsgU3RhdHV0b3J5IFRydXN0cyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBLaW5nJ3MgTm9ydG9uIE1ldGFsIENvIEx0ZCB2IEVkcmlkZ2UsIE1lcnJldHQgJiBDbyIsCiAgICAgICAgIih3bCkgQWxiZXJ0IHYgTW90b3IgSW5zdXJlcnMnIEJ1cmVhdSIsCiAgICAgICAgIih3bCkgSGVuZGVyc29uIHYgTWVycmV0dCBTeW5kaWNhdGVzIiwKICAgICAgICAiKHdsKSBDcm9zc2xleSB2IEZhaXRoZnVsICYgR291bGQgSG9sZGluZ3MiLAogICAgICAgICIod2wpIENpdHkgYW5kIFdlc3RtaW5zdGVyIFByb3BlcnRpZXMgdiBNdWRkIiwKICAgICAgICAiKHdsKSBNY1JhZSB2IENvbW1vbndlYWx0aCBEaXNwb3NhbHMgQ29tbWlzc2lvbiIsCiAgICAgICAgIih3bCkgQnJpdGlzaCBDcmFuZSBIaXJlIENvcnBvcmF0aW9uIEx0ZCB2IElwc3dpY2ggUGxhbnQgSGlyZSBMdGQiLAogICAgICAgICIod2wpIEhvbHdlbGwgU2VjdXJpdGllcyBMdGQgdiBIdWdoZXMiLAogICAgICAgICIod2wpIE9zY2FyIENoZXNzIEx0ZCB2IFdpbGxpYW1zIiwKICAgICAgICAiKHdsKSBBamF5aSAoRUEpIHYgQnJpc2NvZSAoTmlnZXJpYSkgTHRkIiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQiLAogICAgICAgICIod2wpIFNjaGF3ZWwgdiBSZWFkZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIxMSIsCiAgICAiWUVBUiI6ICIyMDE1IiwKICAgICJDT1VOU0VMIjogIkZvciB0aGUgYXBwbGljYW50czogVGhvbWFzIE11bmJ5LiBGb3IgdGhlIGZpcnN0IHJlc3BvbmRlbnQ6IFNpbW9uIERhdmVucG9ydCBRQywgQWlkYW4gQ2FzZXkuIEZvciB0aGUgc2Vjb25kIHJlc3BvbmRlbnQ6IFBoaWxsaXAgR2FsZS4iLAogICAgIkFCU1RSQUNUIjogWwogICAgICAgICJUaGUgYWRtaW5pc3RyYXRvcnMgb2YgdHdvIGluc29sdmVudCBpbnN1cmFuY2UgaW50ZXJtZWRpYXJpZXMgYXBwbGllZCwgdW5kZXIgdGhlIEluc29sdmVuY3kgQWN0IDE5ODYgU2NoLkIxIHBhcmEuNjMgb3IgYWx0ZXJuYXRpdmVseSBwdXJzdWFudCB0byB0aGUgY291cnQmIzgyMTc7cyBpbmhlcmVudCBlcXVpdGFibGUganVyaXNkaWN0aW9uLCBmb3IgZGlyZWN0aW9ucyBmb3IgdGhlIGRpc3RyaWJ1dGlvbiBvZiBtb25leXMgaGVsZCBpbiBjbGllbnQgYWNjb3VudHMuIiwKICAgICAgICAiQmVmb3JlIHRoZXkgd2VudCBpbnRvIGFkbWluaXN0cmF0aW9uLCB0aGUgY29tcGFuaWVzIG9wZXJhdGVkIGluIGNvbW1vbiBvd25lcnNoaXAuIEFsdGhvdWdoIGluc29sdmVudCwgdGhleSBoYWQgc2lnbmlmaWNhbnQgZnVuZHMgaW4gY2xpZW50IGFjY291bnRzIHJlcHJlc2VudGluZyBpbnN1cmFuY2UgcHJlbWl1bXMgdGhhdCBoYWQgYmVlbiByZWNlaXZlZCBmcm9tIGN1c3RvbWVycyBhbmQgbm90IHlldCBwYWlkIG9uIHRvIGluc3VyZXJzLiBUaG9zZSBhY2NvdW50cyB3ZXJlIHN1YmplY3QgdG8gdGhlIHN0YXR1dG9yeSB0cnVzdCByZWdpbWUgaW4gQ2hhcHRlciA1IG9mIHRoZSBDbGllbnQgQXNzZXRzIFNvdXJjZWJvb2sgKENBU1MgNSkgaW4gdGhlIEZpbmFuY2lhbCBDb25kdWN0IEF1dGhvcml0eSBIYW5kYm9vay4gQ0FTUyA1LjYuN1IgcHJvdmlkZWQgdGhhdCwgaW4gdGhlIGV2ZW50IG9mIGluc29sdmVuY3ksIGNsaWVudCBtb25leSBoYWQgdG8gYmUgdHJlYXRlZCBhcyBwb29sZWQgYW5kIHRoZW4gZGlzdHJpYnV0ZWQgc28gdGhhdCBlYWNoIGNsaWVudCByZWNlaXZlZCBhIHN1bSBjYWxjdWxhdGVkIGluIGFjY29yZGFuY2Ugd2l0aCBhIHNwZWNpZmljIG1ldGhvZCBzZXQgb3V0IGluIENBU1MgNS41LjY3Ui4gVGhlIGFkbWluaXN0cmF0b3JzIHRvb2sgdGhlIHZpZXcgdGhhdCwgc2luY2UgbmVpdGhlciBjb21wYW55IGhhZCBrZXB0IHByb3BlciByZWNvcmRzIG9mIHRoZSBlbnRpdGxlbWVudCB0byBjbGllbnQgYWNjb3VudCBmdW5kcywgaXQgd291bGQgYmUgaW1wcmFjdGljYWJsZSB0byBhdHRlbXB0IHRvIGFzY2VydGFpbiB0aGF0IGVudGl0bGVtZW50IHdpdGggY2VydGFpbnR5LiBBY2NvcmRpbmdseSwgdGhleSBwcm9wb3NlZCBhIHNjaGVtZSBvZiBkaXN0cmlidXRpb24gYW5kIGlkZW50aWZpZWQgYSBzY2hlZHVsZSBvZiBpc3N1ZXMgaW4gcmVzcGVjdCBvZiB3aGljaCB0aGV5IHNvdWdodCBwYXJ0aWN1bGFyIGd1aWRhbmNlLiIsCiAgICAgICAgIlRoZSBpc3N1ZXMgY29uY2VybmVkICgxKSB0aGUgcXVlc3Rpb24gd2hldGhlciB0aGUgZnVuZHMgaW4gdGhlIGNsaWVudCBhY2NvdW50cyB3ZXJlIHN1YmplY3QgdG8gdGhlIHN0YXR1dG9yeSB0cnVzdHMgb3IgYmVsb25nZWQgdG8gdGhlIGNvbXBhbmllczsgKDIpIHRoZSBhc2NlcnRhaW5tZW50IG9mIGVudGl0bGVtZW50IHRvIG1vbmV5cyBzdWJqZWN0IHRvIHRoZSBzdGF0dXRvcnkgdHJ1c3RzIGFuZCB0aGVpciBhcHBvcnRpb25tZW50IGFtb25nIHZhcmlvdXMgY2xhaW1hbnRzOyAoMykgYSBwb3NzaWJsZSBjbGFpbSBvbiBiZWhhbGYgb2YgdGhlIGZpcnN0IGNvbXBhbnkgYWdhaW5zdCB0aGUgc3RhdHV0b3J5IHRydXN0IHBvb2wgb2YgdGhlIHNlY29uZDsgKDQpIHRoZSBhZG1pbmlzdHJhdG9ycyYjODIxNzsgZW50aXRsZW1lbnQgdG8gcmVtdW5lcmF0aW9uIG91dCBvZiB0aGUgZnVuZHMgaW4gdGhlIHN0YXR1dG9yeSB0cnVzdHMuIgogICAgXSwKICAgICJOQU1FIjogIih3bCkgT3ZlcmJyb29rZSBFc3RhdGVzIEx0ZCB2IEdsZW5jb21iZSBQcm9wZXJ0aWVzIEx0ZCIsCiAgICAiQ0lUIjogIlsyMDE1XSBFV0hDIDM3MjEgKENoKSIsCiAgICAiQ0lUQVRJT04iOiAiT3ZlcmJyb29rZSBFc3RhdGVzIEx0ZCB2IEdsZW5jb21iZSBQcm9wZXJ0aWVzIEx0ZCBbMjAxNV0gRVdIQyAzNzIxIChDaCkiLAogICAgIkpVREdFIjogIkp1ZGdlIEtleXNlciBRQyIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiRGlyZWN0aW9ucyBnaXZlbi4iLAogICAgICAgICIoMSkgVGhlIHRydXN0cyYjODIxNzsgcHVycG9zZSB3YXMgdG8gcHJvdGVjdCB0aGUgY3VzdG9tZXJzIG9mIHRoZSBidXNpbmVzcyBhbmQgdGhlaXIgY29udGludWluZyBhZG1pbmlzdHJhdGlvbiB3YXMgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgY29tcGFuaWVzJiM4MjE3OyBhZmZhaXJzIGZvciB0aGUgcHVycG9zZXMgb2YgU2NoLkIxIHBhcmEuNTkgb2YgdGhlIEFjdC4gVGh1cywgdGhlIGNvdXJ0IGhhZCBwb3dlciB1bmRlciBTY2guQjEgcGFyYS42MyB0byBnaXZlIGRpcmVjdGlvbnMgdG8gdGhlIGFkbWluaXN0cmF0b3JzIGluIHJlc3BlY3Qgb2YgdGhvc2UgZnVuZHMgZXZlbiB0aG91Z2ggdGhleSBkaWQgbm90IGZvcm0gcGFydCBvZiB0aGUgY29tcGFueSYjODIxNztzIGFzc2V0cywgRGVubnkgdiBZZWxkb24gWzE5OTVdIDMgQWxsIEUuUi4gNjI0IGFwcGxpZWQuIEFsdGhvdWdoIHBhcmEuNjMgZGlkIG5vdCBzcGVjaWZ5IHRoZSBzY29wZSBvZiB0aGUgZGlyZWN0aW9ucyB0aGF0IG1pZ2h0IHByb3Blcmx5IGJlIGdpdmVuLCB0aGUgY291cnQgd2FzIGVudGl0bGVkIHRvIGV4ZXJjaXNlIGl0cyBpbmhlcmVudCBlcXVpdGFibGUganVyaXNkaWN0aW9uIHdoZW4gc2Vpc2VkIG9mIGFuIGFwcGxpY2F0aW9uIHVuZGVyIHRoYXQgcHJvdmlzaW9uLCBNRiBHbG9iYWwgVUsgTHRkIChJbiBTcGVjaWFsIEFkbWluaXN0cmF0aW9uKSwgUmUgWzIwMTNdIEVXSEMgMTY1NSAoQ2gpLCBbMjAxM10gMSBXLkwuUi4gMzg3NCBhcHBsaWVkIChzZWUgcGFyYXMgNDktNTUgb2YganVkZ21lbnQpLiIsCiAgICAgICAgIigyKSBDbGllbnQgbW9uZXkgd2FzIHJlY2VpdmVkIGFuZCBoZWxkIG9uIHRoZSBzdGF0dXRvcnkgdHJ1c3RzIHVubGVzcyB0aGUgZmlybSB3YXMgYWN0aW5nIGluIGFjY29yZGFuY2Ugd2l0aCBDQVNTIDUuNCwgdGhlIGNvbmRpdGlvbnMgZm9yIHdoaWNoIHdlcmUgbm90IGZ1bGZpbGxlZCBpbiB0aGUgaW5zdGFudCBjYXNlLiBNb3Jlb3ZlciwgdGhlcmUgd2FzIG5vdGhpbmcgdG8gc3VnZ2VzdCB0aGF0IGRlZHVjdGlvbnMgZm9yIGNvbW1pc3Npb24sIGludGVyZXN0IG9yIGFueSBvdGhlciBtYXR0ZXJzIHNob3VsZCBiZSBtYWRlIChwYXJhcyA2MCwgNjQsIDY3KS4gQWxsIGNsaWVudHMgd2l0aCBhIGNsaWVudCBtb25leSBlbnRpdGxlbWVudCB3ZXJlIHRvIGJlIHJlZ2FyZGVkIGFzIGVudGl0bGVkIHRvIHBhcnRpY2lwYXRlIGluIHRoZSByZWxldmFudCBwb29sLCBub3QgbWVyZWx5IHRob3NlIHdob3NlIGNvbnRyaWJ1dGlvbnMgd2VyZSBpZGVudGlmaWFibGUuIENsYWltcyBhZ2FpbnN0IHRoZSBwb29sIHdlcmUgbm90IGFmZmVjdGVkIHdoZXJlIHRoZSBjb3ZlciBoYWQgYmVlbiBwcm92aWRlZCBncmF0dWl0b3VzbHksIGFuZCBhbnkgY2xhaW1zIGJ5IGludGVybWVkaWFyaWVzIGZvciBmZWVzIG9yIGNvbW1pc3Npb24gd291bGQgYmUgY29uc2lkZXJlZCAocGFyYXMgNzEsIDczLCA3OCkuIiwKICAgICAgICAiKDMpIFRoZXJlIHdhcyBubyByZWFzb24gd2h5IG9uZSBzdGF0dXRvcnkgdHJ1c3Qgc2hvdWxkIG5vdCBpbiBwcmluY2lwbGUgYmUgYWJsZSB0byB0cmFjZSBpbnRvIHRoZSBhc3NldHMgb2YgYW5vdGhlciBzdGF0dXRvcnkgdHJ1c3Qgd2hlcmUgdGhlcmUgaGFkIGJlZW4gYSBicmVhY2ggb2YgdHJ1c3QuIEFsdGhvdWdoIENBU1Mgc3RhdHV0b3J5IHRydXN0cyBoYWQgdG8gYmUgdW5kZXJzdG9vZCBpbiB0ZXJtcyBvZiB0aGVpciBvd24gcmVndWxhdG9yeSBzY2hlbWUgYW5kIHdlcmUgbm90IGNvbmZpbmVkIGJ5IHRoZSBnZW5lcmFsIGxhdyBvZiB0cnVzdHMsIHRoYXQgZGlkIG5vdCBtZWFuIHRoYXQgdmljdGltcyBvZiB3cm9uZ3MgYWdhaW5zdCB0aGUgdHJ1c3Qgd2VyZSBkZXByaXZlZCBvZiBhbiBlcXVpdGFibGUgcmVtZWR5LiBXaGVyZSB0aGUgYnJlYWNoIG9mIHRydXN0IGhhZCBhcHBsaWVkIHByaW9yIHRvIHBvb2xpbmcsIHRoZSBlZmZlY3Qgb2Ygc3VjY2Vzc2Z1bCB0cmFjaW5nIGluIHN1cHBvcnQgb2YgYSBjbGFpbSB3b3VsZCBiZSB0byBhdWdtZW50IHRoZSBwb29sIHRvIHRoZSBiZW5lZml0IG9mIHRob3NlIHdobyB3ZXJlIGJlbmVmaWNpYXJpZXMgb2YgYSBzdGF0dXRvcnkgdHJ1c3QgYmVmb3JlIHBvb2xpbmcgb2NjdXJyZWQgKHBhcmFzIDExOC0xMTkpLiIsCiAgICAgICAgIig0KSBJZiBpdCBiZWNhbWUgY2xlYXIgdGhhdCBwb29yIHJlY29yZC1rZWVwaW5nIGNyZWF0ZWQgYSBuZWVkIGZvciBzaWduaWZpY2FudCB3b3JrIHRvIGJlIGRvbmUgYnkgdGhlIGFkbWluaXN0cmF0b3JzIHRvIGlkZW50aWZ5IGNsYWltYW50cywgYW4gYXBwbGljYXRpb24gb3VnaHQgdG8gYmUgbWFkZSB0byB0aGUgY291cnQgZm9yIGRpcmVjdGlvbnMgYW5kIGZvciBwcmlvciBzYW5jdGlvbiBvZiByZW11bmVyYXRpb24uIFRoZSB3b3JkcyAmIzgyMjA7Y29zdHMgcHJvcGVybHkgYXR0cmlidXRhYmxlIHRvIHRoZSBkaXN0cmlidXRpb24gb2YgdGhlIGNsaWVudCBtb25leSYjODIyMTsgaW4gQ0FTUyA1LjMuMlIgbWVhbnQgdGhlIGNvc3RzIGluY3VycmVkIGZvciB0aGUgcHVycG9zZSBvZiBlbmFibGluZyBzdWNoIGRpc3RyaWJ1dGlvbiB0byBiZSBtYWRlIGFuZCB0aGUgY29zdHMgb2YgbWFraW5nIHN1Y2ggYSBkaXN0cmlidXRpb24uIEFueSB3b3JrIHRoYXQgbWlnaHQgcHJvcGVybHkgYmUgZG9uZSB0byBlbmFibGUgdGhlIGFkbWluaXN0cmF0b3JzIHRvIGRpc3RyaWJ1dGUgdGhlIHRydXN0IG1vbmV5cyB3YXMgY2FwYWJsZSBvZiBiZWluZyByZW11bmVyYXRlZCB1bmRlciB0aGF0IHJ1bGU7IHRoZXJlZm9yZSwgdGhlcmUgd2FzIG5vIHJlYXNvbiB0byBoYXZlIHJlY291cnNlIHRvIGEgZ2VuZXJhbCBlcXVpdGFibGUganVyaXNkaWN0aW9uLiBIb3dldmVyLCBpZiBpdCBoYWQgYmVlbiBoZWxkIHRoYXQgdGhlIHJ1bGUgcmVsYXRlZCBvbmx5IHRvIHRoZSBjb3N0cyBvZiBtYWtpbmcgdGhlIGRpc3RyaWJ1dGlvbiwgdGhlIGp1cmlzZGljdGlvbiB1bmRlciBCZXJrZWxleSBBcHBsZWdhdGUgKEludmVzdG1lbnQgQ29uc3VsdGFudHMpIEx0ZCAoTm8uMSksIFJlIFsxOTg5XSBDaC4gMzIgd291bGQgaGF2ZSBiZWVuIGF2YWlsYWJsZSBpbiByZXNwZWN0IG9mIGNvc3RzIHJlbGF0aW5nIHRvIHByZWxpbWluYXJ5IHdvcmsgbm90IGNvdmVyZWQgYnkgdGhlIHJ1bGUuIEFjY29yZGluZyB0byB0aGF0IGp1cmlzZGljdGlvbiwgd2hlcmUgdGhlIGNvdXJ0IHdhcyBjb25zaWRlcmluZyB0aGUgZW5mb3JjZW1lbnQgb2YgYSBjbGFpbSB0byBhbiBlcXVpdGFibGUgaW50ZXJlc3QgaW4gcHJvcGVydHksIGl0IGhhZCBhIGRpc2NyZXRpb24gdG8gcmVxdWlyZSB0aGF0IGFuIGFsbG93YW5jZSBiZSBtYWRlIGZvciBjb3N0cyBpbmN1cnJlZCBhbmQgZm9yIHNraWxsIGFuZCBsYWJvdXIgZXhwZW5kZWQgaW4gY29ubmVjdGlvbiB3aXRoIHRoZSBhZG1pbmlzdHJhdGlvbiBvZiB0aGF0IHByb3BlcnR5LCBCZXJrZWxleSBBcHBsZWdhdGUgY29uc2lkZXJlZCAocGFyYXMgMTM5LCAxNDQtMTQ3KS4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkluc29sdmVuY3kgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogVHJ1c3RzIiwKICAgICAgICAiSW5zdXJhbmNlIiwKICAgICAgICAiQWRtaW5pc3RyYXRpb24iLAogICAgICAgICJBZG1pbmlzdHJhdG9ycycgUG93ZXJzIGFuZCBEdXRpZXMiLAogICAgICAgICJBcHBvcnRpb25tZW50IiwKICAgICAgICAiQ2xpZW50IEFjY291bnRzIiwKICAgICAgICAiRGlzdHJpYnV0aW9uIiwKICAgICAgICAiRXF1aXRhYmxlIEp1cmlzZGljdGlvbiIsCiAgICAgICAgIkluc3VyYW5jZSBJbnRlcm1lZGlhcmllcyIsCiAgICAgICAgIkluc3VyYW5jZSBQcmVtaXVtcyIsCiAgICAgICAgIlJlbXVuZXJhdGlvbiIsCiAgICAgICAgIlN0YXR1dG9yeSBUcnVzdHMiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiQ2l2aWwgUHJvY2VkdXJlIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IExlZ2FsIFByb2Zlc3Npb24gJm1kYXNoOyBDYXNlIE1hbmFnZW1lbnQgJm1kYXNoOyBDb25kaXRpb25hbCBGZWUgQWdyZWVtZW50cyAmbWRhc2g7IERlbGF5ICZtZGFzaDsgSnVkZ21lbnRzIGFuZCBPcmRlcnMgJm1kYXNoOyBKdWRpY2lhbCBEZWNpc2lvbi1NYWtpbmcgJm1kYXNoOyBOb24tQ29tcGxpYW5jZSAmbWRhc2g7IFBlbmFsdGllcyAmbWRhc2g7IFByb2Zlc3Npb25hbCBDb25kdWN0ICZtZGFzaDsgUHJvcG9ydGlvbmFsaXR5ICZtZGFzaDsgUmVsaWVmIEZyb20gU2FuY3Rpb25zIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDaXZpbCBQcm9jZWR1cmUgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogTGVnYWwgUHJvZmVzc2lvbiIsCiAgICAgICAgIkNhc2UgTWFuYWdlbWVudCIsCiAgICAgICAgIkNvbmRpdGlvbmFsIEZlZSBBZ3JlZW1lbnRzIiwKICAgICAgICAiRGVsYXkiLAogICAgICAgICJKdWRnbWVudHMgYW5kIE9yZGVycyIsCiAgICAgICAgIkp1ZGljaWFsIERlY2lzaW9uLU1ha2luZyIsCiAgICAgICAgIk5vbi1Db21wbGlhbmNlIiwKICAgICAgICAiUGVuYWx0aWVzIiwKICAgICAgICAiUHJvZmVzc2lvbmFsIENvbmR1Y3QiLAogICAgICAgICJQcm9wb3J0aW9uYWxpdHkiLAogICAgICAgICJSZWxpZWYgRnJvbSBTYW5jdGlvbnMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgS2luZydzIE5vcnRvbiBNZXRhbCBDbyBMdGQgdiBFZHJpZGdlLCBNZXJyZXR0ICYgQ28iLAogICAgICAgICIod2wpIEggUGFyc29ucyAoTGl2ZXN0b2NrKSBMdGQgdiBVdHRsZXkgSW5naGFtICYgQ28iLAogICAgICAgICIod2wpIENhdmVuZGlzaCBTcXVhcmUgSG9sZGluZyBCViB2IFRhbGFsIEVsIE1ha2Rlc3NpOyBQYXJraW5nRXllIEx0ZCB2IEJlYXZpcyIsCiAgICAgICAgIih3bCkgRGF2aXMgQ29udHJhY3RvcnMgTHRkIHYgRmFyZWhhbSBVcmJhbiBEaXN0cmljdCBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBBbHBlbnN0b3cgdiBSZWdhbGlhbiBQcm9wZXJ0aWVzIiwKICAgICAgICAiKHdsKSBDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDbyIsCiAgICAgICAgIih3bCkgQnJpdGlzaCBTdGVlbCBDb3Jwb3JhdGlvbiB2IENsZXZlbGFuZCBCcmlkZ2UgYW5kIEVuZ2luZWVyaW5nIENvIEx0ZCIsCiAgICAgICAgIih3bCkgV2lsbGlhbSBTaW5kYWxsIHBsYyB2IENhbWJyaWRnZXNoaXJlIENvdW50eSBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQiLAogICAgICAgICIod2wpIEJyaXRpc2ggQ3JhbmUgSGlyZSBDb3Jwb3JhdGlvbiBMdGQgdiBJcHN3aWNoIFBsYW50IEhpcmUgTHRkIiwKICAgICAgICAiKHdsKSBTY2hhd2VsIHYgUmVhZGUiLAogICAgICAgICIod2wpIENoYXBwZWxsICYgQ28gdiBOZXN0bGUgQ28gTHRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjEyIiwKICAgICJZRUFSIjogIjIwMTQiLAogICAgIkNPVU5TRUwiOiAiRm9yIHRoZSBkZWZlbmRhbnQvYXBwZWxsYW50IGluIHRoZSBmaXJzdCBhcHBlYWw6IEFuZHJldyBQIE1jTGF1Z2hsaW4uIEZvciB0aGUgY2xhaW1hbnRzL3Jlc3BvbmRlbnRzIGluIHRoZSBmaXJzdCBhcHBlYWw6IFJpY2hhcmQgU3RlYWQuIEZvciB0aGUgY2xhaW1hbnQvYXBwZWxsYW50IGluIHRoZSBzZWNvbmQgYXBwZWFsOiBHZXJhcmQgQ2xhcmtlLCBNYXJrIFZpbmFsbC4gRm9yIHRoZSBkZWZlbmRhbnRzL3Jlc3BvbmRlbnRzIGluIHRoZSBzZWNvbmQgYXBwZWFsOiBCZW4gQmxha2Vtb3JlLiBGb3IgdGhlIGNsYWltYW50L2FwcGVsbGFudCBpbiB0aGUgdGhpcmQgYXBwZWFsOiBWaWtyYW0gU2FjaGRldmEsIEphY2sgQW5kZXJzb24uIEZvciB0aGUgc2Vjb25kIGRlZmVuZGFudC8gc2Vjb25kIHJlc3BvbmRlbnQgaW4gdGhlIHRoaXJkIGFwcGVhbDogRGF2aWQgTW9oeXVkZGluLCBJYW4gVHVja2VyLiBGb3IgdGhlIGludGVydmVuZXJzOiBEYXZpZCBIb2xsYW5kIFFDLiIsCiAgICAiQUJTVFJBQ1QiOiBbCiAgICAgICAgIkluIHRocmVlIGNvbmpvaW5lZCBhcHBlYWxzIGluIHdoaWNoIG9uZSBvciBvdGhlciBwYXJ0eSBoYWQgc291Z2h0IHJlbGllZiBmcm9tIHNhbmN0aW9ucyBhcmlzaW5nIHB1cnN1YW50IHRvIENQUiByLjMuOSwgdGhlIGNvdXJ0IHdhcyByZXF1aXJlZCB0byBkZXRlcm1pbmUgdGhlIGNvcnJlY3QgYXBwcm9hY2ggdG8gdGhlIHJ1bGUgYW5kIHRvIHRoZSBndWlkYW5jZSBnaXZlbiBpbiBNaXRjaGVsbCB2IE5ld3MgR3JvdXAgTmV3c3BhcGVycyBMdGQgWzIwMTNdIEVXQ0EgQ2l2IDE1MzcsIFsyMDE0XSAxIFcuTC5SLiA3OTUuIiwKICAgICAgICAiVGhlIHJlc3BlY3RpdmUganVkZ2VzIGhhZCBwdXJwb3J0ZWQgdG8gYXBwbHkgdGhlIE1pdGNoZWxsIGd1aWRhbmNlLCBidXQgaW4gZWFjaCBjYXNlLCB0aGUgcGFydGllcyBoYWQgYmVlbiB0cmVhdGVkIGluY29uc2lzdGVudGx5LiBNIGl0Y2hlbGwgaGFkIHJlY2VpdmVkIGNyaXRpY2lzbSBmb3IgaGF2aW5nIGEgJiM4MjIwO3RyaXZpYWxpdHkmIzgyMjE7IHRlc3Qgd2hpY2ggZWZmZWN0aXZlbHkgYW1vdW50ZWQgdG8gYW4gJiM4MjIwO2V4Y2VwdGlvbmFsaXR5JiM4MjIxOyB0ZXN0LCB3aGVyZSB0aGUgbGF0dGVyIGhhZCBiZWVuIHJlamVjdGVkIGJ5IFNpciBSdXBlcnQgSmFja3NvbiYjODIxNztzICYjODIyMDtSZXZpZXcgb2YgQ2l2aWwgTGl0aWdhdGlvbiBjb3N0czogRmluYWwgUmVwb3J0JiM4MjIxOyBpbiBEZWNlbWJlciAyMDA5LiBJdCBoYWQgYWxzbyBiZWVuIGNyaXRpY2lzZWQgZm9yIGRlc2NyaWJpbmcgZmFjdG9ycyAoYSkgYW5kIChiKSBpbiByLjMuOSgxKSBhcyAmIzgyMjA7cGFyYW1vdW50IGNvbnNpZGVyYXRpb25zJiM4MjIxOyBhbmQgZG93bnBsYXlpbmcgdGhlIHJlcXVpcmVtZW50IGZvciB0aGUgY291cnQgdG8gY29uc2lkZXIgYWxsIHRoZSBjaXJjdW1zdGFuY2VzIG9mIHRoZSBjYXNlLiBJdCBoYWQgYmVlbiBmdXJ0aGVyIGNyaXRpY2lzZWQgZm9yIGNhdXNpbmcgZGlzcHJvcG9ydGlvbmF0ZSBwZW5hbHRpZXMgdG8gYmUgaW1wb3NlZCBmb3IgYnJlYWNoZXMgd2hpY2ggaGFkIGxpdHRsZSBwcmFjdGljYWwgZWZmZWN0IG9uIGxpdGlnYXRpb24uIFRoZSBpbnN0YW50IGNvdXJ0IHdhcyByZXF1aXJlZCB0byBleGFtaW5lIHRob3NlIGNyaXRpY2lzbXMuIgogICAgXSwKICAgICJOQU1FIjogIih3bCkgUmFmZmxlcyB2IFdpY2hlbGhhdXMiLAogICAgIkNJVCI6ICJbMjAxNF0gRVdDQSBDaXYgOTA2IiwKICAgICJDSVRBVElPTiI6ICJSYWZmbGVzIHYgV2ljaGVsaGF1cyBbMjAxNF0gRVdDQSBDaXYgOTA2IiwKICAgICJKVURHRSI6ICJMb3JkIER5c29uIE1SOyBKYWNrc29uIExKOyBWb3MgTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFwcGVhbHMgYWxsb3dlZC4iLAogICAgICAgICIoSmFja3NvbiBMSiBjb25jdXJyaW5nIGluIHRoZSByZXN1bHQgYnV0IGRpc3NlbnRpbmcgaW4gcGFydCBpbiB0aGUgcmVhc29uaW5nKSAoMSkgVGhlIHRleHQgb2Ygci4zLjkoMSkgY29udGFpbmVkIHRocmVlIGVsZW1lbnRzOiBpZGVudGlmaWNhdGlvbiBvZiB0aGUgJiM4MjIwO2ZhaWx1cmUgdG8gY29tcGx5JiM4MjIxOzsgY29uc2lkZXJhdGlvbiBvZiAmIzgyMjA7YWxsIHRoZSBjaXJjdW1zdGFuY2VzIG9mIHRoZSBjYXNlJiM4MjIxOzsgYW5kIGNvbnNpZGVyYXRpb24gb2YgZmFjdG9ycyAoYSkgYW5kIChiKS4gVGhlIGd1aWRhbmNlIGdpdmVuIGluIHBhcmFzIDQwIGFuZCA0MSBvZiBNaXRjaGVsbCBhcyB0byBob3cgdGhhdCBhcHByb2FjaCB3YXMgdG8gYmUgYXBwbGllZCBpbiBwcmFjdGljZSByZW1haW5lZCBzdWJzdGFudGlhbGx5IHNvdW5kLCBidXQgaXQgbmVlZGVkIHRvIGJlIGNsYXJpZmllZCBhbmQgZnVydGhlciBleHBsYWluZWQuIFNvbWUgZmlyc3QgaW5zdGFuY2UganVkZ2VzIGhhZCBpZ25vcmVkIHRoZSBmYWN0IHRoYXQgaXQgd2FzIG5lY2Vzc2FyeSB0byBjb25zaWRlciBhbGwgdGhlIGNpcmN1bXN0YW5jZXMgb2YgYSBjYXNlOyBvdGhlcnMgaGFkIGFkb3B0ZWQgYSBtb3JlIHRyYWRpdGlvbmFsIGFwcHJvYWNoIG9mIGdpdmluZyBwcmUtZW1pbmVuY2UgdG8gdGhlIG5lZWQgdG8gZGVjaWRlIGNsYWltcyBvbiB0aGVpciBtZXJpdHMgd2hlbiB0aGVyZSB3YXMgbm8gcm9vbSBmb3Igc3VjaCBhbiBhcHByb2FjaCBpbiB0aGUgcG9zdC1KYWNrc29uIGVyYS4gVXNlZnVsIGFtcGxpZmljYXRpb24gb2YgdGhlIE1pdGNoZWxsIGd1aWRhbmNlIGhhZCBhbHJlYWR5IGJlZW4gZ2l2ZW4gaW4gc29tZSBvZiB0aGUgYXV0aG9yaXRpZXMgaW1tZWRpYXRlbHkgZm9sbG93aW5nIHRoZSBNaXRjaGVsbCBkZWNpc2lvbiwgYnV0IHNvbWUganVkZ2VzIHdlcmUgYmVpbmcgdW5kdWx5IGRyYWNvbmlhbiBpbiB0aGVpciBhcHByb2FjaGVzLCBhbmQgb3RoZXJzIHVuZHVseSByZWxheGVkLiBUaGUgdmlldyB0aGF0IGFuIGFwcGxpY2F0aW9uIGZvciByZWxpZWYgd2FzIGJvdW5kIHRvIGZhaWwgdW5sZXNzIGEgZGVmYXVsdCBjb3VsZCBiZSBjaGFyYWN0ZXJpc2VkIGFzIHRyaXZpYWwsIG9yIHVubGVzcyB0aGVyZSB3YXMgYSBnb29kIHJlYXNvbiBmb3IgaXQsIHdhcyBsZWFkaW5nIHRvIG1hbmlmZXN0bHkgdW5qdXN0IGRlY2lzaW9ucyBhbmQgd2FzIGFuIGFwcHJvYWNoIHdoaWNoIHdhcyBub3QgbWFuZGF0ZWQgYnkgd2hhdCB0aGUgY291cnQgc2FpZCBpbiBNaXRjaGVsbCAuIFRoZSBmb2xsb3dpbmcgY2xhcmlmaWNhdGlvbiB3YXMgaW50ZW5kZWQgdG8gY3JlYXRlIGEgcmVhc29uYWJseSBjb25zaXN0ZW50IGp1ZGljaWFsIGFwcHJvYWNoIHRvIHRoZSBhcHBsaWNhdGlvbiBvZiByLjMuOSwgbWFraW5nIGl0IHVubmVjZXNzYXJ5IHRvIHJlZmVyIHRvIGVhcmxpZXIgYXV0aG9yaXRpZXMgaW4gZnV0dXJlLCBhbmQgYXNzaXN0aW5nIGluIHJlZHVjaW5nIHRoZSBuZWVkIGZvciBzYXRlbGxpdGUgbGl0aWdhdGlvbi4gSW4gZnV0dXJlLCBqdWRnZXMgd2VyZSB0byBhZG9wdCBhIHRocmVlLXN0YWdlIGFwcHJvYWNoOiAoYSkgdGhleSBoYWQgdG8gaWRlbnRpZnkgYW5kIGFzc2VzcyB0aGUgc2VyaW91c25lc3Mgb3Igc2lnbmlmaWNhbmNlIG9mIHRoZSByZWxldmFudCBmYWlsdXJlLiBUcml2aWFsaXR5IHdhcyBub3QgcGFydCBvZiB0aGF0IHN0YWdlLiBUaGVyZSB3ZXJlIGNsZWFybHkgZGVncmVlcyBvZiBzZXJpb3VzbmVzcyBhbmQgc2lnbmlmaWNhbmNlLiBUaGUgYXNzZXNzbWVudCBvdWdodCBub3QgdG8gaW52b2x2ZSBjb25zaWRlcmF0aW9uIG9mIHBhc3QgdW5yZWxhdGVkIGZhaWx1cmVzLCBvbmx5IHRoZSBzZXJpb3VzbmVzcyBhbmQgc2lnbmlmaWNhbmNlIG9mIHRoZSB2ZXJ5IGJyZWFjaCBpbiByZXNwZWN0IG9mIHdoaWNoIHJlbGllZiBmcm9tIHNhbmN0aW9ucyB3YXMgc291Z2h0LiBJZiBhIGJyZWFjaCB3YXMgbm90IHNlcmlvdXMgb3Igc2lnbmlmaWNhbnQsIHJlbGllZiB3b3VsZCB1c3VhbGx5IGJlIGdyYW50ZWQgYW5kIHRoZXJlIHdvdWxkIGJlIG5vIG5lZWQgdG8gc3BlbmQgbXVjaCB0aW1lIG9uIHRoZSBzZWNvbmQgYW5kIHRoaXJkIHN0YWdlczsgKGIpIHRoZSBzZWNvbmQgc3RhZ2UgZGlkIG5vdCBkZXJpdmUgZnJvbSByLjMuOSBidXQgd2FzIG5ldmVydGhlbGVzcyBpbXBvcnRhbnQ6IHRoZSBjb3VydCBoYWQgdG8gY29uc2lkZXIgd2h5IHRoZSBmYWlsdXJlIG9yIGRlZmF1bHQgb2NjdXJyZWQuIEl0IHdvdWxkIGJlIGluYXBwcm9wcmlhdGUgdG8gcHJvZHVjZSBhbiBlbmN5Y2xvcGVkaWEgb2YgZ29vZCBhbmQgYmFkIHJlYXNvbnM7IHBhcmFncmFwaCA0MSBvZiBNaXRjaGVsbCBnYXZlIHNvbWUgZXhhbXBsZXMgYnV0IHRoZXkgd2VyZSBub3RoaW5nIG1vcmUgdGhhbiB0aGF0OyAoYykgdGhlIHRoaXJkIHN0YWdlIHJlcXVpcmVkIHRoZSBjb3VydCB0byBjb25zaWRlciBhbGwgdGhlIGNpcmN1bXN0YW5jZXMgb2YgdGhlIGNhc2UuIEEgc2VyaW91cyBicmVhY2ggZm9yIG5vIHJlYXNvbiB3YXMgbm90IGF1dG9tYXRpY2FsbHkgcHJldmVudGVkIGZyb20gYXR0cmFjdGluZyByZWxpZWYuIEZhY3RvcnMgKGEpIGFuZCAoYikgaW4gci4zLjkgcmVtYWluZWQgb2YgcGFydGljdWxhciBpbXBvcnRhbmNlIGFuZCB3ZXJlIHRvIGJlIGdpdmVuIHBhcnRpY3VsYXIgd2VpZ2h0IGF0IHRoZSB0aGlyZCBzdGFnZS4gVGhlcmVmb3JlLCBpZiB0aGUgZWZmZWN0IG9mIGEgYnJlYWNoIHdhcyB0byBwcmV2ZW50IHRoZSBlZmZpY2llbnQgYW5kIHByb3BvcnRpb25hdGUgY29uZHVjdCBvZiBsaXRpZ2F0aW9uLCB0aGF0IHdvdWxkIHdlaWdoIGFnYWluc3QgcmVsaWVmIGJlaW5nIGdyYW50ZWQuIExpa2V3aXNlLCB0aGUgb2xkIGxheCBjdWx0dXJlIG9mIG5vbi1jb21wbGlhbmNlIHdpdGggcnVsZXMsIHByYWN0aWNlIGRpcmVjdGlvbnMgYW5kIG9yZGVycyB3YXMgbm8gbG9uZ2VyIHRvbGVyYXRlZCwgYW5kIGNvbXBsaWFuY2UgaGFkIHRvIGJlIGNvbnNpZGVyZWQgaW4gZXZlcnkgY2FzZS4gSG93ZXZlciwgb3RoZXIgcmVsZXZhbnQgZmFjdG9ycyB3b3VsZCBhbHNvIGJlIHJlbGV2YW50IGFuZCB3b3VsZCB2YXJ5IG9uIGEgY2FzZS1ieS1jYXNlIGJhc2lzIChzZWUgcGFyYXMgMjItMzgsIDgxLTgyIG9mIGp1ZGdtZW50KS4gKDIpIExpdGlnYXRpb24gY291bGQgbm90IGJlIGNvbmR1Y3RlZCBlZmZpY2llbnRseSBhbmQgcHJvcG9ydGlvbmF0ZWx5IHdpdGhvdXQgZm9zdGVyaW5nIGEgY3VsdHVyZSBvZiBjb21wbGlhbmNlIGFuZCBjby1vcGVyYXRpb24uIENQUiByLjEuMyByZXF1aXJlZCBwYXJ0aWVzIHRvIGhlbHAgdGhlIGNvdXJ0IHRvIGZ1cnRoZXIgdGhlIG92ZXJyaWRpbmcgb2JqZWN0aXZlIGFuZCB0aG9zZSB3aG8gb3Bwb3J0dW5pc3RpY2FsbHkgYW5kIHVucmVhc29uYWJseSBvcHBvc2VkIGFwcGxpY2F0aW9ucyBmb3IgcmVsaWVmIGZyb20gc2FuY3Rpb25zIGJyZWFjaGVkIHRoYXQgb2JsaWdhdGlvbi4gV2hlcmUgdGhlIGZhaWx1cmUgd2FzIG5laXRoZXIgc2VyaW91cyBub3Igc2lnbmlmaWNhbnQsIHdoZXJlIGEgZ29vZCByZWFzb24gd2FzIGRlbW9uc3RyYXRlZCwgYW5kIHdoZXJlIGl0IHdhcyBvdGhlcndpc2Ugb2J2aW91cyB0aGF0IHJlbGllZiBmcm9tIHNhbmN0aW9ucyBzaG91bGQgYmUgZ3JhbnRlZCwgcGFydGllcyBvdWdodCB0byBhZ3JlZSB0aGF0IHJlbGllZiBzaG91bGQgYmUgZ3JhbnRlZC4gSW4gYW55IGV2ZW50LCBleHRlbnNpb25zIG9mIHRpbWUgb2YgdXAgdG8gMjggZGF5cyBvdWdodCByZWFkaWx5IHRvIGJlIGdpdmVuLCBhcyBlbnZpc2FnZWQgYnkgci4zLjgoNCkuIENvbnRlc3RlZCBhcHBsaWNhdGlvbnMgZm9yIHJlbGllZiBvdWdodCB0byBhcmlzZSBvbmx5IGluIGV4Y2VwdGlvbmFsIGNhc2VzIChwYXJhcyAzOS00NCkuICgzKSBUaGUganVkZ2VzIGluIGVhY2ggb2YgdGhlIHRocmVlIGFwcGVhbHMgaGFkIGVycmVkIGluIHRoZWlyIGNhc2UgbWFuYWdlbWVudCBwb3dlcnMgYW5kIHRoZWlyIG9yZGVycyB3ZXJlIHNldCBhc2lkZS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJDcml0aWNpc2VkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIlBlcnNvbmFsIEluanVyeSBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBMZWdhbCBBZHZpY2UgYW5kIEZ1bmRpbmcgJm1kYXNoOyBUb3J0cyAmbWRhc2g7IENpdmlsIFByb2NlZHVyZSAmbWRhc2g7IEluc3VyYW5jZSAmbWRhc2g7IENvbmRpdGlvbmFsIEZlZSBBZ3JlZW1lbnRzICZtZGFzaDsgRmVlcyAmbWRhc2g7IEluc3VyYW5jZSBDb21wYW5pZXMgJm1kYXNoOyBMaWVucyAmbWRhc2g7IFBlcnNvbmFsIEluanVyeSBDbGFpbXMgJm1kYXNoOyBQcmUtQWN0aW9uIFByb3RvY29scyAmbWRhc2g7IFNldHRsZW1lbnQgJm1kYXNoOyBTb2xpY2l0b3JzJyBSZW11bmVyYXRpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgUmFmZmxlcyB2IFdpY2hlbGhhdXMiLAogICAgICAgICIod2wpIEFsYmVydCB2IE1vdG9yIEluc3VyZXJzJyBCdXJlYXUiLAogICAgICAgICIod2wpIEhlbmRlcnNvbiB2IE1lcnJldHQgU3luZGljYXRlcyIsCiAgICAgICAgIih3bCkgT3ZlcmJyb29rZSBFc3RhdGVzIEx0ZCB2IEdsZW5jb21iZSBQcm9wZXJ0aWVzIEx0ZCIsCiAgICAgICAgIih3bCkgQ29sbGllciB2IFdyaWdodCAoSG9sZGluZ3MpIEx0ZCIsCiAgICAgICAgIih3bCkgSG9sbGllciB2IFJhbWJsZXIgTW90b3JzIChBTUMpIEx0ZCIsCiAgICAgICAgIih3bCkgUGhhcm1hY2V1dGljYWwgU29jaWV0eSBvZiBHcmVhdCBCcml0YWluIHYgQm9vdHMgQ2FzaCBDaGVtaXN0cyAoU291dGhlcm4pIEx0ZCIsCiAgICAgICAgIih3bCkgQ3VydGlzIHYgQ2hlbWljYWwgQ2xlYW5pbmcgJiBEeWVpbmcgQ28iLAogICAgICAgICIod2wpIEogRXZhbnMgJiBTb24gKFBvcnRzbW91dGgpIHYgQW5kcmVhIE1lcnphcmlvIEx0ZCIsCiAgICAgICAgIih3bCkgS2xlaW53b3J0IEJlbnNvbiBMdGQgdiBNYWxheXNpYSBNaW5pbmcgQ29ycG9yYXRpb24iLAogICAgICAgICIod2wpIEJyaXRpc2ggU3RlZWwgQ29ycG9yYXRpb24gdiBDbGV2ZWxhbmQgQnJpZGdlIGFuZCBFbmdpbmVlcmluZyBDbyBMdGQiLAogICAgICAgICIod2wpIEdyb2dhbiB2IFJvYmluIE1lcmVkaXRoIFBsYW50IEhpcmUiCiAgICBdLAogICAgIk5VTUJFUiI6ICIyMTMiLAogICAgIllFQVIiOiAiMjAxNSIsCiAgICAiQ09VTlNFTCI6ICJGb3IgdGhlIGFwcGVsbGFudDogTGVzbGV5IEFuZGVyc29uIFFDLCBNYXJ0aW4gQnVkd29ydGguIEZvciB0aGUgcmVzcG9uZGVudDogTG9yZCBNYXJrcyBRQywgSmFtZXMgV2liYmVybGV5LiIsCiAgICAiQUJTVFJBQ1QiOiBbCiAgICAgICAgIkEgZmlybSBvZiBzb2xpY2l0b3JzIChHKSBhcHBlYWxlZCBhZ2FpbnN0IHRoZSBkaXNtaXNzYWwgKFsyMDE0XSBFV0hDIDMwNjIgKFFCKSwgWzIwMTVdIFIuVC5SLiAxNCkgb2YgaXRzIGNsYWltIGFnYWluc3QgdGhlIHJlc3BvbmRlbnQgaW5zdXJlci4iLAogICAgICAgICJHIGhhZCBlbnRlcmVkIGludG8gY29uZGl0aW9uYWwgZmVlIGFncmVlbWVudHMgKENGQXMpIHRvIHJlcHJlc2VudCBzaXggY2xpZW50cyBpbiBwZXJzb25hbCBpbmp1cnkgY2xhaW1zIGFnYWluc3QgdGhlIGluc3VyZXIuIFRoZSBpbnN1cmVyIGhhZCBzZXR0bGVkIHRoZSBjbGFpbXMgZGlyZWN0bHkgd2l0aCB0aGUgY2xpZW50cyBvbiBhbiBpbmNsdXNpdmUgYmFzaXMsIG1lYW5pbmcgdGhhdCBHIGhhZCBiZWVuIGRlcHJpdmVkIG9mIHRoZWlyIGNvc3RzLiBHIGhhZCB0aGVyZWZvcmUgYnJvdWdodCB0aGUgaW5zdGFudCBjbGFpbSBpbiBvcmRlciB0byByZWNvdmVyIHRoZWlyIGZlZXMsIGRpc2J1cnNlbWVudHMgYW5kIHN1Y2Nlc3MgZmVlcyBmcm9tIHRoZSBpbnN1cmVyLiBUaGV5IHNvdWdodCBlcXVpdGFibGUgaW50ZXJ2ZW50aW9uIGJ5IHRoZSBjb3VydCwgY2xhaW1pbmcgdGhhdCB0aGUgaW5zdXJlciBoYWQgd3JvbmdmdWxseSBwcmV2ZW50ZWQgdGhlbSBmcm9tIGVzdGFibGlzaGluZyBhIGxpZW4gb24gdGhlIHNldHRsZW1lbnQgc3VtcyBmb3IgdGhlaXIgY29zdHMuIFRoZSBDRkFzIGluY29ycG9yYXRlZCBhIExhdyBTb2NpZXR5IGRvY3VtZW50IHdoaWNoIHByb3ZpZGVkIHRoYXQgYSBjbGllbnQgd2hvIHdvbiB0aGUgY2xhaW0gd291bGQgcGF5IEcmIzgyMTc7cyBjaGFyZ2VzLCBkaXNidXJzZW1lbnRzIGFuZCBhIHN1Y2Nlc3MgZmVlLCB3aGljaCBpdCBjb3VsZCBjbGFpbSBmcm9tIGl0cyBvcHBvbmVudC4gSG93ZXZlciwgZWFjaCBjbGllbnQgYWxzbyByZWNlaXZlZCBhIGNsaWVudCBjYXJlIGxldHRlciB3aGljaCBpbmRpY2F0ZWQgdGhhdCBpZiB0aGUgY2xpZW50IHdvbiwgRyB3b3VsZCBiZSBhYmxlIHRvIHJlY292ZXIgdGhlaXIgZmVlcywgZGlzYnVyc2VtZW50cyBhbmQgc3VjY2VzcyBmZWUgZnJvbSB0aGUgb3Bwb25lbnQgYW5kIGhhZCB0aGUgcmlnaHQgdG8gdGFrZSByZWNvdmVyeSBhY3Rpb24gaW4gdGhlIGNsaWVudCYjODIxNztzIG5hbWUuIEVhY2ggQ0ZBIHdhcyBzdWJqZWN0IHRvIHRoZSBDYW5jZWxsYXRpb24gb2YgQ29udHJhY3RzIG1hZGUgaW4gYSBDb25zdW1lciYjODIxNztzIEhvbWUgb3IgUGxhY2Ugb2YgV29yayBldGMuIFJlZ3VsYXRpb25zIDIwMDgsIG1lYW5pbmcgdGhhdCBlYWNoIGNsaWVudCBoYWQgdGhlIHJpZ2h0IHRvIGNhbmNlbCBoaXMgcmV0YWluZXIgd2l0aGluIGEgc2V2ZW4tZGF5IHBlcmlvZC4gSW4gdGhlIGNhc2Ugb2YgdHdvIG9mIHRoZSBjbGllbnRzLCB0aGUgaW5zdXJlciBtYWRlIHRoZSBvZmZlciB0byBjb21wcm9taXNlIHdpdGhpbiB0aGF0IHNldmVuLWRheSBwZXJpb2QuIiwKICAgICAgICAiVGhlIGlzc3VlcyB3ZXJlIHdoZXRoZXI6IiwKICAgICAgICAiKGkpIHRoZSBwcmluY2lwbGUgb2YgZXF1aXRhYmxlIGludGVydmVudGlvbiBzZXQgb3V0IGluIEtoYW5zIFNvbGljaXRvcnMgdiBDaGlmdW50d2UgWzIwMTNdIEVXQ0EgQ2l2IDQ4MSwgWzIwMTRdIDEgVy5MLlIuIDExODUgY291bGQgb3BlcmF0ZSBvbmx5IHdoZXJlIGEgZGVmZW5kYW50IGhhZCBleHByZXNzIG5vdGljZSBvZiBhIGxpZW47IiwKICAgICAgICAiKGlpKSBhIGxpZW4gY291bGQgYXJpc2UgaW4gY2lyY3Vtc3RhbmNlcyB3aGVyZSB0aGUgY2xpZW50cyB3ZXJlIHVuZGVyIG5vIHBlcnNvbmFsIGxpYWJpbGl0eSB0byBwYXkgRyYjODIxNztzIGZlZXM7IiwKICAgICAgICAiKGlpaSkgdGhlIGluc3VyZXImIzgyMTc7cyBsaWFiaWxpdHkgd2FzIGFmZmVjdGVkIGJ5IHRoZSBmYWN0IHRoYXQgYW4gb2ZmZXIgbWlnaHQgaGF2ZSBiZWVuIG1hZGUgYXQgYSB0aW1lIHdoZW4gYSByZXRhaW5lciBjb3VsZCBzdGlsbCBiZSBjYW5jZWxsZWQuIgogICAgXSwKICAgICJOQU1FIjogIih3bCkgS2luZydzIE5vcnRvbiBNZXRhbCBDbyBMdGQgdiBFZHJpZGdlLCBNZXJyZXR0ICYgQ28iLAogICAgIkNJVCI6ICJbMjAxNV0gRVdDQSBDaXYgMTIzMCIsCiAgICAiQ0lUQVRJT04iOiAiS2luZyYjODIxNztzIE5vcnRvbiBNZXRhbCBDbyBMdGQgdiBFZHJpZGdlLCBNZXJyZXR0ICZhbXA7IENvIFsyMDE1XSBFV0NBIENpdiAxMjMwIiwKICAgICJKVURHRSI6ICJMYXdzIExKOyBFbGlhcyBMSjsgTGxveWQgSm9uZXMgTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFwcGVhbCBhbGxvd2VkLiIsCiAgICAgICAgIigxKSBUaGVyZSB3YXMgbm8gcmVhc29uIGluIHByaW5jaXBsZSB3aHkgaW1wbGllZCwgcmF0aGVyIHRoYW4gZXhwcmVzcywgbm90aWNlIG9mIGEgbGllbiBzaG91bGQgbm90IGJlIHN1ZmZpY2llbnQgZm9yIHRoZSBvcGVyYXRpb24gb2YgdGhlIHByaW5jaXBsZSBvZiBlcXVpdGFibGUgaW50ZXJ2ZW50aW9uLiBJbiBhbnkgZXZlbnQsIGV4cHJlc3Mgbm90aWNlIGhhZCBiZWVuIGdpdmVuIGluIHRoZSBpbnN0YW50IGNhc2UuIEl0IHdhcyBhcHBhcmVudCBmcm9tIHRyYW5zY3JpcHRzIG9mIHRlbGVwaG9uZSBjYWxscyB0aGF0IHRoZSBpbnN1cmVyIGhhZCBpbnRlbmRlZCB0byBhdm9pZCBwYXlpbmcgRyYjODIxNztzIGNvc3RzIGJ5IGVudGVyaW5nIGludG8gYSBzZXR0bGVtZW50IGRpcmVjdGx5IHdpdGggdGhlIGNsaWVudHMuIFRoZSBpbnN1cmVyJiM4MjE3O3Mga25vd2xlZGdlIG9mIGFuZCBwYXJ0aWNpcGF0aW9uIGluIHRoZSBzY2hlbWUgZXN0YWJsaXNoZWQgYnkgdGhlIFByZS1BY3Rpb24gUHJvdG9jb2wgZm9yIExvdyBWYWx1ZSBQZXJzb25hbCBJbmp1cnkgQ2xhaW1zIGluIFJvYWQgVHJhZmZpYyBBY2NpZGVudHMgbWVhbnQgdGhhdCBpdCB3YXMgd2VsbCBhd2FyZSBvZiBHJiM4MjE3O3MgaW50ZXJlc3QgaW4gcmVjZWl2aW5nIGl0cyBmaXhlZCBjb3N0cyBhbmQgb3RoZXIgc3VtcyBkdWUgdW5kZXIgdGhlIHNjaGVtZSwgS2hhbnMgYXBwbGllZCAoc2VlIHBhcmFzIDI1LTI2LCAyOC0yOSBvZiBqdWRnbWVudCkuIiwKICAgICAgICAiKDIpIFRoZXJlIHdhcyBhIHRlbnNpb24gYmV0d2VlbiB0aGUgcHJvdmlzaW9ucyBpbiB0aGUgQ0ZBcy4gVGhlIHByb3Zpc2lvbiBpbiB0aGUgY2xpZW50IGNhcmUgbGV0dGVyIGhhZCB0byBwcmV2YWlsIGJlY2F1c2UgaXQgd2FzIGV4cHJlc3NlZCB0byBiZSBmb3IgdGhlIGF2b2lkYW5jZSBvZiBkb3VidC4gVGhhdCBtZWFudCB0aGF0IEcgaGFkIG5vIHJlY291cnNlIGFnYWluc3QgdGhlaXIgY2xpZW50cyBmb3IgdGhlIGZlZXMgYW5kIHdlcmUgbGltaXRlZCB0byB3aGF0IHRoZXkgY291bGQgcmVjb3ZlciBmcm9tIHRoZSBsb3Npbmcgc2lkZS4gSW4gdGhvc2UgY2lyY3Vtc3RhbmNlcywgdGhleSB3b3VsZCBub3QgaGF2ZSBhIGxpZW4gb3ZlciBhc3NldHMgcmVjZWl2ZWQgaW4gdGhlaXIgY2xpZW50cyYjODIxNzsgYWNjb3VudCBiZWNhdXNlIHRoZSBjbGllbnRzIGhhZCBubyB1bmRlcmx5aW5nIGxpYWJpbGl0eSB0byB0aGVtLiBIb3dldmVyLCB1bmRlciB0aGUgbm9ybWFsIGNvdXJzZSBvZiBldmVudHMsIEcgd291bGQgaGF2ZSBhbiBlbnRpdGxlbWVudCB0byByZWNvdmVyIHRoZSBmaXhlZCBjb3N0cyBhbmQgb3RoZXIgc3VtcyBwYXlhYmxlIHVuZGVyIHRoZSBQcm90b2NvbCBzY2hlbWUuIFRoYXQgd2FzIGVpdGhlciBhbiBlbnRpdGxlbWVudCBvZiB0aGUgc29saWNpdG9ycyB0aGVtc2VsdmVzIG9yLCBhbHRlcm5hdGl2ZWx5LCBhbiBlbnRpdGxlbWVudCB0byBicmluZyBwcm9jZWVkaW5ncyBpbiB0aGUgbmFtZSBvZiB0aGUgY2xpZW50cyB0byByZWNvdmVyIHRob3NlIHN1bXMuIEluIGVpdGhlciBjYXNlLCBHIGhhZCBhbiBpbnRlcmVzdCB3aGljaCBlcXVpdHkgY291bGQgcHJvdGVjdCBhbmQgd2hpY2ggd2FzIGRlc2VydmluZyBvZiBwcm90ZWN0aW9uLiBUaGUgaW5zdXJlciB3YXMgYXdhcmUgb2YgdGhhdCBpbnRlcmVzdCBiZWNhdXNlIG9mIGl0cyBrbm93bGVkZ2Ugb2YgYW5kIHBhcnRpY2lwYXRpb24gaW4gdGhlIFByb3RvY29sIHNjaGVtZS4gVGhhdCBtaWdodCBpbnZvbHZlIGFuIGV4dGVuc2lvbiBvZiB0aGUgcHJpbmNpcGxlIGluIEtoYW5zICwgYnV0IHRoZXJlIHdhcyBubyByZWFzb24gd2h5IHRoYXQgcHJpbmNpcGxlIHNob3VsZCBub3QgYXBwbHkgaW4gdGhlIGNpcmN1bXN0YW5jZXMgb2YgdGhlIGNhc2UuIFRoZSBQcm90b2NvbCBzY2hlbWUgd2FzIG5vdCBtYW5kYXRvcnkgYW5kIGl0IHdhcyB0aGVyZWZvcmUgb3BlbiB0byB0aGUgaW5zdXJlciB0byBlbnRlciBpbnRvIGNvbXByb21pc2UgYWdyZWVtZW50cyB3aXRoIHRoZSBjbGFpbWFudHMgb3V0c2lkZSB0aGUgUHJvdG9jb2wuIEhvd2V2ZXIsIHRoYXQgd2FzIG5vdCB3aGF0IGhhZCBoYXBwZW5lZC4gSW4gZWFjaCBjYXNlLCB0aGUgY2xpZW50IGhhZCBhdXRob3Jpc2VkIEcgdG8gY29tbWVuY2UgdGhlIFByb3RvY29sIHByb2Nlc3Mgb24gaGlzIGJlaGFsZiBhbmQgdGhlIGluc3VyZXIgaGFkIHZvbHVudGFyaWx5IGVudGVyZWQgaW50byB0aGUgUHJvdG9jb2wgcHJvY2Vzcy4gTmVpdGhlciB0aGUgY2xpZW50cyBub3IgdGhlIGluc3VyZXIgaGFkIGZvcm1hbGx5IGV4aXRlZCB0aGUgcHJvY2VzcyBiZWZvcmUgZW50ZXJpbmcgaW50byB0aGUgY29tcHJvbWlzZSBhZ3JlZW1lbnRzLiBUaGUgaW5zdXJlciBoYWQgYWN0ZWQgd2l0aCB0aGUgaW50ZW50aW9uIG9mIGRlZmVhdGluZyBHJiM4MjE3O3MgZW50aXRsZW1lbnQgdW5kZXIgdGhlIHNjaGVtZSwgS2hhbnMgYXBwbGllZCAocGFyYXMgMTgsIDMwLTMyKS4iLAogICAgICAgICIoMykgVGhlIGZhY3QgdGhhdCBhbiBvZmZlciBtaWdodCBoYXZlIGJlZW4gbWFkZSBhdCBhIHRpbWUgd2hlbiBhIHJldGFpbmVyIGNvdWxkIHN0aWxsIGJlIGNhbmNlbGxlZCBjb3VsZCBub3QgcmVsaWV2ZSB0aGUgaW5zdXJlciBvZiBsaWFiaWxpdHkuIEl0IHdvdWxkIGhhdmUgYmVlbiBvcGVuIHRvIHRoZSBpbnN1cmVyIHRvIG1ha2UgdGhlIG9mZmVyIGNvbmRpdGlvbmFsIHVwb24gY2FuY2VsbGF0aW9uIG9mIEcmIzgyMTc7IHJldGFpbmVyIHdpdGhpbiB0aGUgcGVybWl0dGVkIHBlcmlvZCwgYnV0IGl0IGRpZCBub3QgZG8gc28uIEluIGVhY2ggY2FzZSwgdGhlIGluc3VyZXIgYXNzdW1lZCB0aGUgcmlzayB0aGF0IGl0cyBvZmZlciBtaWdodCBiZSBhY2NlcHRlZCBhZnRlciB0aGUgZXhwaXJ5IG9mIHRoZSBjYW5jZWxsYXRpb24gcGVyaW9kLiBJbiBhbnkgZXZlbnQsIGluIG5vbmUgb2YgdGhlIHVuZGVybHlpbmcgY2FzZXMgd2FzIHRoZSByZXRhaW5lciBjYW5jZWxsZWQgb3Igb3RoZXJ3aXNlIHRlcm1pbmF0ZWQgKHBhcmFzIDIxLCAzNC0zNykuIiwKICAgICAgICAiKDQpIFRoZSBpbnN1cmVyIGVudGVyZWQgaW50byBlYWNoIGNvbXByb21pc2UgYWdyZWVtZW50IHdpdGggbm90aWNlIG9mIEcmIzgyMTc7cyBlbnRpdGxlbWVudCBhbmQgdGhlIHByaW5jaXBsZSBvZiBlcXVpdGFibGUgaW50ZXJ2ZW50aW9uIHJlcXVpcmVkIGl0IHRvIHBheSB0byBHIHRoZSBzdW1zIHBheWFibGUgb24gc2V0dGxlbWVudCB1bmRlciB0aGUgUHJvdG9jb2wgc2NoZW1lIChwYXJhLjM4KS4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlBlcnNvbmFsIEluanVyeSBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBMZWdhbCBBZHZpY2UgYW5kIEZ1bmRpbmciLAogICAgICAgICJUb3J0cyIsCiAgICAgICAgIkNpdmlsIFByb2NlZHVyZSIsCiAgICAgICAgIkluc3VyYW5jZSIsCiAgICAgICAgIkNvbmRpdGlvbmFsIEZlZSBBZ3JlZW1lbnRzIiwKICAgICAgICAiRmVlcyIsCiAgICAgICAgIkluc3VyYW5jZSBDb21wYW5pZXMiLAogICAgICAgICJMaWVucyIsCiAgICAgICAgIlBlcnNvbmFsIEluanVyeSBDbGFpbXMiLAogICAgICAgICJQcmUtQWN0aW9uIFByb3RvY29scyIsCiAgICAgICAgIlNldHRsZW1lbnQiLAogICAgICAgICJTb2xpY2l0b3JzJyBSZW11bmVyYXRpb24iCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiQ29udHJhY3RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IFNhbGUgb2YgR29vZHMgJm1kYXNoOyBGb3JtYXRpb24gb2YgQ29udHJhY3QgJm1kYXNoOyBNaXN0YWtlIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogU2FsZSBvZiBHb29kcyIsCiAgICAgICAgIkZvcm1hdGlvbiBvZiBDb250cmFjdCIsCiAgICAgICAgIk1pc3Rha2UiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgRmlzaGVyIHYgQmVsbCIsCiAgICAgICAgIih3bCkgQXNzb2NpYXRlZCBKYXBhbmVzZSBCYW5rIChJbnRlcm5hdGlvbmFsKSBMdGQgdiBDcmVkaXQgZHUgTm9yZCIsCiAgICAgICAgIih3bCkgUGFya2VyIHYgQ2xhcmsiLAogICAgICAgICIod2wpIFRoZSBCcmltbmVzIiwKICAgICAgICAiKHdsKSBUZWtkYXRhIEludGVyY29ubmVjdGlvbnMgTHRkIHYgQW1waGVub2wgTHRkIiwKICAgICAgICAiKHdsKSBTaG9ndW4gRmluYW5jZSBMdGQgdiBIdWRzb24iLAogICAgICAgICIod2wpIERhdWxpYSBMdGQgdiBGb3VyIE1pbGxiYW5rIE5vbWluZWVzIEx0ZCIsCiAgICAgICAgIih3bCkgQ2hhcnRicm9vayBMdGQgdiBQZXJzaW1tb24gSG9tZXMgTHRkIiwKICAgICAgICAiKHdsKSBDb3VydG5leSAmIEZhaXJiYWlybiBMdGQgdiBUb2xhaW5pIEJyb3MgKEhvdGVscykgTHRkIiwKICAgICAgICAiKHdsKSBHcmVhdCBQZWFjZSBTaGlwcGluZyBMdGQgdiBUc2F2bGlyaXMgKEludGVybmF0aW9uYWwpIEx0ZCIsCiAgICAgICAgIih3bCkgSW5udHJlcHJlbmV1ciBQdWIgQ28gdiBFYXN0IENyb3duIEx0ZCIsCiAgICAgICAgIih3bCkgV2hpdGUgJiBDYXJ0ZXIgKENvdW5jaWxzKSBMdGQgdiBNY0dyZWdvciIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIxNCIsCiAgICAiWUVBUiI6ICIxOTYxIiwKICAgICJOQU1FIjogIih3bCkgSW5ncmFtIHYgTGl0dGxlIiwKICAgICJDSVQiOiAiWzE5NjFdIDEgUUIgMzEiLAogICAgIkNJVEFUSU9OIjogIkluZ3JhbSB2IExpdHRsZSBbMTk2MV0gMSBRQiAzMSIsCiAgICAiSlVER0UiOiAiU2VsbGVycyBMSjsgUGVhcmNlIExKOyBEZXZsaW4gTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImRpc21pc3NpbmcgdGhlIGFwcGVhbCwgYXMgQSBpbnRlbmRlZCB0byBkZWFsIG9ubHkgd2l0aCB0aGUgZ2VudWluZSBYLCBCIHdhcyBpbmNhcGFibGUgb2YgYWNjZXB0aW5nIEEmIzgyMTc7cyBvZmZlciB0byBzZWxsIHRoZSBjYXIsIHNvIHRoYXQgdGhlIHByb3BlcnR5IHRoZXJlaW4gcmVtYWluZWQgaW4gQS4gQ3VuZHkgdiBMaW5kc2F5ICgxODc4KSAzIEFwcC4gQ2FzLiA0NTkgY29uc2lkZXJlZDsgSGFyZG1hbiB2IEJvb3RoIDE1OCBFLlIuIDExMDcgY29uc2lkZXJlZDsgYW5kIExha2UgdiBTaW1tb25zIFsxOTI3XSBBLkMuIDQ4NyBjb25zaWRlcmVkOyBLaW5nJiM4MjE3O3MgTm9ydG9uIE1ldGFsIENvIHYgRWRyaWRnZSBNZXJyZXR0ICZhbXA7IENvICgxODk3KSAxNCBULkwuUi4gOTggZGlzdGluZ3Vpc2hlZDsgYW5kIFBoaWxsaXBzIHYgQnJvb2tzIEx0ZCBbMTkxOV0gMiBLLkIuIDI0MyBkaXN0aW5ndWlzaGVkLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkNyaXRpY2lzZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiVUtITCIsCiAgICAiQ0FURUdPUlkiOiAiQ29udHJhY3RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IFNhbGUgb2YgR29vZHMgJm1kYXNoOyBGcmF1ZCAmbWRhc2g7IFNhbGUgb2YgR29vZHMgJm1kYXNoOyBUaGlyZCBQYXJ0aWVzICZtZGFzaDsgVGl0bGUgdG8gR29vZHMgLyBDb25zdW1lciBMYXcgJm1kYXNoOyBDYXJzICZtZGFzaDsgQ29udHJhY3RzICZtZGFzaDsgRnJhdWR1bGVudCBNaXNyZXByZXNlbnRhdGlvbiAmbWRhc2g7IEhpcmUgUHVyY2hhc2UgJm1kYXNoOyBUaGlyZCBQYXJ0aWVzICZtZGFzaDsgVGl0bGUgdG8gR29vZHMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnRyYWN0cyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBTYWxlIG9mIEdvb2RzIiwKICAgICAgICAiRnJhdWQiLAogICAgICAgICJTYWxlIG9mIEdvb2RzIiwKICAgICAgICAiVGhpcmQgUGFydGllcyIsCiAgICAgICAgIlRpdGxlIHRvIEdvb2RzIiwKICAgICAgICAiQ29uc3VtZXIgTGF3IiwKICAgICAgICAiQ2FycyIsCiAgICAgICAgIkNvbnRyYWN0cyIsCiAgICAgICAgIkZyYXVkdWxlbnQgTWlzcmVwcmVzZW50YXRpb24iLAogICAgICAgICJIaXJlIFB1cmNoYXNlIiwKICAgICAgICAiVGhpcmQgUGFydGllcyIsCiAgICAgICAgIlRpdGxlIHRvIEdvb2RzIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIE9zY2FyIENoZXNzIEx0ZCB2IFdpbGxpYW1zIiwKICAgICAgICAiKHdsKSBXaWxsaWFtIFNpbmRhbGwgcGxjIHYgQ2FtYnJpZGdlc2hpcmUgQ291bnR5IENvdW5jaWwiLAogICAgICAgICIod2wpIEJyaXRpc2ggQ3JhbmUgSGlyZSBDb3Jwb3JhdGlvbiBMdGQgdiBJcHN3aWNoIFBsYW50IEhpcmUgTHRkIiwKICAgICAgICAiKHdsKSBTdWRicm9vayBUcmFkaW5nIEVzdGF0ZSBMdGQgdiBFZ2dsZXRvbiIsCiAgICAgICAgIih3bCkgRmlzaGVyIHYgQmVsbCIsCiAgICAgICAgIih3bCkgS2Fyc2FsZXMgKEhhcnJvdykgTHRkIHYgV2FsbGlzIiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQiLAogICAgICAgICIod2wpIEVzc28gUGV0cm9sZXVtIENvIEx0ZCB2IE1hcmRvbiIsCiAgICAgICAgIih3bCkgSW50ZXJmb3RvIFBpY3R1cmUgTGlicmFyeSBMdGQgdiBTdGlsZXR0byBWaXN1YWwgUHJvZHVjdGlvbnMgTHRkIiwKICAgICAgICAiKHdsKSBBbGJlcnQgdiBNb3RvciBJbnN1cmVycycgQnVyZWF1IiwKICAgICAgICAiKHdsKSBCbGFja3Bvb2wgYW5kIEZ5bGRlIEFlcm9jbHViIEx0ZCB2IEJsYWNrcG9vbCBCb3JvdWdoIENvdW5jaWwiLAogICAgICAgICIod2wpIEdyZWF0IFBlYWNlIFNoaXBwaW5nIEx0ZCB2IFRzYXZsaXJpcyAoSW50ZXJuYXRpb25hbCkgTHRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjE1IiwKICAgICJZRUFSIjogIjIwMDMiLAogICAgIkNPVU5TRUwiOiAiRm9yIFM6IEdlb3JnZSBCb21wYXMgUS5DLiBhbmQgU3VuaWwgSXllci4gRm9yIEg6IEplcmVteSBDb3VzaW5zIFEuQy4sIE5pY2hvbGFzIEdlb3JnZSBhbmQgSmVyZW15IFJpY2htb25kLiIsCiAgICAiTkFNRSI6ICIod2wpIFNob2d1biBGaW5hbmNlIEx0ZCB2IEh1ZHNvbiIsCiAgICAiQ0lUIjogIlsyMDAzXSBVS0hMIDYyIiwKICAgICJDSVRBVElPTiI6ICJTaG9ndW4gRmluYW5jZSBMdGQgdiBIdWRzb24gWzIwMDNdIFVLSEwgNjIiLAogICAgIkpVREdFIjogIkxvcmQgTWlsbGV0dDsgTG9yZCBOaWNob2xscyBvZiBCaXJrZW5oZWFkOyBMb3JkIEhvYmhvdXNlIG9mIFdvb2Rib3JvdWdoOyBMb3JkIFBoaWxsaXBzIG9mIFdvcnRoIE1hdHJhdmVyczsgTG9yZCBXYWxrZXIgb2YgR2VzdGluZ3Rob3JwZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiZGlzbWlzc2luZyB0aGUgYXBwZWFsIChMb3JkIE5pY2hvbGxzIG9mIEJpcmtlbmhlYWQgYW5kIExvcmQgTWlsbGV0dCBkaXNzZW50aW5nKSwgdGhhdCAoMSkgdGhlIGFncmVlbWVudCBoYWQgYmVlbiBjb25jbHVkZWQgaW4gd3JpdGluZyBhbmQgdGhlIGlkZW50aWZpY2F0aW9uIG9mIHRoZSBwYXJ0aWVzIHRvIHRoYXQgYWdyZWVtZW50IGRlcGVuZGVkIG9uIGl0cyBjb25zdHJ1Y3Rpb24gYW5kIG9uIHRoYXQgYmFzaXMsIFAgd2FzIHRoZSBoaXJlciB1bmRlciB0aGUgYWdyZWVtZW50IHdpdGggUzsgKDIpIGluIGEgY29uc3VtZXIgY3JlZGl0IHRyYW5zYWN0aW9uLCB0aGUgaWRlbnRpdHkgb2YgdGhlIGN1c3RvbWVyIHdhcyBmdW5kYW1lbnRhbCB0byB0aGUgd2hvbGUgdHJhbnNhY3Rpb24gYmVjYXVzZSBpdCB3YXMgZXNzZW50aWFsIHRvIHRoZSBjcmVkaXQgY2hlY2tpbmcgb2YgdGhlIGJvcnJvd2VyLCBhbmQgYXMgdGhlIGFncmVlbWVudCB3aXRoIFAgd2FzIGNvbmNsdWRlZCB3aXRob3V0IGhpcyBhdXRob3JpdHksIGl0IHdhcyBhIG51bGxpdHk7ICgzKSB0aGVyZSB3YXMgbm8gbWVldGluZyBvZiBtaW5kcyBiZXR3ZWVuIFMgYW5kIFIgYXMgUiBuZXZlciBoYWQgYW55IGZhY2UgdG8gZmFjZSBkZWFsaW5ncyB3aXRoIFMuIFRoZSBjYXIgZGVhbGVyIHdhcyB0aGUgYWdlbnQgb2YgUyBpbiBkZWxpdmVyaW5nIHRoZSBjYXIgdG8gUiBidXQgd2FzIGFjdGluZyB3aXRob3V0IGF1dGhvcml0eSBzaW5jZSBpdHMgYXV0aG9yaXR5IHdhcyB0byBkZWxpdmVyIHRvIFAuIEZ1cnRoZXIsIHRoZXJlIHdhcyBubyBjb250cmFjdCB3aXRoIFIgYW5kIG5vIGJhaWxtZW50IG9mIHRoZSBjYXIgYnkgUyB0byBSOyAoNCkgdGhlIHB1cnBvcnRlZCBzaWduYXR1cmUgb24gdGhlIGhpcmUgcHVyY2hhc2UgYWdyZWVtZW50IHdhcyBub3QgUCYjODIxNztzIGFuZCB0aGF0IGFncmVlbWVudCB0aGVyZWZvcmUgbGFja2VkIGFuIGVzc2VudGlhbCBpbmdyZWRpZW50IGFuZCB3YXMgbmV2ZXIgYW4gb2ZmZXIgZWxpZ2libGUgZm9yIGFjY2VwdGFuY2UsIGFuZCAoNSkgYWNjb3JkaW5nIHRvIExvcmQgTmljaG9sbHMgb2YgQmlya2VuaGVhZCBhbmQgTG9yZCBNaWxsZXR0LCBpbiBhIGNhc2Ugb2YgbWlzdGFrZW4gaWRlbnRpdHksIGEgcGVyc29uIHNob3VsZCBiZSBwcmVzdW1lZCB0byBjb250cmFjdCB3aXRoIHRoZSBwZXJzb24gd2l0aCB3aG9tIGhlIHdhcyBhY3R1YWxseSBkZWFsaW5nLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXSEMiLAogICAgIkNBVEVHT1JZIjogIk5lZ2xpZ2VuY2UgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogR292ZXJubWVudCBBZG1pbmlzdHJhdGlvbiAmbWRhc2g7IENvbXBhbnkgTGF3ICZtZGFzaDsgQXNzdW1wdGlvbiBvZiBSZXNwb25zaWJpbGl0eSAmbWRhc2g7IEJyZWFjaCBvZiBEdXR5IG9mIENhcmUgJm1kYXNoOyBDYXVzYXRpb24gJm1kYXNoOyBDb21wYW5pZXMgSG91c2UgJm1kYXNoOyBEdXR5IG9mIENhcmUgJm1kYXNoOyBQcm94aW1pdHkgJm1kYXNoOyBSZWdpc3RlciBvZiBDb21wYW5pZXMgJm1kYXNoOyBSZWdpc3RyYXIgb2YgQ29tcGFuaWVzICZtZGFzaDsgU3BlY2lhbCBSZWxhdGlvbnNoaXBzICZtZGFzaDsgU3RhdHV0b3J5IER1dGllcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiTmVnbGlnZW5jZSBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBHb3Zlcm5tZW50IEFkbWluaXN0cmF0aW9uIiwKICAgICAgICAiQ29tcGFueSBMYXciLAogICAgICAgICJBc3N1bXB0aW9uIG9mIFJlc3BvbnNpYmlsaXR5IiwKICAgICAgICAiQnJlYWNoIG9mIER1dHkgb2YgQ2FyZSIsCiAgICAgICAgIkNhdXNhdGlvbiIsCiAgICAgICAgIkNvbXBhbmllcyBIb3VzZSIsCiAgICAgICAgIkR1dHkgb2YgQ2FyZSIsCiAgICAgICAgIlByb3hpbWl0eSIsCiAgICAgICAgIlJlZ2lzdGVyIG9mIENvbXBhbmllcyIsCiAgICAgICAgIlJlZ2lzdHJhciBvZiBDb21wYW5pZXMiLAogICAgICAgICJTcGVjaWFsIFJlbGF0aW9uc2hpcHMiLAogICAgICAgICJTdGF0dXRvcnkgRHV0aWVzIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIENhcGFybyBJbmR1c3RyaWVzIHBsYyB2IERpY2ttYW4iLAogICAgICAgICIod2wpIEhlbmRlcnNvbiB2IE1lcnJldHQgU3luZGljYXRlcyIsCiAgICAgICAgIih3bCkgU2NhbGx5IHYgU291dGhlcm4gSGVhbHRoIGFuZCBTb2NpYWwgU2VydmljZXMgQm9hcmQiLAogICAgICAgICIod2wpIENhdmVuZGlzaCBTcXVhcmUgSG9sZGluZyBCViB2IFRhbGFsIEVsIE1ha2Rlc3NpOyBQYXJraW5nRXllIEx0ZCB2IEJlYXZpcyIsCiAgICAgICAgIih3bCkgSGVkbGV5IEJ5cm5lICYgQ28gTHRkIHYgSGVsbGVyICYgUGFydG5lcnMiLAogICAgICAgICIod2wpIEtsZWlud29ydCBCZW5zb24gTHRkIHYgTWFsYXlzaWEgTWluaW5nIENvcnBvcmF0aW9uIiwKICAgICAgICAiKHdsKSBHcmFuIEdlbGF0byBMdGQgdiBSaWNoY2xpZmYgKEdyb3VwKSBMdGQiLAogICAgICAgICIod2wpIFJlYXJkb24gU21pdGggTGluZSBMdGQgdiBZbmd2YXIgSGFuc2VuLVRhbmdlbiIsCiAgICAgICAgIih3bCkgQnJvZ2RlbiB2IE1ldHJvcG9saXRhbiBSYWlsd2F5IiwKICAgICAgICAiKHdsKSBEcmVzZG5lciBLbGVpbndvcnQgTHRkIHYgQXR0cmlsbCIsCiAgICAgICAgIih3bCkgVHJhbnNmaWVsZCBTaGlwcGluZyBJbmMgdiBNZXJjYXRvciBTaGlwcGluZyBJbmMgKFRoZSBBY2hpbGxlYXMpIiwKICAgICAgICAiKHdsKSBGaXNoZXIgdiBCZWxsIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjE2IiwKICAgICJZRUFSIjogIjIwMTUiLAogICAgIkNPVU5TRUwiOiAiRm9yIHRoZSBjbGFpbWFudDogQ2xpdmUgRnJlZWRtYW4gUUMsIE5laWwgTWVuZG96YS4gRm9yIHRoZSBkZWZlbmRhbnRzOiBQYXVsIFJlZXMgUUMsIE5laWwgU2hlbGRvbi4iLAogICAgIkFCU1RSQUNUIjogWwogICAgICAgICJUaGUgY291cnQgd2FzIHJlcXVpcmVkIHRvIGRldGVybWluZSBwcmVsaW1pbmFyeSBpc3N1ZXMgaW4gYSBjbGFpbSBmb3IgbmVnbGlnZW5jZSBhbmQgYnJlYWNoIG9mIHN0YXR1dG9yeSBkdXR5IGFnYWluc3QgdGhlIGRlZmVuZGFudCBSZWdpc3RyYXIgb2YgQ29tcGFuaWVzLiIsCiAgICAgICAgIlRoZSBjbGFpbWFudCB3YXMgdGhlIGZvcm1lciBtYW5hZ2luZyBkaXJlY3RvciBvZiBhIGNvbXBhbnkgY2FsbGVkIFRheWxvciBhbmQgU29ucyBMaW1pdGVkLiBUaGUgY29tcGFueSB3YXMgYSBzdGVlbCBmYWJyaWNhdG9yLiBJdCB3YXMgYSB3ZWxsLXJlc3BlY3RlZCBhbmQgc3Vic3RhbnRpYWwgYnVzaW5lc3MuIEluIDIwMDkgYSB3aW5kaW5nLXVwIG9yZGVyIHdhcyBtYWRlIGFnYWluc3QgYW4gdW5yZWxhdGVkIGNvbXBhbnksIFRheWxvciBhbmQgU29uIExpbWl0ZWQsIGFuZCBzZW50IHRvIHRoZSByZWdpc3RyYXIuIFRoZSBvcmRlciBkaWQgbm90IGNvbnRhaW4gYSBjb21wYW55IG51bWJlci4gVGhlIHJlZ2lzdHJhciBpbmFkdmVydGVudGx5IGFtZW5kZWQgdGhlIHJlZ2lzdHJhdGlvbiBkZXRhaWxzIG9mIHRoZSBjbGFpbWFudCYjODIxNztzIGNvbXBhbnksIGFzIGl0cyBuYW1lIHdhcyB2ZXJ5IHNpbWlsYXIsIHNob3dpbmcgaXQgdG8gYmUgaW4gbGlxdWlkYXRpb24uIFRoZSBjb21wYW55JiM4MjE3O3MgYWNjb3VudGFudCBub3RpY2VkIHRoZSBtaXN0YWtlIGFuZCBjb250YWN0ZWQgdGhlIHJlZ2lzdHJhciwgd2hvIHJlY3RpZmllZCBwdWJsaWMgb25saW5lIHJlY29yZHMgbGF0ZXIgdGhlIHNhbWUgZGF5IGJ1dCB3YXMgdW5hYmxlIHRvIGNvcnJlY3Qgc3Vic2NyaXB0aW9uIHNlcnZpY2VzIGZvciBzZXZlcmFsIHdlZWtzLiBUaGUgY29tcGFueSYjODIxNztzIHN1cHBsaWVycyBhbmQgY3JlZGl0b3JzLCBpbmNsdWRpbmcgdGhlIGNvbXBhbnkmIzgyMTc7cyBiYW5rLCBiZWNhbWUgYXdhcmUgb2YgdGhlIGZhbHNlIGVudHJ5IG9uIHRoZSByZWdpc3RlciBhbmQgc3VzcGVuZGVkIHRoZSBjb21wYW55JiM4MjE3O3MgY3JlZGl0LiBUaGUgY29tcGFueSBzdWJzZXF1ZW50bHkgd2VudCBpbnRvIGFkbWluaXN0cmF0aW9uLiBUaGUgY291cnQgd2FzIHJlcXVpcmVkIHRvIGRldGVybWluZSB3aGV0aGVyIChpKSB0aGUgcmVnaXN0cmFyIG93ZWQgdGhlIGNvbXBhbnkgYSBkdXR5IG9mIGNhcmUgdW5kZXIgdGhlIENvbXBhbmllcyBBY3QgMjAwNiB0byBleGVyY2lzZSByZWFzb25hYmxlIGNhcmUgYW5kIHNraWxsIHNvIGFzIHRvIGVuc3VyZSB0aGF0IGluY29ycmVjdCBpbmZvcm1hdGlvbiB3YXMgbm90IGVudGVyZWQgb24gdG8gdGhlIHJlZ2lzdGVyOyAoaWkpIHRoZSByZWdpc3RyYXIgb3dlZCB0aGUgY29tcGFueSBhIGR1dHkgb2YgY2FyZSB1bmRlciBjb21tb24gbGF3OyAoaWlpKSB0aGUgcmVnaXN0cmFyJiM4MjE3O3MgYnJlYWNoIG9mIGR1dHkgaGFkIGNhdXNlZCB0aGUgY29tcGFueSB0byBlbnRlciBhZG1pbmlzdHJhdGlvbi4iCiAgICBdLAogICAgIk5BTUUiOiAiKHdsKSBNY1JhZSB2IENvbW1vbndlYWx0aCBEaXNwb3NhbHMgQ29tbWlzc2lvbiIsCiAgICAiQ0lUIjogIlsyMDE1XSBFV0hDIDExNSAoUUIpIiwKICAgICJDSVRBVElPTiI6ICJNY1JhZSB2IENvbW1vbndlYWx0aCBEaXNwb3NhbHMgQ29tbWlzc2lvbiBbMjAxNV0gRVdIQyAxMTUgKFFCKSIsCiAgICAiSlVER0UiOiAiRWRpcyBKIiwKICAgICJIRUxEIjogWwogICAgICAgICJQcmVsaW1pbmFyeSBpc3N1ZXMgZGV0ZXJtaW5lZCBpbiBmYXZvdXIgb2YgY2xhaW1hbnQuIiwKICAgICAgICAiKDEpIFRoZSBjb3VydCB3YXMgbm90IHNhdGlzZmllZCB0aGF0IHRoZXJlIHdhcyBhIGNhdXNlIG9mIGFjdGlvbiBmb3IgZGFtYWdlcyBmb3IgYnJlYWNoIG9mIHN0YXR1dG9yeSBkdXR5IGFnYWluc3QgdGhlIHJlZ2lzdHJhciBpbiByZWxhdGlvbiB0byBoaXMgZnVuY3Rpb25zIHVuZGVyIHRoZSAyMDA2IEFjdC4gVGhlIEFjdCByZWd1bGF0ZWQgdGhlIGtlZXBpbmcgb2YgdGhlIHJlZ2lzdGVyIGFuZCBpbXBvc2VkIGR1dGllcyBvbiB0aGUgcmVnaXN0cmFyIGZvciB0aGF0IHB1cnBvc2UuIFRoZSByZWdpc3RlciBwdWJsaXNoZWQgaW5mb3JtYXRpb24gd2hpY2ggd2FzIGF2YWlsYWJsZSB0byB0aGUgd2hvbGUgd29ybGQsIGJlY2F1c2UgaXQgd2FzIGF2YWlsYWJsZSBvbiB0aGUgaW50ZXJuZXQuIFRoZSBjb21tb24gbGF3IG9mIG5lZ2xpZ2VuY2UgaGFkIGNvbnRyb2wgbWVjaGFuaXNtcyBkZXNpZ25lZCB0byByZXN0cmljdCB0aGUgY2xhc3Mgb2YgcGVyc29uIHdobyBjb3VsZCBjbGFpbSBkYW1hZ2VzIGZvciBlY29ub21pYyBsb3NzLiBIb3dldmVyLCB0aGUgaW1wb3NpdGlvbiBvZiBhIHN0YXR1dG9yeSBkdXR5IGdpdmluZyByaXNlIHRvIGEgY2xhaW0gZm9yIGRhbWFnZXMgYXQgdGhlIHN1aXQgb2YgYW55b25lIHdobyBzdWZmZXJlZCBlY29ub21pYyBsb3NzIGJ5IHJlYXNvbiBvZiBhbnkgYWN0IG9yIG9taXNzaW9uIGluIGJyZWFjaCBvZiB0aGUgc3RhdHV0b3J5IGR1dHkgd291bGQgY3JlYXRlIGEgdmVyeSB3aWRlIGR1dHkgaW5kZWVkLiBUaGVyZSB3YXMgbm90aGluZyBpbiB0aGUgQWN0IHRvIGp1c3RpZnkgYSBmaW5kaW5nIHRoYXQgdGhhdCB3YXMgdGhlIGludGVudGlvbiBvZiBQYXJsaWFtZW50IChzZWUgcGFyYS4xMDYgb2YganVkZ21lbnQpLiAoMikgSWYgYSBwZXJzb24gZGlkIGFuIGFjdCB3aGljaCB3YXMgY2FwYWJsZSBvZiBjYXVzaW5nIGhhcm0gdG8gYSBwYXJ0aWN1bGFyIHBlcnNvbiBpZiBkb25lIGNhcmVsZXNzbHksIGhlIHdvdWxkIGhhdmUgYXNzdW1lZCByZXNwb25zaWJpbGl0eSB0byB0aGF0IHBlcnNvbiBpbiByZXNwZWN0IG9mIHRoYXQgdGFzaywgV2hpdGUgdiBKb25lcyBbMTk5NV0gMiBBLkMuIDIwNyBmb2xsb3dlZC4gSW4gZGV0ZXJtaW5pbmcgd2hldGhlciBhbiBhc3N1bXB0aW9uIG9mIHJlc3BvbnNpYmlsaXR5IGFuZCBkdXR5IG9mIGNhcmUgZXhpc3RlZCwgdGhlIGNvdXJ0IHRvb2sgdGhlIGZvbGxvd2luZyBmYWN0b3JzIGludG8gYWNjb3VudDogKGEpIHVubGVzcyBhIHJlbWVkeSB3YXMgcHJvdmlkZWQgYnkgdGhlIGNvbW1vbiBsYXcgb2YgbmVnbGlnZW5jZSwgYSBjb21wYW55IGRhbWFnZWQgYnkgY2FyZWxlc3NuZXNzIGluIHRoZXNlIGNpcmN1bXN0YW5jZXMgd291bGQgaGF2ZSBubyByZW1lZHk7IChiKSBpdCB3YXMgbm90IGRpZmZpY3VsdCBmb3IgdGhlIHJlZ2lzdHJhciYjODIxNztzIHN0YWZmIHRvIGF2b2lkIGVycm9ycyBvZiB0aGUgaW5zdGFudCB0eXBlOyAoYykgdGhlcmUgd2VyZSBubyBwdWJsaWMgcG9saWN5IHJlYXNvbnMgZm9yIGRlbnlpbmcgYSBkdXR5IG9mIGNhcmU7IChkKSB0aGUgc3RhdHV0b3J5IGR1dHkgb3IgY29udHJhY3R1YWwgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIGNvbXBhbnkgYW5kIHRoZSByZWdpc3RyYXIgZGlkIG5vdCBsaW1pdCB0aGUgbmF0dXJlIGFuZCBleHRlbnQgb2YgdGhlIHJlc3BvbnNpYmlsaXR5OyAoZSkgYmFsYW5jaW5nIHRoZSBoYXJtIGRvbmUgdG8gdGhlIGNvbXBhbnkgYWdhaW5zdCB0aGUgcG90ZW50aWFsIGFkdmVyc2UgaW1wYWN0IG9uIHRoZSByZWdpc3RyYXIsIGl0IHdhcyBjbGVhciB0aGF0IHRoZSBiYWxhbmNlIGZhdm91cmVkIHRoZSBsb3NzIGZhbGxpbmcgb24gdGhlIHJlZ2lzdHJhciByYXRoZXIgdGhhbiB0aGUgY29tcGFueTsgKGYpIGl0IHdhcyBsaWtlbHkgdGhhdCB0aGUgaW1wb3NpdGlvbiBvZiBhIGR1dHkgd291bGQgaW1wcm92ZSB0aGUgYWNjdXJhY3kgb2YgdGhlIHJlZ2lzdGVyLCB3aGljaCB3YXMgcGxhaW5seSBpbiB0aGUgcHVibGljIGludGVyZXN0LiBJdCB3YXMgZmFpciwganVzdCBhbmQgcmVhc29uYWJsZSB0byBpbXBvc2UgYSBkdXR5IG9mIGNhcmUgdXBvbiB0aGUgcmVnaXN0cmFyLiBBIHNwZWNpYWwgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIHJlZ2lzdHJhciBhbmQgdGhlIGNvbXBhbnkgYXJvc2UgYmVjYXVzZSBpdCB3YXMgZm9yZXNlZWFibGUgdGhhdCBpZiBhIGNvbXBhbnkgd2FzIHdyb25nbHkgc2FpZCB0byBiZSBpbiBsaXF1aWRhdGlvbiwgaXQgd291bGQgc3VmZmVyIHNlcmlvdXMgaGFybS4gVGhlIG5hdHVyZSBvZiB0aGUgZXhlcmNpc2UgYWxzbyBzdXBwb3J0ZWQgdGhlIGV4aXN0ZW5jZSBvZiBzdWNoIGEgcmVsYXRpb25zaGlwLiBUaGUgY29tcGFueSB3YXMgbm90IGNvbnN1bHRlZCBiZWZvcmUgYW4gZW50cnkgd2FzIG1hZGUgYW5kIGhhZCBubyBvcHBvcnR1bml0eSB0byBwcm90ZXN0IHRoYXQgdGhlIGVudHJ5LCBpZiBtYWRlLCB3b3VsZCBiZSBhIG1pc3Rha2UuIEZvcmVzZWVhYmlsaXR5IGFuZCBwcm94aW1pdHkgaGFkIGJlZW4gZXN0YWJsaXNoZWQsIENhcGFybyBJbmR1c3RyaWVzIFBsYyB2IERpY2ttYW4gWzE5OTBdIDIgQS5DLiA2MDUsIE1pbmlzdHJ5IG9mIEhvdXNpbmcgYW5kIExvY2FsIEdvdmVybm1lbnQgdiBTaGFycCBbMTk3MF0gMiBRLkIuIDIyMyBhbmQgQ3VzdG9tcyBhbmQgRXhjaXNlIENvbW1pc3Npb25lcnMgdiBCYXJjbGF5cyBCYW5rIFBsYyBbMjAwNl0gVUtITCAyOCwgWzIwMDddIDEgQS5DLiAxODEgZm9sbG93ZWQuIEFjY29yZGluZ2x5LCB0aGUgcmVnaXN0cmFyIG93ZWQgYSBkdXR5IG9mIGNhcmUgd2hlbiBlbnRlcmluZyBhIHdpbmRpbmctdXAgb3JkZXIgb24gdGhlIHJlZ2lzdGVyIHRvIHRha2UgcmVhc29uYWJsZSBjYXJlIHRvIGVuc3VyZSB0aGF0IHRoZSBvcmRlciB3YXMgbm90IHJlZ2lzdGVyZWQgYWdhaW5zdCB0aGUgd3JvbmcgY29tcGFueS4gVGhlIGR1dHkgd2FzIG93ZWQgdG8gYW55IGNvbXBhbnkgd2hpY2ggd2FzIG5vdCBpbiBsaXF1aWRhdGlvbiBidXQgd2hpY2ggd2FzIHdyb25nbHkgcmVjb3JkZWQgb24gdGhlIHJlZ2lzdGVyIGFzIGhhdmluZyBiZWVuIHdvdW5kIHVwIGJ5IG9yZGVyIG9mIHRoZSBjb3VydC4gVGhlIGR1dHkgZXh0ZW5kZWQgdG8gdGFrZSByZWFzb25hYmxlIGNhcmUgdG8gZW50ZXIgdGhlIG9yZGVyIG9uIHRoZSByZWNvcmQgb2YgdGhlIGNvbXBhbnkgbmFtZWQgaW4gdGhlIG9yZGVyLCBhbmQgbm90IGFueSBvdGhlciBjb21wYW55LiBJdCBkaWQgbm90IGV4dGVuZCB0byBjaGVja2luZyBpbmZvcm1hdGlvbiBzdXBwbGllZCBieSB0aGlyZCBwYXJ0aWVzLCBidXQgb25seSB0byBlbnRlcmluZyB0aGF0IGluZm9ybWF0aW9uIGFjY3VyYXRlbHkgb24gdGhlIHJlZ2lzdGVyIChwYXJhcyAxMDgtMTE4KS4gKDMpIFRoZSByZWdpc3RyYXImIzgyMTc7cyBlcnJvciBoYWQgYmVlbiBhIGRpc2FzdGVyIGZvciB0aGUgY29tcGFueS4gVGhlIHJ1bW91ciBvZiBpbnNvbHZlbmN5IHNwcmVhZCBhbmQgdGhlIHN1cHBsaWVycyYjODIxNzsgaW1tZWRpYXRlIHJlYWN0aW9uIHdhcyB0byByZWZ1c2UgZnVydGhlciBjcmVkaXQgdG8gdGhlIGNvbXBhbnkuIFByaW9yIHRvIHRoZSBlcnJvciwgdGhlIHN1cHBsaWVycyBoYWQgYmVlbiB0cmFkaW5nIG9uIG9yZGluYXJ5IDMwLWRheSBjcmVkaXQgdGVybXMsIGFuZCBhY3R1YWxseSBhZmZvcmRpbmcgbG9uZ2VyIHBlcmlvZHMgb2YgY3JlZGl0IHRoYW4gdGhhdC4gVGhlIGNvbXBhbnkmIzgyMTc7cyBtYWluIGN1c3RvbWVyIHRlcm1pbmF0ZWQgdGhlIGNvbXBhbnkmIzgyMTc7cyBjb250cmFjdCBiZWNhdXNlIG9mIGl0cyBjb25jZXJucyBhYm91dCB0aGUgY29tcGFueSYjODIxNztzIGZ1dHVyZSwgd2hpY2ggd2VyZSBmdWVsbGVkIGJ5IHJ1bW91cnMgcmVzdWx0aW5nIGZyb20gdGhlIGVycm9yLiBUaGUgYmFuayByZWZ1c2VkIHRvIGxlbmQgZnVydGhlciBtb25leSB0byB0aGUgY29tcGFueS4gVGhlIGNsYWltYW50IGhhZCBwcm92ZWQgdGhhdCB0aGUgcmVhc29uIHRoZSBjb21wYW55IHdlbnQgaW50byBhZG1pbmlzdHJhdGlvbiB3YXMgdGhlIGVycm9yIG1hZGUgYnkgdGhlIHJlZ2lzdHJhciAocGFyYXMgMzcsIDM5LCA0Ny00OCkuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdIQyIsCiAgICAiQ0FURUdPUlkiOiAiQ29udHJhY3RzICZtZGFzaDsgRm9ybWF0aW9uIG9mIENvbnRyYWN0ICZtZGFzaDsgR3VhcmFudGVlcyAmbWRhc2g7IE1pc3Rha2UiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnRyYWN0cyIsCiAgICAgICAgIkZvcm1hdGlvbiBvZiBDb250cmFjdCIsCiAgICAgICAgIkd1YXJhbnRlZXMiLAogICAgICAgICJNaXN0YWtlIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIEZpc2hlciB2IEJlbGwiLAogICAgICAgICIod2wpIFBhcmtlciB2IENsYXJrIiwKICAgICAgICAiKHdsKSBHcmVhdCBQZWFjZSBTaGlwcGluZyBMdGQgdiBUc2F2bGlyaXMgKEludGVybmF0aW9uYWwpIEx0ZCIsCiAgICAgICAgIih3bCkgQ291cnRuZXkgJiBGYWlyYmFpcm4gTHRkIHYgVG9sYWluaSBCcm9zIChIb3RlbHMpIEx0ZCIsCiAgICAgICAgIih3bCkgSW5ncmFtIHYgTGl0dGxlIiwKICAgICAgICAiKHdsKSBSZSBTZWxlY3Rtb3ZlIEx0ZCIsCiAgICAgICAgIih3bCkgQnJpdGlzaCBTdGVlbCBDb3Jwb3JhdGlvbiB2IENsZXZlbGFuZCBCcmlkZ2UgYW5kIEVuZ2luZWVyaW5nIENvIEx0ZCIsCiAgICAgICAgIih3bCkgVGhlIEJyaW1uZXMiLAogICAgICAgICIod2wpIFBhbyBPbiB2IExhdSBZaXUgTG9uZyIsCiAgICAgICAgIih3bCkgSW5udHJlcHJlbmV1ciBQdWIgQ28gdiBFYXN0IENyb3duIEx0ZCIsCiAgICAgICAgIih3bCkgU2hvZ3VuIEZpbmFuY2UgTHRkIHYgSHVkc29uIiwKICAgICAgICAiKHdsKSBBbHBlbnN0b3cgdiBSZWdhbGlhbiBQcm9wZXJ0aWVzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjE3IiwKICAgICJZRUFSIjogIjE5ODkiLAogICAgIk5BTUUiOiAiKHdsKSBBc3NvY2lhdGVkIEphcGFuZXNlIEJhbmsgKEludGVybmF0aW9uYWwpIEx0ZCB2IENyZWRpdCBkdSBOb3JkIiwKICAgICJDSVQiOiAiWzE5ODldIDEgV0xSIDI1NSIsCiAgICAiQ0lUQVRJT04iOiAiQXNzb2NpYXRlZCBKYXBhbmVzZSBCYW5rIChJbnRlcm5hdGlvbmFsKSBMdGQgdiBDcmVkaXQgZHUgTm9yZCBbMTk4OV0gMSBXTFIgMjU1IiwKICAgICJKVURHRSI6ICJTdGV5biBKIiwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgaXNzdWUgd2FzIHdoZXRoZXIgdGhlIGd1YXJhbnRlZSB3b3VsZCBvbmx5IGJlY29tZSBlZmZlY3RpdmUgaWYgZm91ciBleGlzdGluZyBtYWNoaW5lcyB3ZXJlIGluIGZhY3QgbGVhc2VkIG91dC4gSXQgd2FzIG9mIHByaW1lIGltcG9ydGFuY2UgdGhhdCB0aGUgc3ViamVjdCBtYXR0ZXIgb2YgdGhlIGNvbnRyYWN0IHdhcyBub24gZXhpc3RlbnQuIFRoZSB0ZXN0IG9mIGNvbW1vbiBsYXcgbWlzdGFrZSB3YXMgc2F0aXNmaWVkIGFuZCB0aGUgZ3VhcmFudGVlIHZvaWQgYWIgaW5pdGlvLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkxhbmRsb3JkIGFuZCBUZW5hbnQgJm1kYXNoOyBBbHRlcmF0aW9ucyAmbWRhc2g7IExlYXNlcyAmbWRhc2g7IE1pc3Rha2UgJm1kYXNoOyBSZW50IENvbnRyb2wgJm1kYXNoOyBSZXBhaXJzICZtZGFzaDsgUmVzY2lzc2lvbiAmbWRhc2g7IFdhciBEYW1hZ2UgLyBDb250cmFjdHMgJm1kYXNoOyBBdm9pZGFuY2UgJm1kYXNoOyBFcXVpdGFibGUgUHJpbmNpcGxlcyAmbWRhc2g7IE1pc3Rha2UgJm1kYXNoOyBSZXNjaXNzaW9uICZtZGFzaDsgU2hpcHBpbmciLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkxhbmRsb3JkIGFuZCBUZW5hbnQiLAogICAgICAgICJBbHRlcmF0aW9ucyIsCiAgICAgICAgIkxlYXNlcyIsCiAgICAgICAgIk1pc3Rha2UiLAogICAgICAgICJSZW50IENvbnRyb2wiLAogICAgICAgICJSZXBhaXJzIiwKICAgICAgICAiUmVzY2lzc2lvbiIsCiAgICAgICAgIldhciBEYW1hZ2UiLAogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJBdm9pZGFuY2UiLAogICAgICAgICJFcXVpdGFibGUgUHJpbmNpcGxlcyIsCiAgICAgICAgIk1pc3Rha2UiLAogICAgICAgICJSZXNjaXNzaW9uIiwKICAgICAgICAiU2hpcHBpbmciCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgT2NlYW4gVHJhbXAgVGFua2VycyBDb3Jwb3JhdGlvbiB2IFYiLAogICAgICAgICIod2wpIEZpc2hlciB2IEJlbGwiLAogICAgICAgICIod2wpIFNjYWxseSB2IFNvdXRoZXJuIEhlYWx0aCBhbmQgU29jaWFsIFNlcnZpY2VzIEJvYXJkIiwKICAgICAgICAiKHdsKSBBc3NvY2lhdGVkIEphcGFuZXNlIEJhbmsgKEludGVybmF0aW9uYWwpIEx0ZCB2IENyZWRpdCBkdSBOb3JkIiwKICAgICAgICAiKHdsKSBIb25nIEtvbmcgRmlyIFNoaXBwaW5nIENvIEx0ZCB2IEthd2FzYWtpIEtpc2VuIEthaXNoYSBMdGQiLAogICAgICAgICIod2wpIEFscGVuc3RvdyB2IFJlZ2FsaWFuIFByb3BlcnRpZXMiLAogICAgICAgICIod2wpIEwgSiBLb3JiZXRpcyB2IFRyYW5zZ3JhaW4gU2hpcHBpbmcgQlYiLAogICAgICAgICIod2wpIENvdXJ0bmV5ICYgRmFpcmJhaXJuIEx0ZCB2IFRvbGFpbmkgQnJvcyAoSG90ZWxzKSBMdGQiLAogICAgICAgICIod2wpIEludmVzdG9ycycgQ29tcGVuc2F0aW9uIFNjaGVtZSBMdGQgdiBXZXN0IEJyb213aWNoIEJ1aWxkaW5nIFNvY2lldHkiLAogICAgICAgICIod2wpIENoYXJ0YnJvb2sgTHRkIHYgUGVyc2ltbW9uIEhvbWVzIEx0ZCIsCiAgICAgICAgIih3bCkgUGFvIE9uIHYgTGF1IFlpdSBMb25nIiwKICAgICAgICAiKHdsKSBSZSBTZWxlY3Rtb3ZlIEx0ZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIxOCIsCiAgICAiWUVBUiI6ICIyMDAyIiwKICAgICJDT1VOU0VMIjogIkZvciBHOiBIdXcgRGF2aWVzLiBGb3IgVDogSm9obiBSZWVkZXIgUS5DLiBhbmQgUmFjaGVsIFRvbmV5LiIsCiAgICAiTkFNRSI6ICIod2wpIEdyZWF0IFBlYWNlIFNoaXBwaW5nIEx0ZCB2IFRzYXZsaXJpcyAoSW50ZXJuYXRpb25hbCkgTHRkIiwKICAgICJDSVQiOiAiWzIwMDJdIEVXQ0EgQ2l2IDE0MDciLAogICAgIkNJVEFUSU9OIjogIkdyZWF0IFBlYWNlIFNoaXBwaW5nIEx0ZCB2IFRzYXZsaXJpcyAoSW50ZXJuYXRpb25hbCkgTHRkIFsyMDAyXSBFV0NBIENpdiAxNDA3IiwKICAgICJKVURHRSI6ICJMb3JkIFBoaWxsaXBzIE1SOyBNYXkgTEo7IExhd3MgTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImRpc21pc3NpbmcgdGhlIGFwcGVhbCwgdGhhdCBwcmVjZWRlbnRzIGNvdmVyaW5nIHRoZSBlZmZlY3Qgb2YgbWlzdGFrZSBvbiBjb250cmFjdCBoYWQgaGlzdG9yaWNhbGx5IGJlZW4gZGlmZmljdWx0IHRvIHJlY29uY2lsZSBhbmQgdGhlIGluc3RhbnQgY2FzZSBwcm92aWRlZCB0aGUgZmlyc3Qgb3Bwb3J0dW5pdHkgdG8gY2xhcmlmeSB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gQmVsbCBhbmQgU29sbGUgLiBJdCB3YXMgaW1wb3J0YW50IHRvIGFuYWx5c2UgdGhlIHJpZ2h0cyBhbmQgb2JsaWdhdGlvbnMgY3JlYXRlZCBieSB0aGUgY29udHJhY3QgYmVmb3JlIGNvbnNpZGVyaW5nIHRoZSBlZmZlY3Qgb2YgYW4gYWxsZWdlZCBtaXN0YWtlLiBCZWxsIGluZGljYXRlZCB0aGF0IGVxdWl0YWJsZSBpbnRlcnZlbnRpb24gc3VjaCBhcyB0aGF0IGRlbW9uc3RyYXRlZCBpbiBDb29wZXIgdiBQaGliYnMgKDE4NjcpIEwuUi4gMiBILkwuIDE0OSB3YXMgcGVybWlzc2libGUgd2hlcmUgdGhlIGNvbW1vbiBsYXcgd291bGQgaGF2ZSBydWxlZCB0aGUgY29udHJhY3Qgdm9pZCBmb3IgbWlzdGFrZSBhbmQgaXQgd2FzIHRob3VnaHQgdG8gYmUgdW5saWtlbHkgdGhhdCB0aGUgY291cnQgaW4gQmVsbCBoYWQgb3Zlcmxvb2tlZCBhbiBlcXVpdGFibGUgcmlnaHQgdG8gcmVzY2luZCBhbiBhZ3JlZW1lbnQgaW4gZGlmZmVyZW50IGNpcmN1bXN0YW5jZXMuIFdoZXJlYXMgQmVsbCB3YXMgY29uY2VybmVkIHdpdGggdGhlIHF1ZXN0aW9uIHdoZXRoZXIgdGhlIG1pc3Rha2UgaGFkIHRoZSBlZmZlY3Qgb2YgcHJvZHVjaW5nIGEgc2l0dWF0aW9uIHdoZXJlIHRoZSBwYXJ0aWVzIHdlcmUgb25seSBhYmxlIHRvIHByb3ZpZGUgc29tZXRoaW5nIGVzc2VudGlhbGx5IGRpZmZlcmVudCBmcm9tIHRoYXQgd2hpY2ggdGhleSBoYWQgY29udHJhY3RlZCB0byBwcm92aWRlLCBTb2xsZSBhbmQgdGhlIGNhc2VzIHdoaWNoIGZvbGxvd2VkIGl0IHdlcmUgbW9yZSBjb25jZXJuZWQgd2l0aCBjaXJjdW1zdGFuY2VzIHdoZXJlIHRoZSBlZmZlY3Qgb2YgdGhlIG1pc3Rha2UgbWFkZSB0aGUgY29udHJhY3QgYSBiYWQgYmFyZ2FpbiBmb3Igb25lIG9mIHRoZSBwYXJ0aWVzLiBUaGUgdHdvIGNhc2VzIHdlcmUgaXJyZWNvbmNpbGFibGUgYW5kIHRoZSBvbmx5IHdheSB0byByZXN0b3JlIGNvaGVyZW5jZSB0byB0aGF0IGFyZWEgb2YgdGhlIGxhdyB3YXMgdG8gZGVjbGFyZSB0aGF0IHRoZXJlIHdhcyBubyBqdXJpc2RpY3Rpb24gdG8gZ3JhbnQgcmVzY2lzc2lvbiBvZiBhIGNvbnRyYWN0IG9uIHRoZSBncm91bmQgb2YgY29tbW9uIG1pc3Rha2Ugd2hlcmUgdGhlIGNvbnRyYWN0IHdhcyB2YWxpZCBhbmQgZW5mb3JjZWFibGUgYXMgZmFyIGFzIHRoZSBvcmRpbmFyeSBwcmluY2lwbGVzIG9mIGNvbnRyYWN0IGxhdyB3ZXJlIGNvbmNlcm5lZCwgU29sbGUgZG91YnRlZCBhbmQgQmVsbCBhcHBsaWVkLiBJbiB0aGUgaW5zdGFudCBjYXNlLCB0aGUgY29udHJhY3QgYmV0d2VlbiB0aGUgcGFydGllcyB3YXMgYmluZGluZyBhbmQgdXBvbiBjYW5jZWxsYXRpb24gb2YgaXQsIHRoZXJlIHdhcyBubyBpbmp1c3RpY2UgaW4gdGhlIGNhbmNlbGxhdGlvbiBmZWUgcHJvdmlkZWQgZm9yIGluIHRoZSBjb250cmFjdCBiZWNvbWluZyBwYXlhYmxlLiBDb29wZXIgY29uc2lkZXJlZC4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJVS0hMIiwKICAgICJDQVRFR09SWSI6ICJDb25zdHJ1Y3Rpb24gTGF3ICZtZGFzaDsgQnVpbGRpbmcgYW5kIEVuZ2luZWVyaW5nIENvbnRyYWN0cyAmbWRhc2g7IENvbnRyYWN0IFRlcm1zICZtZGFzaDsgRGVsYXkgJm1kYXNoOyBGcnVzdHJhdGlvbiIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29uc3RydWN0aW9uIExhdyIsCiAgICAgICAgIkJ1aWxkaW5nIGFuZCBFbmdpbmVlcmluZyBDb250cmFjdHMiLAogICAgICAgICJDb250cmFjdCBUZXJtcyIsCiAgICAgICAgIkRlbGF5IiwKICAgICAgICAiRnJ1c3RyYXRpb24iCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgR3JvZ2FuIHYgUm9iaW4gTWVyZWRpdGggUGxhbnQgSGlyZSIsCiAgICAgICAgIih3bCkgQ291cnRuZXkgJiBGYWlyYmFpcm4gTHRkIHYgVG9sYWluaSBCcm9zIChIb3RlbHMpIEx0ZCIsCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IiwKICAgICAgICAiKHdsKSBIIFBhcnNvbnMgKExpdmVzdG9jaykgTHRkIHYgVXR0bGV5IEluZ2hhbSAmIENvIiwKICAgICAgICAiKHdsKSBPc2NhciBDaGVzcyBMdGQgdiBXaWxsaWFtcyIsCiAgICAgICAgIih3bCkgS2Fyc2FsZXMgKEhhcnJvdykgTHRkIHYgV2FsbGlzIiwKICAgICAgICAiKHdsKSBGaW5lbHZldCBBRyB2IFZpbmF2YSBTaGlwcGluZyBDbyBMdGQsIFRoZSBDaHJ5c2FsaXMiLAogICAgICAgICIod2wpIEFqYXlpIChFQSkgdiBCcmlzY29lIChOaWdlcmlhKSBMdGQiLAogICAgICAgICIod2wpIE9jZWFuIFRyYW1wIFRhbmtlcnMgQ29ycG9yYXRpb24gdiBWIiwKICAgICAgICAiKHdsKSBQaG90byBQcm9kdWN0aW9uIEx0ZCB2IFNlY3VyaWNvciBUcmFuc3BvcnQgTHRkIiwKICAgICAgICAiKHdsKSBSb3lzY290IFRydXN0IHYgUm9nZXJzb24iLAogICAgICAgICIod2wpIEhvbGxpZXIgdiBSYW1ibGVyIE1vdG9ycyAoQU1DKSBMdGQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIyMTkiLAogICAgIllFQVIiOiAiMTk1NiIsCiAgICAiTkFNRSI6ICIod2wpIERhdmlzIENvbnRyYWN0b3JzIEx0ZCB2IEZhcmVoYW0gVXJiYW4gRGlzdHJpY3QgQ291bmNpbCIsCiAgICAiQ0lUIjogIlsxOTU2XSBBQyA2OTYiLAogICAgIkNJVEFUSU9OIjogIkRhdmlzIENvbnRyYWN0b3JzIEx0ZCB2IEZhcmVoYW0gVXJiYW4gRGlzdHJpY3QgQ291bmNpbCBbMTk1Nl0gQUMgNjk2IiwKICAgICJKVURHRSI6ICJWaXNjb3VudCBTaW1vbmRzOyBMb3JkIE1vcnRvbiBvZiBIZW5yeXRvbjsgTG9yZCBSZWlkOyBMb3JkIFJhZGNsaWZmZTsgTG9yZCBTb21lcnZlbGwgb2YgSGFycm93IiwKICAgICJIRUxEIjogWwogICAgICAgICJvbiBhcHBlYWwgdG8gdGhlIEhvdXNlIG9mIExvcmRzLCAoMSkgdGhlIGxldHRlciBtZXJlbHkgZm9ybWVkIHBhcnQgb2YgdGhlIG5lZ290aWF0aW9ucyB3aGljaCBsZWQgdXAgdG8gdGhlIGNvbnRyYWN0IGFuZCBpdHMgdGVybXMgd2VyZSBub3QgaW5jb3Jwb3JhdGVkIGludG8gdGhhdCBjb250cmFjdDsgKDIpIGluIGEgY29udHJhY3Qgb2YgdGhpcyBraW5kIHRoZSBjb250cmFjdG9yIHVuZGVydG9vayB0byBkbyB0aGUgd29yayBmb3IgYSBkZWZpbml0ZSBzdW0sIGFuZCBoZSB0b29rIHRoZSByaXNrIG9mIHRoZSBjb3N0IGJlaW5nIGdyZWF0ZXIgb3IgbGVzcyB0aGFuIGhlIGV4cGVjdGVkOyBpZiBkZWxheSBvY2N1cnJlZCB0aHJvdWdoIG5vIG9uZSYjODIxNztzIGZhdWx0LCB0aGF0IG1pZ2h0IGJlIGluIHRoZSBjb250ZW1wbGF0aW9uIG9mIHRoZSBjb250cmFjdCBhbmQgdGhlcmUgbWlnaHQgYmUgcHJvdmlzaW9uIGZvciBleHRyYSB0aW1lIGJlaW5nIGdpdmVuOyB0byB0aGF0IGV4dGVudCB0aGUgb3RoZXIgcGFydHkgdG9vayB0aGUgcmlzayBvZiBkZWxheTsgYnV0IGhlIGRpZCBub3QgdGFrZSB0aGUgcmlzayBvZiB0aGUgY29zdCBiZWluZyBpbmNyZWFzZWQgYnkgc3VjaCBkZWxheTsgaXQgbWlnaHQgYmUgdGhhdCBkZWxheSBjb3VsZCBiZSBvZiBhIGNoYXJhY3RlciBzbyBkaWZmZXJlbnQgZnJvbSBhbnl0aGluZyBjb250ZW1wbGF0ZWQgdGhhdCB0aGUgY29udHJhY3Qgd291bGQgYmUgYXQgYW4gZW5kLCBidXQgaW4gdGhpcyBjYXNlIHRoZSBtb3N0IHRoYXQgY291bGQgYmUgc2FpZCB3YXMgdGhhdCB0aGUgZGVsYXkgd2FzIGdyZWF0ZXIgaW4gZGVncmVlIHRoYW4gd2FzIHRvIGJlIGV4cGVjdGVkOyBpdCB3YXMgbm90IGNhdXNlZCBieSBhbnkgbmV3IGFuZCB1bmZvcmVzZWVhYmxlIGZhY3RvciBvciBldmVudDsgdGhlIGpvYiBwcm92ZWQgdG8gYmUgbW9yZSBvbmVyb3VzIGJ1dCBpdCBuZXZlciBiZWNhbWUgYSBqb2Igb2YgYSBkaWZmZXJlbnQga2luZCBmcm9tIHRoYXQgY29udGVtcGxhdGVkIGluIHRoZSBjb250cmFjdDsgdGhlcmVmb3JlIHRoZSBhcHBlYWwgbXVzdCBiZSBkaXNtaXNzZWQuIEZBIFRhbXBsaW4gU3RlYW1zaGlwIENvIEx0ZCB2IEFuZ2xvIE1leGljYW4gUGV0cm9sZXVtIFByb2R1Y3RzIENvIEx0ZCBbMTkxNl0gMiBBLkMuIDM5NyBhcHBsaWVkOyBEZW5ueSBNb3R0ICZhbXA7IERpY2tzb24gTHRkIHYgSmFtZXMgQiBGcmFzZXIgJmFtcDsgQ28gTHRkIFsxOTQ0XSBBLkMuIDI2NSBhcHBsaWVkOyBCYW5rIExpbmUgTHRkIHYgQXJ0aHVyIENhcGVsICZhbXA7IENvIFsxOTE5XSBBLkMuIDQzNSBhcHBsaWVkOyBhbmQgQnJpdGlzaCBNb3ZpZXRvbmV3cyB2IExvbmRvbiBhbmQgRGlzdHJpY3QgQ2luZW1hcyBbMTk1Ml0gQS5DLiAxNjYgYXBwbGllZDsgQnVzaCB2IFdoaXRlaGF2ZW4gVHJ1c3RlZXMgKDE4ODgpIDUyIEouUC4gMzkyIGNyaXRpY2lzZWQuIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiQXBwcm92ZWQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdDQSIsCiAgICAiQ0FURUdPUlkiOiAiTGFuZGxvcmQgYW5kIFRlbmFudCBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBIb3VzaW5nICZtZGFzaDsgUmVhbCBQcm9wZXJ0eSAmbWRhc2g7IENvbnRyYWN0cyAmbWRhc2g7IEZydXN0cmF0aW9uICZtZGFzaDsgTGVhc2VzICZtZGFzaDsgVGVybWluYXRpb24gLyBTaGlwcGluZyAmbWRhc2g7IEJyZWFjaCBvZiBDb250cmFjdCAmbWRhc2g7IENhcnJpYWdlIEJ5IFNlYSAmbWRhc2g7IENoYXJ0ZXJwYXJ0aWVzICZtZGFzaDsgVGltZSAmbWRhc2g7IFdhciBab25lcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiTGFuZGxvcmQgYW5kIFRlbmFudCBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBIb3VzaW5nIiwKICAgICAgICAiUmVhbCBQcm9wZXJ0eSIsCiAgICAgICAgIkNvbnRyYWN0cyIsCiAgICAgICAgIkZydXN0cmF0aW9uIiwKICAgICAgICAiTGVhc2VzIiwKICAgICAgICAiVGVybWluYXRpb24iLAogICAgICAgICJTaGlwcGluZyIsCiAgICAgICAgIkJyZWFjaCBvZiBDb250cmFjdCIsCiAgICAgICAgIkNhcnJpYWdlIEJ5IFNlYSIsCiAgICAgICAgIkNoYXJ0ZXJwYXJ0aWVzIiwKICAgICAgICAiVGltZSIsCiAgICAgICAgIldhciBab25lcyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBGaW5lbHZldCBBRyB2IFZpbmF2YSBTaGlwcGluZyBDbyBMdGQsIFRoZSBDaHJ5c2FsaXMiLAogICAgICAgICIod2wpIEdyZWF0IFBlYWNlIFNoaXBwaW5nIEx0ZCB2IFRzYXZsaXJpcyAoSW50ZXJuYXRpb25hbCkgTHRkIiwKICAgICAgICAiKHdsKSBIIFBhcnNvbnMgKExpdmVzdG9jaykgTHRkIHYgVXR0bGV5IEluZ2hhbSAmIENvIiwKICAgICAgICAiKHdsKSBIb25nIEtvbmcgRmlyIFNoaXBwaW5nIENvIEx0ZCB2IEthd2FzYWtpIEtpc2VuIEthaXNoYSBMdGQiLAogICAgICAgICIod2wpIEwgSiBLb3JiZXRpcyB2IFRyYW5zZ3JhaW4gU2hpcHBpbmcgQlYiLAogICAgICAgICIod2wpIE5pY29sZW5lIHYgU2ltbW9uZHMiLAogICAgICAgICIod2wpIFRoZSBCcmltbmVzIiwKICAgICAgICAiKHdsKSBUcmFuc2ZpZWxkIFNoaXBwaW5nIEluYyB2IE1lcmNhdG9yIFNoaXBwaW5nIEluYyAoVGhlIEFjaGlsbGVhcykiLAogICAgICAgICIod2wpIFdoaXRlICYgQ2FydGVyIChDb3VuY2lscykgTHRkIHYgTWNHcmVnb3IiLAogICAgICAgICIod2wpIEFzc29jaWF0ZWQgSmFwYW5lc2UgQmFuayAoSW50ZXJuYXRpb25hbCkgTHRkIHYgQ3JlZGl0IGR1IE5vcmQiLAogICAgICAgICIod2wpIFNob2d1biBGaW5hbmNlIEx0ZCB2IEh1ZHNvbiIsCiAgICAgICAgIih3bCkgQmxhY2twb29sIGFuZCBGeWxkZSBBZXJvY2x1YiBMdGQgdiBCbGFja3Bvb2wgQm9yb3VnaCBDb3VuY2lsIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjIwIiwKICAgICJZRUFSIjogIjE5NjQiLAogICAgIk5BTUUiOiAiKHdsKSBPY2VhbiBUcmFtcCBUYW5rZXJzIENvcnBvcmF0aW9uIHYgViIsCiAgICAiQ0lUIjogIlsxOTY0XSAyIFFCIDIyNiIsCiAgICAiQ0lUQVRJT04iOiAiT2NlYW4gVHJhbXAgVGFua2VycyBDb3Jwb3JhdGlvbiB2IFYgWzE5NjRdIDIgUUIgMjI2IiwKICAgICJKVURHRSI6ICJMb3JkIERlbm5pbmcgTVI7IERhbmNrd2VydHMgTEo7IERvbm92YW4gTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgInRoYXQgdGhpcyB3YXMgYSB0aW1lIGNoYXJ0ZXJwYXJ0eSwgdGhlIHZveWFnZSBiZWluZyB0aGUgbWVhc3VyZSBvZiB0aW1lLCBhbmQgdGhlIHZlc3NlbCB3YXMgdW5kZXIgdGhlIGNoYXJ0ZXJlcnMmIzgyMTc7IG9yZGVycyBpbiBlbnRlcmluZyB0aGUgY2FuYWw7IHRoZXkgd2VyZSB0aGVyZWZvcmUgaW4gYnJlYWNoIG9mIHRoZSB3YXIgY2xhdXNlIGFuZCB0aGUgY2xvc3VyZSBvZiB0aGUgY2FuYWwgZGlkIG5vdCwgb24gdGhlIGZhY3RzLCBmcnVzdHJhdGUgdGhlIHZlbnR1cmUgYmVjYXVzZSB0aGUgc2l0dWF0aW9uIHdhcyBub3QgZnVuZGFtZW50YWxseSBkaWZmZXJlbnQuIChEZWNpc2lvbiBvZiBNZWdhdywgSi4gKFsxOTYzXSAyIExsb3lkJiM4MjE3O3MgUmVwLiAxNTUpIHJldmVyc2VkOyBTb2NpZXRlIEZyYW5jby1UdW5pc2llbm5lIGQmIzgyMTc7QXJtZW1lbnQtVHVuaXMgdiBTaWRlcm1hciBTcEEgWzE5NjFdIDIgUS5CLiAyNzggb3ZlcnJ1bGVkOyBvYnNlcnZhdGlvbnMgb2YgTG9yZCBSYWRjbGlmZmUgaW4gRGF2aXMgQ29udHJhY3RvcnMgdiBGYXJlaGFtIFVyYmFuIERDIFsxOTU2XSBBLkMuIDY5NiBhcHBsaWVkKS4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIsCiAgICAgICAgIkRlbm5pbmciCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiRVdIQyIsCiAgICAiQ0FURUdPUlkiOiAiU2hpcHBpbmcgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29udHJhY3RzICZtZGFzaDsgQ2FycmlhZ2UgQnkgU2VhICZtZGFzaDsgQ2hhcnRlcnBhcnRpZXMgJm1kYXNoOyBGcnVzdHJhdGlvbiAmbWRhc2g7IFRpbWUgJm1kYXNoOyBXYXIiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlNoaXBwaW5nIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbnRyYWN0cyIsCiAgICAgICAgIkNhcnJpYWdlIEJ5IFNlYSIsCiAgICAgICAgIkNoYXJ0ZXJwYXJ0aWVzIiwKICAgICAgICAiRnJ1c3RyYXRpb24iLAogICAgICAgICJUaW1lIiwKICAgICAgICAiV2FyIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICIod2wpIE9jZWFuIFRyYW1wIFRhbmtlcnMgQ29ycG9yYXRpb24gdiBWIiwKICAgICAgICAiKHdsKSBUcmFuc2ZpZWxkIFNoaXBwaW5nIEluYyB2IE1lcmNhdG9yIFNoaXBwaW5nIEluYyAoVGhlIEFjaGlsbGVhcykiLAogICAgICAgICIod2wpIFRpbm4gdiBIb2ZmbWFuICYgQ28iLAogICAgICAgICIod2wpIEggUGFyc29ucyAoTGl2ZXN0b2NrKSBMdGQgdiBVdHRsZXkgSW5naGFtICYgQ28iLAogICAgICAgICIod2wpIERhdmlzIENvbnRyYWN0b3JzIEx0ZCB2IEZhcmVoYW0gVXJiYW4gRGlzdHJpY3QgQ291bmNpbCIsCiAgICAgICAgIih3bCkgTWNDdXRjaGVvbiB2IERhdmlkIE1hY0JyYXluZSBMdGQiLAogICAgICAgICIod2wpIFRoZSBCcmltbmVzIiwKICAgICAgICAiKHdsKSBMIEogS29yYmV0aXMgdiBUcmFuc2dyYWluIFNoaXBwaW5nIEJWIiwKICAgICAgICAiKHdsKSBIb25nIEtvbmcgRmlyIFNoaXBwaW5nIENvIEx0ZCB2IEthd2FzYWtpIEtpc2VuIEthaXNoYSBMdGQiLAogICAgICAgICIod2wpIENvdXJ0bmV5ICYgRmFpcmJhaXJuIEx0ZCB2IFRvbGFpbmkgQnJvcyAoSG90ZWxzKSBMdGQiLAogICAgICAgICIod2wpIEthcnNhbGVzIChIYXJyb3cpIEx0ZCB2IFdhbGxpcyIsCiAgICAgICAgIih3bCkgV2lsbGlhbSBTaW5kYWxsIHBsYyB2IENhbWJyaWRnZXNoaXJlIENvdW50eSBDb3VuY2lsIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjIxIiwKICAgICJZRUFSIjogIjE5ODMiLAogICAgIk5BTUUiOiAiKHdsKSBGaW5lbHZldCBBRyB2IFZpbmF2YSBTaGlwcGluZyBDbyBMdGQsIFRoZSBDaHJ5c2FsaXMiLAogICAgIkNJVCI6ICJbMTk4M10gMSBXTFIgMTQ2OSIsCiAgICAiQ0lUQVRJT04iOiAiRmluZWx2ZXQgQUcgdiBWaW5hdmEgU2hpcHBpbmcgQ28gTHRkLCBUaGUgQ2hyeXNhbGlzIFsxOTgzXSAxIFdMUiAxNDY5IiwKICAgICJKVURHRSI6ICJNdXN0aWxsIEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImRpc21pc3NpbmcgQyYjODIxNztzIGFwcGVhbCwgdGhhdCB0aGUgZGF0ZSBmb3VuZCBieSB0aGUgYXJiaXRyYXRvciBhcyB0aGUgZGF0ZSBvbiB3aGljaCB0aGUgY29udHJhY3QgYmVjYW1lIGZydXN0cmF0ZWQsIHdhcyB3aXRoaW4gdGhlIGFyZWEgb2YgcGVybWlzc2libGUgZGF0ZXMgYW5kIHRoZSBjb3VydCB3b3VsZCBub3QgaW50ZXJmZXJlIHdpdGggaGlzIGZpbmRpbmdzLiBBIGRlY2xhcmF0aW9uIG9mIHdhciBkaWQgbm90IG9mIGl0c2VsZiBwcmV2ZW50IGFuZCB0aHVzIGRpc2NoYXJnZSBwZXJmb3JtYW5jZSBvZiBhIGNvbnRyYWN0LCB1bmxlc3MgaXQgbWFkZSB0aGUgY29udHJhY3QgaWxsZWdhbCwgYXMsIGZvciBleGFtcGxlLCBpbnZvbHZpbmcgdHJhZGluZyB3aXRoIHRoZSBlbmVteS4gSXQgd2FzIHRoZSBhY3RzIG9mIHdhciB0aGVtc2VsdmVzIHRoYXQgb3BlcmF0ZWQgdG8gcHJldmVudCBmdXJ0aGVyIHBlcmZvcm1hbmNlIG9mIHRoZSBjb250cmFjdCwgYW5kIHRodXMgdGhlIGFyYml0cmF0b3IgaGFkIGJlZW4gZW50aXRsZWQgdG8gY29uY2x1ZGUgdGhhdCBpdCB3YXMgb25seSB3aGVuIHRoZSBhY3R1YWwgcGh5c2ljYWwgd2FyIGl0c2VsZiB3YXMgc3VjaCBhcyB0byBwcmV2ZW50IGZ1cnRoZXIgcGVyZm9ybWFuY2Ugb2YgdGhlIGNvbnRyYWN0LCB0aGF0IGl0IGJlY2FtZSBkaXNjaGFyZ2VkLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIlVLSEwiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyAmbWRhc2g7IENvbnRyYWN0IFRlcm1zICZtZGFzaDsgQ29udHJhY3R1YWwgTGlhYmlsaXR5ICZtZGFzaDsgRXhjbHVzaW9uIENsYXVzZXMgJm1kYXNoOyBGdW5kYW1lbnRhbCBCcmVhY2ggJm1kYXNoOyBTZWN1cml0eSBDb21wYW5pZXMiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnRyYWN0cyIsCiAgICAgICAgIkNvbnRyYWN0IFRlcm1zIiwKICAgICAgICAiQ29udHJhY3R1YWwgTGlhYmlsaXR5IiwKICAgICAgICAiRXhjbHVzaW9uIENsYXVzZXMiLAogICAgICAgICJGdW5kYW1lbnRhbCBCcmVhY2giLAogICAgICAgICJTZWN1cml0eSBDb21wYW5pZXMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IiwKICAgICAgICAiKHdsKSBDdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZyAmIER5ZWluZyBDbyIsCiAgICAgICAgIih3bCkgUGFvIE9uIHYgTGF1IFlpdSBMb25nIiwKICAgICAgICAiKHdsKSBDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDb21wYW55IiwKICAgICAgICAiKHdsKSBIb2xsaWVyIHYgUmFtYmxlciBNb3RvcnMgKEFNQykgTHRkIiwKICAgICAgICAiKHdsKSBOaWNvbGVuZSB2IFNpbW1vbmRzIiwKICAgICAgICAiKHdsKSBJbnRlcmZvdG8gUGljdHVyZSBMaWJyYXJ5IEx0ZCB2IFN0aWxldHRvIFZpc3VhbCBQcm9kdWN0aW9ucyBMdGQiLAogICAgICAgICIod2wpIEogRXZhbnMgJiBTb24gKFBvcnRzbW91dGgpIHYgQW5kcmVhIE1lcnphcmlvIEx0ZCIsCiAgICAgICAgIih3bCkgQXNzb2NpYXRlZCBKYXBhbmVzZSBCYW5rIChJbnRlcm5hdGlvbmFsKSBMdGQgdiBDcmVkaXQgZHUgTm9yZCIsCiAgICAgICAgIih3bCkgQ291cnRuZXkgJiBGYWlyYmFpcm4gTHRkIHYgVG9sYWluaSBCcm9zIChIb3RlbHMpIEx0ZCIsCiAgICAgICAgIih3bCkgTCBKIEtvcmJldGlzIHYgVHJhbnNncmFpbiBTaGlwcGluZyBCViIsCiAgICAgICAgIih3bCkgVG9vbCBNZXRhbCBNYW51ZmFjdHVyaW5nIENvIEx0ZCB2IFR1bmdzdGVuIEVsZWN0cmljIENvIEx0ZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIyMiIsCiAgICAiWUVBUiI6ICIxOTgwIiwKICAgICJOQU1FIjogIih3bCkgUGhvdG8gUHJvZHVjdGlvbiBMdGQgdiBTZWN1cmljb3IgVHJhbnNwb3J0IEx0ZCIsCiAgICAiQ0lUIjogIlsxOTgwXSBBQyA4MjciLAogICAgIkNJVEFUSU9OIjogIlBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCBMdGQgWzE5ODBdIEFDIDgyNyIsCiAgICAiSlVER0UiOiAiTG9yZCBXaWxiZXJmb3JjZTsgTG9yZCBEaXBsb2NrOyBMb3JkIFNhbG1vbjsgTG9yZCBLZWl0aCBvZiBLaW5rZWw7IExvcmQgU2Nhcm1hbiIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiYWxsb3dpbmcgdGhlIGRlZmVuZGFudHMmIzgyMTc7IGFwcGVhbCwgdGhhdCB3aGV0aGVyIGFuIGV4Y2x1c2lvbiBjbGF1c2Ugd2FzIGFwdCB0byBleGNsdWRlIG9yIGxpbWl0IGxpYWJpbGl0eSB3YXMgYSBtYXR0ZXIgb2YgY29uc3RydWN0aW9uIG9mIHRoZSBjb250cmFjdDsgdGhhdCB0aGUgZmFjdCB0aGF0IGEgYnJlYWNoIG1heSBiZSBzdWNoIGFzIHRvIGp1c3RpZnkgdGhlIGlubm9jZW50IHBhcnR5IGluIHRlcm1pbmF0aW5nIG9yIHRyZWF0aW5nIGFzIHJlcHVkaWF0ZWQgdGhlIGNvbnRyYWN0IGRpZCBub3QgbWVhbiB0aGF0IHRoZSB0ZXJtcyBvZiB0aGUgY29udHJhY3QgaW4gc28gZmFyIGFzIHRoZXkgZ292ZXJuZWQgbGlhYmlsaXR5IHdlcmUgbm90IHRvIGJlIGVuZm9yY2VkOyB0aGF0LCBnZW5lcmFsbHksIHBhcnRpZXMgdG8gYSBjb250cmFjdCwgd2hlbiB0aGV5IGJhcmdhaW5lZCBvbiBlcXVhbCB0ZXJtcywgc2hvdWxkIGJlIGF0IGxpYmVydHkgdG8gYXBwb3J0aW9uIGxpYWJpbGl0eSBpbiB0aGUgY29udHJhY3QgYXMgdGhleSBzYXcgZml0OyBhbmQgdGhhdCB0aGUgd29yZGluZyBvZiB0aGUgZXhjbHVzaW9uIGNsYXVzZSBpbiB0aGUgaW5zdGFudCBjYXNlIHdhcyBhZGVxdWF0ZSB0byBleGNsdWRlIGxpYWJpbGl0eSBmb3Igd2hhdCBvY2N1cnJlZC4gKERlY2lzaW9uIG9mIENvdXJ0IG9mIEFwcGVhbCByZXZlcnNlZCBTdWlzc2UgQXRsYW50aXF1ZSBTb2NpZXRlIGQmIzgyMTc7QXJtZW1lbnQgU0EgdiBOViBSb3R0ZXJkYW1zY2hlIEtvbGVuIENlbnRyYWxlIFsxOTY3XSAxIEEuQy4gMzYxIDsgQ2hhcnRlcmhvdXNlIENyZWRpdCBDbyB2IFRvbGx5IFsxOTYzXSAyIFEuQi4gNjgzICwgSGFyYnV0dCYjODIxNztzIFBsYXN0aWNpbmUgTHRkIHYgV2F5bmUgVGFuayAmYW1wOyBQdW1wIENvIEx0ZCBbMTk3MF0gMSBRLkIuIDQ0NyBhbmQgV2F0aGVzIChXZXN0ZXJuKSBMdGQgdiBBdXN0aW5zIChNZW5zd2VhcikgTHRkIFsxOTc2XSAxIExsb3lkJiM4MjE3O3MgUmVwLiAxNCBvdmVycnVsZWQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIlVLSEwiLAogICAgIkNBVEVHT1JZIjogIkNvbnRyYWN0cyAmbWRhc2g7IFBhcnQgUGVyZm9ybWFuY2UgJm1kYXNoOyBQYXltZW50cyAvIENvbnRyYWN0cyAmbWRhc2g7IFBheW1lbnRzICZtZGFzaDsgUGVyZm9ybWFuY2UgJm1kYXNoOyBSZXB1ZGlhdGlvbiAmbWRhc2g7IFNjb3RsYW5kIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJQYXJ0IFBlcmZvcm1hbmNlIiwKICAgICAgICAiUGF5bWVudHMiLAogICAgICAgICJDb250cmFjdHMiLAogICAgICAgICJQYXltZW50cyIsCiAgICAgICAgIlBlcmZvcm1hbmNlIiwKICAgICAgICAiUmVwdWRpYXRpb24iLAogICAgICAgICJTY290bGFuZCIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDb21wYW55IiwKICAgICAgICAiKHdsKSBQYW8gT24gdiBMYXUgWWl1IExvbmciLAogICAgICAgICIod2wpIFRoZSBCcmltbmVzIiwKICAgICAgICAiKHdsKSBJbnRlcmZvdG8gUGljdHVyZSBMaWJyYXJ5IEx0ZCB2IFN0aWxldHRvIFZpc3VhbCBQcm9kdWN0aW9ucyBMdGQiLAogICAgICAgICIod2wpIEZpc2hlciB2IEJlbGwiLAogICAgICAgICIod2wpIFJlIFNlbGVjdG1vdmUgTHRkIiwKICAgICAgICAiKHdsKSBTaG9ndW4gRmluYW5jZSBMdGQgdiBIdWRzb24iLAogICAgICAgICIod2wpIElubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93biBMdGQiLAogICAgICAgICIod2wpIFBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCBMdGQiLAogICAgICAgICIod2wpIFBob3RvIFByb2R1Y3Rpb24gTHRkIHYgU2VjdXJpY29yIFRyYW5zcG9ydCIsCiAgICAgICAgIih3bCkgRWRtb25kcyB2IExhd3NvbiIsCiAgICAgICAgIih3bCkgR3JlYXQgUGVhY2UgU2hpcHBpbmcgTHRkIHYgVHNhdmxpcmlzIChJbnRlcm5hdGlvbmFsKSBMdGQiCiAgICBdLAogICAgIk5VTUJFUiI6ICIyMjMiLAogICAgIllFQVIiOiAiMTk2MiIsCiAgICAiTkFNRSI6ICIod2wpIFdoaXRlICYgQ2FydGVyIChDb3VuY2lscykgTHRkIHYgTWNHcmVnb3IiLAogICAgIkNJVCI6ICJbMTk2Ml0gQUMgNDEzIiwKICAgICJDSVRBVElPTiI6ICJXaGl0ZSAmYW1wOyBDYXJ0ZXIgKENvdW5jaWxzKSBMdGQgdiBNY0dyZWdvciBbMTk2Ml0gQUMgNDEzIiwKICAgICJKVURHRSI6ICJMb3JkIFJlaWQ7IExvcmQgTW9ydG9uIG9mIEhlbnJ5dG9uOyBMb3JkIFR1Y2tlcjsgTG9yZCBLZWl0aCBvZiBBdm9uaG9sbTsgTG9yZCBIb2Rzb24iLAogICAgIkhFTEQiOiBbCiAgICAgICAgInRoYXQgdGhlIHdob2xlIHdhcyBkdWUgTGFuZ2ZvcmQgJmFtcDsgQ28gTHRkIHYgRHV0Y2ggMTk1MiBTLkMuIDE1IG92ZXJydWxlZC4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiSGVhZG5vdGVzIiwKICAgICJDT1VSVCI6ICJVS1NDIiwKICAgICJDQVRFR09SWSI6ICJDb250cmFjdHMgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29uc3VtZXIgTGF3ICZtZGFzaDsgQ29tcGFueSBMYXcgJm1kYXNoOyBSb2FkIFRyYWZmaWMgJm1kYXNoOyBCcmVhY2ggb2YgQ29udHJhY3QgJm1kYXNoOyBDYXIgUGFya3MgJm1kYXNoOyBDb21tZXJjaWFsIENvbnRyYWN0cyAmbWRhc2g7IENvbnN1bWVyIENvbnRyYWN0cyAmbWRhc2g7IFBlbmFsdGllcyAmbWRhc2g7IFBlbmFsdHkgQ2xhdXNlcyAmbWRhc2g7IFNoYXJlIFB1cmNoYXNlcyAmbWRhc2g7IFVuZmFpciBDb250cmFjdCBUZXJtcyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiQ29udHJhY3RzIE90aGVyIFJlbGF0ZWQgU3ViamVjdHM6IENvbnN1bWVyIExhdyIsCiAgICAgICAgIkNvbXBhbnkgTGF3IiwKICAgICAgICAiUm9hZCBUcmFmZmljIiwKICAgICAgICAiQnJlYWNoIG9mIENvbnRyYWN0IiwKICAgICAgICAiQ2FyIFBhcmtzIiwKICAgICAgICAiQ29tbWVyY2lhbCBDb250cmFjdHMiLAogICAgICAgICJDb25zdW1lciBDb250cmFjdHMiLAogICAgICAgICJQZW5hbHRpZXMiLAogICAgICAgICJQZW5hbHR5IENsYXVzZXMiLAogICAgICAgICJTaGFyZSBQdXJjaGFzZXMiLAogICAgICAgICJVbmZhaXIgQ29udHJhY3QgVGVybXMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgS2Fyc2FsZXMgKEhhcnJvdykgTHRkIHYgV2FsbGlzIiwKICAgICAgICAiKHdsKSBUcmFuc2ZpZWxkIFNoaXBwaW5nIEluYyB2IE1lcmNhdG9yIFNoaXBwaW5nIEluYyAoVGhlIEFjaGlsbGVhcykiLAogICAgICAgICIod2wpIFRvb2wgTWV0YWwgTWFudWZhY3R1cmluZyBDbyBMdGQgdiBUdW5nc3RlbiBFbGVjdHJpYyBDbyBMdGQiLAogICAgICAgICIod2wpIE9jZWFuIFRyYW1wIFRhbmtlcnMgQ29ycG9yYXRpb24gdiBWIiwKICAgICAgICAiKHdsKSBDYXJsaWxsIHYgQ2FyYm9saWMgU21va2UgQmFsbCBDb21wYW55IiwKICAgICAgICAiKHdsKSBOaWNvbGVuZSB2IFNpbW1vbmRzIiwKICAgICAgICAiKHdsKSBTY2hhd2VsIHYgUmVhZGUiLAogICAgICAgICIod2wpIE1jUmFlIHYgQ29tbW9ud2VhbHRoIERpc3Bvc2FscyBDb21taXNzaW9uIiwKICAgICAgICAiKHdsKSBSYWZmbGVzIHYgV2ljaGVsaGF1cyIsCiAgICAgICAgIih3bCkgS2xlaW53b3J0IEJlbnNvbiBMdGQgdiBNYWxheXNpYSBNaW5pbmcgQ29ycG9yYXRpb24iLAogICAgICAgICIod2wpIFNob2d1biBGaW5hbmNlIEx0ZCB2IEh1ZHNvbiIsCiAgICAgICAgIih3bCkgR3JhbiBHZWxhdG8gTHRkIHYgUmljaGNsaWZmIChHcm91cCkgTHRkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjI0IiwKICAgICJZRUFSIjogIjIwMTUiLAogICAgIkNPVU5TRUwiOiAiRm9yIENhdmVuZGlzaDogSm9hbm5hIFNtaXRoIFFDLCBSaWNoYXJkIExlaXBlciwgSmFtZXMgTWNDcmVhdGgsIEVkd2luIFBlZWwuIEZvciBCZWF2aXM6IEpvaG4gZGUgV2FhbCBRQywgRGF2aWQgTGV3aXMsIFJ5YW4gSG9ja2luZy4gRm9yIHRoZSBmaXJzdCByZXNwb25kZW50OiBNaWNoYWVsIEJsb2NoIFFDLCBDYW1pbGxhIEJpbmdoYW0gUUMuIEZvciB0aGUgc2Vjb25kIHJlc3BvbmRlbnQ6IEpvbmF0aGFuIEtpcmsgUUMsIERhdmlkIEFsdGFyYXMsIFRob21hcyBTYW11ZWxzLiBGb3IgdGhlIGludGVydmVuZXI6IENocmlzdG9waGVyIEJ1dGNoZXIgUUMuIiwKICAgICJBQlNUUkFDVCI6IFsKICAgICAgICAiSW4gY29uam9pbmVkIGFwcGVhbHMsIHRoZSBTdXByZW1lIENvdXJ0IGNvbnNpZGVyZWQgdGhlIGxhdyByZWxhdGluZyB0byBjb250cmFjdHVhbCBwZW5hbHR5IGNsYXVzZXMuIiwKICAgICAgICAiQ2F2ZW5kaXNoJiM4MjE3O3MgYXBwZWFsIHJlbGF0ZWQgdG8gY2xhdXNlcyBpbiBhIHNoYXJlIHNhbGUgYWdyZWVtZW50IHdoaWNoIHJlc3RyaWN0ZWQgY29tcGV0aXRpb24gYnkgdGhlIHNlbGxlciBvZiB0aGUgc2hhcmVzIGFuZCBzdGlwdWxhdGVkIGEgcmVkdWNlZCBwcmljZSBpbiB0aGUgZXZlbnQgb2YgZGVmYXVsdCBvbiBoaXMgcGFydC4gQmVhdmlzJiM4MjE3O3MgYXBwZWFsIHJlbGF0ZWQgdG8gYSBwYXJraW5nIGNoYXJnZSBvZiBcdTAwYTM4NSBpbXBvc2VkIGZvciBvdmVyc3RheWluZyB0aGUgcGVybWl0dGVkIHBlcmlvZCBvZiBmcmVlIHBhcmtpbmcuIgogICAgXSwKICAgICJOQU1FIjogIih3bCkgQ2F2ZW5kaXNoIFNxdWFyZSBIb2xkaW5nIEJWIHYgVGFsYWwgRWwgTWFrZGVzc2k7IFBhcmtpbmdFeWUgTHRkIHYgQmVhdmlzIiwKICAgICJDSVQiOiAiWzIwMTVdIFVLU0MgNjciLAogICAgIkNJVEFUSU9OIjogIkNhdmVuZGlzaCBTcXVhcmUgSG9sZGluZyBCViB2IFRhbGFsIEVsIE1ha2Rlc3NpOyBQYXJraW5nRXllIEx0ZCB2IEJlYXZpcyBbMjAxNV0gVUtTQyA2NyIsCiAgICAiSlVER0UiOiAiTG9yZCBOZXViZXJnZXIgUFNDOyBMb3JkIE1hbmNlIEpTQzsgTG9yZCBDbGFya2UgSlNDOyBMb3JkIFN1bXB0aW9uIEpTQzsgTG9yZCBDYXJud2F0aCBKU0M7IExvcmQgVG91bHNvbiBKU0M7IExvcmQgSG9kZ2UgSlNDIiwKICAgICJIRUxEIjogWwogICAgICAgICJBcHBlYWxzIGFsbG93ZWQgaW4gcGFydC4iLAogICAgICAgICIoTG9yZCBUb3Vsc29uIGRpc3NlbnRpbmcgaW4gcGFydCkgKDEpIFRoZSBwdXJwb3NlIG9mIHRoZSBsYXcgcmVsYXRpbmcgdG8gcGVuYWx0eSBjbGF1c2VzIHdhcyB0byBwcmV2ZW50IGEgY2xhaW1hbnQgcmVjb3ZlcmluZyBhIHN1bSBvZiBtb25leSBpbiByZXNwZWN0IG9mIGEgYnJlYWNoIG9mIGNvbnRyYWN0IGNvbW1pdHRlZCBieSB0aGUgZGVmZW5kYW50IHdoaWNoIGJvcmUgbGl0dGxlIG9yIG5vIHJlbGF0aW9uc2hpcCB0byB0aGUgbG9zcyBhY3R1YWxseSBzdWZmZXJlZCBieSB0aGUgY2xhaW1hbnQgYXMgYSByZXN1bHQgb2YgdGhlIGJyZWFjaCwgRXhwb3J0IENyZWRpdHMgR3VhcmFudGVlIERlcGFydG1lbnQgdiBVbml2ZXJzYWwgT2lsIFByb2R1Y3RzIENvIFsxOTgzXSAxIFcuTC5SLiAzOTkgYXBwbGllZC4gVGhlIHBlbmFsdHkgcnVsZSByZWd1bGF0ZWQgb25seSB0aGUgcmVtZWRpZXMgYXZhaWxhYmxlIGZvciBicmVhY2ggb2YgYSBwYXJ0eSYjODIxNztzIHByaW1hcnkgb2JsaWdhdGlvbnMsIG5vdCB0aGUgcHJpbWFyeSBvYmxpZ2F0aW9ucyB0aGVtc2VsdmVzLiBUaGF0IGNvbmNlcHQgcHJvdmlkZWQgdGhlIHdob2xlIGJhc2lzIG9mIHRoZSBjbGFzc2ljIGRpc3RpbmN0aW9uIGluIGxhdyBiZXR3ZWVuIGEgcGVuYWx0eSBhbmQgYSBnZW51aW5lIHByZS1lc3RpbWF0ZSBvZiBsb3NzLCB0aGUgZm9ybWVyIGJlaW5nIGVzc2VudGlhbGx5IGEgd2F5IG9mIHB1bmlzaGluZyB0aGUgY29udHJhY3QtYnJlYWtlciByYXRoZXIgdGhhbiBjb21wZW5zYXRpbmcgdGhlIGlubm9jZW50IHBhcnR5IChzZWUgcGFyYXMgMTEtMTMgb2YganVkZ21lbnQpLiBDbHlkZWJhbmsgRW5naW5lZXJpbmcgJmFtcDsgU2hpcGJ1aWxkaW5nIENvIEx0ZCB2IERvbiBKb3NlIFJhbW9zIFl6cXVpZXJkbyB5IENhc3RhbmVkYSBbMTkwNV0gQS5DLiA2IGhlbGQgdGhhdCBhIGNvbnRyYWN0dWFsIHByb3Zpc2lvbiB3b3VsZCBiZSBwZW5hbCBpZiBpdCB3YXMgJiM4MjIwO3VuY29uc2Npb25hYmxlIGFuZCBleHRyYXZhZ2FudCYjODIyMTsuIEluIER1bmxvcCBQbmV1bWF0aWMgVHlyZSBDbyBMdGQgdiBOZXcgR2FyYWdlICZhbXA7IE1vdG9yIENvIEx0ZCBbMTkxNV0gQS5DLiA3OSwgTG9yZCBEdW5lZGluIGFncmVlZCB0aGF0IHRoYXQgd2FzIHRoZSBlc3NlbnRpYWwgcXVlc3Rpb24uIExvcmQgQXRraW5zb24gY29uc2lkZXJlZCB0aGF0IHRoZSBxdWVzdGlvbiB3YXMgdGhlIG5hdHVyZSBhbmQgZXh0ZW50IG9mIHRoZSBpbm5vY2VudCBwYXJ0eSYjODIxNztzIGludGVyZXN0IGluIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgcmVsZXZhbnQgb2JsaWdhdGlvbi4gSW4gZGV0ZXJtaW5pbmcgd2hldGhlciBhIGNvbnRyYWN0dWFsIHByb3Zpc2lvbiB3YXMgcGVuYWwsIHRoZSB0cnVlIHRlc3Qgd2FzIHdoZXRoZXIgaXQgd2FzIGEgc2Vjb25kYXJ5IG9ibGlnYXRpb24gd2hpY2ggaW1wb3NlZCBhIGRldHJpbWVudCBvbiB0aGUgY29udHJhY3QtYnJlYWtlciBvdXQgb2YgYWxsIHByb3BvcnRpb24gdG8gYW55IGxlZ2l0aW1hdGUgaW50ZXJlc3Qgb2YgdGhlIGlubm9jZW50IHBhcnR5IGluIHRoZSBlbmZvcmNlbWVudCBvZiB0aGUgcHJpbWFyeSBvYmxpZ2F0aW9uLiBUaGUgaW5ub2NlbnQgcGFydHkgY291bGQgaGF2ZSBubyBwcm9wZXIgaW50ZXJlc3QgaW4gc2ltcGx5IHB1bmlzaGluZyB0aGUgZGVmYXVsdGVyLiBIaXMgaW50ZXJlc3Qgd2FzIGluIHBlcmZvcm1hbmNlIG9yIGluIHNvbWUgYXBwcm9wcmlhdGUgYWx0ZXJuYXRpdmUgdG8gcGVyZm9ybWFuY2UuIENvbXBlbnNhdGlvbiB3YXMgbm90IG5lY2Vzc2FyaWx5IHRoZSBvbmx5IGxlZ2l0aW1hdGUgaW50ZXJlc3QgdGhhdCB0aGUgaW5ub2NlbnQgcGFydHkgbWlnaHQgaGF2ZSBpbiB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIGRlZmF1bHRlciYjODIxNztzIHByaW1hcnkgb2JsaWdhdGlvbnMsIENseWRlYmFuayAsIER1bmxvcCAsIExvcmRzdmFsZSBGaW5hbmNlIFBsYyB2IEJhbmsgb2YgWmFtYmlhIFsxOTk2XSBRLkIuIDc1MiwgVW5pdGVkIEludGVybmF0aW9uYWwgUGljdHVyZXMgdiBDaW5lIEJlcyBGaWxtY2lsaWsgdmUgWWFwaW1jaWxpayBBUyBbMjAwM10gRVdDQSBDaXYgMTY2OSwgWzIwMDRdIDEgQy5MLkMuIDQwMSwgTXVycmF5IHYgTGVpc3VyZXBsYXkgUGxjIFsyMDA1XSBFV0NBIENpdiA5NjMsIFsyMDA1XSBJLlIuTC5SLiA5NDYgYW5kIFdoaXRlICZhbXA7IENhcnRlciAoQ291bmNpbHMpIEx0ZCB2IE1jR3JlZ29yIFsxOTYyXSBBLkMuIDQxMyBhcHBsaWVkIChwYXJhcyAxOS0zMikuIEFsdGhvdWdoIHRoZSBwZW5hbHR5IHJ1bGUgd2FzIG9wZW4gdG8gY3JpdGljaXNtLCBpdCB3b3VsZCBub3QgYmUgYXBwcm9wcmlhdGUgZm9yIHRoZSBpbnN0YW50IGNvdXJ0IHRvIGFib2xpc2ggaXQgb3IgZXh0ZW5kIGl0IChwYXJhcyAzNi00MykuICgyKSBJbiBDYXZlbmRpc2gmIzgyMTc7cyBhcHBlYWwsIHRoZSBmaXJzdCBjbGF1c2UgdW5kZXIgY29uc2lkZXJhdGlvbiB3YXMsIGluIHJlYWxpdHksIGEgcHJpY2UgYWRqdXN0bWVudCBjbGF1c2UuIEl0IHdhcyBhIHByaW1hcnkgb2JsaWdhdGlvbiwgcmF0aGVyIHRoYW4gYSBzZWNvbmRhcnkgcHJvdmlzaW9uLiBBbHRob3VnaCBpdCBoYWQgbm8gcmVsYXRpb25zaGlwIHdpdGggdGhlIG1lYXN1cmUgb2YgbG9zcyBhdHRyaWJ1dGFibGUgdG8gdGhlIGJyZWFjaCwgQ2F2ZW5kaXNoIGhhZCBhIGxlZ2l0aW1hdGUgaW50ZXJlc3QgaW4gdGhlIG9ic2VydmFuY2Ugb2YgdGhlIHJlc3RyaWN0aXZlIGNvdmVuYW50cyB3aGljaCBleHRlbmRlZCBiZXlvbmQgdGhlIHJlY292ZXJ5IG9mIHRoYXQgbG9zcy4gVmlld2VkIGluIHRoZSBjb250ZXh0IG9mIGEgY2FyZWZ1bGx5IG5lZ290aWF0ZWQgYWdyZWVtZW50IGJldHdlZW4gaW5mb3JtZWQgYW5kIGxlZ2FsbHkgYWR2aXNlZCBwYXJ0aWVzIGF0IGFybSYjODIxNztzIGxlbmd0aCwgdGhlIGNsYXVzZSBjb3VsZCBub3QgYmUgcmVnYXJkZWQgYXMgZXh0cmF2YWdhbnQsIGV4b3JiaXRhbnQgb3IgdW5jb25zY2lvbmFibGUuIEl0IHdhcyBub3QgYSBwZW5hbHR5IChwYXJhcyA3NC03OCwgMTc1LTE4MSkuIFRoZSBzZWNvbmQgY2xhdXNlLCB3aGljaCBjb250YWluZWQgYSBwcmljZSBmb3JtdWxhIGZvciB0aGUgc2FsZSBvZiByZXRhaW5lZCBzaGFyZXMsIHdhcyBqdXN0aWZpZWQgYnkgdGhlIHNhbWUgbGVnaXRpbWF0ZSBpbnRlcmVzdC4gSXQgd2FzIG5vdCBhIHBlbmFsdHksIEpvYnNvbiB2IEpvaG5zb24gWzE5ODldIDEgVy5MLlIuIDEwMjYgZG91YnRlZCAocGFyYXMgNzktODgsIDE4Mi0xODcpLiAoMykgSW4gQmVhdmlzJiM4MjE3O3MgYXBwZWFsLCB0aGUgcGFya2luZyBjaGFyZ2UgaGFkIHR3byBtYWluIG9iamVjdGl2ZXM6IHRvIG1hbmFnZSB0aGUgZWZmaWNpZW50IHVzZSBvZiBwYXJraW5nIHNwYWNlIGluIHRoZSBpbnRlcmVzdHMgb2YgdGhlIG5lYXJieSByZXRhaWwgb3V0bGV0cyBhbmQgb2YgdGhlaXIgY3VzdG9tZXJzLCBhbmQgdG8gcHJvdmlkZSBhbiBpbmNvbWUgc3RyZWFtIHRvIGVuYWJsZSBQYXJraW5nRXllIHRvIG1lZXQgdGhlIGNvc3RzIG9mIG9wZXJhdGluZyB0aGUgc2NoZW1lIGFuZCBtYWtlIGEgcHJvZml0LiBUaG9zZSBvYmplY3RpdmVzIHdlcmUgcGVyZmVjdGx5IHJlYXNvbmFibGUuIFRoZSBjaGFyZ2Ugd2FzIG5vdCBhIHBlbmFsdHk6IFBhcmtpbmdFeWUgaGFkIGEgbGVnaXRpbWF0ZSBpbnRlcmVzdCBpbiBjaGFyZ2luZyBvdmVyc3RheWluZyBtb3RvcmlzdHMgd2hpY2ggZXh0ZW5kZWQgYmV5b25kIHRoZSByZWNvdmVyeSBvZiBhbnkgbG9zcy4gVGhlcmUgd2FzIG5vIHJlYXNvbiB0byBzdXBwb3NlIHRoYXQgXHUwMGEzODUgd2FzIG91dCBvZiBhbGwgcHJvcG9ydGlvbiB0byBQYXJraW5nRXllJiM4MjE3O3MgaW50ZXJlc3RzLiBNb3RvcmlzdHMgcmVndWxhcmx5IHVzZWQgdGhlIGNhciBwYXJrIGtub3dpbmcgb2YgdGhlIGNoYXJnZSwgd2hpY2ggd2FzIHNvbWUgZXZpZGVuY2Ugb2YgaXRzIHJlYXNvbmFibGVuZXNzLiBUaGV5IGNsZWFybHkgcmVnYXJkZWQgdGhlIHJpc2sgb2YgaGF2aW5nIHRvIHBheSBcdTAwYTM4NSBmb3Igb3ZlcnN0YXlpbmcgYXMgYW4gYWNjZXB0YWJsZSBwcmljZSB0byBwYXkgZm9yIHRoZSBjb252ZW5pZW5jZSBvZiBwYXJraW5nIHRoZXJlLiBUaGUgZmFjdCB0aGF0IHNvbWUgY3VzdG9tZXJzIHVuZGVyZXN0aW1hdGVkIG9yIG92ZXJsb29rZWQgdGhlIHRpbWUgcmVxdWlyZWQgb3IgdGFrZW4gZm9yIHNob3BwaW5nLCBvciB3aGF0ZXZlciBlbHNlIHRoZXkgd2VyZSBkb2luZywgZGlkIG5vdCBtYWtlIHRoZSBzY2hlbWUgZXhjZXNzaXZlIG9yIHVuY29uc2Npb25hYmxlIChwYXJhcyA5Ny0xMDEsIDE5OCkuIFRoZSBwYXJraW5nIGNoYXJnZSBkaWQgbm90IGluZnJpbmdlIHRoZSBVbmZhaXIgVGVybXMgaW4gQ29uc3VtZXIgQ29udHJhY3RzIFJlZ3VsYXRpb25zIDE5OTkuIEEgcmVhc29uYWJsZSBtb3RvcmlzdCBpbiBCZWF2aXMmIzgyMTc7cyBwb3NpdGlvbiB3b3VsZCBoYXZlIGFncmVlZCB0byB0aGUgdGVybSBpbXBvc2luZyB0aGUgY2hhcmdlIGluIGluZGl2aWR1YWwgY29udHJhY3QgbmVnb3RpYXRpb25zLCBBeml6IHYgQ2FpeGEgZCYjODIxNztFc3RhbHZpcyBkZSBDYXRhbHVueWEsIFRhcnJhZ29uYSBpIE1hbnJlc2EgKENhdGFsdW55YWNhaXhhKSAoQy00MTUvMTEpIFsyMDEzXSAzIEMuTS5MLlIuIDUgYXBwbGllZCAocGFyYXMgMTAyLTExNCwgMjAwLTIxMykuICg0KSAoUGVyIExvcmQgTWFuY2UpIFRoZSBjb3VydHMgYmVsb3cgaGFkIGZvdW5kIHNvbWUgc3VwcG9ydCBpbiB0aGUgUHJvdGVjdGlvbiBvZiBGcmVlZG9tcyBBY3QgMjAxMiBmb3IgdGhlIHZpZXcgdGhhdCBjaGFyZ2VzIGxpa2UgdGhlIHBhcmtpbmcgY2hhcmdlIGluIEJlYXZpcyYjODIxNztzIGNhc2Ugd2VyZSBub3QgdG8gYmUgcmVnYXJkZWQgYXMgdW5lbmZvcmNlYWJsZS4gVGhhdCB3YXMgYSBtaXNyZWFkaW5nIG9mIHRoZSBBY3QuIFRoZSByZWZlcmVuY2UgaW4gU2NoLjQgcGFyYS4xIHRvIGEgcmVsZXZhbnQgJiM4MjIwO29ibGlnYXRpb24mIzgyMjE7IGRpZCBub3QgZXhjbHVkZSB0aGUgcGVuYWx0eSBkb2N0cmluZS4gT24gdGhlIGNvbnRyYXJ5LCBpZiBhIGNvbnRyYWN0dWFsbHktc3RpcHVsYXRlZCBjaGFyZ2Ugd2FzIGEgcGVuYWx0eSwgdGhlcmUgd291bGQgYmUgbm8gb2JsaWdhdGlvbiAocGFyYS4xOTEpLiAoUGVyIExvcmQgVG91bHNvbikgVGhlIHBlbmFsdHkgY2xhdXNlIG1hZGUgbm8gYWxsb3dhbmNlIGZvciBjaXJjdW1zdGFuY2VzLCBhbGxvd2VkIG5vIHBlcmlvZCBvZiBncmFjZSBhbmQgcHJvdmlkZWQgbm8gcm9vbSBmb3IgYWRqdXN0bWVudC4gUGFya2luZ0V5ZSBoYWQgZmFpbGVkIHRvIHNob3cgZmFjdHVhbCBncm91bmRzIG9uIHdoaWNoIGl0IGNvdWxkIHJlYXNvbmFibHkgYXNzdW1lIHRoYXQgYSBjdXN0b21lciB1c2luZyB0aGUgY2FyIHBhcmsgd291bGQgaGF2ZSBhZ3JlZWQsIGluIGluZGl2aWR1YWwgbmVnb3RpYXRpb25zLCB0byBwYXkgXHUwMGEzODUgaWYgaGUgb3ZlcnN0YXllZCBmb3IgZXZlbiBvbmUgbWludXRlLCBBeml6IGNvbnNpZGVyZWQgKHBhcmFzIDMwNi0zMTQpLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIiwKICAgICAgICAiTmV1YmVyZ2VyIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJIZWFkbm90ZXMiLAogICAgIkNPVVJUIjogIkVXQ0EiLAogICAgIkNBVEVHT1JZIjogIkRhbWFnZXMgJm1kYXNoOyBEZWxheSAmbWRhc2g7IFByb2ZpdHMgJm1kYXNoOyBSZW1vdGVuZXNzIC8gU2hpcHBpbmcgJm1kYXNoOyBDaGFydGVycGFydGllcyAmbWRhc2g7IERlbGF5ICZtZGFzaDsgTWVhc3VyZSBvZiBEYW1hZ2VzIC8gRGFtYWdlcyAmbWRhc2g7IEZvcmVzZWVhYmlsaXR5ICZtZGFzaDsgUmVtb3RlbmVzcyAmbWRhc2g7IFNhdGlzZmFjdG9yeSBRdWFsaXR5IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJEYW1hZ2VzIiwKICAgICAgICAiRGVsYXkiLAogICAgICAgICJQcm9maXRzIiwKICAgICAgICAiUmVtb3RlbmVzcyIsCiAgICAgICAgIlNoaXBwaW5nIiwKICAgICAgICAiQ2hhcnRlcnBhcnRpZXMiLAogICAgICAgICJEZWxheSIsCiAgICAgICAgIk1lYXN1cmUgb2YgRGFtYWdlcyIsCiAgICAgICAgIkRhbWFnZXMiLAogICAgICAgICJGb3Jlc2VlYWJpbGl0eSIsCiAgICAgICAgIlJlbW90ZW5lc3MiLAogICAgICAgICJTYXRpc2ZhY3RvcnkgUXVhbGl0eSIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiKHdsKSBUcmFuc2ZpZWxkIFNoaXBwaW5nIEluYyB2IE1lcmNhdG9yIFNoaXBwaW5nIEluYyAoVGhlIEFjaGlsbGVhcykiLAogICAgICAgICIod2wpIEVhc3QgdiBNYXVyZXIiLAogICAgICAgICIod2wpIFJveXNjb3QgVHJ1c3QgdiBSb2dlcnNvbiIsCiAgICAgICAgIih3bCkgVGhlIEJyaW1uZXMiLAogICAgICAgICIod2wpIE9jZWFuIFRyYW1wIFRhbmtlcnMgQ29ycG9yYXRpb24gdiBWIiwKICAgICAgICAiKHdsKSBIb25nIEtvbmcgRmlyIFNoaXBwaW5nIENvIEx0ZCB2IEthd2FzYWtpIEtpc2VuIEthaXNoYSBMdGQiLAogICAgICAgICIod2wpIFNjaGF3ZWwgdiBSZWFkZSIsCiAgICAgICAgIih3bCkgRGF2aXMgQ29udHJhY3RvcnMgTHRkIHYgRmFyZWhhbSBVcmJhbiBEaXN0cmljdCBDb3VuY2lsIiwKICAgICAgICAiKHdsKSBUaW5uIHYgSG9mZm1hbiAmIENvIiwKICAgICAgICAiKHdsKSBGaW5lbHZldCBBRyB2IFZpbmF2YSBTaGlwcGluZyBDbyBMdGQsIFRoZSBDaHJ5c2FsaXMiLAogICAgICAgICIod2wpIFJhZmZsZXMgdiBXaWNoZWxoYXVzIiwKICAgICAgICAiKHdsKSBMIEogS29yYmV0aXMgdiBUcmFuc2dyYWluIFNoaXBwaW5nIEJWIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjI1IiwKICAgICJZRUFSIjogIjE5NzgiLAogICAgIk5BTUUiOiAiKHdsKSBIIFBhcnNvbnMgKExpdmVzdG9jaykgTHRkIHYgVXR0bGV5IEluZ2hhbSAmIENvIiwKICAgICJDSVQiOiAiWzE5NzhdIFFCIDc5MSIsCiAgICAiQ0lUQVRJT04iOiAiSCBQYXJzb25zIChMaXZlc3RvY2spIEx0ZCB2IFV0dGxleSBJbmdoYW0gJmFtcDsgQ28gWzE5NzhdIFFCIDc5MSIsCiAgICAiSlVER0UiOiAiTG9yZCBEZW5uaW5nIE1SOyBPcnIgTEo7IFNjYXJtYW4gTEoiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImRpc21pc3NpbmcgRCYjODIxNztzIGFwcGVhbCwgdGhhdCBpdCB3b3VsZCBoYXZlIGJlZW4gaW4gdGhlIGNvbnRlbXBsYXRpb24gb2YgdGhlIHBhcnRpZXMgdGhhdCB0aGVyZSB3YXMgYSByZWFsIHBvc3NpYmlsaXR5IG9mIGhhcm0gY29taW5nIHRvIHRoZSBwaWdzIGlmIHRoZWlyIGZvb2Qgd2FzIG1hZGUgdW5maXQgYnkgcmVhc29uIG9mIHRoZSBjb25kaXRpb24gb2YgdGhlIGhvcHBlci4gVGhlIGZhY3QgdGhhdCB0aGV5IGNvdWxkIG5vdCBmb3Jlc2VlIHRoZSBleHRlbnQgb2YgdGhlIGhhcm0gd2FzIGltbWF0ZXJpYWwgYW5kIFAgY291bGQgcmVjb3ZlciB0aGUgY29zdCBvZiBoaXMgcGlncy4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJBcHByb3ZlZCIsCiAgICAgICAgIkRlbm5pbmciCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkhlYWRub3RlcyIsCiAgICAiQ09VUlQiOiAiVUtITCIsCiAgICAiQ0FURUdPUlkiOiAiU2hpcHBpbmcgT3RoZXIgUmVsYXRlZCBTdWJqZWN0czogQ29udHJhY3RzICZtZGFzaDsgRGFtYWdlcyAmbWRhc2g7IEJyZWFjaCBvZiBDb250cmFjdCAmbWRhc2g7IENoYXJ0ZXJwYXJ0aWVzICZtZGFzaDsgTGF0ZSBEZWxpdmVyeSAmbWRhc2g7IE1lYXN1cmUgb2YgRGFtYWdlcyAmbWRhc2g7IFNoaXBzIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTaGlwcGluZyBPdGhlciBSZWxhdGVkIFN1YmplY3RzOiBDb250cmFjdHMiLAogICAgICAgICJEYW1hZ2VzIiwKICAgICAgICAiQnJlYWNoIG9mIENvbnRyYWN0IiwKICAgICAgICAiQ2hhcnRlcnBhcnRpZXMiLAogICAgICAgICJMYXRlIERlbGl2ZXJ5IiwKICAgICAgICAiTWVhc3VyZSBvZiBEYW1hZ2VzIiwKICAgICAgICAiU2hpcHMiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIih3bCkgSCBQYXJzb25zIChMaXZlc3RvY2spIEx0ZCB2IFV0dGxleSBJbmdoYW0gJiBDbyIsCiAgICAgICAgIih3bCkgU2NoYXdlbCB2IFJlYWRlIiwKICAgICAgICAiKHdsKSBPY2VhbiBUcmFtcCBUYW5rZXJzIENvcnBvcmF0aW9uIHYgViIsCiAgICAgICAgIih3bCkgRmluZWx2ZXQgQUcgdiBWaW5hdmEgU2hpcHBpbmcgQ28gTHRkLCBUaGUgQ2hyeXNhbGlzIiwKICAgICAgICAiKHdsKSBFYXN0IHYgTWF1cmVyIiwKICAgICAgICAiKHdsKSBSb3lzY290IFRydXN0IHYgUm9nZXJzb24iLAogICAgICAgICIod2wpIFRpbm4gdiBIb2ZmbWFuICYgQ28iLAogICAgICAgICIod2wpIEwgSiBLb3JiZXRpcyB2IFRyYW5zZ3JhaW4gU2hpcHBpbmcgQlYiLAogICAgICAgICIod2wpIFRoZSBCcmltbmVzIiwKICAgICAgICAiKHdsKSBDYXZlbmRpc2ggU3F1YXJlIEhvbGRpbmcgQlYgdiBUYWxhbCBFbCBNYWtkZXNzaTsgUGFya2luZ0V5ZSBMdGQgdiBCZWF2aXMiLAogICAgICAgICIod2wpIEthcnNhbGVzIChIYXJyb3cpIEx0ZCB2IFdhbGxpcyIsCiAgICAgICAgIih3bCkgTmljb2xlbmUgdiBTaW1tb25kcyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIyNiIsCiAgICAiWUVBUiI6ICIyMDA4IiwKICAgICJDT1VOU0VMIjogIkZvciB0aGUgYXBwZWxsYW50OiBEb21pbmljIEtlbmRyaWNrIFFDLCBCZW5qYW1pbiBQYXJrZXIuIEZvciB0aGUgcmVzcG9uZGVudDogU2ltb24gQ3JvYWxsIFFDLCBSdXRoIEhvc2tpbmcuIiwKICAgICJBQlNUUkFDVCI6IFsKICAgICAgICAiVGhlIGFwcGVsbGFudCBjaGFydGVyZXIgKFQpIGFwcGVhbGVkIGFnYWluc3QgYSBkZWNpc2lvbiAoWzIwMDddIEVXQ0EgQ2l2IDkwMSwgWzIwMDhdIDEgQWxsIEUuUi4gKENvbW0pIDY4NSkgdXBob2xkaW5nIGFuIGFyYml0cmF0b3JzJiM4MjE3OyBydWxpbmcgb24gdGhlIGRhbWFnZXMgdG8gd2hpY2ggdGhlIHJlc3BvbmRlbnQgc2hpcG93bmVyIChNKSB3YXMgZW50aXRsZWQgZm9sbG93aW5nIHRoZSBsYXRlIHJldHVybiBvZiB0aGUgc2hpcCB3aGljaCBUIGhhZCBjaGFydGVyZWQgZnJvbSBpdC4iLAogICAgICAgICJNIGhhZCBsZXQgb3V0IGl0cyBzaGlwIHRvIFQgZm9yIGEgcGVyaW9kIG9mIGZpdmUgdG8gc2V2ZW4gbW9udGhzLCB0byBlbmQgbm8gbGF0ZXIgdGhhbiBtaWRuaWdodCBvbiBNYXkgMiwgMjAwNC4gVCBub3RpZmllZCBNIHRoYXQgdGhlIHNoaXAgd291bGQgYmUgYmFjayBubyBsYXRlciB0aGFuIHRoZW4uIE0gdGhlcmVmb3JlIGNvbnRyYWN0ZWQgdG8gbGV0IHRoZSBzaGlwIHRvIG5ldyBjaGFydGVyZXJzIGZvciBhIHBlcmlvZCBvZiBhYm91dCBmb3VyIHRvIHNpeCBtb250aHMsIHByb21pc2luZyB0aGF0IHRoZXkgY291bGQgaGF2ZSB0aGUgc2hpcCBubyBsYXRlciB0aGFuIE1heSA4LCAyMDA0LiBUaGUgYWdyZWVkIHByaWNlIG9mIGhpcmUgd2FzICQzOSw1MDAgYSBkYXkuIFRoZSBzaGlwIHdhcyBkZWxheWVkIG9uIGl0cyBsYXN0IHZveWFnZSBhbmQgTSBkaWQgbm90IGdldCBpdCBiYWNrIHVudGlsIE1heSAxMSwgMjAwNC4gVGhlIG5ldyBjaGFydGVyZXJzIGFncmVlZCB0byB0YWtlIHRoZSBzaGlwLCBidXQgYnkgdGhlbiB0aGUgbWFya2V0IGhhZCBmYWxsZW4gc2hhcnBseSBhbmQgdGhleSB3b3VsZCBvbmx5IHRha2UgaXQgYXQgYSByZWR1Y2VkIHByaWNlIG9mICQzMSw1MDAgYSBkYXkuIFRoZSBpc3N1ZSBiZWZvcmUgdGhlIGFyYml0cmF0b3JzIHdhcyB3aGV0aGVyIFQgd2FzIGxpYWJsZSB0byBwYXkgb25seSBmb3IgdGhlIHVzZSBvZiB0aGUgc2hpcCBmb3IgdGhlIG51bWJlciBvZiBkYXlzIHRoYXQgaXQgd2FzIGxhdGUgYXQgdGhlIG1hcmtldCByYXRlIHRoZW4gcHJldmFpbGluZyBvciB3aGV0aGVyLCBhcyBNIGhhZCBhcmd1ZWQsIFQgd2FzIGxpYWJsZSB0byBwYXkgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB3aGF0IE0gd291bGQgaGF2ZSBnb3QgZnJvbSB0aGUgbmV3IGNoYXJ0ZXIgaGFkIHRoZSBzaGlwIGJlZW4gcmV0dXJuZWQgaW4gdGltZSBhbmQgd2hhdCBpdCBpbiBmYWN0IGdvdC4gVGhlIGFyYml0cmF0b3JzLCBieSBhIG1ham9yaXR5LCBhZG9wdGVkIHRoZSBsYXR0ZXIgYXBwcm9hY2guIFRoZXkgY29uY2x1ZGVkIHRoYXQgdGhlIGxvc3Mgb24gdGhlIG5ldyBmaXh0dXJlIGZlbGwgd2l0aGluIHRoZSBmaXJzdCBydWxlIGluIEhhZGxleSB2IEJheGVuZGFsZSAxNTYgRS5SLiAxNDUgYXMgYXJpc2luZyAmIzgyMjA7bmF0dXJhbGx5LCBpLmUuIGFjY29yZGluZyB0byB0aGUgdXN1YWwgY291cnNlIG9mIHRoaW5ncywgZnJvbSBzdWNoIGJyZWFjaCBvZiBjb250cmFjdCBpdHNlbGYmIzgyMjE7LiBJdCBmZWxsIHdpdGhpbiB0aGF0IHJ1bGUgYmVjYXVzZSBpdCB3YXMgZGFtYWdlICYjODIyMDtvZiBhIGtpbmQgd2hpY2ggdGhlIFtjaGFydGVyZXJdLCB3aGVuIGhlIG1hZGUgdGhlIGNvbnRyYWN0LCBvdWdodCB0byBoYXZlIHJlYWxpc2VkIHdhcyBub3QgdW5saWtlbHkgdG8gcmVzdWx0IGZyb20gYSBicmVhY2ggb2YgY29udHJhY3QgW2J5IGRlbGF5IGluIHJlZGVsaXZlcnldJiM4MjIwOy4gVGhlIGRpc3NlbnRpbmcgYXJiaXRyYXRvciBkaWQgbm90IGRlbnkgdGhhdCBUIHdvdWxkIGhhdmUga25vd24gdGhhdCBNIHdvdWxkIGJlIHZlcnkgbGlrZWx5IHRvIGVudGVyIGludG8gYSBmb2xsb3dpbmcgZml4dHVyZSBkdXJpbmcgdGhlIGNvdXJzZSBvZiB0aGUgY2hhcnRlciBhbmQgdGhhdCBsYXRlIGRlbGl2ZXJ5IG1pZ2h0IGNhdXNlIHRoYXQgZml4dHVyZSB0byBiZSBsb3N0LiBIb3dldmVyLCBoZSBjb25jbHVkZWQgdGhhdCBhIHJlYXNvbmFibGUgbWFuIGluIFQmIzgyMTc7cyBwb3NpdGlvbiB3b3VsZCBub3QgaGF2ZSB1bmRlcnN0b29kIHRoYXQgaGUgd2FzIGFzc3VtaW5nIGxpYWJpbGl0eSBmb3IgdGhlIHJpc2sgb2YgdGhlIHR5cGUgb2YgbG9zcyBpbiBxdWVzdGlvbi4gSGUgc3RhdGVkIHRoYXQgdGhlIGdlbmVyYWwgdW5kZXJzdGFuZGluZyBpbiB0aGUgc2hpcHBpbmcgbWFya2V0IHdhcyB0aGF0IGxpYWJpbGl0eSB3YXMgcmVzdHJpY3RlZCB0byB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBtYXJrZXQgcmF0ZSBhbmQgdGhlIGNoYXJ0ZXIgcmF0ZSBmb3IgdGhlIG92ZXJydW4gcGVyaW9kIGFuZCB0aGF0ICYjODIyMDthbnkgZGVwYXJ0dXJlIGZyb20gdGhpcyBydWxlIFtpc10gbGlrZWx5IHRvIGdpdmUgcmlzZSB0byBhIHJlYWwgcmlzayBvZiBzZXJpb3VzIGNvbW1lcmNpYWwgdW5jZXJ0YWludHkgd2hpY2ggdGhlIGluZHVzdHJ5IGFzIGEgd2hvbGUgd291bGQgcmVnYXJkIGFzIHVuZGVzaXJhYmxlJiM4MjIxOy4iCiAgICBdLAogICAgIk5BTUUiOiAiKHdsKSBUcmFuc2ZpZWxkIFNoaXBwaW5nIEluYyB2IE1lcmNhdG9yIFNoaXBwaW5nIEluYyAoVGhlIEFjaGlsbGVhcykiLAogICAgIkNJVCI6ICJbMjAwOF0gVUtITCA0OCIsCiAgICAiQ0lUQVRJT04iOiAiVHJhbnNmaWVsZCBTaGlwcGluZyBJbmMgdiBNZXJjYXRvciBTaGlwcGluZyBJbmMgKFRoZSBBY2hpbGxlYXMpIFsyMDA4XSBVS0hMIDQ4IiwKICAgICJKVURHRSI6ICJMb3JkIEhvZmZtYW5uOyBMb3JkIEhvcGUgb2YgQ3JhaWdoZWFkOyBMb3JkIFJvZGdlciBvZiBFYXJsc2ZlcnJ5OyBMb3JkIFdhbGtlciBvZiBHZXN0aW5ndGhvcnBlOyBCYXJvbmVzcyBIYWxlIG9mIFJpY2htb25kIiwKICAgICJIRUxEIjogWwogICAgICAgICJBcHBlYWwgYWxsb3dlZC4iLAogICAgICAgICJJbiBhY2NlcHRpbmcgTSYjODIxNztzIHN1Ym1pc3Npb24gdGhhdCB3aGF0IG1hdHRlcmVkIHdhcyB0aGF0IHRoZSB0eXBlIG9mIGxvc3MgY2xhaW1lZCB3YXMgZm9yZXNlZWFibGUsIHRoZSBtYWpvcml0eSBhcmJpdHJhdG9ycyBoYWQgYXBwbGllZCB0b28gY3J1ZGUgYSB0ZXN0LCBhbmQgaXQgd2FzIGFuIGVycm9yIG9mIGxhdyB0byBhZG9wdCBpdC4gVGhlIGNvbW1vbiBiYXNpcyBvbiB3aGljaCB0aGUgcGFydGllcyBoYWQgY29udHJhY3RlZCB3YXMgZXNzZW50aWFsIHRvIHRoZSBydWxlIGluIEhhZGxleSB2IEJheGVuZGFsZSBhcyBhIHdob2xlLiBJbiBLb3Vmb3MgdiBDIEN6YXJuaWtvdyBMdGQgKFRoZSBIZXJvbiBJSSkgWzE5NjldIDEgQS5DLiAzNTAgdGhlaXIgTG9yZHNoaXBzIGhhZCBoYWQgd2VsbCBpbiBtaW5kIHRoYXQgaXQgd2FzIG5vdCBzaW1wbHkgYSBxdWVzdGlvbiBvZiBwcm9iYWJpbGl0eSBidXQgYWxzbyBvZiB3aGF0IHRoZSBjb250cmFjdGluZyBwYXJ0aWVzIGhhZCB0byBiZSB0YWtlbiB0byBoYXZlIGhhZCBpbiBtaW5kLCBoYXZpbmcgcmVnYXJkIHRvIHRoZSBuYXR1cmUgYW5kIG9iamVjdCBvZiB0aGVpciBidXNpbmVzcyB0cmFuc2FjdGlvbi4gV2hhdCBtYXR0ZXJlZCB3YXMgd2hldGhlciB0aGUgY29tbW9uIGludGVudGlvbiBvZiByZWFzb25hYmxlIHBhcnRpZXMgdG8gYSBjaGFydGVycGFydHkgb2YgdGhpcyBzb3J0IHdvdWxkIGhhdmUgYmVlbiB0aGF0LCBpbiB0aGUgZXZlbnQgb2YgYSByZWxhdGl2ZWx5IHNob3J0IGRlbGF5IGluIHJlZGVsaXZlcnksIGFuIGV4dHJhb3JkaW5hcnkgbG9zcywgbWVhc3VyZWQgb3ZlciB0aGUgd2hvbGUgdGVybSBvZiB0aGUgcmVuZXdlZCBmaXh0dXJlLCB3YXMsIGluIHRoZSB3b3JkcyBvZiBMb3JkIFJlaWQgaW4gVGhlIEhlcm9uIElJICwgJiM4MjIwO3N1ZmZpY2llbnRseSBsaWtlbHkgdG8gcmVzdWx0IGZyb20gdGhlIGJyZWFjaCBvZiBjb250cmFjdCB0byBtYWtlIGl0IHByb3BlciB0byBob2xkIHRoYXQgdGhlIGxvc3MgZmxvd2VkIG5hdHVyYWxseSBmcm9tIHRoZSBicmVhY2ggb3IgdGhhdCBsb3NzIG9mIHRoYXQga2luZCBzaG91bGQgaGF2ZSBiZWVuIHdpdGhpbiBbdGhlIGRlZmF1bHRpbmcgcGFydHkmIzgyMTc7c10gY29udGVtcGxhdGlvbiYjODIyMTsuIFRoYXQgd291bGQgbm90IGhhdmUgYmVlbiB0aGUgY29tbW9uIGludGVudGlvbiBvZiByZWFzb25hYmxlIGNvbnRyYWN0aW5nIHBhcnRpZXMuIEl0IHdhcyBjb250cmFyeSB0byB0aGUgcHJpbmNpcGxlIHN0YXRlZCBpbiBWaWN0b3JpYSBMYXVuZHJ5IChXaW5kc29yKSB2IE5ld21hbiBJbmR1c3RyaWVzIFsxOTQ5XSAyIEsuQi4gNTI4LCBhbmQgcmVhZmZpcm1lZCBpbiBUaGUgSGVyb24gSUkgLCB0byBzdXBwb3NlIHRoYXQgdGhlIHBhcnRpZXMgd2VyZSBjb250cmFjdGluZyBvbiB0aGUgYmFzaXMgdGhhdCBUIHdvdWxkIGJlIGxpYWJsZSBmb3IgYW55IGxvc3MsIGhvd2V2ZXIgbGFyZ2UsIG9jY2FzaW9uZWQgYnkgYSBkZWxheSBpbiByZWRlbGl2ZXJ5IGluIGNpcmN1bXN0YW5jZXMgd2hlcmUgaXQgaGFkIG5vIGtub3dsZWRnZSBvZiwgb3IgY29udHJvbCBvdmVyLCB0aGUgbmV3IGZpeHR1cmUgZW50ZXJlZCBpbnRvIGJ5IE0sIEhhZGxleSB2IEJheGVuZGFsZSAsIFRoZSBIZXJvbiBJSSBhbmQgVmljdG9yaWEgTGF1bmRyeSBhcHBsaWVkLiIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFwcHJvdmVkIiwKICAgICAgICAiSGFsZSIsCiAgICAgICAgIkhvZmZtYW5uIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIE92ZXJ2aWV3cyIsCiAgICAiTkFNRSI6ICJDYXNlIE92ZXJ2aWV3cyBmb3IgT2ZmZXJzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBUb3dhcmRzIFByb21pc3NvcnkgRXN0b3BwZWwiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgUmVzcG9uc2VzIHRvIE9mZmVycyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBNaXN0YWtlIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIENvbnNpZGVyYXRpb24iLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEltcGxpY2F0aW9uIG9mIFRlcm1zIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJPZmZlcnMiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIk9mZmVycyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPk9iamVjdGl2ZSBEZXRlcm1pbmF0aW9uIG9mIEludGVudGlvbjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U21pdGggdiBIdWdoZXM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+UGFydGllcyB0byBhIGNvbnRyYWN0IGFyZSBkZWVtZWQgdG8gaGF2ZSBjb250cmFjdGVkIHVuZGVyIHRlcm1zIHRoYXQgY2FuIGJlIG9iamVjdGl2ZWx5IGRldGVybWluZWQsIHJhdGhlciB0aGFuIGFjY29yZGluZyB0byB0aGVpciBzdWJqZWN0aXZlIGJlbGllZnMuICBBbiBvZmZlcm9yJiM4MjE3O3MgbWlzdGFrZW4gYXNzdW1wdGlvbiBhYm91dCBhbiBhdHRyaWJ1dGUgb2YgdGhlIHN1YmplY3QgbWF0dGVyIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IHN0aXB1bGF0ZWQgaW4gdGhlIHRlcm1zIGRvZXMgbm90IGdpdmUgYSBnb29kIGNhdXNlIG9mIGFjdGlvbiwgZXZlbiBzaG91bGQgdGhlIG9mZmVyZWUga25vdyBvZiB0aGUgb3RoZXIgcGFydHkmIzgyMTc7cyBtaXN0YWtlbiBhc3N1bXB0aW9uLiAoU2hvdWxkIHRoZSBtaXN0YWtlbiBhc3N1bXB0aW9uIGNvbmNlcm4gYW4gYXR0cmlidXRlIG9mIHRoZSBzdWJqZWN0IG1hdHRlciA8c3BhbiBjbGFzcz1cIml0XCI+cHJvdmlkZWQgZm9yIGJ5IHRoZSB0ZXJtczwvc3Bhbj4sIG9uIHRoZSBvdGhlciBoYW5kLCB0aGUgb2ZmZXJlZSYjODIxNztzIGFjY2VwdGFuY2Ugd2lsbCBub3QgYmUgdmFsaWQsIHNlZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IYXJ0b2c8L3NwYW4+Lik8L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Um9zZSB2IFBpbTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BbiBvZmZlcm9yIHdobyB0YWtlcyBiYWQgYWR2aWNlLCBvbiB0aGUgYmFzaXMgb2Ygd2hpY2ggbWFrZXMgYW4gaW5jb3JyZWN0IGFzc3VtcHRpb24gYWJvdXQgYW4gYXR0cmlidXRlIG9mIHRoZSBzdWJqZWN0IG1hdHRlciBmb3Igd2hpY2ggbm8gY29udHJhY3R1YWwgdGVybSBwcm92aWRlcywgZG9lcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBoYXZlIGEgY2F1c2Ugb2YgYWN0aW9uIGFnYWluc3QgdGhlIHBhcnR5IHdobyBnYXZlIHRoZSBhZHZpY2UuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhhcnRvZyB2IENvbGluICZhbXA7IFNoaWVsZHM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSB0ZXJtIG9mIGFuIG9mZmVyIG1hZGUgaW4gZXJyb3IsIGhhdmluZyB0aGUgZWZmZWN0IG9mIHNrZXdpbmcgdGhlIGJhcmdhaW4gY29uc2lkZXJhYmx5IGluIGZhdm91ciBvZiB0aGUgb2ZmZXJlZSwgd2lsbCBub3QgYmUgaGVsZCB0byBiZSB2YWxpZCwgc2hvdWxkIHRoZSBvZmZlcmVlIHNuYXAgaXQgdXAsIGtub3dpbmcgb3Igc3Ryb25nbHkgc3VzcGVjdGluZyB0aGUgb2ZmZXJvciYjODIxNztzIG1pc3Rha2UgPHNwYW4gY2xhc3M9XCJpdFwiPmFzIHRvIGEgdGVybTwvc3Bhbj4uIENmLiBzaXR1YXRpb24gaW4gd2hpY2ggbWlzdGFrZSBpcyBhcyB0byA8c3BhbiBjbGFzcz1cImJkXCI+YXNzdW1wdGlvbjwvc3Bhbj4gZm9yIHdoaWNoIHRoZXJlIGlzIG5vIHRlcm0uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNlbnRyb3ZpbmNpYWwgdiBNZXJjaGFudCBJbnZlc3RvcnM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBtaXN0YWtlIGluIHRoZSB0ZXJtcyBvZiBhbiBvZmZlciwgb2Ygd2hpY2ggaXQgd291bGQgYmUgcmVhc29uYWJsZSBzYXkgdGhlIG9mZmVyZWUgbXVzdCBoYXZlIHJlYWxpc2VkIHdhcyBhIG1pc3Rha2UsIHdpbGwgbmVnYXRpdmUgY29uc2Vuc3VzIGFkIGlkZW0gYW5kIHZvaWRpbmcgdGhlIGNvbnRyYWN0LiBIb3dldmVyLCBhcyB0aGlzIGlzIGEgbWF0dGVyIG9mIGZhY3QgdG8gYmUgZXN0YWJsaXNoZWQgaW4gY291cnQsIGFuZCBhbiBhcHBsaWNhdGlvbiBmb3Igc3VtbWFyeSBqdWRnbWVudCBvbiBzdWNoIGdyb3VuZHMgd2lsbCB0aGVyZWZvcmUgZmFpbC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2h3ZWUgS2luIEtvbmcgdiBEaWdpbGFuZE1hbGwuY29tPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkJ5IGNvbnRyYXN0IHRvIGVhcmxpZXIgY2FzZXMgaW4gd2hpY2ggdGhlIG1vcmFsaXR5IG9mIGFuIG9mZmVyZWUmIzgyMTc7cyB0YWtpbmcgYWR2YW50YWdlIG9mIGFuIG9mZmVyb3ImIzgyMTc7cyBtaXN0YWtlLCBhYm91dCB3aGljaCBoZSBrbmV3IG9yIGNvdWxkIGJlIHNhaWQgdG8gaGF2ZSBrbm93biwgd2FzIG9mIG5lZ2xpZ2libGUgaW1wb3J0YW5jZSwgdGhlIHVuY29uc2Npb25hYmxlICYjODIyMDtpbmRlY2VudCBoYXN0ZSYjODIyMTsgb2YgdGhvc2UgYWNjZXB0aW5nIHN1Y2ggb2ZmZXJzICYjODIyMDtpbiB0aGUgZGVhZCBvZiBuaWdodCYjODIyMTsgbWF5IGJlIG9mIG1vcmUgcmVsZXZhbmNlIHRvIHNuYXBwaW5nLXVwIGNhc2VzIGluIG1vZGVybiB0aW1lcy48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RGlzdGluZ3Vpc2hlZCBmcm9tIEludml0YXRpb24gdG8gVHJlYXQgLSBHZW5lcmFsbHk8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBhcnRyaWRnZSB2IENyaXR0ZW5kZW48L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QW4gYWR2ZXJ0IGluIGEgbmV3c3BhcGVyIHdpdGggYSBicmllZiBkZXNjcmlwdGlvbiBhbmQgYSBwcmljZSBpcyBhbiBpbnZpdGF0aW9uIHRvIHRyZWF0LCBub3QgYW4gb2ZmZXIuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkZpc2hlciB2IEJlbGw8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBkaXNwbGF5IGluIGEgc2hvcCB3aW5kb3cgaXMgYW4gaW52aXRhdGlvbiB0byB0cmVhdCwgbm90IGFuIG9mZmVyLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5HcmFpbmdlciB2IEdvdWdoPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgcHVibGlzaGVkIHByaWNlIGxpc3QgaXMgYW4gaW52aXRhdGlvbiB0byB0cmVhdCwgbm90IGFuIG9mZmVyICZtZGFzaDsgZm9yIHRoZSBzb2xpZCBjb21tZXJjaWFsIHJlYXNvbiBvZiBub3QgdHVybmluZyB1bmZ1bGZpbGxhYmxlIG9yZGVycyBpbnRvIGxhd3N1aXRzIGZvciBub24tY29tcGxldGlvbi48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Qm9vdHMgQ2FzaCBDaGVtaXN0czwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UYWtpbmcgZ29vZHMgb2ZmIHNoZWx2ZXMgYW5kIHBsYWNpbmcgdGhlbSBpbiB5b3VyIGJhc2tldCBpcyB0byBwcmVwYXJlIHRvIG1ha2UgYW4gb2ZmZXIgdG8gYnV5IHRoZW0gYXQgdGhlIGNoZWNrb3V0Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaG9ybnRvbiB2IFNob2UgTGFuZSBQYXJraW5nPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPldoZW4gYSBtYWNoaW5lcyBkaXNwZW5zZXMgdGlja2V0cyBpbiBleGNoYW5nZSBmb3IgbW9uZXksIHRoZSBtYWNoaW5lIG1ha2VzIHRoZSBvZmZlciwgd2hpY2ggaXMgYWNjZXB0ZWQgYnkgdGhlIHB1dHRpbmcgaW4gb2YgbW9uZXkuIFRlcm1zIGluY29ycG9yYXRlZCBhZnRlcndhcmRzLCBzdWNoIGFzIHByaW50ZWQgb24gdGhlIHRpY2tldCwgYXJlIG5vdCB2YWxpZGx5IGluY29ycG9yYXRlZC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2hhcGVsdG9uIHYgQmFycnk8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+SW4gYXJyYW5nZW1lbnRzIHdoZXJlIGl0IG1heSBub3QgY29tZSB0byB0aGUgYXR0ZW50aW9uIG9mIHRoZSBwcm92aWRlciBvZiBhIHNlcnZpY2UgdGhhdCB0aGUgc2VydmljZSBpcyBiZWluZyB1c2VkIHVudGlsIDxzcGFuIGNsYXNzPVwiaXRcIj5hZnRlcjwvc3Bhbj4gdGhhdCBwZXJmb3JtYW5jZSBiZWdpbnMsIHRoZSBjb250cmFjdCBpcyBuZXZlcnRoZWxlc3MgY29uY2x1ZGVkIHdoZW4gdGhlIHBlcmZvcm1hbmNlIG9mIHRoZSBzZXJ2aWNlIDxzcGFuIGNsYXNzPVwiaXRcIj5iZWdpbnM8L3NwYW4+LCBhbmQgbm90IGF0IHRoZSBwb2ludCB3aGVyZSBwYXltZW50IGlzIHNvdWdodC4gVGhlIGF2YWlsYWJpbGl0eSBvZiB0aGUgc2VydmljZSBjb25zdGl0dXRlcyB0aGUgb2ZmZXIsIHRoZSBhY3Qgb2YgYmVnaW5uaW5nIHRvIHVzZSBpdCwgdGhlIGFjY2VwdGFuY2UuIFRlcm1zIG1heSBub3Qgb3JkaW5hcmlseSBiZSBpbmNvcnBvcmF0ZWQsIHRoZXJlZm9yZSwgd2hlbiBwYXltZW50IGlzIHNvdWdodC48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RGlzdGluZ3Vpc2hlZCBmcm9tIEludml0YXRpb24gdG8gVHJlYXQgLSBJbiBVbmlsYXRlcmFsIENvbnRyYWN0czwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2FybGlsbCB2IENhcmJvbGljIFNtb2tlIEJhbGwgQ29tcGFueTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BbiBhZHZlcnRpc2VtZW50IHByb21pc2luZyBhIHJld2FyZCBmb3IgdGhlIHBlcmZvcm1hbmNlIG9mIGEgc3BlY2lmaWMgYWN0aW9uIGlzIG5vdCBhIHB1ZmYgbm9yIGFuIGludml0YXRpb24gdG8gdHJlYXQsIGJ1dCBhIHVuaWxhdGVyYWwgY29udHJhY3QsIGJpbmRpbmcgb24gdGhlIHBhcnRpZXMgb24gdmFsaWQgcGVyZm9ybWFuY2UgYXMgc3RpcHVsYXRlZC48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RGlzdGluZ3Vpc2hlZCBmcm9tIEludml0YXRpb24gdG8gVHJlYXQgLSBDb250cmFjdHMgSW52b2x2aW5nIExhbmQ8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhhcnZleSB2IEZhY2V5PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFzIHRoZSBsYXcgZGVlbXMgZWFjaCBwbG90IG9mIGxhbmQgdW5pcXVlLCB0aGUgY291cnRzIHdpbGwgbm90IGltcHV0ZSBpbnRlbnRpb24gdG8gZGlzcG9zZSBvZiBpdCBsaWdodGx5Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DbGlmdG9uIHYgUGFsdW1ibzwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5XaGVuIHRoZSBzdWJqZWN0IG1hdHRlciBpcyBsYW5kLCB0aGUgaGlnaGVyIHRoZSBzdW1zIGludm9sdmVkLCB0aGUgbW9yZSB2YWd1ZW5lc3Mgd2lsbCBtaWxpdGF0ZSBhZ2FpbnN0IHRoZSBwcmVzdW1wdGlvbiBvZiBpbnRlbnRpb24gdG8gY29udHJhY3QuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkdpYnNvbiB2IE1hbmNoZXN0ZXI8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QWx0aG91Z2ggb24gYXBwZWFsIExvcmQgRGVubmluZyBoYWQgY29uc3RydWVkIHRoZSB3aG9sZSBjb3Vyc2Ugb2YgZGVhbGluZyBhcyBmb3JtaW5nIHRoZSBjb250cmFjdCwgdGhlIExvcmRzIGhlbGQgdGhlIHdvcmRpbmcgJiM4MjE2O21heSBiZSBwcmVwYXJlZCYjODIxNzsgdml0aWF0ZWQgZmluZGluZyBhIGxldHRlciBpbiBhIGxhbmQgdHJhbnNhY3Rpb24gY29uc3RpdHV0ZWQgYW4gb2ZmZXIuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkRpc3Rpbmd1aXNoZWQgZnJvbSBJbnZpdGF0aW9uIHRvIFRyZWF0IC0gU2FsZXMgYnkgQXVjdGlvbnM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBheW5lIHYgQ2F2ZTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIGJpZCBtYWRlIGluIGFuIGF1Y3Rpb24gaXMgYW4gb2ZmZXIuIFNob3VsZCBpdCBiZSB0aGUgaGlnaGVzdCwgaXQgaXMgYWNjZXB0ZWQgd2hlbiB0aGUgZ2F2ZWwgY29tZXMgZG93bi48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SGFycmlzIHYgTmlja2Vyc2VuPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFuIGFkdmVydGlzZW1lbnQgZm9yIHRoZSBzYWxlIG9mIHNwZWNpZmljIGdvb2RzIGF0IGF1Y3Rpb24gZG9lcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBmb3JtIGEgdW5pbGF0ZXJhbCBvZmZlciB3aGljaCBpcyBhY2NlcHRlZCBieSBhdHRlbmRhbmNlLiBPdGhlcndpc2UsIHRoZSBhdWN0aW9uZWVyIHdvdWxkIGJlIGxpYWJsZSBmb3IgYnJlYWNoIHRvIGFsbCB0aG9zZSB3aG8gJiM4MjIwO2FjY2VwdGVkJiM4MjIxOyBieSBzaG93aW5nIHVwLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5XYXJsb3cgdiBIYXJyaXNvbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgYWR2ZXJ0aXNlbWVudCBvZiBhIHNhbGUgYnkgYXVjdGlvbiA8c3BhbiBjbGFzcz1cIml0XCI+d2l0aG91dCByZXNlcnZlPC9zcGFuPiBpcyBhIHVuaWxhdGVyYWwgb2ZmZXIsIGFjY2VwdGVkIGJ5IHRoZSBoaWdoZXN0IGJpZC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmFycnkgdiBEYXZpZXM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+TW9kZXJuIGF1dGhvcml0eSBmb3IgYWR2ZXJ0aXNlbWVudHMgb2YgYSBzYWxlIGJ5IGF1Y3Rpb24gd2l0aG91dCByZXNlcnZlIGJlaW5nIHVuaWxhdGVyYWwgb2ZmZXJzIGFjY2VwdGVkIGJ5IHBsYWNpbmcgdGhlIGhpZ2hlc3QgYmlkLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5EaXN0aW5ndWlzaGVkIGZyb20gSW52aXRhdGlvbiB0byBUcmVhdCAtIFNhbGVzIGJ5IFRlbmRlcjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U3BlbmNlciB2IEhhcmRpbmc8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QW4gaW52aXRhdGlvbiB0byBzdWJtaXQgdGVuZGVycyBmb3IgcHVyY2hhc2UgbGFja3MgY29udHJhY3R1YWwgY2hhcmFjdGVyIGFuZCwgZm9yYmlkZGluZyBwcm9taXNlcyBhbW91bnRpbmcgdG8gYSB1bmlsYXRlcmFsIGNvbnRyYWN0IHRvIHNlbGwgdG8gdGhlIGhpZ2hlc3QgYmlkZGVyLCBpcyBub3QgYSB1bmlsYXRlcmFsIGNvbnRyYWN0Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CbGFja3Bvb2wgYW5kIEZ5bGRlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFuIGludml0YXRpb24gdG8gc3VibWl0IHRlbmRlcnMgY29uZm9ybWluZyB0byBjZXJ0YWluIGNyaXRlcmlhIHVudGlsIGEgY2VydGFpbiBkYXRlLCBhZnRlciB3aGljaCB0aGV5IHdpbGwgYmUgZXhhbWluZWQsIGhhcyBtYWRlIGEgdW5pbGF0ZXJhbCBvZmZlciBwcm9taXNpbmcgdGhlIG9wZW5pbmcgYW5kIGNvbnNpZGVyYXRpb24gb2YgdGhlIGJpZHMgaW4gZXhjaGFuZ2UgZm9yIHRoZWlyIHRpbWVseSBhbmQgY29uZm9ybWluZyBzdWJtaXNzaW9uLiBObyBwcm9taXNlLCBob3dldmVyLCBpcyBpbXBsaWVkIGFib3V0IHdoaWNoIHdpbGwgdWx0aW1hdGVseSBiZSBhY2NlcHRlZC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SGFydmVsYSB2IFJveWFsIFRydXN0IG9mIENhbmFkYTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5XaGVuIGFuIGludml0YXRpb24gaXMgbWFkZSB0byBzdWJtaXQgY2xvc2VkIGJpZHMgcHJvbWlzZXMgdG8gc2VsbCB0byB0aGUgaGlnaGVzdCBiaWRkZXIsIGEgYmlkIHB1dHRpbmcgaXRzZWxmIGluIHRlcm1zIG9mIDxzcGFuIGNsYXNzPVwiaXRcIj5hbm90aGVyPC9zcGFuPiBiaWQgd2lsbCBub3QgYmUgdmFsaWQuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJOVU1CRVIiOiAiMjI3Igp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIE92ZXJ2aWV3cyIsCiAgICAiTkFNRSI6ICJDYXNlIE92ZXJ2aWV3cyBmb3IgUmVzcG9uc2VzIHRvIE9mZmVycyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIE1pc3Rha2UiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIENvbnNpZGVyYXRpb24iLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgT2ZmZXJzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEltcGxpY2F0aW9uIG9mIFRlcm1zIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEluY29ycG9yYXRpb24gb2YgVGVybXMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJSZXNwb25zZXMgdG8gT2ZmZXJzIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJSZXNwb25zZXMgdG8gT2ZmZXJzIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Q291bnRlci1PZmZlcjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SHlkZSB2IFdyZW5jaDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5SZXNwb25kaW5nIHRvIGFuIG9mZmVyIHdpdGggYSBzdWdnZXN0aW9uIG9mIGEgbG93ZXIgcHJpY2UgY2FuY2VscyB0aGUgb3JpZ2luYWwgb2ZmZXIgYW5kIG1ha2VzIGEgbmV3IG9uZS4gVGhlIG9yaWdpbmFsIG9mZmVyIGNhbm5vdCB0aGVuIHZhbGlkbHkgYmUgYWNjZXB0ZWQuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlN0ZXZlbnNvbiwgSmFjcXVlcyB2IE1hY0xlYW48L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QW4gZW5xdWlyeSBpbiByZXNwb25zZSB0byBhbiBvZmZlciBpcyBub3QgYSBjb3VudGVyLW9mZmVyLCB0aGVyZWZvcmUgZG9lcyBub3QgdGVybWluYXRlIHRoZSBvcmlnaW5hbCBvZmZlci4gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBhIGNvdW50ZXItb2ZmZXIgYW5kIGFuIGVucXVpcnkgbWF5IGJlIGRpc2Nlcm5lZCBieSBhc2tpbmcgd2hldGhlciB0aGUgcmVzcG9uc2UgbGVhdmVzIG9wZW4gdGhlIHBvc3NpYmlsaXR5IG9mIGFjY2VwdGluZyB0aGUgb2ZmZXIgJm1kYXNoOyBvciBzaG93cyBhbiBpbnRlbnRpb24gdG8gbW9kaWZ5IHRoZSB0ZXJtcy48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R2lic29uIC0gQ291bnRlci1PZmZlcnM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSByZXNwb25zZSB0byBhbiBvZmZlciA8c3BhbiBjbGFzcz1cIml0XCI+ZW5xdWlyaW5nPC9zcGFuPiBhYm91dCB0aGUgcG9zc2liaWxpdHkgb2YgbmV3IHRlcm1zIHJhdGhlciB0aGFuIDxzcGFuIGNsYXNzPVwiaXRcIj5wcm9wb3Npbmc8L3NwYW4+IG5ldyB0ZXJtcywgd2lsbCBub3QgYmUgYSBjb3VudGVyIG9mZmVyLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5CYXR0bGUgb2YgdGhlIEZvcm1zPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CUlMgdiBBcnRodXIgQ3J1dGNobGV5PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlRoZSBsYXN0IHNldCBvZiB0ZXJtcyBhbmQgY29uZGl0aW9ucyBwcmVzZW50ZWQgYnkgYSBwYXJ0eSB3aWxsIGdvdmVybiBhIGNvbnRyYWN0LCBzaG91bGQgdGhlIG90aGVyIHBhcnR5IGJlIGRlZW1lZCBieSBjb25kdWN0IHRvIGhhdmUgYWNjZXB0ZWQgdGhlbSwgYXMgYnkgZG9pbmcgc28sIHRoZSBmaXJzdCBwYXJ0eSBoYXMgcHJvcG9zZWQgZGlmZmVyZW50IHRlcm1zLCBhbmQgaGFzIHRoZXJlZm9yZSBtYWRlIGEgY291bnRlci1vZmZlciwgYW5udWxsaW5nIHRoZSBmaXJzdC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QnV0bGVyIHYgRXgtQ2VsbC1PPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlByb3NwZWN0aXZlbHkgZW50cmVuY2hpbmcgdGhlIG9wZXJhdGlvbiBvbmUmIzgyMTc7cyBvd24gdGVybXMgYW5kIGNvbmRpdGlvbnMgd2lsbCBvbmx5IHN1Y2NlZWQgaW4gZG9pbmcgc28gd2hpbGUgdGhlIG9mZmVyIG9mIHdoaWNoIHRoZXkgYXJlIGEgcGFydCBpcyB2YWxpZC4gQXMgc29vbiBhcyB0aGUgb3RoZXIgcGFydHkgbWFrZXMgYSBjb3VudGVyLW9mZmVyLCB0aGUgcHVycG9ydGVkIHRlcm0gY2Vhc2VzIHRvIGhhdmUgYW55IHJlbGV2YW5jZS48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGVrZGF0YSB2IEFtcGhlbm9sPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPk1vZGVybiBhdXRob3JpdHkgZm9yIHRoZSBzdGFuZGFyZCBhbmFseXNpcyBpbiAmIzgyMTY7YmF0dGxlIG9mIHRoZSBmb3JtcyYjODIxNzsgY2FzZXMuIFRoZSAmIzgyMjA7bGFzdCBzaG90JiM4MjIxOyB3aW5zIGV2ZW4gc2hvdWxkIHRoZXJlIGJlIGNvbnRyYWRpY3RvcnkgZXZpZGVuY2UgZnJvbSB0aGUgYnVzaW5lc3MgY29udGV4dCBhbmQgdGhlIHBhcnRpZXMmIzgyMTc7IHByaW9yIGRlYWxpbmdzIGFzIHRvIHdoaWNoIHNldCBvZiB0ZXJtcyBhbmQgY29uZGl0aW9ucyA8c3BhbiBjbGFzcz1cIml0XCI+d2FzPC9zcGFuPiBpbnRlbmRlZCB0byBnb3Zlcm4uPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPldpdGhkcmF3YWwgYW5kIExhcHNlPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Sb3V0bGVkZ2UgdiBHcmFudDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BbiBvZmZlciB2YWxpZCBmb3IgYSBjZXJ0YWluIHBlcmlvZCBjYW4gbmV2ZXJ0aGVsZXNzIGJlIHdpdGhkcmF3biBieSB0aGUgb2ZmZXJvciBiZWZvcmUgdGhlIHBlcmlvZCBlbGFwc2VzICZtZGFzaDsgd2hvLCB0aGVyZSBiZWluZyBubyBhY2NlcHRhbmNlIGFuZCBjb25zaWRlcmF0aW9uLCBpcyBub3QgYm91bmQuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1vdW50Zm9yZCB2IFNjb3R0PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPklmIHRoZSBwcm9zcGVjdGl2ZSBvZmZlcmVlIG9mIGFuIG9mZmVyIHZhbGlkIGR1cmluZyBhIGNlcnRhaW4gcGVyaW9kIG9ubHkgaGFzIDxzcGFuIGNsYXNzPVwiaXRcIj5wYWlkPC9zcGFuPiBmb3IgdGhlIGNoYW5jZSB0byBhY2NlcHQsIHRoZW4gaGUgaGFzIHBhaWQgZm9yIGFuIG9wdGlvbiB0byBjb250cmFjdCwgYW5kIHRoZSBwcmluY2lwbGUgb2ZmZXIgY2Fubm90IHZhbGlkbHkgYmUgd2l0aGRyYXduIGJlZm9yZSB0aGUgcGVyaW9kIGVsYXBzZXMuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJ5cm5lIHYgVmFuIFRpZW5ob3Zlbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgd2l0aGRyYXdhbCBvZiBhbiBvZmZlciBtdXN0IGJlIGNvbW11bmljYXRlZCB0byB0aGUgb2ZmZXJlZSA8c3BhbiBjbGFzcz1cIml0XCI+ZWZmZWN0aXZlbHk8L3NwYW4+LiBUaGUgcG9zdGFsIHJ1bGUgZG9lcyBub3QgYXBwbHkgdG8gc3VjaCBjb21tdW5pY2F0aW9uLiBXZXJlIGl0IHRvIGRvIHNvLCB0aGUgc2VuZGVyIG9mIGFuIGFjY2VwdGFuY2UgYnkgcG9zdCB3b3VsZCBub3Qga25vdyB3aGV0aGVyIHRoZSBvZmZlcm9yIGhhZCByZWNlaXZlZCBpdCBiZWZvcmUgc2VuZGluZyBhIHdpdGhkcmF3YWwuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRpY2tpbnNvbiB2IERvZGRzPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkNvbW11bmljYXRpb24gdG8gdGhlIG9mZmVyZWUgb2YgYW4gb2ZmZXImIzgyMTc7cyB3aXRoZHJhd2FsIG1heSBiZSBpbmRpcmVjdCwgYXMgbG9uZyBhcyB0aGUgb2ZmZXJlZSBrbm93cyBvZiBpdC4gU2hvdWxkIHN1Y2ggYW4gb2ZmZXJlZSB0aGVuIHB1cnBvcnQgdG8gYWNjZXB0LCBkb2luZyBzbyB3b3VsZCBpdHNlbGYgZGVtb25zdHJhdGUgdGhlIGFic2VuY2Ugb2YgYSBjb25zZW5zdXMgYWQgaWRlbSwgYW5kIGNvdWxkIG5vdCB0aGVyZWZvcmUgYmUgZWZmZWN0aXZlLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TaHVleSB2IFVuaXRlZCBTdGF0ZXM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QW4gb2ZmZXIgbWFkZSBwdWJsaWNseSB3aWxsIGJlIGhlbGQgdG8gaGF2ZSBiZWVuIHZhbGlkbHkgd2l0aGRyYXduLCBpZiBkb25lIHNvIGJ5IHRoZSBzYW1lIG1lYW5zLiBUaGVyZSBpcyBubyByZXF1aXJlbWVudCwgaG93ZXZlciwgdGhhdCBzdWNoIHdpdGhkcmF3YWwgc2hvdWxkIGhhdmUgYmVlbiBzZWVuIGJ5IGFueW9uZSBpbiBwYXJ0aWN1bGFyLCBlLmcuLCBzb21lb25lIGVuZ2FnZWQgaW4gcGVyZm9ybWluZyB0aGUgYWN0aW9uIGZvciB0aGUgb2ZmZXImIzgyMTc7cyBhY2NlcHRhbmNlLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5WaWN0b3JpYSBIb3RlbCB2IE1vbnRlZmlvcmU8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QW4gb2ZmZXIgdGhhdCBpcyBub3QgZXhwbGljaXRseSBvZiB2YWxpZGl0eSBmb3IgYSBsaW1pdGVkIHBlcmlvZCB3aWxsIG5ldmVydGhlbGVzcyBiZSBkZWVtZWQgdG8gaGF2ZSBlbGFwc2VkLCBpbnZhbGlkYXRpbmcgYSBwdXJwb3J0ZWQgYWNjZXB0YW5jZSBjb21pbmcgbXVjaCBsYXRlci48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+QWNjZXB0YW5jZSAtIEtub3dsZWRnZSBvZiBPZmZlcjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+V2lsbGlhbXMgdiBDYXJ3YXJkaW5lPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFuIGFjdGlvbiBjb25mb3JtaW5nIHRvIHRoZSByZXF1aXJlbWVudCBmb3IgYWNjZXB0YW5jZSBvZiBhIHVuaWxhdGVyYWwgb2ZmZXIgd2FzIGhlbGQgdG8gaGF2ZSBhY2NlcHRlZCB0aGUgY29udHJhY3QsIGV2ZW4gdGhvdWdoIHRoZSBwZXJzb24gd2FzIHVuYXdhcmUgb2YgdGhlIG9mZmVyLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SIHYgQ2xhcmtlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgdW5pbGF0ZXJhbCBjb250cmFjdCBjYW5ub3QgYmUgdmFsaWRseSBhY2NlcHRlZCBieSBzb21lb25lIHVuYXdhcmUgb2YgaXRzIGV4aXN0ZW5jZSAmbWRhc2g7IGVzcGVjaWFsbHkgaWYgdGhleSBoYXBwZW4gdG8gYmUgYSB3YW50ZWQgbWFuLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5BY2NlcHRhbmNlIC0gS25vd2xlZGdlIG9mIE9mZmVyIC0gQ3Jvc3Mtb2ZmZXJzPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaW5uIHYgSG9mZm1hbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5GdW5jdGlvbmFsbHkgaWRlbnRpY2FsIGNyb3NzZWQtb2ZmZXJzIGRvIG5vdCBmb3JtIGEgY29udHJhY3QuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkFjY2VwdGFuY2UgLSBJbiBVbmlsYXRlcmFsIENvbnRyYWN0czwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+THV4b3IgdiBDb29wZXI8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIHRyYWRpdGlvbmFsIHZpZXcsIHRoYXQgYSB1bmlsYXRlcmFsIG9mZmVyIGlzIHZhbGlkbHkgYWNjZXB0ZWQgd2hlbiBpdHMgc3BlY2lmaWVkIGFjdGlvbiBpcyA8c3BhbiBjbGFzcz1cIml0XCI+Y29tcGxldGU8L3NwYW4+LCB3aWxsIHByZXZhaWwgd2hlbiB0aGUgYWN0aW9uIGVudGFpbHMgbm8gc2lnbmlmaWNhbnQgZGV0cmltZW50IHRvIHRoZSBvZmZlcmVlIGRpc3Rpbmd1aXNoYWJsZSBmcm9tIGFuIDxzcGFuIGNsYXNzPVwiaXRcIj5vcmRpbmFyeSBidXNpbmVzcyByaXNrPC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RXJyaW5ndG9uIHYgRXJyaW5ndG9uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlNob3VsZCB0aGUgYWN0aW9uIGZvciBhY2NlcHRhbmNlIG9mIGEgdW5pbGF0ZXJhbCBvZmZlciBlbnRhaWwgYSBzaWduaWZpY2FudCBkZXRyaW1lbnQgdG8gdGhlIG9mZmVyZWUsIHRoZW4gdGhlIG9mZmVyIG1heSBiZSBkZWVtZWQgdG8gaGF2ZSBiZWVuIGFjY2VwdGVkIHdoZW4gaXRzIHBlcmZvcm1hbmNlIDxzcGFuIGNsYXNzPVwiaXRcIj5iZWdpbnM8L3NwYW4+ICZtZGFzaDsgYnkgY29udHJhc3QgdG8gdGhlIHRyYWRpdGlvbmFsIGFwcHJvYWNoLCBpbiB3aGljaCBhY2NlcHRhbmNlIG9jY3VycyB3aGVuIHRoZSBhY3Rpb24gaXMgY29tcGxldGUuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRhdWxpYSBMdGQgdiBGb3VyIE1pbGxiYW5rIE5vbWluZWVzIEx0ZDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5PbmNlIHRoZSBvZmZlcmVlIGhhcyBzdGFydGVkIHRvIHBlcmZvcm0gdGhlIGFjdGlvbiBmb3IgYWNjZXB0YW5jZSBvZiBhIHVuaWxhdGVyYWwgb2ZmZXIsIGl0cyBvZmZlcm9yIG1heSBub3QgZWZmZWN0IHdpdGhkcmF3YWwgYnkgc2NvdGNoaW5nIHRoZSBvZmZlcmVlJiM4MjE3O3MgcGVyZm9ybWFuY2UuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJOVU1CRVIiOiAiMjI4Igp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIE92ZXJ2aWV3cyIsCiAgICAiTkFNRSI6ICJDYXNlIE92ZXJ2aWV3cyBmb3IgQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgSW1wbGljYXRpb24gb2YgVGVybXMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgTWlzdGFrZSIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBSZXNwb25zZXMgdG8gT2ZmZXJzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEluY29ycG9yYXRpb24gb2YgVGVybXMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIE9mZmVycyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBDb25zaWRlcmF0aW9uIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkNvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkFjY2VwdGFuY2UgQnkgQ29uZHVjdDwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2FybGlsbCAtIEFjY2VwdGFuY2U8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIG1ha2VyIG9mIGEgdW5pbGF0ZXJhbCBvZmZlciBpbXBsaWNpdGx5IGRpc3BlbnNlcyB3aXRoIHRoZSBuZWNlc3NpdHkgZm9yIGFjY2VwdGFuY2UgdG8gYmUgY29tbXVuaWNhdGUgaWYgaXQgc3BlY2lmaWVzIGFuIGFjdGlvbiB0aGUgcGVyZm9ybWFuY2Ugb2Ygd2hpY2ggZG9lcyBub3QgcGVyIHNlIG5lY2Vzc2l0YXRlIGNvbW11bmljYXRpb24gd2l0aCBvZmZlcm9yLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ccm9nZGVuIHYgTWV0cm9wb2xpdGFuIFJhaWx3YXk8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QW4gYWN0IGZyb20gd2hpY2ggYWNjZXB0YW5jZSBvZiBhbiBvZmZlciBjYW4gcmVhc29uYWJseSBiZSBpbmZlcnJlZCBieSB0aGUgb2ZmZXJvciBpcyA8c3BhbiBjbGFzcz1cIml0XCI+dmFsaWQgYWNjZXB0YW5jZTwvc3Bhbj4sIGRlc3BpdGUgdGhlIGFic2VuY2Ugb2YgZXhwbGljaXQgd29yZHMgdG8gdGhhdCBlZmZlY3QuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJyaXRpc2ggU3RlZWwgdiBDbGV2ZWxhbmQgQnJpZGdlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFjdHMgY2Fubm90IG5vdCBiZSB0YWtlbiBhcyBhY2NlcHRhbmNlIG9mIGFuIG9mZmVyIGlmIG5vIGNsZWFyIG9mZmVyIGhhcyBiZWVuIG1hZGUsIGUuZy4sIGlmIHRoZSBsaW5lIGZyb20gbmVnb3RpYXRpb24gdG8gb2ZmZXIgaGFzIG5vdCBvYnZpb3VzbHkgYmVlbiBjcm9zc2VkLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5BY2NlcHRhbmNlIEJ5IFNpbGVuY2UvSW5hY3Rpdml0eTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmVsdGhvdXNlIHYgQmluZGxleTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BbiBvZmZlcmVlJiM4MjE3O3Mgc2lsZW5jZSBhbmQgaW5hY3Rpb24gaXMgaW5jYXBhYmxlIG9mIGJlaW5nIHZhbGlkIGFjY2VwdGFuY2UsIGV2ZW4gc2hvdWxkIHRoZSB0ZXJtcyBvZiB0aGUgb2ZmZXIgc3RpcHVsYXRlIG90aGVyd2lzZS48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VGhlIExlb25pZGFzIEQ8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QW4gYWdyZWVtZW50IHRvIGFiYW5kb24gYSBjb3Vyc2Ugb2YgYWN0aW9uIG9uIHdoaWNoIHBhcnRpZXMgdG8gYSBjb250cmFjdCBlbmdhZ2VkLCBzdWNoIGFzIGFyYml0cmF0aW9uLCBtYXkgbm90IGJlIGluZmVycmVkIGZyb20gdGhlIHByb3RyYWN0ZWQgc2lsZW5jZSBvZiBib3RoIHBhcnRpZXMuIEFsdGhvdWdoIGxvbmcgc2lsZW5jZSBhbmQgaW5hY3Rpb24gb2Z0ZW4gY29tZXMgcmVmbGVjdHMgYSBzaGFyZWQgZGVzaXJlIHRvIGxldCBhIG1hdHRlciBldmFwb3JhdGUsIHNpbGVuY2UgYW5kIGluYWN0aW9uIGFyZSBhbHNvIGNvbnNpc3RlbnQgd2l0aCBmb3JnZXRmdWxuZXNzLCBzbG90aCBhbmQgYWRtaW5pc3RyYXRpdmUgZnVja3VwLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5WaXRvbCBTQSB2IE5vcmVsZiBMdGQ8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIHJ1bGUgYWdhaW5zdCBhY2NlcHRhbmNlIGJ5IHNpbGVuY2Ugb3IgaW5hY3Rpb24gZG9lcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBhcHBseSB0byB0aGUgcmVwdWRpYXRpb24gb2YgYSBjb250cmFjdCBieSBvbmUgcGFydHksIHdoaWNoIHRoZSBvdGhlciBoYXMgYnJlYWNoZWQuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFNlbGVjdG1vdmU8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+T2JpdGVyLCBQZXRlciBHaWJzb24gSmFoaHN0aWNlOiB3aGVuIGFuIG9mZmVyZWUgZGVjbGFyZXMgdGhlIG9mZmVyIHNob3VsZCBiZSBjb25zaWRlcmVkIGFjY2VwdGVkLCB1bmxlc3MgYnkgYSBjZXJ0YWluIHRpbWUgYW4gaW5kaWNhdGlvbiBpcyBnaXZlbiB0byB0aGUgY29udHJhcnksIHRoZSBvZmZlciBoYXMgYmVlbiB2YWxpZGx5IGFjY2VwdGVkLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5UcmFuc21pc3Npb24gb2YgQWNjZXB0YW5jZTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TXVsY2FpcmUgdiBOZXdzIEdyb3VwPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFuIG9mZmVyb3IgaXMgZnJlZSB0byBzdGlwdWxhdGUgdGhhdCBhbiBvZmZlciBjYW4gb25seSBiZSB2YWxpZGx5IGFjY2VwdGVkIGluIGEgcGFydGljdWxhciB3YXkuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkVsaWFzb24gdiBIZW5zaGF3PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFuIG9mZmVyb3IgaXMgZnJlZSB0byBzcGVjaWZ5IHRoZSBtZWFucyBieSB3aGljaCBhY2NlcHRhbmNlIHNob3VsZCBiZSBjb21tdW5pY2F0ZWQuIEFjY2VwdGFuY2VzIGNvbW11bmljYXRlZCBieSBvdGhlciBtZWFucyB3aWxsIGJlIGludmFsaWQgb25seSBzaG91bGQgdGhhdCBvdGhlciBtZWFucyBiZSBleGNsdWRlZCBieSB0aGUgc3RpcHVsYXRpb24sIG9yIGJ5IHRoZSByZWFzb24gZm9yIHdoaWNoIHN0aXB1bGF0aW9uIHdhcyBtYWRlLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5FbnRvcmVzIHYgTWlsZXM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QW4gYWNjZXB0YW5jZSB0cmFuc21pdHRlZCBlbGVjdHJvbmljYWxseSB3aWxsIGJlIGRlZW1lZCB0byBiZSBhY2NlcHRlZCBhdCB0aGUgdGltZSBhbmQgcGxhY2Ugb2YgaXRzIHJlY2VpcHQuIFNob3VsZCBhIG1lc3NhZ2UgYWNjZXB0aW5nIGFuIG9mZmVyIG5vdCBnZXQgdGhyb3VnaCwgYnV0IHRoZSBzZW5kZXIgcmVhc29uYWJseSBiZWxpZXZlcyBpdCBoYXMsIHRoZSBvZmZlciB3aWxsIG5vdCBoYXZlIGJlZW4gYWNjZXB0ZWQuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRoZSBCcmltbmVzPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFuIG9mZmVyb3Igd2hvc2Ugb2ZmZXIgYWxsb3dzIGZvciBhY2NlcHRhbmNlIGJ5IGVsZWN0cm9uaWMgbWVhbnMgbWF5IG5vdCByZWx5IG9uIGZhaWx1cmUgdG8gY2hlY2sgd2hldGhlciBtZXNzYWdlcyB3ZXJlIHZhbGlkbHkgcmVjZWl2ZWQuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlBvc3RhbCBSdWxlPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ib3VzZWhvbGQgRmlyZSBJbnN1cmFuY2UgdiBHcmFudDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5FdmVuIHdoZW4gYSBsZXR0ZXIgYWNjZXB0aW5nIGFuIG9mZmVyIG5ldmVyIGFycml2ZXMsIHRoZSBwb3N0YWwgcnVsZSBjYXVzZXMgaXQgbmV2ZXJ0aGVsZXNzIHRvIGJlIDxzcGFuIGNsYXNzPVwiaXRcIj52YWxpZCBhY2NlcHRhbmNlPC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SGVudGhvcm4gdiBGcmFzZXI8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIHBvc3RhbCBydWxlIGZvciBhY2NlcHRhbmNlIGFwcGxpZXMgd2hlbiBpdCBjb3VsZCBiZSBzYWlkIHRvIGhhdmUgb2NjdXJyZWQgdG8gdGhlIHBhcnRpZXMgdGhhdCBhY2NlcHRhbmNlIG1pZ2h0IGJlIHBvc3RlZDsgaS5lLiwgb25seSB3aGVuIGl0IHdvdWxkIGJlIDxzcGFuIGNsYXNzPVwiaXRcIj5yZWFzb25hYmxlPC9zcGFuPiB0byBhY2NlcHQgYW4gb2ZmZXIgYnkgcG9zdC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SG9sd2VsbCB2IEh1Z2hlczwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgcG9zdGFsIHJ1bGUgbWF5IGJlIGltcGxpY2l0bHkgb3VzdGVkIGJ5IHRoZSBsYW5ndWFnZSBvZiBhbiBvZmZlciwgc3VjaCBhcyBhIHJlcXVpcmVtZW50IHRvIGdpdmUgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdGljZTwvc3Bhbj4gb2YgYWNjZXB0YW5jZSB0byB0aGUgb2ZmZXJvci4gRXZlbiBzaG91bGQgdGhlIGFjY2VwdGVkIHRlc3QgZm9yIHRoZSBwb3N0YWwgcnVsZSBiZSBtZXQgJm1kYXNoOyB0aGF0IGFjY2VwdGFuY2UgYnkgcG9zdCB3YXMgY29udGVtcGxhdGVkICZtZGFzaDsgdGhlIHBvc3RhbCBydWxlIHdpbGwgbm90IGFwcGx5LiBUaGUgcG9zdGFsIHJ1bGUgd2lsbCBub3QgYmUgaW1wb3NlZCwgZXZlbiB3aGVuIGxvZ2ljYWwgdG8gZG8gc28gb24gYXBwbGljYXRpb24gb2YgcHJlY2VkZW50LCB3aGVuIHRoYXQgd291bGQgbGVhZCB0byAmIzgyMTY7bWFuaWZlc3QgaW5jb252ZW5pZW5jZSBhbmQgYWJzdXJkaXR5LiYjODIxNzs8L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIk5VTUJFUiI6ICIyMjkiCn0sCnsKICAgICJUWVBFIjogIkNhc2UgT3ZlcnZpZXdzIiwKICAgICJOQU1FIjogIkNhc2UgT3ZlcnZpZXdzIGZvciBDb25zaWRlcmF0aW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgQ29tbXVuaWNhdGlvbiBvZiBBY2NlcHRhbmNlIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIE1pc3Rha2UiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEluY29ycG9yYXRpb24gb2YgVGVybXMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgT2ZmZXJzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgSW1wbGljYXRpb24gb2YgVGVybXMiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNvbnNpZGVyYXRpb24iCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkNvbnNpZGVyYXRpb24iLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Db25zaWRlcmF0aW9uIE11c3QgQmUgb2YgU29tZSB2YWx1ZSBJbiBFeWUgb2YgTGF3PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaGFwcGVsbCB2IE5lc3RsZTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BbiBpdGVtIG9mIG5vIGVjb25vbWljIHZhbHVlIDxzcGFuIGNsYXNzPVwiaXRcIj5tYXkgd2VsbDwvc3Bhbj4gYmUgc3VmZmljaWVudCBjb25zaWRlcmF0aW9uLCBpZiBpdCBzaG93cyBldmlkZW5jZSBvZiBkZXRyaW1lbnQgc3VmZmVyZWQgYnkgcHJvbWlzZWUgb3IgYmVuZWZpdCBjb25mZXJyZWQgb24gcHJvbWlzb3IuIFRoaXMgbWF5IGhvbGQgZXZlbiBpZiB0aGUgZXZpZGVuY2UgaXMgbm8gbW9yZSB0aGFuIHNwZWN1bGF0aXZlLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Db25zaWRlcmF0aW9uIEluIENvbXByb21pc2VzIG9mIExlZ2FsIENsYWltczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29vayB2IFdyaWdodDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5CZWluZyBzcGFyZWQgdGhlIGV4cGVuc2Ugb2YgZGVmZW5kaW5nIGEgbGVnYWwgYWN0aW9uIHRoZSBoeXBvdGhldGljYWwgPHNwYW4gY2xhc3M9XCJpdFwiPnJlc3BvbmRlbnQ8L3NwYW4+IG9mIHdoaWNoIGtub3dzIHdvdWxkIGJlIHdvcnRobGVzcywgaXMgZ29vZCBjb25zaWRlcmF0aW9uLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5XYWRlIHYgU2ltZW9uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkJlaW5nIHNwYXJlZCB0aGUgZXhwZW5zZSBvZiBkZWZlbmRpbmcgYSBsZWdhbCBhY3Rpb24gdGhlIGNsYWltYW50IGtub3dzIHdvdWxkIDxzcGFuIGNsYXNzPVwiaXRcIj5mYWlsPC9zcGFuPiwgaS5lLiwgd291bGQgYnJpbmcgaW4gYmFkIGZhaXRoLCBpcyA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiBzdWZmaWNpZW50IGNvbnNpZGVyYXRpb24uICBGb3IgaXQgdG8gYmUgb3RoZXJ3aXNlIHdvdWxkIGJlIHRvIGdpdmUgY29udHJhY3R1YWwgZm9yY2UgdG8gZXh0b3J0aW9uIGJ5IHRoaXMgbWVhbnMuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkNvbnNpZGVyYXRpb24gTXVzdCBCZSBSZXF1ZXN0ZWQ8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbWJlIHYgQ29tYmU8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIGNvbnNpZGVyYXRpb24gcHJvdmlkZWQgYnkgYSBwcm9taXNlZSBoYXZlIGJlZW4gcmVxdWVzdGVkIGJ5IHRoZSBwcm9taXNvci48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U2hhZHdlbGwgdiBTaGFkd2VsbDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5FdmVuIHRob3VnaCBub3RoaW5nIHdhcyByZXF1ZXN0ZWQgb2YgdGhlIHByb21pc2VlLCBnb29kIGNvbnNpZGVyYXRpb24gd2FzIHRvIGJlIGZvdW5kIGluIGhhdmluZyA8c3BhbiBjbGFzcz1cIml0XCI+Z290IG1hcnJpZWQ8L3NwYW4+LCBhcyBwZXIgdGhlIChhbGJlaXQgaW5leHBsaWNpdCkgc3RpcHVsYXRpb24gb2YgdGhlIG9mZmVyLiBUbyBkbyBzbyB3YXMgdG8gaGF2ZSBzdWZmZXJlZCBkZXRyaW1lbnQsIGluIHRoZSBzZW5zZSBvZiBhIDxzcGFuIGNsYXNzPVwiaXRcIj5jaGFuZ2Ugb2YgcG9zaXRpb248L3NwYW4+Ljwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Db25zaWRlcmF0aW9uIERpc3Rpbmd1aXNoZWQgRnJvbSBDb25kaXRpb25hbCBHaWZ0czwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGlja2luc29uIHYgQWJlbDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIHByb21pc2UgdmFsaWQgb25seSBvbiBmdWxmaWxtZW50IG9mIGEgY29uZGl0aW9uIGZhaWxzIHRvIGJlIGVuZm9yY2VhYmxlIGluIGNvbnRyYWN0LCBzaG91bGQgdGhhdCBjb25kaXRpb24gZW50YWlsIG5vIGRldHJpbWVudCBwYXNzaW5nIGZyb20gdGhlIHByb21pc2VlLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Db25zaWRlcmF0aW9uIE11c3QgTm90IEJlIFBhc3Q8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJvc2NvcmxhIHYgVGhvbWFzPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgcHJvbWlzZSBtYXkgbm90IGJlIHN1cHBvcnRlZCBieSBhIGRldHJpbWVudCBpbmN1cnJlZCBieSB0aGUgcHJvbWlzZWUgPHNwYW4gY2xhc3M9XCJpdFwiPmJlZm9yZTwvc3Bhbj4gdGhlIHByb21pc2Ugd2FzIG1hZGUuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkRvY3RyaW5lIG9mIEltcGxpZWQgQXNzdW1wc2l0PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MYW1wbGVpZ2ggdiBCcmF0aHdhaXQ8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBzZXJ2aWNlIHBlcmZvcm1lZCBvbiB0aGUgdW5kZXJzdGFuZGluZyB0aGF0IHBheW1lbnQgd291bGQgY29tZSBsYXRlciBtYXkgYmUgZW1wbG95ZWQgdG8gc3VwcG9ydGluZyBhIHN1YnNlcXVlbnQgcHJvbWlzZSB0byBwYXksIHRocm91Z2ggdGhlIGRvY3RyaW5lIG9mIGltcGxpZWQgYXNzdW1wc2l0Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QYW8gT24gdiBMYXUgTG9uZzwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5PYml0ZXIsIExvcmQgU2Nhcm1hbiBzdGF0ZWQgaGlzIHVuZGVyc3RhbmRpbmcgb2YgdGhlIGNvbmRpdGlvbnMgZm9yIGltcGxpZWQgYXNzdW1wc2l0OiA8c3BhbiBjbGFzcz1cImJkXCI+KGkpPC9zcGFuPiBhbiBhY3QgZG9uZSBieSBwcm9taXNlZSBmb3IgcHJvbWlzb3IsIDxzcGFuIGNsYXNzPVwiYmRcIj4oaWkpPC9zcGFuPiBhdCBwcm9taXNvciYjODIxNztzIHJlcXVlc3QsIGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+KGlpaSk8L3NwYW4+IHVuZGVyc3Rvb2QgYnkgYm90aCBwYXJ0aWVzIHRvIGhhdmUgYmVlbiBwZXJmb3JtZWQgZm9yIHRoZSBiZW5lZml0IG9mIHRoZSBwcm9taXNlIChpLmUuLCBwYXltZW50KS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+UGVyZm9ybWFuY2Ugb2YgRXhpc3RpbmcgTGVnYWwgRHV0aWVzIGFzIENvbnNpZGVyYXRpb248L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbGxpbnMgdiBHb2RlZnJveTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgcGVyZm9ybWFuY2Ugb2YgYSBsZWdhbCBvYmxpZ2F0aW9uIHN1Y2ggYXMgZ2l2aW5nIGV2aWRlbmNlIG9uIHN1YnBvZW5hIHdpbGwgbm90IGJlIGdvb2QgY29uc2lkZXJhdGlvbiBmb3IgYSBwcm9taXNlIG9mIHJlaW1idXJzZW1lbnQuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkdsYXNicm9vayB2IEdsYW1vcmdhbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgcGVyZm9ybWFuY2Ugb2YgYSBsZWdhbCBkdXR5IG1heSBiZSBnb29kIGNvbnNpZGVyYXRpb24gc2hvdWxkIGl0IGdvIGJleW9uZCB3aGF0IGlzIG9ibGlnYXRvcnkuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPldhcmQgdiBCeWhhbTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5EZW5uaW5nIExKIGRvdWJ0ZWQgdGhlIHJ1bGUgdGhhdCBwZXJmb3JtYW5jZSBvZiBhbiBleGlzdGluZyBkdXR5IGNvdWxkIG5vdCBiZSBnb29kIGNvbnNpZGVyYXRpb24sIG9uIHRoZSBiYXNpcyB0aGF0IG1lcmVseSBnZXR0aW5nIHNvbWV0aGluZyByZXF1ZXN0ZWQgd291bGQgYmUgb2YgYmVuZWZpdCB0byBwcm9taXNvci4gVGhpcyBkcmV3IG5lYXIgdG8gdGhlIEMxOHRoIHZpZXcgYXJ0aWN1bGF0ZWQgYnkgTG9yZCBNYW5zZmllbGQsIHRoYXQgc3VmZmljaWVudCBjb25zaWRlcmF0aW9uIGlzIHRvIGJlIGZvdW5kIGluIHRoZSA8c3BhbiBjbGFzcz1cIml0XCI+JiM4MjIwO3RpZXMgb2YgY29uc2NpZW5jZSB1cG9uIGFuIHVwcmlnaHQgbWluZCYjODIyMTs8L3NwYW4+Ljwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5QZXJmb3JtYW5jZSBvZiBDb250cmFjdHVhbCBEdXRpZXMgT3dlZCB0byBhIFRoaXJkIFBhcnR5IGFzIENvbnNpZGVyYXRpb248L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRoZSBFdXJ5bWVkb248L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QW4gZXhpc3RpbmcgY29udHJhY3R1YWwgZHV0eSBvd2VkIDxzcGFuIGNsYXNzPVwiaXRcIj50byBhIDNyZCB0aGlyZCBwYXJ0eTwvc3Bhbj4gbWF5IHByZXNzZWQgaW50byB0aGUgbW91bGQgb2YgZ29vZCBjb25zaWRlcmF0aW9uLCBzaG91bGQgbm90aGluZyBlbHNlIGJlIGZvdW5kIHRvIGVuZm9yY2UgYSBidXNpbmVzcyBhcnJhbmdlbWVudCBvZiBtdXR1YWxseS1wcm9maXRhYmxlIGNoYXJhY3RlciBpbiB0aGUgbm9ybWFsIGNvdXJzZSBvZiBldmVudHMuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJOVU1CRVIiOiAiMjMwIgp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIE92ZXJ2aWV3cyIsCiAgICAiTkFNRSI6ICJDYXNlIE92ZXJ2aWV3cyBmb3IgVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgQ29uc2lkZXJhdGlvbiIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgT2ZmZXJzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEltcGxpY2F0aW9uIG9mIFRlcm1zIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEluY29ycG9yYXRpb24gb2YgVGVybXMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgUmVzcG9uc2VzIHRvIE9mZmVycyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBNaXN0YWtlIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJUb3dhcmRzIFByb21pc3NvcnkgRXN0b3BwZWwiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIlRvd2FyZHMgUHJvbWlzc29yeSBFc3RvcHBlbCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkV4aXN0aW5nIENvbnRyYWN0dWFsIE9ibGlnYXRpb25zIGFzIENvbnNpZGVyYXRpb248L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlN0aWxrIHYgTXlyaWNrPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlBlcmZvcm1hbmNlIG9mIGEgY29udHJhY3R1YWwgb2JsaWdhdGlvbiBhbHJlYWR5IG93ZWQgYnkgcHJvbWlzZWUgdG8gcHJvbWlzb3IgY2Fubm90IHByb3ZpZGUgY29uc2lkZXJhdGlvbiBmb3IgYSBuZXcgcHJvbWlzZSwgd2hpY2gsIGJ5IGNvbnNlcXVlbmNlLCB3aWxsIG5vdCBiZSBlbmZvcmNlYWJsZSBieSB0aGUgcHJvbWlzZWUuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhhcnRsZXkgdiBQb25zb25ieTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5TaG91bGQgYSBwcm9taXNlIHB1cnBvcnRpbmcgdG8gYmUgaW4gZXhjaGFuZ2UgZm9yIHBlcmZvcm1hbmNlIG9mIGV4aXN0aW5nIGNvbnRyYWN0dWFsIG9ibGlnYXRpb25zIGVudGFpbCwgaW4gcG9pbnQgb2YgZmFjdCwgcGVyZm9ybWFuY2UgZm9yIHdoaWNoIHRoZSBjb250cmFjdCBkb2VzIDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IHByb3ZpZGUsIGEgbmV3IGNvbnRyYWN0IHdpbGwgaGF2ZSBiZWVuIGVzdGFibGlzaGVkLCBhbmQgdGhlIHByb21pc2Ugd2lsbCBiZSBlbmZvcmNlYWJsZS4gIFRoZSBydWxlIHRoYXQgZXhpc3RpbmcgY29udHJhY3R1YWwgZHV0aWVzIGFyZSBub3QgZ29vZCBjb25zaWRlcmF0aW9uIGZvciBzdWNoIGEgcHJvbWlzZSBjYW5ub3QgdGhlcmVmb3JlIGFwcGx5IGluIHN1Y2ggY2lyY3Vtc3RhbmNlcy48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RXZhc2lvbiBvZiB0aGUgUnVsZSBpbiBTdGlsayB2IE15cmljazwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+V2lsbGlhbXMgdiBSb2ZmZXk8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+SW4gYSBjb250cmFjdCB0byBzdXBwbHkgZ29vZHMgb3Igc2VydmljZXMsIGlmIHRoZSBpbmFkZXF1YWN5IG9mIHRoZSBwZXJmb3JtYW5jZSBvZiBvbmUgcGFydHkgY29tZXMgdG8gdGhlIGF0dGVudGlvbiBvZiB0aGUgb3RoZXIsIHdobyB0aGVuIHByb21pc2VzIGFkZGl0aW9uYWwgcGF5bWVudCwgc2hvdWxkIHRoZSBwZXJmb3JtYW5jZSBiZSBjb21wbGV0ZWQgYWRlcXVhdGVseSBhbmQgb24gdGltZTsgdGhlIGJlbmVmaXQgdGhlIGFkZXF1YXRlIGFuZCB0aW1lbHkgY29tcGxldGlvbiBvZiBwZXJmb3JtYW5jZSB3b3VsZCBjb25mZXIgKGUuZy4sIGJ5IGF2b2lkaW5nIGEgcGVuYWx0eSB1bmRlciBhbm90aGVyIGNvbnRyYWN0KSB3aWxsIGJlIGdvb2QgY29uc2lkZXJhdGlvbiBmb3IgdGhlIHByb21pc2UsIHdoaWNoIGluIGNvbnNlcXVlbmNlIHdpbGwgYmUgZW5mb3JjZWFibGUuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlIFNlbGVjdG1vdmUgLSBQRTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgcmVjZW50IGZpbmRpbmcgdGhhdCBwZXJmb3JtYW5jZSBvZiBleGlzdGluZyBjb250cmFjdHVhbCBkdXRpZXMgY2FuIGJlIGdvb2QgY29uc2lkZXJhdGlvbiBmb3IgYSBwcm9taXNlLCBpZiBzdWNoIGR1dGllcyBhcmUgdW5saWtlbHkgdG8gYmUgZnVsZmlsbGVkIG9uIHRpbWUsIGNhdXNpbmcgYSBkZXRyaW1lbnQgdG8gdGhlIG90aGVyIHBhcnR5ICZtZGFzaDsgZG9lcyA8c3BhbiBjbGFzcz1cIml0XCI+bm90PC9zcGFuPiBhcHBseSB0byBzaXR1YXRpb25zIHdoZXJlIHRoZSBwZXJmb3JtYW5jZSBpbiBxdWVzdGlvbiBpcyB0aGUgcmVwYXlpbmcgb2YgYSBkZWJ0Ljwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5FeGlzdGluZyBDb250cmFjdHVhbCBPYmxpZ2F0aW9ucyBhcyBDb25zaWRlcmF0aW9uIC0gUGFydCBQYXltZW50IG9mIGEgRGVidCBhcyBDb25zaWRlcmF0aW9uPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QaW5uZWwmIzgyMTc7cyBDYXNlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlBhcnQtcGF5bWVudCBvZiBhIGRlYnQgPHNwYW4gY2xhc3M9XCJpdFwiPm9uIHRoZSBkdWUgZGF5PC9zcGFuPiBpcyBub3QgZ29vZCBjb25zaWRlcmF0aW9uIGZvciBhIHByb21pc2UgdG8gZGlzY2hhcmdlIHRoZSBkZWJ0LiBTaG91bGQgaXQgY29tZSA8c3BhbiBjbGFzcz1cIml0XCI+YmVmb3JlPC9zcGFuPiwgb3IgPHNwYW4gY2xhc3M9XCJpdFwiPmJlIG1hZGUgaW4gYW5vdGhlciBwbGFjZTwvc3Bhbj4sIGhvd2V2ZXIsIGl0IG1heSBiZS48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Rm9ha2VzIHYgQmVlcjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgcnVsZSBhZ2FpbnN0IHBhcnQgcGF5bWVudCBvZiBhIGRlYnQgYXMgdmFsaWQgY29uc2lkZXJhdGlvbiBmcm9tIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBpbm5lbCYjODIxNztzIENhc2U8L3NwYW4+IHdhcyB1cGhlbGQuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlZhbmJlcmdlbiB2IFN0IEVkbXVuZHM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIHJ1bGUgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGlubmVsJiM4MjE3O3MgQ2FzZTwvc3Bhbj4gb24gdGhlIGluc3VmZmljaWVuY3kgb2YgcGFydC1wYXltZW50IG9mIGEgZGVidCBhcyBjb25zaWRlcmF0aW9uIGlzIDxzcGFuIGNsYXNzPVwiaXRcIj5hdm9pZGVkPC9zcGFuPiB3aGVuIHBheW1lbnQgaXMgcHJvZmZlcmVkIDxzcGFuIGNsYXNzPVwiaXRcIj5pbiBhbm90aGVyIHBsYWNlPC9zcGFuPiBmcm9tIHdoZXJlIHRoZSBkZWJ0IGlzIGR1ZS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RXhpc3RpbmcgQ29udHJhY3R1YWwgT2JsaWdhdGlvbnMgYXMgQ29uc2lkZXJhdGlvbiAtIEV2YXNpb24gb2YgUnVsZSBJbiBQaW5uZWwmIzgyMTc7cyBDYXNlPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IaXJhY2hhbmQgUHVuYW1jaGFuZCB2IFRlbXBsZTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIGRlYnQgcGF5ZWQgaW4gcGFydCA8c3BhbiBjbGFzcz1cIml0XCI+YnkgYSB0aGlyZCBwYXJ0eTwvc3Bhbj4gd2FzIGhlbGQgdG8gYXZvaWQgdGhlIHJ1bGUgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGlubmVsJiM4MjE3O3MgQ2FzZTwvc3Bhbj4uPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlByb21pc3NvcnkgRXN0b3BwZWwgLSBFcXVpdHkmIzgyMTc7cyBFdmFzaW9uIG9mIFBpbm5lbCYjODIxNztzIENhc2U8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkh1Z2hlcyB2IE1ldHJvcG9saXRhbiBSYWlsd2F5PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPldoZW4gb25lIHBhcnR5IGFjdHMgaW4gc3VjaCBhIHdheSBhcyB0byBzdXBwb3NlIHRoZXkgd2lsbCBub3QgZW5mb3JjZSBhIHJpZ2h0IHVuZGVyIGNvbnRyYWN0ICZtZGFzaDsgYW5kIHRoZSBvdGhlciBwYXJ0eSByZWxpZXMgb24gaXQgJm1kYXNoOyB0aGVuIHRoZXkgd2lsbCBiZSBlc3RvcHBlZCBmcm9tIGVuZm9yY2luZyBpdCwgaWYgZG9pbmcgc28gd291bGQgYmUgaW5lcXVpdGFibGUuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNlbnRyYWwgTG9uZG9uIHYgSGlnaCBUcmVlczwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5PYml0ZXIsIERlbm5pbmcgSiBoZWxkIHRoYXQgYSBwYXJ0eSB3aG8gYWdyZWVkIG5vdCB0byBlbmZvcmNlIGEgcmlnaHQgb2YgcGF5bWVudCB3b3VsZCBiZSBlc3RvcHBlZCBmcm9tIHRoZW4gY2xhaW1pbmcgdGhlIG1vbmV5LCB1bmRlciB1bmRlciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IdWdoZXM8L3NwYW4+LiBQcm9taXNzb3J5IGVzdG9wcGVsIGdlbmVyYWxseSA8c3BhbiBjbGFzcz1cIml0XCI+c3VzcGVuZHM8L3NwYW4+IGxlZ2FsIHJpZ2h0cyByYXRoZXIgdGhhbiA8c3BhbiBjbGFzcz1cIml0XCI+ZXh0aW5ndWlzaGluZyB0aGVtPC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Q2hhcmFjdGVyaXN0aWNzIG9mIFByb21pc3NvcnkgRXN0b3BwZWwgLSBSZWxpYW5jZSBhbmQgSW5lcXVpdHk8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRoZSBQb3N0IENoYXNlcjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5Qcm9taXNzb3J5IGVzdG9wcGVsIGlzIG9ubHkgb3BlbiBhcyBhIGRlZmVuY2UsIG5vdCBhbiBhdHRhY2suIEl0IGRvZXMgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdCByZXF1aXJlIGRldHJpbWVudGFsIHJlbGlhbmNlPC9zcGFuPiBieSB0aGUgcGFydHkgaG9waW5nIHRvIGVzdGFibGlzaCBpdCwgYnV0IGl0IDxzcGFuIGNsYXNzPVwiaXRcIj5kb2VzIHJlcXVpcmUgaW5lcXVpdGFiaWxpdHk8L3NwYW4+IHRvIHRoZSBhc3N1cmFuY2UsIGJ5IHRoZSBvdGhlci48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RCZhbXA7QyBCdWlsZGVycyB2IFJlZXM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIGRlZmVuY2Ugb2YgcHJvbWlzc29yeSBlc3RvcHBlbCA8c3BhbiBjbGFzcz1cIml0XCI+ZmFpbHM8L3NwYW4+IHdoZW4gdGhlIHBhcnR5IHNlZWtpbmcgdG8gcmVseSBvbiBpdCBoYXMgaGltc2VsZiBiZWhhdmVkIGluZXF1aXRhYmx5Ljwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIzMSIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSBPdmVydmlld3MiLAogICAgIk5BTUUiOiAiQ2FzZSBPdmVydmlld3MgZm9yIEluY29ycG9yYXRpb24gb2YgVGVybXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBPZmZlcnMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgSW1wbGljYXRpb24gb2YgVGVybXMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIENvbW11bmljYXRpb24gb2YgQWNjZXB0YW5jZSIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBDb25zaWRlcmF0aW9uIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFJlc3BvbnNlcyB0byBPZmZlcnMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgTWlzdGFrZSIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkdlbmVyYWw8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRpbGRlbiB2IENsZW5kaW5uaW5nPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlVucmVhc29uYWJseSBvbmVyb3VzIGV4Y2x1c2lvbiBjbGF1c2VzIG1pZ2h0IDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGJlIHN1Y2Nlc3NmdWxseSBpbmNvcnBvcmF0ZWQgYnkgc2lnbmF0dXJlIHdoZW4gdGhlIHBhcnR5IHJlbHlpbmcgb24gdGhlbSBrbm93cyB0aGUgb3RoZXIgcGFydHkgaXMgdW5hd2FyZSBvZiB0aGVtLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5OZWdhdGl2ZSAtIEJ5IFNpZ25hdHVyZTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TCYjODIxNztFc3RyYW5nZSB2IEdyYXVjb2I8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGVybXMgd2hpY2ggb25lIHBhcnR5IGhhcyBmYWlsZWQgdG8gcmVhZCBhcmUgc3VjY2Vzc2Z1bGx5IGluY29ycG9yYXRlZCBpbnRvIGEgY29udHJhY3QgYnkgdGhhdCBwYXJ0eSYjODIxNztzIHNpZ25hdHVyZSwgZXZlbiB0aG91Z2ggdGhlIHRlcm1zIGFyZSBvbmVyb3VzIGV4Y2x1c2lvbiBjbGF1c2VzLCBza2V3aW5nIHRoZSBiYXJnYWluIGFnYWluc3QgdGhlIHBhcnR5IHRvIHN1Y2ggYSBkZWdyZWUgdGhhdCwgaGFkIHRoZXkgcmVhZCB0aGVtLCB0aGV5IG1pZ2h0IG5vdCBoYXZlIHNpZ25lZC4gRGVubmluZyB3YXMgY291bnNlbCBmb3IgdGhlIHNlbGxlciBvZiB0aGUgY2lnZ2llIG1hY2hpbmUsIGluIHRoaXMgY2FzZSwgYW5kIGxhdGVyIHNwb2tlIHNwb2tlIGluIFBhcmxpYW1lbnQgb2YgaGlzIHJlZ3JldCBpbiB0aGUgbWF0dGVyKS48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R3JvZ2FuIHYgUm9iaW4gTWVyZWRpdGggUGxhbnQ8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGVybXMgb24gb3IgcmVmZXJyZWQgdG8gYnkgYSBkb2N1bWVudCBzdWNoIGFzIGEgdGltZXNoZWV0LCB3aWxsIG9ubHkgYmUgdmFsaWRseSBpbmNvcnBvcmF0ZWQgaWYgPHNwYW4gY2xhc3M9XCJpdFwiPmEgcmVhc29uYWJsZSBwZXJzb248L3NwYW4+IHdvdWxkIGV4cGVjdCB0aGVtIHRvIGhhdmUgY29udHJhY3R1YWwgZWZmZWN0Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DdXJ0aXMgdiBDaGVtaWNhbCBDbGVhbmluZzwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5XaGVuIHRoZSBwYXJ0eSByZWx5aW5nIG9uIHRlcm1zIGluY29ycG9yYXRlZCBieSBzaWduYXR1cmUgZmFpbHMgdG8gZXhwbGFpbiB0aGVtIGNvcnJlY3RseSwgb3IgZG9lcyBzbyBtZW5kYWNpb3VzbHkgc28gYXMgdG8gbGltaXQgdGhlIG90aGVyIHBhcnR5JiM4MjE3O3MgdW5kZXJzdGFuZGluZyBvZiB0aGVtLCB0aGV5IHdpbGwgYmUgaW5jb3Jwb3JhdGVkIDxzcGFuIGNsYXNzPVwiaXRcIj5vbmx5IHRvIHRoZSBleHRlbnQgb2YgdGhlIGV4cGxhbmF0aW9uPC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+TmVnYXRpdmUgLSBCeSBOb3RpY2UgLSBUaW1pbmc8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk9sbGV5IHYgTWFybGJvcm91Z2ggQ291cnQgSG90ZWw8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+RGVubmluZyBMSiBhZHVtYnJhdGVkICgmIzgyMjA7YWR1bWJyYXRlZCYjODIyMTsgPz8gZmZzLikgdGhlIHdheXMgaW4gd2hpY2ggb25lIHBhcnR5IGNhbiBzaG93IGFub3RoZXImIzgyMTc7cyBjb25zZW50IHRvIGEgdGVybSB0aHVzICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJpdFwiPiYjODIyMDt0aGUgYmVzdCB3YXkgb2YgcHJvdmluZyBpdCBpcyBieSBhIHdyaXR0ZW4gZG9jdW1lbnQgc2lnbmVkIGJ5IHRoZSBwYXJ0eTwvc3Bhbj4gdG8gYmUgYm91bmQuICBBbm90aGVyIHdheSBpcyBieSBoYW5kaW5nIGhpbSA8c3BhbiBjbGFzcz1cIml0XCI+YmVmb3JlIG9yIGF0IHRoZSB0aW1lIG9mIHRoZSBjb250cmFjdCBhIHdyaXR0ZW4gbm90aWNlPC9zcGFuPiBzcGVjaWZ5aW5nIGl0cyB0ZXJtcyBhbmQgbWFraW5nIGl0IGNsZWFyIHRvIGhpbSB0aGF0IHRoZSBjb250cmFjdCBpcyBvbiB0aG9zZSB0ZXJtcy4gIDxzcGFuIGNsYXNzPVwiaXRcIj5BIHByb21pbmVudCBwdWJsaWMgbm90aWNlIHdoaWNoIGlzIHBsYWluIGZvciBhbGwgdG8gc2VlPC9zcGFuPiB3aGVuIGhlIG1ha2VzIHRoZSBjb250cmFjdCBvciA8c3BhbiBjbGFzcz1cIml0XCI+YW4gZXhwcmVzcyBvcmFsIHN0aXB1bGF0aW9uPC9zcGFuPiB3b3VsZCwgbm8gZG91YnQsIGhhdmUgdGhlIHNhbWUgZWZmZWN0LiAgPHNwYW4gY2xhc3M9XCJpdFwiPkJ1dCBub3RoaW5nIHNob3J0PC9zcGFuPiBvZiBvbmUgb2YgdGhlc2UgdGhyZWUgd2F5cyB3aWxsIHN1ZmZpY2UuJiM4MjIxOzwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaG9ybnRvbiB2IFNob2UgTGFuZSAtIEluY29ycG9yYXRpb248L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIG9uZXJvdXMgbmF0dXJlIG9mIGFuIGV4Y2x1c2lvbiBjbGF1c2UgbWF5IGluZm9ybSB0aGUgY291cnQmIzgyMTc7cyBjb25zdHJ1Y3Rpb24gYXMgdG8gd2hlbiB0aGUgY29udHJhY3QgaXMgZm9ybWVkLiBTaG91bGQgaXQgY29tZSBhIG1vbWVudCB0b28gbGF0ZSwgaXQgbWF5IDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IGJlIHZhbGlkbHkgaW5jb3Jwb3JhdGVkLiAoQ2xhdXNlcyBzdWNoIGFzIGFtb25nc3QgdGhvc2UgaW4gcXVlc3Rpb24sIHNlZWtpbmcgdG8gZXhjbHVkZSBsaWFiaWxpdHkgZm9yIHBlcnNvbmFsIGluanVyeSwgYXJlIG5vdyBpbnZhbGlkLCBieSBTMigxKSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5VQ1RBPC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+TmVnYXRpdmUgLSBCeSBOb3RpY2UgLSBOYXR1cmUgb2YgRG9jdW1lbnQsIEV4cGVjdGF0aW9ucyBvZiBQYXJ0aWVzPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Ccml0aXNoIENyYW5lIEhpcmU8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QWx0aG91Z2ggdGhlIHBhcnRpZXMgPHNwYW4gY2xhc3M9XCJpdFwiPmhhZDwvc3Bhbj4gZG9uZSBidXNpbmVzcyB0d2ljZSBvbiB0aGUgc2FtZSB0ZXJtcyAoc3VjaCB0aGF0IGl0IG1heSBwbGF1c2libHkgaGF2ZSBiZWVuIGFyZ3VlZCB0aGF0IHRoZSBleGNsdXNpb24gY2xhdXNlIHdhcyBpbmNvcnBvcmF0ZWQgYnkgdGhlaXIgY291cnNlIG9mIHByaW9yIGRlYWxpbmcpLCB0aGUgZXhjbHVzaW9uIGNsYXVzZSB3YXMgaGVsZCB2YWxpZGx5IGluY29ycG9yYXRlZCBiZWNhdXNlOiAoaSkgYm90aCBwYXJ0aWVzIHdlcmUgYXdhcmUgZWFjaCBvdGhlciBjb250cmFjdGVkIG9uIChmbGF2b3VycyBvZikgaW5kdXN0cnkgc3RhbmRhcmQgdGVybXMgZm9yIHN1Y2ggY29udHJhY3RzIHNvIDxzcGFuIGNsYXNzPVwiaXRcIj5jb3VsZCByZWFzb25hYmx5IGJlIGV4cGVjdGVkIHRvIHN1cHBvc2Ugc3VjaCB0ZXJtcyB3b3VsZCBnb3Zlcm48L3NwYW4+OyAoaWkpIHRoZSB1cmdlbmN5IGluIHdoaWNoIGl0IHdhcyBjb25jbHVkZWQgd2FpdmVkIHRoZSB1c3VhbCBuZWVkIGZvciBmb3JtYWxpdHk7IChpaWkpIHRoZSB3cml0dGVuIHN0YXRlbWVudCBvZiB0ZXJtcyBjYW1lIGEgbGl0dGxlIGxhdGUsIGJ1dCB0aGUgZGVmZW5kYW50IGhhZCBub3RpY2Ugb2YgaXQuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPk5lZ2F0aXZlIC0gQnkgTm90aWNlIC0gVGlja2V0IENhc2VzIC0gUmVhc29uYWJsZW5lc3M8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBhcmtlciB2IFNvdXRoIEVhc3Rlcm48L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBwZXJzb24gd2hvIGJ1eXMgYSB0aWNrZXQgZm9yIHNvbWV0aGluZywgb24gdGhlIGJhY2sgb2Ygd2hpY2ggdGhlcmUgdGhlcmUgYXJlIHRlcm1zLCBpcyBuZXZlcnRoZWxlc3Mgc3RpbGwgZnJlZSB0byBhY2NlcHQgb3IgcmVqZWN0IHRoZSBvZmZlciBvbiB0aGUgYmFzaXMgb2YgaGlzIGVzdGltYXRpb24gb2Ygd2hldGhlciBoZSB3YW50cyB0byBiZSBib3VuZCBieSB0aG9zZSB0ZXJtcy4gV2hpY2ggaXMgb2J2aW91c2x5IG5vbnNlbnNpY2FsIGJvbGxvY2tzIGZyb20gZXZlcnkgY29uY2VpdmFibGUgcG9pbnQgb2YgdmlldyAmbWRhc2g7IGV4Y2VwdCBmb3IgPHNwYW4gY2xhc3M9XCJpdFwiPnByYWdtYXRpYyBjb21tZXJjaWFsIG5lY2Vzc2l0eTwvc3Bhbj4uICBNZWxpc2ggTEogaGVsZCB0aGF0IGEgcmFpbHdheSBjb21wYW55IHdhcyBlbnRpdGxlZCB0byBleHBlY3Qgc29tZW9uZSBkZXBvc2l0aW5nIGEgYmFnIGNvdWxkIHJlYWQgRW5nbGlzaCwgYW5kIHRoYXQgYSBwYXJ0aWN1bGFybHkgaWdub3JhbnQsIGlsbGl0ZXJhdGUgb3IgZmVja2xlc3MgcGVyc29uIHNob3VsZCBub3QgYmUgcHV0IGluIGEgYmV0dGVyIHBvc2l0aW9uIHRoYW4gYW5vdGhlciwgYnkgYmVpbmcgc3BhcmVkIHRoZSBidXJkZW4gb2YgYW4gZXhjbHVzaW9uIGNsYXVzZSB0byB3aGljaCB0aGUgbW9yZSBjYXJlZnVsIHdvdWxkIGJlIGhlbGQuIChBY2NvcmRpbmcgdG8gR3JlZ29yeSBDbGFya2UsIDIwMDgsIHRoZSBsaXRlcmFjeSByYXRlIGluIEVuZ2xhbmQgaW4gdGhlIDE4ODBzIHdhcyBubyBtb3JlIHRoYW4gODAlIGZvciBtZW4sIDcwJSBmb3Igd29tZW4pLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UaG9tcHNvbiB2IExNUzwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UZXJtcyBzZXQgb3V0IG9yIHJlZmVycmVkIHRvIG9uIHRoZSBmYWNlIG9mIGEgY29udHJhY3R1YWwgZG9jdW1lbnQgYXJlIHVzdWFsbHkgdmFsaWRseSBpbmNvcnBvcmF0ZWQuICBBIHRyaXBseS1pbmRpcmVjdCB3cml0dGVuIG5vdGljZSBvZiB0ZXJtcyAmbWRhc2g7IGZyb250IG9mIHRpY2tldCByZWZlcnJpbmcgdG8gYmFjazsgYmFjayBvZiB0aWNrZXQgcmVmZXJyaW5nIHRvIHRlcm1zIDxzcGFuIGNsYXNzPVwiaXRcIj5pbiBhIHZhcmlldHkgb2Ygb3RoZXIgZG9jdW1lbnRzPC9zcGFuPiwgb2J0YWluYWJsZSBlbHNld2hlcmUsIDxzcGFuIGNsYXNzPVwiaXRcIj5mb3IgYSBmZWU8L3NwYW4+ICZtZGFzaDsgZ2l2ZW4gPHNwYW4gY2xhc3M9XCJpdFwiPmFmdGVyPC9zcGFuPiBjb25jbHVzaW9uIG9mIGNvbnRyYWN0IHRvIGEgd29tYW4gPHNwYW4gY2xhc3M9XCJpdFwiPndobyBjb3VsZCBub3QgcmVhZDwvc3Bhbj4sIHdhcyBoZWxkIHRvIGhhdmUgdmFsaWRseSBpbmNvcnBvcmF0ZWQgdGhlbS4gRXZlbiBhdCBmaXJzdCBpbnN0YW5jZSwgd2hlcmUgdGhlIGp1cnkgaGFkIGZvdW5kIG90aGVyd2lzZS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+TmVnYXRpdmUgLSBCeSBOb3RpY2UgLSBPbmVyb3VzIE9yIFVudXN1YWwgVGVybXM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkludGVyZm90bzwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5QYXJ0aWN1bGFybHkgb25lcm91cyBvciB1bnVzdWFsIHRlcm1zIHRvZWluZyB0aGUgbGluZSBzZXBhcmF0aW5nIHRoZW0gZnJvbSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5wZW5hbHR5IGNsYXVzZXM8L3NwYW4+IHdpbGwgbm90IGJlIHZhbGlkbHkgaW5jb3Jwb3JhdGVkIGlmIG5vdCA8c3BhbiBjbGFzcz1cIml0XCI+ZmFpcmx5IGFuZCByZWFzb25hYmx5IGRyYXduIHRvIHRoZSBvdGhlciYjODIxNztzIGF0dGVudGlvbjwvc3Bhbj4gKEJpbmdoYW0pIG9yIGF0IGxlYXN0LCA8c3BhbiBjbGFzcz1cIml0XCI+ZGlmZmVyZW50aWF0ZWQ8L3NwYW4+IChEaWxsb24pLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Dcm9va3MgdiBBbGxlbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIHRlcm0gdGhhdCB3b3VsZCBub3Qgbm9ybWFsbHkgYmUgZXhwZWN0ZWQgYnkgb25lIHBhcnR5IG11c3QgYmUgbWFkZSA8c3BhbiBjbGFzcz1cIml0XCI+Y29uc3BpY3VvdXM8L3NwYW4+IGJ5IHRoZSBvdGhlciwgaWYgc2Vla2luZyB0byBpbmNvcnBvcmF0ZSBpdCBieSBub3RpY2UuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNwdXJsaW5nIHYgQnJhZHNoYXc8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+RGVubmluZyBMSiAmbWRhc2g7IFx1MjAxY1NvbWUgY2xhdXNlcyB3aGljaCBJIGhhdmUgc2VlbiB3b3VsZCBuZWVkIHRvIGJlIDxzcGFuIGNsYXNzPVwiaXRcIj5wcmludGVkIGluIHJlZCBpbmsgb24gdGhlIGZhY2Ugb2YgdGhlIGRvY3VtZW50PC9zcGFuPiB3aXRoIGEgcmVkIGhhbmQgcG9pbnRpbmcgdG8gaXQgYmVmb3JlIHRoZSBub3RpY2UgY291bGQgYmUgaGVsZCB0byBiZSBzdWZmaWNpZW50XHUyMDFkLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5OZWdhdGl2ZSAtIEJ5IENvdXJzZSBvZiBEZWFsaW5nPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NY0N1dGNoZW9uIHYgTWFjQnJheW5lPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgY291cnNlIG9mIHByaW9yIGRlYWxpbmcgb25seSB2YWxpZGx5IGluY29ycG9yYXRlcyBhbiBleGNsdXNpb24gY2xhdXNlLCB3aGVuIHRoYXQgcHJpb3IgZGVhbGluZyA8c3BhbiBjbGFzcz1cIml0XCI+ZGVtb25zdHJhdGVzIGFjdHVhbCBrbm93bGVkZ2Ugb2YgdGhlIGNsYXVzZTwvc3Bhbj4gYnkgdGhlIHBhcnR5IGFnYWluc3Qgd2hvbSBpdCBpcyBiZWluZyB1c2VkLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Qb3NpdGl2ZSAtIFRlcm1zIG9yIFJlcHJlc2VudGF0aW9ucyAtIEludGVudGlvbiBvZiBQYXJ0aWVzPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IZWlsYnV0IHYgQnVja2xldG9uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlRoZSBrZXkgcXVlc3Rpb24gaW4gZGV0ZXJtaW5pbmcgd2hldGhlciBhIHN0YXRlbWVudCBpcyBhIHRlcm0gb3IgYSByZXByZXNlbnRhdGlvbiwgdG8gd2hpY2ggYWxsIG90aGVyIHRlc3RzIGFyZSBzdWJzaWRpYXJ5LCBpcyA8c3BhbiBjbGFzcz1cIml0XCI+dGhlIGludGVudGlvbnMgb2YgdGhlIHBhcnRpZXM8L3NwYW4+LCBvYmplY3RpdmVseSBkZXRlcm1pbmVkLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Qb3NpdGl2ZSAtIFRlcm1zIG9yIFJlcHJlc2VudGF0aW9ucyAtIFN1YnNpZGlhcnkgVGVzdHMgLSBJbXBvcnRhbmNlIG9mIFN0YXRlbWVudDwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmFubmVybWFuIHYgV2hpdGU8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+V2hlbiBvbmUgcGFydHkgbWFrZXMgaXQgY2xlYXIgaXQgd2lsbCBvbmx5IGNvbnRyYWN0IG9uIHRoZSBiYXNpcyBvZiB0aGUgb3RoZXImIzgyMTc7cyB3YXJyYW50eSwgdGhlIHdhcnJhbnR5IGNhbm5vdCBiZSBhICYjODIyMDttZXJlJiM4MjIxOyByZXByZXNlbnRhdGlvbiwgYW5kIG11c3QgdGhlcmVmb3JlIGJlIGEgdGVybS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+UG9zaXRpdmUgLSBUZXJtcyBvciBSZXByZXNlbnRhdGlvbnMgLSBTdWJzaWRpYXJ5IFRlc3RzIC0gRXhwZXJ0aXNlIHRvIGdpdmUgV2FycmFudHk8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk9zY2FyIENoZXNzIHYgV2lsbGlhbXM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBzdGF0ZW1lbnQgYWJvdXQgYSBkZXRhaWwgb2YgYSBjb250cmFjdCYjODIxNztzIHN1YmplY3QgbWF0dGVyLCB0aGUgbWFraW5nIG9mIHdoaWNoIHdvdWxkIGJlIHJlYXNvbmFibHkgYXNzdW1lZCB0byByZXF1aXJlIGV4cGVydGlzZSAmbWRhc2g7IHdoaWNoIGNvdWxkIG5vdCBiZSByZWFzb25hYmx5IGFzc3VtZWQgb2YgdGhlIHN0YXRlbWVudCYjODIxNztzIG1ha2VyICZtZGFzaDsgd291bGQgbm90IGJlIGNvbnNpZGVyZWQgYnkgYSByZWFzb25hYmxlIGJ5c3RhbmRlciB0byBoYXZlIGJlZW4gaW50ZW5kZWQgdG8gaGF2ZSBjb250cmFjdHVhbCBlZmZlY3QsIGJ1dCBtZXJlbHkgYSByZXByZXNlbnRhdGlvbi48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGljayBCZW50bGV5IHYgSGFyb2xkIFNtaXRoIEx0ZDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5CeSBjb250cmFzdCB0byA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Pc2NhciBDaGVzczwvc3Bhbj4sIGEgc3RhdGVtZW50IHJlcXVpcmluZyBleHBlcnRpc2UsIGNvbWluZyBmcm9tIHNvbWVvbmUgd2hvIG1pZ2h0IHJlYXNvbmFibHkgYmUgZXhwZWN0ZWQgdG8gaGF2ZSB0aGF0IGV4cGVydGlzZSwgbWlnaHQgYmUgcmVhc29uYWJseSBpbmZlcnJlZCB0byBiZSBhIHdhcnJhbnR5IHJhdGhlciB0aGFuIGEgbWVyZSByZXByZXNlbnRhdGlvbi48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+UG9zaXRpdmUgLSBUZXJtcyBvciBSZXByZXNlbnRhdGlvbnMgLSBTdWJzaWRpYXJ5IFRlc3RzIC0gQXNzdW1wdGlvbiBvZiBSZXNwb25zaWJpbGl0eTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U2NoYXdlbCB2IFJlYWRlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEmIzgyMTc7cyBzdGF0ZW1lbnQgdGhhdCBCIG5lZWQgbm90IGluc3BlY3QgdGhlIHN1YmplY3QgbWF0dGVyLCBiZWNhdXNlIGhhZCB0aGVyZSBiZWVuIGFueXRoaW5nIHdyb25nIHdpdGggaXQsIGhlIHdvdWxkIGhhdmUgaW5mb3JtZWQgaGltICZtZGFzaDsgaXMgaXRzZWxmIGEgd2FycmFudHkuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkVjYXkgdiBHb2RmcmV5PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPldoZW4gYSBidXllciBpcyBlbmNvdXJhZ2VkIGJ5IGEgc2VsbGVyIHRvIGluc3BlY3QgZ29vZHMgZm9yIGhpbXNlbGYsIGhpcyBmYWlsdXJlIHRvIGRvIHNvIHdpbGwgYmUgdGFrZW4gYXMgYW4gYXNzdW1wdGlvbiBvZiByZXNwb25zaWJpbGl0eSBmb3IgdGhlIHN1YmplY3QgbWF0dGVyLCBhbmQgd2lsbCBtaWxpdGF0ZSBhZ2FpbnN0IHRoZSBjb25zdHJ1Y3Rpb24gb2Ygc3RhdGVtZW50cyBtYWRlIGJ5IHRoZSBzZWxsZXIgYXMgd2FycmFudGllcywgcmF0aGVyIHRoYW4gbWVyZSByZXJwZXNlbnRhdGlvbnMuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlBvc2l0aXZlIC0gVGVybXMgb3IgUmVwcmVzZW50YXRpb25zIC0gU3Vic2lkaWFyeSBUZXN0cyAtIFdyaXRpbmc8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPklubnRyZXByZW5ldXIgUHViIENvIHYgRWFzdCBDcm93bjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgY2xvc2VyIGEgc3RhdGVtZW50IGNvbWVzIHRvIHRoZSB3cml0dGVuIGNvbmNsdXNpb24gb2YgYSBjb250cmFjdCwgdGhlIG1vcmUgbGlrZWx5IGl0IGlzIHRvIGJlIHNlZW4gYXMgYSBmYWN0b3IgcHJlY2lwaXRhdGluZyB0aGUgY29udHJhY3QsIGFuZCB0aGVyZWZvcmUsIHRvIGJlIGNvbnN0cnVlZCBhcyBhIHRlcm0uIFN0YXRlbWVudHMgbWFkZSA8c3BhbiBjbGFzcz1cIml0XCI+ZWFybGllcjwvc3Bhbj4sIGJ1dCA8c3BhbiBjbGFzcz1cIml0XCI+bm90IGluIHRoZSB3cml0dGVuIHRlcm1zPC9zcGFuPiwgYnkgY29udHJhc3QsIHdpbGwgYmUgcHJlc3VtZWQgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdDwvc3Bhbj4gdG8gYmUgdGVybXMuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkNvbmZsaWN0aW5nIC0gUGFyb2wgRXZpZGVuY2UgUnVsZTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SmFjb2JzIHYgQmF0YXZpYTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BdXRob3JpdHkgZm9yIHRoZSBQYXJvbCBFdmlkZW5jZSBSdWxlIGdvdmVybmluZyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5pbmNvcnBvcmF0aW9uIG9mIGNvbmZsaWN0aW5nIHRlcm1zPC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIk5VTUJFUiI6ICIyMzIiCn0sCnsKICAgICJUWVBFIjogIkNhc2UgT3ZlcnZpZXdzIiwKICAgICJOQU1FIjogIkNhc2UgT3ZlcnZpZXdzIGZvciBJbXBsaWNhdGlvbiBvZiBUZXJtcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIENvbnNpZGVyYXRpb24iLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIE1pc3Rha2UiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgT2ZmZXJzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFJlc3BvbnNlcyB0byBPZmZlcnMiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkltcGxpY2F0aW9uIG9mIFRlcm1zIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJJbXBsaWNhdGlvbiBvZiBUZXJtcyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkdlbmVyYWw8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNtaXRoIHYgV2lsc29uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgdGVybSBtYXkgYmUgaW1wbGllZCBpbnRvIGEgY29udHJhY3QgYnkgbG9jYWwgY3VzdG9tLCBwcmVzdW1hYmx5IGFzIGEgY29uY2Vzc2lvbiB0byBiYWNrd2FyZG5lc3MuIEUuZy4sICYjODIyMDsxMDAwJiM4MjIxOyBub3QsIGluIGEgZ2l2ZW4gcGxhY2UsIG1lYW5pbmcgJiM4MjIwOzEwMDAmIzgyMjE7IGJ1dCAmIzgyMjA7MTIwMC4mIzgyMjE7PC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkltcGxpZWQgSW4gRmFjdCAoYnkgUHJlc3VtZWQgSW50ZW50aW9ucyk8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRoZSBNb29yY29jazwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIHRlcm0gc291Z2h0IHRvIGJlIGltcGxpZWQgaW50byBhIGNvbnRyYWN0IG11c3Qgbm90IGRldHJhY3QgZnJvbSB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmJ1c2luZXNzIGVmZmljYWN5PC9zcGFuPiBvZiB0aGUgZGVhbGluZ3MgYXQgaGFuZC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmVpZ2F0ZSB2IFVuaW9uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgdGVybSBjYW4gb25seSBiZSBpbXBsaWVkIGluIGZhY3QgaWYgaXQgaXMgPHNwYW4gY2xhc3M9XCJiZFwiPm5lY2Vzc2FyeTwvc3Bhbj4gZm9yIHRoZSBjb250cmFjdCAmbWRhc2g7IHRoYXQgdGhlIHBhcnRpZXMgdG8gdGhlIGNvbnRyYWN0IHdvdWxkIGhhdmUgaGF2ZSBzYWlkICYjODIyMDtidXQgb2YgY291cnNlJiM4MjIxOyBoYWQgdGhleSB0aG91Z2h0IG9mIHdoZXRoZXIgdGhlIHRlcm0gb3VnaHQgdG8gYmUgcHJlc2VudC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U2hpcmxhdyB2IFNvdXRoZXJuIEZvdW5kcmllczwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgdGVzdCBmb3IgaW1wbGljYXRpb24gb2YgYSB0ZXJtIGluIGZhY3QgaXMgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5vZmZpY2lvdXMgYnlzdGFuZGVyIHRlc3Q8L3NwYW4+ICZtZGFzaDsgdGhhdCBzdWNoIGEgcGVyc29uIHdvdWxkIHNheSAmIzgyMjA7YnV0IG9mIGNvdXJzZSEmIzgyMjE7PC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkltcGxpZWQgaW4gTGF3IChieSBMZWdhbCBSZWxhdGlvbnNoaXAgb2YgUGFydGllcyk8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkxpdmVycG9vbCBDQyB2IElyd2luPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkluIHRoZSBMb3JkczogYSB0ZXJtIHJlcXVpcmVkIGJ5IGxhdyBvZiB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gcGFydGllcyB3aWxsIGJlIGltcGxpZWQgaW50byBhIGNvbnRyYWN0IGxhY2tpbmcgaXQsIHNob3VsZCB0byBkbyBzbyBiZSA8c3BhbiBjbGFzcz1cIml0XCI+bmVjZXNzYXJ5PC9zcGFuPi4gSW4gdGhlIENvdXJ0IG9mIEFwcGVhbCwgRGVubmluZyBoYWQgc2xpcHBlZCB1cCBpbiBob2xkaW5nIHRoZSB0ZXN0IHRvIGJlIG9uZSBvZiA8c3BhbiBjbGFzcz1cIml0XCI+cmVhc29uYWJsZW5lc3M8L3NwYW4+Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TY2FsbHkgdiBTb3V0aGVybiBIZWFsdGggQm9hcmQ8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+UG9saWN5IGFuZCBmYWlybmVzcyBtYXkgYmUgY29uc2lkZXJlZCB3aGVuIGFzc2Vzc2luZyB3aGV0aGVyIGEgdGVybSBzaG91bGQgYmUgaW1wbGllZCBieSBsYXcuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNyb3NzbGV5IHYgRmFpdGhmdWw8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIGNvbnRyYWN0dWFsIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGVtcGxveWVyIGFuZCBlbXBsb3llZSBkb2VzIG5vdCByZXF1aXJlIHRoZSBlbXBsb3llciB0byBsb29rIGFmdGVyIHRoZSBlbXBsb3llZSYjODIxNztzIDxzcGFuIGNsYXNzPVwiaXRcIj5maW5hbmNpYWw8L3NwYW4+IHdlbGxiZWluZywgYW5kIGEgdGVybSB0byB0aGF0IGVmZmVjdCBjYW5ub3QgYmUgaW1wbGllZC48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIk5VTUJFUiI6ICIyMzMiCn0sCnsKICAgICJUWVBFIjogIkNhc2UgT3ZlcnZpZXdzIiwKICAgICJOQU1FIjogIkNhc2UgT3ZlcnZpZXdzIGZvciBNaXN0YWtlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgUmVzcG9uc2VzIHRvIE9mZmVycyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBPZmZlcnMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgSW5jb3Jwb3JhdGlvbiBvZiBUZXJtcyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBDb21tdW5pY2F0aW9uIG9mIEFjY2VwdGFuY2UiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgVG93YXJkcyBQcm9taXNzb3J5IEVzdG9wcGVsIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEltcGxpY2F0aW9uIG9mIFRlcm1zIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIENvbnNpZGVyYXRpb24iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk1pc3Rha2UiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIk1pc3Rha2UiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5NdXR1YWwgTWlzdGFrZTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmFmZmxlcyB2IFdpY2hlbGhhdXM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBjb250cmFjdCB3YXMgdW5kZXJtaW5lZCBieSBvbmUgcGFydHkmIzgyMTc7cyB1bmNlcnRhaW50eSBhcyB0byB3aGljaCBvZiB0aGUgdHdvIHNoaXBzIG5hbWVkIDxzcGFuIGNsYXNzPVwiaXRcIj5QZWVybGVzczwvc3Bhbj4gdGhlIGNvbnRyYWN0IHBlcnRhaW5lZC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmFsY2sgdiBXaWxsaWFtczwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5XaGVuIG9uZSBwYXJ0eSB0aGlua3MgYSBjb250cmFjdCBoYXMgYmVlbiBmb3JtZWQgZm9yIGEgbGFyZ2Ugc2hpcG1lbnQgb2YgPHNwYW4gY2xhc3M9XCJpdFwiPmJpcmQtc2hpdDwvc3Bhbj4sIHlldCB0aGUgb3RoZXIgdGhpbmtzIGl0JiM4MjE3O3MgZm9yIDxzcGFuIGNsYXNzPVwiaXRcIj5zaGFsZTwvc3Bhbj4gJm1kYXNoOyB5ZXQgbmVpdGhlciBpcyBjYXBhYmxlIG9mIGRlbW9uc3RyYXRpbmcgd2h5IHRoZWlyIHVuZGVyc3RhbmRpbmcgd2FzIHRoZSBvbmx5IHJlYWxpc3RpYyBvbmUgJm1kYXNoOyB0aGUgY29udHJhY3Qgd2lsbCBiZSB2b2lkIGZvciBtdXR1YWwgbWlzdGFrZS48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGVubnkgdiBIYW5jb2NrPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgc2l0dWF0aW9uIHdoaWNoIGF0IGZpcnN0IHNpZ2h0IGFwcGVhcnMgdG8gYmUgYSBtdXR1YWwgbWlzdGFrZSBtYXksIG9uIGNsb3NlciBpbnNwZWN0aW9uLCByZWFsbHkgYmUgYSB1bmlsYXRlcmFsIG1pc3Rha2UuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlVuaWxhdGVyYWw8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRlbm55IHYgSGFuY29jazwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIHNpdHVhdGlvbiB3aGljaCBhdCBmaXJzdCBzaWdodCBhcHBlYXJzIHRvIGJlIGEgbXV0dWFsIG1pc3Rha2UgbWF5LCBvbiBjbG9zZXIgaW5zcGVjdGlvbiwgcmVhbGx5IGJlIGEgdW5pbGF0ZXJhbCBtaXN0YWtlLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5VbmlsYXRlcmFsIE1pc3Rha2UgLSAmIzgyMjA7TWlzdGFrZW4mIzgyMjE7IElkZW50aXR5IC0gSW50ZXIgQWJzZW50ZXM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkN1bmR5IHYgTGluZHNheTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5XaGVuIHBhcnRpZXMgY29udHJhY3QgYXQgYSBkaXN0YW5jZSwgdGhlaXIgaWRlbnRpdGllcyB3aWxsIGJlIGNvbnN0cnVlZCBmcm9tIHRoZSBjb250cmFjdCBpdHNlbGYuIFNob3VsZCB0aGUgY29udHJhY3QgaGF2ZSBiZWVuIGluZHVjZWQgYnkgb25lIHBhcnR5IGZyYXVkdWxlbnRseSBtaXNyZXByZXNlbnRpbmcgdGhlbXNlbHZlcyB0byBiZSBzb21lb25lIGVsc2UsIHRoZSBjb250cmFjdCB3aWxsIGJlIDxzcGFuIGNsYXNzPVwiaXRcIj52b2lkPC9zcGFuPiBhYiBpbml0aW8uIChJbiBwZXJzb24sIGhvd2V2ZXIsIHRoZXJlIGlzIGEgc3Ryb25nIHByZXN1bXB0aW9uIHRoYXQgdGhlIHBhcnRpZXMgdG8gdGhlIGNvbnRyYWN0IGFyZSB0aGUgcGVvcGxlIHBoeXNpY2FsbHkgcHJlc2VudC4pPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPktpbmcmIzgyMTc7cyBOb3J0b24gTWV0YWwgdiBFZHJpZGdlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgY29udHJhY3QgY29uY2x1ZGVkIGF0IGEgZGlzdGFuY2Ugd2l0aCBhIGZyYXVkc3RlciBvcGVyYXRpbmcgdW5kZXIgYSA8c3BhbiBjbGFzcz1cIml0XCI+ZmljdGl0aW91czwvc3Bhbj4gYWxpYXMsIHJhdGhlciB0aGFuIHRoZSBpZGVudGl0eSBvZiBzb21lb25lIGVsc2UsIHdpbGwgYmUgdm9pZGFibGUgZm9yIG1pc3JlcHJlc2VudGF0aW9uICZtZGFzaDsgYnV0IDxzcGFuIGNsYXNzPVwiaXRcIj5ub3Q8L3NwYW4+IHZvaWQgYWIgaW5pdGlvLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TaG9ndW4gRmluYW5jZTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5CeSBtYWpvcml0eSwgdGhlIHJ1bGUgdGhhdCBjb250cmFjdHMgaW50ZXIgcHJhZXNlbnRlcyBhcmUgdm9pZGFibGUgZm9yIG1pc3Rha2Ugb2YgaWRlbnRpdHksIGJ1dCB0aG9zZSBpbnRlciBhYnNlbnRlcyBhcmUgdm9pZCBhYiBpbml0aW8sIHJlbWFpbnMgZ29vZCBsYXcuIERpc3NlbnRpbmcsIExvcmQgTmljaG9sbHMgY3JpdGljaXNlZCB0aGUgYXJiaXRyYXJ5IG5hdHVyZSBvZiB0aGUgZGlzdGluY3Rpb24uPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlVuaWxhdGVyYWwgTWlzdGFrZSAtICYjODIyMDtNaXN0YWtlbiYjODIyMTsgSWRlbnRpdHkgLSBJbnRlciBQcmFlc2VudGVzPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QaGlsbGlwcyB2IEJyb29rczwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIGNvbnRyYWN0IGluIHBlcnNvbiB3aXRoIGEgZnJhdWRzdGVyLCB3aG8gaW5kdWNlcyB0aGUgY29udHJhY3QgYnkgYXNzdW1pbmcgdGhlIGlkZW50aXR5IG9mIHNvbWVvbmUgZWxzZSwgaXMgdm9pZGFibGUgZm9yIG1pc3JlcHJlc2VudGF0aW9uLCBidXQgbm90IHZvaWQgYWIgaW5pdGlvLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5JbmdyYW0gdiBMaXR0bGU8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+VGhlIHByZXN1bXB0aW9uIHRoYXQgcGFydGllcyBjb250cmFjdGluZyBpbiBwZXJzb24gYXJlIHRob3NlIHBoeXNpY2FsbHkgcHJlc2VudCBjYW4gYmUgcmVidXR0ZWQsIGJ5IHNob3dpbmcgdGhlIHRydWUgaW50ZW50aW9uIG9mIHRoZSBpbm5vY2VudCBwYXJ0eSB3YXMgdG8gY29udHJhY3Qgd2l0aCB0aGUgcGVyc29uIHdob3NlIGlkZW50aXR5IHRoZSBmcmF1ZHN0ZXIgaGFkIGFzc3VtZWQuIChMYXRlciBvdmVydHVybmVkIGZvciB3b250IG9mIHRydWUgZGlzdGluY3Rpb24gZnJvbSBlYXJsaWVyIGF1dGhvcml0eS4pPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkxld2lzIHYgQXZlcmF5PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkluZ3JhbSB2IExpdHRsZTwvc3Bhbj4gd2FzIHdyb25nbHkgZGVjaWRlZCAmbWRhc2g7IHRoZXJlIHdlcmUgbm8gdHJ1ZSBncm91bmRzIGZvciBkaXN0aW5ndWlzaGluZyBmcm9tIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlBoaWxsaXBzIHYgQnJvb2tzPC9zcGFuPiw8L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Q29tbW9uIE1pc3Rha2UgLSBSZXMgRXh0aW5jdGE8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvdXR1cmllciB2IEhhc3RpZTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIGNvbnRyYWN0IGZvciBzb21ldGhpbmcgd2hpY2ggZG9lc24mIzgyMTc7dCBleGlzdCBpcyA8c3BhbiBjbGFzcz1cIml0XCI+dm9pZDwvc3Bhbj4uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1jUmFlIHYgQ29tbW9ud2VhbHRoIERpc3Bvc2FscyBDb21taXNzaW9uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPklmIHRoZSBzdWJqZWN0IG1hdHRlciBvZiBhIGNvbnRyYWN0IGRvZXMgbm90IGluIGZhY3QgZXhpc3QsIHRoZW4gdGhlIGNvbnRyYWN0IGlzIGluY2FwYWJsZSBvZiBwZXJmb3JtYW5jZSBhbmQgYXMgc3VjaCwgaXMgdm9pZC48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+Q29tbW9uIE1pc3Rha2UgLSBSZXMgU3VhPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db29wZXIgdiBQaGliYnM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBjb250cmFjdCB0aGF0IHB1cnBvcnRzIHRvIHNlbGwgZ29vZHMgdG8gdGhlaXIgb3duZXIgY2Fubm90IGJlIHBlcmZvcm1lZC4gQ29uc2VxdWVudGx5LCBpdCBpcyA8c3BhbiBjbGFzcz1cIml0XCI+dm9pZDwvc3Bhbj4uPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkNvbW1vbiBNaXN0YWtlIC0gU3ViamVjdCBNYXR0ZXI8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJlbGwgdiBMZXZlciBCcm9zPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkNvbW1vbiBtaXN0YWtlIGFzIHRvIGEgcXVhbGl0eSBvZiBzdWJqZWN0IG1hdHRlciBtdXN0IGJlIDxzcGFuIGNsYXNzPVwiaXRcIj5mdW5kYW1lbnRhbDwvc3Bhbj4gYmVmb3JlIGl0IHZvaWRzIHRoZSBjb250cmFjdC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXNzb2NpYXRlZCBKYXBhbmVzZSBCYW5rIHYgQ3JlZGl0IGR1IE5vcmQ8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+Q29tbW9uIG1pc3Rha2Ugb2Ygc3ViamVjdCBtYXR0ZXIsIGFzIHRvIHdoZXRoZXIgYSBkZWJ0IGlzIHNlY3VyZWQgb3IgdW5zZWN1cmVkLCBtYXkgY2F1c2UgdGhlIGNvbnRyYWN0IHRvIGJlIHZvaWRhYmxlLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Tb2xsZSB2IEJ1dGNoZXI8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+RXF1aXR5IG1heSByZWNvZ25pc2UgYSA8c3BhbiBjbGFzcz1cIml0XCI+c29tZXdoYXQgbGVzczwvc3Bhbj4gZnVuZGFtZW50YWwgbWlzdGFrZSB0aGFuIHRoZSBjb21tb24gbGF3IGFkbWl0cywgYXMgZ3JvdW5kcyBmb3Igc2V0dGluZyBhc2lkZSBhIGNvbnRyYWN0Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5HcmVhdCBQZWFjZSBTaGlwcGluZzwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgZGVjaXNpb24gaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U29sbGUgdiBCdXRjaGVyPC9zcGFuPiB3YXMgZnVuZGFtZW50YWxseSBpbmNvbXBhdGlibGUgd2l0aCB0aGUgcnVsZSBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CZWxsIHYgTGV2ZXIgQnJvczwvc3Bhbj4uIEl0IHdhcyB0aGVyZWZvcmUgbm90IGZvbGxvd2VkLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjIzNCIKfV07"; 

cardsLen = 235;

