cts_ = "WwogICAgIkNhc2UiLAogICAgIkNhc2UgT3ZlcnZpZXdzIiwKICAgICJDb25jZXB0IiwKICAgICJIZWxwIgpd"; 

crt_ = "W10="; 

cnc_ = "WwogICAgIkFkbWlzc2liaWxpdHkgaW4gdGhlIEVDdEhSIiwKICAgICJBdmFpbGFiaWxpdHkgYW5kIFNjb3BlIG9mIEp1ZGljaWFsIFJldmlldyIsCiAgICAiRGVjaXNpb24tTWFraW5nIGluIHRoZSBFQ3RIUiIsCiAgICAiRGVtb2NyYWN5IC0gRWxlbWVudHMgb2YgRGVmaW5pdGlvbiIsCiAgICAiRUNIUiBpbiB0aGUgVUsiLAogICAgIkV1cm9wZWFuIENvbnZlbnRpb24gb24gSHVtYW4gUmlnaHRzIiwKICAgICJJbGx1c3RyYXRpb24gb2YgRGlmZmVyZW5jZSBiZXR3ZWVuIFB1YmxpYyBhbmQgUHJpdmF0ZSBMYXciLAogICAgIkp1ZGljaWFsIFJldmlldyAtIEludHJvIiwKICAgICJKdWRpY2lhbCBSZXZpZXcgVGFjdGljcyIsCiAgICAiTG9jdXMgU3RhbmRpIC0gRGlzY3Vzc2lvbiIsCiAgICAiTWFyZ2luIG9mIEFwcHJlY2lhdGlvbiIsCiAgICAiUmVtZWRpZXMgaW4gSnVkaWNpYWwgUmV2aWV3IiwKICAgICJTdGFuZGluZyIsCiAgICAiVXNlIG9mIExhbmd1YWdlIGluIHRoZSBDb252ZW50aW9uIgpd"; 

cgs_ = "WwogICAgIkFtZW5hYmlsaXR5IiwKICAgICJBdmFpbGFiaWxpdHkgYW5kIFNjb3BlIiwKICAgICJCYXNpYyBQcmluY2lwbGVzIiwKICAgICJDb25zdGl0dXRpb25hbCBMYXciLAogICAgIkRlcm9nYXRpb25zIiwKICAgICJFQ0hSIiwKICAgICJIdW1hbiBSaWdodHMiLAogICAgIkp1ZGljaWFsIFJldmlldyIsCiAgICAiTmFycm93IFN0YW5kaW5nIiwKICAgICJOZWNlc3NhcnkgaW4gYSBEZW1vY3JhdGljIFNvY2lldHkiLAogICAgIlByZS1SZWZvcm0iLAogICAgIlByZXNjcmliZWQgYnkgTGF3IiwKICAgICJSZW1lZGllcyIsCiAgICAiU2NoaWVtYW5uIiwKICAgICJTdGFuZGluZyIsCiAgICAiU3RhbmRpbmcgYXQgU3Vic3RhbnRpdmUgU3RhZ2UiLAogICAgIlN0YXR1cyBpbiBEb21lc3RpYyBMYXciLAogICAgIlN1cGVydmlzb3J5IEp1cmlzZGljdGlvbiIKXQ=="; 

pfl_ = "WwogICAgIjIwMTUvMjAxNiEiLAogICAgIkNyaXRpY2lzZWQiLAogICAgIkRlbm5pbmciLAogICAgIkRldmVsb3BtZW50IiwKICAgICJIaXN0b3JpY2FsIiwKICAgICJLZXkiLAogICAgIlNwZWNpYWwgQXR0ZW50aW9uIgpd"; 

ntn_ = 'ewogICAgIm1hcmdpbiBvZiBhcHByZWNpYXRpb24iOiIzMyIsCiAgICAiciB2IHNvbWVyc2V0IGNjIGV4IHAgZmV3aW5ncyI6IjYiLAogICAgInBlcmdhdSBkYW0iOiIyMCIsCiAgICAiciB2IGhtIHRyZWFzdXJ5IGV4IHAgc21lZGxleSI6IjEzIiwKICAgICJjYXNlIG92ZXJ2aWV3cyBmb3IganVkaWNpYWwgcmV2aWV3ICBzdGFuZGluZyI6IjQwIiwKICAgICJyZW1lZGllcyBpbiBqdWRpY2lhbCByZXZpZXciOiI0IiwKICAgICJzdW5kYXkgdGltZXMgdiB1ayI6IjM0IiwKICAgICJzYWxhbWF0IGJpYmkiOiIzOCIsCiAgICAicmVlc21vZ2ciOiIxNyIsCiAgICAicmlkZ2UgdiBiYWxkd2luIjoiMjYiLAogICAgInIgdiB3ZWxmYXJlIHNlY3JldGFyeSBleCBwIGNoaWxkIHBvdmVydHkgYWN0aW9uIGdyb3VwIjoiMTUiLAogICAgInB1YmxpYyBsYXciOiIwIiwKICAgICJhZG1pc3NpYmlsaXR5IGluIHRoZSBlY3RociI6IjMwIiwKICAgICJyIHYgc29tZXJzZXQgZXggcCBkaXhvbiI6IjIxIiwKICAgICJyIHYgY3JpbWluYWwgaW5qdXJpZXMgY29tcGVuc2F0aW9uIGJvYXJkIGV4IHAgbGFpbiI6IjI3IiwKICAgICJmbGVldCBzdHJlZXQgY2FzdWFscyI6IjEyIiwKICAgICJyIHYgaG0gaW5zcGVjdG9yYXRlIG9mIHBvbGx1dGlvbiBleCBwIGdyZWVucGVhY2UiOiIxOCIsCiAgICAic3RhbmRpbmciOiI4IiwKICAgICJyIGV4IHAgYmhhamFuIHNpbmdoIHYgaG9tZSBzZWNyZXRhcnkiOiIzNyIsCiAgICAiciB2IGZvcmVpZ24gbWluaXN0ZXIgZXggcCB3b3JsZCBkZXZlbG9wbWVudCBtb3ZlbWVudCI6IjIwIiwKICAgICJsb2N1cyBzdGFuZGkgIGRpc2N1c3Npb24iOiI3IiwKICAgICJ3YXJlIHYgcmVnZW50cyBjYW5hbCBjbyI6IjEwIiwKICAgICJyIHYgZWxlY3RyaWNpdHkgY29tbWlzc2lvbmVycyBleCBwIGxvbmRvbiBlbGVjdHJpY2l0eSBqb2ludCBjb21taXNzaW9uIjoiMjUiLAogICAgImRlY2lzaW9ubWFraW5nIGluIHRoZSBlY3RociI6IjMxIiwKICAgICJhbWVuYWJpbGl0eSB0byByZXZpZXcgIGxlYXJuaW5nIG91dGNvbWVzIjoiMjQiLAogICAgImJveWNlIHYgcGFkZGluZ3RvbiBiYyI6IjExIiwKICAgICJyIHYgaG9tZSBzZWNyZXRhcnkgZXggcCBidWxnZXIiOiIyMyIsCiAgICAiaWxsdXN0cmF0aW9uIG9mIGRpZmZlcmVuY2UgYmV0d2VlbiBwdWJsaWMgYW5kIHByaXZhdGUgbGF3IjoiMyIsCiAgICAiciBleCBwIHNhbGFtYXQgYmliaSB2IGNoaWVmIGltbWlncmF0aW9uIG9mZmljZXIiOiIzOCIsCiAgICAiciB2IGVudmlyb25tZW50IHNlY3JldGFyeSBleCBwIGZyaWVuZHMgb2YgdGhlIGVhcnRoIjoiMTkiLAogICAgImRlbW9jcmFjeSAgZWxlbWVudHMgb2YgZGVmaW5pdGlvbiI6IjEiLAogICAgImp1ZGljaWFsIHJldmlldyAgaW50cm8iOiIyIiwKICAgICJyIHYgbm9ydGggc29tZXJzZXQgZXggcCBnYXJuZXR0IjoiMjIiLAogICAgInIgdiBzZWNyZXRhcnkgb2Ygc3RhdGUgZXggcCByZWVzbW9nZyI6IjE3IiwKICAgICJiaGFqYW4gc2luZ2giOiIzNyIsCiAgICAiZWNociBpbiB0aGUgdWsiOiIzMiIsCiAgICAiciB2IGZlbGl4c3Rvd2UgZXggcCBsZWlnaCI6IjE0IiwKICAgICJqdWRpY2lhbCByZXZpZXcgdGFjdGljcyI6IjkiLAogICAgInJvc2UgdGhlYXRyZSB0cnVzdCI6IjE2IiwKICAgICJiaXJkaSB2IGhvbWUgc2VjIjoiMzYiLAogICAgImhhbmR5c2lkZSB2IHVrIjoiMzUiLAogICAgImNhc2Ugb3ZlcnZpZXdzIGZvciBodW1hbiByaWdodHMiOiI0MiIsCiAgICAiY2FzZSBvdmVydmlld3MgZm9yIGp1ZGljaWFsIHJldmlldyAgYW1lbmFiaWxpdHkiOiI0MSIsCiAgICAiciB2IGlyYyBleCBwIG5hdCBmZWRlcmF0aW9uIG9mIHNlbGYgZW1wbG95ZWQgYW5kIHNtYWxsIGJ1c2luZXNzZXMiOiIxMiIsCiAgICAiZ3JlZW5wZWFjZSI6IjE4IiwKICAgICJldXJvcGVhbiBjb252ZW50aW9uIG9uIGh1bWFuIHJpZ2h0cyI6IjI4IiwKICAgICJmZXdpbmdzIjoiNiIsCiAgICAibWlja2V5IG1vdXNlIGNhc2UiOiIxMiIsCiAgICAibGFpbiI6IjI3IiwKICAgICJhdmFpbGFiaWxpdHkgYW5kIHNjb3BlIG9mIGp1ZGljaWFsIHJldmlldyI6IjUiLAogICAgInVzZSBvZiBsYW5ndWFnZSBpbiB0aGUgY29udmVudGlvbiI6IjI5IiwKICAgICJsb2N1cyBzdGFuZGkiOiI4IiwKICAgICJjYXNlIG92ZXJ2aWV3cyBmb3IganVkaWNpYWwgcmV2aWV3IjoiMzkiCn0=';

currentTexture = 'img/textures/cream-paper.png';

enableTests = true;

subject = 'public';

defcols = '4';

cds_ = ""; 

cardsLen = 43;

