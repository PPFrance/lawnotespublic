cts_ = "WwogICAgIkNhc2UiLAogICAgIkNvbmNlcHQiLAogICAgIkV4YW0gR3VpZGUiLAogICAgIkhlbHAiCl0="; 

crt_ = "WwogICAgIkVXQ0EiLAogICAgIkVXSEMiLAogICAgIlVLSEwiLAogICAgIlVLUEMiLAogICAgIlVLU0MiCl0="; 

cnc_ = "WwogICAgIkNvdmVuYW50cyAtIE92ZXJ2aWV3IiwKICAgICJGcmVlaG9sZCBDb3ZlbmFudHMgLSBCZW5lZml0IiwKICAgICJGcmVlaG9sZCBDb3ZlbmFudHMgLSBCdXJkZW4iCl0="; 

cgs_ = "[
    "Access to Justice",
    "Accommodation",
    "Acknowledgment",
    "Acquiescence",
    "Admissibility",
    "Adverse Possession",
    "After the Event Insurance",
    "Agreements",
    "Agricultural Holdings",
    "Agriculture Other Related Subjects: Landlord and Tenant",
    "Appeals",
    "Assignment",
    "Assurances",
    "Assured Tenancies",
    "Banking and Finance Other Related Subjects: Consumer Law",
    "Bankruptcy",
    "Beneficial Interests",
    "Beneficial Ownership",
    "Beneficiaries",
    "Benefits",
    "Benefits of Covenants",
    "Boundaries",
    "Breach",
    "Breach of Contract",
    "Brothels",
    "Building and Engineering Contracts",
    "Burden of Proof",
    "Burdens of Covenants",
    "Business Premises",
    "Business Tenancies",
    "Certainty",
    "Charitable Trusts",
    "Child Restraints",
    "Children",
    "Civil Evidence Other Related Subjects: Real Property",
    "Civil Evidence Other Related Subjects: Succession",
    "Civil Procedure",
    "Civil Procedure Other Related Subjects: Legal Advice and Funding",
    "Civil Procedure Other Related Subjects: Real Property",
    "Clergy",
    "Co-Ownership",
    "Cohabitation",
    "Common Law",
    "Company Law",
    "Compatibility",
    "Completion",
    "Conditional Fee Agreements",
    "Conduct",
    "Consent",
    "Constructive Trusts",
    "Consumer Credit Agreements",
    "Contracts",
    "Contracts For Sale of Land",
    "Contractual Rights",
    "Contributions",
    "Contributory Negligence",
    "Conveyances",
    "Conveyancing",
    "Corroboration",
    "Costs",
    "Counterclaims",
    "County Courts",
    "Covenants",
    "Creditors",
    "Criminal Injuries Compensation",
    "Criminal Procedure",
    "Damages",
    "Debentures",
    "Defences",
    "Delay",
    "Derogation From Grant",
    "Detriment",
    "Disciplinary Procedures",
    "Disclosure",
    "Disclosure Orders",
    "Discovery",
    "Dishonesty",
    "Divorce",
    "Documents",
    "Due Diligence",
    "Duty of Care",
    "Easements",
    "Ecclesiastical Law",
    "Employees",
    "Enforcement",
    "Entitlement",
    "Environmental Protection",
    "Equitable Interests",
    "Equitable Principles",
    "Equitable Remedies",
    "Equity",
    "Equity Release Schemes",
    "Estate Contracts",
    "Estates",
    "Estoppel",
    "European Court of Human Rights",
    "Eviction",
    "Ex Turpi Causa",
    "Exclusive Possession",
    "Execution",
    "Express Grant",
    "Extinguishment",
    "Family Home",
    "Family Law",
    "Family Law Other Related Subjects: Banking and Finance",
    "Family Law Other Related Subjects: Civil Procedure",
    "Family Law Other Related Subjects: Real Property",
    "Farms",
    "Finance",
    "Financial Provision",
    "First Registration",
    "Forfeiture",
    "Formalities",
    "Freeholds",
    "Gardens",
    "Good Faith",
    "Gypsies",
    "Hearsay Evidence",
    "Heritable Property",
    "Holiday Accommodation",
    "Homelessness",
    "Human Rights",
    "Human Rights Other Related Subjects: Landlord and Tenant",
    "Illegality",
    "Implied Covenants",
    "Implied Easements",
    "Implied Promises",
    "Implied Reservations",
    "Implied Terms",
    "Incorporeal Hereditaments",
    "Injunctions",
    "Insolvency Other Related Subjects: Real Property",
    "Intention",
    "Interest Rates",
    "Interlocutory Injunctions",
    "Interpretation",
    "Intestacy",
    "Introductory Tenancies",
    "Joint Tenancies",
    "Joint Tenants",
    "Jurisdiction",
    "Jury Directions",
    "Land Charges",
    "Land Drainage",
    "Land Registers",
    "Land Registration",
    "Landlord and Tenant",
    "Landlord and Tenant Other Related Subjects: Civil Procedure",
    "Landlord and Tenant Other Related Subjects: Human Rights",
    "Landowners",
    "Leaseback",
    "Leases",
    "Legal Methodology",
    "Legal Professional Privilege",
    "Licences",
    "Limitations",
    "Local Authorities' Powers and Duties",
    "Local Authority Housing",
    "Local Government",
    "Manorial Rights",
    "Manorial Waste",
    "Matrimonial Home",
    "Measure of Damages",
    "Misconduct",
    "Mistake",
    "Mitigation",
    "Moorland",
    "Mortgagees",
    "Mortgagees' Powers and Duties",
    "Mortgages",
    "Motor Vehicles",
    "Necessity",
    "Negligence Other Related Subjects: Damages",
    "Neighbour Disputes",
    "Non-Registration",
    "Notice",
    "Notices",
    "Notices to Quit",
    "Nuisance",
    "Obstruction",
    "Occupancy",
    "Occupation",
    "Odours",
    "Omissions",
    "Options",
    "Oral Contracts",
    "Overriding Interests",
    "Ownership",
    "Parking",
    "Partnership Formation",
    "Partnerships Other Related Subjects: Trusts",
    "Partnerships at Will",
    "Payments",
    "Peaceful Enjoyment of Possessions",
    "Periodical Payments",
    "Permission to Amend",
    "Personal Injury",
    "Pigs",
    "Planning Permission",
    "Positive Covenants",
    "Possession",
    "Possession Claims",
    "Possession Orders",
    "Possession Proceedings",
    "Possession of Land",
    "Post-Traumatic Stress Disorder",
    "Postponement",
    "Precedent",
    "Prescription",
    "Privity of Contract",
    "Professional Conduct",
    "Promises",
    "Property Adjustment Orders",
    "Property Rights",
    "Proportionality",
    "Proprietary Estoppel",
    "Proprietary Rights",
    "Protection From Eviction",
    "Public Policy",
    "Public Sector Tenancies",
    "Real Property",
    "Real Property Other Related Subjects: Banking and Finance",
    "Real Property Other Related Subjects: Civil Evidence",
    "Real Property Other Related Subjects: Civil Procedure",
    "Real Property Other Related Subjects: Criminal Law",
    "Real Property Other Related Subjects: Equity",
    "Real Property Other Related Subjects: Family Law",
    "Real Property Other Related Subjects: Landlord and Tenant",
    "Real Property Other Related Subjects: Negligence",
    "Real Property Other Related Subjects: Road Traffic",
    "Real Property Other Related Subjects: Torts",
    "Real Property Other Related Subjects: Trusts",
    "Reasonable Belief",
    "Reciprocity",
    "Rectification",
    "Register of Title",
    "Registration",
    "Relationship Breakdown",
    "Reliance",
    "Remedies",
    "Renewal",
    "Rent",
    "Repair Covenants",
    "Repossession",
    "Repudiation",
    "Res Gestae",
    "Residential Tenancies",
    "Residential Use",
    "Restaurants",
    "Restrictive Covenants",
    "Resulting Trusts",
    "Reversions",
    "Right to Air",
    "Right to Fair Trial",
    "Right to Respect For Home",
    "Right to Respect For Private and Family Life",
    "Rights of Way",
    "Road Traffic",
    "Road Traffic Accidents",
    "Roads",
    "Sale of Land",
    "Scotland",
    "Secure Tenancies",
    "Servient Tenement",
    "Settlements",
    "Severance",
    "Special Educational Needs",
    "Spouses",
    "Squatters",
    "Squatting In Residential Buildings",
    "Statutory Easements",
    "Statutory Rights",
    "Statutory Tenancies",
    "Storage",
    "Subtenancies",
    "Success Fees",
    "Succession Other Related Subjects: Equity",
    "Surety",
    "Surrender",
    "Survivorship",
    "Suspension",
    "Tenancies",
    "Tenancies In Common",
    "Tenancies at Will",
    "Termination",
    "Termination Notices",
    "Third Parties",
    "Time Limits",
    "Title to Land",
    "Torts",
    "Transactions at An Undervalue",
    "Transfer of Land",
    "Trespass to Land",
    "Trespassers",
    "Trustees' Powers and Duties",
    "Trusts",
    "Trusts For Sale",
    "Trusts Other Related Subjects: Contracts",
    "Trusts Other Related Subjects: Real Property",
    "Unconscionability",
    "Unfair Dismissal",
    "Unilateral Contracts",
    "Unmarried Couples",
    "User",
    "Uses",
    "Utilities",
    "Weather",
    "Wills",
    "Without Prejudice Communications"
]"; 

pfl_ = "WwogICAgIjIwMTUvMjAxNiEiLAogICAgIkFwcHJvdmVkIiwKICAgICJCaW5naGFtIiwKICAgICJDcml0aWNpc2VkIiwKICAgICJEZW5uaW5nIiwKICAgICJIYWxlIiwKICAgICJOZXViZXJnZXIiLAogICAgIk92ZXJydWxlZCIsCiAgICAiYXBwZWFsLW91dHN0YW5kaW5nIgpd"; 

ntn_ = 'ewogICAgIkxhc2thciB2IExhc2thciI6IjMwIiwKICAgICJHb29kbWFuIHYgR2FsbGFudCI6IjI0IiwKICAgICJCYXJyZXR0IHYgTW9yZ2FuIjoiOTciLAogICAgIkh1Y2t2YWxlIHYgQWVnZWFuIEhvdGVscyI6IjcyIiwKICAgICJDb3ZlbnRyeSB2IExhd3JlbmNlIjoiNjAiLAogICAgIk11bHZhbmV5IHYgR291Z2giOiI1NyIsCiAgICAiSG91bnNsb3cgTEJDIHYgUG93ZWxsIjoiMTA0IiwKICAgICJCZWRzb24gdiBCZWRzb24iOiIzNiIsCiAgICAiV2hpdHRha2VyIHYgS2lubmVhciI6IjQ5IiwKICAgICJLaW5jaCB2IEJ1bGxhcmQiOiI0MSIsCiAgICAiQ292ZW5hbnRzIC0gT3ZlcnZpZXciOiIxIiwKICAgICJPY2VhbmljIFZpbGxhZ2UgTHRkIHYgVW5pdGVkIEF0dHJhY3Rpb25zIEx0ZCI6IjkwIiwKICAgICJCcmlkbGUgdiBSdWJ5IjoiNzEiLAogICAgIk5pY2tlcnNvbiB2IEJhcnJhY2xvdWdoIjoiNjEiLAogICAgIlBldHRpdHQgdiBQZXR0aXR0IjoiMjUiLAogICAgIk5ld2xvbiBIb3VzaW5nIFRydXN0IHYgQWxzdWxhaW1lbiI6Ijk2IiwKICAgICJXYW5kc3dvcnRoIExCQyB2IERpeG9uIjoiOTUiLAogICAgIkJhcmNsYXkgdiBCYXJjbGF5IjoiMzgiLAogICAgIkJheHRlciB2IE1hbm5pb24iOiI5IiwKICAgICJDcmF0ZSB2IE1pbGxlciI6Ijk0IiwKICAgICJXYWxsIHYgQ29sbGlucyI6IjU4IiwKICAgICJCaW5pb25zIHYgRXZhbnMiOiI1MiIsCiAgICAiUXVpZ2xleSB2IE1hc3RlcnNvbiI6IjQyIiwKICAgICJZYXhsZXkgdiBHb3R0cyI6IjQ3IiwKICAgICJNYWxpayB2IEZhc3NlbmZlbHQiOiIxMDUiLAogICAgIk1jRG93YWxsIHYgSGlyc2NoZmllbGQgTGlwc29uIjoiMjMiLAogICAgIkVycmluZ3RvbiB2IEVycmluZ3RvbiI6IjUxIiwKICAgICJBYmJvdHQgdiBBYmJvdHQiOiIyOSIsCiAgICAiWmFyYiB2IFBhcnJ5IjoiMTEiLAogICAgIkNyYWdvIHYgSnVsaWFuIjoiNzgiLAogICAgIkNvbGNoZXN0ZXIgQkMgdiBTbWl0aCI6Ijk5IiwKICAgICJSb2FrZSB2IENoYWRoYSI6IjczIiwKICAgICJDbGFya2UgdiBDb3JsZXNzIjoiNDYiLAogICAgIldvbmcgdiBCZWF1bW9udCBQcm9wZXJ0eSBUcnVzdCI6IjY0IiwKICAgICJTdHJlZXQgdiBNb3VudGZvcmQiOiI4MSIsCiAgICAiQ2l0eSBvZiBMb25kb24gQ29ycCB2IEZlbGwiOiI4OSIsCiAgICAiV2lsa2luc29uIHYgS2VyZGVuZSI6Ijc1IiwKICAgICJHcmFudCB2IEVkd2FyZHMiOiIyNyIsCiAgICAiS1MgVmljdG9yaWEgU3RyZWV0IHYgSG91c2Ugb2YgRnJhc2VyIjoiOTEiLAogICAgIkJlc3QgdiBDaGllZiBMYW5kIFJlZ2lzdHJhciI6IjEyIiwKICAgICJQYXRlbCB2IFBpcmFiYWthcmFuIjoiOTMiLAogICAgIlBvd2VsbCB2IE1jRmFybGFuZSI6Ijk4IiwKICAgICJGcmVlaG9sZCBDb3ZlbmFudHMgLSBCdXJkZW4iOiIyIiwKICAgICJXYWxrZXIgdiBCdXJ0b24iOiI3IiwKICAgICJXYWxieSB2IFdhbGJ5IjoiNjIiLAogICAgIkJpc2hvcCB2IEJsYWtlIjoiMjAiLAogICAgIlJob25lIHYgU3RlcGhlbnMiOiI3NCIsCiAgICAiQ2hhZmZlIHYgS2luZ3NsZXkiOiI2NSIsCiAgICAiRGF2aXMgdiBTbWl0aCI6IjQzIiwKICAgICJIZW5yeSB2IEhlbnJ5IjoiNTAiLAogICAgIkdpbGxldHQgdiBIb2x0IjoiNDQiLAogICAgIkFHIFNlY3VyaXRpZXMgdiBWYXVnaGFuIjoiODIiLAogICAgIkJ1cmdlc3MgdiBSYXduc2xleSI6IjIxIiwKICAgICJPZnVsdWUgdiBCb3NzZXJ0IjoiMTAxIiwKICAgICJTYXZhIHYgU1MgR2xvYmFsIEx0ZCI6IjEwMiIsCiAgICAiR29sZGJlcmcgdiBFZHdhcmRzIjoiNjkiLAogICAgIk1vbmNyaWVmZiB2IEphbWllc29uIjoiNTkiLAogICAgIkhhcnJpcyB2IEdvZGRhcmQiOiIyMiIsCiAgICAiRmFjY2hpbmkgdiBCcnlzb24iOiI4MCIsCiAgICAiUXVlbm5lbGwgdiBNYWx0YnkiOiIxNiIsCiAgICAiRnJlZWhvbGQgQ292ZW5hbnRzIC0gQmVuZWZpdCI6IjMiLAogICAgIkluIHJlIFBhdmxvdSI6IjM5IiwKICAgICJKb25lcyB2IENoYWxsZW5nZXIiOiIzNSIsCiAgICAiV3JpZ2h0IHYgTWFjYWRhbSI6IjU0IiwKICAgICJTaGF3IHYgQXBwbGVnYXRlIjoiNzciLAogICAgIkxlZXMiOiIxMCIsCiAgICAiRG93bnN2aWV3IE5vbWluZWVzIEx0ZCB2IEZpcnN0IENpdHkgQ29ycCBMdGQiOiIxOSIsCiAgICAiUGhpcHBzIHYgUGVhcnMiOiI1NSIsCiAgICAiR2VhcnkgdiBSYW5raW5lIjoiMzIiLAogICAgIlBoaWxsaXBzIHYgTW9iaWwgT2lsIjoiOTIiLAogICAgIkdpc3NpbmcgdiBHaXNzaW5nIjoiMjYiLAogICAgIlN3aWZ0IEludmVzdG1lbnRzIHYgQ29tYmluZWQgRW5nbGlzaCBTdG9yZXMiOiI4NyIsCiAgICAiS2F5IHYgTGFtYmV0aCBMQkMiOiI4NSIsCiAgICAiTHl1cyB2IFByb3dzYSBEZXZlbG9wbWVudHMiOiI2IiwKICAgICJUaG9ybmVyIHYgTWFqb3JzIjoiNDUiLAogICAgIkhlcmJlcnQgdiBEb3lsZSI6IjQ4IiwKICAgICJMYW5kIjoiMCIsCiAgICAiRG9ub3ZhbiB2IFJhbmEiOiI2NiIsCiAgICAiUGFsayB2IE1vcnRnYWdlIFNlcnZpY2VzIjoiMTciLAogICAgIkNvbmRpdGlvbnMgZm9yIGEgQmVuZWZpdCB0byBSdW4iOiIzIiwKICAgICJCdXJkZW5zIjoiMiIsCiAgICAiR3JheSB2IFRheWxvciI6Ijg0IiwKICAgICJCYXRjaGVsb3IgdiBNYXJsb3ciOiI1NiIsCiAgICAiV29vZCB2IFdhZGRpbmd0b24iOiI2OCIsCiAgICAiQm95ZXIgdiBXYXJiZXkiOiI4OCIsCiAgICAiSGFycm93IExCQyB2IFFhemkiOiIxMDMiLAogICAgIkhvdW5zbG93IExCQyB2IE1pbmNoaW50b24iOiIxMDAiLAogICAgIlN0YWZmb3JkIHYgTGVlIjoiNjMiLAogICAgIkdyYW5kIEp1bmN0aW9uIENvIHYgQmF0ZXMiOiIxMyIsCiAgICAiQ29yYmV0dCB2IEhhbGlmYXgiOiIxNSIsCiAgICAiUGVhY29jayB2IEN1c3RpbnMiOiI3MCIsCiAgICAiR2lsYmVydCB2IFNwb29yIjoiNzYiLAogICAgIkpvbmVzIHYgS2Vybm90dCI6IjMxIiwKICAgICJDb3BlbGFuZCB2IEdyZWVuaGFsZiI6IjUzIiwKICAgICJTY290dCB2IFNvdXRoZXJuIFBhY2lmaWMgTW9ydGdhZ2VzIjoiNSIsCiAgICAiUmUgS2luZyI6Ijg2IiwKICAgICJHYXJkbmVyIjoiMzMiLAogICAgIkdyb3ZlaG9sdCBMdGQgdiBIdWdoZXMiOiI4IiwKICAgICJCYXJjYSB2IE1lYXJzIjoiMzQiLAogICAgIkNvdmVuYW50cyAtIFByb2JsZW0gUXVlc3Rpb25zIjoiNCIsCiAgICAiQ3Vja21lcmUgQnJpY2sgQ28gdiBNdXR1YWwgRmluYW5jZSI6IjE4IiwKICAgICJKYXZhZCB2IEFxaWwiOiI3OSIsCiAgICAiRGF2aWVzIHYgRGlyZWN0bG9hbnMgTHRkIjoiMTQiLAogICAgIlN0YWNrIHYgRG93ZGVuIjoiMjgiLAogICAgIlN0YXRlIEJhbmsgb2YgSW5kaWEgdiBTb29kIjoiNDAiLAogICAgIkFudG9uaWFkZXMgdiBWaWxsaWVycyI6IjgzIiwKICAgICJXaGVlbGVyIHYgSkogU2F1bmRlcnMiOiI2NyIsCiAgICAiV2lsbGlhbXMgdiBXaWxsaWFtcyI6IjM3Igp9';

currentTexture = 'img/textures/cream-paper.png';

defcols = '5';

enableTests = false;

subject = 'land';

cds_ = " [ {
    "CATEGORY": "City GDL Land Flashcards",
    "/->-A": "link to another cards will bring it to the front, but it fades out unless you click/press it to keep it in place. <span class=\"bd\">Case cards</span> should have <span class=\"bd\">On Westlaw</span> link in the top right or bottom left. This should bring up the judgment on westlaw, if you have a session open. Other links may appear when appropriate, or when my level of botherment about it was inexplicably non-trivial.",
    "NAME": "Land",
    "NUMBER": "0",
    "SUMMARY": [
        "<span class=\"ul\"><span class=\"bd\">Filter</span></span><br>&emsp;&emsp;Enter <span class=\"bd\">case names</span>, <span class=\"bd\">categories</span>, <span class=\"bd\">concepts</span>, or a <span class=\"bd\">phrase text</span> (in quotes). These broaden out what&#8217;s displayed, i.e., they combine disjunctively, with <span class=\"bd\">or</span>, rather than <span class=\"bd\">and</span>. That needs no further explanation as <span class=\"it\">it&#8217;s 2016</span> and <span class=\"it\">you&#8217;re used to westlaw</span>, etc. You can also enter names of <span class=\"bd\">tags</span>, <span class=\"bd\">courts</span>, and <span class=\"bd\">card type</span> (case, principle, statute, etc). These <span class=\"bd\">restrict</span> the cards displayed. If the thing you&#8217;re searching for doesn&#8217;t appear in the list of suggestions, it&#8217;ll be searched for as a phrase in the body of the cards.",
        "<span class=\"ul\"><span class=\"bd\">Options &amp; Config</span></span><br>&emsp;&emsp;The button with three lines (top left corner) reveals a panel with options for display, etc. It remembers where you were, so when you can close the browser and reopen it a day later, you&#8217;ll be back at the same place, with the same selection. (If something fucks egregiously up, there&#8217;s a very discreet link marked <span class=\"bd\">reset everything</span> on the bottom left.)",
        "<span class=\"ul\"><span class=\"bd\">Use on iPhones/iPads</span></span><br>&emsp;&emsp;Pro tip: a much more biddable experience is to be had by pressing <span class=\"bd\">share</span> at the bottom of the browser window, then <span class=\"bd\">add to home screen</span>.",
        "<span class=\"ul\"><span class=\"bd\">Tags</span></span><br>&emsp;&emsp;Drag tags onto cards from the panel on the right. Make up your own tags. Drag them away from the card to &#8216;detag.&#8217;",
        "<span class=\"ul\"><span class=\"bd\">Westlaw Cases</span></span><br>&emsp;&emsp;Each case should appear (approximately) twice. Firstly the summary from my notes; secondly, if it could be found, the abstract/summary directly from Westlaw. Obviously everything pertaining to a case with <span class=\"it\">(Westlaw)</span> in the title is of their copyright.",
        "<span class=\"ul\"><span class=\"bd\">Links</span></span><br>&emsp;&emsp;A link to another cards will bring it to the front, but it fades out unless you click/press it to keep it in place. <span class=\"bd\">Case cards</span> should have <span class=\"bd\">On Westlaw</span> link in the top right or bottom left. This should bring up the judgment on westlaw, if you have a session open. Other links may appear when appropriate, or when my level of botherment about it was inexplicably non-trivial.",
        "<span class=\"ul\"><span class=\"bd\">Notes</span></span><br>&emsp;&emsp;<span class=\"it\"><span class=\"bd\">Note well</span></span> &mdash; this was chucked together <span class=\"it\">in a hurry</span> so def. has bugs, glitches, half-rephrased sentences in the cards, etc. And it&#8217;s meant for the <span class=\"bd\">latest version of Safari or Chrome</span> on <span class=\"bd\">Mac</span>. What, you&#8217;re a law student and you don&#8217;t have a Mac?"
    ],
    "FLAGS": [
        "2015/2016!"
    ],
    "SPECIAL": "&emsp;&emsp;Flip over the current card by pressing <span class=\"bd\">right</span>, flip back with <span class=\"bd\">left</span>, or continue to the next with <span class=\"bd\">right</span> again. On iPhones/iPads, <span class=\"bd\">swiping</span> right or left should also work.<br><br>&emsp;&emsp;If a <span class=\"sansfont\">Sans Serif Font</span> would be easier to read on your screen, uncheck <span class=\"bd\">Garamond</span> in the options. If the wacky cards-in-a-pile thing gets up your nose, adjust the <span class=\"bd\">messiness</span>, etc. Also, if the typeface on cards with lots of text gets just <span class=\"bd\">too small to read</span>, select <span class=\"bd\">larger minimum font</span> in the options.",
    "YEAR": "2016",
    "TYPE": "Help",
    "CATEGORIES": [
        "City GDL Land Flashcards"
    ]
},
{
    "CATEGORY": "Covenants",
    "NAME": "Covenants - Overview",
    "NUMBER": "1",
    "/A": "<span class=\"bd\">covenant</span> was originally one type of contract, the other being a thing called an <span class=\"bd\">assumpsit</span>. They merged and became the law of contract. Freehold Covenants, then, had merely contractual effect until the 1848 case of <span class=\"caselink\">Tulk v Moxhay</span>, in which a covenant not to build on Leicester Square was found to pass or &#8216;run&#8217; with the land.",
    "SUMMARY": [
        "<span class=\"ul\"><span class=\"bd\">Leasehold Covenants</span></span><br>This refers to obligations about rent, quiet enjoyment, use, subletting, reversion, repair, insurance, and the like. But this is not on the City GDL Land syllabus, so sections 6.4 through 6.8 of <span class=\"it\">Modern Land Law</span>, pp.240-280, can safely be neglected.",
        "<span class=\"ul\"><span class=\"bd\">Freehold Covenants</span></span><br>A <span class=\"bd\">covenant</span> was originally one type of contract, the other being a thing called an <span class=\"bd\">assumpsit</span>. They merged and became the law of contract. Freehold Covenants, then, had merely contractual effect until the 1848 case of <span class=\"caselink\">Tulk v Moxhay</span>, in which a covenant not to build on Leicester Square was found to pass or &#8216;run&#8217; with the land.<br>This transformed freehold covenants, under certain conditions, from binding the original freeholders to binding freeholds, becoming a bona fide <span class=\"bd\">interest in land</span>.<br>See &mdash; <span class=\"caselink\">Conditions for a Burden to Run</span> and <span class=\"caselink\">Conditions for a Benefit to Run</span>.",
        "<span class=\"ul\"><span class=\"bd\">Compared to Easements</span></span><br>Similarly, they affect two plots of land. Talk of <span class=\"bd\">burdened</span> and <span class=\"bd\">benefitted</span> instead of <span class=\"bd\">dominant</span> and <span class=\"bd\">servient</span>. Dissimilarly, they cannot arise by accident. They must ultimately come from explicit promises made by covenantor to covenantee.<br><span class=\"ilc\"><span class=\"it\">Dixon</span> &mdash; &#8220;the way to remember which is which is that <span class=\"it\">there are two Es in covenantee, and two Es in benefit.</span>&#8220; Hashtag JK.</span>",
        "<span class=\"ul\"><span class=\"bd\">In Practice</span></span><br>They are often made when land is split up. An <span class=\"caselink\">LRA S29</span> t-for-v is concluded between X to Y, and promises are made in writing or by deed. Often, but not always, the promise burdens the buyer and the new plot, and benefits the seller and the original plot.<br>They can be <span class=\"bd\">negative</span>, restricting use of the burdened land. This  amounts to <span class=\"bd\">private planning law</span>. Common negative covenants are <span class=\"bd\">not to conduct trade</span> &mdash; <span class=\"caselink\">Gafford v Graham</span> or <span class=\"caselink\">Re Bromor Properties</span>; or <span class=\"bd\">not to subdivide</span> &mdash; <span class=\"caselink\">  As such, they tend to <span class=\"bd\">preserve the character</span> of land.<br>They can also be <span class=\"bd\">positive</span> obligations, potentially having the same character-preserving effect as negative covenants. E.g., a positive covenant to maintain the appearance of externally-visible buildings.",
        "<span class=\"ul\"><span class=\"bd\">Benefit and Burden</span></span><br>An action on a covenant requires it to be shown that the benefit has passed to the claimant, and the burden to the defendant. Otherwise, there is no cause of action &mdash; <span class=\"caselink\">Thamesmead Town v Allotey</span>.<br><span class=\"bd\">Burden</span> runs with the land in fewer circs. than <span class=\"bd\">benefit</span> &mdash; cf. <span class=\"caselink\">Freehold Covenants - Burden</span> and <span class=\"caselink\">Freehold Covenants - Benefit</span>.<br><span class=\"bd\">Benefit</span> can split, e.g., the Hampstead case [NAME?] of a man who refused \u00a3400K to waive a covenant not to build. The other party went ahead anyway. He sued for an injunction, but instead was awarded \u00a3500K damages, a large part of which was in punishment for having ignored the covenant. Then it emerged the chap in fact shared the benefit with <span class=\"bd\">82 other people</span>. So the award was shared out amongst them &mdash; about \u00a33K each.<br>The conditions for benefit and burden running with the land are not hte same. This leads to bizarre situations such as Dixon&#8217;s example of Ilkley, in which there are a great many plots burdened with covenants not to build, the benefit for which never ran with the land, meaning the burdens are now unenforceable. This, he says, doesn&#8217;t stop shyster solicitors selling insurance against the contingency of a the benefitted covenantee coming back from the dead and suing freeholders whose land is subject to such burden."
    ],
    "RELATED": [
        "Freehold Covenants - Benefit",
        "Freehold Covenants - Burden"
    ],
    "TYPE": "Concept",
    "CATEGORIES": [
        "Covenants"
    ]
},
{
    "CATEGORY": "Covenants",
    "NAME": "Freehold Covenants - Burden",
    "/->-N.B.,": "a <span class=\"bd\">covenant to erect a fence</span> is an <span class=\"bd\">easement to fencing</span>, <span class=\"ul\"><span class=\"bd\">not</span></span> a covenant &mdash; <span class=\"caselink\">Crow v Wood</span>.",
    "NUMBER": "2",
    "RELATED": [
        "Freehold Covenants - Benefit",
        "Covenants - Overview"
    ],
    "SUMMARY": [
        "<span class=\"ul\"><span class=\"bd\">Remedies</span></span><br>&emsp;&emsp;Enforcement of a <span class=\"bd\">freehold</span> covenant <span class=\"bd\">at law</span> is out of the question once the burdened land has undergone an S28/S29 transfer &mdash; <span class=\"caselink\">Rhone v Stephens</span>. At law, damages are yours <span class=\"it\">by right</span>, whereas in equity, everything is at the court&#8217;s discretion.",
        "<span class=\"ul\"><span class=\"bd\">Conditions for a Burden to Run</span></span><br>&emsp;&emsp;It must be <span class=\"bd\">restrictive</span> rather than <span class=\"bd\">positive</span> &mdash; <span class=\"caselink\">Rhone v Stephens</span> in the Lords, and <span class=\"caselink\">Thamesmead Town v Allotey</span> in the CA. In both cases, this fundamental rule was upheld, but criticised.<br>&emsp;&emsp;Determination of whether restrictive or positive is a matter of substance &mdash; <span class=\"caselink\">Holland Park v Hicks</span>, in which a neighbour &#8220;having to agree&#8221; was held <span class=\"bd\">restrictive</span> as it constrained the covenantor&#8217;s capacity for indecision. Conversely, a covenant <span class=\"bd\">not to allow</span> something may be substantially <span class=\"bd\">positive</span>. E.g., not to allow property to fall into disrepair, which clearly entails spending money. In <span class=\"caselink\">Tulk v Moxhay</span> itself, the covenant was to actively <span class=\"bd\">keep</span> Leicester Square as an open space. Nevertheless, this clearly entailed a restriction.<br>&emsp;&emsp;N.B., a <span class=\"bd\">covenant to erect a fence</span> is an <span class=\"bd\">easement to fencing</span>, <span class=\"ul\"><span class=\"bd\">not</span></span> a covenant &mdash; <span class=\"caselink\">Crow v Wood</span>.<br>&emsp;&emsp;The covenant must <span class=\"bd\">touch and concern the land</span> &mdash; <span class=\"caselink\">Robins v Berkeley Homes</span>. This is a matter of fact for each case, but there&#8217;s a general (but flexible) test from <span class=\"caselink\">Swift Investments v Combined English Stores</span> per Lord Oliver.<br>&emsp;&emsp;&emsp;&emsp;<span class=\"bd\">(1)</span> Can the burden act on <span class=\"bd\">any</span> owner, not just the original covenantor?<br>&emsp;&emsp;&emsp;&emsp;<span class=\"bd\">(2)</span> Can it affect the <span class=\"bd\">nature</span>, <span class=\"bd\">quality</span>, <span class=\"bd\">mode of use</span> &mdash; or <span class=\"bd\">value</span> &mdash; of the burdened land?<br>&emsp;&emsp;&emsp;&emsp;<span class=\"bd\">(3)</span> Aside from the substance of the burden, was the original intention clearly to bind only the original parties?<br>&emsp;&emsp;Wilberforce J in <span class=\"caselink\">Marten v Flight Refuelling</span> &mdash; express statement in a covenant that it affects the land is evidence that it should run.<br>&emsp;&emsp;The burden must have been made to <span class=\"bd\">confer a benefit</span> on the other plot &mdash; <span class=\"caselink\">Whitgift Homes v Stocks</span>. The condition is satisfied if the covenant was to benefit <span class=\"bd\">a proprietary interest</span> of the covenantee, e.g., a lessor or mortgagee. There is no separate physical land, but there <span class=\"bd\">is</span> a separate benefitting <span class=\"bd\">estate in land</span>. But if no plot or estate is retained by the covenantee, it cannot run &mdash; <span class=\"caselink\">Formby v Barker</span>.<br>&emsp;&emsp;It must be <span class=\"bd\">intended</span> to run. S79 LPA 1925 rebuttably presumes this intention -\u2013 <span class=\"caselink\">Roake v Chaddah</span>, <span class=\"caselink\">Tophams v Earl of Sefton</span>. <span class=\"bd\">Contrary intention</span> can be found in the instrument creating the covenant, or the circumstances of the arrangements between parties &mdash; <span class=\"caselink\">Morrells v Oxford United FC</span>.<br>&emsp;&emsp;It must have complied with the rules of <span class=\"bd\">registration</span>. To enforce a covenant against a transferee for value of a <span class=\"bd\">registered</span> disposition, it <span class=\"bd\">must</span> have been the subject of a notice in the register. If it is not, it loses priority and is unenforceable, on S29 grounds. Against a S29 transferee, it remains enforceable, registered or not, or against a purchasor of an <span class=\"bd\">equitable</span> interest in the land."
    ],
    "AKA": "Burdens",
    "TYPE": "Concept",
    "CATEGORIES": [
        "Covenants"
    ]
},
{
    "CATEGORY": "Covenants",
    "NAME": "Freehold Covenants - Benefit",
    "NUMBER": "3",
    "RELATED": [
        "Covenants - Overview",
        "Freehold Covenants - Burden"
    ],
    "SUMMARY": [
        "<span class=\"ul\"><span class=\"bd\">Conditions for a Benefit to Run</span></span><br>By contrast with <span class=\"caselink\">Burdens</span>, a <span class=\"bd\">benefit can be passed at law</span> as well as equity; the benefit of a positive burden can run &mdash; although for that to add up to a successful claim requires the burdened land be in the hands of the original covenantor.",
        "<span class=\"ul\"><span class=\"bd\">At Law (against the <span class=\"it\">original</span> covenantor)</span></span><br>&emsp;&emsp;The covenant must <span class=\"bd\">touch and concern</span> the original covenantee&#8217;s land &mdash; <span class=\"caselink\">Rogers v Hosegood</span>. The same test as for <span class=\"caselink\">Burdens</span>, from <span class=\"caselink\">Swift Investments v Combined English Stores</span>.<br>&emsp;&emsp;The claimant must have a legal estate in the benefitted land, but not necessarily the same that of the original covenantee &mdash; S78 LPA 1925.<br>&emsp;&emsp;The benefit must have been expressly or impliedly <span class=\"bd\">annexed to a legal estate in the land</span>."
    ],
    "AKA": "Conditions for a Benefit to Run",
    "TYPE": "Concept",
    "CATEGORIES": [
        "Covenants"
    ]
},
{
    "CATEGORY": "Covenants",
    "NAME": "Covenants - Problem Questions",
    "NUMBER": "4",
    "SUMMARY": [
        "<span class=\"bd\">(1)</span> Are the parties to the dispute the original covenantor and covenantee?<br>&emsp;&emsp;Usually they won&#8217;t be. If they are, and you can&#8217;t sniff out any other angles, then your Land Law examiner may well have messed up and set you a question on <span class=\"bd\">contract</span>.<br>&emsp;&emsp;Once the land has been transferred, no remedy is possible <span class=\"bd\">at law</span>, only in <span class=\"bd\">equity</span> - <span class=\"caselink\">Rhone v Stephens</span>.",
        "<span class=\"bd\">(2)</span> Deal with the <span class=\"bd\">burden</span> first. <span class=\"bd\">Always</span> do this, as the burden passes from the contract to the property rights in a narrower set of circs. than the benefit.",
        "<span class=\"bd\">(3)</span> Then deal with the benefit."
    ],
    "TYPE": "Exam Guide",
    "CATEGORIES": [
        "Covenants"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Banking and Finance - Completion - Equity Release Schemes - Leaseback - Mortgages - Occupation - Overriding Interests - Proprietary Rights",
    "COUNSEL": "For the appellant: Bryan McGuire QC, James Stark. For the first and second respondent: Justin Fenwick QC, Nicole Sandells, Nicholas Broomfield. For the intervener: Lesley Anderson QC, Daniel Gatty.",
    "COURT": "UKSC",
    "NAME": "Scott v Southern Pacific Mortgages",
    "YEAR": "2014",
    "CITATION": "Scott v Southern Pacific Mortgages [2014] UKSC 52",
    "NUMBER": "5",
    "RELATED": [
        "Palk v Mortgage Services",
        "Davies v Directloans Ltd",
        "KS Victoria Street v House of Fraser",
        "Javad v Aqil",
        "Street v Mountford",
        "State Bank of India v Sood",
        "Kay v Lambeth LBC",
        "Moncrieff v Jamieson",
        "Laskar v Laskar",
        "Thorner v Majors",
        "Phipps v Pears",
        "Grand Junction Co v Bates"
    ],
    "SUMMARY": [
        "A purchaser of land could not create a proprietary interest in that land, capable of being an overriding interest, until after completion of the contract for sale.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant (S) appealed against a decision ([2012] EWCA Civ 17) that the right of the respondent mortgagee (M) to its security had priority over her right to remain in occupation.",
        "Under a &#8220;sale and rent back&#8221; scheme, S had sold her house to a purchaser (N) on the strength of N&#8217;s promise that she could remain in the house indefinitely as a tenant. N bought the house with the assistance of a mortgage from M and purported to grant a leaseback to S. Exchange, completion and the execution of the mortgage took place on the same day. N did not tell M about its promise to S. After completion, N granted S a two-year assured shorthold tenancy. That was in breach of the mortgage terms, which permitted only the grant of an assured shorthold tenancy for a fixed term of not more than 12 months. When N defaulted on the loan, M sought possession. S argued that N&#8217;s promise had given her, from the exchange of contracts, an equitable proprietary right which took effect as an overriding interest under the Land Registration Act 2002 Sch.3 para.2 and was binding on M by virtue of s.29(2)(a)(ii). She argued that N was a constructive trustee or was bound by a proprietary estoppel. Both the High Court and the Court of Appeal found in favour of M. The central issue for the instant court was whether S had an overriding interest. That involved determining whether (i) a prospective purchaser could grant proprietary, as opposed to merely personal, rights before completion; (ii) even if S had proprietary rights, Abbey National Building Society v Cann [1991] 1 A.C. 56 applied to prevent her from asserting an equitable right that had arisen only on completion."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) S relied on s.116 of the Act to establish that she had proprietary rights. Unregistered interests which overrode registered dispositions had to be proprietary in nature, and the combined effect of s.116 and s.132 was that s.116 rights had to have a proprietary element in order to have any effect. S also relied on the line of authority to the effect that following the exchange of contracts, a seller held the property on trust for the purchaser. On the face of it, N&#8217;s promise bore the hallmarks of a proprietary estoppel, but the question was whether such an estoppel could be an interest in land before the promisor became the owner. Between exchange and completion the purchaser had a proprietary interest &#8220;of a sort&#8221;, Oughtred v Inland Revenue Commissioners [1960] A.C. 206 and Berkley v Poulett [1977] 1 E.G.L.R. 86 considered. The question was whether the conveyance and the mortgage were one indivisible transaction, or whether there was a moment between the completion of the purchase and the grant of the mortgage in which the purchaser acquired legal estate before disposing of it by way of mortgage, Coventry Permanent Economic Building Society v Jones [1951] 1 All E.R. 901, Church of England Building Society v Piskor [1954] Ch. 553, Universal Permanent Building Society v Cooke [1952] Ch. 95 and Woolwich Equitable Building Society v Marshall [1952] Ch. 1 considered. Cann decided that the conveyance and the mortgage were indivisible but, in any event, each of the above cases assumed that even if the tenant had equitable rights as against the purchaser, those rights would only become proprietary and capable of taking priority over a mortgage when they were &#8220;fed&#8221; by the purchaser&#8217;s acquisition of the legal estate, Cann applied. S&#8217;s appeal had therefore to be dismissed on the ground that she acquired merely personal rights against N when she agreed to sell on the basis of its promise. Her rights only became proprietary and capable of taking priority over the mortgage when N acquired the legal estate on completion, at which point the acquisition of the legal estate and the grant of the charge were one indivisible transaction (see paras 24, 36, 56-80, 105-114 of judgment). (2) (Obiter) (Per Lords Collins and Sumption JJ.S.C.) Given the conclusion on the first issue, the second, whether the contract for sale was part of an indivisible transaction together with the conveyance and the mortgage, did not arise and was unlikely ever to arise. Nevertheless, the court would express its views on it. It was implicit in Cann that the contract, transfer and mortgage were one indivisible transaction, Nationwide Anglia Building Society v Ahmed and Balakrishnan (1995) 70 P. &amp; C.R. 381 considered. In the instant case the contract and conveyance had been executed on the same day, but the analysis was not dependant on that. It would be unrealistic to treat the contract of sale as a divisible element. Even if S had equitable rights of a proprietary nature arising on exchange, the mortgage would still have taken priority (paras 84-85, 90). (Per Lady Hale J.S.C and Lords Wilson and Reed JJ.S.C.) The mortgagee was not a party to the contract between the vendor and purchaser. It was difficult to see how the House of Lords rejection of Piskor in Cann implied that the contract of sale was part of the indivisible transaction along with the conveyance and mortgage (paras 115-123)."
    ],
    "FLAGS": [
        "Hale"
    ],
    "CIT": "[2014] UKSC 52",
    "JUDGE": "Lady Hale JSC; Lord Wilson JSC; Lord Sumption JSC; Lord Reed JSC; Lord Collins JSC",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Banking and Finance",
        "Completion",
        "Equity Release Schemes",
        "Leaseback",
        "Mortgages",
        "Occupation",
        "Overriding Interests",
        "Proprietary Rights"
    ]
},
{
    "CATEGORY": "Equity - Building and Engineering Contracts - Constructive Trusts - Unfair Dismissal",
    "COURT": "EWHC",
    "NAME": "Lyus v Prowsa Developments",
    "YEAR": "1982",
    "CITATION": "Lyus v Prowsa Developments [1982] 1 WLR 1044",
    "NUMBER": "6",
    "RELATED": [
        "Jones v Kernott",
        "Herbert v Doyle",
        "Gillett v Holt",
        "Groveholt Ltd v Hughes",
        "Whittaker v Kinnear",
        "Geary v Rankine",
        "Clarke v Corless",
        "Grant v Edwards",
        "Gissing v Gissing",
        "Abbott v Abbott",
        "Rhone v Stephens",
        "Errington v Errington"
    ],
    "HELD": [
        "P&#8217;s claim for a declaration that the original agreement was binding and for specific performance, that (1) P could not rely on the Law of Property Act 1925s.56; but (2) D were in turn not entitled to rely on the Land Registration Act 1925 s.20 and s.34(4) and P were entitled to an order for specific performance (White v Bijou Mansions Ltd [1937] Ch. 610, Bannister v Bannister [1948] 2 All E.R. 133 and dictum in Binions v Evans [1972] Ch. 359 applied)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1982] 1 WLR 1044",
    "JUDGE": "Dillon J",
    "SUMMARY": [
        "Constructive trust; building contract; power of sale",
        "Where land is sold &#8220;subject to and with the benefit of a contract,&#8221; the purchaser holds the plot upon constructive trust for the beneficiary of the contract, and so does a second purchaser who buys with notice of the contract. By a contract in 1978 P contracted to purchase a plot of registered land, part of an estate being developed by the vendor company. The plot was to be transferred on completion of the house, but the company was wound up before completion. The bank, a prior mortgagee, elected to sell P&#8217;s land &#8220;subject to and with the benefit of the plaintiff&#8217;s contract.&#8221; The plot was then sold to D2 subject to the contract in so far as it was enforceable against D1. The transfer itself made no mention of the contract."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Equity",
        "Building and Engineering Contracts",
        "Constructive Trusts",
        "Unfair Dismissal"
    ]
},
{
    "CATEGORY": "Real Property - First Registration - Incorporeal Hereditaments - Land Registers - Land Registration - Manorial Rights - Manorial Waste - Moorland - Ownership - Rectification",
    "COUNSEL": "For the appellants: Paul Stafford, Naomi Winston. For the respondents: Jeffrey Littman (Public Access barrister).",
    "COURT": "EWCA",
    "NAME": "Walker v Burton",
    "YEAR": "2013",
    "CITATION": "Walker v Burton [2013] EWCA Civ 1228",
    "NUMBER": "7",
    "RELATED": [
        "Walby v Walby",
        "Davis v Smith",
        "Huckvale v Aegean Hotels",
        "Gilbert v Spoor",
        "Herbert v Doyle",
        "Phillips v Mobil Oil",
        "Mulvaney v Gough",
        "Corbett v Halifax",
        "McDowall v Hirschfield Lipson",
        "Wilkinson v Kerdene",
        "Copeland v Greenhalf",
        "Rhone v Stephens"
    ],
    "SUMMARY": [
        "The correction of a mistaken registration of title to a lordship of the manor by closing the title did not mean that title to a fell, as waste of the manor, also had to be closed. The proprietors had not caused or contributed to the mistaken registration as they held an honest and reasonable belief in their ownership, and it was not unjust to leave the registration of the fell in their names where they had expended time and money in improving and managing it and no-one else had claimed ownership.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant villagers (W) appealed against a decision ([2012] EWHC 978 (Ch)) of a deputy adjudicator refusing their application to remove the respondents (B) from the Land Register as proprietors of a fell.",
        "After purchasing a farmhouse, B had registered the lordship of the manor, an incorporeal hereditament, and an adjoining fell that was waste of the manor, in their names. The fell had previously been unclaimed unregistered land, used by the villagers for grazing and recreation. B enforced their registered rights by erecting a gate and placing formal controls over the use of the fell through grazing and sports rights agreements with third parties. W believed that B had profited from an erroneous registration and applied under the Land Registration Act 2002 Sch.4 para.5(a) to alter the register on the ground of mistake and rectify the titles by closing them. The deputy registrar found that the lordship had either been vested in the Crown or was extinct so that there had been no lordship for B to acquire. He therefore closed that title. He found that the fell had also been registered by mistake. However, he refused to close that title, concluding that B had held an honest and reasonable belief that they were owners of the fell via ownership of the lordship and had therefore not caused or contributed to the mistake through lack of care under Sch.4 para.6(2)(a). He further held that it would not be unjust to refuse to make the alteration within the meaning of Sch.4 para 6(2)(b) as B had incurred expense in maintaining control of the fell; W had not objected to B&#8217;s application to register the fell; W had taken no steps for a further two years and had not claimed title to the fell so B&#8217;s removal served no useful purpose. The registrar made no express finding concerning whether the title to the fell had passed to the Crown. The Crown had not been joined to the proceedings and reserved its position pending the instant appeal. The issues were whether (i) the deputy adjudicator had accorded Crown title sufficient weight when determining the injustice point; (ii) the mistaken registration of the lordship meant that title to the fell should also be closed; (iii) there had been a lack of care on B&#8217;s part contributing to the mistaken registration of the fell; (iv) it would be unjust not to correct the fell registration."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) The deputy adjudicator had not been required to decide who was entitled to the fell. The Crown had not asserted title and was not a party. It had not disclaimed ownership but was content to be bound by the decision. In those circumstances, W could not complain that it had been wrong not to have accorded Crown title significant weight in determining the injustice point under Sch.4 para.6 of the Act (see paras 92-93 of judgment). (2) W&#8217;s argument, that the mistaken registration of the fell was consequential on the mistaken registration of the lordship, was logical. However, Sch.4 para.6(2) required the court to take specified factors into account where there was a registered proprietor in possession of the land. That was not the case with the correction of the lordship registration, because it was not &#8220;land&#8221; but an incorporeal hereditament. The consequential nature of the mistaken registration of the fell did not result in the disapplication of Sch.4 para.6(2) (para.95). (3) It was a question of fact for the deputy adjudicator as to whether there had been a lack of care contributing to the mistaken registration of the fell. He had been entitled to reach his conclusion because: (a) the burden of showing lack of care had been on W; (b) B had behaved reasonably and responsibly in engaging solicitors to advise and act for them. B&#8217;s belief had been reasonable having regard to what was known about title to the lordship; (c) it was a fatal flaw that the lack of care point had not been raised in relation to the registration of the fell, as distinct from the registration of the lordship. It had only been raised after the evidence was closed and B had no opportunity to deal with it in their evidence (paras 96-99). (4) There had been no error of law in the deputy adjudicator&#8217;s conclusion on the injustice point. The following factors were relevant: (a) W had not claimed title to the fell and the Crown had shown no sign of asserting title against B. It was therefore a relevant factor that the fell should be owned by someone rather than being left in continuing uncertainty about title to it; (b) in view of the Crown&#8217;s stance it would have made no difference had the Crown been notified of B&#8217;s application for registration; (c) W had delayed bringing the application for rectification; (d) B had invested time, effort and money on the management and improvement of the fell and had entered into commitments on which they and others relied; (e) the fact that the mistake as to registration of the fell had been consequential on the registration of the lordship, which had been corrected, did not mean that it also had to be corrected or that it would be unjust not to correct it (paras 100, 102-106)."
    ],
    "CIT": "[2013] EWCA Civ 1228",
    "JUDGE": "Mummery LJ; Jackson LJ; McCombe LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "First Registration",
        "Incorporeal Hereditaments",
        "Land Registers",
        "Land Registration",
        "Manorial Rights",
        "Manorial Waste",
        "Moorland",
        "Ownership",
        "Rectification"
    ]
},
{
    "CATEGORY": "Real Property - Constructive Trusts - Estate Contracts - Non-Registration - Sale of Land",
    "COUNSEL": "For the claimant: Neil Kitchener QC, Zachary Bredemear. For the first defendant: Pav Korpal.",
    "COURT": "EWHC",
    "NAME": "Groveholt Ltd v Hughes",
    "YEAR": "2012",
    "CITATION": "Groveholt Ltd v Hughes [2012] EWHC 3351 (Ch)",
    "NUMBER": "8",
    "RELATED": [
        "Corbett v Halifax",
        "Herbert v Doyle",
        "Clarke v Corless",
        "Roake v Chadha",
        "Laskar v Laskar",
        "Sava v SS Global Ltd",
        "Walker v Burton",
        "McDowall v Hirschfield Lipson",
        "Palk v Mortgage Services",
        "Copeland v Greenhalf",
        "Quennell v Maltby",
        "Harris v Goddard"
    ],
    "HELD": [
        "Counterclaim dismissed.",
        "It was well established that in certain circumstances a constructive trust could be imposed on a transferee of registered land to give effect to third-party rights notwithstanding their non-registration. Because that clearly cut across the underlying premise of the land-registration system that purchasers should acquire good title free of any interests which did not appear on the register, subject to statutorily defined overriding interests, the circumstances in which a constructive trust would arise had been narrowly confined. The crucial question was whether the transferee of the land had undertaken a new obligation to give effect to the relevant encumbrance or prior interest, Lloyd v Dugdale [2001] EWCA Civ 1754, [2002] 2 P. &amp; C.R. 13 followed. Although G accepted that it had knowledge or notice of H&#8217;s rights as contained in the agreement between him and C, it had not assumed an obligation to re-transfer the Phase Two Residential Land to him under the sale agreement which it had entered into with C. The effect of one clause in that agreement was that, for the purposes of the Law of Property (Miscellaneous Provisions) Act 1994, C sold with full title guarantee free of all rights created by it, which would clearly include H&#8217;s right to a re-transfer. Another clause provided that the property was sold subject to the entries on the property and charges registers and to certain other matters, none of which included H&#8217;s rights. Further, there was no specific reference in the agreement to H&#8217;s right to a re-transfer of the Phase Two Residential Land. Accordingly, G was not obliged to re-transfer that land to him (see paras 14-15, 19, 31, 38 of judgment)."
    ],
    "CIT": "[2012] EWHC 3351 (Ch)",
    "JUDGE": "David Richards J",
    "SUMMARY": [
        "In certain circumstances a constructive trust could be imposed on a transferee of registered land to give effect to third-party rights notwithstanding their non-registration, but the third party in the instant case had failed to establish that such a trust should be imposed.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The court determined the counterclaim of the first defendant (H), judgment having been entered against him in the action issued by the claimant company (G).",
        "By an agreement dated April 9, 1998, H sold part of a development site owned by him to a property-development company (C). Part of the land sold was referred to as the &#8220;Phase One Residential Land&#8221;; the remaining part was referred to as the &#8220;Phase Two Residential Land&#8221;. The former became the subject of development. The agreement envisaged that the Phase Two Residential Land would be developed at a later stage; it provided that if the relevant planning consent was not obtained within 10 years, the land would be transferred back to H for a nominal consideration. Planning consent was not obtained within that period. The property sold to C by H was registered with absolute title, but H did not at any time register his right to a re-transfer of the Phase Two Residential Land as an estate contract under the Land Registration Act 1925. In 2000, C sold the entire site owned by it to G. By his counterclaim, H sought specific performance of the obligation to re-transfer the Phase Two Residential Land to him."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Constructive Trusts",
        "Estate Contracts",
        "Non-Registration",
        "Sale of Land"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Civil Evidence - Adverse Possession - Burden of Proof - Mistake - Rectification - Register of Title - Registration",
    "COUNSEL": "For the appellant: Helen Galley. For the respondent: Tom Weekes.",
    "COURT": "EWCA",
    "NAME": "Baxter v Mannion",
    "YEAR": "2011",
    "CITATION": "Baxter v Mannion [2011] EWCA Civ 120",
    "NUMBER": "9",
    "RELATED": [
        "Powell v McFarlane",
        "KS Victoria Street v House of Fraser",
        "Best v Chief Land Registrar",
        "Walby v Walby",
        "Hounslow LBC v Minchinton",
        "Phillips v Mobil Oil",
        "Sava v SS Global Ltd",
        "Bridle v Ruby",
        "Colchester BC v Smith",
        "Zarb v Parry",
        "Ofulue v Bossert",
        "Davis v Smith"
    ],
    "SUMMARY": [
        "It was implicit in the wording of the Land Registration Act 2002 Sch.6 para.1 that a person who was not in adverse possession of land was not entitled to apply to be registered as its owner. If registration occurred in those circumstances it would be susceptible to correction as a mistake within the meaning of Sch.4 para.1 and para.5.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant (B) appealed against a decision ([2010] EWHC 573 (Ch), [2010] 1 W.L.R. 1965) upholding the judgment of a deputy adjudicator to the Land Registry to rectify the registration of title to a field in favour of the respondent (M).",
        "M had bought the field in 1996 and was registered as its proprietor. B made use of that field for a number of years and, in 2005, applied for registration of the field in his name pursuant to the Land Registration Act 2002 Sch.6 para.1(1), claiming to have been in adverse possession since 1985. The registry informed M that if he wished to object to such registration, he had to do so by a certain date by completing and returning a prescribed form. M failed to return the form within the time limit. The registry informed M that there was no power to extend time and duly registered B as proprietor. M lodged an application for rectification to correct a mistake pursuant to Sch.4 para.5(a). The adjudicator determined, amongst other things, that B had not been in exclusive possession during the relevant period and did not have the necessary intention to exclude the world at large. On appeal, the judge accepted that the adjudicator had applied the wrong onus of proof, but found that such mistake made no difference to her conclusion. He determined that the registration was a mistake that he had power to correct, and that it would be unjust not to order rectification despite the fact that B had since assumed possession of the land.SUMMARY B submitted that (1) the Act provided a clear and once-and-for-all system by way of notice to be followed by a counter-notice, failing that registration; (2) registration pursuant to a fraudulent application could amount to a mistake, whereas a registration following an innocent but mistaken application could not; (3) the judge had been wrong to hold that the question of onus of proof made no difference to the adjudicator&#8217;s decision; (4) it would be unjust to alter the register in circumstances where B had assumed possession of the land and where M could have returned the prescribed form challenging registration."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) It was implicit in the wording of Sch.6 para.1 that a person who was not in adverse possession of land was not entitled to apply to be registered as its owner. A registration obtained by a person not entitled to apply for it would be mistaken, so putting the register back in the condition it was prior to that application would be correction of a mistake within the meaning of Sch.4 para.1 and para.5. There was no reason to limit the jurisdiction to correct a mistake to official errors in the course of examination of a relevant application. To otherwise conclude would be an invitation to fraud. The fact that there was no possibility of extending the prescribed time meant that Parliament either intended that the rectification power could cover such a case or that the true owner could lose his land for failure to submit a form in time, a conclusion which was wholly improbable (see paras 24-26, 30 of judgment). The normal operation of the provisions would lead to certainty and simplicity and there was no answer to the fact that if landowners could lose land in such a way they would have lost it without compensation, with a consequential breach of the European Convention on Human Rights 1950 Protocol 1 art.1 (para.34). (2) It was impossible to draw any rational distinction between a mistake induced by fraud and a mistake induced by a wrong application. In both scenarios the reason for the mistake was the same, namely the fact that the registrar had been given false information. As the judge had noted, it would be strange if a registered proprietor could be at risk of losing his land to a squatter who had never been in adverse possession (paras 28-29). (3) The legal onus of proof lay on M. Having shown, prima facie, that B&#8217;s claim to have been in exclusive possession for upwards of 10 years was wrong, the evidential burden shifted to B and B had failed to prove that he had been in adverse possession. In any event, the adjudicator&#8217;s findings did not turn on the issue of onus of proof but rather came as the result of having heard all the evidence (paras 38-89). (4) As the judge had found, it was a matter of &#8220;simple justice&#8221; to put M back as the registered owner. B had made an unjustified attempt to acquire title (para.41)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2011] EWCA Civ 120",
    "JUDGE": "Mummery LJ; Jacob LJ; Tomlinson LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Civil Evidence",
        "Adverse Possession",
        "Burden of Proof",
        "Mistake",
        "Rectification",
        "Register of Title",
        "Registration"
    ]
},
{
    "CATEGORY": "Criminal Procedure - Corroboration - Criminal Procedure - Hearsay Evidence - Jury Directions - Res Gestae - Scotland",
    "COURT": "EWHC",
    "NAME": "Lees",
    "YEAR": "2016",
    "CITATION": "Lees [2016] HCJAC 16",
    "NUMBER": "10",
    "RELATED": [
        "Moncrieff v Jamieson",
        "Davies v Directloans Ltd",
        "City of London Corp v Fell",
        "Lyus v Prowsa Developments",
        "Grant v Edwards",
        "Sava v SS Global Ltd",
        "Corbett v Halifax",
        "Abbott v Abbott",
        "Zarb v Parry",
        "Baxter v Mannion",
        "Patel v Pirabakaran",
        "Hounslow LBC v Minchinton"
    ],
    "SUMMARY": [
        "An appeal against conviction for assault was refused where the sheriff had not misdirected the jury on mutual corroboration, hearsay or res gestae .",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; L appealed against conviction for assaulting X in 1998, 2006 and 2007 (charges 2, 3 and 4) and assaulting G in 2012.",
        "L had been acquitted in respect of three other charges involving G (charges 5, 6 and 7) and a further charge involving a third complainer. G had passed away by the time of the trial and in terms of the Criminal Procedure (Scotland) Act 1995 s.259, the Crown had relied upon hearsay evidence concerning a 999 recording in which G had made certain complaints against L and G&#8217;s subsequent signed written statement which contained more detailed allegations of her assault by L. As part of the evidence on charges 6 and 7, there had been testimony in the nature of res gestae about G shouting and indicating that certain things had happened to her at another location, which differed from those in the other charges. The sheriff had given the jury the standard directions on the application of mutual corroboration in relation to X&#8217;s evidence and G&#8217;s hearsay evidence and had given them particular directions on the care to be taken in relation to hearsay evidence.SUMMARY L submitted that (1) the hearsay evidence was insufficient to supply mutual corroboration; (2) the sheriff had misdirected the jury in respect of the evidence of res gestae on charges 6 and 7; as she had stated that the jury could use that evidence, they might have used it to prove the different charges on which L had eventually been convicted."
    ],
    "HELD": [
        "Appeal refused.",
        "(1) There was no requirement that the evidence required for the doctrine of mutual corroboration to apply be direct testimony from eyewitnesses; once deemed admissible, the hearsay evidence became the equivalent of the testimony of the speaker and could be used as proof of fact and thus corroboration. (2) It was entirely speculative to suggest that the jury would have used the evidence of the res gestae relative to different charges with a different locus to show that L had committed unrelated offences on the indictment."
    ],
    "CIT": "[2016] HCJAC 16",
    "JUDGE": "Lord Justice General (Carloway); Lady Paton; Lord Drummond Young",
    "TYPE": "Case",
    "CATEGORIES": [
        "Criminal Procedure",
        "Corroboration",
        "Criminal Procedure",
        "Hearsay Evidence",
        "Jury Directions",
        "Res Gestae",
        "Scotland"
    ]
},
{
    "CATEGORY": "Real Property - Adverse Possession - Boundaries - Consent - Exclusive Possession - Reasonable Belief",
    "COUNSEL": "For the appellants: Laura Collignon. For the respondents: Christian Sweeney.",
    "COURT": "EWCA",
    "NAME": "Zarb v Parry",
    "YEAR": "2011",
    "CITATION": "Zarb v Parry [2011] EWCA Civ 1306",
    "NUMBER": "11",
    "RELATED": [
        "Colchester BC v Smith",
        "Sava v SS Global Ltd",
        "Hounslow LBC v Minchinton",
        "Powell v McFarlane",
        "State Bank of India v Sood",
        "Herbert v Doyle",
        "Bridle v Ruby",
        "Wilkinson v Kerdene",
        "Copeland v Greenhalf",
        "Gilbert v Spoor",
        "Walker v Burton",
        "McDowall v Hirschfield Lipson"
    ],
    "SUMMARY": [
        "In order to interrupt adverse possession, the paper title owners had to bring the adverse possessor&#8217;s exclusive possession to an end.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellants (Z) appealed against a decision that the respondents (P), their neighbours, had acquired title to a strip of land by adverse possession.",
        "Z&#8217;s predecessor (L) had sold part of his garden to P&#8217;s predecessors (C). A plan was attached to the transfer and the judge held that it showed that the boundary between the properties ran to the north of a hedge which was on Z&#8217;s land. However, he further held that P had acquired title by adverse possession to the strip of land between the boundary and the hedge which formed part of their garden.SUMMARY Z submitted that (1) C&#8217;s possession of the strip was with L&#8217;s consent so that the possession could not be adverse; (2) adverse possession of the strip by P had been interrupted by Z&#8217;s attempt to fence off the strip so as to start time running again; (3) P did not satisfy the requirement that throughout the previous period of 10 years they reasonably believed that they owned the strip, as required by the Land Registration Act 2002 Sch.6 para.5(4)(c)."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) Z&#8217;s case that L gave his implied consent to the occupation of the strip by C was based on the fact that he erected a stock-proof fence on his side of the hedge and their evidence that &#8220;[L] actually chose to give us the extra tree and a few feet&#8221;. However, in order to demonstrate that L gave permission his words and acts had to be probative of, and not merely consistent with, the giving of permission. The erection of the fence was equivocal and C&#8217;s evidence was not inconsistent with P&#8217;s case on adverse possession. Z failed to disturb the judge&#8217;s finding that L did not consent to C&#8217;s occupation of the strip (see paras 22-28, 64-66 of judgment). (2) In order to establish that P&#8217;s adverse possession had been interrupted the factual possession of P would have to be brought to an end, Bligh v Martin [1968] 1 W.L.R. 804 applied. Z did not retake exclusive possession of the strip as they intended to do by banging in posts and starting to erect a fence. They decided to withdraw part-way through that exercise, because of the protests from P. It was clear that Z intended that they should recover possession, but they did not retake possession in any meaningful sense. It was not enough that Z planted stakes or took other steps symbolic of taking possession of the whole of the strip. The judge was entitled to come to the conclusion that P&#8217;s adverse possession had not been interrupted (paras 35-44). (3) The judge impliedly held that C and P reasonably believed that they owned the strip. C thought that L had given them the strip. When P purchased the property the dispute was dormant. By the time Z asserted their ownership C and P together had been in possession of the land for well over 10 years. A surveyor&#8217;s report commissioned by the parties found that the boundary was in the middle of the hedge. In the circumstances P&#8217;s belief was reasonable and the judge&#8217;s finding was not against the weight of the evidence (paras 46-51, 77-80)."
    ],
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "CIT": "[2011] EWCA Civ 1306",
    "JUDGE": "Lord Neuberger MR; Arden LJ; Jackson LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Adverse Possession",
        "Boundaries",
        "Consent",
        "Exclusive Possession",
        "Reasonable Belief"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Criminal Law - Adverse Possession - Ex Turpi Causa - Illegality - Land Registration - Public Policy - Squatting In Residential Buildings - Title to Land",
    "COUNSEL": "For the appellant: Jonathan Karas QC, Katrina Yates. For the respondent: Philip Rainey QC, Marc Glover. For the interested party: No appearance or representation.",
    "COURT": "EWCA",
    "NAME": "Best v Chief Land Registrar",
    "YEAR": "2015",
    "CITATION": "Best v Chief Land Registrar [2015] EWCA Civ 17",
    "NUMBER": "12",
    "RELATED": [
        "Mulvaney v Gough",
        "Walker v Burton",
        "Zarb v Parry",
        "Baxter v Mannion",
        "Sava v SS Global Ltd",
        "Hounslow LBC v Minchinton",
        "Powell v McFarlane",
        "Ofulue v Bossert",
        "Colchester BC v Smith",
        "Nickerson v Barraclough",
        "Barca v Mears",
        "Copeland v Greenhalf"
    ],
    "SUMMARY": [
        "Where a squatter claimed title to a residential property based on adverse possession, the fact that part of his occupation constituted a criminal offence under the Legal Aid, Sentencing and Punishment of Offenders Act 2012 s.144 did not prevent his conduct from qualifying as relevant adverse possession for the purposes of the Land Registration Act 2002 Sch.6. The criminalisation of squatting did not mean that granting title to a squatter in such circumstances amounted to him benefiting from his criminal conduct.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant registrar appealed against a decision ([2014] EWHC 1370 (Admin)) that the respondent squatter could rely on his adverse possession of a residential property to claim title to the property even though his occupation was a criminal offence under the Legal Aid, Sentencing and Punishment of Offenders Act 2012 s.144.",
        "The squatter had taken possession of an empty and vandalised house in 1997 without the owner&#8217;s consent. He did significant work to make the house habitable. From 2001 he treated the house as his own. In January 2012 he moved in and applied to become the registered proprietor. The registrar rejected the squatter&#8217;s application under the Land Registration Rules 2003 r.16(3) on the ground that he could not rely on an act which was itself a criminal offence as evidence of adverse possession. The court below held that adverse possession based on criminal trespass did not prevent an application for registration under the Land Registration Act 2002 Sch.6 from being successful. The issue was whether the criminalisation of squatting meant that granting title of a residential property to a squatter who claimed adverse possession allowed the squatter to improperly benefit from his criminal conduct.SUMMARY The registrar submitted that although adverse possession operated on the premise that the public interest in active use and marketability of land outweighed the general concern that a person should not be able to benefit from their own wrong, the enactment of s.144 meant that the public interest in ensuring that a person did not benefit from committing a crime was especially strong and outweighed the public policy expressed in Sch.6 of the 2002 Act."
    ],
    "HELD": [
        "Appeal dismissed.",
        "It was an established principle that the law of illegality did not give the court a discretion to take a claimant&#8217;s illegal actions into account when deciding the extent to which such illegality impacted the relief sought by the claimant. Rather, the court had to identify in the specific context a particular rule which appropriately reflected the relevant underlying policy, Tinsley v Milligan [1994] 1 A.C. 340 and Allen v Hounga [2014] UKSC 47, [2014] 1 W.L.R. 2889 applied. There was no single rule with blanket effect across all areas of law. In the instant case, the illegality affected statutory rights, and the registrar&#8217;s argument would involve &#8220;reading down&#8221; Sch.6 para.1 of the 2002 Act so as to provide that a period of adverse possession in reliance on behaviour which constituted a criminal offence could not qualify to be treated as adverse possession. Balancing the public policy considerations in the 2002 Act with those in the 2012 Act, it was clear that Parliament had not intended s.144 of the latter to impact Sch.6 of the former. Section 144 was designed to provide deterrence and practical assistance for homeowners in removing squatters from their properties; it was not to re-balance the rights of property owners and adverse possessors regarding their respective entitlements to be treated as title holders to property. That was so in respect of either registered or unregistered land. Accordingly, criminally unlawful activity falling within s.144 could occur without it preventing a successful claim to acquire title by virtue of adverse possession. There was no overriding public policy concern associated with s.144 which ought to be taken to affect the usual balance of interests between landowner and adverse possessor, Bakewell Management Ltd v Brandwood [2004] UKHL 14, [2004] 2 A.C. 519 and R. (on the application of Smith) v Land Registry (Peterborough Office) [2009] EWHC 328 (Admin) considered. The Proceeds of Crime Act 2002 Pt 5 did not provide relevant guidance on the meaning and effect of s.144 in the context of its intended impact on the regime in Sch.6, and it provided no support for the registrar&#8217;s case. Moreover it was questionable whether the requirements of POCA had been satisfied in relation to the squatter&#8217;s acquisition of the house, because there were other acts of assertion of possession which he could rely on, such as maintaining the property and boundary fence. POCA operated a separate regime, and the illegality defence was not to be imported into the scheme of the 2002 Act in an attempt to short-circuit the POCA procedure (see paras 51-52, 56, 58, 63, 65, 67-73, 75, 80, 84-88, 90-95, 108 of judgment)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2015] EWCA Civ 17",
    "JUDGE": "Arden LJ; McCombe LJ; Sales LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Criminal Law",
        "Adverse Possession",
        "Ex Turpi Causa",
        "Illegality",
        "Land Registration",
        "Public Policy",
        "Squatting In Residential Buildings",
        "Title to Land"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Breach of Contract - Brothels - Covenants - Forfeiture - Leases",
    "COURT": "EWHC",
    "NAME": "Grand Junction Co v Bates",
    "YEAR": "1954",
    "CITATION": "Grand Junction Co v Bates [1954] 2 QB 160",
    "NUMBER": "13",
    "RELATED": [
        "Swift Investments v Combined English Stores",
        "AG Securities v Vaughan",
        "Goldberg v Edwards",
        "Wright v Macadam",
        "Antoniades v Villiers",
        "Crago v Julian",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Phillips v Mobil Oil",
        "Errington v Errington",
        "Crate v Miller",
        "Binions v Evans",
        "Gray v Taylor"
    ],
    "HELD": [
        "(1) by s.87 of the Law of Property Act 1925 the defendant was put in the same position as if he had a charge by way of subdemise; therefore, he was entitled to make a claim under s.146; (2) the defendant was a tenant of the basement, but no relief from forfeiture would have been granted to him in respect of such tenancy (which, in any event, could only have extended to the basement) because that tenancy was only for a purely temporary occupation and the arrangement between the defendant and B was in breach of a convenant in the lease; (3) the defendant, who had not known of the acts of immorality, and who was in every way satisfactory as a tenant, was entitled to relief on payment of arrears of rent and payment for repairs; (4) as other premises owned by the plaintiffs in the same street had a reputation for prostitution, the damages for breach of convenant could be little more than nominal, namely, GBP 10. Re Good&#8217;s Lease applied."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1954] 2 QB 160",
    "JUDGE": "Upjohn J",
    "SUMMARY": [
        "Covenant; breach of covenant; forfeiture; sublessees; mortgagee",
        "The Law of Property Act 1925 s.87(1) provides that a mortgagee by way of legal charge is to have the same &#8220;protection, powers and remedies&#8221; as though he had a subdemise. A lessee by subdemise has the right to protect his mortgage, where it is of a term of years, by applying for relief from forfeiture under s.146 of the Act. That is a most important right possessed by a mortgagee by subdemise, for it may be the only way of saving his security in the hands of an insolvent lessee. The effect of s.87 is to give the mortgagee, by way of legal charge, this same right, because he has the same protection, as if he were an underlessee. The plaintiffs granted a lease of premises to the defendant. That lease contained a covenant against assigning or underletting the premises or any part thereof without the plaintiffs&#8217; consent and also a convenant not to use the premises or any part thereof for any illegal or immoral purpose and to use the same for a single private dwelling-house or for letting furnished apartments. The defendant, with the plaintiff&#8217;s consent, assigned the lease to B, part of the purchase-money being secured by a legal charge. By an oral arrangement with B, the defendant and his family occupied the basement as a temporary arrangement on payment of GBP 3 10s. a week. The furniture in the basement belonged to the defendant. B was twice convicted of permitting the premises to be used as a brothel. The plaintiffs brought an action against the defendant and B for forfeiture of the lease on the ground of a breach of the covenant not to use the premises for an immoral purpose. B did not appear and judgment was entered against her. The defendant claimed that he was entitled to relief against forfeiture under s.146(4) of the Law of Property Act 1925."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Breach of Contract",
        "Brothels",
        "Covenants",
        "Forfeiture",
        "Leases"
    ]
},
{
    "CATEGORY": "Banking and Finance Other Related Subjects: Consumer Law - Consumer Credit Agreements - Due Diligence - Finance - Interest Rates - Mortgages",
    "COURT": "EWHC",
    "NAME": "Davies v Directloans Ltd",
    "YEAR": "1986",
    "CITATION": "Davies v Directloans Ltd [1986] 1 WLR 823",
    "NUMBER": "14",
    "RELATED": [
        "Palk v Mortgage Services",
        "Scott v Southern Pacific Mortgages",
        "State Bank of India v Sood",
        "Laskar v Laskar",
        "Walker v Burton",
        "Jones v Challenger",
        "Malik v Fassenfelt",
        "Bedson v Bedson",
        "Gardner",
        "Mulvaney v Gough",
        "Bishop v Blake",
        "Whittaker v Kinnear"
    ],
    "HELD": [
        "that it was for the court to determine whether a credit bargain was &#8220;extortionate&#8221; and the meaning of the word was confined to the meaning given in s.138 (dictum of Browne-Wilkinson J. in Multiservice Bookbinding Ltd v Marden [1979] Ch. 84 considered). On the evidence P could not rely on their lack of business experience or financial pressure as relevant factors since they had been warned by independent solicitors and D that a mortgage would be expensive, and no advantage was taken of them by D. The degree of risk, accepted by D on the security offered was a relevant factor and justified the rate of interest charged, since P had found difficulty in obtaining a building society or other institutional loan. As to the remaining factor set out in s.138, namely prevailing interest rates, regard should be had to the true rate of interest, i.e. the annual percentage rate of charge calculated in accordance with the Consumer Credit (Total Charge for Credit) Regulations 1980 even though they did not apply to the loan in question. A comparison of rates charged by other lending bodies showed that the payments required of P fell far short of constituting the legal charge an &#8220;extortionate credit bargain&#8221; under s.138 or one which &#8220;grossly contravened&#8221; the principles of fair dealing (dictum of Sir John Donaldson in Wills v Wood (1984) 81 L.S.G. 1211 applied)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1986] 1 WLR 823",
    "JUDGE": "Edward Nugee QC",
    "SUMMARY": [
        "Extortionate credit bargain; rate of interest; whether justified",
        "A credit bargain was not extortionate within the meaning of the Consumer Credit Act of 1974 s.138 where the borrower had been warned of the cost of the credit and where the risk taken by the lender justified the rate of interest charged and the rate was not out of line with that charged by other lending bodies. On August 1, 1979 P, after consulting solicitors, entered into a deferred sale agreement with D and became entitled to enter into occupation of a house which they were contractually bound to purchase in 12 months&#8217; time, with payment of interest meanwhile on the balance of the purchase price. They fell behind in their interest payments, but on September 2, 1980 completed the purchase and executed a charge over it to pay D the principal sum lent of GBP 17,450 plus interest at the rate of 25.785 per cent per annum over 10 years. They missed instalments, tried and failed to sell the house, and in January 1982 D started possession proceedings. In March P found a buyer and in April the house was transferred and the mortgage redeemed. D made no charge for interest on arrears of instalments. In May 1984 P brought proceedings seeking an order that the rate of interest stipulated under the legal charge be reduced to a proper rate on the grounds that the loan and terms of repayment constituted an extortionate credit bargain within the meaning of s.138 of the Consumer Credit Act 1974, that the rate of interest was &#8220;grossly exorbitant,&#8221; and that the circumstances surrounding the loan and the charge &#8220;grossly contravenes ordinary principles of fair trading.&#8221; The claim failed."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Banking and Finance Other Related Subjects: Consumer Law",
        "Consumer Credit Agreements",
        "Due Diligence",
        "Finance",
        "Interest Rates",
        "Mortgages"
    ]
},
{
    "CATEGORY": "Real Property - Dishonesty - Employees - Mortgagees' Powers and Duties - Repossession - Sale of Land - Transactions at An Undervalue",
    "COUNSEL": "For C: Philomena Harrison. For H: Neil Levy. For D: Thomas Jefferies.",
    "COURT": "EWCA",
    "NAME": "Corbett v Halifax",
    "YEAR": "2002",
    "CITATION": "Corbett v Halifax [2002] EWCA Civ 1849",
    "NUMBER": "15",
    "RELATED": [
        "Groveholt Ltd v Hughes",
        "Palk v Mortgage Services",
        "Mulvaney v Gough",
        "Phipps v Pears",
        "Huckvale v Aegean Hotels",
        "Quigley v Masterson",
        "Wall v Collins",
        "Colchester BC v Smith",
        "Batchelor v Marlow",
        "Chaffe v Kingsley",
        "Binions v Evans",
        "Walby v Walby"
    ],
    "SUMMARY": [
        "Claimants&#8217; house repossessed by Halifax - Halifax employees prohibited from purchasing property in possession - Employee duped Halifax into sale to him of claimants&#8217; property - Property sold at undervalue unknown to purchaser - Sale at undervalue not liable to be set aside merely because it took place at undervalue - Impropriety necessary - Purchaser&#8217;s impropriety related not to purchase of property but to breach of Halifax rules - No equity upon which claimants could rely to seek to set aside sale - Improper exercise of power of sale by sale at undervalue in Law of Property Act 1925 s 104(2) did not include circumstances of which purchaser had no knowledge and in which claimants had no legitimate concern - Damages proper remedy.",
        "D, an employee of H, appealed against a decision to set aside a sale of C&#8217;s house by H as mortgagee in possession to D. H had obtained a possession order in respect of C&#8217;s house. D and any family member of his had been prevented by H&#8217;s internal rules from purchasing repossessed houses. D persuaded M, his uncle, to purchase C&#8217;s house for GBP 140,000 and in a back to back transaction, D purchased C&#8217;s house from M. C&#8217;s house had been purchased at an undervalue and the judge found that D had not been a purchaser in good faith in accordance with the Law of Property Act 1925 s.205 so could not benefit from s.104 of the Act. The question on appeal was whether the sale to D had been liable to be set aside, not because D or H had known or should have known of the undervalue, but because D had deceived H in selling the house to him rather than to someone else."
    ],
    "HELD": [
        "allowing the appeal in part, that the sale did not have to be set aside because it had taken place at an undervalue. Impropriety had been a prerequisite. Section 104(2) of the Act made it clear that a purchaser would not be protected if he had actual knowledge of impropriety. D&#8217;s deception of H had not conferred upon C any right to set aside the sale which they would not have possessed against any other purchaser at an undervalue who did not know of the undervalue and who had not been involved in the exercise of the power of sale by H. The sale would have been voidable by H but this would not have been relevant to C. The sale had to be tainted by impropriety and not have been just at an undervalue. Equity would only intervene if there had been impropriety or bad faith on the part of the mortgagee. The lack of good faith had had nothing to do with C, only H. Accordingly C had not been affected. The judge had been wrong to set the sale aside on the basis that D could not take the benefit of s.104(2). The judge had also exercised his discretion to set aside the sale wrongly as he had failed to consider delay, the work carried out to the property, the fact that it was a family home to minor children and that there had been a rise in property prices."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2002] EWCA Civ 1849",
    "JUDGE": "Schiemann LJ; Scott Baker LJ; Pumfrey J",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Dishonesty",
        "Employees",
        "Mortgagees' Powers and Duties",
        "Repossession",
        "Sale of Land",
        "Transactions at An Undervalue"
    ]
},
{
    "CATEGORY": "Real Property - Good Faith - Possession of Land",
    "COURT": "EWHC",
    "NAME": "Quennell v Maltby",
    "YEAR": "1979",
    "CITATION": "Quennell v Maltby [1979] 1 WLR 318",
    "NUMBER": "16",
    "RELATED": [
        "Chaffe v Kingsley",
        "Batchelor v Marlow",
        "Wood v Waddington",
        "Phipps v Pears",
        "Herbert v Doyle",
        "Phillips v Mobil Oil",
        "Gilbert v Spoor",
        "Huckvale v Aegean Hotels",
        "Harris v Goddard",
        "Mulvaney v Gough",
        "Corbett v Halifax",
        "Wilkinson v Kerdene"
    ],
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CIT": "[1979] 1 WLR 318",
    "JUDGE": "Lord Denning MR; Bridge LJ; Templeman LJ",
    "SUMMARY": [
        "Possession; action not bona fide; brought by wife as mortgagee",
        "The court is entitled to look behind the formal legal relationship of the parties, and a mortgagee will not be granted possession of property unless it is sought bona fide for the purpose of enforcing the security. The landlord, the mortgagor, owned a valuable house which he mortgaged to the bank to secure an overdraft. Without the bank&#8217;s consent he let the house to a tenant who became a statutory tenant. The landlord, wishing to regain possession, approached the bank to take action but they refused. The landlord&#8217;s wife then paid off the bank, the mortgage was transferred to her name, and she brought an action for possession on her husband&#8217;s behalf. The judge upheld her claim. On appeal, held, allowing the appeal, that the wife had brought the action for the ulterior motive of assisting her husband obtain vacant possession, and she would therefore be treated as the landlord&#8217;s agent in the action. (Dudley and District Benefit Society v Emerson [1949] Ch. 707 distinguished)."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Good Faith",
        "Possession of Land"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Banking and Finance - Civil Procedure - Consent - Mortgagees - Mortgages - Repossession - Sale of Land",
    "COUNSEL": "For P: Anthony Rimmer. For MSF: Gavin Lightman Q.C. and Michael Kay.",
    "COURT": "EWCA",
    "NAME": "Palk v Mortgage Services",
    "YEAR": "1993",
    "CITATION": "Palk v Mortgage Services [1993] Ch 330",
    "NUMBER": "17",
    "RELATED": [
        "Corbett v Halifax",
        "Scott v Southern Pacific Mortgages",
        "Cuckmere Brick Co v Mutual Finance",
        "Davies v Directloans Ltd",
        "Pettitt v Pettitt",
        "Groveholt Ltd v Hughes",
        "Binions v Evans",
        "Zarb v Parry",
        "Wandsworth LBC v Dixon",
        "Downsview Nominees Ltd v First City Corp Ltd",
        "Laskar v Laskar",
        "State Bank of India v Sood"
    ],
    "SUMMARY": [
        "Possession; order for sale; whether court has power to order sale against wishes of mortgagee",
        "It was appropriate to order sale where unfairness and injustice would otherwise follow, despite objections by the mortgagees. In 1990 A borrowed GBP 300,000 from mortgagees, secured by a mortgage over the house owned jointly by himself and his wife, B. A&#8217;s company then went into insolvent liquidation. In July 1990and B decided to sell the house. In March 1991 a sale was negotiated for GBP 283,000, the amount required to redeem the mortgage being GBP 358,587. The mortgagees declined to agree to the sale as they had obtained a suspended order for possession and were intending to let the property until the housing market improved. However, the sum due under the mortgage was increasing by about GBP 43,000 per year and letting the property was likely to produce only GBP 13,000 to GBP 14,000 per year. A and B applied for an order for sale. At trial the judge dismissed the application and B appealed."
    ],
    "HELD": [
        "allowing B&#8217;s appeal, that (1) the discretion given to the court by the Law of Property Act 1925, s.91(2) is not hedged about with preconditions; the fact that the mortgagee is not in breach of any duty it owes to the mortgagor is only one of the circumstances to be taken into account; (2) it was just and equitable to order a sale because otherwise unfairness and injustice would follow ( China and South Seas Bank Ltd v Tan [1990] 1 A.C. 536 ; McHugh (Felix) v Union Bank of Canada (No.2) [1913] A.C. 299 considered); (3) to direct a sale did not run counter to the established practice of the court ( Woolley v Colman (1882) 21 Ch. D. 169 , Merchant Banking Co of London v London and Hanseatic Bank (1886) 55 L.J. Ch. 479 distinguished)."
    ],
    "FLAGS": [
        "Criticised"
    ],
    "CIT": "[1993] Ch 330",
    "JUDGE": "Sir Donald Nicholls VC; Butler-Sloss LJ; Sir Michael Kerr",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Banking and Finance",
        "Civil Procedure",
        "Consent",
        "Mortgagees",
        "Mortgages",
        "Repossession",
        "Sale of Land"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Negligence - Duty of Care - Mortgagees - Sale of Land",
    "COURT": "EWCA",
    "NAME": "Cuckmere Brick Co v Mutual Finance",
    "YEAR": "1971",
    "CITATION": "Cuckmere Brick Co v Mutual Finance [1971] Ch 949",
    "NUMBER": "18",
    "RELATED": [
        "Palk v Mortgage Services",
        "Downsview Nominees Ltd v First City Corp Ltd",
        "Groveholt Ltd v Hughes",
        "Corbett v Halifax",
        "Clarke v Corless",
        "Pettitt v Pettitt",
        "Binions v Evans",
        "Nickerson v Barraclough",
        "Kay v Lambeth LBC",
        "Coventry v Lawrence",
        "Wheeler v JJ Saunders",
        "Jones v Challenger"
    ],
    "SUMMARY": [
        "Sale; mortgagees&#8217; duty of care.",
        "A mortgagee, when exercising his power of sale, owes a duty to the mortgagor to take reasonable care to obtain a proper price. C Co. charged land with planning permission for 100 flats to M Co. for GBP 50,000. Later, permission was given to erect 35 houses. M Co.&#8217;s power of sale became exercisable, and M Co. advertised the land by reference to the planning permission for houses, but not to that for flats. On being informed of their omission M Co. refused to postpone the sale. The price obtained was GBP 44,000."
    ],
    "HELD": [
        "(1) M Co. owed a duty to C Co. to take reasonable care to obtain a proper price, and (2) M Co. had been in breach of that duty by failing adequately to publicise the planning permission for flats, and by refusing to postpone sale. ( Tomlin v Luce (1889) 43 Ch. D. 191 followed; Kennedy v De Trafford [1896] 1 Ch. 762 explained)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1971] Ch 949",
    "JUDGE": "Salmon LJ; Cairns LJ; Cross LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Negligence",
        "Duty of Care",
        "Mortgagees",
        "Sale of Land"
    ]
},
{
    "CATEGORY": "Company Law - Debentures - Duty of Care - Mortgagees",
    "COURT": "UKPC",
    "NAME": "Downsview Nominees Ltd v First City Corp Ltd",
    "YEAR": "1993",
    "CITATION": "Downsview Nominees Ltd v First City Corp Ltd [1993] AC 295",
    "NUMBER": "19",
    "RELATED": [
        "Cuckmere Brick Co v Mutual Finance",
        "Palk v Mortgage Services",
        "Boyer v Warbey",
        "Laskar v Laskar",
        "Wong v Beaumont Property Trust",
        "Goldberg v Edwards",
        "Walker v Burton",
        "City of London Corp v Fell",
        "Gilbert v Spoor",
        "Powell v McFarlane",
        "Grant v Edwards",
        "State Bank of India v Sood"
    ],
    "HELD": [
        "that although a mortgagee and a receiver appointed by him owe no duty of care to subsequent encumbrancers generally, where they have acted in bad faith, as here, they will be liable."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1993] AC 295",
    "JUDGE": "Lord Templeman; Lord Goff of Chieveley; Lord Lane; Lord Mustill; Lord Slynn of Hadley",
    "SUMMARY": [
        "Mortgagee; duty of care; negligence; detriment suffered by second mortgagee; whether mortgagee acted in bad faith; whether liable in damages",
        "A mortgagee owes no duty in negligence to a subsequent mortgagee, but will be liable for damages where he has acted in bad faith, to the detriment of the second mortgagee. A debenture-holder sought to enforce the debenture, and appointed a receiver in order to prevent a second debenture-holder from enforcing his debenture over the company. The receivers appointed by the first debenture-holder allowed the company to continue trading, during which time it made considerable losses. The second debenture-holder brought an action claiming breach of duty by the first debenture-holder and the receiver."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Company Law",
        "Debentures",
        "Duty of Care",
        "Mortgagees"
    ]
},
{
    "CATEGORY": "Real Property",
    "COUNSEL": "For the claimant: Hugh Jackson. For the defendant: Paul Clarke.",
    "COURT": "EWHC",
    "NAME": "Bishop v Blake",
    "YEAR": "2006",
    "CITATION": "Bishop v Blake [2006] EWHC 831 (Ch)",
    "NUMBER": "20",
    "RELATED": [
        "Colchester BC v Smith",
        "Batchelor v Marlow",
        "Phipps v Pears",
        "Herbert v Doyle",
        "Quennell v Maltby",
        "Quigley v Masterson",
        "Davis v Smith",
        "Harris v Goddard",
        "Groveholt Ltd v Hughes",
        "Mulvaney v Gough",
        "McDowall v Hirschfield Lipson",
        "Chaffe v Kingsley"
    ],
    "SUMMARY": [
        ""
    ],
    "CIT": "[2006] EWHC 831 (Ch)",
    "JUDGE": "Sir Francis Ferris",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property"
    ]
},
{
    "CATEGORY": "Trusts Other Related Subjects: Contracts - Joint Tenancies - Oral Contracts - Repudiation - Resulting Trusts - Settlements - Survivorship",
    "COURT": "EWCA",
    "NAME": "Burgess v Rawnsley",
    "YEAR": "1975",
    "CITATION": "Burgess v Rawnsley [1975] Ch 429",
    "NUMBER": "21",
    "RELATED": [
        "Laskar v Laskar",
        "Stack v Dowden",
        "McDowall v Hirschfield Lipson",
        "AG Securities v Vaughan",
        "Yaxley v Gotts",
        "Goodman v Gallant",
        "Davis v Smith",
        "Newlon Housing Trust v Alsulaimen",
        "Harrow LBC v Qazi",
        "Harris v Goddard",
        "Herbert v Doyle",
        "Bedson v Bedson"
    ],
    "HELD": [
        "that since there was no common purpose which had failed, there was no resulting trust; however, the agreement to sell had operated to sever the joint tenancy, the house was not F&#8217;s by survivorship, and she held it on trust for herself and for M&#8217;s estate in equal shares. (<span class=\"ul\">Re Wilks</span> Wilks, Re [1891] 3 Ch. 59 doubted and Nielson-Jones v Fedden [1975] Ch. 222 doubted; Hawkesley v May [1956] 1 Q.B. 304 considered and Draper&#8217;s Conveyance, Re [1969] 1 Ch. 486 considered)."
    ],
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CIT": "[1975] Ch 429",
    "JUDGE": "Lord Denning MR; Browne LJ; Sir John Pennycuick",
    "SUMMARY": [
        "Resulting trust; joint purchase of house for purposes that failed; no communication to each other of different purposes; whether resulting trust",
        "An oral agreement by one joint tenant of a house to sell his interest to the other joint tenant, which is not specifically enforceable and is subsequently repudiated, will nevertheless operate to sever the joint tenancy. M, a widower, and F, a widow, bought a house in their joint names, each providing half of the purchase price, as joint tenants. M, who already occupied part of the house, bought it as a matrimonial home, intending to marry F. F intended to occupy the other part of the house herself, had no intention of marrying and did not know of M&#8217;s intentions. They did not marry, and F never moved in. M and F agreed orally that F would sell M her share. F subsequently refused to carry out the agreement. M died, and F claimed that the house was hers by survivorship."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Trusts Other Related Subjects: Contracts",
        "Joint Tenancies",
        "Oral Contracts",
        "Repudiation",
        "Resulting Trusts",
        "Settlements",
        "Survivorship"
    ]
},
{
    "CATEGORY": "Real Property - Divorce - Joint Tenancies - Jurisdiction - Matrimonial Home",
    "COURT": "EWCA",
    "NAME": "Harris v Goddard",
    "YEAR": "1983",
    "CITATION": "Harris v Goddard [1983] 1 WLR 1203",
    "NUMBER": "22",
    "RELATED": [
        "McDowall v Hirschfield Lipson",
        "Quigley v Masterson",
        "Kinch v Bullard",
        "In re Pavlou",
        "Davis v Smith",
        "Laskar v Laskar",
        "Walker v Burton",
        "Rhone v Stephens",
        "Wall v Collins",
        "Bedson v Bedson",
        "Harrow LBC v Qazi",
        "Phipps v Pears"
    ],
    "SUMMARY": [
        "Joint tenancy; prayer of severance in divorce petition; whether notice to sever tenancy",
        "A prayer in a divorce petition for an order in relation to the matrimonial home and property does not operate of itself so as to sever the spouses&#8217; joint tenancy. H and W were equitable joint tenants of the matrimonial home and shop premises. W petitioned for divorce. The petition included a prayer for such order in relation to the property by way of transfer or settlement as should be just. H was killed in a car accident before the hearing of the petition. H&#8217;s executors claimed that the joint tenancy had been severed by the prayer in the petition, and that his estate was entitled to half the property. The judge rejected that claim."
    ],
    "HELD": [
        "dismissing the appeal, that although a notice in writing of a desire to sever a joint tenancy took effect forthwith, the desire to sever must itself be immediate. The prayer in the petition was merely an invitation to the court to decide at some future time whether or not to exercise its jurisdiction in any one of a number of ways in relation to the property. Accordingly, W was beneficially entitled to the whole of the property (Draper&#8217;s Conveyance, Re [1969] 1 Ch. 486 distinguished; Bedson v Bedson [1965] 2 Q.B. 666 considered; Wilks, Re [1891] 3 Ch. 59 not followed)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1983] 1 WLR 1203",
    "JUDGE": "Lawton LJ; Kerr LJ; Dillon LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Divorce",
        "Joint Tenancies",
        "Jurisdiction",
        "Matrimonial Home"
    ]
},
{
    "CATEGORY": "Real Property - Divorce - Intention - Joint Tenancies - Severance",
    "COURT": "EWHC",
    "NAME": "McDowall v Hirschfield Lipson",
    "YEAR": "1992",
    "CITATION": "McDowall v Hirschfield Lipson [1992] 2 FLR 126",
    "NUMBER": "23",
    "RELATED": [
        "Quigley v Masterson",
        "Davis v Smith",
        "Harris v Goddard",
        "Bedson v Bedson",
        "Wilkinson v Kerdene",
        "Goodman v Gallant",
        "Sava v SS Global Ltd",
        "Stack v Dowden",
        "Stafford v Lee",
        "Kinch v Bullard",
        "Laskar v Laskar",
        "Geary v Rankine"
    ],
    "SUMMARY": [
        "Joint tenancy; severance; matrimonial home; husband filing divorce petition; death of husband before hearing; whether filing of petition and discussions with solicitors showed course of dealing to sever joint tenancy",
        "In the absence of an express act of severance a party had to prove a course of dealing in which both parties had evinced an intention to sever a joint tenancy. H and W were joint tenants of a property. Later H left W and lived with P. The sale of the matrimonial home and divorce proceedings were discussed between solicitors acting for H and W, but neither W nor her solicitors expressed any interest in severing the joint tenancy. H died after he had filed a divorce petition but before the suit had been concluded, leaving P as the sole executrix and beneficiary of his will. H&#8217;s solicitors contended that although there had been no express act of severance, they had affected a severance in correspondence with W&#8217;s solicitors in the context of discussion about the divorce. P alleged that the solicitors had been negligent in not severing the joint tenancy; alternatively she sought a declaration that his estate was entitled to a half share of the house in the event that the solicitors established that the tenancy had been severed."
    ],
    "HELD": [
        "that in the absence of an express act of severance of a joint tenancy, a party had to prove a course of dealing in which both parties had evinced an intention to sever the tenancy. There was no evidence of such intention in the parties&#8217; discussions about the divorce and the sale of the property and there had been no advantage to be gained by either party in severance as the property would have been dealt with under the provisions of the Matrimonial Causes Act 1973. The correspondence between the solicitors was not privileged and admissible to see if there had been a severance, which had to be investigated as an independent fact."
    ],
    "CIT": "[1992] 2 FLR 126",
    "JUDGE": "Eric Stockdale",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Divorce",
        "Intention",
        "Joint Tenancies",
        "Severance"
    ]
},
{
    "CATEGORY": "Trusts - Beneficiaries - Joint Tenancies - Severance - Trusts For Sale",
    "COURT": "EWCA",
    "NAME": "Goodman v Gallant",
    "YEAR": "1986",
    "CITATION": "Goodman v Gallant [1986] Fam 106",
    "NUMBER": "24",
    "RELATED": [
        "Kinch v Bullard",
        "Jones v Challenger",
        "McDowall v Hirschfield Lipson",
        "Barclay v Barclay",
        "Bedson v Bedson",
        "Davis v Smith",
        "Quigley v Masterson",
        "Stack v Dowden",
        "Harrow LBC v Qazi",
        "Grant v Edwards",
        "Harris v Goddard",
        "Rhone v Stephens"
    ],
    "SUMMARY": [
        "Joint tenancy; severance; trust for sale; beneficial interests",
        "Where a conveyance into joint names contains an express declaration that the parties are to hold the proceeds of sale on trust for themselves as joint tenants, then on severance a tenancy in common in equal shares is created, and the declaration is conclusive of the position. In 1960 P and her husband purchased a house which was conveyed into the sole name of the husband, although it was agreed between them that P was entitled to a half share in the beneficial interest in the property. In 1971 P left the husband and later began living in the property with D. In 1978 the husband, in consideration of the cost of his share, conveyed the freehold to P and D as beneficial joint tenants of trust for sale &#8220;to hold the net proceeds of sale...UPON TRUST for themselves as joint tenants.&#8221; In 1983 P severed the joint tenancy and issued a summons for the determination of their respective beneficial interests, contending that she was entitled to three- quarters of the beneficial interest on the basis that she already owned one-half and it was intended that the joint tenancy should only extend to the half share she received from the husband. The registrar held that they held as tenants in common in equal shares, and the judge, on appeal by the plaintiff, upheld this decision. P further appealed to the Court of Appeal."
    ],
    "HELD": [
        "dismissing the appeal, that where a conveyance into joint names contained an express declaration of trust that the parties were to hold the proceeds of sale of the property on trust for themselves as joint tenants, then on severance of the tenancy, a tenancy in common in equal shares was created. Furthermore, the doctrine of resulting implied or constructive trusts could not be invoked where there was an express declaration which comprehensively declared what were the beneficial interests in the property or its proceeds of sale since such a declaration was exhaustive and conclusive of the position unless and until the conveyance was set aside or rectified. D was therefore entitled to a half share of the beneficial interest in the property (Wilson v Wilson (Matrimonial Home) [1963] 1 W.L.R. 601, dicta of Lord Upjohn in Pettitt v Pettitt [1969] C.L.Y. 1639, [1969] 2 All E.R. at 405 ; of Lord Diplock in Gissing v Gissing [1970] C.L.Y. 1243, [1970] 2 All E.R. at 789 ; Leake (formerly Bruzzi) v Bruzzi [1974] 1 W.L.R. 1528 and Pink v Lawrence (1978) 36 P. &amp; C.R. 98 followed. Dictum of Lord Denning M.R. in Bedson v Bedson [1965] 2 Q.B. 666 disapproved)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1986] Fam 106",
    "JUDGE": "Slade LJ; Purchas LJ; Sir Roualeyn Cumming-Bruce",
    "TYPE": "Case",
    "CATEGORIES": [
        "Trusts",
        "Beneficiaries",
        "Joint Tenancies",
        "Severance",
        "Trusts For Sale"
    ]
},
{
    "CATEGORY": "Family Law - Matrimonial Home - Sale of Land",
    "COURT": "UKHL",
    "NAME": "Pettitt v Pettitt",
    "YEAR": "1970",
    "CITATION": "Pettitt v Pettitt [1970] AC 777",
    "NUMBER": "25",
    "RELATED": [
        "Gissing v Gissing",
        "Cuckmere Brick Co v Mutual Finance",
        "Groveholt Ltd v Hughes",
        "Corbett v Halifax",
        "Clarke v Corless",
        "Bedson v Bedson",
        "In re Pavlou",
        "Grant v Edwards",
        "Palk v Mortgage Services",
        "Binions v Evans",
        "Kinch v Bullard",
        "Harris v Goddard"
    ],
    "SUMMARY": [
        "Matrimonial home; husband&#8217;s work on wife&#8217;s house",
        "The Married Women&#8217;s Property Act 1882 s.17 is purely procedural; it does not confer on the court an unfettered discretion to override existing rights in property, or to apply any notion of family assets not to be found in English law in determining disputes as to title or possession after a marriage has broken down. Such issues involve questions of social policy which should be dealt with by Parliament. The legal title to H and W&#8217;s former matrimonial home was in W alone. H had not paid any money towards its purchase but he had redecorated and improved the home, thus enhancing its value. Following a divorce H issued proceedings under s.17 claiming an interest in the proceeds of sale of the home."
    ],
    "HELD": [
        "allowing W&#8217;s appeal, (1) that s.17 was merely procedural, and (2) that in the absence of any agreement or estoppel to the contrary W was absolutely entitled to the home or the proceeds of its sale. ( Appleton v Appleton [1965] 1 W.L.R. 25 overruled)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1970] AC 777",
    "JUDGE": "Lord Reid; Lord Morris of Borth-y-Gest; Lord Hodson; Lord Upjohn; Lord Diplock",
    "TYPE": "Case",
    "CATEGORIES": [
        "Family Law",
        "Matrimonial Home",
        "Sale of Land"
    ]
},
{
    "CATEGORY": "Family Law - Beneficial Interests - Entitlement - Intention - Matrimonial Home - Spouses",
    "COURT": "UKHL",
    "NAME": "Gissing v Gissing",
    "YEAR": "1971",
    "CITATION": "Gissing v Gissing [1971] AC 886",
    "NUMBER": "26",
    "RELATED": [
        "Jones v Kernott",
        "Grant v Edwards",
        "Pettitt v Pettitt",
        "Stack v Dowden",
        "Geary v Rankine",
        "In re Pavlou",
        "Harris v Goddard",
        "Barca v Mears",
        "Kinch v Bullard",
        "Laskar v Laskar",
        "Sava v SS Global Ltd",
        "State Bank of India v Sood"
    ],
    "SUMMARY": [
        "Matrimonial home; wife&#8217;s interest; joint venture",
        "Where the matrimonial home was conveyed into the name of one spouse only and there was no agreement or understanding or expression of intention that the other spouse, though she had contributed, should have a beneficial interest therein, the law of trust would apply to resolve the entitlement of each spouse. The respondent made no direct contribution towards the purchase of the matrimonial home. She, however, spent her own money on furniture, improvement of the lawn and the family&#8217;s clothes. The parties got married in 1935, purchased the house in 1951 and the respondent obtained a decree absolute in 1966."
    ],
    "HELD": [
        "that it was not possible to draw an inference that there was any common intention that the respondent should have any beneficial interest in the matrimonial home. (Decision of Court of Appeal [1969] C.L.Y. 1646 reversed; Bishop, Re [1965] Ch. 450 considered, Chapman v Chapman [1969] 1 W.L.R. 1367 considered, Fribance v Fribance (No.1) [1956] P. 99 considered, Nixon v Nixon [1969] 1 W.L.R. 1676 considered, Pettitt v Pettitt [1970] A.C. 777 considered and Ulrich v Ulrich and Felton [1968] 1 W.L.R. 180 considered)."
    ],
    "FLAGS": [
        "Criticised"
    ],
    "CIT": "[1971] AC 886",
    "JUDGE": "Lord Reid; Lord Morris of Borth-y-Gest; Viscount Dilhorne; Lord Pearson; Lord Diplock",
    "TYPE": "Case",
    "CATEGORIES": [
        "Family Law",
        "Beneficial Interests",
        "Entitlement",
        "Intention",
        "Matrimonial Home",
        "Spouses"
    ]
},
{
    "CATEGORY": "Trusts - Beneficial Interests - Cohabitation - Constructive Trusts - Matrimonial Home",
    "COURT": "EWCA",
    "NAME": "Grant v Edwards",
    "YEAR": "1986",
    "CITATION": "Grant v Edwards [1986] Ch 638",
    "NUMBER": "27",
    "RELATED": [
        "Jones v Kernott",
        "Gissing v Gissing",
        "Kinch v Bullard",
        "Groveholt Ltd v Hughes",
        "Lyus v Prowsa Developments",
        "Whittaker v Kinnear",
        "Harris v Goddard",
        "Jones v Challenger",
        "In re Pavlou",
        "Barca v Mears",
        "Stack v Dowden",
        "Pettitt v Pettitt"
    ],
    "SUMMARY": [
        "Constructive trust; unmarried couple; property in man&#8217;s name; woman&#8217;s indirect contributions to household; whether beneficial interest",
        "Indirect contributions to the purchase price of a house by substantial contributions towards the housekeeping and to the bringing up of children are sufficient to create a beneficial interest in favour of the woman where the property is in the name of the man and a common intention that she should have such an interest exists. P and D commenced a casual relationship in 1967. In July 1969 P gave birth to a child of which D was the father. They decided to live together and in December 1969 a house was purchased. The house was conveyed into the names of D and his brother. D told P her name was not going onto the title because it would prejudice pending matrimonial proceedings between P and her husband. GBP 1,043 of the purchase price of GBP 5,490 was paid in cash by D. The remainder was raised by means of two mortgages. The mortgage repayments were made by D. After they moved into the house P paid D GBP 6 per week. A second child was born on 13 July 1971. In addition there were two children from P&#8217;s earlier marriage. From 1972 to 1980 when the relationship broke up P earned similar sums to D out of which she made very substantial contributions to the housekeeping and to the feeding and bringing up of the children. In September 1975 a sum of GBP 1,037 was paid into a building society account in their joint names. The sum represented the balance of insurance moneys paid out for repairs to the house after a fire. P claimed a beneficial interest in the house. The trial judge rejected her claim."
    ],
    "HELD": [
        "allowing P&#8217;s appeal, that the court would find a constructive trust giving P a beneficial interest if P was able to establish a common intention between her and D and acted on by her that she should have a beneficial interest in the property. In acting to her detriment the conduct required of P was conduct that she could not reasonably be expected to embark upon unless she was to have an interest in the house. In the present case the common intention of the parties that P was to have a beneficial interest in the house was established by the excuse given by D to P for not putting her name on the title of the house; such an excuse could only have been necessary if it was intended that P should have an interest in the house. It could properly be inferred that P made substantial contributions to the mortgage payments by her contributions towards the housekeeping given that the parties had barely sufficient money when they were both earning similar sums of money. P could not reasonably have been expected to give D such substantial assistance in making the mortgage payments unless she was to have an interest in the house. Accordingly P acted to her detriment on the faith of the common intention of the parties that she should have an interest in the house. P was entitled to a half interest in the house. Mustill L.J. set out a summary of the relevant propositions of law to be applied in such cases (Pettitt v Pettitt [1970] A.C. 777, Gissing v Gissing [1971] A.C. 886, Eves v Eves [1975] 1 W.L.R. 1338, Midland Bank Plc v Dobson [1986] 1 F.L.R. 171 considered)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1986] Ch 638",
    "JUDGE": "Sir Nicolas Browne-Wilkinson VC; Mustill LJ; Nourse LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Trusts",
        "Beneficial Interests",
        "Cohabitation",
        "Constructive Trusts",
        "Matrimonial Home"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Family Law - Beneficial Interests - Co-Ownership - Family Home - Intention - Joint Tenancies - Land Registers - Relationship Breakdown - Resulting Trusts - Unmarried Couples",
    "COUNSEL": "For the appellant: Lucy Theis QC, Francis Wilkinson, Miriam Shalom. For the respondent: Christopher Lundie, Emily Saunderson.",
    "COURT": "UKHL",
    "NAME": "Stack v Dowden",
    "YEAR": "2007",
    "CITATION": "Stack v Dowden [2007] UKHL 17",
    "NUMBER": "28",
    "RELATED": [
        "Jones v Kernott",
        "Laskar v Laskar",
        "Gissing v Gissing",
        "McDowall v Hirschfield Lipson",
        "Burgess v Rawnsley",
        "Kinch v Bullard",
        "Harris v Goddard",
        "KS Victoria Street v House of Fraser",
        "Davis v Smith",
        "Quigley v Masterson",
        "Goodman v Gallant",
        "Barca v Mears"
    ],
    "SUMMARY": [
        "Where a property was conveyed into the joint names of a cohabiting couple without any explicit declaration of their respective beneficial interests, the starting point where the property had to be divided upon the breakdown of the relationship was that where there was joint legal ownership, there was also joint beneficial ownership. The onus was upon the person seeking to show that the parties intended their beneficial interests to be different from their legal interests and in what way.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant (S) appealed against an order ( [2005] EWCA Civ 857, (2006) 1 F.L.R. 254 ) specifying the division of the net proceeds of sale of the home he had shared with his former partner (D) and their children.",
        "D and S had purchased the house in their joint names using the then current land registry form, which contained no declaration of trust but contained a declaration that the survivor could give a good receipt for capital money arising from a disposition of the property. The purchase was funded by the sale of their previous property, which had been in D&#8217;s sole name, plus savings in D&#8217;s name, and a mortgage held in both names. S paid the mortgage interest and endowment policy premiums, while together they paid off the capital, with D contributing a greater proportion. When they bought the house, D and S had been cohabiting for 18 years and had four children. Nearly all aspects of their respective finances had been kept separate. Nine years after purchasing the house, their relationship broke down and they agreed a court order that excluded S from the house and required D to pay S for the cost of his alternative accommodation. S then successfully sought a declaration that the house was held upon trust by the couple as tenants in common in equal shares and an order for its sale. D appealed and the Court of Appeal ordered that the net proceeds be divided 65 per cent to her and 35 per cent to S on the basis that the declaration as to the receipt for capital money in the transfer document could not be taken as an express declaration of trust, nor could it infer an intention that the beneficial ownership be equal, because there was no evidence that either of them had understood the declaration to carry such significance. The issues were whether a conveyance into joint names established a prima facie case of joint and equal beneficial interests and whether the Court of Appeal had been correct to overrule the judge&#8217;s order that D compensate S for the cost of his accommodation."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(Lord Neuberger dissenting on the issue of accommodation payments) (1) The starting point where there was joint legal ownership was joint beneficial ownership. The onus was upon the person seeking to show that the parties intended their beneficial interests to be different from their legal interests and in what way. Context was everything, and each case would turn on its own facts. Many more factors than financial contributions could be relevant to intention, and the court gave a non-exhaustive list. Cases in which the joint legal owners were to be taken to have intended that their beneficial interests should be different from their legal interests would be very unusual. Accordingly, it was for D to show that the common intention when they bought the house was that she and S should hold the property otherwise than as joint beneficial tenants, and there were, on the evidence, many factors for her to rely on. The fact that she and S had lived together for such a long time and had children together, yet had kept their affairs rigidly separate, was strongly indicative that they did not intend their shares, even in the property that was put into their joint names, to be equal, and she had made good her case for a higher share, Pettitt v Pettitt [1970] A.C. 777 considered, Oxley v Hiscock [2004] EWCA Civ 546, [2005] Fam. 211 applied and Walker v Hall [1984] Fam. Law 21 , Springette v Defoe [1992] 2 F.L.R. 388 and Huntingford v Hobbs [1993] 1 F.L.R. 736 doubted. (2) In determining the issue of payments from D to S for his alternative accommodation, the criteria laid down in the Trusts of Land and Appointment of Trustees Act 1996 were to be applied in preference to cases pre-dating that regime. The judge at first instance had erred in failing to apply those criteria and the Court of Appeal had been correct to quash his order in this respect. (3) (Per Lord Neuberger) Although the judge&#8217;s reason for ordering D to pay S&#8217;s accommodation costs had been weak, partly because he had not been referred to the 1996 Act, a proper exercise of the court&#8217;s power under s.14 of the Act would, in the circumstances, have been to order the compensation at the level the parties had originally agreed."
    ],
    "FLAGS": [
        "Approved",
        "Hale",
        "Neuberger"
    ],
    "CIT": "[2007] UKHL 17",
    "JUDGE": "Lord Hoffmann; Lord Hope of Craighead; Lord Walker of Gestingthorpe; Baroness Hale of Richmond; Lord Neuberger of Abbotsbury",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Family Law",
        "Beneficial Interests",
        "Co-Ownership",
        "Family Home",
        "Intention",
        "Joint Tenancies",
        "Land Registers",
        "Relationship Breakdown",
        "Resulting Trusts",
        "Unmarried Couples"
    ]
},
{
    "CATEGORY": "Family Law Other Related Subjects: Civil Procedure - Financial Provision - Periodical Payments",
    "COURT": "EWCA",
    "NAME": "Abbott v Abbott",
    "CITATION": "Abbott v Abbott Official Transcript",
    "NUMBER": "29",
    "RELATED": [
        "Newlon Housing Trust v Alsulaimen",
        "Patel v Pirabakaran",
        "Shaw v Applegate",
        "Hounslow LBC v Powell",
        "Batchelor v Marlow",
        "Pettitt v Pettitt",
        "Harrow LBC v Qazi",
        "Gardner",
        "Crago v Julian",
        "Stack v Dowden",
        "Errington v Errington",
        "Walker v Burton"
    ],
    "SUMMARY": [
        "Divorce and Matrimonial Causes; financial provision; periodical payments",
        "Marriage in October 1974 when wife (married twice before) was aged 50 and husband, a widower, was aged 48 - marriage lasted three months, husband leaving wife early in 1975 - each party had a house which was retained, the wife remaining in hers - decree nisi in March 1980 on wife&#8217;s undefended petition (filed in October 1979) alleging desertion - whether, inter alia, &#8220;clean break&#8221; case - registrar ordered husband to pay periodical payments of GBP 35 a month to wife - wife&#8217;s appeal against order of judge who had allowed husband&#8217;s appeal from order of registrar allowed - registrar&#8217;s order reinstated. March 19, 1981."
    ],
    "CIT": "Official Transcript",
    "TYPE": "Case",
    "CATEGORIES": [
        "Family Law Other Related Subjects: Civil Procedure",
        "Financial Provision",
        "Periodical Payments"
    ]
},
{
    "CATEGORY": "Real Property - Beneficial Interests - Beneficial Ownership - Contributions - Joint Tenancies - Joint Tenants - Mortgages - Resulting Trusts",
    "COUNSEL": "For the appellant: Simeon Thrower (Public Access barrister), Andrew Veen (Public Access barrister). For the respondent: Richard Colbey (Public Access barrister).",
    "COURT": "EWCA",
    "NAME": "Laskar v Laskar",
    "YEAR": "2008",
    "CITATION": "Laskar v Laskar [2008] EWCA Civ 347",
    "NUMBER": "30",
    "RELATED": [
        "Stack v Dowden",
        "State Bank of India v Sood",
        "McDowall v Hirschfield Lipson",
        "Harris v Goddard",
        "Quigley v Masterson",
        "Davis v Smith",
        "Burgess v Rawnsley",
        "Jones v Kernott",
        "Williams v Williams",
        "Batchelor v Marlow",
        "Sava v SS Global Ltd",
        "Harrow LBC v Qazi"
    ],
    "SUMMARY": [
        "The purchase of a property as an investment by a mother and daughter did not give rise to a presumption of joint ownership, but where both parties were jointly liable under the mortgage it was correct to treat the value of the mortgage as representing equal contributions to the purchase price for the purpose of calculating beneficial interest.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant daughter (R) appealed against a decision that she was not entitled to the equal beneficial ownership of a property purchased by her mother (Z).",
        "Z and her husband had been tenants of the relevant property since before R had been born. The landlord was the local council. Later, the property was transferred into Z&#8217;s sole name and she pursued an application under the Housing Act 1985 s.118 to buy the property outright as an investment. Z&#8217;s application was successful and the property was offered to her for a value that, pursuant to s.129 of the Act, was significantly discounted. Z was unable to raise all the funds necessary to purchase the property and in order to secure a mortgage, she transferred the property into joint names, namely hers and R&#8217;s. On that basis the mortgage was granted, and both R and Z became jointly liable under it. R also provided a small amount of money of her own to help with the purchase. Having raised sufficient funds, Z completed the purchase of the property. Later, both R and Z moved out of the property and began renting it out. At all times, Z was solely responsible for the property, and for the mortgage repayments, which were funded by money drawn from the rent on the property. Subsequently, the familial relationship broke down and R instituted proceedings to have her equal beneficial interest in the property recognised.SUMMARY R submitted that (1) there was a presumption at law that the beneficial interest mirrored the legal interest, so that joint tenants were entitled to equal proportions of the beneficial interest. Since R had been named as the joint tenant of the property she was entitled to equal beneficial ownership; (2) even if the presumption of joint ownership was rebutted, the judge should not have concluded that the discount awarded to Z under s.129 of the Act was Z&#8217;s contribution alone. R was entitled to an equal share of that contribution since she had, along with Z, lived in the property for a significant period of time; (3) since R was jointly liable with Z upon the mortgage, the judge should have considered that the mortgage monies were a joint contribution to the purchase price and not Z&#8217;s alone."
    ],
    "HELD": [
        "Appeal allowed in part.",
        "(1) Where the property in question was purchased as an investment it would not be appropriate to apply the presumption of joint ownership. This was so, despite the nature of the familial relationship between the parties, Stack v Dowden [2007] UKHL 17, [2007] 2 A.C. 432 distinguished. In the instant case, the purchase of the property was nothing more than a business venture. Both parties led separate and distinct lives and maintained separate and distinct finances. It was clear that R had been brought into the transaction on the basis that it had been necessary to name her as a joint tenant in order to raise the requisite finances on the property. Despite its familial appearance, the relationship was one between investors, and the presumption of joint ownership did not apply in such circumstances. Accordingly, there was nothing more than a resulting trust, and each party was entitled to the value of her own contribution. (2) The award of discount under s.129 of the Act had been made to Z on the basis of her long tenancy as sole tenant. R had been named as joint tenant comparatively recently and only as a mechanism to raise finance on the property. Therefore, the beneficial interest would not follow the legal interest and the judge had been correct to treat the discount as a contribution solely made by Z, Springette v Defoe [1992] 2 F.L.R. 388, Evans (formerly Newton) v Hayward [1992] N.P.C. 85, and Ashe (Trustee in Bankruptcy of Henry Samuel Mumford) v Mumford (No.2) [2001] B.P.I.R. 1, applied. (3) By virtue of the fact that both R and Z were jointly liable under the mortgage, it was correct to treat the mortgage as representing equal contributions to the purchase price. That was especially the case where mortgage repayments were funded by the rent on the property and not by the personal finances of the parties. Accordingly, on the basis of her contributions, R&#8217;s beneficial interest in the property was raised appropriately to represent the uplift created by her mortgage contribution.",
        ""
    ],
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "CIT": "[2008] EWCA Civ 347",
    "JUDGE": "Lord Neuberger of Abbotsbury; Tuckey LJ; Rimer LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Beneficial Interests",
        "Beneficial Ownership",
        "Contributions",
        "Joint Tenancies",
        "Joint Tenants",
        "Mortgages",
        "Resulting Trusts"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Trusts - Family Law - Beneficial Interests - Cohabitation - Constructive Trusts - Contributions - Co-Ownership - Intention - Unmarried Couples",
    "COUNSEL": "For the appellant: Richard Power. For the respondent: Andrew Bailey.",
    "COURT": "UKSC",
    "NAME": "Jones v Kernott",
    "YEAR": "2011",
    "CITATION": "Jones v Kernott [2011] UKSC 53",
    "NUMBER": "31",
    "RELATED": [
        "Stack v Dowden",
        "Grant v Edwards",
        "Gissing v Gissing",
        "Clarke v Corless",
        "Laskar v Laskar",
        "Geary v Rankine",
        "Barclay v Barclay",
        "Herbert v Doyle",
        "Stafford v Lee",
        "Williams v Williams",
        "Barca v Mears",
        "Lyus v Prowsa Developments"
    ],
    "SUMMARY": [
        "In line with the decision in Stack v Dowden [2007] UKHL 17, [2007] 2 A.C. 432, where a property was bought in the joint names of a cohabiting couple, who were both responsible for any mortgage, but without any express declaration of their beneficial interests, the presumption that the beneficial interests coincided with the legal estate could be rebutted by evidence of a contrary intention. Where that evidence did not show what shares were intended, it was for the court to decide what shares were either intended or fair.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant (J) appealed against a decision ([2010] EWCA Civ 578) declaring that the property co-owned by her and the respondent (K) was held by them as tenants in common in equal shares.",
        "The parties bought the property in joint names in 1985, with the benefit of a mortgage in their joint names. They lived there together, sharing the household expenses, for over eight years, and K moved out of the property in 1993. Thereafter, J remained in the property with their two children, and paid all the household expenses herself. K made no further contribution towards the acquisition of the property. That situation continued for over 14 years, when the property was put up for sale. K commenced proceedings in the county court claiming a declaration under the Trusts of Land and Appointment of Trustees Act 1996 s.14. A declaration was made that the beneficial interest was split 90 per cent to 10 per cent in favour of J, and that decision was upheld on appeal. The Court of Appeal allowed K&#8217;s appeal."
    ],
    "HELD": [
        "Appeal allowed.",
        "In line with the decision in Stack v Dowden [2007] UKHL 17, [2007] 2 A.C. 432, where a property was purchased in the joint names of a married or unmarried couple for joint occupation, who were both responsible for any mortgage, and where there was no express declaration of their beneficial interests, there was a presumption that the beneficial interests coincided with the legal estate. That presumption could be rebutted by evidence of a contrary intention, which might more readily be shown where the parties had contributed to the acquisition of the property in unequal shares, but each case would turn on its own facts. It was for the court to ascertain the parties&#8217; common intention as to what their shares in the property would be, in the light of their whole course of conduct in relation to it, Gissing v Gissing [1971] A.C. 886 and Oxley v Hiscock [2004] EWCA Civ 546, [2005] Fam. 211 applied, Stack followed (see paras 10-15, 25, 51 of judgment). Any challenge to the presumption was not to be lightly embarked on, since a decision to buy a property in joint names indicated an emotional and economic commitment to a joint enterprise, and the notion that in a trusting personal relationship the parties did not hold each other to account financially, was underpinned by the practical difficulty of taking any such account after years of living together (paras 19-22). The search was primarily to ascertain the parties&#8217; actual shared intentions, whether expressed or to be inferred from their conduct. However, where it was clear that the beneficial interests were to be shared, but it was impossible to divine a common intention as to the proportions in which they were to be shared, it was for the court to impute an intention to the parties which they might never have had. The court could not impose a solution on them which was contrary to what the evidence showed that they actually intended (paras 31, 46-47). Where a family home was put into the name of one party only, the starting point was different, and the first issue was whether it was intended that the other party should have any beneficial interest at all: there was no presumption of joint beneficial ownership, but their common intention had again to be deduced from their conduct (para.52). In the instant case there was no need to impute an intention that the parties&#8217; beneficial interests would change, as the judge had made a finding that their intention did in fact change, and that was an intention which he both could have and should have inferred from their conduct. The calculation of their shares by the instant court produced a result so close to that produced by the judge that it would be wrong for the instant court to interfere (paras 48-49)."
    ],
    "FLAGS": [
        "Approved",
        "Hale"
    ],
    "CIT": "[2011] UKSC 53",
    "JUDGE": "Lord Walker JSC; Lady Hale JSC; Lord Collins JSC; Lord Kerr JSC; Lord Wilson JSC",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Trusts",
        "Family Law",
        "Beneficial Interests",
        "Cohabitation",
        "Constructive Trusts",
        "Contributions",
        "Co-Ownership",
        "Intention",
        "Unmarried Couples"
    ]
},
{
    "CATEGORY": "Partnerships Other Related Subjects: Trusts - Conduct - Constructive Trusts - Intention - Partnership Formation - Partnerships at Will",
    "COUNSEL": "For the appellant: Donald Broatch. For the respondent: In person.",
    "COURT": "EWCA",
    "NAME": "Geary v Rankine",
    "YEAR": "2012",
    "CITATION": "Geary v Rankine [2012] EWCA Civ 555",
    "NUMBER": "32",
    "RELATED": [
        "Clarke v Corless",
        "Jones v Kernott",
        "Herbert v Doyle",
        "Groveholt Ltd v Hughes",
        "McDowall v Hirschfield Lipson",
        "Grant v Edwards",
        "Wilkinson v Kerdene",
        "Stack v Dowden",
        "Gissing v Gissing",
        "Whittaker v Kinnear",
        "Sava v SS Global Ltd",
        "Lyus v Prowsa Developments"
    ],
    "SUMMARY": [
        "A judge had not erred in holding that two individuals in a family partnership who ran a guest house had not been in a business partnership, and that there had not been a common intention that the appellant would have a beneficial interest in the guest house property.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant (G) appealed against the decision that she was not entitled to a share of a guest house titled to the respondent (R), with whom she had been in a 19-year relationship.",
        "G and R had been in a relationship from 1990 to 2009. In 1996, R purchased a guest house with his own savings. At the time of the purchase the parties had not intended to live in the property or run it themselves; rather, the guest house would be run by a manager. Due to difficulties with the manager, however, R began to run the business himself. When he realised that he could not run it alone, G also became involved with the business, cleaning, cooking, looking after guests, and doing paperwork. R did not pay G wages. When she needed money she had to ask R for it. After the parties&#8217; relationship deteriorated, G brought a county court claim for an interest in the guest house based on either a business partnership or a constructive trust. The judge rejected her claim."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) As G challenged the judge&#8217;s reasoning, it was necessary to look at some of the evidence that had been before him on the question of partnership. G had worked in the business to a greater extent than R had admitted and had not been paid wages; those facts pointed to a partnership. The remainder of the evidence, however, weighed against a partnership: the business&#8217;s accounts listed R as a sole trader, the accounts showed no evidence of sharing of profits, the net profits from the business went to R, all drawings on the accounts were made by R, G had not been held out as a partner, there had not been a joint bank account, and G always had to ask R when she needed money. Moreover, the business carried on while G and R were separated; had there been a partnership it would have been at will, and it would have been dissolved when G left. Finally, D had told G that the business should remain solely in his name so that G would be shielded from liability in the event of bankruptcy; that was a strong pointer against inferring partnership. There had thus been ample evidence to support the judge&#8217;s conclusion that there was no business partnership. Even if there had been a partnership, it would not follow that the property was partnership property. A partnership in profits did not indicate that the asset itself was partnership property. One partner might solely own property that the partnership used in its business; in the instant case the property had been acquired with R&#8217;s own money before the partnership could have arisen (see paras 11-16 of judgment). (2) As the property was titled solely in R&#8217;s name, G had the burden of establishing a constructive trust. The relevant question was whether there had been a common intention that G would have a beneficial interest in the property, Jones v Kernott [2011] UKSC 53, [2012] 1 A.C. 776 applied. The common intention had to be determined objectively from the parties&#8217; conduct. Although G had presented evidence that the parties had had a common intention to run the business together, it was an impermissible leap to reach a conclusion of a common intention that the property in which the business had been run, which had been bought by only one of them, would now belong to both of them. G therefore had failed to show that the judge had been wrong in concluding that there had not been a constructive trust (paras 18-19, 22-24)."
    ],
    "CIT": "[2012] EWCA Civ 555",
    "JUDGE": "Thorpe LJ; Etherton LJ; Lewison LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Partnerships Other Related Subjects: Trusts",
        "Conduct",
        "Constructive Trusts",
        "Intention",
        "Partnership Formation",
        "Partnerships at Will"
    ]
},
{
    "CATEGORY": "Personal Injury - Children - Criminal Injuries Compensation - Measure of Damages - Post-Traumatic Stress Disorder",
    "COURT": "EWHC",
    "NAME": "Gardner",
    "YEAR": "1998",
    "CITATION": "Gardner [1998] CLY 1529",
    "NUMBER": "33",
    "RELATED": [
        "Williams v Williams",
        "Nickerson v Barraclough",
        "Laskar v Laskar",
        "Shaw v Applegate",
        "Lees",
        "Walker v Burton",
        "Re King",
        "Jones v Kernott",
        "Barclay v Barclay",
        "AG Securities v Vaughan",
        "Stafford v Lee",
        "Facchini v Bryson"
    ],
    "SUMMARY": [
        "personal injuries or death; quantum; post traumatic stress",
        "G, infant male aged four, was with his mother when they witnessed an attack on his father by a man with a butcher&#8217;s knife. The father&#8217;s small intestine prolapsed through the abdomen and the mother intervened and was wounded herself. G suffered no physical injuries, but developed post traumatic stress disorder with symptoms of insomnia, separation anxiety at bedtime, traumatic re-experiencing of the event, hypervigilance, preoccupation with knives and acute concern relating to meeting the attacker again. His general behaviour, which had previously been good, became poor. Although his acute symptoms had resolved by the date of assessment and the prognosis, viewing G in isolation, was good, the persistent severe symptoms suffered by his father had delayed G&#8217;s recovery with significant impairment in academic development and behavioural problems at school leading to the involvement of an educational psychologist. There was a serious psychiatric injury and the consequences were likely to persist indefinitely. General Damages: GBP 17,500."
    ],
    "CIT": "[1998] CLY 1529",
    "JUDGE": "Board members not specified",
    "TYPE": "Case",
    "CATEGORIES": [
        "Personal Injury",
        "Children",
        "Criminal Injuries Compensation",
        "Measure of Damages",
        "Post-Traumatic Stress Disorder"
    ]
},
{
    "CATEGORY": "Insolvency Other Related Subjects: Real Property - Human Rights - Bankruptcy - Beneficial Interests - Creditors - Possession Orders - Right to Respect For Private and Family Life - Special Educational Needs",
    "COUNSEL": "For the respondent: Andrew Westwood, Michael Gibbons. For the appellant: In person.",
    "COURT": "EWHC",
    "NAME": "Barca v Mears",
    "YEAR": "2004",
    "CITATION": "Barca v Mears [2004] EWHC 2170 (Ch)",
    "NUMBER": "34",
    "RELATED": [
        "Malik v Fassenfelt",
        "Gissing v Gissing",
        "Laskar v Laskar",
        "Jones v Kernott",
        "Stack v Dowden",
        "Hounslow LBC v Powell",
        "State Bank of India v Sood",
        "Coventry v Lawrence",
        "Grant v Edwards",
        "In re Pavlou",
        "Kinch v Bullard",
        "Stafford v Lee"
    ],
    "SUMMARY": [
        "A shift in emphasis in the interpretation of the Insolvency Act 1986 s.335A, s.336 and s.337 might be necessary to achieve compatibility with a bankrupt&#8217;s rights under the European Convention on Human Rights 1950 in that those sections ought to be regarded as recognising that, in the general run of cases, the creditors&#8217; interests would outweigh all other interests, but leaving it open to a court to find that, on a proper consideration of the facts of a particular case, it was one of the exceptional cases in which that proposition was not true.",
        "The appellant bankrupt (B) appealed against an order that he give vacant possession of his property, that the property should be sold and the net proceeds of sale held until determination of the beneficial interests in it. B was declared bankrupt and the respondent (T) was appointed trustee in bankruptcy. T applied for a declaration for an absolute beneficial interest in the property and for an order for possession and sale. B asserted that his former partner (C) had a beneficial interest in the property and that their son (S) lived with B in the property most days per week. B alleged that S had special educational needs that were helped by living with B in the property. The deputy registrar was not prepared to proceed with the application as to the beneficial interests in the property but proceeded with the application for possession and sale of the property, notwithstanding C&#8217;s claim. The main issue between the parties was whether the court should make an order for sale pursuant to the Trusts of Land and Appointment of Trustees Act 1996 s.14 and the Insolvency Act 1986 s.335A. The deputy registrar heard argument from both sides as to whether there were exceptional circumstances under s.335A of the 1986 Act and ordered B to give vacant possession of the property. B resisted an order for possession and sale of the property on the basis that (1) such an order would disrupt the education of S and that if B was rendered homeless S&#8217;s progress would be severely curtailed. Therefore the hardship which would be caused to S by an order for possession and sale constituted &#8220;exceptional circumstances&#8221; under s.335A of the 1986 Act; and (2) the order had failed to take into account his or S&#8217;s rights under the Human Rights Act 1998 Sch.1 Part I Art.8."
    ],
    "HELD": [
        "dismissing the appeal, that (1) s.335A of the 1986 Act, which applied if C had an equitable interest in the property, gave statutory effect to the previous case law relating to the interests of a bankrupt&#8217;s creditors, which was reviewed in Citro (Domenico) (A Bankrupt), Re [1991] Ch. 142, in which it was found that in a case in which both the bankrupt and his spouse had a beneficial interest in the matrimonial home, the creditors&#8217; interest in achieving a sale of the property within a short period would usually prevail over the interests of the spouse unless exceptional circumstances were shown. In almost all of the reported decisions the interests of the creditors had prevailed, Holliday (A Bankrupt), Re [1981] Ch. 405 distinguished. The view taken by the deputy registrar could not be faulted on the basis that the law was as stated in Citro . S&#8217;s problems could not be said to be extreme and further, unlike Citro , the instant case was not one in which there would be any question of S having to leave his present school. (2) The state had to have regard to the fair balance that had to be struck between the general interest of the community and the interests of the individual, Cossey v United Kingdom (10843/84) [1991] 2 F.L.R. 492 applied. It was questionable whether the narrow approach as to what might be &#8220;exceptional circumstances&#8221; adopted in Citro was consistent with the European Convention on Human Rights 1950. In particular, it might be incompatible with Convention rights to follow the approach taken by the majority in Citro , in drawing a distinction between what was exceptional, in the sense of being unusual, and what Nourse, L.J. referred to in Citro as the &#8220;usual melancholy consequences&#8221; of a bankruptcy. A shift in emphasis in the interpretation of the statute might be necessary to achieve compatibility with the Convention. Thus it might be that, on a reconsideration of s.335A, or the corresponding wording in s.336 and s.337, those sections were to be regarded as recognising that, in the general run of cases, the creditors&#8217; interests would outweigh all other interests, but leaving it open to a court to find that, on a proper consideration of the facts of a particular case, it was one of the exceptional cases in which that proposition was not true. So interpreted, and without the possibly undue bias in favour of the creditors&#8217; property interests embodied in the pre 1998 case law, those sections would be compatible with the Convention. However, on the facts of the instant case, the decision of the deputy registrar should be upheld as the prejudice to the creditors would be substantial, S&#8217;s educational problems were not severe and it was unclear if B&#8217;s ability to help S would be impaired and if so to what extent."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2004] EWHC 2170 (Ch)",
    "JUDGE": "Nicholas Strauss QC",
    "TYPE": "Case",
    "CATEGORIES": [
        "Insolvency Other Related Subjects: Real Property",
        "Human Rights",
        "Bankruptcy",
        "Beneficial Interests",
        "Creditors",
        "Possession Orders",
        "Right to Respect For Private and Family Life",
        "Special Educational Needs"
    ]
},
{
    "CATEGORY": "Trusts - Trustees' Powers and Duties - Trusts For Sale",
    "COURT": "EWCA",
    "NAME": "Jones v Challenger",
    "YEAR": "1961",
    "CITATION": "Jones v Challenger [1961] 1 QB 176",
    "NUMBER": "35",
    "RELATED": [
        "Goodman v Gallant",
        "Kinch v Bullard",
        "Rhone v Stephens",
        "State Bank of India v Sood",
        "Barclay v Barclay",
        "Grant v Edwards",
        "Bridle v Ruby",
        "Newlon Housing Trust v Alsulaimen",
        "Gissing v Gissing",
        "Wong v Beaumont Property Trust",
        "Crago v Julian",
        "Gardner"
    ],
    "SUMMARY": [
        "Trustee; power to postpone sale",
        "One of two trustees for sale can insist on the execution of the trust for sale if that will not defeat the purpose of the trust and he is a person whose voice should be allowed to prevail. A husband and wife held the lease of the matrimonial home as joint tenants upon trust for sale and upon trust for themselves as tenants in common in equal shares. They were divorced and the wife remarried and the husband lived on in the house. The wife applied under the Law of Property Act 1925 s.30 , for an order for sale of the house."
    ],
    "HELD": [
        "such an order should be made as the house was no longer needed as a matrimonial home and the wife should be allowed to realise her half of the investment. ( Mayo, Re [1943] Ch. 302 applied; Buchanan-Wollaston&#8217;s Conveyance, Re [1939] Ch. 738 distinguished; Stevens v. Hutchinson [1953] C.L.Y. 2804 distinguished; and Bull v Bull [1955] 1 Q.B. 234 distinguished).Per Devlin L.J.: &#8220;The question of sale can be dealt with somewhat differently under the Married Women&#8217;s Property Act 1882 s.17 , the marriage still being alive. If the court thinks it proper to give one party or the other the right to reside in the house after the marriage is over, it is not then necessarily interfering with the equal division of property held in equal shares. If there is other property to be divided, an overall equality may be reached; or if there is not, the necessary adjustment may be made in the settlement of alimony or maintenance&#8221;."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1961] 1 QB 176",
    "JUDGE": "Donovan J; Ormerod LJ; Devlin LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Trusts",
        "Trustees' Powers and Duties",
        "Trusts For Sale"
    ]
},
{
    "CATEGORY": "Family Law - Injunctions - Joint Tenancies - Property Rights - Severance",
    "COURT": "EWCA",
    "NAME": "Bedson v Bedson",
    "YEAR": "1965",
    "CITATION": "Bedson v Bedson [1965] 2 QB 666",
    "NUMBER": "36",
    "RELATED": [
        "Davis v Smith",
        "Quigley v Masterson",
        "Kinch v Bullard",
        "Goodman v Gallant",
        "McDowall v Hirschfield Lipson",
        "Shaw v Applegate",
        "Pettitt v Pettitt",
        "Gissing v Gissing",
        "Harrow LBC v Qazi",
        "Burgess v Rawnsley",
        "Laskar v Laskar",
        "Stack v Dowden"
    ],
    "SUMMARY": [
        "Matrimonial home; joint tenancy",
        "1. Per Lord Denning M.R.: Where husband and wife acquire a property for the joint purposes of a matrimonial home and a business, the court in its equitable jurisdiction will refuse to make an order which would defeat those purposes. 2. Per Lord Denning, M.R.: While the husband is in occupation there can be no severance of the joint tenancy and the wife cannot sell her interest separately. H used almost all his life&#8217;s savings to buy freehold property consisting of a draper&#8217;s shop with living accommodation above, for the purpose of providing a home and means of livelihood for himself, W, his wife, and three children. The property was conveyed into the joint names of H and W as joint tenants. The business accounts accepted by H showed the property as half owned by W, who assisted in the shop for a time. However, in September 1963 W left home, taking the children. A year later she applied to the county court under the Married Women&#8217;s Property Act 1882 s.17 for an order that the property be sold and the proceeds divided between herself and H in equal shares. No matrimonial proceedings had been started. The county court judge assessed at GBP 275 W&#8217;s help in building up the business and ordered that on payment of that sum to her by H she should execute all necessary documents to vest the property in him."
    ],
    "HELD": [
        "allowing W&#8217;s appeal, (1) that she was entitled to a beneficial interest in the freehold property equal to that of H; (2) that the court would not order a sale of the property at this stage; (3) (Russell L.J. dissenting) that H should pay GBP 1 per week to W in respect of her beneficial interest; and (4) (Russell L.J. dissenting) that during H&#8217;s occupation W should be restrained from assigning, pledging or otherwise dealing with her interest, without leave of the court. (National Provincial Bank Ltd v Ainsworth [1965] A.C. 1175 considered, Jones v Challenger [1961] 1 Q.B. 176 considered; Hine v Hine [1962] 1 W.L.R. 1124 considered and Wilson v Wilson (Matrimonial Home) [1963] 1 W.L.R. 601 considered; Rawlings v Rawlings [1964] P. 398 distinguished)."
    ],
    "FLAGS": [
        "Criticised",
        "Denning"
    ],
    "CIT": "[1965] 2 QB 666",
    "JUDGE": "Lord Denning MR; Davies LJ; Russell LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Family Law",
        "Injunctions",
        "Joint Tenancies",
        "Property Rights",
        "Severance"
    ]
},
{
    "CATEGORY": "Negligence Other Related Subjects: Damages - Personal Injury - Road Traffic - Child Restraints - Contributions - Contributory Negligence - Damages - Road Traffic Accidents - Third Parties",
    "COUNSEL": "For the appellant: Graham Eklund QC. For the respondent: Jonathan Watt-Pringle QC.",
    "COURT": "EWCA",
    "NAME": "Williams v Williams",
    "YEAR": "2013",
    "CITATION": "Williams v Williams [2013] EWCA Civ 455",
    "NUMBER": "37",
    "RELATED": [
        "Gardner",
        "Laskar v Laskar",
        "Wall v Collins",
        "Jones v Kernott",
        "Shaw v Applegate",
        "City of London Corp v Fell",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Bridle v Ruby",
        "Boyer v Warbey",
        "Henry v Henry",
        "AG Securities v Vaughan",
        "Grand Junction Co v Bates"
    ],
    "SUMMARY": [
        "A contribution of 25 per cent of the damages by the mother of a child who had been badly injured in a car accident was the appropriate contribution where it was shown that the mother&#8217;s failure to comply with the manufacturer&#8217;s instructions was negligent and had directly contributed to the extent of the child&#8217;s injuries.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant mother (M) appealed against a decision that she had been negligent in using a booster seat to restrain her three year old daughter (C) in the car rather than a five-point harness child seat, and that she should therefore pay a contribution towards the damages awarded against the respondent driver (D).",
        "C, who was the claimant in the damages action, had been badly injured when two cars collided. D was the driver of the other car who caused the accident after consuming alcohol and drugs. Liability to C was admitted but a claim was made under CPR part 20 against M for a contribution. C had met three of the five criteria listed on the booster seat but was just under a year younger and 8cm shorter than the recommended age and height. The judge, having regard to the Civil Liability (Contribution) Act 1978 s.2(1) ordered that M was liable to make a contribution of 25 per cent of the damages payable.SUMMARY M submitted that (1) the judge gave too much weight to the manufacturers&#8217; instructions and the totality of factors should have led him to reject the allegation that M was negligent particularly as C satisfied the weight requirement for the booster seat and it was the practice of many other parents at the time to use a booster seat; (2) it was not reasonably foreseeable by M when she chose to place C in the booster seat that that would result in materially greater injuries if there was an accident than if C had been placed in the harness seat or that the shortfall of 8cm in C&#8217;s height would cause serious injuries and that hindsight played an inappropriate part in the judge&#8217;s assessment; (3) the judge was wrong to place weight on the fact that there was a safer option available to M in the form of a seat with a five-point harness; (4) the judge should have had regard to the fact that there was no evidence that a child who did meet the manufacturers&#8217; criteria would have been safe on the booster seat and that it was not established that the discrepancy between C&#8217;s characteristics and those dictated by the instructions made any material difference to her injuries."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) The judge rightly focussed on whether it was negligent of M to fail to observe the warnings on the booster seat. A number of factors could be of importance in determining the suitability of a child restraint for a particular child and the instructions made it clear that the child must meet all the stipulated requirements. He did not however treat M&#8217;s failure to comply with the instructions as determinative and he had all the relevant factors well in mind. He rightly thought that the instructions could not have been more explicit both as to requirements and to use and that led him to conclude that it was difficult to see how a different judgment as to the appropriateness of the seat could be substituted. That process of reasoning could not be faulted on the particular facts of the case and could be supplemented only in relation to the evidence that M acted as many other parents would have done (see paras 27-31 of judgment). (2) The instructions contained clear and repeated warnings that failure to use the seat as instructed could result in serious injury or death and it was therefore reasonably foreseeable to M that C would be injured. M accepted in evidence that she knew that failure to follow the instructions could give rise to serious injuries and that she knew that C did not fit all the requirements (para.34). (3) The premise for the argument that the availability of a harness seat was irrelevant was that the judge had not made a finding that the booster seat was unsafe, only that the other seat would have provided greater protection. The court could not accept that analysis of the judgment. The judge had concluded that the booster seat was not a suitable restraint for C and he proceeded on the basis that the booster seat was not suitable because C did not meet the manufacturers&#8217; requirements (paras 35-42). (4) The causation issues could not be considered in a vacuum and the actual circumstances were what mattered. If M had not disregarded the manufacturers&#8217; instructions she would have put C in the harness seat and in that seat C would probably not have suffered the injuries that she did. But for the action that the judge characterised as negligent, the damage would not have occurred. The judge directed himself properly as to the issue he had to decide which revolved around C in M&#8217;s car which there were two alternative child seats available. He was right to reject an inquiry into what would have happened to the hypothetical child. The judge had not erred in finding that M was negligent in placing C onto the booster cushion. The court&#8217;s aim was to provide guidelines that could be applied robustly, Froom v Butcher [1976] Q.B. 286 applied. The judge had been entitled to follow the guidance in Froom v Butcher and to conclude that in the circumstances a 25 per cent contribution was just and equitable and appropriately reflected the extent of M&#8217;s responsibility for the damage in question."
    ],
    "CIT": "[2013] EWCA Civ 455",
    "JUDGE": "Arden LJ; Elias LJ; Black LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Damages",
        "Personal Injury",
        "Road Traffic",
        "Child Restraints",
        "Contributions",
        "Contributory Negligence",
        "Damages",
        "Road Traffic Accidents",
        "Third Parties"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Trusts - Beneficiaries - Occupancy - Tenancies In Common - Trusts For Sale",
    "COURT": "EWCA",
    "NAME": "Barclay v Barclay",
    "YEAR": "1970",
    "CITATION": "Barclay v Barclay [1970] 2 QB 677",
    "NUMBER": "38",
    "RELATED": [
        "Goodman v Gallant",
        "State Bank of India v Sood",
        "Jones v Kernott",
        "In re Pavlou",
        "Jones v Challenger",
        "Walby v Walby",
        "Nickerson v Barraclough",
        "Harrow LBC v Qazi",
        "Antoniades v Villiers",
        "Shaw v Applegate",
        "Facchini v Bryson",
        "Sava v SS Global Ltd"
    ],
    "SUMMARY": [
        "Tenancy in common; dwelling-house; beneficiary under will in occupation",
        "A beneficiary under a trust for sale of realty may have an interest in the proceeds of sale only. T by his will left his bungalow to be sold and the proceeds divided in five equal shares among his surviving sons, C, F and A, and his daughters-in-law, W and E. T died in 1954; F took out letters of administration but did nothing further. A, who had lived in the bungalow before T&#8217;s death, stayed on there. In 1964 F died, and his widow, W, who was now entitled to a two- fifths share, took out letters of administration to T&#8217;s estate, thereby acquiring legal title to the bungalow. W brought an action against A for possession, and for damages for use and occupation. A contended that he occupied the premises as tenant in common pursuant to the terms of the will."
    ],
    "HELD": [
        "the prime object of the trust was that the bungalow should be sold, and no beneficiary was entitled to possession of it. There was no tenancy in common of the bungalow itself, but at most in the proceeds of sale. This was not a case where a requisite consent could not be obtained within the Law of Property Act 1925 s.30 , but a case where A plainly had no interest at all in the bungalow. ( Bull v Bull [1955] 1 Q.B. 234 distinguished; Jones v Challenger [1961] 1 Q.B. 176 applied)."
    ],
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CIT": "[1970] 2 QB 677",
    "JUDGE": "Lord Denning MR; Edmund Davies LJ; Megaw LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Trusts",
        "Beneficiaries",
        "Occupancy",
        "Tenancies In Common",
        "Trusts For Sale"
    ]
},
{
    "CATEGORY": "Family Law Other Related Subjects: Banking and Finance - Bankruptcy - Divorce - Matrimonial Home - Tenancies In Common",
    "COURT": "EWHC",
    "NAME": "In re Pavlou",
    "YEAR": "1993",
    "CITATION": "In re Pavlou [1993] 1 WLR 1046",
    "NUMBER": "39",
    "RELATED": [
        "Harris v Goddard",
        "Pettitt v Pettitt",
        "Barclay v Barclay",
        "McDowall v Hirschfield Lipson",
        "Barca v Mears",
        "Kinch v Bullard",
        "Gissing v Gissing",
        "Grant v Edwards",
        "Newlon Housing Trust v Alsulaimen",
        "Nickerson v Barraclough",
        "Corbett v Halifax",
        "Laskar v Laskar"
    ],
    "SUMMARY": [
        "Matrimonial home; held as tenants in common; joint tenancy severed on husband&#8217;s bankruptcy; interest of each in property; whether wife&#8217;s expenditure on property to be considered",
        "On divorce, and the partition of the matrimonial home, allowance is to be made for any expenditure made by one party, who is a beneficial joint tenant or a tenant in common, which has resulted in an increase to the value of the property. A wife obtained a decree for divorce at the same time as her husband was declared bankrupt. The beneficial joint tenancy in which they had held the matrimonial home was severed on the husband&#8217;s bankruptcy, and the property thereafter held by them as tenants in common. The trustee in bankruptcy sought a declaration as to the interest of each party in the property."
    ],
    "HELD": [
        "that as the wife had spent considerable sums on the property, effecting repairs and paying the mortgage instalments, she was entitled to have this expenditure taken into account when determining the shares in the property (Leigh v Dickeson (1884) 15 Q.B.D. 60 applied; Dennis v McDonald [1982] Fam. 63, Gorman (A Bankrupt), Re [1990] 1 W.L.R. 616 considered)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1993] 1 WLR 1046",
    "JUDGE": "Millett J",
    "TYPE": "Case",
    "CATEGORIES": [
        "Family Law Other Related Subjects: Banking and Finance",
        "Bankruptcy",
        "Divorce",
        "Matrimonial Home",
        "Tenancies In Common"
    ]
},
{
    "CATEGORY": "Real Property - Beneficial Interests - Mortgages - Trusts For Sale",
    "COUNSEL": "For the bank: Grant Crawford. For the defendants: Peter Havey and Andrew A Williams.",
    "COURT": "EWCA",
    "NAME": "State Bank of India v Sood",
    "YEAR": "1997",
    "CITATION": "State Bank of India v Sood [1997] Ch 276",
    "NUMBER": "40",
    "RELATED": [
        "Laskar v Laskar",
        "Quigley v Masterson",
        "Bishop v Blake",
        "Davis v Smith",
        "Sava v SS Global Ltd",
        "Colchester BC v Smith",
        "Stack v Dowden",
        "Grant v Edwards",
        "Stafford v Lee",
        "Corbett v Halifax",
        "Copeland v Greenhalf",
        "Phillips v Mobil Oil"
    ],
    "SUMMARY": [
        "Equitable interests in land; trusts for sale; whether overreached when land was mortgaged but no capital money was advanced",
        "The first and second defendants were registered proprietors of land on which they executed a second legal charge in favour of S as security for all their present and future liabilities. S, claiming that substantial debts under the legal charge remained unsatisfied, brought possession proceedings in which the third to seventh defendants argued that they had equitable interests in the property as their main residence and that they had overriding interests under the Land Registration Act 1925 s.70(1)(g) . They also contended that, because no capital money had been paid over by S at the time the mortgage was made, their interests were not overreached by the legal charge in terms of the Law of Property Act 1925 s.2(1)(ii) . S argued that there was no requirement that capital money and disposition should arise at the same time. The judge refused to strike out parts of the defence to the claim for possession, and S appealed."
    ],
    "HELD": [
        "allowing the appeal, that, on the true construction of the Law of Property Act 1925 s.2(1)(ii), compliance with the statutory requirements concerning the payment of capital money was only required if capital money arose. It followed that it was not necessary for capital money to have arisen under the conveyance. Notwithstanding their occupation of the property, the beneficial interests of the third to seventh defendants were overreached."
    ],
    "CIT": "[1997] Ch 276",
    "JUDGE": "Peter Gibson LJ; Hirst LJ; Pill LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Beneficial Interests",
        "Mortgages",
        "Trusts For Sale"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Equity - Trusts - Joint Tenancies - Matrimonial Home - Notices - Severance",
    "COUNSEL": "For the plaintiffs: Michael Waterworth. For the defendants: John Waters.",
    "COURT": "EWHC",
    "NAME": "Kinch v Bullard",
    "YEAR": "1999",
    "CITATION": "Kinch v Bullard [1999] 1 WLR 423",
    "NUMBER": "41",
    "RELATED": [
        "Goodman v Gallant",
        "Rhone v Stephens",
        "Bedson v Bedson",
        "Davis v Smith",
        "Quigley v Masterson",
        "Grant v Edwards",
        "McDowall v Hirschfield Lipson",
        "Harris v Goddard",
        "Newlon Housing Trust v Alsulaimen",
        "Whittaker v Kinnear",
        "In re Pavlou",
        "Harrow LBC v Qazi"
    ],
    "HELD": [
        "that H&#8217;s executors were entitled to the declaration. The notice had been validly served within s.196(3), having been posted to and delivered at H&#8217;s last known place of abode, even though it had not come to his attention. The fact that W picked up the notice and destroyed it did not invalidate the service. There was nothing in s.36(2) which required a court to inquire into the sender&#8217;s state of mind and it made no difference that, at the time of service, W no longer wished to sever the tenancy. However, W herself would not have been entitled to claim as against H that the notice had been validly served where she had taken steps to deliberately conceal the notice from him."
    ],
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "CIT": "[1999] 1 WLR 423",
    "JUDGE": "Neuberger J",
    "SUMMARY": [
        "joint tenancies; severance; validity of service of notice where sender destroyed notice after delivery by post",
        "A husband, H, and wife, W, occupied the matrimonial home as beneficial joint tenants. W, who was suffering from a terminal illness, was considering divorce and, so that the whole legal and beneficial ownership of the property would not vest in H on her death, decided to serve a notice severing the joint tenancy which, under the proviso to the Law of Property Act 1925 s.36(2), would have the effect that the legal title would vest in H on W&#8217;s death but he would hold the beneficial interest on trust in equal shares for himself and on the trusts of W&#8217;s will. The notice was signed by W and sent to H at the matrimonial home by ordinary first class post. H, having been admitted to hospital after being taken ill suddenly, was not at home to receive the notice and W, thinking that H might predecease her and having changed her mind about wanting to sever the tenancy, destroyed it. H died a week later and W several months later. H&#8217;s executors, seeking a declaration that they were entitled to a one half beneficial share of the property or the proceeds of sale, issued proceedings against W&#8217;s executors, contending that the notice of severance was validly served in terms of s.196(3) of the Act and was therefore effective to sever the joint tenancy."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Equity",
        "Trusts",
        "Joint Tenancies",
        "Matrimonial Home",
        "Notices",
        "Severance"
    ]
},
{
    "CATEGORY": "Real Property - Joint Tenancies - Notice - Severance",
    "COUNSEL": "For the appellant: Robert Sheridan. For the respondent: Andrew Skelly.",
    "COURT": "EWHC",
    "NAME": "Quigley v Masterson",
    "YEAR": "2011",
    "CITATION": "Quigley v Masterson [2011] EWHC 2529 (Ch)",
    "NUMBER": "42",
    "RELATED": [
        "McDowall v Hirschfield Lipson",
        "Davis v Smith",
        "Kinch v Bullard",
        "Bedson v Bedson",
        "Harris v Goddard",
        "Goodman v Gallant",
        "Laskar v Laskar",
        "Bridle v Ruby",
        "Harrow LBC v Qazi",
        "AG Securities v Vaughan",
        "Quennell v Maltby",
        "Stack v Dowden"
    ],
    "SUMMARY": [
        "A joint tenant&#8217;s application to the Court of Protection to be joined to proceedings in relation to the affairs of the other joint tenant was capable of qualifying as a notice of severance under the Law of Property Act 1925 s.36(2), as it gave unambiguous notice of the desire to sever the joint tenancy.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant executrix (Q), of the deceased (D), appealed against a decision of the deputy adjudicator that there had been no severance of a joint tenancy held by D and the respondent (M).",
        "D and M had lived together and owned a property as joint tenants. The relationship broke down and M left the property. D instructed solicitors who purported to serve notice to sever the tenancy on M. D&#8217;s health subsequently deteriorated and Q, who was D&#8217;s daughter, applied to the Court of Protection for an order authorising her to apply D&#8217;s money and to sell the property. M applied for permission to be joined in the proceedings stating that she owned 50 per cent of the property and for the property to be valued with the proceeds divided between her and D. It was directed that M should have conduct of the sale of the property and Q be made deputy of D&#8217;s affairs. Before any action to sell the property could be taken D died. A dispute arose as to whether the joint tenancy had been severed. The deputy adjudicator ruled that it had not been severed. The issue for determination was whether M&#8217;s application constituted notice pursuant to the Law of Property Act 1925 s.36(2) and also operated as a severance of the joint tenancy."
    ],
    "HELD": [
        "Appeal allowed.",
        "There was no reason why M&#8217;s application to the Court of Protection should not qualify as a notice of severance under s.36(2). Read in the context of the proceedings, it gave unambiguous notice of M&#8217;s desire, at the time, to sever the joint tenancy. M&#8217;s acceptance that D was entitled to a half share in the property would have been reasonably understood by Q, or any other person upon whom the application was served, as a present, unconditional and unambiguous notice to sever, Harris v Goddard [1983] 1 W.L.R. 1203 considered. The application was not served on D in any of the ways permitted under s.196. However, the position changed when the court ordered that Q should be made D&#8217;s deputy for his affairs. It was right to regard Q as having sufficient authority to receive a notice of severance on D&#8217;s behalf from the time she was appointed deputy and since she knew of M&#8217;s application the notice could and should be treated as having been given to her for the purposes of s.36(2) (see paras 33-35 of judgment)",
        "",
        ""
    ],
    "CIT": "[2011] EWHC 2529 (Ch)",
    "JUDGE": "Henderson J",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Joint Tenancies",
        "Notice",
        "Severance"
    ]
},
{
    "CATEGORY": "Real Property - Joint Tenancies - Rectification - Remedies - Severance",
    "COUNSEL": "For the appellant: April Plant. For the respondent: Charlotte Ford.",
    "COURT": "EWCA",
    "NAME": "Davis v Smith",
    "YEAR": "2011",
    "CITATION": "Davis v Smith [2011] EWCA Civ 1603",
    "NUMBER": "43",
    "RELATED": [
        "Quigley v Masterson",
        "McDowall v Hirschfield Lipson",
        "Walker v Burton",
        "Bedson v Bedson",
        "Harris v Goddard",
        "Goodman v Gallant",
        "Kinch v Bullard",
        "Laskar v Laskar",
        "Walby v Walby",
        "Colchester BC v Smith",
        "Peacock v Custins",
        "Groveholt Ltd v Hughes"
    ],
    "SUMMARY": [
        "It was clear from the conduct of parties that they had agreed to sever a joint tenancy of a former matrimonial property and that it had been severed in equity.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant (S) appealed against a decision that a joint tenancy of a former matrimonial property had been severed in equity.",
        "S had been married to the mother (M) of the respondents (D) and they had jointly purchased a property that M had previously occupied as a council tenant. The marriage broke down and S moved out of the property and issued divorce proceedings against M. M and S&#8217;s joint assets consisted of the property, some minimal cash and an endowment policy. It was agreed between M and S that the property should be sold and that the policy would be surrendered. Correspondence between the parties&#8217; solicitors indicated that S would get all the proceeds from the policy and that M would get the &#8220;lion&#8217;s share&#8221; of the sale of the property to make up for S receiving the policy proceeds. An offer was received for the sale of the house; however, the exchange of contracts was delayed. S&#8217;s solicitors wrote to M mentioning the offer and the need to agree division of the proceeds of sale. A couple of days later M executed a will appointing D as executors of her estate. A few days later M died unexpectedly on a day that she had intended to visit her solicitors to serve a notice of severance of the joint tenancy pursuant to the Law of Property Act 1925 s.36(2). Both parties had been advised to serve a notice of severance, but neither had prior to M&#8217;s death. The judge held that the joint tenancy had been severed by mutual agreement between M and S or by the course of dealing between them which led to the same result.SUMMARY S contended that the judge had erred in finding that the joint tenancy had been severed."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1)The law pertaining to the severance of joint tenancies was largely to be found in Burgess v Rawnsley [1975] Ch. 429. It was clear that a joint tenancy could survive a proposal and an agreement to put a property on the market and a subject to contract offer; even an eventual sale could be compliant with a joint tenancy continuing to exist, Marshall v Marshall applied. However, in the instant case, it was apparent from the correspondence between M and S that the parties had a common intention that the property be sold and that the proceeds be divided equally, albeit with balancing payments being made to M to reflect the fact that S had received the benefit of the sale of the policy. Cognizance had to be given to the fact that both M and S had been advised by solicitors, that both knew that the other was being advised by solicitors and that they both knew that having been married so long equal division of their assets was inevitable. Further, the only source for the balancing payment to M was from the sale of the property. Moreover, the parties had embarked upon the division of their assets on the basis that their assets would be divided equally. Accordingly, the judge had reached the right conclusion on the severance of the property, Burgess and Marshall applied. (2) Evidence pertaining to what parties wished to do, what they intended to do and what they were advised by their solicitors was irrelevant to the issue at hand. The court should concentrate on what passed between the parties by way of words and actions and what they knew. It should not normally consider what was communicated between a party and their solicitor (paras 22-23)."
    ],
    "FLAGS": [
        "Neuberger"
    ],
    "CIT": "[2011] EWCA Civ 1603",
    "JUDGE": "Lord Neuberger MR; Maurice Kay LJ; Sullivan LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Joint Tenancies",
        "Rectification",
        "Remedies",
        "Severance"
    ]
},
{
    "CATEGORY": "Equity - Breach - Equitable Principles - Equitable Remedies - Promises - Proprietary Estoppel - Reliance",
    "COUNSEL": "For G: John McDonnell Q.C. and James Aldridge. For H: John Martin Q.C. and Keith Rowley.",
    "COURT": "EWCA",
    "NAME": "Gillett v Holt",
    "YEAR": "2001",
    "CITATION": "Gillett v Holt [2001] Ch 210",
    "NUMBER": "44",
    "RELATED": [
        "Thorner v Majors",
        "Wall v Collins",
        "Lyus v Prowsa Developments",
        "Shaw v Applegate",
        "Clarke v Corless",
        "Whittaker v Kinnear",
        "Yaxley v Gotts",
        "Scott v Southern Pacific Mortgages",
        "City of London Corp v Fell",
        "Gilbert v Spoor",
        "Hounslow LBC v Powell",
        "Grant v Edwards"
    ],
    "HELD": [
        "allowing the appeal, that (1) the fact that a testamentary disposition was always capable of revocation could not defeat a promise of the kind made by H, whereby he had effectively assured G that &#8220;all this will be yours&#8221;, Taylor v Dickens [1998] 1 F.L.R. 806 considered. On the facts, it was intended that G should rely on the assurances given and they were clearly relied on. Reliance would in any event be presumed, Greasley v Cooke [1980] 1 W.L.R. 1306 referred to. The judge had misdirected himself with regard to the necessary elements of proprietary estoppel. In particular he had exaggerated the extent to which a promise had to be expressly irrevocable in order to give rise to an estoppel, and had further erred in suggesting that there had been a need to find a definite agreement as per the doctrine of mutual wills, and (2) G&#8217;s case on detriment was compelling. He had left school in the face of opposition from his headmaster and concern from his parents to work for a much older man who had influenced both his social and his working life. In effect, for a period exceeding 30 years, G and his family had acted as a surrogate family to H. In many ways G had been denied the opportunity of bettering himself in reliance on H&#8217;s oft repeated assurances, and in those circumstances detriment had clearly been established."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2001] Ch 210",
    "JUDGE": "Beldam LJ; Waller LJ; Robert Walker LJ",
    "SUMMARY": [
        "G, a farm manager, appealed against the dismissal of his claim for equitable relief following promises of inheritance made to him by H, a wealthy landowner who had acted as his employer and benefactor for over 40 years. The court held that on the facts of the case, the repeated assurances made by H were capable of constituting an enforceable claim for proprietary estoppel, and that G had acted to his detriment in reliance on those assurances.",
        "G, who was then aged 12, met H, a wealthy landowner, in 1952 and a close friendship developed between the two. At the age of 15, G left school and began to work for H on a full time basis. Although it was initially intended that G should attend agricultural college, this idea was later abandoned as H persuaded G that he could learn more if he continued to work for him. G met S whom he subsequently married. Prior to the marriage, G and S were taken out for a meal by H during which H stated that G would eventually take over the running of the farm and that on his death, the entire business would be left to G. At the christening of G&#8217;s first child, H stated that the child&#8217;s birth would enable the farm to continue through to the next generation. Further assurances were made over subsequent years. In 1992, H met W. A relationship developed between them, and by 1994 W had taken the place of G as the principal beneficiary of H&#8217;s will. H initiated a police investigation into G&#8217;s management of the accounts relating to the farm business and other associated businesses which G was by then involved with. As a result of the investigation, G and S were the subject of disciplinary proceedings and thereafter summarily dismissed. G issued proceedings against H and W seeking equitable relief on the basis of proprietary estoppel. The judge held ([1998] 3 All E.R. 917) that whilst G&#8217;s evidence in relation to the assurances made by H was true, there had nevertheless been no assurance from H capable of amounting to an irrevocable promise that G would inherit his estate despite subsequent changes in circumstances, and the claim therefore failed. The court also held that there was insufficient evidence of detriment. G appealed."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Equity",
        "Breach",
        "Equitable Principles",
        "Equitable Remedies",
        "Promises",
        "Proprietary Estoppel",
        "Reliance"
    ]
},
{
    "CATEGORY": "Succession Other Related Subjects: Equity - Real Property - Assurances - Detriment - Estates - Implied Promises - Intestacy - Proprietary Estoppel - Reliance - Unconscionability",
    "COUNSEL": "For the appellant: John McDonnell QC, Michael Jefferis. For the respondents: Andrew Simmonds QC, Penelope Reed.",
    "COURT": "UKHL",
    "NAME": "Thorner v Majors",
    "YEAR": "2009",
    "CITATION": "Thorner v Majors [2009] UKHL 18",
    "NUMBER": "45",
    "RELATED": [
        "Gillett v Holt",
        "Whittaker v Kinnear",
        "Clarke v Corless",
        "Zarb v Parry",
        "Walby v Walby",
        "Stafford v Lee",
        "Gilbert v Spoor",
        "Walker v Burton",
        "Copeland v Greenhalf",
        "Davis v Smith",
        "Rhone v Stephens",
        "Quennell v Maltby"
    ],
    "SUMMARY": [
        "The Court of Appeal had been wrong to reverse a trial judge&#8217;s decision that a sufficient assurance had been made by a landowner to his nephew to support the operation of proprietary estoppel so as to enable the nephew to inherit his uncle&#8217;s land. The judge&#8217;s findings of fact had not been open to challenge in the Court of Appeal and there had been insufficient reason for that court to reverse them. The court considered the operation of proprietary estoppel generally and the necessary character or qualities that an assurance must have in order to be relied upon as proprietary estoppel.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant (D) appealed against a decision ([2008] EWCA Civ 732) that proprietary estoppel could not operate in his favour so as to entitle him to inherit the estate of his deceased uncle (P).",
        "At the time of his death in 2005, P had owned a farm of substantial value and also had considerable savings. He had made a will in 1997 leaving the residue of his estate, including his farm, to D but had subsequently destroyed the will and died intestate. D had worked at P&#8217;s farm for no remuneration from 1976 onwards, and by the 1980s, he had come to hope that he might inherit the farm. No express representation had ever been made, but D relied on various hints and remarks made by P over the years, which he claimed had led him to believe that he was to inherit the farm. In 1990, P had handed D a bonus notice relating to two policies on P&#8217;s life, saying &#8220;that&#8217;s for my death duties&#8221;. It was D&#8217;s case that at that point his hope had become an expectation. The judge at first instance had found that D had the benefit of proprietary estoppel because he had reasonably understood P&#8217;s words and acts as an assurance that he would inherit the farm and that P had intended them to be understood in that way. The Court of Appeal had reversed that decision, finding that there had been no clear and unequivocal intention on the part of P and that there was no basis to construe P&#8217;s statements as a definite assurance rather than a statement of present intention. The issues for the instant court were (i) the character or quality of the representation or assurance made to D; (ii) whether, if the other elements for proprietary estoppel were established, D must fail if the land to which the assurance related was inadequately identified or had undergone a change during the period between the giving of the assurance and its eventual repudiation.SUMMARY D submitted that the Court of Appeal had been wrong to apply the &#8220;clear and unequivocal&#8221; test because it was not relevant to proprietary estoppel."
    ],
    "HELD": [
        "Appeal allowed.",
        "(1) To establish a proprietary estoppel, the relevant assurance had to be clear enough. What amounted to sufficient clarity depended on context, Walton v Walton (Unreported) April 14, 1994applied. There was some authority for the view that the &#8220;clear and unequivocal&#8221; test did not apply to proprietary estoppel, especially in Treitel, Law of Contract (12th edn. 2007) and at least the two earlier editions, and in Jones v Watkins (Unreported) November 26, 1987, Jones applied. There was a degree of unreality in making a distinction between the meaning of written words and the meaning of spoken words because in cases of the instant type, a judge&#8217;s conclusion as to the meaning of spoken words would be inextricably entangled with his factual findings about the surrounding circumstances. In the instant case, the Court of Appeal had concentrated too much on the significance of the 1990 incident regarding the bonus notices and had not given sufficient weight to the advantage that the trial judge had had in seeing and hearing the witnesses. The 1990 incident had marked the transition from hope to expectation, but it had not stood alone, and the evidence had demonstrated a continuing pattern of conduct by P for the remaining 15 years of his life. It was not helpful to try to break that pattern down into discrete elements. There had been insufficient reason for the Court of Appeal to reverse the trial judge&#8217;s careful findings and conclusion. (2) Proprietary estoppel had to relate to identified property (usually land) owned or about to be owned by the defendant. The trial judge had made a clear finding of an assurance by P that D would become entitled to the farm. Both P and D knew that the extent of the farm was liable to fluctuate as development opportunities arose and tenancies came and went. There was no reason to doubt that their common understanding had been that P&#8217;s assurance related to whatever the farm consisted of at P&#8217;s death, Walton applied and Layton v Martin [1986] 2 F.L.R. 227 and Basham (Deceased), Re [1986] 1 W.L.R. 1498 considered. There was no ground on which to challenge the trial judge&#8217;s discretion in determining the remedy and his order was to be restored, Gillett v Holt [2001] Ch. 210, Crabb v Arun DC [1976] Ch. 179 and Cobbe v Yeoman&#8217;s Row Management Ltd [2008] UKHL 55, [2008] 1 W.L.R. 1752 considered."
    ],
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "CIT": "[2009] UKHL 18",
    "JUDGE": "Lord Hoffmann; Lord Scott of Foscote; Lord Rodger of Earlsferry; Lord Walker of Gestingthorpe; Lord Neuberger",
    "TYPE": "Case",
    "CATEGORIES": [
        "Succession Other Related Subjects: Equity",
        "Real Property",
        "Assurances",
        "Detriment",
        "Estates",
        "Implied Promises",
        "Intestacy",
        "Proprietary Estoppel",
        "Reliance",
        "Unconscionability"
    ]
},
{
    "CATEGORY": "Trusts Other Related Subjects: Real Property - Agreements - Constructive Trusts - Intention - Ownership - Reliance - Sale of Land - Unconscionability",
    "COUNSEL": "For the appellants: John McDonnell QC, Paul Stafford. For the respondents: Tim Morshead.",
    "COURT": "EWCA",
    "NAME": "Clarke v Corless",
    "YEAR": "2010",
    "CITATION": "Clarke v Corless [2010] EWCA Civ 338",
    "NUMBER": "46",
    "RELATED": [
        "Groveholt Ltd v Hughes",
        "KS Victoria Street v House of Fraser",
        "Jones v Kernott",
        "Geary v Rankine",
        "Thorner v Majors",
        "Sava v SS Global Ltd",
        "Lyus v Prowsa Developments",
        "Gissing v Gissing",
        "McDowall v Hirschfield Lipson",
        "Herbert v Doyle",
        "Palk v Mortgage Services",
        "Stack v Dowden"
    ],
    "SUMMARY": [
        "A judge had wrongly taken into account later subjective intention when considering whether an informal agreement between homeowners to acquire the communal areas of a small housing estate had created a constructive trust of the land in the hands of the sole purchaser, but she had been entitled to conclude that there had been no reliance on the agreement so as to make it unconscionable for the purchaser to retain the land.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant homeowners (B) of one of three houses in a gated estate appealed against a decision ([2009] EWHC 1636 (Ch), [2009] 2 P. ) dismissing their claim for a declaration that an access road and adjoining land serving the estate was held by the respondents (C) on a constructive trust.",
        "SUMMARY SUMMARY The estate had been owned by a property development company (E). E had sold two of the houses to B and C. The third was occupied by tenants (G). E retained ownership of the communal areas, which included the access road, entrance gates and a sewage treatment plant. At a meeting, B, C and G agreed that they wanted to manage the communal areas themselves and that E should have no further involvement. E rejected their initial proposal that it should transfer the common areas to them. G then purchased their property along with an adjoining part of the communal areas. In due course C entered into negotiations with E and eventually purchased the rest of the communal areas without the knowledge of B and G. C offered to sell to B the communal areas around their house, but disputes arose and the instant proceedings were started. C sought a declaration that, as a result of the agreement, C&#8217;s purchase of the communal areas was subject to a constructive trust in favour of B and G. The judge found that a consensus had been reached at the meeting to remove E and that logically that meant the transfer of ownership of the communal areas to all the residents, but that the consensus was not binding on C&#8217;s conscience, that the consensus had later been abandoned by B and that they had not relied on it, with the effect that C had not acted in a way that made it unconscionable for them to retain the land. In particular the judge relied on the fact that G had purchased part of the communal areas without thinking that it was a breach of the agreement, and that B had not complained about breach of the agreement until the instant proceedings had been issued."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) The key to the imposition of a constructive trust was that it would be unconscionable for the purchasing party to retain ownership of the land for his own benefit having regard to the prior agreement reached and to the claimant&#8217;s reliance on it. Questions of unconscionability were matters for the court to be decided on an objective basis having regard to the terms agreed or the representations made and the effect that they had. The question was whether the agreement made or words used were reasonably relied upon by the claimants as an assurance that they would obtain an interest in the property. The court therefore had to concentrate on the quality of the assurance given and whether the claimants&#8217; reliance on it was reasonable, Gissing v Gissing [1971] A.C. 886. In the instant case, although the agreement had to be sufficiently clear for everyone to understand that they would acquire an interest in the communal areas, it was not necessary for a decision then to have been made about whether to use a management company or some other form of common ownership. The informal nature of the agreement was not inconsistent with it being binding in conscience, Pallant v Morgan [1953] Ch. 43 and Banner Homes Holdings Ltd (formerly Banner Homes Group Plc) v Luff Developments Ltd [2000] Ch. 372 applied. Although some of the judge&#8217;s findings were inconsistent, her finding that the logical consequence of E&#8217;s removal was the transfer of the communal parts to all the residents indicated that the agreement reached was sufficient to found the necessary equity if it had been relied upon. The judge had been wrong to test the effect of the agreement by referring simply to G&#8217;s later subjective intentions. (2) There was no evidence to support the judge&#8217;s finding that B had abandoned the consensus, but there was a sufficient basis for her conclusion that B had not relied on it."
    ],
    "CIT": "[2010] EWCA Civ 338",
    "JUDGE": "Sir Andrew Morritt C; Thomas LJ; Patten LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Trusts Other Related Subjects: Real Property",
        "Agreements",
        "Constructive Trusts",
        "Intention",
        "Ownership",
        "Reliance",
        "Sale of Land",
        "Unconscionability"
    ]
},
{
    "CATEGORY": "Contracts - Estoppel - Formalities - Leases - Oral Contracts",
    "COUNSEL": "For G: George Laurence Q.C. and Louise Davies. For Y: Anthony Allstone.",
    "COURT": "EWCA",
    "NAME": "Yaxley v Gotts",
    "YEAR": "2000",
    "CITATION": "Yaxley v Gotts [2000] Ch 162",
    "NUMBER": "47",
    "RELATED": [
        "Crago v Julian",
        "Wright v Macadam",
        "Herbert v Doyle",
        "Antoniades v Villiers",
        "Burgess v Rawnsley",
        "AG Securities v Vaughan",
        "Grand Junction Co v Bates",
        "Goldberg v Edwards",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Phillips v Mobil Oil",
        "Swift Investments v Combined English Stores",
        "Lyus v Prowsa Developments"
    ],
    "SUMMARY": [
        "estoppel; proprietary estoppel allowed on basis that constructive trust not affected by failure to comply with Law of Property (Miscellaneous Provisions) Act 1989 s.2",
        "Y alleged an oral agreement with G that Y would renovate a property for G to purchase and act as managing agent in return for Y&#8217;s ownership of the ground floor. However, unknown to Y, G arranged for his son to buy the property. Y performed the renovation and acted as managing agent, but there was a subsequent dispute between Y and G, in which G denied any agreement to transfer the ground floor to Y. Y succeeded below in establishing an equitable interest and G and his son were ordered to provide Y with a 99-year lease or the equivalent sum within four months. G appealed, contending that the oral contract was void for failure to comply with the formalities of the Law of Property (Miscellaneous Provisions) Act 1989 s.2 and the remedy of proprietary estoppel was therefore inappropriate."
    ],
    "HELD": [
        "dismissing the appeal, that although the existence of a constructive trust had not been confirmed by the judge below, he had found an undisputed proprietary estoppel, which was a similar remedy and which provided sufficient basis for the existence of a constructive trust. It was clear that s.2(5)(c) expressly provided that the existence or operation of a constructive trust would not be affected by the application of that section."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2000] Ch 162",
    "JUDGE": "Beldam LJ; Robert Walker LJ; Clarke LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Contracts",
        "Estoppel",
        "Formalities",
        "Leases",
        "Oral Contracts"
    ]
},
{
    "CATEGORY": "Real Property - Certainty - Constructive Trusts - Oral Contracts - Transfer of Land",
    "COUNSEL": "For the appellant: Timothy Becker. For the respondents: Amanda Tipples.",
    "COURT": "EWCA",
    "NAME": "Herbert v Doyle",
    "YEAR": "2010",
    "CITATION": "Herbert v Doyle [2010] EWCA Civ 1095",
    "NUMBER": "48",
    "RELATED": [
        "Whittaker v Kinnear",
        "Walby v Walby",
        "Groveholt Ltd v Hughes",
        "Huckvale v Aegean Hotels",
        "Batchelor v Marlow",
        "Lyus v Prowsa Developments",
        "Wood v Waddington",
        "Clarke v Corless",
        "Phillips v Mobil Oil",
        "McDowall v Hirschfield Lipson",
        "Burgess v Rawnsley",
        "Bridle v Ruby"
    ],
    "SUMMARY": [
        "If, following an oral agreement, the parties still intended to make a formal agreement setting out the terms on which one or more of the parties was to acquire an interest in property, or if further terms for that acquisition remained to be agreed between them so that the interest in property was not clearly identified, or if the parties did not expect their agreement to be immediately binding, neither party could rely on constructive trust as a means of enforcing their original agreement.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The applicant (H) sought permission to appeal against a High Court judgment that an agreement he had made with the respondents (D) concerning land had given rise to a constructive trust in their favour.",
        "H and D owned the freeholds of adjacent properties. D leased part of H&#8217;s property. H wanted to build on his property, but to do so needed to exchange some of D&#8217;s parking spaces for others on his property. The parties made an oral agreement containing nine conditions and H proceeded with the development. A dispute arose over the parking spaces and H brought proceedings to require D to complete the exchange. The judge found that the agreement had not simply been for an exchange. Instead, he held that if H was willing and able to satisfy the other terms which had been agreed, it would be unconscionable for D to resile from their agreement by refusing to transfer the spaces to him; but if H was not willing and able to satisfy those terms, then it would not be unconscionable for D to retain those spaces unless and until those other terms were satisfied. However, H decided not to exercise that right to obtain a transfer of the spaces by complying with all the other terms of the agreement. D then counterclaimed that if they transferred the spaces and paid the sum in the agreement for H to create an extension to the part of his property that they leased, then he was bound to transfer to them his parking spaces and to grant a lease to them of that extension and another building. The judge found that although there was no written contract for the purposes of the Law of Property (Miscellaneous Provisions) Act 1989 s.2(1), there was, for the purposes of s.2(5), a constructive trust relating to the spaces, the extension and the other building in favour of D as they had relied on the oral agreement to their detriment by allowing H&#8217;s development to encroach on to their parking spaces.SUMMARY H submitted, among other things, that the judge&#8217;s decision was not compliant with Cobbe v Yeoman&#8217;s Row Management Ltd [2008] UKHL 55, [2008] 1 W.L.R. 1752 because the agreement had not been sufficiently certain and there were matters outstanding to be agreed."
    ],
    "HELD": [
        "Application granted in part, appeal dismissed.",
        "If, following an oral agreement, the parties still intended to make a formal agreement setting out the terms on which one or more of the parties was to acquire an interest in property, or if further terms for that acquisition remained to be agreed between them so that the interest in property was not clearly identified, or if the parties did not expect their agreement to be immediately binding, neither party could rely on constructive trust as a means of enforcing their original agreement. In those situations, if their agreement, which did not comply with s.2(1), was incomplete, they could not utilise the doctrine of proprietary estoppel or the doctrine of constructive trust to make their agreement binding on the other party by virtue of s.2(5), Cobbe applied (see para.57 of judgment). There was no doubt, on the findings made by the judge, that D had relied to their detriment on H&#8217;s assurance since the effect of their acceptance of his assurance was that he had proceeded to build with an allocated parking space encroaching partly on to one of their parking spaces. Likewise, on the judge&#8217;s findings the agreement was not subject to contract (para.67). There was no doubt as to the identification of the extent of D&#8217;s interest in the extension or the other building and there was sufficient clarity about the rest of the agreement (paras 68-77). There had been no evidence before the judge showing that the parties knew that their agreement was incomplete (para.80)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2010] EWCA Civ 1095",
    "JUDGE": "Arden LJ; Jackson LJ; Morgan J",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Certainty",
        "Constructive Trusts",
        "Oral Contracts",
        "Transfer of Land"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Equity - Assurances - Constructive Trusts - Contracts For Sale of Land - Proprietary Estoppel - Transfer of Land",
    "COUNSEL": "For the appellant: John McDonnell QC, Clare Roberts. For the respondent: Francis Moraes.",
    "COURT": "EWHC",
    "NAME": "Whittaker v Kinnear",
    "YEAR": "2011",
    "CITATION": "Whittaker v Kinnear [2011] EWHC 1479 (QB)",
    "NUMBER": "49",
    "RELATED": [
        "Thorner v Majors",
        "Herbert v Doyle",
        "Clarke v Corless",
        "Geary v Rankine",
        "Jones v Kernott",
        "Gillett v Holt",
        "Rhone v Stephens",
        "Groveholt Ltd v Hughes",
        "Lyus v Prowsa Developments",
        "Walby v Walby",
        "Grant v Edwards",
        "Kinch v Bullard"
    ],
    "SUMMARY": [
        "The doctrine of proprietary estoppel in cases involving the sale of land had survived the enactment of the Law of Property (Miscellaneous Provisions) Act 1989, s.2.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant (W) appealed against a decision that her defence of proprietary estoppel to the respondent&#8217;s possession claim was defeated by the Law of Property (Miscellaneous Provisions) Act 1989 s.2.",
        "W had been the freehold owner and occupier of two adjacent registered titles: her house and garden, and some land. She sold them to the respondent (K) but remained in occupation of the house and garden. K defaulted on a mortgage he had granted over the property, a possession order was obtained against him and receivers were appointed to pursue possession of the property. Notice to quit was served on W, but she did not leave so the receivers issued possession proceedings. W raised the defence of proprietary estoppel, contending that she had sold the land to K at an undervalue on the understanding, based on assurances from K, that she could remain living there as long as she wanted. That arrangement was not mentioned in the sale agreement. Because the case had not been allocated to a track, the hearing was analogous to a summary judgment application. K successfully argued that the defence of proprietary estoppel could not succeed in light of s.2 of the 1989 Act and therefore did not amount to a genuine dispute on substantial grounds under CPR r.55.8. Consequently an order for possession was made against W."
    ],
    "HELD": [
        "Appeal allowed.",
        "(1) Notwithstanding obiter dicta in Cobbe v Yeoman&#8217;s Row Management Ltd [2008] UKHL 55, [2008] 1 W.L.R. 1752, proprietary estoppel in a case involving the sale of land had survived the enactment of s.2, Yaxley v Gotts [2000] Ch. 162 followed, Cobbe considered. There was a distinction to be drawn between commercial and domestic cases, Cobbe and Thorner v Major [2009] UKHL 18, [2009] 1 W.L.R. 776 considered. It was the nature of the parties&#8217; dealings, and not the nature of the property, which determined whether a case should be regarded as commercial or domestic. The judge had been correct to classify the instant case as commercial (see paras 24-32 of judgment). (2) There was no binding authority that answered the issue of whether the assurances given to W by K would create a proprietary estoppel or constructive trust in her favour despite the parties signing a contract of sale that did not mention them. Such clams were fact-sensitive, Thorner v Major , Herbert v Doyle [2010] EWCA Civ 1095, [2011] 1 E.G.L.R. 119 and Stack v Dowden [2007] UKHL 17, [2007] 2 A.C. 432 followed. In the instant case the facts were not sufficiently clear to make a summary determination on the documents. Therefore, the claim was genuinely disputed on grounds that appeared to be substantial within the meaning of CPR r.55.8. Accordingly, the order for possession would be set aside and the case remitted (paras 33-39)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2011] EWHC 1479 (QB)",
    "JUDGE": "Bean J",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Equity",
        "Assurances",
        "Constructive Trusts",
        "Contracts For Sale of Land",
        "Proprietary Estoppel",
        "Transfer of Land"
    ]
},
{
    "CATEGORY": "Civil Evidence Other Related Subjects: Succession - Disclosure - Disclosure Orders - Discovery - Execution - Legal Professional Privilege - Legal Professional Privilege - Wills - Wills",
    "COUNSEL": "For the plaintiff: G Purvis. For the defendant: R Lavery.",
    "COURT": "EWHC",
    "NAME": "Henry v Henry",
    "YEAR": "2007",
    "CITATION": "Henry v Henry [2007] NIQB 67",
    "NUMBER": "50",
    "RELATED": [
        "Mulvaney v Gough",
        "Phipps v Pears",
        "Wood v Waddington",
        "Lees",
        "Patel v Pirabakaran",
        "Kinch v Bullard",
        "Clarke v Corless",
        "Gilbert v Spoor",
        "Ofulue v Bossert",
        "Hounslow LBC v Powell",
        "Copeland v Greenhalf",
        "Bridle v Ruby"
    ],
    "SUMMARY": [
        "No question of legal professional privilege could arise from a self-made will if no legal advice had been sought; however, where the testator had acted upon legal advice when making a will, the execution of the will altered its legal character so that it ceased to be privileged and became subject to the normal rules of discovery and confidentiality.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The applicant (H) applied for an order for discovery of any will made by the respondent (M), his mother, who was still living, in the period relevant to his claim.",
        "H, his father (F) and his brother were farmers in partnership until April 1992. According to H, F had determined in 1994 to apportion his land between his sons and had represented to him that he would receive the home farm and a particular plot of lands. Those lands were transferred by F to M in January 1995. F died in 2005, leaving the land in issue to H&#8217;s brother with a right of residence for M. It was H&#8217;s belief that M, to whom he was closer in 1995, had made a will around that date showing a bequest of the lands to him which would therefore corroborate his claim. However, M refused to disclose her will.SUMMARY H submitted that the confidentiality of a document did not confer immunity from discovery, and that the court could therefore subpoena any person to give evidence in respect of the will or to lodge it in the Probate and Matrimonial Office pursuant to the Administration of Estates (Northern Ireland) Order 1979 art.15."
    ],
    "HELD": [
        "Application granted.",
        "Legal professional privilege covered a document made confidentially for the purposes of legal advice, which included advice as to what should prudently and sensibly be done in the relevant legal context, Balabel v Air India [1988] Ch. 317 and Three Rivers DC v Bank of England (Disclosure) (No.4) [2004] UKHL 48, [2005] 1 A.C. 610 considered. It was an absolute privilege, and not one where the court decided whether or not to order disclosure in the course of a balancing exercise, R. v Derby Magistrates Court Ex p. B [1996] A.C. 487 considered. However, it was arguable that a will was subject to only a limited confidentiality once executed, namely until the testator&#8217;s death; thus it significantly differed in that regard from documents furnished to a lawyer seeking legal advice or the giving of that advice by a lawyer. Moreover, no question of legal professional privilege could arise from a self-made will if no legal advice had been sought. Once executed, a will was no longer covered by the privilege applying to the getting and giving of legal advice; by executing the will, the testator had acted upon the advice. The execution of the will altered the legal character of the document so that it ceased to be privileged and became subject to the normal rules of discovery and confidentiality. Furthermore, the power conferred upon the High Court by art.15 of the 1979 Order to direct that a will be lodged in court supported the view that a will was not purely a private document; it was only a short step from there to say that it could be examined by the court when the interests of justice so demanded. In the instant case, M&#8217;s will was to be disclosed to the court; however, disclosure to H would be confined to any parts that were relevant to the material issues of his case."
    ],
    "CIT": "[2007] NIQB 67",
    "JUDGE": "Deeny J",
    "TYPE": "Case",
    "CATEGORIES": [
        "Civil Evidence Other Related Subjects: Succession",
        "Disclosure",
        "Disclosure Orders",
        "Discovery",
        "Execution",
        "Legal Professional Privilege",
        "Legal Professional Privilege",
        "Wills",
        "Wills"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Contractual Rights - Equitable Interests - Licences - Tenancies at Will - Unilateral Contracts",
    "COURT": "EWCA",
    "NAME": "Errington v Errington",
    "YEAR": "1952",
    "CITATION": "Errington v Errington [1952] 1 KB 290",
    "NUMBER": "51",
    "RELATED": [
        "Antoniades v Villiers",
        "Binions v Evans",
        "Gray v Taylor",
        "AG Securities v Vaughan",
        "Facchini v Bryson",
        "Street v Mountford",
        "Crago v Julian",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Crate v Miller",
        "Harrow LBC v Qazi",
        "Boyer v Warbey",
        "Wright v Macadam"
    ],
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CIT": "[1952] 1 KB 290",
    "JUDGE": "Somervell LJ; Denning LJ; Hodson LJ",
    "SUMMARY": [
        "Licence; lease or; tenancy at will",
        "&#8220;It is of the essence of a tenancy at will that it should be determinable by either party on demand.&#8221; &#8220;The difference between a tenancy and a licence is, therefore, that in a tenancy an interest passes in the land, whereas in a licence it does not. . . . Although a person who is let into exclusive possession is, prima facie, to be considered to be a tenant, nevertheless he will not be held to be so if the circumstances negative any intention to create a tenancy. Words alone may not suffice. Parties cannot turn a tenancy into a licence merely by calling it one. But if the circumstances and the conduct of the parties show that all that was intended was that the occupier should be granted a personal privilege with no interest in the land, he will be held only to be a licensee&#8221;: per Denning, L.J. In 1936 a father bought a house for his son and daughter-in-law to live in. The father put down GBP 250 in cash and borrowed GBP 500 from a building society on the security of the house, repayable with interest by instalments of 15s. a week. He took the house in his own name and made himself responsible for the instalments. The father told the daughter-in-law that the GBP 250 was a present for them, but he left them to pay the building society instalments of 15s. a week themselves. He handed the building society book to the daughter-in-law and said to her: &#8220;Don&#8217;t part with this book. The house will be your property when the mortgage is paid.&#8221; He said that when he retired he would transfer it into their names. The daughter-in-law paid the instalments regularly from that date onwards with the result that much of the mortgage had been repaid. The father, on being informed that the couple could not pay the rates, paid those also. In 1945 the father died leaving the house to his widow. Soon after, the son left his wife. The widow sued her daughter-in-law for possession of the house. Held, (1) there was no tenancy at will as the father could not revoke his promise once the couple entered on performance of the act: his promise would only cease to bind him if they left it incomplete and unperformed, which they had not done; (2) the 15s. which the couple paid was not rent as they were not bound to pay it: the father could not sue for it or distrain for it; he could only refuse to transfer the house to them; (3) the couple were licensees, having a permissive occupation short of a tenancy, but with a contractual right or, at any rate, an equitable right to remain so long as they paid the instalments, which would grow into a good equitable title to the house itself as soon as the mortgage was paid. Lynes v Snaith [1899] 1 Q.B. 486 doubted; Thompson v Earthy [1951] 2 K.B. 596 doubted; and dictum in Foster v Robinson [1951] 1 K.B. 149 doubted"
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Contractual Rights",
        "Equitable Interests",
        "Licences",
        "Tenancies at Will",
        "Unilateral Contracts"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Licences - Sale of Land - Tenancies",
    "COURT": "EWCA",
    "NAME": "Binions v Evans",
    "YEAR": "1972",
    "CITATION": "Binions v Evans [1972] Ch 359",
    "NUMBER": "52",
    "RELATED": [
        "Street v Mountford",
        "AG Securities v Vaughan",
        "Errington v Errington",
        "Gray v Taylor",
        "Antoniades v Villiers",
        "Crate v Miller",
        "Facchini v Bryson",
        "Wright v Macadam",
        "Groveholt Ltd v Hughes",
        "Palk v Mortgage Services",
        "KS Victoria Street v House of Fraser",
        "Corbett v Halifax"
    ],
    "SUMMARY": [
        "Licence; tenancy for life; effect on subsequent purchaser",
        "A person who acquires land expressly subject to a contractual licence is bound by the licence. L1 granted to T, who was the widow of an employee of L1, the right to reside in a cottage. The document described L1 as &#8220;landlord&#8221; and T as &#8220;tenant,&#8221; and by it L1, &#8220;in order to provide a temporary home,&#8221; for T &#8220;but not otherwise,&#8221; agreed to permit her &#8220;to reside in and occupy&#8221; the cottage &#8220;as tenant at will of [L1] free of rent for the remainder of her life or until determined . . . by [T] giving . . . not less than four weeks&#8217; . . . notice.&#8221; T undertook to keep the cottage in repair and not to assign or sublet. L1 sold the property to L2 expressly &#8220;subject to the tenancy of&#8221; T. L2 gave notice to quit to T and sought possession."
    ],
    "HELD": [
        "that the expressions in the agreement as to a tenancy at will and a temporary home were contradictory to others making it clear that the arrangement could only be determined by T on notice or on T&#8217;s death and not by L1. L2 could be in no better position and held on constructive trust to give effect to the agreement. (Bannister v Bannister [1948] 2 All E.R. 133 applied)."
    ],
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CIT": "[1972] Ch 359",
    "JUDGE": "Lord Denning MR; Megaw LJ; Stephenson LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Licences",
        "Sale of Land",
        "Tenancies"
    ]
},
{
    "CATEGORY": "Real Property - Easements - Motor Vehicles - Storage",
    "COURT": "EWHC",
    "NAME": "Copeland v Greenhalf",
    "YEAR": "1952",
    "CITATION": "Copeland v Greenhalf [1952] Ch 488",
    "NUMBER": "53",
    "RELATED": [
        "Phipps v Pears",
        "Batchelor v Marlow",
        "Mulvaney v Gough",
        "Chaffe v Kingsley",
        "Huckvale v Aegean Hotels",
        "Peacock v Custins",
        "Walker v Burton",
        "Wood v Waddington",
        "Herbert v Doyle",
        "Davis v Smith",
        "Phillips v Mobil Oil",
        "Roake v Chadha"
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1952] Ch 488",
    "JUDGE": "Upjohn J",
    "SUMMARY": [
        "Keeping things on neighbouring land",
        "A claim to leave an unlimited number of vehicles for an indefinite time on a strip of land belonging to a neighbour and to enter on that strip to do repair work thereon is not a claim which can be the proper subject-matter of an easement. The defendant claimed an easement to store vehicles on a strip of land 20-35 feet wide and 150 feet long and to repair them on that strip, provided an adequate means of access to the plaintiff&#8217;s orchard was left, such adequate means being a width of something like 10 feet. The defendant established that he and his predecessors had for the last 50 years used that strip of land for such purposes in connection with their business as wheelwrights. Held, the right claimed went wholly outside any normal idea of an easement; it really amounted to a claim to a joint user of the land by the defendant; this was not a claim which could be established as an easement. ( Hill v Tupper 159 E.R. 51 applied; Dyce v Hay (1852) 1 Macq. 305 applied; and Moody v Steggles (1879) 12 Ch. D. 261 applied; Attorney General of Southern Nigeria v John Holt &amp; Co (Liverpool) Ltd [1915] A.C. 599 distinguished)."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Easements",
        "Motor Vehicles",
        "Storage"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Easements - Implied Terms - Leases - Statutory Rights",
    "COURT": "EWCA",
    "NAME": "Wright v Macadam",
    "YEAR": "1949",
    "CITATION": "Wright v Macadam [1949] 2 KB 744",
    "NUMBER": "54",
    "RELATED": [
        "Goldberg v Edwards",
        "Antoniades v Villiers",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Phipps v Pears",
        "Grand Junction Co v Bates",
        "AG Securities v Vaughan",
        "Chaffe v Kingsley",
        "Swift Investments v Combined English Stores",
        "Crago v Julian",
        "Huckvale v Aegean Hotels",
        "Crate v Miller",
        "Batchelor v Marlow"
    ],
    "SUMMARY": [
        "Grant; implied grant; right to use coal shed",
        "The following observations apply to s.62(1) of the Law of Property Act, 1925, which provides that &#8220;a conveyance of land shall be deemed to include and shall by virtue of this Act operate to convey, with the land, all . . . liberties, privileges, easements, rights, and advantages whatsoever appertaining or reputed to appertain to the land, or any part thereof, or, at the time of conveyance demised, occupied, or enjoyed with, or reputed or known as part or parcel of or appurtenant to the land or any part thereof&#8221;: 1. The section is not confined to rights which, as a matter of law, were so annexed or appurtenant to the property conveyed at the time of the conveyance as to make them actual legally enforceable rights. Thus, on severance of a piece of land in common ownership, the quasi easements de facto enjoyed in respect of it by one part of the land over another will pass although, of course, as a matter of law, no man can have a right appendant or appurtenant to one part of his property exercisable by him over the other part of his property. 2. The right, in order to pass, need not be one to which the owner or occupier for the time being of the land has had what may be described as a permanent title. A right enjoyed merely by permission is enough. 3. For the purposes of s.62 it is only necessary that the right should be one capable of being granted at law, or, in other words, a right known to the law. If it is a right of that description, it matters not that it has been, in fact, enjoyed by permission only. 4. The provisions of s.62 cannot apply where in the circumstances of the case there can have been no expectation by the parties that the enjoyment of the right could be other than temporary. In 1941, Mrs. W. was a statutory tenant of two rooms on the top floor of the defendant&#8217;s house, and, by permission separately granted, was using a shed in the garden for the storage of her coal. In 1943, the defendant granted to Mrs. W. and her daughter, the plaintiffs in the action, a new tenancy of the upper flat, including an additional room. The tenancy agreement contained no reference to the coal shed, nor any indication of intention one way or the other whether the plaintiffs were to continue to enjoy the use of the coal shed. A dispute arose between the parties about the plaintiffs&#8217; right to use the coal shed. Held, the fact that Mrs. W. used the coal shed by permission of the defendant could not prevent s.62 from applying. The right to use the coal shed for the purpose of storing such coal as might be required for domestic purposes was a right or easement which the law would recognise. It could not be said that it was in the contemplation of the parties that the enjoyment of the right should be purely temporary. Consequently, the right to use the coal shed was, at the date of the letting in 1943, a right enjoyed with the top floor flat within the meaning of s.62 of the Law of Property Act, 1925, with the result that (as no contrary intention was expressed in the document) the right in question had to be regarded as having passed by virtue of that letting. ( International Tea Stores Co v Hobbs [1903] 2 Ch. 165 applied; Lewis v Meredith [1913] 1 Ch. 571 applied; White v Williams [1922] 1 K.B. 727 applied; Burrows v Lang [1901] 2 Ch. 502 applied; and Birmingham Dudley &amp; District Banking Co v Ross (1888) 38 Ch. D. 295 applied)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1949] 2 KB 744",
    "JUDGE": "Jenkins LJ; Singleton LJ; Tucker LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Easements",
        "Implied Terms",
        "Leases",
        "Statutory Rights"
    ]
},
{
    "CATEGORY": "Real Property - Conveyancing - Easements - Implied Terms - Weather",
    "COURT": "EWCA",
    "NAME": "Phipps v Pears",
    "YEAR": "1965",
    "CITATION": "Phipps v Pears [1965] 1 QB 76",
    "NUMBER": "55",
    "RELATED": [
        "Chaffe v Kingsley",
        "Mulvaney v Gough",
        "Peacock v Custins",
        "Copeland v Greenhalf",
        "Huckvale v Aegean Hotels",
        "Wright v Macadam",
        "Batchelor v Marlow",
        "Wood v Waddington",
        "Phillips v Mobil Oil",
        "Bishop v Blake",
        "Wheeler v JJ Saunders",
        "Gilbert v Spoor"
    ],
    "SUMMARY": [
        "Implied grant; protection from weather",
        "The protection of a structure from the weather is neither an easement nor such a right known to the law as will impliedly pass on a conveyance under the Law of Property Act 1925 s.62 . In about 1930 the common owner of two houses pulled one down and rebuilt it close to, but getting no support from, the other, the nearest walls not being bonded together. He later sold the new house to P, and the old house was sold after his death to R who demolished it, leaving the flank wall of the new house exposed for the first time to the weather, which did damage. P sued R for damages on the footing of an implied easement on the sale to him of a right of protection from weather."
    ],
    "HELD": [
        "that there was no such easement, nor was there a right known to the law which passed on the conveyance to P under s.62 of the Law of Property Act, 1925. ( Dalton v Henry Angus &amp; Co (1881) 6 App. Cas. 740 considered; Wright v Macadam [1949] 2 K.B. 744 applied)."
    ],
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CIT": "[1965] 1 QB 76",
    "JUDGE": "Lord Denning MR; Pearson LJ; Salmon LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Conveyancing",
        "Easements",
        "Implied Terms",
        "Weather"
    ]
},
{
    "CATEGORY": "Real Property - Easements - Parking - Prescription - Rights of Way",
    "COUNSEL": "For B: Bridget Williamson. For M: Mark West.",
    "COURT": "EWCA",
    "NAME": "Batchelor v Marlow",
    "YEAR": "2001",
    "CITATION": "Batchelor v Marlow [2001] EWCA Civ 1051",
    "NUMBER": "56",
    "RELATED": [
        "Mulvaney v Gough",
        "Peacock v Custins",
        "Bridle v Ruby",
        "Chaffe v Kingsley",
        "Huckvale v Aegean Hotels",
        "Wood v Waddington",
        "Copeland v Greenhalf",
        "Stafford v Lee",
        "Wall v Collins",
        "Phipps v Pears",
        "Moncrieff v Jamieson",
        "Wright v Macadam"
    ],
    "SUMMARY": [
        "A right to park cars, on Mondays to Fridays between 9.30 am until 6.00 pm, on a strip of land owned by B was incapable of being an exclusive prescriptive easement because the use of the land was so intrusive as to render B&#8217;s ownership illusory.",
        "B appealed against a decision that M had acquired an exclusive prescriptive right to park up to six cars on Mondays to Fridays between the hours of 9.30 am and 6.00 pm, on a strip of land owned by B ([2001] R.T.R. 12, [2000] C.L.Y. 4630). B contended that the right was incapable of being a valid easement and that the judge&#8217;s findings of fact did not justify a conclusion that such a right had been acquired. B submitted that his ownership of the land had become illusory as a result because (1) the right asserted was exclusive of all others, including his own, and (2) the parking on the land was so intrusive as to prevent any other use of the land being possible during periods when cars were parked. M contended that B had 120 hours of use of the land per week and that in that time he could use it for parking or charging others to park, or alternatively he could sell the land."
    ],
    "HELD": [
        "allowing the appeal, that B had no reasonable use of the land for parking because he was unable to use it during the periods when parking spaces were most likely to be needed. His right to use the land for other purposes was restricted by the times during the week when he could not use the land, and therefore his ownership of the land was illusory. Accordingly the judge had erred in his conclusion since such a right was incapable of being an easement."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2001] EWCA Civ 1051",
    "JUDGE": "Henry LJ; Tuckey LJ; Maurice Kay J",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Easements",
        "Parking",
        "Prescription",
        "Rights of Way"
    ]
},
{
    "CATEGORY": "Real Property - Conveyancing - Easements - Gardens - Implied Covenants - Prescription - Title to Land",
    "COUNSEL": "For M: Jonathan Gaunt Q.C. and Mark Harper. For G: Sean Kelly.",
    "COURT": "EWCA",
    "NAME": "Mulvaney v Gough",
    "YEAR": "2002",
    "CITATION": "Mulvaney v Gough [2002] EWCA Civ 1078",
    "NUMBER": "57",
    "RELATED": [
        "Phipps v Pears",
        "Batchelor v Marlow",
        "Chaffe v Kingsley",
        "Bridle v Ruby",
        "Huckvale v Aegean Hotels",
        "Wood v Waddington",
        "Peacock v Custins",
        "Copeland v Greenhalf",
        "Wheeler v JJ Saunders",
        "Herbert v Doyle",
        "Rhone v Stephens",
        "Roake v Chadha"
    ],
    "SUMMARY": [
        "Cottages sold with joint use of back yard and rights of way - Back yard used for many years as communal garden - Claimant tended flower bed on passage adjacent to her cottage - Defendants removed flower bed without notice to create driveway to access other land - Easement to use land as communal garden could be acquired by prescription - Claimant entitled to right to use land as communal garden but not to reinstatement of flower bed - Defendants could create driveway so long as character of communal garden could be maintained - Claimant entitled to damages for destruction of flower bed without notice.",
        "G, the trustees of the owner of a piece of land, appealed against a declaration that M, the owner of a cottage adjacent to the land who had used the land as part of a communal garden, was entitled to reinstate a flower bed destroyed by G. The conveyance for M&#8217;s cottage had included a right of way over the disputed land. M had contended however that the right was more extensive by reason of use of the land over years. M had tended a garden on the land which included a grassed area and a flower bed. M had returned home one day to find that G, exercising what they believed to be their right over the land, had removed the flower bed in a bid to create a driveway across the land. M had commenced proceedings for, and was granted, a declaration that she was entitled to freehold rights over the land. G&#8217;s subsequent appeal was dismissed on the grounds that the facts of the case were sufficient to found an easement known to law. G argued that the easement was so wide as to be tantamount to a claim to use the land to the exclusion of the trustees, and was an attempt to pass off a claim for adverse possession, which could not succeed because of the communal use of the land, as a claim for an easement. G contended that such an extensive use could not be justified as an easement even if the subject of an express grant, and could not be created by way of prescription."
    ],
    "HELD": [
        "allowing the appeal in part, that M was entitled to use the land as a communal garden but the right did not justify excluding the trustees from any use they may wish to make of the land, Ellenborough Park, Re [1956] Ch. 131 considered. Although G had not created or maintained the communal garden, the land had been used as such since the sale of the cottages. G had been content to allow the owners of the cottages to determine the layout of the garden and maintain it, facts which did not derogate from the conclusion that the trustees had been prepared to set aside the land for use as a communal garden. The declaration granted in favour of M went beyond what was necessary to reflect the right which had been established on the evidence. The restriction on the trustees could only be insofar as was necessary to ensure that the rights of M to use the land as a communal garden for recreational and amenity purposes were protected. In removing M&#8217;s flower bed without notice, G interfered with M&#8217;s rights. However, they were entitled to create a driveway over the land, as it would not necessarily interfere with the rights to use the land as a communal garden, but in carrying out works on the land, G had to ensure that the use of the land as a communal garden for recreational and amenity purposes was maintained."
    ],
    "CIT": "[2002] EWCA Civ 1078",
    "JUDGE": "Simon Brown LJ; Mance LJ; Latham LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Conveyancing",
        "Easements",
        "Gardens",
        "Implied Covenants",
        "Prescription",
        "Title to Land"
    ]
},
{
    "CATEGORY": "Real Property - Damages - Equitable Remedies - Neighbour Disputes - Obstruction - Rights of Way",
    "COUNSEL": "For the claimant: In person with a McKenzie friend. For the defendants: Ian Foster.",
    "COURT": "EWHC",
    "NAME": "Wall v Collins",
    "YEAR": "2009",
    "CITATION": "Wall v Collins [2009] EWHC 2100 (Ch)",
    "NUMBER": "58",
    "RELATED": [
        "Wood v Waddington",
        "Chaffe v Kingsley",
        "Peacock v Custins",
        "Bridle v Ruby",
        "Stafford v Lee",
        "Huckvale v Aegean Hotels",
        "Batchelor v Marlow",
        "Wilkinson v Kerdene",
        "Laskar v Laskar",
        "Herbert v Doyle",
        "Donovan v Rana",
        "Groveholt Ltd v Hughes"
    ],
    "SUMMARY": [
        "The court refused to grant an injunction or make an award of damages in respect of a neighbour dispute concerning a right of way.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The claimant (W) sought remedies to protect his right of way over land owned by the defendants (C) and sought damages for loss of amenity and loss of value of his property caused by intermittent obstructions of the right of way.",
        "W and C lived in adjoining semi-detached properties, W&#8217;s to the north of C&#8217;s. Roads ran to the front and rear of the properties and a passageway to the south of C&#8217;s property afforded access between the two roads. The passageway formed part of C&#8217;s title. It was not a public highway but it was established by the Court of Appeal in Wall v Collins [2007] EWCA Civ 444, [2007] Ch. 390 that W had an express right of way over it. In that case the court held that the right of way was exercisable for the benefit of a double garage constructed by W to the rear of his house. When C acquired their property gates had been erected at both ends of the passageway preventing vehicular access. Those gates were removed following the Court of Appeal&#8217;s decision. The gate at the eastern end was removed immediately, that at the western end some seven months later. W issued the instant claim two days after the western gate was removed. His case was that C had deliberately blocked the passageway both with the gates and with parked cars, and that only a perpetual injunction would protect his right of way."
    ],
    "HELD": [
        "Judgment for defendants.",
        "W&#8217;s claim should never have been brought. By the time he issued his claim form the gates had been removed and the offending parking had ceased. If there were any matters that still required determination the proper course would have been for him to have brought the matter back to court by way of application in the earlier action. It was long-established law that an action for disturbance of a right of way would not lie unless there was a real and substantial interference with its enjoyment having regard to the terms of the express grant. On the facts of the case, both the existence of the gates and the parking of cars in the passageway could constitute a substantial interference with W&#8217;s right of way. Until the removal of the western gate two days before W issued his claim form, he was clearly unable to exercise his vehicular right over the passageway. However, that had to be seen in the context of the fact that in recognising that W had a right of way over the passageway, the Court of Appeal indicated that it was not a right to use it for purposes for which he had a more, or equally, convenient access. While that observation could not stand following the decision in Brooks v Young [2008] EWCA Civ 816, [2008] 3 E.G.L.R. 27, C might for some time have been labouring under a genuine misapprehension as to the extent of W&#8217;s rights, Young referred to. That misapprehension had since been dispelled and C had satisfied the court that they did not intend to obstruct W&#8217;s right of way in the future. There was no ongoing obstruction to W&#8217;s exercise of his right of way and he had not made out any case of sufficient prior obstruction to sound in damages for inconvenience."
    ],
    "CIT": "[2009] EWHC 2100 (Ch)",
    "JUDGE": "Judge Hodge QC",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Damages",
        "Equitable Remedies",
        "Neighbour Disputes",
        "Obstruction",
        "Rights of Way"
    ]
},
{
    "CATEGORY": "Heritable Property - Easements - Parking - Peaceful Enjoyment of Possessions - Proprietary Rights - Scotland",
    "COUNSEL": "For M: IG Mitchell Q.C. For J: Hadjucki Q.C.",
    "COURT": "EWHC",
    "NAME": "Moncrieff v Jamieson",
    "CITATION": "Moncrieff v Jamieson 2005 1 SC 281",
    "NUMBER": "59",
    "RELATED": [
        "Batchelor v Marlow",
        "Lees",
        "Wright v Macadam",
        "Wheeler v JJ Saunders",
        "Mulvaney v Gough",
        "Huckvale v Aegean Hotels",
        "Peacock v Custins",
        "Copeland v Greenhalf",
        "Scott v Southern Pacific Mortgages",
        "Chaffe v Kingsley",
        "Phipps v Pears",
        "Wong v Beaumont Property Trust"
    ],
    "SUMMARY": [
        "easements; proprietary rights; right of vehicular access; extent of grant; Scotland",
        "J, the owner of land over which a servitude right of vehicular access from a public road had been granted in 1973, appealed against a sheriff&#8217;s finding (2004 S.C.L.R. 135) that it included a right to park. M submitted,inter alia, that the physical features of the two tenements were such that it was plain that there had to be a right to turn in the vicinity of their property and a right to unload goods there, which J had conceded, and by the same process of reasoning, it would be unreasonable to deprive the dominant tenement of the right to park vehicles in the vicinity of its boundary and no distinction could be drawn between the right of a visitor to park a vehicle and the right of an occupier to do likewise. That ancillary right was necessary in order to render the right of access effective, which, in the context of the construction of an express grant, was the preferred test to that of whether it was necessary for the convenient and comfortable enjoyment of the property. Alternatively, over the years, the actings of the parties had enlarged the original right of access so as to include parking and M had acquired a servitude right to park by virtue of actings subsequent to 1973. J submitted that the law of Scotland did not recognise any &#8220;free standing&#8221; servitude of parking; a right to park could not, under the law of Scotland, be an incident of a servitude right of access; and neither had been created as an incident of a servitude right of access."
    ],
    "HELD": [
        "dismissing the appeal (Lord Hamilton dissenting), that (1) while a grant of servitude had to be strictly construed, that principle on occasion had to yield to the competing principle that the grant of a right carried with it, by implication, what was necessary to its reasonable enjoyment; (2) in the circumstances of the present case, the right of access had to be construed as including the right to turn and the right to load and unload goods and passengers, and given the particular location of the dominant property, the length of the access route in question and the nature of the terrain traversed by that route, it would be unrealistic to draw a line between those implied rights and the entitlement of a visitor to park his vehicle for the duration of his visit, and having accepted that, there was no real distinction between that and a right on the part of the occupier to park for unlimited periods of time in connection with the reasonable use of his property, and (3) any purchaser of the servient tenement as at 1973 would readily have anticipated all of the foregoing rights as being necessary to the reasonable enjoyment of the dominant tenement."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "2005 1 SC 281",
    "JUDGE": "Lord Marnoch; Lord Hamilton; Lord Philip",
    "TYPE": "Case",
    "CATEGORIES": [
        "Heritable Property",
        "Easements",
        "Parking",
        "Peaceful Enjoyment of Possessions",
        "Proprietary Rights",
        "Scotland"
    ]
},
{
    "CATEGORY": "Civil Procedure Other Related Subjects: Legal Advice and Funding - Human Rights - Access to Justice - After the Event Insurance - Compatibility - Conditional Fee Agreements - Costs - Right to Fair Trial - Success Fees",
    "COUNSEL": "For the appellants: Stephen Hockman QC, Timothy Dutton QC, William Upton, Benjamin Williams. For the respondents: Robert McCracken QC, Sebastian Kokelaar. For the first intervener: Tom Weisselberg QC, Jason Pobjoy. For the second intervener: Robert Weir QC, Harry Steinberg, Achas Burin. For the third intervener: Nicholas Bacon QC, Mark Friston, Greg Cox. For the fourth intervener: Kieron Beal QC. For the fifth intervener: Simon Davenport QC, Tom Poole, Daniel Lewis, Clara Johnson. For the sixth intervener: Attorney General for Northern Ireland. For the seventh intervener: Gavin Millar QC, Chloe Strong. For the eighth intervener: Roger Mallalieu.",
    "COURT": "UKSC",
    "NAME": "Coventry v Lawrence",
    "YEAR": "2015",
    "CITATION": "Coventry v Lawrence [2015] UKSC 50",
    "NUMBER": "60",
    "RELATED": [
        "Barca v Mears",
        "Malik v Fassenfelt",
        "Walker v Burton",
        "Wall v Collins",
        "Ofulue v Bossert",
        "Jones v Kernott",
        "Bishop v Blake",
        "Street v Mountford",
        "Baxter v Mannion",
        "Henry v Henry",
        "Laskar v Laskar",
        "Stafford v Lee"
    ],
    "SUMMARY": [
        "The civil costs regime introduced by the Access to Justice Act 1999 was compatible with ECHR art.6 and Protocol 1 art.1.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; Following its decisions in Coventry (t/a RDC Promotions) v Lawrence [2014] UKSC 13, [2014] A.C. 822 and Coventry v Lawrence [2014] UKSC 46, [2015] A.C. 106, the court was required to determine whether an order for costs made at first instance against the respondent stadium operators infringed ECHR art.6 and Protocol 1 art.1.",
        "The appellant residents lived near a motorsports stadium run by the stadium operators. They claimed that the noise emanating from the track constituted a nuisance and obtained an injunction and damages. The judge ordered the stadium operators to pay 60 per cent of the residents&#8217; costs. Because the residents&#8217; lawyers were acting under a conditional fee agreement (CFA), there was a success fee and an after the event (ATE) insurance premium in addition to the base costs. Pursuant to the costs regime introduced by the Access to Justice Act 1999, the stadium operators were liable for 60 per cent of not only the base costs but also the success fee and the ATE premium.SUMMARY The stadium operators submitted that requiring them to contribute to the success fee and ATE premium infringed their rights under art.6 and Protocol 1 art.1. They submitted that the decision in MGN Ltd v United Kingdom (39401/04) [2011] 1 Costs L.O. 84 that the 1999 Act costs regime was incompatible with art.10 compelled the conclusion that it was also incompatible with art.6 and Protocol 1 art.1."
    ],
    "HELD": [
        "Judgment accordingly.",
        "(Lord Clarke and Lady Hale JJ.S.C. dissenting) The 1999 Act regime sought to improve access to the courts for those with meritorious claims and to impose the cost of all CFA litigation on unsuccessful respondents as a class, Campbell v Mirror Group Newspapers Ltd (Costs) [2005] UKHL 61, [2005] 1 W.L.R. 3394 followed. Pursuant to CPR r.44.4(2)(a), costs had to be proportionate to the matters in issue. The two-stage approach to the assessment of costs prescribed in Lownds v Home Office [2002] EWCA Civ 365, [2002] 1 W.L.R. 2450 applied to base costs, success fees and ATE premiums, Lownds applied. Thus, success fees and ATE premiums would be recoverable as proportionate expenses if they had been necessarily incurred, even if the amount was large in comparison with the amount of damages reasonably claimed, Rogers v Merthyr Tydfil CBC [2006] EWCA Civ 1134, [2007] 1 W.L.R. 808 applied (see paras 26-41 of judgment). The decision in MGN did not compel the conclusion that the 1999 Act regime was incompatible with art.6 or Protocol 1 art.1. The central issue in that case was whether the regime struck a fair balance between the art.10 right to freedom of expression and the art.6 right of access to court. The balancing of the art.6 rights of appellants against those of respondents was a wholly different exercise, MGN considered (paras 50-52). The issue was whether the 1999 Act regime was disproportionate. The courts had to give considerable weight to informed legislative choices, at least where the legislature was seeking to reconcile the competing interests of different groups. Parliament had consulted widely before implementing the Act, and the drafters of the CPR and the Practice Direction were best placed to determine how to strike the appropriate balance. Costs awarded to successful appellants who had the benefit of CFAs could be very high, and the 1999 Act regime had the potential to place respondents under considerable pressure to settle. In a number of individual cases, the scheme might be said to have interfered with a respondent&#8217;s right of access to justice. However, a legislative or regulatory scheme could be compatible with the Convention even if it operated harshly in individual cases, Animal Defenders International v United Kingdom (48876/08) [2013] E.M.L.R. 28 applied. There was a powerful argument that the 1999 Act regime was compatible with the Convention because it was a general measure that was justified by the need to widen access to justice to litigants following the withdrawal of legal aid; had been implemented following wide consultation; and fell within the area of discretionary judgement of the legislature and rule-makers. It was no answer to say that other measures could have been taken which would have operated less harshly on non-rich respondents. The potential unfairness of the regime on unsuccessful litigants was mitigated by the fact that district judges and costs judges were astute to check any practices which might undermine the fairness of the regime. Moreover, respondents could also enter into CFAs and take out ATE insurance. In the absence of a widely accessible civil legal aid system it was impossible to devise a fair scheme which promoted access to justice for all litigants. Indeed, the scheme introduced by the Legal Aid, Sentencing and Punishment of Offenders Act 2012 to replace the 1999 Act regime itself curtailed access to the courts in some respects. Nor was the 1999 Act regime incompatible on the ground that the assessment of the successful party&#8217;s costs did not take account of the paying party&#8217;s financial circumstances. The financial position of the paying party had never been a relevant factor. Overall, the 1999 Act regime was a rational and coherent scheme for providing access to justice to those to whom it would probably otherwise have been denied, and it was subject to safeguards (paras 56-64, 67-72, 83-85)."
    ],
    "FLAGS": [
        "Approved",
        "Hale",
        "Neuberger"
    ],
    "CIT": "[2015] UKSC 50",
    "JUDGE": "Lord Neuberger PSC; Lady Hale DPSC; Lord Mance JSC; Lord Clarke JSC; Lord Dyson JSC; Lord Sumption JSC",
    "TYPE": "Case",
    "CATEGORIES": [
        "Civil Procedure Other Related Subjects: Legal Advice and Funding",
        "Human Rights",
        "Access to Justice",
        "After the Event Insurance",
        "Compatibility",
        "Conditional Fee Agreements",
        "Costs",
        "Right to Fair Trial",
        "Success Fees"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Road Traffic - Public Policy - Rights of Way - Roads",
    "COURT": "EWCA",
    "NAME": "Nickerson v Barraclough",
    "YEAR": "1981",
    "CITATION": "Nickerson v Barraclough [1981] Ch 426",
    "NUMBER": "61",
    "RELATED": [
        "Donovan v Rana",
        "Stafford v Lee",
        "Chaffe v Kingsley",
        "Wilkinson v Kerdene",
        "Batchelor v Marlow",
        "Wood v Waddington",
        "Goldberg v Edwards",
        "Wall v Collins",
        "Best v Chief Land Registrar",
        "Peacock v Custins",
        "Huckvale v Aegean Hotels",
        "Bridle v Ruby"
    ],
    "SUMMARY": [
        "Right of way; public policy",
        "In 1973 P bought a piece of land which was landlocked except for access to a highway over a bridge onto a lane belonging to D, who denied any right of way. P claimed title to a right of way from two conveyances to predecessors in title, one in 1906 giving no right of way until proposed new roads had been built, if ever. In 1922, an adjoining piece of land on the north side was conveyed. P claimed that the 1922 conveyance gave a right of way over the bridge to D&#8217;s land for access to the highway. She also claimed that the 1922 conveyance and the Law of Property Act 1925 s.62 granted the right of way. She further claimed that there was an implied way of necessity in the 1906 conveyance over the sites of new roads, as planned. P succeeded, the Vice Chancellor holding that she had a limited right of way &#8220;as now and heretofore used.&#8221; He further held that the 1906 conveyance would be construed in the interests of public policy so as to imply the grant of a way of necessity. D appealed."
    ],
    "HELD": [
        "allowing the appeal, the doctrine of the way of necessity was based on implication from circumstances, not public policy, which could play no part in the construction of a document. In construing the 1906 document, its express terms were that unless roads were made, there would be no right of way given. Before the 1922 conveyance, the bridge and lane were used for agricultural purposes and amateur sports.s.62 was not concerned with the future, but only with an advantage that could properly be regarded as appertaining to the land granted. Accordingly, P was entitled to the user appertaining at the time of the 1922 conveyance, namely for agricultural and amateur sports purposes."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1981] Ch 426",
    "JUDGE": "Buckley LJ; Eveleigh LJ; Brightman LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Road Traffic",
        "Public Policy",
        "Rights of Way",
        "Roads"
    ]
},
{
    "CATEGORY": "Real Property - Derogation From Grant - Farms - Implied Easements - Implied Reservations - Land Drainage - Necessity - Reciprocity - Rectification - Servient Tenement - Transfer of Land",
    "COUNSEL": "For the claimants: Emily Windsor. For the defendants: Mark Wonnacott.",
    "COURT": "EWHC",
    "NAME": "Walby v Walby",
    "YEAR": "2012",
    "CITATION": "Walby v Walby [2012] EWHC 3089 (Ch)",
    "NUMBER": "62",
    "RELATED": [
        "Donovan v Rana",
        "Walker v Burton",
        "Stafford v Lee",
        "Herbert v Doyle",
        "Davis v Smith",
        "Rhone v Stephens",
        "Bridle v Ruby",
        "Gilbert v Spoor",
        "Whittaker v Kinnear",
        "Peacock v Custins",
        "Colchester BC v Smith",
        "Zarb v Parry"
    ],
    "SUMMARY": [
        "There were no grounds on which to imply into a transfer of part of farming land and buildings an easement of drainage in favour of the retained land, either on the basis of necessity, mutual benefit or to give effect to any intention as to the particular use of the land retained.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; In a claim for rectification of a transfer deed, the court considered whether the second claimant (D), the transferor, had impliedly reserved to himself an easement for drainage for buildings retained by him.",
        "D owned the freehold of land and buildings over which he granted a tenancy to himself and his wife as a farming partnership. In 1989, he executed a transfer of part of the farm to the first defendant (M), his son, by way of gift. The land transferred, which included part of an existing building used for housing cattle and part of a yard in front of the building, was not delineated by a boundary following any physical feature of the building. In 2001, D sold to the first claimant (X), another of his sons, the land which he had retained at the time of the 1989 transfer (the retained land). A specialised drainage system was installed on the farm around the time of the 1989 transfer. On the basis that it was in existence prior to that transfer, D and X claimed that an easement of drainage had been impliedly reserved by the transfer to M.SUMMARY D and X contended that an easement of drainage was impliedly reserved as an easement of necessity; that drainage easements had been both impliedly granted and reserved as reciprocal easements, since the drainage system operated for the benefit of both the land transferred and the retained land; and that the reservation of a drainage easement was necessary to give effect to a common intention of the parties as to a particular use of the retained land."
    ],
    "HELD": [
        "Judgment accordingly.",
        "(1) The Law of Property Act 1925 s.65 had the effect of creating a legal easement in favour of the transferor even where the transfer was not executed by the transferee, whether the reservation was express or implied. Thus, the fact that M did not execute the 1989 transfer did not preclude D and X from arguing that the transfer impliedly reserved easements to D in relation to the retained land (see para.27 of judgment). (2) The test for implying an easement of necessity was a strict one. It was not enough to show that the easement was necessary for the reasonable enjoyment of the land retained; the facts had to be such that the retained land could not be used at all without the implication of an easement, Union Lighterage Co v London Graving Dock Co [1902] 2 Ch. 557 and MRA Engineering Ltd v Trimster Co Ltd (1988) 56 P. &amp; C.R. 1 applied. In the instant case, there were no grounds on which to imply the reservation of a drainage easement on the basis of necessity because the absence of such an easement did not have much impact on the use that could be made of the retained part of the building and the yard, which were not self-contained parts (paras 32, 49). (3) The movement of effluent and other liquid began on the retained land. If the transfer had reserved a right to drain onto the land transferred, then the land transferred would have the burden of dealing with that effluent. However, if there were no reserved right of drainage, then the land transferred could refuse to accept effluent from the retained land. As it was far from clear that there would be an implied grant of a drainage easement in favour of the land transferred over the land retained, it was difficult for D and X to establish the case for an implied reservation of a drainage easement from the retained land onto the land transferred. The flow of effluent and other liquid onto the land transferred would be an obvious burden in excess of any arguable benefit. There was therefore no implied derogation from the express grant to M and no reason to hold that he took the land transferred in 1989 subject to the burden of being obliged to deal with effluent water from the land retained, Pyer v Carter 156 E.R. 1472 considered (paras 50-51, 56-58). (4) Given the factual findings in the instant case, it was not possible to hold that a drainage easement should be impliedly reserved to give effect to an intention that the retained land should be used in some definite and particular manner. It was therefore not possible to imply into the 1989 transfer the reservation of an easement of drainage in favour of the retained land (paras 59-60)."
    ],
    "CIT": "[2012] EWHC 3089 (Ch)",
    "JUDGE": "Morgan J",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Derogation From Grant",
        "Farms",
        "Implied Easements",
        "Implied Reservations",
        "Land Drainage",
        "Necessity",
        "Reciprocity",
        "Rectification",
        "Servient Tenement",
        "Transfer of Land"
    ]
},
{
    "CATEGORY": "Real Property - Conveyances - Implied Easements - Intention - Residential Use - Rights of Way - Uses",
    "COUNSEL": "For the defendants: Jacqueline Baker. For the plaintiffs: Philip Rossdale.",
    "COURT": "EWCA",
    "NAME": "Stafford v Lee",
    "YEAR": "1993",
    "CITATION": "Stafford v Lee (1993) 65 P &amp; CR 172",
    "NUMBER": "63",
    "RELATED": [
        "Donovan v Rana",
        "Bridle v Ruby",
        "McDowall v Hirschfield Lipson",
        "Batchelor v Marlow",
        "Wood v Waddington",
        "Wall v Collins",
        "Walby v Walby",
        "Sava v SS Global Ltd",
        "Peacock v Custins",
        "Chaffe v Kingsley",
        "Wilkinson v Kerdene",
        "Huckvale v Aegean Hotels"
    ],
    "SUMMARY": [
        "In determining whether an intended easement should be implied, the requirement that the parties should have intended a definite and particular use of the land conveyed did not require that the intention be proved as a certainty. It was enough that it was proved on the balance of probabilities.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The defendants (L) appealed against a decision of a county court judge declaring that the plaintiffs (S) were entitled to a right of way along a section of roadway owned by L.",
        "S owned an area of woodland, and had been granted planning permission to build a dwelling on it. The only practicable means of access to the land was over and along L&#8217;s roadway. S&#8217;s land had been transferred to the original owner in 1955 by a deed of gift. The deed described the land conveyed as having a frontage to the roadway, but contained no express grant of a right of way over it. S claimed entitlement to an &#8220;intended easement&#8221;, as described in Pwllbach Colliery Co Ltd v Woodman [1915] A.C. 634. L admitted in their defence that the 1955 deed passed to the donee a right to use the roadway, and that that right had passed to S. However, their case was that the right was limited to use for all purposes necessary for the reasonable enjoyment of the land as woodland, which was the manner of its enjoyment in 1955. The judge held that S could establish an entitlement to the easement based on the Pwllbach Colliery principle.SUMMARY"
    ],
    "HELD": [
        "Appeal dismissed",
        "Appeal dismissed. (1) Intended easements, like all other implied easements, were subject to the general rule that they were implied more readily in favour of a grantee than a grantor. Nevertheless, the parties had to intend that the subject of the grant should be used in some definite and particular manner. If the grantee could establish the requisite intention, the law would then imply the grant of such easements as might be necessary to give effect to it, Pwllbach Colliery applied. It was axiomatic that in construing any conveyance, the facts in reference to which it was made had to be taken into account. In the instant case, no extrinsic evidence had been adduced, so the court could only refer to the 1955 deed. The material question in the instant case was not how the land was enjoyed in 1955, but whether the parties to the deed had intended that it should be used in some definite and particular manner. The requirement that the parties should have intended a definite and particular use of the land did not require that the intention be proved as a certainty. It was enough that it was proved on the balance of probabilities. (2) The plan annexed to the deed could be relied upon for the purpose of establishing the parties&#8217; intention as to the use to which the land should be put. It was part of the material agreed on by the parties: there was no reason why their common intention, if it was not expressed, should not be implied from that as much as from any other part of the agreed material. The plan delineated, as the land conveyed, a plot adjoining two other similar-sized plots on which dwellings had already been constructed. On the balance of probabilities, the parties could only have intended that the land should be used for the construction of another dwelling to be used thereafter for residential purposes. No other intention could reasonably be imputed to them. The easements claimed by S and declared in their favour by the judge were necessary, and were no more than was necessary, to give effect to the intention so established."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "(1993) 65 P &amp; CR 172",
    "JUDGE": "Nourse LJ; Russell LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Conveyances",
        "Implied Easements",
        "Intention",
        "Residential Use",
        "Rights of Way",
        "Uses"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Civil Procedure - Easements - Necessity - Restaurants - Right to Air",
    "COURT": "EWCA",
    "NAME": "Wong v Beaumont Property Trust",
    "YEAR": "1965",
    "CITATION": "Wong v Beaumont Property Trust [1965] 1 QB 173",
    "NUMBER": "64",
    "RELATED": [
        "Huckvale v Aegean Hotels",
        "Phipps v Pears",
        "Chaffe v Kingsley",
        "Shaw v Applegate",
        "Hounslow LBC v Minchinton",
        "Walby v Walby",
        "Peacock v Custins",
        "Donovan v Rana",
        "Wheeler v JJ Saunders",
        "Mulvaney v Gough",
        "Moncrieff v Jamieson",
        "Batchelor v Marlow"
    ],
    "SUMMARY": [
        "Necessity; necessity not realised at time of grant",
        "An easement of necessity may impliedly be granted even though the parties did not realise that necessity at the time of the grant. A basement was let as a restaurant, the tenant covenanting to use the premises as a popular restaurant, to control and eliminate all smells and odours and to comply with the health regulations, one of which requires suitable ventilation. There was no such ventilation, though it was not realised at that time that a duct was necessary for this, and the tenant under the lease sued the landlord in the county court for damages and a declaration that he was entitled to erect a duct to the roof."
    ],
    "HELD": [
        "that (a) the county court had jurisdiction, on the assumption, not disproved by the evidence, that the rateable value of neither of the properties exceeded GBP 400; (b) there was an easement of necessity and the declaration should be made. ( Pwllbach Colliery Co Ltd v Woodman [1915] A.C. 634 applied)."
    ],
    "FLAGS": [
        "Denning"
    ],
    "CIT": "[1965] 1 QB 173",
    "JUDGE": "Lord Denning MR; Pearson LJ; Salmon LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Civil Procedure",
        "Easements",
        "Necessity",
        "Restaurants",
        "Right to Air"
    ]
},
{
    "CATEGORY": "Real Property - Conveyancing - Easements - Implied Terms - Rights of Way - Time Limits",
    "COUNSEL": "For C: John Dagnall. For K: William Ainger.",
    "COURT": "EWHC",
    "NAME": "Chaffe v Kingsley",
    "YEAR": "1999",
    "CITATION": "Chaffe v Kingsley (1999) 77 P &amp; CR 281",
    "NUMBER": "65",
    "RELATED": [
        "Phipps v Pears",
        "Huckvale v Aegean Hotels",
        "Wood v Waddington",
        "Peacock v Custins",
        "Batchelor v Marlow",
        "Mulvaney v Gough",
        "Wall v Collins",
        "Bridle v Ruby",
        "Goldberg v Edwards",
        "Wright v Macadam",
        "Stafford v Lee",
        "Copeland v Greenhalf"
    ],
    "SUMMARY": [
        "conveyancing; alleged right of way; 70 year old right to enter property and build road; validity",
        "C acquired a property at the end of a road which was a public highway. K owned the adjacent property and alleged that he had a right to enter C&#8217;s property and construct an extension of the road across it over which K would have a right of way. C derived his title from two conveyances in 1928 and 1930. The plans to both deeds showed a projected extension of the road but in the deeds there were no words of reservation to the vendor of any rights over the land. K argued that the terms of the two deeds and the plans attached to them showed that the rights were intended to be created. C argued that any rights, if created, would be defeated by the rule against perpetuities, by abandonment or by estoppel."
    ],
    "HELD": [
        "giving judgment for C, that the basic principle was that in a conveyance the grantor was taken to be conferring upon the grantee a clear title free from any adverse rights. However there might be cases where the terms of a deed gave rise to an easement as a matter of construction. The implication would only arise where there was the necessary inference as to common intention and only to the extent necessary to give effect to that common intention. In the instant case there were grounds for finding that there was an implication of some rights in favour of the vendor. The parties contemplated an extension of the road as indicated on the plans and intended that, as the road was formed, the vendor would have a right of way over the road. Any right which might be implied was limited to a right of entry to carry out the vendor&#8217;s then existing scheme and to make up the road within a reasonable time. That was the only implication necessary to give effect to the common intention of the parties, on that basis the term did not offend against the rule against perpetuities and was not defeated by arguments based on abandonment or estoppel. As the right was a right to enter and make up the road within a reasonable time the right had long since ceased to exist. A right to form the road at any time in the future [could not be implied]."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "(1999) 77 P &amp; CR 281",
    "JUDGE": "Judge Maddocks",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Conveyancing",
        "Easements",
        "Implied Terms",
        "Rights of Way",
        "Time Limits"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Torts - Implied Easements - Necessity - Nuisance - Rights of Way - Trespass to Land - Utilities",
    "COUNSEL": "For the appellants: Nicholas Isaac (Direct Access). For the respondents: Peter Fox (Direct Access).",
    "COURT": "EWCA",
    "NAME": "Donovan v Rana",
    "YEAR": "2014",
    "CITATION": "Donovan v Rana [2014] EWCA Civ 99",
    "NUMBER": "66",
    "RELATED": [
        "Stafford v Lee",
        "Walby v Walby",
        "Batchelor v Marlow",
        "Bridle v Ruby",
        "Huckvale v Aegean Hotels",
        "Chaffe v Kingsley",
        "Wong v Beaumont Property Trust",
        "Wheeler v JJ Saunders",
        "Wall v Collins",
        "Nickerson v Barraclough",
        "Peacock v Custins",
        "Wood v Waddington"
    ],
    "SUMMARY": [
        "An easement was implied into the transfer of a building plot allowing the transferee and his successors in title access to a plot of land to install and maintain connections to the public utility services in the road. The easement was necessary to achieve the inferred common intention of the parties that the building of a dwelling-house on the building plot would have included the connection to mains utility services across the obvious route.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellants (D) appealed against the dismissal of their claim for damages against the respondents (R) for having dug up a small plot of land (&#8220;the blue land&#8221;) forming part of D&#8217;s property to connect utilities to R&#8217;s building plot.",
        "At auction D had sold the building plot adjoining their property with an express right of way over the blue land which separated the building plot from the road. The transfer granted an express right to pass over the blue land &#8220;for all purposes connected with the use and enjoyment of the land but not for any other purpose&#8221;. It included a provision that, save for any express rights of way or access, no rights of way or access for the benefit of the property over the blue land would be &#8220;expressly implied granted or reserved&#8221;. R were the successors in title to the original purchasers of the building plot and built a house on it. Without D&#8217;s express permission, R allowed workmen to dig up the blue land in order to connect their utilities to the mains service a few metres away in the road. The judge dismissed D&#8217;s claim on the basis that it was the common intention of the parties to the original transfer of the building plot that it would be used to build a house with modern facilities connected up to the street. He held that there was an implication of a right to connect through the blue land and that, once a common intention to install utility connections had been established, it followed that rights of access that had already been granted could be used for putting in those connections.SUMMARY D submitted that (1) the transfer expressly excluded any further rights of access so that the judge was wrong to imply an easement that included further rights; (2) the judge was wrong to infer an intention that any house built on the building plot would be connected to all normal utilities and to have found an implied grant of easements that far exceeded what was necessary to give effect to the common intention of building a house."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) The judge was right to hold that the express provisions of the transfer did not exclude the implied easement which he held to exist. The transferee was granted an express right of way over the blue land for the use and enjoyment of the land and one such purpose was the laying of connections to utilities. Accordingly, if there was an easement of necessity allowing such connections to be laid or maintained, a right of way to facilitate it would already exist on the blue land. The proposed easement did not violate the inhibitions stated in the transfer (see paras 16-18 of judgment). (2) The amended defence had pleaded an inferred and implied easement of necessity. The blue land was undoubtedly intended for access to both properties. It was clear from the auction particulars that the purpose of the transfer was to enable the transferee to build a dwelling-house on the building plot. The suggestion that such a dwelling-house might sensibly be expected by the parties to be constructed without connections to the mains utilities was optimistic. The judge was right, applying Lord Parker&#8217;s second test in Pwllbach Colliery Co Ltd v Woodman [1915] A.C. 634, the parties must be taken to have intended that the building of a dwelling-house on the building plot would have included the connection to mains utility services across the obvious route of the blue land, Pwllbach and Stafford v Lee (1993) 65 P. &amp; C.R. 172 followed. The easement proposed was necessary to achieve the parties&#8217; expressly intended purpose. It was not seeking to manufacture a necessity out of what was merely reasonable or desirable (paras 26-29, 32-33). (3) The easement was to be implied into the transfer allowing the transferee and his successors in title access to the blue land to install and maintain connections to the public utility services in the road (para.34)."
    ],
    "CIT": "[2014] EWCA Civ 99",
    "JUDGE": "Moore-Bick LJ; Rimer LJ; Vos LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Torts",
        "Implied Easements",
        "Necessity",
        "Nuisance",
        "Rights of Way",
        "Trespass to Land",
        "Utilities"
    ]
},
{
    "CATEGORY": "Torts - Easements - Nuisance - Odours - Pigs - Planning Permission",
    "COUNSEL": "For S: Gregory Stone Q.C. and Charles Auld. For W: Joseph Harper Q.C. and David Phillips.",
    "COURT": "EWCA",
    "NAME": "Wheeler v JJ Saunders",
    "YEAR": "1996",
    "CITATION": "Wheeler v JJ Saunders [1996] Ch 19",
    "NUMBER": "67",
    "RELATED": [
        "Phipps v Pears",
        "Moncrieff v Jamieson",
        "Peacock v Custins",
        "Batchelor v Marlow",
        "Wright v Macadam",
        "Huckvale v Aegean Hotels",
        "Mulvaney v Gough",
        "Chaffe v Kingsley",
        "Copeland v Greenhalf",
        "Donovan v Rana",
        "Wong v Beaumont Property Trust",
        "Wilkinson v Kerdene"
    ],
    "SUMMARY": [
        "Smell; pig housing units erected in close proximity to neighbouring dwellings pursuant to planning permission; whether grant of planning permission constituting defence to action in nuisance",
        "P bought a farmhouse and outbuildings on land adjacent to D&#8217;s pig farm. Both P&#8217;s property and the farmland were formerly in common ownership. There were two means of access to P&#8217;s property, one of which (&#8220;the south entrance&#8221;) could only be reached by crossing a part of D&#8217;s land but there was no express right of way and D took the view that P were not entitled to use it and blocked it off with a wall. D also applied for and, despite P&#8217;s objections, obtained planning permission to build two pig housing units on their land, one of which was only a few metres away from one of P&#8217;s outbuildings which was used as a holiday cottage. In proceedings, P obtained damages against D for obstructing a right of way to their property with the new wall and for nuisance in the form of smell from the pigs in the housing units, and injunctions requiring D to demolish the wall and restraining them from keeping pigs in the housing units. On D&#8217;s appeal P contended for an implied grant in their conveyance of an easement of necessity entitling them to a right of way over D&#8217;s land. D argued that no such right was intended and, as regards the nuisance, contended that since they had obtained planning permission for the pig housing units, any smell emanating therefrom could not amount to a nuisance in law."
    ],
    "HELD": [
        "allowing the appeal in part, that (1) the class of easements implied in favour of a grantee included easements necessary to the reasonable enjoyment of the property granted and which had been and were at the time of the grant used by the owners of the entirety for the benefit of the part granted but that, on the facts, the south entrance to P&#8217;s property was not necessary for its reasonable enjoyment since the other entrance would do just as well and it followed that P acquired no right of way through the south entrance, Wheeldon v Burrows (1879) 12 Ch. D. 31, Sovmots Investments Ltd v Secretary of State for the Environment [1979] A.C. 144 considered; (2) unlike Parliament, a planning authority had no jurisdiction to authorise a nuisance save insofar as it had a statutory power to permit a change in the character of a neighbourhood and the nuisance was such that it inevitably resulted from the authorised use, and (3) in the present case, the planning permission granted was not a strategic planning decision affected by considerations of public interest but amounted only to a change of use of a small piece of land for the benefit of P and to the detriment of the objectors in the quiet enjoyment of their house and as such it followed that the judge was entitled to conclude that the planning consents did not prevent P from succeeding in their claim in nuisance, Allen v Gulf Oil Refining Ltd [1981] A.C. 1001 considered."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1996] Ch 19",
    "JUDGE": "Staughton LJ; Gibson LJ; Sir John May",
    "TYPE": "Case",
    "CATEGORIES": [
        "Torts",
        "Easements",
        "Nuisance",
        "Odours",
        "Pigs",
        "Planning Permission"
    ]
},
{
    "CATEGORY": "Real Property - Conveyancing - Express Grant - Rights of Way - Statutory Easements",
    "COUNSEL": "For the appellants: Jonathan Karas QC, Simon Atkinson. For the respondent: Jonathan Gaunt QC.",
    "COURT": "EWCA",
    "NAME": "Wood v Waddington",
    "YEAR": "2015",
    "CITATION": "Wood v Waddington [2015] EWCA Civ 538",
    "NUMBER": "68",
    "RELATED": [
        "Chaffe v Kingsley",
        "Bridle v Ruby",
        "Huckvale v Aegean Hotels",
        "Phipps v Pears",
        "Batchelor v Marlow",
        "Mulvaney v Gough",
        "Peacock v Custins",
        "Stafford v Lee",
        "Wall v Collins",
        "Nickerson v Barraclough",
        "Bishop v Blake",
        "Sava v SS Global Ltd"
    ],
    "HELD": [
        "Appeal allowed.",
        "(1) The usual meaning of continuous under cl.12 was uninterrupted or unbroken: the right or advantage claimed was a right to use the ways, not the ways themselves. It was clear that it was the use that had to be continuous. The reasonable reader would interpret cl.12 in that conventional sense and as confined to easements of that category. The claimed rights of way were not among them. The claim based on the express terms of cl.12 failed (see paras 21, 23 of judgment). (2) Section 62 could only operate to grant easements where there had not been diversity of occupation on the basis that the exercise of the relevant rights had been continuous and apparent, Alford v Hannaford [2011] EWCA Civ 1099, [2012] 1 P. &amp; C.R. DG2 applied. However, if a quasi-easement fell within the category of easements that were &#8220;enjoyed with&#8221; the land conveyed then there was no additional requirement that an easement had to be necessary for the reasonable enjoyment of the land under s.62, Watts v Kelson (1870-71) L.R. 6 Ch. App. 166 considered. The applicability of s.62 depended on the features observable at the date of the conveyance and the use made of the claimed rights: in relation to the first easement there were sufficient signs on the ground for the claimed route to have been continuous and apparent, Wheeldon v Burrows (1879) 12 Ch. D. 31 applied. The judge had found that the claimed route had been used once a month in the period immediately preceding the transfers; once a month did not fall short of a regular pattern of use, Diment v NH Foot Ltd [1974] 1 W.L.R. 1427 applied. That was sufficient to count as &#8220;enjoyment&#8221; for the purposes of s.62. In relation to the second claimed right of way, it too was continuous and apparent, and there was sufficient evidence of vehicular use to demonstrate that it was enjoyed along with the remainder of the track that had been conveyed to the appellants&#8217; predecessors in title. As to the scope of those rights, and a mismatch between proved and claimed uses, the more onerous included the less onerous, but that did not extend to a right to drive animals, White v Richards [1993] R.T.R. 318 applied. In the instant case where the right was described in terms of the use proved, namely with vehicles, that also entitled the grantee to use the way on foot or on horseback, but not to drive animals. However, any rights of way on horseback were not restricted to use for domestic purposes: since there were already stables on the land, the mere fact that the appellants started a livery business did not amount to a radical change in the dominant tenement, on which the servient owner&#8217;s right to object depended, McAdams Homes Ltd v Robinson [2004] EWCA Civ 214, [2005] 1 P. &amp; C.R. 30 applied (paras 26, 35-37, 48, 53-55, 57, 66, 75-76, 78-79, 81)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2015] EWCA Civ 538",
    "JUDGE": "Richards LJ; Lewison LJ; McCombe LJ",
    "SUMMARY": [
        "Landowners were entitled to claim two rights of way under the Law of Property Act 1925 s.62 over neighbouring land as the easements which would allow access to tracks were continuous and apparent, and there had been sufficient evidence of use.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellants appealed against a decision that they did not enjoy rights of way over neighbouring land owned by the respondent.",
        "In 1998, a parcel of land had been sold in parts; the appellants&#8217; predecessors in title acquired one part, and the respondent acquired the other part. The land was crossed by various farm tracks and two public bridleways. At issue was the appellants&#8217; entitlement, as successors in title, to access a track and gain access to a public road (easement one), and whether they were entitled to cross another stretch of track on foot or horseback (easement two). At the time of transfer, the appellants&#8217; land included stables, but they had since begun a livery business. Their claim for rights of way based on an express grant under the transfer of title, and a claim under the Law of Property Act 1925 s.62, had been dismissed. The issues were whether the appellants enjoyed rights of way (i) which were the subject of an express grant as a right of a &#8220;continuous nature&#8221; under cl.12 of the transfer; (ii) under s.62 as an advantage enjoyed with the land at the time of conveyance, and if so, the scope of such rights.SUMMARY The respondent submitted that any rights under easement two to use the rights of way on horseback were limited to use for domestic purposes, as the appellants&#8217; livery business did not exist at the time of conveyance to their predecessors in title."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Conveyancing",
        "Express Grant",
        "Rights of Way",
        "Statutory Easements"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Implied Terms - Leases - Rights of Way - Statutory Rights",
    "COURT": "EWCA",
    "NAME": "Goldberg v Edwards",
    "YEAR": "1950",
    "CITATION": "Goldberg v Edwards [1950] Ch 247",
    "NUMBER": "69",
    "RELATED": [
        "Wright v Macadam",
        "Chaffe v Kingsley",
        "Grand Junction Co v Bates",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Antoniades v Villiers",
        "AG Securities v Vaughan",
        "Crago v Julian",
        "Swift Investments v Combined English Stores",
        "Wood v Waddington",
        "Bridle v Ruby",
        "Donovan v Rana",
        "Stafford v Lee"
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1950] Ch 247",
    "JUDGE": "Sir Raymond Evershed MR",
    "SUMMARY": [
        "Grant; implied grant; right of access to back land",
        "In s.62(2) of the Law of Property Act, 1925, which provides that &#8220;a conveyance of land, having houses or other buildings thereon, shall be deemed to include and shall by virtue of this Act operate to convey, with the land all . . . rights, and advantages whatsoever, appertaining or reputed to appertain to the land, houses or other buildings conveyed, or any of them, or any part thereof, or, at the time of conveyance, demised, occupied or enjoyed with, or reputed or known as part or parcel of or appurtenant to, the land, houses, or other buildings conveyed, or any of them, or any part thereof&#8221;, the expression &#8220;at the time of conveyance&#8221; means in the case of a lease, not the date from which the term granted by the lease runs, but the date of the instrument in writing, if there is one. Such a right may be personal to the lessees qua lessees. The owner of a house agreed to let to tenants for two years from January 18, 1947, an annexe at the back of her house. Access to the annexe was permitted to the tenants through the house, though there was other access to it from waste land at the back. On July 10, 1947, the lease was executed. The landlord then let the house to another tenant, who purported to bar the access through it to the annexe. Held, (1) it required strong evidence to show that a right to pass through another&#8217;s premises &#8220;was necessary for the reasonable and convenient enjoyment&#8221; of premises behind, and, therefore, there could be no implied grant apart from s.62 of the Law of Property Act, 1925; (2) under the provisions of that section the tenants had, however, established a right in themselves alone as lessees, and not in their servants or workmen or persons authorised by them, to pass through the house to and from the annexe. ( Wright v Macadam [1949] 2 K.B. 744 applied)."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Implied Terms",
        "Leases",
        "Rights of Way",
        "Statutory Rights"
    ]
},
{
    "CATEGORY": "Real Property - Easements - Rights of Way",
    "COUNSEL": "For P: Thomas Dumont. For C: Timothy Morshead.",
    "COURT": "EWCA",
    "NAME": "Peacock v Custins",
    "YEAR": "2002",
    "CITATION": "Peacock v Custins [2002] 1 WLR 1815",
    "NUMBER": "70",
    "RELATED": [
        "Huckvale v Aegean Hotels",
        "Batchelor v Marlow",
        "Chaffe v Kingsley",
        "Mulvaney v Gough",
        "Wood v Waddington",
        "Phipps v Pears",
        "Copeland v Greenhalf",
        "Wall v Collins",
        "Bridle v Ruby",
        "Stafford v Lee",
        "Colchester BC v Smith",
        "Rhone v Stephens"
    ],
    "HELD": [
        "allowing the appeal and granting the declaration sought, that the right to use a right of way was determined by the terms of the grant and anything outside those terms amounted to trespass, Harris v Flower &amp; Sons (1905) 74 L.J. Ch. 127 applied. The correct test was not concerned with making a comparison between the amount of use made of the servient tenement and the amount of use that might lawfully be made within the scope of the grant, it was concerned with declaring the scope of the grant having regard to its purposes and the identity of the dominant tenement. The burden on the servient tenement, defined as any amount of use, could not be increased without the consent of the servient tenement owner and the use of the right of way to cultivate the adjoining land could not be described as ancillary to the cultivation of the dominant land."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2002] 1 WLR 1815",
    "JUDGE": "Schiemann LJ; Mance LJ; Smith J",
    "SUMMARY": [
        "C, the owner of a servient tenement, appealed against the judge&#8217;s refusal to grant a declaration that P, the owner of the dominant tenement, was not entitled to use a right of way to gain access to land lying adjacent to the dominant tenement for the purpose of cultivating that land in conjunction with the cultivation of the dominant tenement. C contended that such use fell outside the scope of the relevant easement and therefore amounted to trespass. The court held that (1) the right to use a right of way was to be determined by the terms of the grant with the result that anything outside those terms amounted to trespass, and (2) the burden on the servient land could not be increased without the consent of the owner of that land.",
        "C appealed against a decision refusing a declaration that P was not entitled to use a right of way to gain access to land lying adjacent to the dominant tenement, in order to cultivate the land in conjunction with the cultivation of the dominant tenement. It was contended that such use fell outside the scope of the easement and as such amounted to trespass. P submitted that the use contended for did not impose a significantly heavier practical burden on C than that which was willingly assumed."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Easements",
        "Rights of Way"
    ]
},
{
    "CATEGORY": "Real Property - Mistake - Prescription - Rights of Way",
    "COURT": "EWCA",
    "NAME": "Bridle v Ruby",
    "YEAR": "1989",
    "CITATION": "Bridle v Ruby [1989] QB 169",
    "NUMBER": "71",
    "RELATED": [
        "Batchelor v Marlow",
        "Chaffe v Kingsley",
        "Stafford v Lee",
        "Wood v Waddington",
        "Peacock v Custins",
        "Mulvaney v Gough",
        "Huckvale v Aegean Hotels",
        "Wall v Collins",
        "Bishop v Blake",
        "Copeland v Greenhalf",
        "Harris v Goddard",
        "Zarb v Parry"
    ],
    "SUMMARY": [
        "Right of way; grant; mistaken belief of existence of express grant; user for 22 years; presumption of lost modern grant",
        "A presumption of a lost modern grant was not rebutted by a mistaken belief as to the right of way over the land. The transfers to the predecessors in title of both the plaintiff and defendant originally reserved to the transferor and his successors a right of way over the driveway of the property. That reservation was deleted in both cases. G, the plaintiff&#8217;s predecessor in title, built a garage on his property, access to which was obtained over the driveway of the property next door. G and his successors in title, including the plaintiff, used the driveway in the mistaken belief that the conveyance gave them the right to do so. In 1981 the defendant denied that the plaintiff had a right of way. The plaintiff sought a declaration in the county court. The judge held that user for a period of 22 years had been established and the plaintiff was entitled to succeed on the presumption of a lost modern grant to G. The defendant appealed."
    ],
    "HELD": [
        "that the mistaken belief of G&#8217;s successors in title that the conveyance reserved a right of way did not prevent uninterrupted user from becoming a right by prescription. The mistaken belief did not afford an explanation for the user that rebutted the presumption. The judge&#8217;s finding that the origin of the user was consistent only with permission being granted by the defendant&#8217;s predecessor in title meant a finding of permanent and irrevocable permission attributable to a lost modern grant. The appeal would be dismissed ( Earl de la Warr v Miles (1881) 17 Ch. D. 535 and Tehidy Minerals v Norman [1971] 2 Q.B. 528 applied; Chamber Colliery Co v Hopwood (1886) 32 Ch. D. 549 distinguished)."
    ],
    "CIT": "[1989] QB 169",
    "JUDGE": "Parker LJ; Ralph Gibson LJ; Caulfield J",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Mistake",
        "Prescription",
        "Rights of Way"
    ]
},
{
    "CATEGORY": "Real Property - Easements - Extinguishment - Interlocutory Injunctions - Rights of Way",
    "COURT": "EWCA",
    "NAME": "Huckvale v Aegean Hotels",
    "YEAR": "1989",
    "CITATION": "Huckvale v Aegean Hotels (1989) 58 P &amp; CR 163",
    "NUMBER": "72",
    "RELATED": [
        "Chaffe v Kingsley",
        "Peacock v Custins",
        "Batchelor v Marlow",
        "Wood v Waddington",
        "Copeland v Greenhalf",
        "Stafford v Lee",
        "Phipps v Pears",
        "Mulvaney v Gough",
        "Wall v Collins",
        "Bridle v Ruby",
        "Colchester BC v Smith",
        "Wilkinson v Kerdene"
    ],
    "SUMMARY": [
        "Extinguishment; change of circumstances; whether serious triable issue; whether interlocutory injunction to be granted to prevent building",
        "An easement may be extinguished where there is no longer any practical possibility of it ever benefiting the dominant tenement, but the question whether this has occurred raises a serious triable issue. H owned premises used as a bakery business. They sold a plot of land at the rear to V Co., the predecessors in title of A Co., for use as a car park for their adjacent hotel. They reserved a right of way over it and also received rights of way over other land belonging to V Co. The latter were never registered and became unenforceable when the land was conveyed to A Co. A Co. then sought to build on the car park, and argued that H&#8217;s right of way over it had been complementary to the rights, which were now unenforceable, and was thus extinguished."
    ],
    "HELD": [
        "that an interlocutory injunction would be granted to restrain interference with H&#8217;s right of way as there was a serious triable issue as to whether the easement had been extinguished ( Ellenborough Park, Re [1955] 3 W.L.R. 91 and Tehidy Minerals v Norman [1971] 2 Q.B. 528 considered."
    ],
    "CIT": "(1989) 58 P &amp; CR 163",
    "JUDGE": "Slade LJ; Nourse LJ; Butler-Sloss LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Easements",
        "Extinguishment",
        "Interlocutory Injunctions",
        "Rights of Way"
    ]
},
{
    "CATEGORY": "Real Property - Assignment - Enforcement - Restrictive Covenants",
    "COURT": "EWHC",
    "NAME": "Roake v Chadha",
    "YEAR": "1984",
    "CITATION": "Roake v Chadha [1984] 1 WLR 40",
    "NUMBER": "73",
    "RELATED": [
        "Rhone v Stephens",
        "Gilbert v Spoor",
        "Swift Investments v Combined English Stores",
        "City of London Corp v Fell",
        "Batchelor v Marlow",
        "Crago v Julian",
        "Thorner v Majors",
        "McDowall v Hirschfield Lipson",
        "Laskar v Laskar",
        "Herbert v Doyle",
        "State Bank of India v Sood",
        "Wood v Waddington"
    ],
    "HELD": [
        "that although under s.78 no express terms were required for the benefit of a covenant relating to land to be annexed to the land, the section could not have effect irrespective of the terms of the covenant and where, as here, the covenant was not to enure for the benefit of subsequent purchasers unless expressly assigned, it was clear that the benefit was not annexed to the land: in these circumstances, the covenant could not be deemed to have ensured for the benefit of P under s.78 and since there had been no assignment of the benefit of the covenant, it could not &#8220;appertain or be reputed to appertain&#8221; to the land under s.62 of the Act (Federated Homes Ltd v Mill Lodge Properties Ltd [1980] 1 W.L.R. 594 considered)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1984] 1 WLR 40",
    "JUDGE": "Judge Paul Baker QC",
    "SUMMARY": [
        "Restrictive covenant; enforceability; whether annexation of benefit",
        "Where a restrictive covenant is said not to enure for the benefit of subsequent purchasers unless expressly assigned it is clear that the benefit is not annexed to the land and so did not enure for their benefit under the terms of the Law of Property Act 1925 s.62 and s.78. In 1934 one of a number of plots of land was sold to D&#8217;s predecessors in title under a standard form of transfer containing as part of a covenant with the vendor a stipulation against building more than one dwelling-house on the plot. The covenant contained the words &#8220;And the purchaser to the intent and so as to bind (so far as practicable) the land hereby transferred . . . hereby covenants with the vendor but so that this covenant shall not enure for the benefit of any owner or subsequent purchaser of any part of the . . . estate unless the benefit of this covenant shall be expressly assigned . . .&#8221; Similar standard forms of transfer (although later in date) to P&#8217;s predecessors in title in respect of two nearby plots of land were in the same terms. Neither transfer contained any express assignment of the benefit of the covenant contained in the transfer to D&#8217;s predecessors. P sought an injunction to restrain D from building another house on their plot claiming that the benefit of the covenant with the vendor in the transfer to D&#8217;s predecessor in title had become annexed to each of P&#8217;s plots by reason of s.78 of the L.P.A. 1925 whereby such covenants were to have effect as if successors in title to the covenantee had been expressed. Alternatively they claimed that the benefit had passed as appertaining or as reputed to appertain to the land within the meaning of s.62 of the Act."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Assignment",
        "Enforcement",
        "Restrictive Covenants"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Equity - Trusts - Enforcement - Freeholds - Real Property - Repair Covenants",
    "COUNSEL": "For R: James Munby Q.C. and John Virgo. For S: David Spens.",
    "COURT": "UKHL",
    "NAME": "Rhone v Stephens",
    "YEAR": "1994",
    "CITATION": "Rhone v Stephens [1994] 2 AC 310",
    "NUMBER": "74",
    "RELATED": [
        "Roake v Chadha",
        "Kinch v Bullard",
        "Wilkinson v Kerdene",
        "Quennell v Maltby",
        "Groveholt Ltd v Hughes",
        "Walker v Burton",
        "Quigley v Masterson",
        "Zarb v Parry",
        "Phillips v Mobil Oil",
        "Laskar v Laskar",
        "Harris v Goddard",
        "Bishop v Blake"
    ],
    "SUMMARY": [
        "Covenant; positive covenant; covenant to repair; vendor convenating for himself and successors in title to repair roof of own dwelling; whether positive covenant to be enforced against successor in title to land",
        "R appealed against the decision of the Court of Appeal (Times, January 21, 1993) to allow the appeal of S, executrix of the estate of the last owner of Walford House, against an order that she was bound by a covenant entered into by her predecessor in title to repair part of the roof of the house which overhung R&#8217;s property, Walford Cottage."
    ],
    "HELD": [
        "Appeal dismissed. The Court of Appeal were right not to overrule Austerberry v Oldham Corp (1885) 29 Ch. D. 750 which held that, although equity could prevent or punish the breach of negative covenants which restricted the user of freehold land, it could not compel an owner to comply with positive covenants entered into by his predecessors in title. While recommendations had been made for reforming the law relating to positive and restrictive obligation, no legislation had resulted, and overruling Austerberry would create a number of difficulties and uncertainties. R&#8217;s argument that this was an exceptional case, such as Tito v Waddell (No.2) [1977] 1 Ch. 106 , under the &#8220;pure principle of benefit and burden&#8221; could not be accepted because conditions attached to the exercise of a power could only be enforceable if relevant to the exercise of the right to which they were attached, Halsall v Brizell [1957] Ch. 169 distinguished."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1994] 2 AC 310",
    "JUDGE": "Lord Templeman; Lord Oliver of Aylmerton; Lord Woolf; Lord Lloyd of Berwick; Lord Nolan",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Equity",
        "Trusts",
        "Enforcement",
        "Freeholds",
        "Real Property",
        "Repair Covenants"
    ]
},
{
    "CATEGORY": "Real Property - Benefits of Covenants - Burdens of Covenants - Holiday Accommodation - Intention - Payments - Positive Covenants - Repair Covenants - Roads",
    "COUNSEL": "For the appellants: In person. For the respondent: Alan Johns.",
    "COURT": "EWCA",
    "NAME": "Wilkinson v Kerdene",
    "YEAR": "2013",
    "CITATION": "Wilkinson v Kerdene [2013] EWCA Civ 44",
    "NUMBER": "75",
    "RELATED": [
        "Sava v SS Global Ltd",
        "Rhone v Stephens",
        "McDowall v Hirschfield Lipson",
        "Stafford v Lee",
        "Jones v Kernott",
        "Corbett v Halifax",
        "Quigley v Masterson",
        "Zarb v Parry",
        "Quennell v Maltby",
        "Clarke v Corless",
        "Geary v Rankine",
        "Gilbert v Spoor"
    ],
    "HELD": [
        "Appeals dismissed.",
        "A successor in title to the original covenantor did not incur a liability to perform a positive covenant unless it had some real relation to a right granted in his favour under the conveyance which he did wish to exercise. The reference, in Lord Templeman&#8217;s speech in Rhone v Stephens [1994] 2 A.C. 310, to the exercise of those rights being conditional upon the performance of the positive obligation was not limited to cases in which it was expressly so conditional. In substance, the payment of an annual charge for the maintenance of facilities which the covenantors were only entitled to use by virtue of rights granted under the deed was relevant to the continued exercise of those rights even though it was a contribution to the cost of their maintenance: the two were not inconsistent. In some cases, the positive obligation might be completely unrelated to the rights which the owner sought to exercise, Rhone v Stephens , Halsall v Brizell and Thamesmead Town Ltd v Allotey (1998) 30 H.L.R. 1052 applied. W&#8217;s submission about the inability to apportion the maintenance charges was a non-sequitur. In the form A conveyances, the payment was due for the purpose of maintaining the roads, car parks, pleasure grounds and other recreational facilities under Sch.1. In the form B conveyances, it was a payment towards all the matters referred to in cl.4, which included the Sch.1 facilities together with the upkeep of the lawns and the painting of the bungalows. In form B, it did arguably contribute towards the cost of work carried out by the site owner which was not within the rights granted under Sch.1. However, unless the charge could be apportioned, it remained recoverable provided that it also related at least in part to the rights which were included in Sch.1. The successors in title therefore had no answer to the claims unless they could show that the payment covenant had no relation to the Sch.1 rights which they had continued to exercise. Although the continued exercise of those rights was not made expressly conditional upon payment, the payment was intended to ensure that they remained capable of being exercised. The payment, at least in substantial part, was intended to provide a contribution to the cost of maintaining the roads and other facilities over which the owners of the bungalows were granted rights. The cl.4 covenant, by the original site owner, to carry out the repairs was not sufficient to sever any link between the payment covenant and the Sch.1 rights (see paras 27-34 of judgment)."
    ],
    "FLAGS": [
        "appeal-outstanding"
    ],
    "CIT": "[2013] EWCA Civ 44",
    "JUDGE": "Rix LJ; Arden LJ; Patten LJ",
    "SUMMARY": [
        "The owner of a holiday village was entitled to enforce positive covenants against bungalow owners in the village, requiring them to make payments in respect of the costs of maintaining the roads, car parks, and recreational facilities in the village. Some of the bungalow owners were successors in title to the covenants, but the payments had a real relation to rights granted in their favour which they continued to exercise, namely use of the facilities.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant bungalow owners (W) appealed against a decision that they were bound by covenants requiring them to pay maintenance costs to the respondent (K), owner of the holiday village where the bungalows were situated.",
        "The village included a leisure complex and various recreational facilities, roads and footpaths. Two slightly different conveyances had been used for the sale of the bungalows, depending on when they were purchased. Both contained a Sch.1 which granted various rights to the purchaser, including for use of roads, footpaths, lawns and recreational facilities in the village. Both contained an identical cl.4, by which the vendor covenanted to maintain the roads, drives, car parking spaces, footpaths, lawns, recreational facilities and paint the external surfaces of the bungalow. Form A contained a covenant that the purchaser would pay an annual sum or a proportionate part for maintaining the roads, car parks, pleasure grounds and other recreational facilities in the village, whereas form B contained a covenant for a payment to be made for the purpose of carrying out the various matters referred to in cl.4. The village had fallen into disrepair. It had been sold to K, which had attempted to restore it to a proper state of repair, but had not complied with all the requirements of cl.4. K sought to recover from W the sums payable under the covenants in the conveyances. Most of W were successors in title and the positive covenants were therefore only enforceable if the equitable benefit and burden principle in Halsall v Brizell [1957] Ch. 169 applied. The judge found that the charging provision was relevant to and correlated with the right to use the access road and that the difference in wording between form A and form B should not produce a different outcome because both conveyances contained maintenance charges.SUMMARY W submitted that the payment covenant was linked to the obligation to repair under cl.4, rather than to the grant of rights under Sch.1. They argued that the payment of a fixed annual amount was not capable of being apportioned, meaning that the burden of the fixed sum did not correlate with the exercise of the rights granted."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Benefits of Covenants",
        "Burdens of Covenants",
        "Holiday Accommodation",
        "Intention",
        "Payments",
        "Positive Covenants",
        "Repair Covenants",
        "Roads"
    ]
},
{
    "CATEGORY": "Real Property - Benefits - Environmental Protection - Restrictive Covenants",
    "COURT": "EWCA",
    "NAME": "Gilbert v Spoor",
    "YEAR": "1983",
    "CITATION": "Gilbert v Spoor [1983] Ch 27",
    "NUMBER": "76",
    "RELATED": [
        "Roake v Chadha",
        "Davis v Smith",
        "Bishop v Blake",
        "Phipps v Pears",
        "Quennell v Maltby",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Stafford v Lee",
        "Wall v Collins",
        "Colchester BC v Smith",
        "Corbett v Halifax",
        "Groveholt Ltd v Hughes",
        "Rhone v Stephens"
    ],
    "HELD": [
        "dismissing G&#8217;s appeal, that (1) a practical benefit of substantial value or advantage to a person entitled to the benefit of a covenant could include a view which was not visible from that person&#8217;s land; (2) the grant of detailed planning permission was not decisive of the question under s.84(1B)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1983] Ch 27",
    "JUDGE": "Eveleigh LJ; Kerr LJ; Waller LJ",
    "SUMMARY": [
        "Covenants; restrictive covenants; protection of a view",
        "The Law of Property Act 1925 s.81(A) may project a view as a practical benefit of a covenant whether or not the view is visible from the plots of those entitled to the benefit of the covenant. G bought a plot of land subject to obtained detailed planning permission to build three houses. He applied to the Lands Tribunals under the Law of Property Act 1925 s.84(1) to discharge or modify the covenant. The owners of the neighbouring plots who were entitled to the benefit of the covenant objected. The tribunal found that the three houses would interfere with a fine view which was visible from the adjacent road though not from the objectors&#8217; plots themselves. Nevertheless, the tribunal held that it had no jurisdiction to discharge or modify the covenant on the basis that the view was a practical benefit of substantial value or advantage to the objectors under s.84(1A); it held further that if it had had a discretion, the discretion would have been exercised against G under s.84(1A)."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Benefits",
        "Environmental Protection",
        "Restrictive Covenants"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Civil Procedure - Acquiescence - Breach - Damages - Delay - Injunctions - Restrictive Covenants",
    "COURT": "EWCA",
    "NAME": "Shaw v Applegate",
    "YEAR": "1977",
    "CITATION": "Shaw v Applegate [1977] 1 WLR 970",
    "NUMBER": "77",
    "RELATED": [
        "Hounslow LBC v Minchinton",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Wong v Beaumont Property Trust",
        "Gilbert v Spoor",
        "Wall v Collins",
        "Roake v Chadha",
        "Bedson v Bedson",
        "Williams v Williams",
        "Gillett v Holt",
        "Yaxley v Gotts",
        "Donovan v Rana",
        "Moncrieff v Jamieson"
    ],
    "SUMMARY": [
        "Covenants; restrictive covenant; breach; delay in bringing action; acquiescence; injunction and damages in lieu",
        "The owner of a legal right is only to be deprived of the benefit of that right on the ground of acquiescence on his part, when it would be dishonest or unconscionable of him to set it up. A, the purchaser of certain property in 1967, covenanted not to use it as an amusement arcade. He started installing amusement machines in 1970, and added more in subsequent years. S, the assignee of the benefit of the covenant, did not give notice of the assignment to A until 1973, shortly before issuing the writ in the action, which claimed an injunction and damages. Blackett-Ord V.C. found that there had been a continuing breach of covenant since at least 1971, but dismissed the action on the ground that the plaintiffs had acquiesced in the breach and that damages were incapable of assessment."
    ],
    "HELD": [
        "allowing the plaintiffs&#8217; appeal, that in view of the doubtful state of mind of the parties between 1971 and 1973, it could not be concluded that the plaintiffs were acting dishonestly or unconscionably in seeking to enforce their contractual rights; but that in the particular circumstances, and especially the failure of the plaintiffs to protest earlier and the lack of an application for interlocutory relief, and heavy investment by the defendant in the meantime, an injunction would not be granted, but an order made for an inquiry as to damages. Per Goff, L.J., it is easier to establish a case of acquiescence where the right is equitable only. (Richards v Revitt (1877) 7 Ch. D. 224 and dicta of Fry J. in Willmott v Barber (1880) 15 Ch. D. 96 explained; Osborne v Bradley [1903] 2 Ch. 446 distinguished)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1977] 1 WLR 970",
    "JUDGE": "Buckley LJ; Goff LJ; Shaw LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Civil Procedure",
        "Acquiescence",
        "Breach",
        "Damages",
        "Delay",
        "Injunctions",
        "Restrictive Covenants"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Assignment - Formalities - Leases",
    "COURT": "EWCA",
    "NAME": "Crago v Julian",
    "YEAR": "1992",
    "CITATION": "Crago v Julian [1992] 1 WLR 372",
    "NUMBER": "78",
    "RELATED": [
        "Swift Investments v Combined English Stores",
        "Yaxley v Gotts",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Grand Junction Co v Bates",
        "Antoniades v Villiers",
        "AG Securities v Vaughan",
        "Wright v Macadam",
        "City of London Corp v Fell",
        "Goldberg v Edwards",
        "Facchini v Bryson",
        "Binions v Evans",
        "Errington v Errington"
    ],
    "SUMMARY": [
        "Possession; oral assignment; no written assignment; whether oral assignment valid; whether landlord entitled to possession",
        "The assignment of a weekly tenancy must be by deed if it is to be valid under the Law of Property Act 1925 s.53. D and her husband, H, lived in a flat let to H on a weekly tenancy. D and H divorced, with H undertaking &#8220;within 14 days of the granting of the decree absolute...to do all acts and things as may be necessary&#8221; to transfer the tenancy to D. H moved out, leaving D in possession and paying the rent. P served notice to quit on D and obtained an order for possession against her."
    ],
    "HELD": [
        "dismissing D&#8217;s appeal, that the assignment of a weekly tenancy must be by deed if it is to be valid; accordingly, since there had been no assignment of the tenancy in writing, the possession order had been rightly made (Botting v Martin 170 E.R. 970 considered)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1992] 1 WLR 372",
    "JUDGE": "Sir Donald Nicholls VC; Russell LJ; Leggatt LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Assignment",
        "Formalities",
        "Leases"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Business Tenancies - Occupation",
    "COURT": "EWCA",
    "NAME": "Javad v Aqil",
    "YEAR": "1991",
    "CITATION": "Javad v Aqil [1991] 1 WLR 1007",
    "NUMBER": "79",
    "RELATED": [
        "Street v Mountford",
        "City of London Corp v Fell",
        "Errington v Errington",
        "Harrow LBC v Qazi",
        "Kay v Lambeth LBC",
        "Wright v Macadam",
        "Boyer v Warbey",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Facchini v Bryson",
        "Scott v Southern Pacific Mortgages",
        "Swift Investments v Combined English Stores",
        "Gray v Taylor"
    ],
    "SUMMARY": [
        "Business tenancy; terms",
        "A tenancy springs from a consensual arrangement between two parties, so that the extent of the rights thus granted and accepted depends primarily upon their intentions. R was let into occupation of business premises owned by P while negotiations proceeded for the grant to him of a 10-year lease at a rent of GBP 10,000 p.a. reviewable after 12 months; and he was there with P&#8217;s consent for some months, paying rent on a quarterly basis on three occasions. Eventually negotiations broke down and P told him to leave, whereupon he refused to do so and claimed to be a quarterly tenant protected by the Landlord and Tenant Act 1954 Part II . The judge held that the arrangement had created merely a tenancy at will (i.e. one on terms that either party could determine it at any time) and accordingly ordered possession. On appeal R contended that proof of possession and payment of rent by reference to a quarterly period raises a presumption in favour of a periodic tenancy which can only be rebutted in favour of a tenancy at will by an express agreement to that effect."
    ],
    "HELD": [
        "dismissing R&#8217;s appeal, that (1) a tenancy springs from a consensual arrangement between two parties, so that the extent of the rights thus granted and accepted depends primarily upon their intentions. Where parties proceed with an arrangement whereby one person takes possession of another&#8217;s lands for payment without having agreed or directed their minds to one or more fundamental aspects of their transaction, the inference sensibly and reasonably to be drawn as to their intentions will depend upon all the circumstances, of which the payment of rent on a periodic basis is only one, albeit a very important one; (2) that the judge had correctly considered the question whether it was right in all the circumstances to infer a periodic tenancy, and there were no grounds for disturbing his conclusion to the contrary ( Wheeler v Mercer [1957] A.C. 416 considered; Hagee (London) Ltd v AB Erikson and Larson [1976] Q.B. 209 considered; D&#8217;Silva v Lister House Developments Ltd [1971] Ch. 17 considered; Longrigg Burrough &amp; Trounson v Smith [1979] 2 E.G.L.R. 42 considered; Doe d Cheny v Batten 98 E.R. 1066 considered; Doe d Bastow v Cox 116 E.R. 421 considered; Lewis v MTC Cars Ltd [1975] 1 W.L.R. 457 considered; Marcroft Wagons Ltd v Smith [1951] 2 K.B. 496 considered; Sopwith v Stutchbury (1985) 17 H.L.R. 50 considered; and Cardiothoracic Institute v Shrewdcrest [1986] 1 W.L.R. 368 considered; Doe d Lord v Crago 36 E.R. 1185 applied); (3) the Court of Appeal noted that entry into possession while negotiations proceed was one of the classic circumstances in which a tenancy at will may exist."
    ],
    "FLAGS": [
        "Criticised"
    ],
    "CIT": "[1991] 1 WLR 1007",
    "JUDGE": "Nicholls LJ; Ralph Gibson LJ; Mustill LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Business Tenancies",
        "Occupation"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Documents - Employees - Licences",
    "COURT": "EWCA",
    "NAME": "Facchini v Bryson",
    "YEAR": "1952",
    "CITATION": "Facchini v Bryson [1952] 1 TLR 1386",
    "NUMBER": "80",
    "RELATED": [
        "Gray v Taylor",
        "AG Securities v Vaughan",
        "Antoniades v Villiers",
        "Errington v Errington",
        "Street v Mountford",
        "Binions v Evans",
        "Crate v Miller",
        "Harrow LBC v Qazi",
        "Goldberg v Edwards",
        "City of London Corp v Fell",
        "Wright v Macadam",
        "Corbett v Halifax"
    ],
    "FLAGS": [
        "Criticised"
    ],
    "CIT": "[1952] 1 TLR 1386",
    "SUMMARY": [
        "Licence; lease or; employee",
        "The Court of Appeal held that upon the proper interpretation of a document under which the defendant, an ex-employee of the plaintiffs, occupied premises, it was a lease and not a licence, and that parties could not turn a lease into a licence merely by stating that the document was to be deemed to be a licence."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Documents",
        "Employees",
        "Licences"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Agreements - Licences - Occupation - Rent - Tenancies",
    "COURT": "UKHL",
    "NAME": "Street v Mountford",
    "YEAR": "1985",
    "CITATION": "Street v Mountford [1985] AC 809",
    "NUMBER": "81",
    "RELATED": [
        "Binions v Evans",
        "Crate v Miller",
        "Antoniades v Villiers",
        "Facchini v Bryson",
        "KS Victoria Street v House of Fraser",
        "Gray v Taylor",
        "Errington v Errington",
        "AG Securities v Vaughan",
        "Javad v Aqil",
        "Goldberg v Edwards",
        "Crago v Julian",
        "Clarke v Corless"
    ],
    "SUMMARY": [
        "Licence agreement; exclusive occupation; whether a tenancy",
        "An agreement granting exclusive occupation of residential accommodation for a term at a rent (where no services are provided) creates a tenancy, notwithstanding the use of the word &#8220;licence&#8221;. By an agreement S granted M the right to occupy two rooms at a weekly rent subject to 14 days notice of termination. The agreement was entitled &#8220;licence agreement,&#8221; and contained a declaration signed by M, to the effect that the agreement did not create a tenancy. Later S sought an order declaring whether the occupancy was a license or a protected tenancy. The recorder declared it to be a tenancy; the Court of Appeal declared it to be a licence."
    ],
    "HELD": [
        "allowing the appeal, that where residential accommodation was granted for a term with exclusive possession, no attendance or services being provided, the legal consequence was the granting of a tenancy (notwithstanding the use of the word &#8220;licence&#8221;) (Murray Bull &amp; Co Ltd v Murray [1953] 1 Q.B. 211 overruled; Sturolson &amp; Co v Weniz (1985) 17 H.L.R. 140 disapproved)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1985] AC 809",
    "JUDGE": "Lord Scarman; Lord Keith of Kinkel; Lord Bridge of Harwich; Lord Brightman; Lord Templeman",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Agreements",
        "Licences",
        "Occupation",
        "Rent",
        "Tenancies"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Joint Tenancies - Leases - Licences - Possession",
    "COURT": "EWCA",
    "NAME": "AG Securities v Vaughan",
    "YEAR": "1988",
    "CITATION": "AG Securities v Vaughan [1988] 2 WLR 689",
    "NUMBER": "82",
    "RELATED": [
        "Antoniades v Villiers",
        "Grand Junction Co v Bates",
        "Swift Investments v Combined English Stores",
        "Harrow LBC v Qazi",
        "Wright v Macadam",
        "Binions v Evans",
        "Gray v Taylor",
        "Facchini v Bryson",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Goldberg v Edwards",
        "Errington v Errington",
        "Crate v Miller"
    ],
    "HELD": [
        "Appeal allowed. The agreement provided that the occupant had the right to use the flat in common with three others. If the flat was occupied by four people they had among them exclusive possession. The joint right of occupancy continued until the right of any one of the four occupants was determined in terms of the agreement. The fact that the occupants were paying different amounts in rent and the absence of joint liability did not preclude the agreement being a lease."
    ],
    "FLAGS": [
        "Overruled"
    ],
    "CIT": "[1988] 2 WLR 689",
    "JUDGE": "Fox LJ; Mustill LJ; Sir George Waller",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Joint Tenancies",
        "Leases",
        "Licences",
        "Possession"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Leases - Licences - Possession",
    "COURT": "EWCA",
    "NAME": "Antoniades v Villiers",
    "YEAR": "1988",
    "CITATION": "Antoniades v Villiers [1988] 3 WLR 139",
    "NUMBER": "83",
    "RELATED": [
        "AG Securities v Vaughan",
        "Grand Junction Co v Bates",
        "Errington v Errington",
        "Swift Investments v Combined English Stores",
        "Binions v Evans",
        "Wright v Macadam",
        "Street v Mountford",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Goldberg v Edwards",
        "Crate v Miller",
        "Crago v Julian",
        "Facchini v Bryson"
    ],
    "HELD": [
        "Appeal allowed. Although the agreement was the result of artifice it could not be construed as giving V exclusive possession, the absence of which was fatal to a claim of tenancy. There was no sham, the real transaction corresponded to the transaction voluntarily entered into by the parties."
    ],
    "FLAGS": [
        "Approved",
        "Bingham"
    ],
    "CIT": "[1988] 3 WLR 139",
    "JUDGE": "Bingham LJ; Mann LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Leases",
        "Licences",
        "Possession"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Accommodation - Assured Tenancies - Charitable Trusts - Licences",
    "COUNSEL": "For T: David Watkinson and Maggie Jones. For the trustees: Christopher McCall Q.C. and Francesca Quint.",
    "COURT": "EWCA",
    "NAME": "Gray v Taylor",
    "YEAR": "1998",
    "CITATION": "Gray v Taylor [1998] 1 WLR 1093",
    "NUMBER": "84",
    "RELATED": [
        "Facchini v Bryson",
        "Binions v Evans",
        "Antoniades v Villiers",
        "Errington v Errington",
        "AG Securities v Vaughan",
        "Street v Mountford",
        "Grand Junction Co v Bates",
        "Wright v Macadam",
        "KS Victoria Street v House of Fraser",
        "Swift Investments v Combined English Stores",
        "Boyer v Warbey",
        "Goldberg v Edwards"
    ],
    "SUMMARY": [
        "assured tenancies; licences; almsperson appointed under charitable trust permitted to occupy",
        "T, having been appointed an almsperson by a charitable trust, was permitted to occupy a flat in one of the almshouses owned by the charity, paying a weekly sum towards the upkeep of the properties. However, the trustees subsequently sought to terminate T&#8217;s appointment as an almsperson, claiming that her conduct had disturbed the quiet enjoyment of the accommodation. T contended that, upon her appointment, she had been granted exclusive possession of the flat for a term at a rent, which rendered her an assured tenant whose tenancy could not be terminated except by an order of the court. She appealed against a decision on a preliminary issue that she was not an assured tenant of the flat under the Housing Act 1988 s.1."
    ],
    "HELD": [
        "dismissing the appeal, that a person appointed as an almsperson under a charitable trust occupied accommodation in the almshouse as a personal privilege in her capacity as a beneficiary and therefore the nature of the legal relationship between the parties could only be characterised as a licence and not an assured tenancy, Errington v Errington and Woods [1952] 1 K.B. 290 applied, Street v Mountford [1985] A.C. 809 distinguished. The trustees&#8217; power to grant T a right to occupy the flat did not permit them to grant a right which could run contrary to the purpose of the trust by allowing T to continue to occupy the flat after she no longer qualified as a beneficiary and it made no difference that T had made a weekly payment towards the upkeep of the almshouses."
    ],
    "CIT": "[1998] 1 WLR 1093",
    "JUDGE": "Nourse LJ; Mummery LJ; Sir John Vinelott",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Accommodation",
        "Assured Tenancies",
        "Charitable Trusts",
        "Licences"
    ]
},
{
    "CATEGORY": "Human Rights Other Related Subjects: Landlord and Tenant - Legal Methodology - Defences - European Court of Human Rights - Gypsies - Local Authority Housing - Occupation - Possession Claims - Precedent - Right to Respect For Home",
    "COUNSEL": "For the appellants: Jan Luba QC, David Watkinson, Kelvin Rutledge, Alex Offer. For Leeds City Council: Ashley Underwood QC, Thomas Tyson. For Lambeth LBC: Andrew Arden QC, Terence Gallivan, John McCafferty. For the intervener: Philip Sales, Daniel Stilitz.",
    "COURT": "UKHL",
    "NAME": "Kay v Lambeth LBC",
    "YEAR": "2006",
    "CITATION": "Kay v Lambeth LBC [2006] UKHL 10",
    "NUMBER": "85",
    "RELATED": [
        "Hounslow LBC v Powell",
        "Javad v Aqil",
        "Wandsworth LBC v Dixon",
        "Harrow LBC v Qazi",
        "Scott v Southern Pacific Mortgages",
        "Street v Mountford",
        "Swift Investments v Combined English Stores",
        "Gray v Taylor",
        "Phillips v Mobil Oil",
        "Malik v Fassenfelt",
        "Copeland v Greenhalf",
        "Mulvaney v Gough"
    ],
    "SUMMARY": [
        "In so far as the ratio of the decision in Harrow LBC v Qazi [2003] UKHL 43, [2004] 1 A.C. 983 was that the enforcement of a right to possession in accordance with the domestic law of property could never be incompatible with the Human Rights Act 1998 Sch.1 Part I Art.8, that had to be modified in the light of Connors v United Kingdom (66746/01) (2005) 40 E.H.R.R. 9.",
        "The appellants (K and P) appealed against decisions ([2004] EWCA Civ 926 and [2005] EWCA Civ 289) that the Human Rights Act 1998 Sch.1 Part I Art.8 afforded them no defence against actions for possession brought by the respondent local authorities (B and L). K had occupied residential premises owned by B and originally licensed to a housing trust. Although they had originally been granted licences, they had become tenants of the trust when B had granted the trust a lease of the properties. B had then terminated the lease and sought possession of the properties on the basis that K were trespassers. K had argued that on the termination of the lease they had become tenants of B, and alternatively that Art.8 afforded them a defence to the claim. P were gypsies who had entered onto land owned by L. In response to an application by L for possession of the land they had argued that L was in breach of its statutory obligation to provide gypsy sites, that their circumstances were exceptional and that they were protected by Art.8. The issues were whether (i) K were tenants of B or were trespassers; (ii) the majority decision in Qazi v Harrow LBC [2003] UKHL 43, [2004] 1 A.C. 983 had to be modified to take account of later Strasbourg jurisprudence, particularly the case of Connors v United Kingdom (66746/01) (2005) 40 E.H.R.R. 9; (iii) defendants to possession proceedings brought by public authorities should be permitted in principle to raise an Art.8 defence in those proceedings, rather than being required to raise them by way of judicial review; (iv) the English rules of precedent had to be modified to enable a court to decline to follow a decision by which it would otherwise be bound, if that decision appeared to be inconsistent with a later ruling of the court in Strasbourg."
    ],
    "HELD": [
        "dismissing the appeals (Lords Bingham, Nicholls and Walker dissenting on the issue of the circumstances in which an Art.8 issue had to be considered), that (1) K were, vis a vis B, trespassers with no right to remain in the properties. Though the lease by B to the trust had meant that there was a relationship of landlord and tenant between the trust and K, K had had no estate in the land and had simply been a licensee when it had granted the original licences. Thus, the tenancies were not derivative estates and any rights enjoyed by K had never been enforceable against B. (2) In so far as the ratio of Qazi was that the enforcement of a right to possession in accordance with the domestic law of property could never be incompatible with Art.8, that had to be modified in the light of Connors , Qazi doubted and Connors applied. (3) It was open to an occupier to raise an Art.8 defence to possession proceedings in the county court rather than by way of judicial review. However, the public authority did not from the outset have to plead and prove that the order sought was justified. Once the court accepted that the property in question was the occupier&#8217;s home for the purposes of Art. 8, it was to proceed on the assumption that the requirements of the domestic law regarding possession struck a fair balance and would provide the justification for interference required by Art.8(2). Further consideration of the interests protected by Art.8 would be unnecessary and there was no requirement that the Art.8 issue had to be considered by the court in every case by taking into account the occupier&#8217;s personal circumstances. Indeed, such a requirement would go further than justified by the Strasbourg jurisprudence. There would, however, be some cases of a special and unusual kind, such as Connors , where the interference with the occupier&#8217;s Art.8 interests would have to be justified by a decision making process that ensured that some special consideration was given to those interests. If there was any defect in the law giving rise to possession then it would have to be amended to provide the necessary safeguards. A defence that did not challenge the law under which the possession order was sought as being incompatible with Art.8, but was based only on the occupier&#8217;s personal circumstances had to be struck out. Where the domestic law provided for personal circumstances to be taken into account, for example where the statutory test was whether it was reasonable to make the order, then there had to be a fair opportunity for the arguments in favour of the occupier to be presented. If, however, the requirements of the law had been established and the right to recover possession was unqualified, the only situations in which it would be open to the court to refrain from making the possession order were if a seriously arguable point was raised that the law was incompatible with Art.8, or if the occupier wished to challenge the public authority&#8217;s decision to seek possession as an improper exercise of its powers on the ground that no reasonable person would consider the decision justifiable. In the former situation the High Court would have to deal with the compatibility issue unless the county court was able to give effect to the law in a way that was compatible, pursuant to s.3 of the 1998 Act. (4) The English courts had to adhere to the English rules of precedent. It was for the national courts to decide in the first instance how the principles expounded in Strasbourg were to be applied, and the ordinary rules of precedent had to apply to those decisions. There had to be a degree of certainty in the interpretation of the law and that was best achieved by adhering to the rules of precedent. If a judge felt that a decision was inconsistent with Strasbourg authority he had to follow the binding precedent but could give leave to appeal as appropriate. (5) (Per Lords Bingham, Nicholls and Walker) In highly exceptional circumstances an occupier might be able to raise a seriously arguable case, on the basis of his personal circumstances, that a possession order would be in breach of Art.8."
    ],
    "FLAGS": [
        "Criticised",
        "Hale",
        "Bingham"
    ],
    "CIT": "[2006] UKHL 10",
    "JUDGE": "Lord Bingham of Cornhill; Lord Nicholls of Birkenhead; Lord Hope of Craighead; Lord Scott of Foscote; Lord Walker of Gestingthorpe; Baroness Hale of Richmond; Lord Brown of Eaton-under-Heywood",
    "TYPE": "Case",
    "CATEGORIES": [
        "Human Rights Other Related Subjects: Landlord and Tenant",
        "Legal Methodology",
        "Defences",
        "European Court of Human Rights",
        "Gypsies",
        "Local Authority Housing",
        "Occupation",
        "Possession Claims",
        "Precedent",
        "Right to Respect For Home"
    ]
},
{
    "CATEGORY": "Ecclesiastical Law - Clergy - Disciplinary Procedures - Misconduct - Mitigation - Professional Conduct - Suspension",
    "COUNSEL": "For the incumbent: John Lodge. For As designated officer: Adrian Iles.",
    "COURT": "EWHC",
    "NAME": "Re King",
    "YEAR": "2009",
    "CITATION": "Re King [2009] 1 WLR 873",
    "NUMBER": "86",
    "RELATED": [
        "Kinch v Bullard",
        "Clarke v Corless",
        "Phillips v Mobil Oil",
        "Crago v Julian",
        "Wall v Collins",
        "Javad v Aqil",
        "In re Pavlou",
        "Jones v Kernott",
        "Rhone v Stephens",
        "Antoniades v Villiers",
        "Street v Mountford",
        "Patel v Pirabakaran"
    ],
    "SUMMARY": [
        "Inappropriate intimate and physical conduct by a clergyman which fell short of adultery nonetheless justified the imposition of a penalty prohibiting him from exercising any of the functions of his orders for a period of four years.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant priest (K) appealed against a decision of the bishop&#8217;s disciplinary tribunal prohibiting him from exercising any of the functions of his holy orders for a period of four years.",
        "The tribunal found that K had engaged in an improper, intimate and physical relationship, albeit one which did not involve sexual intercourse, with a woman (B) who, although not one of his parishioners, had sought advice and counselling from him. That relationship had begun at a time when both K and B were married to and living with their respective spouses. Both had since separated. The tribunal concluded that K had engaged in conduct unbecoming or inappropriate to the office and work of a clerk in holy orders and imposed a penalty in accordance with the Clergy Discipline Measure 2003 s.24(1)(b).SUMMARY K submitted that the penalty (1) was excessive, having regard to the finding that his conduct had fallen short of adultery; (2) failed to take account of the mitigation which had been adduced in respect of his pastoral skills; (3) failed to take account of his suspension from his duties as an incumbent for some 11 months prior to the hearing before the tribunal."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) Whilst it was true that the Guidance on Penalties issued by the Clergy Discipline Commission in March 2006 expressly stated that removal from office and prohibition would usually be appropriate in cases of adultery, it did not follow that sexual misconduct falling short of adultery should automatically attract a lesser penalty. It was clear that B had consulted K in his professional capacity as a priest, even though she was not one of his parishioners at the relevant time. K&#8217;s subsequent conduct constituted a serious breach of the standards set for the professional conduct of the clergy in such circumstances, for which the imposition of the penalty of a period of prohibition was entirely appropriate. (2) It was clear from the tribunal&#8217;s written decision that K&#8217;s past character and pastoral skills had been expressly acknowledged. However, character evidence was only one factor to be taken into account in determining the appropriate penalty for proven misconduct. (3) Suspension did not involve any finding of guilt but was merely an interim step taken by the diocesan bishop pending consideration of a formal complaint under the 2003 Measure. As such, it had no bearing upon a penalty which might later be imposed once a finding of misconduct had been made. Moreover, any personal difficulties that might result from a penalty were not a test as to what penalty was appropriate, Bolton v Law Society [1994] 1 W.L.R. 512 applied. Accordingly, the reputation of the church in the community should not take second place to the personal misconduct of a member of the clergy on whom a penalty was imposed. (4) Since K had shown no remorse or acknowledgement of his misconduct, either at the instant hearing or before the tribunal, that was not a factor that could be weighed in his favour in mitigation when imposing the penalty."
    ],
    "CIT": "[2009] 1 WLR 873",
    "JUDGE": "Chancellor Cameron QC",
    "TYPE": "Case",
    "CATEGORIES": [
        "Ecclesiastical Law",
        "Clergy",
        "Disciplinary Procedures",
        "Misconduct",
        "Mitigation",
        "Professional Conduct",
        "Suspension"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Assignment - Covenants - Leases - Reversions - Surety",
    "COURT": "UKHL",
    "NAME": "Swift Investments v Combined English Stores",
    "YEAR": "1989",
    "CITATION": "Swift Investments v Combined English Stores [1989] AC 632",
    "NUMBER": "87",
    "RELATED": [
        "Crago v Julian",
        "Grand Junction Co v Bates",
        "Antoniades v Villiers",
        "City of London Corp v Fell",
        "Wright v Macadam",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Goldberg v Edwards",
        "AG Securities v Vaughan",
        "KS Victoria Street v House of Fraser",
        "Gray v Taylor",
        "Roake v Chadha",
        "Javad v Aqil"
    ],
    "SUMMARY": [
        "Assignment; covenant guaranteeing lessee&#8217;s obligations",
        "A covenant guaranteeing a lessee&#8217;s obligations is enforceable by an assignee of the reversion, without a specific assignment. A Co. let premises on an underlease to B Co., a subsidiary of C Co. C Co. guaranteed B Co.&#8217;s obligations under the underlease. A Co. conveyed the interest expectant on the reversion to P Co. without any specific assignment of the benefit of C Co.&#8217;s covenant. B Co. was wound up and P Co. sued C Co. for the outstanding rent, and obtained judgment."
    ],
    "HELD": [
        "that this covenant touched and concerned the land, and thus the appeal would be dismissed (Vyvyan v Arthur [1814-23] All E.R. Rep. 352 and Dyson v Forster [1909] A.C. 98 applied; Kumar v Dunning [1989] Q.B. 193 approved)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1989] AC 632",
    "JUDGE": "Lord Keith of Kinkel; Lord Roskill; Lord Templeman; Lord Ackner; Lord Oliver of Aylmerton",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Assignment",
        "Covenants",
        "Leases",
        "Reversions",
        "Surety"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Appeals - County Courts - Notices to Quit - Omissions - Statutory Tenancies - Surrender",
    "COURT": "EWCA",
    "NAME": "Boyer v Warbey",
    "YEAR": "1953",
    "CITATION": "Boyer v Warbey [1953] 1 QB 234",
    "NUMBER": "88",
    "RELATED": [
        "Crate v Miller",
        "Errington v Errington",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Newlon Housing Trust v Alsulaimen",
        "Swift Investments v Combined English Stores",
        "Wright v Macadam",
        "Street v Mountford",
        "Goldberg v Edwards",
        "Harrow LBC v Qazi",
        "Facchini v Bryson",
        "Crago v Julian",
        "Javad v Aqil"
    ],
    "SUMMARY": [
        "Statutory tenancy; notice to quit",
        "The tenancy of a flat had been assigned with the consent of the landlords (L) to the defendant (D) who, on the expiration of the lease, held the property as a statutory tenant. On August 30, 1951, D left the flat without giving L the three months&#8217; notice required by the Increase of Rent and Mortgage Interest (Restrictions) Act 1920 s.15(1). D subsequently sent the keys to L, who refused to accept a surrender of the tenancy. L claimed that D was liable to pay rent until November 21, 1951, when the flat was re-let. The issues for determination were (i) whether, in the case of a statutory tenant, the effect of a failure to give notice to quit in breach of the statutory obligation imposed by s.15(1) was that the statutory obligation to pay rent continued or whether such breach merely gave rise to a claim for damages; (ii) whether a legal point that had not been taken before a county court judge could be argued before the Court of Appeal."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) D was liable to pay the rent (either as such or as damages for breach of statutory duty) until November 21, when the flat had been re-let. (2) The general rule in regard to county court appeals was that for a point in a county court appeal to be open for argument in the Court of Appeal it must have been taken in the county court. Except in the limited class of cases which involved the question of compliance with the mandatory terms of the Rent Restriction Acts, the general rule must be followed. In that respect county court appeals differed from High Court appeals. If the point had not been taken before the county court judge, it could not be argued on appeal. (Smith v Charles Baker &amp; Sons [1891] A.C. 325 applied; Elvins v Slaney [1948] W.N. 129 explained.)"
    ],
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CIT": "[1953] 1 QB 234",
    "JUDGE": "Lord Evershed MR; Denning LJ; Romer LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Appeals",
        "County Courts",
        "Notices to Quit",
        "Omissions",
        "Statutory Tenancies",
        "Surrender"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Assignment - Business Tenancies - Privity of Contract",
    "COURT": "EWHC",
    "NAME": "City of London Corp v Fell",
    "YEAR": "1992",
    "CITATION": "City of London Corp v Fell [1992] 3 All ER 224",
    "NUMBER": "89",
    "RELATED": [
        "Crago v Julian",
        "Javad v Aqil",
        "Swift Investments v Combined English Stores",
        "Roake v Chadha",
        "Antoniades v Villiers",
        "AG Securities v Vaughan",
        "KS Victoria Street v House of Fraser",
        "Errington v Errington",
        "Gray v Taylor",
        "Street v Mountford",
        "Harrow LBC v Qazi",
        "Facchini v Bryson"
    ],
    "HELD": [
        "F were not liable for rent arrears accruing after the expiry of the original term of the lease. Section 24(1) of the 1954 Act did not mean that privity of contract between the original parties continued during the statutory extension of the lease with merely a statutory variation as to its mode of determination. The cases of HL Bolton (Engineering) Co Ltd v TJ Graham &amp; Sons Ltd [1956] 1 Q.B. 159 and Weinbergs Weatherproofs Ltd v Radcliffe Paper Mills Co Ltd [1958] 1 Ch. 437 which considered the implications of s.24 of the 1954 Act were concerned with the continuation of a &#8220;tenancy&#8221; rather than a &#8220;term&#8221;. At the expiry of the term it was G as tenants who enjoyed the benefits of the statutory extension of the tenancy. As F no longer derived any benefit from the original lease, they could not be bound during the statutory extension period."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1992] 3 All ER 224",
    "JUDGE": "Desmond Perrett QC",
    "SUMMARY": [
        "Business tenancy; assignment by original lessee; term of lease expired; extended by assignee; whether obligations of original lessee continued",
        "Where a lease which had been assigned by the original lessee had run its term and had been extended by the assignee under the provisions of the 1954 Act, the obligations of the original lessee ceased on the completion of the term of the lease.CL brought an action against F claiming rent arrears in respect of business premises of which F were the original lessees. F had taken on the lease for a term of 10 years but had assigned the residue to G before expiry. On expiry G remained in occupation pursuant to the provisions of Part II of the 1954 Act. CL sought to recover from F the outstanding rent due when G was compulsorily wound up."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Assignment",
        "Business Tenancies",
        "Privity of Contract"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Leases - Restrictive Covenants",
    "COUNSEL": "For OV: Jonathan Gaunt Q.C. and David Lord. For UA: Timothy Fancourt.",
    "COURT": "EWHC",
    "NAME": "Oceanic Village Ltd v United Attractions Ltd",
    "YEAR": "2000",
    "CITATION": "Oceanic Village Ltd v United Attractions Ltd [2000] Ch 234",
    "NUMBER": "90",
    "RELATED": [
        "Goldberg v Edwards",
        "AG Securities v Vaughan",
        "Grand Junction Co v Bates",
        "Crago v Julian",
        "Wright v Macadam",
        "Antoniades v Villiers",
        "Swift Investments v Combined English Stores",
        "Javad v Aqil",
        "Yaxley v Gotts",
        "Gilbert v Spoor",
        "Roake v Chadha",
        "Gray v Taylor"
    ],
    "SUMMARY": [
        "restrictive covenants; business tenancies; demise of part; restrictive covenant unenforceable against other tenants of premises",
        "The landlord of the former London County Hall granted a lease of a part of the premises to O, who set up a gift shop connected to the London Aquarium. The lease contained a covenant that the landlord would not allow another gift shop to be opened in the building. Subsequently, the landlord granted another lease to U, without any restriction on gift shop use. O sought an injunction preventing U from opening a gift shop, contending that under the Landlord and Tenant (Covenants) Act 1995 s.3(5), it was entitled to enforce the covenant against the tenant of &#8220;any demised premises&#8221; let by the landlord or, alternatively, that since the covenant was not registrable under the Land Registration Act 1925 s.50(1), U was fixed with actual or constructive notice of it."
    ],
    "HELD": [
        "dismissing the application, that &#8220;any demised premises&#8221; had a restrictive meaning and referred only to the premises demised in the particular lease. O could not, therefore, enforce the covenant against U, who had taken the lease under a separate demise. Moreover, although it was true that the covenant was not capable of being registered under s.50(1), the application of s.19(2) and s.20(1) of the 1925 Act meant that U&#8217;s actual or constructive knowledge of the covenant was irrelevant."
    ],
    "FLAGS": [
        "Neuberger"
    ],
    "CIT": "[2000] Ch 234",
    "JUDGE": "Neuberger J",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Leases",
        "Restrictive Covenants"
    ]
},
{
    "CATEGORY": "Civil Procedure Other Related Subjects: Real Property - Landlord and Tenant - Agreements - Counterclaims - Intention - Interpretation - Leaseback - Mistake - Permission to Amend - Rectification",
    "COUNSEL": "For the applicants: Jonathan Seitler QC, Nicholas Taggart. For the respondent: Anthony Speaight QC.",
    "COURT": "EWHC",
    "NAME": "KS Victoria Street v House of Fraser",
    "YEAR": "2011",
    "CITATION": "KS Victoria Street v House of Fraser [2011] EWHC 3179 (Ch)",
    "NUMBER": "91",
    "RELATED": [
        "Street v Mountford",
        "Baxter v Mannion",
        "Clarke v Corless",
        "Gray v Taylor",
        "Binions v Evans",
        "Walby v Walby",
        "Bridle v Ruby",
        "Stack v Dowden",
        "McDowall v Hirschfield Lipson",
        "Crago v Julian",
        "Crate v Miller",
        "Davis v Smith"
    ],
    "SUMMARY": [
        "The court refused permission to amend a defence and add a counterclaim raising pleas of estoppel and rectification since neither had reasonable prospects of success. The question of construction which the claimant was said to be estopped from asserting was res judicata between the parties and there was no evidence of mistake to require rectification.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The applicant companies (M, S and F) sought permission to amend their defence to a claim brought by the respondent partnership (V) and permission to add a counterclaim raising pleas of rectification and estoppel.",
        "V had entered into an agreement with F and its subsidiaries, M and S, to purchase and leaseback the freehold of a department store. M was the vendor and initial tenant under the lease, but since it was a shell company without significant assets V wanted M&#8217;s covenant to be backed by the group. V agreed to clause 3.15(F) of the agreement, which provided that where the tenant was M or any group company of F, consent should not be required to an assignment of the lease to another group company of F, provided that F acted as surety. An additional clause 3.5 was subsequently inserted, under which M agreed to assign the lease to an assignee of the required covenant strength within three months; S would be the assignee if an assignee was not chosen within three months; and F would guarantee the assignee&#8217;s liabilities. The assignment never took place and V sought specific performance of the agreement to assign the lease to S. M, S and F gave notice of a proposal to assign the lease from M to S, but to immediately assign it back to M. V obtained an injunction restraining them from doing so and the court interpreted clause 3.15(F) as meaning that the other restrictions in clause 3.15 continued to apply. The Court of Appeal upheld that interpretation and ordered continuation of the final injunction. M, S and F sought to claim that there was an estoppel by convention requiring that clause 3.15(F) be construed as acting independently of the rest of clause 3.15 and to assert that by mistake, clause 3.15(F) had not been drafted with the intended and agreed effect and the lease should be rectified accordingly.SUMMARY V argued that (1) the construction of clause 3.15(F) was res judicata between the parties because it was identical to the question of construction which had been finally determined by the Court of Appeal; (2) the proposed amendments had no real prospects of success because there had been no common intention that clause 3.15(F) should govern the position in isolation."
    ],
    "HELD": [
        "Permission refused.",
        "(1) The question of construction which V was said to be estopped from asserting had already been finally decided in V&#8217;s favour (see paras 28-29 of judgment). In the case of the rectification defence and counterclaim, however, the position was not so simple. The only relevant issue which had so far been decided was the question of construction and the rectification claim did not seek to challenge that decision. It relied instead on the existence of an alleged common or unilateral mistake and the alleged failure of the lease to reflect the common intention of the parties. The existence of the injunction which had been upheld by the Court of Appeal did not present an insuperable obstacle to prosecution of the rectification claim. The authorities were not clear about whether the court&#8217;s power under CPR r.3.1(7) could be used to vary or revoke a final order, but in the instant case it was clearly arguable that the court would have jurisdiction to revoke the final injunction if the rectification claim were to succeed. Even if the power in r.3.1(7) was one which might be exercised only in truly exceptional circumstances, there would be a strong case for saying that such circumstances existed where the legal basis for the injunction had been shown to be untenable following rectification of the lease (paras 30-33). (2) The express introduction of clause 3.5 into the agreement, after clause 3.15(F) had been agreed, and M, S and F&#8217;s apparent acceptance of it, showed on an objective basis that the common intention pleaded by them could not have continued until the lease was executed, with the consequence that the necessary common mistake at the date of execution could not be established. There was no evidence that M, S and F had been labouring under a unilateral mistake which V took unfair advantage of. Neither the proposed amended case on rectification nor that on estoppel had reasonable prospects of success. Permission to advance them would be refused, Chartbrook Ltd v Persimmon Homes Ltd [2009] UKHL 38, [2009] 1 A.C. 1101 followed (paras 42-43)."
    ],
    "CIT": "[2011] EWHC 3179 (Ch)",
    "JUDGE": "Henderson J",
    "TYPE": "Case",
    "CATEGORIES": [
        "Civil Procedure Other Related Subjects: Real Property",
        "Landlord and Tenant",
        "Agreements",
        "Counterclaims",
        "Intention",
        "Interpretation",
        "Leaseback",
        "Mistake",
        "Permission to Amend",
        "Rectification"
    ]
},
{
    "CATEGORY": "Real Property - Land Charges - Leases - Options - Registration - Renewal",
    "COURT": "EWCA",
    "NAME": "Phillips v Mobil Oil",
    "YEAR": "1989",
    "CITATION": "Phillips v Mobil Oil [1989] 1 WLR 888",
    "NUMBER": "92",
    "RELATED": [
        "Peacock v Custins",
        "Oceanic Village Ltd v United Attractions Ltd",
        "Yaxley v Gotts",
        "Goldberg v Edwards",
        "Davis v Smith",
        "Bishop v Blake",
        "Walker v Burton",
        "Baxter v Mannion",
        "Rhone v Stephens",
        "Bridle v Ruby",
        "Batchelor v Marlow",
        "Colchester BC v Smith"
    ],
    "SUMMARY": [
        "Options; new lease; purchaser for value of reversion; whether option was an estate contract; whether registrable",
        "An option to renew a lease runs with the land and is registrable as a Class C (iv) land charge, an option which is not so registered is void against a bona fide purchaser for value of the reversion. Under a covenant in a lease the lessor granted the lessee an option to take a new lease upon its expiry. This was held to be an estate contract registrable as a Class C (iv) land charge under the Land Charges Act 1925 s.10(1) or the Land Charges Act 1972 s.2, notwithstanding that such an option ran with the reversion. A bona fide purchaser for value of the reversion had been granted a declaration that such an option, which had not been so registered was void against him."
    ],
    "HELD": [
        "dismissing the lessee&#8217;s appeal, that the option was void for want of registration, against the purchaser Beesly v Hallwood Estates Ltd [1961] Ch. 105 approved."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1989] 1 WLR 888",
    "JUDGE": "May LJ; Parker LJ; Nicholls LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Land Charges",
        "Leases",
        "Options",
        "Registration",
        "Renewal"
    ]
},
{
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Civil Procedure - Business Premises - Forfeiture - Protection From Eviction - Residential Tenancies",
    "COUNSEL": "For the appellant: Jan Luba QC. For the respondents: Tom Weekes.",
    "COURT": "EWCA",
    "NAME": "Patel v Pirabakaran",
    "YEAR": "2006",
    "CITATION": "Patel v Pirabakaran [2006] EWCA Civ 685",
    "NUMBER": "93",
    "RELATED": [
        "Grand Junction Co v Bates",
        "Harrow LBC v Qazi",
        "Corbett v Halifax",
        "Quennell v Maltby",
        "Gardner",
        "Herbert v Doyle",
        "Cuckmere Brick Co v Mutual Finance",
        "Yaxley v Gotts",
        "Re King",
        "Burgess v Rawnsley",
        "Crate v Miller",
        "Zarb v Parry"
    ],
    "HELD": [
        "allowing the appeal, that (1) the phrase &#8220;let as a dwelling&#8221; in s.2 of the 1977 Act meant &#8220;let wholly or partly as a dwelling&#8221; and so applied to premises that were let for mixed residential and business purposes. When the precursor to s.2 was introduced as the Rent Act 1965 s.31, such was understood to be the established meaning of the phrase, contained, as it had been, in a series of prior enactments and so construed in a series of judgments of the instant court. If that was what the phrase meant in s.31 of the 1965 Act, that was what it must mean in s.2 of the 1977 Act, for the words were identical and lay on the page without any later qualification. The inclusion of a tenancy for mixed purposes in s.8 of the 1977 Act, as in the Housing Act 1996 s.81 and the Commonhold and Leasehold Reform Act 2002 s.167 and s.168, was not idly surplus and its purpose was to exclude such a tenancy from s.3 of the 1977 Act because otherwise the phrase &#8220;let as a dwelling&#8221; would have included such a tenancy in it. It was the clearest window into the meaning of the phrase at least in s.3 and, by reference, in s.2. Wellcome Trust Ltd v Hamad [1998] Q.B. 638 and National Trust for Places of Historic Interest or Natural Beauty v Knipe [1998] 1 W.L.R. 230 considered. (2) Reference to T&#8217;s human rights fortified that interpretation of s.2 of the 1977 Act. The cases of Connors v United Kingdom (66746/01) (2005) 40 E.H.R.R. 9 and Kay v Lambeth LBC [2006] UKHL 10, [2006] 2 A.C. 465 assisted performance in the instant case of the obligation under the Human Rights Act 1998 s.3 to strive for compatible interpretation, Connors and Kay applied. From the judgment in Connors the court derived the following: that an interpretation of s.2 of the 1977 Act that prohibited a landlord from exercising otherwise than by proceedings in court an alleged right of re-entry upon premises let for use as a dwelling as well as for business purposes was an interpretation that would be compatible with the tenant&#8217;s rights under the European Convention on Human Rights 1950 Art.8; and by contrast, that the opposite interpretation of it would be incompatible."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2006] EWCA Civ 685",
    "JUDGE": "Wilson LJ; Sir Peter Gibson",
    "SUMMARY": [
        "The phrase &#8220;let as a dwelling&#8221; in the Protection from Eviction Act 1977 s.2 meant &#8220;let wholly or partly as a dwelling&#8221; and so applied to premises that were let for mixed residential and business purposes.",
        "The appellant (T) appealed against a decision that his lease of mixed business and residential premises had been lawfully forfeited by the respondent landlords (L). T conducted a retail business on the ground floor of the premises and resided on the first floor. T fell into arrears and L exercised their right of re-entry in relation to the shop premises. T remained resident in the residential premises. L issued a claim for possession on the basis that as a result of their re-entry of the shop premises the lease had been forfeited. L subsequently excluded T from the residential premises and T issued a claim for an injunction that L should be restrained from excluding him from either part of the premises because under the Protection from Eviction Act 1977 s.2 the purported forfeiture of the lease was unlawful. The judge found that the demised premises were not let &#8220;as a dwelling&#8221;, that accordingly L were not constrained by s.2 of the 1977 Act, and that therefore the lease had been lawfully forfeited."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Civil Procedure",
        "Business Premises",
        "Forfeiture",
        "Protection From Eviction",
        "Residential Tenancies"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Notices to Quit - Possession - Tenancies - Termination Notices - Time Limits",
    "COURT": "EWCA",
    "NAME": "Crate v Miller",
    "YEAR": "1947",
    "CITATION": "Crate v Miller [1947] KB 946",
    "NUMBER": "94",
    "RELATED": [
        "Street v Mountford",
        "Binions v Evans",
        "Boyer v Warbey",
        "AG Securities v Vaughan",
        "Antoniades v Villiers",
        "Wandsworth LBC v Dixon",
        "City of London Corp v Fell",
        "KS Victoria Street v House of Fraser",
        "Swift Investments v Combined English Stores",
        "Crago v Julian",
        "Newlon Housing Trust v Alsulaimen",
        "Hounslow LBC v Powell"
    ],
    "SUMMARY": [
        "Notice to quit; date for giving possession; alternative dates",
        "A notice &#8220;terminating a tenancy&#8221; on the last day of a current period may fairly be said to mean the same thing as a notice to quit and deliver up possession on the following day, for in both cases the landlord is intimating that the last day of the current period is to be the last day of the tenancy. In a weekly tenancy commencing on Saturday, notice dated Friday, July 5, 1946, was given to the tenant &#8220;that the landlord will terminate your tenancy on Friday, July 19, 1946, or at the end of the next complete week of your tenancy from the date hereof, on which date you are hereby required to quit and deliver up possession&#8221;. It was contended by the tenant that the notice to quit was invalid in that it expired on Friday instead of on a Saturday. Held, the notice was valid. Qu&amp;oelig;re: whether if the tenant had relied upon the alternative in the notice the length of the notice would have been sufficient and whether the alternative was in a form which could be validly used. ( Sidebotham v Holland [1895] 1 Q.B. 378 applied; and Queens Club Garden Estates Ltd v Bignell [1924] 1 K.B. 117 applied)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1947] KB 946",
    "JUDGE": "Wynn-Parry J",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Notices to Quit",
        "Possession",
        "Tenancies",
        "Termination Notices",
        "Time Limits"
    ]
},
{
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Human Rights - Local Government - Common Law - Joint Tenants - Local Authorities' Powers and Duties - Notices to Quit - Repossession - Right to Respect For Home - Secure Tenancies",
    "COUNSEL": "For the claimant: Wayne Beglan. For the defendant: Terence Gallivan.",
    "COURT": "EWHC",
    "NAME": "Wandsworth LBC v Dixon",
    "YEAR": "2009",
    "CITATION": "Wandsworth LBC v Dixon [2009] EWHC 27 (Admin)",
    "NUMBER": "95",
    "RELATED": [
        "Hounslow LBC v Powell",
        "Newlon Housing Trust v Alsulaimen",
        "Boyer v Warbey",
        "Corbett v Halifax",
        "Harrow LBC v Qazi",
        "Crate v Miller",
        "Kay v Lambeth LBC",
        "Laskar v Laskar",
        "Palk v Mortgage Services",
        "Stafford v Lee",
        "Gardner",
        "Lyus v Prowsa Developments"
    ],
    "SUMMARY": [
        "The common law rule in Hammersmith and Fulham LBC v Monk [1992] 1 A.C. 478 which entitled the local authority to recover possession of accommodation following a joint tenant&#8217;s notice to quit had not been invalidated by the enactment of the Human Rights Act 1998 and the repossession did not interfere with the remaining tenant&#8217;s art.8 Convention rights.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The applicant tenant (D) applied to set aside a possession order and to stay or suspend the execution of the warrant for possession obtained by the respondent local housing authority (W) over a two bedroom flat, which D had occupied as his home on a joint weekly secure tenancy for over 20 years.",
        "In 1983 W granted a joint tenancy of the flat to D, who was then 17 years old, and to his sister. In 2005 D&#8217;s sister served a notice to quit on W, thereby determining the joint tenancy. D sought alternative accommodation from W, which initially made him an offer of a one bedroom property. W issued proceedings for possession of the flat on the ground that D was an unauthorised occupant who had been told he must vacate, and an order for possession was made. However, before execution of the possession order and while D was still in the original flat, police found small amounts of herbal cannabis and cocaine and D was convicted and fined for possession of a Class A drug. Subsequently, W notified D that it had decided he was ineligible for rehousing. In prior related proceedings D was unsuccessful in judicial review of that decision (Dixon v Wandsworth LBC [2007] EWHC 3075 (Admin)).SUMMARY D relied on McCann v United Kingdom (19009/04) [2008] 2 F.L.R. 899 to submit that making a summary order for possession and its execution breached his rights to respect for his home under the European Convention on Human Rights 1950 art.8 and was unlawful by virtue of the Human Rights Act 1998 s.6(1). D argued that (1) the common law rule in Hammersmith and Fulham LBC v Monk [1992] 1 A.C. 478 which entitled W to recover possession was inconsistent with his art.8 rights; and (2) the decision in Doherty v Birmingham City Council [2008] UKHL 57, [2009] 1 A.C. 367 had altered the gateway B test in Kay v Lambeth LBC [2004] EWCA Civ 926, [2005] Q.B. 352 so as to allow proportionality to be considered."
    ],
    "HELD": [
        "Application refused",
        "Application refused. (1) It was clear from the judgment of Lord Hope in Qazi v Harrow LBC [2003] UKHL 43, [2004] 1 A.C. 983 at para.74 that the rule in Monk , which meant that an order for possession was inevitable, was not a violation of art.8, particularly in the light of the Commission&#8217;s response in Ure v United Kingdom (Admissibility) (28027/95) . In the binding decisions of Qazi , Kay , and Doherty all the arguments were predicated on the indefeasible right to possession arising from service of a notice to quit, and it had been accepted that the provision for notices to quit in common law was consistent with Article 8. McCann was only of persuasive authority and was distinguishable because in that case the local authority had chosen to bypass the statutory scheme by requesting Mrs McCann to sign a notice to quit and had given no consideration to the applicant&#8217;s right to respect to his home, whereas in the instant case W had not persuaded D&#8217;s sister to serve her notice to quit. Furthermore D had no right to remain in the property, not only because of the common law rule, but also because Parliament had deliberately chosen not to bring a case such as his within the statutory scheme of protection; (2) Whereas Doherty was an exceptional case because of the discriminatory effect of the statutory scheme, D&#8217;s case was not in any way exceptional as required by Kay , but rather D&#8217;s challenge to the possession order was based only on his personal circumstances. Kay was binding authority that the decision made by W to seek summary possession in reliance on its right to possession under domestic law could only be challenged if its decision was one that no reasonable person could consider justifiable, i.e. the test enunciated in Wandsworth LBC v Winder (No.1) [1985] A.C. 461. There was a distinction between W having to take into account D&#8217;s art.8 rights and to consider proportionality, and the court substituting its own view of proportionality for W&#8217;s. Although W had not specifically referred to the balancing exercise set out in art.8(2), its careful decision making process accorded with art.8 and the decision was one to which it could reasonably come."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2009] EWHC 27 (Admin)",
    "JUDGE": "Judge Bidder QC",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Human Rights",
        "Local Government",
        "Common Law",
        "Joint Tenants",
        "Local Authorities' Powers and Duties",
        "Notices to Quit",
        "Repossession",
        "Right to Respect For Home",
        "Secure Tenancies"
    ]
},
{
    "CATEGORY": "Family Law Other Related Subjects: Real Property - Financial Provision - Joint Tenancies - Notices to Quit - Property Adjustment Orders",
    "COUNSEL": "For NHT: Andrew Arden Q.C. and Oliver Campbell. For the husband: Simon Buckhaven and V Baun.",
    "COURT": "UKHL",
    "NAME": "Newlon Housing Trust v Alsulaimen",
    "YEAR": "1999",
    "CITATION": "Newlon Housing Trust v Alsulaimen [1999] 1 AC 313",
    "NUMBER": "96",
    "RELATED": [
        "Stack v Dowden",
        "Goodman v Gallant",
        "AG Securities v Vaughan",
        "Kinch v Bullard",
        "Bedson v Bedson",
        "Wandsworth LBC v Dixon",
        "Laskar v Laskar",
        "Quigley v Masterson",
        "Abbott v Abbott",
        "Davis v Smith",
        "Boyer v Warbey",
        "McDowall v Hirschfield Lipson"
    ],
    "SUMMARY": [
        "financial provision; property adjustment orders; whether termination of joint periodic tenancy by wife giving notice to quit was reviewable disposition of property",
        "A husband, H, and his wife, W, held a joint assured weekly tenancy of a property owned by NHT. When W left the flat, she gave NHT notice to quit the premises expiring on December 4, 1995, the notice being effective to terminate the tenancy on that date. H successfully appealed ((1997) 29 H.L.R. 767, [1997] C.L.Y. 2490) against a decision (i) refusing his application for an adjournment of possession proceedings brought by NHT on the ground that he intended to apply for a property adjustment order under the Matrimonial Causes Act 1973 s.24 , and (ii) making a possession order in NHT&#8217;s favour. The Court of Appeal held that the merits of H&#8217;s claim should have been considered, the termination of the tenancy by the expiry of the notice to quit being a reviewable disposition which, under s.37(2)(b) of the Act, the court had power to set aside if satisfied that it was made with a view to defeating H&#8217;s claim for financial relief. NHT appealed, arguing that the termination of the tenancy was not a disposition of property and consequently the court had no power to revive the tenancy, there being no property in respect of which an adjustment order could be made."
    ],
    "HELD": [
        "allowing the appeal, that the property which W held on giving notice to quit was a joint interest in a weekly tenancy of the flat. The notice to quit did not serve to destroy the tenancy; it merely indicated that W was unwilling to consent to the tenancy continuing beyond the date at which it could otherwise expire, Hammersmith and Fulham LBC v Monk [1992] 1 A.C. 478 considered. At the moment when the periodic tenancy expired by effluxion of time, W&#8217;s interest ceased to exist and she had no property of which she could dispose. Therefore, the court would have had no power to make an order for its transfer to H."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1999] 1 AC 313",
    "JUDGE": "Lord Goff of Chieveley; Lord Lloyd; Lord Hoffmann; Lord Hope; Lord Saville",
    "TYPE": "Case",
    "CATEGORIES": [
        "Family Law Other Related Subjects: Real Property",
        "Financial Provision",
        "Joint Tenancies",
        "Notices to Quit",
        "Property Adjustment Orders"
    ]
},
{
    "CATEGORY": "Agriculture Other Related Subjects: Landlord and Tenant - Agricultural Holdings - Subtenancies",
    "COUNSEL": "For B: John McGhee. For M: Shane Dougall.",
    "COURT": "EWHC",
    "NAME": "Barrett v Morgan",
    "YEAR": "1997",
    "CITATION": "Barrett v Morgan [1997] 1 EGLR 1",
    "NUMBER": "97",
    "RELATED": [
        "In re Pavlou",
        "Chaffe v Kingsley",
        "Bedson v Bedson",
        "Gillett v Holt",
        "Scott v Southern Pacific Mortgages",
        "Barca v Mears",
        "Davis v Smith",
        "Colchester BC v Smith",
        "State Bank of India v Sood",
        "Thorner v Majors",
        "Gissing v Gissing",
        "Phipps v Pears"
    ],
    "SUMMARY": [
        "agricultural holdings; underleases; subtenancy set up as partnership; sham agreement between landlord and tenant to end subtenancy",
        "In March 1970, E, by a headlease, let over 930 acres of land, including a farm, to himself and his two sons, S and J. In 1976 E died and the freehold in the land passed to S and J. By 1980 the farm had become run down and M entered into possession of part of the land in order to manage the farm. S and J were concerned that at a future date they would be able to sell the farm in order to provide capital for S&#8217;s children and that accordingly M should not acquire the substantial security of tenure provided under the Agricultural Holdings Act 1986. To ensure this, terms were agreed under which M paid a monthly sum to S and J as a payment under a limited partnership. In 1984 and 1986 the land was severed and that part containing the farm was transferred to B to be held by them on trust for the benefit of S&#8217;s children. By 1991 S&#8217;s children indicated that they wished to realise the capital of the farm and to effect this, notice to quit was served under the headlease of 1970. No counter-notice was served by S and J, as would have usually been the case. In 1993 M received notice dissolving the partnership. B brought proceedings claiming possession of the land against M. M resisted the application on the basis that it was a sham designed to avoid the security of tenure conferred by the Agricultural Holdings Act 1986."
    ],
    "HELD": [
        "dismissing the application, that the facts showed that the landlords acted collusively with the tenants for the purpose of destroying the subtenancy. In these circumstances the court would act to protect the subtenant from such collusion, Sparkes v Smart [1990] 2 E.G.L.R. 245, Pennell v Payne [1995] Q.B. 192, applied, Harrison v Wing (1988) 56 P. &amp; C.R. 358, distinguished."
    ],
    "FLAGS": [
        "Overruled"
    ],
    "CIT": "[1997] 1 EGLR 1",
    "JUDGE": "P Smith QC",
    "TYPE": "Case",
    "CATEGORIES": [
        "Agriculture Other Related Subjects: Landlord and Tenant",
        "Agricultural Holdings",
        "Subtenancies"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Civil Evidence - Adverse Possession",
    "COURT": "EWHC",
    "NAME": "Powell v McFarlane",
    "YEAR": "1979",
    "CITATION": "Powell v McFarlane (1979) 38 P &amp; CR 452",
    "NUMBER": "98",
    "RELATED": [
        "Baxter v Mannion",
        "Sava v SS Global Ltd",
        "Hounslow LBC v Minchinton",
        "Colchester BC v Smith",
        "Zarb v Parry",
        "Ofulue v Bossert",
        "Best v Chief Land Registrar",
        "KS Victoria Street v House of Fraser",
        "Crate v Miller",
        "Malik v Fassenfelt",
        "Bishop v Blake",
        "Batchelor v Marlow"
    ],
    "SUMMARY": [
        "Adverse possession; animus possidendi",
        "A person who enters upon land as a trespasser and later seeks to show that he has dispossessed the owner must produce compelling evidence of the animus possidendi and that he has made it clear to the world. D owned a field which was used as agricultural land by an area of landscape value. Nearby P later acquired a small farm with which his family has been associated for many years. The field was planted with Christmas trees. D bought a neighbouring plot for a house. In 1955 D, who was a civil servant, was posted overseas where he remained for 11 years. P, who was then 14, used the land to graze his cow, Kushla, having first writen to D for permission and having received no reply. He cut hay there, to feed the cow and later, made the fence stockproof so that he could leave the cow there. In 1968, the cow died. Between 1956 and 1973 P also used the land occasionally for shooting, and for a friend to tether a goat. P put up a sign advertising his business, which was visible from the road, D&#8217;s wife had visited the field and noticed nothing untoward, but when D visited in August 1972, he found that the trees were gone, the fence was in disrepair, and the land overgrown. D then made a grazing agreement with X, the second defendant. P sought a declaration that he had been in adverse possession for more than 12 years."
    ],
    "HELD": [
        "refusing the declaration, that a person claiming adverse possession must show factual possession which was simple and conclusive and also that he had been dealing with the land in the manner in which the owner might have been to do so; he must also adduce compelling evidence an animus possidendi which had been made clear to the world. The activities of P when a 14 year old boy who owned no land in the neighbourhood was not necessarily referable to an intention on his part to dispossess D. ( Wallis&#8217;s Cayton Bay Holiday Camp Ltd v Shell-Mex and BP Ltd [1975] Q.B. 94 , Treloar v Nute [1976] C.L.Y. 811 and Gray v Wykeham-Martin )."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "(1979) 38 P &amp; CR 452",
    "JUDGE": "Slade J",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Civil Evidence",
        "Adverse Possession"
    ]
},
{
    "CATEGORY": "Real Property - Adverse Possession",
    "COURT": "EWHC",
    "NAME": "Colchester BC v Smith",
    "YEAR": "1991",
    "CITATION": "Colchester BC v Smith [1991] Ch 448",
    "NUMBER": "99",
    "RELATED": [
        "Zarb v Parry",
        "Sava v SS Global Ltd",
        "Herbert v Doyle",
        "Gilbert v Spoor",
        "Thorner v Majors",
        "Copeland v Greenhalf",
        "Mulvaney v Gough",
        "Baxter v Mannion",
        "Quennell v Maltby",
        "Bridle v Ruby",
        "Wood v Waddington",
        "McDowall v Hirschfield Lipson"
    ],
    "HELD": [
        "that up to 1967 T had been granted a licence of the land and not a tenancy, and as the licence was gratuitous the Agricultural Holdings Act 1948 did not apply. Therefore at the expiry of the licence in 1967, T was a trespasser in adverse possession for the following 12 years. T had not been in continuous occupation of all of the land as the council had entered part of it to construct sewers and to widen the road. The agreement made in 1983 estopped T from asserting that he had any title to the land in question or relying on the doctrine of adverse possession ( Goldsack v. Shore [1947-51] C.L.Y. 129 , Smirk v Lyndale Developments Ltd [1975] Ch. 317, Buckinghamshire CC v Moran [1990] Ch. 623, Keen v Holland [1984] 1 W.L.R. 251 applied; Street v Mountford [1985] A.C. 809 considered)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[1991] Ch 448",
    "JUDGE": "Ferris J",
    "SUMMARY": [
        "Adverse possession; occupation of council land; subsequent refusal to quit; tenancy granted and claim of adverse possession disclaimed; whether estopped by conduct from bringing further claim of adverse possession",
        "Where in an agreement an occupier acknowledges that his occupation of land has not been adverse possession he cannot subsequently rely on a claim for adverse possession against the same party in a second set of proceedings. T was granted a tenancy of part of a piece of land owned by the council. Gradually, from 1960, T extended his activities over more of the land without permission. In 1965 the council served notice requiring all occupants to quit but T remained and was allowed to do so for a limited time by the council. In 1973 the council entered the land to construct sewers and a piece of land was taken for road widening. In 1982 the council challenged T&#8217;s possession of the land. T claimed that he had acquired title by adverse possession. An agreement was reached whereby T was granted a tenancy of the land and he agreed that he had obtained no interest in the land by adverse possession. When T failed to pay rent due the council sought possession of the land and sought a declaration that it was the freehold owner of the land."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Adverse Possession"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Civil Procedure - Adverse Possession - Boundaries",
    "COUNSEL": "For M: Edward Bannister Q.C. and Francis Moraes. For HLBC: Kim Lewison Q.C. and Jonathan Karas.",
    "COURT": "EWCA",
    "NAME": "Hounslow LBC v Minchinton",
    "YEAR": "1997",
    "CITATION": "Hounslow LBC v Minchinton (1997) 74 P &amp; CR 221",
    "NUMBER": "100",
    "RELATED": [
        "Zarb v Parry",
        "Ofulue v Bossert",
        "Sava v SS Global Ltd",
        "Best v Chief Land Registrar",
        "Baxter v Mannion",
        "Powell v McFarlane",
        "Shaw v Applegate",
        "Wong v Beaumont Property Trust",
        "Colchester BC v Smith",
        "Chaffe v Kingsley",
        "Jones v Challenger",
        "Crate v Miller"
    ],
    "SUMMARY": [
        "boundaries; ownership of land disputed; adverse possession established by care and use of land",
        "M, the owner and occupier of the property, claimed she had acquired title to a strip of land at the foot of her garden by adverse possession although H had the paper title to it. M started work on building a summer house, part of which encroached on the strip of land. H sought a mandatory injunction that M remove the encroaching part. Both parties sought a declaration as to the boundary. It was found that M did not have title by adverse possession. It was not ordered that she remove the summer house or any part of it, but damages in lieu of an injunction were to be assessed. M appealed. Evidence in support of the claim of adverse possession was given by D, the son in law of R, the previous owner of the property, to the effect that they had always treated the disputed strip of land as part of the garden and assumed that the chestnut paling fence, originally erected by H&#8217;s predecessor, formed the rear boundary. The garden had been enclosed to a sufficient extent to prevent R&#8217;s and M&#8217;s dogs from escaping. When M decided to build the summer house she applied for planning permission which was granted."
    ],
    "HELD": [
        "allowing the appeal, that the construction of the fence at the bottom of the garden, enclosing the disputed strip of land, by H&#8217;s predecessor was evidence of discontinuance of possession by the true owner of that land, Kynoch Ltd v Rowlands [1912] 1 Ch. 527 considered. The judge was in error to find that the continued presence of the fence and trees placed there by H&#8217;s predecessor represented continued possession of the land. H could not access the land and never trimmed the hedges or used the land, whereas M and her predecessors regularly tended the land as part of the garden. H had no intentions for the use of the land of which M was aware, Leigh v Jack (1879) 5 Ex. D. 264 disapproved, Buckinghamshire CC v Moran [1990] 1 Ch. 623, [1989] C.L.Y. 449 considered."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "(1997) 74 P &amp; CR 221",
    "JUDGE": "Butler-Sloss LJ; Millett LJ; Thorpe LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Civil Procedure",
        "Adverse Possession",
        "Boundaries"
    ]
},
{
    "CATEGORY": "Civil Evidence Other Related Subjects: Real Property - Acknowledgment - Admissibility - Adverse Possession - Limitations - Without Prejudice Communications",
    "COUNSEL": "For the appellant: Richard Wilson QC, Christopher Jacobs. For the respondent: Peter Crampin QC, Simon Williams.",
    "COURT": "UKHL",
    "NAME": "Ofulue v Bossert",
    "YEAR": "2009",
    "CITATION": "Ofulue v Bossert [2009] UKHL 16",
    "NUMBER": "101",
    "RELATED": [
        "Baxter v Mannion",
        "Zarb v Parry",
        "Best v Chief Land Registrar",
        "Powell v McFarlane",
        "Sava v SS Global Ltd",
        "Hounslow LBC v Minchinton",
        "Colchester BC v Smith",
        "Burgess v Rawnsley",
        "Lees",
        "Gray v Taylor",
        "Abbott v Abbott",
        "Wandsworth LBC v Dixon"
    ],
    "SUMMARY": [
        "A statement made by a party in &#8220;without prejudice&#8221; correspondence written with a view to settling proceedings between him and another was not admissible in subsequent proceedings between the same parties save where it was wholly unconnected with the issues in those proceedings.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellants (O) appealed against a decision ([2008] EWCA Civ 7, [2009] Ch. 1) that the respondent (B) had acquired the freehold title of their property by adverse possession.",
        "O were the registered freehold owners of a property. In 1981, B had been permitted to occupy the property by O&#8217;s tenant. Eight years later, O began possession proceedings against B. B&#8217;s defence, served in 1990, admitted O&#8217;s title but denied their right to possession. In a without prejudice letter written the following year, B offered to buy the property. The proceedings were struck out in 2002. A year later, O issued fresh possession proceedings, which B defended on the basis of adverse possession pursuant to the Limitation Act 1980 s.15. O relied on s.29 of the Act, arguing that the running of time for adverse possession had been interrupted by B&#8217;s acknowledgment of their title in her defence in the earlier proceedings and in the without prejudice offer. The judge at first instance upheld B&#8217;s contention and the Court of Appeal dismissed O&#8217;s appeal, finding that the admission of title in the defence did not constitute an acknowledgment for the purposes of s.29; that in any event the defence had been served more than 12 years before the second proceedings and any acknowledgment did not continue beyond the date of the defence; and that the without prejudice offer could not be relied on. The issues to be determined were (i) the extent to which it was permissible for one party to rely on a statement made by another party in without prejudice correspondence written with a view to settling earlier proceedings between the same parties; and (ii) whether the admission of title in the defence operated as a continuing acknowledgment for the purposes of the Act."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(Lord Scott dissenting) (1) The normal rule was that statements made in negotiations between parties to litigation with a view to settling were inadmissible. The fact that in the instant case the rule was being invoked in relation to negotiations in earlier proceedings involved no new extension of it, Rush &amp; Tompkins Ltd v Greater London Council [1989] A.C. 1280, Unilever Plc v Procter &amp; Gamble Co [2000] 1 W.L.R. 2436, and Muller v Linsley &amp; Mortimer [1996] P.N.L.R. 74 considered. It was strongly arguable that the principles governing the admissibility in subsequent proceedings of a statement made in without prejudice negotiations to settle earlier proceedings should be the same as those which would govern its admissibility in the earlier proceedings, and there was no basis for exempting the without prejudice offer in the instant case from that rule. The fact that O&#8217;s freehold title had not been directly in dispute in the earlier proceedings was not a ground for admitting the without prejudice offer. Save perhaps where it was wholly unconnected with the issues between the parties, a statement in without prejudice negotiations was not to be admissible other than in exceptional circumstances. Nor did it assist that O sought to admit the offer as a fact rather than to establish the truth of the admission. The distinction between those purposes, drawn by Lord Hoffman in Muller , was too subtle to apply in practice and was contrary to the underlying objective of without prejudice protection. Though he applied the same distinction in Bradford &amp; Bingley Plc v Rashid [2006] UKHL 37, [2006] 1 W.L.R. 2066, none of the other opinions in that case were based on the same reasoning, and some doubts were expressed about it, Rashid considered. Section 29 of the Act did not contain any significant public policy element so it could not be said that the public policy in s.29 outweighed the public policy of not admitting in evidence what was said in without prejudice negotiations. (2) There was no reason why a statement in a pleading could not amount to an acknowledgment for the purposes of s.29. B&#8217;s admission of O&#8217;s title in the defence operated as such an acknowledgment as at the date on which it was served. It did not, however, continue to operate as an acknowledgment beyond that date, Johnstone (Johnstone&#8217;s Trs) v Smith Clark (1896) 4 S.L.T. 180 considered. While an acknowledgment could cover a continuing state of affairs, where it was embodied in a signed document the more natural meaning of &#8220;acknowledgment&#8221; suggested that it arose as at the date of the document. Moreover, the fact that the defence had been relied on by B in 2002 in response to an application by O did not mean that the acknowledgment could be treated as having been renewed. Though it would be wrong to attempt to set out an exhaustive test as to what would constitute a renewal of an acknowledgment, it would normally require a fresh signed document, or an act such as re-service of the original. Merely taking steps in the action would not do. (3) (Per Lord Neuberger) (Obiter) B had conceded that the Court of Appeal had been wrong to conclude that the admission of title in the first defence did not constitute an acknowledgment for s.29, and the point was not therefore in issue. Nonetheless, the Court of Appeal&#8217;s conclusion that s.29 required an acknowledgment of a right to immediate possession as opposed to an acknowledgment of title was wrong."
    ],
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "CIT": "[2009] UKHL 16",
    "JUDGE": "Lord Hope of Craighead; Lord Scott of Foscote; Lord Rodger of Earlsferry; Lord Walker of Gestingthorpe; Lord Neuberger of Abbotsbury",
    "TYPE": "Case",
    "CATEGORIES": [
        "Civil Evidence Other Related Subjects: Real Property",
        "Acknowledgment",
        "Admissibility",
        "Adverse Possession",
        "Limitations",
        "Without Prejudice Communications"
    ]
},
{
    "CATEGORY": "Real Property - Adverse Possession - Intention - Landowners - User",
    "COUNSEL": "For the appellant: George Laurence QC, Mark Wonnacott. For the respondents: Jonathan Gaunt QC, Gary Cowen.",
    "COURT": "EWCA",
    "NAME": "Sava v SS Global Ltd",
    "YEAR": "2008",
    "CITATION": "Sava v SS Global Ltd [2008] EWCA Civ 1308",
    "NUMBER": "102",
    "RELATED": [
        "Zarb v Parry",
        "McDowall v Hirschfield Lipson",
        "Wilkinson v Kerdene",
        "Stafford v Lee",
        "Colchester BC v Smith",
        "KS Victoria Street v House of Fraser",
        "Laskar v Laskar",
        "Clarke v Corless",
        "Bridle v Ruby",
        "Huckvale v Aegean Hotels",
        "Gilbert v Spoor",
        "Walby v Walby"
    ],
    "SUMMARY": [
        "In claims for adverse possession where continued use of the land by the paper owner was alleged, there was no principle of law to the effect that the paper owner would have to establish use in the period immediately after the claimed ouster.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant (S) appealed against a decision (2007) 104(40) L.S.G. 27) that he had not acquired title to certain land located in the green belt by adverse possession.",
        "An adjudicator to the Land Registry had found that by October 13, 1991, being 12 years before the relevant provisions of the Land Registration Act 2002 came into force, S had both factual possession of the land and an intention to possess it. He also found that the paper owner (X) had made no &#8220;meaningful use&#8221; of the land since it had acquired it in 1990. Reversing the adjudicator&#8217;s findings, the judge concluded that the evidence fell far short of establishing factual possession of the land and an intention to possess it, and that there was no justification for the adjudicator&#8217;s finding that X&#8217;s use of the land, which involved picnicking, car parking and quad biking, was as limited as he had found.SUMMARY S argued that (1) he had done enough by October 13, 1991 to dispossess X of the land so as to cause time to start running in his favour under the Limitation Act 1980; (2) use by X after October 13, 1991 had to be shown to have been enjoyed during the nine-month period starting on October 13, 1991 and such use had not been shown."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) The judge had been fully entitled to conclude that S had not assumed possession of the land by October 13, 1991 and had not manifested the necessary intention to do so. The burden had been on him to establish both matters and, if he was to discharge that burden, his evidence had to be unequivocal. Crucially, he had done nothing until 1995 to exclude X from enjoying the same free access to the land through a garden gate as it had had since it acquired the land in 1990. His omission to bar such access by October 13, 1991 made hopeless his claim that he had by then assumed exclusive possession, or, perhaps more obviously, his claim that he had by then manifested an intention to exclude the world at large and X in particular, JA Pye (Oxford) Ltd v Graham [2002] UKHL 30, [2003] 1 A.C. 419 applied. (2) S&#8217;s second submission was in effect an artificial attempt to shift to X the burden of disproving a case that he had not managed to establish. There was no principle of law to the effect that, in a case such as this, it would only be acts of possession by the paper owner carried out during a limited period after the claimed ouster that would or might serve to defeat the claim that there had been such an ouster. Such a proposition was contrary to principle. The evidence showed that X had continued to enjoy possession of the land and demonstrated the frailty of S&#8217;s claim that he had both excluded X and intended to exclude it from such possession."
    ],
    "CIT": "[2008] EWCA Civ 1308",
    "JUDGE": "Moore-Bick LJ; Rimer LJ",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property",
        "Adverse Possession",
        "Intention",
        "Landowners",
        "User"
    ]
},
{
    "CATEGORY": "Landlord and Tenant - Joint Tenancies - Possession Proceedings - Public Sector Tenancies - Residential Tenancies - Right to Respect For Home - Termination",
    "COUNSEL": "For Q: Jan Luba Q.C. and Edward Fitzpatrick. For the local authority: Andrew Arden Q.C. and David Matthias.",
    "COURT": "UKHL",
    "NAME": "Harrow LBC v Qazi",
    "YEAR": "2003",
    "CITATION": "Harrow LBC v Qazi [2003] UKHL 43",
    "NUMBER": "103",
    "RELATED": [
        "AG Securities v Vaughan",
        "Hounslow LBC v Powell",
        "Wandsworth LBC v Dixon",
        "Bedson v Bedson",
        "Facchini v Bryson",
        "Stack v Dowden",
        "Goodman v Gallant",
        "Grand Junction Co v Bates",
        "Gray v Taylor",
        "Binions v Evans",
        "Boyer v Warbey",
        "Newlon Housing Trust v Alsulaimen"
    ],
    "SUMMARY": [
        "Possession proceedings brought by a local authority against a former joint tenant who had no legal or equitable right to remain in the relevant property did not infringe that person&#8217;s right to respect for home and family life and, therefore, did not require justification under the Human Rights Act 1998 Sch.1 Part I Art.8(2).",
        "Possession proceedings brought by a local authority against a former joint tenant who had no legal or equitable right to remain in the relevant property do not infringe that person&#8217;s right to respect for his home under the Human Rights Act 1998 Sch.1 Part I Art.8. The local authority appealed against a decision ([2001] EWCA Civ 1834; [2002] U.K.H.R.R. 316) that its pursuit of possession proceedings against Q constituted an interference with his right to respect for his home under the Human Rights Act 1998 Sch.1 Part I Art.8 and that the question of justification under Art.8(2) should be remitted to the county court. Q and his wife had been joint tenants of local authority housing under a secure tenancy when his wife left, giving notice to terminate the tenancy. On termination, Q had no right to remain in the property and no defence under ordinary law to possession proceedings, although he had been living in the premises continuously for eight years when the proceedings were brought. The issues were whether the Court of Appeal had erred in concluding that (1) the premises constituted Q&#8217;s &#8220;home&#8221; at the time the possession proceedings were served for the purposes of Art.8, and (2) the making of a possession order would constitute an interference with Q&#8217;s right to respect for his home under Art.8(1), requiring determination of whether the interference was justified under Art.8(2)."
    ],
    "HELD": [
        "allowing the appeal (Lords Bingham and Steyn dissenting), that (1) the fact that Q&#8217;s tenancy had expired when the possession proceedings were served was irrelevant to the factual question of whether the premises were his home within the meaning of Art.8. The Court of Appeal had not erred in concluding that Q had sufficient and continuous links with the premises to satisfy the test put forward in Buckley v United Kingdom (20348/92) (1997) 23 E.H.R.R. 101 , Buckley followed, and (2) the Strasbourg jurisprudence showed that contractual and proprietary rights to possession could not be defeated by a defence to possession proceedings based on Art.8. Consequently, there was no question to be considered by the county court. Per Lords Bingham and Steyn, any action by a public authority seeking possession of residential property occupied by a defendant as his home would ordinarily engage Art.8. The reasoning of the Court of Appeal reflected the tenor of Strasbourg jurisprudence and gave effect to the purpose of the Convention, Wood v United Kingdom (32540/96) (1997) 24 E.H.R.R. CD69 , Larkos v Cyprus (2000) 30 E.H.R.R. 597 and Sheffield City Council v Smart [2002] EWCA Civ 4, [2002] H.L.R. 34 considered."
    ],
    "FLAGS": [
        "Criticised",
        "Bingham"
    ],
    "CIT": "[2003] UKHL 43",
    "JUDGE": "Lord Bingham of Cornhill; Lord Steyn; Lord Hope of Craighead; Lord Millett; Lord Scott of Foscote",
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Joint Tenancies",
        "Possession Proceedings",
        "Public Sector Tenancies",
        "Residential Tenancies",
        "Right to Respect For Home",
        "Termination"
    ]
},
{
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Human Rights - Homelessness - Introductory Tenancies - Possession - Possession Claims - Postponement - Proportionality - Public Sector Tenancies - Right to Respect For Home - Right to Respect For Private and Family Life",
    "COUNSEL": "For the appellant Powell: Jan Luba QC, Kevin Gannon. For the appellant Hall: Jan Luba QC, Adam Fullwood. For the appellant Frisby: Jan Luba QC, Michael Singleton. For the respondents Hounslow LBC and Leeds City Council: Ashley Underwood QC, Kelvin Rutledge. For the respondent Birmingham City Council: Andrew Arden QC, Jonathan Manning, Robert Brown. For the intervener Secretary of State for Communities and Local Government: Daniel Stilitz QC, Ben Hooper.",
    "COURT": "UKSC",
    "NAME": "Hounslow LBC v Powell",
    "YEAR": "2011",
    "CITATION": "Hounslow LBC v Powell [2011] UKSC 8",
    "NUMBER": "104",
    "RELATED": [
        "Wandsworth LBC v Dixon",
        "Malik v Fassenfelt",
        "Kay v Lambeth LBC",
        "Harrow LBC v Qazi",
        "AG Securities v Vaughan",
        "Antoniades v Villiers",
        "Crate v Miller",
        "Barca v Mears",
        "Herbert v Doyle",
        "Williams v Williams",
        "Sava v SS Global Ltd",
        "Re King"
    ],
    "HELD": [
        "Judgment accordingly.",
        "(1) (Per Lord Hope) There was nothing in the statutory schemes which prevented the court from refusing to make an order for possession if it considered that it would not be proportionate to do so. In the ordinary case, the relevant facts would be encapsulated entirely in the two legitimate aims that were identified in Pinnock , namely vindicating the local authority&#8217;s ownership rights and enabling it to comply with its public duties in relation to the allocation and management of its housing stock. It was against those aims, which should always be taken for granted, that the court had to weigh up any factual objections that might be raised by the defendant and what he had to say about his personal circumstances. Only if a defence was put forward that was seriously arguable would it be necessary to adjourn the case for further consideration of the issues of lawfulness or proportionality. If that test was not met, the order for possession should be granted. The threshold for raising an arguable case on proportionality was a high one which would be reached in only a small proportion of cases (see paras 34-45 of judgment). (Per Lord Phillips) In homelessness cases, while there was no burden on a local authority, in the first instance, to justify to the court its application for a possession order or to plead the reason for seeking such an order, the tenant had to be informed of the reason for the authority&#8217;s action so that he could, if so minded, attempt to raise a proportionality challenge (para.116). (2) (Per Lord Hope) On the face of it, the court had no discretion under s.127(2) as to whether or not it should make an order for possession against an introductory tenant. However, in Pinnock , which involved a demoted tenant, the court held that, as lawfulness had to be an inherent requirement of the procedure for seeking a possession order, it had equally to be open to the court to consider whether that procedure had been lawfully followed having regard to the defendant&#8217;s art.8 rights. It was by that route, and by the application of the Human Rights Act 1998 s.3(1) and s.7(1)(b), that the court held that s.143D(2) of the 1996 Act could be read and given effect to enable the judge to deal with a defence that relied on an alleged breach of the defendant&#8217;s rights under art.8. There was a sufficient similarity between s.127(2) and s.143D(2) to apply the reasoning in Pinnock to introductory tenancies also, Pinnock applied (paras 51, 56). (3) (Per Lord Hope) The effect of s.89(1) of the 1980 Act was to remove from the court the discretion which it had at common law to select whatever length of postponement it thought fit. However, s.89 did not take away from the court its ordinary powers of case management. It would be perfectly proper for it, for example, to defer making the order for possession pending an appeal or to enable proceedings to be brought in the Administrative Court. An adjournment would also be a permissible exercise of the court&#8217;s discretion (paras 58, 63)."
    ],
    "FLAGS": [
        "Criticised",
        "Hale"
    ],
    "CIT": "[2011] UKSC 8",
    "JUDGE": "Lord Phillips PSC; Lord Hope DPSC; Lord Rodger JSC; Lord Walker JSC; Lady Hale JSC; Lord Brown JSC; Lord Collins JSC",
    "SUMMARY": [
        "The Supreme Court set out the content of the proportionality review that was required by the European Convention on Human Rights 1950 art.8 where possession proceedings were brought against an introductory tenant or a homeless person.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; In conjoined appeals against decisions relating to possession proceedings brought against two individuals occupying premises under introductory tenancies and against a person who had been granted a licence to occupy a property under the homelessness regime in the Housing Act 1996 Pt VII, the court was asked to determine certain issues.",
        "The issues were (i) the content of the proportionality review required by the European Convention on Human Rights 1950 art.8 where possession was sought against an introductory tenant or a homeless person; (ii) whether s.127(2) of the 1996 Act could be read compatibly with the introductory tenant&#8217;s art.8 right so as to allow him to defend a claim for possession on the grounds recognised in Manchester City Council v Pinnock [2010] UKSC 45, [2011] 2 A.C. 104; (iii) whether the court could defer the delivery of possession for a period in excess of the maximum permitted by the Housing Act 1980 s.89 if it considered that it would be proportionate to do so."
    ],
    "TYPE": "Case",
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Human Rights",
        "Homelessness",
        "Introductory Tenancies",
        "Possession",
        "Possession Claims",
        "Postponement",
        "Proportionality",
        "Public Sector Tenancies",
        "Right to Respect For Home",
        "Right to Respect For Private and Family Life"
    ]
},
{
    "CATEGORY": "Real Property Other Related Subjects: Landlord and Tenant - Human Rights - Eviction - Possession Orders - Proportionality - Right to Respect For Private and Family Life - Squatters - Trespassers",
    "COUNSEL": "For the appellants: Jan Luba QC, Lindsay Johnson. For the respondent: Naomi Winston.",
    "COURT": "EWCA",
    "NAME": "Malik v Fassenfelt",
    "CITATION": "Malik v Fassenfelt [2013] EWCA Civ 798",
    "NUMBER": "105",
    "RELATED": [
        "Barca v Mears",
        "Hounslow LBC v Powell",
        "Coventry v Lawrence",
        "Street v Mountford",
        "Groveholt Ltd v Hughes",
        "AG Securities v Vaughan",
        "Herbert v Doyle",
        "Wandsworth LBC v Dixon",
        "Whittaker v Kinnear",
        "Bishop v Blake",
        "Cuckmere Brick Co v Mutual Finance",
        "Walby v Walby"
    ],
    "SUMMARY": [
        "A possession order requiring the removal of squatters from private land onto which they had trespassed and established a home was not disproportionate. Whilst the majority of the Court of Appeal declined to comment on the issue, the minority suggested obiter that the European Convention on Human Rights 1950 art.8 was capable of application where squatters had trespassed onto a private landowner&#8217;s land and established a home there, though it would only be in exceptional circumstances that the squatters&#8217; eviction would constitute a disproportionate means of achieving the legitimate aim of enforcing the landowner&#8217;s property rights.",
        "<span class=\"it\"><span class=\"bd\">Abstract</span></span> &mdash; The appellant squatters (X) appealed against the decision to grant the respondent private landowner (M) a possession order.",
        "X had entered M&#8217;s land without permission and established a home there. M subsequently applied for possession of the land. The judge held that as the court was a public authority and the land was being occupied as a home, the European Convention on Human Rights 1950 art.8 was capable of application, even though M was a private individual and X were trespassers. Consequently, she held that the real issue was whether art.8 afforded any additional protection to X in the circumstances of the case, the question being whether X&#8217;s eviction was a proportionate means of achieving a legitimate aim. She stated that it was difficult to envisage circumstances where the eviction of trespassers would not be found to be a proportionate means of achieving a legitimate aim, and concluded that it was appropriate to order possession.SUMMARY X submitted that in the light of legal developments in the area of trespass, it was time to acknowledge, as the Supreme Court had in Manchester City Council v Pinnock [2011] UKSC 6, [2011] 2 W.L.R. 220 and Hounslow LBC v Powell [2011] UKSC 8, [2011] 2 A.C. 186, that the rule in McPhail v Persons, Names Unknown [1973] Ch. 447 that there was no discretion to suspend a possession order against squatters had to be relaxed in order to comply with art.8."
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) (Per Sir Alan Ward) Having considered all of the relevant authorities, McPhail could no longer be regarded as good law, McPhail not followed. It was rightly common ground that X had established a home on the land because of a &#8220;sufficient and continuous link with a specific place&#8221;, and were therefore entitled to protection under art.8(1). Even if art.8 had no direct application between a private landowner and the trespassers on his land, the court as a public authority was obliged by the Human Rights Act 1998 s.6 to act compatibly with that right. It had to consider whether the making of a possession order was proportionate, and whether the occupiers&#8217; eviction was a proportionate means of achieving a legitimate aim, Powell and Pinnock followed. The rule in McPhail that the court had no jurisdiction to extend time to a trespasser could no longer stand against a requirement that proportionality might demand that a trespasser be given some time before being required to vacate. Another crucial factor distinguishing the current position from McPhail was the fact that in McPhail there was no defence to the claim of possession, whereas if art.8 was engaged, there was at least a potential defence. If proportionality conferred upon the court a discretion to consider giving time to the trespasser, then the Housing Act 1980 s.89 had to apply. However, s.89 did not prevent the making of a possession order forthwith: it merely placed a limit on possession being delayed beyond 14 days after the making of the order, save in cases of exceptional hardship. Accordingly, the test was whether eviction was a proportionate means of achieving a legitimate aim. The fact that the landowner had a legal right to possession was a very strong factor in support of proportionality: it spoke for itself and needed no further explanation or justification. Thus, even if squatters had established a home on land where they otherwise had no legal right to remain, it was difficult to imagine exceptional circumstances which would give them an unlimited and unconditional right to remain (see paras 26-28 of judgment). (2) There was no error in the judge&#8217;s approach. Having found that art.8 was engaged, she correctly identified the issue as whether art.8 afforded &#8220;any additional protection to the defendants&#8221;, namely whether eviction was a proportionate means of achieving a legitimate aim. It was beyond question that she was considering whether to extend the time at which possession was to be given. She started with the difficulty of envisaging circumstances where eviction would not be found to be a proportionate means of achieving a legitimate aim. There was nothing wrong with that approach. An owner was entitled to the return of his property unless some exceptional circumstances militated against it. The judge was fully alive to the fact that X were &#8220;good&#8221; squatters, and was obviously impressed by them and to that extent sympathetic. It was impossible to find that she was not entitled to conclude that the benefits to the local community arising from X&#8217;s occupation were not enough to preclude M seeking to vindicate his ownership rights to the immediate return of his property. If and in so far as she was relying on McPhail for the assertion that the court had no jurisdiction to extend time for possession, she was wrong, but that error had no material effect upon her judgment (paras 38-39). (3) (Per Toulson, LJ and Lloyd, LJ) Whilst agreeing that the judge was right on the availability of art.8 as a defence to the claim, and that her carefully reasoned decision to order immediate possession of the land could not be faulted and the appeal had to be dismissed, opinion was reserved on whether McPhail had ceased to represent the law in cases of trespass to privately owned land, McPhail considered (paras 42, 47-48, 51-52)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "CIT": "[2013] EWCA Civ 798",
    "JUDGE": "Lloyd LJ; Lord Toulson; Sir Alan Ward",
    "TYPE": "Case",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Landlord and Tenant",
        "Human Rights",
        "Eviction",
        "Possession Orders",
        "Proportionality",
        "Right to Respect For Private and Family Life",
        "Squatters",
        "Trespassers"
    ]
}];"; 

