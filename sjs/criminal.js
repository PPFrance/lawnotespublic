cts_ = "WwogICAgIkNhc2UiLAogICAgIkNhc2UgT3ZlcnZpZXdzIiwKICAgICJDb25jZXB0IiwKICAgICJIZWxwIgpd"; 

crt_ = "W10="; 

cnc_ = "WwogICAgIkFzc2F1bHQgT2NjYXNpb25pbmcgQUJIIC0gUzQ3IiwKICAgICJBc3NhdWx0IGFuZCBCYXR0ZXJ5IC0gUzM5IENKQSAxOTg4IiwKICAgICJDYXVzYXRpb24iLAogICAgIkNvbnRpbnVpbmcgQWN0IERvY3RyaW5lIiwKICAgICJEaW1pbmlzaGVkIFJlc3BvbnNpYmlsaXR5IC0gUzIgSG9taWNpZGUgQWN0IDE5NTciLAogICAgIkRpbWluaXNoZWQgUmVzcG9uc2liaWxpdHkgLSBTNTIgQ0pBIiwKICAgICJEdXJlc3MiLAogICAgIkVsZW1lbnRzIG9mIGFuIE9mZmVuY2UiLAogICAgIkdyb3NzIE5lZ2xpZ2VuY2UgTWFuc2xhdWdodGVyIiwKICAgICJJbnRlbnRpb24gZm9yIE11cmRlciIsCiAgICAiTG9zcyBvZiBDb250cm9sIC0gUzU0IENKQSIsCiAgICAiTWVucyBSZWEiLAogICAgIk1lcmN5IEtpbGxpbmciLAogICAgIk11cmRlciIsCiAgICAiT21pc3Npb25zIGFzIEFjdHVzIFJldXMiLAogICAgIlByb3ZvY2F0aW9uIiwKICAgICJSZWNrbGVzcyBNYW5zbGF1Z2h0ZXIiLAogICAgIlJlY2tsZXNzbmVzcyIsCiAgICAiU2VsZiBEZWZlbmNlIiwKICAgICJTaW5nbGUgVHJhbnNhY3Rpb24gRG9jdHJpbmUiLAogICAgIlN0cmljdCBMaWFiaWxpdHkiLAogICAgIlRyYW5zZmVycmVkIE1hbGljZSIsCiAgICAiVW5sYXdmdWwgQWN0IE1hbnNsYXVnaHRlciIsCiAgICAiVm9sdW50YXJ5IE1hbnNsYXVnaHRlciIsCiAgICAiV291bmRpbmcgb3IgQ2F1c2luZyBHQkggLSBTMjAiLAogICAgIldvdW5kaW5nIG9yIENhdXNpbmcgR0JIIHdpdGggSW50ZW50IC0gUzE4Igpd"; 

cgs_ = "WwogICAgIjEuIENvbnRyYWN0dWFsIER1dHkiLAogICAgIjIuIEZhbWlseSBEdXR5IiwKICAgICIzLiBGYW1pbHkgRHV0eSIsCiAgICAiMy4gVm9sdW50YXJ5IEFzc3VtcHRpb24iLAogICAgIjQuIFN1cGVydmVuaW5nIEZhdWx0IiwKICAgICI2LiBQdWJsaWMgT2ZmaWNlIiwKICAgICJBQkgiLAogICAgIkFibm9ybWFsaXR5IG9mIE1pbmQiLAogICAgIkFjdHVzIFJldXMiLAogICAgIkFzc2F1bHQiLAogICAgIkF0dGVtcHQiLAogICAgIkJhdHRlcnkiLAogICAgIkNhdXNhdGlvbiIsCiAgICAiQ29pbmNpZGVuY2Ugb2YgTVIgYW5kIEFSIiwKICAgICJDb21wbGljaXR5IiwKICAgICJDb25zZW50IiwKICAgICJDb25zcGlyYWN5IiwKICAgICJDb250aW51aW5nIEFjdCIsCiAgICAiQ29ycnVwdGlvbiBvZiBQdWJsaWMgTW9yYWxzIiwKICAgICJDb3Vuc2VsbGluZyIsCiAgICAiQ3JpbWluYWwgTGlhYmlsaXR5IiwKICAgICJEZWJ0IiwKICAgICJEZWZlbmNlcyIsCiAgICAiRGVsaWJlcmF0ZSBEZXBhcnR1cmUgRnJvbSBDb21tb24gRGVzaWduIiwKICAgICJEaW1pbmlzaGVkIFJlc3BvbnNpYmlsaXR5IiwKICAgICJEcnVnIEFkbWluaXN0cmF0aW9uIiwKICAgICJEdXJlc3MiLAogICAgIkVsZW1lbnRzIiwKICAgICJFbmQgb2YgYSBMaWZlIiwKICAgICJGYWN0IiwKICAgICJGaWdodCBhbmQgRmxpZ2h0IiwKICAgICJGb3Jlc2VlYWJpbGl0eSIsCiAgICAiRnJhdWQiLAogICAgIkdCSCIsCiAgICAiR2VuZXJhbCBEZWZlbmNlcyIsCiAgICAiR3Jvc3MgTmVnbGlnZW5jZSBNYW5zbGF1Z2h0ZXIiLAogICAgIkltbWVkaWFjeSIsCiAgICAiSW5jaG9hdGUgTGlhYmlsaXR5IiwKICAgICJJbmRlY2VudCBBc3NhdWx0IiwKICAgICJJbnRlbnQiLAogICAgIkludG94aWNhdGlvbiIsCiAgICAiSm9pbnQgRW50ZXJwcmlzZSIsCiAgICAiSnVzdGlmaWNhdGlvbiIsCiAgICAiS25vd2xlZGdlIiwKICAgICJMYXciLAogICAgIkxpYWJpbGl0eSIsCiAgICAiTG9zcyBvZiBDb250cm9sIiwKICAgICJNYW5zbGF1Z2h0ZXIiLAogICAgIk1lZGljYWwgQ29uZGl0aW9uIiwKICAgICJNZWRpY2FsIEdyb3VuZHMiLAogICAgIk1lZGljYWwgSXNzdWVzIiwKICAgICJNZWRpY2FsIFRyZWF0bWVudCIsCiAgICAiTWVucyBSZWEiLAogICAgIk1pc3Rha2VuIEJlbGllZiIsCiAgICAiTXVyZGVyIiwKICAgICJOZWNlc3NpdHkiLAogICAgIk5ldyBJbnRlcnZlbmluZyBBY3QiLAogICAgIk5vbi1GYXRhbCBPZmZlbmNlcyIsCiAgICAiT2JsaXF1ZSIsCiAgICAiT2YgQ2lyY3Vtc3RhbmNlcyIsCiAgICAiT21pc3Npb25zIiwKICAgICJQcmVwYXJhdG9yeSIsCiAgICAiUHJlcGFyYXRvcnkgQWN0aW9ucyIsCiAgICAiUHJlcGFyYXRvcnkgQWN0cyIsCiAgICAiUHJlc2VuY2UiLAogICAgIlByZXZlbnRpb24gb2YgYSBDcmltZSIsCiAgICAiUHJvdm9jYXRpb24iLAogICAgIlByb3ZvY2F0aW9uIGFuZCBMb3NzIG9mIENvbnRyb2wiLAogICAgIlByb3ZvY2F0aW9uL0xvc3Mgb2YgQ29udHJvbCIsCiAgICAiUmFjaWFsbHkgb3IgUmVsaWdpb3VzbHkgTW90aXZhdGVkIE9mZmVuY2VzIiwKICAgICJSYXBlIiwKICAgICJSZWNrbGVzcyBNYW5zbGF1Z2h0ZXIiLAogICAgIlJlY2tsZXNzbmVzcyIsCiAgICAiU2Vjb25kYXJ5IExpYWJpbGl0eSIsCiAgICAiU2VsZi1EZWZlbmNlIiwKICAgICJTZXh1YWwgSW5maWRlbGl0eSIsCiAgICAiU2V4dWFsIE9mZmVuY2VzIiwKICAgICJTdHJpY3QgTGlhYmlsaXR5IiwKICAgICJTdXBlcnZlbmluZyBGYXVsdCIsCiAgICAiVGhlZnQiLAogICAgIlRoaW4gU2t1bGwgUnVsZSIsCiAgICAiVHJhbnNhY3Rpb24gVGhlb3J5IiwKICAgICJUcmFuc2ZlcnJlZCBNYWxpY2UiLAogICAgIlVua25vd24iLAogICAgIlVubGF3ZnVsIEFjdCBNYW5zbGF1Z2h0ZXIiLAogICAgIlVubGF3ZnVsIFdvdW5kaW5nIiwKICAgICJWb2x1bnRhcnkgQXNzb2NpYXRpb24iLAogICAgIlZvbHVudGFyeSBFeHBvc3VyZSB0byBSaXNrIiwKICAgICJWb2x1bnRhcnkgSW50b3hpY2F0aW9uIiwKICAgICJXaXRoZHJhd2FsIiwKICAgICJXb3VuZGluZyIKXQ=="; 

pfl_ = "WwogICAgIk1lIiwKICAgICJDdXJyZW50IExhdyIsCiAgICAiSGlzdG9yaWNhbCIsCiAgICAiTG92ZSBSaXZhbCIsCiAgICAiT2xkIExhdyIKXQ=="; 

ntn_ = '{
    "lee":"77",
    "dpp v pal":"103",
    "white":"247",
    "case overviews for nonfatal offences":"277",
    "r v b 2013":"202",
    "gemmell and richardson":"121",
    "intention for murder":"12",
    "woolmington v dpp":"256",
    "mitchell":"182",
    "case overviews for attempt":"264",
    "case overviews for conspiracy":"266",
    "ag ref no 1 of 1975":"39",
    "bedder v dpp":"51",
    "ogrady":"189",
    "wilson 1996":"253",
    "willoughby":"252",
    "latimer":"164",
    "assault and battery  s39 cja 1988":"21",
    "martin 1989":"173",
    "camplin":"68",
    "case overviews for nonfatal offences  gbh":"284",
    "ag ref no 4 of 1980":"43",
    "dyson":"107",
    "r v jones margaret":"209",
    "rahman":"214",
    "whybrow":"248",
    "gammon hong kong ltd v ag of hong kong":"119",
    "dietschmann":"98",
    "thabo meli":"236",
    "geddes":"120",
    "prince":"200",
    "wounding or causing gbh with intent  s18":"24",
    "davies v dpp":"88",
    "cheshire":"72",
    "case overviews for intoxication":"273",
    "westminster city council v croyalgrange ltd":"245",
    "b a minor v dpp":"44",
    "gullefer":"132",
    "hughes":"138",
    "duffy":"105",
    "gnango":"126",
    "greatrex":"130",
    "venna":"240",
    "s52 cja 2007":"17",
    "sanctity of life":"10",
    "campbell":"67",
    "tabassum":"234",
    "bollom":"262",
    "matudi":"176",
    "sweet v parsley":"232",
    "coney":"81",
    "k":"153",
    "r v jf and ne":"207",
    "symonds":"233",
    "bourne 1952":"57",
    "smith":"225",
    "miller":"180",
    "ag ref no 1 of 1992":"40",
    "deyemi and another":"94",
    "airedale nhs trust v bland":"30",
    "case overviews for voluntary association":"282",
    "voluntary manslaughter":"13",
    "lewis":"166",
    "wood":"254",
    "case overviews for racially or religiously motivated offences":"278",
    "bryce":"61",
    "church":"73",
    "environment agency v empress car company":"114",
    "people v beardsley":"196",
    "khan":"157",
    "calhaem":"65",
    "bell":"52",
    "le brun":"165",
    "r v b":"201",
    "diminished responsibility  s52 cja":"17",
    "ahluwalia":"34",
    "masilela":"175",
    "baillie":"45",
    "palmer v the queen":"193",
    "case overviews for sexual offences":"279",
    "jones":"150",
    "dolby":"257",
    "case overviews for corruption of public morals":"267",
    "kingston":"158",
    "smith morgan":"228",
    "olugboja":"190",
    "diminished responsibility  s2 homicide act 1957":"16",
    "aitken":"31",
    "recklessness":"7",
    "thornton no 2":"237",
    "murder":"11",
    "misra":"181",
    "hasan":"134",
    "guilty mind":"3",
    "devlin v armstrong":"92",
    "chan wing siu":"71",
    "case overviews for inchoate liability":"272",
    "r v g":"204",
    "ag for jersey v holley":"38",
    "provoked":"14",
    "mens rea":"3",
    "golds":"129",
    "blaue":"55",
    "hui chiming":"139",
    "causes":"8",
    "mcnally":"177",
    "pearson":"194",
    "gemma evans":"115",
    "donovan":"261",
    "blakely and sutton v chief constable of west mercia":"54",
    "deller":"87",
    "r v jewell":"206",
    "r f v dpp and a":"203",
    "carey":"69",
    "rafferty":"213",
    "emmett":"112",
    "el ghazal":"109",
    "kaitamaki v the queen":"154",
    "malcolm":"171",
    "dalloway":"86",
    "dudley and stephens":"106",
    "stringer":"231",
    "haystead v cc of derbyshire":"135",
    "duress":"25",
    "r v jm and sm":"208",
    "continuing act doctrine":"6",
    "newbury":"188",
    "jheeta":"147",
    "eggshell skull rule":"8",
    "case overviews for transaction theory":"280",
    "dpp v k":"101",
    "nedrick":"187",
    "case overviews for voluntary exposure to risk":"283",
    "roberts":"216",
    "konzani":"161",
    "kennedy no 2":"156",
    "self defence":"26",
    "ireland and burstow":"145",
    "reckless manslaughter":"20",
    "dpp for ni v maxwell":"102",
    "a v united kingdom":"27",
    "roberts 1993":"217",
    "anderson and morris":"35",
    "gross negligence manslaughter":"19",
    "allen":"32",
    "millard and vernon":"179",
    "clarkson":"75",
    "sharp":"221",
    "dadson":"85",
    "r on the application of t v dpp":"212",
    "case overviews for criminal liability":"268",
    "golding":"128",
    "knuller":"160",
    "clegg":"76",
    "stewart":"229",
    "diminished responsibility":"17",
    "bainbridge":"46",
    "uddin":"239",
    "wounding or causing gbh  s20":"23",
    "case overviews for elements":"269",
    "f v west berkshire health authority":"116",
    "brown":"60",
    "dias":"96",
    "carter v richardson":"70",
    "wacker":"241",
    "clinton":"78",
    "strict liability":"9",
    "bourne":"56",
    "ag ref no 2 of 1983":"41",
    "r v s":"210",
    "martin 2002":"174",
    "provocation":"14",
    "shaw v dpp":"222",
    "caldwell":"64",
    "gillick v west norfolk health authority":"125",
    "elbekkay":"110",
    "jjc v eisenhower":"148",
    "case overviews for manslaughter":"275",
    "byrne":"63",
    "case overviews for murder":"276",
    "martin":"172",
    "dpp v smith":"104",
    "case overviews for gross negligence manslaughter":"271",
    "transferred malice":"4",
    "cogan and leak":"79",
    "shivpuri":"223",
    "latif":"163",
    "kitson":"159",
    "case overviews for unlawful act manslaughter":"281",
    "case overviews for joint enterprise":"274",
    "novus actus interveniens":"8",
    "gladstone williams":"123",
    "woollin":"255",
    "english and weddle":"113",
    "barnes":"48",
    "dowds":"100",
    "majewski":"169",
    "heard":"136",
    "instan":"143",
    "court":"83",
    "fitzpatrick":"118",
    "walker":"242",
    "mahmood asaf":"168",
    "jogee":"149",
    "elements of an offence":"1",
    "bree":"59",
    "dytham":"108",
    "morgan v dpp":"185",
    "abbott":"28",
    "elliott v c a minor":"111",
    "case overviews for general defences":"270",
    "fagan":"117",
    "asmelash":"37",
    "unlawful act manslaughter":"18",
    "jones 1990":"151",
    "santanabermudez":"219",
    "s54 cja":"15",
    "griffin":"131",
    "hyam v dpp":"141",
    "walker and hayles":"243",
    "adomako":"29",
    "case overviews for complicity":"265",
    "hancock and shankland":"133",
    "smith v woking police":"227",
    "bowler":"58",
    "linekar":"167",
    "pommell":"198",
    "dear":"91",
    "bateman":"259",
    "powell and daniels":"199",
    "dhaliwal":"95",
    "bird":"53",
    "wilcox v jeffrey":"249",
    "williams":"250",
    "kennedy no 1":"155",
    "holland":"137",
    "pembliton":"195",
    "stone and dobinson":"230",
    "moloney":"184",
    "pagett":"192",
    "single transaction doctrine":"5",
    "richardson":"215",
    "tuberville v savage":"238",
    "pace and rogers":"191",
    "omissions as actus reus":"2",
    "wilson":"246",
    "cunningham":"84",
    "humphreys":"140",
    "watson":"244",
    "jackson":"146",
    "pittwood":"197",
    "r v you 2016 city":"0",
    "anderton v ryan":"36",
    "williams 1991":"251",
    "smith 1975":"226",
    "ag ref no 6 of 1980":"263",
    "ibrams":"142",
    "devonald":"93",
    "assault occasioning abh  s47":"22",
    "loss of control":"15",
    "barnfather":"50",
    "collins v wilcock":"80",
    "rodgers":"218",
    "malcharek and steel":"170",
    "gianetto":"124",
    "causation":"8",
    "clarence":"74",
    "slingsby":"224",
    "tandy":"235",
    "dica":"97",
    "santana":"219",
    "constanza":"82",
    "r v h":"205",
    "ireland":"144",
    "national coal board v gamble":"186",
    "lane and lane":"162",
    "ag ref no 3 of 1994":"42",
    "callow v tillstone":"66",
    "assault":"21",
    "r v zebedee":"211",
    "barnard":"47",
    "dawson":"90",
    "michael kane v hm advocate 2009 scotland":"178",
    "mercy killing":"10",
    "doughty":"99",
    "goodfellow":"258",
    "dpp v smith 1961":"260",
    "new intervening act":"8",
    "s2 homicide act 1957":"16",
    "jordan":"152",
    "loss of control  s54 cja":"15",
    "gibbins and proctor":"122",
    "mohan":"183",
    "barnsdalequean":"49",
    "savage":"220",
    "alphacell ltd v woodward":"33",
    "buckoke v glc":"62",
    "dawes":"89"
}';

enableTests = true;

currentTexture = 'img/textures/cream-paper.png';

subject = 'criminal';

defcols = '2';

cds_ = " [ {
    "SPECIAL": "<span class=\"bd\">Hello!</span><br>This is a collection of flashcards for the City GDL written and compiled by Liam. It contains cards with <span class=\"lnk typln\">Case Overviews</span> for a given subject and of course <span class=\"lnk typln\">Case</span><span class=\"it\">s</span>, from which the facts can be removed to leave only the ratio, by fiddling around in the <span><i class=\"material-icons\" style=\"font-size: 80% !important;\">menu</i></span> options. There, you can also change to a <span class=\"sansfont\">sans</span> typeface when Garamond starts to make you want to rip out your kidneys and stuff them into your eye sockets. If the wacky cards-in-a-pile schtick gets up your nose, adjust the <span class=\"it\">messiness</span>, etc. <br><br>There are tests. Arguably a bit gimmicky, they&#8217;re by means of multiple-guessing the ratio belonging to a case, or vice-versa. You can also do this by typing in the case name for a ratio <span class=\"it\">without</span> seeing any choices. <br><br>Flipping cards back and forth, moving to the next or fetching back the last, is a matter of the <span class=\"bd\">left</span> and <span class=\"bd\">right</span> keys. Or, on iOS devices, a matter of greasing up the screen by <span class=\"bd\">swiping</span> left or right.",
    "TERMS-OF-ART": "mens rea; actus reus; novus actus interveniens",
    "CATEGORIES": [
        "Liam's Criminal Law Flashcards"
    ],
    "TYPE": "Help",
    "NUMBER": "0",
    "NAME": "R v You [2016] City",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">These Cards</span></span><br>Were very kindly provided by Liam. <span class=\"it\">I hope he doesn&#8217;t mind them being here for the current exam season.</span> If he does, they&#8217;ll obviously have to be disappeared.",
        "<span class=\"ud\"><span class=\"bd\">Filter</span></span><br>Enter names of <span class=\"bd\">cases</span>, <span class=\"bd\">categories</span>, <span class=\"bd\">concepts</span>, or free text in quotes. These broaden out what&#8217;s displayed. By contrast, <span class=\"bd\">tags</span>, <span class=\"bd\">courts</span> and <span class=\"bd\">card types</span> all whittle down what you see.",
        "<span class=\"ud\"><span class=\"bd\">Config, etc </span></span><br>The options button (top left) brings up a panel with options to fiddle with. They, like the cards you&#8217;re looking at, are remembered when you come back a day later. But if something fouls up, a discreet link on the bottom left lets you <span class=\"bd\">reset everything</span>.",
        "<span class=\"ud\"><span class=\"bd\">iPhones</span></span><br>Use on iPhones is rendered more biddable and less cluttered by pressing the &#8216;share&#8217; button (bottom centre) in safari, then <span class=\"bd\">add to home screen</span>.",
        "<span class=\"ud\"><span class=\"bd\">Tags</span></span><br>These, in the panel on the right, can be dragged onto or away from cards, or into the filter thingummy up top. You can also make your own.",
        "<span class=\"ud\"><span class=\"bd\">Links</span></span><br>Links to another cards bring them up, jiggling around and fading out unless you click/press to fasten them down. Why? No idea. <span class=\"bd\">Case cards</span> should have <span class=\"bd\">On Westlaw</span> or <span class=\"bd\">On curia.eu</span> at the top left, which should take you straight to the relevant material on those sites. Other links to, e.g., legislation.gov.uk, or wikipedia, if the entry was particularly helpful, will show up when appropriate or when some inexplicable event caused my level of interest to rise above the endlessly grey and listless dysphoria constituting my mental background noise.",
        "<span class=\"ud\"><span class=\"bd\">Notes</span></span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\">Note well</span><span class=\"it\"> &mdash; this was chucked together </span>in a hurry_, so def. has bugs, glitches, etc. And it&#8217;s meant for the <span class=\"bd\">latest version of Safari or Chrome</span> on <span class=\"bd\">Mac</span>. What, you&#8217;re a law student and you don&#8217;t have a Mac?</span></li></ul>"
    ],
    "CATEGORY": "Liam's Criminal Law Flashcards"
},
{
    "RELATED": [
        "Continuing Act Doctrine",
        "Omissions as Actus Reus",
        "Strict Liability",
        "Mens Rea",
        "Recklessness",
        "Single Transaction Doctrine",
        "Causation",
        "Transferred Malice",
        "Self Defence",
        "Loss of Control - S54 CJA",
        "Diminished Responsibility - S52 CJA",
        "Intention for Murder"
    ],
    "CATEGORIES": [
        "Elements"
    ],
    "NUMBER": "1",
    "TYPE": "Concept",
    "NAME": "Elements of an Offence",
    "SUMMARY": [
        "Other than those of <span class=\"lnk caseln\">strict liability</span> where <span class=\"lnk caseln\">mens rea</span> is forgone, the prosecution must prove beyond reasonable doubt (<span class=\"lnk caseln\">Woolmington</span>) these two elements:",
        "<ol><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Actus Reus</span></span></span><ul><li><span class=\"nl\">For <span class=\"it\">conduct crimes</span>, doing things the law prohibits.</span></li><li><span class=\"nl\">For <span class=\"it\">result crimes</span>, <span class=\"lnk caseln\">voluntarily</span> <span class=\"lnk caseln\">causing</span> the prohibited result.</span><ul><li><span class=\"nl\"> By commission not omission (<span class=\"lnk caseln\">Airdale NHS Trust v Bland</span>), with six exceptions:<br><span class=\"bd\">1. contract</span> &mdash; <span class=\"lnk caseln\">Pittwood</span>, <span class=\"bd\">2. family</span> &mdash; <span class=\"lnk caseln\">Gibbins and Proctor</span>, <span class=\"lnk caseln\">Smith (1975)</span>, <span class=\"lnk caseln\">Gemma Evans</span>;  <span class=\"bd\">3. voluntary assumption</span> &mdash; <span class=\"lnk caseln\">Stone and Dobinson</span>, <span class=\"lnk caseln\">Fagan</span>; <span class=\"bd\">4. creation of a dangerous situation</span> &mdash; <span class=\"lnk caseln\">Miller</span>, <span class=\"lnk caseln\">Santana</span>, also <span class=\"lnk caseln\">Gemma Evans</span>; <span class=\"bd\">5. statutory duty</span> &mdash; traffic offences, etc, and <span class=\"bd\">6. holding public office</span> &mdash; <span class=\"lnk caseln\">Dytham</span>.</span></li></ul></li></ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Mens Rea</span></span></span><ul><li><span class=\"nl\"> The mental element of the crime.</span><ul><li><span class=\"nl\"> For some, only <span class=\"lnk caseln\">intention</span> will do &mdash; e.g., <span class=\"lnk caseln\">murder</span>.</span></li><li><span class=\"nl\"> For others the baseline is <span class=\"lnk caseln\">recklessness</span> or <span class=\"lnk caseln\">negligence</span> &mdash; e.g., <span class=\"lnk caseln\">rape</span>.</span></li><li><span class=\"nl\"> For others D1 only has to have had <span class=\"lnk caseln\">knowledge</span> or belief &mdash; e.g., handling stolen goods.</span></li></ul><li><span class=\"nl\">The mens rea must generally <span class=\"it\">match</span> the actus reus (<span class=\"lnk caseln\">Deller</span>).</span></li></ul></ol>",
        "Should it fail to do so, <span class=\"lnk caseln\">transferred malice</span>, <span class=\"lnk caseln\">single transaction doctrine</span> or <span class=\"lnk caseln\">continuing act doctrine</span> may bridge the gap.",
        "Liability further requires D cannot establish any complete or partial defences.",
        "<ol><li style=\"counter-reset: item 2;\"><span class=\"nl\"> <span class=\"bd\"><span class=\"lnk caseln\">Defences</span></span></span><ul><li><span class=\"nl\"><span class=\"bd\">Knowledge</span> which would excuse the actus reus must be <span class=\"it\">known</span> to D (<span class=\"lnk caseln\">Dadson</span>, the copper; <span class=\"lnk caseln\">Deller</span>, the car-seller).</span></li><li><span class=\"nl\"><span class=\"bd\">Mistake of fact</span> may succeed if <span class=\"it\">reasonable</span> (<span class=\"lnk caseln\">Gladstone Williams</span>).</span><ul><li><span class=\"nl\">But not if <span class=\"it\">dishonest</span> (<span class=\"lnk caseln\">Morgan v DPP</span>).</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Mistake of law</span> will not (<span class=\"lnk caseln\">Lee</span>), otherwise</span></li></ul></ol>"
    ],
    "CATEGORY": "Elements"
},
{
    "RELATED": [
        "Single Transaction Doctrine",
        "Mens Rea",
        "Causation",
        "Transferred Malice",
        "Continuing Act Doctrine",
        "Strict Liability",
        "Elements of an Offence",
        "Recklessness",
        "Intention for Murder",
        "Loss of Control - S54 CJA",
        "Assault Occasioning ABH - S47",
        "Gross Negligence Manslaughter"
    ],
    "CATEGORIES": [
        "Elements",
        "Actus Reus"
    ],
    "NUMBER": "2",
    "TYPE": "Concept",
    "NAME": "Omissions as Actus Reus",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Omissions</span></span><br>There is generally no liability for omissions. <span class=\"lnk caseln\">Airedale NHS Trust v Bland</span>. At common law, courts reluctant to extend. E.g., you can&#8217;t pervert the course of justice by an omission. <span class=\"lnk caseln\">Clark (2003)</span>.",
        "<span class=\"bd\">Six exceptions</span> &mdash;",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Contractual duty</span></span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Pittwood</span>, the level-crossing keeper who nodded off.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Family duty</span></span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Gibbins and Proctor</span>, who let their daughter starve to death. <span class=\"lnk caseln\">Smith (1975)</span>, whose wife had pleaded with him not to call an ambulance and died giving birth. <span class=\"lnk caseln\">Gemma Evans</span>, who left her young sister to die of an overdose.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Voluntary assumption/preclusion</span></span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Stone and Dobinson</span>, whose actions showed they&#8217;d taken responsibility for an infirm cousin they then let starve. Never been followed.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Creation of a dangerous situation</span></span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Miller</span>, who&#8217;d a mattress left smouldering and was found guilty on <span class=\"lnk caseln\">supervening fault</span>. Followed in <span class=\"lnk caseln\">Santana</span> and <span class=\"lnk caseln\">Gemma Evans</span>. Also of course <span class=\"lnk caseln\">Fagan</span>, who parked his car on a policeman&#8217;s foot: &#8216;<span class=\"it\">consider yourself</span> parked on my foot&#8217; &mdash; &#8216;fuck off officer, you can wait.&#8217;</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Statutory duty</span></span><ul><li><span class=\"nl\">Traffic offences, e.g., failure to stop &mdash; <span class=\"lnk gsln\">S170 Road Traffic Act 1988</span>.</span></li><li><span class=\"nl\"><span class=\"lnk gsln\">Dangerous Dogs Act</span> &mdash; <span class=\"lnk caseln\">Greener v DPP</span>, savage beast slipped its lead.</span></li><li><span class=\"nl\"><span class=\"lnk gsln\">Terrorism Act 2000</span> &mdash; not reporting to the filth.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Duty from holding public office</span></span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Dythan</span>, the copper who walked on by.</span></li><li><span class=\"nl\">Or if a cop asks you assistance &#8216;in keeping the peace&#8217; &mdash; <span class=\"lnk caseln\">Brown (1941)</span>.</span></li></ul></ol>",
        "<span class=\"ud\"><span class=\"bd\">Essay Questions</span></span><br><span class=\"it\">Titles from past papers</span>",
        "<ul><li style=\"counter-reset: item 2012;\"><span class=\"nl\"> <span class=\"it\">&#8216;In general, the criminal law prohibits the doing of harm but does not impose criminal liability for an omission. However, there are justifiable exceptions to this general principle&#8217; Discuss.</span></span></li><li style=\"counter-reset: item 2013;\"><span class=\"nl\"> <span class=\"it\">&#8216;A number of people who stand around a shallow pool in which a child is drowning and let it drown without taking the trouble to ascertain the depth of the pool, are no doubt shameful cowards, but they can hardly be said to have killed the child.&#8217; Critically discuss this statement. How far, if at all, should liability apply to individuals who fail to act?</span></span></li><li style=\"counter-reset: item 2014;\"><span class=\"nl\"> <span class=\"it\">How far, if at all, should failure to act be the subject of criminalisation?</span></span></li></ul>",
        "<span class=\"it\">Textbook arguments against</span>",
        "<ul><li><span class=\"nl\"> Criminalisation of omissions is an affront to:</span><ul><li><span class=\"nl\"> Individual autonomy.</span></li><li><span class=\"nl\"> Legal certainty of action &mdash; not knowing what&#8217;s criminal.</span></li></ul></ul>",
        "<span class=\"it\">Textbook arguments for</span>",
        "<ul><li><span class=\"nl\"> Courts have general jurisdiction for <span class=\"it\">morality</span>.</span></li></ul>",
        "<span class=\"it\">Wanky arguments</span>",
        "<ul><li><span class=\"nl\"> <span class=\"bd\">Not omissions at all</span></span><ul><li><span class=\"nl\"> Seeing them as such relies on our tendency to package up &#8220;action&#8221; into small, manageable parcels we can deal with. This is increasingly out of step with our understanding of the way the mind works.</span></li><li><span class=\"nl\"> Assuming there to be nothing magical about doing information processing with <span class=\"it\">meat</span> (the picture neuroscience presents as to what the human brain amounts to &mdash; and presents compellingly, with no coherent alternative view) then the decisions humans take are merely consequences of the prior states of their brains. This is certainly a depressing thing to concede, especially given the heavy payload of implication it carries about free-will and determinism, and by further implication,  very basic idea of criminal law that people should be punished for their wicked choices.</span></li><li><span class=\"nl\"> <span class=\"it\">Wow, this has nothing to do with law. Don&#8217;t write this.</span></span></li></ul><li><span class=\"nl\"><span class=\"bd\">Argument from Experience</span></span><ul><li><span class=\"nl\">The magnets in peoples&#8217; moral compasses seem to be variable, weak on average, and prone to attract and repel one another and spin wildly about when present en masse.</span></li><li><span class=\"nl\">For society to maintain its coherence &mdash; to remain a body of people bound together by a broad consensus on what&#8217;s right and wrong &mdash; those with the weakest and most easily influenced senses of morality need ground rules, even if the effect of those ground rules is to punish them for what they themselves don&#8217;t (or might not) think are wrong.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Dythan</span> (public office), <span class=\"lnk caseln\">Gibbins and Proctor</span> and <span class=\"lnk caseln\">Gemma Evans</span> (family), <span class=\"lnk caseln\">Miller</span>, <span class=\"lnk caseln\">Fagan</span>, <span class=\"lnk caseln\">Santana</span> (dangerous situation) all fall squarely clearly into this category.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Pittwood</span></span></li></ul></ul>"
    ],
    "CATEGORY": "Elements &mdash; Actus Reus"
},
{
    "RELATED": [
        "Causation",
        "Continuing Act Doctrine",
        "Recklessness",
        "Strict Liability",
        "Omissions as Actus Reus",
        "Elements of an Offence",
        "Transferred Malice",
        "Single Transaction Doctrine",
        "Unlawful Act Manslaughter",
        "Assault Occasioning ABH - S47",
        "Mercy Killing",
        "Intention for Murder"
    ],
    "CATEGORIES": [
        "Elements"
    ],
    "NUMBER": "3",
    "AKA": "Guilty Mind",
    "NAME": "Mens Rea",
    "TYPE": "Concept",
    "SUMMARY": [
        "<span class=\"it\">Aside from crimes of <span class=\"lnk caseln\">strict liability</span>, this is the requirement that the inventory of D&#8217;s mind contains a <span class=\"bd\">guilty element</span>. Which this must be depends on the crime.</span>",
        "<ul><li><span class=\"nl\">Only <span class=\"lnk caseln\">intention</span> will suffice for <span class=\"lnk caseln\">murder</span>.</span></li><li><span class=\"nl\">For some, <span class=\"lnk caseln\">recklessness</span> (<span class=\"lnk caseln\">assault</span>) or merely <span class=\"lnk caseln\">negligence</span> (<span class=\"lnk caseln\">rape</span>) is enough.</span></li><li><span class=\"nl\">Others require only <span class=\"lnk caseln\">knowledge</span>, e.g., handling stolen goods.</span></li></ul>",
        "<span class=\"bd\">Coincidence with <span class=\"lnk caseln\">Actus Reus</span></span>",
        "<ul><li><span class=\"nl\"><span class=\"lnk caseln\">Transferred malice</span>, where D1 has the mens rea for <span class=\"it\">one crime</span>, but achieves the actus reus for <span class=\"it\">another</span>. <span class=\"lnk caseln\">Pembliton</span>, <span class=\"lnk caseln\">Gnango</span>.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Continuing Act Doctrine</span>, where actus reus is construed as the <span class=\"it\">dangerous situation</span> created by D _and its consequences. <span class=\"lnk caseln\">Fagan</span>, <span class=\"lnk caseln\">Miller</span>, <span class=\"lnk caseln\">Gemma Evans</span>.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Single Transaction Doctrine</span>, where establishing mens rea for <span class=\"it\">one part</span> of a sequence of events is enough to establish it for <span class=\"it\">all parts</span> subsequently. <span class=\"lnk caseln\">Masilela</span>, <span class=\"lnk caseln\">Church</span>, <span class=\"lnk caseln\">Le Brun</span>.</span></li></ul>"
    ],
    "CATEGORY": "Elements"
},
{
    "RELATED": [
        "Continuing Act Doctrine",
        "Single Transaction Doctrine",
        "Causation",
        "Elements of an Offence",
        "Omissions as Actus Reus",
        "Strict Liability",
        "Recklessness",
        "Mens Rea",
        "Reckless Manslaughter",
        "Loss of Control - S54 CJA",
        "Mercy Killing",
        "Murder"
    ],
    "CATEGORIES": [
        "Elements",
        "Coincidence of MR and AR"
    ],
    "NUMBER": "4",
    "TYPE": "Concept",
    "NAME": "Transferred Malice",
    "SUMMARY": [
        "<span class=\"it\">Shackling the mens rea of one crime with the actus reus of another. D makes to give V1 a belting but misses, and hits V2 by accident.</span>",
        "<ul><li><span class=\"nl\">The mens rea can only transfer to the actus reus, should they be both pertain to the <span class=\"it\">same type</span> of crime. <span class=\"lnk caseln\">Pembliton</span>.</span></li></ul>",
        "<span class=\"bd\">Landmarks</span>",
        "<ul><li><span class=\"nl\"><span class=\"lnk caseln\">Latimer</span> &mdash; a fight in a pub in 1886. Intention to injure A, injured B, instead. Malice transferred.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Pembliton</span> &mdash; another fight in a pub in the C19th. Malice <span class=\"bd\">not</span> transferred.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Mitchell</span> &mdash; elements of <span class=\"lnk caseln\">unlawful act manslaughter</span> made out when a man pushed another, who fell onto an frail old woman and killed her.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">AG Ref no 3 of 1994</span> &mdash; stabbed pregnant girlfriend, who survived. Child born alive, died 120 days later. In CA, Taylor LJ &mdash; <span class=\"bd\">malice can be doubly transferred</span>. HL, notably Mustill, disagreed and substituted <span class=\"lnk caseln\">unlawful act manslaughter</span>.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Gnango</span> &mdash; transferred malice applied as D had connived in the attempt on his life by <span class=\"lnk caseln\">Red Bandana Man</span>, at whom was firing back.</span></li></ul>"
    ],
    "CATEGORY": "Elements &mdash; Coincidence of MR and AR"
},
{
    "RELATED": [
        "Transferred Malice",
        "Continuing Act Doctrine",
        "Elements of an Offence",
        "Causation",
        "Strict Liability",
        "Mens Rea",
        "Recklessness",
        "Omissions as Actus Reus",
        "Duress",
        "Murder",
        "Diminished Responsibility - S52 CJA",
        "Self Defence"
    ],
    "CATEGORIES": [
        "Elements",
        "Coincidence of MR and AR"
    ],
    "NUMBER": "5",
    "TYPE": "Concept",
    "NAME": "Single Transaction Doctrine",
    "SUMMARY": [
        "Contrasting wth <span class=\"lnk caseln\">transferred malice</span> and the <span class=\"lnk caseln\">continuing act doctrine</span>, here the <span class=\"lnk caseln\">mens rea</span> for one part of a <span class=\"it\">sequence</span> of events is construed as continuing through to the final act.",
        "<ul><li><span class=\"nl\">In <span class=\"lnk caseln\">Thabo Meli</span>, from the premise that an <span class=\"lnk caseln\">actus reus</span> can comprise a <span class=\"bd\">continuing transaction</span> or chain of events, establishment of the <span class=\"lnk caseln\">mens rea</span> for one part was enough to do so through to the conclusion of death from hypothermia.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Masilela</span> in 1968 saw things the same way, as</span></li><li><span class=\"nl\">Used in <span class=\"lnk caseln\">Le Brun</span> [2002] CA.</span><ul><li><span class=\"nl\">In <span class=\"lnk caseln\">Church</span>, liability lay in the <span class=\"it\">first</span> act being unlawful, and a causal linkage to the result lacking a <span class=\"lnk caseln\">novus actus interveniens</span>.</span></li></ul></ul>"
    ],
    "CATEGORY": "Elements &mdash; Coincidence of MR and AR"
},
{
    "RELATED": [
        "Single Transaction Doctrine",
        "Transferred Malice",
        "Causation",
        "Omissions as Actus Reus",
        "Mens Rea",
        "Strict Liability",
        "Recklessness",
        "Elements of an Offence",
        "Loss of Control - S54 CJA",
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Murder",
        "Mercy Killing"
    ],
    "CATEGORIES": [
        "Elements",
        "Coincidence of MR and AR"
    ],
    "NUMBER": "6",
    "TYPE": "Concept",
    "NAME": "Continuing Act Doctrine",
    "SUMMARY": [
        "AKA <span class=\"bd\">Creation of a Dangerous Situation</span>",
        "Instead of finding the <span class=\"lnk caseln\">mens rea</span> continuous, as in <span class=\"lnk caseln\">single transaction doctrine</span>, here the <span class=\"lnk caseln\">actus reus</span> is considered in terms of a chain of events, rather than, e.g., the one in particular for which <span class=\"lnk caseln\">mens rea</span> has been established.",
        "Typical cases involve a dangerous situation <span class=\"it\">created</span> D has created, but not subsequently been bothered to do anything about.",
        "<span class=\"bd\">Cases</span>",
        "<ul><li><span class=\"nl\"><span class=\"lnk caseln\">Fagan</span> &mdash; <span class=\"it\">&#8220;<span class=\"lnk wls\" data-ln=\"https://www.youtube.com/watch?v=a0a1HYYmiXM\">consider yourself</span> parked on my bleedin&#8217; foot!&#8221;</span> &mdash; &#8220;fuck off, officer.&#8221;_</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Miller</span> &mdash; smouldering mattress.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Santana-Bermudez</span> &mdash; lied about having any &#8216;sharps&#8217; on him when searched by the filth.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Gemma Evans</span>.</span></li></ul>"
    ],
    "CATEGORY": "Elements &mdash; Coincidence of MR and AR"
},
{
    "RELATED": [
        "Strict Liability",
        "Causation",
        "Elements of an Offence",
        "Continuing Act Doctrine",
        "Transferred Malice",
        "Omissions as Actus Reus",
        "Mens Rea",
        "Single Transaction Doctrine",
        "Assault Occasioning ABH - S47",
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Diminished Responsibility - S52 CJA",
        "Loss of Control - S54 CJA"
    ],
    "CATEGORIES": [
        "Elements",
        "Mens Rea",
        "Recklessness"
    ],
    "NUMBER": "7",
    "TYPE": "Concept",
    "NAME": "Recklessness",
    "SUMMARY": [
        "Taking a silly risk. The law was clear this had to be from D&#8217;s <span class=\"bd\">subjective</span> view (<span class=\"lnk caseln\">Cunningham</span>), but in <span class=\"lnk caseln\">Caldwell</span> the recklessness could also be <span class=\"bd\">objective</span>, for, at least property crimes. This was annulled by <span class=\"lnk caseln\">Gemmell and Richardson</span>.",
        "<span class=\"bd\">Development of Law</span><br>_The risk run by D&#8217;s act had to be:",
        "<ul><li><span class=\"nl\">In <span class=\"lnk caseln\">Cunningham</span> 1957, not something to which <span class=\"it\">D was subjectively inadvertent</span>.</span></li><li><span class=\"nl\">In <span class=\"lnk caseln\">Caldwell</span> 1986, something <span class=\"bd\">consciously considered and obvious to the <span class=\"lnk caseln\">reasonable person</span></span>, qv.<br><span class=\"sm\">span class=\"it\">So in the 1980s, punch someone, breaking their glasses and nose &mdash; the mens rea for the GBH: based on your </span>subjective<span class=\"it\"> intention; the mens for criminal damage, on your </span>objective<span class=\"it\"> intention.</span</span></span></li><li><span class=\"nl\">In <span class=\"lnk caseln\">Elliott v C (a minor)</span> 1983, judged objectively even though girl <span class=\"it\">too stupid to see consequences</span>, so <span class=\"lnk caseln\">Caldwell</span> reluctantly applied, as it did in <span class=\"lnk caseln\">Malcolm</span>.</span></li></ul><span class=\"nl\"><span class=\"it\">Then</span> &mdash;</span><ul><li><span class=\"nl\">In <span class=\"lnk caseln\">Gemmell and Richardson</span> 2004, <span class=\"lnk caseln\">Caldwell</span> was in effect <span class=\"it\">annulled</span> in the Court of Appeal, returning to a thing to be assessed subjectively.</span></li></ul><ol></li><li class=\"nonum\"><span class=\"nl\"> Bingham LJ &mdash;</span><ol><li><span class=\"nl\">Tests in criminal law ought generally be <span class=\"bd\">subjective</span>.</span></li><li><span class=\"nl\">Judges ought to intervene to to prevent injustice.</span></li><li><span class=\"nl\">Ought to look at what the academics say (!)</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Caldwell</span> went beyond spirit of Law Com. report on which the <span class=\"lnk caseln\">Criminal Damage Act 1971</span> was based.</span></li></ol><li class=\"nonum\"><span class=\"nl\"> Steyn LJ &mdash;</span><ol><li><span class=\"nl\">Recklessness &#8216;out of kilter&#8217; with consciousness of a child.</span></li><li><span class=\"nl\">Exists where D <span class=\"it\">thinks</span> the risk exist, and <span class=\"it\">thinks</span> the risk unreasonable.</span></li></ol></ol>"
    ],
    "CATEGORY": "Elements &mdash; Mens Rea &mdash; Recklessness"
},
{
    "RELATED": [
        "Mens Rea",
        "Strict Liability",
        "Recklessness",
        "Transferred Malice",
        "Omissions as Actus Reus",
        "Continuing Act Doctrine",
        "Elements of an Offence",
        "Single Transaction Doctrine",
        "Provocation",
        "Diminished Responsibility - S52 CJA",
        "Voluntary Manslaughter",
        "Wounding or Causing GBH with Intent - S18"
    ],
    "CATEGORIES": [
        "Elements"
    ],
    "NUMBER": "8",
    "AKA": "Causes; Novus Actus Interveniens; New Intervening Act; Eggshell Skull Rule",
    "NAME": "Causation",
    "TYPE": "Concept",
    "SUMMARY": [
        "<span class=\"bd\">Overview</span>",
        "<ul><li><span class=\"nl\">D&#8217;s unlawful acts must be the <span class=\"it\">sine qua non</span> of the unlawful result, the <span class=\"it\">but for</span> cause. <span class=\"lnk caseln\">White</span>.</span></li><li><span class=\"nl\">D&#8217;s contribution to the death must be <span class=\"it\">more than minimal</span>. <span class=\"lnk caseln\">Hughes</span>.</span></li></ul>",
        "<span class=\"bd\">Legal and Factual</span><br><span class=\"it\">Not always the same.</span>",
        "<ul><li><span class=\"nl\">Legal causation without factual causation gives liability. <span class=\"lnk caseln\">Hughes</span>.</span></li><li><span class=\"nl\">Factual causation without legal causation does <span class=\"bd\">not</span>. <span class=\"lnk caseln\">Dalloway</span>.</span></li></ul>",
        "<span class=\"bd\">Novus Actus Interveniens</span>",
        "<ul><li style=\"counter-reset: item 2;\"><span class=\"nl\">rd-party&#8217;s <span class=\"it\">free, deliberate and informed</span> intervening act <span class=\"it\">may</span> break the chain of causation. <span class=\"lnk caseln\">Pagett</span>, per Lord Goff.</span></li><li><span class=\"nl\">Being set up by HMRC <span class=\"it\">did</span> so in <span class=\"lnk caseln\">Latif</span>, but not vandals in <span class=\"lnk caseln\">Environment Agency v Empress Car Company</span>.</span></li></ul>",
        "<span class=\"bd\">NAIs &mdash; Slapstick Doctors</span>",
        "<ul><li><span class=\"nl\">Bad medical treatment breaks the chain only in <span class=\"it\">extraordinary and unusual</span> circs. <span class=\"lnk caseln\">Cheshire</span>, per Beldam LJ.</span></li><li><span class=\"nl\">Earlier case of <span class=\"lnk caseln\">Smith</span> turned on whether original wound <span class=\"it\">operative and substantial</span> cause of death or <span class=\"it\">merely the background</span>, as did <span class=\"lnk caseln\">Dear</span>.</span></li></ul>",
        "<span class=\"bd\">NAIs &mdash; Drug overdoses</span>",
        "<ul><li><span class=\"nl\">V injecting themselves with drugs supplied by D <span class=\"it\">is</span> a new intervening act. <span class=\"lnk caseln\">Dias</span>.</span></li><li><span class=\"nl\">If D <span class=\"it\">tied the tourniquet</span>, would be a <span class=\"lnk caseln\">joint principle offender</span>. <span class=\"lnk caseln\">Rogers</span>.</span></li><li><span class=\"nl\">Or <span class=\"it\">acting in concert together</span> (<span class=\"lnk caseln\">Kennedy (No. 2)</span>)</span></li><li><span class=\"nl\">Academic opinion is that the chain should not be considered broken between D handing V an overfull syringe and V injecting (Cherkassky, 2008 article).</span></li></ul>",
        "<span class=\"bd\">Take Your Victim as You Find Them</span><br><span class=\"it\">The &#8216;Eggshell Skull&#8217; Rule. </span>",
        "<ul><li><span class=\"nl\">D is liable for <span class=\"it\">full extent</span> of harm, even should some attribute of V causes severity far worse than intended. <span class=\"lnk caseln\">Holland</span>.</span></li><li><span class=\"nl\">The <span class=\"it\">thin skull rule</span> is also the <span class=\"it\">thick brain rule</span>: D cannot say V ought to have taken better care, unless D took a <span class=\"it\">wholly unreasonable</span> act. <span class=\"lnk caseln\">Blaue</span>.</span></li><li><span class=\"nl\">D neglecting themselves after the fact is irrelevant. <span class=\"lnk caseln\">Dear</span>.</span></li><li><span class=\"nl\">Question is whether original wounds were <span class=\"it\">operative and substantial</span> cause (<span class=\"lnk caseln\">Dear</span> per Rose LJ, also <span class=\"lnk caseln\">Smith</span>).</span></li><li><span class=\"nl\">V&#8217;s unforeseen inability to swim. <span class=\"lnk caseln\">Rafferty</span>. provides no defence particularly in circs of <span class=\"it\">cold white psychopathy</span>, but &mdash;</span></li><li><span class=\"nl\">V&#8217;s unforeseen heart-condition <span class=\"it\">may</span>. <span class=\"lnk caseln\">Carey</span>.</span></li></ul>",
        "<span class=\"bd\">Fright and Flight</span>",
        "<ul><li><span class=\"nl\">D is liable for V&#8217;s rash act in trying to <span class=\"it\">escape</span>, if a foreseeable natural consequence. <span class=\"lnk caseln\">Roberts</span>.</span></li><li><span class=\"nl\">In the <span class=\"it\">agony of the moment</span>, after all, V might do something <span class=\"it\">inapposite</span>. <span class=\"lnk caseln\">Williams (1991)</span>.</span></li><li><span class=\"nl\">V&#8217;s characteristics must be taken into account  when assessing whether &#8216;daft&#8217; or not. Also <span class=\"lnk caseln\">Williams (1991)</span>.</span></li><li><span class=\"nl\">The rash act <span class=\"it\">may</span> happen hours later. <span class=\"lnk caseln\">Dhaliwal</span>, but hasn&#8217;t been followed or invoked.</span></li></ul>"
    ],
    "CATEGORY": "Elements"
},
{
    "RELATED": [
        "Continuing Act Doctrine",
        "Single Transaction Doctrine",
        "Omissions as Actus Reus",
        "Elements of an Offence",
        "Transferred Malice",
        "Causation",
        "Recklessness",
        "Mens Rea",
        "Mercy Killing",
        "Assault Occasioning ABH - S47",
        "Intention for Murder",
        "Reckless Manslaughter"
    ],
    "CATEGORIES": [
        "Elements"
    ],
    "NUMBER": "9",
    "TYPE": "Concept",
    "NAME": "Strict Liability",
    "SUMMARY": [
        "Offences are either <span class=\"it\">mala per se</span> or <span class=\"it\">mala prohibita</span> (<span class=\"lnk caseln\">Sweet v Parsley</span> per Diplock and Reed).",
        "<ul><li><span class=\"nl\">Necessity of <span class=\"lnk caseln\">mens rea</span> is <span class=\"it\">strongly presumed</span> without <span class=\"it\">compellingly clear</span> evidence for leaving it aside (<span class=\"lnk caseln\">B (a minor) v DPP</span>)</span></li><li><span class=\"nl\">Strict liability encourages vigilance (<span class=\"lnk caseln\">Jackson</span> 2006).</span></li><li><span class=\"nl\">A profusion of new statutory offences under Blair.</span></li></ul>",
        "<span class=\"bd\">Examples</span>",
        "<ul><li><span class=\"nl\">Not ensuring your children go to school (<span class=\"lnk caseln\">Barnfather</span>).</span></li><li><span class=\"nl\">Gambling while insolvent (<span class=\"lnk caseln\">Muhammed</span> 2003).</span></li><li><span class=\"nl\">Importing ivory (<span class=\"lnk caseln\">Matudi</span> 2003).</span></li><li><span class=\"nl\">Flying just above the ground (<span class=\"lnk caseln\">Jackson</span> 2006)</span></li><li><span class=\"nl\">Possessing a <span class=\"it\">stun gun</span>, even if you &#8220;honestly thought&#8221; it was a torch (<span class=\"lnk caseln\">Deyemi and Another</span> 2007)</span></li><li><span class=\"nl\">Statutory rape (<span class=\"lnk caseln\">R v G</span>)</span></li></ul>",
        "<span class=\"bd\">Determination</span><br><span class=\"lnk caseln\">B (a minor) v DPP</span> per Lords Nicholls and Steyn, factors for telling strict from non-strict:",
        "<ul><li><span class=\"nl\">Language of statute &mdash; <span class=\"it\">permitting</span> or <span class=\"it\">allowing</span> imply strict liability in context of driving; as does <span class=\"it\">causing</span> for pollution offences; <span class=\"it\">possessing</span> for drugs.</span><ul><li><span class=\"nl\">Cf. <span class=\"it\">wilfully</span>, <span class=\"it\">maliciously</span>, etc.</span></li><li><span class=\"nl\">Rule of thumb &mdash; the smaller the penalty, the more likely to be strict liability &mdash; but N.B., possession of a firearm, for which a substantial helping of porridge is the condign reward.</span></li></ul><li><span class=\"nl\">Nature of the offence</span></li><li><span class=\"nl\">Mischief it addresses</span></li><li><span class=\"nl\">&#8220;Other relevant circumstances&#8221;</span></li></ul>",
        "<span class=\"bd\">Defences &mdash; Ignorance of Fact</span>",
        "<ul><li><span class=\"nl\">Drugs slipped into D&#8217;s pocket without their knowledge may excuse strict liability possession (<span class=\"lnk caseln\">Warner</span>)</span></li><li><span class=\"nl\">Also &#8220;not knowing&#8221; about dope in the rooms of D&#8217;s lodgers (<span class=\"lnk caseln\">Sweet v Parsley</span>)</span></li></ul>",
        "<span class=\"bd\">Defences &mdash; Honest, Mistaken Belief</span>",
        "<ul><li><span class=\"nl\">May succeed for sexual offences for which <span class=\"it\">facts stray into margins of mischief</span> of strict liability offence (<span class=\"lnk caseln\">B (a minor) v DPP</span>).</span></li><li><span class=\"nl\">The belief <span class=\"it\">may</span> not need to be reasonable (<span class=\"lnk caseln\">R v G</span> 2008).</span></li></ul>",
        "<span class=\"bd\">Pros</span>",
        "<ul><li><span class=\"nl\">Speeds up criminal justice</span></li><li><span class=\"nl\">Promotes vigilance in matters of road safety, pollution, hygiene, etc.</span></li><li><span class=\"nl\">Lack of stigma as not &#8220;true&#8221; crime.</span></li></ul>",
        "<span class=\"bd\">Cons</span>",
        "<ul><li><span class=\"nl\">Uses criminal law for policy goals.</span></li><li><span class=\"nl\">Criminal convictions <span class=\"it\">do</span> stigmatise</span><ul><li><span class=\"nl\">In some circs may cause perverse swellings of honour and pride in the breast of the defendant &mdash; ASBOs.</span></li></ul><li><span class=\"nl\">Conduct in question (usually of negligible significance, taken individually) ought to be disaggregated from &#8220;true&#8221; crime.</span></li></ul>"
    ],
    "CATEGORY": "Elements"
},
{
    "RELATED": [
        "Unlawful Act Manslaughter",
        "Voluntary Manslaughter",
        "Single Transaction Doctrine",
        "Wounding or Causing GBH - S20",
        "Murder",
        "Reckless Manslaughter",
        "Elements of an Offence",
        "Assault and Battery - S39 CJA 1988",
        "Mens Rea",
        "Diminished Responsibility - S52 CJA",
        "Causation",
        "Omissions as Actus Reus"
    ],
    "CATEGORIES": [
        "Manslaughter"
    ],
    "NUMBER": "10",
    "AKA": "Sanctity of Life",
    "NAME": "Mercy Killing",
    "TYPE": "Concept",
    "SUMMARY": [
        "<span class=\"bd\">Mercy</span>",
        "<ul><li><span class=\"nl\">In <span class=\"lnk caseln\">Re A</span>, liability for homicide for an operation that would inevitably kill one twin &mdash; in default of which both would die &mdash; boiled down to whether the act would <span class=\"it\">avoid evil</span>.</span></li><li><span class=\"nl\">The last case in the HL sought clarification on circs for prosecution for assisting suicide (<span class=\"lnk caseln\">Debby Purdy</span>).</span></li><li><span class=\"nl\">In 2010 the CA held it was up to Parliament to address suicide in context of mercy killing (but in the mean time, upheld a conviction for murder in <span class=\"lnk caseln\">Inglis</span>).</span><ul><li><span class=\"nl\">In 2014 the SC said the same (<span class=\"lnk caseln\">Nicklinson and Others</span>).</span></li></ul></ul>",
        "So it&#8217;s up to Parliament. See also <span class=\"lnk gsln\">Loi Leonetti</span> for the French approach.",
        "<span class=\"bd\">Cases from my notes</span><br>Dianne Pretty (2002)<br>Poor chook had Motor Neurone disease. Applied to DPP for a letter prospectively granting her partner immunity from prosecution for helping her to end her own life.<br>Held: Denied - challenged under S8 (private life) and S14 of European Convention on HR.",
        "<ul><li><span class=\"nl\"> UKHL held that protection of vulnerable individuals.</span></li></ul>",
        "Debby Purdy (2009)<br>N.B. this was final HL decision before it became the Supreme Court.<br>An MS sufferer. Sought clarification from DPP under Art. 8 (lack of guidance) on circumstances in which there would be prosecution for assisting suicide.",
        "R v Inglis (2010)<br>Mercy killing. Victim suffered minor injuries having been punched. Reluctantly put into an ambulance. Suffered catastrophic brain damage when fell out (jumped out, in BBC article) of ambulance. PVS. Defendant was his mother, a nurse. She went into the hospital and injected the son with heroin, once (failed) then twice (succeeded).",
        "<ul><li><span class=\"nl\"> Tried to argue loss of control. But not accepted, because she\u2019d done it twice.</span></li><li><span class=\"nl\"> Argued that he was already dead.</span></li><li><span class=\"nl\"> Court held individually disabled and not dead, in the eyes of the law.</span></li><li><span class=\"nl\"> Imprisoned at first instance for 5 years.</span></li><li><span class=\"nl\"> EWCA held it would be for parliament to determine how to readdress policy of assisted suicide.</span></li></ul>",
        "R v Nicklinson and Others (2014)",
        "<ul><li><span class=\"nl\"> Supreme court again held that parliament must decide, not cases, as so controversial, so technically and morally difficult.</span></li><li><span class=\"nl\"> Re A too slender a thread to allow the extrapolation of defence.</span></li></ul>"
    ],
    "CATEGORY": "Manslaughter"
},
{
    "RELATED": [
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Intention for Murder",
        "Loss of Control - S54 CJA",
        "Diminished Responsibility - S52 CJA",
        "Provocation",
        "Self Defence",
        "Assault and Battery - S39 CJA 1988",
        "Gross Negligence Manslaughter",
        "Recklessness",
        "Elements of an Offence",
        "Assault Occasioning ABH - S47",
        "Transferred Malice"
    ],
    "FLAGS": [
        "Current Law"
    ],
    "CATEGORIES": [
        "Murder"
    ],
    "LINK": [
        "CPS's guidance http://www.cps.gov.uk/legal/h_to_k/homicide_murder_and_manslaughter/#murder"
    ],
    "NUMBER": "11",
    "TYPE": "Concept",
    "NAME": "Murder",
    "SUMMARY": [
        "<span class=\"bd\">Coke&#8217;s Definition</span><br>A person of <span class=\"it\">sound mind</span> and of the age of discretion <span class=\"it\">unlawfully</span> kills a person under the King&#8217;s peace, with <span class=\"it\">malice aforethought</span>, either <span class=\"it\">expressed</span> by the party <span class=\"it\">or implied by law</span>, so as the party die within <span class=\"it\">a year and a day</span>.",
        "A crime of specific intent.",
        "<span class=\"bd\">Elements</span>",
        "<ul><li><span class=\"nl\"><span class=\"lnk caseln\">Actus reus</span></span><ol><li class=\"nonum\"><span class=\"nl\">D <span class=\"lnk caseln\">causes</span> V, a human being</span><ol><li class=\"nonum\"><span class=\"nl\">alive (born and breathing through own lungs <span class=\"lnk caseln\">Rance v Mid-Downs HA</span>, <span class=\"lnk caseln\">AG Ref no 3 of 1994</span>)</span></li><li class=\"nonum\"><span class=\"nl\">currently-living (<span class=\"lnk caseln\">AG Ref no 3 of 1997</span>)</span></li></ol><li class=\"nonum\"><span class=\"nl\">to die (suffer death of brain-stem <span class=\"lnk caseln\">Malcherek and Steel</span>)</span></li><li class=\"nonum\"><span class=\"nl\">unlawfully (<span class=\"lnk caseln\">Airedale NHS Trust v Bland</span>, <span class=\"lnk caseln\">Inglis</span>, <span class=\"lnk caseln\">self defence</span>)</span><ol><li class=\"nonum\"><span class=\"nl\">i.e., with</span></li></ol></li></ol><li><span class=\"nl\"><span class=\"lnk caseln\">Mens rea</span></span><ol><li class=\"nonum\"><span class=\"nl\">D intended</span><ol><li class=\"nonum\"><span class=\"nl\"> directly or obliquely (<span class=\"lnk caseln\">Woollin</span>, <span class=\"lnk caseln\">Intention for Murder</span>)</span></li></ol><li class=\"nonum\"><span class=\"nl\"> to kill (express fault)</span></li><li class=\"nonum\"><span class=\"nl\"> or cause GBH (implied fault)</span></li></ol><li><span class=\"nl\"><span class=\"lnk caseln\">Partial Defences</span></span><ul><li><span class=\"nl\">If successful, will reducing the conviction to <span class=\"lnk caseln\">manslaughter</span>.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Loss of Control - S54 CJA</span>, which replaced common-law <span class=\"lnk caseln\">provocation</span>.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Diminished Responsibility - S52 CJA</span></span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Suicide Pact</span></span></li></ul><li><span class=\"nl\"><span class=\"lnk caseln\">Complete Defences</span></span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Self Defence</span></span></li><li><span class=\"nl\">But <span class=\"lnk caseln\">duress</span> and <span class=\"lnk caseln\">necessity</span> are <span class=\"bd\">not available</span> for murder or manslaughter.</span></li></ul></ul>",
        "The CPS&#8217;s <span class=\"lnk arb\" data-ln=\"http://www.cps.gov.uk/legal/h%3Cspan%20class=%22it%22%3Eto%3C/span%3Ek/homicide%3Cspan%20class=%22it%22%3Emurder%3C/span%3Eand_manslaughter/%23murder\">guidance notes for homicide</span> set this out well.",
        "See Cf. <span class=\"lnk caseln\">Mercy Killing</span>.",
        "<span class=\"bd\">Year and a Day</span><br>Abolished by the <span class=\"lnk caseln\">Law Reform (Year and a Day Rule) Act 1996</span>, given the increased capacity to keep seriously injured people alive."
    ],
    "CATEGORY": "Murder"
},
{
    "RELATED": [
        "Provocation",
        "Loss of Control - S54 CJA",
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Murder",
        "Diminished Responsibility - S52 CJA",
        "Omissions as Actus Reus",
        "Self Defence",
        "Duress",
        "Assault and Battery - S39 CJA 1988",
        "Unlawful Act Manslaughter",
        "Mercy Killing",
        "Wounding or Causing GBH - S20"
    ],
    "FLAGS": [
        "Current Law"
    ],
    "CATEGORIES": [
        "Murder",
        "Intent"
    ],
    "NUMBER": "12",
    "TYPE": "Concept",
    "NAME": "Intention for Murder",
    "SUMMARY": [
        "For oblique intent, a jury <span class=\"bd\"><span class=\"it\">may</span> infer intention</span> (but doesn&#8217;t have to) should they find <span class=\"bd\">D realised death or GBH was a virtually certain consequence</span> (<span class=\"lnk caseln\">Woollin</span>, or <span class=\"lnk caseln\">Nedrick</span> according to some)",
        "<span class=\"bd\">Development of Law</span><br>For <span class=\"it\">oblique</span> intent (cf. <span class=\"it\">direct</span> intent, something observed prima facie), <span class=\"bd\">death or <span class=\"lnk caseln\">GBH</span></span> had to be:",
        "<ul><li><span class=\"nl\"><span class=\"lnk caseln\">Hyam</span> &mdash; known by D as a <span class=\"bd\">highly probable result</span></span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Moloney</span> &mdash; <span class=\"bd\">foreseen as a natural consequence</span> (obiter, should be <span class=\"bd\">the same throughout criminal law</span>).</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Hancock and Shankland</span> &mdash; <span class=\"bd\">highly probable</span> once again, overturning <span class=\"lnk caseln\">Moloney</span>.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Nedrick</span> &mdash; <span class=\"bd\">realised as a virtually certain consequence</span>.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Walker</span> &mdash; <span class=\"bd\">a very high probability</span>, which the CA, despite preferring <span class=\"bd\">virtual certainty</span>, did not consider a misdirection.</span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Woollin</span></span> &mdash; <span class=\"bd\">virtually certain</span> per <span class=\"lnk caseln\">Nedrick</span> &mdash; but jury remains free <span class=\"it\">not to find intention</span>, even if satisfied of D&#8217;s realisation of virtual certainty.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Matthews and Alleyne</span> &mdash; reaffired <span class=\"bd\">virtual certainty</span> of <span class=\"lnk caseln\">Nedrick</span>/<span class=\"lnk caseln\">Woollin</span> (obiter, an inference in favour of which would be (on the facts of the case) failure to attempt rescue).</span></li></ul>",
        "The law still unclear, but that <span class=\"lnk caseln\">Woollin</span> established rule of <span class=\"it\">evidence</span>, not law."
    ],
    "CATEGORY": "Murder &mdash; Intent"
},
{
    "RELATED": [
        "Unlawful Act Manslaughter",
        "Mercy Killing",
        "Strict Liability",
        "Mens Rea",
        "Omissions as Actus Reus",
        "Assault and Battery - S39 CJA 1988",
        "Murder",
        "Loss of Control - S54 CJA",
        "Reckless Manslaughter",
        "Duress",
        "Single Transaction Doctrine",
        "Assault Occasioning ABH - S47"
    ],
    "FLAGS": [
        "Current Law"
    ],
    "CATEGORIES": [
        "Manslaughter"
    ],
    "NUMBER": "13",
    "TYPE": "Concept",
    "NAME": "Voluntary Manslaughter",
    "SUMMARY": [
        "This is what the establishment of a partial defence will turn <span class=\"lnk caseln\">murder</span> into, which allows sentencing discretion.",
        "<ul><li><span class=\"nl\"><span class=\"lnk caseln\">Loss of Control - S54 CJA</span>, which replaced common law <span class=\"lnk caseln\">Provocation</span>.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Diminished Responsibility - S52 CJA</span></span></li></ul>"
    ],
    "CATEGORY": "Manslaughter"
},
{
    "RELATED": [
        "Loss of Control - S54 CJA",
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Diminished Responsibility - S52 CJA",
        "Intention for Murder",
        "Murder",
        "Recklessness",
        "Elements of an Offence",
        "Voluntary Manslaughter",
        "Wounding or Causing GBH with Intent - S18",
        "Single Transaction Doctrine",
        "Mens Rea",
        "Mercy Killing"
    ],
    "FLAGS": [
        "Old Law"
    ],
    "CATEGORIES": [
        "Murder",
        "Defences"
    ],
    "NUMBER": "14",
    "AKA": "Provoked",
    "NAME": "Provocation",
    "TYPE": "Concept",
    "SUMMARY": [
        "<span class=\"it\">Replaced in 2009 by <span class=\"lnk caseln\">Loss of Control</span>, this was a <span class=\"lnk caseln\">partial defence</span> mitigating <span class=\"lnk caseln\">murder</span> to <span class=\"lnk caseln\">voluntary manslaughter</span>.</span>",
        "<span class=\"bd\">Overview</span>",
        "<ul><li><span class=\"nl\"> It required:</span><ol><li><span class=\"nl\"> <span class=\"bd\">A sudden and temporary</span> loss of control.</span></li><li><span class=\"nl\"> <span class=\"bd\">A reasonable person</span> would have lost control. <span class=\"lnk caseln\">Lesbini</span> 1914.</span></li></ol><li><span class=\"nl\">Once raised, provocation had to be left to the jury. <span class=\"lnk caseln\">Doughty</span>.</span></li><li><span class=\"nl\">S3 of the <span class=\"lnk wls\" data-ln=\"Homicide%20Act%201957\">Homicide Act 1957</span> provided that &mdash;</span><ul><li><span class=\"nl\">Words alone would <span class=\"it\">not</span> establish the defence.</span></li><li><span class=\"nl\">The reaction did not have to be <span class=\"it\">proportionate</span>.</span></li><li><span class=\"nl\">Evidence of the loss of control was to be left to the jury.</span></li><li><span class=\"nl\">The provoking act could come from a <span class=\"it\">3rd party</span>.</span></li></ul><li><span class=\"nl\">Failed when too much time elapsed between provocation and (purported) loss of control. <span class=\"lnk caseln\">Ibrams</span>, in which it was a <span class=\"it\">week</span>.</span><ul><li><span class=\"nl\">Unless the <span class=\"it\">sudden and temporary</span> loss of control happened to have, itself, lasted for days <span class=\"lnk caseln\">Baillie</span>.</span></li></ul></ul>",
        "<span class=\"bd\">Invocation by Abused Wives</span><br>That the loss of control had to be <span class=\"it\">sudden and temporary</span>, which militated <span class=\"it\">against</span> its invocation by &#8220;slow-burning&#8221; women rather than men. Say the academics.",
        "<ul><li><span class=\"nl\">Failed in <span class=\"lnk caseln\">Ahluwalia</span>, petrol poured over the husband whilst <span class=\"it\">asleep</span>. CA held the <span class=\"lnk caseln\">Duffy</span> test still good law.</span></li><li><span class=\"nl\">Failed in <span class=\"lnk caseln\">Humphreys</span>, but was held must take account of <span class=\"it\">the cumulative history</span> leading up to act.</span></li></ul>",
        "<span class=\"bd\">Relevant Characteristics</span><br><span class=\"it\">Of the defendant, to be adduced to the reasonable person, are</span> &mdash;",
        "<ul><li><span class=\"nl\">Age and gender. <span class=\"lnk caseln\">Camplin</span>.</span></li><li><span class=\"nl\">Being jealous and possessive &mdash; perhaps. <span class=\"lnk caseln\">Weller</span>.</span></li><li><span class=\"nl\">&#8216;Reasonable&#8217; is not a synonym for &#8216;morally upstanding&#8217;. Lord Goff in <span class=\"lnk caseln\">Morhall</span> on appeal to the HL.</span></li></ul><span class=\"nl\"><span class=\"it\">But not</span> &mdash;</span><ul><li><span class=\"nl\">Impotence. <span class=\"lnk caseln\">Bedder</span>.</span></li><li><span class=\"nl\">Being a glue-sniffer. CA in <span class=\"lnk caseln\">Morhall</span>.</span></li><li><span class=\"nl\">Feeling worthless and depressed. <span class=\"lnk caseln\">AG for Jersey v Holley</span> PC 2005.<br> &mdash; followed in the CA in <span class=\"lnk caseln\">James</span> 2006 instead of binding HL authority, <span class=\"lnk caseln\">Smith (Morgan)</span>.</span></li></ul>"
    ],
    "CATEGORY": "Murder &mdash; Defences"
},
{
    "RELATED": [
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Diminished Responsibility - S52 CJA",
        "Provocation",
        "Murder",
        "Intention for Murder",
        "Strict Liability",
        "Assault and Battery - S39 CJA 1988",
        "Omissions as Actus Reus",
        "Continuing Act Doctrine",
        "Unlawful Act Manslaughter",
        "Gross Negligence Manslaughter",
        "Reckless Manslaughter"
    ],
    "FLAGS": [
        "Current Law"
    ],
    "CATEGORIES": [
        "Murder",
        "Defences"
    ],
    "NUMBER": "15",
    "AKA": "Loss of Control; S54 CJA",
    "NAME": "Loss of Control - S54 CJA",
    "TYPE": "Concept",
    "SUMMARY": [
        "S54 <span class=\"lnk caseln\">CJA 2009</span> establishes this souped-up replacement for the <span class=\"lnk caseln\">provocation</span> murder-to-manslaughter partial defence, which it abolishes at S56.",
        "<span class=\"bd\">S54 - Loss of Control</span>",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Three-Part Test</span> &mdash;</span><ol><li><span class=\"nl\">Acts (or omissions) arising from a <span class=\"it\">loss of control</span>.</span></li><li><span class=\"nl\">A <span class=\"it\">qualifying trigger</span> &mdash; fear of <span class=\"it\">serious</span> violence, circs of <span class=\"it\">extremely grave nature</span> or both: S55 (3), (4) or (5).</span></li><li><span class=\"nl\">Which would have caused same acts in person of D&#8217;s gender and age with <span class=\"it\">normal amount of self-mastery</span>, in <span class=\"it\">same circs as D</span>.</span></li></ol><li><span class=\"nl\"> <span class=\"bd\">No requirement of suddenness</span> &mdash; addressing weakness of <span class=\"it\">sudden and temporary passion</span> requirement (<span class=\"lnk caseln\">Duffy</span>), opening defence to battered women.</span></li><li><span class=\"nl\"> <span class=\"bd\">All circs except</span> those having bearing on D&#8217;s ability to stay cool.</span><ul><li><span class=\"nl\">Except if taunt connected with it, not alcoholism (<span class=\"lnk caseln\">Asmelash</span> 2013).</span></li></ul><li><span class=\"nl\"> <span class=\"bd\">Inapplicable for revenge.</span> (<span class=\"lnk caseln\">Dawes</span> 2013)</span></li><li><span class=\"nl\"> <span class=\"bd\">Burden on prosecution to disprove</span> beyond reasonable doubt, once admitted.</span></li><li><span class=\"nl\"> <span class=\"bd\">Admitted if judge decides enough evidence</span> raised by D (<span class=\"lnk caseln\">Jewell</span> 2014).</span></li></ol>",
        "<span class=\"bd\">S55 - Qualifying Triggers</span>",
        "<ol><li style=\"counter-reset: item 2;\"><span class=\"nl\"> <span class=\"bd\">Fear of serious violence from V</span> against D or another identified person</span></li><li style=\"counter-reset: item 3;\"><span class=\"nl\"> <span class=\"bd\">Things done <span class=\"it\">or</span> said</span> of &mdash;</span><ol><li><span class=\"nl\"> <span class=\"bd\">Extremely grave character</span></span></li><li><span class=\"nl\"> <span class=\"bd\">Gave D justifiable sense</span> of being <span class=\"bd\">seriously wronged</span> (&#8216;sense&#8217; not &#8216;fear&#8217;; &#8216;wronged&#8217; not &#8216;injured&#8217;)</span></li></ol><li><span class=\"nl\"> (or both.)</span></li><li><span class=\"nl\"> <span class=\"bd\">But not if D incited trigger</span> as excuse to inflict violence.</span><ol><li style=\"counter-reset: item 2;\"><span class=\"nl\"> <span class=\"bd\">Sexual infidelity cannot be a trigger</span> as a thing done or said (<span class=\"lnk caseln\">Clinton</span> 2012, but it may be <span class=\"it\">part of the circs</span> &mdash; S54(1)(c))</span></li></ol></ol>",
        "<span class=\"bd\">Cases</span>",
        "<ul><li><span class=\"nl\">Admissability</span><ul><li><span class=\"nl\">Planning militates against admission of loss of control (<span class=\"lnk caseln\">Jewell</span> 2014).</span></li><li><span class=\"nl\">Not to be left to jury if mere speculation (<span class=\"lnk caseln\">Barnsdale-Quean</span>).</span></li><li><span class=\"nl\">Rigorous evaluation of evidence <span class=\"bd\">on all three limbs of test</span> before jury troubled with it (<span class=\"lnk caseln\">Gurpinar and Kojo-Smith</span>).</span></li></ul><li><span class=\"nl\">Circumstances</span><ul><li><span class=\"nl\">Alcoholism is <span class=\"it\">not</span>, unless acts/words constituting trigger directly relevant (<span class=\"lnk caseln\">Asmelash</span>).</span></li><li><span class=\"nl\">Sexual infidelity <span class=\"it\">may</span> be part of the circs for S54(1)(c), even if cannot  be the trigger under S55(6)(c)  (<span class=\"lnk caseln\">Clinton</span>, CA).</span></li><li><span class=\"nl\">... but not if it&#8217;s <span class=\"it\">revenge</span> (<span class=\"lnk caseln\">Dawes</span>).</span></li></ul><li><span class=\"nl\">Qualifying Triggers</span><ul><li><span class=\"nl\">No qualifying trigger in having to deal with your old man&#8217;s Alzheimer&#8217;s (<span class=\"lnk caseln\">Zebedee</span> 2012), even if you &#8220;were abused&#8221; as a child.</span></li></ul></ul>"
    ],
    "CATEGORY": "Murder &mdash; Defences"
},
{
    "RELATED": [
        "Diminished Responsibility - S52 CJA",
        "Loss of Control - S54 CJA",
        "Provocation",
        "Intention for Murder",
        "Murder",
        "Unlawful Act Manslaughter",
        "Wounding or Causing GBH with Intent - S18",
        "Continuing Act Doctrine",
        "Assault Occasioning ABH - S47",
        "Omissions as Actus Reus",
        "Mens Rea",
        "Recklessness"
    ],
    "FLAGS": [
        "Old Law"
    ],
    "CATEGORIES": [
        "Murder",
        "Defences"
    ],
    "NUMBER": "16",
    "AKA": "S2 Homicide Act 1957",
    "NAME": "Diminished Responsibility - S2 Homicide Act 1957",
    "TYPE": "Concept",
    "SUMMARY": [
        "The idea began with the <span class=\"it\">M&#8217;Naghton Rules</span>, which reduced <span class=\"lnk caseln\">murder</span> to <span class=\"lnk caseln\">manslaughter</span> if D sufficiently bonkers in the head.",
        "<span class=\"bd\">Note well</span> &mdash; current text of S2 is the <span class=\"lnk caseln\">S52 CJA</span> amendment.",
        "<span class=\"bd\">S2 as Enacted</span><br>&#8216;Where a person kills or is a party to the killing of another, he shall not be convicted of murder if he was suffering from such <span class=\"bd\">abnormality of mind</span> (whether arising from a condition of <span class=\"it\">arrested or retarded development</span> of mind or any <span class=\"bd\">inherent causes or <span class=\"it\">induced by</span> disease or injury</span>) as substantially impaired his mental responsibility for his acts and omissions in doing or being a party to the killing.&#8217;",
        "<span class=\"bd\">Cases</span>",
        "<ul><li><span class=\"nl\">Pleading irresistible perverted desires (to stab to death then mutilate) meant the jury had to be directed on <span class=\"it\">abnormality of mind</span> &mdash; manslaughter substituted (<span class=\"lnk caseln\">Byrne</span>)</span></li><li><span class=\"nl\">If D is a depressed alcoholic, what&#8217;s important is the depression, not the alcoholism (<span class=\"lnk caseln\">Deechman</span>)</span></li></ul>",
        "<span class=\"bd\">Alcoholism as Abnormality of Mind</span><br>To operate as a defence:",
        "<ul><li><span class=\"nl\">Had to have reached a point where</span><ol><li><span class=\"nl\"><span class=\"bd\">Brain disease</span> causing<span class=\"bd\"> gross impairment</span> of judgment, and &mdash;</span></li><li><span class=\"nl\"><span class=\"bd\">First drink</span> of day <span class=\"bd\">not voluntary</span>.<br>(<span class=\"lnk caseln\">Tandy</span> 1998).</span></li></ol><li><span class=\"nl\">... unless there was <span class=\"it\">Alcohol Dependancy Syndrome</span>, in which case first drink did <span class=\"it\">not</span> have to be voluntary (<span class=\"lnk caseln\">Wood</span> 2008).</span></li><li><span class=\"nl\"><span class=\"bd\">Premeditation negated</span> admissibility of abnormality (<span class=\"lnk caseln\">Tulloch</span> 2000).</span></li></ul>"
    ],
    "CATEGORY": "Murder &mdash; Defences"
},
{
    "RELATED": [
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Loss of Control - S54 CJA",
        "Provocation",
        "Intention for Murder",
        "Murder",
        "Causation",
        "Self Defence",
        "Duress",
        "Continuing Act Doctrine",
        "Assault Occasioning ABH - S47",
        "Mens Rea",
        "Single Transaction Doctrine"
    ],
    "FLAGS": [
        "Current Law"
    ],
    "AKA": "S52 CJA 2007; Diminished Responsibility",
    "NAME": "Diminished Responsibility - S52 CJA",
    "CATEGORIES": [
        "Murder",
        "Defences"
    ],
    "LINK": [
        "Tony Story article http://login.westlaw.co.uk/maf/wluk/app/document?&srguid=i0ad8289e00000154e90f70dceaa3bafe&docguid=I924846C0538A11E4BB54BBDF124D1E62&hitguid=I924846C0538A11E4BB54BBDF124D1E62&rank=1&spos=1&epos=1&td=553&crumb-action=append&context=76&resolvein=true"
    ],
    "NUMBER": "17",
    "TYPE": "Concept",
    "SUMMARY": [
        "<span class=\"bd\">Note well</span> &mdash; this amended <span class=\"lnk caseln\">S2 Homicide Act 1957</span> &mdash; therefore is to be found on <span class=\"bd\">p. 28</span> of Blackstone&#8217;s <span class=\"it\">Criminal Law 2015-16</span>.",
        "Diminished responsibility now requires &mdash;",
        "<ol><li><span class=\"nl\">An <span class=\"bd\">abnormality of mental functioning</span> (cf. &#8216;abnormality of mind&#8217; from 1957 Act)</span><ol><li><span class=\"nl\">from an <span class=\"bd\">recognised medical condition</span> (see <span class=\"lnk gsln\">DSM manuals</span>, <span class=\"lnk gsln\">ICD brain conditions</span>) &mdash; (<span class=\"lnk caseln\">Dowds</span>)</span></li><li><span class=\"nl\">which <span class=\"bd\">substantially impairs</span> ability<br><span class=\"bd\">(1A)</span> either to</span><ol><li><span class=\"nl\"><span class=\"bd\">understand nature of conduct</span> (<span class=\"lnk caseln\">Golds</span>), or to</span></li><li><span class=\"nl\"><span class=\"bd\">form rational judgment</span>, or to</span></li><li><span class=\"nl\"><span class=\"bd\">exercise </span>self-control.*</span></li></ol><li><span class=\"nl\"><span class=\"bd\">The abnormality explains the conduct.</span></span></li></ol></ol>",
        "<span class=\"bd\">Academic Reception</span>",
        "<ul><li><span class=\"nl\">Law Commission had wanted a <span class=\"it\">lack of developmental maturity</span>, but no parliamentary appetite.</span></li><li><span class=\"nl\">MacKay, <span class=\"lnk wls\" data-ln=\"Crim%20LR%202010%204%20290-302\">writing</span> in Crim LR:</span><ol><li><span class=\"nl\">V. disappointing, esp. absence of <span class=\"it\">lack of developmental maturity</span>.</span></li><li><span class=\"nl\">Inferior to <span class=\"it\">benevolent conspiracy</span> that worked well in the past.</span></li><li><span class=\"nl\">Does nothing about <span class=\"lnk caseln\">mercy killing</span>.</span></li></ol></ul>",
        "<span class=\"bd\">Cases</span>",
        "<ul><li><span class=\"nl\">In <span class=\"lnk caseln\">Dowds</span> &mdash;</span><ul><li><span class=\"nl\">Intermittent alcoholism will not establish the defence,</span></li><li><span class=\"nl\">circumstances for which are fundamentally a matter of <span class=\"it\">public policy</span>.</span></li></ul><li><span class=\"nl\">Unnecessary to be <span class=\"it\">sole cause</span>; must be <span class=\"it\">more than trivial</span> and make a <span class=\"it\">real or appreciable difference</span> (<span class=\"lnk caseln\">Golds</span>).</span></li><li><span class=\"nl\">The CA reserves the right to substitute manslaughter when a jury ignores <span class=\"it\">uncontested</span> medical evidence introduced by D.</span></li></ul>"
    ],
    "CATEGORY": "Murder &mdash; Defences"
},
{
    "RELATED": [
        "Voluntary Manslaughter",
        "Mercy Killing",
        "Loss of Control - S54 CJA",
        "Murder",
        "Omissions as Actus Reus",
        "Single Transaction Doctrine",
        "Reckless Manslaughter",
        "Elements of an Offence",
        "Wounding or Causing GBH with Intent - S18",
        "Diminished Responsibility - S52 CJA",
        "Recklessness",
        "Continuing Act Doctrine"
    ],
    "CATEGORIES": [
        "Manslaughter"
    ],
    "NUMBER": "18",
    "TYPE": "Concept",
    "NAME": "Unlawful Act Manslaughter",
    "SUMMARY": [
        "AKA <span class=\"it\">Constructive Manslaughter</span>, this differs with <span class=\"lnk caseln\">voluntary manslaughter</span> in the mens rea requirement. Here it is for an <span class=\"it\">unlawful act</span> &mdash; other than GBH or murder.",
        "In <span class=\"lnk caseln\">Kennedy (No. 2)</span>, channelling Mustill J in <span class=\"lnk caseln\">AG Ref no 3 of 1994</span> wise old Tom Bingham set out the <span class=\"bd\">four elements</span> that must be <span class=\"bd\">stated then addressed in a problem question</span>. The prosecution must prove:  <span class=\"bd\">(1)</span> an unlawful act, which would <span class=\"bd\">(2)</span> cause <span class=\"it\">some</span> harm in estimation of sobre and reasonable person; and <span class=\"bd\">(3)</span> brought about consciously and volitionally and that <span class=\"bd\">(4)</span> causation is satisfied.",
        "<span class=\"bd\">Cases</span>",
        "<ol><li><span class=\"nl\"><span class=\"bd\">An unlawful act</span></span><ul><li><span class=\"nl\">Which must be <span class=\"it\">criminal</span> rather than tortious (<span class=\"lnk caseln\">Larkin</span>).</span></li><li><span class=\"nl\">For which D has mens rea and actus reus (<span class=\"lnk caseln\">Lamb</span>).</span><ul><li><span class=\"nl\">In which prosecution failed as neither assault nor <span class=\"lnk caseln\">Cunningham</span> recklessness.</span></li></ul><li><span class=\"nl\">Failing which &mdash; at least the mens rea (<span class=\"lnk caseln\">Newbury</span>).</span></li><li><span class=\"nl\">Can be <span class=\"lnk caseln\">strict liability</span> (<span class=\"lnk caseln\">Andrews</span>, CA).</span></li><li><span class=\"nl\">E.g., &mdash;</span><ul><li><span class=\"nl\">Administering a noxious substance (<span class=\"lnk caseln\">Kennedy (No. 2)</span>)</span></li><li><span class=\"nl\">Affray (<span class=\"lnk caseln\">Carey</span>).</span></li></ul></li></ul><li><span class=\"nl\"><span class=\"bd\">Some harm</span> in the <span class=\"bd\">anticipation</span> of a sobre and reasonable person.</span><ul><li><span class=\"nl\"><span class=\"bd\">Harm</span></span><ul><li><span class=\"nl\">Not necessarily <span class=\"it\">serious</span> (<span class=\"lnk caseln\">Church</span> 1966).</span></li><li><span class=\"nl\">But at least <span class=\"lnk caseln\">ABH</span> (<span class=\"lnk caseln\">Dawson</span> 1985). Distress <span class=\"it\">not</span> enough on its own, unless per se gave rise to <span class=\"lnk caseln\">ABH</span>...</span></li><li><span class=\"nl\">... which is likely in invading an old man&#8217;s house, when he looks like he&#8217;s having a heart attack yet D does nothing (<span class=\"lnk caseln\">Watson</span> 1989).</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Anticipation</span></span><ul><li><span class=\"nl\">Most be foreseeable (<span class=\"lnk caseln\">Church</span>)</span></li><li><span class=\"nl\">A heart condition is <span class=\"it\">not</span> foreseeable in a 15 year-old girl (<span class=\"lnk caseln\">Carey</span>).</span></li><li><span class=\"nl\">The actual harm can be much worse than anticipated by hypothetical sobre and reasonable person, as long as <span class=\"it\">some</span> occurred (<span class=\"lnk caseln\">R v JM and SM</span> 2012).</span></li></ul></li></ul><li><span class=\"nl\"><span class=\"bd\">Volitionally brought about</span></span><ul><li><span class=\"nl\">Mens rea for the unlawful act itself must an act of direct intention (<span class=\"lnk caseln\">Kennedy (No. 2)</span>).</span></li><li><span class=\"nl\">Not necessarily against V (<span class=\"lnk caseln\">Goodfellow</span> 1986, but cf. <span class=\"lnk caseln\">Dolby</span>, in which it <span class=\"it\">did</span>).</span></li></ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Causation</span></span></span><ul><li><span class=\"nl\">Is satisfied by a simple lack of direct intervening cause (<span class=\"lnk caseln\">Goodfellow</span>, cf. earlier <span class=\"lnk caseln\">Dolby</span>).</span></li><li><span class=\"nl\">No break in the chain of causation if harm <span class=\"it\">within range of reasonably foreseeable responses</span> (<span class=\"lnk caseln\">Williams (1991)</span>).</span><ul><li><span class=\"nl\"> Even when the response was <span class=\"it\">suicide</span> (<span class=\"lnk caseln\">Dhaliwal</span>, obiter in CA).</span></li></ul></ul></ol>"
    ],
    "CATEGORY": "Manslaughter"
},
{
    "RELATED": [
        "Provocation",
        "Omissions as Actus Reus",
        "Mens Rea",
        "Continuing Act Doctrine",
        "Assault Occasioning ABH - S47",
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Mercy Killing",
        "Voluntary Manslaughter",
        "Unlawful Act Manslaughter",
        "Reckless Manslaughter",
        "Wounding or Causing GBH with Intent - S18",
        "Murder"
    ],
    "CATEGORIES": [
        "Gross Negligence Manslaughter"
    ],
    "NUMBER": "19",
    "TYPE": "Concept",
    "NAME": "Gross Negligence Manslaughter",
    "SUMMARY": [
        "AKA <span class=\"it\">Breach of Duty Manslaughter</span>. Doing something legal like <span class=\"it\">driving</span>, but going about it in a grossly-negligent manner. After <span class=\"lnk caseln\">Adomako</span>, <span class=\"lnk caseln\">Wacker</span> established that the duty of care is owed rather more widely than in tort. In <span class=\"lnk caseln\">Willoughby</span> it was held the question of whether a duty was owed was for the jury. this was established In <span class=\"lnk caseln\">Gemma Evans</span>,",
        "In <span class=\"lnk caseln\">Adomako</span> (1995), Lord McKay set out a three-part test:",
        "<ol><li><span class=\"nl\">Duty of Care owed by D to V, established by the ordinary principles of negligence.</span><ul><li><span class=\"nl\">AR: <span class=\"it\">&#8216;What he meant to say is that all the ordinary principles </span>don&#8217;t<span class=\"it\"> apply.&#8217;</span></span></li></ul><li><span class=\"nl\">Serious or significant risk of death</span><ul><li><span class=\"nl\">Does it go <span class=\"it\">beyond compensation</span> and amounts to <span class=\"it\">a crime </span>against the state<span class=\"it\"> and therefore </span>deserve punishment_ (the <span class=\"lnk caseln\">Bateman</span> test)</span></li></ul><li><span class=\"nl\">Caused by D&#8217;s conduct.</span></li></ol>",
        "But on closer inspection, the <span class=\"it\">ordinary principles</span> turned out <span class=\"it\">not</span> to be those of tort, but of criminal law, which the CA helpfully pointed out in <span class=\"lnk caseln\">Wacker</span> (2002) is different from civil law. And that this is for public policy reasons.",
        "<span class=\"bd\">Cases</span>",
        "<ul><li><span class=\"nl\">That duty in <span class=\"it\">tort</span> might be precluded by V&#8217;s (implicit) consent is irrelevant (<span class=\"lnk caseln\">Wacker</span>).</span></li><li><span class=\"nl\">Existence of duty was for the jury &mdash; unless it was obvious, in which case the judge could direct (<span class=\"lnk caseln\">Willoughby</span>).</span><ul><li><span class=\"nl\">But this did <span class=\"it\">not</span> make GNM per se a breach of ECHR art 7 (<span class=\"lnk caseln\">Misra</span>).</span><ul><li><span class=\"nl\">D&#8217;s argument &mdash; because the legality of the conduct was in effect decided by the jury, the offence lacked the legal certainty art 7 requires.</span></li><li><span class=\"nl\">CA held &mdash; jury not being asked to decide whether conduct illegal, only whether grossly negligent.<br>AR: <span class=\"it\">&#8216;Remind me how you spell <span class=\"bd\">tautology</span>?&#8217;</span></span></li></ul></li></ul><li><span class=\"nl\">N.B. establishment of duty established <span class=\"it\">not</span> to be a question for the jury (<span class=\"lnk caseln\">Gemma Evans</span> 2009).</span></li></ul>"
    ],
    "CATEGORY": "Gross Negligence Manslaughter"
},
{
    "RELATED": [
        "Unlawful Act Manslaughter",
        "Murder",
        "Duress",
        "Diminished Responsibility - S52 CJA",
        "Self Defence",
        "Loss of Control - S54 CJA",
        "Provocation",
        "Assault Occasioning ABH - S47",
        "Recklessness",
        "Single Transaction Doctrine",
        "Gross Negligence Manslaughter",
        "Wounding or Causing GBH with Intent - S18"
    ],
    "CATEGORIES": [
        "Reckless Manslaughter"
    ],
    "NUMBER": "20",
    "TYPE": "Concept",
    "NAME": "Reckless Manslaughter",
    "SUMMARY": [
        "AKA <span class=\"it\"><span class=\"lnk caseln\">Cunningham</span> Manslaughter</span> &mdash; taking a subjectively-unjustifiable risk of bringing about <span class=\"it\">serious</span> injury. For this common law crime there have been no prosecutions since"
    ],
    "CATEGORY": "Reckless Manslaughter"
},
{
    "RELATED": [
        "Wounding or Causing GBH - S20",
        "Assault Occasioning ABH - S47",
        "Wounding or Causing GBH with Intent - S18",
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Unlawful Act Manslaughter",
        "Intention for Murder",
        "Gross Negligence Manslaughter",
        "Self Defence",
        "Recklessness",
        "Duress",
        "Murder",
        "Mercy Killing"
    ],
    "CATEGORIES": [
        "Non-Fatal Offences"
    ],
    "NUMBER": "21",
    "TYPE": "Concept",
    "AKA": "Assault",
    "NAME": "Assault and Battery - S39 CJA 1988",
    "SUMMARY": [
        "<span class=\"bd\"><span class=\"ud\">Assault</span></span><br><span class=\"bd\">AR</span> &mdash; D causes V to fear immediate application of unlawful force. (No violence need transpire.)",
        "<ul><li><span class=\"nl\"><span class=\"bd\">Cause of fear</span></span><ul><li><span class=\"nl\">Can be <span class=\"bd\">words alone</span>, as long as cause fear of imminent violence &mdash; <span class=\"lnk caseln\">Constanza</span>.</span></li><li><span class=\"nl\">Unless the words <span class=\"bd\">negate</span> the gestures. <span class=\"lnk caseln\">Tuberville</span> &mdash; &#8216;if it were not assize time, I would run you through with this sword.&#8217;</span></li><li><span class=\"nl\">Can be <span class=\"bd\">silence/heavy breathing</span> &mdash; <span class=\"lnk caseln\">Ireland and Burstow</span>.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Immediacy</span></span><ul><li><span class=\"nl\">Given broad interpretation. <span class=\"lnk caseln\">Smith v Woking Police</span> &mdash; V locked inside house, D outside peering in at her. &#8216;Immediate&#8217; enough for the CA.</span></li><li><span class=\"nl\">Satisfied even when D not at all proximate to V &mdash; <span class=\"lnk caseln\">Ireland and Burstow</span>.</span></li></ul></ul>",
        "<span class=\"bd\">MR</span> &mdash; <span class=\"lnk caseln\">Specific intent</span> or subjective <span class=\"lnk caseln\">recklessness</span> as to causing the fear of immediate violence.",
        "<span class=\"ud\"><span class=\"bd\">Battery</span></span><br><span class=\"bd\">AR</span> &mdash; Unlawful application of force.",
        "<ul><li><span class=\"nl\"><span class=\"bd\">Force</span></span></li><li><span class=\"nl\">A mere touch is enough. No need for pain or harm.</span></li><li><span class=\"nl\">No requirement for  need to be <span class=\"it\">force</span>, conventionally understood &mdash; <span class=\"lnk caseln\">DPP v Kaye</span>, acid in the hand-drier.</span></li><li><span class=\"nl\"><span class=\"bd\">Application</span></span></li><li><span class=\"nl\">Can be <span class=\"bd\">directly</span> or <span class=\"bd\">indirectly</span> applied. In <span class=\"lnk caseln\">Fagan</span>, car on foot of bobby.</span></li><li><span class=\"nl\">No need to have assaulted beforehand &mdash; no need to have caused apprehension of the violence. <span class=\"lnk caseln\">Haystead</span>, sleeping baby V2, dropped and injured when mother, V1 struck.</span></li></ul>",
        "<span class=\"bd\">MR</span> &mdash; <span class=\"lnk caseln\">intention</span> or <span class=\"lnk caseln\">recklessness</span>."
    ],
    "CATEGORY": "Non-Fatal Offences"
},
{
    "RELATED": [
        "Wounding or Causing GBH with Intent - S18",
        "Assault and Battery - S39 CJA 1988",
        "Wounding or Causing GBH - S20",
        "Omissions as Actus Reus",
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Duress",
        "Self Defence",
        "Murder",
        "Causation",
        "Diminished Responsibility - S52 CJA",
        "Mercy Killing",
        "Unlawful Act Manslaughter"
    ],
    "CATEGORIES": [
        "Non-Fatal Offences"
    ],
    "NUMBER": "22",
    "TYPE": "Concept",
    "NAME": "Assault Occasioning ABH - S47",
    "SUMMARY": [
        "Assault in S47 is <span class=\"bd\">assault or battery</span>.",
        "<span class=\"bd\">AR</span> &mdash; <span class=\"lnk caseln\">Assault</span> or <span class=\"lnk caseln\">battery</span>, from which <span class=\"bd\">more than merely trivial</span> harm is caused to V.",
        "<ul><li><span class=\"nl\"> <span class=\"bd\">Harm: Physical</span></span><ul><li><span class=\"nl\"> Must be <span class=\"bd\">more than merely trifling</span> &mdash; <span class=\"lnk caseln\">Donovan</span>.</span></li><li><span class=\"nl\"> Or <span class=\"bd\">calculated to interfere with V&#8217;s health/comfort</span> &mdash; <span class=\"lnk caseln\">Miller</span>.</span></li><li><span class=\"nl\"> Or with their vanity err <span class=\"bd\">self-image</span> &mdash; <span class=\"lnk caseln\">DPP v Smith</span>.</span></li></ul><li><span class=\"nl\"> <span class=\"bd\">Harm: Psychological</span></span><ul><li><span class=\"nl\"> Constitutes ABH &mdash; <span class=\"lnk caseln\">Miller</span>.</span></li><li><span class=\"nl\"> But <span class=\"bd\">only if clinically recognisable</span> &mdash; Hobhouse LJ in <span class=\"lnk caseln\">R v Chan-Fook</span>.</span></li><li><span class=\"nl\"> Even if V ends up killing themselves &mdash; <span class=\"lnk caseln\">Dhaliwal</span>.</span></li></ul></ul>",
        "<span class=\"it\">So cut off someone&#8217;s pony-tail, and you&#8217;ve done them more than merely trivial harm &mdash; <span class=\"lnk caseln\">DPP v Smith</span>. But punch the person you&#8217;ve been victimising for years, who goes on to commit suicide that evening; and as long as you didn&#8217;t punch them very </span>hard<span class=\"it\">, you&#8217;re off the hook for S47 crime &mdash; <span class=\"lnk caseln\">Dhaliwal</span>. Such fucked-up arbitrariness.</span>",
        "<span class=\"bd\">MR</span> &mdash; same as for <span class=\"lnk caseln\">battery</span>. <span class=\"lnk caseln\">Intention</span> or <span class=\"lnk caseln\">recklessness</span>."
    ],
    "CATEGORY": "Non-Fatal Offences"
},
{
    "RELATED": [
        "Wounding or Causing GBH with Intent - S18",
        "Assault and Battery - S39 CJA 1988",
        "Assault Occasioning ABH - S47",
        "Single Transaction Doctrine",
        "Strict Liability",
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Murder",
        "Causation",
        "Intention for Murder",
        "Mercy Killing",
        "Transferred Malice",
        "Omissions as Actus Reus"
    ],
    "CATEGORIES": [
        "Non-Fatal Offences"
    ],
    "NUMBER": "23",
    "TYPE": "Concept",
    "NAME": "Wounding or Causing GBH - S20",
    "SUMMARY": [
        "Difference from S47 of <span class=\"it\">degree</span>. ABH is <span class=\"it\">more than merely trivial</span> where as GBH is <span class=\"it\">really serious</span>.",
        "<span class=\"bd\">AR</span> &mdash; wounding or inflicting GBH.",
        "<ul><li><span class=\"nl\"><span class=\"bd\">GBH</span></span><ul><li><span class=\"nl\">I.e., <span class=\"bd\">really serious harm</span> &mdash; <span class=\"lnk caseln\">DPP v Smith (1961)</span>.</span></li><li><span class=\"nl\">Which can be psychological &mdash; <span class=\"lnk caseln\">Ireland and Burstow</span>.</span></li><li><span class=\"nl\">Characteristics of V to be taken into account, e.g., age/health &mdash; <span class=\"lnk caseln\">Bollom</span>.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Infliction</span></span><ul><li><span class=\"nl\">In <span class=\"lnk caseln\">Clarence</span> in 1888, assault was necessary for infliction, and absent in consensual sex transmitting D&#8217;s gonorrhoea.</span></li><li><span class=\"nl\">But <span class=\"bd\">assault not necessary</span> for infliction since <span class=\"lnk caseln\">Wilson</span> (1984) in HL.</span></li><li><span class=\"nl\"><span class=\"bd\">Direct Application of Force?</span></span><ul><li><span class=\"nl\"><span class=\"bd\">Not currently required</span> &mdash; <span class=\"lnk caseln\">Ireland and Burstow</span>.</span></li><li><span class=\"nl\">In <span class=\"lnk caseln\">Wilson</span>, <span class=\"bd\">assault not necessary</span> for liability under S20 if there&#8217;s <span class=\"bd\">intentional and direct application of force</span>.</span></li><li><span class=\"nl\">Neither were previously been necessary. In <span class=\"lnk caseln\">Martin</span> 1881, shouting &#8216;fire&#8217; in a crowded theatre was enough.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Transmission of HIV</span></span><ul><li><span class=\"nl\">Reckless transmission of disease through sexual intercourse = S20. <span class=\"lnk caseln\">Dica</span>, explicitly overruling <span class=\"lnk caseln\">Clarence</span>.</span></li></ul></li></ul><li><span class=\"nl\"><span class=\"bd\">Wounding</span></span><ul><li><span class=\"nl\">Is <span class=\"bd\">breaking the skin</span>, both epidermis and dermis &mdash; <span class=\"lnk caseln\">Eisenhower</span>.</span></li></ul></ul>",
        "<span class=\"bd\">MR</span> &mdash; &#8216;maliciously&#8217;",
        "<ul><li><span class=\"nl\">Meant <span class=\"bd\">intentionally or recklessly</span> in <span class=\"lnk caseln\">Cunningham</span>.</span></li><li><span class=\"nl\">But only as to <span class=\"bd\">some physical harm</span>, not GBH or wounding. Leading case is <span class=\"lnk caseln\">Savage</span>.</span></li></ul>",
        "<span class=\"bd\">Racial or Religious Aggravation</span>",
        "<ul><li><span class=\"nl\"><span class=\"lnk caseln\">Crime and Disorder Act 1998</span> increases penalties if this element present</span></li><li><span class=\"nl\">Narrow definition adopted by courts:</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">DPP v Pal</span>, V an elderly asian caretaker. D, a yoof, also asian, assaulted V, calling him a &#8216;white-man\u2019s arse-licker&#8217; and a &#8216;brown Englishman.&#8217; Court held race irrelevant to attack.</span></li></ul>"
    ],
    "CATEGORY": "Non-Fatal Offences"
},
{
    "RELATED": [
        "Assault Occasioning ABH - S47",
        "Wounding or Causing GBH - S20",
        "Assault and Battery - S39 CJA 1988",
        "Omissions as Actus Reus",
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Murder",
        "Duress",
        "Single Transaction Doctrine",
        "Gross Negligence Manslaughter",
        "Voluntary Manslaughter",
        "Continuing Act Doctrine",
        "Reckless Manslaughter"
    ],
    "CATEGORIES": [
        "Non-Fatal Offences"
    ],
    "NUMBER": "24",
    "TYPE": "Concept",
    "NAME": "Wounding or Causing GBH with Intent - S18",
    "SUMMARY": [
        "Principle difference is the MR, which requires direct intent."
    ],
    "CATEGORY": "Non-Fatal Offences"
},
{
    "RELATED": [
        "Self Defence",
        "Diminished Responsibility - S52 CJA",
        "Wounding or Causing GBH - S20",
        "Assault Occasioning ABH - S47",
        "Transferred Malice",
        "Provocation",
        "Mercy Killing",
        "Causation",
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Reckless Manslaughter",
        "Recklessness",
        "Omissions as Actus Reus"
    ],
    "CATEGORIES": [
        "General Defences"
    ],
    "NUMBER": "25",
    "TYPE": "Concept",
    "NAME": "Duress",
    "SUMMARY": [
        "<span class=\"lnk caseln\">Graham</span>, <span class=\"lnk caseln\">Howe</span> and <span class=\"lnk caseln\">Hasan</span>."
    ],
    "CATEGORY": "General Defences"
},
{
    "RELATED": [
        "Duress",
        "Diminished Responsibility - S2 Homicide Act 1957",
        "Assault Occasioning ABH - S47",
        "Voluntary Manslaughter",
        "Causation",
        "Intention for Murder",
        "Strict Liability",
        "Provocation",
        "Unlawful Act Manslaughter",
        "Continuing Act Doctrine",
        "Wounding or Causing GBH - S20",
        "Loss of Control - S54 CJA"
    ],
    "CATEGORIES": [
        "General Defences"
    ],
    "--END--": "",
    "NUMBER": "26",
    "TYPE": "Concept",
    "NAME": "Self Defence",
    "SUMMARY": [
        "<span class=\"it\">A justification rather than an excuse.</span>",
        "<ul><li><span class=\"nl\">Basic principle &mdash; no liability for meeting a threat with reasonable force.</span></li></ul>",
        "The statutory basis is <span class=\"lnk gsln\">S76 Criminal Justice and Immigration Act 2008</span>, which regurgitates the existing common law. A public-law flavour exists for the use of force in making arrests or preventing crime, and is governed by <span class=\"lnk gsln\">S3(1) Criminal Law Act 1967</span>.",
        "The defence is operative once <span class=\"it\">some</span> evidence of justification is adduced by the defence. The burden then shifts to the prosecution to disprove it beyond reasonable doubt.",
        "From <span class=\"lnk caseln\">AG for NI ref 1977</span> &mdash; &#8220;what amount of force is reasonable for preventing crime, defending, protecting others, is always (in my view) always a question for the jury in the jury trial, never a point of law for the judge. The jurors should consider the circs. in which the accused had to make the decision, but not in the calm, analytical atmosphere of the courtroom when counsel have expounded the arguments. But they should put themselves in the moment of the action.&#8221;",
        "<span class=\"bd\">Details</span>",
        "<ul><li><span class=\"nl\"> Is there a duty to retreat? No. <span class=\"lnk caseln\">Bird</span>.</span></li><li><span class=\"nl\"><span class=\"ilc\">TODO</span></span></li></ul>"
    ],
    "CATEGORY": "General Defences"
},
{
    "RELATED": [
        "Donovan",
        "Emmett",
        "Lewis",
        "DPP v Smith",
        "DPP v Smith (1961)",
        "Martin",
        "Golding",
        "Aitken",
        "Dica",
        "Clarence",
        "R (on the Application of T) v DPP",
        "Savage"
    ],
    "CITATION": "A v United Kingdom (1999) 1 EHRR 611",
    "NAME": "A v United Kingdom",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "ABH",
        "Non-Fatal Offences",
        "GBH"
    ],
    "HELD": [
        "the law did not provide adequate protection to the applicant &mdash; English law needed to be changed. Lawful chastisement is no longer a valid defence."
    ],
    "NUMBER": "27",
    "TYPE": "Case",
    "YEAR": "1999",
    "SUMMARY": [
        "A stepfather beat his stepson with a garden cane. He was charged with assault, but used a defence of lawful chastisement and the jury acquitted him. The stepson took his case to the ECHR saying that English law failed to protect him, which violated his Article 3 rights."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; ABH / Non-Fatal Offences &mdash; GBH"
},
{
    "RELATED": [
        "Smith (Morgan)",
        "Golds",
        "Baillie",
        "Pearson",
        "Camplin",
        "Humphreys",
        "Dawes",
        "Bedder v DPP",
        "Thornton (No. 2)",
        "Woollin",
        "Dowds",
        "R v Zebedee"
    ],
    "CITATION": "Abbott [1977] AC 755",
    "NAME": "Abbott",
    "CATEGORIES": [
        "Murder"
    ],
    "HELD": [
        "duress is not a viable defence for murder for principal offenders."
    ],
    "NUMBER": "28",
    "TYPE": "Case",
    "YEAR": "1977",
    "SUMMARY": [
        "The defendant had took part in a murder following death threats made against himself and his mother. He held the victim while she was being stabbed with a cutlass and then buried her alive. He was convicted and given the death penalty. He appealed his conviction that the defence of duress should have been available."
    ],
    "CATEGORY": "Murder"
},
{
    "RELATED": [
        "Wacker",
        "Willoughby",
        "Misra",
        "R v S",
        "Bateman",
        "Gemma Evans",
        "R (on the Application of T) v DPP",
        "Olugboja",
        "Jogee",
        "Dawes",
        "Campbell",
        "AG Ref no 4 of 1980"
    ],
    "CITATION": "Adomako [1995] 1 AC 171",
    "NAME": "Adomako",
    "CATEGORIES": [
        "Gross Negligence Manslaughter"
    ],
    "HELD": [
        "Test for Gross Negligence Manslaughter (Lord Mackay): 1) Was there a breach of duty against the victim? 2) Did that breach of duty cause the death of the victim? 3) Were the actions of the defendant so far departed from the standard of care as to be considered criminal?"
    ],
    "NUMBER": "29",
    "TYPE": "Case",
    "YEAR": "1995",
    "SUMMARY": [
        "The appellant was an anaesthetist caring for a patient during an eye operation. During the operation the oxygen tube got disconnected and the patient died. The anaesthetist&#8217;s failure to recognise this and save the patient was classified as gross negligence manslaughter. Conviction was upheld by the Court of Appeal."
    ],
    "CATEGORY": "Gross Negligence Manslaughter"
},
{
    "RELATED": [
        "Pittwood",
        "Dytham",
        "Smith (1975)",
        "Fagan",
        "Stone and Dobinson",
        "Gemma Evans",
        "Instan",
        "People v Beardsley",
        "Santana",
        "Miller",
        "Deller",
        "AG Ref no 4 of 1980"
    ],
    "CITATION": "Airedale NHS Trust v Bland [1993] AC 789",
    "NAME": "Airedale NHS Trust v Bland",
    "CATEGORIES": [
        "Elements",
        "Actus Reus",
        "Omissions",
        "Manslaughter"
    ],
    "HELD": [
        "although euthanasia is not allowed at common law (Lord Goff), merely withdrawing treatment was an omission (not commission) and was acceptable"
    ],
    "NUMBER": "30",
    "TYPE": "Case",
    "YEAR": "1993",
    "SUMMARY": [
        "The victim sustained brain damage during the Hillsborough disaster and was left in a persistent vegetative state. His parents applied to the court for permission to cease life support. It was granted."
    ],
    "CATEGORY": "Elements &mdash; Actus Reus &mdash; Omissions / Manslaughter"
},
{
    "RELATED": [
        "Dica",
        "Jones",
        "Savage",
        "Barnes",
        "Bollom",
        "Konzani",
        "Martin",
        "Slingsby",
        "A v United Kingdom",
        "Morgan v DPP",
        "DPP v Smith (1961)",
        "Richardson"
    ],
    "CITATION": "Aitken [1992] 1 WLR 1066",
    "NAME": "Aitken",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "GBH",
        "Non-Fatal Offences",
        "Consent"
    ],
    "HELD": [
        "no liability. If the officer had consented or the defendants believed that the officer had consented it was open for the judge to find that no offence had been committed"
    ],
    "NUMBER": "31",
    "TYPE": "Case",
    "YEAR": "1992",
    "SUMMARY": [
        "Defendants were RAF officers. During a prank, they set the clothes of officers on fire (the clothes were fire retardant, had been done before without incident). This time the officer sustained serious burns. Defendants were court martialled and convicted of GBH."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; GBH / Non-Fatal Offences &mdash; Consent"
},
{
    "RELATED": [
        "Jackson",
        "Cogan and Leak",
        "Gillick v West Norfolk Health Authority",
        "Jordan",
        "Jones",
        "Bowler",
        "R v Jewell",
        "Michael Kane v HM Advocate (2009) Scotland",
        "Lane and Lane",
        "Fagan",
        "Miller",
        "Smith (Morgan)"
    ],
    "CITATION": "Allen [1985] AC 1029",
    "NAME": "Allen",
    "CATEGORIES": [
        "Fraud",
        "Debt"
    ],
    "HELD": [
        "the conviction was quashed. Making off without payment required an intention to permanently avoid payment."
    ],
    "NUMBER": "32",
    "TYPE": "Case",
    "YEAR": "1985",
    "SUMMARY": [
        "Allen stayed at a hotel and left without paying his bill. He phoned the hotel and said he was experiencing financial difficulties and arranged to leave his passport to secure the debt. He was arrested and convicted for making off without payment, appealed."
    ],
    "CATEGORY": "Fraud &mdash; Debt"
},
{
    "RELATED": [
        "Prince",
        "Jackson",
        "R v G",
        "Gammon (Hong Kong) Ltd v A-G of Hong Kong",
        "Sweet v Parsley",
        "K",
        "Barnfather",
        "Matudi",
        "Deyemi and Another",
        "B (a minor) v DPP",
        "Hyam v DPP",
        "Latimer"
    ],
    "CITATION": "Alphacell Ltd v Woodward [1972] AC 824",
    "NAME": "Alphacell Ltd v Woodward",
    "CATEGORIES": [
        "Elements",
        "Strict Liability"
    ],
    "HELD": [
        "needed to be held liable under strict liability for public policy reasons. Otherwise, it could open the door for more pollution. Mala prohibitor crime. Easier to ignore mens rea."
    ],
    "NUMBER": "33",
    "TYPE": "Case",
    "YEAR": "1972",
    "SUMMARY": [
        "A blocked pipe had caused pollution, unknown to the defendant. It was not alleged that they were negligent. Convicted and appealed, but appeal was rejected."
    ],
    "CATEGORY": "Elements &mdash; Strict Liability"
},
{
    "RELATED": [
        "Smith (Morgan)",
        "Dietschmann",
        "Wood",
        "Bedder v DPP",
        "Pearson",
        "Baillie",
        "Humphreys",
        "Ibrams",
        "Thornton (No. 2)",
        "R v Zebedee",
        "Byrne",
        "R v Jewell"
    ],
    "CITATION": "Ahluwalia [1992] 4 All ER 889",
    "NAME": "Ahluwalia",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation/Loss of Control",
        "Murder",
        "Defences",
        "Diminished Responsibility"
    ],
    "HELD": [
        "the original judge&#8217;s direction on provocation was correct (Duffy test). On those grounds, the appeal was not allowed. However, the appeal was allowed on grounds of diminished responsibility, although the court stressed that it was exceptional for new evidence to be allowed."
    ],
    "NUMBER": "34",
    "TYPE": "Case",
    "YEAR": "1992",
    "SUMMARY": [
        "A wife set her husband on fire, and he died from his injuries. He had been abusive and having an affair. Defendant claimed provocation, but was convicted. Defendant appealed on misdirection of trial judge, and claimed defense of diminished responsibility."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation/Loss of Control / Murder &mdash; Defences &mdash; Diminished Responsibility"
},
{
    "RELATED": [
        "Jogee",
        "Davies v DPP",
        "Greatrex",
        "Hui Chi-Ming",
        "National Coal Board v Gamble",
        "Stringer",
        "Chan Wing Siu",
        "Bainbridge",
        "English and Weddle",
        "Carey",
        "AG Ref no 1 of 1975",
        "Rafferty"
    ],
    "CITATION": "Anderson and Morris [1966] 2 QB 110",
    "NAME": "Anderson and Morris",
    "CATEGORIES": [
        "Joint Enterprise",
        "Deliberate Departure From Common Design"
    ],
    "HELD": [
        "if people embark on a joint enterprise, each is liable for acts done in pursuance of that joint enterprise, but if one goes beyond what has been agreed as part of the enterprise, the other is not liable for the unauthorized act.",
        "The defendant won the appeal and their conviction was quashed."
    ],
    "NUMBER": "35",
    "TYPE": "Case",
    "YEAR": "1966",
    "SUMMARY": [
        "The defendant went with D1 to confront the victim after the victim tried to strangle D1&#8217;s wife. D1 began beating the victim, and stabbed the victim to death. The defend-ant denied knowing that D1 had a knife. The defendant was convicted of manslaughter and appealed."
    ],
    "CATEGORY": "Joint Enterprise &mdash; Deliberate Departure From Common Design"
},
{
    "RELATED": [
        "Woollin",
        "Nedrick",
        "Hyam v DPP",
        "Moloney",
        "Dytham",
        "Williams",
        "Mahmood (Asaf)",
        "Wilcox v Jeffrey",
        "Latimer",
        "Mohan",
        "Jordan",
        "Devonald"
    ],
    "CITATION": "Anderton v Ryan [1985] 1 AC 560, [1985] 2 All ER 355",
    "NAME": "Anderton v Ryan",
    "CATEGORIES": [
        "Theft",
        "Intent"
    ],
    "HELD": [
        "a conviction is prevented where the full offence could not follow from preparatory acts. It would be unfair to turn an innocent act into an offence of attempting to commit the crime, merely by virtue of the defendant&#8217;s criminal intent. Overturned by Shivpuri"
    ],
    "NUMBER": "36",
    "TYPE": "Case",
    "YEAR": "1985",
    "SUMMARY": [
        "The defendant was found in possession of a video camera. She believed it to be stolen, but refused to name the source. After it became clear that there was no evidence that it was stolen, she was convicted of attempting to handle stolen goods."
    ],
    "CATEGORY": "Theft &mdash; Intent"
},
{
    "RELATED": [
        "Doughty",
        "Golds",
        "Ahluwalia",
        "Pearson",
        "Baillie",
        "Dowds",
        "Duffy",
        "Bedder v DPP",
        "Byrne",
        "Camplin",
        "Dietschmann",
        "R v Jewell"
    ],
    "FLAGS": [
        "Me"
    ],
    "CITATION": "Asmelash (2013) EWCA Crim 157",
    "NAME": "Asmelash",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Loss of Control",
        "Voluntary Intoxication"
    ],
    "HELD": [
        "A defendant&#8217;s alcoholism is not a characteristic that can be taken into account as one of D&#8217;s circumstances under S53(1)(c) CJA 2009. Being a characteristic affecting D&#8217;s capacity for self-control, S53(3) excludes it."
    ],
    "NUMBER": "37",
    "TYPE": "Case",
    "YEAR": "2013",
    "SUMMARY": [
        "Both piss-artists, dissolutes and scoundrels. A background of alcoholism. Full-up on drink D stabs V in the back."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Loss of Control &mdash; Voluntary Intoxication"
},
{
    "RELATED": [
        "Humphreys",
        "R v Zebedee",
        "R v Jewell",
        "Duffy",
        "Smith (Morgan)",
        "Dawes",
        "Barnsdale-Quean",
        "Thornton (No. 2)",
        "Ibrams",
        "Pearson",
        "Baillie",
        "Camplin"
    ],
    "CITATION": "AG for Jersey v Holley [2005] UKPC 23, 3 WLR 29",
    "NAME": "AG for Jersey v Holley",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation/Loss of Control",
        "Murder",
        "Defences",
        "Provocation"
    ],
    "HELD": [
        "the court did not consider this part of the diminished powers of self-control; they only consider the age and sex of the defendant for this defence. If the defendant wants other factors taken into account, they should claim diminished responsibility. Solidifies an objective test."
    ],
    "NUMBER": "38",
    "TYPE": "Case",
    "YEAR": "2005",
    "SUMMARY": [
        "The defendant killed his gf, had feelings of worthlessness and depression."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation/Loss of Control / Murder &mdash; Defences &mdash; Provocation"
},
{
    "RELATED": [
        "Carey",
        "Hui Chi-Ming",
        "Mahmood (Asaf)",
        "Powell and Daniels",
        "DPP for NI v Maxwell",
        "Greatrex",
        "Rahman",
        "Jogee",
        "National Coal Board v Gamble",
        "English and Weddle",
        "Anderson and Morris",
        "Chan Wing Siu"
    ],
    "CITATION": "AG Ref no 1 of 1975 [1975] QB 773",
    "NAME": "AG Ref no 1 of 1975",
    "CATEGORIES": [
        "Joint Enterprise",
        "Liability"
    ],
    "HELD": [
        "the defendant was actually guilty because the driver had unknowingly been put in a position in which he had committed an offence which he would never have committed otherwise. If it is shown beyond a reasonable doubt that the friend would drive after consuming alcohol, and the defend-ant knew this, then he should be found liable."
    ],
    "NUMBER": "39",
    "TYPE": "Case",
    "YEAR": "1975",
    "SUMMARY": [
        "The defendant laced a friend&#8217;s drinks with alcohol knowing the friend would be driving home. The friend was convicted of drunk driving. The defendant was charged as an accomplice, but was acquitted. The trial judge took the view that there had to be evidence of an agreement between the accomplice and a principal."
    ],
    "CATEGORY": "Joint Enterprise &mdash; Liability"
},
{
    "RELATED": [
        "Whybrow",
        "Jones [1990]",
        "Griffin",
        "Shivpuri",
        "Pace and Rogers",
        "Millard and Vernon",
        "Walker and Hayles",
        "Geddes",
        "Mohan",
        "Campbell",
        "DPP v K",
        "Mitchell"
    ],
    "CITATION": "AG Ref no 1 of 1992 [1993] 2 All ER 190",
    "NAME": "AG Ref no 1 of 1992",
    "CATEGORIES": [
        "Attempt",
        "Preparatory Actions"
    ],
    "HELD": [
        "liable, because his actions were more than merely preparatory. He did not have to attempt or achieve penetration to be guilty of attempted rape."
    ],
    "NUMBER": "40",
    "TYPE": "Case",
    "YEAR": "1993",
    "SUMMARY": [
        "The defendant was intoxicated and tried to rape a girl. He was unable to attempt penetration, although he assaulted her."
    ],
    "CATEGORY": "Attempt &mdash; Preparatory Actions"
},
{
    "RELATED": [
        "Bird",
        "Symonds",
        "Palmer v the Queen",
        "Devlin v Armstrong",
        "Martin [2002]",
        "Kitson",
        "Dudley and Stephens",
        "O'Grady",
        "Buckoke v GLC",
        "F v West Berkshire Health Authority",
        "Bourne",
        "Clegg"
    ],
    "CATEGORIES": [
        "General Defences",
        "Self-Defence"
    ],
    "HELD": [
        "possession of the bomb while the threat was still in place would excuse it. However, as soon as the threat passed, it had to be destroyed because having it would no longer be justified."
    ],
    "NUMBER": "41",
    "CITATION": "AG Ref no 2 of 1983",
    "NAME": "AG Ref no 2 of 1983",
    "TYPE": "Case",
    "SUMMARY": [
        "The defendant had a petrol bomb because he feared imminent attack against his family."
    ],
    "CATEGORY": "General Defences &mdash; Self-Defence"
},
{
    "RELATED": [
        "Mitchell",
        "Gnango",
        "Latimer",
        "AG Ref no 4 of 1980",
        "Thabo Meli",
        "Fagan",
        "Gemma Evans",
        "Miller",
        "Church",
        "Pembliton",
        "Santana",
        "Sweet v Parsley"
    ],
    "CITATION": "AG Ref no 3 of 1994 [1998] AC 245",
    "NAME": "AG Ref no 3 of 1994",
    "CATEGORIES": [
        "Elements",
        "Coincidence of MR and AR",
        "Transferred Malice"
    ],
    "HELD": [
        "it would have been murder if the defendant had the mens rea to kill the infant, but since he did not, it was considered manslaughter. No transferred malice from the attack on the mother (Lord Mustill: transferred malice is a legal fiction)."
    ],
    "NUMBER": "42",
    "TYPE": "Case",
    "YEAR": "1998",
    "SUMMARY": [
        "The victim was stabbed by the defendant while 6 months pregnant. The child was born alive, but died 120 days after birth. The defendant was convicted of murder, but appeal went to the House of Lords who changed the charge to manslaughter."
    ],
    "CATEGORY": "Elements &mdash; Coincidence of MR and AR &mdash; Transferred Malice"
},
{
    "RELATED": [
        "Mitchell",
        "Latimer",
        "AG Ref no 3 of 1994",
        "Gnango",
        "Santana",
        "Gemma Evans",
        "Fagan",
        "Moloney",
        "Thabo Meli",
        "Pembliton",
        "Hyam v DPP",
        "Church"
    ],
    "CITATION": "AG Ref no 4 of 1980 [1981] 1 WLR 705",
    "NAME": "AG Ref no 4 of 1980",
    "CATEGORIES": [
        "Murder",
        "Manslaughter",
        "Elements",
        "Coincidence of MR and AR",
        "Transferred Malice"
    ],
    "HELD": [
        "when the particular action in a sequence that causes death cannot be identified, the jury should be directed to find manslaughter should the <span class=\"it\">first</span> act be unlawful."
    ],
    "NUMBER": "43",
    "TYPE": "Case",
    "YEAR": "1981",
    "SUMMARY": [
        "The defendant pushed his girlfriend down the stairs, put a rope around her neck with which he dragged her <span class=\"it\">back</span> up the stairs to the bathroom. Thinking she was already dead, he butchered up her body to dispose of it. Evidence was entered that she may not have been. At issue was whether he had the requisite mens rea for murder - to cause death or GBH, which is not something one can intend on someone already dead."
    ],
    "CATEGORY": "Murder / Manslaughter / Elements &mdash; Coincidence of MR and AR &mdash; Transferred Malice"
},
{
    "RELATED": [
        "Prince",
        "R v G",
        "K",
        "Jackson",
        "Sweet v Parsley",
        "Gammon (Hong Kong) Ltd v A-G of Hong Kong",
        "Deyemi and Another",
        "Alphacell Ltd v Woodward",
        "Matudi",
        "Barnfather",
        "Michael Kane v HM Advocate (2009) Scotland",
        "White"
    ],
    "CITATION": "B (a minor) v DPP [2000] 2 AC 428",
    "NAME": "B (a minor) v DPP",
    "CATEGORIES": [
        "Elements",
        "Strict Liability"
    ],
    "HELD": [
        "no strict liability; there was an honest mistaken belief. Principle: the presumption of mens rea is required for every offence unless the presumption can be rebutted on evidence which is &#8220;compellingly clear&#8221; i.e. the presumption is expressly or impliedly excluded."
    ],
    "NUMBER": "44",
    "TYPE": "Case",
    "YEAR": "2000",
    "SUMMARY": [
        "A 15 y.o. boy approached a 13 y.o. girl asking for oral sex, believing her to be of age. She refused and he was charged with this offence."
    ],
    "CATEGORY": "Elements &mdash; Strict Liability"
},
{
    "RELATED": [
        "Duffy",
        "Barnsdale-Quean",
        "R v Zebedee",
        "Dawes",
        "Humphreys",
        "Bedder v DPP",
        "Camplin",
        "AG for Jersey v Holley",
        "Thornton (No. 2)",
        "Ahluwalia",
        "Smith (Morgan)",
        "R v Jewell"
    ],
    "CITATION": "Baillie [1995] 3 WLR 330",
    "NAME": "Baillie",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation/Loss of Control"
    ],
    "HELD": [
        "the sudden and temporary loss of control can last for an undefined amount of time, assuming that you are still operating under the Duffy test."
    ],
    "NUMBER": "45",
    "TYPE": "Case",
    "YEAR": "1995",
    "SUMMARY": [
        "Baillie&#8217;s son owed money to drug dealers. Baillie took a gun with him to meet the dealers, and then killed them after stopping for a ham sandwich."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation/Loss of Control"
},
{
    "RELATED": [
        "Jogee",
        "Stewart",
        "DPP for NI v Maxwell",
        "National Coal Board v Gamble",
        "Rodgers",
        "Hui Chi-Ming",
        "Greatrex",
        "Roberts [1993]",
        "Carey",
        "Stringer",
        "Rafferty",
        "Mahmood (Asaf)"
    ],
    "CITATION": "Bainbridge [1960] 1 QB 129",
    "NAME": "Bainbridge",
    "CATEGORIES": [
        "Joint Enterprise",
        "Secondary Liability"
    ],
    "HELD": [
        "the defendant was liable because he knew the details of the primary offender&#8217;s plan. Leading case in secondary liability. A defendant will be liable as a secondary offender if they assist in a crime, even if they do not know all the details of the crime."
    ],
    "NUMBER": "46",
    "TYPE": "Case",
    "YEAR": "1960",
    "SUMMARY": [
        "The defendant supplied oxygen for a primary offender to carry out a robbery."
    ],
    "CATEGORY": "Joint Enterprise &mdash; Secondary Liability"
},
{
    "RELATED": [
        "Walker",
        "El Ghazal",
        "Alphacell Ltd v Woodward",
        "Prince",
        "DPP v Pal",
        "R (on the Application of T) v DPP",
        "Hughes",
        "Latimer",
        "Morgan v DPP",
        "Dawson",
        "Clarkson",
        "Roberts"
    ],
    "CITATION": "Barnard (1980) 70 Cr App R 28",
    "NAME": "Barnard",
    "CATEGORIES": [
        "Conspiracy"
    ],
    "HELD": [
        "not liable for conspiracy. In order for a conspiracy to be formed, the parties agree on a conduct which will necessarily result in the commission of a crime. However, all of the parties do not need to know each other. It is a conspiracy even though something intervenes."
    ],
    "NUMBER": "47",
    "TYPE": "Case",
    "YEAR": "1980",
    "SUMMARY": [
        "The defendant was an expert in robbing jewellery stores. He had talked to the robbers before, and visited the shop but they never discussed robbing the store."
    ],
    "CATEGORY": "Conspiracy"
},
{
    "RELATED": [
        "Brown",
        "Dica",
        "Aitken",
        "Tabassum",
        "Slingsby",
        "Jones",
        "Wilson [1996]",
        "Morgan v DPP",
        "Richardson",
        "Jheeta",
        "Smith v Woking Police",
        "Golding"
    ],
    "CITATION": "Barnes [2005] 1 WLR 910. [2005] Crim LR 381",
    "NAME": "Barnes",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Consent"
    ],
    "HELD": [
        "conviction unsafe. Determined: 1) Criminal proceedings should only be used where conduct is sufficiently grave to be necessitate them (otherwise civil proceedings should be used). 2) In contact sports, implied consent excuses bodily harm so long as it is reasonably expected. 3) Conduct within the rules of the sport is unlikely to be criminal."
    ],
    "NUMBER": "48",
    "TYPE": "Case",
    "YEAR": "2005",
    "SUMMARY": [
        "The defendant seriously injured the victim during an amateur football match. The injury was accidental. The defendant was charged with infliction of GBH under s. 20."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Consent"
},
{
    "RELATED": [
        "Smith (Morgan)",
        "Bedder v DPP",
        "R v Jewell",
        "Duffy",
        "Baillie",
        "Ibrams",
        "Camplin",
        "Humphreys",
        "R v Zebedee",
        "Thornton (No. 2)",
        "Pearson",
        "Ahluwalia"
    ],
    "CITATION": "Barnsdale-Quean (2014)",
    "NAME": "Barnsdale-Quean",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation/Loss of Control"
    ],
    "HELD": [
        "no loss of control; no evidence to support that fact."
    ],
    "NUMBER": "49",
    "TYPE": "Case",
    "YEAR": "2014",
    "SUMMARY": [
        "Defendant charged with murder of his wife. He strangled her, then stabbed himself in the stomach, trying to make it look like she attacked him. Originally claimed self-defence, and then tried loss of control."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation/Loss of Control"
},
{
    "RELATED": [
        "Jackson",
        "Gammon (Hong Kong) Ltd v A-G of Hong Kong",
        "B (a minor) v DPP",
        "Deyemi and Another",
        "Sweet v Parsley",
        "Matudi",
        "R v G",
        "K",
        "Alphacell Ltd v Woodward",
        "Prince",
        "Airedale NHS Trust v Bland",
        "Kennedy (No. 1)"
    ],
    "CITATION": "Barnfather [2003] 1 WLR 2318",
    "NAME": "Barnfather",
    "CATEGORIES": [
        "Elements",
        "Strict Liability"
    ],
    "HELD": [
        "Mala prohibitor offence. Parents held liable under the Education Act 1996. No mens rea required."
    ],
    "NUMBER": "50",
    "TYPE": "Case",
    "YEAR": "2003",
    "SUMMARY": [
        "A child of school age failed to attend school. Parents held liable."
    ],
    "CATEGORY": "Elements &mdash; Strict Liability"
},
{
    "RELATED": [
        "Thornton (No. 2)",
        "Duffy",
        "Humphreys",
        "Camplin",
        "Baillie",
        "Ibrams",
        "R v Zebedee",
        "R v Jewell",
        "Smith (Morgan)",
        "Ahluwalia",
        "AG for Jersey v Holley",
        "Dawes"
    ],
    "CITATION": "Bedder v DPP [1954] 1 WLR 1119",
    "NAME": "Bedder v DPP",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation/Loss of Control"
    ],
    "HELD": [
        "impotency was a characteristic of a reasonable person and does not provide sufficient evidence for provocation."
    ],
    "NUMBER": "51",
    "TYPE": "Case",
    "YEAR": "1954",
    "SUMMARY": [
        "The defendant was taunted about his impotency by his partner, so he killed her."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation/Loss of Control"
},
{
    "RELATED": [
        "Symonds",
        "Martin [1989]",
        "Pommell",
        "F v West Berkshire Health Authority",
        "Dadson",
        "Clegg",
        "Devlin v Armstrong",
        "Bird",
        "Buckoke v GLC",
        "Lee",
        "Kitson",
        "Bourne"
    ],
    "CITATION": "Bell [1992] Crim LR 176",
    "NAME": "Bell",
    "CATEGORIES": [
        "General Defences",
        "Duress",
        "Of Circumstances"
    ],
    "HELD": [
        "still liable, because the defendant should have stopped driving as soon as they were safe. As soon as the threat passes, there is a duty to desist."
    ],
    "NUMBER": "52",
    "TYPE": "Case",
    "YEAR": "1992",
    "SUMMARY": [
        "The defendant was intoxicated, but needed to drive away to escape duress of circumstances to escape homosexual circumstances"
    ],
    "CATEGORY": "General Defences &mdash; Duress &mdash; Of Circumstances"
},
{
    "RELATED": [
        "Symonds",
        "Martin [2002]",
        "Devlin v Armstrong",
        "Palmer v the Queen",
        "AG Ref no 2 of 1983",
        "R v Jones (Margaret)",
        "Martin [1989]",
        "Bell",
        "Pommell",
        "Bourne",
        "Clegg",
        "Dadson"
    ],
    "CITATION": "Bird [1985] 2 All ER 513",
    "NAME": "Bird",
    "CATEGORIES": [
        "General Defences",
        "Self-Defence"
    ],
    "HELD": [
        "self-defence was valid. Whilst withdrawing or demonstrating an unwillingness to fight is good evidence that the defendant is acting reasonably and in good faith in self-defence, there was no absolute obligation to demonstrate an unwillingness to retreat."
    ],
    "NUMBER": "53",
    "TYPE": "Case",
    "YEAR": "1985",
    "SUMMARY": [
        "The defendant got into a fight with her ex-boyfriend and ended up cutting him so badly he lost his eye. She claimed self-defence."
    ],
    "CATEGORY": "General Defences &mdash; Self-Defence"
},
{
    "RELATED": [
        "Gillick v West Norfolk Health Authority",
        "Cogan and Leak",
        "Bourne (1952)",
        "Wilcox v Jeffrey",
        "Lane and Lane",
        "Bryce",
        "Gianetto",
        "Carter v Richardson",
        "Coney",
        "Calhaem",
        "Callow v Tillstone",
        "Clarkson"
    ],
    "CITATION": "Blakely and Sutton v Chief Constable of West Mercia [1991] RTR 405",
    "NAME": "Blakely and Sutton v Chief Constable of West Mercia",
    "CATEGORIES": [
        "Complicity"
    ],
    "HELD": [
        "defendant liable under Cunningham recklessness."
    ],
    "NUMBER": "54",
    "TYPE": "Case",
    "YEAR": "1991",
    "SUMMARY": [
        "The defendant was having an affair with a married man. She slipped vodka into his drink so she would have to take him back to her residence. While she was in the bathroom, the man left the bar and started to drive home. He was pulled over and failed a sobriety test."
    ],
    "CATEGORY": "Complicity"
},
{
    "RELATED": [
        "Holland",
        "Smith",
        "Latif",
        "Hughes",
        "Williams (1991)",
        "Dias",
        "Dhaliwal",
        "Cheshire",
        "Michael Kane v HM Advocate (2009) Scotland",
        "Environment Agency v Empress Car Company",
        "Dyson",
        "Kennedy (No. 1)"
    ],
    "CITATION": "Blaue [1975] 1 WLR 1411",
    "NAME": "Blaue",
    "CATEGORIES": [
        "Elements",
        "Causation",
        "Thin Skull Rule"
    ],
    "HELD": [
        "A defendant cannot remove responsibility by saying the victim should have taken better care of themselves. A wholly unreasonable action may break the chain of causation, however, you take your victim as you find them."
    ],
    "NUMBER": "55",
    "TYPE": "Case",
    "YEAR": "1975",
    "SUMMARY": [
        "Defendants stabbed the victim 4 times. The victim was a Jehovah&#8217;s Witness, and refused a blood transfusion and died. The defendant tried to argue that refusal of medical treatment was a novus actus interveniens and therefore they could not be held liable for the death of the victim."
    ],
    "CATEGORY": "Elements &mdash; Causation &mdash; Thin Skull Rule"
},
{
    "RELATED": [
        "Kitson",
        "F v West Berkshire Health Authority",
        "Buckoke v GLC",
        "Dudley and Stephens",
        "Symonds",
        "O'Grady",
        "Martin [2002]",
        "Bird",
        "Dadson",
        "Clegg",
        "Lee",
        "Martin [1989]"
    ],
    "CITATION": "Bourne [1939] 1 KB 687",
    "NAME": "Bourne",
    "CATEGORIES": [
        "General Defences",
        "Necessity",
        "Medical Grounds"
    ],
    "HELD": [
        "defendant acquitted. The doctor was acting in the best interests of his patient"
    ],
    "NUMBER": "56",
    "TYPE": "Case",
    "YEAR": "1939",
    "SUMMARY": [
        "A doctor procured a miscarriage for a 14 y.o.; acting to preserve the life of the mother who had been the victim of a violent rape."
    ],
    "CATEGORY": "General Defences &mdash; Necessity &mdash; Medical Grounds"
},
{
    "RELATED": [
        "Cogan and Leak",
        "Wilcox v Jeffrey",
        "Carter v Richardson",
        "Lane and Lane",
        "Clarkson",
        "Callow v Tillstone",
        "Bryce",
        "Gillick v West Norfolk Health Authority",
        "Gianetto",
        "Coney",
        "Calhaem",
        "Blakely and Sutton v Chief Constable of West Mercia"
    ],
    "CITATION": "Bourne (1952) 36 Cr App R 125",
    "NAME": "Bourne (1952)",
    "CATEGORIES": [
        "Complicity"
    ],
    "HELD": [
        "the defence that the wife had did not extend to her husband helping her get away with it."
    ],
    "NUMBER": "57",
    "TYPE": "Case",
    "YEAR": "1952",
    "SUMMARY": [
        "The husband was convicting of aiding and abetting his wife to complete buggery with their dog. The wife had a complete defence (she had been forced into it)."
    ],
    "CATEGORY": "Complicity"
},
{
    "RELATED": [
        "Bree",
        "Morgan v DPP",
        "R v B",
        "Williams",
        "Olugboja",
        "Kaitamaki v the Queen",
        "Elbekkay",
        "R v B (2013)",
        "Linekar",
        "Devonald",
        "R (F) v DPP and A",
        "McNally"
    ],
    "CITATION": "Bowler [2015] EWCA Crim 849",
    "NAME": "Bowler",
    "CATEGORIES": [
        "Sexual Offences",
        "Rape",
        "Consent"
    ],
    "HELD": [
        "defendant guilty for gross negligent manslaughter, but sentence reduced on appeal. However, had the victim not died, the circumstances may have been different. The court said that the actions of the parties involved were consensual and it was not for the court to interfere."
    ],
    "NUMBER": "58",
    "TYPE": "Case",
    "YEAR": "2015",
    "SUMMARY": [
        "The defendant suffered from cerebral palsy. He and his live-in lover were contacted by the victim who wanted to engage in consensual masochistic activities. The victim was wrapped in cellophane, with air holes cut to breathe. The victim was left unattended for a number of hours, and although the defendant could have sought medical attention when he realised something was wrong with the victim, but chose not to."
    ],
    "CATEGORY": "Sexual Offences &mdash; Rape &mdash; Consent"
},
{
    "RELATED": [
        "Bowler",
        "Morgan v DPP",
        "R (F) v DPP and A",
        "Devonald",
        "Kaitamaki v the Queen",
        "Williams",
        "Linekar",
        "R v B (2013)",
        "McNally",
        "R v B",
        "Elbekkay",
        "Olugboja"
    ],
    "CITATION": "Bree [2007] EWCA Crim 256",
    "NAME": "Bree",
    "CATEGORIES": [
        "Sexual Offences",
        "Rape",
        "Consent"
    ],
    "HELD": [
        "appeal allowed. No alcohol grid system in terms of how intoxication affects consent. A trial judge will never be wrong if he defines consent for the jury and tells them to find it. The capacity of complainant to consent may stop before the complainant passes out but it will be fact-specific on each case. Intoxicated consent is still consent and if the complainant regrets it later, it does not vitiate consent."
    ],
    "NUMBER": "59",
    "TYPE": "Case",
    "YEAR": "2007",
    "SUMMARY": [
        "Bree got drunk with his brother and friends. At some point in the night, he started to have sex with the complainant who was also intoxicated. Although the complainant never said &#8220;no&#8221; she also claimed that she never consented. Bree said that she was drunk but was capable of consenting, and had undressed herself and appeared willing. Bree was convicted and appealed."
    ],
    "CATEGORY": "Sexual Offences &mdash; Rape &mdash; Consent"
},
{
    "RELATED": [
        "Barnes",
        "Tabassum",
        "Wilson [1996]",
        "Aitken",
        "Dica",
        "Morgan v DPP",
        "Jheeta",
        "Richardson",
        "Slingsby",
        "Jones",
        "Bree",
        "Emmett"
    ],
    "CITATION": "Brown [1994] 1 AC 212",
    "NAME": "Brown",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Consent"
    ],
    "HELD": [
        "Consent will only be a defence to the level of a common law battery and only if there is no injury caused or intended. Where harm is intended and/or caused, then consent is never a defence in criminal law unless there was some reason to justify it being in the public interest (Lord Templeman)"
    ],
    "NUMBER": "60",
    "TYPE": "Case",
    "YEAR": "1994",
    "SUMMARY": [
        "The police entered a house belonging to the defendant and found a series of consensual sado-masochistic homosexual acts. A safety word was used in all the videos. Defendants all charged under Section 47 or 20."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Consent"
},
{
    "RELATED": [
        "Wilcox v Jeffrey",
        "Clarkson",
        "Blakely and Sutton v Chief Constable of West Mercia",
        "Gillick v West Norfolk Health Authority",
        "Carter v Richardson",
        "Gianetto",
        "Calhaem",
        "Lane and Lane",
        "Callow v Tillstone",
        "Cogan and Leak",
        "Bourne (1952)",
        "Khan"
    ],
    "CITATION": "Bryce [2004] EWCA Crim 1231, [2004] 2 Cr App R 592, Crim LR 936",
    "NAME": "Bryce",
    "CATEGORIES": [
        "Complicity"
    ],
    "HELD": [
        "the jury were allowed to infer that the defendant intentionally assisted the killer. That act was committed knowing that it was likely the killer would commit a crime. Liable as a secondary party."
    ],
    "NUMBER": "61",
    "TYPE": "Case",
    "YEAR": "2004",
    "SUMMARY": [
        "The defendant intentionally transported a killer to the scene of a crime, but the murder did not occur until 13 hours later."
    ],
    "CATEGORY": "Complicity"
},
{
    "RELATED": [
        "Bourne",
        "F v West Berkshire Health Authority",
        "Kitson",
        "Dudley and Stephens",
        "Symonds",
        "Martin [1989]",
        "Clegg",
        "Gladstone Williams",
        "R v Jones (Margaret)",
        "Lee",
        "AG Ref no 2 of 1983",
        "Palmer v the Queen"
    ],
    "CITATION": "Buckoke v GLC [1971] Ch 734",
    "NAME": "Buckoke v GLC",
    "CATEGORIES": [
        "General Defences",
        "Necessity"
    ],
    "HELD": [
        "no liability, although the case went through litigation. It was suggested that to avoid confusion in the future, that the discretion not to prosecute be exercised."
    ],
    "NUMBER": "62",
    "TYPE": "Case",
    "YEAR": "1971",
    "SUMMARY": [
        "The defendant went through a red light in order to save people from a fire, and caused an accident."
    ],
    "CATEGORY": "General Defences &mdash; Necessity"
},
{
    "RELATED": [
        "Tandy",
        "Wood",
        "Golds",
        "Dowds",
        "Dietschmann",
        "Ahluwalia",
        "R v Zebedee",
        "Ibrams",
        "Clinton",
        "Pearson",
        "Bedder v DPP",
        "Duffy"
    ],
    "CITATION": "Byrne (1960) 2 QB 396",
    "NAME": "Byrne",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Diminished Responsibility",
        "Abnormality of Mind"
    ],
    "HELD": [
        "allowed, changed to manslaughter. &#8220;Abnormality of mind&#8221; was wide enough to cover the mind&#8217;s activities in all its aspects, including the ability to exercise will power to control physical acts in accordance with rational judgment. But &#8220;abnormality of mind&#8221; means a state of mind so different from that of ordinary human beings that a reasonable man would term it abnormal."
    ],
    "NUMBER": "63",
    "TYPE": "Case",
    "YEAR": "1960",
    "SUMMARY": [
        "Byrne mutilated and killed a young woman. Said that he suffered from perverted desires which he could not resist. Could not plead insanity because he knew what he was doing was wrong. Convicted of murder, appealed."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Diminished Responsibility &mdash; Abnormality of Mind"
},
{
    "RELATED": [
        "Gemmell and Richardson",
        "Malcolm",
        "Elliott v C (a minor)",
        "Cunningham",
        "Hyam v DPP",
        "Nedrick",
        "Westminster City Council v Croyalgrange Ltd",
        "Kingston",
        "Gibbins and Proctor",
        "Hancock and Shankland",
        "Moloney",
        "Santana"
    ],
    "CITATION": "Caldwell [1982] AC 341",
    "NAME": "Caldwell",
    "CATEGORIES": [
        "Elements",
        "Mens Rea",
        "Recklessness"
    ],
    "HELD": [
        "you are reckless when you consciously think about doing something and then you do it. You are also liable if you consciously thought about the risk and took it, but also if a reasonable person would have foreseen the risk. Academics argue that this introduced unfairness into the law. Rarely used now, mostly Cunningham recklessness."
    ],
    "NUMBER": "64",
    "TYPE": "Case",
    "YEAR": "1982",
    "SUMMARY": [
        "The defendant was very intoxicated and subsequently set fire to several rooms of the hotel he was staying in. Charged with criminal damage."
    ],
    "CATEGORY": "Elements &mdash; Mens Rea &mdash; Recklessness"
},
{
    "RELATED": [
        "Coney",
        "Carter v Richardson",
        "Bryce",
        "Blakely and Sutton v Chief Constable of West Mercia",
        "Bourne (1952)",
        "Khan",
        "Cogan and Leak",
        "Callow v Tillstone",
        "Gillick v West Norfolk Health Authority",
        "Lane and Lane",
        "Wilcox v Jeffrey",
        "Gianetto"
    ],
    "CITATION": "Calhaem [1985] QB 808, 2 All ER 266",
    "NAME": "Calhaem",
    "CATEGORIES": [
        "Complicity",
        "Counselling"
    ],
    "HELD": [
        "Calhaem was complicit in the crime. To counsel a crime, there is no need for a causal connection to the offense. All that is needed is some sort of consensus in the sense that the murder has to be within the general scope or advice of the secondary defendant."
    ],
    "NUMBER": "65",
    "TYPE": "Case",
    "YEAR": "1985",
    "SUMMARY": [
        "Calhaem hired someone to murder her love rival. The hit man said that he had no intention of killing the rival, but was going to carry out a charade to get money from Calhaem. However, when the hit man arrived at the rival&#8217;s house, she went crazy and the hit man accidentally killed her."
    ],
    "CATEGORY": "Complicity &mdash; Counselling"
},
{
    "RELATED": [
        "Calhaem",
        "Clarkson",
        "Bourne (1952)",
        "Khan",
        "Wilcox v Jeffrey",
        "Carter v Richardson",
        "Lane and Lane",
        "Blakely and Sutton v Chief Constable of West Mercia",
        "Gillick v West Norfolk Health Authority",
        "Bryce",
        "Cogan and Leak",
        "Gianetto"
    ],
    "CITATION": "Callow v Tillstone (1900) 83 LT 411",
    "NAME": "Callow v Tillstone",
    "CATEGORIES": [
        "Complicity"
    ],
    "HELD": [
        "liable, but not as a principal offender. The fault for the crime applies, but not strict liability. Minimal acts are needed to be liable. The essence of complicity has become fault based. The act of being a party to an illegal act all depends on mens rea."
    ],
    "NUMBER": "66",
    "TYPE": "Case",
    "YEAR": "1900",
    "SUMMARY": [
        "A butcher sold tainted meat."
    ],
    "CATEGORY": "Complicity"
},
{
    "RELATED": [
        "Millard and Vernon",
        "Jones [1990]",
        "Mohan",
        "Griffin",
        "Shivpuri",
        "Pace and Rogers",
        "Geddes",
        "AG Ref no 1 of 1992",
        "Whybrow",
        "Walker and Hayles",
        "R v JM and SM",
        "Pembliton"
    ],
    "CITATION": "Campbell (1991) 93 Cr App R 350",
    "NAME": "Campbell",
    "CATEGORIES": [
        "Attempt",
        "Preparatory Acts"
    ],
    "HELD": [
        "The court said that everything he did was merely preparatory and he had not entered the criminal arena/venue which meant that he was not viewed as being on the job (he had not embarked on the crime proper)."
    ],
    "NUMBER": "67",
    "TYPE": "Case",
    "YEAR": "1991",
    "SUMMARY": [
        "Mr. Campbell was apprehended 1 yard outside the doors of a post office. He had an imitation fire gun, fake sunglasses, and a threatening note that was going to be handed to the counter officials. The police officers thought he looked suspicious and apprehended him"
    ],
    "CATEGORY": "Attempt &mdash; Preparatory Acts"
},
{
    "RELATED": [
        "Humphreys",
        "Baillie",
        "Dawes",
        "Pearson",
        "Ibrams",
        "Duffy",
        "R v Zebedee",
        "AG for Jersey v Holley",
        "Thornton (No. 2)",
        "Barnsdale-Quean",
        "Bedder v DPP",
        "Smith (Morgan)"
    ],
    "CITATION": "Camplin [1978] AC 705",
    "NAME": "Camplin",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation/Loss of Control"
    ],
    "HELD": [
        "Appeal allowed on misdirection of jury. In terms of power and control, you need to look at the age and sex of the person. It&#8217;s about the gravity of the provocation to that particular defendant."
    ],
    "NUMBER": "68",
    "TYPE": "Case",
    "YEAR": "1978",
    "SUMMARY": [
        "Pakistani boy was buggered against his will, so he killed the victim who had taunted him about being raped. Convicted of murder; original judge directed the jury not to take into account the age/characteristics of the victim."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation/Loss of Control"
},
{
    "RELATED": [
        "AG Ref no 1 of 1975",
        "DPP for NI v Maxwell",
        "English and Weddle",
        "Davies v DPP",
        "National Coal Board v Gamble",
        "Powell and Daniels",
        "Chan Wing Siu",
        "Greatrex",
        "Hui Chi-Ming",
        "Rodgers",
        "Anderson and Morris",
        "Rahman"
    ],
    "CITATION": "Carey [2006] EWCA Crim 17",
    "NAME": "Carey",
    "CATEGORIES": [
        "Joint Enterprise",
        "Liability"
    ],
    "HELD": [
        "whether or not the defendant was liable rested upon whether the actions of the victim could be considered dangerous. Since all the victim did was run 100 metres and she was quite young, this was not seen as being a dangerous action and therefore the defendant was not liable."
    ],
    "NUMBER": "69",
    "TYPE": "Case",
    "YEAR": "2006",
    "SUMMARY": [
        "Two rival gangs got into a fight, and it was unclear whether Carey was actually involved in hitting anyone. The victim was a young girl who fled the scene, and eventually died from a weak heart. Defendant potentially liable for her death."
    ],
    "CATEGORY": "Joint Enterprise &mdash; Liability"
},
{
    "RELATED": [
        "Gianetto",
        "Wilcox v Jeffrey",
        "Khan",
        "Coney",
        "Cogan and Leak",
        "Gillick v West Norfolk Health Authority",
        "Clarkson",
        "Bryce",
        "Calhaem",
        "Lane and Lane",
        "Callow v Tillstone",
        "Blakely and Sutton v Chief Constable of West Mercia"
    ],
    "CITATION": "Carter v Richardson [1974] Crim LR 190",
    "NAME": "Carter v Richardson",
    "CATEGORIES": [
        "Complicity"
    ],
    "HELD": [
        "liable. The instructor could have intervened but chose not to."
    ],
    "NUMBER": "70",
    "TYPE": "Case",
    "YEAR": "1974",
    "SUMMARY": [
        "The defendant was a driving instructor. He was aware that his student was intoxicated, but allowed him to drive anyway."
    ],
    "CATEGORY": "Complicity"
},
{
    "RELATED": [
        "Stringer",
        "Mahmood (Asaf)",
        "Carey",
        "Rodgers",
        "Anderson and Morris",
        "Bainbridge",
        "DPP for NI v Maxwell",
        "AG Ref no 1 of 1975",
        "Jogee",
        "Rafferty",
        "English and Weddle",
        "Stewart"
    ],
    "CITATION": "Chan Wing Siu [1985] AC 168",
    "NAME": "Chan Wing Siu",
    "CATEGORIES": [
        "Joint Enterprise"
    ],
    "HELD": [
        "liable for murder. Court: turns on contemplation or, putting the same idea in other words, authorization, which may express but is more usually implied. It meets the case of a crime foreseen as a possible incident of the common unlawful enterprise. The criminal culpability lies in participating in the venture with that foresight (Sir Cook)."
    ],
    "NUMBER": "71",
    "TYPE": "Case",
    "YEAR": "1985",
    "SUMMARY": [
        "D1 and D2 and others broke into the victim&#8217;s flat intending to steal. D1 stabbed the victim to death. D2 charged with murder."
    ],
    "CATEGORY": "Joint Enterprise"
},
{
    "RELATED": [
        "Smith",
        "Jordan",
        "Michael Kane v HM Advocate (2009) Scotland",
        "Dhaliwal",
        "Williams (1991)",
        "Kennedy (No. 2)",
        "Kennedy (No. 1)",
        "Holland",
        "Environment Agency v Empress Car Company",
        "White",
        "Latif",
        "Dyson"
    ],
    "CITATION": "Cheshire [1991] 1 WLR 844",
    "NAME": "Cheshire",
    "CATEGORIES": [
        "Elements",
        "Causation",
        "Medical Treatment"
    ],
    "HELD": [
        "Liable for the death. When your unlawful acts place someone in the hospital, it is foreseeable that the victim will get negligent treatment. In order to remove liability from the defendant, the treatment has to be so extraordinarily bad that it breaks the chain of causation (Beldam LJ)."
    ],
    "NUMBER": "72",
    "TYPE": "Case",
    "YEAR": "1991",
    "SUMMARY": [
        "The defendant shot the victim after a dispute. When the victim got to the hospital, remedial actions were carried out. The victim developed respiratory problems, although the wounds were no longer dangerous. The hospital performed a tracheotomy, which went wrong and the victim died."
    ],
    "CATEGORY": "Elements &mdash; Causation &mdash; Medical Treatment"
},
{
    "RELATED": [
        "Gemma Evans",
        "Miller",
        "AG Ref no 3 of 1994",
        "Thabo Meli",
        "Santana",
        "Mitchell",
        "Gnango",
        "AG Ref no 4 of 1980",
        "Fagan",
        "Latimer",
        "Cheshire",
        "Alphacell Ltd v Woodward"
    ],
    "CITATION": "Church [1966] 1 QB 59",
    "NAME": "Church",
    "CATEGORIES": [
        "Elements",
        "Coincidence of MR and AR"
    ],
    "HELD": [
        "liability for death of the victim based on causation theory. If the first act was unlawful with the requisite mens rea, then there is an unbroken causal linkage to the result (no intervening event) then you can establish liability"
    ],
    "NUMBER": "73",
    "TYPE": "Case",
    "YEAR": "1966",
    "SUMMARY": [
        "The defendant and his friends took the victim to a riverbank and tried to have consensual sex with her. She laughed and mocked him, so he strangled her. He thought she was dead, so he threw her into the river where she drowned."
    ],
    "CATEGORY": "Elements &mdash; Coincidence of MR and AR"
},
{
    "RELATED": [
        "Konzani",
        "Dica",
        "Wilson",
        "Jones",
        "Emmett",
        "Bollom",
        "Aitken",
        "Lewis",
        "A v United Kingdom",
        "Martin",
        "DPP v Smith (1961)",
        "Savage"
    ],
    "FLAGS": [
        "Historical"
    ],
    "CITATION": "Clarence (1888) 22 QBD 23",
    "NAME": "Clarence",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "GBH"
    ],
    "HELD": [
        "not guilty of battery because the sex was consensual. Decision overturned in <span class=\"lnk caseln\">Dica</span>."
    ],
    "NUMBER": "74",
    "TYPE": "Case",
    "YEAR": "1888",
    "SUMMARY": [
        "A wife contracted gonorrhoea after consensual sexual intercourse. Husband charged with battery."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; GBH"
},
{
    "RELATED": [
        "Bourne (1952)",
        "Wilcox v Jeffrey",
        "Khan",
        "Gillick v West Norfolk Health Authority",
        "Carter v Richardson",
        "Bryce",
        "Blakely and Sutton v Chief Constable of West Mercia",
        "Callow v Tillstone",
        "Calhaem",
        "Coney",
        "Gianetto",
        "Cogan and Leak"
    ],
    "CITATION": "Clarkson [1971] WLR 1402, 3 All ER 344",
    "NAME": "Clarkson",
    "CATEGORIES": [
        "Complicity",
        "Presence"
    ],
    "HELD": [
        "no liability for merely being presence."
    ],
    "NUMBER": "75",
    "TYPE": "Case",
    "YEAR": "1971",
    "SUMMARY": [
        "A rape took place in an army barrack. The defendant was present and while he did not take part in the attack, he also did nothing to stop it."
    ],
    "CATEGORY": "Complicity &mdash; Presence"
},
{
    "RELATED": [
        "Gladstone Williams",
        "O'Grady",
        "Lee",
        "Dadson",
        "Dudley and Stephens",
        "Martin [2002]",
        "Symonds",
        "Pommell",
        "Bourne",
        "Bell",
        "Devlin v Armstrong",
        "Kitson"
    ],
    "CITATION": "Clegg [1995] AC 482",
    "NAME": "Clegg",
    "CATEGORIES": [
        "General Defences",
        "Mistaken Belief",
        "Fact"
    ],
    "HELD": [
        "defence that the defendant was following orders was rejected. Also established that defences are &#8220;all-or-nothing&#8221; in the UK; they either work or they don&#8217;t. Defendant later released on ballistic evidence."
    ],
    "NUMBER": "76",
    "TYPE": "Case",
    "YEAR": "1995",
    "SUMMARY": [
        "Clegg was a soldier in the British army during the troubles in Northern Ireland. Was standing at a checkpoint where a car was passing by. Fired 4 bullets. The last bullet killed the backseat passenger."
    ],
    "CATEGORY": "General Defences &mdash; Mistaken Belief &mdash; Fact"
},
{
    "RELATED": [
        "O'Grady",
        "Clegg",
        "Gladstone Williams",
        "F v West Berkshire Health Authority",
        "Buckoke v GLC",
        "R v Jones (Margaret)",
        "Pommell",
        "Symonds",
        "Dadson",
        "AG Ref no 2 of 1983",
        "Martin [1989]",
        "Palmer v the Queen"
    ],
    "CITATION": "Lee [2000] EWCA Crim 53",
    "NAME": "Lee",
    "CATEGORIES": [
        "General Defences",
        "Mistaken Belief",
        "Law"
    ],
    "HELD": [
        "a genuinely-held but mistaken belief as to law will not provide a defence."
    ],
    "NUMBER": "77",
    "TYPE": "Case",
    "YEAR": "2000",
    "SUMMARY": [
        "Pulled over and breathalyzed, the defendant punched the officer trying to arrest him for drunk driving. He argued his actions were justified given his genuine belief that the officer was acting illegally in arresting"
    ],
    "CATEGORY": "General Defences &mdash; Mistaken Belief &mdash; Law"
},
{
    "RELATED": [
        "R v Jewell",
        "Dawes",
        "Camplin",
        "Baillie",
        "Doughty",
        "Golds",
        "Dietschmann",
        "Ahluwalia",
        "Tandy",
        "Byrne",
        "Bedder v DPP",
        "Wood"
    ],
    "CITATION": "Clinton (2012) EWCA Crim 2",
    "NAME": "Clinton",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation and Loss of Control",
        "Sexual Infidelity"
    ],
    "HELD": [
        "sexual infidelity alone is not a qualifying trigger for provocation, however it can be one of the reasons. Provocation should have been allowed based on the mocking for the suicide attempt, and the court said that the events leading up to the killing should not be isolated."
    ],
    "NUMBER": "78",
    "TYPE": "Case",
    "YEAR": "2012",
    "SUMMARY": [
        "Husband and wife were separated. Clinton was depressed, and saw that his wife had been dating. Her jeep was burned, she blamed him for it. When they tried to work things out, Clinton attempted to commit suicide. She mocked him and showed him photos of guys she had gone out with. Clinton then beat and strangled her, then sent photos of her body to one of the guys she went out with. Tried to plead provocation, convicted for murder and appealed."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation and Loss of Control &mdash; Sexual Infidelity"
},
{
    "RELATED": [
        "Wilcox v Jeffrey",
        "Calhaem",
        "Coney",
        "Clarkson",
        "Bryce",
        "Callow v Tillstone",
        "Carter v Richardson",
        "Blakely and Sutton v Chief Constable of West Mercia",
        "Khan",
        "Gillick v West Norfolk Health Authority",
        "Gianetto",
        "Lane and Lane"
    ],
    "CITATION": "Cogan and Leak [1976] 2 QB 217",
    "NAME": "Cogan and Leak",
    "CATEGORIES": [
        "Complicity"
    ],
    "HELD": [
        "Cogan could not be convicted of rape (marital rape had not been established), but was convicted as an accomplice to the commission of the actus reus; he was aiding and abetting a crime."
    ],
    "NUMBER": "79",
    "TYPE": "Case",
    "YEAR": "1976",
    "SUMMARY": [
        "Cogan told Leak that Leak could have sex with his wife, and said that any protest she gave was part of the game."
    ],
    "CATEGORY": "Complicity"
},
{
    "RELATED": [
        "Fagan",
        "Haystead v CC of Derbyshire",
        "DPP v K",
        "Venna",
        "Richardson",
        "Ireland",
        "Bollom",
        "Donovan",
        "Smith v Woking Police",
        "DPP v Smith",
        "Wilson",
        "Dica"
    ],
    "CITATION": "Collins v Wilcock (1984) 79 Cr App R 2",
    "NAME": "Collins v Wilcock",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Battery"
    ],
    "HELD": [
        "the lady-policeman was guilty of battery; defendant&#8217;s action was therefore self-defence and her conviction was quashed. Also established principle of \u2018implied consent&#8217; in crowded/public places: jostling, handshakes, back slapping, etc. are all examples of this implied consent provided that only reasonable force is used (Goff LJ)."
    ],
    "NUMBER": "80",
    "TYPE": "Case",
    "YEAR": "1984",
    "SUMMARY": [
        "A lady-policeman took hold of a woman&#8217;s arm to stop her walking off when she was questioning her &mdash; who lashed out and scratched her, and was charged with assaulting a police officer in the course of duty."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Battery"
},
{
    "RELATED": [
        "Callow v Tillstone",
        "Gillick v West Norfolk Health Authority",
        "Blakely and Sutton v Chief Constable of West Mercia",
        "Khan",
        "Clarkson",
        "Lane and Lane",
        "Cogan and Leak",
        "Bryce",
        "Calhaem",
        "Wilcox v Jeffrey",
        "Bourne (1952)",
        "Carter v Richardson"
    ],
    "CITATION": "Coney (1882) 8 QBD 534",
    "NAME": "Coney",
    "CATEGORIES": [
        "Complicity"
    ],
    "HELD": [
        "not guilty for merely being present, even if he did want to join in. He would have needed positive action."
    ],
    "NUMBER": "81",
    "TYPE": "Case",
    "YEAR": "1882",
    "SUMMARY": [
        "The defendant was present at a prize fight, and had a secret intent to join in if it had gone bad for his side."
    ],
    "CATEGORY": "Complicity"
},
{
    "RELATED": [
        "Smith v Woking Police",
        "Tuberville v Savage",
        "Ireland",
        "Ireland and Burstow",
        "Venna",
        "Emmett",
        "Slingsby",
        "Dica",
        "Wilson",
        "A v United Kingdom",
        "Richardson",
        "Collins v Wilcock"
    ],
    "CITATION": "Constanza [1997] 2 Cr App R 492",
    "NAME": "Constanza",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Assault"
    ],
    "HELD": [
        "there can be an apprehension of violence that extends over a period of time provided that there is the risk of violence in the immediate future."
    ],
    "NUMBER": "82",
    "TYPE": "Case",
    "YEAR": "1997",
    "SUMMARY": [
        "The defendant bombarded the victim with unsolicited letters and phone calls, and followed her around for about 2 years. Convicted of assault."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Assault"
},
{
    "RELATED": [
        "Heard",
        "R v H",
        "Olugboja",
        "Elbekkay",
        "Bowler",
        "Devonald",
        "Kaitamaki v the Queen",
        "Morgan v DPP",
        "R (F) v DPP and A",
        "R v B",
        "R v B (2013)",
        "Bree"
    ],
    "CITATION": "Court [1989] AC 28",
    "NAME": "Court",
    "CATEGORIES": [
        "Sexual Offences",
        "Indecent Assault"
    ],
    "HELD": [
        "guilty. Where facts show that an act may be either indecent or not indecent, the prosecution must prove not only that the accused intentionally assaulted the victim, but that in doing so, he intended to commit an assault which right-minded persons would think was indecent."
    ],
    "NUMBER": "83",
    "TYPE": "Case",
    "YEAR": "1989",
    "SUMMARY": [
        "A shop attendant spanked a 12-y.o. girl over her shorts, and later admitted that he had a buttock fetish. Charged with indecent assault."
    ],
    "CATEGORY": "Sexual Offences &mdash; Indecent Assault"
},
{
    "RELATED": [
        "Malcolm",
        "Elliott v C (a minor)",
        "Caldwell",
        "Gemmell and Richardson",
        "Hancock and Shankland",
        "Westminster City Council v Croyalgrange Ltd",
        "Gibbins and Proctor",
        "Moloney",
        "Kingston",
        "Hyam v DPP",
        "Nedrick",
        "Instan"
    ],
    "CITATION": "Cunningham [1957] 2 QB 396",
    "NAME": "Cunningham",
    "CATEGORIES": [
        "Elements",
        "Mens Rea",
        "Recklessness"
    ],
    "HELD": [
        "not guilty. In order to be liable, your mind needs to turn to the possibility of harm occurring. It never crossed Cunningham&#8217;s mind that he might cause harm to another person. Current leading test."
    ],
    "NUMBER": "84",
    "TYPE": "Case",
    "YEAR": "1957",
    "SUMMARY": [
        "Cunningham ripped his gas meter off the wall. The gas seeped through the cellar wall and his mother in law was partially asphyxiated by the noxious fumes (she survived. Charged with administration of a noxious substance."
    ],
    "CATEGORY": "Elements &mdash; Mens Rea &mdash; Recklessness"
},
{
    "RELATED": [
        "R v Jones (Margaret)",
        "Kitson",
        "Devlin v Armstrong",
        "AG Ref no 2 of 1983",
        "Buckoke v GLC",
        "Palmer v the Queen",
        "Gladstone Williams",
        "Martin [1989]",
        "Clegg",
        "Bourne",
        "Bird",
        "Symonds"
    ],
    "CITATION": "Dadson (1850) 169 ER 407",
    "NAME": "Dadson",
    "CATEGORIES": [
        "General Defences",
        "Justification",
        "Unknown"
    ],
    "HELD": [
        "the office was still found guilty because you cannot rely on an exemption to form an unknown justification. However, there is academic disagreement over the decision in this case."
    ],
    "NUMBER": "85",
    "TYPE": "Case",
    "YEAR": "1850",
    "SUMMARY": [
        "Dadson was stealing wood, and the police shot him in the leg as he was trying to escape. The officer was charged with shooting with the intention to cause GBH. However, a different act that provided that it would have been justified if Dadson was an escaping felon (which he was). However, the police officer did not know this at the time."
    ],
    "CATEGORY": "General Defences &mdash; Justification &mdash; Unknown"
},
{
    "RELATED": [
        "Pagett",
        "Jackson",
        "Stone and Dobinson",
        "Barnard",
        "Hasan",
        "Rafferty",
        "Latimer",
        "Adomako",
        "Dytham",
        "Calhaem",
        "Clinton",
        "AG Ref no 4 of 1980"
    ],
    "CITATION": "Dalloway (1847) 2 Cox CC 273",
    "NAME": "Dalloway",
    "CATEGORIES": [
        "Criminal Liability"
    ],
    "HELD": [
        "not liable for the death even though he had been driving dangerously; even if he had been driving perfectly there was no way he could have stopped in time to avoid the child."
    ],
    "NUMBER": "86",
    "TYPE": "Case",
    "YEAR": "1847",
    "SUMMARY": [
        "The defendant was in the street and he didn&#8217;t have his hands on the reins while he was driving his cart. He hit and killed a child."
    ],
    "CATEGORY": "Criminal Liability"
},
{
    "RELATED": [
        "Fagan",
        "Pittwood",
        "People v Beardsley",
        "Le Brun",
        "Santana",
        "Stone and Dobinson",
        "Instan",
        "Smith (1975)",
        "Gemma Evans",
        "Dytham",
        "Airedale NHS Trust v Bland",
        "Miller"
    ],
    "CITATION": "Deller (1952) 36 Cr App Rep 184",
    "NAME": "Deller",
    "CATEGORIES": [
        "Elements",
        "Actus Reus"
    ],
    "HELD": [
        "although the defendant had the mens rea for the crime (fraud by false representation), he could not be found guilty because no crime was actually committed. Even if someone has fault for a crime, if they don&#8217;t bring about the conduct of the crime, then they will not be guilty"
    ],
    "NUMBER": "87",
    "TYPE": "Case",
    "YEAR": "1952",
    "SUMMARY": [
        "The defendant induced the victim to purchase his car. He told the purchaser that he was free to sell his car, and although he believed was a lie (he believed there was a lease on the car, but the paperwork was invalid), he was actually free to sell it."
    ],
    "CATEGORY": "Elements &mdash; Actus Reus"
},
{
    "RELATED": [
        "Greatrex",
        "English and Weddle",
        "Stewart",
        "Rafferty",
        "Bainbridge",
        "Roberts [1993]",
        "Hui Chi-Ming",
        "Stringer",
        "Anderson and Morris",
        "Powell and Daniels",
        "AG Ref no 1 of 1975",
        "Carey"
    ],
    "CITATION": "Davies v DPP [1954] AC 378",
    "NAME": "Davies v DPP",
    "CATEGORIES": [
        "Joint Enterprise"
    ],
    "HELD": [
        "this action was outside the original plan and the other perpetrators were not liable for murder."
    ],
    "NUMBER": "88",
    "TYPE": "Case",
    "YEAR": "1954",
    "SUMMARY": [
        "Fight with a rival gang. One of the defendants brought brass knuckles (unknown to the others) and killed the victim."
    ],
    "CATEGORY": "Joint Enterprise"
},
{
    "RELATED": [
        "R v Jewell",
        "Camplin",
        "Baillie",
        "Smith (Morgan)",
        "Pearson",
        "Bedder v DPP",
        "Duffy",
        "Ahluwalia",
        "Barnsdale-Quean",
        "R v Zebedee",
        "Thornton (No. 2)",
        "Ibrams"
    ],
    "CITATION": "Dawes (2013) EWCA Crim 322",
    "NAME": "Dawes",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation/Loss of Control"
    ],
    "HELD": [
        "Appeal rejected. There was insufficient evidence to support loss of control."
    ],
    "NUMBER": "89",
    "TYPE": "Case",
    "YEAR": "2013",
    "SUMMARY": [
        "Dawes went to his estranged wife&#8217;s house and found her with another man. Dawes killed the man, and tried to claim self-defence but was rejected. Judge held that loss of control could not be put to the jury because he incited the violence. Convicted of murder and appealed."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation/Loss of Control"
},
{
    "RELATED": [
        "Dear",
        "Airedale NHS Trust v Bland",
        "R v JM and SM",
        "AG Ref no 4 of 1980",
        "Watson",
        "White",
        "Gemma Evans",
        "Uddin",
        "Davies v DPP",
        "Jogee",
        "Wacker",
        "Elliott v C (a minor)"
    ],
    "CITATION": "Dawson (1985) 81 Cr App R 150",
    "NAME": "Dawson",
    "CATEGORIES": [
        "Manslaughter"
    ],
    "HELD": [
        "was not sufficient to see the victim having emotional distress to be liable for manslaughter; will only suffice if the distress goes beyond a normal level and causes the level of harm that would indicate a heart attack"
    ],
    "NUMBER": "90",
    "TYPE": "Case",
    "YEAR": "1985",
    "SUMMARY": [
        "The defendant took part in a robbery from a petrol station. After the robbery, the clerk died from a heart attack."
    ],
    "CATEGORY": "Manslaughter"
},
{
    "RELATED": [
        "AG Ref no 4 of 1980",
        "Bedder v DPP",
        "Dawson",
        "Humphreys",
        "Nedrick",
        "Thornton (No. 2)",
        "Ibrams",
        "R v Jewell",
        "Baillie",
        "Clinton",
        "Walker and Hayles",
        "Byrne"
    ],
    "CITATION": "Dear [1996] Crim LR 595",
    "NAME": "Dear",
    "CATEGORIES": [
        "Murder",
        "Manslaughter"
    ],
    "HELD": [
        "liable for the death. Rose, LJ: We should not look to whether the victim treated himself with negligence or neglect, we should ask whether the initial wounds were, and remained, a significant/operative cause of death."
    ],
    "NUMBER": "91",
    "TYPE": "Case",
    "YEAR": "1996",
    "SUMMARY": [
        "Dear was charged with the murder of the victim. It was alleged that the victim had committed an assault on Dear&#8217;s 12 y.o. daughter. Dear stabbed the victim, who died after reopening his wounds or allowing them to bleed out."
    ],
    "CATEGORY": "Murder / Manslaughter"
},
{
    "RELATED": [
        "Bird",
        "Palmer v the Queen",
        "Symonds",
        "AG Ref no 2 of 1983",
        "Martin [2002]",
        "Gladstone Williams",
        "O'Grady",
        "Buckoke v GLC",
        "Kitson",
        "Martin [1989]",
        "Lee",
        "Dudley and Stephens"
    ],
    "CITATION": "Devlin v Armstrong [1971] NI 13",
    "NAME": "Devlin v Armstrong",
    "CATEGORIES": [
        "General Defences",
        "Self-Defence"
    ],
    "HELD": [
        "The plea of self-defence may afford a defence when used if the defendant honestly and reasonably believed in the threat of attack, so long as the threat of attack is imminent"
    ],
    "NUMBER": "92",
    "TYPE": "Case",
    "YEAR": "1971",
    "SUMMARY": [
        "The defendant was convicted of riotous behaviour and incitement because they threw a stone at a police officer. The defendant said they only threw it because they believed that there was an imminent threat that the officer would behave illegally."
    ],
    "CATEGORY": "General Defences &mdash; Self-Defence"
},
{
    "RELATED": [
        "Bowler",
        "Morgan v DPP",
        "Bree",
        "Elbekkay",
        "McNally",
        "Linekar",
        "R (F) v DPP and A",
        "Olugboja",
        "R v B",
        "Kaitamaki v the Queen",
        "R v B (2013)",
        "Williams"
    ],
    "CITATION": "Devonald [2008] EWCA Crim 527",
    "NAME": "Devonald",
    "CATEGORIES": [
        "Sexual Offences",
        "Rape"
    ],
    "HELD": [
        "conclusive presumption, no consent. The victim was deceived as to the purpose of the video."
    ],
    "NUMBER": "93",
    "TYPE": "Case",
    "YEAR": "2008",
    "SUMMARY": [
        "A father was upset that his daughter had been dumped by the victim. He pretended to be a 20-y.o. girl online and convinced the victim to masturbate on the webcam, then posted the video online."
    ],
    "CATEGORY": "Sexual Offences &mdash; Rape"
},
{
    "RELATED": [
        "Sweet v Parsley",
        "Barnfather",
        "Matudi",
        "Alphacell Ltd v Woodward",
        "Jackson",
        "R v G",
        "K",
        "Gammon (Hong Kong) Ltd v A-G of Hong Kong",
        "B (a minor) v DPP",
        "Prince",
        "Kennedy (No. 2)",
        "Elliott v C (a minor)"
    ],
    "CITATION": "Deyemi and Another [2007] EWCA Crim 2060",
    "NAME": "Deyemi and Another",
    "CATEGORIES": [
        "Elements",
        "Strict Liability"
    ],
    "HELD": [
        "liable for breach of section 5 of the Fire Arms Act 1968. Possession of a weapon is a strict liability issue; prosecution only needs to prove actual possession as a matter of public policy."
    ],
    "NUMBER": "94",
    "TYPE": "Case",
    "YEAR": "2007",
    "SUMMARY": [
        "The defendant was in a shopping centre with a stun gun. The defendant thought that it was a flashlight, not a stun gun."
    ],
    "CATEGORY": "Elements &mdash; Strict Liability"
},
{
    "RELATED": [
        "White",
        "Environment Agency v Empress Car Company",
        "Cheshire",
        "Blaue",
        "Michael Kane v HM Advocate (2009) Scotland",
        "Jordan",
        "Smith",
        "Latif",
        "Kennedy (No. 1)",
        "Roberts",
        "Dyson",
        "Williams (1991)"
    ],
    "CITATION": "Dhaliwal [2006] 2 Cr App R 24",
    "NAME": "Dhaliwal",
    "CATEGORIES": [
        "Elements",
        "Causation",
        "Unlawful Act Manslaughter"
    ],
    "HELD": [
        "even where the victim takes their own life, the abuse may not causally break the chain of causation for unlawful act manslaughter; potentially labelling the actions of the defendant as a cause for the unlawful death. Has not been applied in any other case. Four elements of unlawful act manslaughter: actus reus and mens rea for unlawful act, the unlawful act must be dangerous, the unlawful act must be volitional and intentional by the defendant, the unlawful act must cause the death of the victim without novus actus interveniens."
    ],
    "NUMBER": "95",
    "TYPE": "Case",
    "YEAR": "2006",
    "SUMMARY": [
        "The victim was in an abusive marriage for a long time, which led to her decision to commit suicide. A few hours before this decision, her husband had hit her, there had been a delay, and then she took her own life. Could the husband be liable for her death based on cumulated abuse?"
    ],
    "CATEGORY": "Elements &mdash; Causation / Unlawful Act Manslaughter"
},
{
    "RELATED": [
        "Michael Kane v HM Advocate (2009) Scotland",
        "Kennedy (No. 2)",
        "Kennedy (No. 1)",
        "Hughes",
        "Blaue",
        "Latif",
        "Environment Agency v Empress Car Company",
        "White",
        "Dyson",
        "Smith",
        "Dhaliwal",
        "Williams (1991)"
    ],
    "CITATION": "Dias [2002] Cr App R 5",
    "NAME": "Dias",
    "CATEGORIES": [
        "Elements",
        "Causation",
        "Drug Administration"
    ],
    "HELD": [
        "not liable for manslaughter. Contradicts the decision in Kennedy No. 1. Possession of heroin is illegal, but there was no direct causation since the victim injected himself."
    ],
    "NUMBER": "96",
    "TYPE": "Case",
    "YEAR": "2002",
    "SUMMARY": [
        "Dias and the victim were both drug addicts. Dias prepared a syringe and gave it to the victim, who died. Dias was charged with manslaughter."
    ],
    "CATEGORY": "Elements &mdash; Causation &mdash; Drug Administration"
},
{
    "RELATED": [
        "Jones",
        "Aitken",
        "Tabassum",
        "Wilson",
        "Jheeta",
        "Morgan v DPP",
        "Clarence",
        "Savage",
        "Emmett",
        "Brown",
        "Slingsby",
        "Barnes"
    ],
    "CITATION": "Dica [2004] 2 All ER 593",
    "NAME": "Dica",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Consent",
        "Non-Fatal Offences",
        "GBH"
    ],
    "HELD": [
        "Overturns decision in Clarence. People suffering from serious STDs who recklessly transmit them through intercourse inflict GBH will be liable under s. 20."
    ],
    "NUMBER": "97",
    "TYPE": "Case",
    "YEAR": "2004",
    "SUMMARY": [
        "The defendant was diagnosed as being HIV positive, but knowingly had unprotected intercourse with two women. He claimed that both the women were aware of his condition and had consented to the risk. The women disputed this knowledge. Charged with infliction of GBH, convicted, appealed."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Consent / Non-Fatal Offences &mdash; GBH"
},
{
    "RELATED": [
        "Ahluwalia",
        "Golds",
        "Wood",
        "Dowds",
        "Byrne",
        "Tandy",
        "Clinton",
        "Bedder v DPP",
        "Smith (Morgan)",
        "Doughty",
        "Humphreys",
        "AG for Jersey v Holley"
    ],
    "CITATION": "Dietschmann [2003] 1 AC 1209",
    "NAME": "Dietschmann",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Diminished Responsibility"
    ],
    "HELD": [
        "Changed to manslaughter. Court: We should stay focused on the mental abnormality, not the intoxication. The diminished responsibility relies on his depression."
    ],
    "NUMBER": "98",
    "TYPE": "Case",
    "YEAR": "2003",
    "SUMMARY": [
        "The defendant was a depressed alcoholic who beat the victim to death in a rage. Convicted for murder, appealed."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Diminished Responsibility"
},
{
    "RELATED": [
        "Asmelash",
        "Golds",
        "Duffy",
        "Wood",
        "AG for Jersey v Holley",
        "Dawes",
        "Bedder v DPP",
        "Smith (Morgan)",
        "Clinton",
        "Dowds",
        "Byrne",
        "Dietschmann"
    ],
    "CITATION": "Doughty (1986) 83 Cr App R 319",
    "NAME": "Doughty",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Loss of Control"
    ],
    "HELD": [
        "the judge should have let the jury decide whether or not the defendant lost control."
    ],
    "NUMBER": "99",
    "TYPE": "Case",
    "YEAR": "1986",
    "SUMMARY": [
        "Parents strangled a crying baby. Convicted of murder, and appealed claiming loss of control."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Loss of Control"
},
{
    "RELATED": [
        "Golds",
        "Tandy",
        "Wood",
        "Dietschmann",
        "Byrne",
        "Ahluwalia",
        "Ibrams",
        "Thornton (No. 2)",
        "Humphreys",
        "Pearson",
        "Doughty",
        "Barnsdale-Quean"
    ],
    "CITATION": "Dowds (2013) EWCA Crim 281",
    "NAME": "Dowds",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Diminished Responsibility",
        "Intoxication"
    ],
    "HELD": [
        "Voluntary and temporary drunkenness is not adequate for defence of diminished responsibility. Also, principle: just because something is listed as a medical condition, it does not make it relevant to the defence."
    ],
    "NUMBER": "100",
    "TYPE": "Case",
    "YEAR": "2013",
    "SUMMARY": [
        "Dowds was a college lecturer who used to binge drink with his partner. After drinking heavily one weekend, he stabbed his partner 60 times. Attempted defence of diminished responsibility because acute intoxication is a medically recognised condition (disease). Convicted of murder, appealed."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Diminished Responsibility &mdash; Intoxication"
},
{
    "RELATED": [
        "Haystead v CC of Derbyshire",
        "Collins v Wilcock",
        "Fagan",
        "Richardson",
        "Venna",
        "Clarence",
        "A v United Kingdom",
        "Konzani",
        "DPP v Smith",
        "Brown",
        "Tuberville v Savage",
        "Emmett"
    ],
    "CITATION": "DPP v K (1990) 91 Cr App R 23",
    "NAME": "DPP v K",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Battery"
    ],
    "HELD": [
        "defendant was guilty for battery for indirectly causing the harm."
    ],
    "NUMBER": "101",
    "TYPE": "Case",
    "YEAR": "1990",
    "SUMMARY": [
        "The defendant took some sulfuric acid from a chemistry lab and hid it in a hand dryer with the intention to retrieve it later. Before he could get it, another boy used the hand dryer and was permanently scarred."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Battery"
},
{
    "RELATED": [
        "Rodgers",
        "National Coal Board v Gamble",
        "Jogee",
        "Bainbridge",
        "Stewart",
        "Rafferty",
        "Stringer",
        "Mahmood (Asaf)",
        "Hui Chi-Ming",
        "Uddin",
        "Anderson and Morris",
        "Roberts [1993]"
    ],
    "CITATION": "DPP for NI v Maxwell [1978] WLR 1350, 3 All ER 1140",
    "NAME": "DPP for NI v Maxwell",
    "CATEGORIES": [
        "Joint Enterprise",
        "Secondary Liability"
    ],
    "HELD": [
        "liable. Maxwell knew that the passengers were considering committing one of a series of crimes. Any crimes that the perpetrators could possibly commit could be linked to D2 if he knew about/were involved in any of them."
    ],
    "NUMBER": "102",
    "TYPE": "Case",
    "YEAR": "1978",
    "SUMMARY": [
        "The defendant was a driver who drove a group of terrorists to plant a bomb in a public house."
    ],
    "CATEGORY": "Joint Enterprise &mdash; Secondary Liability"
},
{
    "RELATED": [
        "Shaw v DPP",
        "Elbekkay",
        "Gammon (Hong Kong) Ltd v A-G of Hong Kong",
        "Dawes",
        "Doughty",
        "Ireland and Burstow",
        "Palmer v the Queen",
        "Dyson",
        "Lane and Lane",
        "Donovan",
        "Byrne",
        "R v S"
    ],
    "CITATION": "DPP v Pal [2000] Crim LR 756",
    "NAME": "DPP v Pal",
    "CATEGORIES": [
        "Racially or Religiously Motivated Offences"
    ],
    "HELD": [
        "not a racially motivated crime because the slurs were directed specifically at the victim, not against all Asians. Principles: where there is a nonfatal crime with a racial/religious motivation behind it, there is potentially a more severe punishment. Courts have adopted a narrow meaning of what is racially motivated."
    ],
    "NUMBER": "103",
    "TYPE": "Case",
    "YEAR": "2000",
    "SUMMARY": [
        "The defendant screamed racial slurs at the victim, an Asian caretaker."
    ],
    "CATEGORY": "Racially or Religiously Motivated Offences"
},
{
    "RELATED": [
        "Donovan",
        "R (on the Application of T) v DPP",
        "A v United Kingdom",
        "Konzani",
        "Barnes",
        "Jones",
        "Tuberville v Savage",
        "Fagan",
        "Martin",
        "Dica",
        "DPP v K",
        "Smith v Woking Police"
    ],
    "CITATION": "DPP v Smith [2006] EWHC 94, [2006] 1 WLR 1571",
    "NAME": "DPP v Smith",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "ABH"
    ],
    "HELD": [
        "hair was part of a person and their identity, and it was ruled a battery."
    ],
    "NUMBER": "104",
    "TYPE": "Case",
    "YEAR": "2006",
    "SUMMARY": [
        "The defendant was upset because he had been ditched by his girlfriend. She invited him to sleep over at their apartment one more time. Whilst she was asleep, he went into her bedroom and cut off her ponytail. On appeal, the defendant argued that hair above the surface of the skin was dead tissue, and was therefore not part of a person"
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; ABH"
},
{
    "RELATED": [
        "Smith (Morgan)",
        "Ahluwalia",
        "R v Jewell",
        "Thornton (No. 2)",
        "Baillie",
        "Barnsdale-Quean",
        "Ibrams",
        "Camplin",
        "Humphreys",
        "Bedder v DPP",
        "AG for Jersey v Holley",
        "R v Zebedee"
    ],
    "CITATION": "Duffy [1949] 1 All ER 932",
    "NAME": "Duffy",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation/Loss of Control"
    ],
    "HELD": [
        "liable because loss of control was not sudden/temporary. Test for loss of control (Justice Devlin): At the time of the fatal action, the defendant had to have lost control through a sudden and temporary passion. Difference between men and women are treated: believed that men had sudden, temporary reactions where women were more of a &#8220;slow burn.&#8221;"
    ],
    "NUMBER": "105",
    "TYPE": "Case",
    "YEAR": "1949",
    "SUMMARY": [
        "Duffy attacked and killed her husband with a hammer and hatchet whilst he was sleeping in bed. He had subjected her to violence throughout their marriage."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation/Loss of Control"
},
{
    "RELATED": [
        "F v West Berkshire Health Authority",
        "Buckoke v GLC",
        "Bourne",
        "Kitson",
        "Martin [2002]",
        "Dadson",
        "Pommell",
        "Devlin v Armstrong",
        "Symonds",
        "O'Grady",
        "AG Ref no 2 of 1983",
        "Martin [1989]"
    ],
    "CITATION": "Dudley and Stephens (1884) 14 QBD 273",
    "NAME": "Dudley and Stephens",
    "CATEGORIES": [
        "General Defences",
        "Necessity"
    ],
    "HELD": [
        "necessity is not a defence to murder."
    ],
    "NUMBER": "106",
    "TYPE": "Case",
    "YEAR": "1884",
    "SUMMARY": [
        "The defendants were cast adrift at sea for 20 days. They killed the cabin boy to sustain themselves. They saw it as justified because they did it to save themselves."
    ],
    "CATEGORY": "General Defences &mdash; Necessity"
},
{
    "RELATED": [
        "Environment Agency v Empress Car Company",
        "Hughes",
        "Kennedy (No. 2)",
        "Cheshire",
        "Michael Kane v HM Advocate (2009) Scotland",
        "Smith",
        "White",
        "Jordan",
        "Latif",
        "Roberts",
        "Williams (1991)",
        "Dhaliwal"
    ],
    "CITATION": "Dyson [1908] 2 KB 454",
    "NAME": "Dyson",
    "CATEGORIES": [
        "Elements",
        "Causation"
    ],
    "HELD": [
        "accelerating death is enough for the law to consider someone as causing death"
    ],
    "NUMBER": "107",
    "TYPE": "Case",
    "YEAR": "1908",
    "SUMMARY": [
        "A child&#8217;s certain and imminent death due to meningitis was accelerated by the child&#8217;s father&#8217;s infliction of serious injuries."
    ],
    "CATEGORY": "Elements &mdash; Causation"
},
{
    "RELATED": [
        "Airedale NHS Trust v Bland",
        "Gemma Evans",
        "Stone and Dobinson",
        "People v Beardsley",
        "Smith (1975)",
        "Pittwood",
        "Santana",
        "Instan",
        "Fagan",
        "Miller",
        "Gibbins and Proctor",
        "Le Brun"
    ],
    "CITATION": "Dytham [1979] QB 722",
    "NAME": "Dytham",
    "CATEGORIES": [
        "Elements",
        "Actus Reus",
        "Omissions",
        "6. Public Office"
    ],
    "HELD": [
        "Omitting to act may be sufficient actus reus, should a defendant have been under a duty to act by virtue of holding a public office."
    ],
    "NUMBER": "108",
    "TYPE": "Case",
    "YEAR": "1979",
    "SUMMARY": [
        "A police officer walked on by as a bouncer kicked a man to death outside of a night club. He didn&#8217;t intervene as he wanted to get home. Charged with misconduct, he argued that for that, there would have to be conduct &mdash; and that entailed <span class=\"it\">actions</span>, not omissions."
    ],
    "CATEGORY": "Elements &mdash; Actus Reus &mdash; Omissions &mdash; 6. Public Office"
},
{
    "RELATED": [
        "Barnard",
        "Walker",
        "Adomako",
        "R v B (2013)",
        "Shivpuri",
        "Blakely and Sutton v Chief Constable of West Mercia",
        "Anderson and Morris",
        "Baillie",
        "Walker and Hayles",
        "Gammon (Hong Kong) Ltd v A-G of Hong Kong",
        "Hasan",
        "K"
    ],
    "CITATION": "El Ghazal [1986] Crim LR 52",
    "NAME": "El Ghazal",
    "CATEGORIES": [
        "Conspiracy"
    ],
    "HELD": [
        "The conspiracy is reached<span class=\"it\"> </span>as soon as the agreement occurs between the parties. If at that point, someone decides to abandon the plan that is irrelevant. You have the complete crime when you have agreement."
    ],
    "NUMBER": "109",
    "TYPE": "Case",
    "YEAR": "1986",
    "SUMMARY": [
        "Charged with conspiracy to possess cocaine."
    ],
    "CATEGORY": "Conspiracy"
},
{
    "RELATED": [
        "Devonald",
        "Kaitamaki v the Queen",
        "Morgan v DPP",
        "Williams",
        "Olugboja",
        "R (F) v DPP and A",
        "Bowler",
        "R v B",
        "Linekar",
        "McNally",
        "R v B (2013)",
        "Bree"
    ],
    "CITATION": "Elbekkay [1995] Crim LR 163",
    "NAME": "Elbekkay",
    "CATEGORIES": [
        "Sexual Offences",
        "Rape"
    ],
    "HELD": [
        "no consent. The restriction to deception of identity was not limited to spouses, but to partners as well. Also, in order for the deception of identity to vitiate consent, the complainant has to believe that the defendant is someone they know (ex. If the defendant says they are a celebrity when they aren&#8217;t, consent is still valid)."
    ],
    "NUMBER": "110",
    "TYPE": "Case",
    "YEAR": "1995",
    "SUMMARY": [
        "The complainant lived with her boyfriend. One night after a party, the defendant touched her and initiated sexual intercourse. Believing it was her boyfriend, the complainant consented."
    ],
    "CATEGORY": "Sexual Offences &mdash; Rape"
},
{
    "RELATED": [
        "Cunningham",
        "Gemmell and Richardson",
        "Caldwell",
        "Malcolm",
        "Kingston",
        "Nedrick",
        "Moloney",
        "Hyam v DPP",
        "Gibbins and Proctor",
        "Westminster City Council v Croyalgrange Ltd",
        "Hancock and Shankland",
        "Latif"
    ],
    "CITATION": "Elliott v C (a minor) [1983] C 510",
    "NAME": "Elliott v C (a minor)",
    "CATEGORIES": [
        "Elements",
        "Mens Rea",
        "Recklessness"
    ],
    "HELD": [
        "she was still liable under Caldwell recklessness: she was judged against the objective standard of a reasonable adult."
    ],
    "NUMBER": "111",
    "TYPE": "Case",
    "YEAR": "1983",
    "SUMMARY": [
        "A young girl got lost at night, got into a garden shed, and set it on fire. The court held that she could not have known the risk of damage to the shed."
    ],
    "CATEGORY": "Elements &mdash; Mens Rea &mdash; Recklessness"
},
{
    "RELATED": [
        "Clarence",
        "Golding",
        "Aitken",
        "Wilson",
        "A v United Kingdom",
        "Konzani",
        "Savage",
        "Dica",
        "Jones",
        "Bollom",
        "DPP v Smith (1961)",
        "Lewis"
    ],
    "CITATION": "Emmett [1999] EWCA Crim 1710",
    "NAME": "Emmett",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "GBH"
    ],
    "HELD": [
        "guilty of causing GBH. Went &#8220;far beyond&#8221; Wilson. Court said that someone could not consent to the level of harm in this case. Line-drawing exercise in terms of personal autonomy and consent."
    ],
    "NUMBER": "112",
    "TYPE": "Case",
    "YEAR": "1999",
    "SUMMARY": [
        "The defendant and the victim were involved in a sado-masochistic relationship. The defendant poured lighter fluid on the victim&#8217;s breasts and set it on fire."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; GBH"
},
{
    "RELATED": [
        "AG Ref no 1 of 1975",
        "Greatrex",
        "Rafferty",
        "Anderson and Morris",
        "Rahman",
        "Bainbridge",
        "DPP for NI v Maxwell",
        "Rodgers",
        "Stringer",
        "Stewart",
        "Hui Chi-Ming",
        "Jogee"
    ],
    "CITATION": "English and Weddle [1999] AC 1",
    "NAME": "English and Weddle",
    "CATEGORIES": [
        "Joint Enterprise"
    ],
    "HELD": [
        "even though the defendant did not know that the principal had a knife, he was still liable for the actions of the principal as part of the joint enterprise."
    ],
    "NUMBER": "113",
    "TYPE": "Case",
    "YEAR": "1999",
    "SUMMARY": [
        "The original plan was to beat a police officer with a wooden post. The officer was stabbed with a knife."
    ],
    "CATEGORY": "Joint Enterprise"
},
{
    "RELATED": [
        "Roberts",
        "Jordan",
        "Cheshire",
        "Kennedy (No. 1)",
        "Holland",
        "Latif",
        "Dhaliwal",
        "Smith",
        "Hughes",
        "Michael Kane v HM Advocate (2009) Scotland",
        "Blaue",
        "Dyson"
    ],
    "CITATION": "Environment Agency v Empress Car Company (1999)",
    "NAME": "Environment Agency v Empress Car Company",
    "CATEGORIES": [
        "Elements",
        "Causation"
    ],
    "HELD": [
        "the company was liable because there was a constant risk of oil being spilled (the seal on the tank was inadequate). The vandalism that caused the crime was reasonably foreseeable, therefore the company had a responsibility to protect others from causing harm. Contradicts Latif."
    ],
    "NUMBER": "114",
    "TYPE": "Case",
    "YEAR": "1999",
    "SUMMARY": [
        "Empress had a diesel tank with a seal around it. An unknown saboteur entered the yard and allowed the oil to pollute a river and the company was charged for causing the pollution."
    ],
    "CATEGORY": "Elements &mdash; Causation"
},
{
    "RELATED": [
        "Fagan",
        "Instan",
        "Miller",
        "Santana",
        "Smith (1975)",
        "Gibbins and Proctor",
        "Dytham",
        "Airedale NHS Trust v Bland",
        "Pittwood",
        "People v Beardsley",
        "Stone and Dobinson",
        "Church"
    ],
    "CITATION": "Gemma Evans [2009] Crim LR 661",
    "NAME": "Gemma Evans",
    "CATEGORIES": [
        "Elements",
        "Actus Reus",
        "Omissions",
        "2. Family Duty",
        "Elements",
        "Coincidence of MR and AR",
        "Supervening Fault",
        "Gross Negligence Manslaughter"
    ],
    "HELD": [
        "Liable for Gross Negligence Manslaughter as had supplied heroin for her sister, there by created, and not acted to resolve, a dangerous situation. The question of whether a duty of care in GNM is of law, therefore for the judge, not the jury."
    ],
    "NUMBER": "115",
    "TYPE": "Case",
    "YEAR": "2009",
    "SUMMARY": [
        "Gemma was a drug addict, as was her family. Her younger half-sister Carly lived with her and her mother. Evans supplied Carly with heroin. Carly had then voluntarily taken the drugs. Evans and her mother were in the house, and realised that Carly was showing signs of OD. Although they took care of her, they did not seek professional help because they did not want to get in trouble, and Carly died. Evans and her mother were convicted of gross negligent manslaughter and appealed."
    ],
    "CATEGORY": "Elements &mdash; Actus Reus &mdash; Omissions &mdash; 2. Family Duty / Elements &mdash; Coincidence of MR and AR &mdash; Supervening Fault / Gross Negligence Manslaughter"
},
{
    "RELATED": [
        "Buckoke v GLC",
        "Kitson",
        "Dudley and Stephens",
        "Bourne",
        "Pommell",
        "Bell",
        "Dadson",
        "Symonds",
        "O'Grady",
        "Martin [2002]",
        "Gladstone Williams",
        "Devlin v Armstrong"
    ],
    "CITATION": "F v West Berkshire Health Authority [1990] 2 AC 1",
    "NAME": "F v West Berkshire Health Authority",
    "CATEGORIES": [
        "General Defences",
        "Necessity",
        "Medical Issues"
    ],
    "HELD": [
        "the operation would be lawful if the doctor considered it to be in the best interests of the patient."
    ],
    "NUMBER": "116",
    "TYPE": "Case",
    "YEAR": "1990",
    "SUMMARY": [
        "Forced sterilisation of a woman who, through mental capacity, could not give her consent."
    ],
    "CATEGORY": "General Defences &mdash; Necessity &mdash; Medical Issues"
},
{
    "RELATED": [
        "Santana",
        "Miller",
        "Gemma Evans",
        "Stone and Dobinson",
        "Dytham",
        "Smith (1975)",
        "People v Beardsley",
        "Instan",
        "Airedale NHS Trust v Bland",
        "Pittwood",
        "AG Ref no 3 of 1994",
        "Latimer"
    ],
    "CITATION": "Fagan v MPC [1969] 1 QB 439",
    "NAME": "Fagan",
    "CATEGORIES": [
        "Elements",
        "Coincidence of MR and AR",
        "Continuing Act",
        "Elements",
        "Actus Reus",
        "Omissions",
        "3. Voluntary Assumption",
        "Non-Fatal Offences",
        "Battery"
    ],
    "HELD": [
        "Although the mens rea created actus reus first part of the crime was accidental, the court held there was liability because Fagan then did not rectify the situation and the court interpreted the incident as one continuing act. His omission made him criminally liable. Court sets out elements of battery: intentionally or recklessly inflicting harm on another"
    ],
    "NUMBER": "117",
    "TYPE": "Case",
    "YEAR": "1969",
    "SUMMARY": [
        "Fagan accidentally parked his car on the foot of a police officer, and then left it there to spite the officer, even after the officer asked him to move."
    ],
    "CATEGORY": "Elements &mdash; Coincidence of MR and AR &mdash; Continuing Act / Elements &mdash; Actus Reus &mdash; Omissions &mdash; 3. Voluntary Assumption / Non-Fatal Offences &mdash; Battery"
},
{
    "RELATED": [
        "Sharp",
        "Stewart",
        "Symonds",
        "Greatrex",
        "Fagan",
        "Barnard",
        "Lewis",
        "Clarkson",
        "Prince",
        "Gianetto",
        "Linekar",
        "Kennedy (No. 1)"
    ],
    "CITATION": "Fitzpatrick [1977] NI 20",
    "NAME": "Fitzpatrick",
    "CATEGORIES": [
        "Voluntary Exposure to Risk"
    ],
    "HELD": [
        "An individual will be unable to rely on duress as a defence if they voluntarily associate with people who are likely to commit a crime"
    ],
    "NUMBER": "118",
    "TYPE": "Case",
    "YEAR": "1977",
    "SUMMARY": [
        "The appellant voluntarily joined the IRA. He later wished to leave but was threatened. He claimed he was forced to take part in robberies. He was denied the defence of duress."
    ],
    "CATEGORY": "Voluntary Exposure to Risk"
},
{
    "RELATED": [
        "Barnfather",
        "Prince",
        "Matudi",
        "B (a minor) v DPP",
        "Sweet v Parsley",
        "K",
        "Alphacell Ltd v Woodward",
        "R v G",
        "Deyemi and Another",
        "Jackson",
        "Gibbins and Proctor",
        "Hancock and Shankland"
    ],
    "CITATION": "Gammon (Hong Kong) Ltd v A-G of Hong Kong [1985] AC 1",
    "NAME": "Gammon (Hong Kong) Ltd v A-G of Hong Kong",
    "CATEGORIES": [
        "Elements",
        "Strict Liability"
    ],
    "HELD": [
        "where presumption of mens rea is displaced by necessary implication or the effects of a statute (usually a social concern) strict liability will stand, in order to promote the objectives of a statute by encouraging greater vigilance to the correct commission of the action (Lord Scarmon)."
    ],
    "NUMBER": "119",
    "TYPE": "Case",
    "YEAR": "1985",
    "SUMMARY": [
        "While building, the defendant removed a temporary support. Charged with material deviation of a building approval in contrast with a Hong Kong ordinance."
    ],
    "CATEGORY": "Elements &mdash; Strict Liability"
},
{
    "RELATED": [
        "Griffin",
        "Mohan",
        "Millard and Vernon",
        "Whybrow",
        "AG Ref no 1 of 1992",
        "Walker and Hayles",
        "Pace and Rogers",
        "Campbell",
        "Shivpuri",
        "Jones [1990]",
        "Greatrex",
        "Rafferty"
    ],
    "CITATION": "Geddes [1996] Crim LR 515",
    "NAME": "Geddes",
    "CATEGORIES": [
        "Attempt",
        "Preparatory"
    ],
    "HELD": [
        "these were simply preparatory actions; he was lying in wait. Difficult to reconcile with Griffin or Campbell."
    ],
    "NUMBER": "120",
    "TYPE": "Case",
    "YEAR": "1996",
    "SUMMARY": [
        "The defendant was charged with attempted false imprisonment. Mr. Geddes was apprehended in the lavatory of a school. In his possession was found to be string, sealing tape, and a knife (on a school premises in the boy&#8217;s toilets)."
    ],
    "CATEGORY": "Attempt &mdash; Preparatory"
},
{
    "RELATED": [
        "Elliott v C (a minor)",
        "Cunningham",
        "Malcolm",
        "Caldwell",
        "Hancock and Shankland",
        "Moloney",
        "Kingston",
        "Gibbins and Proctor",
        "Nedrick",
        "Westminster City Council v Croyalgrange Ltd",
        "Hyam v DPP",
        "B (a minor) v DPP"
    ],
    "CITATION": "Gemmell and Richardson [2004] 1 AC 1034, [2003] UKHL 50. [2003] 3 WLR 1060",
    "NAME": "Gemmell and Richardson",
    "CATEGORIES": [
        "Elements",
        "Mens Rea",
        "Recklessness"
    ],
    "HELD": [
        "Whether because of age or circumstances, it was said that the risk of their actions could never be obvious to them. However, according to precedent, they should be charged under the Caldwell standard\u2014but they could never meet this standard. Lord Bingham: subjectivism should be generally applied in criminal law. Used Cunningham subjective test and made it the new standard."
    ],
    "NUMBER": "121",
    "TYPE": "Case",
    "YEAR": "2004",
    "SUMMARY": [
        "Two young boys set fire to some newspapers near wheely-bins. The fire spread and caused \u00a31 million in damage. Boys charged with criminal damage."
    ],
    "CATEGORY": "Elements &mdash; Mens Rea &mdash; Recklessness"
},
{
    "RELATED": [
        "Gemma Evans",
        "Instan",
        "Fagan",
        "Hancock and Shankland",
        "Malcolm",
        "Stone and Dobinson",
        "Pittwood",
        "Caldwell",
        "Moloney",
        "People v Beardsley",
        "Dytham",
        "Airedale NHS Trust v Bland"
    ],
    "CITATION": "Gibbins and Proctor (1918) 13 Cr App R 134",
    "NAME": "Gibbins and Proctor",
    "CATEGORIES": [
        "Elements",
        "Mens Rea",
        "Omissions",
        "2. Family Duty"
    ],
    "HELD": [
        "Gibbons had a duty of care for Nelly because he was her parent. Proctor owed Nelly a duty of care not because she was her parent, but one that was created because they lived in the same household (voluntary assumption of care; she had come into the household and accepted money and shelter from Gibbins)"
    ],
    "NUMBER": "122",
    "TYPE": "Case",
    "YEAR": "1918",
    "SUMMARY": [
        "Gibbins, his live-in partner Proctor, and Gibbins&#8217;s daughter Nelly lived in the same home. Nelly was starved to death and Gibbins and Proctor were brought up on murder charges."
    ],
    "CATEGORY": "Elements &mdash; Mens Rea &mdash; Omissions &mdash; 2. Family Duty"
},
{
    "RELATED": [
        "Clegg",
        "Lee",
        "O'Grady",
        "Devlin v Armstrong",
        "Dadson",
        "Palmer v the Queen",
        "AG Ref no 2 of 1983",
        "Martin [2002]",
        "Kitson",
        "Bourne",
        "Bird",
        "Dudley and Stephens"
    ],
    "CITATION": "Gladstone Williams (1984) 78 Cr App R 276",
    "NAME": "Gladstone Williams",
    "CATEGORIES": [
        "General Defences",
        "Mistaken Belief",
        "Fact"
    ],
    "HELD": [
        "the mistaken belief in this case was reasonable, not liable for the crime."
    ],
    "NUMBER": "123",
    "TYPE": "Case",
    "YEAR": "1984",
    "SUMMARY": [
        "The perpetrator stole a handbag, and the victim chased them down and the victim was sitting on top of the thief when Williams came along and mistook the victim for the perp. Tackled the victim under mistaken belief."
    ],
    "CATEGORY": "General Defences &mdash; Mistaken Belief &mdash; Fact"
},
{
    "RELATED": [
        "Bryce",
        "Khan",
        "Blakely and Sutton v Chief Constable of West Mercia",
        "Clarkson",
        "Lane and Lane",
        "Coney",
        "Wilcox v Jeffrey",
        "Callow v Tillstone",
        "Bourne (1952)",
        "Gillick v West Norfolk Health Authority",
        "Cogan and Leak",
        "Carter v Richardson"
    ],
    "CITATION": "Gianetto [1997] 1 Cr App R 1, [1996] Crim LR 722",
    "NAME": "Gianetto",
    "CATEGORIES": [
        "Complicity"
    ],
    "HELD": [
        "guilty. The jury simply has to be satisfied that the defendant is either the principal or secondary offender to convict."
    ],
    "NUMBER": "124",
    "TYPE": "Case",
    "YEAR": "1997",
    "SUMMARY": [
        "The defendant was involved in a separation/custody dispute. The wife was killed. It was unclear if the defendant had a hand in her death, or by someone else."
    ],
    "CATEGORY": "Complicity"
},
{
    "RELATED": [
        "Khan",
        "Wilcox v Jeffrey",
        "Gianetto",
        "Bourne (1952)",
        "Calhaem",
        "Callow v Tillstone",
        "Cogan and Leak",
        "Bryce",
        "Blakely and Sutton v Chief Constable of West Mercia",
        "Clarkson",
        "Lane and Lane",
        "Carter v Richardson"
    ],
    "CITATION": "Gillick v West Norfolk Health Authority [1986] AC 112",
    "NAME": "Gillick v West Norfolk Health Authority",
    "CATEGORIES": [
        "Complicity"
    ],
    "HELD": [
        "Not guilty because it was in the best interests of the patients."
    ],
    "NUMBER": "125",
    "TYPE": "Case",
    "YEAR": "1986",
    "SUMMARY": [
        "Gillick argued that doctors who advised young girls about sex, they become secondary parties in encouraging underage girls to have illegal sex."
    ],
    "CATEGORY": "Complicity"
},
{
    "RELATED": [
        "Latimer",
        "Mitchell",
        "AG Ref no 4 of 1980",
        "AG Ref no 3 of 1994",
        "Pembliton",
        "Fagan",
        "Miller",
        "Thabo Meli",
        "Church",
        "Santana",
        "Gemma Evans",
        "Deyemi and Another"
    ],
    "CITATION": "Gnango (2011) UKSC 59",
    "NAME": "Gnango",
    "CATEGORIES": [
        "Elements",
        "Coincidence of MR and AR",
        "Transferred Malice"
    ],
    "HELD": [
        "Gnango was liable through transferred malice (Lord Phillips): since Gnango encouraged his own murder by firing back at red bandana man. This action allowed the red bandana man&#8217;s malice to be transferred onto the victim."
    ],
    "NUMBER": "126",
    "TYPE": "Case",
    "YEAR": "2011",
    "SUMMARY": [
        "Gnango was waiting for a guy in a red bandana. When the guy showed up, he and the Gnango got into a gunfight. The victim, a 26-y.o. girl, got caught in the crossfire and was shot by red bandana man. The CPS wanted to convict Gnango for murder."
    ],
    "CATEGORY": "Elements &mdash; Coincidence of MR and AR &mdash; Transferred Malice"
},
{
    "RELATED": [
        "R v JF and NE",
        "Dhaliwal",
        "Newbury",
        "Dolby",
        "Constanza",
        "Nedrick",
        "Majewski",
        "Bird",
        "Martin [1989]",
        "Tandy",
        "Tuberville v Savage",
        "Barnes"
    ],
    "FLAGS": [
        "Current Law"
    ],
    "CITATION": "Goodfellow [1986]",
    "NAME": "Goodfellow",
    "CATEGORIES": [
        "Unlawful Act Manslaughter"
    ],
    "HELD": [
        "In <span class=\"lnk caseln\">Unlawful Act Manslaughter</span>, <span class=\"lnk caseln\">causation</span> is satisfied simply by absence of a <span class=\"lnk caseln\">novus actus interveniens</span>. The unlawful act does not itself need to be directed against the victim; it merely has to be caused by the defendant."
    ],
    "NUMBER": "258",
    "TYPE": "Case",
    "YEAR": "1986",
    "SUMMARY": [
        "D wanted a new council house, burnt down his old one. What he didn&#8217;t know was that V was still inside."
    ],
    "CATEGORY": "Unlawful Act Manslaughter"
},
{
    "RELATED": [
        "DPP v Smith (1961)",
        "Clarence",
        "Aitken",
        "Bollom",
        "Martin",
        "Jones",
        "Konzani",
        "Emmett",
        "Dica",
        "Wilson",
        "Savage",
        "A v United Kingdom"
    ],
    "CITATION": "Golding (2014) EWCA Crim 889",
    "NAME": "Golding",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "GBH"
    ],
    "HELD": [
        "sentenced reduced, but appeal dismissed. Transmission of herpes constitutes GBH. No need for battery or physical violence for a section 20 offence."
    ],
    "NUMBER": "128",
    "TYPE": "Case",
    "YEAR": "2014",
    "SUMMARY": [
        "The defendant and the victim were in a relationship. The defendant knew he had herpes and infected the victim during the relationship. The defendant claimed that the transmission was unintentional. Defendant convicted of GBH, appealed,"
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; GBH"
},
{
    "RELATED": [
        "Dowds",
        "Byrne",
        "Tandy",
        "Wood",
        "Dietschmann",
        "Ahluwalia",
        "R v Zebedee",
        "Ibrams",
        "Duffy",
        "Camplin",
        "Thornton (No. 2)",
        "Humphreys"
    ],
    "CITATION": "Golds (2014) EWCA Crim 748",
    "NAME": "Golds",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Diminished Responsibility",
        "Medical Condition"
    ],
    "HELD": [
        "Appeal dismissed. In order to be usable for diminished responsibility your medical condition needs to substantially impair one of three things: 1) your ability to understand conduct; 2) your ability to form a rational judgment; 3) your ability to control yourself."
    ],
    "NUMBER": "129",
    "TYPE": "Case",
    "YEAR": "2014",
    "SUMMARY": [
        "Golds killed his wife, claimed diminished responsibility based on a medical condition. Convicted of murder, appealed."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Diminished Responsibility &mdash; Medical Condition"
},
{
    "RELATED": [
        "Carey",
        "Stringer",
        "DPP for NI v Maxwell",
        "Stewart",
        "Uddin",
        "English and Weddle",
        "Bainbridge",
        "Jogee",
        "Roberts [1993]",
        "Davies v DPP",
        "Rahman",
        "Rodgers"
    ],
    "CITATION": "Greatrex [1999] 1 Cr App R 126",
    "NAME": "Greatrex",
    "CATEGORIES": [
        "Joint Enterprise"
    ],
    "HELD": [
        "liability still exists, but a retrial was ordered on a question of fact and degree. An indictment for murder should include any alternative lesser verdict which carries a proper reflection of the seriousness of the factual situation."
    ],
    "NUMBER": "130",
    "TYPE": "Case",
    "YEAR": "1999",
    "SUMMARY": [
        "The original plan was to just kick someone with a shod foot, but the victim ended up being beaten with a metal bar."
    ],
    "CATEGORY": "Joint Enterprise"
},
{
    "RELATED": [
        "Geddes",
        "AG Ref no 1 of 1992",
        "Mohan",
        "Jones [1990]",
        "Walker and Hayles",
        "Pace and Rogers",
        "Shivpuri",
        "Millard and Vernon",
        "Campbell",
        "Whybrow",
        "Dietschmann",
        "Carey"
    ],
    "CITATION": "Griffin [1993] Crim LR 515",
    "NAME": "Griffin",
    "CATEGORIES": [
        "Attempt",
        "Preparatory"
    ],
    "HELD": [
        "the defendant was liable for attempted kidnapping because she had gone as far as phoning the school"
    ],
    "NUMBER": "131",
    "TYPE": "Case",
    "YEAR": "1993",
    "SUMMARY": [
        "There was a mother who had a couple young children in her care. She wanted to take them to Ireland and bought ferry tickets. She went to the children&#8217;s school and told them she was picking them up for a dentist appointment"
    ],
    "CATEGORY": "Attempt &mdash; Preparatory"
},
{
    "RELATED": [
        "Ibrams",
        "Cheshire",
        "Donovan",
        "Symonds",
        "Bourne",
        "Abbott",
        "Fitzpatrick",
        "Environment Agency v Empress Car Company",
        "Dica",
        "Ireland",
        "Newbury",
        "Clarkson"
    ],
    "CITATION": "Gullefer (1986) 91 CR App R 356",
    "NAME": "Gullefer",
    "CATEGORIES": [
        "Inchoate Liability"
    ],
    "HELD": [
        "liable. The crime begins when the merely preparatory acts come to an end. You have to ask whether the defendant has \u2018embarked on the crime proper.&#8217;"
    ],
    "NUMBER": "132",
    "TYPE": "Case",
    "YEAR": "1986",
    "SUMMARY": [
        "Gullefer was a gambler who bet on dog races. His dog was losing, and so he jumped onto the track to interfere with the race."
    ],
    "CATEGORY": "Inchoate Liability"
},
{
    "RELATED": [
        "Kingston",
        "Caldwell",
        "Malcolm",
        "Nedrick",
        "Gemmell and Richardson",
        "Moloney",
        "Gibbins and Proctor",
        "Hyam v DPP",
        "Elliott v C (a minor)",
        "Cunningham",
        "Westminster City Council v Croyalgrange Ltd",
        "Smith"
    ],
    "CITATION": "Hancock and Shankland [1986] AC 455",
    "NAME": "Hancock and Shankland",
    "CATEGORIES": [
        "Elements",
        "Mens Rea"
    ],
    "HELD": [
        "the jurors need to be informed of the probability of the fault. The higher the probability, the more the defendants should be liable. Not just foreseeability, but probability. Conviction quashed."
    ],
    "NUMBER": "133",
    "TYPE": "Case",
    "YEAR": "1986",
    "SUMMARY": [
        "Striking miners said that their aim was to frighten other miners going to work. They dropped a large stone, and the victim died. Convicted of murder."
    ],
    "CATEGORY": "Elements &mdash; Mens Rea"
},
{
    "RELATED": [
        "Clinton",
        "Allen",
        "Knuller",
        "Dolby",
        "Golds",
        "Dias",
        "Aitken",
        "Mitchell",
        "Prince",
        "English and Weddle",
        "Hui Chi-Ming",
        "Kaitamaki v the Queen"
    ],
    "CITATION": "Hasan [2005] UKHL 22, [2005] 2 AC 467",
    "NAME": "Hasan",
    "CATEGORIES": [
        "Voluntary Association"
    ],
    "HELD": [
        "Guilty. No defence; it was precluded where the risk to which the defendant exposed himself is pressure compelling him to commit any type of crime that he ought to have foreseen"
    ],
    "NUMBER": "134",
    "TYPE": "Case",
    "YEAR": "2005",
    "SUMMARY": [
        "Involved an escort agency, and the defendant was a driver who said that he was compelled by a partner of the owner of the agency to carry out burglaries. Because of this relationship, the defendant said that he did not foresee this as a possibility."
    ],
    "CATEGORY": "Voluntary Association"
},
{
    "RELATED": [
        "Collins v Wilcock",
        "Fagan",
        "Richardson",
        "Venna",
        "DPP v K",
        "Emmett",
        "Morgan v DPP",
        "Slingsby",
        "Barnes",
        "JJC v Eisenhower",
        "Dica",
        "Wilson [1996]"
    ],
    "CITATION": "Haystead v CC of Derbyshire [2000] 3 All ER 890",
    "NAME": "Haystead v CC of Derbyshire",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Battery"
    ],
    "HELD": [
        "liable for harm to child because a causal linkage could be established between the actions of the defendant and the unlawful force which injured the child."
    ],
    "NUMBER": "135",
    "TYPE": "Case",
    "YEAR": "2000",
    "SUMMARY": [
        "The defendant struck the victim twice in the face when she was holding her three-month-old child. The blows caused the victim to drop the child, and the child was injured by the fall. The defendant was charged with the battery of the mother as well as the child, but argued that he had not directly caused harm to the child."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Battery"
},
{
    "RELATED": [
        "R v H",
        "Court",
        "R (F) v DPP and A",
        "Devonald",
        "Elbekkay",
        "Bowler",
        "Linekar",
        "R v B",
        "Bree",
        "Olugboja",
        "Kaitamaki v the Queen",
        "McNally"
    ],
    "CITATION": "Heard [2007] EWCA Crim 125, [2007] 1 Cr App R 27",
    "NAME": "Heard",
    "CATEGORIES": [
        "Sexual Offences",
        "Indecent Assault"
    ],
    "HELD": [
        "guilty. Voluntary intoxication is not a valid defence to sexual offences."
    ],
    "NUMBER": "136",
    "TYPE": "Case",
    "YEAR": "2007",
    "SUMMARY": [
        "Whilst intoxicated, the defendant rubbed his genitals up and down the leg of a female police officer. When asked about it later, the defendant said that he had no recollection of the incident."
    ],
    "CATEGORY": "Sexual Offences &mdash; Indecent Assault"
},
{
    "RELATED": [
        "Blaue",
        "Environment Agency v Empress Car Company",
        "Dias",
        "Kennedy (No. 2)",
        "Hughes",
        "Dhaliwal",
        "Dyson",
        "Latif",
        "Smith",
        "Roberts",
        "White",
        "Williams (1991)"
    ],
    "CITATION": "Holland (1841) 2 Mood and R 357",
    "NAME": "Holland",
    "CATEGORIES": [
        "Elements",
        "Causation",
        "Thin Skull Rule"
    ],
    "HELD": [
        "the defendant was responsible even though the victim rejected treatment, since they caused the injury that led to the victim&#8217;s death. It was the victim&#8217;s choice not to take treatment, and if not for the actions of the defendant, the victim would not have died."
    ],
    "NUMBER": "137",
    "TYPE": "Case",
    "YEAR": "1841",
    "SUMMARY": [
        "The defendant injured the victim&#8217;s thumb during an argument; the surgeon recommended that the finger should be amputated. The victim refused, and two weeks later he died from lockjaw caused by this decision."
    ],
    "CATEGORY": "Elements &mdash; Causation &mdash; Thin Skull Rule"
},
{
    "RELATED": [
        "Smith",
        "Dhaliwal",
        "Kennedy (No. 1)",
        "Williams (1991)",
        "Dyson",
        "Cheshire",
        "Latif",
        "Dias",
        "Blaue",
        "Holland",
        "Roberts",
        "Jordan"
    ],
    "CITATION": "Hughes (2013) UKSC 56",
    "NAME": "Hughes",
    "CATEGORIES": [
        "Elements",
        "Causation"
    ],
    "HELD": [
        "not liable for the death of the victim. There had to be something that Hughes did or something that he omitted to do in order to make him liable for the death of the victim. Supreme Court: causation should be context-specific to driving offences; there needs to be fault attached to the action."
    ],
    "NUMBER": "138",
    "TYPE": "Case",
    "YEAR": "2013",
    "SUMMARY": [
        "Hughes was driving without insurance. While on the road, the victim smashed into Hughes, who was driving perfectly. The court found the victim entirely responsible for the crash, because he had been high on heroin and overtired. However, since Hughes had not had insurance, he was charged with causing a death while driving."
    ],
    "CATEGORY": "Elements &mdash; Causation"
},
{
    "RELATED": [
        "Carey",
        "DPP for NI v Maxwell",
        "AG Ref no 1 of 1975",
        "Jogee",
        "Greatrex",
        "Uddin",
        "Rafferty",
        "Roberts [1993]",
        "Stringer",
        "Chan Wing Siu",
        "Rahman",
        "Mahmood (Asaf)"
    ],
    "CITATION": "Hui Chi-Ming [1992] 1 AC 34, [1991] 3 All ER 897",
    "NAME": "Hui Chi-Ming",
    "CATEGORIES": [
        "Joint Enterprise"
    ],
    "HELD": [
        "liable as a secondary party. You can be liable for the crime if you contemplate/realise that there is a realistic possibility that D1 would commit the crime."
    ],
    "NUMBER": "139",
    "TYPE": "Case",
    "YEAR": "1992",
    "SUMMARY": [
        "D1&#8217;s gf had been intimidated and he sought out the perpetrator with a metal bar. The defendant was present at the time."
    ],
    "CATEGORY": "Joint Enterprise"
},
{
    "RELATED": [
        "R v Zebedee",
        "AG for Jersey v Holley",
        "R v Jewell",
        "Ahluwalia",
        "Ibrams",
        "Smith (Morgan)",
        "Thornton (No. 2)",
        "Baillie",
        "Duffy",
        "Barnsdale-Quean",
        "Dawes",
        "Camplin"
    ],
    "CITATION": "Humphreys [1995] 4 All ER 1008",
    "NAME": "Humphreys",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation",
        "Murder",
        "Defences",
        "Provocation/Loss of Control"
    ],
    "HELD": [
        "you can take into account of the cumulative history leading up to the final act, but at the time of the act itself, the defendant has to be operating at a sudden and temporary loss of self-control or it doesn&#8217;t qualify for provocation"
    ],
    "NUMBER": "140",
    "TYPE": "Case",
    "YEAR": "1995",
    "SUMMARY": [
        "Humphreys spent her childhood in and out of foster homes, involved in prostitution at age of 13, attempted suicide at 15. Victim mocked her and she stabbed him."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation / Murder &mdash; Defences &mdash; Provocation/Loss of Control"
},
{
    "RELATED": [
        "Moloney",
        "Nedrick",
        "Woollin",
        "Westminster City Council v Croyalgrange Ltd",
        "Cunningham",
        "Kingston",
        "Elliott v C (a minor)",
        "Hancock and Shankland",
        "AG Ref no 4 of 1980",
        "Malcolm",
        "Gemmell and Richardson",
        "Caldwell"
    ],
    "FLAGS": [
        "Love Rival"
    ],
    "CITATION": "Hyam v DPP [1975] AC 55",
    "NAME": "Hyam v DPP",
    "CATEGORIES": [
        "Elements",
        "Mens Rea",
        "Murder",
        "Intent",
        "Oblique"
    ],
    "HELD": [
        "mens rea for murder is the intention to kill or cause GBH. The jury can find intention when the defendant commits an act which kills, during which they know that it is highly probable that their actions will cause death or serious injury"
    ],
    "NUMBER": "141",
    "TYPE": "Case",
    "YEAR": "1975",
    "SUMMARY": [
        "Hyam had a love rival. He took burning rags and put them through the rival&#8217;s letterbox. The rival died."
    ],
    "CATEGORY": "Elements &mdash; Mens Rea / Murder &mdash; Intent &mdash; Oblique"
},
{
    "RELATED": [
        "Humphreys",
        "Bedder v DPP",
        "Barnsdale-Quean",
        "AG for Jersey v Holley",
        "R v Zebedee",
        "Ahluwalia",
        "Baillie",
        "Thornton (No. 2)",
        "Dawes",
        "R v Jewell",
        "Smith (Morgan)",
        "Pearson"
    ],
    "CITATION": "Ibrams (1981) 74 Cr App R 154",
    "NAME": "Ibrams",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation/Loss of Control"
    ],
    "HELD": [
        "defendant guilty of murder. Time period was too long; no &#8220;sudden and temporary loss of control.&#8221;"
    ],
    "NUMBER": "142",
    "TYPE": "Case",
    "YEAR": "1981",
    "SUMMARY": [
        "Defendant killed the victim. There was a week that passed between the provoking action and the murder."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation/Loss of Control"
},
{
    "RELATED": [
        "Gemma Evans",
        "Pittwood",
        "Santana",
        "Fagan",
        "Miller",
        "Dytham",
        "People v Beardsley",
        "Airedale NHS Trust v Bland",
        "Gibbins and Proctor",
        "Smith (1975)",
        "Stone and Dobinson",
        "Deller"
    ],
    "CITATION": "Instan (1893) 1 QB 450",
    "NAME": "Instan",
    "CATEGORIES": [
        "Elements",
        "Actus Reus",
        "Omissions",
        "2. Family Duty"
    ],
    "HELD": [
        "the niece was found guilty of manslaughter based on the fact that she had a blood relation to her aunt. This generated a duty of care by the niece to help her aunt. The intentional neglect of the aunt was consequently a crime."
    ],
    "NUMBER": "143",
    "TYPE": "Case",
    "YEAR": "1893",
    "SUMMARY": [
        "A sick woman died while living with her niece. The niece was an adult, and had been living with her aunt because she had no means of supporting herself. Her aunt had been suffering for days, and the niece did not give her aunt food or medical attention, or let anyone know that she was sick. The aunt, unable to leave her bed, eventually died from exhaustion brought on by gangrene."
    ],
    "CATEGORY": "Elements &mdash; Actus Reus &mdash; Omissions &mdash; 2. Family Duty"
},
{
    "RELATED": [
        "Tuberville v Savage",
        "Venna",
        "Constanza",
        "Ireland and Burstow",
        "Smith v Woking Police",
        "Lewis",
        "Brown",
        "Aitken",
        "Savage",
        "Fagan",
        "Barnes",
        "Golding"
    ],
    "CITATION": "Ireland [1997] 3 WLR 534",
    "NAME": "Ireland",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Assault"
    ],
    "HELD": [
        "liable for assault. Silence can amount to an assault and psychiatric injury can amount to bodily harm."
    ],
    "NUMBER": "144",
    "TYPE": "Case",
    "YEAR": "1997",
    "SUMMARY": [
        "The defendant made a series of silent telephone calls over three months to three different women. He was convicted under s.47 Offences Against the Person Act 1861. He appealed contending that silence cannot amount to an assault and that psychiatric injury is not bodily harm."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Assault"
},
{
    "RELATED": [
        "Tuberville v Savage",
        "Venna",
        "Ireland",
        "Constanza",
        "Smith v Woking Police",
        "Emmett",
        "Donovan",
        "Haystead v CC of Derbyshire",
        "Wilson [1996]",
        "Dica",
        "Konzani",
        "Aitken"
    ],
    "CITATION": "Ireland and Burstow [1998] AC 147",
    "NAME": "Ireland and Burstow",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Assault"
    ],
    "HELD": [
        "assault can be committed by a caller on a telephone, ad satisfies immediate threat of violence. It would be for the jurors to decide whether the threats constituted assault."
    ],
    "NUMBER": "145",
    "TYPE": "Case",
    "YEAR": "1998",
    "SUMMARY": [
        "Defendants called their victims and threatened them. Convicted of assault, appealed."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Assault"
},
{
    "RELATED": [
        "Barnfather",
        "B (a minor) v DPP",
        "R v G",
        "Deyemi and Another",
        "K",
        "Matudi",
        "Gammon (Hong Kong) Ltd v A-G of Hong Kong",
        "Alphacell Ltd v Woodward",
        "Sweet v Parsley",
        "Prince",
        "Environment Agency v Empress Car Company",
        "Pembliton"
    ],
    "CITATION": "Jackson [2006] EWCA Crim 2380",
    "NAME": "Jackson",
    "CATEGORIES": [
        "Elements",
        "Strict Liability"
    ],
    "HELD": [
        "this was a strict liability offence. The regulation was to control activity involving hazard and risk to persons/property. You need strict liability to encourage the highest possible vigilance."
    ],
    "NUMBER": "146",
    "TYPE": "Case",
    "YEAR": "2006",
    "SUMMARY": [
        "Court martial case. The defendant was flying low and crashed into a floodlight tower. Charged under s.51 of the Air Force Act 1955."
    ],
    "CATEGORY": "Elements &mdash; Strict Liability"
},
{
    "RELATED": [
        "Jones",
        "Tabassum",
        "Dica",
        "Slingsby",
        "Wilson [1996]",
        "Brown",
        "Aitken",
        "Barnes",
        "Richardson",
        "Morgan v DPP",
        "DPP v Smith",
        "A v United Kingdom"
    ],
    "CITATION": "Jheeta [2007] EWCA Crim 1699",
    "NAME": "Jheeta",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Consent"
    ],
    "HELD": [
        "no true consent because there was \u2018improper pressure&#8217; on the complainant."
    ],
    "NUMBER": "147",
    "TYPE": "Case",
    "YEAR": "2007",
    "SUMMARY": [
        "The defendant worried his partner was going to leave him, so he faked burglaries and messages from the police, and told her that she had continue to sleep with him because only she could protect him."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Consent"
},
{
    "RELATED": [
        "Wilson [1996]",
        "Slingsby",
        "Collins v Wilcock",
        "DPP v K",
        "Konzani",
        "DPP v Smith (1961)",
        "Tuberville v Savage",
        "Aitken",
        "Dica",
        "Morgan v DPP",
        "Venna",
        "R (on the Application of T) v DPP"
    ],
    "CITATION": "JJC v Eisenhower (1983) QBD",
    "NAME": "JJC v Eisenhower",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Unlawful Wounding"
    ],
    "HELD": [
        "defendant not guilty of wounding because a wound is a break in the continuity of the whole skin (dermis and epidermis); an internal rupturing of blood vessels is not a wound."
    ],
    "NUMBER": "148",
    "TYPE": "Case",
    "YEAR": "1983",
    "SUMMARY": [
        "The defendant shot the victim with an air gun. The pellet hit the victim near the eye, resulting in a bruise and fluid filling his eye. Defendant charged under Section 20 (wounding)."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Unlawful Wounding"
},
{
    "RELATED": [
        "Stewart",
        "National Coal Board v Gamble",
        "Rodgers",
        "DPP for NI v Maxwell",
        "Bainbridge",
        "Greatrex",
        "Hui Chi-Ming",
        "Powell and Daniels",
        "English and Weddle",
        "Davies v DPP",
        "Stringer",
        "Rahman"
    ],
    "CITATION": "Jogee [2016] UKSC 8",
    "NAME": "Jogee",
    "CATEGORIES": [
        "Joint Enterprise",
        "Secondary Liability"
    ],
    "HELD": [
        "previous cases no longer apply; law took a wrong turn in Chan Win Siu. Where there is complicity liability, in order for Jogee to be liable for murder, he would have had to be found guilty of encouraging or assisting in the act of murder. Foresight of what D1 might do is not intention, it is merely evidence of intention on behalf of D2."
    ],
    "NUMBER": "149",
    "TYPE": "Case",
    "YEAR": "2016",
    "SUMMARY": [
        "Jogee and D1 were convicted of murder. They had gone to the victim&#8217;s house while under the influence of drugs and alcohol. Jogee was outside when D1 killed the victim."
    ],
    "CATEGORY": "Joint Enterprise &mdash; Secondary Liability"
},
{
    "RELATED": [
        "Dica",
        "Aitken",
        "Golding",
        "DPP v Smith (1961)",
        "Morgan v DPP",
        "Savage",
        "Emmett",
        "Bollom",
        "Richardson",
        "Lewis",
        "Clarence",
        "Slingsby"
    ],
    "CITATION": "Jones [1987] Crim LR 123",
    "NAME": "Jones",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "GBH",
        "Non-Fatal Offences",
        "Consent"
    ],
    "HELD": [
        "Convictions quashed. Consent to rough and undisciplined horseplay is a defence, even if there was no consent by the victims. If the appellants had a genuine belief in consent they should be allowed the defence (no requirement for it to be reasonably held, provided it was genuine."
    ],
    "NUMBER": "150",
    "TYPE": "Case",
    "YEAR": "1987",
    "SUMMARY": [
        "Defendants were schoolboys who had thrown the victims up on the air with the intention of catching them. The victims were accidentally dropped and sustained serious injuries. Charged with infliction of GBH."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; GBH / Non-Fatal Offences &mdash; Consent"
},
{
    "RELATED": [
        "AG Ref no 1 of 1992",
        "Whybrow",
        "Pace and Rogers",
        "Mohan",
        "Geddes",
        "Griffin",
        "Shivpuri",
        "Walker and Hayles",
        "Campbell",
        "Millard and Vernon",
        "Bateman",
        "Pearson"
    ],
    "CITATION": "Jones [1990] 1 WLR 1057",
    "NAME": "Jones [1990]",
    "CATEGORIES": [
        "Attempt",
        "Preparatory Actions"
    ],
    "HELD": [
        "not liable for attempt because the defendant still needed to remove the safety, put his hand on the trigger, and pull the trigger."
    ],
    "NUMBER": "151",
    "TYPE": "Case",
    "YEAR": "1990",
    "SUMMARY": [
        "Mr. Jones found out that his mistress left him for another man. He jumped into the car of the victim with a sawed-off shotgun"
    ],
    "CATEGORY": "Attempt &mdash; Preparatory Actions"
},
{
    "RELATED": [
        "Smith",
        "Cheshire",
        "Latif",
        "Blaue",
        "Environment Agency v Empress Car Company",
        "Dyson",
        "Kennedy (No. 1)",
        "Williams (1991)",
        "Dias",
        "Kennedy (No. 2)",
        "Holland",
        "White"
    ],
    "CITATION": "Jordan (1956) 40 Cr App R 1",
    "NAME": "Jordan",
    "CATEGORIES": [
        "Elements",
        "Causation",
        "Medical Treatment"
    ],
    "HELD": [
        "the treatment was abnormal and palpably wrong. Caused distress in the medical community because they had operated with the assumption that just because treatment is not normal, that does not make it wrong."
    ],
    "NUMBER": "152",
    "TYPE": "Case",
    "YEAR": "1956",
    "SUMMARY": [
        "The hospital gave the patient abnormally high quantities of liquid, even though there was evidence that the patient had a bad reaction to it."
    ],
    "CATEGORY": "Elements &mdash; Causation &mdash; Medical Treatment"
},
{
    "RELATED": [
        "Jackson",
        "Sweet v Parsley",
        "Deyemi and Another",
        "R v G",
        "Barnfather",
        "B (a minor) v DPP",
        "Alphacell Ltd v Woodward",
        "Gammon (Hong Kong) Ltd v A-G of Hong Kong",
        "Matudi",
        "Prince",
        "Cunningham",
        "AG Ref no 3 of 1994"
    ],
    "CITATION": "K [2001] UKHL 37, [2001] 3 WLR 471",
    "NAME": "K",
    "CATEGORIES": [
        "Elements",
        "Strict Liability"
    ],
    "HELD": [
        "honestly held belief did not hold up in this case. Defendant held liable. Mala in se crime."
    ],
    "NUMBER": "153",
    "TYPE": "Case",
    "YEAR": "2001",
    "SUMMARY": [
        "The defendant was 26 and inappropriately touched the victim, who was a minor. The defendant said that the victim told him she was over 16, and had fully consented."
    ],
    "CATEGORY": "Elements &mdash; Strict Liability"
},
{
    "RELATED": [
        "Bowler",
        "McNally",
        "Bree",
        "R v B (2013)",
        "Olugboja",
        "Morgan v DPP",
        "Williams",
        "Linekar",
        "R v B",
        "R (F) v DPP and A",
        "Elbekkay",
        "Devonald"
    ],
    "CITATION": "Kaitamaki v the Queen [1984] PC (New Zealand)",
    "NAME": "Kaitamaki v the Queen",
    "CATEGORIES": [
        "Sexual Offences",
        "Rape"
    ],
    "HELD": [
        "defendant was guilty. Principle: sexual intercourse starts at penetration and &#8220;continues: until it stops. If the act continues when consent is withdrawn the offence is complete."
    ],
    "NUMBER": "154",
    "TYPE": "Case",
    "YEAR": "1984",
    "SUMMARY": [
        "The defendant broke into the complainant&#8217;s flat and raped her twice, claiming that she consented. The second time, the defendant became aware that the victim was not consenting but continued to rape her."
    ],
    "CATEGORY": "Sexual Offences &mdash; Rape"
},
{
    "RELATED": [
        "Kennedy (No. 2)",
        "Michael Kane v HM Advocate (2009) Scotland",
        "Dias",
        "Blaue",
        "Jordan",
        "Roberts",
        "Holland",
        "Cheshire",
        "Hughes",
        "Dhaliwal",
        "Latif",
        "Williams (1991)"
    ],
    "CITATION": "Kennedy (No. 1) [1999] Crim LR 65",
    "NAME": "Kennedy (No. 1)",
    "CATEGORIES": [
        "Elements",
        "Causation",
        "Drug Administration"
    ],
    "HELD": [
        "Conviction upheld. The unlawful act was Bosque injecting himself, which the appellant assisted, and the injection by Bosque was the direct cause of death. Where you supply the victim, you encourage the victim to take it and are therefore liable. Principle overturned in Dias."
    ],
    "NUMBER": "155",
    "TYPE": "Case",
    "YEAR": "1999",
    "SUMMARY": [
        "The appellant prepared a solution of heroin filled a syringe and handed it to Mr Bosque, a fellow resident at a hostel. Bosque injected himself and died. The appellant was convicted of supplying a class A drug and constructive manslaughter. The appellant appealed contending that there was no direct causal link between the unlawful act of supplying heroin and the death of Bosque."
    ],
    "CATEGORY": "Elements &mdash; Causation &mdash; Drug Administration"
},
{
    "RELATED": [
        "Dias",
        "Kennedy (No. 1)",
        "Michael Kane v HM Advocate (2009) Scotland",
        "Hughes",
        "Cheshire",
        "Roberts",
        "White",
        "Williams (1991)",
        "Latif",
        "Dhaliwal",
        "Jordan",
        "Smith"
    ],
    "CITATION": "Kennedy (No. 2) [2008] Crim LR 222",
    "NAME": "Kennedy (No. 2)",
    "CATEGORIES": [
        "Elements",
        "Causation",
        "Drug Administration"
    ],
    "HELD": [
        "So long as the victim injects the drug as a free, independent, voluntary action, it operates as a break in the chain of causation and the defendant is not liable (Lord Bingham, unanimous judgment). Overturns decision in Rodgers."
    ],
    "NUMBER": "156",
    "TYPE": "Case",
    "YEAR": "2008",
    "SUMMARY": [
        "The Kennedy case went back to court (providing a syringe of heroin to the victim who injects it and then dies)."
    ],
    "CATEGORY": "Elements &mdash; Causation &mdash; Drug Administration"
},
{
    "RELATED": [
        "Gillick v West Norfolk Health Authority",
        "Bryce",
        "Coney",
        "Blakely and Sutton v Chief Constable of West Mercia",
        "Calhaem",
        "Wilcox v Jeffrey",
        "Lane and Lane",
        "Cogan and Leak",
        "Carter v Richardson",
        "Callow v Tillstone",
        "Gianetto",
        "Bourne (1952)"
    ],
    "CITATION": "Khan [2009] Crim LR 348",
    "NAME": "Khan",
    "CATEGORIES": [
        "Complicity"
    ],
    "HELD": [
        "secondary liability applies. There does not have to be an exactitude between the harm that occurred and the secondary defendant foreseeing the level of violence that actually occurs, provided that the secondary defendant should have seen the possibility of serious harm occurring."
    ],
    "NUMBER": "157",
    "TYPE": "Case",
    "YEAR": "2009",
    "SUMMARY": [
        "Husband killed his wife. The brothers and sisters of the husband living in the house claimed they were not there at the time of the murder. However, in the weeks leading up to the death, there were a number of violent instances that the siblings were aware of."
    ],
    "CATEGORY": "Complicity"
},
{
    "RELATED": [
        "Gemmell and Richardson",
        "Hyam v DPP",
        "Elliott v C (a minor)",
        "Cunningham",
        "Moloney",
        "Nedrick",
        "Gibbins and Proctor",
        "Westminster City Council v Croyalgrange Ltd",
        "Malcolm",
        "Hancock and Shankland",
        "Caldwell",
        "Stone and Dobinson"
    ],
    "CITATION": "Kingston [1995] 2 AC 355",
    "NAME": "Kingston",
    "CATEGORIES": [
        "Elements",
        "Mens Rea"
    ],
    "HELD": [
        "liable for indecent assault. Although Kingston was involuntarily intoxicated, he had the requisite mens rea at the time of the crime. Criminal law is not about moral responsibility, but about the attribution of legal fault, which Kingston had."
    ],
    "NUMBER": "158",
    "TYPE": "Case",
    "YEAR": "1995",
    "SUMMARY": [
        "Kingston was a paedophile who could control his tendencies. He went to a party where he became involuntarily intoxicated and committed an assault on a 15 y.o. boy. Had he been sober, he would never have committed the crime."
    ],
    "CATEGORY": "Elements &mdash; Mens Rea"
},
{
    "RELATED": [
        "Bourne",
        "F v West Berkshire Health Authority",
        "Dudley and Stephens",
        "Buckoke v GLC",
        "Martin [2002]",
        "AG Ref no 2 of 1983",
        "Bell",
        "Devlin v Armstrong",
        "Symonds",
        "Dadson",
        "Clegg",
        "Lee"
    ],
    "CITATION": "Kitson (1955) 39 Cr App R 66",
    "NAME": "Kitson",
    "CATEGORIES": [
        "General Defences",
        "Necessity"
    ],
    "HELD": [
        "no necessity; DUI upheld."
    ],
    "NUMBER": "159",
    "TYPE": "Case",
    "YEAR": "1955",
    "SUMMARY": [
        "The defendant was in the back seat of the car. He grabbed the wheel while intoxicated to avoid collision and was charged with DUI"
    ],
    "CATEGORY": "General Defences &mdash; Necessity"
},
{
    "RELATED": [
        "Shaw v DPP",
        "Clinton",
        "Willoughby",
        "Dalloway",
        "DPP v Smith (1961)",
        "AG Ref no 2 of 1983",
        "DPP v K",
        "Jogee",
        "Nedrick",
        "R v JM and SM",
        "Church",
        "Clegg"
    ],
    "CITATION": "Knuller [1973] AC 435",
    "NAME": "Knuller",
    "CATEGORIES": [
        "Corruption of Public Morals"
    ],
    "HELD": [
        "examined the correctness of Shaw but did not overturn it. Test for corruption of public morals: something that members of the jury find to be destructive of the very fabric of society."
    ],
    "NUMBER": "160",
    "TYPE": "Case",
    "YEAR": "1973",
    "SUMMARY": [
        "The defendant published a magazine in which ads for homosexual relationships were placed. They were charged with conspiracy to corrupt public morals."
    ],
    "CATEGORY": "Corruption of Public Morals"
},
{
    "RELATED": [
        "Golding",
        "Savage",
        "Jones",
        "A v United Kingdom",
        "Emmett",
        "Dica",
        "Clarence",
        "Martin",
        "Wilson",
        "Lewis",
        "Bollom",
        "Aitken"
    ],
    "CITATION": "Konzani [2005] EWCA Crim 706, [2005] 2 Cr App R 14 (198)",
    "NAME": "Konzani",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "GBH"
    ],
    "HELD": [
        "defendant liable for GBH. Even where there is no physical harm to the victim&#8217;s body, the transmission of HIV constitutes GBH and is classified as a section 20 offence."
    ],
    "NUMBER": "161",
    "TYPE": "Case",
    "YEAR": "2005",
    "SUMMARY": [
        "The defendant was HIV positive and had unprotected intercourse with three complainants, not informing them of his positive status and the complainants contracted HIV as well."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; GBH"
},
{
    "RELATED": [
        "Khan",
        "Calhaem",
        "Carter v Richardson",
        "Gillick v West Norfolk Health Authority",
        "Gianetto",
        "Bryce",
        "Blakely and Sutton v Chief Constable of West Mercia",
        "Callow v Tillstone",
        "Coney",
        "Cogan and Leak",
        "Bourne (1952)",
        "Wilcox v Jeffrey"
    ],
    "CITATION": "Lane and Lane (1986) 82 Cr App R 5",
    "NAME": "Lane and Lane",
    "CATEGORIES": [
        "Complicity"
    ],
    "HELD": [
        "both parties held liable for the death under s.5 of the Domestic Violence Crime and Victims Act."
    ],
    "NUMBER": "162",
    "TYPE": "Case",
    "YEAR": "1986",
    "SUMMARY": [
        "A young child sustained a head injury and died. It was impossible to know which of the defendants had inflicted the blow, and there was no answer by either party."
    ],
    "CATEGORY": "Complicity"
},
{
    "RELATED": [
        "Cheshire",
        "Kennedy (No. 2)",
        "Michael Kane v HM Advocate (2009) Scotland",
        "Roberts",
        "Williams (1991)",
        "Blaue",
        "Dyson",
        "Jordan",
        "White",
        "Kennedy (No. 1)",
        "Dhaliwal",
        "Smith"
    ],
    "CITATION": "Latif (1996)",
    "NAME": "Latif",
    "CATEGORIES": [
        "Elements",
        "Causation",
        "New Intervening Act"
    ],
    "HELD": [
        "the defendant was not liable because there was a novus actus interveniens. The officers, who had not acted in concert with the defendant caused a break in the chain of causation."
    ],
    "NUMBER": "163",
    "TYPE": "Case",
    "YEAR": "1996",
    "SUMMARY": [
        "Customs officers intercepted heroin that was being imported from Pakistan into England. They substituted the heroin for a replacement. The defendant was charged with importing illegal substances."
    ],
    "CATEGORY": "Elements &mdash; Causation &mdash; New Intervening Act"
},
{
    "RELATED": [
        "AG Ref no 4 of 1980",
        "Gnango",
        "AG Ref no 3 of 1994",
        "Mitchell",
        "Gemma Evans",
        "Pembliton",
        "Fagan",
        "Santana",
        "Church",
        "Miller",
        "Thabo Meli",
        "Matudi"
    ],
    "CITATION": "Latimer (1886) 17 QBD 359",
    "NAME": "Latimer",
    "CATEGORIES": [
        "Elements",
        "Coincidence of MR and AR",
        "Transferred Malice"
    ],
    "HELD": [
        "still liable for the crime under the doctrine of transferred malice."
    ],
    "NUMBER": "164",
    "TYPE": "Case",
    "YEAR": "1886",
    "SUMMARY": [
        "The defendant tried to hit person A with a belt, and instead hit person B."
    ],
    "CATEGORY": "Elements &mdash; Coincidence of MR and AR &mdash; Transferred Malice"
},
{
    "RELATED": [
        "Thabo Meli",
        "Miller",
        "Santana",
        "Deller",
        "Gemma Evans",
        "Fagan",
        "Stone and Dobinson",
        "People v Beardsley",
        "Instan",
        "Airedale NHS Trust v Bland",
        "Dytham",
        "Smith (1975)"
    ],
    "CITATION": "Le Brun [1992] QB 61",
    "NAME": "Le Brun",
    "CATEGORIES": [
        "Elements",
        "Actus Reus",
        "Transaction Theory"
    ],
    "HELD": [
        "the original unlawful act with its accompanying mens rea was not the direct cause of death, but the unlawful act causing the death was part of the same sequence of events and that was enough to be guilty of manslaughter"
    ],
    "NUMBER": "165",
    "TYPE": "Case",
    "YEAR": "1992",
    "SUMMARY": [
        "He &mdash; by the sounds of things, a thoroughgoing ratbag &mdash; was walking home with his wife, late on eand his wife were walking home late at night. He thumped her on the jaw, knocking her out. In the course of <span class=\"it\">dragging</span> her home, he accidentally dropped her hilst <span class=\"it\">dragging</span> her home, he accidentally dropped herHead smacked on pavementHer head hit the pavement, which killed her. His intention was not to get her medical attention, but to cover up his first unlawful action."
    ],
    "CATEGORY": "Elements &mdash; Actus Reus / Transaction Theory"
},
{
    "RELATED": [
        "Savage",
        "A v United Kingdom",
        "Bollom",
        "Wilson",
        "Martin",
        "Emmett",
        "Clarence",
        "Konzani",
        "Golding",
        "Aitken",
        "Jones",
        "Dica"
    ],
    "CITATION": "Lewis [1970] Crim LR 647",
    "NAME": "Lewis",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "GBH"
    ],
    "HELD": [
        "the defendant was liable for the victim&#8217;s injury because his actions caused her to react; her reaction was reasonably foreseeable."
    ],
    "NUMBER": "166",
    "TYPE": "Case",
    "YEAR": "1970",
    "SUMMARY": [
        "The defendant was banging on the door of the victim, to escape him, the victim jumped out the window and broke her ankle."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; GBH"
},
{
    "RELATED": [
        "R v B",
        "Devonald",
        "Elbekkay",
        "Olugboja",
        "Kaitamaki v the Queen",
        "Morgan v DPP",
        "Bowler",
        "McNally",
        "R (F) v DPP and A",
        "Bree",
        "R v B (2013)",
        "Williams"
    ],
    "CITATION": "Linekar [1995] QB 250",
    "NAME": "Linekar",
    "CATEGORIES": [
        "Sexual Offences",
        "Rape"
    ],
    "HELD": [
        "not rape, inducement of intercourse under false pretences. The fraud did not affect the fact that the intercourse was consensual."
    ],
    "NUMBER": "167",
    "TYPE": "Case",
    "YEAR": "1995",
    "SUMMARY": [
        "The defendant promised a prostitute that he would pay \u00a325 for her services. They engaged in intercourse, and he ran away without paying."
    ],
    "CATEGORY": "Sexual Offences &mdash; Rape"
},
{
    "RELATED": [
        "Bainbridge",
        "Stewart",
        "Hui Chi-Ming",
        "Stringer",
        "Carey",
        "Powell and Daniels",
        "Rahman",
        "DPP for NI v Maxwell",
        "Uddin",
        "English and Weddle",
        "Greatrex",
        "AG Ref no 1 of 1975"
    ],
    "CITATION": "Mahmood (Asaf) [1994] Crim LR 368, [1995] RTR 48",
    "NAME": "Mahmood (Asaf)",
    "CATEGORIES": [
        "Joint Enterprise"
    ],
    "HELD": [
        "not liable. The defendant jumping out of the car was \u2018fundamentally different.&#8217;"
    ],
    "NUMBER": "168",
    "TYPE": "Case",
    "YEAR": "1994",
    "SUMMARY": [
        "The defendants went on a joyride. Their plan was to steal a car; they got into a road chase with the police. Mahmood was the passenger. The driver suddenly jumped out of the vehicle and a young child was killed."
    ],
    "CATEGORY": "Joint Enterprise"
},
{
    "RELATED": [
        "O'Grady",
        "Dowds",
        "Latimer",
        "Devonald",
        "Miller",
        "Smith (Morgan)",
        "Symonds",
        "Clarence",
        "Wilson",
        "Walker",
        "El Ghazal",
        "Court"
    ],
    "CITATION": "Majewski [1977] AC 443",
    "NAME": "Majewski",
    "CATEGORIES": [
        "Intoxication"
    ],
    "HELD": [
        "When the defendant is voluntarily intoxicated, there has been a delineation of crimes of specific intent (where intoxication could be relevant for fault) and for cases where there are basic intent crimes (no specific intent)"
    ],
    "NUMBER": "169",
    "TYPE": "Case",
    "YEAR": "1977",
    "SUMMARY": [
        "The defendant was in a public house and got high on barbiturates. He assaulted police officers when they tried to arrest him."
    ],
    "CATEGORY": "Intoxication"
},
{
    "RELATED": [
        "Woollin",
        "Duffy",
        "Bedder v DPP",
        "R v Zebedee",
        "Clinton",
        "Byrne",
        "Dear",
        "Abbott",
        "Ahluwalia",
        "Walker and Hayles",
        "Smith (Morgan)",
        "Doughty"
    ],
    "CITATION": "Malcharek and Steel [1981] 1 WLR 690",
    "NAME": "Malcharek and Steel",
    "CATEGORIES": [
        "Murder",
        "End of a Life"
    ],
    "HELD": [
        "the defendant was liable because the court defined the end of life as &#8220;brain stem death&#8221; which happened when the victim was stabbed."
    ],
    "NUMBER": "170",
    "TYPE": "Case",
    "YEAR": "1981",
    "SUMMARY": [
        "The defendant stabbed the victim 9 times. The victim was on a life support machine, and the machine was turned off. The defendant said that they were not the cause of death, the lack of treatment was."
    ],
    "CATEGORY": "Murder &mdash; End of a Life"
},
{
    "RELATED": [
        "Elliott v C (a minor)",
        "Cunningham",
        "Gemmell and Richardson",
        "Caldwell",
        "Nedrick",
        "Moloney",
        "Hancock and Shankland",
        "Gibbins and Proctor",
        "Westminster City Council v Croyalgrange Ltd",
        "Kingston",
        "Hyam v DPP",
        "Kennedy (No. 2)"
    ],
    "CITATION": "Malcolm (1986)",
    "NAME": "Malcolm",
    "CATEGORIES": [
        "Elements",
        "Mens Rea",
        "Recklessness"
    ],
    "HELD": [
        "Liable under Caldwell recklessness. However, Caldwell is no longer the standard, and would likely be decided differently now."
    ],
    "NUMBER": "171",
    "TYPE": "Case",
    "YEAR": "1986",
    "SUMMARY": [
        "15 y.o. boy threw a petrol bomb on a property. Charged with criminal damage."
    ],
    "CATEGORY": "Elements &mdash; Mens Rea &mdash; Recklessness"
},
{
    "RELATED": [
        "Konzani",
        "Bollom",
        "Savage",
        "Jones",
        "Dica",
        "Lewis",
        "Golding",
        "Wilson",
        "Clarence",
        "DPP v Smith (1961)",
        "Aitken",
        "Emmett"
    ],
    "CATEGORIES": [
        "Non-Fatal Offences",
        "GBH"
    ],
    "HELD": [
        "liable for GBH. Principle: infliction of GBH can be indirect."
    ],
    "NUMBER": "172",
    "CITATION": "Martin [1881",
    "NAME": "Martin",
    "TYPE": "Case",
    "SUMMARY": [
        "The defendant placed an iron bar across a theatre exit and yelled fire. As a result, several people were injured."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; GBH"
},
{
    "RELATED": [
        "Pommell",
        "Symonds",
        "Bell",
        "Bird",
        "Bourne",
        "Buckoke v GLC",
        "Clegg",
        "Kitson",
        "O'Grady",
        "Gladstone Williams",
        "Devlin v Armstrong",
        "Lee"
    ],
    "CITATION": "Martin [1989] 1 All ER 652",
    "NAME": "Martin [1989]",
    "CATEGORIES": [
        "General Defences",
        "Duress",
        "Of Circumstances"
    ],
    "HELD": [
        "actually duress by threat, but treated as duress of circumstances. Test for duress of circumstances: 1) Was the defendant compelled to act because they had a reasonable belief that death of serious injury would occur if they did not act? 2) would a sober person of reasonable firmness sharing the characteristics of the defendant responded to the situation in the same way?"
    ],
    "NUMBER": "173",
    "TYPE": "Case",
    "YEAR": "1989",
    "SUMMARY": [
        "The defendant was convicted of driving whilst disqualified. He had driven his stepson to work for the first day of a new job. The stepson was going to be late for work, and the wife said that she was going to commit suicide if he was late for work (and she had suicidal tendencies). So, he drove the stepson to work because of a threat of death/serious injury."
    ],
    "CATEGORY": "General Defences &mdash; Duress &mdash; Of Circumstances"
},
{
    "RELATED": [
        "Devlin v Armstrong",
        "AG Ref no 2 of 1983",
        "Bird",
        "Palmer v the Queen",
        "Symonds",
        "Bourne",
        "F v West Berkshire Health Authority",
        "Lee",
        "Pommell",
        "R v Jones (Margaret)",
        "Gladstone Williams",
        "Kitson"
    ],
    "CITATION": "Martin [2002] 1 Cr App R 27",
    "NAME": "Martin [2002]",
    "CATEGORIES": [
        "General Defences",
        "Self-Defence"
    ],
    "HELD": [
        "all-or-nothing defence. Self-defence did not apply because of excessive force. Guilty for murder."
    ],
    "NUMBER": "174",
    "TYPE": "Case",
    "YEAR": "2002",
    "SUMMARY": [
        "A farmhouse had been burgled before and the defendant was waiting this time. The burglars entered the property. The defendant shot point-blank at the intruders, and one was killed, another wounded. Defendant convicted of murder."
    ],
    "CATEGORY": "General Defences &mdash; Self-Defence"
},
{
    "YEAR": "1968",
    "HELD": [
        "defendant was liable because his actions led to the death of the victim, and the series of actions was seen as a single transaction."
    ],
    "NUMBER": "175",
    "CITATION": "Masilela (1968)-South Africa",
    "NAME": "Masilela",
    "SUMMARY": [
        "The defendant throttled the victim, then set fire to the house to cover it up, believing that the victim was dead. The victim died from the fumes."
    ],
    "TYPE": "Case"
},
{
    "RELATED": [
        "Sweet v Parsley",
        "R v G",
        "Gammon (Hong Kong) Ltd v A-G of Hong Kong",
        "Jackson",
        "Deyemi and Another",
        "K",
        "Alphacell Ltd v Woodward",
        "Barnfather",
        "B (a minor) v DPP",
        "Prince",
        "Malcolm",
        "Santana"
    ],
    "CITATION": "Matudi [2003] EWCA Crim 697",
    "NAME": "Matudi",
    "CATEGORIES": [
        "Elements",
        "Strict Liability"
    ],
    "HELD": [
        "guilty, mala prohibitor offence. No mens rea required."
    ],
    "NUMBER": "176",
    "TYPE": "Case",
    "YEAR": "2003",
    "SUMMARY": [
        "The defendant tried to import animal products contrary to the Products and Animal Origin (Import and Export) Regulations 1996."
    ],
    "CATEGORY": "Elements &mdash; Strict Liability"
},
{
    "RELATED": [
        "Kaitamaki v the Queen",
        "Bree",
        "R (F) v DPP and A",
        "Morgan v DPP",
        "Bowler",
        "Linekar",
        "R v B",
        "Olugboja",
        "Devonald",
        "R v B (2013)",
        "Elbekkay",
        "Williams"
    ],
    "CITATION": "McNally (2013) EWCA Crim 1051",
    "NAME": "McNally",
    "CATEGORIES": [
        "Sexual Offences",
        "Rape"
    ],
    "HELD": [
        "defendant guilty of rape. The deception of gender vitiated consent. Obiter: in HIV cases, if the defendant is asked about their status and lies, that is an act of deception and there may be a conclusive presumption of lack of consent."
    ],
    "NUMBER": "177",
    "TYPE": "Case",
    "YEAR": "2013",
    "SUMMARY": [
        "A female passed herself of as a male and had sexual relations with the complainant."
    ],
    "CATEGORY": "Sexual Offences &mdash; Rape"
},
{
    "RELATED": [
        "Kennedy (No. 2)",
        "Kennedy (No. 1)",
        "Dias",
        "Dyson",
        "Holland",
        "Hughes",
        "Environment Agency v Empress Car Company",
        "Dhaliwal",
        "White",
        "Jordan",
        "Williams (1991)",
        "Blaue"
    ],
    "CITATION": "Michael Kane v HM Advocate (2009) Scotland",
    "NAME": "Michael Kane v HM Advocate (2009) Scotland",
    "CATEGORIES": [
        "Elements",
        "Causation",
        "Drug Administration"
    ],
    "HELD": [
        "Application of South African/American law, saying that there was no break in the causal link between the supply of the drug by the defendant and the victim&#8217;s choice to ingest the drug. The supplier provides immediate access to the mode of death and it is reasonably foreseeable that the victim will die."
    ],
    "NUMBER": "178",
    "TYPE": "Case",
    "YEAR": "2009",
    "SUMMARY": [
        "A drug supplier gave the victim drugs and was charged with culpable homicide."
    ],
    "CATEGORY": "Elements &mdash; Causation &mdash; Drug Administration"
},
{
    "RELATED": [
        "Shivpuri",
        "Mohan",
        "Whybrow",
        "AG Ref no 1 of 1992",
        "Campbell",
        "Walker and Hayles",
        "Griffin",
        "Jones [1990]",
        "Pace and Rogers",
        "Geddes",
        "Gibbins and Proctor",
        "Clegg"
    ],
    "CITATION": "Millard and Vernon [1987] Crim LR 393",
    "NAME": "Millard and Vernon",
    "CATEGORIES": [
        "Attempt"
    ],
    "HELD": [
        "for attempted criminal damage, there needs to be an intention to destroy someone else&#8217;s property."
    ],
    "NUMBER": "179",
    "TYPE": "Case",
    "YEAR": "1987",
    "SUMMARY": [
        "The defendants were football supporters who repeatedly pushed against a wooden wall on a stand at a football ground in attempt to break it or were being reckless to whether or not it was damaged."
    ],
    "CATEGORY": "Attempt"
},
{
    "RELATED": [
        "Fagan",
        "Santana",
        "Gemma Evans",
        "People v Beardsley",
        "Stone and Dobinson",
        "Smith (1975)",
        "Airedale NHS Trust v Bland",
        "Dytham",
        "Pittwood",
        "Instan",
        "AG Ref no 4 of 1980",
        "Gnango"
    ],
    "CITATION": "Miller [1983] 2 AC 161",
    "NAME": "Miller",
    "CATEGORIES": [
        "Elements",
        "Coincidence of MR and AR",
        "Continuing Act",
        "Elements",
        "Actus Reus",
        "Omissions",
        "4. Supervening Fault"
    ],
    "HELD": [
        "the HOL found him responsible for arson because he created a dangerous situation. Where you set in motion a danger to another&#8217;s life, limb, or property, then there is a superimposed duty to take reasonable, practical steps to counteract the harm that you have set in motion (Lord Diplock)."
    ],
    "NUMBER": "180",
    "TYPE": "Case",
    "YEAR": "1983",
    "SUMMARY": [
        "Miller set fire to a mattress because he dropped a lit cigarette. He woke up and the mattress was smouldering; he left the mattress on fire and moved to another room without alerting the fire brigade."
    ],
    "CATEGORY": "Elements &mdash; Coincidence of MR and AR &mdash; Continuing Act / Elements &mdash; Actus Reus &mdash; Omissions &mdash; 4. Supervening Fault"
},
{
    "RELATED": [
        "Gemma Evans",
        "Willoughby",
        "Bateman",
        "Wacker",
        "R v S",
        "Adomako",
        "Dudley and Stephens",
        "Hancock and Shankland",
        "Santana",
        "Chan Wing Siu",
        "Miller",
        "Greatrex"
    ],
    "CITATION": "Misra [2004] EWCA Crim 2375",
    "NAME": "Misra",
    "CATEGORIES": [
        "Gross Negligence Manslaughter"
    ],
    "HELD": [
        "upheld test from Adomako. The jury decides whether the actions of the defendant are grossly negligent; if so, then it is a criminal act. Conviction upheld."
    ],
    "NUMBER": "181",
    "TYPE": "Case",
    "YEAR": "2004",
    "SUMMARY": [
        "The defendant was guilty of medical malfeasance, and the victim died. Defendant charged with gross negligence manslaughter."
    ],
    "CATEGORY": "Gross Negligence Manslaughter"
},
{
    "RELATED": [
        "Gnango",
        "AG Ref no 4 of 1980",
        "AG Ref no 3 of 1994",
        "Latimer",
        "Miller",
        "Thabo Meli",
        "Pembliton",
        "Church",
        "Fagan",
        "Santana",
        "Gemma Evans",
        "Holland"
    ],
    "CITATION": "Mitchell [1983] QB 741",
    "NAME": "Mitchell",
    "CATEGORIES": [
        "Elements",
        "Coincidence of MR and AR",
        "Transferred Malice"
    ],
    "HELD": [
        "the appellant was liable for the death of the old woman. There was no requirement that the unlawful act be directed at the victim."
    ],
    "NUMBER": "182",
    "TYPE": "Case",
    "YEAR": "1983",
    "SUMMARY": [
        "The appellant tried to jump the queue at the Post Office. An elderly man took issue with this behaviour and challenged him. The appellant hit and pushed the old man, who fell and knocked over others in the queue, including an old woman who broke her leg and subsequently died. The appellant was convicted of manslaughter."
    ],
    "CATEGORY": "Elements &mdash; Coincidence of MR and AR &mdash; Transferred Malice"
},
{
    "RELATED": [
        "Geddes",
        "Jones [1990]",
        "Campbell",
        "Griffin",
        "Walker and Hayles",
        "Pace and Rogers",
        "Shivpuri",
        "Whybrow",
        "Millard and Vernon",
        "AG Ref no 1 of 1992",
        "Jackson",
        "Kingston"
    ],
    "CITATION": "Mohan [1976] QB 1",
    "NAME": "Mohan",
    "CATEGORIES": [
        "Attempt"
    ],
    "HELD": [
        "Not guilty. Intent is an essential ingredient of an attempt and is only mens rea of attempts. Recklessness would often suffice as the mens rea for the full offence, attempt was a separate and often more serious offence with its own separate mens rea."
    ],
    "NUMBER": "183",
    "TYPE": "Case",
    "YEAR": "1976",
    "SUMMARY": [
        "The defendant was driving his car and responded to a police officer&#8217;s signal to stop. The defendant slowed down but then accelerated towards the officer, before driving away. The defendant as charged with attempt to cause bodily harm."
    ],
    "CATEGORY": "Attempt"
},
{
    "RELATED": [
        "Nedrick",
        "Hyam v DPP",
        "Woollin",
        "Cunningham",
        "Kingston",
        "Gibbins and Proctor",
        "Caldwell",
        "AG Ref no 4 of 1980",
        "Malcolm",
        "Westminster City Council v Croyalgrange Ltd",
        "Elliott v C (a minor)",
        "Hancock and Shankland"
    ],
    "CITATION": "Moloney [1985] AC 905",
    "NAME": "Moloney",
    "CATEGORIES": [
        "Elements",
        "Mens Rea",
        "Murder",
        "Intent",
        "Oblique"
    ],
    "HELD": [
        "the &#8220;golden rule&#8221; (Lord Bridge) of murder. The defendant has to intend to kill the victim or cause serious injury. Test: Was the death a natural consequence of the defendant&#8217;s action? If it was a natural consequence, did the defendant foresee it as a natural consequence? If the answer to both questions in yes, then the defendant intended the consequences. No requisite mens rea for murder, changed to manslaughter."
    ],
    "NUMBER": "184",
    "TYPE": "Case",
    "YEAR": "1985",
    "SUMMARY": [
        "The defendant got into an argument with his stepfather over who could load and shoot a gun faster. The stepfather was killed."
    ],
    "CATEGORY": "Elements &mdash; Mens Rea / Murder &mdash; Intent &mdash; Oblique"
},
{
    "RELATED": [
        "Bree",
        "Bowler",
        "Linekar",
        "Olugboja",
        "McNally",
        "Barnes",
        "Williams",
        "R v B (2013)",
        "R (F) v DPP and A",
        "Devonald",
        "Kaitamaki v the Queen",
        "Aitken"
    ],
    "CITATION": "Morgan v DPP [1976] AC 182",
    "NAME": "Morgan v DPP",
    "CATEGORIES": [
        "Sexual Offences",
        "Rape",
        "Non-Fatal Offences",
        "Consent"
    ],
    "HELD": [
        "guilty, because the belief was not genuine. Principle: the belief in consent must be genuine and honest. There was requirement that the belief be reasonable. Applied as a general principle to other crimes where the fault is intention or Cunningham recklessness. No longer applies to rape cases, still used in other offences."
    ],
    "NUMBER": "185",
    "TYPE": "Case",
    "YEAR": "1976",
    "SUMMARY": [
        "The defendants were RAF officers out drinking with a friend. Morgan invited them back to his house to have sex with his wife while he watched. He told them his wife would consent, although she would pretend to protest. During the rape, the complainant sustained serious injuries requiring hospital treatment. Defendants were convicted, and they appealed claiming that there was no requirement that the belief in consent be reasonably held."
    ],
    "CATEGORY": "Sexual Offences &mdash; Rape / Non-Fatal Offences &mdash; Consent"
},
{
    "RELATED": [
        "Bainbridge",
        "DPP for NI v Maxwell",
        "Rodgers",
        "Stewart",
        "Jogee",
        "Greatrex",
        "Mahmood (Asaf)",
        "Roberts [1993]",
        "Rahman",
        "Anderson and Morris",
        "Stringer",
        "Chan Wing Siu"
    ],
    "CITATION": "National Coal Board v Gamble [1959] 1 QB 11",
    "NAME": "National Coal Board v Gamble",
    "CATEGORIES": [
        "Joint Enterprise",
        "Secondary Liability"
    ],
    "HELD": [
        "NCB was liable as an accomplice because the positive act of assistance had been voluntarily done with the knowledge of the circumstances constituting the offence."
    ],
    "NUMBER": "186",
    "TYPE": "Case",
    "YEAR": "1959",
    "SUMMARY": [
        "A lorry driver was carrying a load of coal. The weighbridge operator noticed the truck was overfull but allowed the driver to pass anyway. The driver was found guilty of using an overloaded lorry on the highway. The NCB was also liable because it was their operator who let him pass."
    ],
    "CATEGORY": "Joint Enterprise &mdash; Secondary Liability"
},
{
    "RELATED": [
        "Hyam v DPP",
        "Moloney",
        "Woollin",
        "Gibbins and Proctor",
        "Cunningham",
        "AG Ref no 4 of 1980",
        "Kingston",
        "Westminster City Council v Croyalgrange Ltd",
        "Hancock and Shankland",
        "Elliott v C (a minor)",
        "Caldwell",
        "Gemmell and Richardson"
    ],
    "CITATION": "Nedrick [1986] 1 WLR",
    "NAME": "Nedrick",
    "CATEGORIES": [
        "Elements",
        "Mens Rea",
        "Murder",
        "Intent",
        "Oblique"
    ],
    "HELD": [
        "Jury was misdirected. Test of virtual certainty. Where there is a charge for murder, simple direction (direct intention) is not enough. The jurors should be instructed to find intention. Was there a realisation on behalf of the defendant that death or serious injury was a virtually certain consequence? It is for the jury to decide."
    ],
    "NUMBER": "187",
    "TYPE": "Case",
    "YEAR": "1986",
    "SUMMARY": [
        "Nedrick had a grudge against the victim. He went to her house and poured paraffin through her letter box and set it on fire. A child died in the fire. Nedrick was convicted of murder, and then appealed on misdirection of the jury."
    ],
    "CATEGORY": "Elements &mdash; Mens Rea / Murder &mdash; Intent &mdash; Oblique"
},
{
    "RELATED": [
        "R v JF and NE",
        "Dolby",
        "Dhaliwal",
        "Goodfellow",
        "Roberts [1993]",
        "Donovan",
        "Cheshire",
        "Dietschmann",
        "Rodgers",
        "Hui Chi-Ming",
        "Dadson",
        "National Coal Board v Gamble"
    ],
    "CITATION": "Newbury [1977] AC 500",
    "NAME": "Newbury",
    "CATEGORIES": [
        "Unlawful Act Manslaughter"
    ],
    "HELD": [
        "there was an unlawful act, the mens rea for that was sufficient for the defendant to be held liable for the unlawful death"
    ],
    "NUMBER": "188",
    "TYPE": "Case",
    "YEAR": "1977",
    "SUMMARY": [
        "Defendant threw a concrete block that passed through a railway coach and killed a guard."
    ],
    "CATEGORY": "Unlawful Act Manslaughter"
},
{
    "RELATED": [
        "Clegg",
        "Gladstone Williams",
        "Lee",
        "Dowds",
        "F v West Berkshire Health Authority",
        "Pommell",
        "R v Jones (Margaret)",
        "Kitson",
        "Bird",
        "Dadson",
        "Palmer v the Queen",
        "Bell"
    ],
    "CITATION": "O&#8217;Grady [1987] QB 995",
    "NAME": "O'Grady",
    "CATEGORIES": [
        "General Defences",
        "Mistaken Belief",
        "Intoxication"
    ],
    "HELD": [
        "no defence, liable for the crime. Where a defendant forms a mistaken belief after the voluntary consumption of alcohol, there is no defence for the crimes."
    ],
    "NUMBER": "189",
    "TYPE": "Case",
    "YEAR": "1987",
    "SUMMARY": [
        "The defendant got very drunk, and believed that he needed to defend himself against one of his friends. He killed the friend under this mistaken belief."
    ],
    "CATEGORY": "General Defences &mdash; Mistaken Belief &mdash; Intoxication"
},
{
    "RELATED": [
        "Morgan v DPP",
        "R v B",
        "Bree",
        "R (F) v DPP and A",
        "Kaitamaki v the Queen",
        "R v B (2013)",
        "Linekar",
        "Williams",
        "Devonald",
        "Elbekkay",
        "McNally",
        "Bowler"
    ],
    "CITATION": "Olugboja [1982] QB 320",
    "NAME": "Olugboja",
    "CATEGORIES": [
        "Sexual Offences",
        "Rape"
    ],
    "HELD": [
        "guilty. Test for consent: a trial judge directing the jurors should tell them that they need to &#8220;apply their combined good sense, experience, and knowledge of human nature and modern behaviour&#8221; in order to answer a question of consent."
    ],
    "NUMBER": "190",
    "TYPE": "Case",
    "YEAR": "1982",
    "SUMMARY": [
        "The complainant had been raped by Olugboja&#8217;s friend. He told the complainant that he was going to have sex with her, and ordered her to remove her clothing. She was so overwhelmed and frightened that she gave no objection until after penetration because she was concerned he would ejaculate inside her."
    ],
    "CATEGORY": "Sexual Offences &mdash; Rape"
},
{
    "RELATED": [
        "Shivpuri",
        "Campbell",
        "Geddes",
        "Whybrow",
        "Griffin",
        "Mohan",
        "Millard and Vernon",
        "Walker and Hayles",
        "AG Ref no 1 of 1992",
        "Jones [1990]",
        "Martin [1989]",
        "Greatrex"
    ],
    "CITATION": "Pace and Rogers (2014) EWCA Crim 186",
    "NAME": "Pace and Rogers",
    "CATEGORIES": [
        "Attempt"
    ],
    "HELD": [
        "not liable because the defendants did not have the requisite mens rea for the crime. The prosecution needed to show that the defendants intended to commit the full crime, and there was no evidence to support that claim"
    ],
    "NUMBER": "191",
    "TYPE": "Case",
    "YEAR": "2014",
    "SUMMARY": [
        "Pace and Rogers were suspected of buying stolen scrap metal, so the police set up a sting operation. Undercover officers approached the defendants and offered scrap metal for sale. The officers made various remarks designed to make the defendants think that the metal might be stolen property. The defendants bought it anyway and then were charged with attempting to conceal."
    ],
    "CATEGORY": "Attempt"
},
{
    "RELATED": [
        "Dalloway",
        "Byrne",
        "Hughes",
        "Malcharek and Steel",
        "R v Jewell",
        "Santana",
        "Dyson",
        "Moloney",
        "Dolby",
        "Michael Kane v HM Advocate (2009) Scotland",
        "Clinton",
        "AG Ref no 4 of 1980"
    ],
    "CITATION": "Pagett (1983) 76 Cr App R 279",
    "NAME": "Pagett",
    "CATEGORIES": [
        "Criminal Liability"
    ],
    "HELD": [
        "Pagett was liable for the death because it was his actions that caused the police officers to react instinctively, leading to the death of the girl."
    ],
    "NUMBER": "192",
    "TYPE": "Case",
    "YEAR": "1983",
    "SUMMARY": [
        "Pagett was chased by police, and he kidnapped a young girl. There was a rooftop chase. Pagett held the victim in front of him as a human shield and started to fire at the police officers, who instinctively fired back and the girl was killed."
    ],
    "CATEGORY": "Criminal Liability"
},
{
    "RELATED": [
        "AG Ref no 2 of 1983",
        "Symonds",
        "Bird",
        "Martin [2002]",
        "Devlin v Armstrong",
        "Bell",
        "Gladstone Williams",
        "Pommell",
        "Lee",
        "Martin [1989]",
        "F v West Berkshire Health Authority",
        "Dudley and Stephens"
    ],
    "CITATION": "Palmer v the Queen [1971] AC 814",
    "NAME": "Palmer v the Queen",
    "CATEGORIES": [
        "General Defences",
        "Self-Defence"
    ],
    "HELD": [
        "guilty. The defendant attempted to appeal that manslaughter should have been offered as an alternative to self-defence, but the appeal was dismissed. There is no option for a verdict of manslaughter where a defendant uses excessive force in self-defence. The defence either succeeds in its entirety or fails."
    ],
    "NUMBER": "193",
    "TYPE": "Case",
    "YEAR": "1971",
    "SUMMARY": [
        "The defendant fired shots while trying to escape from a robbery, killing one of his chasers. He claimed that he did not fire the shot which killed the man chasing him."
    ],
    "CATEGORY": "General Defences &mdash; Self-Defence"
},
{
    "RELATED": [
        "Bedder v DPP",
        "Dawes",
        "Ibrams",
        "Smith (Morgan)",
        "AG for Jersey v Holley",
        "Camplin",
        "R v Zebedee",
        "Duffy",
        "Ahluwalia",
        "R v Jewell",
        "Barnsdale-Quean",
        "Thornton (No. 2)"
    ],
    "CITATION": "Pearson [1992] Crim LR 193",
    "NAME": "Pearson",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation/Loss of Control"
    ],
    "HELD": [
        "changed to manslaughter; the actions of their father should have been considered during the original trial. The defendant can claim provocation where the supposedly provocative behaviour is not unlawful or unreasonable, or where he is mistaken (perhaps through voluntary intoxication) as to the meaning of the other person&#8217;s behaviour, or even where the supposedly provocative behaviour was in fact a response to his own."
    ],
    "NUMBER": "194",
    "TYPE": "Case",
    "YEAR": "1992",
    "SUMMARY": [
        "Two brothers killed their abusive father. Charged with murder."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation/Loss of Control"
},
{
    "RELATED": [
        "Latimer",
        "AG Ref no 4 of 1980",
        "AG Ref no 3 of 1994",
        "Gnango",
        "Mitchell",
        "Pittwood",
        "Holland",
        "Cheshire",
        "Gemmell and Richardson",
        "Kennedy (No. 1)",
        "Blaue",
        "Instan"
    ],
    "CITATION": "Pembliton [1874] LR 2 CCR 119",
    "NAME": "Pembliton",
    "CATEGORIES": [
        "Elements",
        "Transferred Malice"
    ],
    "HELD": [
        "not transferred malice because it is not the intended crime; it was destruction of property instead of harming the victim."
    ],
    "NUMBER": "195",
    "TYPE": "Case",
    "YEAR": "1874",
    "SUMMARY": [
        "The defendant was in a pub and chased the victim; the defendant threw a stone at the victim&#8217;s head, missed, and shattered a window."
    ],
    "CATEGORY": "Elements &mdash; Transferred Malice"
},
{
    "RELATED": [
        "Pittwood",
        "Instan",
        "Dytham",
        "Santana",
        "Airedale NHS Trust v Bland",
        "Miller",
        "Smith (1975)",
        "Stone and Dobinson",
        "Gemma Evans",
        "Fagan",
        "Gibbins and Proctor",
        "Deller"
    ],
    "CITATION": "People v Beardsley (1907) 150 Mich. 206",
    "NAME": "People v Beardsley",
    "CATEGORIES": [
        "Elements",
        "Actus Reus",
        "Omissions"
    ],
    "HELD": [
        "on appeal, no duty of care was owed by the defendant to the victim because she was an adult and her past activities indicated that she had experience &#8220;carousing with men and consuming alcohol and drugs.&#8221; Therefore, while the defendant may have had a moral duty to protect her, he did not have a legal one."
    ],
    "NUMBER": "196",
    "TYPE": "Case",
    "YEAR": "1907",
    "SUMMARY": [
        "While his wife was out of town, the defendant spent the weekend with another woman. The woman he spent the week with tried to commit suicide by injecting herself with morphine in the presence of the defendant, although he was too intoxicated to offer assistance. After she died, the defendant was convicted of manslaughter for failing to render aid."
    ],
    "CATEGORY": "Elements &mdash; Actus Reus &mdash; Omissions"
},
{
    "RELATED": [
        "Miller",
        "Airedale NHS Trust v Bland",
        "Smith (1975)",
        "Fagan",
        "Stone and Dobinson",
        "Instan",
        "Dytham",
        "People v Beardsley",
        "Gemma Evans",
        "Santana",
        "Deller",
        "Gibbins and Proctor"
    ],
    "CITATION": "Pittwood (1902) 19 TLR 37",
    "NAME": "Pittwood",
    "CATEGORIES": [
        "Elements",
        "Actus Reus",
        "Omissions",
        "1. Contractual Duty"
    ],
    "HELD": [
        "the defendant had a more general duty in criminal law to those who would foreseeably use the railway crossing, not just what was said in his contract. He was liable for the death of the victim."
    ],
    "NUMBER": "197",
    "TYPE": "Case",
    "YEAR": "1902",
    "SUMMARY": [
        "Mr. Pittwood was a rail crossing keeper who went off for his lunch leaving the crossing open. Someone was hit by a passing train and died."
    ],
    "CATEGORY": "Elements &mdash; Actus Reus &mdash; Omissions &mdash; 1. Contractual Duty"
},
{
    "RELATED": [
        "Martin [1989]",
        "Symonds",
        "Bell",
        "Bourne",
        "Clegg",
        "Palmer v the Queen",
        "F v West Berkshire Health Authority",
        "Dadson",
        "Lee",
        "Martin [2002]",
        "Gladstone Williams",
        "Kitson"
    ],
    "CITATION": "Pommell [1995] 2 Cr App R 607",
    "NAME": "Pommell",
    "CATEGORIES": [
        "General Defences",
        "Duress",
        "Of Circumstances"
    ],
    "HELD": [
        "duress of circumstance could apply here. It can apply to everything except murder, attempted murder, and some forms of treason."
    ],
    "NUMBER": "198",
    "TYPE": "Case",
    "YEAR": "1995",
    "SUMMARY": [
        "Pommell said that he had been given a firearm by a person unknown, and then had intended to give it to his brother to hand into the police the next day."
    ],
    "CATEGORY": "General Defences &mdash; Duress &mdash; Of Circumstances"
},
{
    "RELATED": [
        "Stewart",
        "Greatrex",
        "Carey",
        "Chan Wing Siu",
        "Rafferty",
        "Bainbridge",
        "Jogee",
        "Stringer",
        "Rahman",
        "AG Ref no 1 of 1975",
        "English and Weddle",
        "Mahmood (Asaf)"
    ],
    "CITATION": "Powell and Daniels [1999] AC 1",
    "NAME": "Powell and Daniels",
    "CATEGORIES": [
        "Joint Enterprise"
    ],
    "HELD": [
        "the defendants argued that they needed to intend death or serious injury, claimed that it was unfair that recklessness constituted liability. The court disagreed; defendants cannot insulate themselves on policy: the protection of society requires that they be held liable."
    ],
    "NUMBER": "199",
    "TYPE": "Case",
    "YEAR": "1999",
    "SUMMARY": [
        "The parties rang the doorbell of the victim (a drug dealer). It was uncertain who carried out the murder (shot) but it was not Powell or Daniels."
    ],
    "CATEGORY": "Joint Enterprise"
},
{
    "RELATED": [
        "Barnfather",
        "Matudi",
        "R v G",
        "Deyemi and Another",
        "Sweet v Parsley",
        "Gammon (Hong Kong) Ltd v A-G of Hong Kong",
        "B (a minor) v DPP",
        "Alphacell Ltd v Woodward",
        "Jackson",
        "K",
        "Santana",
        "Hughes"
    ],
    "CITATION": "Prince (1875) LR 2 CCR 154",
    "NAME": "Prince",
    "CATEGORIES": [
        "Elements",
        "Strict Liability"
    ],
    "HELD": [
        "the prosecution did not have to prove that the defendant was aware or ought to have been aware that she was older. The fact that she was a minor when he abducted her made him liable, even though his belief that she was older was viable. Guilty under strict liability."
    ],
    "NUMBER": "200",
    "TYPE": "Case",
    "YEAR": "1875",
    "SUMMARY": [
        "Prince was charged with abducting a young girl out of the lawful possession of her parents, even though he thought that she was older."
    ],
    "CATEGORY": "Elements &mdash; Strict Liability"
},
{
    "RELATED": [
        "Bowler",
        "Olugboja",
        "Williams",
        "R v B (2013)",
        "Kaitamaki v the Queen",
        "Morgan v DPP",
        "Linekar",
        "R (F) v DPP and A",
        "Devonald",
        "Elbekkay",
        "Bree",
        "McNally"
    ],
    "CITATION": "R v B [2006] EWCA 2945, [2007] 1 WLR 1567",
    "NAME": "R v B",
    "CATEGORIES": [
        "Sexual Offences",
        "Rape"
    ],
    "HELD": [
        "no liability for rape. The intercourse was consensual; the HIV status of the defendant did not change the nature of the act itself."
    ],
    "NUMBER": "201",
    "TYPE": "Case",
    "YEAR": "2006",
    "SUMMARY": [
        "The complainant and defendant were discovered having sexual intercourse. Upon discovery, the complainant said she was raped. When the defendant was arrested, he admitted to being HIV positive. The claimant was not aware of his status."
    ],
    "CATEGORY": "Sexual Offences &mdash; Rape"
},
{
    "RELATED": [
        "Morgan v DPP",
        "Williams",
        "Linekar",
        "Olugboja",
        "Elbekkay",
        "Devonald",
        "Kaitamaki v the Queen",
        "Bree",
        "McNally",
        "R (F) v DPP and A",
        "Bowler",
        "R v B"
    ],
    "CITATION": "R v B (2013) EWCA Crim 823",
    "NAME": "R v B (2013)",
    "CATEGORIES": [
        "Sexual Offences",
        "Rape"
    ],
    "HELD": [
        "no deception as to the nature/purpose of the act."
    ],
    "NUMBER": "202",
    "TYPE": "Case",
    "YEAR": "2013",
    "SUMMARY": [
        "The defendant posed as two different American men and induced his girlfriend to do sexually degrading acts in front of a webcam."
    ],
    "CATEGORY": "Sexual Offences &mdash; Rape"
},
{
    "RELATED": [
        "Morgan v DPP",
        "Kaitamaki v the Queen",
        "Elbekkay",
        "Williams",
        "Devonald",
        "Bowler",
        "Olugboja",
        "Bree",
        "R v B",
        "Linekar",
        "McNally",
        "R v B (2013)"
    ],
    "CITATION": "R (F) v DPP and A (2013) EWHC 945",
    "NAME": "R (F) v DPP and A",
    "CATEGORIES": [
        "Sexual Offences",
        "Rape"
    ],
    "HELD": [
        "the defendant refusing to comply with the wishes of the complainant vitiated consent. The complainant was deprived of the choice relating to the crucial feature on which the original consent to sexual intercourse was based."
    ],
    "NUMBER": "203",
    "TYPE": "Case",
    "YEAR": "2013",
    "SUMMARY": [
        "The complainant consented to intercourse with the caveat that the defendant not ejaculate inside her. The defendant did so anyway."
    ],
    "CATEGORY": "Sexual Offences &mdash; Rape"
},
{
    "RELATED": [
        "Alphacell Ltd v Woodward",
        "Prince",
        "B (a minor) v DPP",
        "Matudi",
        "K",
        "Deyemi and Another",
        "Jackson",
        "Gammon (Hong Kong) Ltd v A-G of Hong Kong",
        "Barnfather",
        "Sweet v Parsley",
        "Gibbins and Proctor",
        "Latimer"
    ],
    "CITATION": "R v G [2008] Crim LR 818",
    "NAME": "R v G",
    "CATEGORIES": [
        "Elements",
        "Strict Liability"
    ],
    "HELD": [
        "the defendant was liable because the offence was created to protect young people from others, to prevent premature sexual activity, and the label of rape is attached even if it is proven that the claimant was willing."
    ],
    "NUMBER": "204",
    "TYPE": "Case",
    "YEAR": "2008",
    "SUMMARY": [
        "Age based offence: complainant was 15. Defendant charged with statutory rape."
    ],
    "CATEGORY": "Elements &mdash; Strict Liability"
},
{
    "RELATED": [
        "Heard",
        "Court",
        "Devonald",
        "Williams",
        "R (F) v DPP and A",
        "Linekar",
        "McNally",
        "Morgan v DPP",
        "Elbekkay",
        "R v B",
        "Olugboja",
        "Bree"
    ],
    "CITATION": "R v H [2005] EWCA Crim 732. [2005] Cr App R 9",
    "NAME": "R v H",
    "CATEGORIES": [
        "Sexual Offences",
        "Indecent Assault"
    ],
    "HELD": [
        "guilty because of sexual motive. Two part test: would reasonable people consider the conduct in the particular circumstances before them to be sexual in nature? If so, then would reasonable people consider the conduct of the defendant in the view of the circumstances to have intended them to be sexual?"
    ],
    "NUMBER": "205",
    "TYPE": "Case",
    "YEAR": "2005",
    "SUMMARY": [
        "Defendant came up to the claimant in a public park and asked her if &#8220;she fancied a shag,&#8221; then grabbed hold of her and dragged her towards him, putting his hand over her mouth."
    ],
    "CATEGORY": "Sexual Offences &mdash; Indecent Assault"
},
{
    "RELATED": [
        "Ibrams",
        "AG for Jersey v Holley",
        "Barnsdale-Quean",
        "Pearson",
        "Bedder v DPP",
        "R v Zebedee",
        "Humphreys",
        "Thornton (No. 2)",
        "Duffy",
        "Ahluwalia",
        "Camplin",
        "Baillie"
    ],
    "CITATION": "R v Jewell (2014) EWCA Crim 414",
    "NAME": "R v Jewell",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation/Loss of Control"
    ],
    "HELD": [
        "insufficient evidence of any loss of control. Convicted of murder, appealed. COA: the killing had too much preparation to be considered loss of control; re-affirmed R v Clinton"
    ],
    "NUMBER": "206",
    "TYPE": "Case",
    "YEAR": "2014",
    "SUMMARY": [
        "Jewell was in a dispute with a work colleague, and went to his house and shot him point blank; brought extra ammunition and considered suicide as well. Had prepared for the murder and written suicide notes. Claimed he had lost control and shot the victim &#8220;as though in a dream.&#8221;"
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation/Loss of Control"
},
{
    "RELATED": [
        "Goodfellow",
        "Dhaliwal",
        "Newbury",
        "Dolby",
        "Jones",
        "JJC v Eisenhower",
        "Misra",
        "Gianetto",
        "Linekar",
        "Konzani",
        "Chan Wing Siu",
        "Dica"
    ],
    "CITATION": "R v JF and NE (2015) EWCA Crim 351",
    "NAME": "R v JF and NE",
    "CATEGORIES": [
        "Unlawful Act Manslaughter"
    ],
    "HELD": [
        "appeal dismissed by sentence reduced. The defendants were aware that there were people in the building, and had the necessary actus reus and mens rea for arson. Ratio: all that was needed for conviction for unlawful act manslaughter was actus reus and mens rea for the initial crime; if that was shown, then it was a normative question of dangerousness: would the danger have been foreseeable to a normal and reasonable person?"
    ],
    "NUMBER": "207",
    "TYPE": "Case",
    "YEAR": "2015",
    "SUMMARY": [
        "Two young boys set a fire in an abandoned building. A homeless man was in the building and died from smoke inhalation. Defendants convicted of unlawful act manslaughter, then appealed."
    ],
    "CATEGORY": "Unlawful Act Manslaughter"
},
{
    "RELATED": [
        "Dear",
        "AG Ref no 4 of 1980",
        "Watson",
        "Dawson",
        "Airedale NHS Trust v Bland",
        "Abbott",
        "Rafferty",
        "Golding",
        "Smith",
        "Kennedy (No. 2)",
        "Collins v Wilcock",
        "Richardson"
    ],
    "CITATION": "R v JM and SM (2012) EWCA Crim 2293",
    "NAME": "R v JM and SM",
    "CATEGORIES": [
        "Manslaughter"
    ],
    "HELD": [
        "it was foreseeable that some harm would occur, and a reasonable bystander could see that the actions of the defendant would lead to some harm against the victim, and physical harm in the form of shock would occur as a question of fact not law. However, there was found to be no liability in this case because the medical condition was outside the realm of foreseeability."
    ],
    "NUMBER": "208",
    "TYPE": "Case",
    "YEAR": "2012",
    "SUMMARY": [
        "The victim was a nightclub bouncer who tried to eject the defendant. There was another bouncer who, along with victim, tried to get the defendant out some back stairs. The victim died from renal artery aneurism when the defendant fought back. Was the defendant liable?"
    ],
    "CATEGORY": "Manslaughter"
},
{
    "RELATED": [
        "Dadson",
        "Buckoke v GLC",
        "Clegg",
        "Lee",
        "O'Grady",
        "Pommell",
        "Martin [1989]",
        "Bourne",
        "Bell",
        "F v West Berkshire Health Authority",
        "Gladstone Williams",
        "Palmer v the Queen"
    ],
    "CITATION": "R v Jones (Margaret) [2006] UKHL 16, [2007] 1 AC 136",
    "NAME": "R v Jones (Margaret)",
    "CATEGORIES": [
        "General Defences",
        "Justification",
        "Prevention of a Crime"
    ],
    "HELD": [
        "The defendants said that their actions were justified because they were acting to prevent a crime (an illegal war in Iraq). The HoL said that where it says &#8220;prevention of a crime&#8221; it means prevention of a potential crime under domestic law; not something that could potentially be a crime under international law."
    ],
    "NUMBER": "209",
    "TYPE": "Case",
    "YEAR": "2006",
    "SUMMARY": [
        "Margaret Jones and others were protesting about the Iraq war which they believed was illegal and not supported in international law. They then broke into US military bases in the UK using wire-cutting equipment in order to continue their protest."
    ],
    "CATEGORY": "General Defences &mdash; Justification &mdash; Prevention of a Crime"
},
{
    "RELATED": [
        "Wacker",
        "Gemma Evans",
        "Adomako",
        "Willoughby",
        "Bateman",
        "Misra",
        "Gibbins and Proctor",
        "Camplin",
        "Martin",
        "Dawes",
        "Jones",
        "Rodgers"
    ],
    "CITATION": "R v S [2015] EWCA Crim 558",
    "NAME": "R v S",
    "CATEGORIES": [
        "Gross Negligence Manslaughter"
    ],
    "HELD": [
        "guilty, although appeal on sentence term allowed. It was grossly negligent to point the gun and pull the trigger without ensuring that it was safe to do so. Objective test: would a person of the defendant&#8217;s age and experience have foreseen the risk of death? If so, was the defendant&#8217;s conduct so far below the standard of care required that it was grossly negligent and it constituted a crime?"
    ],
    "NUMBER": "210",
    "TYPE": "Case",
    "YEAR": "2015",
    "SUMMARY": [
        "The defendant and victim were both minors. The defendant was given a gun.He took the chamber out, and did not realise there was still a bullet in the chamber. He fired the gun at the victim (his girlfriend) and she died. Charged with gross negligence manslaughter."
    ],
    "CATEGORY": "Gross Negligence Manslaughter"
},
{
    "RELATED": [
        "AG for Jersey v Holley",
        "Humphreys",
        "R v Jewell",
        "Bedder v DPP",
        "Pearson",
        "Ahluwalia",
        "Duffy",
        "Camplin",
        "Thornton (No. 2)",
        "Ibrams",
        "Dawes",
        "Smith (Morgan)"
    ],
    "CITATION": "R v Zebedee (2012) EWCA Crim 1428",
    "NAME": "R v Zebedee",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation",
        "Murder",
        "Defences",
        "Provocation/Loss of Control"
    ],
    "HELD": [
        "no loss of control, no &#8220;justifiable sense of being seriously wronged&#8221;"
    ],
    "NUMBER": "211",
    "TYPE": "Case",
    "YEAR": "2012",
    "SUMMARY": [
        "Zebedee was looking after his aged father with Alzheimer&#8217;s. The father was killed by Zebedee who had continually soiled himself because of the Alzheimer&#8217;s and the son had reportedly been abused as a child (brought up bad memories)."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation / Murder &mdash; Defences &mdash; Provocation/Loss of Control"
},
{
    "RELATED": [
        "DPP v Smith",
        "Donovan",
        "A v United Kingdom",
        "Konzani",
        "Fagan",
        "Smith v Woking Police",
        "Morgan v DPP",
        "Savage",
        "Aitken",
        "Venna",
        "Bollom",
        "Tabassum"
    ],
    "CITATION": "R (on the Application of T) v DPP [2003]",
    "NAME": "R (on the Application of T) v DPP",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "ABH"
    ],
    "HELD": [
        "this constitutes actual bodily harm."
    ],
    "NUMBER": "212",
    "TYPE": "Case",
    "YEAR": "2003",
    "SUMMARY": [
        "The defendant punched the victim who experienced a &#8220;momentary loss of sensory function.&#8221; (knocked unconscious)"
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; ABH"
},
{
    "RELATED": [
        "Uddin",
        "Davies v DPP",
        "National Coal Board v Gamble",
        "Roberts [1993]",
        "Rodgers",
        "Rahman",
        "Mahmood (Asaf)",
        "Hui Chi-Ming",
        "Chan Wing Siu",
        "Powell and Daniels",
        "Jogee",
        "English and Weddle"
    ],
    "CITATION": "Rafferty [2008] Crim LR 218",
    "NAME": "Rafferty",
    "CATEGORIES": [
        "Joint Enterprise",
        "Withdrawal"
    ],
    "HELD": [
        "because Rafferty left, he withdrew from the unlawful enterprise and was therefore not liable for the death of the victim."
    ],
    "NUMBER": "213",
    "TYPE": "Case",
    "YEAR": "2008",
    "SUMMARY": [
        "Rafferty and some associates planned to assault and rob the victim at a beach. After they captured the victim, Rafferty left for 40 mins with the victim&#8217;s ATM card to try and use it. When he returned, the violence had escalated and the others had beaten and drowned the victim."
    ],
    "CATEGORY": "Joint Enterprise &mdash; Withdrawal"
},
{
    "RELATED": [
        "Anderson and Morris",
        "National Coal Board v Gamble",
        "Powell and Daniels",
        "Stewart",
        "Rodgers",
        "Rafferty",
        "Davies v DPP",
        "Bainbridge",
        "DPP for NI v Maxwell",
        "English and Weddle",
        "Greatrex",
        "Stringer"
    ],
    "CITATION": "Rahman [2008] UKHL 45",
    "NAME": "Rahman",
    "CATEGORIES": [
        "Joint Enterprise"
    ],
    "HELD": [
        "the court rejected this argument. Just because the principal had an undisclosed intent to kill, it did not automatically change the fact that it is reasonably foreseeable. The principal is liable for murder if they intend to kill or cause GBH. The secondary is liable for murder if they foresee the possibility of the principal doing so."
    ],
    "NUMBER": "214",
    "TYPE": "Case",
    "YEAR": "2008",
    "SUMMARY": [
        "Longstanding dispute between different groups of Eurasians. The defendants turned up with a variety of weapons. One of the victims was stabbed to death. Rahman was convicted of murder, even though there was no evidence that he had stabbed to death the victim. He was held liable because he had lent himself to the cause. Rahman argued that although he knew there was an intention to cause bodily harm, the principal offender may have developed an intention to kill unbeknownst to Rahman."
    ],
    "CATEGORY": "Joint Enterprise"
},
{
    "RELATED": [
        "Aitken",
        "Jones",
        "Morgan v DPP",
        "Haystead v CC of Derbyshire",
        "Jheeta",
        "Dica",
        "Collins v Wilcock",
        "Barnes",
        "DPP v K",
        "Wilson [1996]",
        "Fagan",
        "Tabassum"
    ],
    "CITATION": "Richardson [1998] 2 Cr App R 200",
    "NAME": "Richardson",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Battery",
        "Non-Fatal Offences",
        "Consent"
    ],
    "HELD": [
        "no liability for battery. Identity and nature of the act can vitiate consent. Principle: what vitiates consent? 1) The nature of the act itself 2) the identity of the person."
    ],
    "NUMBER": "215",
    "TYPE": "Case",
    "YEAR": "1998",
    "SUMMARY": [
        "The defendant had his dentistry license suspended, but continued to practice without one. A patient found out and the defendant was charged with battery."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Battery / Non-Fatal Offences &mdash; Consent"
},
{
    "RELATED": [
        "Williams (1991)",
        "Jordan",
        "Dhaliwal",
        "Hughes",
        "Dias",
        "Kennedy (No. 1)",
        "Smith",
        "Kennedy (No. 2)",
        "Latif",
        "Dyson",
        "Michael Kane v HM Advocate (2009) Scotland",
        "White"
    ],
    "CITATION": "Roberts [1971] EWCA Crim 4",
    "NAME": "Roberts",
    "CATEGORIES": [
        "Elements",
        "Causation",
        "Fight and Flight"
    ],
    "HELD": [
        "Defendant is liable. Test for liability: look at the actions of the victim and ask whether it breaks the chain of causation. Was the response of the victim reasonably foreseeable as a response? Was it a natural consequence of the defendant&#8217;s unlawful action? If yes, then there is liability. However, if it was a &#8216;daft&#8217; response, there is no liability."
    ],
    "NUMBER": "216",
    "TYPE": "Case",
    "YEAR": "1971",
    "SUMMARY": [
        "Victim was a young female hitchhiker who jumped out of a moving car after the defendant carried out unwanted sexual advances. She suffered more serious injuries because of her fall."
    ],
    "CATEGORY": "Elements &mdash; Causation &mdash; Fight and Flight"
},
{
    "RELATED": [
        "Jogee",
        "Hui Chi-Ming",
        "Carey",
        "National Coal Board v Gamble",
        "Stringer",
        "English and Weddle",
        "AG Ref no 1 of 1975",
        "Bainbridge",
        "Rahman",
        "Chan Wing Siu",
        "Davies v DPP",
        "Stewart"
    ],
    "CITATION": "Roberts [1993] 1 All ER 583",
    "NAME": "Roberts [1993]",
    "CATEGORIES": [
        "Joint Enterprise"
    ],
    "HELD": [
        "the fault of a secondary perpetrator for murder does not need to be the same mens rea as a primary perpetrator; they simply need to be liable for recklessness (they only need to contemplate the crime as a realistic possibility, not even a probability)."
    ],
    "NUMBER": "217",
    "TYPE": "Case",
    "YEAR": "1993",
    "SUMMARY": [
        "Robbery took place at a house. No weapons were taken into the house by the robbers. However, one of the robbers took a knife from the kitchen and stabbed the householder. D2 said that he had realized that there may be harm inflicted; there was a &#8220;real, not a fanciful proposition&#8221; of harm."
    ],
    "CATEGORY": "Joint Enterprise"
},
{
    "RELATED": [
        "Bainbridge",
        "National Coal Board v Gamble",
        "Jogee",
        "DPP for NI v Maxwell",
        "Stewart",
        "Uddin",
        "Davies v DPP",
        "Stringer",
        "Mahmood (Asaf)",
        "Rahman",
        "Powell and Daniels",
        "Hui Chi-Ming"
    ],
    "CITATION": "Rodgers [2003] 1 WLR 1374",
    "NAME": "Rodgers",
    "CATEGORIES": [
        "Joint Enterprise",
        "Secondary Liability"
    ],
    "HELD": [
        "Guilty of manslaughter. Holding the tourniquet made Rodgers a joint principal offender. Even though the final action was by the victim, Rodgers was acting in tandem to create the unlawful act. Overturned by Kennedy No. 2"
    ],
    "NUMBER": "218",
    "TYPE": "Case",
    "YEAR": "2003",
    "SUMMARY": [
        "Rodgers helped the victim inject himself with heroin by holding a belt around his arm to raise the veins. The victim died. Rodgers was charged with manslaughter."
    ],
    "CATEGORY": "Joint Enterprise &mdash; Secondary Liability"
},
{
    "RELATED": [
        "Fagan",
        "Miller",
        "Gemma Evans",
        "Smith (1975)",
        "Pittwood",
        "Stone and Dobinson",
        "Dytham",
        "People v Beardsley",
        "Airedale NHS Trust v Bland",
        "Instan",
        "Latimer",
        "Church"
    ],
    "NAME": "Santana",
    "TYPE": "Case",
    "AKA": "Santana-Bermudez",
    "CATEGORIES": [
        "Elements",
        "Coincidence of MR and AR",
        "Continuing Act",
        "Elements",
        "Actus Reus",
        "Omissions",
        "3. Voluntary Assumption"
    ],
    "HELD": [
        "there was a liability on behalf of the defendant because by word or action he had created a dangerous situation and exposed the officer to a risk of injury. The defendant owed a duty of care to the victim and his failure to warn/inform the officer of the risk caused the infliction of bodily harm."
    ],
    "NUMBER": "219",
    "YEAR": "2004",
    "CITATION": "Santana-Bermudez [2004] Crim LR 471",
    "SUMMARY": [
        "A female police officer approached the defendant and asked if he had any sharps on him, and he said no. The officer began to search him, and pricked her finger on a needle that was in his pocket. The defendant was charged with assault."
    ],
    "CATEGORY": "Elements &mdash; Coincidence of MR and AR &mdash; Continuing Act / Elements &mdash; Actus Reus &mdash; Omissions &mdash; 3. Voluntary Assumption"
},
{
    "RELATED": [
        "Lewis",
        "DPP v Smith (1961)",
        "Golding",
        "Jones",
        "A v United Kingdom",
        "Wilson",
        "Bollom",
        "Clarence",
        "Aitken",
        "Dica",
        "Martin",
        "Konzani"
    ],
    "CITATION": "Savage [1992] 1 AC 699",
    "NAME": "Savage",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "GBH",
        "Non-Fatal Offences",
        "Wounding"
    ],
    "HELD": [
        "it was not necessary to demonstrate the defendant had the mens rea in relation to the level of harm inflicted. It was enough that they intended/could foresee some harm as a result of their actions. Constructive liability: actus reus/mens rea is needed for the lesser crime, but the actual liability depends on the degree of harm."
    ],
    "NUMBER": "220",
    "TYPE": "Case",
    "YEAR": "1992",
    "SUMMARY": [
        "Savage threw a pint of beer over the victim in a pub; the glass slipped out of her hand and it accidentally cut the victim&#8217;s wrist. Savage said that she had only intended to pour the beer over the victim. Convicted under s.47 and appealed on jury misdirection."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; GBH / Non-Fatal Offences &mdash; Wounding"
},
{
    "RELATED": [
        "Fitzpatrick",
        "Willoughby",
        "Whybrow",
        "Bowler",
        "Lee",
        "Savage",
        "Carter v Richardson",
        "Dietschmann",
        "Mahmood (Asaf)",
        "Gemma Evans",
        "Barnes",
        "Goodfellow"
    ],
    "CITATION": "Sharp [1987] Crim LR 566",
    "NAME": "Sharp",
    "CATEGORIES": [
        "Voluntary Exposure to Risk"
    ],
    "HELD": [
        "defence of duress was removed because he knowingly exposed himself to the risk of duress by earlier engagement with the other guilty parties. Followed principle from Fitzpatrick."
    ],
    "NUMBER": "221",
    "TYPE": "Case",
    "YEAR": "1987",
    "SUMMARY": [
        "Armed robbery where the duressee had been part of a gang and earlier offences had been committed."
    ],
    "CATEGORY": "Voluntary Exposure to Risk"
},
{
    "RELATED": [
        "Knuller",
        "Dhaliwal",
        "Gibbins and Proctor",
        "O'Grady",
        "Stewart",
        "Donovan",
        "Hancock and Shankland",
        "Hasan",
        "Williams",
        "Jones",
        "Devlin v Armstrong",
        "Adomako"
    ],
    "CITATION": "Shaw v DPP [1962] AC 220",
    "NAME": "Shaw v DPP",
    "CATEGORIES": [
        "Corruption of Public Morals"
    ],
    "HELD": [
        "the jury needed to look at the conduct and decide if it \u2018disgusted and annoyed them as ordinary citizens.&#8217; If yes, then there were elements of corruption."
    ],
    "NUMBER": "222",
    "TYPE": "Case",
    "YEAR": "1962",
    "SUMMARY": [
        "The defendants published a directory of prostitutes and were charged with conspiring to corrupt public morals."
    ],
    "CATEGORY": "Corruption of Public Morals"
},
{
    "RELATED": [
        "Walker and Hayles",
        "Jones [1990]",
        "Millard and Vernon",
        "AG Ref no 1 of 1992",
        "Pace and Rogers",
        "Geddes",
        "Mohan",
        "Griffin",
        "Campbell",
        "Whybrow",
        "Smith",
        "Church"
    ],
    "CITATION": "Shivpuri [1987] AC 1, 2 All ER 334",
    "NAME": "Shivpuri",
    "CATEGORIES": [
        "Attempt"
    ],
    "HELD": [
        "The court held that they could still be held liable for the fault crime Anderton v Ryan was overruled. The only occasion where impossibility applies for there not to be an attempt is &#8220;abstract legal possibility&#8221; (no substantive offense)"
    ],
    "NUMBER": "223",
    "TYPE": "Case",
    "YEAR": "1987",
    "SUMMARY": [
        "The defendant thought that they were importing drugs into the country, but it turned out that they had vegetable material akin to snuff."
    ],
    "CATEGORY": "Attempt"
},
{
    "RELATED": [
        "Tabassum",
        "Brown",
        "Wilson [1996]",
        "Dica",
        "Morgan v DPP",
        "Richardson",
        "Jheeta",
        "Barnes",
        "Jones",
        "Aitken",
        "A v United Kingdom",
        "Lewis"
    ],
    "CITATION": "Slingsby [1995] Crim LR 571",
    "NAME": "Slingsby",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Consent",
        "Non-Fatal Offences",
        "Foreseeability"
    ],
    "HELD": [
        "not liable. There was no harm intended, and the court determined that it was not sufficient for the prosecution to show that injury was caused, they also had to prove that harm was intended."
    ],
    "NUMBER": "224",
    "TYPE": "Case",
    "YEAR": "1995",
    "SUMMARY": [
        "The defendant and the victim were engaged in a sexual relationship. At some point, the victim&#8217;s rectum was torn and the victim died of septicaemia. The defendant was charged with manslaughter."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Consent / Non-Fatal Offences &mdash; Foreseeability"
},
{
    "RELATED": [
        "Jordan",
        "Cheshire",
        "Roberts",
        "Hughes",
        "Williams (1991)",
        "Kennedy (No. 2)",
        "Kennedy (No. 1)",
        "Dias",
        "Dhaliwal",
        "Environment Agency v Empress Car Company",
        "Holland",
        "Blaue"
    ],
    "CITATION": "Smith [1959] 2 QB 423",
    "NAME": "Smith",
    "CATEGORIES": [
        "Elements",
        "Causation",
        "Medical Treatment"
    ],
    "HELD": [
        "The stab wound was an operating cause of death and therefore the defendant was liable for the death, despite the fact that the medical treatment was negligent."
    ],
    "NUMBER": "225",
    "TYPE": "Case",
    "YEAR": "1959",
    "SUMMARY": [
        "A soldier got in a fight and stabbed the victim in an army camp. The victim was dropped off the stretcher, kicked, and then finally brought to the treatment area. When he arrived, the medical team failed to see his collapsed lung and he died."
    ],
    "CATEGORY": "Elements &mdash; Causation &mdash; Medical Treatment"
},
{
    "RELATED": [
        "Stone and Dobinson",
        "Gemma Evans",
        "Dytham",
        "Miller",
        "People v Beardsley",
        "Fagan",
        "Pittwood",
        "Instan",
        "Santana",
        "Airedale NHS Trust v Bland",
        "Deller",
        "Gibbins and Proctor"
    ],
    "CITATION": "Smith (1975)",
    "NAME": "Smith (1975)",
    "CATEGORIES": [
        "Elements",
        "Actus Reus",
        "Omissions",
        "3. Family Duty"
    ],
    "HELD": [
        "any duty of care that the husband might have owed her to seek medical attention was removed because she voluntarily refused it. No liability for her death."
    ],
    "NUMBER": "226",
    "TYPE": "Case",
    "YEAR": "1975",
    "SUMMARY": [
        "A wife chose to have a birth at home, and delivered a stillborn child. The wife died subsequent to the stillborn birth. She had pleaded with her husband not to get her medical attention prior to her death."
    ],
    "CATEGORY": "Elements &mdash; Actus Reus &mdash; Omissions &mdash; 3. Family Duty"
},
{
    "RELATED": [
        "Ireland",
        "Tuberville v Savage",
        "Venna",
        "Constanza",
        "Ireland and Burstow",
        "Dica",
        "A v United Kingdom",
        "DPP v K",
        "Jheeta",
        "DPP v Smith",
        "Golding",
        "Emmett"
    ],
    "CITATION": "Smith v Chief Superintendent of Woking Police Station (1983) 76 Cr App R 234",
    "NAME": "Smith v Woking Police",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Assault",
        "Immediacy"
    ],
    "HELD": [
        "peering in through a window to a bedroom in which a woman is getting dressed or undressed can constitute assault. The &#8216;immediacy&#8217; requirement of assault, properly understood, cannot just mean in the <span class=\"it\">seconds</span> immediately afterwards."
    ],
    "NUMBER": "227",
    "TYPE": "Case",
    "YEAR": "1983",
    "SUMMARY": [
        "A woman had opened the window of her room to see the defendant looking through the window of her bedroom. The woman feared immediate violence from the person staring at her. Guilty for assault."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Assault &mdash; Immediacy"
},
{
    "RELATED": [
        "R v Zebedee",
        "Thornton (No. 2)",
        "AG for Jersey v Holley",
        "Dawes",
        "Ibrams",
        "R v Jewell",
        "Camplin",
        "Baillie",
        "Humphreys",
        "Ahluwalia",
        "Pearson",
        "Duffy"
    ],
    "CITATION": "Smith (Morgan) [2001] 1 AC 146",
    "NAME": "Smith (Morgan)",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation/Loss of Control"
    ],
    "HELD": [
        "it isn&#8217;t necessarily about the reasonable person; you should leave it to the jury&#8217;s good sense about the loss of self-control. If their emotions were disturbed, loss of control should be offered as a partial defence (Lord Hoffman). Overturned by A-G for Jersey v Holley"
    ],
    "NUMBER": "228",
    "TYPE": "Case",
    "YEAR": "2001",
    "SUMMARY": [
        "Smith suffered from clinical depression, lowered powers of self-control, had an avoidant personality, and was an alcoholic. He had a disagreement with a neighbour over gardening tools, hit him over the head and killed him."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation/Loss of Control"
},
{
    "RELATED": [
        "Bainbridge",
        "DPP for NI v Maxwell",
        "Jogee",
        "Rodgers",
        "National Coal Board v Gamble",
        "Rafferty",
        "Powell and Daniels",
        "Carey",
        "AG Ref no 1 of 1975",
        "Mahmood (Asaf)",
        "Roberts [1993]",
        "Stringer"
    ],
    "CITATION": "Stewart [1995] 3 All ER 159, 1 Cr App R 441",
    "NAME": "Stewart",
    "CATEGORIES": [
        "Joint Enterprise",
        "Secondary Liability"
    ],
    "HELD": [
        "the beating of the shopkeeper and the motivations of D1 took the murder outside the joint enterprise. No liability on secondary parties for murder."
    ],
    "NUMBER": "229",
    "TYPE": "Case",
    "YEAR": "1995",
    "SUMMARY": [
        "Plan was to commit a burglary. D3 kept watch outside while D1 and Stewart went inside. Stewart had a knife and he and D3 knew that D1 had violent tendencies. D1 beat the shopkeeper to death. Argument was made that the killing was racially motivated purely on the part of D1."
    ],
    "CATEGORY": "Joint Enterprise &mdash; Secondary Liability"
},
{
    "RELATED": [
        "Smith (1975)",
        "Instan",
        "Airedale NHS Trust v Bland",
        "Miller",
        "Gemma Evans",
        "Pittwood",
        "People v Beardsley",
        "Dytham",
        "Fagan",
        "Santana",
        "Deller",
        "Le Brun"
    ],
    "CITATION": "Stone and Dobinson [1977] QB 354",
    "NAME": "Stone and Dobinson",
    "CATEGORIES": [
        "Elements",
        "Actus Reus",
        "Omissions",
        "3. Family Duty"
    ],
    "HELD": [
        "Stone owed a duty of care to his sister because they were blood relatives. Dobinson had a voluntary assumption of duty because she had precluded others from coming to the aid of the victim. They were liable for her death because they showed a reckless disregard for her health and welfare (Lord Lane)."
    ],
    "NUMBER": "230",
    "TYPE": "Case",
    "YEAR": "1977",
    "SUMMARY": [
        "Dobinson lived with her lover, Stone. Stone&#8217;s sick sister came to live with them and was found dead with signs of bed sores, septicemia, and malnutrition. Stone and Dobinson were prosecuted for manslaughter."
    ],
    "CATEGORY": "Elements &mdash; Actus Reus &mdash; Omissions &mdash; 3. Family Duty"
},
{
    "RELATED": [
        "Rafferty",
        "Powell and Daniels",
        "Bainbridge",
        "Stewart",
        "Uddin",
        "DPP for NI v Maxwell",
        "National Coal Board v Gamble",
        "AG Ref no 1 of 1975",
        "Carey",
        "Anderson and Morris",
        "English and Weddle",
        "Davies v DPP"
    ],
    "CITATION": "Stringer [2011] EWCA Crim 1396",
    "NAME": "Stringer",
    "CATEGORIES": [
        "Joint Enterprise"
    ],
    "HELD": [
        "it was up to the jury as to whether or not Stringer encouraged the crime because he was not present at the time. Initial conviction was unsafe, overturned on appeal."
    ],
    "NUMBER": "231",
    "TYPE": "Case",
    "YEAR": "2011",
    "SUMMARY": [
        "The victim was injured, then went after his attackers. Stringer was part of a group that went after him, but was not involved in stabbing the victim."
    ],
    "CATEGORY": "Joint Enterprise"
},
{
    "RELATED": [
        "Deyemi and Another",
        "Barnfather",
        "Prince",
        "R v G",
        "Alphacell Ltd v Woodward",
        "Gammon (Hong Kong) Ltd v A-G of Hong Kong",
        "B (a minor) v DPP",
        "K",
        "Jackson",
        "Matudi",
        "Blaue",
        "People v Beardsley"
    ],
    "CITATION": "Sweet v Parsley [1970] AC 132. 163",
    "NAME": "Sweet v Parsley",
    "CATEGORIES": [
        "Elements",
        "Strict Liability"
    ],
    "HELD": [
        "defendant not liable. The court needs to differentiate between mala in se and mala prohibitor crimes. Mala prohibitor crimes do not need mens rea, but mala in se crimes do. Said that drug charges should be considered mala in se, and therefore Sweet was not liable because she had no mens rea for the crime."
    ],
    "NUMBER": "232",
    "TYPE": "Case",
    "YEAR": "1970",
    "SUMMARY": [
        "Sweet let out rooms to the \u2018beatnik&#8217; community. She only entered the rooms to use the kitchen, collect letters, and to collect rent. There was cannabis resin and other paraphernalia found on the premises, and she was charged for possession of it. Sweet argued she had no knowledge of it."
    ],
    "CATEGORY": "Elements &mdash; Strict Liability"
},
{
    "RELATED": [
        "Bell",
        "Pommell",
        "Martin [1989]",
        "AG Ref no 2 of 1983",
        "Palmer v the Queen",
        "Devlin v Armstrong",
        "Martin [2002]",
        "Bird",
        "Buckoke v GLC",
        "Bourne",
        "R v Jones (Margaret)",
        "Dadson"
    ],
    "CITATION": "Symonds [1998] Crim LR 280",
    "NAME": "Symonds",
    "CATEGORIES": [
        "General Defences",
        "Duress",
        "Of Circumstances",
        "General Defences",
        "Self-Defence"
    ],
    "HELD": [
        "Could be either Duress of Circumstances or Self-Defence. The CoA said that both defences should be left to the jury with a very careful direction as to the differences between them. Where it is self-defence and it might include a mistaken belief in circumstances, the judge should tell the jury should that the defendant&#8217;s belief should not only be honest and genuine, but also reasonable belief."
    ],
    "NUMBER": "233",
    "TYPE": "Case",
    "YEAR": "1998",
    "SUMMARY": [
        "While driving, someone was drunk and stuck their hands through the car window of the defendant. The defendant drove away, and the victim was dragged along."
    ],
    "CATEGORY": "General Defences &mdash; Duress &mdash; Of Circumstances / General Defences &mdash; Self-Defence"
},
{
    "RELATED": [
        "Brown",
        "Richardson",
        "Dica",
        "Slingsby",
        "Barnes",
        "Aitken",
        "Jheeta",
        "Morgan v DPP",
        "Jones",
        "Wilson [1996]",
        "Collins v Wilcock",
        "DPP v K"
    ],
    "CITATION": "Tabassum [2000] Crim LR 686",
    "NAME": "Tabassum",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Consent"
    ],
    "HELD": [
        "guilty. Principle: it is not just the nature of the act/identity of the person; there can be vitiation of consent where there is a situation that goes to the quality of the act as well as to the nature of the act itself."
    ],
    "NUMBER": "234",
    "TYPE": "Case",
    "YEAR": "2000",
    "SUMMARY": [
        "The defendant said he was medically qualified and was creating a database for a cancer survey. Fondled three victims because of his deception."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Consent"
},
{
    "RELATED": [
        "Wood",
        "Byrne",
        "Dowds",
        "Dietschmann",
        "Golds",
        "Ahluwalia",
        "Dawes",
        "Camplin",
        "R v Jewell",
        "Asmelash",
        "Doughty",
        "Pearson"
    ],
    "CITATION": "Tandy (1988) 87 Cr App R 45",
    "NAME": "Tandy",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Diminished Responsibility",
        "Abnormality of Mind"
    ],
    "HELD": [
        "Two predicates for alcoholism as an abnormality of mind. 1) The alcoholism has to have impaired the judgment evidenced by a brain disease (there must be brain damage) so that the defendant <span class=\"it\">had</span> to drink (involuntary). 2) if the first drink of the day had been voluntarily consumed, then the defence would not be available. Contradicted by Wood [2009]"
    ],
    "NUMBER": "235",
    "TYPE": "Case",
    "YEAR": "1988",
    "SUMMARY": [
        "Tandy was an alcoholic who drank a bottle of vodka then strangled her 11 y.o. daughter. Question of whether alcoholism could be an abnormality of mind."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Diminished Responsibility &mdash; Abnormality of Mind"
},
{
    "RELATED": [
        "Gemma Evans",
        "Le Brun",
        "Latimer",
        "Mitchell",
        "Gnango",
        "Church",
        "Miller",
        "Fagan",
        "Santana",
        "AG Ref no 3 of 1994",
        "AG Ref no 4 of 1980",
        "Barnfather"
    ],
    "CITATION": "Thabo Meli [1954] 1 WLR 228",
    "NAME": "Thabo Meli",
    "CATEGORIES": [
        "Elements",
        "Coincidence of MR and AR",
        "Transaction Theory"
    ],
    "HELD": [
        "liable for murder because the death of the victim was caused by one continuous transaction with no novus actus interveniens. Although the defendant did not possess the mens rea at the time of the actus reus for the death of the victim, he was still liable because the series of actions were treated as one transaction (Lord Reid)."
    ],
    "NUMBER": "236",
    "TYPE": "Case",
    "YEAR": "1954",
    "SUMMARY": [
        "The victim was lured to a mountain hut and hit over the head by the defendant with a metal bar. The defendant thought the victim was dead, so he rolled the victim down to the bottom of the mountain. The victim wasn&#8217;t dead, but died from hypothermia and exposure."
    ],
    "CATEGORY": "Elements &mdash; Coincidence of MR and AR &mdash; Transaction Theory"
},
{
    "RELATED": [
        "Baillie",
        "AG for Jersey v Holley",
        "Pearson",
        "Ibrams",
        "Barnsdale-Quean",
        "Duffy",
        "R v Jewell",
        "Camplin",
        "Bedder v DPP",
        "Humphreys",
        "Ahluwalia",
        "R v Zebedee"
    ],
    "CITATION": "Thornton (No. 2) [1996] 1 WLR 1174",
    "NAME": "Thornton (No. 2)",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Provocation/Loss of Control"
    ],
    "HELD": [
        "conviction quashed on misdirection. The jury should have been directed to take into account her mental characteristics in assessing the standard of control expected of the defendant. Overturned in A-G for Jersey v Holley."
    ],
    "NUMBER": "237",
    "TYPE": "Case",
    "YEAR": "1996",
    "SUMMARY": [
        "Thornton killed her abusive husband. However, she suffered from battered women&#8217;s syndrome and a personality disorder, which were not originally taken into account. Convicted of murder because jury directed on provocation/loss of control."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Provocation/Loss of Control"
},
{
    "RELATED": [
        "Smith v Woking Police",
        "Constanza",
        "Venna",
        "Ireland",
        "Ireland and Burstow",
        "Fagan",
        "Slingsby",
        "Collins v Wilcock",
        "Wilson [1996]",
        "Richardson",
        "Brown",
        "Jones"
    ],
    "CITATION": "Tuberville v Savage (1669) 1 Mod Rep 362",
    "NAME": "Tuberville v Savage",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Assault"
    ],
    "HELD": [
        "words can negate a threatening action (assault). The defendant&#8217;s gesture may have been threatening, but the words indicated that no violence would ensue."
    ],
    "NUMBER": "238",
    "TYPE": "Case",
    "YEAR": "1669",
    "SUMMARY": [
        "The defendant put his hand on his sword and stated, &#8216;if it were not assize-time, I would not take such language from you&#8217;. Assize-time is when the judges were in the town for court sessions."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Assault"
},
{
    "RELATED": [
        "Rodgers",
        "Davies v DPP",
        "Chan Wing Siu",
        "Rahman",
        "Powell and Daniels",
        "Carey",
        "National Coal Board v Gamble",
        "Hui Chi-Ming",
        "Greatrex",
        "Stewart",
        "Stringer",
        "Roberts [1993]"
    ],
    "CITATION": "Uddin [1998] 2 All ER 744",
    "NAME": "Uddin",
    "CATEGORIES": [
        "Joint Enterprise"
    ],
    "HELD": [
        "still liable, but retrial ordered on question of fact and degree."
    ],
    "NUMBER": "239",
    "TYPE": "Case",
    "YEAR": "1998",
    "SUMMARY": [
        "Jury had to determine if it was more dangerous to club someone than to kick them with your foot."
    ],
    "CATEGORY": "Joint Enterprise"
},
{
    "RELATED": [
        "Constanza",
        "Tuberville v Savage",
        "Richardson",
        "Collins v Wilcock",
        "Ireland",
        "Haystead v CC of Derbyshire",
        "Smith v Woking Police",
        "Fagan",
        "Ireland and Burstow",
        "DPP v K",
        "Emmett",
        "Savage"
    ],
    "CITATION": "Venna [1975] 3 WLR 737",
    "NAME": "Venna",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Assault",
        "Non-Fatal Offences",
        "Battery"
    ],
    "HELD": [
        "liable for assault and battery. Recklessness does not excuse the harm caused. Established Cunningham recklessness as the predominant test for assault/battery cases."
    ],
    "NUMBER": "240",
    "TYPE": "Case",
    "YEAR": "1975",
    "SUMMARY": [
        "The defendant was causing a disturbance with others late one night. The police were called, and the defendant resisted arrest and kicked the police officers trying to arrest him. The defendant claimed he had not heard that he was being arrested and was only kicking out because he was knocked to the ground."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Assault / Non-Fatal Offences &mdash; Battery"
},
{
    "RELATED": [
        "Willoughby",
        "Bateman",
        "Gemma Evans",
        "R v S",
        "Adomako",
        "Misra",
        "DPP v Pal",
        "Smith (Morgan)",
        "Rodgers",
        "Dadson",
        "Shaw v DPP",
        "Fagan"
    ],
    "CITATION": "Wacker [2002] EWCA Crim 1944, [2003] QB 1207, [2003] 4 All ER 295",
    "NAME": "Wacker",
    "CATEGORIES": [
        "Gross Negligence Manslaughter"
    ],
    "HELD": [
        "Consent does not preclude liability for harm; irrespective of consent, there was a duty of care owed. Defendant liable for gross negligence manslaughter."
    ],
    "NUMBER": "241",
    "TYPE": "Case",
    "YEAR": "2002",
    "SUMMARY": [
        "The defendant was a truck driver who was trying to smuggle illegal immigrants from Rotterdam to Dover. For the inspection, the driver closed one of the key air vents which caused 58 of the 60 people to die. Defendant claimed there was no duty of care: the acceptance of the victims to this degree of risk precluded any responsibility on behalf of the defendant."
    ],
    "CATEGORY": "Gross Negligence Manslaughter"
},
{
    "RELATED": [
        "El Ghazal",
        "Barnard",
        "Allen",
        "Fagan",
        "Smith (1975)",
        "Deller",
        "Tabassum",
        "Dalloway",
        "R v Zebedee",
        "Thabo Meli",
        "Baillie",
        "R v B (2013)"
    ],
    "CITATION": "Walker [1962] Crim LR 458",
    "NAME": "Walker",
    "CATEGORIES": [
        "Conspiracy"
    ],
    "HELD": [
        "not guilty. The parties had not gone beyond the stage of discussing the possibility of the ulterior offense and there was no definite action taken to do so/no agreement"
    ],
    "NUMBER": "242",
    "TYPE": "Case",
    "YEAR": "1962",
    "SUMMARY": [
        "The defendant discussed with others a proposal to carry out a robbery."
    ],
    "CATEGORY": "Conspiracy"
},
{
    "RELATED": [
        "Shivpuri",
        "Dawes",
        "Malcharek and Steel",
        "Asmelash",
        "Millard and Vernon",
        "R v Zebedee",
        "R v Jewell",
        "Camplin",
        "Humphreys",
        "Campbell",
        "AG Ref no 4 of 1980",
        "Geddes"
    ],
    "CITATION": "Walker and Hayles (1990) 90 Cr App R 226",
    "NAME": "Walker and Hayles",
    "CATEGORIES": [
        "Attempt",
        "Murder"
    ],
    "HELD": [
        "liable for attempted murder. Talked about difference between direct and oblique intention; oblique intention would now be a misdirection because of Woollin."
    ],
    "NUMBER": "243",
    "TYPE": "Case",
    "YEAR": "1990",
    "SUMMARY": [
        "The victim had been engaged in an affair with Walker&#8217;s sister. It ended badly, and there was a dispute. In order to teach the victim a lesson, the defendant dropped him out of a balcony. He was charged with attempted murder"
    ],
    "CATEGORY": "Attempt &mdash; Murder"
},
{
    "RELATED": [
        "AG Ref no 4 of 1980",
        "R v JM and SM",
        "Dear",
        "Airedale NHS Trust v Bland",
        "Dawson",
        "Wacker",
        "Bree",
        "A v United Kingdom",
        "Duffy",
        "Bell",
        "Gemma Evans",
        "Jones"
    ],
    "CITATION": "Watson [1989] Crim LR 733",
    "NAME": "Watson",
    "CATEGORIES": [
        "Manslaughter"
    ],
    "HELD": [
        "question was whether it could be reasonably foreseen that the victim would be distressed. The defendant was aware that the victim needed help and chose to do nothing. Held liable for manslaughter."
    ],
    "NUMBER": "244",
    "TYPE": "Case",
    "YEAR": "1989",
    "SUMMARY": [
        "Burglary of an elderly gentleman&#8217;s house. The intrusion lasted for 1.5 hours; caused distress to the victim and he died. Defendant charged with manslaughter"
    ],
    "CATEGORY": "Manslaughter"
},
{
    "RELATED": [
        "Gibbins and Proctor",
        "Malcolm",
        "Moloney",
        "Hancock and Shankland",
        "Gemmell and Richardson",
        "Hyam v DPP",
        "Kingston",
        "Elliott v C (a minor)",
        "Caldwell",
        "Nedrick",
        "Cunningham",
        "Dytham"
    ],
    "CITATION": "Westminster City Council v Croyalgrange Ltd [1986] 2 All ER 353",
    "NAME": "Westminster City Council v Croyalgrange Ltd",
    "CATEGORIES": [
        "Elements",
        "Mens Rea",
        "Knowledge"
    ],
    "HELD": [
        "Knowledge includes wilful blindness when it comes to liability."
    ],
    "NUMBER": "245",
    "TYPE": "Case",
    "YEAR": "1986",
    "SUMMARY": [
        "Defendants ran a sex establishment without a license. They were supposed to have known that they needed one."
    ],
    "CATEGORY": "Elements &mdash; Mens Rea &mdash; Knowledge"
},
{
    "RELATED": [
        "Konzani",
        "Lewis",
        "Savage",
        "DPP v Smith (1961)",
        "Emmett",
        "Clarence",
        "Bollom",
        "Golding",
        "Aitken",
        "A v United Kingdom",
        "Dica",
        "Martin"
    ],
    "CITATION": "Wilson [1984]",
    "NAME": "Wilson",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "GBH"
    ],
    "HELD": [
        "liable for GBH. GBH occurs either where the defendant has directly inflicted the injury by assaulting the victim, or where the defendant has inflicted GBH by doing something intentionally that directly results in force being applied to the body of the victim, so that the victim suffers GBH (Lord Roskill)."
    ],
    "NUMBER": "246",
    "TYPE": "Case",
    "YEAR": "1984",
    "SUMMARY": [
        "The defendant, a motorist, got into an argument and punched a pedestrian."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; GBH"
},
{
    "RELATED": [
        "Kennedy (No. 1)",
        "Environment Agency v Empress Car Company",
        "Latif",
        "Dias",
        "Roberts",
        "Dyson",
        "Williams (1991)",
        "Michael Kane v HM Advocate (2009) Scotland",
        "Jordan",
        "Holland",
        "Cheshire",
        "Dhaliwal"
    ],
    "CITATION": "White [1910] 2 KB 124",
    "NAME": "White",
    "CATEGORIES": [
        "Elements",
        "Causation"
    ],
    "HELD": [
        "not liable for murder, but for attempt. Establishment of the \u2018but for&#8217; test: would the result have occurred but for the actions of the defendant? If yes, the defendant is not liable."
    ],
    "NUMBER": "247",
    "TYPE": "Case",
    "YEAR": "1910",
    "SUMMARY": [
        "The defendant wanted to poison his mother to claim his inheritance. He put some poison in her tea, but medical reports showed that she died from a heart attack and not poison. He was charged with murder."
    ],
    "CATEGORY": "Elements &mdash; Causation"
},
{
    "RELATED": [
        "Jones [1990]",
        "AG Ref no 1 of 1992",
        "Geddes",
        "Campbell",
        "Shivpuri",
        "Pace and Rogers",
        "Mohan",
        "Millard and Vernon",
        "Griffin",
        "Walker and Hayles",
        "Latimer",
        "Holland"
    ],
    "CITATION": "Whybrow (1951) 35 Cr App R 141",
    "NAME": "Whybrow",
    "CATEGORIES": [
        "Attempt",
        "Preparatory Actions"
    ],
    "HELD": [
        "for attempted murder, prima facie requires that the mens rea be to kill."
    ],
    "NUMBER": "248",
    "TYPE": "Case",
    "YEAR": "1951",
    "SUMMARY": [
        "The defendant wanted to electrocute his wife while in the bath."
    ],
    "CATEGORY": "Attempt &mdash; Preparatory Actions"
},
{
    "RELATED": [
        "Bryce",
        "Carter v Richardson",
        "Khan",
        "Calhaem",
        "Cogan and Leak",
        "Clarkson",
        "Coney",
        "Callow v Tillstone",
        "Blakely and Sutton v Chief Constable of West Mercia",
        "Gillick v West Norfolk Health Authority",
        "Lane and Lane",
        "Bourne (1952)"
    ],
    "CITATION": "Wilcox v Jeffrey [1951] 1 All ER 464",
    "NAME": "Wilcox v Jeffrey",
    "CATEGORIES": [
        "Complicity"
    ],
    "HELD": [
        "because the defendant vocalised his support, he was considered to be liable."
    ],
    "NUMBER": "249",
    "TYPE": "Case",
    "YEAR": "1951",
    "SUMMARY": [
        "The defendant supported a celebrated jazz saxophonist entering the country, even though he had been banned."
    ],
    "CATEGORY": "Complicity"
},
{
    "RELATED": [
        "R v B (2013)",
        "Bowler",
        "Elbekkay",
        "R (F) v DPP and A",
        "Kaitamaki v the Queen",
        "Olugboja",
        "Bree",
        "Morgan v DPP",
        "McNally",
        "R v B",
        "Linekar",
        "Devonald"
    ],
    "CITATION": "Williams [1923] 1 KB 340",
    "NAME": "Williams",
    "CATEGORIES": [
        "Sexual Offences",
        "Rape"
    ],
    "HELD": [
        "guilty of rape because the deception went to the nature of the act itself."
    ],
    "NUMBER": "250",
    "TYPE": "Case",
    "YEAR": "1923",
    "SUMMARY": [
        "The defendant was a prior master. He induced a 16-y.o. chorister to engage in sexual intercourse with the explanation that it was a medical exercise that would open up an air passage and improve her singing. She believed him."
    ],
    "CATEGORY": "Sexual Offences &mdash; Rape"
},
{
    "RELATED": [
        "Roberts",
        "Blaue",
        "Dias",
        "Dhaliwal",
        "Cheshire",
        "Holland",
        "Environment Agency v Empress Car Company",
        "Kennedy (No. 2)",
        "Latif",
        "Kennedy (No. 1)",
        "White",
        "Michael Kane v HM Advocate (2009) Scotland"
    ],
    "CITATION": "Williams (1991) 107 LQR 86",
    "NAME": "Williams (1991)",
    "CATEGORIES": [
        "Elements",
        "Causation",
        "Fight and Flight"
    ],
    "HELD": [
        "judgment as to the foreseeability of the victim&#8217;s actions allows the court to take the characteristics of the victim into account (if the actions are foreseeable for someone of their age, sex, and characteristics, then the defendant is liable)."
    ],
    "NUMBER": "251",
    "TYPE": "Case",
    "YEAR": "1991",
    "SUMMARY": [
        "The defendant made unwelcome homosexual advances towards the victim in the car; the victim jumped out of the vehicle and died. The defendant was charged with manslaughter."
    ],
    "CATEGORY": "Elements &mdash; Causation &mdash; Fight and Flight"
},
{
    "RELATED": [
        "Bateman",
        "R v S",
        "Adomako",
        "Wacker",
        "Misra",
        "Gemma Evans",
        "Latimer",
        "Wilson",
        "Barnfather",
        "Khan",
        "Ireland and Burstow",
        "Rafferty"
    ],
    "CITATION": "Willoughby [2004] EWCA Crim 3365",
    "NAME": "Willoughby",
    "CATEGORIES": [
        "Gross Negligence Manslaughter"
    ],
    "HELD": [
        "followed Wacker; consent is irrelevant. Defendant liable for gross negligent manslaughter. Established the circumstances where the judge will tell the jury where there is a duty owed to the victim (instead of the jury deciding): Doctor/patient relationships, creation of duty by statute"
    ],
    "NUMBER": "252",
    "TYPE": "Case",
    "YEAR": "2004",
    "SUMMARY": [
        "The defendant and the victim had a plan to burn down the premises because the victim wanted the insurance money. The victim was killed in the fire that they were involved in setting."
    ],
    "CATEGORY": "Gross Negligence Manslaughter"
},
{
    "RELATED": [
        "Barnes",
        "Morgan v DPP",
        "Dica",
        "Jheeta",
        "Brown",
        "Slingsby",
        "Richardson",
        "Aitken",
        "Tabassum",
        "Jones",
        "Constanza",
        "Haystead v CC of Derbyshire"
    ],
    "CITATION": "Wilson [1996] QB 47",
    "NAME": "Wilson [1996]",
    "CATEGORIES": [
        "Non-Fatal Offences",
        "Consent"
    ],
    "HELD": [
        "no liability for battery, did not follow Brown. This was a &#8220;loving adornment&#8221; (like a tattoo), and was a consensual act between husband and wife. Not a matter for criminal investigation (Justice Russell)."
    ],
    "NUMBER": "253",
    "TYPE": "Case",
    "YEAR": "1996",
    "SUMMARY": [
        "The defendant was supposed to use a hot butter knife to brand his initials into his wife&#8217;s breasts; instead, it was done on her buttock (consensual activity). The victim went to her GP who saw the brand and reported it."
    ],
    "CATEGORY": "Non-Fatal Offences &mdash; Consent"
},
{
    "RELATED": [
        "Byrne",
        "Tandy",
        "Dowds",
        "Dietschmann",
        "Golds",
        "Ahluwalia",
        "Dawes",
        "Pearson",
        "R v Zebedee",
        "Clinton",
        "Barnsdale-Quean",
        "Camplin"
    ],
    "CITATION": "Wood [2009] 1 WLR 496",
    "NAME": "Wood",
    "CATEGORIES": [
        "Murder",
        "Defences",
        "Diminished Responsibility",
        "Abnormality of Mind"
    ],
    "HELD": [
        "disagreed with Tandy, accepted ADS as a mental condition defence; no requirement for it to be an organic brain disease, however if it has progressed that far it strengthens the case. The first drink does not have to be involuntary; it is the effect of the alcohol consumed by the defendant as it appears as a disease when it comes to relevancy."
    ],
    "NUMBER": "254",
    "TYPE": "Case",
    "YEAR": "2009",
    "SUMMARY": [
        "Wood suffered from ADS (Alcohol Dependence Syndrome). He had been drinking for 36 continuous hours, passed out, and couldn&#8217;t remember what happened other than unwanted homosexual advances after which he stabbed the victim to death."
    ],
    "CATEGORY": "Murder &mdash; Defences &mdash; Diminished Responsibility &mdash; Abnormality of Mind"
},
{
    "RELATED": [
        "Hyam v DPP",
        "Moloney",
        "Nedrick",
        "Humphreys",
        "Clinton",
        "Dowds",
        "Doughty",
        "Walker and Hayles",
        "Bedder v DPP",
        "Wood",
        "Abbott",
        "AG Ref no 4 of 1980"
    ],
    "CITATION": "Woollin [1999] 1 AC 82",
    "NAME": "Woollin",
    "CATEGORIES": [
        "Murder",
        "Intent",
        "Oblique"
    ],
    "HELD": [
        "Charge of murder changed to manslaughter. Where the charge is murder and in the simple direction is insufficient, the jury should be directed that they are not entitled to infer the intention unless they feel sure that death or serious bodily harm was a vital certainty as a result of the defendant&#8217;s actions, and that the defendant appreciated that such was the case. Leading precedent."
    ],
    "NUMBER": "255",
    "TYPE": "Case",
    "YEAR": "1999",
    "SUMMARY": [
        "A 3-month old child began to choke on food, and Woollin (his father) got annoyed with the crying. Woollin threw the child across the room, and it died. Woollin claimed that there was no intention to kill or harm the baby, just to quell the crying by trying to throw him into the pram. Convicted of murder."
    ],
    "CATEGORY": "Murder &mdash; Intent &mdash; Oblique"
},
{
    "RELATED": [
        "Stone and Dobinson",
        "Hyam v DPP",
        "Gemmell and Richardson",
        "Alphacell Ltd v Woodward",
        "Pembliton",
        "Dyson",
        "Church",
        "Malcolm",
        "Moloney",
        "Cunningham",
        "Instan",
        "Latimer"
    ],
    "CITATION": "Woolmington v DPP [1935] UKHL 1",
    "NAME": "Woolmington v DPP",
    "CATEGORIES": [
        "Elements"
    ],
    "HELD": [
        "in the House of Lords, Lord Sankey made his &#8220;Golden Thread&#8221; speech, where he stated that the &#8220;golden thread&#8221; of English Criminal Law was for the prosecution to prove the guilt of the defendant beyond a reasonable doubt. The conviction was overturned, and the presumption of innocence became the new standard."
    ],
    "NUMBER": "256",
    "TYPE": "Case",
    "YEAR": "1935",
    "SUMMARY": [
        "The defendant&#8217;s wife left him and went to live with her mother. He stole a shotgun and ammunition from his employer, sawed off the barrel and then went to his mother-in-law&#8217;s house and shot and killed his wife. The defendant claimed that he did not intend to kill his wife, but that he planned only to scare her by threatening to kill himself if she did not return to him. When he was showing her the gun, it accidentally went off and shot her in the heart. The original trial judge had said that it was the responsibility of the defendant to prove that the death was accidental, because according to <span class=\"it\">Foster&#8217;s Crown Law,</span> guilt for murder was assumed automatically."
    ],
    "CATEGORY": "Elements"
},
{
    "RELATED": [
        "R v JF and NE",
        "Goodfellow",
        "Dhaliwal",
        "Newbury",
        "Cheshire",
        "AG for Jersey v Holley",
        "Court",
        "Shaw v DPP",
        "Le Brun",
        "Kennedy (No. 2)",
        "Pommell",
        "Jones [1990]"
    ],
    "FLAGS": [
        "Historical"
    ],
    "CITATION": "Dolby [1982]",
    "NAME": "Dolby",
    "CATEGORIES": [
        "Unlawful Act Manslaughter"
    ],
    "HELD": [
        "<span class=\"lnk caseln\">Causation</span> was only satisfied in <span class=\"lnk caseln\">Unlawful Act Manslaughter</span> if D&#8217;s act was directed against V."
    ],
    "NUMBER": "257",
    "TYPE": "Case",
    "YEAR": "1982",
    "CATEGORY": "Unlawful Act Manslaughter"
},
{
    "RELATED": [
        "R v JF and NE",
        "Dhaliwal",
        "Newbury",
        "Dolby",
        "Constanza",
        "Nedrick",
        "Majewski",
        "Bird",
        "Martin [1989]",
        "Tandy",
        "Tuberville v Savage",
        "Barnes"
    ],
    "FLAGS": [
        "Current Law"
    ],
    "CITATION": "Goodfellow [1986]",
    "NAME": "Goodfellow",
    "CATEGORIES": [
        "Unlawful Act Manslaughter"
    ],
    "HELD": [
        "In <span class=\"lnk caseln\">Unlawful Act Manslaughter</span>, <span class=\"lnk caseln\">causation</span> is satisfied simply by absence of a <span class=\"lnk caseln\">novus actus interveniens</span>. The unlawful act does not itself need to be directed against the victim; it merely has to be caused by the defendant."
    ],
    "NUMBER": "258",
    "TYPE": "Case",
    "YEAR": "1986",
    "SUMMARY": [
        "D wanted a new council house, burnt down his old one. What he didn&#8217;t know was that V was still inside."
    ],
    "CATEGORY": "Unlawful Act Manslaughter"
},
{
    "RELATED": [
        "Adomako",
        "Misra",
        "Gemma Evans",
        "Wacker",
        "Willoughby",
        "R v S",
        "Allen",
        "Clinton",
        "Golds",
        "Elliott v C (a minor)",
        "Duffy",
        "Abbott"
    ],
    "CATEGORIES": [
        "Gross Negligence Manslaughter"
    ],
    "YEAR": "1925",
    "HELD": [
        "In <span class=\"lnk caseln\">Gross Negligence Manslaughter</span>, the liability is a function of the negligence rather than the harm, as it is in tort. The question for the jury is the negligence showed such disregard for the life and safety of others as to <span class=\"it\">goes beyond compensation, and amounts to a crime against the state.</span>  Liberally used by Lord McKay in <span class=\"lnk caseln\">Adomako</span>."
    ],
    "NUMBER": "259",
    "CITATION": "Bateman (1925) 19 Cr App R 8",
    "NAME": "Bateman",
    "TYPE": "Case",
    "CATEGORY": "Gross Negligence Manslaughter"
},
{
    "RELATED": [
        "Savage",
        "Bollom",
        "Emmett",
        "Lewis",
        "Dica",
        "Aitken",
        "Jones",
        "Clarence",
        "Golding",
        "Konzani",
        "Martin",
        "A v United Kingdom"
    ],
    "CATEGORIES": [
        "Non-Fatal Offences",
        "GBH"
    ],
    "HELD": [
        "Grievous Bodily Harm means &#8220;really serious harm&#8221;."
    ],
    "NUMBER": "260",
    "TYPE": "Case",
    "NAME": "DPP v Smith (1961)",
    "CATEGORY": "Non-Fatal Offences &mdash; GBH"
},
{
    "RELATED": [
        "DPP v Smith",
        "R (on the Application of T) v DPP",
        "A v United Kingdom",
        "Tuberville v Savage",
        "Wilson",
        "Richardson",
        "Ireland and Burstow",
        "Brown",
        "Smith v Woking Police",
        "Barnes",
        "Jones",
        "Collins v Wilcock"
    ],
    "CATEGORIES": [
        "Non-Fatal Offences",
        "ABH"
    ],
    "YEAR": "1934",
    "HELD": [
        "For ABH, the injury has to be &#8220;more than merely transient and trifling.&#8221;"
    ],
    "NUMBER": "261",
    "CITATION": "R v Donovan (1934)",
    "NAME": "Donovan",
    "TYPE": "Case",
    "CATEGORY": "Non-Fatal Offences &mdash; ABH"
},
{
    "RELATED": [
        "Konzani",
        "Emmett",
        "Golding",
        "A v United Kingdom",
        "Martin",
        "Clarence",
        "Dica",
        "Savage",
        "Aitken",
        "Wilson",
        "DPP v Smith (1961)",
        "Lewis"
    ],
    "CATEGORIES": [
        "Non-Fatal Offences",
        "GBH"
    ],
    "YEAR": "2003",
    "HELD": [
        "Harm that would be ABH in one person can be GBH in another. V&#8217;s special characteristics (age, state of health) are to be taken into account when considering whether the harm is ABH or GBH."
    ],
    "NUMBER": "262",
    "CITATION": "R v Bollom (2003)",
    "NAME": "Bollom",
    "TYPE": "Case",
    "CATEGORY": "Non-Fatal Offences &mdash; GBH"
},
{
    "HELD": [
        "Lord Lane, discussing consent and non-fatal offences: &#8216;no Queensbury rules here - not in the public interest to allow people to let people try to cause each other ABH for no good reason. So most fights are unlawful, but public policy exceptions apply, such as properly conducted games and sports, on which must pains must be taken to exclude. Or necessary chastisement. Or reasonable surgery.&#8217;"
    ],
    "NUMBER": "263",
    "TYPE": "Case",
    "NAME": "AG Ref no. 6 of 1980",
    "SUMMARY": [
        "Duelling schoolboys. But with fists, and in the street. Both consented. V bruised, bleeding nose. D charged with common assault/battery."
    ]
},
{
    "RELATED": [
        "Case Overviews for Elements",
        "Case Overviews for Racially or Religiously Motivated Offences",
        "Case Overviews for Criminal Liability",
        "Case Overviews for Murder",
        "Case Overviews for Intoxication",
        "Case Overviews for Joint Enterprise",
        "Case Overviews for Voluntary Exposure to Risk",
        "Case Overviews for Transaction Theory",
        "Case Overviews for Conspiracy",
        "Case Overviews for Complicity",
        "Case Overviews for Manslaughter",
        "Case Overviews for Non-Fatal Offences - GBH"
    ],
    "CATEGORIES": [
        "Attempt"
    ],
    "NUMBER": "264",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Attempt",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Millard and Vernon</span></span><br><span class=\"sm\">for attempted criminal damage, there needs to be an intention to destroy someone else&#8217;s property.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Mohan</span></span><br><span class=\"sm\">Not guilty. Intent is an essential ingredient of an attempt and is only mens rea of attempts. Recklessness would often suffice as the mens rea for the full offence, attempt was a separate and often more serious offence with its own separate mens rea.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Pace and Rogers</span></span><br><span class=\"sm\">not liable because the defendants did not have the requisite mens rea for the crime. The prosecution needed to show that the defendants intended to commit the full crime, and there was no evidence to support that claim</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Shivpuri</span></span><br><span class=\"sm\">The court held that they could still be held liable for the fault crime Anderton v Ryan was overruled. The only occasion where impossibility applies for there not to be an attempt is &#8220;abstract legal possibility&#8221; (no substantive offense)</span></span></li></ul>",
        "<span class=\"bd\">Murder</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Walker and Hayles</span></span><br><span class=\"sm\">liable for attempted murder. Talked about difference between direct and oblique intention; oblique intention would now be a misdirection because of Woollin.</span></span></li></ul>",
        "<span class=\"bd\">Preparatory Actions</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">AG Ref no 1 of 1992</span></span><br><span class=\"sm\">liable, because his actions were more than merely preparatory. He did not have to attempt or achieve penetration to be guilty of attempted rape.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Jones [1990]</span></span><br><span class=\"sm\">not liable for attempt because the defendant still needed to remove the safety, put his hand on the trigger, and pull the trigger.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Whybrow</span></span><br><span class=\"sm\">for attempted murder, prima facie requires that the mens rea be to kill.</span></span></li></ul>"
    ],
    "CATEGORY": "Attempt"
},
{
    "RELATED": [
        "Case Overviews for Racially or Religiously Motivated Offences",
        "Case Overviews for Manslaughter",
        "Case Overviews for Transaction Theory",
        "Case Overviews for Murder",
        "Case Overviews for Unlawful Act Manslaughter",
        "Case Overviews for Intoxication",
        "Case Overviews for Corruption of Public Morals",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Sexual Offences",
        "Case Overviews for Gross Negligence Manslaughter",
        "Case Overviews for Elements",
        "Case Overviews for Joint Enterprise"
    ],
    "CATEGORIES": [
        "Complicity"
    ],
    "NUMBER": "265",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Complicity",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Blakely and Sutton v Chief Constable of West Mercia</span></span><br><span class=\"sm\">defendant liable under Cunningham recklessness.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bourne (1952)</span></span><br><span class=\"sm\">the defence that the wife had did not extend to her husband helping her get away with it.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bryce</span></span><br><span class=\"sm\">the jury were allowed to infer that the defendant intentionally assisted the killer. That act was committed knowing that it was likely the killer would commit a crime. Liable as a secondary party.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Callow v Tillstone</span></span><br><span class=\"sm\">liable, but not as a principal offender. The fault for the crime applies, but not strict liability. Minimal acts are needed to be liable. The essence of complicity has become fault based. The act of being a party to an illegal act all depends on mens rea.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Carter v Richardson</span></span><br><span class=\"sm\">liable. The instructor could have intervened but chose not to.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Cogan and Leak</span></span><br><span class=\"sm\">Cogan could not be convicted of rape (marital rape had not been established), but was convicted as an accomplice to the commission of the actus reus; he was aiding and abetting a crime.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Coney</span></span><br><span class=\"sm\">not guilty for merely being present, even if he did want to join in. He would have needed positive action.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gianetto</span></span><br><span class=\"sm\">guilty. The jury simply has to be satisfied that the defendant is either the principal or secondary offender to convict.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gillick v West Norfolk Health Authority</span></span><br><span class=\"sm\">Not guilty because it was in the best interests of the patients.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Khan</span></span><br><span class=\"sm\">secondary liability applies. There does not have to be an exactitude between the harm that occurred and the secondary defendant foreseeing the level of violence that actually occurs, provided that the secondary defendant should have seen the possibility of serious harm occurring.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Lane and Lane</span></span><br><span class=\"sm\">both parties held liable for the death under s.5 of the Domestic Violence Crime and Victims Act.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wilcox v Jeffrey</span></span><br><span class=\"sm\">because the defendant vocalised his support, he was considered to be liable.</span></span></li></ul>"
    ],
    "CATEGORY": "Complicity"
},
{
    "RELATED": [
        "Case Overviews for Elements",
        "Case Overviews for General Defences",
        "Case Overviews for Intoxication",
        "Case Overviews for Unlawful Act Manslaughter",
        "Case Overviews for Non-Fatal Offences",
        "Case Overviews for Complicity",
        "Case Overviews for Inchoate Liability",
        "Case Overviews for Corruption of Public Morals",
        "Case Overviews for Voluntary Association",
        "Case Overviews for Joint Enterprise",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Racially or Religiously Motivated Offences"
    ],
    "CATEGORIES": [
        "Conspiracy"
    ],
    "NUMBER": "266",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Conspiracy",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Barnard</span></span><br><span class=\"sm\">not liable for conspiracy. In order for a conspiracy to be formed, the parties agree on a conduct which will necessarily result in the commission of a crime. However, all of the parties do not need to know each other. It is a conspiracy even though something intervenes.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">El Ghazal</span></span><br><span class=\"sm\">The conspiracy is reached<span class=\"it\"> </span>as soon as the agreement occurs between the parties. If at that point, someone decides to abandon the plan that is irrelevant. You have the complete crime when you have agreement.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Walker</span></span><br><span class=\"sm\">not guilty. The parties had not gone beyond the stage of discussing the possibility of the ulterior offense and there was no definite action taken to do so/no agreement</span></span></li></ul>"
    ],
    "CATEGORY": "Conspiracy"
},
{
    "RELATED": [
        "Case Overviews for Intoxication",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Manslaughter",
        "Case Overviews for Inchoate Liability",
        "Case Overviews for Gross Negligence Manslaughter",
        "Case Overviews for Attempt",
        "Case Overviews for Voluntary Exposure to Risk",
        "Case Overviews for Non-Fatal Offences",
        "Case Overviews for Elements",
        "Case Overviews for Transaction Theory",
        "Case Overviews for Joint Enterprise",
        "Case Overviews for General Defences"
    ],
    "CATEGORIES": [
        "Corruption of Public Morals"
    ],
    "NUMBER": "267",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Corruption of Public Morals",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Knuller</span></span><br><span class=\"sm\">examined the correctness of Shaw but did not overturn it. Test for corruption of public morals: something that members of the jury find to be destructive of the very fabric of society.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Shaw v DPP</span></span><br><span class=\"sm\">the jury needed to look at the conduct and decide if it \u2018disgusted and annoyed them as ordinary citizens.&#8217; If yes, then there were elements of corruption.</span></span></li></ul>"
    ],
    "CATEGORY": "Corruption of Public Morals"
},
{
    "RELATED": [
        "Case Overviews for General Defences",
        "Case Overviews for Joint Enterprise",
        "Case Overviews for Corruption of Public Morals",
        "Case Overviews for Conspiracy",
        "Case Overviews for Racially or Religiously Motivated Offences",
        "Case Overviews for Gross Negligence Manslaughter",
        "Case Overviews for Transaction Theory",
        "Case Overviews for Voluntary Association",
        "Case Overviews for Elements",
        "Case Overviews for Unlawful Act Manslaughter",
        "Case Overviews for Murder",
        "Case Overviews for Attempt"
    ],
    "CATEGORIES": [
        "Criminal Liability"
    ],
    "NUMBER": "268",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Criminal Liability",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dalloway</span></span><br><span class=\"sm\">not liable for the death even though he had been driving dangerously; even if he had been driving perfectly there was no way he could have stopped in time to avoid the child.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Pagett</span></span><br><span class=\"sm\">Pagett was liable for the death because it was his actions that caused the police officers to react instinctively, leading to the death of the girl.</span></span></li></ul>"
    ],
    "CATEGORY": "Criminal Liability"
},
{
    "RELATED": [
        "Case Overviews for Conspiracy",
        "Case Overviews for Attempt",
        "Case Overviews for Manslaughter",
        "Case Overviews for Inchoate Liability",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Complicity",
        "Case Overviews for Non-Fatal Offences",
        "Case Overviews for Criminal Liability",
        "Case Overviews for Racially or Religiously Motivated Offences",
        "Case Overviews for Corruption of Public Morals",
        "Case Overviews for Voluntary Exposure to Risk",
        "Case Overviews for General Defences"
    ],
    "CATEGORIES": [
        "Elements"
    ],
    "NUMBER": "269",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Elements",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Woolmington v DPP</span></span><br><span class=\"sm\">in the House of Lords, Lord Sankey made his &#8220;Golden Thread&#8221; speech, where he stated that the &#8220;golden thread&#8221; of English Criminal Law was for the prosecution to prove the guilt of the defendant beyond a reasonable doubt. The conviction was overturned, and the presumption of innocence became the new standard.</span></span></li></ul>"
    ],
    "CATEGORY": "Elements"
},
{
    "RELATED": [
        "Case Overviews for Murder",
        "Case Overviews for Non-Fatal Offences",
        "Case Overviews for Voluntary Association",
        "Case Overviews for Criminal Liability",
        "Case Overviews for Racially or Religiously Motivated Offences",
        "Case Overviews for Intoxication",
        "Case Overviews for Voluntary Exposure to Risk",
        "Case Overviews for Inchoate Liability",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Manslaughter",
        "Case Overviews for Gross Negligence Manslaughter",
        "Case Overviews for Joint Enterprise"
    ],
    "CATEGORIES": [
        "Fraud",
        "General Defences"
    ],
    "NUMBER": "270",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for General Defences",
    "SUMMARY": [
        "<span class=\"bd\">Duress - Of Circumstances</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bell</span></span><br><span class=\"sm\">still liable, because the defendant should have stopped driving as soon as they were safe. As soon as the threat passes, there is a duty to desist.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Martin [1989]</span></span><br><span class=\"sm\">actually duress by threat, but treated as duress of circumstances. Test for duress of circumstances: 1) Was the defendant compelled to act because they had a reasonable belief that death of serious injury would occur if they did not act? 2) would a sober person of reasonable firmness sharing the characteristics of the defendant responded to the situation in the same way?</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Pommell</span></span><br><span class=\"sm\">duress of circumstance could apply here. It can apply to everything except murder, attempted murder, and some forms of treason.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Symonds</span></span><br><span class=\"sm\">Could be either Duress of Circumstances or Self-Defence. The CoA said that both defences should be left to the jury with a very careful direction as to the differences between them. Where it is self-defence and it might include a mistaken belief in circumstances, the judge should tell the jury should that the defendant&#8217;s belief should not only be honest and genuine, but also reasonable belief.</span></span></li></ul>",
        "<span class=\"bd\">Self-Defence</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">AG Ref no 2 of 1983</span></span><br><span class=\"sm\">possession of the bomb while the threat was still in place would excuse it. However, as soon as the threat passed, it had to be destroyed because having it would no longer be justified.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bird</span></span><br><span class=\"sm\">self-defence was valid. Whilst withdrawing or demonstrating an unwillingness to fight is good evidence that the defendant is acting reasonably and in good faith in self-defence, there was no absolute obligation to demonstrate an unwillingness to retreat.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Devlin v Armstrong</span></span><br><span class=\"sm\">The plea of self-defence may afford a defence when used if the defendant honestly and reasonably believed in the threat of attack, so long as the threat of attack is imminent</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Martin [2002]</span></span><br><span class=\"sm\">all-or-nothing defence. Self-defence did not apply because of excessive force. Guilty for murder.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Palmer v the Queen</span></span><br><span class=\"sm\">guilty. The defendant attempted to appeal that manslaughter should have been offered as an alternative to self-defence, but the appeal was dismissed. There is no option for a verdict of manslaughter where a defendant uses excessive force in self-defence. The defence either succeeds in its entirety or fails.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Symonds</span></span><br><span class=\"sm\">Could be either Duress of Circumstances or Self-Defence. The CoA said that both defences should be left to the jury with a very careful direction as to the differences between them. Where it is self-defence and it might include a mistaken belief in circumstances, the judge should tell the jury should that the defendant&#8217;s belief should not only be honest and genuine, but also reasonable belief.</span></span></li></ul>",
        "<span class=\"bd\">Necessity - Medical Grounds</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bourne</span></span><br><span class=\"sm\">defendant acquitted. The doctor was acting in the best interests of his patient</span></span></li></ul>",
        "<span class=\"bd\">Necessity</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Buckoke v GLC</span></span><br><span class=\"sm\">no liability, although the case went through litigation. It was suggested that to avoid confusion in the future, that the discretion not to prosecute be exercised.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dudley and Stephens</span></span><br><span class=\"sm\">necessity is not a defence to murder.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Kitson</span></span><br><span class=\"sm\">no necessity; DUI upheld.</span></span></li></ul>",
        "<span class=\"bd\">Mistaken Belief - Fact</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Clegg</span></span><br><span class=\"sm\">defence that the defendant was following orders was rejected. Also established that defences are &#8220;all-or-nothing&#8221; in the UK; they either work or they don&#8217;t. Defendant later released on ballistic evidence.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gladstone Williams</span></span><br><span class=\"sm\">the mistaken belief in this case was reasonable, not liable for the crime.</span></span></li></ul>",
        "<span class=\"bd\">Mistaken Belief - Law</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Lee</span></span><br><span class=\"sm\">a genuinely-held but mistaken belief as to law will not provide a defence.</span></span></li></ul>",
        "<span class=\"bd\">Justification - Unknown</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dadson</span></span><br><span class=\"sm\">the office was still found guilty because you cannot rely on an exemption to form an unknown justification. However, there is academic disagreement over the decision in this case.</span></span></li></ul>",
        "<span class=\"bd\">Necessity - Medical Issues</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">F v West Berkshire Health Authority</span></span><br><span class=\"sm\">the operation would be lawful if the doctor considered it to be in the best interests of the patient.</span></span></li></ul>",
        "<span class=\"bd\">Mistaken Belief - Intoxication</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">O&#8217;Grady</span></span><br><span class=\"sm\">no defence, liable for the crime. Where a defendant forms a mistaken belief after the voluntary consumption of alcohol, there is no defence for the crimes.</span></span></li></ul>",
        "<span class=\"bd\">Justification - Prevention of a Crime</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R v Jones (Margaret)</span></span><br><span class=\"sm\">The defendants said that their actions were justified because they were acting to prevent a crime (an illegal war in Iraq). The HoL said that where it says &#8220;prevention of a crime&#8221; it means prevention of a potential crime under domestic law; not something that could potentially be a crime under international law.</span></span></li></ul>"
    ],
    "CATEGORY": "Fraud / General Defences"
},
{
    "RELATED": [
        "Case Overviews for Complicity",
        "Case Overviews for General Defences",
        "Case Overviews for Elements",
        "Case Overviews for Criminal Liability",
        "Case Overviews for Transaction Theory",
        "Case Overviews for Unlawful Act Manslaughter",
        "Case Overviews for Attempt",
        "Case Overviews for Joint Enterprise",
        "Case Overviews for Intoxication",
        "Case Overviews for Murder",
        "Case Overviews for Corruption of Public Morals",
        "Case Overviews for Inchoate Liability"
    ],
    "CATEGORIES": [
        "Gross Negligence Manslaughter"
    ],
    "NUMBER": "271",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Gross Negligence Manslaughter",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Adomako</span></span><br><span class=\"sm\">Test for Gross Negligence Manslaughter (Lord Mackay): 1) Was there a breach of duty against the victim? 2) Did that breach of duty cause the death of the victim? 3) Were the actions of the defendant so far departed from the standard of care as to be considered criminal?</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gemma Evans</span></span><br><span class=\"sm\">Liable for Gross Negligence Manslaughter as had supplied heroin for her sister, there by created, and not acted to resolve, a dangerous situation. The question of whether a duty of care in GNM is of law, therefore for the judge, not the jury.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Misra</span></span><br><span class=\"sm\">upheld test from Adomako. The jury decides whether the actions of the defendant are grossly negligent; if so, then it is a criminal act. Conviction upheld.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R v S</span></span><br><span class=\"sm\">guilty, although appeal on sentence term allowed. It was grossly negligent to point the gun and pull the trigger without ensuring that it was safe to do so. Objective test: would a person of the defendant&#8217;s age and experience have foreseen the risk of death? If so, was the defendant&#8217;s conduct so far below the standard of care required that it was grossly negligent and it constituted a crime?</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wacker</span></span><br><span class=\"sm\">Consent does not preclude liability for harm; irrespective of consent, there was a duty of care owed. Defendant liable for gross negligence manslaughter.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Willoughby</span></span><br><span class=\"sm\">followed Wacker; consent is irrelevant. Defendant liable for gross negligent manslaughter. Established the circumstances where the judge will tell the jury where there is a duty owed to the victim (instead of the jury deciding): Doctor/patient relationships, creation of duty by statute</span></span></li></ul>"
    ],
    "CATEGORY": "Gross Negligence Manslaughter"
},
{
    "RELATED": [
        "Case Overviews for Voluntary Association",
        "Case Overviews for Unlawful Act Manslaughter",
        "Case Overviews for Corruption of Public Morals",
        "Case Overviews for Gross Negligence Manslaughter",
        "Case Overviews for Manslaughter",
        "Case Overviews for Racially or Religiously Motivated Offences",
        "Case Overviews for Non-Fatal Offences",
        "Case Overviews for Intoxication",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Complicity",
        "Case Overviews for Attempt",
        "Case Overviews for Joint Enterprise"
    ],
    "CATEGORIES": [
        "Inchoate Liability"
    ],
    "NUMBER": "272",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Inchoate Liability",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gullefer</span></span><br><span class=\"sm\">liable. The crime begins when the merely preparatory acts come to an end. You have to ask whether the defendant has \u2018embarked on the crime proper.&#8217;</span></span></li></ul>"
    ],
    "CATEGORY": "Inchoate Liability"
},
{
    "RELATED": [
        "Case Overviews for Murder",
        "Case Overviews for Non-Fatal Offences",
        "Case Overviews for General Defences",
        "Case Overviews for Complicity",
        "Case Overviews for Voluntary Association",
        "Case Overviews for Conspiracy",
        "Case Overviews for Voluntary Exposure to Risk",
        "Case Overviews for Corruption of Public Morals",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Elements",
        "Case Overviews for Criminal Liability",
        "Case Overviews for Gross Negligence Manslaughter"
    ],
    "CATEGORIES": [
        "Intoxication"
    ],
    "NUMBER": "273",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Intoxication",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Majewski</span></span><br><span class=\"sm\">When the defendant is voluntarily intoxicated, there has been a delineation of crimes of specific intent (where intoxication could be relevant for fault) and for cases where there are basic intent crimes (no specific intent)</span></span></li></ul>"
    ],
    "CATEGORY": "Intoxication"
},
{
    "RELATED": [
        "Case Overviews for Murder",
        "Case Overviews for General Defences",
        "Case Overviews for Gross Negligence Manslaughter",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Sexual Offences",
        "Case Overviews for Non-Fatal Offences",
        "Case Overviews for Conspiracy",
        "Case Overviews for Unlawful Act Manslaughter",
        "Case Overviews for Attempt",
        "Case Overviews for Complicity",
        "Case Overviews for Inchoate Liability",
        "Case Overviews for Voluntary Association"
    ],
    "CATEGORIES": [
        "Joint Enterprise"
    ],
    "NUMBER": "274",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Joint Enterprise",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Chan Wing Siu</span></span><br><span class=\"sm\">liable for murder. Court: turns on contemplation or, putting the same idea in other words, authorization, which may express but is more usually implied. It meets the case of a crime foreseen as a possible incident of the common unlawful enterprise. The criminal culpability lies in participating in the venture with that foresight (Sir Cook).</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Davies v DPP</span></span><br><span class=\"sm\">this action was outside the original plan and the other perpetrators were not liable for murder.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">English and Weddle</span></span><br><span class=\"sm\">even though the defendant did not know that the principal had a knife, he was still liable for the actions of the principal as part of the joint enterprise.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Greatrex</span></span><br><span class=\"sm\">liability still exists, but a retrial was ordered on a question of fact and degree. An indictment for murder should include any alternative lesser verdict which carries a proper reflection of the seriousness of the factual situation.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hui Chi-Ming</span></span><br><span class=\"sm\">liable as a secondary party. You can be liable for the crime if you contemplate/realise that there is a realistic possibility that D1 would commit the crime.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Mahmood (Asaf)</span></span><br><span class=\"sm\">not liable. The defendant jumping out of the car was \u2018fundamentally different.&#8217;</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Powell and Daniels</span></span><br><span class=\"sm\">the defendants argued that they needed to intend death or serious injury, claimed that it was unfair that recklessness constituted liability. The court disagreed; defendants cannot insulate themselves on policy: the protection of society requires that they be held liable.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Rahman</span></span><br><span class=\"sm\">the court rejected this argument. Just because the principal had an undisclosed intent to kill, it did not automatically change the fact that it is reasonably foreseeable. The principal is liable for murder if they intend to kill or cause GBH. The secondary is liable for murder if they foresee the possibility of the principal doing so.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Roberts [1993]</span></span><br><span class=\"sm\">the fault of a secondary perpetrator for murder does not need to be the same mens rea as a primary perpetrator; they simply need to be liable for recklessness (they only need to contemplate the crime as a realistic possibility, not even a probability).</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Stringer</span></span><br><span class=\"sm\">it was up to the jury as to whether or not Stringer encouraged the crime because he was not present at the time. Initial conviction was unsafe, overturned on appeal.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Uddin</span></span><br><span class=\"sm\">still liable, but retrial ordered on question of fact and degree.</span></span></li></ul>"
    ],
    "CATEGORY": "Joint Enterprise"
},
{
    "RELATED": [
        "Case Overviews for Inchoate Liability",
        "Case Overviews for Unlawful Act Manslaughter",
        "Case Overviews for Murder",
        "Case Overviews for Voluntary Association",
        "Case Overviews for Non-Fatal Offences",
        "Case Overviews for Sexual Offences",
        "Case Overviews for Gross Negligence Manslaughter",
        "Case Overviews for Conspiracy",
        "Case Overviews for Transaction Theory",
        "Case Overviews for Complicity",
        "Case Overviews for Corruption of Public Morals",
        "Case Overviews for Non-Fatal Offences - GBH"
    ],
    "CATEGORIES": [
        "Manslaughter"
    ],
    "NUMBER": "275",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Manslaughter",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Airedale NHS Trust v Bland</span></span><br><span class=\"sm\">although euthanasia is not allowed at common law (Lord Goff), merely withdrawing treatment was an omission (not commission) and was acceptable</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">AG Ref no 4 of 1980</span></span><br><span class=\"sm\">when the particular action in a sequence that causes death cannot be identified, the jury should be directed to find manslaughter should the <span class=\"it\">first</span> act be unlawful.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dawson</span></span><br><span class=\"sm\">was not sufficient to see the victim having emotional distress to be liable for manslaughter; will only suffice if the distress goes beyond a normal level and causes the level of harm that would indicate a heart attack</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dear</span></span><br><span class=\"sm\">liable for the death. Rose, LJ: We should not look to whether the victim treated himself with negligence or neglect, we should ask whether the initial wounds were, and remained, a significant/operative cause of death.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Goodfellow</span></span><br><span class=\"sm\">no novus actus interveniens, defendant held liable since their actions led to the death of the victim.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R v JM and SM</span></span><br><span class=\"sm\">it was foreseeable that some harm would occur, and a reasonable bystander could see that the actions of the defendant would lead to some harm against the victim, and physical harm in the form of shock would occur as a question of fact not law. However, there was found to be no liability in this case because the medical condition was outside the realm of foreseeability.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Watson</span></span><br><span class=\"sm\">question was whether it could be reasonably foreseen that the victim would be distressed. The defendant was aware that the victim needed help and chose to do nothing. Held liable for manslaughter.</span></span></li></ul>"
    ],
    "CATEGORY": "Manslaughter"
},
{
    "RELATED": [
        "Case Overviews for Joint Enterprise",
        "Case Overviews for Racially or Religiously Motivated Offences",
        "Case Overviews for Sexual Offences",
        "Case Overviews for Manslaughter",
        "Case Overviews for Inchoate Liability",
        "Case Overviews for Gross Negligence Manslaughter",
        "Case Overviews for Transaction Theory",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Voluntary Association",
        "Case Overviews for Complicity",
        "Case Overviews for Elements",
        "Case Overviews for Unlawful Act Manslaughter"
    ],
    "CATEGORIES": [
        "Murder"
    ],
    "NUMBER": "276",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Murder",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Abbott</span></span><br><span class=\"sm\">duress is not a viable defence for murder for principal offenders.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">AG Ref no 4 of 1980</span></span><br><span class=\"sm\">when the particular action in a sequence that causes death cannot be identified, the jury should be directed to find manslaughter should the <span class=\"it\">first</span> act be unlawful.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dear</span></span><br><span class=\"sm\">liable for the death. Rose, LJ: We should not look to whether the victim treated himself with negligence or neglect, we should ask whether the initial wounds were, and remained, a significant/operative cause of death.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Diminished Responsibility</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Ahluwalia</span></span><br><span class=\"sm\">the original judge&#8217;s direction on provocation was correct (Duffy test). On those grounds, the appeal was not allowed. However, the appeal was allowed on grounds of diminished responsibility, although the court stressed that it was exceptional for new evidence to be allowed.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dietschmann</span></span><br><span class=\"sm\">Changed to manslaughter. Court: We should stay focused on the mental abnormality, not the intoxication. The diminished responsibility relies on his depression.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Loss of Control</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Doughty</span></span><br><span class=\"sm\">the judge should have let the jury decide whether or not the defendant lost control.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Diminished Responsibility - Intoxication</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dowds</span></span><br><span class=\"sm\">Voluntary and temporary drunkenness is not adequate for defence of diminished responsibility. Also, principle: just because something is listed as a medical condition, it does not make it relevant to the defence.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Provocation/Loss of Control</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Ahluwalia</span></span><br><span class=\"sm\">the original judge&#8217;s direction on provocation was correct (Duffy test). On those grounds, the appeal was not allowed. However, the appeal was allowed on grounds of diminished responsibility, although the court stressed that it was exceptional for new evidence to be allowed.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">AG for Jersey v Holley</span></span><br><span class=\"sm\">the court did not consider this part of the diminished powers of self-control; they only consider the age and sex of the defendant for this defence. If the defendant wants other factors taken into account, they should claim diminished responsibility. Solidifies an objective test.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Baillie</span></span><br><span class=\"sm\">the sudden and temporary loss of control can last for an undefined amount of time, assuming that you are still operating under the Duffy test.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Barnsdale-Quean</span></span><br><span class=\"sm\">no loss of control; no evidence to support that fact.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bedder v DPP</span></span><br><span class=\"sm\">impotency was a characteristic of a reasonable person and does not provide sufficient evidence for provocation.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Camplin</span></span><br><span class=\"sm\">Appeal allowed on misdirection of jury. In terms of power and control, you need to look at the age and sex of the person. It&#8217;s about the gravity of the provocation to that particular defendant.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dawes</span></span><br><span class=\"sm\">Appeal rejected. There was insufficient evidence to support loss of control.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Duffy</span></span><br><span class=\"sm\">liable because loss of control was not sudden/temporary. Test for loss of control (Justice Devlin): At the time of the fatal action, the defendant had to have lost control through a sudden and temporary passion. Difference between men and women are treated: believed that men had sudden, temporary reactions where women were more of a &#8220;slow burn.&#8221;</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Humphreys</span></span><br><span class=\"sm\">you can take into account of the cumulative history leading up to the final act, but at the time of the act itself, the defendant has to be operating at a sudden and temporary loss of self-control or it doesn&#8217;t qualify for provocation</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Ibrams</span></span><br><span class=\"sm\">defendant guilty of murder. Time period was too long; no &#8220;sudden and temporary loss of control.&#8221;</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Pearson</span></span><br><span class=\"sm\">changed to manslaughter; the actions of their father should have been considered during the original trial. The defendant can claim provocation where the supposedly provocative behaviour is not unlawful or unreasonable, or where he is mistaken (perhaps through voluntary intoxication) as to the meaning of the other person&#8217;s behaviour, or even where the supposedly provocative behaviour was in fact a response to his own.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R v Jewell</span></span><br><span class=\"sm\">insufficient evidence of any loss of control. Convicted of murder, appealed. COA: the killing had too much preparation to be considered loss of control; re-affirmed R v Clinton</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R v Zebedee</span></span><br><span class=\"sm\">no loss of control, no &#8220;justifiable sense of being seriously wronged&#8221;</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Smith (Morgan)</span></span><br><span class=\"sm\">it isn&#8217;t necessarily about the reasonable person; you should leave it to the jury&#8217;s good sense about the loss of self-control. If their emotions were disturbed, loss of control should be offered as a partial defence (Lord Hoffman). Overturned by A-G for Jersey v Holley</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Thornton (No. 2)</span></span><br><span class=\"sm\">conviction quashed on misdirection. The jury should have been directed to take into account her mental characteristics in assessing the standard of control expected of the defendant. Overturned in A-G for Jersey v Holley.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Diminished Responsibility - Medical Condition</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Golds</span></span><br><span class=\"sm\">Appeal dismissed. In order to be usable for diminished responsibility your medical condition needs to substantially impair one of three things: 1) your ability to understand conduct; 2) your ability to form a rational judgment; 3) your ability to control yourself.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Provocation</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">AG for Jersey v Holley</span></span><br><span class=\"sm\">the court did not consider this part of the diminished powers of self-control; they only consider the age and sex of the defendant for this defence. If the defendant wants other factors taken into account, they should claim diminished responsibility. Solidifies an objective test.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Humphreys</span></span><br><span class=\"sm\">you can take into account of the cumulative history leading up to the final act, but at the time of the act itself, the defendant has to be operating at a sudden and temporary loss of self-control or it doesn&#8217;t qualify for provocation</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R v Zebedee</span></span><br><span class=\"sm\">no loss of control, no &#8220;justifiable sense of being seriously wronged&#8221;</span></span></li></ul>",
        "<span class=\"bd\">Intent - Oblique</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hyam v DPP</span></span><br><span class=\"sm\">mens rea for murder is the intention to kill or cause GBH. The jury can find intention when the defendant commits an act which kills, during which they know that it is highly probable that their actions will cause death or serious injury</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Moloney</span></span><br><span class=\"sm\">the &#8220;golden rule&#8221; (Lord Bridge) of murder. The defendant has to intend to kill the victim or cause serious injury. Test: Was the death a natural consequence of the defendant&#8217;s action? If it was a natural consequence, did the defendant foresee it as a natural consequence? If the answer to both questions in yes, then the defendant intended the consequences. No requisite mens rea for murder, changed to manslaughter.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Nedrick</span></span><br><span class=\"sm\">Jury was misdirected. Test of virtual certainty. Where there is a charge for murder, simple direction (direct intention) is not enough. The jurors should be instructed to find intention. Was there a realisation on behalf of the defendant that death or serious injury was a virtually certain consequence? It is for the jury to decide.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Woollin</span></span><br><span class=\"sm\">Charge of murder changed to manslaughter. Where the charge is murder and in the simple direction is insufficient, the jury should be directed that they are not entitled to infer the intention unless they feel sure that death or serious bodily harm was a vital certainty as a result of the defendant&#8217;s actions, and that the defendant appreciated that such was the case. Leading precedent.</span></span></li></ul>",
        "<span class=\"bd\">End of a Life</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Malcharek and Steel</span></span><br><span class=\"sm\">the defendant was liable because the court defined the end of life as &#8220;brain stem death&#8221; which happened when the victim was stabbed.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Diminished Responsibility - Abnormality of Mind</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Byrne</span></span><br><span class=\"sm\">allowed, changed to manslaughter. &#8220;Abnormality of mind&#8221; was wide enough to cover the mind&#8217;s activities in all its aspects, including the ability to exercise will power to control physical acts in accordance with rational judgment. But &#8220;abnormality of mind&#8221; means a state of mind so different from that of ordinary human beings that a reasonable man would term it abnormal.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Tandy</span></span><br><span class=\"sm\">Two predicates for alcoholism as an abnormality of mind. 1) The alcoholism has to have impaired the judgment evidenced by a brain disease (there must be brain damage) so that the defendant <span class=\"it\">had</span> to drink (involuntary). 2) if the first drink of the day had been voluntarily consumed, then the defence would not be available. Contradicted by Wood [2009]</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wood</span></span><br><span class=\"sm\">disagreed with Tandy, accepted ADS as a mental condition defence; no requirement for it to be an organic brain disease, however if it has progressed that far it strengthens the case. The first drink does not have to be involuntary; it is the effect of the alcohol consumed by the defendant as it appears as a disease when it comes to relevancy.</span></span></li></ul>"
    ],
    "CATEGORY": "Murder"
},
{
    "RELATED": [
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Murder",
        "Case Overviews for Inchoate Liability",
        "Case Overviews for Sexual Offences",
        "Case Overviews for General Defences",
        "Case Overviews for Voluntary Exposure to Risk",
        "Case Overviews for Joint Enterprise",
        "Case Overviews for Elements",
        "Case Overviews for Intoxication",
        "Case Overviews for Voluntary Association",
        "Case Overviews for Criminal Liability",
        "Case Overviews for Racially or Religiously Motivated Offences"
    ],
    "CATEGORIES": [
        "Non-Fatal Offences"
    ],
    "NUMBER": "277",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Non-Fatal Offences",
    "SUMMARY": [
        "<span class=\"bd\">GBH</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">A v United Kingdom</span></span><br><span class=\"sm\">the law did not provide adequate protection to the applicant &mdash; English law needed to be changed. Lawful chastisement is no longer a valid defence.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Aitken</span></span><br><span class=\"sm\">no liability. If the officer had consented or the defendants believed that the officer had consented it was open for the judge to find that no offence had been committed</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Clarence</span></span><br><span class=\"sm\">not guilty of battery because the sex was consensual. Decision overturned in <span class=\"lnk caseln\">Dica</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dica</span></span><br><span class=\"sm\">Overturns decision in Clarence. People suffering from serious STDs who recklessly transmit them through intercourse inflict GBH will be liable under s. 20.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Emmett</span></span><br><span class=\"sm\">guilty of causing GBH. Went &#8220;far beyond&#8221; Wilson. Court said that someone could not consent to the level of harm in this case. Line-drawing exercise in terms of personal autonomy and consent.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Golding</span></span><br><span class=\"sm\">sentenced reduced, but appeal dismissed. Transmission of herpes constitutes GBH. No need for battery or physical violence for a section 20 offence.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Jones</span></span><br><span class=\"sm\">Convictions quashed. Consent to rough and undisciplined horseplay is a defence, even if there was no consent by the victims. If the appellants had a genuine belief in consent they should be allowed the defence (no requirement for it to be reasonably held, provided it was genuine.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Konzani</span></span><br><span class=\"sm\">defendant liable for GBH. Even where there is no physical harm to the victim&#8217;s body, the transmission of HIV constitutes GBH and is classified as a section 20 offence.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Lewis</span></span><br><span class=\"sm\">the defendant was liable for the victim&#8217;s injury because his actions caused her to react; her reaction was reasonably foreseeable.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Martin</span></span><br><span class=\"sm\">liable for GBH. Principle: infliction of GBH can be indirect.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Savage</span></span><br><span class=\"sm\">it was not necessary to demonstrate the defendant had the mens rea in relation to the level of harm inflicted. It was enough that they intended/could foresee some harm as a result of their actions. Constructive liability: actus reus/mens rea is needed for the lesser crime, but the actual liability depends on the degree of harm.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wilson</span></span><br><span class=\"sm\">liable for GBH. GBH occurs either where the defendant has directly inflicted the injury by assaulting the victim, or where the defendant has inflicted GBH by doing something intentionally that directly results in force being applied to the body of the victim, so that the victim suffers GBH (Lord Roskill).</span></span></li></ul>",
        "<span class=\"bd\">Consent</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Aitken</span></span><br><span class=\"sm\">no liability. If the officer had consented or the defendants believed that the officer had consented it was open for the judge to find that no offence had been committed</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Barnes</span></span><br><span class=\"sm\">conviction unsafe. Determined: 1) Criminal proceedings should only be used where conduct is sufficiently grave to be necessitate them (otherwise civil proceedings should be used). 2) In contact sports, implied consent excuses bodily harm so long as it is reasonably expected. 3) Conduct within the rules of the sport is unlikely to be criminal.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Brown</span></span><br><span class=\"sm\">Consent will only be a defence to the level of a common law battery and only if there is no injury caused or intended. Where harm is intended and/or caused, then consent is never a defence in criminal law unless there was some reason to justify it being in the public interest (Lord Templeman)</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dica</span></span><br><span class=\"sm\">Overturns decision in Clarence. People suffering from serious STDs who recklessly transmit them through intercourse inflict GBH will be liable under s. 20.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Jheeta</span></span><br><span class=\"sm\">no true consent because there was \u2018improper pressure&#8217; on the complainant.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Jones</span></span><br><span class=\"sm\">Convictions quashed. Consent to rough and undisciplined horseplay is a defence, even if there was no consent by the victims. If the appellants had a genuine belief in consent they should be allowed the defence (no requirement for it to be reasonably held, provided it was genuine.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Morgan v DPP</span></span><br><span class=\"sm\">guilty, because the belief was not genuine. Principle: the belief in consent must be genuine and honest. There was requirement that the belief be reasonable. Applied as a general principle to other crimes where the fault is intention or Cunningham recklessness. No longer applies to rape cases, still used in other offences.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Richardson</span></span><br><span class=\"sm\">no liability for battery. Identity and nature of the act can vitiate consent. Principle: what vitiates consent? 1) The nature of the act itself 2) the identity of the person.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Slingsby</span></span><br><span class=\"sm\">not liable. There was no harm intended, and the court determined that it was not sufficient for the prosecution to show that injury was caused, they also had to prove that harm was intended.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Tabassum</span></span><br><span class=\"sm\">guilty. Principle: it is not just the nature of the act/identity of the person; there can be vitiation of consent where there is a situation that goes to the quality of the act as well as to the nature of the act itself.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wilson [1996]</span></span><br><span class=\"sm\">no liability for battery, did not follow Brown. This was a &#8220;loving adornment&#8221; (like a tattoo), and was a consensual act between husband and wife. Not a matter for criminal investigation (Justice Russell).</span></span></li></ul>",
        "<span class=\"bd\">Battery</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Collins v Wilcock</span></span><br><span class=\"sm\">the lady-policeman was guilty of battery; defendant&#8217;s action was therefore self-defence and her conviction was quashed. Also established principle of \u2018implied consent&#8217; in crowded/public places: jostling, handshakes, back slapping, etc. are all examples of this implied consent provided that only reasonable force is used (Goff LJ).</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">DPP v K</span></span><br><span class=\"sm\">defendant was guilty for battery for indirectly causing the harm.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Fagan</span></span><br><span class=\"sm\">Although the mens rea created actus reus first part of the crime was accidental, the court held there was liability because Fagan then did not rectify the situation and the court interpreted the incident as one continuing act. His omission made him criminally liable. Court sets out elements of battery: intentionally or recklessly inflicting harm on another</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Haystead v CC of Derbyshire</span></span><br><span class=\"sm\">liable for harm to child because a causal linkage could be established between the actions of the defendant and the unlawful force which injured the child.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Richardson</span></span><br><span class=\"sm\">no liability for battery. Identity and nature of the act can vitiate consent. Principle: what vitiates consent? 1) The nature of the act itself 2) the identity of the person.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Venna</span></span><br><span class=\"sm\">liable for assault and battery. Recklessness does not excuse the harm caused. Established Cunningham recklessness as the predominant test for assault/battery cases.</span></span></li></ul>",
        "<span class=\"bd\">Assault</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Constanza</span></span><br><span class=\"sm\">there can be an apprehension of violence that extends over a period of time provided that there is the risk of violence in the immediate future.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Ireland</span></span><br><span class=\"sm\">liable for assault. Silence can amount to an assault and psychiatric injury can amount to bodily harm.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Ireland and Burstow</span></span><br><span class=\"sm\">assault can be committed by a caller on a telephone, ad satisfies immediate threat of violence. It would be for the jurors to decide whether the threats constituted assault.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Tuberville v Savage</span></span><br><span class=\"sm\">words can negate a threatening action (assault). The defendant&#8217;s gesture may have been threatening, but the words indicated that no violence would ensue.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Venna</span></span><br><span class=\"sm\">liable for assault and battery. Recklessness does not excuse the harm caused. Established Cunningham recklessness as the predominant test for assault/battery cases.</span></span></li></ul>",
        "<span class=\"bd\">ABH</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">A v United Kingdom</span></span><br><span class=\"sm\">the law did not provide adequate protection to the applicant &mdash; English law needed to be changed. Lawful chastisement is no longer a valid defence.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">DPP v Smith</span></span><br><span class=\"sm\">hair was part of a person and their identity, and it was ruled a battery.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R (on the Application of T) v DPP</span></span><br><span class=\"sm\">this constitutes actual bodily harm.</span></span></li></ul>",
        "<span class=\"bd\">Unlawful Wounding</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">JJC v Eisenhower</span></span><br><span class=\"sm\">defendant not guilty of wounding because a wound is a break in the continuity of the whole skin (dermis and epidermis); an internal rupturing of blood vessels is not a wound.</span></span></li></ul>",
        "<span class=\"bd\">Wounding</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Savage</span></span><br><span class=\"sm\">it was not necessary to demonstrate the defendant had the mens rea in relation to the level of harm inflicted. It was enough that they intended/could foresee some harm as a result of their actions. Constructive liability: actus reus/mens rea is needed for the lesser crime, but the actual liability depends on the degree of harm.</span></span></li></ul>",
        "<span class=\"bd\">Foreseeability</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Slingsby</span></span><br><span class=\"sm\">not liable. There was no harm intended, and the court determined that it was not sufficient for the prosecution to show that injury was caused, they also had to prove that harm was intended.</span></span></li></ul>",
        "<span class=\"bd\">Assault - Immediacy</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Smith v Woking Police</span></span><br><span class=\"sm\">peering in through a window to a bedroom in which a woman is getting dressed or undressed can constitute assault. The &#8216;immediacy&#8217; requirement of assault, properly understood, cannot just mean in the <span class=\"it\">seconds</span> immediately afterwards.</span></span></li></ul>"
    ],
    "CATEGORY": "Non-Fatal Offences"
},
{
    "RELATED": [
        "Case Overviews for Voluntary Association",
        "Case Overviews for Voluntary Exposure to Risk",
        "Case Overviews for Attempt",
        "Case Overviews for Joint Enterprise",
        "Case Overviews for Criminal Liability",
        "Case Overviews for Inchoate Liability",
        "Case Overviews for Gross Negligence Manslaughter",
        "Case Overviews for Transaction Theory",
        "Case Overviews for Murder",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Intoxication",
        "Case Overviews for Conspiracy"
    ],
    "CATEGORIES": [
        "Racially or Religiously Motivated Offences"
    ],
    "NUMBER": "278",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Racially or Religiously Motivated Offences",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">DPP v Pal</span></span><br><span class=\"sm\">not a racially motivated crime because the slurs were directed specifically at the victim, not against all Asians. Principles: where there is a nonfatal crime with a racial/religious motivation behind it, there is potentially a more severe punishment. Courts have adopted a narrow meaning of what is racially motivated.</span></span></li></ul>"
    ],
    "CATEGORY": "Racially or Religiously Motivated Offences"
},
{
    "RELATED": [
        "Case Overviews for Voluntary Association",
        "Case Overviews for Transaction Theory",
        "Case Overviews for Criminal Liability",
        "Case Overviews for Corruption of Public Morals",
        "Case Overviews for Gross Negligence Manslaughter",
        "Case Overviews for Conspiracy",
        "Case Overviews for Complicity",
        "Case Overviews for Attempt",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Joint Enterprise",
        "Case Overviews for Unlawful Act Manslaughter",
        "Case Overviews for Manslaughter"
    ],
    "CATEGORIES": [
        "Sexual Offences"
    ],
    "NUMBER": "279",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Sexual Offences",
    "SUMMARY": [
        "<span class=\"bd\">Rape - Consent</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bowler</span></span><br><span class=\"sm\">defendant guilty for gross negligent manslaughter, but sentence reduced on appeal. However, had the victim not died, the circumstances may have been different. The court said that the actions of the parties involved were consensual and it was not for the court to interfere.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bree</span></span><br><span class=\"sm\">appeal allowed. No alcohol grid system in terms of how intoxication affects consent. A trial judge will never be wrong if he defines consent for the jury and tells them to find it. The capacity of complainant to consent may stop before the complainant passes out but it will be fact-specific on each case. Intoxicated consent is still consent and if the complainant regrets it later, it does not vitiate consent.</span></span></li></ul>",
        "<span class=\"bd\">Indecent Assault</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Court</span></span><br><span class=\"sm\">guilty. Where facts show that an act may be either indecent or not indecent, the prosecution must prove not only that the accused intentionally assaulted the victim, but that in doing so, he intended to commit an assault which right-minded persons would think was indecent.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Heard</span></span><br><span class=\"sm\">guilty. Voluntary intoxication is not a valid defence to sexual offences.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R v H</span></span><br><span class=\"sm\">guilty because of sexual motive. Two part test: would reasonable people consider the conduct in the particular circumstances before them to be sexual in nature? If so, then would reasonable people consider the conduct of the defendant in the view of the circumstances to have intended them to be sexual?</span></span></li></ul>",
        "<span class=\"bd\">Rape</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Devonald</span></span><br><span class=\"sm\">conclusive presumption, no consent. The victim was deceived as to the purpose of the video.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Elbekkay</span></span><br><span class=\"sm\">no consent. The restriction to deception of identity was not limited to spouses, but to partners as well. Also, in order for the deception of identity to vitiate consent, the complainant has to believe that the defendant is someone they know (ex. If the defendant says they are a celebrity when they aren&#8217;t, consent is still valid).</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Kaitamaki v the Queen</span></span><br><span class=\"sm\">defendant was guilty. Principle: sexual intercourse starts at penetration and &#8220;continues: until it stops. If the act continues when consent is withdrawn the offence is complete.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Linekar</span></span><br><span class=\"sm\">not rape, inducement of intercourse under false pretences. The fraud did not affect the fact that the intercourse was consensual.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">McNally</span></span><br><span class=\"sm\">defendant guilty of rape. The deception of gender vitiated consent. Obiter: in HIV cases, if the defendant is asked about their status and lies, that is an act of deception and there may be a conclusive presumption of lack of consent.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Morgan v DPP</span></span><br><span class=\"sm\">guilty, because the belief was not genuine. Principle: the belief in consent must be genuine and honest. There was requirement that the belief be reasonable. Applied as a general principle to other crimes where the fault is intention or Cunningham recklessness. No longer applies to rape cases, still used in other offences.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Olugboja</span></span><br><span class=\"sm\">guilty. Test for consent: a trial judge directing the jurors should tell them that they need to &#8220;apply their combined good sense, experience, and knowledge of human nature and modern behaviour&#8221; in order to answer a question of consent.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R v B</span></span><br><span class=\"sm\">no liability for rape. The intercourse was consensual; the HIV status of the defendant did not change the nature of the act itself.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R v B (2013)</span></span><br><span class=\"sm\">no deception as to the nature/purpose of the act.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R (F) v DPP and A</span></span><br><span class=\"sm\">the defendant refusing to comply with the wishes of the complainant vitiated consent. The complainant was deprived of the choice relating to the crucial feature on which the original consent to sexual intercourse was based.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Williams</span></span><br><span class=\"sm\">guilty of rape because the deception went to the nature of the act itself.</span></span></li></ul>"
    ],
    "CATEGORY": "Sexual Offences"
},
{
    "RELATED": [
        "Case Overviews for Conspiracy",
        "Case Overviews for General Defences",
        "Case Overviews for Intoxication",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Unlawful Act Manslaughter",
        "Case Overviews for Sexual Offences",
        "Case Overviews for Complicity",
        "Case Overviews for Voluntary Association",
        "Case Overviews for Racially or Religiously Motivated Offences",
        "Case Overviews for Non-Fatal Offences",
        "Case Overviews for Criminal Liability",
        "Case Overviews for Voluntary Exposure to Risk"
    ],
    "CATEGORIES": [
        "Theft",
        "Transaction Theory"
    ],
    "NUMBER": "280",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Transaction Theory",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Le Brun</span></span><br><span class=\"sm\">the original unlawful act with its accompanying mens rea was not the direct cause of death, but the unlawful act causing the death was part of the same sequence of events and that was enough to be guilty of manslaughter</span></span></li></ul>"
    ],
    "CATEGORY": "Theft / Transaction Theory"
},
{
    "RELATED": [
        "Case Overviews for Inchoate Liability",
        "Case Overviews for Gross Negligence Manslaughter",
        "Case Overviews for Non-Fatal Offences",
        "Case Overviews for Sexual Offences",
        "Case Overviews for Voluntary Exposure to Risk",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Criminal Liability",
        "Case Overviews for Murder",
        "Case Overviews for Intoxication",
        "Case Overviews for Transaction Theory",
        "Case Overviews for Conspiracy",
        "Case Overviews for Voluntary Association"
    ],
    "CATEGORIES": [
        "Unlawful Act Manslaughter"
    ],
    "NUMBER": "281",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Unlawful Act Manslaughter",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dhaliwal</span></span><br><span class=\"sm\">even where the victim takes their own life, the abuse may not causally break the chain of causation for unlawful act manslaughter; potentially labelling the actions of the defendant as a cause for the unlawful death. Has not been applied in any other case. Four elements of unlawful act manslaughter: actus reus and mens rea for unlawful act, the unlawful act must be dangerous, the unlawful act must be volitional and intentional by the defendant, the unlawful act must cause the death of the victim without novus actus interveniens.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Newbury</span></span><br><span class=\"sm\">there was an unlawful act, the mens rea for that was sufficient for the defendant to be held liable for the unlawful death</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R v JF and NE</span></span><br><span class=\"sm\">appeal dismissed by sentence reduced. The defendants were aware that there were people in the building, and had the necessary actus reus and mens rea for arson. Ratio: all that was needed for conviction for unlawful act manslaughter was actus reus and mens rea for the initial crime; if that was shown, then it was a normative question of dangerousness: would the danger have been foreseeable to a normal and reasonable person?</span></span></li></ul>"
    ],
    "CATEGORY": "Unlawful Act Manslaughter"
},
{
    "RELATED": [
        "Case Overviews for Attempt",
        "Case Overviews for Joint Enterprise",
        "Case Overviews for Elements",
        "Case Overviews for Manslaughter",
        "Case Overviews for Non-Fatal Offences",
        "Case Overviews for Transaction Theory",
        "Case Overviews for Criminal Liability",
        "Case Overviews for Racially or Religiously Motivated Offences",
        "Case Overviews for Sexual Offences",
        "Case Overviews for Murder",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Gross Negligence Manslaughter"
    ],
    "CATEGORIES": [
        "Voluntary Association"
    ],
    "NUMBER": "282",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Voluntary Association",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hasan</span></span><br><span class=\"sm\">Guilty. No defence; it was precluded where the risk to which the defendant exposed himself is pressure compelling him to commit any type of crime that he ought to have foreseen</span></span></li></ul>"
    ],
    "CATEGORY": "Voluntary Association"
},
{
    "RELATED": [
        "Case Overviews for Joint Enterprise",
        "Case Overviews for Non-Fatal Offences - GBH",
        "Case Overviews for Attempt",
        "Case Overviews for Gross Negligence Manslaughter",
        "Case Overviews for Sexual Offences",
        "Case Overviews for Unlawful Act Manslaughter",
        "Case Overviews for Transaction Theory",
        "Case Overviews for Criminal Liability",
        "Case Overviews for Corruption of Public Morals",
        "Case Overviews for Non-Fatal Offences",
        "Case Overviews for Intoxication",
        "Case Overviews for Inchoate Liability"
    ],
    "CATEGORIES": [
        "Voluntary Exposure to Risk"
    ],
    "NUMBER": "283",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Voluntary Exposure to Risk",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Fitzpatrick</span></span><br><span class=\"sm\">An individual will be unable to rely on duress as a defence if they voluntarily associate with people who are likely to commit a crime</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Sharp</span></span><br><span class=\"sm\">defence of duress was removed because he knowingly exposed himself to the risk of duress by earlier engagement with the other guilty parties. Followed principle from Fitzpatrick.</span></span></li></ul>"
    ],
    "CATEGORY": "Voluntary Exposure to Risk"
},
{
    "RELATED": [
        "Case Overviews for Non-Fatal Offences",
        "Case Overviews for Gross Negligence Manslaughter",
        "Case Overviews for Elements",
        "Case Overviews for Criminal Liability",
        "Case Overviews for Unlawful Act Manslaughter",
        "Case Overviews for Complicity",
        "Case Overviews for Intoxication",
        "Case Overviews for Racially or Religiously Motivated Offences",
        "Case Overviews for Attempt",
        "Case Overviews for Voluntary Association",
        "Case Overviews for General Defences",
        "Case Overviews for Voluntary Exposure to Risk"
    ],
    "CATEGORIES": [
        "Non-Fatal Offences"
    ],
    "NUMBER": "284",
    "TYPE": "Case Overviews",
    "NAME": "Case Overviews for Non-Fatal Offences - GBH",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">DPP v Smith (1961)</span></span><br><span class=\"sm\">Grievous Bodily Harm means &#8220;really serious harm&#8221;.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bollom</span></span><br><span class=\"sm\">Harm that would be ABH in one person can be GBH in another. V&#8217;s special characteristics (age, state of health) are to be taken into account when considering whether the harm is ABH or GBH.</span></span></li></ul>"
    ],
    "CATEGORY": "Non-Fatal Offences"
}];"; 

cardsLen = 284;

