cts_ = "WwogICAgIkNhc2UiLAogICAgIkNhc2UgT3ZlcnZpZXdzIiwKICAgICJDb25jZXB0IiwKICAgICJIZWFkbm90ZXMiLAogICAgIkhlbHAiLAogICAgIlJlYWRpbmciLAogICAgIlN0YXR1dGUiCl0="; 

crt_ = "WwogICAgIiIsCiAgICAiQ0pFVSIsCiAgICAiQ2FsaWZvcm5pYSBTQyIsCiAgICAiQ2FuYWRhIFNDIiwKICAgICJFQ0hSIiwKICAgICJFV0NBIiwKICAgICJFV0hDIiwKICAgICJVSEtMIiwKICAgICJVS0hMIiwKICAgICJVS1BDIiwKICAgICJVS1NDIgpd"; 

cnc_ = "WwogICAgIkJyZWFjaCBvZiBEdXR5IC0gU3RhbmRhcmQgb2YgQ2FyZSIsCiAgICAiQ2F1c2F0aW9uIC0gVGhlIEJ1dCBGb3IgVGVzdCIsCiAgICAiQ2F1c2F0aW9uIC0gVGhlIEZhaXJjaGlsZCBFeGNlcHRpb24iLAogICAgIkRlZmFtYXRpb24iLAogICAgIkRlZmFtYXRpb24gLSBEZWZlbmNlcyBJIiwKICAgICJEZWZhbWF0aW9uIC0gRGVmZW5jZXMgSUkgLSBQcml2aWxlZ2UiLAogICAgIkRlZmFtYXRpb24gLSBSZW1lZGllcyIsCiAgICAiRGVmZW5jZXMgdG8gTmVnbGlnZW5jZSIsCiAgICAiRHV0eSBvZiBDYXJlIiwKICAgICJEdXR5IG9mIENhcmUgLSBQdWJsaWMgQXV0aG9yaXRpZXMiLAogICAgIkVtcGxveWVycycgUHJpbWFyeSBMaWFiaWxpdHkiLAogICAgIkZvcmVzZWVhYmlsaXR5IiwKICAgICJPY2N1cGllcnMnIExpYWJpbGl0eSIsCiAgICAiUHJpdmF0ZSBOdWlzYW5jZSIsCiAgICAiUHJpdmF0ZSBOdWlzYW5jZSAtIERlZmVuY2VzIGFuZCBSZW1lZGllcyIsCiAgICAiUHJvZHVjdCBMaWFiaWxpdHkiLAogICAgIlBzeWNoaWF0cmljIEhhcm0iLAogICAgIlBzeWNoaWF0cmljIEhhcm0gLSBBbmFseXNpcyBvZiBMYXciLAogICAgIlB1YmxpYyBOdWlzYW5jZSIsCiAgICAiUHVyZSBFY29ub21pYyBMb3NzIiwKICAgICJSZW1vdGVuZXNzIiwKICAgICJUaGUgUnVsZSBpbiBSeWxhbmRzIHYgRmxldGNoZXIiLAogICAgIlZpY2FyaW91cyBMaWFiaWxpdHkiCl0="; 

cgs_ = "[
    "\"Practical Justice\"",
    "20 years' Prescription",
    "Absolute Privilege",
    "Accessories",
    "Accidental Defamation",
    "Accidents",
    "Accountancy",
    "Accountants",
    "Act of God",
    "Act of a Stranger",
    "Adequate Materials and Equipment",
    "Administrative Law Other Related Subjects: Human Rights",
    "Adoption or Continuation of Nuisance",
    "Adversarial Proceedings",
    "Advertisements",
    "Advice",
    "Affirmation",
    "After the Event Insurance",
    "Age",
    "Agency Staff",
    "Air Pollution",
    "Aircraft",
    "Allurement",
    "Ambulance Service",
    "Amendments",
    "Amputation",
    "Ancillary Relief",
    "Ankle",
    "Anonymity",
    "Anti-Social Behaviour",
    "Apology or Retraction",
    "Appeals",
    "Apportionment",
    "Armed Forces",
    "Army",
    "Arrest",
    "Art. 10 in Defamation",
    "Art. 6 in Defamation",
    "Art. 8 in Defamation",
    "Art. 8 in Nuisance",
    "Asbestos",
    "Asbestos -- Smoking",
    "Asbestosis",
    "Assault",
    "Associations",
    "Assumption of Responsibility",
    "Asthma",
    "Asylum Seekers",
    "Attacking Civilian Population",
    "Auditors",
    "Authors",
    "Bad Faith",
    "Battery",
    "Beverages",
    "Birth Defects",
    "Bolam Test",
    "Books",
    "Borstals",
    "Bottles",
    "Brain Damage",
    "Breach",
    "Breach of Contract",
    "Breach of Duty",
    "Breach of Duty of Care",
    "Breach of Fiduciary Duty",
    "Breach of Statutory Duty",
    "Break Clauses",
    "Bribery",
    "Brownfield Sites",
    "Building Inspectors",
    "Burden of Proof",
    "Burglary",
    "Business Tenancies",
    "But For Test",
    "Bystanders",
    "CPA 1987",
    "CPA Defectiveness",
    "CPA Defences",
    "Cancer",
    "Capacity",
    "Caparo",
    "Capital Taxation",
    "Catholic Church",
    "Causation",
    "Causes of Action",
    "Certainty",
    "Child Abu",
    "Child Abuse",
    "Child Sexual Abuse",
    "Children",
    "Children'S Welfare",
    "Chiropractors",
    "Civil Procedure",
    "Civil Procedure Other Related Subjects: Administration of Justice",
    "Civil Procedure Other Related Subjects: Company Law",
    "Civil Procedure Other Related Subjects: Telecommunications",
    "Claimant's Enquiries",
    "Claimant's own fault",
    "Class of Persons",
    "Clergy",
    "Clinical Negligence",
    "Collective Investment Schemes",
    "Colonies",
    "Coming to the Nuisance",
    "Commercial Court",
    "Common Law",
    "Common Practice",
    "Company Law Other Related Subjects: Hospitality and Leisure",
    "Compensatory Damages",
    "Competent Employees",
    "Competitions",
    "Conflict of Interest",
    "Consent",
    "Consent to Treatment",
    "Construction Contracts",
    "Consumer Law",
    "Consumer Law Other Related Subjects: Negligence",
    "Consumer Protection",
    "Consumer Safety",
    "Contaminated Land",
    "Contempt of Court",
    "Contraception",
    "Contracts",
    "Contracts Other Related Subjects: Negligence",
    "Contribution",
    "Contributory Negligence",
    "Control",
    "Corporate Insolvency",
    "Corruption",
    "Costs",
    "Costs Budgets",
    "Costs Orders",
    "Councillors",
    "Cricket",
    "Crime Prevention",
    "Criminal Conduct",
    "Criminal Law",
    "Criminal Law Other Related Subjects: Human Rights",
    "Criminal Procedure Other Related Subjects: Sentencing",
    "Custody",
    "Customary Law",
    "Damage",
    "Damage to Property",
    "Damages",
    "Damages Other Related Subjects: Negligence",
    "Dangerous Escape",
    "Dangerous Offenders",
    "Dangerous User",
    "Dangerousness",
    "Death",
    "Dedication",
    "Defamation",
    "Defamation Act 2013",
    "Defamation Other Related Subjects: Civil Evidence",
    "Defamation Other Related Subjects: Civil Procedure",
    "Defamation Other Related Subjects: Media and Entertainment",
    "Defamatory Meaning",
    "Defamatory Statements",
    "Defective Products",
    "Defects",
    "Defences",
    "Defendant's Knowledge",
    "Delay",
    "Deliberate Accumulation",
    "Denominational Schools",
    "Depression",
    "Derisory Damages",
    "Detour",
    "Development",
    "Diagnosis",
    "Diplomatic Immunity",
    "Directives",
    "Director General of Water Services",
    "Directors' Powers and Duties",
    "Disabled Persons",
    "Disasters",
    "Disclaiming Responsibility",
    "Discrimination",
    "Dishonest Assistance",
    "Dishonesty",
    "Divers",
    "Doctors",
    "Drink Driving Offences",
    "Driving When Unfit",
    "Duration",
    "Duration of Interference",
    "Duty of Care",
    "Duty to Appraise Patient of Material Risks",
    "Duty to Non-visitors",
    "Duty to Visitors",
    "Duty to Warn",
    "Ec Law",
    "Economic Loss",
    "Education",
    "Electricity Interconnectors",
    "Email",
    "Emergency Services",
    "Employee Benefit Trusts",
    "Employees",
    "Employees' Rights",
    "Employers' Duties",
    "Employers' Liability",
    "Employment",
    "Employment-Related Securities",
    "Environment",
    "Environmental Impact Assessments",
    "Equipment",
    "Erosion",
    "Escape",
    "Evidence",
    "Ex Turpi Causa",
    "Exceptions",
    "Exclusion",
    "Exclusion Clauses",
    "Expenses",
    "Expert Evidence",
    "Extensions of Time",
    "Fair Comment",
    "Fairchild",
    "Falls From Height",
    "False (popular) Innunendo",
    "Families",
    "Family Law",
    "Family Law Other Related Subjects: International Law",
    "Fatal Accident Claims",
    "Fault for Nuisance",
    "Financial Orders",
    "Financial Provision Orders",
    "Financial Regulation",
    "Fire",
    "Fire Brigades",
    "Fire Services",
    "Firearms",
    "Floodgates",
    "Floods",
    "Food Hygiene",
    "Football",
    "Foreign Criminals",
    "Foreseeability",
    "Foreseeability of Nuisance",
    "Fostering",
    "Fraud",
    "Fraudulent Dealing",
    "Free Movement of Persons",
    "Freedom of Expression",
    "Freezing Injunctions",
    "Fresh Evidence",
    "Fugitive Offenders",
    "Games",
    "Germany",
    "Government Liability",
    "Group Defamation",
    "Guilty Pleas",
    "Harassment",
    "Hazardous Pursuits",
    "Health",
    "Health and Safety at Work",
    "Highways",
    "Hip Joint",
    "Homosexuality",
    "Honest Comment",
    "Horses",
    "Hospitality and Leisure",
    "Hospitals",
    "Household Waste",
    "Houses",
    "Human Rights",
    "Human Rights Other Related Subjects: Mental Health",
    "Identification",
    "Immigration",
    "Immigration Appeals Tribunal",
    "Immigration Other Related Subjects: Administrative Law",
    "Immunity From Suit",
    "Implied Licences",
    "Implied Terms",
    "In the Course of Employment",
    "Income Tax",
    "Independent Contractors",
    "Indictments",
    "Industrial Diseases",
    "Infections",
    "Informal In-Patients",
    "Injunctions",
    "Innocent Dissemination",
    "Innuendo",
    "Innuendos",
    "Insanity",
    "Insolvency",
    "Inspections",
    "Insurance Contracts",
    "Insurance Other Related Subjects: Contracts",
    "Insurance Policies",
    "Intention",
    "Intentional Torts",
    "Interim Injunctions",
    "International Maritime Organisation",
    "Interpretation",
    "Intervening Events",
    "Intoxication",
    "Investigations",
    "Issues",
    "Jamaica",
    "Joint Enterprise",
    "Joint Tortfeasors",
    "Judicial Review",
    "Juries",
    "Jurisdiction",
    "Jury Directions",
    "Just Satisfaction",
    "Justification",
    "Knives",
    "Knowledge",
    "Land Banking Schemes",
    "Landlord and Tenant",
    "Landlord and Tenant Other Related Subjects: Contracts",
    "Landlords",
    "Landowners",
    "Landslides",
    "Leave of Absence From Hospital",
    "Leg",
    "Letters",
    "Liabilities",
    "Libel",
    "Life-Sustaining Treatment",
    "Limitations",
    "Limited Liability Partnerships",
    "Liquidation",
    "Local Authorities",
    "Local Authorities' Liabilities",
    "Local Authorities' Powers and Duties",
    "Local Circumstances",
    "Local Circumstances irrelevant where Property Damage",
    "Local Education Authorities' Powers and Duties",
    "Local Government",
    "Locus Standi",
    "Loss of Opportunity",
    "Lump Sum Payments",
    "Lymph Vessels",
    "Malice",
    "Malicious Nuisance",
    "Manufacturer's Duty",
    "Margin of Appreciation",
    "Market Share Rule",
    "Matrimonial Property",
    "Meaning",
    "Meaning of Dangerous",
    "Meaning of Defamatory",
    "Meaning of Employee",
    "Meaning of Occupier",
    "Meaning of Visitor",
    "Measure of Damages",
    "Media and Entertainment",
    "Medical Advice",
    "Medical Equipment",
    "Medical Negligence",
    "Members",
    "Members of Parliament",
    "Mens Rea",
    "Mental Patients",
    "Mesothelioma",
    "Military Bases",
    "Ministers of Religion",
    "Ministry of Justice",
    "Misapplication",
    "Misconduct",
    "Misrepresentation",
    "Mistake",
    "Motor Insurers' Bureau",
    "Motor Sports",
    "Multiple Publication",
    "Murder",
    "NHS",
    "Natural User",
    "Nature of Relationship",
    "Necessity of First-Hand Experience",
    "Necessity of Proximity",
    "Necessity of Shocking Event",
    "Negligence",
    "Negligence Other Related Subjects: Company Law",
    "Negligence Other Related Subjects: Construction Law",
    "Negligence Other Related Subjects: Damages",
    "Negligence Other Related Subjects: Employment",
    "Negligence Other Related Subjects: Family Law",
    "Negligence Other Related Subjects: Health",
    "Negligence Other Related Subjects: Health and Safety at Work",
    "Negligence Other Related Subjects: Hospitality and Leisure",
    "Negligence Other Related Subjects: Human Rights",
    "Negligence Other Related Subjects: Information Technology",
    "Negligence Other Related Subjects: Insurance",
    "Negligence Other Related Subjects: Local Government",
    "Negligence Other Related Subjects: Personal Injury",
    "Negligence Other Related Subjects: Police",
    "Negligence Other Related Subjects: Professions",
    "Negligence Other Related Subjects: Road Traffic",
    "Negligence Other Related Subjects: Shipping",
    "Negligence Other Related Subjects: Tax",
    "Negligent Misstatement",
    "Neighbour Principle",
    "Nervous Shock",
    "New Intervening Act",
    "Newspapers",
    "Nhs Trusts",
    "Nightclubs",
    "No Punishment Without Law",
    "No imputation of improper conduct",
    "Noise",
    "Nominal Damages",
    "Non-Disclosure",
    "Non-Resident Companies",
    "Non-natural use",
    "Notice",
    "Novus Actus Interveniens",
    "Nuisance",
    "Nuisance Other Related Subjects: Civil Procedure",
    "Nuisance Other Related Subjects: Damages",
    "Nuisance Other Related Subjects: Environment",
    "Nuisance Other Related Subjects: Human Rights",
    "Nuisance Other Related Subjects: Negligence",
    "Nuisance caused by Acts of Nature",
    "Nuisance compared to Rylands",
    "Objective Standard",
    "Occupational Health",
    "Occupational Stress",
    "Occupiers' Liability",
    "Odours",
    "Offer of Amends",
    "One Product Damaging Another",
    "Opinion Evidence",
    "Opinion or Truth",
    "Paralysis",
    "Parents",
    "Parliamentary Privilege",
    "Part 36 Payments",
    "Particulars of Claim",
    "Partnerships Other Related Subjects: Contracts",
    "Party Walls",
    "Passengers",
    "Patients' Rights",
    "Personal Injury",
    "Personal Injury Other Related Subjects: Damages",
    "Personal Injury Other Related Subjects: Insurance",
    "Personal Injury Other Related Subjects: Local Government",
    "Personal Injury Other Related Subjects: Negligence",
    "Personal Injury Other Related Subjects: Torts",
    "Photographs",
    "Pigs",
    "Plaintiffs",
    "Planning",
    "Planning Permission",
    "Planning Permission as Defence",
    "Pleadings",
    "Poisoning",
    "Police",
    "Police Authorities",
    "Police Forces",
    "Police Officers",
    "Police Other Related Subjects: Negligence",
    "Police Other Related Subjects: Torts",
    "Police Powers and Duties",
    "Possession with Intent to Supply",
    "Post-Traumatic Stress Disorder",
    "Practicality of Precautions",
    "Pragmatism",
    "Pre-Action Costs",
    "Pre-Action Protocols",
    "Pregnancy",
    "Preliminary Issues",
    "Prescription",
    "Press",
    "Preventive Measures",
    "Primary Liability",
    "Primary Victimhood",
    "Primary Victims",
    "Principles",
    "Prison",
    "Prison Service",
    "Prisoners",
    "Prisons",
    "Private Nuisance",
    "Privilege",
    "Privilege Against Self-Incrimination",
    "Product Liability",
    "Product Liability for Pure Economic Loss",
    "Professional Negligence",
    "Professionals",
    "Proportionality",
    "Protection of Property",
    "Proving Manufacturer's Negligence",
    "Proximity",
    "Psychiatric Harm",
    "Psychiatric Illness",
    "Public Authorities",
    "Public Authority",
    "Public Benefit",
    "Public Inquiries",
    "Public Interest",
    "Public Liability Insurance",
    "Public Nuisance",
    "Public Opinion",
    "Public Order Offences",
    "Public Policy",
    "Public Rights of Way",
    "Public Sector Employees",
    "Public Utility",
    "Public benefit of nuisance",
    "Publication",
    "Publications",
    "Pure Economic Loss",
    "Purposive Interpretation",
    "Qualified Privilege",
    "Quantification of Damages",
    "Quarries",
    "Racial Harassment",
    "Ramsay Principle",
    "Real Property",
    "Real Property Other Related Subjects: Road Traffic",
    "Reasonable Belief",
    "Reasonable Care",
    "Reasonable User",
    "Reasonableness",
    "Reasonableness of Reliance",
    "Reasonableness of Use",
    "Recklessness",
    "Rectification",
    "Reduction",
    "Reference to Claimant",
    "References",
    "Refugees",
    "Relationship akin to Employment",
    "Relationship between Parties",
    "Reliance",
    "Religious Groups",
    "Remedial Works",
    "Remedies",
    "Remedies -- damages",
    "Remedies -- injunction",
    "Remoteness",
    "Removal",
    "Rent",
    "Repayments",
    "Reporting Restrictions",
    "Representation of Expertise",
    "Repudiation",
    "Reputation",
    "Requirement of Seriousness",
    "Rescuers",
    "Residence",
    "Residential Care",
    "Residential Tenancies",
    "Responsible Journalism",
    "Restaurants",
    "Restricted Shares",
    "Retirement",
    "Reynolds Defence",
    "Reynolds Test",
    "Ridicule",
    "Right of Support",
    "Right to Fair Trial",
    "Right to Life",
    "Right to Respect For Private and Family Life",
    "Risk",
    "Road Safety",
    "Road Traffic",
    "Road Traffic Accidents",
    "Road Works",
    "Roads",
    "Roman Catholic Church",
    "Russia",
    "Rylands V Fletcher Liability",
    "Rylands v Fletcher",
    "Safe Place of Work",
    "Safe System of Work",
    "Safety",
    "School Premises",
    "Schools",
    "Scientific Uncertainty",
    "Scotland",
    "Seaworthiness",
    "Secondary Victimhood",
    "Secondary Victims",
    "Secure Tenancies",
    "Security For Costs",
    "Self-Defence",
    "Self-Employment",
    "Sensitive Claimant",
    "Sentencing Guidelines",
    "Several Liability",
    "Severity of Potential Harm",
    "Sewerage",
    "Sewerage Undertakers",
    "Sexual Abuse",
    "Shareholders",
    "Ships",
    "Shipyards",
    "Shops",
    "Slander",
    "Smell",
    "Smoking",
    "Social Work Records",
    "Social Workers",
    "Soldiers",
    "Solicitors",
    "Special Damage Exceptions in Slander",
    "Special Skills",
    "Spectators",
    "Sport",
    "Squatting",
    "Sri Lanka",
    "Standard of Care",
    "Starting Point",
    "Statement in a Social Context",
    "Statute",
    "Statutes",
    "Statutory Authority",
    "Statutory Interpretation",
    "Statutory Provisions",
    "Statutory Reviews",
    "Sting of Allegation",
    "Strict Liability",
    "Striking Out",
    "Stupidity",
    "Sub-Contractors",
    "Subcontracting of Maintenance",
    "Subcontractors",
    "Subsidence",
    "Substantial Truth",
    "Success Fees",
    "Succession",
    "Sufficiency of Evidence",
    "Suicide",
    "Summary Judgments",
    "Supervening Acts and Combined Events",
    "Supervision",
    "Surgical Procedures",
    "Take Overs",
    "Talaq Divorce",
    "Tax",
    "Tax Avoidance",
    "Tax Enquiries",
    "Tax Evasion",
    "Tax Other Related Subjects: Human Rights",
    "Tax Returns",
    "Teachers",
    "Telephones",
    "Thin Skull Rule",
    "Third Parties",
    "Threats",
    "Time",
    "Torts",
    "Torts Other Related Subjects: Civil Procedure",
    "Torts Other Related Subjects: Damages",
    "Torts Other Related Subjects: Ecclesiastical Law",
    "Torts Other Related Subjects: Employment",
    "Torts Other Related Subjects: Local Government",
    "Torts Other Related Subjects: Negligence",
    "Torts Other Related Subjects: Personal Injury",
    "Torts Other Related Subjects: Police",
    "Torts Other Related Subjects: Real Property",
    "Totality of Published Material",
    "Tour Operators",
    "Traffic Accident",
    "Transport",
    "Travellers",
    "Trespass",
    "Trespass to Land",
    "Trespassers",
    "Tripping and Slipping",
    "True (legal) Innunendo",
    "Truth",
    "Trying it on",
    "Tyres",
    "Unauthorised Investment Business",
    "Unincorporated Associations",
    "Unlawful Means Conspiracy",
    "Unlicensed Disposal of Waste",
    "Unsolicited Communications",
    "Unwanted Pregnancy",
    "Utilities",
    "Utility of Conduct",
    "Vandalism",
    "Verdicts",
    "Verification",
    "Vicarious Liability",
    "Victims",
    "Visitors",
    "Volenti",
    "Volenti Non Fit Injuria",
    "Warning signs",
    "Warnings",
    "Waste Water Treatment",
    "Water Supply",
    "Websites",
    "Wheelchairs",
    "Who can be sued",
    "Who can sue",
    "Wilful Misconduct",
    "Witnesses",
    "Wounding with Intent"
]"; 

pfl_ = "WwogICAgIjIwMTUvMjAxNiEiLAogICAgIkFtdXNpbmciLAogICAgIkFwcHJvdmVkIiwKICAgICJCaW5naGFtIiwKICAgICJDaGlsZCBBYnVzZSIsCiAgICAiQ2hpbGRyZW4iLAogICAgIkNyaWNrZXQiLAogICAgIkNyaXRpY2lzZWQiLAogICAgIkRlbm5pbmciLAogICAgIkRldmVsb3BtZW50IiwKICAgICJEaXNhc3RlciIsCiAgICAiRUNIUiBDbGFpbSIsCiAgICAiRUNIUiBDbGFpbXMiLAogICAgIkVQTFIiLAogICAgIkZsb29kZ2F0ZXMiLAogICAgIkhhbGUiLAogICAgIkhvZmZtYW5uIiwKICAgICJJbXBvcnRhbnQiLAogICAgIkludGVyZXN0aW5nIiwKICAgICJLZXkiLAogICAgIkxlYWRpbmciLAogICAgIk5ldWJlcmdlciIsCiAgICAiT3ZlcnJ1bGVkIiwKICAgICJSZWNlbnQiLAogICAgIlRlc3QiLAogICAgIlRyYWZmaWMgQWNjaWRlbnQiLAogICAgIlRyYWluIENyYXNoIiwKICAgICJUcnlpbmcgaXQgb24iLAogICAgImFwcGVhbC1vdXRzdGFuZGluZyIKXQ=="; 

ntn_ = '{
    "wl cox v ministry of justice":"424",
    "wl piper v jri manufacturing ltd":"456",
    "wl telnikoff v matusevich":"494",
    "wl ames v the spamhaus project ltd":"488",
    "oshea v mgn":"294",
    "wl mohamud v wm morrison supermarkets plc":"431",
    "owens v brimmell":"98",
    "wl jobling v associated dairies":"365",
    "bunt v tilley":"299",
    "jd v east berkshire nhs":"24",
    "wl milne v express newspapers ltd":"504",
    "wl wheat v lacon and co ltd":"432",
    "swinny v chief constable of northumbria":"27",
    "wl transco plc v stockport mbc":"480",
    "remoteness":"76",
    "biffa":"151",
    "abouzaid v mothercare":"202",
    "dorset yacht v home office":"4",
    "commission v uk c30095 1997":"207",
    "viasystems v thermal transfer":"149",
    "wl rabone v pennine care nhs trust":"349",
    "delaney v pickett":"110",
    "wl clift v slough bc":"500",
    "causation  the fairchild exception":"61",
    "white v blackmore":"181",
    "williams v university of birmingham":"44",
    "godfrey v demon":"298",
    "hawley v luminar":"150",
    "evans v triplex":"191",
    "baker v hopkins":"102",
    "richardson v lrc products":"201",
    "jobling v associated dairies":"65",
    "smith v bush":"214",
    "john v mgn":"320",
    "bone v searle":"257",
    "allen v gulf oil refining":"254",
    "wl montgomery v lanarkshire health board":"359",
    "case overviews for negligence  defences":"325",
    "customs and excise v barclays":"222",
    "hedley byrne v heller":"212",
    "swinny no 2":"28",
    "pollard v tesco":"205",
    "wl monk v pc harrington ltd":"406",
    "grobbelaar v news group":"304",
    "defamation  remedies":"318",
    "z v uk":"20",
    "lms int v styrene":"267",
    "case overviews for negligence  causation":"323",
    "cassidy v daily mirror":"289",
    "reeves v the met":"85",
    "jge v our lady of charity":"152",
    "wieland v cyril lord carpets":"82",
    "defamation":"273",
    "wl waterson v lloyd":"496",
    "davie v new merton board mill":"137",
    "road traffic act 1988":"113",
    "wl thompson v smiths shiprepairers north shields ltd":"414",
    "dutton v bognor regis":"194",
    "gray v jones":"276",
    "wl coventry v lawrence":"463",
    "michael v chief constable of south wales":"33",
    "morgan v odhams press":"293",
    "wl dorset yacht co ltd v home office":"333",
    "wl chester v afshar":"367",
    "keown v coventry nhs":"186",
    "wl pollard v tesco stores":"455",
    "montgomery v lanarkshire health board":"51",
    "watt v longsdon":"313",
    "hill":"12",
    "wl clark v bourne leisure limited":"443",
    "wl bryanston finance ltd v de vries no 1":"502",
    "wl thornton v telegraph media group ltd":"486",
    "bolitho":"47",
    "wl evans v triplex safety glass":"449",
    "wl platt v liverpool city council":"447",
    "white":"118",
    "british celanese v hunt":"233",
    "mcloughlin v obrian":"128",
    "spring v guardian assurance":"217",
    "sanderson v hull":"71",
    "bolam v friern hospital":"49",
    "wl harvey v plymouth city council":"433",
    "employers liability  reading":"134",
    "wl reeves v metropolitan police commissioner":"379",
    "duty of care  public authorities  reading":"18",
    "badger v mod":"99",
    "vowles v evans":"11",
    "coventry v lawrence":"231",
    "wl viasystems tyneside ltd v thermal transfer northern ltd":"419",
    "wl st helens smelting co v tipping":"462",
    "wl mcfarlane v ee caledonia ltd":"407",
    "wl everett v comojo ltd uk":"338",
    "wl hinz v berry":"400",
    "baturina v times":"287",
    "loutchansky":"301",
    "remoteness  reading":"77",
    "psychiatric harm  reading":"116",
    "ag v pya quarries":"259",
    "cattle v stockton waterworks":"210",
    "alcock v south yorkshire police":"119",
    "sedleighdenfield v ocallaghan":"240",
    "fairchild principle":"61",
    "anns v merton":"5",
    "occupiers liability":"164",
    "nettleship v weston":"37",
    "robone v pennine care nhs":"30",
    "walker v northumberland":"140",
    "ucta 1977":"114",
    "sienkiewicz v greif":"75",
    "wl bogle v mcdonalds restaurants ltd":"454",
    "wl the scout association v barnes":"356",
    "esso v mardon":"218",
    "monson v tussauds":"279",
    "wl chadwick v british railways board":"404",
    "reynolds":"312",
    "marcic v thames water":"237",
    "wl bernard v attorney general of jamaica":"427",
    "occupiers liability act 1984":"183",
    "case overviews for psychiatric harm":"326",
    "clift v slough":"314",
    "wl swinney v chief constable of northumbria":"347",
    "private nuisance":"224",
    "wl osman v united kingdom":"343",
    "coventry v lawrence no 2":"251",
    "mcnaughton v anderson":"220",
    "bogle v mcdonalds":"204",
    "bourhill v young":"127",
    "lamb v camden":"79",
    "barett v enfield":"23",
    "barnett v chelsea and kensington hospital":"58",
    "sarah 2015":"55",
    "ici v shatwell":"104",
    "telnikoff v matusevich":"305",
    "vacwell engineering v bdh":"193",
    "wilsher v essex aha":"60",
    "wl vellino v chief constable of greater manchester":"395",
    "rylands rule":"263",
    "wl hufton v somerset cc":"436",
    "wl steel and morris v uk":"505",
    "case overviews for employers liability  primary liability":"327",
    "pitts v hunt":"108",
    "hotson v east berkshire":"59",
    "smith v littlewoods":"15",
    "junior books":"195",
    "dulieu v white":"120",
    "haseldine v daw":"179",
    "white v south yorkshire police":"118",
    "wl van colle v chief constable of hertfordshire":"348",
    "wl lennon v commissioner of police of the metropolis":"457",
    "barker v corus":"73",
    "wl various claimants v institute of the brothers of the christian schools":"423",
    "psychiatric harm  analysis of law":"132",
    "hudson v ridge":"136",
    "worsley v tambrands":"200",
    "flood v the times":"317",
    "hambrook v stokes":"130",
    "chadwick v btc":"123",
    "defamation act 2013":"282",
    "wl gray v thames trains":"380",
    "consumer protection act 1987":"199",
    "hughes v lord advocate":"91",
    "stennett v hancock":"190",
    "wl white v chief constable of south yorkshire":"401",
    "bryanston v de vries no 1":"316",
    "wl mcdermid v nash dredging and reclamation co ltd":"415",
    "wl lewis v daily telegraph ltd":"490",
    "wl barker v corus uk":"372",
    "wl selwood v durham cc":"342",
    "mcghee v national coal board":"66",
    "revill v newbery":"106",
    "wl holbeck hall hotel ltd v scarborough borough council":"469",
    "charleston v new group":"281",
    "liverpool womens hospital v ronayne":"131",
    "rylands":"264",
    "gregg v scott":"69",
    "product liability":"188",
    "allen v hampshire":"162",
    "df estates v coe":"196",
    "stovin v wise":"16",
    "howard marine dredging v ogden  sons":"215",
    "product liability  reading":"189",
    "wl butcher v southendonsea bc":"437",
    "wl williams v university of birmingham":"354",
    "wl gregg v scott":"368",
    "the wagon mound no 2":"43",
    "bolitho v hackney ha":"47",
    "steel and morris v uk":"319",
    "cambridge water v eastern counties leather":"228",
    "wl wooten v j docter":"371",
    "wl cook v lewis":"364",
    "wl fairchild v glenhaven funeral services ltd":"366",
    "alcock":"119",
    "wl pierce v doncaster mbc":"358",
    "monk v harrington":"125",
    "pure economic loss  reading":"209",
    "gore v stannard wyvern tyres":"266",
    "mckew v holland":"81",
    "wl dennis v ministry of defence":"466",
    "jolley v sutton":"92",
    "mckenna v british aluminium":"246",
    "osman v ferguson":"8",
    "wl robinson v chief constable of west yorkshire":"350",
    "donoghue v folkestone properties":"185",
    "wooldridge v sumner":"103",
    "wl a v united kingdom":"498",
    "wl lms international v styrene packaging ltd":"482",
    "sellwood v durham":"14",
    "gravil v redruth":"159",
    "butcher v southend":"175",
    "wl maguire v sefton mbc":"442",
    "youssoupoff":"275",
    "morris v murray":"105",
    "rickards v lothian":"269",
    "bernard v ag of jamaica":"158",
    "wl lamb v camden lbc":"375",
    "cox":"154",
    "tedstone v bourne leisure":"172",
    "occupiers liability  reading":"165",
    "wl sanderson v hull":"370",
    "wl ici v shatwell":"392",
    "platt v liverpool":"187",
    "wl walker v northumberland county council":"412",
    "case overviews for negligence  breach of duty":"322",
    "wl biffa waste services ltd v maschinenfabrik ernst hese gmbh":"421",
    "caparo v dickman":"6",
    "private nuisance  defences and remedies":"252",
    "w v essex":"122",
    "baker v willoughby":"64",
    "wl lippiatt v south gloucestershire council":"468",
    "sutcliffe v bmi healthcare":"48",
    "hollywood silver fox farm":"239",
    "wl phipps v rochester corporation":"439",
    "wl taylor v a novo ltd uk":"409",
    "case overviews for pure economic loss":"330",
    "defamation  reading":"274",
    "waterson v lloyd":"307",
    "kennaway v thompson":"256",
    "pure economic loss":"208",
    "wl aswan engineering v lupdine":"450",
    "lister":"157",
    "chaudry v prabhaker":"216",
    "psychiatric harm":"115",
    "wl john v mgn ltd":"506",
    "sturges v bridgman":"229",
    "quacks v singh":"306",
    "thompson v smiths shiprepairers":"142",
    "nuisance remedies":"252",
    "malone v laskey":"243",
    "doughty v turner manufacturing":"93",
    "wl z and others v united kingdom":"344",
    "wl liverpool womens hospital nhs foundation trust v ronayne":"410",
    "defamation  defences i":"303",
    "knightly v johns":"80",
    "transco v stockport":"265",
    "wl reynolds v times newspapers ltd":"499",
    "wl morgan v odhams press ltd":"491",
    "wl british chiropractic association v singh":"495",
    "wl berkoff v burchill and the times":"485",
    "barber v somerset":"141",
    "employers primary liability":"133",
    "christian brothers":"153",
    "berkoff v burchill":"280",
    "meah v mccreamer no 2":"87",
    "wl ministry of defence v radclyffe":"428",
    "wl jge v english province of our lady of charity":"422",
    "hinz v berry":"117",
    "wl spiller v joseph":"497",
    "ames v spamhaus project":"285",
    "knupffer v london express":"295",
    "harvey v plymouth":"168",
    "wl cooke v mirror group newspapers ltd":"487",
    "wl haseldine v daw":"441",
    "byrne v deane":"286",
    "nuisance  reading":"225",
    "page v smith":"121",
    "latimer v aec":"42",
    "wl owens v brimmell":"387",
    "cpa 1987":"199",
    "but for":"56",
    "wl patchett v swimming pool trades association":"461",
    "gough v thorne":"100",
    "bamford v turnley":"235",
    "moore stephens v stone rolls":"109",
    "wl stevenson jordan  harrison v mcdonald  evans":"417",
    "wl a and others v national blood authority":"453",
    "wl kennaway v thompson":"476",
    "tamiz v google":"300",
    "mak and rk v uk":"26",
    "tomlinson v congleton":"184",
    "wl richardson v lrc products ltd":"452",
    "orchard v lee":"53",
    "wl orchard v lee":"361",
    "gray v thames":"88",
    "clark v bourne leisure":"182",
    "unfair contract terms act 1977":"114",
    "phipps v rochester":"177",
    "coltman v bibby takers":"139",
    "poppleton v portsmouth yac":"173",
    "mullin v richards":"52",
    "scout association v barnes":"46",
    "froom v butcher":"97",
    "wl ellison v ministry of defence":"483",
    "joyce v obrien":"111",
    "emeh v kensington  chelsea":"84",
    "wl maga v birmingham roman catholic archdiocese trustees":"429",
    "bloodworth v gray":"277",
    "a v national blood authority":"203",
    "wl wooldridge v sumner":"391",
    "wl wieland v cyril lord carpets":"377",
    "you v tort law":"0",
    "wl dobson v thames water utilities":"471",
    "hulton v jones":"291",
    "chester v afshar":"68",
    "dymond v pearce":"261",
    "mohamud":"163",
    "everett v comojo":"9",
    "wl mckenna v british aluminium ltd":"472",
    "wl badger v ministry of defence":"388",
    "stapley v gypsum mines":"145",
    "harris v perry":"41",
    "lewis v daily telegraph":"288",
    "wl jd v east berkshire community health nhs trust":"345",
    "x v bedfordshire":"21",
    "british chiropractic association v singh":"306",
    "tennent v earl of glasgow":"272",
    "wl james mcnaughton paper group ltd v hicks anderson  co":"459",
    "dennis v mod":"236",
    "howard marine v ogden":"215",
    "dobson v thames water":"245",
    "gillingham v medway dock co":"255",
    "wl jolley v sutton lbc":"383",
    "overseas tankship v miller the wagon mound  no 2":"43",
    "public nuisance":"258",
    "coxall v goodyear":"144",
    "henderson v merrett":"219",
    "the rule in rylands v fletcher":"263",
    "wl morris v murray":"393",
    "van colle v hertfordshire police":"29",
    "wl donoghue v folkstone properties":"445",
    "wl bone v searle":"477",
    "hufton v somerset":"174",
    "defences to negligence":"95",
    "wl lister v hesley hall":"426",
    "social action responsibility and heroism act 2015":"55",
    "wl hawley v luminar leisure ltd":"420",
    "corr v ibc":"89",
    "century insurance v ni road transport":"155",
    "cooke v mgn":"284",
    "roe v minister of health":"38",
    "khoransandjian":"244",
    "wl gough v thorne":"389",
    "wl barr  ors v biffa waste services limited":"475",
    "wl baturina v times newspapers":"489",
    "lennon v the met":"213",
    "wl tedstone v bourne leisure ltd":"434",
    "crown river cruises v kimbolton":"234",
    "employers liability defective equipment act 1969":"138",
    "wl lawrence v pembrokeshire county council":"346",
    "lippiatt v south gloucestershire":"241",
    "wl gray v jones":"484",
    "theaker v richardson":"297",
    "wl joyce v obrien":"399",
    "wl attorney general of the british virgin islands v hartwell":"336",
    "wl doughty v turner manufacturing co":"384",
    "wl barber v somerset county council":"413",
    "maga":"161",
    "viasystems":"149",
    "wl mcloughlin v obrian":"408",
    "vellino v manchester police":"107",
    "tate  lyle v glc":"262",
    "wl cooperative group ltd v pritchard":"390",
    "donoghue v stevenson":"1",
    "breach of duty  standard of care":"34",
    "adams v ursell":"253",
    "wl knight v home office":"362",
    "meah v mccreamer":"86",
    "taylor v a novo":"129",
    "wl hill v chief constable of west yorkshire":"341",
    "wl keown v coventry healthcare nhs trust":"446",
    "wl khoransandjian v bush":"470",
    "mohamud v morrison":"163",
    "wl w v essex county council and another":"403",
    "wl dulieu v white":"402",
    "bolam":"49",
    "wl horrocks v lowe":"501",
    "wl esso petroleum v mardon":"458",
    "boumedien v delta display":"124",
    "duty of care  reading":"3",
    "stevenson jordan v mcdonald":"147",
    "case overviews for defamation":"332",
    "wl hughes v lord advocate":"382",
    "wl barnett v chelsea  kensington hospital management committee":"363",
    "compensation act 2006":"74",
    "wl anns v merton london borough council":"334",
    "grant v aus knitting mills":"192",
    "wl caparo industries plc v dickman":"335",
    "causation  reading":"57",
    "roles v nathan":"178",
    "the calgarth":"167",
    "lister v hesley hall":"157",
    "watt v hertfordshire":"45",
    "ag of british virgin islands v hartwell":"7",
    "wl coventry v lawrence no 2":"474",
    "wl poppleton v trustees of the portsmouth youth activities committee":"435",
    "coop v pritchard":"101",
    "ferguson v dawson":"148",
    "khoransandjian v bush":"244",
    "wl froom v butcher":"386",
    "sindell v abbott laboratories":"63",
    "emeh":"84",
    "case overviews for occupiers liability":"328",
    "wilsons and clyde coal v english":"135",
    "defences to negligence  reading":"96",
    "smith v stages":"156",
    "lawrence v pembrokeshire":"25",
    "fairchild v glenhaven":"67",
    "wl moore stephens v stone rolls ltd":"397",
    "murphy v brentwood":"197",
    "wl boumedien v delta display ltd":"405",
    "wl british celanese ltd v ah hunt capacitors ltd":"464",
    "vicarious liability":"146",
    "james mcnaughton v hicks anderson":"220",
    "wl pitts v hunt":"396",
    "harris v james":"249",
    "fairchild":"67",
    "spiller v joseph":"308",
    "the times v uk":"302",
    "ola 1984":"183",
    "evans v triplex safety glass":"191",
    "wl mckew v holland  hannen  cubitts scotland ltd":"376",
    "matania v national provincial":"248",
    "grobbelaar":"304",
    "wl mullin v richards":"360",
    "wl smith v stages":"425",
    "duty of care":"2",
    "case overviews for product liability":"329",
    "wl worsley v tambrands":"451",
    "lennon v metropolitan police commissioner":"213",
    "donoghue":"1",
    "wl coltman v bibby takers ltd":"411",
    "wl watt v hertfordshire":"355",
    "rylands v fletcher":"264",
    "r v rimmington and r v goldstien":"260",
    "wl allen v chief constable of hampshire":"430",
    "holbeck hall hotel v scarborough":"242",
    "wl michael v chief constable of south wales":"351",
    "mclibel":"319",
    "piper v jri":"206",
    "wl marcic v thames water utilities ltd":"467",
    "cox v ministry of justice":"154",
    "wl grobbelaar v news group newspapers ltd":"493",
    "christie v davey":"238",
    "wl revill v newbery":"394",
    "wl corr v ibc vehicles ltd":"381",
    "glasgow v taylor":"169",
    "patchett v swimming pool trades association":"223",
    "wooten v j docter":"72",
    "youssoupoff v mgm":"275",
    "wl spencer v wincanton holdings ltd":"378",
    "hedley byrne":"212",
    "capital and countries v hampshire":"32",
    "case overviews for negligence":"321",
    "bailey v mod":"70",
    "spencer v wincanton holdings":"83",
    "osman v uk":"19",
    "wl kent v griffiths":"339",
    "newstead v express":"292",
    "knight v home office":"54",
    "biffa v maschinenfabrik":"151",
    "1jolley v sutton":"170",
    "foreseeability":"90",
    "various claimants v institute of christian brothers":"153",
    "north western v london guarantee":"271",
    "ellison v mod":"268",
    "wl tomlinson v congleton bc":"444",
    "horrocks v lowe":"315",
    "west sussex v pierce":"176",
    "breach of duty  reading":"35",
    "a v uk":"310",
    "wl crown river cruises ltd v kimbolton fireworks ltd":"465",
    "wilsons and clyde coal":"135",
    "candler v crane  christmas":"211",
    "wl r v rimmington":"479",
    "causation  the but for test":"56",
    "st helens smelting v tipping":"230",
    "caparo":"6",
    "wl smith v leech brain and co ltd":"385",
    "the derbyshire":"139",
    "candler v crane":"211",
    "r v goldstien":"479",
    "ola 1957":"171",
    "thornton v telegraph":"283",
    "ponting v noakes":"270",
    "trolley v fry":"290",
    "wl humber oil v the owners of the ship the sivand":"374",
    "wl customs and excise commissioners v barclays bank":"460",
    "case overviews for nuisance":"331",
    "junior books v vietchi":"195",
    "wl gore v stannard trading as wyvern tyres":"481",
    "wl coxall v goodyear great britain ltd":"416",
    "bolton v stone":"39",
    "wl bailey v ministry of defence":"369",
    "the sivand":"78",
    "maguire v sefton":"180",
    "loutchansky v the times no 2":"301",
    "radclyffe v mod":"160",
    "wl oshea v mirror group newspapers ltd":"492",
    "wheat v lacon":"166",
    "wl vowles v evans  the welsh rfu":"340",
    "reynolds v times newspapers":"312",
    "mcfarlane v caledonia no 1":"126",
    "wl roe v minister of health":"352",
    "paris v stepney":"40",
    "wl west sussex cc v master lewis pierce":"438",
    "wl ferguson v john dawson  partners contractors ltd":"418",
    "wl sutcliffe v bmi healthcare":"357",
    "maga v birmingham rc archdiocese":"161",
    "miller v jackson":"36",
    "wl roles v nathan":"440",
    "white v jones":"221",
    "hussain v lancaster":"247",
    "phelps v hillingdon":"22",
    "aswan engineering v lupdine":"198",
    "sim v stretch":"278",
    "hollywood silver fox farm v emmett":"239",
    "cook v lewis":"62",
    "defamation  defences ii  privilege":"311",
    "robinson v kilvert":"232",
    "law reform contributory negligence act 1945":"112",
    "wl harris v perry and another":"353",
    "smith v leech brain":"94",
    "wl delaney v pickett":"398",
    "wl hussain v lancaster cc":"473",
    "tetley v chitty":"250",
    "wl sienkiewicz v greif combined appeals":"373",
    "kent v griffiths":"10",
    "defamation act 1996":"309",
    "marc rich v bishop rock marine":"13",
    "wl stennett v hancock":"448",
    "duty of care  public authorities":"17",
    "hunter v canary wharf":"227",
    "vacwell v bdh chemicals":"193",
    "mcdermid v nash":"143",
    "read v lyons":"226",
    "pierce v doncaster":"50",
    "wl osman v ferguson":"337",
    "hill v chief constable of west yorkshire":"12",
    "vellino":"107",
    "robinson v chief constable of west yorkshire":"31",
    "patchett":"223",
    "case overviews for negligence  remoteness":"324",
    "wl flood v times newspapers ltd":"503",
    "wl attorney general v pya quarries ltd no 1":"478",
    "occupiers liability act 1957":"171",
    "huth v huth":"296"
}';

defcols = '4';

currentTexture = 'img/textures/cream-paper.png';

enableTests = true;

subject = 'tort';

cds_ = " [ {
    "TYPE": "Help",
    "NAME": "You v Tort Law",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Filter</span></span><br>Enter names of <span class=\"bd\">cases</span>, <span class=\"bd\">categories</span>, <span class=\"bd\">concepts</span>, or free text in quotes. These broaden out what&#8217;s displayed. By contrast, <span class=\"bd\">tags</span>, <span class=\"bd\">courts</span> and <span class=\"bd\">card types</span> all whittle down what you see.",
        "<span class=\"ud\"><span class=\"bd\">Config &amp; </span></span><br>The options button (top left) brings up a panel with options to fiddle with. They, like the cards you&#8217;re looking at, are remembered when you come back a day later. But if something fouls up, a discreet link on the bottom left lets you <span class=\"bd\">reset everything</span>.",
        "<span class=\"ud\"><span class=\"bd\">iPhones</span></span><br>Use on iPhones is rendered more biddable and less cluttered by pressing the &#8216;share&#8217; button (bottom centre) in safari, then <span class=\"bd\">add to home screen</span>.",
        "<span class=\"ud\"><span class=\"bd\">Tags</span></span><br>These, in the panel on the right, can be dragged onto or away from cards, or into the filter thingummy up top. You can also make your own.",
        "<span class=\"ud\"><span class=\"bd\">Links</span></span><br>Links to another cards bring them up, jiggling around and fading out unless you click/press to fasten them down. Why? No idea. <span class=\"bd\">Case cards</span> should have <span class=\"bd\">On Westlaw</span> or <span class=\"bd\">On curia.eu</span> at the top left, which should take you straight to the relevant material on those sites. Other links to, e.g., legislation.gov.uk, or wikipedia, if the entry was particularly helpful, will show up when appropriate or when some inexplicable event caused my level of interest to rise above the endlessly grey and listless dysphoria constituting my mental background noise.",
        "<span class=\"ud\"><span class=\"bd\">Notes</span></span>",
        "<ul><li><span class=\"nl\"><span class=\"it\"><span class=\"bd\">Note well</span></span> &mdash; this was chucked together <span class=\"it\">in a hurry</span> so def. has bugs, glitches, half-rephrased sentences in the cards, etc. And it&#8217;s meant for the <span class=\"bd\">latest version of Safari or Chrome</span> on <span class=\"bd\">Mac</span>. What, you&#8217;re a law student and you don&#8217;t have a Mac?</span></li><li><span class=\"nl\"><span class=\"it\"><span class=\"bd\">Also note that</span></span> &mdash; the cards tagged <span class=\"bd\">EPLR</span> are those cases/statutes flagged as <span class=\"it\">Essential</span> Post Lecture Reading in Jesse Elvin&#8217;s lecture handout. The <span class=\"bd\">Reading</span> card for each topic summarises his <span class=\"it\">essential</span> and <span class=\"it\">additional</span> reading suggestions.</span></li></ul>"
    ],
    "SPECIAL": "<span class=\"bd\">Hello!</span><br>This is a collection of flashcards for the City GDL. It contains attempts to explain <span class=\"lnk typln\">Concept</span><span class=\"it\">s</span>, cards containing <span class=\"lnk typln\">Case Overviews</span> for a given topic, containing <span class=\"lnk typln\">Statute</span><span class=\"it\">s</span>, and making up the bulk of the material &mdash; <span class=\"lnk typln\">Case</span><span class=\"it\">s</span>. <br><br>Cases can be made less word-heavy by fiddling around in the <span><i class=\"material-icons\" style=\"font-size: 80% !important;\">menu</i></span> options. There you can also change to a <span class=\"sansfont\">sans</span> typeface when Garamond starts to make you want to rip out your kidneys and stuff them into your eye sockets. If the wacky cards-in-a-pile schtick gets up your nose, adjust the <span class=\"it\">messiness</span>. Plus other stuff. <br><br>There are tests. Arguably a bit gimmicky, they&#8217;re by means of multiple-guessing the ratio belonging to a case, or vice-versa. You can also do this by typing in the case name for a ratio <span class=\"it\">without</span> seeing any choices. <br><br>Flipping cards back and forth, moving to the next or fetching back the last, is a matter of the <span class=\"bd\">left</span> and <span class=\"bd\">right</span> keys. Or, on iOS devices, a matter of greasing up the screen by <span class=\"bd\">swiping</span> left or right.",
    "YEAR": "2016",
    "CATEGORIES": [
        "City GDL Tort Law Flashcards"
    ],
    "CATEGORY": "City GDL Tort Law Flashcards",
    "FLAGS": [
        "2015/2016!"
    ],
    "NUMBER": "0"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Phelps v Hillingdon",
        "Anns v Merton",
        "Capital and Countries v Hampshire",
        "AG of British Virgin Islands v Hartwell",
        "JD v East Berkshire NHS",
        "Osman v UK",
        "Z v UK",
        "Osman v Ferguson",
        "Stovin v Wise",
        "Michael v Chief Constable of South Wales",
        "MAK and RK v UK",
        "Van Colle v Hertfordshire Police"
    ],
    "COMMENT": "The modern take on Donoghue v Stevenson &mdash; perhaps because there simply isn&#8217;t anything left to say about it &mdash; is that, in any case, she was &#8216;mistaken&#8217; about the dead snail. Bullshitting about it, that is.",
    "NAME": "Donoghue v Stevenson",
    "SUMMARY": [
        "The claimant suffered shock and gastroenteritis as a result of discovering the ice-cream float she&#8217;d consumed was made with ginger beer from a bottle in which there was a <span class=\"it\">partially-decomposed snail</span>. This all took place in Paisley, in a confectionary shop run by one Francis Minghella.",
        "The case&#8217;s significance is that it  &mdash;",
        "<ul><li><span class=\"nl\">Established the <span class=\"bd\">independence</span> of tort and contract.</span></li><li><span class=\"nl\">Recognised the existence of a <span class=\"bd\">general</span> tort of negligence.</span></li><li><span class=\"nl\">Did so as an essentially <span class=\"bd\">flexibility</span> tort, per Lord Macmillan.</span></li></ul>"
    ],
    "HELD": [
        "There is a duty to take reasonable care to avoid acts or omissions likely to injure those who a reasonable degree of foresight would suggest might be affected by the act, i.e., your <span class=\"bd\">neighbour</span>.",
        "Lord Atkin, famously &mdash; &#8216;you must take reasonable care to avoid acts or omissions which you can reasonably foresee would be likely to injure your neighbour. Who, then, in law, is my neighbour? The answer seems to be \u2013- persons who are so <span class=\"it\">closely and directly affected by my act</span> that I <span class=\"it\">ought reasonably to have them in contemplation</span> as being so affected when I am directing my mind to the acts or omissions which are called in question.&#8217;",
        "Lord Buckmaster, dissenting &mdash; quoting Alderson B in an earlier case, &#8220;The only safe rule is to confine the right to recover to those who enter into the contract; <span class=\"bd\">if we go one step beyond </span>that, there is <span class=\"bd\">no reason why we should not go fifty</span>.&#8221;",
        "Then &mdash; &#8216;In <span class=\"lnk caseln\">Mullen v Barr</span> (1929), a case indistinguishable from the present excepting upon the ground that a mouse is not a snail, and necessarily adopted by the Second Division in their judgment, Lord Anderson says this &#8220;In a case like the present, where the goods of the defenders are widely distributed throughout Scotland, it would seem little short of outrageous to make them responsible to members of the public for the condition of the contents of every bottle which issues from their works&#8221;.&#8217;"
    ],
    "FLAGS": [
        "Key",
        "Development",
        "EPLR"
    ],
    "AKA": "Donoghue",
    "COURT": "UKHL",
    "NUMBER": "1",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care",
    "CITATION": "Donoghue v Stevenson [1932] AC 562",
    "YEAR": "1932"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Duty of Care - Public Authorities",
        "Foreseeability",
        "Causation - The Fairchild Exception",
        "Causation - The But For Test",
        "Defences to Negligence",
        "Breach of Duty - Standard of Care",
        "Remoteness",
        "Public Nuisance",
        "Psychiatric Harm",
        "Pure Economic Loss",
        "Employers' Primary Liability",
        "Defamation - Defences II - Privilege"
    ],
    "NAME": "Duty of Care",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care",
    "SUMMARY": [
        "Where a duty of care must be established; not arising in common law or statute &mdash; as it does, e.g., between doctors and patients, employers and employees, one road user and another: <span class=\"lnk caseln\">Nettleship v Weston</span> &mdash; the following general test was established in <span class=\"lnk caseln\">Caparo v Dickman</span>.",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Was the damage reasonably foreseeable?</span></span></li><li><span class=\"nl\"><span class=\"bd\">Was there a relationship of sufficient proximity between claimant and defendant?</span> <span class=\"lnk caseln\">Everett v Comojo</span>.</span></li><li><span class=\"nl\"><span class=\"bd\">Would it be fair, just and reasonable</span> to impose the duty?*</span><ul><li><span class=\"nl\">A presumption has arisen against imposing duties on public bodies, especially the emergency services, for reasons set out in <span class=\"lnk caseln\">Hill</span>.</span></li><li><span class=\"nl\">See <span class=\"lnk caseln\">Hill</span>, <span class=\"lnk caseln\">Osman v Ferguson</span>, <span class=\"lnk caseln\">Kent v Griffiths</span>, <span class=\"lnk caseln\">Vowles v Evans</span>.</span></li></ul></ol>",
        "<span class=\"lnk caseln\">Donoghue v Stevenson</span> &mdash;",
        "<ul><li><span class=\"nl\">Gave us the <span class=\"bd\">neighbour principle</span>, still useful to throw in as a basis for <span class=\"bd\">(2)</span> in the <span class=\"lnk caseln\">Caparo</span> test.</span></li><li><span class=\"nl\">Remained good law until <span class=\"lnk caseln\">Anns v Merton</span>. There, the test became <span class=\"bd\">(1)</span> a sufficiently-proximate relationship based on <span class=\"it\">foreseeability</span>, <span class=\"bd\">(2)</span> absence of public policy considerations militating against a duty.</span></li></ul>"
    ],
    "NUMBER": "2"
},
{
    "TYPE": "Reading",
    "RELATED": [
        "Duty of Care - Public Authorities - Reading",
        "Causation - Reading",
        "Breach of Duty - Reading",
        "Remoteness - Reading",
        "Psychiatric Harm - Reading",
        "Employers' Liability - Reading",
        "Nuisance - Reading",
        "Occupiers' Liability - Reading"
    ],
    "NAME": "Duty of Care - Reading",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Essential</span></span>",
        "Steele, <span class=\"it\">Tort Law</span> (13th ed, 2014) pp.139-167",
        "<span class=\"lnk caseln\">Donoghue v Stevenson</span> &mdash; <span class=\"lnk caseln\">Dorset Yacht v Home Office</span> &mdash; <span class=\"lnk caseln\">Anns v Merton</span> &mdash; <span class=\"lnk caseln\">Caparo v Dickman</span> &mdash; <span class=\"lnk caseln\">Kent v Griffiths</span> &mdash; <span class=\"lnk caseln\">Vowles v Evans</span> &mdash; <span class=\"lnk caseln\">Hill v Chief Constable of West Yorkshire</span> &mdash; <span class=\"lnk caseln\">Marc Rich v Bishop Rock Marine</span> &mdash; <span class=\"lnk caseln\">Stovin v Wise</span>",
        "<span class=\"ud\"><span class=\"bd\">Additional</span></span>",
        "J. Elvin, <span class=\"it\">Liability for Negligent Refereeing of a Rugby Match</span> <span class=\"lnk wlc\">(2003) 119 LQR 560</span><br>T. Weir, <span class=\"it\">An Introduction to Tort Law</span> (2nd ed, 2006) pp.29-45",
        "<span class=\"lnk caseln\">AG of British Virgin Islands v Hartwell</span> &mdash; <span class=\"lnk caseln\">Osman v Ferguson</span> &mdash; <span class=\"lnk caseln\">Everett v Comojo</span> &mdash; <span class=\"lnk caseln\">Smith v Littlewoods</span> &mdash; <span class=\"lnk caseln\">Sellwood v Durham</span>."
    ],
    "NUMBER": "3"
},
{
    "TYPE": "Case",
    "RELATED": [
        "JD v East Berkshire NHS",
        "Swinny v Chief Constable of Northumbria",
        "Stovin v Wise",
        "Sellwood v Durham",
        "MAK and RK v UK",
        "Lawrence v Pembrokeshire",
        "Michael v Chief Constable of South Wales",
        "Hill v Chief Constable of West Yorkshire",
        "Donoghue v Stevenson",
        "Smith v Littlewoods",
        "Osman v UK",
        "Phelps v Hillingdon"
    ],
    "NAME": "Dorset Yacht v Home Office",
    "SUMMARY": [
        "A group of Borstal inmates absconded, stole a yacht, and crashed it into a boat belonging to the claimant. What mofos."
    ],
    "HELD": [
        "The neighbour principle should apply unless there&#8217;s <span class=\"it\">good policy reason why it shouldn&#8217;t</span>.",
        "Develops the neighbour principle from <span class=\"lnk caseln\">Donoghue v Stevenson</span>."
    ],
    "FLAGS": [
        "Development",
        "EPLR"
    ],
    "YEAR": "1970",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Government Liability"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Government Liability",
    "COURT": "UKHL",
    "CITATION": "Dorset Yacht Co Ltd v Home Office [1970] AC 1004",
    "NUMBER": "4"
},
{
    "TYPE": "Case",
    "RELATED": [
        "JD v East Berkshire NHS",
        "Swinny v Chief Constable of Northumbria",
        "Robinson v Chief Constable of West Yorkshire",
        "Lawrence v Pembrokeshire",
        "Everett v Comojo",
        "Van Colle v Hertfordshire Police",
        "MAK and RK v UK",
        "Caparo v Dickman",
        "Osman v Ferguson",
        "Vowles v Evans",
        "Osman v UK",
        "Phelps v Hillingdon"
    ],
    "COMMENT": "It was not until <span class=\"lnk caseln\">Murphy v Brentwood</span> that test was formally overruled, at least insofar as it applied to public authorities.",
    "NAME": "Anns v Merton",
    "SUMMARY": [
        "Tenants in a block of flats claimed for damage due to structural defects caused by foundations inadequately-deep by <span class=\"it\">six inches</span>. They claimed the defendant owed a duty of care to have inspected the foundations, prior to construction."
    ],
    "HELD": [
        "Lord Wilberforce introduced a <span class=\"it\">two-stage test</span> to establish a duty of care &mdash; <span class=\"bd\">(1)</span> a relationship of <span class=\"bd\">sufficient proximity based on foreseeability</span>; <span class=\"bd\">(2)</span> the absence of <span class=\"bd\">public policy considerations</span> that should preclude there being a duty.  (Note that causes the <span class=\"lnk caseln\">Donoghue</span> principle to be a function of foreseeability, not really proximity/neighbourhood per se)."
    ],
    "FLAGS": [
        "Important",
        "Test",
        "EPLR"
    ],
    "YEAR": "1978",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care",
    "COURT": "UKHL",
    "CITATION": "Anns v Merton London Borough Council [1978] AC 728",
    "NUMBER": "5"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Robone v Pennine Care NHS",
        "X v Bedfordshire",
        "Anns v Merton",
        "Barett v Enfield",
        "Dorset Yacht v Home Office",
        "Vowles v Evans",
        "Smith v Littlewoods",
        "Robinson v Chief Constable of West Yorkshire",
        "Capital and Countries v Hampshire",
        "Osman v Ferguson",
        "Swinny v Chief Constable of Northumbria",
        "Osman v UK"
    ],
    "NAME": "Caparo v Dickman",
    "SUMMARY": [
        "A company prospectus negligently prepared by the defendant, an accountant, led to considerable economic loss by the claimant."
    ],
    "HELD": [
        "Lord Bridge introduced the famous <span class=\"bd\">three-stage test</span> to measure whether a duty of care is owed between parties &mdash; <span class=\"bd\">(1)</span> the damage must be <span class=\"bd\">reasonably foreseeable</span>; <span class=\"bd\">(2)</span> a relationship of <span class=\"bd\">sufficient proximity</span> between claimant and defendant; and <span class=\"bd\">(3)</span> it would be <span class=\"bd\">fair, just and reasonable</span> to impose the duty.",
        "To be employed to measure a relationship only when one is <span class=\"it\">not</span> already established by precedent."
    ],
    "AKA": "Caparo",
    "YEAR": "1990",
    "COURT": "UKHL",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care",
    "CITATION": "Caparo Industries Plc v Dickman [1990] 2 AC 605",
    "FLAGS": [
        "Leading",
        "Important",
        "EPLR"
    ],
    "NUMBER": "6"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Everett v Comojo",
        "Vowles v Evans",
        "Marc Rich v Bishop Rock Marine",
        "Hill v Chief Constable of West Yorkshire",
        "Sellwood v Durham",
        "Smith v Littlewoods",
        "Kent v Griffiths",
        "Stovin v Wise",
        "Donoghue v Stevenson",
        "Osman v UK",
        "Robone v Pennine Care NHS",
        "Osman v Ferguson"
    ],
    "NAME": "AG of British Virgin Islands v Hartwell",
    "SUMMARY": [
        "A police officer &mdash; one with <span class=\"it\">issues</span> &mdash; shot at someone to settle a grudge. He killed someone else by accident."
    ],
    "HELD": [
        "A duty of care was owed by the police to ensure unsuitable officers had no access to guns: the neighbour of a policeman is everyone, i.e., passes the close connection criterion of the <span class=\"lnk caseln\">Caparo</span> test (1)."
    ],
    "YEAR": "2004",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Caparo",
        "Neighbour Principle"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Caparo &mdash; Neighbour Principle",
    "COURT": "UKPC",
    "CITATION": "Attorney General of the British Virgin Islands v Hartwell [2004] 1 WLR 1273",
    "NUMBER": "7"
},
{
    "TYPE": "Case",
    "RELATED": [
        "JD v East Berkshire NHS",
        "X v Bedfordshire",
        "Michael v Chief Constable of South Wales",
        "Barett v Enfield",
        "Osman v UK",
        "Phelps v Hillingdon",
        "Lawrence v Pembrokeshire",
        "Z v UK",
        "Swinny v Chief Constable of Northumbria",
        "MAK and RK v UK",
        "Hill v Chief Constable of West Yorkshire",
        "Van Colle v Hertfordshire Police"
    ],
    "NAME": "Osman v Ferguson",
    "SUMMARY": [
        "A teacher became obsessed with a 14-year boy. How obsessed? He changed his name from Paul Pagett Lewis to Paul Ahmet Osman &mdash; Ahmet Osman being the name of the boy. He&#8217;d told police he might do something <span class=\"it\">&#8216;criminally insane.&#8217;</span>  And so he did. He went to the boy&#8217;s house and shot both the boy and his father. The family claimed the Police had owed them a duty of care, which they&#8217;d breached. and breached, a duty of care."
    ],
    "HELD": [
        "No duty of care is generally owed by the Police on public policy grounds &mdash; <span class=\"lnk caseln\">Caparo</span> (3)."
    ],
    "YEAR": "1998",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Children",
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Police"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Children / Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Police",
    "COURT": "EWCA",
    "CITATION": "Osman v Ferguson [1998] EWCA 4 All ER 344",
    "NUMBER": "8"
},
{
    "TYPE": "Case",
    "RELATED": [
        "AG of British Virgin Islands v Hartwell",
        "Vowles v Evans",
        "Hill v Chief Constable of West Yorkshire",
        "Marc Rich v Bishop Rock Marine",
        "Sellwood v Durham",
        "Smith v Littlewoods",
        "Kent v Griffiths",
        "Stovin v Wise",
        "Osman v Ferguson",
        "Barett v Enfield",
        "Phelps v Hillingdon",
        "Capital and Countries v Hampshire"
    ],
    "NAME": "Everett v Comojo",
    "SUMMARY": [
        "Everett, a waitress in a nightclub owned by Comojo, was stabbed in a <span class=\"it\">fracas</span> between customers. She claimed her employer had owed her, and had breached, a duty of care."
    ],
    "HELD": [
        "A nightclub did indeed owe a duty to take reasonable care to avoid foreseeable acts of third parties, but the claim failed on the facts (upmarket nightclub with &#8216;ritzy&#8217; clientele)."
    ],
    "FLAGS": [
        "Recent"
    ],
    "YEAR": "2011",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Caparo",
        "Proximity"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Caparo &mdash; Proximity",
    "COURT": "EWCA",
    "CITATION": "Everett v Comojo Ltd UK [2011] EWCA Civ 13",
    "NUMBER": "9"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Hill v Chief Constable of West Yorkshire",
        "Stovin v Wise",
        "Smith v Littlewoods",
        "Marc Rich v Bishop Rock Marine",
        "Sellwood v Durham",
        "Vowles v Evans",
        "Everett v Comojo",
        "AG of British Virgin Islands v Hartwell",
        "Van Colle v Hertfordshire Police",
        "Donoghue v Stevenson",
        "Dorset Yacht v Home Office",
        "JD v East Berkshire NHS"
    ],
    "NAME": "Kent v Griffiths",
    "SUMMARY": [
        "A severe asthma attack resulting in brain damage. Sued the London Ambulance Service in negligence as Ambulance took 40 minutes to arrive."
    ],
    "HELD": [
        "The ambulance service would owe a duty of care if (i) further illness reasonably foreseeable should no ambulance attend (i) they took the call and dispatched an ambulance (proximity), (iii) fair, just and reasonable, but only if delayed <span class=\"it\">for no good reason</span>.<br>&emsp;&emsp;Obiter, of the other emergency services &mdash; the <span class=\"it\">police</span> don&#8217;t have a duty to attend if they answer a call. When the <span class=\"it\">fire brigade</span> turns up, they have a duty <span class=\"it\">not to make things worse</span>."
    ],
    "YEAR": "2000",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Caparo",
        "Public Policy",
        "Emergency Services"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Caparo &mdash; Public Policy &mdash; Emergency Services",
    "CITATION": "Kent v Griffiths [2000] 2 All ER 474",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "10"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Sellwood v Durham",
        "Marc Rich v Bishop Rock Marine",
        "Hill v Chief Constable of West Yorkshire",
        "Stovin v Wise",
        "Kent v Griffiths",
        "Smith v Littlewoods",
        "Everett v Comojo",
        "AG of British Virgin Islands v Hartwell",
        "Dorset Yacht v Home Office",
        "Robone v Pennine Care NHS",
        "JD v East Berkshire NHS",
        "Capital and Countries v Hampshire"
    ],
    "NAME": "Vowles v Evans",
    "SUMMARY": [
        "C injured in the collapse of a scrum in an amateur Rugby match. Claimed in negligence against referee, who&#8217;d had opportunity to perceive the difficulty and stop the scrum, but hadn&#8217;t."
    ],
    "HELD": [
        "Referee there to enforce rules: the <span class=\"lnk caseln\">Caparo</span> test applied. (i) Reasonably foreseeable that failure to enforce them would result in injury, (ii) Relationship of proximity, (iii) no reason to draw distinction between amateur and professional sport."
    ],
    "YEAR": "2003",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Caparo",
        "Public Policy"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Caparo &mdash; Public Policy",
    "CITATION": "Vowles v Evans &amp; the Welsh RFU [2003] EWCA Civ 31",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "11"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Stovin v Wise",
        "Sellwood v Durham",
        "Robinson v Chief Constable of West Yorkshire",
        "Vowles v Evans",
        "Michael v Chief Constable of South Wales",
        "Smith v Littlewoods",
        "Swinny v Chief Constable of Northumbria",
        "Van Colle v Hertfordshire Police",
        "Kent v Griffiths",
        "Osman v Ferguson",
        "Marc Rich v Bishop Rock Marine",
        "JD v East Berkshire NHS"
    ],
    "NAME": "Hill v Chief Constable of West Yorkshire",
    "SUMMARY": [
        "Family of the last victim of the Yorkshire Ripper sued the police in negligence for having been slothful in catching the killer."
    ],
    "HELD": [
        "The police should not <span class=\"bd\">generally</span> owe a duty of care to members of the public for <span class=\"lnk caseln\">Caparo</span> (3) public policy reasons &mdash; fear of defensive policing; the fact that the police already take their job seriously enough and that imposing a duty of care to the public wouldn&#8217;t make them any better at policing; inappropriate to use courts rather than the Police Complaints Authority; if there <span class=\"it\">were</span> liability, <span class=\"it\">some</span> lawsuits would inevitably succeed against them, diverting time and money from actual policing."
    ],
    "AKA": "Hill",
    "COURT": "UKHL",
    "NUMBER": "12",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Caparo",
        "Public Policy",
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Police"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Caparo &mdash; Public Policy / Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Police",
    "CITATION": "Hill v Chief Constable of West Yorkshire [1989] AC 53",
    "FLAGS": [
        "Leading",
        "EPLR"
    ],
    "YEAR": "1989"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Smith v Littlewoods",
        "Sellwood v Durham",
        "Vowles v Evans",
        "Stovin v Wise",
        "Hill v Chief Constable of West Yorkshire",
        "Kent v Griffiths",
        "Everett v Comojo",
        "AG of British Virgin Islands v Hartwell",
        "Van Colle v Hertfordshire Police",
        "Robone v Pennine Care NHS",
        "X v Bedfordshire",
        "Donoghue v Stevenson"
    ],
    "NAME": "Marc Rich v Bishop Rock Marine",
    "SUMMARY": [
        "The owners of a the cargo aboard a ship with a cracked hull that had been noticed but passed muster during a survey (provided for free) by a ship-surveying charity, sued when the ship sunk losing a cargo of some $17.6m."
    ],
    "HELD": [
        "Acting in the public welfare can be a Caparo (3) defence. Finding that a duty of care was owed by a marine classification society would have been extremely detrimental to the safety and costs associated with sea-going."
    ],
    "YEAR": "1996",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Caparo",
        "Public Policy"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Caparo &mdash; Public Policy",
    "CITATION": "Marc Rich Co AG v Bishop Rock Marine Co Ltd [1996] UKHL",
    "COURT": "UKHL",
    "FLAGS": [
        "EPLR"
    ],
    "NUMBER": "13"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Stovin v Wise",
        "Hill v Chief Constable of West Yorkshire",
        "Vowles v Evans",
        "Marc Rich v Bishop Rock Marine",
        "Kent v Griffiths",
        "Smith v Littlewoods",
        "Osman v Ferguson",
        "Everett v Comojo",
        "Lawrence v Pembrokeshire",
        "Swinny v Chief Constable of Northumbria",
        "MAK and RK v UK",
        "Capital and Countries v Hampshire"
    ],
    "NAME": "Sellwood v Durham",
    "SUMMARY": [
        "A social worker employed by the CC was stabbed by a patient who&#8217;d told the NHS he was going to murder her. No one bothered to warn her."
    ],
    "HELD": [
        "Acting in the public welfare is not necessarily a Caparo (3) defence. Here, a duty of care was owed."
    ],
    "FLAGS": [
        "Recent"
    ],
    "YEAR": "2012",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Caparo",
        "Public Policy",
        "Public Authorities"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Caparo &mdash; Public Policy &mdash; Public Authorities",
    "COURT": "EWCA",
    "CITATION": "Selwood v Durham CC [2012] EWCA Civ 979",
    "NUMBER": "14"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Marc Rich v Bishop Rock Marine",
        "Stovin v Wise",
        "Hill v Chief Constable of West Yorkshire",
        "Sellwood v Durham",
        "Kent v Griffiths",
        "Vowles v Evans",
        "AG of British Virgin Islands v Hartwell",
        "Everett v Comojo",
        "Swinny v Chief Constable of Northumbria",
        "X v Bedfordshire",
        "Robone v Pennine Care NHS",
        "Barett v Enfield"
    ],
    "NAME": "Smith v Littlewoods",
    "SUMMARY": [
        "The defendant company had acquired a disused cinema, which they intended to knock down and replace with a supermarket. Vandals broke in and found a stash of celluloid film, to which they set fire. In the subsequent blaze, the establishments neighbouring the cinema were damaged."
    ],
    "HELD": [
        "An empty cinema was not per se a source of danger. Although the danger was foreseeable, under Caparo (3), it would be unreasonable to impose the burden of guarding the building 24/7."
    ],
    "YEAR": "1989",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Caparo",
        "Public Policy"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Caparo &mdash; Public Policy",
    "COURT": "UKHL",
    "CITATION": "Smith v Littlewoods Organization Ltd [1989] UKHL 18",
    "NUMBER": "15"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Sellwood v Durham",
        "Hill v Chief Constable of West Yorkshire",
        "Vowles v Evans",
        "Marc Rich v Bishop Rock Marine",
        "Smith v Littlewoods",
        "Kent v Griffiths",
        "AG of British Virgin Islands v Hartwell",
        "JD v East Berkshire NHS",
        "Barett v Enfield",
        "X v Bedfordshire",
        "Robone v Pennine Care NHS",
        "Lawrence v Pembrokeshire"
    ],
    "NAME": "Stovin v Wise",
    "SUMMARY": [
        "A motorcyclist, whose view, as he pulled out of a junction, was obstructed by a bank of earth, smashed into a car and was injured. He argued that the local council, having negligently failed to remove the obstacle, had breached the duty of care it owed to road users such as he."
    ],
    "HELD": [
        "Only when there was a public duty to act, and failing to do so would be irrational, would it be fair, just and reasonable to impose a duty on local authorities. Statutory powers, furthermore, do not per se give rise to a common law duty of care."
    ],
    "YEAR": "1996",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Caparo",
        "Public Policy",
        "Public Authorities"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Caparo &mdash; Public Policy &mdash; Public Authorities",
    "CITATION": "Stovin v Wise [1996] UKHL 15",
    "FLAGS": [
        "Key",
        "EPLR",
        "Traffic Accident"
    ],
    "NUMBER": "16"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Duty of Care",
        "Remoteness",
        "Causation - The Fairchild Exception",
        "Breach of Duty - Standard of Care",
        "Foreseeability",
        "Causation - The But For Test",
        "Defences to Negligence",
        "The Rule in Rylands v Fletcher",
        "Vicarious Liability",
        "Defamation",
        "Private Nuisance",
        "Defamation - Defences II - Privilege"
    ],
    "NAME": "Duty of Care - Public Authorities",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities",
    "SUMMARY": [
        "The courts are <span class=\"it\">generally</span> reluctant to find a duty of care owed by a limb of the state fulfilling a public service and ordinary members of the public.",
        "For this proposition, <span class=\"lnk caseln\">Hill</span> is good authority. It identified four considerations, at least as applied to situations involving the police.",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Fear of defensive policing</span></span></li><li><span class=\"nl\"><span class=\"bd\">Police already doing their best</span></span><ul><li><span class=\"nl\">The extra benefit extracted by threat of actions in tort would not be great enough to justify a general .</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Police Complaints Authority</span> is the proper channel for complaints against the police, not the courts.</span></li><li><span class=\"nl\"><span class=\"bd\">Time and money</span> spent defending and paying out on claims in negligence would divert cash from its rightful destination.</span></li></ol>",
        "However, Lord Keith&#8217;s speech in <span class=\"lnk caseln\">Hill</span> also good authority for the <span class=\"bd\"><span class=\"it\">absence</span> of a blanket ban</span>.",
        "Where a claim has failed or been struck out on the basis of <span class=\"lnk caseln\">Caparo</span> (3), this is not per se an infringement of the claimant&#8217;s art. 6 right to a fair trial &mdash; <span class=\"lnk caseln\">Osman v UK</span>, <span class=\"lnk caseln\">Z v UK</span>."
    ],
    "NUMBER": "17"
},
{
    "TYPE": "Reading",
    "RELATED": [
        "Duty of Care - Reading",
        "Remoteness - Reading",
        "Causation - Reading",
        "Breach of Duty - Reading",
        "Occupiers' Liability - Reading",
        "Psychiatric Harm - Reading",
        "Employers' Liability - Reading",
        "Nuisance - Reading"
    ],
    "NAME": "Duty of Care - Public Authorities - Reading",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Essential</span></span>",
        "Steele, <span class=\"it\">Tort Law</span> (13th ed, 2014) pp.392-446",
        "<span class=\"lnk caseln\">Hill v Chief Constable of West Yorkshire</span> &mdash; <span class=\"lnk caseln\">Z v UK</span> &mdash; <span class=\"lnk caseln\">Phelps v Hillingdon</span> &mdash; <span class=\"lnk caseln\">Barett v Enfield</span> &mdash; <span class=\"lnk caseln\">JD v East Berkshire NHS</span> &mdash; <span class=\"lnk caseln\">MAK and RK v UK</span> &mdash; <span class=\"lnk caseln\">Swinny v Chief Constable of Northumbria</span> &mdash; <span class=\"lnk caseln\">Hill v Chief Constable of West Yorkshire</span> &mdash; <span class=\"lnk caseln\">Capital and Countries v Hampshire</span> &mdash; <span class=\"lnk caseln\">Kent v Griffiths</span> &mdash; <span class=\"lnk caseln\">Michael v Chief Constable of South Wales</span> &mdash; <span class=\"lnk caseln\">Robone v Pennine Care NHS</span>",
        "<span class=\"ud\"><span class=\"bd\">Additional</span></span>",
        "S. Bailey and M. Bowman, <span class=\"it\">Public Authority Negligence Revisited</span> (2000) 59 CLJ 85<br>S. Foster, <span class=\"it\">Police negligence and victims of crime: the survival of the rule in Hill</span> (2015) 20 Coventry Law Journal 67<br>C. Gearty, <span class=\"it\">Osman Unravels</span> (2002) 65 MLR 87<br>C. McIvor, <span class=\"it\">Getting Defensive about Police Negligence: The Hill Principle, the Human Rights Act 1998 and the House of Lords</span> (2010) 69 CLJ 133<br>R. Mullender, <span class=\"it\">Negligence, Public bodies, and Ruthlessness</span> (2009) 72 MLR 961<br>D. Nolan, <span class=\"it\">Negligence and Human Rights Law: The Case for Separate Development</span> (2013) 76 MLR 286<br>J. Varahus, <span class=\"it\">Liability under the Human Rights Act 1998: The Duty to Protect Life, Indirect Victims and Damages</span> (2012) 71 CLJ 263",
        "<span class=\"lnk caseln\">Osman v UK</span> &mdash; <span class=\"lnk caseln\">X v Bedfordshire</span> &mdash; <span class=\"lnk caseln\">Lawrence v Pembrokeshire</span> &mdash; <span class=\"lnk caseln\">Robinson v Chief Constable of West Yorkshire</span>."
    ],
    "NUMBER": "18"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Osman v Ferguson",
        "X v Bedfordshire",
        "JD v East Berkshire NHS",
        "MAK and RK v UK",
        "Phelps v Hillingdon",
        "Lawrence v Pembrokeshire",
        "Z v UK",
        "Barett v Enfield",
        "Hill v Chief Constable of West Yorkshire",
        "Robone v Pennine Care NHS",
        "Capital and Countries v Hampshire",
        "Van Colle v Hertfordshire Police"
    ],
    "NAME": "Osman v UK",
    "SUMMARY": [
        "The claim having failed in the domestic courts because of the general absence of a duty of care owed by the police to the public (<span class=\"lnk caseln\">Hill v Chief Constable of West Yorkshire</span>), the family sued in Strasbourg, arguing that <span class=\"bd\">(1)</span> their article 8 rights to a private family life had been breached by the outcome of the earlier case, and <span class=\"bd\">(2)</span> their article 6 rights to a fair trial. The court held that a blanket ban on police duty of care would indeed be a violation of (2) but on the facts, found for the UK."
    ],
    "HELD": [
        "The exclusion of a duty of care owed by the police is limited by Human Rights considerations."
    ],
    "FLAGS": [
        "ECHR Claim"
    ],
    "YEAR": "1998",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Children",
    "COURT": "ECHR",
    "CITATION": "Osman v United Kingdom [1998] ECHR 101",
    "NUMBER": "19"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Phelps v Hillingdon",
        "X v Bedfordshire",
        "JD v East Berkshire NHS",
        "Osman v Ferguson",
        "Barett v Enfield",
        "Lawrence v Pembrokeshire",
        "Osman v UK",
        "MAK and RK v UK",
        "Sellwood v Durham",
        "Swinny v Chief Constable of Northumbria",
        "Robinson v Chief Constable of West Yorkshire",
        "Stovin v Wise"
    ],
    "NAME": "Z v UK",
    "SUMMARY": [
        "An appeal against a decision that local authorities had no duties of care to prevent abuse of children in care, and that this was an unfair trial."
    ],
    "HELD": [
        "Finding that local authorities owed no duty of care to children to prevent abuse did not entail that proceedings had been unfair"
    ],
    "FLAGS": [
        "ECHR Claim",
        "Important",
        "EPLR"
    ],
    "YEAR": "2001",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Children",
    "COURT": "ECHR",
    "CITATION": "Z and others v United Kingdom [2001] ECHR 10",
    "NUMBER": "20"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Osman v UK",
        "JD v East Berkshire NHS",
        "MAK and RK v UK",
        "Barett v Enfield",
        "Phelps v Hillingdon",
        "Lawrence v Pembrokeshire",
        "Z v UK",
        "Osman v Ferguson",
        "Robone v Pennine Care NHS",
        "Michael v Chief Constable of South Wales",
        "Capital and Countries v Hampshire",
        "Stovin v Wise"
    ],
    "NAME": "X v Bedfordshire",
    "SUMMARY": [
        "A compendium of five cases (two about child abuse, three about SEN education). Claims that Bedfordshire had been negligent in not accomodating their needs, as they had been given the powers to act but had not done so."
    ],
    "HELD": [
        "Not fair, just and reasonable to impose a duty of care where a local authority had not exercised a <span class=\"it\">power</span> to act, but had it done so, there <span class=\"it\">would</span> have been a duty."
    ],
    "YEAR": "1995",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Children",
    "COURT": "UKHL",
    "CITATION": "X (minors) v Bedfordshire County Council [1995] UKHL 9",
    "NUMBER": "21"
},
{
    "TYPE": "Case",
    "RELATED": [
        "JD v East Berkshire NHS",
        "Z v UK",
        "Lawrence v Pembrokeshire",
        "MAK and RK v UK",
        "Osman v Ferguson",
        "Osman v UK",
        "Barett v Enfield",
        "X v Bedfordshire",
        "Swinny v Chief Constable of Northumbria",
        "Hill v Chief Constable of West Yorkshire",
        "Robinson v Chief Constable of West Yorkshire",
        "Sellwood v Durham"
    ],
    "NAME": "Phelps v Hillingdon",
    "SUMMARY": [
        "An ed. psych. negligently missed a diagnosis of dyslexia in three children; career and educational prospects had suffered as a result."
    ],
    "HELD": [
        "Fair, just and reasonable to impose a duty of care here, as local authority had exercised its power negligently. I.e., the flip-side of <span class=\"lnk caseln\">X v Bedfordshire</span>"
    ],
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "YEAR": "2000",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Children",
    "COURT": "UKHL",
    "CITATION": "Phelps v Hillingdon London Borough Council [2000] UKHL 47",
    "NUMBER": "22"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Phelps v Hillingdon",
        "Osman v UK",
        "MAK and RK v UK",
        "Z v UK",
        "Lawrence v Pembrokeshire",
        "X v Bedfordshire",
        "Osman v Ferguson",
        "JD v East Berkshire NHS",
        "Van Colle v Hertfordshire Police",
        "Sellwood v Durham",
        "Swinny v Chief Constable of Northumbria",
        "Hill v Chief Constable of West Yorkshire"
    ],
    "NAME": "Barett v Enfield",
    "SUMMARY": [
        "A child taken into care, but badly treated, resulting in psychiatric damage. Claimed in negligence, that inter alia Enfield had failed to put him up for adoption and failed to reintroduce him to his family."
    ],
    "HELD": [
        "In taking the child into care, a duty had arisen, which had been breached."
    ],
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "YEAR": "1999",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Children",
    "COURT": "UKHL",
    "CITATION": "Barett v London Borough of Enfield [1999] UKHL 25",
    "NUMBER": "23"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Osman v Ferguson",
        "MAK and RK v UK",
        "Osman v UK",
        "X v Bedfordshire",
        "Lawrence v Pembrokeshire",
        "Barett v Enfield",
        "Phelps v Hillingdon",
        "Z v UK",
        "Hill v Chief Constable of West Yorkshire",
        "Capital and Countries v Hampshire",
        "Sellwood v Durham",
        "Van Colle v Hertfordshire Police"
    ],
    "NAME": "JD v East Berkshire NHS",
    "SUMMARY": [
        "Three conjoined appeals on similar patterns of facts: parents who&#8217;d been (unjustly) suspected of abusing their children by their NHS trusts. The children had been taken into care, etc, parents claimed negligence."
    ],
    "HELD": [
        "Parents couldn&#8217;t sue, only the children: the duty of care doesn&#8217;t extend to them. Doctors owe a duty to the children, not the parents. Are the interests of the child different from the interests of the parent? The court thought so, but Jesse Elvin is sceptical."
    ],
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "YEAR": "2005",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Children",
    "COURT": "UKHL",
    "CITATION": "JD v East Berkshire Community Health NHS Trust [2005] UKHL 23",
    "NUMBER": "24"
},
{
    "TYPE": "Case",
    "RELATED": [
        "JD v East Berkshire NHS",
        "MAK and RK v UK",
        "Osman v Ferguson",
        "Barett v Enfield",
        "Osman v UK",
        "Z v UK",
        "Phelps v Hillingdon",
        "X v Bedfordshire",
        "Robinson v Chief Constable of West Yorkshire",
        "Capital and Countries v Hampshire",
        "Stovin v Wise",
        "Hill v Chief Constable of West Yorkshire"
    ],
    "NAME": "Lawrence v Pembrokeshire",
    "SUMMARY": [
        "Claimant argued negligence in placing her children&#8217;s names on child protection register, infringing her HRA1998 article 8 right (family life), also causing her psychiatric injury."
    ],
    "HELD": [
        "Relevance to be found in article 8, but allowing claim would degrade focus on protecting children from Local Authorities and make them more cautious."
    ],
    "YEAR": "2007",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Children",
    "COURT": "EWCA",
    "CITATION": "Lawrence v Pembrokeshire County Council [2007] EWCA Civ 446",
    "NUMBER": "25"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Z v UK",
        "Osman v Ferguson",
        "X v Bedfordshire",
        "Phelps v Hillingdon",
        "Barett v Enfield",
        "JD v East Berkshire NHS",
        "Lawrence v Pembrokeshire",
        "Osman v UK",
        "Michael v Chief Constable of South Wales",
        "Stovin v Wise",
        "Swinny v Chief Constable of Northumbria",
        "Robinson v Chief Constable of West Yorkshire"
    ],
    "COMMENT": "A pattern emerges that the ECtHR will treat negligence claims against local authorities more favourably than the English courts.",
    "NAME": "MAK and RK v UK",
    "SUMMARY": [
        "A child taken to hospital with what looked like bruising &mdash; hospital suspected abuse and didn&#8217;t let father see child. In fact child had skin disorder a competent dermatologist would have diagnosed. Second day let him see under supervision. Lower courts, followed Lawrence: interests of child important, interests of parent less so."
    ],
    "HELD": [
        "In Strasbourg court, article 8 claim: UK acting through hospital prevented him from seeing his seriously-ill daughter. Court held that hospital incompetent for not diagnosing sooner; claim valid, compensation awarded."
    ],
    "FLAGS": [
        "ECHR Claims",
        "Important",
        "EPLR",
        "Recent"
    ],
    "NUMBER": "26",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Children",
    "COURT": "ECHR",
    "CITATION": "MAK and RK v United Kingdom [2010] ECHR",
    "YEAR": "2010"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Osman v Ferguson",
        "Michael v Chief Constable of South Wales",
        "Robinson v Chief Constable of West Yorkshire",
        "Van Colle v Hertfordshire Police",
        "Hill v Chief Constable of West Yorkshire",
        "MAK and RK v UK",
        "X v Bedfordshire",
        "Barett v Enfield",
        "JD v East Berkshire NHS",
        "Sellwood v Durham",
        "Stovin v Wise",
        "Phelps v Hillingdon"
    ],
    "NAME": "Swinny v Chief Constable of Northumbria",
    "SUMMARY": [
        "Details of informant stolen from back of police car; informant harassed by criminal."
    ],
    "HELD": [
        "Negligent, that duty of care to informant breached, must find duty despite police, <span class=\"it\">pour la bonne fonctionment</span>. Informants are not simply members of the public, to whom no particular duty is owed. Nothing to do with negligence of leaving in car."
    ],
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "YEAR": "1997",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Police"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Police",
    "COURT": "EWHC",
    "CITATION": "Swinney v Chief Constable of Northumbria [1997] QBD 464",
    "NUMBER": "27"
},
{
    "TYPE": "Case",
    "NAME": "Swinny (no 2)",
    "SUMMARY": [
        "TODO."
    ],
    "NUMBER": "28"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Michael v Chief Constable of South Wales",
        "Hill v Chief Constable of West Yorkshire",
        "Swinny v Chief Constable of Northumbria",
        "Robinson v Chief Constable of West Yorkshire",
        "Osman v Ferguson",
        "Sellwood v Durham",
        "Z v UK",
        "MAK and RK v UK",
        "Barett v Enfield",
        "Osman v UK",
        "X v Bedfordshire",
        "Phelps v Hillingdon"
    ],
    "NAME": "Van Colle v Hertfordshire Police",
    "SUMMARY": [
        "A man who was due to appear as a witness in a theft trial was shot dead. The claim was that the police, who knew there was a threat, ought to have protected him, and that failure to have done so breached his article 2 right to life."
    ],
    "HELD": [
        "There was no duty, as the police were not aware of a real and immediate risk to his life."
    ],
    "FLAGS": [
        "ECHR Claims",
        "Important",
        "EPLR",
        "Recent"
    ],
    "YEAR": "2008",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Police"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Police",
    "COURT": "UKHL",
    "CITATION": "Van Colle v Chief Constable of Hertfordshire [2008] UKHL 50",
    "NUMBER": "29"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Swinny v Chief Constable of Northumbria",
        "Z v UK",
        "Osman v Ferguson",
        "Phelps v Hillingdon",
        "Osman v UK",
        "Stovin v Wise",
        "Robinson v Chief Constable of West Yorkshire",
        "X v Bedfordshire",
        "Van Colle v Hertfordshire Police",
        "Sellwood v Durham",
        "Hill v Chief Constable of West Yorkshire",
        "Lawrence v Pembrokeshire"
    ],
    "NAME": "Robone v Pennine Care NHS",
    "SUMMARY": [
        "A voluntary inpatient in a psychiatric ward, admitted on the basis that should she attempt or demand to leave, would be assessed for sectioning under the Mental Health Act 1983. Released, with her parents&#8217; reservations, and committed suicide. Family argued her art 2 rights had been breached."
    ],
    "HELD": [
        "That although previous case law had found an operational art.2 duty to detained psychiatric patients, the distinction between detained and voluntarily-present in-patients was not to be exaggerated, and here, there had been a duty owed."
    ],
    "YEAR": "2012",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "NHS"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; NHS",
    "CITATION": "Rabone v Pennine Care NHS Trust [2012] UKSC 2",
    "COURT": "UKSC",
    "FLAGS": [
        "ECHR Claims",
        "Key",
        "EPLR",
        "Recent"
    ],
    "NUMBER": "30"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Swinny v Chief Constable of Northumbria",
        "Osman v Ferguson",
        "Hill v Chief Constable of West Yorkshire",
        "Van Colle v Hertfordshire Police",
        "Michael v Chief Constable of South Wales",
        "Robone v Pennine Care NHS",
        "Phelps v Hillingdon",
        "X v Bedfordshire",
        "Capital and Countries v Hampshire",
        "JD v East Berkshire NHS",
        "Sellwood v Durham",
        "Osman v UK"
    ],
    "COMMENT": "The courts are generally reluctant to find a duty against the Police: protection of <span class=\"bd\">the public</span> is more important than protection of <span class=\"bd\">individual members</span> of the public.",
    "NAME": "Robinson v Chief Constable of West Yorkshire",
    "SUMMARY": [
        "Police chasing a drug dealer crashed into the claimant."
    ],
    "HELD": [
        "On Caparo (3) grounds, it would not be fair, just and reasonable to find a duty &mdash; and questionable Caparo (2) proximity between claimant and police."
    ],
    "FLAGS": [
        "Recent"
    ],
    "YEAR": "2014",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Police"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Police",
    "COURT": "EWCA",
    "CITATION": "Robinson v Chief Constable of West Yorkshire [2014] EWCA Civ 15",
    "NUMBER": "31"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Z v UK",
        "Stovin v Wise",
        "Barett v Enfield",
        "Michael v Chief Constable of South Wales",
        "Van Colle v Hertfordshire Police",
        "Sellwood v Durham",
        "X v Bedfordshire",
        "Phelps v Hillingdon",
        "Swinny v Chief Constable of Northumbria",
        "Osman v UK",
        "Hill v Chief Constable of West Yorkshire",
        "Robinson v Chief Constable of West Yorkshire"
    ],
    "NAME": "Capital and Countries v Hampshire",
    "SUMMARY": [
        "Three conjoined appeals against fire brigades who&#8217;d done various things to which the claimants objected, such as turning off the sprinklers when they arrived at the fire (reasonable in case of, e.g., electrical fire), or getting lost on the way to a call-out."
    ],
    "HELD": [
        "May be able to find fire brigades liable if they make things worse. But no duty to attend."
    ],
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "YEAR": "1997",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Fire Brigades"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Fire Brigades",
    "COURT": "EWCA",
    "CITATION": "Capital and Countries Plc v Hampshire County Council [1997] EWCA 3 WLR 331",
    "NUMBER": "32"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Swinny v Chief Constable of Northumbria",
        "Hill v Chief Constable of West Yorkshire",
        "Robinson v Chief Constable of West Yorkshire",
        "Van Colle v Hertfordshire Police",
        "Osman v Ferguson",
        "Lawrence v Pembrokeshire",
        "X v Bedfordshire",
        "Capital and Countries v Hampshire",
        "Phelps v Hillingdon",
        "Barett v Enfield",
        "Robone v Pennine Care NHS",
        "Z v UK"
    ],
    "NAME": "Michael v Chief Constable of South Wales",
    "SUMMARY": [
        "Victim made emergency call asking for police, said in process of being assaulted by former partner, but a cock-up; call diverted to wrong police service, and call-handler didn&#8217;t report her saying &#8220;he&#8217;s coming back to kill me.&#8221; So the police took an hour to arrive, by which time she was dead. Claim that two police authorities had been negligent, and that article 2 (right to life) breach because of their incompetence."
    ],
    "HELD": [
        "Negligence claim must fail on same grounds as <span class=\"lnk caseln\">Hill</span>, but article 2 breach accepted. Acceptable and coherent (!) that tort law should reject claims of this sort in negligence but that Human Rights accept them. In this sense HR is helpful in sorting out a grey area."
    ],
    "FLAGS": [
        "ECHR Claims",
        "Important",
        "EPLR",
        "2015/2016!"
    ],
    "YEAR": "2015",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Public Authorities",
        "Police"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Public Authorities &mdash; Police",
    "COURT": "UKSC",
    "CITATION": "Michael v Chief Constable of South Wales [2015] UKSC 2",
    "NUMBER": "33"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Remoteness",
        "Causation - The But For Test",
        "Duty of Care",
        "Duty of Care - Public Authorities",
        "Foreseeability",
        "Defences to Negligence",
        "Causation - The Fairchild Exception",
        "Product Liability",
        "Vicarious Liability",
        "Public Nuisance",
        "Occupiers' Liability",
        "Defamation - Remedies"
    ],
    "NAME": "Breach of Duty - Standard of Care",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty",
    "SUMMARY": [
        "The standard of care owed is <span class=\"bd\">objective</span>. The <span class=\"bd\">defendant&#8217;s view</span> of their reasonableness is <span class=\"bd\">irrelevant</span>, and certain characteristics which D may think relevant, e.g., impulsivity, a careless disposition, or inexperience &mdash; <span class=\"lnk caseln\">Nettleship v Weston</span> &mdash; cannot be pleaded.",
        "Generally, circumstances determine what is <span class=\"it\">reasonable</span>.",
        "Paraphrasing D. Howarth in <span class=\"it\">Textbook on Tort</span>, pp.67, the claimant must persuade the court that what happened was a <span class=\"bd\">foreseeable</span> consequence of the defendant&#8217;s conduct; and that there were practical precautions available to the defendant, which he did not take. The defendant, contrastingly, must play down the foreseeability, and suggest snags in the precautions the claimant suggests would have been obvious. <span class=\"bd\">What would it have seemed like at the time?</span>",
        "<span class=\"bd\">Foreseeability</span> &mdash; does not benefit from hindsight: <span class=\"lnk caseln\">Roe v Minister of Health</span>.",
        "The <span class=\"bd\">magnitude of risk</span> determines the degree of care the law expects. A small risk, a small degree of care (<span class=\"lnk caseln\">Bolton v Stone</span>, cf. <span class=\"lnk caseln\">Miller v Jackson</span>), as does the <span class=\"bd\">severity of potential damage</span> &mdash; <span class=\"lnk caseln\">Paris v Stepney</span>, <span class=\"lnk caseln\">Harris v Perry</span>.",
        "The courts will consider the <span class=\"bd\">practicality of precautions</span> &mdash; <span class=\"lnk caseln\">Latimer v AEC</span>, <span class=\"lnk caseln\">The Wagon Mound (no 2)</span> &mdash; and whether there was any potential public utility of the defendant&#8217;s conduct &mdash; <span class=\"lnk caseln\">Watt v Hertfordshire</span>, <span class=\"lnk caseln\">Scout Association v Barnes</span>.",
        "A strong inference will be made that a defendant has <span class=\"bd\">not</span> been negligent, when he acts consistently with <span class=\"bd\">common practice</span> &mdash; <span class=\"lnk caseln\">Bolitho</span>, <span class=\"lnk caseln\">Sutcliffe v BMI Healthcare</span>.",
        "<span class=\"bd\">Special skills</span> &mdash; such as doctoring, barristering, etc, will attract judgment not according to the Clapham Omnibus standard but that of a <span class=\"bd\">responsible body of opinion</span> &mdash; <span class=\"lnk caseln\">Bolam</span>, <span class=\"lnk caseln\">Pierce v Doncaster</span>, <span class=\"lnk caseln\">Montgomery v Lanarkshire Health Board</span>.",
        "When assessing the <span class=\"bd\">standard</span> of care owed by <span class=\"bd\">children</span>, then although the test remains objective, it is according to an <span class=\"bd\">ordinary child of the same age</span> &mdash; <span class=\"lnk caseln\">Mullin v Richards</span>, <span class=\"lnk caseln\">Orchard v Lee</span>.",
        "The courts are <span class=\"bd\">not</span> keen on finding <span class=\"bd\">public bodies</span> liable. This is for the simple and expedient reason that the more money they have to spend settling claims in tort, the less they can spend on doing what they&#8217;re supposed to be doing.",
        "The courts may sometimes take the shortcut of <span class=\"bd\">res ipsa loquitur</span> and observe what the facts say for themselves."
    ],
    "NUMBER": "34"
},
{
    "TYPE": "Reading",
    "RELATED": [
        "Duty of Care - Reading",
        "Remoteness - Reading",
        "Causation - Reading",
        "Duty of Care - Public Authorities - Reading",
        "Occupiers' Liability - Reading",
        "Nuisance - Reading",
        "Employers' Liability - Reading",
        "Psychiatric Harm - Reading"
    ],
    "NAME": "Breach of Duty - Reading",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Essential</span></span>",
        "Steele: pp.111-138 &mdash; <span class=\"lnk caseln\">Nettleship v Weston</span> &mdash; <span class=\"lnk caseln\">Bolton v Stone</span> &mdash; <span class=\"lnk caseln\">Miller v Jackson</span> &mdash; <span class=\"lnk caseln\">Paris v Stepney</span> &mdash; <span class=\"lnk caseln\">Latimer v AEC</span> &mdash; <span class=\"lnk caseln\">Watt v Hertfordshire</span> &mdash; <span class=\"lnk caseln\">S3 Compensation Act</span> <span class=\"it\">S1 &mdash; Social Action, Responsibility and Heroism Act</span> <span class=\"lnk caseln\">SARAH 2015</span> &mdash; <span class=\"lnk caseln\">Bolitho v Hackney HA</span> &mdash; <span class=\"lnk caseln\">Bolam v Friern Hospital</span> &mdash; <span class=\"lnk caseln\">Montgomery v Lanarkshire Health Board</span> &mdash; <span class=\"lnk caseln\">Mullin v Richards</span>",
        "<span class=\"ud\"><span class=\"bd\">Additional</span></span>",
        "J. Elvin, <span class=\"it\">Can an Employer be under a Duty to Dismiss an Employee for his own Good in Order to Protect his Health?</span> (2003) 62 CLJ 20",
        "Ministry of Justice, <span class=\"it\">Courts to Recognise Good Intentions of Volunteers and Small Busineses</span>, <br> at https://www.gov.uk/government/news/courts-to-recognise-good-intentions-of-volunteers-and-small-busineses",
        "R. Mulheron, <span class=\"it\">Trumping Bolam: A Critical Legal Analysis of Bolitho&#8217;s \u201cGloss\u201d</span> (2010) 69 CLJ 609<BR>Newground Legislation Update Service, <span class=\"it\">Social Action, Responsibility and Heroism Act (SARAH)</span>,<br> at http://www.legislationupdateservice.co.uk/social-action-responsibility-and-heroism-act-sarah/",
        "<span class=\"it\">What&#8217;s the point of the Social Action, Responsibility and Heroism Act?</span>, <br>at http://blogs.lexisnexis.co.uk/dr/whats-the-point-of-the-social-action-responsibility-and-heroism-act/",
        "<span class=\"lnk caseln\">Roe v Minister of Health</span> &mdash; <span class=\"lnk caseln\">Williams v University of Birmingham</span> &mdash; <span class=\"lnk caseln\">Harris v Perry</span> &mdash; <span class=\"lnk caseln\">The Wagon Mound (no 2)</span> &mdash; <span class=\"lnk caseln\">Scout Association v Barnes</span> &mdash; <span class=\"lnk caseln\">Sutcliffe v BMI Healthcare</span> &mdash; <span class=\"lnk caseln\">Orchard v Lee</span> &mdash; <span class=\"lnk caseln\">Pierce v Doncaster</span> &mdash; Knight v Home Office|"
    ],
    "NUMBER": "35"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Bolton v Stone",
        "Scout Association v Barnes",
        "Orchard v Lee",
        "Nettleship v Weston",
        "Pierce v Doncaster",
        "Overseas Tankship v Miller (The Wagon Mound - no 2)",
        "Mullin v Richards",
        "Latimer v AEC",
        "Montgomery v Lanarkshire Health Board",
        "Knight v Home Office",
        "Harris v Perry",
        "Watt v Hertfordshire"
    ],
    "NAME": "Miller v Jackson",
    "SUMMARY": [
        "The house of the claimants had been built barely thirty metres from the batting crease of the village cricket pitch. There was the usual minor damage from cricket balls, and the risk of injury to the householders. The club erected a three metre fence, and <span class=\"it\">asked batsmen to hit fours rather than sixes</span> (!) but a few balls every season still landed in the Millers&#8217; property."
    ],
    "HELD": [
        "The claim in negligence (and nuisance) succeeded. The cricket club had owed and breached a duty of care owed to the claimant householders. Nevertheless, the injunction sought against the club was <span class=\"it\">not</span> allowed. Denning MR&#8217;s fabled dissent &mdash; <span class=\"it\">&#8216;In summertime, village cricket is the delight of everyone. Nearly every village has its own cricket field where the young men play and the old men watch.&#8217;</span>"
    ],
    "YEAR": "1977",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Cricket"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Cricket",
    "CITATION": "Miller v Jackson [1977] EWCA QB 966",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Amusing",
        "Denning",
        "EPLR"
    ],
    "NUMBER": "36"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Mullin v Richards",
        "Overseas Tankship v Miller (The Wagon Mound - no 2)",
        "Williams v University of Birmingham",
        "Paris v Stepney",
        "Bolton v Stone",
        "Pierce v Doncaster",
        "Knight v Home Office",
        "Sutcliffe v BMI Healthcare",
        "Miller v Jackson",
        "Harris v Perry",
        "Orchard v Lee",
        "Bolitho v Hackney HA"
    ],
    "COMMENT": "The standard of care generally owed is objective.",
    "NAME": "Nettleship v Weston",
    "SUMMARY": [
        "The claimant was injured when the defendant, <span class=\"it\">who he was teaching to drive</span>, lost control and crashed. She argued that the standard of care she owed was necessarily lower than that of an experienced driver."
    ],
    "HELD": [
        "Although the defendant&#8217;s argument that her inexperience should give rise to a lesser standard of care made intuitive sense, an <span class=\"it\">objective</span> standard must be imposed, but a standard unconnected to moral fault. This is for two reasons: the impracticability of the standard being subjective, and the pragmatic necessity to <span class=\"it\">blame</span> someone &mdash; and therefore <span class=\"it\">pay for the damage</span> from their insurance.",
        "On dissent of Salmon LJ, damages <span class=\"it\">halved</span> through claimant&#8217;s contributory negligence he was held partially in control of the car."
    ],
    "NUMBER": "37",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Objective Standard"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Objective Standard",
    "CITATION": "Nettleship v Weston [1971] EWCA 2 QB 691",
    "COURT": "EWCA",
    "FLAGS": [
        "Traffic Accident",
        "Important",
        "Denning",
        "EPLR"
    ],
    "YEAR": "1971"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Orchard v Lee",
        "Overseas Tankship v Miller (The Wagon Mound - no 2)",
        "Harris v Perry",
        "Pierce v Doncaster",
        "Doughty v Turner Manufacturing",
        "Hughes v Lord Advocate",
        "Williams v University of Birmingham",
        "Miller v Jackson",
        "Bolitho v Hackney HA",
        "Montgomery v Lanarkshire Health Board",
        "Paris v Stepney",
        "Watt v Hertfordshire"
    ],
    "NAME": "Roe v Minister of Health",
    "SUMMARY": [
        "In 1947, Roe and another had been given lumbar puncture anaesthetics from phials that&#8217;d been stored immersed in a (toxic) antiseptic. The phials turned out to have had microscopic cracks invisible to the naked eye, and there had been enough of the antiseptic in the anaesthetic to paralyse the claimants."
    ],
    "HELD": [
        "The presence of microscopic cracks would neither have been known about nor foreseen by the operating theatre doctors, so there had not been a breach.",
        "Denning LJ &mdash; &#8216;We must not look at the 1947 incident with 1954 spectacles.&#8217; Well quite."
    ],
    "YEAR": "1954",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Foreseeability"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Foreseeability",
    "CITATION": "Roe v Minister of Health [1954] EWCA 2 All ER 131",
    "COURT": "EWCA",
    "FLAGS": [
        "Denning",
        "Important"
    ],
    "NUMBER": "38"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Miller v Jackson",
        "Pierce v Doncaster",
        "Montgomery v Lanarkshire Health Board",
        "Mullin v Richards",
        "Roe v Minister of Health",
        "Bolitho v Hackney HA",
        "Watt v Hertfordshire",
        "Sutcliffe v BMI Healthcare",
        "Nettleship v Weston",
        "Scout Association v Barnes",
        "Overseas Tankship v Miller (The Wagon Mound - no 2)",
        "Orchard v Lee"
    ],
    "NAME": "Bolton v Stone",
    "SUMMARY": [
        "A woman standing outside her house in Manchester, about a hundred yards away from the batsman, was struck in the head by the ball when, for only the seventh time in thirty years, a ball was hit for six out of the ground."
    ],
    "HELD": [
        "When the <span class=\"bd\">chances</span> of damage occurring are too small, then, unless the magnitude of the potential damage so great as to make it reasonable to take precautions, (<span class=\"lnk caseln\">The Wagon Mound</span>), there will not be a breach of duty.  Cf. <span class=\"lnk caseln\">Miller v Jackson</span> in which the risk was rather greater."
    ],
    "YEAR": "1951",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Cricket"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Cricket",
    "CITATION": "Bolton v Stone [1951] UKHL AC 850",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "EPLR",
        "Cricket"
    ],
    "NUMBER": "39"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Overseas Tankship v Miller (The Wagon Mound - no 2)",
        "Latimer v AEC",
        "Harris v Perry",
        "Pierce v Doncaster",
        "Montgomery v Lanarkshire Health Board",
        "Williams v University of Birmingham",
        "Mullin v Richards",
        "Bolitho v Hackney HA",
        "Orchard v Lee",
        "Roe v Minister of Health",
        "Nettleship v Weston",
        "Watt v Hertfordshire"
    ],
    "NAME": "Paris v Stepney",
    "SUMMARY": [
        "The claimant a garage worker, who&#8217;d lot an eye in the war, was blinded by a chip of metal. He sued his employer for breach of duty of care."
    ],
    "HELD": [
        "The particular characteristics/circumstances of an employee should be taken into account by an employer, or others owing them a duty of care, if the characteristics are known about. All the more so when precautions, such as the provision of safety goggles, are easy to take."
    ],
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "YEAR": "1950",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Severity of Potential Harm",
        "Risk"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Severity of Potential Harm &mdash; Risk",
    "COURT": "UKHL",
    "CITATION": "Paris v Stepney Borough Council [1950] UKHL 3",
    "NUMBER": "40"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Latimer v AEC",
        "Overseas Tankship v Miller (The Wagon Mound - no 2)",
        "Paris v Stepney",
        "Nettleship v Weston",
        "Montgomery v Lanarkshire Health Board",
        "Roe v Minister of Health",
        "Sutcliffe v BMI Healthcare",
        "Orchard v Lee",
        "Pierce v Doncaster",
        "Bolton v Stone",
        "Scout Association v Barnes",
        "Williams v University of Birmingham"
    ],
    "NAME": "Harris v Perry",
    "SUMMARY": [
        "Parents of a child for whose birthday party they&#8217;d hired a bouncy castle were sued by one of the children invited to the party, an 11 year old who&#8217;d been kicked in the head by another child of 15, also on the bouncy castle. Presumably this was an accident, but children of that age can be quite vile to one another, can&#8217;t they. The supervising parent had turned their back momentarily. Claimed it was negligent to let a 15-year-old child on a bouncy castle with a younger, smaller, softer one."
    ],
    "HELD": [
        "Reasonably foreseeable that children could injure one another on a bouncy castle, but not that the injury would be severe.",
        "Impractical, however, to keep the children under constant supervision. The hosts had not acted unreasonably, and life would be dull if all risk were eliminated."
    ],
    "FLAGS": [
        "Leading",
        "Recent"
    ],
    "YEAR": "2008",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Practicality of Precautions",
        "Risk"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Practicality of Precautions &mdash; Risk",
    "COURT": "EWCA",
    "CITATION": "Harris v Perry and another [2008] EWCA Civ 907",
    "NUMBER": "41"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Harris v Perry",
        "ICI v Shatwell",
        "Overseas Tankship v Miller (The Wagon Mound - no 2)",
        "Paris v Stepney",
        "Stapley v Gypsum Mines",
        "Coxall v Goodyear",
        "Scout Association v Barnes",
        "Williams v University of Birmingham",
        "Orchard v Lee",
        "Montgomery v Lanarkshire Health Board",
        "Walker v Northumberland",
        "Bolitho v Hackney HA"
    ],
    "NAME": "Latimer v AEC",
    "SUMMARY": [
        "Big old flood, defendant&#8217;s company inundated. Oily chemical used on machinery in factory, which mixed with flood water. When the water receded, the floor was coated with slippery grime. Three tonnes of saw dust were spread on the floor. But not the part the claimant walked on, slipping over and injuring himself. Argued breach of duty in not closing factory until safe."
    ],
    "HELD": [
        "Closing the factory until completely cleaned wouldn&#8217;t have been a reasonable precaution due to enormous cost of doing so, and risk of serious injury quite low. In the circumstances, the precautions the defendant had taken &mdash; although not such as to remove the danger entirely &mdash; were reasonable and proportionate."
    ],
    "YEAR": "1953",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Practicality of Precautions",
        "Risk",
        "Employers' Liability",
        "Primary Liability",
        "Safe Place of Work"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Practicality of Precautions &mdash; Risk &mdash; Employers' Liability &mdash; Primary Liability &mdash; Safe Place of Work",
    "CITATION": "Latimer v AEC [1953] UKHL AC 643",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "42"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Latimer v AEC",
        "Paris v Stepney",
        "Harris v Perry",
        "Orchard v Lee",
        "Roe v Minister of Health",
        "Mullin v Richards",
        "Bolam v Friern Hospital",
        "Montgomery v Lanarkshire Health Board",
        "Pierce v Doncaster",
        "Nettleship v Weston",
        "Sutcliffe v BMI Healthcare",
        "Scout Association v Barnes"
    ],
    "NAME": "Overseas Tankship v Miller (The Wagon Mound - no 2)",
    "SUMMARY": [
        "Defendants sued for negligently allowing oil to escape from their ship into a harbour, which caught fire and toasted a couple of neighbouring ships."
    ],
    "HELD": [
        "When the magnitude of potential harm is great, but the chance of it occurring is very slight, a reasonable man <span class=\"bd\">would</span> take precautions against. Therefore, especially when the cost and difficulty involved in taking such precautions are small, damage incurred may well be recoverable in negligence."
    ],
    "FLAGS": [
        "Key",
        "Leading",
        "EPLR"
    ],
    "AKA": "The Wagon Mound (no 2)",
    "COURT": "UKPC",
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Practicality of Precautions &mdash; Severity of Potential Harm &mdash; Risk",
    "NUMBER": "43",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Practicality of Precautions",
        "Severity of Potential Harm",
        "Risk"
    ],
    "CONTRAST": "Harris v Perry",
    "CITATION": "Overseas Tankship (UK) Ltd v Morts Dock (Wagon Mound no. 2) [1967] 1 AC 617",
    "YEAR": "1967"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Barker v Corus",
        "Fairchild v Glenhaven",
        "Sienkiewicz v Greif",
        "Montgomery v Lanarkshire Health Board",
        "Sindell v Abbott Laboratories",
        "Bolam v Friern Hospital",
        "Miller v Jackson",
        "Roe v Minister of Health",
        "Jobling v Associated Dairies",
        "Knight v Home Office",
        "Cook v Lewis",
        "Gregg v Scott"
    ],
    "NAME": "Williams v University of Birmingham",
    "SUMMARY": [
        "The estate of a man who, in the course of experiments as part of his physics undergrad in Birmingham in the &#8216;70s, had been exposed to asbestos-lagged pipes in tunnels owned by the university. He went on to develop mesothelioma in middle age and died at 54."
    ],
    "HELD": [
        "The correct test in asbestos cases was whether the defendant had taken reasonable care to ensure that a person was not exposed to a foreseeable risk of <span class=\"it\">asbestos-related injury</span>. <span class=\"bd\">Not</span> that the defendant had exposed the claimant to asbestos. In the &#8216;70s, it was not known that the level of exposure to fibres experienced by the claimant would have given rise to a reasonably-foreseeable risk of asbestos-related injury."
    ],
    "YEAR": "2011",
    "COURT": "EWCA",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Causation",
        "Asbestos",
        "Mesothelioma"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Causation &mdash; Asbestos &mdash; Mesothelioma",
    "CITATION": "Williams v University of Birmingham [2011] EWCA Civ 1242",
    "FLAGS": [
        "Leading",
        "Recent"
    ],
    "NUMBER": "44"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Scout Association v Barnes",
        "Bolitho v Hackney HA",
        "Sutcliffe v BMI Healthcare",
        "Pierce v Doncaster",
        "Roe v Minister of Health",
        "Gough v Thorne",
        "Meah v McCreamer (no 2)",
        "Wooldridge v Sumner",
        "Delaney v Pickett",
        "Revill v Newbery",
        "Miller v Jackson",
        "Williams v University of Birmingham"
    ],
    "NAME": "Watt v Hertfordshire",
    "SUMMARY": [
        "The claimant was a fireman. There was a car accident for which a very big jack was needed to free one of the accidentees. No specialist vehicles were available to transport it, so the claimant was asked to go in the back of a truck to hold the jack secure. The truck braked sharply, and the claimant was biffed in the leg by the jack &mdash; causing him serious injury."
    ],
    "HELD": [
        "When actions or omissions which, considered alone would be actionable in negligence, are done or fail to be done in the public interest, then the utility of the conduct may well provide a defence. Therefore, although the risk of injury to a fireman told to go in the back of a van racing to the scene of an accident, to hold secure a massive great jack, was <span class=\"it\">foreseeable</span>, the potential utility of the conduct &mdash; extricating someone trapped in the wreckage of the car &mdash; provided a defence to the injured fireman.",
        "Denning LJ held approximately, that taking considerable risk when trying to save life is fine. There had been far less risk of serious injury in getting the jack to the scene of the accident than the potential risk of serious injury to the woman who needed a car jacking up off her."
    ],
    "YEAR": "1954",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Defences",
        "Utility of Conduct",
        "Negligence",
        "Breach of Duty",
        "Local Authorities"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Defences &mdash; Utility of Conduct / Negligence &mdash; Breach of Duty &mdash; Local Authorities",
    "CITATION": "Watt v Hertfordshire [1954] EWCA 1 WLR 835",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Denning",
        "EPLR",
        "Traffic Accident"
    ],
    "NUMBER": "45"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Watt v Hertfordshire",
        "Mullin v Richards",
        "Gough v Thorne",
        "Bolitho v Hackney HA",
        "Sutcliffe v BMI Healthcare",
        "Orchard v Lee",
        "Barett v Enfield",
        "Hughes v Lord Advocate",
        "Overseas Tankship v Miller (The Wagon Mound - no 2)",
        "Latimer v AEC",
        "Bolam v Friern Hospital",
        "Joyce v O'Brien"
    ],
    "NAME": "Scout Association v Barnes",
    "SUMMARY": [
        "A scoutmaster had his scouts play a game called <span class=\"it\">Objects in the Dark</span>. You think you know what&#8217;s coming, given the preceding sentence &mdash; but this is in fact about personal injury, <span class=\"it\">not</span> paedophilia. The game was played in pitch darkness, and funnily enough, someone &mdash; a 13-year-old boy &mdash; was injured and sued."
    ],
    "HELD": [
        "Although there was potential utility in playing <span class=\"it\">objects in the dark</span>, there was not enough to weigh against the foreseeable risk of injury, and therefore, a breach of duty. Sagely, the court sagely suggested playing, instead, <span class=\"it\">objects</span>."
    ],
    "FLAGS": [
        "Amusing",
        "Recent"
    ],
    "YEAR": "2010",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Defences",
        "Utility of Conduct",
        "Negligence",
        "Breach of Duty",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Defences &mdash; Utility of Conduct / Negligence &mdash; Breach of Duty &mdash; Children",
    "COURT": "EWCA",
    "CITATION": "The Scout Association v Barnes [2010] EWCA Civ 1476",
    "NUMBER": "46"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Sutcliffe v BMI Healthcare",
        "Bolam v Friern Hospital",
        "Scout Association v Barnes",
        "Montgomery v Lanarkshire Health Board",
        "Watt v Hertfordshire",
        "Joyce v O'Brien",
        "Revill v Newbery",
        "Baker v Hopkins",
        "Wooten v J Docter",
        "Morris v Murray",
        "Mullin v Richards",
        "Pitts v Hunt"
    ],
    "NAME": "Bolitho v Hackney HA",
    "SUMMARY": [
        "A two-year-old, admitted to Barts with croup. On two occasions he went white and manifested obvious difficulty breathing, but recovered and was observed to be energetic. On both occasions, the senior paediatrician was called but did not attend. But half an hour after the second episode, he went into respiratory and cardiac arrest, which left his brain hypoperfused, with obvious consequences. At trial, the 5-3 majority expert medical evidence suggested the child ought to have been intubated."
    ],
    "HELD": [
        "<span class=\"lnk caseln\">Bolam</span> stands, except where a judge can be satisfied that <span class=\"it\">the body of expert opinion cannot be logically supported at all</span>. And here, in the UKHL, the minority opinion of a certain Dr Dinwiddie held sway."
    ],
    "FLAGS": [
        "Leading",
        "Important"
    ],
    "AKA": "Bolitho",
    "NUMBER": "47",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Defences",
        "Common Practice",
        "Negligence",
        "Clinical Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Defences &mdash; Common Practice / Negligence &mdash; Clinical Negligence",
    "COURT": "UKHL",
    "CITATION": "Bolitho v City and Hackney Health Authority [1996] UKHL 4 All ER 771",
    "YEAR": "1996"
},
{
    "TRIVIA": "I&#8217;d understood they usually want you to piss at least once before they&#8217;ll leave you alone after an operation.",
    "RELATED": [
        "Bolitho v Hackney HA",
        "Scout Association v Barnes",
        "Bolam v Friern Hospital",
        "Watt v Hertfordshire",
        "Montgomery v Lanarkshire Health Board",
        "Emeh v Kensington & Chelsea",
        "Latimer v AEC",
        "Spencer v Wincanton Holdings",
        "ICI v Shatwell",
        "Wooldridge v Sumner",
        "Moore Stephens v Stone Rolls",
        "Meah v McCreamer"
    ],
    "NAME": "Sutcliffe v BMI Healthcare",
    "TYPE": "Case",
    "SUMMARY": [
        "After a routine knee operation, a patient vomited in his sleep and as a consequence suffered severe brain damage. Claim was that he ought to have been woken up and checked on rather than just negligently allowed to sleep."
    ],
    "HELD": [
        "The post-operative care had been conducted on a logical basis &mdash; the claimant was asleep as he was tired."
    ],
    "YEAR": "2007",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Defences",
        "Common Practice",
        "Negligence",
        "Clinical Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Defences &mdash; Common Practice / Negligence &mdash; Clinical Negligence",
    "COURT": "EWCA",
    "CITATION": "Sutcliffe v BMI Healthcare [2007] EWCA Civ 476",
    "NUMBER": "48"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Pierce v Doncaster",
        "Montgomery v Lanarkshire Health Board",
        "Sutcliffe v BMI Healthcare",
        "Bolitho v Hackney HA",
        "Knight v Home Office",
        "Mullin v Richards",
        "Orchard v Lee",
        "Nettleship v Weston",
        "Gregg v Scott",
        "Bolton v Stone",
        "Williams v University of Birmingham",
        "Roe v Minister of Health"
    ],
    "NAME": "Bolam v Friern Hospital",
    "SUMMARY": [
        "The claimant had voluntarily undergone ECT, but hadn&#8217;t been given muscle relaxants. Consequently, during the treatment he flailed around violently, and sustained several serious injuries including a fracture to part of his pelvis. Sued in negligence because (i) he hadn&#8217;t been given muscle relaxants, (ii) he hadn&#8217;t been restrained and (iii) he hadn&#8217;t been warned of the risk."
    ],
    "HELD": [
        "For professionals acting in the course of their duties, if the standard of care falls below the standard of <span class=\"it\">a responsible body of opinion</span>, then there is negligence. <span class=\"bd\">Cf. <span class=\"lnk caseln\">Montgomery v Lanarkshire Health Board</span></span>, also <span class=\"lnk caseln\">Bolitho</span>."
    ],
    "AKA": "Bolam",
    "NUMBER": "49",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Standard of Care",
        "Professionals",
        "Negligence",
        "Clinical Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Standard of Care &mdash; Professionals / Negligence &mdash; Clinical Negligence",
    "CITATION": "Bolam v Friern Hospital Management Committee [1957] EWCA 1 WLR 582",
    "COURT": "EWCA",
    "FLAGS": [
        "Leading",
        "Important",
        "EPLR"
    ],
    "YEAR": "1957"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Bolam v Friern Hospital",
        "Watt v Hertfordshire",
        "Mullin v Richards",
        "Orchard v Lee",
        "Knight v Home Office",
        "Scout Association v Barnes",
        "Bolitho v Hackney HA",
        "Williams v University of Birmingham",
        "Sutcliffe v BMI Healthcare",
        "Nettleship v Weston",
        "Paris v Stepney",
        "Harris v Perry"
    ],
    "NAME": "Pierce v Doncaster",
    "SUMMARY": [
        "The claimant had the misfortune to be born into an emotionally and financially unstable household. By six months, he already showed signs of neglect. He was taken into care and kept there for a bit. The defendant, he claimed, ought to have known that the family house was insalubrious to the point of hazard. Mother visited son occasionally, but chaotically. Father in and out of prison. But boy allowed to go back to the family at 14 months old. Ran away from home at 14 years. Claim that duty of care breached by being allowed to go back to family. Things for this poor fellow had curdled really quite appallingly: personality disorder, prostitution, crime."
    ],
    "HELD": [
        "The defendant was unreasonable in putting the child back with family &mdash; the <span class=\"lnk caseln\">Bolam</span> test applied, the defendant was to be judged according to the standard of an expert."
    ],
    "FLAGS": [
        "Recent"
    ],
    "YEAR": "2008",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Standard of Care",
        "Professionals",
        "Negligence",
        "Breach of Duty",
        "Local Authorities"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Standard of Care &mdash; Professionals / Negligence &mdash; Breach of Duty &mdash; Local Authorities",
    "COURT": "EWCA",
    "CITATION": "Pierce v Doncaster MBC [2008] EWCA Civ 1416",
    "NUMBER": "50"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Bolitho v Hackney HA",
        "Bolam v Friern Hospital",
        "Sutcliffe v BMI Healthcare",
        "Bailey v MOD",
        "Paris v Stepney",
        "Orchard v Lee",
        "Williams v University of Birmingham",
        "Emeh v Kensington & Chelsea",
        "Knight v Home Office",
        "Chester v Afshar",
        "Watt v Hertfordshire",
        "Bolton v Stone"
    ],
    "NAME": "Montgomery v Lanarkshire Health Board",
    "SUMMARY": [
        "A pregnant woman had not been informed that there was a 97% chance of something nasty called <span class=\"it\">shoulder dystocia</span> happening during the delivery of her son. The baby was born with cerebral palsy. Claimed in negligence for failure to inform her."
    ],
    "HELD": [
        "A doctor is under a duty to inform patient of <span class=\"it\">material</span> risks: would a reasonable person in the patient&#8217;s position be able to attach significance to the risk? Cf. <span class=\"lnk caseln\">Bolam v Friern Hospital</span>."
    ],
    "YEAR": "2015",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Duty to Appraise Patient of Material Risks",
        "Negligence",
        "Clinical Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Duty to Appraise Patient of Material Risks / Negligence &mdash; Clinical Negligence",
    "CITATION": "Montgomery v Lanarkshire Health Board [2015] UKSC 11",
    "COURT": "UKSC",
    "FLAGS": [
        "Key",
        "Leading",
        "EPLR",
        "2015/2016!"
    ],
    "NUMBER": "51"
},
{
    "TRIVIA": "Curiously enough, the courts had never been asked to adjudicate on <span class=\"bd\">fights with rulers</span>, before 1998.",
    "RELATED": [
        "Orchard v Lee",
        "Scout Association v Barnes",
        "Bolam v Friern Hospital",
        "Knight v Home Office",
        "Pierce v Doncaster",
        "Latimer v AEC",
        "Lawrence v Pembrokeshire",
        "Paris v Stepney",
        "Gough v Thorne",
        "Overseas Tankship v Miller (The Wagon Mound - no 2)",
        "Roe v Minister of Health",
        "Bolitho v Hackney HA"
    ],
    "NAME": "Mullin v Richards",
    "TYPE": "Case",
    "SUMMARY": [
        "Two schoolgirls, presumably both given to somewhat more than a certain degree of espi\u00e8glerie. The defendant managed to blind the claimant with a shard of a plastic ruler, during an, erm, <span class=\"it\">ruler fight</span>."
    ],
    "HELD": [
        "The standard to be expected of a 15-year-old child was not the standard of a reasonable person, but that of a reasonable and <span class=\"it\">ordinarily prudent</span> 15-year-old."
    ],
    "FLAGS": [
        "Important",
        "Amusing",
        "EPLR"
    ],
    "NUMBER": "52",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Standard of Care",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Standard of Care &mdash; Children",
    "COURT": "EWCA",
    "CITATION": "Mullin v Richards [1998] 1 All ER 920",
    "YEAR": "1998"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Mullin v Richards",
        "Pierce v Doncaster",
        "Bolam v Friern Hospital",
        "Knight v Home Office",
        "Scout Association v Barnes",
        "Jolley v Sutton",
        "JD v East Berkshire NHS",
        "Sutcliffe v BMI Healthcare",
        "MAK and RK v UK",
        "X v Bedfordshire",
        "Osman v Ferguson",
        "Barett v Enfield"
    ],
    "NAME": "Orchard v Lee",
    "SUMMARY": [
        "A lunchtime playground assistant at a school was injured when the defendant, running around like the 13-year-old boy he was, inadvertantly knocked her over. So she sued the boy. (And the school, when it came to EWCA)."
    ],
    "HELD": [
        "It was just a boy running around, not even breaking any rules. Doing just what you&#8217;d expect a boy to do. So, seriously, Mrs. Claimant, WTF?"
    ],
    "FLAGS": [
        "Recent"
    ],
    "YEAR": "2009",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Standard of Care",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Standard of Care &mdash; Children",
    "COURT": "EWCA",
    "CITATION": "Orchard v Lee [2009] EWCA 295",
    "NUMBER": "53"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Orchard v Lee",
        "Bolam v Friern Hospital",
        "Mullin v Richards",
        "Pierce v Doncaster",
        "Michael v Chief Constable of South Wales",
        "Capital and Countries v Hampshire",
        "Hill v Chief Constable of West Yorkshire",
        "Robinson v Chief Constable of West Yorkshire",
        "Osman v Ferguson",
        "Williams v University of Birmingham",
        "Lawrence v Pembrokeshire",
        "Bolitho v Hackney HA"
    ],
    "NAME": "Knight v Home Office",
    "SUMMARY": [
        "The estate of a prison suicide sued, claiming the prison hadn&#8217;t taken reasonable care to stop the prisoner committing suicide, in the hospital wing of HMP Brixton."
    ],
    "HELD": [
        "No breach of duty: the hospital wing of a prison necessarily gives lower standard of care than a hospital, as money must be spent on, e.g., <span class=\"it\">stopping prisoners escaping</span> (!)"
    ],
    "YEAR": "1990",
    "CATEGORIES": [
        "Negligence",
        "Breach of Duty",
        "Standard of Care",
        "Public Authorities",
        "Prison"
    ],
    "CATEGORY": "Negligence &mdash; Breach of Duty &mdash; Standard of Care &mdash; Public Authorities &mdash; Prison",
    "COURT": "EWCA",
    "CITATION": "Knight v Home Office [1990] 3 All ER 23",
    "NUMBER": "54"
},
{
    "TYPE": "Statute",
    "NUMBER": "55",
    "NAME": "Social Action, Responsibility and Heroism Act 2015",
    "SUMMARY": [
        "<span class=\"lnk arb\" data-ln=\"http://www.legislation.gov.uk/ukpga/2015/3/contents\">On legislation.gov</span>."
    ],
    "FLAGS": [
        "Criticised"
    ],
    "AKA": "SARAH 2015"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Causation - The Fairchild Exception",
        "Remoteness",
        "Foreseeability",
        "Duty of Care",
        "Duty of Care - Public Authorities",
        "Defences to Negligence",
        "Breach of Duty - Standard of Care",
        "Product Liability",
        "Defamation - Defences II - Privilege",
        "Defamation - Remedies",
        "Employers' Primary Liability",
        "Occupiers' Liability"
    ],
    "NUMBER": "56",
    "NAME": "Causation - The But For Test",
    "CATEGORIES": [
        "Negligence",
        "Causation"
    ],
    "CATEGORY": "Negligence &mdash; Causation",
    "SUMMARY": [
        "To recover damages, the claimant <span class=\"it\">generally</span> has to show the breach of duty was in <span class=\"it\">fact</span> a cause of the damage. I.e., <span class=\"it\">but for</span> the breach of duty, on a balance of probabilities, the damage would not have occurred. The cases to go for are <span class=\"lnk caseln\">Barnett v Chelsea and Kensington Hospital</span> and <span class=\"lnk caseln\">Hotson v East Berkshire</span>.",
        "But there is <span class=\"lnk caseln\">Causation - The Fairchild Exception</span>.",
        "Note the slapstick hunter cases like <span class=\"lnk caseln\">Cook v Lewis</span>, then <span class=\"lnk caseln\">Sindell v Abbott Laboratories</span>, in which the strict application of <span class=\"it\">but for</span> would have led to perverse outcomes."
    ],
    "AKA": "But For"
},
{
    "TYPE": "Reading",
    "RELATED": [
        "Breach of Duty - Reading",
        "Remoteness - Reading",
        "Duty of Care - Public Authorities - Reading",
        "Duty of Care - Reading",
        "Psychiatric Harm - Reading",
        "Nuisance - Reading",
        "Occupiers' Liability - Reading",
        "Employers' Liability - Reading"
    ],
    "NAME": "Causation - Reading",
    "CATEGORIES": [
        "Negligence",
        "Causation"
    ],
    "CATEGORY": "Negligence &mdash; Causation",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Essential</span></span>",
        "Steele, <span class=\"it\">Tort Law</span> (Oxford, 14th Ed) pp. 167-182, 216-268",
        "<span class=\"lnk caseln\">Barnett v Chelsea and Kensington Hospital</span> &mdash; <span class=\"lnk caseln\">Hotson v East Berkshire</span> &mdash; <span class=\"lnk caseln\">Wilsher v Essex AHA</span> &mdash; <span class=\"lnk caseln\">McGhee v National Coal Board</span> &mdash; <span class=\"lnk caseln\">Fairchild v Glenhaven</span> &mdash; <span class=\"lnk caseln\">Chester v Afshar</span> &mdash; <span class=\"lnk caseln\">Gregg v Scott</span> &mdash; <span class=\"lnk caseln\">Cox v Ministry of Justice</span> &mdash; <span class=\"lnk caseln\">Sanderson v Hull</span> &mdash; <span class=\"lnk caseln\">Wooten v J Docter</span> &mdash; <span class=\"lnk caseln\">Barker v Corus</span> &mdash; <span class=\"lnk caseln\">Compensation Act 2006</span> &mdash; <span class=\"lnk caseln\">Sienkiewicz v Greif</span>.",
        "<span class=\"ud\"><span class=\"bd\">Additional</span></span>",
        "A. Kramer, <span class=\"it\">Smoothing the Rough Justice of the Fairchild Principle</span> (2006) 122 LQR 547 <BR>T. Clark and D. Nolan, <span class=\"it\">A critique of Chester v Afshar</span> (2014) 34 OJLS 659<BR>E. Peel, <span class=\"it\">Loss of a Chance in Medical Negligence</span> (2005) 121 LQR 364<BR>J. Stapleton, <span class=\"it\">Factual Causation, Mesothelioma and Statistical Validity</span> (2012) 128 LQR 221<BR>S. Steel and D. Ibbetson, <span class=\"it\">More Grief on Uncertain Causation in Tort</span> (2011) 70 CLJ 451 <BR>T. Weir, <span class=\"it\">Making it More Likely v. Making it Happen</span> 61 (2002) CLJ 519",
        "<span class=\"lnk caseln\">Cook v Lewis</span> &mdash; <span class=\"lnk caseln\">Sindell v Abbott Laboratories</span> &mdash; <span class=\"lnk caseln\">Baker v Willoughby</span> &mdash; <span class=\"lnk caseln\">Jobling v Associated Dairies</span>."
    ],
    "NUMBER": "57"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Hotson v East Berkshire",
        "Wilsher v Essex AHA",
        "Bailey v MOD",
        "Wooten v J Docter",
        "Gregg v Scott",
        "Chester v Afshar",
        "McGhee v National Coal Board",
        "Sanderson v Hull",
        "Williams v University of Birmingham",
        "Bolam v Friern Hospital",
        "Fairchild v Glenhaven",
        "Baker v Willoughby"
    ],
    "NAME": "Barnett v Chelsea and Kensington Hospital",
    "SUMMARY": [
        "A night-watchman at a student hall of residence was given some tea containing, unfortunately, an lethal dose of arsenic. He went to hospital, but was cursorily sent away on the supposition that he was merely <span class=\"it\">drunk</span>. His widow sued in negligence."
    ],
    "HELD": [
        "For a cause of action in negligence, the negligent action must be a <span class=\"it\">but for</span> cause of the harm.",
        "The claimant would have died even had he been diagnosed swiftly and given an antidote. The breach by the doctor, therefore, was not the  <span class=\"it\">but for</span> cause of death."
    ],
    "FLAGS": [
        "Key",
        "Important",
        "EPLR"
    ],
    "YEAR": "1968",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "But For Test",
        "Negligence",
        "Clinical Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; But For Test / Negligence &mdash; Clinical Negligence",
    "COURT": "EWHC",
    "CITATION": "Barnett v Chelsea &amp; Kensington Hospital Management Committee [1968] 2 WLR 422",
    "NUMBER": "58"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Wilsher v Essex AHA",
        "Barnett v Chelsea and Kensington Hospital",
        "Wooten v J Docter",
        "Gregg v Scott",
        "Bailey v MOD",
        "Chester v Afshar",
        "Emeh v Kensington & Chelsea",
        "Jobling v Associated Dairies",
        "Bolam v Friern Hospital",
        "Barker v Corus",
        "Baker v Willoughby",
        "Montgomery v Lanarkshire Health Board"
    ],
    "NAME": "Hotson v East Berkshire",
    "SUMMARY": [
        "A 13-year-old boy fell some 12 feet out of a tree he&#8217;d been climbing and injured his hip. He was given incorrect treatment for five days, and developed a permanent disability from the vascular necrosis that developed. The trial judge, hearing evidence that there was a 75% chance he would have suffered the disability <span class=\"it\">anyway</span>, awarded 25% damages."
    ],
    "HELD": [
        "Non-optimal treatment resulting in the <span class=\"it\">loss of a chance of improvement</span> from an injury does <span class=\"it\">not</span> give a cause of action in negligence.",
        "The claimant had failed to establish the breach was the <span class=\"it\">but for</span> cause, so the claim failed."
    ],
    "YEAR": "1987",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "But For Test",
        "Negligence",
        "Clinical Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; But For Test / Negligence &mdash; Clinical Negligence",
    "CITATION": "Hotson v East Berkshire AHA [1987] UKHL AC 50",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "EPLR"
    ],
    "NUMBER": "59"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Barnett v Chelsea and Kensington Hospital",
        "Hotson v East Berkshire",
        "Bailey v MOD",
        "Gregg v Scott",
        "Wooten v J Docter",
        "Chester v Afshar",
        "Fairchild v Glenhaven",
        "McGhee v National Coal Board",
        "Barker v Corus",
        "Jobling v Associated Dairies",
        "Baker v Willoughby",
        "Sanderson v Hull"
    ],
    "NAME": "Wilsher v Essex AHA",
    "SUMMARY": [
        "The claimant was born prematurely and needed oxygen &mdash; but unfortunately was given too much, to such an extent, it was claimed, of making him go blind."
    ],
    "HELD": [
        "For liability in negligence, it must be able to be said that the defendant&#8217;s conduct was either a <span class=\"it\">but for</span> cause, or a <span class=\"it\">material contribution</span> to the harm.",
        "The blindness could have in fact been caused by five things, and the claimant failed to show on the balance of probabilities the oxygen was the <span class=\"it\">but for</span> cause.",
        "In the minority, Mustill LJ &mdash; conduct in breach of a common law duty that <span class=\"it\">materially adds</span> to the risk of injury, and if the injury is the kind to which the conduct related, then the defendant is taken to have caused the injury even though the existence and extent of the contribution made by the breach cannot be ascertained."
    ],
    "YEAR": "1988",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "But For Test",
        "Negligence",
        "Clinical Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; But For Test / Negligence &mdash; Clinical Negligence",
    "CITATION": "Wilsher v Essex Area Health Authority [1988] UKHL AC 1074",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "60"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Causation - The But For Test",
        "Defences to Negligence",
        "Breach of Duty - Standard of Care",
        "Duty of Care - Public Authorities",
        "Remoteness",
        "Foreseeability",
        "Duty of Care",
        "Psychiatric Harm",
        "Private Nuisance",
        "Defamation - Remedies",
        "Defamation - Defences II - Privilege",
        "The Rule in Rylands v Fletcher"
    ],
    "NUMBER": "61",
    "NAME": "Causation - The Fairchild Exception",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Fairchild"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Fairchild",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">The Fairchild Principle</span></span> (sometimes, the <span class=\"it\">McGhee/Fairchild Principle</span>)<br>Established by <span class=\"lnk caseln\">McGhee v National Coal Board</span> and more definitively in <span class=\"lnk caseln\">Fairchild v Glenhaven</span>, this broadens the scope for successful claims in exceptional cases where <span class=\"it\">but for</span> would lead to a perverse outcome.<br>When <span class=\"lnk caseln\">Fairchild</span> applies, the court looks for an <span class=\"bd\">increase in material risk</span>.",
        "<span class=\"ud\"><span class=\"bd\">Quantification of damages</span></span><br>Happens according to the likelihood the breach caused the harm &mdash; per Lord Hoffman in <span class=\"lnk caseln\">Barker v Corus</span>.",
        "See also <span class=\"lnk caseln\">Cook v Lewis</span>, <span class=\"lnk caseln\">Barnett v Chelsea and Kensington Hospital</span>, <span class=\"lnk caseln\">Hotson v East Berkshire</span>, <span class=\"lnk caseln\">Wilsher v Essex AHA</span>, <span class=\"lnk caseln\">Fairchild v Glenhaven</span>, <span class=\"lnk caseln\">Baker v Willoughby</span>, <span class=\"lnk caseln\">Barker v Corus</span>."
    ],
    "AKA": "Fairchild Principle"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Baker v Willoughby",
        "Jobling v Associated Dairies",
        "Sindell v Abbott Laboratories",
        "Barker v Corus",
        "Wilsher v Essex AHA",
        "Williams v University of Birmingham",
        "Fairchild v Glenhaven",
        "Barnett v Chelsea and Kensington Hospital",
        "Hotson v East Berkshire",
        "Wooten v J Docter",
        "Chester v Afshar",
        "Sienkiewicz v Greif"
    ],
    "NAME": "Cook v Lewis",
    "SUMMARY": [
        "Two hunters had fired shotguns simultaneously in the direction of the claimant, of whose presence they were presumably unaware. The claimant was hit by <span class=\"it\">a single</span> pellet. So which hunter to blame?"
    ],
    "HELD": [
        "Would be unfair to apply the <span class=\"it\">but for</span> test in such situations. The claimant had been injured, and both possible firers were negligent. So the court found them both liable."
    ],
    "YEAR": "1951",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Exceptions",
        "Pragmatism"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Exceptions &mdash; Pragmatism",
    "COURT": "Canada SC",
    "CITATION": "Cook v Lewis [1951] SCR 83",
    "NUMBER": "62"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Jobling v Associated Dairies",
        "Cook v Lewis",
        "Baker v Willoughby",
        "Hotson v East Berkshire",
        "Williams v University of Birmingham",
        "Bailey v MOD",
        "Chester v Afshar",
        "Gregg v Scott",
        "Wooten v J Docter",
        "Sienkiewicz v Greif",
        "Barnett v Chelsea and Kensington Hospital",
        "Sanderson v Hull"
    ],
    "NAME": "Sindell v Abbott Laboratories",
    "SUMMARY": [
        "Claimant injured by exposure to diestrylsilbestrol (DES); developed cancer. This (fungible) stuff had been manufactured by about 200 different manufacturers. So which of them had made the dose that gave her cancer?"
    ],
    "HELD": [
        "Court held each manufacturer liable in accordance with its market share for the drug; that the manufacturers were better able to bear the costs of cancer treatment."
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Exceptions &mdash; Market Share Rule",
    "NUMBER": "63",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Exceptions",
        "Market Share Rule"
    ],
    "REMARK": "The occasional departure from the <span class=\"it\">but for</span> test, particularly in this circumstance, encourages manufacturers to behave themselves.",
    "CITATION": "Sindell v Abbott Laboratories, 26 Cal. 3d 588 (1980)",
    "COURT": "California SC",
    "FLAGS": [
        "Test"
    ],
    "YEAR": "1980"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Jobling v Associated Dairies",
        "Sindell v Abbott Laboratories",
        "Bailey v MOD",
        "Cook v Lewis",
        "Sienkiewicz v Greif",
        "Hotson v East Berkshire",
        "Barker v Corus",
        "Wooten v J Docter",
        "Barnett v Chelsea and Kensington Hospital",
        "Williams v University of Birmingham",
        "McGhee v National Coal Board",
        "Gregg v Scott"
    ],
    "NAME": "Baker v Willoughby",
    "SUMMARY": [
        "The claimant was injured twice: once whilst crossing the road &mdash; run over, his left leg injured. Couldn&#8217;t do his job any more, but found work in a scrap metal yard. But then injured again during an attempted robbery &mdash; shot in the same leg, which had to be amputated. Sued the driver of the car that caused the first injury."
    ],
    "HELD": [
        "The supervening gunshot should be ignored, and damages awarded on that basis, fully compensating for the injury tortiously inflicted. The gunman, were he to be apprehended, would then be liable for the difference between a gammy leg and no leg at all."
    ],
    "YEAR": "1969",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Exceptions",
        "Supervening Acts and Combined Events"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Exceptions &mdash; Supervening Acts and Combined Events",
    "CITATION": "Baker v Willoughby [1969] UKHL 8",
    "COURT": "UKHL",
    "FLAGS": [
        "Criticised"
    ],
    "NUMBER": "64"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Baker v Willoughby",
        "Bailey v MOD",
        "Sindell v Abbott Laboratories",
        "Cook v Lewis",
        "Gregg v Scott",
        "Sienkiewicz v Greif",
        "Wooten v J Docter",
        "Barker v Corus",
        "Chester v Afshar",
        "Wilsher v Essex AHA",
        "Hotson v East Berkshire",
        "Barnett v Chelsea and Kensington Hospital"
    ],
    "NAME": "Jobling v Associated Dairies",
    "SUMMARY": [
        "The claimant, who worked in a butcher&#8217;s shop, had slipped over and injured his back in 1973, reducing his capacity to earn by 50%. Then an <span class=\"it\">unrelated condition</span> which rendered him unable to work at all. He sued, and the trial judge applied <span class=\"lnk caseln\">Baker v Willoughby</span>."
    ],
    "HELD": [
        "The supervening injury could not be disregarded, as it did not arise from a tort."
    ],
    "YEAR": "1982",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Exceptions",
        "Supervening Acts and Combined Events"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Exceptions &mdash; Supervening Acts and Combined Events",
    "CITATION": "Jobling v Associated Dairies [1982] UKHL AC 794",
    "COURT": "UKHL",
    "FLAGS": [
        "Criticised"
    ],
    "NUMBER": "65"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Wooten v J Docter",
        "Gregg v Scott",
        "Bailey v MOD",
        "Sanderson v Hull",
        "Sienkiewicz v Greif",
        "Barker v Corus",
        "Fairchild v Glenhaven",
        "Chester v Afshar",
        "Baker v Willoughby",
        "Barnett v Chelsea and Kensington Hospital",
        "Williams v University of Birmingham",
        "Wilsher v Essex AHA"
    ],
    "NAME": "McGhee v National Coal Board",
    "SUMMARY": [
        "Claimant worked in hot and dusty conditions without anywhere to wash. Plus he commuted on his bike, so got very sweaty. Developed bad dermatitis. Sued, claiming the duty of care owed by his employer had been breached in providing no washing facilities."
    ],
    "HELD": [
        "There had indeed been a breach, but it was unclear whether it was the <span class=\"it\">but for</span> cause of the damage. Nevertheless, as the breach <span class=\"it\">materially increased the risk</span> of the damage, the claim was allowed. Lord Wilberforce held a departure from the <span class=\"it\">but for</span> test to be  appropriate, as there was no way of quantifying the extent to which the breach caused the damage."
    ],
    "YEAR": "1972",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Fairchild"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Fairchild",
    "CITATION": "McGhee v National Coal Board [1972] UKHL 3 All ER 1008",
    "COURT": "UKHL",
    "FLAGS": [
        "Criticised",
        "EPLR"
    ],
    "NUMBER": "66"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Sienkiewicz v Greif",
        "Barker v Corus",
        "McGhee v National Coal Board",
        "Gregg v Scott",
        "Bailey v MOD",
        "Sanderson v Hull",
        "Williams v University of Birmingham",
        "Chester v Afshar",
        "Wooten v J Docter",
        "Barnett v Chelsea and Kensington Hospital",
        "Jobling v Associated Dairies",
        "Baker v Willoughby"
    ],
    "NAME": "Fairchild v Glenhaven",
    "SUMMARY": [
        "The claimant(s) had developed mesothelioma as a result of exposure to asbestos at the defendant&#8217;s premises. However, he&#8217;d also been exposed to the stuff elsewhere."
    ],
    "HELD": [
        "A <span class=\"it\">material contribution</span> to the harm, in exceptional circumstances, gives rise to actionable liability in negligence.",
        "Lords Bingham and Rogers each listed six requirements for the courts to depart from the <span class=\"it\">but for</span> test.",
        "Lord Nichols called for &#8216;restraint&#8217;, adding that policy considerations will still loom large."
    ],
    "AKA": "Fairchild",
    "COURT": "UKHL",
    "NUMBER": "67",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Fairchild",
        "Mesothelioma"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Fairchild &mdash; Mesothelioma",
    "CITATION": "Fairchild v Glenhaven Funeral Services Ltd [2002] UKHL 22",
    "FLAGS": [
        "Key",
        "Leading",
        "EPLR"
    ],
    "YEAR": "2002"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Bailey v MOD",
        "Wooten v J Docter",
        "Gregg v Scott",
        "Hotson v East Berkshire",
        "Fairchild v Glenhaven",
        "Barnett v Chelsea and Kensington Hospital",
        "Sienkiewicz v Greif",
        "McGhee v National Coal Board",
        "Wilsher v Essex AHA",
        "Barker v Corus",
        "Sanderson v Hull",
        "Sindell v Abbott Laboratories"
    ],
    "NAME": "Chester v Afshar",
    "SUMMARY": [
        "The claimant had undergone surgury with an inherent risk <span class=\"it\">about which she had not been informed</span>, and suffered a Cauda Equina lesion as a result, a nasty neurological injury. The claimant admitted, however, that she couldn&#8217;t honestly say that she wouldn&#8217;t have had the surgery anyway."
    ],
    "HELD": [
        "By 3-2 majority, on the facts, she only had to prove she may have had the surgery at a <span class=\"bd\">later date</span> (having fully understood and evaluated the risks) rather than that she would not have had the surgery at all, for the claim to succeed. Also that it was important to send a message to surgeons about importance of warning patients of surgical risks.",
        "Lord Steyn &mdash; &#8216;standing back from the detailed arguments, I have come to the conclusion that, as a result of the surgeon&#8217;s failure to warn the patient, she cannot be said to have given informed consent to the surgery in the full legal sense.&#8217;"
    ],
    "YEAR": "2004",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Fairchild",
        "Negligence",
        "Clinical Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Fairchild / Negligence &mdash; Clinical Negligence",
    "CITATION": "Chester v Afshar [2004] UKHL 41",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "68"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Chester v Afshar",
        "Wooten v J Docter",
        "Bailey v MOD",
        "Sanderson v Hull",
        "Barker v Corus",
        "Fairchild v Glenhaven",
        "Sienkiewicz v Greif",
        "Wilsher v Essex AHA",
        "Barnett v Chelsea and Kensington Hospital",
        "Hotson v East Berkshire",
        "McGhee v National Coal Board",
        "Cook v Lewis"
    ],
    "NAME": "Gregg v Scott",
    "SUMMARY": [
        "The claimant had gone to his GP complaining of a lump, and been sent away. A year later, referred by another GP to an oncologist who found the lump was malignant. Sued the original GP, attempting to apply <span class=\"lnk caseln\">Fairchild</span>."
    ],
    "HELD": [
        "As the chances of surviving were reduced from 42% to 10% by the first GP&#8217;s negligence, it could not be said that on the balance of probabilities he would have survived <span class=\"it\">but for</span> the negligence. The court was also wary of opening the floodgates to claims against GPs."
    ],
    "YEAR": "2005",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Fairchild",
        "Negligence",
        "Clinical Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Fairchild / Negligence &mdash; Clinical Negligence",
    "CITATION": "Gregg v Scott [2005] UKHL 2",
    "COURT": "UKHL",
    "FLAGS": [
        "Leading",
        "Important",
        "EPLR",
        "Floodgates"
    ],
    "NUMBER": "69"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Gregg v Scott",
        "Wooten v J Docter",
        "Chester v Afshar",
        "Jobling v Associated Dairies",
        "Fairchild v Glenhaven",
        "Barnett v Chelsea and Kensington Hospital",
        "Barker v Corus",
        "Sienkiewicz v Greif",
        "Sanderson v Hull",
        "Baker v Willoughby",
        "McGhee v National Coal Board",
        "Wilsher v Essex AHA"
    ],
    "NAME": "Bailey v MOD",
    "SUMMARY": [
        "A patient with gallstones was admitted to a hospital run by the defendants. A whole series of negligent events ensued, the end result of which was serious brain damage."
    ],
    "HELD": [
        "Although the claim would fail the <span class=\"it\">but for</span> test on examination of each instance of negligence, the court applied <span class=\"lnk caseln\">Fairchild</span> and ruled the significant increase in <span class=\"it\">material risk</span> caused by the the defendant hospital was sufficient to establish causation."
    ],
    "YEAR": "2008",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Fairchild",
        "Supervening Acts and Combined Events",
        "Negligence",
        "Clinical Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Fairchild &mdash; Supervening Acts and Combined Events / Negligence &mdash; Clinical Negligence",
    "CITATION": "Bailey v Ministry of Defence [2008] EWCA Civ 883",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Leading",
        "EPLR",
        "Recent"
    ],
    "NUMBER": "70"
},
{
    "TYPE": "Case",
    "RELATED": [
        "McGhee v National Coal Board",
        "Gregg v Scott",
        "Chester v Afshar",
        "Sienkiewicz v Greif",
        "Wooten v J Docter",
        "Fairchild v Glenhaven",
        "Bailey v MOD",
        "Barker v Corus",
        "Cook v Lewis",
        "Sindell v Abbott Laboratories",
        "Williams v University of Birmingham",
        "Hotson v East Berkshire"
    ],
    "NAME": "Sanderson v Hull",
    "SUMMARY": [
        "Claimant an employee of defendant in a poultry farm, who contracted a zoonotic infection she claimed was due to negligence of the employer. Claimed on <span class=\"lnk caseln\">Fairchild</span> grounds, won at first instance."
    ],
    "HELD": [
        "Could not prove that breach of duty probably called her infection, and that the trial judge had given no explanation for applying <span class=\"lnk caseln\">Fairchild</span>, which is for exceptional cases."
    ],
    "YEAR": "2008",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Fairchild"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Fairchild",
    "CITATION": "Sanderson v Hull [2008] EWCA Civ 1211",
    "COURT": "EWCA",
    "FLAGS": [
        "EPLR",
        "Criticised",
        "Recent"
    ],
    "NUMBER": "71"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Gregg v Scott",
        "Bailey v MOD",
        "Chester v Afshar",
        "Wilsher v Essex AHA",
        "McGhee v National Coal Board",
        "Hotson v East Berkshire",
        "Sienkiewicz v Greif",
        "Fairchild v Glenhaven",
        "Barnett v Chelsea and Kensington Hospital",
        "Barker v Corus",
        "Sanderson v Hull",
        "Montgomery v Lanarkshire Health Board"
    ],
    "NAME": "Wooten v J Docter",
    "SUMMARY": [
        "The claimant sued a pharmacy that had dispensed her a different kind of contraceptive pill than the one she&#8217;d been prescribed. She inadvertantly became a mother, and claimed for the costs involved (!), and the loss of earnings incurred by having suffered from post-natal psychosis. At first instance, she presented expert evidence that her risk of pregnancy had been increased by the (negligently-supplied) pill, but lost."
    ],
    "HELD": [
        "There was ample (competing) expert evidence on which the first-instance decision had been based; her claim was denied."
    ],
    "YEAR": "2008",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Fairchild",
        "Negligence",
        "Clinical Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Fairchild / Negligence &mdash; Clinical Negligence",
    "CITATION": "Wooten v J Docter [2008] EWCA Civ 1361",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "EPLR",
        "Recent"
    ],
    "NUMBER": "72"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Sienkiewicz v Greif",
        "Fairchild v Glenhaven",
        "Gregg v Scott",
        "Bailey v MOD",
        "Williams v University of Birmingham",
        "Chester v Afshar",
        "McGhee v National Coal Board",
        "Wooten v J Docter",
        "Sanderson v Hull",
        "Barnett v Chelsea and Kensington Hospital",
        "Hotson v East Berkshire",
        "Cook v Lewis"
    ],
    "NAME": "Barker v Corus",
    "SUMMARY": [
        "As in <span class=\"lnk caseln\">Fairchild</span>, this action was brought by the sufferers, and estates of sufferers, of mesothelioma."
    ],
    "HELD": [
        "Whereas in <span class=\"lnk caseln\">Fairchild</span>, the employers were held <span class=\"it\">jointly and severally</span> liable, here, each was held liable according to their contribution to the harm. &#8220;The harm may be indivisible, but the material contribution to the risk can be divided.&#8221;<br>&emsp;&emsp;The implication of both <span class=\"lnk caseln\">Fairchild</span> and this case &mdash; that the <span class=\"it\">damage</span> in negligence could validly be the <span class=\"it\">risk of damage</span>, was nipped in the bud in the Supreme Court in <span class=\"lnk caseln\">The Trigger Litigation</span>.",
        "Lord Walker &mdash; the &#8216;loss of a chance&#8217; approach from <span class=\"lnk caseln\">Gregg v Scott</span> went too far. The <span class=\"lnk caseln\">Fairchild</span> principle is to be restricted to mesothelioma cases.",
        "Lady Hale &mdash; it is <span class=\"it\">not</span> that each potential defendant caused or materially contributed to the harm &mdash; only that each has materially contributed to the <span class=\"it\">risk of harm</span>."
    ],
    "YEAR": "2006",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Fairchild",
        "Mesothelioma",
        "Quantification of Damages"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Fairchild &mdash; Mesothelioma &mdash; Quantification of Damages",
    "CITATION": "Barker v Corus (UK) [2006] UKHL 20",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Leading",
        "Important"
    ],
    "NUMBER": "73"
},
{
    "TYPE": "Statute",
    "RELATED": [
        "Law Reform (Contributory Negligence) Act 1945",
        "Unfair Contract Terms Act 1977",
        "Road Traffic Act 1988",
        "Consumer Protection Act 1987",
        "Occupiers' Liability Act 1984",
        "Defamation Act 1996",
        "Occupiers' Liability Act 1957",
        "Defamation Act 2013"
    ],
    "NAME": "Compensation Act 2006",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Fairchild",
        "Mesothelioma"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Fairchild &mdash; Mesothelioma",
    "SUMMARY": [
        "~<span class=\"bd\">Damages in Mesothelioma</span>",
        "<span class=\"bd\">S4</span> &#8216;in determining the extent of contributions of different responsible persons in accordance with subsection <span class=\"bd\">(3)(a)</span>, a court shall have regard to the relative lengths of the periods of exposure for which each was responsible; but this subsection shall not apply<br><span class=\"bd\">(a)</span> if or to the extent that responsible persons agree to apportion responsibility amongst themselves on some other basis, or<br><span class=\"bd\">(b)</span> if or to the extent that the court thinks that another basis for determining contributions is more appropriate in the circumstances of a particular case.&#8217;",
        "See <span class=\"lnk caseln\">Sienkiewicz v Greif</span>."
    ],
    "WIKILINK": [
        "https://en.wikipedia.org/wiki/Compensation_Act_2006"
    ],
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/2006/29/section/1"
    ],
    "NUMBER": "74"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Barker v Corus",
        "Fairchild v Glenhaven",
        "Williams v University of Birmingham",
        "Bailey v MOD",
        "Sanderson v Hull",
        "McGhee v National Coal Board",
        "Gregg v Scott",
        "Wooten v J Docter",
        "Chester v Afshar",
        "Barnett v Chelsea and Kensington Hospital",
        "Baker v Willoughby",
        "Sindell v Abbott Laboratories"
    ],
    "NAME": "Sienkiewicz v Greif",
    "SUMMARY": [
        "How should S3 <span class=\"lnk caseln\">Compensation Act 2006</span> apply? The claimant&#8217;s mother had died of mesothelioma, having been exposed to asbestos dust for several years while working for the defendant. Although there was a low level of asbestos dust in the atmosphere, which could also have caused the cancer."
    ],
    "HELD": [
        "The risk had been increased by only 18%. The claim would fail on <span class=\"lnk caseln\">but for</span> grounds &mdash; however, the <span class=\"lnk caseln\">Fairchild Principle</span> was applied, albeit that here, <span class=\"it\">the other defendant was the atmosphere</span>. S3 <span class=\"lnk caseln\">Compensation Act 2006</span> could <span class=\"it\">not</span> be invoked, however, as it was not proven the risk had doubled, which is the statutory stipulation."
    ],
    "YEAR": "2011",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Fairchild",
        "Mesothelioma",
        "Quantification of Damages"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Fairchild &mdash; Mesothelioma &mdash; Quantification of Damages",
    "CITATION": "Sienkiewicz v Greif (combined appeals) [2011] UKSC 10",
    "COURT": "UKSC",
    "FLAGS": [
        "Leading",
        "Key",
        "Recent"
    ],
    "NUMBER": "75"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Causation - The But For Test",
        "Causation - The Fairchild Exception",
        "Breach of Duty - Standard of Care",
        "Duty of Care",
        "Duty of Care - Public Authorities",
        "Foreseeability",
        "Defences to Negligence",
        "Defamation - Defences II - Privilege",
        "Defamation",
        "Private Nuisance",
        "Psychiatric Harm",
        "Public Nuisance"
    ],
    "NAME": "Remoteness",
    "CATEGORIES": [
        "Negligence",
        "Remoteness"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness",
    "SUMMARY": [
        "The damage caused by the negligence must <span class=\"bd\">not be too remote</span> in the chain of causation.",
        "W.V.H Rogers in <span class=\"it\">Winfield and Jolowicz on Tort</span> &mdash; &#8216;any student expecting a scientific analysis of this principle will be grievously disappointed.&#8217; Yeah.",
        "The cases are vague and often invoke <span class=\"it\">common sense</span> and <span class=\"it\">instinct</span>.",
        "A <span class=\"bd\">new intervening act</span> of a third party generally <span class=\"bd\">breaks the chain of causation</span> &mdash; <span class=\"lnk caseln\">The Sivand</span>, <span class=\"lnk caseln\">Lamb v Camden</span>, <span class=\"lnk caseln\">Knightly v Johns</span>.",
        "Such an act <span class=\"bd\">done by the claimant</span> <span class=\"it\">may</span> do so &mdash; <span class=\"lnk caseln\">McKew v Holland</span>, <span class=\"lnk caseln\">Wieland v Cyril Lord Carpets</span>, <span class=\"lnk caseln\">Spencer v Wincanton Holdings</span>, <span class=\"lnk caseln\">Emeh</span>, <span class=\"lnk caseln\">Reeves v The Met</span>.<br><span class=\"bd\">Except</span> when the tort interfered with the claimant&#8217;s mental (stability or) health, in which case the standard is not <span class=\"bd\">reasonableness</span> but <span class=\"bd\">foreseeabiity</span> &mdash; <span class=\"lnk caseln\">Meah v McCreamer</span>, <span class=\"lnk caseln\">Gray v Thames</span>, <span class=\"lnk caseln\">Corr v IBC</span>.",
        "<span class=\"bd\">Foreseeability</span> &mdash; if the type of harm <span class=\"bd\">was</span> foreseeable, the chain of events bringing it about can be obtuse and itself <span class=\"bd\">improbable</span> without defeating liability &mdash; <span class=\"lnk caseln\">Hughes v Lord Advocate</span>, <span class=\"lnk caseln\">Jolley v Sutton</span>.",
        "The <span class=\"bd\">extent</span> may be disproportionately great &mdash; but if of a reasonably foreseeable type, the defendant will be liable &mdash; <span class=\"lnk caseln\">Smith v Leech Brain</span>.",
        "<span class=\"bd\">Ommissions</span> are generally <span class=\"bd\">less likely</span> to <span class=\"bd\">break the chain of causation</span> than <span class=\"bd\">commissions</span> &mdash; <span class=\"lnk caseln\">Knightly v Johns</span>."
    ],
    "NUMBER": "76"
},
{
    "TYPE": "Reading",
    "RELATED": [
        "Duty of Care - Public Authorities - Reading",
        "Causation - Reading",
        "Duty of Care - Reading",
        "Breach of Duty - Reading",
        "Psychiatric Harm - Reading",
        "Employers' Liability - Reading",
        "Nuisance - Reading",
        "Occupiers' Liability - Reading"
    ],
    "NAME": "Remoteness - Reading",
    "CATEGORIES": [
        "Negligence",
        "Remoteness"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Essential</span></span>",
        "Steele <span class=\"it\">Tort Law</span>, p.182-215",
        "<span class=\"lnk caseln\">Lamb v Camden</span> &mdash; <span class=\"lnk caseln\">Knightly v Johns</span> &mdash; <span class=\"lnk caseln\">McKew v Holland</span> &mdash; <span class=\"lnk caseln\">Reeves v The Met</span> &mdash; Gray v Thames Trains<span class=\"lnk caseln\"> &mdash; </span>Corr v IBC<span class=\"lnk caseln\"> &mdash; </span>The Wagon Mound (no 1)<span class=\"lnk caseln\"> &mdash; </span>Hughes v Lord Advocate<span class=\"lnk caseln\"> &mdash; </span>Jolley v Sutton LBC<span class=\"lnk caseln\"> &mdash; </span>Smith v Leech Brain|.",
        "<span class=\"ud\"><span class=\"bd\">Additional</span></span>",
        "R. Dias, <span class=\"it\">Remoteness of Liability and Legal Policy</span> [1962] CLJ 178<BR>M. Staunch, <span class=\"it\">Risk and Remoteness of Damage in Negligence</span> (2001) 64 MLR 191<BR>T. Weir, <span class=\"it\">Suicide in Custody</span> (1998) 57 CLJ 241",
        "<span class=\"lnk caseln\">Wieland v Cyril Lord Carpets</span> &mdash; <span class=\"lnk caseln\">Spencer v Wincanton Holdings</span> &mdash; <span class=\"lnk caseln\">Emeh</span> &mdash; <span class=\"lnk caseln\">Meah v McCreamer</span> &mdash; <span class=\"lnk caseln\">Meah v McCreamer (no 2)</span> &mdash; <span class=\"lnk caseln\">Doughty v Turner Manufacturing</span>."
    ],
    "NUMBER": "77"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Meah v McCreamer",
        "McKew v Holland",
        "Emeh v Kensington & Chelsea",
        "Knightly v Johns",
        "Wieland v Cyril Lord Carpets",
        "Reeves v The Met",
        "Lamb v Camden",
        "Meah v McCreamer (no 2)",
        "Gray v Thames",
        "Spencer v Wincanton Holdings",
        "Corr v IBC",
        "Jolley v Sutton"
    ],
    "NAME": "The Sivand",
    "SUMMARY": [
        "The defendant&#8217;s boat damaged harbour installations as a result of negligent handling. The claimant then engaged contractors to carry out repairs under a contract with <span class=\"it\">standard Institute of Chartered Engineers terms</span>, stipulating an extra payment if unforeseen events occurred which an experienced engineer could not have reasonably foreseen. An unforeseen event occurred &mdash; a bit of the seabed, on which a load-bearing strut had been placed, collapsed causing damage. The claimant sued for the extra sum due under the contract. The defendant argued there had been a new intervening act."
    ],
    "HELD": [
        "An intervening act can be construed as the <span class=\"it\">effective cause</span> of the damage when it is independent of the negligent conduct.",
        "per Evans LJ &mdash; when the independent act of a 3rd party is properly regarded as the effective cause of the damage... then that is because the intervening act was independent... This... is a question of <span class=\"it\">fact</span>, to be answered on a <span class=\"it\">common sense</span> basis... although considerations both of negligence and reasonable foreseeability may be relevant."
    ],
    "YEAR": "1998",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "New Intervening Act"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; New Intervening Act",
    "CITATION": "Humber Oil v The Owners of the Ship &#8216;The Sivand&#8217; [1998] EWCA Civ 100",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "78"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Spencer v Wincanton Holdings",
        "Wieland v Cyril Lord Carpets",
        "The Sivand",
        "Gray v Thames",
        "Meah v McCreamer (no 2)",
        "Emeh v Kensington & Chelsea",
        "Corr v IBC",
        "Knightly v Johns",
        "Reeves v The Met",
        "McKew v Holland",
        "Meah v McCreamer",
        "Doughty v Turner Manufacturing"
    ],
    "NAME": "Lamb v Camden",
    "SUMMARY": [
        "The claimant had rented out her house in Camden. The defendant, working on the street, struck a water main, and the foundations of the claimant&#8217;s house were damaged. As a result, the occupants had to vacate. And then what happened was that <span class=\"it\">squatters</span> took possession and trashed the place."
    ],
    "HELD": [
        "New intervening <span class=\"it\">squatters</span> had broken the chain of causation, so the claim was allowed for the flood damage but not for the squatter damage.",
        "Denning LJ, in effect &mdash; _you ought to have taken out insurance, darlin&#8217;.",
        "Watkin LJ, in effect &mdash; allowing the claim for the squatter damage would be to absolve them of responsibility for their actions."
    ],
    "YEAR": "1981",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "New Intervening Act"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; New Intervening Act",
    "CITATION": "Lamb v Camden LBC [1981] 2 All ER 408",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Denning",
        "EPLR"
    ],
    "NUMBER": "79"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Lamb v Camden",
        "The Sivand",
        "Gray v Thames",
        "Wieland v Cyril Lord Carpets",
        "Corr v IBC",
        "Reeves v The Met",
        "Meah v McCreamer",
        "Emeh v Kensington & Chelsea",
        "Spencer v Wincanton Holdings",
        "Meah v McCreamer (no 2)",
        "McKew v Holland",
        "Doughty v Turner Manufacturing"
    ],
    "COMMENT": "Why are policemen sometimes such phenomenal numpties?",
    "NAME": "Knightly v Johns",
    "SUMMARY": [
        "The defendant had caused a crash in a one-way tunnel. Police turned up to deal with it. But the officer in charge <span class=\"it\">forgot to seal off the tunnel</span>, and told the claimant, another policeman, to go back against the flow of traffic and shut off the tunnel. Not surprisingly, he was hit by a car. Was it too remote to blame the driver who&#8217;d caused the accident?"
    ],
    "HELD": [
        "The claim failed, as there had been not one but two intervening acts of negligence, by the officer in charge."
    ],
    "FLAGS": [
        "Important",
        "Amusing",
        "EPLR"
    ],
    "NUMBER": "80",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "New Intervening Act",
        "Police"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; New Intervening Act &mdash; Police",
    "COURT": "EWCA",
    "CITATION": "Knightly v Johns [1981] EWCA Civ 6",
    "YEAR": "1981"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Emeh v Kensington & Chelsea",
        "Wieland v Cyril Lord Carpets",
        "Spencer v Wincanton Holdings",
        "Meah v McCreamer (no 2)",
        "Gray v Thames",
        "The Sivand",
        "Reeves v The Met",
        "Lamb v Camden",
        "Knightly v Johns",
        "Meah v McCreamer",
        "Corr v IBC",
        "Hughes v Lord Advocate"
    ],
    "NAME": "McKew v Holland",
    "SUMMARY": [
        "The claimant had fallen over at work, resulting in his leg giving way occasionally, without warning. Then he had a rather nasty domestic fall. In order to avoid crushing his daughter, who he was carrying, he <span class=\"bd\">threw her back up the stairs</span>. And then, in what was presumably a display of balletic slapstick worthy of Rick Mayall in <span class=\"it\">Bottom</span>, ended up at the bottom of the stairs with a broken leg."
    ],
    "HELD": [
        "Having suffered an injury, a claimant will not be said to be acting reasonably if he does not take account of his condition in his conduct.",
        "He had behaved unreasonably in the way he went down the stairs. He ought to have realised he could only go down the stairs safely with assistance, or very slowly. The judgement castigated him in different and interesting ways."
    ],
    "YEAR": "1969",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "New Intervening Act",
        "Personal Injury"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; New Intervening Act &mdash; Personal Injury",
    "CITATION": "McKew v Holland &amp; Hannen &amp; Cubitts (Scotland) Ltd [1969] 3 All ER 1621",
    "COURT": "UKHL",
    "FLAGS": [
        "Amusing",
        "EPLR"
    ],
    "NUMBER": "81"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Spencer v Wincanton Holdings",
        "McKew v Holland",
        "Emeh v Kensington & Chelsea",
        "Reeves v The Met",
        "Meah v McCreamer",
        "Corr v IBC",
        "Meah v McCreamer (no 2)",
        "Lamb v Camden",
        "Knightly v Johns",
        "The Sivand",
        "Gray v Thames",
        "Hughes v Lord Advocate"
    ],
    "NAME": "Wieland v Cyril Lord Carpets",
    "SUMMARY": [
        "The claimant suffered a neck injury due to the defendant&#8217;s negligence. She was taken to hospital and given a neck collar, which meant she couldn&#8217;t use her bifocals with, as the judge put it, &#8216;her usual skill.&#8217; Shaken up and in need of tea and sympathy, she went to her son&#8217;s workplace to be looked after. And there, she fell over, going down the stairs."
    ],
    "HELD": [
        "The claim succeeded: the fall was not too remote a consequence.",
        "Eveleigh J: If foreseeability is required, it is enough if it is foreseeable that one injury may affect a person&#8217;s ability to <span class=\"it\">cope with the vicissitudes of life</span> and thereby be the cause of another injury.",
        "Cf. <span class=\"lnk caseln\">McKew v Holland</span>."
    ],
    "YEAR": "1969",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "New Intervening Act",
        "Personal Injury"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; New Intervening Act &mdash; Personal Injury",
    "COURT": "EWHC",
    "CITATION": "Wieland v Cyril Lord Carpets [1969] EWHC 3 All ER 1006",
    "NUMBER": "82"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Wieland v Cyril Lord Carpets",
        "McKew v Holland",
        "Meah v McCreamer",
        "Gray v Thames",
        "Emeh v Kensington & Chelsea",
        "Meah v McCreamer (no 2)",
        "Badger v MOD",
        "Gough v Thorne",
        "Knightly v Johns",
        "Reeves v The Met",
        "Froom v Butcher",
        "The Sivand"
    ],
    "COMMENT": "Jesse Elvin raises an eyebrow to the idea that there were genuine grounds for distinction from <span class=\"lnk caseln\">McKew v Holland</span>.",
    "NAME": "Spencer v Wincanton Holdings",
    "SUMMARY": [
        "The claimant was injured in a minor accident. But the injury got worse and worse, and after three years, he had to have a leg lopped off. For this, the defendant accepted liability. But then, one day, in a petrol station, <span class=\"it\">in a hurry</span>, got out of his car without neither walking stick nor prosthesis, felt his way to the pump, filled up, went back to car, tripped over a manhole cover and knackered up his other leg. Claimed against the original defendant, citing <span class=\"lnk caseln\">McKew v Holland</span>."
    ],
    "HELD": [
        "The court distinguished <span class=\"lnk caseln\">McKew v Holland</span>, and upheld the claim, albeit with reduced damages."
    ],
    "NUMBER": "83",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "New Intervening Act",
        "Personal Injury",
        "Negligence",
        "Remoteness",
        "Defences",
        "Contributory Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; New Intervening Act &mdash; Personal Injury / Negligence &mdash; Remoteness &mdash; Defences &mdash; Contributory Negligence",
    "CITATION": "Spencer v Wincanton Holdings Ltd [2009] EWCA Civ 1404",
    "COURT": "EWCA",
    "FLAGS": [
        "Amusing",
        "Recent"
    ],
    "YEAR": "2009"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Spencer v Wincanton Holdings",
        "Wieland v Cyril Lord Carpets",
        "McKew v Holland",
        "Lamb v Camden",
        "Knightly v Johns",
        "Gray v Thames",
        "Reeves v The Met",
        "Meah v McCreamer",
        "Meah v McCreamer (no 2)",
        "Corr v IBC",
        "The Sivand",
        "Sutcliffe v BMI Healthcare"
    ],
    "NAME": "Emeh v Kensington & Chelsea",
    "SUMMARY": [
        "The claimant had undergone an (elective) sterilization performed by the defendant hospital, but not altogether successfully, as she discovered some time later, when she realised she was heavily pregnant. Offered an abortion, she declined, fearful of the risks. The baby, unfortunately, was born severely disabled.",
        "She claimed for the harm of having become a mother. At trial, she was awarded damages for the pregnancy <span class=\"it\">up to the point it was discovered</span>, and for a (second) sterilization op, on the basis that her unreasonable refusal to have an abortion was a new intervening act."
    ],
    "HELD": [
        "Omitting to have an <span class=\"it\">abortion</span>, on discovering that because of a tort you were pregnant, would not be a new intervening act breaking the chain of causation.",
        "The defendant ought to have foreseen that, should she become pregnant through their negligence, she may wish to keep the child. The courts should never declare that a woman in the claimant&#8217;s position should have an abortion."
    ],
    "FLAGS": [
        "Overruled"
    ],
    "AKA": "Emeh",
    "NUMBER": "84",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "New Intervening Act",
        "Personal Injury",
        "Unwanted Pregnancy",
        "Negligence",
        "Clinical Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; New Intervening Act &mdash; Personal Injury &mdash; Unwanted Pregnancy / Negligence &mdash; Clinical Negligence",
    "COURT": "EWCA",
    "CITATION": "Emeh v Kensington &amp; Chelsea AHA [1984] EWCA 3 All ER 1044",
    "YEAR": "1984"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Corr v IBC",
        "Wieland v Cyril Lord Carpets",
        "Gray v Thames",
        "Meah v McCreamer",
        "McKew v Holland",
        "The Sivand",
        "Emeh v Kensington & Chelsea",
        "Meah v McCreamer (no 2)",
        "Lamb v Camden",
        "Knightly v Johns",
        "Spencer v Wincanton Holdings",
        "Smith v Leech Brain"
    ],
    "NAME": "Reeves v The Met",
    "SUMMARY": [
        "The claimant was the estate of a police-cell suicide. The claim was that the police owed a duty to people they incarcerate in cells to prevent them from killing themselves. The poor chook had hanged himself from the hatch in the door. At trial, the judge agreed a duty of care had been owed. In the Lords, the defendant admitted the breach but argued there had been a new intervening act by the claimant."
    ],
    "HELD": [
        "There was contributory negligence by the defendant... in having killed himself, so damages reduced to 50%."
    ],
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "YEAR": "1999",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "New Intervening Act",
        "Suicide"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; New Intervening Act &mdash; Suicide",
    "COURT": "UKHL",
    "CITATION": "Reeves v Metropolitan Police Commissioner [1999] 3 All ER 897",
    "NUMBER": "85"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Meah v McCreamer (no 2)",
        "Gray v Thames",
        "Spencer v Wincanton Holdings",
        "Lamb v Camden",
        "Delaney v Pickett",
        "Knightly v Johns",
        "Vellino v Manchester Police",
        "Emeh v Kensington & Chelsea",
        "Pitts v Hunt",
        "Wieland v Cyril Lord Carpets",
        "Reeves v The Met",
        "McKew v Holland"
    ],
    "NAME": "Meah v McCreamer",
    "SUMMARY": [
        "The claimant, a passenger in the defendant&#8217;s car, was seriously injured when the car crashed. Both were drunk. The claimant underwent a personality change &mdash; from just a drunk, to <span class=\"it\">a violent criminal</span>. He attacked and sexually assaulted two women, for which he was given life in stir. He sued the driver for the personality change, claiming it was ultimately caused by their negligence. He won."
    ],
    "HELD": [
        "A claim for the damage of a personality change and resulting imprisonment for a crime committed as a consequence may succeed, where the personality change arose as a consequence of an injury caused by the defendant&#8217;s negligence.",
        "His claim was allowed, but the damages were extremely low-balled to reflect the fact that he was <span class=\"bd\">in receipt of free accommodation</span>. See also <span class=\"lnk caseln\">Meah v McCreamer (no 2)</span>"
    ],
    "YEAR": "1985",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "New Intervening Act",
        "Negligence",
        "Remoteness",
        "Defences",
        "Ex Turpi Causa"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; New Intervening Act / Negligence &mdash; Remoteness &mdash; Defences &mdash; Ex Turpi Causa",
    "CITATION": "Meah v McCreamer [1985] EWHC 1 All ER 367",
    "COURT": "EWHC",
    "FLAGS": [
        "Important",
        "Amusing"
    ],
    "NUMBER": "86"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Gray v Thames",
        "Meah v McCreamer",
        "Spencer v Wincanton Holdings",
        "Knightly v Johns",
        "Moore Stephens v Stone Rolls",
        "Vellino v Manchester Police",
        "The Sivand",
        "Wieland v Cyril Lord Carpets",
        "Delaney v Pickett",
        "Reeves v The Met",
        "McKew v Holland",
        "Pitts v Hunt"
    ],
    "NAME": "Meah v McCreamer (no 2)",
    "SUMMARY": [
        "The claimant sued to recover his costs from pursuing <span class=\"lnk caseln\">Meah v McCreamer</span>."
    ],
    "HELD": [
        "Sueing someone to recover your costs of sueing them, especially if you&#8217;re a murderer, will be seen as too remote from the original damage."
    ],
    "YEAR": "1986",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "New Intervening Act",
        "Negligence",
        "Remoteness",
        "Defences",
        "Ex Turpi Causa"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; New Intervening Act / Negligence &mdash; Remoteness &mdash; Defences &mdash; Ex Turpi Causa",
    "COURT": "EWHC",
    "CITATION": "Meah v McCreamer (no 2) [1986] EWHC 1 All ER 943",
    "NUMBER": "87"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Meah v McCreamer (no 2)",
        "Meah v McCreamer",
        "Spencer v Wincanton Holdings",
        "Vellino v Manchester Police",
        "Delaney v Pickett",
        "Lamb v Camden",
        "The Sivand",
        "Emeh v Kensington & Chelsea",
        "Pitts v Hunt",
        "Joyce v O'Brien",
        "Knightly v Johns",
        "Moore Stephens v Stone Rolls"
    ],
    "NAME": "Gray v Thames",
    "SUMMARY": [
        "Through the defendant&#8217;s negligence which caused the Ladbroke Grove train crash, the claimant suffered PTSD and personality changes. He killed someone and was detained in a psychiatric hospital. He claimed for what he called <span class=\"bd\">total loss</span>. By this he meant loss &mdash; of reputation, liberty, feeling of wellbeing; also for indemnity against any claims potentially to be brought against him by the family of the person he&#8217;d killed; loss of future earnings, etc. What a badass mofo.",
        "At first instance, his claim was rejected on the basis that there is no cause of action when something illegal or immoral has been done &mdash; like, just for instance, killing someone. <span class=\"it\">Ex turpi causa non oritur actio</span>."
    ],
    "HELD": [
        "<span class=\"it\">Ex turpi causa</span> precludes recovery of general damages."
    ],
    "YEAR": "2009",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "New Intervening Act",
        "Negligence",
        "Remoteness",
        "Defences",
        "Ex Turpi Causa"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; New Intervening Act / Negligence &mdash; Remoteness &mdash; Defences &mdash; Ex Turpi Causa",
    "CITATION": "Gray v Thames Trains [2009] UKHL 33",
    "COURT": "UKHL",
    "FLAGS": [
        "Leading",
        "Important",
        "EPLR",
        "Train Crash",
        "Recent"
    ],
    "NUMBER": "88"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Reeves v The Met",
        "Knightly v Johns",
        "Meah v McCreamer",
        "Lamb v Camden",
        "Gray v Thames",
        "Spencer v Wincanton Holdings",
        "The Sivand",
        "McKew v Holland",
        "Meah v McCreamer (no 2)",
        "Emeh v Kensington & Chelsea",
        "Wieland v Cyril Lord Carpets",
        "Jolley v Sutton"
    ],
    "NAME": "Corr v IBC",
    "SUMMARY": [
        "A man who&#8217;d suffered a severe injury and subsequent depression due to the defendant&#8217;s negligence, committed suicide. His wife sued; the defendant claimed the damage was too remote."
    ],
    "HELD": [
        "The suicide of a man whose depression arose through suffering a serious injury as a result of negligence is not too remote from the negligence to preclude recovery.",
        "Lord Bingham &mdash; &#8216;Mr Corr&#8217;s suicide was not a voluntary, informed decision taken by him as an adult of sound mind making and giving effect to a personal decision about his future. It was <span class=\"bd\">the response of a man suffering from a severely depressive illness</span> which impaired his capacity to make reasoned and informed judgments about his future, such illness being, as is accepted, a consequence of the employer&#8217;s tort.&#8217;"
    ],
    "FLAGS": [
        "Important",
        "EPLR",
        "Recent"
    ],
    "YEAR": "2008",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "New Intervening Act",
        "Suicide",
        ""
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; New Intervening Act &mdash; Suicide;",
    "COURT": "UKHL",
    "CITATION": "Corr v IBC Vehicles Ltd [2008] UKHL 13",
    "NUMBER": "89"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Duty of Care - Public Authorities",
        "Defences to Negligence",
        "Remoteness",
        "Causation - The Fairchild Exception",
        "Duty of Care",
        "Breach of Duty - Standard of Care",
        "Causation - The But For Test",
        "Psychiatric Harm",
        "Public Nuisance",
        "Vicarious Liability",
        "Occupiers' Liability",
        "The Rule in Rylands v Fletcher"
    ],
    "NAME": "Foreseeability",
    "CATEGORIES": [
        "Negligence",
        "Foreseeability"
    ],
    "CATEGORY": "Negligence &mdash; Foreseeability",
    "SUMMARY": [
        "The type of harm resulting from the negligence must be <span class=\"bd\">reasonably foreseeable</span> and <span class=\"bd\">not too remote</span> &mdash; <span class=\"lnk caseln\">The Wagon Mound (no 2)</span>.",
        "If the type of harm is reasonably foreseeable it doesn&#8217;t have to be clear how it is reasonably foreseeable- the sequence of events by which the injury was brought about need not be &mdash; <span class=\"lnk caseln\">Hughes v Lord Advocate</span>, <span class=\"lnk caseln\">Jolley v Sutton</span>, but see also <span class=\"lnk caseln\">Doughty v Turner Manufacturing</span> for an example of a case falling outside the limit.",
        "There is a <span class=\"bd\">Thin Skull Rule</span> &mdash; the <span class=\"it\">extent</span> of the injury can be much worse than reasonably foreseeable, if the <span class=\"it\">type</span> of injury was, itself, foreseeable."
    ],
    "NUMBER": "90"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Jolley v Sutton",
        "Smith v Leech Brain",
        "Doughty v Turner Manufacturing",
        "Spencer v Wincanton Holdings",
        "Osman v Ferguson",
        "Mullin v Richards",
        "Lamb v Camden",
        "Lawrence v Pembrokeshire",
        "Meah v McCreamer (no 2)",
        "MAK and RK v UK",
        "Roe v Minister of Health",
        "X v Bedfordshire"
    ],
    "NAME": "Hughes v Lord Advocate",
    "SUMMARY": [
        "A manhole had been left open overnight by people working on a gas main, with a tent around it to stop people falling in, illuminated by paraffin lamps, left burning. Can you guess how this ends? The claimant, an eight-year-old boy, accompanied by his <span class=\"bd\">uncle, ten</span>, found this concatenation of circumstances too good to pass up, and managed to knock one of the lamps into the manhole, causing an explosion."
    ],
    "HELD": [
        "That burns were reasonably foreseeable, even if the manner in which they&#8217;d occurred, by an explosion of a substance of which the claimant had not been aware, was not."
    ],
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "YEAR": "1963",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "Foreseeability",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; Foreseeability &mdash; Children",
    "COURT": "EWCA",
    "CITATION": "Hughes v Lord Advocate [1963] AC 837",
    "NUMBER": "91"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Hughes v Lord Advocate",
        "Smith v Leech Brain",
        "Doughty v Turner Manufacturing",
        "Phelps v Hillingdon",
        "Lamb v Camden",
        "Osman v Ferguson",
        "Meah v McCreamer",
        "Gough v Thorne",
        "McKew v Holland",
        "X v Bedfordshire",
        "Gray v Thames",
        "Orchard v Lee"
    ],
    "NAME": "Jolley v Sutton",
    "SUMMARY": [
        "A 14-year-old boy and his pal found a decaying <span class=\"it\">boat</span> left abandoned on the defendant&#8217;s land. In order to sail it to Cornwall &mdash; <span class=\"bd\">as that&#8217;s where pirates are to be found</span>, they set about fixing it up. They were <span class=\"it\">six weeks</span> into this project when, jacking it up to paint it, but with an inadequate jack, the boat collapsed on the claimant, infliciting on him severe spinal injuries and rendering him paraplegic.",
        "The defendant had attached a notice to the boat warning not to touch it, and that if it wasn&#8217;t claimed within <span class=\"it\">seven days</span> it would be taken removed. That hadn&#8217;t happened."
    ],
    "HELD": [
        "If the type of damage suffered was reasonably foreseeable, the defendant will be liable for it even if the actual damage is far greater in extent than could have been foreseen.",
        "An injury was reasonably foreseeable; it was foreseeable that a child might <span class=\"it\">meddle</span> with the boat, and in doing so injure himself. The fact that it was not foreseeable that the hypothetical child might jack the boat up with an inadequate jack and have the boat collapse on him, was deemed irrelevant. Cf. <span class=\"lnk caseln\">Doughty v Turner Manufacturing</span>."
    ],
    "FLAGS": [
        "Leading",
        "Important",
        "Amusing",
        "EPLR"
    ],
    "YEAR": "2000",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "Foreseeability",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; Foreseeability &mdash; Children",
    "COURT": "UKHL",
    "CITATION": "Jolley v Sutton LBC [2000] 3 All ER 409",
    "NUMBER": "92"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Smith v Leech Brain",
        "Jolley v Sutton",
        "Hughes v Lord Advocate",
        "The Sivand",
        "Knightly v Johns",
        "Spencer v Wincanton Holdings",
        "Lamb v Camden",
        "Meah v McCreamer",
        "Reeves v The Met",
        "Gray v Thames",
        "Emeh v Kensington & Chelsea",
        "Wieland v Cyril Lord Carpets"
    ],
    "NAME": "Doughty v Turner Manufacturing",
    "SUMMARY": [
        "The claimant was injured by an <span class=\"it\">eruption</span> from a vat of molten metal, into which an asbestos-cement cover had accidentally been dropped."
    ],
    "HELD": [
        "This turn of events had not been foreseeable. A splash <span class=\"it\">would</span> have been, which would have produced the same injury. But not a <span class=\"it\">magnified splash</span>, which is how the court characterised the incident. Cf. <span class=\"lnk caseln\">Jolley v Sutton</span>.",
        "This hasn&#8217;t yet been explicitly overturned, and westlaw still has a &#8216;C&#8217; next to it, but Jesse Elvin is doubtful as to whether it would be followed today."
    ],
    "FLAGS": [
        "Criticised"
    ],
    "YEAR": "1964",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "Foreseeability"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; Foreseeability",
    "COURT": "EWCA",
    "CITATION": "Doughty v Turner Manufacturing Co [1964] 1 All ER 98",
    "NUMBER": "93"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Doughty v Turner Manufacturing",
        "Jolley v Sutton",
        "Hughes v Lord Advocate",
        "Spencer v Wincanton Holdings",
        "Gray v Thames",
        "Meah v McCreamer (no 2)",
        "Lamb v Camden",
        "Reeves v The Met",
        "Meah v McCreamer",
        "Emeh v Kensington & Chelsea",
        "Knightly v Johns",
        "Wieland v Cyril Lord Carpets"
    ],
    "NAME": "Smith v Leech Brain",
    "SUMMARY": [
        "The claimant, who had a premalignant skin condition, suffered chemical burns at work through the defendant&#8217;s negligence. He developed skin cancer and died."
    ],
    "HELD": [
        "That the injury sustained was much worse than the injury that could reasonably have been foreseen does not evaporate liability, if the injury is of <span class=\"it\">the same type</span> as that which is foreseeable.",
        "On the <span class=\"it\">thin skull rule</span>, the claim succeeded."
    ],
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "YEAR": "1962",
    "CATEGORIES": [
        "Negligence",
        "Remoteness",
        "Foreseeability",
        "Thin Skull Rule"
    ],
    "CATEGORY": "Negligence &mdash; Remoteness &mdash; Foreseeability &mdash; Thin Skull Rule",
    "COURT": "EWHC",
    "CITATION": "Smith v Leech Brain and Co Ltd [1962] 2 QB 405",
    "NUMBER": "94"
},
{
    "KEYWORDS": "Contributory Negligence; Consent; Ex Turpi Causa",
    "TYPE": "Concept",
    "RELATED": [
        "Private Nuisance - Defences and Remedies",
        "Duty of Care",
        "Remoteness",
        "Defamation - Defences I",
        "Duty of Care - Public Authorities",
        "Causation - The Fairchild Exception",
        "Foreseeability",
        "Causation - The But For Test",
        "Breach of Duty - Standard of Care",
        "Defamation - Defences II - Privilege",
        "Psychiatric Harm",
        "Defamation - Remedies"
    ],
    "NAME": "Defences to Negligence",
    "CATEGORIES": [
        "Negligence",
        "Defences"
    ],
    "CATEGORY": "Negligence &mdash; Defences",
    "SUMMARY": [
        "There are three main defences to negligence:",
        "<span class=\"ud\"><span class=\"bd\">Contributory Negligence</span></span><br>This was a complete defence under the common law, but a <span class=\"bd\">partial</span> defence since the <span class=\"bd\">Law Reform (Contributory Negligence) Act 1945</span> S1(1), and the most commonly-invoked. The defendant must prove the claimant (i) failed to take care and (ii) that failure contributed to the damage. <span class=\"lnk caseln\">Froom v Butcher</span>, <span class=\"lnk caseln\">Owens v Brimmell</span>. Following <span class=\"lnk caseln\">Gough v Thorne</span>, the defence fails when the claimant is a child.",
        "<span class=\"ud\"><span class=\"bd\">Consent</span></span><br>AKA <span class=\"bd\">volenti non fit injuria</span>, but there are <span class=\"bd\">things to which no consent</span> can be given &mdash; <span class=\"lnk caseln\">Baker v Hopkins</span>. In sport, players and spectators accept liability for injuries caused by competitors, excepting recklessness or deliberate infliction of injury &mdash; <span class=\"lnk caseln\">Wooldridge v Sumner</span>. Statute regulates use of this defence: <span class=\"lnk caseln\">UCTA 1977</span> ss. 1 and 2 and <span class=\"lnk caseln\">SARAH 2015</span> ss. 65 and 62, and the <span class=\"lnk caseln\">OLA 1984</span> S149.",
        "<span class=\"ud\"><span class=\"bd\">Illegality</span></span><br>AKA <span class=\"bd\">ex turpi causa non oritur actio</span>. Disreputable, criminal or immoral acts cannot give rise to causes of action. <span class=\"lnk caseln\">Gray v Thames</span>, <span class=\"lnk caseln\">Vellino</span>. An example of where it <span class=\"bd\">didn&#8217;t</span> apply is <span class=\"lnk caseln\">Delaney v Pickett</span>, and <span class=\"lnk caseln\">Joyce v O&#8217;Brien</span> is one where it <span class=\"it\">did</span>, but the usual rule was set aside. This is <span class=\"it\">flexible</span>."
    ],
    "NUMBER": "95"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Froom v Butcher",
        "Moore Stephens v Stone Rolls",
        "Revill v Newbery",
        "Bolitho v Hackney HA",
        "Joyce v O'Brien",
        "Meah v McCreamer (no 2)",
        "Owens v Brimmell",
        "Gough v Thorne",
        "Wooldridge v Sumner",
        "Sutcliffe v BMI Healthcare",
        "Badger v MOD",
        "ICI v Shatwell"
    ],
    "NAME": "Defences to Negligence - Reading",
    "CATEGORIES": [
        "Negligence",
        "Defences"
    ],
    "CATEGORY": "Negligence &mdash; Defences",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Essential</span></span>",
        "Steele, <span class=\"it\">Tort Law</span>, pp.269-298",
        "<span class=\"lnk caseln\">Froom v Butcher</span> &mdash; <span class=\"lnk caseln\">Gough v Thorne</span> &mdash; <span class=\"lnk caseln\">Baker v Hopkins</span> &mdash; <span class=\"lnk caseln\">ICI v Shatwell</span> &mdash; <span class=\"lnk caseln\">Morris v Murray</span> &mdash; <span class=\"lnk caseln\">Revill v Newbery</span> &mdash; <span class=\"lnk caseln\">Vellino v Manchester Police</span> &mdash; <span class=\"lnk caseln\">Gray v Thames</span> &mdash; <span class=\"lnk caseln\">Moore Stephens v Stone Rolls</span>.",
        "<span class=\"lnk caseln\">Law Reform (Contributory Negligence) Act 1945</span> &mdash; <span class=\"lnk caseln\">UCTA 1977</span> SS1-2 &mdash; <span class=\"lnk caseln\">Road Traffic Act 1988</span> S149.",
        "<span class=\"ud\"><span class=\"bd\">Additional</span></span>",
        "P. Davies, <span class=\"it\">Auditors&#8217; Liability: No Need to Detect Fraud?</span> (2009) 68 CLJ 505<BR>P. Davies, <span class=\"it\">The Illegality Defence and Public Policy</span> (2009) 125 LQR 556<BR>C. Hopkins, <span class=\"it\">An Unlucky Escape</span> (2002) 61 CLJ 257<BR>Law Commission, The Illegality Defence (Law Commission Report 320), 41-51, <br>at http://www.lawcom.gov.uk/project/illegality/<br> J. Mance, <span class=\"it\">Ex Turpi Causa &mdash; When Latin Avoids Liability</span> (2014) 18 Edinburgh Law Review 175",
        "<span class=\"lnk caseln\">Owens v Brimmell</span> &mdash; <span class=\"lnk caseln\">Badger v MOD</span> &mdash; <span class=\"lnk caseln\">Rehill v Rider Holdings</span> &mdash; <span class=\"lnk caseln\">Co-op v Pritchard</span> &mdash; <span class=\"lnk caseln\">Wooldridge v Sumner</span> &mdash; <span class=\"lnk caseln\">Pitts v Hunt</span> &mdash; <span class=\"lnk caseln\">Delaney v Pickett</span> &mdash; <span class=\"lnk caseln\">Joyce v O&#8217;Brien</span>."
    ],
    "NUMBER": "96"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Owens v Brimmell",
        "Badger v MOD",
        "Gough v Thorne",
        "Co-op v Pritchard",
        "Spencer v Wincanton Holdings",
        "Morris v Murray",
        "Vellino v Manchester Police",
        "Watt v Hertfordshire",
        "Baker v Hopkins",
        "Pitts v Hunt",
        "ICI v Shatwell",
        "Scout Association v Barnes"
    ],
    "NAME": "Froom v Butcher",
    "SUMMARY": [
        "In the era before seatbelts were compulsory, the defendant caused a crash in which the defendant injured his head and his finger. The claimant&#8217;s car <span class=\"it\">was</span> fitted with seatbelts, but he&#8217;d elected not to strap himself in because, he reckoned, if a crash occurred, he&#8217;d be trapped in the car if he wore his seatbelt."
    ],
    "HELD": [
        "His negligence contributed to all his injuries except of his finger, which, the court heard, would probably have been broken even had he been wearing the seatbelt.",
        "Denning LJ to claimant (approx) &mdash; <span class=\"it\">you bloody fool.</span>"
    ],
    "YEAR": "1976",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Contributory Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Contributory Negligence",
    "CITATION": "Froom v Butcher [1976] QB 286",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Denning",
        "EPLR",
        "Traffic Accident"
    ],
    "NUMBER": "97"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Spencer v Wincanton Holdings",
        "Gough v Thorne",
        "Badger v MOD",
        "Co-op v Pritchard",
        "Froom v Butcher",
        "Pitts v Hunt",
        "Meah v McCreamer (no 2)",
        "Defences to Negligence - Reading",
        "Meah v McCreamer",
        "Joyce v O'Brien",
        "ICI v Shatwell",
        "Stapley v Gypsum Mines"
    ],
    "NAME": "Owens v Brimmell",
    "SUMMARY": [
        "Claimant and defendant had been out on a pub-crawl in the defendant&#8217;s car, and were both massively full-up on alcohol by the time, on their way home, there was a crash due to the defendant&#8217;s negligence. The claimant suffered serious and permanent injuries."
    ],
    "HELD": [
        "The claimant&#8217;s negligence, in getting into a car with someone he knew to be drunk, contributed to his injury."
    ],
    "YEAR": "1977",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Contributory Negligence"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Contributory Negligence",
    "CITATION": "Owens v Brimmell [1977] QB 859",
    "COURT": "EWHC",
    "FLAGS": [
        "Traffic Accident"
    ],
    "NUMBER": "98"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Gough v Thorne",
        "Owens v Brimmell",
        "Co-op v Pritchard",
        "Froom v Butcher",
        "Spencer v Wincanton Holdings",
        "Joyce v O'Brien",
        "Meah v McCreamer (no 2)",
        "Vellino v Manchester Police",
        "Gray v Thames",
        "Bolitho v Hackney HA",
        "Morris v Murray",
        "Pitts v Hunt"
    ],
    "NAME": "Badger v MOD",
    "SUMMARY": [
        "Claimant worked for the defendant between 1954 and 1987, and died (before the trial) of mesothelioma. Poor chap. But he&#8217;d also smoked for most of his life, starting at 16, smoking a packet a day until 52, at which point he changed to <span class=\"it\">cigars</span>."
    ],
    "HELD": [
        "He was diagnosed quite a long time after the gov&#8217;t had obliged ciggie manufacturers to put warnings on packets, <span class=\"it\">yet he continued smoking</span>. Therefore although not exclusively the author of his own downfall, he contributed to it &mdash; by 20%, according to the court."
    ],
    "YEAR": "2005",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Contributory Negligence",
        "Asbestos -- Smoking"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Contributory Negligence &mdash; Asbestos -- Smoking",
    "COURT": "EWHC",
    "CITATION": "Badger v Ministry of Defence [2005] EWHC 2941",
    "NUMBER": "99"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Owens v Brimmell",
        "Froom v Butcher",
        "Badger v MOD",
        "Scout Association v Barnes",
        "Spencer v Wincanton Holdings",
        "Co-op v Pritchard",
        "ICI v Shatwell",
        "Bolitho v Hackney HA",
        "Revill v Newbery",
        "MAK and RK v UK",
        "Defences to Negligence - Reading",
        "Osman v UK"
    ],
    "NAME": "Gough v Thorne",
    "SUMMARY": [
        "The claimant was a young girl waiting to cross a road. A lorry driver slowed and signaled for her to cross. But a moron behind the lorry sped up and overtook, running down the claimant"
    ],
    "HELD": [
        "When the claimant is a very young child, the defence of contributory negligence will fail",
        "Denning LJ mused that although a young child could <span class=\"it\">not</span> reasonably be expected to have the road-sense to anticipate what happened, an older child <span class=\"it\">might</span>."
    ],
    "YEAR": "1966",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Contributory Negligence",
        "Children"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Contributory Negligence &mdash; Children",
    "CITATION": "Gough v Thorne [1966] 1 WLR 1387",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Important",
        "Denning",
        "EPLR",
        "Traffic Accident"
    ],
    "NUMBER": "100"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Badger v MOD",
        "Owens v Brimmell",
        "Froom v Butcher",
        "Spencer v Wincanton Holdings",
        "Gough v Thorne",
        "ICI v Shatwell",
        "Moore Stephens v Stone Rolls",
        "Defences to Negligence - Reading",
        "Meah v McCreamer (no 2)",
        "Gray v Thames",
        "Stapley v Gypsum Mines",
        "Sutcliffe v BMI Healthcare"
    ],
    "NAME": "Co-op v Pritchard",
    "SUMMARY": [
        "The claimant had been involved in an altercation at work at which she had been assaulted. The tort alleged was psychiatric harm."
    ],
    "HELD": [
        "Contributory negligence is not available as a defence to claims for assault and battery"
    ],
    "FLAGS": [
        "Important",
        "Recent"
    ],
    "YEAR": "2011",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Contributory Negligence",
        "Psychiatric Harm"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Contributory Negligence &mdash; Psychiatric Harm",
    "COURT": "EWCA",
    "CITATION": "Co-operative Group Ltd v Pritchard [2011] EWCA Civ 329",
    "NUMBER": "101"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Wooldridge v Sumner",
        "ICI v Shatwell",
        "Morris v Murray",
        "Scout Association v Barnes",
        "Bolitho v Hackney HA",
        "Joyce v O'Brien",
        "Meah v McCreamer",
        "Co-op v Pritchard",
        "Pitts v Hunt",
        "Badger v MOD",
        "Defences to Negligence - Reading",
        "Gough v Thorne"
    ],
    "NAME": "Baker v Hopkins",
    "SUMMARY": [
        "The defendant was employed to clean out a well, but did so by putting some kind of petrol-driven apparatus down, which filled up the well very efficiently with <span class=\"it\">carbon monoxide</span>. The manager realised that no-one should go down; he told employees to hold off, two days running.",
        "Two employees did so anyway, and promptly died. Then a doctor went down, but with a rope tied around him. He died as well. He sued."
    ],
    "HELD": [
        "No defence of consent can operate, in a very dangerous situation, unless the warnings are adequately clear.",
        "The doctor had consented to some risk, but not the risk of <span class=\"it\">dying</span> in the well."
    ],
    "KEYWORDS": "Consent",
    "NUMBER": "102",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Volenti"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Volenti",
    "CITATION": "Baker v TE Hopkins [1959] EWCA 1 WLR 966",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "YEAR": "1959"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Baker v Hopkins",
        "ICI v Shatwell",
        "Morris v Murray",
        "Badger v MOD",
        "Froom v Butcher",
        "Vellino v Manchester Police",
        "Revill v Newbery",
        "Scout Association v Barnes",
        "Sutcliffe v BMI Healthcare",
        "Moore Stephens v Stone Rolls",
        "Joyce v O'Brien",
        "Spencer v Wincanton Holdings"
    ],
    "NAME": "Wooldridge v Sumner",
    "SUMMARY": [
        "The claimant, a photographer at a horse race, was injured by a horse ridden by the defendant."
    ],
    "HELD": [
        "A person attending a game or competition accepts liability for any injuries caused to him by a competitor, unless the competitor has been reckless, or has injured deliberately.",
        "The rationale for this is straightforward: errors of judgment are to be expected by sportsmen, who necessarily will concentrate on the sport, rather than avoiding injury to third parties."
    ],
    "YEAR": "1962",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Volenti",
        "Sport"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Volenti &mdash; Sport",
    "COURT": "EWCA",
    "CITATION": "Wooldridge v Sumner [1962] 2 All ER 978",
    "NUMBER": "103"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Latimer v AEC",
        "Stapley v Gypsum Mines",
        "Coxall v Goodyear",
        "Wooldridge v Sumner",
        "Morris v Murray",
        "Baker v Hopkins",
        "Meah v McCreamer (no 2)",
        "Walker v Northumberland",
        "Joyce v O'Brien",
        "Bolitho v Hackney HA",
        "Davie v New Merton Board Mill",
        "Barber v Somerset"
    ],
    "COMMENT": "Jesse Elvin&#8217;s opinion is that the courts are, by contrast, rather paternalistic, treating employees like children who need looking after.",
    "NAME": "ICI v Shatwell",
    "SUMMARY": [
        "The claimant, with his brother, was a <span class=\"it\">shot-firer</span> in a quarry, a rigger-up of explosives. They were supposed to have tested everything and retreated to a safe distance, but hadn&#8217;t got enough wire, so tested the charges manually. One brother was killed, the other survived and sued."
    ],
    "HELD": [
        "There had been no pressure exerted by their employer to do as they did: they were merely indolent, and so were found to have consented."
    ],
    "NUMBER": "104",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Volenti",
        "Employers' Liability",
        "Primary Liability",
        "Safe Place of Work"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Volenti / Employers' Liability &mdash; Primary Liability &mdash; Safe Place of Work",
    "CITATION": "ICI v Shatwell [1965] UKHL AC 656",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "Denning",
        "EPLR"
    ],
    "YEAR": "1965"
},
{
    "TYPE": "Case",
    "RELATED": [
        "ICI v Shatwell",
        "Baker v Hopkins",
        "Wooldridge v Sumner",
        "Defences to Negligence - Reading",
        "Gray v Thames",
        "Co-op v Pritchard",
        "Delaney v Pickett",
        "Pitts v Hunt",
        "Meah v McCreamer",
        "Moore Stephens v Stone Rolls",
        "Meah v McCreamer (no 2)",
        "Gough v Thorne"
    ],
    "NAME": "Morris v Murray",
    "SUMMARY": [
        "The claimant and defendant had been out on the razzle: the defendant had had the equivalent of <span class=\"it\">17 whiskies</span>. They decided to go for a <span class=\"it\"><span class=\"bd\">flight</span></span>. But a storm was brewing. They went a hundred yards up, more or less vertically; the plane stalled, and came back down just as vertically. The defendant died, but the claimant survived to sue for his injuries. Argued that he himself was too drunk to be able to assess how drunk the pilot was."
    ],
    "HELD": [
        "The claimant had consented to be in an aeroplane piloted by a drunk, and thereby implicitly waived his rights in the event of an injury."
    ],
    "YEAR": "1990",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Volenti"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Volenti",
    "CITATION": "Morris v Murray [1990] 3 All ER 801",
    "COURT": "EWCA",
    "FLAGS": [
        "Amusing",
        "Important",
        "EPLR"
    ],
    "NUMBER": "105"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Gray v Thames",
        "Delaney v Pickett",
        "Meah v McCreamer (no 2)",
        "Pitts v Hunt",
        "Vellino v Manchester Police",
        "Meah v McCreamer",
        "Moore Stephens v Stone Rolls",
        "Joyce v O'Brien",
        "Gough v Thorne",
        "Co-op v Pritchard",
        "Froom v Butcher",
        "Defences to Negligence - Reading"
    ],
    "NAME": "Revill v Newbery",
    "SUMMARY": [
        "The defendant was a guy who really liked his <span class=\"it\">shed</span>. He slept in there with a shotgun. A burglar turned up in the wee hours, and the defendant shot <span class=\"it\">through</span> the door, and hit the burglar the chest. Whoops. So the burglar sued him."
    ],
    "HELD": [
        "Damages reduced by 2/3 for contributory negligence, the claimant being, by being there in the first place, largely responsible. Nevertheless, you can&#8217;t just blast burglars with shotguns."
    ],
    "KEYWORDS": "Illegality; Public Policy",
    "NUMBER": "106",
    "COMMENTARY": "Large tracts of the more brainless parts of the journalistic landscape are not entirely happy with this decision.",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Ex Turpi Causa"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Ex Turpi Causa",
    "CITATION": "Revill v Newbery [1996] 1 All ER 291",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Amusing",
        "EPLR"
    ],
    "YEAR": "1996"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Meah v McCreamer (no 2)",
        "Meah v McCreamer",
        "Delaney v Pickett",
        "Moore Stephens v Stone Rolls",
        "Revill v Newbery",
        "Gray v Thames",
        "Joyce v O'Brien",
        "Pitts v Hunt",
        "Sutcliffe v BMI Healthcare",
        "Co-op v Pritchard",
        "Froom v Butcher",
        "Defences to Negligence - Reading"
    ],
    "NAME": "Vellino v Manchester Police",
    "SUMMARY": [
        "The claimant, a <span class=\"it\">loveable rogue of a folk hero</span> (trans: a scumbag career-criminal), was collared by the fuzz on the second floor of a house he was merrily in the process of turning over. Then he jumped out of a window to try and escape. He fractured his skull, damaged his brain, and became a tetraplegic.",
        "He claimed that (i) the police knew he would try to escape once arrested, as he had done so before, and (ii) having arrested him, they owed him a duty of care."
    ],
    "HELD": [
        "By majority, the claim failed on <span class=\"it\">ex turpi causa</span> grounds.",
        "Sedley LJ dissented, arguing inter alia the claim would provide an incentive for the police to do their jobs properly."
    ],
    "AKA": "Vellino",
    "KEYWORDS": "Illegality; Public Policy",
    "NUMBER": "107",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Ex Turpi Causa"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Ex Turpi Causa",
    "CITATION": "Vellino v Chief Constable of Greater Manchester [2002] 3 All ER 78",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Amusing",
        "EPLR"
    ],
    "YEAR": "2002"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Delaney v Pickett",
        "Joyce v O'Brien",
        "Revill v Newbery",
        "Gray v Thames",
        "Moore Stephens v Stone Rolls",
        "Meah v McCreamer (no 2)",
        "Vellino v Manchester Police",
        "Meah v McCreamer",
        "Morris v Murray",
        "Co-op v Pritchard",
        "Defences to Negligence - Reading",
        "Spencer v Wincanton Holdings"
    ],
    "NAME": "Pitts v Hunt",
    "SUMMARY": [
        "The claimant (18) and the defendant (16), both drunk, got on the defendant&#8217;s uninsured motorbike for which the defendant had no license. The claimant encouraged the defendant to swerve from side to side to scare pedestrians. The defendant died, the claimant sued his estate."
    ],
    "HELD": [
        "Ex turpi causa: the claimant knew the driver was (i) drunk and (ii) unlicensed."
    ],
    "YEAR": "1990",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Ex Turpi Causa",
        "Traffic Accident"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Ex Turpi Causa &mdash; Traffic Accident",
    "CITATION": "Pitts v Hunt [1990] 3 All ER 344",
    "COURT": "EWCA",
    "FLAGS": [
        "Traffic Accident"
    ],
    "NUMBER": "108"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Meah v McCreamer (no 2)",
        "Delaney v Pickett",
        "Revill v Newbery",
        "Vellino v Manchester Police",
        "Gray v Thames",
        "Pitts v Hunt",
        "Meah v McCreamer",
        "Joyce v O'Brien",
        "Owens v Brimmell",
        "Froom v Butcher",
        "Co-op v Pritchard",
        "Scout Association v Barnes"
    ],
    "NAME": "Moore Stephens v Stone Rolls",
    "SUMMARY": [
        "A one-man company, set up as a vehicle to carry out a fraud, sued its accountants for <span class=\"it\">not having noticed the fraud</span>."
    ],
    "HELD": [
        "In the circumstances, the principle of ex turpi causa applied to a one-man company and prevented their claim."
    ],
    "FLAGS": [
        "Leading",
        "Important",
        "Recent"
    ],
    "YEAR": "2009",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Ex Turpi Causa"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Ex Turpi Causa",
    "COURT": "UKHL",
    "CITATION": "Moore Stephens v Stone Rolls Ltd [2009] UKHL 39",
    "NUMBER": "109"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Joyce v O'Brien",
        "Pitts v Hunt",
        "Vellino v Manchester Police",
        "Meah v McCreamer (no 2)",
        "Meah v McCreamer",
        "Moore Stephens v Stone Rolls",
        "Revill v Newbery",
        "Gray v Thames",
        "Wooldridge v Sumner",
        "Baker v Hopkins",
        "Co-op v Pritchard",
        "Defences to Negligence - Reading"
    ],
    "COMMENT": "<span class=\"it\">Daily Mail</span> bait.",
    "NAME": "Delaney v Pickett",
    "SUMMARY": [
        "The claimant, a drug dealer, was on the way to sell drugs, when, through the negligence of the defendant, he was (catastrophically) injured in a car crash."
    ],
    "HELD": [
        "Although the defendant was on the way to engage in crime, his injuries did not result from the illegality, but from the defendant&#8217;s negligence. Accordingly, <span class=\"it\">ex turpi causa</span> was no defence, and the claim succeeded."
    ],
    "NUMBER": "110",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Ex Turpi Causa",
        "Traffic Accident"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Ex Turpi Causa &mdash; Traffic Accident",
    "CITATION": "Delaney v Pickett [2011] EWCA Civ 1532",
    "COURT": "EWCA",
    "FLAGS": [
        "Amusing",
        "Traffic Accident",
        "Recent"
    ],
    "YEAR": "2011"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Delaney v Pickett",
        "Pitts v Hunt",
        "Gray v Thames",
        "Meah v McCreamer",
        "Moore Stephens v Stone Rolls",
        "Vellino v Manchester Police",
        "Meah v McCreamer (no 2)",
        "Revill v Newbery",
        "Co-op v Pritchard",
        "Watt v Hertfordshire",
        "Bolitho v Hackney HA",
        "Froom v Butcher"
    ],
    "NAME": "Joyce v O'Brien",
    "SUMMARY": [
        "Claimant and defendant engaged in some thieving. Fleeing the scene, the defendant stood on the <span class=\"it\">footplate</span> of their van, and was injured when he fell off. He sued the driver."
    ],
    "HELD": [
        "In a criminal joint enterprise, particularly one involving the need to drive recklessly to avoid arrest (!), then the usual rule (that the <span class=\"it\">turpi</span> needs to have been committed by the person suffering the tort) can be set aside, if it was foreseeable that a party to the enterprise could be subject to increased/unusual risk of harm."
    ],
    "YEAR": "2013",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Ex Turpi Causa",
        "Traffic Accident"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Ex Turpi Causa &mdash; Traffic Accident",
    "CITATION": "Joyce v O&#8217;Brien [2013] EWCA Civ 546",
    "COURT": "EWCA",
    "FLAGS": [
        "Amusing",
        "Traffic Accident",
        "Recent"
    ],
    "NUMBER": "111"
},
{
    "TYPE": "Statute",
    "RELATED": [
        "Road Traffic Act 1988",
        "Unfair Contract Terms Act 1977",
        "Compensation Act 2006",
        "Defamation Act 2013",
        "Defamation Act 1996",
        "Consumer Protection Act 1987",
        "Occupiers' Liability Act 1984",
        "Occupiers' Liability Act 1957"
    ],
    "NAME": "Law Reform (Contributory Negligence) Act 1945",
    "CATEGORIES": [
        "Negligence",
        "Defences"
    ],
    "CATEGORY": "Negligence &mdash; Defences",
    "SUMMARY": [
        "<span class=\"bd\">S1(1)</span>"
    ],
    "WIKILINK": [
        "https://en.wikipedia.org/wiki/Law_Reform_%28Contributory_Negligence%29_Act_1945"
    ],
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/Geo6/8-9/28"
    ],
    "NUMBER": "112"
},
{
    "TYPE": "Statute",
    "RELATED": [
        "Unfair Contract Terms Act 1977",
        "Law Reform (Contributory Negligence) Act 1945",
        "Compensation Act 2006",
        "Defamation Act 2013",
        "Defamation Act 1996",
        "Occupiers' Liability Act 1984",
        "Consumer Protection Act 1987",
        "Occupiers' Liability Act 1957"
    ],
    "NAME": "Road Traffic Act 1988",
    "CATEGORIES": [
        "Negligence",
        "Defences"
    ],
    "CATEGORY": "Negligence &mdash; Defences",
    "SUMMARY": [
        "<span class=\"bd\">S149</span>"
    ],
    "WIKILINK": [
        ""
    ],
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/1988/52/contents"
    ],
    "NUMBER": "113"
},
{
    "TYPE": "Statute",
    "RELATED": [
        "Law Reform (Contributory Negligence) Act 1945",
        "Road Traffic Act 1988",
        "Defamation Act 1996",
        "Compensation Act 2006",
        "Defamation Act 2013",
        "Occupiers' Liability Act 1984",
        "Occupiers' Liability Act 1957",
        "Consumer Protection Act 1987"
    ],
    "NAME": "Unfair Contract Terms Act 1977",
    "SUMMARY": [
        "<span class=\"bd\">SS1-2</span>"
    ],
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/1977/50"
    ],
    "AKA": "UCTA 1977",
    "CATEGORIES": [
        "Negligence",
        "Defences"
    ],
    "CATEGORY": "Negligence &mdash; Defences",
    "WIKILINK": [
        "https://en.wikipedia.org/wiki/Unfair_Contract_Terms_Act_1977"
    ],
    "NUMBER": "114"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Causation - The Fairchild Exception",
        "Vicarious Liability",
        "Remoteness",
        "Defamation - Defences I",
        "Foreseeability",
        "Public Nuisance",
        "Occupiers' Liability",
        "Employers' Primary Liability",
        "Defamation - Remedies",
        "Defamation",
        "Pure Economic Loss",
        "The Rule in Rylands v Fletcher"
    ],
    "NAME": "Psychiatric Harm",
    "CATEGORIES": [
        "Psychiatric Harm"
    ],
    "CATEGORY": "Psychiatric Harm",
    "SUMMARY": [
        "Often referred to by the curiously-antiquated expression <span class=\"it\">nervous shock</span>, what is meant in modern times by <span class=\"it\">pure</span> psychiatric harm is something of a sausage stuffed with sweepings from the jurisprudential slaughterhouse floor: a system of often unfair and often contradictory rules.",
        "<span class=\"bd\">Primary Victims</span><br>Usual authority is <span class=\"lnk caseln\">Page v Smith</span>.<br><span class=\"it\">They</span> &mdash;",
        "<ul><li><span class=\"nl\"> Were <span class=\"bd\">exposed to physical danger</span>, or had <span class=\"bd\">reasonable grounds to have feared</span> they would be.</span></li><li><span class=\"nl\"> Are <span class=\"bd\">owed a duty of care</span> on conventional principles.</span></li></ul>",
        "<span class=\"bd\">Secondary Victims</span><br>Bystanders, whose claim is subject to the <span class=\"lnk caseln\">Alcock Test</span>.<br><span class=\"it\">They must show that they</span> &mdash;",
        "<ol><li><span class=\"nl\"> <span class=\"bd\">Had a close tie of love and affection</span> with a primary victim.</span><ul><li><span class=\"nl\"> Which is <span class=\"bd\">rebuttably</span> presumed between parents and children and between spouses...</span></li><li><span class=\"nl\"> ... but for all others, the victim must go to court and let themselves be thoroughly worked-over by the defence barrister. <span class=\"lnk caseln\">McFarlane v Caledonia (no 1)</span>.</span></li><li><span class=\"nl\"> In <span class=\"lnk caseln\">Alcock</span> itself, <span class=\"bd\">siblinghood</span> was not enough.</span></li></ul><li><span class=\"nl\"> <span class=\"bd\">Witnessed the shocking event&amp; or its immediate aftermath</span> &mdash; <span class=\"lnk caseln\">Bourhill v Young</span>, <span class=\"lnk caseln\">Loughlin v O&#8217;Brien</span>.</span></li><li><span class=\"nl\"> <span class=\"bd\">With their own unaided senses</span>, at first hand &mdash; <span class=\"lnk caseln\">Hambrook v Stokes</span>.</span></li></ol><span class=\"nl\"><span class=\"it\">And that there was</span> &mdash;</span><ol><li><span class=\"nl\"> <span class=\"bd\">A <span class=\"it\">specific</span> shocking event</span> &mdash; <span class=\"lnk caseln\">Liverpool Womens Hospital v Ronayne</span>.</span></li></ol>",
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"> Establishing a claim in psychiatric harm requires that a DSM psychiatric condition has arisen and was caused by the defendant. Not merely sadness or upset.</span></li><li><span class=\"nl\"> If you remember a single case, remember <span class=\"lnk caseln\">Alcock</span>. The famous Denning case of <span class=\"lnk caseln\">Hinz v Berry</span> is also worth a butcher&#8217;s, not least because of Denning MR&#8217;s famous first sentence.</span></li><li><span class=\"nl\"> M. Brazier and J. Murphy, <span class=\"it\">Street on Torts</span> (10th ed., 1999), pp.210: &#8216;The student may be forgiven for finding this whole area of law confusing and contradictory.&#8217;</span></li><li><span class=\"nl\"> N.B. <span class=\"lnk caseln\">Walters v North Glamorgan</span>, in which 36 hours, woman sleeping in hospital with sick baby, epilleptic fit, series of awful events.</span></li></ul>"
    ],
    "NUMBER": "115"
},
{
    "TYPE": "Reading",
    "RELATED": [
        "Breach of Duty - Reading",
        "Occupiers' Liability - Reading",
        "Remoteness - Reading",
        "Duty of Care - Reading",
        "Employers' Liability - Reading",
        "Duty of Care - Public Authorities - Reading",
        "Causation - Reading",
        "Nuisance - Reading"
    ],
    "NAME": "Psychiatric Harm - Reading",
    "CATEGORIES": [
        "Psychiatric Harm"
    ],
    "CATEGORY": "Psychiatric Harm",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Essential</span></span>",
        "Steele, <span class=\"it\">Tort Law</span>, pp.299-333",
        "<span class=\"lnk caseln\">White v South Yorkshire Police</span> &mdash; <span class=\"lnk caseln\">Alcock v South Yorkshire Police</span> &mdash; <span class=\"lnk caseln\">Page v Smith</span> &mdash; <span class=\"lnk caseln\">W v Essex</span> &mdash; <span class=\"lnk caseln\">McFarlane v Caledonia (no 1)</span> &mdash; <span class=\"lnk caseln\">Bourhill v Young</span> &mdash; <span class=\"lnk caseln\">McLoughlin v O&#8217;Brian</span> &mdash; <span class=\"lnk caseln\">Hambrook v Stokes</span> &mdash; <span class=\"lnk caseln\">Liverpool Womens Hospital v Ronayne</span>.",
        "<span class=\"ud\"><span class=\"bd\">Additional</span></span>",
        "S. Bailey and D. Nolan, <span class=\"it\">The Page v Smith Saga: A Tale of Inauspicious Origins and Unintended Consequences</span> (2010) 69 CLJ 495<BR>M. Jones, <span class=\"it\">Liability for Psychiatric Illness \u2013 More Principle, Less Subtlety?</span> [1995] 4 Web JCLI<BR>D. Nolan, <span class=\"it\">Psychiatric Injury at the Crossroads</span> [2004] Journal of Personal Injury Law 1<BR>H. Teff, <span class=\"it\">Liability for Negligently Inflicted Psychiatric Harm: Justifications and Boundaries</span> (1998) 57 CLJ 91",
        "<span class=\"lnk caseln\">Hinz v Berry</span> &mdash; <span class=\"lnk caseln\">Dulieu v White</span> &mdash; <span class=\"lnk caseln\">Chadwick v BTC</span> &mdash; <span class=\"lnk caseln\">Boumedien v Delta Display</span> &mdash; <span class=\"lnk caseln\">Monk v Harrington</span> &mdash; <span class=\"lnk caseln\">Taylor v A Novo</span>."
    ],
    "NUMBER": "116"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Hambrook v Stokes",
        "McFarlane v Caledonia (no 1)",
        "Co-op v Pritchard",
        "Alcock v South Yorkshire Police",
        "Boumedien v Delta Display",
        "Page v Smith",
        "Dulieu v White",
        "Liverpool Womens Hospital v Ronayne",
        "Chadwick v BTC",
        "Bourhill v Young",
        "Taylor v A Novo",
        "W v Essex"
    ],
    "NAME": "Hinz v Berry",
    "SUMMARY": [
        "Having pulled over in a layby to eat a picnic and enjoy the display of <span class=\"it\">endymion non-scriptus</span> so generously afforded by nature at that time of year, a jag, the tire of which had burst, careered into the claimant&#8217;s husband and children, killing the husband."
    ],
    "HELD": [
        "To recover in psychiatric harm, the claimant must demonstrate that they have a <span class=\"it\">recognised psychiatric condition</span> rather than &#8216;mere&#8217; grief and sorrow.",
        "Denning MR &mdash; &#8216;It happened on April 19, 1964. It was bluebell time in Kent. Mr. and Mrs. Hinz had been married some 10 years, and they had four children, all aged nine and under. The youngest was one. Mrs. Hinz was a remarkable woman. In addition to her own four, she was foster-mother to four other children. To add to it, she was two months pregnant with her fifth child.<br>&emsp;&emsp;<span class=\"ilc\">Righter than he could possibly have known about the preternaturally melancholic beauty of a carpet of bluebells in a wood in Kent in April.</span><br>&emsp;&emsp;On this day they drove out in a Bedford Dormobile van from Tonbridge to Canvey Island. They took all eight children with them. As they were coming back they turned into a lay-by at Thurnham to have a picnic tea. The husband, Mr. Hinz, was at the back of the Dormobile making the tea. Mrs. Hinz had taken Stephanie, her third child, aged three, across the road to pick bluebells on the opposite side. There came along a Jaguar car driven by Mr. Berry, out of control. A tyre had burst. The Jaguar rushed into this lay-by and crashed into Mr. Hinz and the children. Mr. Hinz was frightfully injured and died a little later. Nearly all the children were hurt. Blood was streaming from their heads. Mrs. Hinz, hearing the crash, turned round and saw this disaster. She ran across the road and did all she could. Her husband was beyond recall. But the children recovered.&#8217;<br>&emsp;&emsp;<span class=\"bd\">In English law no damages are awarded for grief or sorrow caused by a person&#8217;s death</span>. No damages are to be given for the worry about the children, or for the financial strain or stress, or the difficulties of adjusting to a new life. <span class=\"bd\">Damages are, however, recoverable for nervous shock, or, to put it in medical terms, for any recognisable psychiatric illness caused by the breach of duty by the defendant</span>.&#8217;"
    ],
    "YEAR": "1970",
    "CATEGORIES": [
        "Psychiatric Harm"
    ],
    "CATEGORY": "Psychiatric Harm",
    "CITATION": "Hinz v Berry [1970] 2 QB 40",
    "COURT": "EWCA",
    "FLAGS": [
        "Denning",
        "Traffic Accident"
    ],
    "NUMBER": "117"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Page v Smith",
        "Boumedien v Delta Display",
        "McLoughlin v O'Brian",
        "Chadwick v BTC",
        "W v Essex",
        "Bourhill v Young",
        "Alcock v South Yorkshire Police",
        "Hambrook v Stokes",
        "Hinz v Berry",
        "Co-op v Pritchard",
        "Liverpool Womens Hospital v Ronayne",
        "Dulieu v White"
    ],
    "NAME": "White v South Yorkshire Police",
    "SUMMARY": [
        "The claimants, who were at Hillsborough on the fateful day, developed PTSD as a result of having seen nasty stuff happen. The claim was that their employers had been negligent in allowing too many people into a certain part of the ground, but at first instance failed to show a duty of care. On appeal the claim was that they were owed such a duty as <span class=\"it\">rescuers</span>."
    ],
    "HELD": [
        "In essence, that it would not be fair to allow claims by the police officers, when in <span class=\"lnk caseln\">Alcock</span>, claims by the relatives had failed."
    ],
    "FLAGS": [
        "Disaster",
        "Key",
        "Important",
        "EPLR"
    ],
    "AKA": "White",
    "NUMBER": "118",
    "CATEGORIES": [
        "Psychiatric Harm"
    ],
    "CATEGORY": "Psychiatric Harm",
    "COURT": "UKHL",
    "CITATION": "White v Chief Constable of South Yorkshire [1998] 3 WLR 1509",
    "YEAR": "1998"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Taylor v A Novo",
        "McFarlane v Caledonia (no 1)",
        "Liverpool Womens Hospital v Ronayne",
        "Bourhill v Young",
        "Hambrook v Stokes",
        "McLoughlin v O'Brian",
        "Vowles v Evans",
        "Sellwood v Durham",
        "Marc Rich v Bishop Rock Marine",
        "Co-op v Pritchard",
        "W v Essex",
        "Kent v Griffiths"
    ],
    "NAME": "Alcock v South Yorkshire Police",
    "SUMMARY": [
        "The claim was brought by secondary victims, a brother of one of the Hillsborough dead along with others, members of whose families had been killed."
    ],
    "HELD": [
        "Established the modern rules in psychiatric harm. Drew a fundamental but contentious distinction between <span class=\"it\">primary</span>, to whom a defendant owes a duty of care if a <span class=\"it\">physical</span> injury was reasonably foreseeable, and <span class=\"it\">secondary</span> victims, to whom <span class=\"it\">no such duty is owed</span>, unless four conditions are met, the <span class=\"lnk caseln\">Alcock Test</span>."
    ],
    "AKA": "Alcock",
    "NUMBER": "119",
    "CATEGORIES": [
        "Psychiatric Harm",
        "Secondary Victimhood",
        "Public Policy",
        "Psychiatric Harm"
    ],
    "CATEGORY": "Psychiatric Harm &mdash; Secondary Victimhood &mdash; Public Policy / Psychiatric Harm",
    "CITATION": "Alcock v Chief Constable of South Yorkshire [1991] UKHL 5",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Important",
        "Leading",
        "EPLR",
        "Disaster",
        "Floodgates"
    ],
    "YEAR": "1991"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Monk v Harrington",
        "Boumedien v Delta Display",
        "Hinz v Berry",
        "White v South Yorkshire Police",
        "McLoughlin v O'Brian",
        "W v Essex",
        "Liverpool Womens Hospital v Ronayne",
        "Hambrook v Stokes",
        "Alcock v South Yorkshire Police",
        "Co-op v Pritchard",
        "Taylor v A Novo",
        "Chadwick v BTC"
    ],
    "NAME": "Dulieu v White",
    "SUMMARY": [
        "The first successful claim in psychiatric harm. The claimant a barmaid, a pregnant one. The defendants negligently allowed a horse-drawn cart to <span class=\"it\">barge its way into the pub.</span>",
        "The shock caused her to go into labour prematurely, and she gave birth to what the court somewhat bluntly described as <span class=\"it\">an idiot child</span>."
    ],
    "HELD": [
        "An action in negligence could arise from a reasonable fear for one&#8217;s own immediate safety."
    ],
    "YEAR": "1901",
    "CATEGORIES": [
        "Psychiatric Harm"
    ],
    "CATEGORY": "Psychiatric Harm",
    "CITATION": "Dulieu v White [1901] EWHC 2 KB 669",
    "COURT": "EWHC",
    "FLAGS": [
        "Development"
    ],
    "NUMBER": "120"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Monk v Harrington",
        "W v Essex",
        "Boumedien v Delta Display",
        "Chadwick v BTC",
        "Reeves v The Met",
        "Knightly v Johns",
        "Taylor v A Novo",
        "Hughes v Lord Advocate",
        "Smith v Leech Brain",
        "Hambrook v Stokes",
        "Meah v McCreamer",
        "McFarlane v Caledonia (no 1)"
    ],
    "NAME": "Page v Smith",
    "SUMMARY": [
        "The claimant had been in a car accident caused by the conceded negligence of the defendant. He was an ME/CFS sufferer in remission, but the accident caused it to recur. The defendant argued that this was an unforeseeable consequence."
    ],
    "HELD": [
        "Followed dicta in <span class=\"lnk caseln\">Alcock</span>: the claimant was a <span class=\"it\">primary</span> victim, for whom it was enough merely to show foreseeable risk of <span class=\"it\">physical</span> injury."
    ],
    "YEAR": "1995",
    "CATEGORIES": [
        "Psychiatric Harm",
        "Primary Victimhood",
        "Remoteness"
    ],
    "CATEGORY": "Psychiatric Harm &mdash; Primary Victimhood &mdash; Remoteness",
    "CITATION": "Page v Smith [1995] UKHL 7",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "Leading",
        "EPLR",
        "Traffic Accident"
    ],
    "NUMBER": "121"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Monk v Harrington",
        "Boumedien v Delta Display",
        "Chadwick v BTC",
        "Page v Smith",
        "Bourhill v Young",
        "Dulieu v White",
        "Watt v Hertfordshire",
        "Tomlinson v Congleton",
        "Hinz v Berry",
        "Lister v Hesley Hall",
        "Various Claimants v Institute of Christian Brothers",
        "McFarlane v Caledonia (no 1)"
    ],
    "NAME": "W v Essex",
    "SUMMARY": [
        "The defendant had placed with the claimant foster family a child the defendant knew was a sex abuser, despite the claimant having specifically asked for no such children. The claimant&#8217;s natural children were indeed abused by the child placed with them, and the child suffered psychiatric harm.",
        "So, claimed the parents, did they. They failed in the lower courts."
    ],
    "HELD": [
        "The parents were indeed <span class=\"it\">primary victims</span>, as they were involved in the decision to foster.",
        "The category of primary victims is <span class=\"it\">open-ended</span>, and a <span class=\"it\">function of the facts</span>."
    ],
    "YEAR": "2000",
    "CATEGORIES": [
        "Psychiatric Harm",
        "Primary Victimhood",
        "Local Authorities",
        "Child Abuse"
    ],
    "CATEGORY": "Psychiatric Harm &mdash; Primary Victimhood &mdash; Local Authorities &mdash; Child Abuse",
    "CITATION": "W v Essex County Council and Another [2000] 2 All ER 237",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "122"
},
{
    "TYPE": "Case",
    "RELATED": [
        "W v Essex",
        "Monk v Harrington",
        "Boumedien v Delta Display",
        "Page v Smith",
        "White v South Yorkshire Police",
        "Alcock v South Yorkshire Police",
        "Dulieu v White",
        "McLoughlin v O'Brian",
        "Taylor v A Novo",
        "Liverpool Womens Hospital v Ronayne",
        "Hinz v Berry",
        "McFarlane v Caledonia (no 1)"
    ],
    "NAME": "Chadwick v BTC",
    "SUMMARY": [
        "The claimant lived a short distance from where the Lewisham train crash took place. He went and helped, and saw dreadful things as he clambered through the wreckage looking for survivors. He became withdrawn and anxious."
    ],
    "HELD": [
        "It was reasonably foreseeable that, in the event of an accident due to the defendant&#8217;s negligence, bystanders may come to the rescue, and as such, were owed a duty of care. Injury by shock to such a (physically unharmed) bystander was also reasonably foreseeable."
    ],
    "YEAR": "1967",
    "CATEGORIES": [
        "Psychiatric Harm",
        "Primary Victimhood",
        "Bystanders"
    ],
    "CATEGORY": "Psychiatric Harm &mdash; Primary Victimhood &mdash; Bystanders",
    "CITATION": "Chadwick v British Railways Board [1967] EWHC 2 All ER 945",
    "COURT": "EWHC",
    "FLAGS": [
        "Development",
        "Disaster"
    ],
    "NUMBER": "123"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Monk v Harrington",
        "Chadwick v BTC",
        "W v Essex",
        "Page v Smith",
        "Alcock v South Yorkshire Police",
        "Hinz v Berry",
        "Co-op v Pritchard",
        "Hambrook v Stokes",
        "Corr v IBC",
        "Liverpool Womens Hospital v Ronayne",
        "McFarlane v Caledonia (no 1)",
        "McLoughlin v O'Brian"
    ],
    "NAME": "Boumedien v Delta Display",
    "SUMMARY": [
        "The claimant, asleep downstairs, when the defendant crashed his car into the claimant&#8217;s garden wall, and some debris hit the house. The claimant was awoken by this."
    ],
    "HELD": [
        "Doubtful whether he reasonably thought he was at risk of serious injury on the facts, having merely been <span class=\"it\">woken up</span> by what happened."
    ],
    "YEAR": "2008",
    "CATEGORIES": [
        "Psychiatric Harm",
        "Primary Victimhood",
        ""
    ],
    "CATEGORY": "Psychiatric Harm &mdash; Primary Victimhood;",
    "CITATION": "Boumedien v Delta Display Ltd [2008] EWCA Civ 368",
    "COURT": "EWCA",
    "FLAGS": [
        "Traffic Accident",
        "Trying it on",
        "Recent"
    ],
    "NUMBER": "124"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Chadwick v BTC",
        "Page v Smith",
        "W v Essex",
        "Boumedien v Delta Display",
        "Hambrook v Stokes",
        "Taylor v A Novo",
        "McFarlane v Caledonia (no 1)",
        "Dulieu v White",
        "Co-op v Pritchard",
        "White v South Yorkshire Police",
        "Hinz v Berry",
        "Liverpool Womens Hospital v Ronayne"
    ],
    "NAME": "Monk v Harrington",
    "SUMMARY": [
        "During construction of Wembley stadium, a platform collapsed. The claimant <span class=\"it\">heard</span> about the accident, rushed to the scene, helped, and suffered psychiatric damage as a result."
    ],
    "HELD": [
        "He had not believed he was putting himself in danger, or that if he did, he did not do so reasonably. Therefore the claim failed."
    ],
    "YEAR": "2008",
    "CATEGORIES": [
        "Psychiatric Harm",
        "Primary Victimhood"
    ],
    "CATEGORY": "Psychiatric Harm &mdash; Primary Victimhood",
    "CITATION": "Monk v PC Harrington Ltd [2008] EWHC 1879",
    "COURT": "EWHC",
    "FLAGS": [
        "Trying it on",
        "Recent"
    ],
    "NUMBER": "125"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Bourhill v Young",
        "Taylor v A Novo",
        "McLoughlin v O'Brian",
        "Liverpool Womens Hospital v Ronayne",
        "Alcock v South Yorkshire Police",
        "Hambrook v Stokes",
        "White v South Yorkshire Police",
        "Chadwick v BTC",
        "Page v Smith",
        "W v Essex",
        "Dulieu v White",
        "Co-op v Pritchard"
    ],
    "NAME": "McFarlane v Caledonia (no 1)",
    "SUMMARY": [
        "The claimant worked on the Piper Alpha rig, but was aboard a support boat nearby at the time of the disaster. He saw his friends, engulfed in flames, jumping to their deaths. He claimed he should be exempt from the need to demonstrate a close tie of love and affection."
    ],
    "HELD": [
        "In the circumstances, it was not reasonably foreseeable that the claimant and other off-duty workers aboard support vessels would suffer psychiatric harm.",
        "There&#8217;s also a difficulty, the court mused, in knowing where to draw the line when assessing what is <span class=\"it\">exceptionally horrific</span>. Who, it pondered, should be the judge?",
        "The answer to that particular rhetorical question may not have been what they thought it was."
    ],
    "YEAR": "1994",
    "CATEGORIES": [
        "Psychiatric Harm",
        "Secondary Victimhood",
        "Nature of Relationship"
    ],
    "CATEGORY": "Psychiatric Harm &mdash; Secondary Victimhood &mdash; Nature of Relationship",
    "CITATION": "McFarlane v EE Caledonia Ltd [1994] 2 All ER 1",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Important",
        "EPLR",
        "Disaster"
    ],
    "NUMBER": "126"
},
{
    "TRIVIA": "<span class=\"it\">Fishwife</span> may not, in 1942, have been quite such an astonishingly insulting way of describing someone as it is now.",
    "RELATED": [
        "McFarlane v Caledonia (no 1)",
        "McLoughlin v O'Brian",
        "Liverpool Womens Hospital v Ronayne",
        "Alcock v South Yorkshire Police",
        "Taylor v A Novo",
        "Hambrook v Stokes",
        "Chadwick v BTC",
        "Co-op v Pritchard",
        "Hinz v Berry",
        "Monk v Harrington",
        "Page v Smith",
        "W v Essex"
    ],
    "NAME": "Bourhill v Young",
    "TYPE": "Case",
    "SUMMARY": [
        "A woman described as a <span class=\"it\">fishwife</span> saw not the aftermath of a fatal accident, but a pool of blood in the road after the body had been removed.",
        "She, heavily pregnant, went into labour."
    ],
    "HELD": [
        "No duty of care owed by a motorcyclist or other road user to a member of the public who might see <span class=\"it\">not even the aftermath</span> of an accident caused by his negligence."
    ],
    "NUMBER": "127",
    "CATEGORIES": [
        "Psychiatric Harm",
        "Secondary Victimhood",
        "Nature of Relationship"
    ],
    "CATEGORY": "Psychiatric Harm &mdash; Secondary Victimhood &mdash; Nature of Relationship",
    "CITATION": "Bourhill v Young [1942] 2 All ER 396",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "Amusing",
        "EPLR"
    ],
    "YEAR": "1942"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Taylor v A Novo",
        "McFarlane v Caledonia (no 1)",
        "Liverpool Womens Hospital v Ronayne",
        "Hambrook v Stokes",
        "Bourhill v Young",
        "Alcock v South Yorkshire Police",
        "Dulieu v White",
        "Page v Smith",
        "Monk v Harrington",
        "White v South Yorkshire Police",
        "Chadwick v BTC",
        "Boumedien v Delta Display"
    ],
    "NAME": "McLoughlin v O'Brian",
    "SUMMARY": [
        "A claimant had been told of a nasty accident in which her child had been killed and other members of her family seriously injured, shortly after it occurred. She rushed ot the hospital, where the victims were still in their grimy, torn, bloody clothes, etc. Claimed that this should count as the <span class=\"it\">immediate aftermath</span>."
    ],
    "HELD": [
        "In the circumstances of having the victims in hospital <span class=\"it\">still dirty and bloody</span>, the claim of secondary victimhood was to be upheld.",
        "Lord Wilberforce: &#8216;As regards proximity to the accident, it is obvious that this must be close both in time and space.&#8217;"
    ],
    "YEAR": "1982",
    "CATEGORIES": [
        "Psychiatric Harm",
        "Secondary Victimhood",
        "Necessity of Proximity"
    ],
    "CATEGORY": "Psychiatric Harm &mdash; Secondary Victimhood &mdash; Necessity of Proximity",
    "CITATION": "McLoughlin v O&#8217;Brian [1982] 2 All ER 298",
    "COURT": "UKHL",
    "FLAGS": [
        "Criticised",
        "EPLR",
        "Floodgates"
    ],
    "NUMBER": "128"
},
{
    "TYPE": "Case",
    "RELATED": [
        "McLoughlin v O'Brian",
        "McFarlane v Caledonia (no 1)",
        "Hambrook v Stokes",
        "Liverpool Womens Hospital v Ronayne",
        "Alcock v South Yorkshire Police",
        "Bourhill v Young",
        "Dulieu v White",
        "White v South Yorkshire Police",
        "Chadwick v BTC",
        "W v Essex",
        "Co-op v Pritchard",
        "Hinz v Berry"
    ],
    "NAME": "Taylor v A Novo",
    "SUMMARY": [
        "The claimant&#8217;s mother had been injured due to the defendant&#8217;s negligence. The claimant had not seen the accident or its aftermath. But three weeks later, the mother collapsed and died at home, which the claimant <span class=\"it\">did</span> witness."
    ],
    "HELD": [
        "The passage of time between the negligence and the death, three weeks, meant that the claimant could not be said to have witnessed the aftermath, and to make the defendant liable for the psychiatric harm would require a very significant extension of the law."
    ],
    "FLAGS": [
        "Recent"
    ],
    "YEAR": "2013",
    "CATEGORIES": [
        "Psychiatric Harm",
        "Secondary Victimhood",
        "Necessity of Proximity"
    ],
    "CATEGORY": "Psychiatric Harm &mdash; Secondary Victimhood &mdash; Necessity of Proximity",
    "COURT": "EWCA",
    "CITATION": "Taylor v A Novo Ltd (UK) [2013] EWCA Civ 194",
    "NUMBER": "129"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Taylor v A Novo",
        "Alcock v South Yorkshire Police",
        "McLoughlin v O'Brian",
        "McFarlane v Caledonia (no 1)",
        "Liverpool Womens Hospital v Ronayne",
        "Bourhill v Young",
        "White v South Yorkshire Police",
        "Co-op v Pritchard",
        "Hinz v Berry",
        "Chadwick v BTC",
        "W v Essex",
        "Dulieu v White"
    ],
    "NAME": "Hambrook v Stokes",
    "SUMMARY": [
        "A lorry parked on a hill; a child playing in the street...",
        "The claimant&#8217;s wife hadn&#8217;t seen the accident, but had heard <span class=\"it\">about</span> it. She suffered (it was claimed) so much fright and anxiety that she died. But not before she&#8217;d been to the races. The husband sued for <span class=\"it\">loss of her services</span>, which would only succeed if she had been the victim of a tort."
    ],
    "HELD": [
        "The claimant&#8217;s wife hadn&#8217;t seen the accident with her own unaided senses, so his suit for <span class=\"it\">loss of his wife&#8217;s services</span> failed."
    ],
    "YEAR": "1925",
    "CATEGORIES": [
        "Psychiatric Harm",
        "Secondary Victimhood",
        "Necessity of First-Hand Experience"
    ],
    "CATEGORY": "Psychiatric Harm &mdash; Secondary Victimhood &mdash; Necessity of First-Hand Experience",
    "CITATION": "Hambrook v Stokes Bros [1925] 1 KB 141",
    "COURT": "EWCA",
    "FLAGS": [
        "Criticised",
        "Development",
        "Amusing",
        "EPLR",
        "Traffic Accident"
    ],
    "NUMBER": "130"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Alcock v South Yorkshire Police",
        "Hambrook v Stokes",
        "McFarlane v Caledonia (no 1)",
        "McLoughlin v O'Brian",
        "Bourhill v Young",
        "Taylor v A Novo",
        "Co-op v Pritchard",
        "W v Essex",
        "Hinz v Berry",
        "Dulieu v White",
        "Chadwick v BTC",
        "Boumedien v Delta Display"
    ],
    "NAME": "Liverpool Womens Hospital v Ronayne",
    "SUMMARY": [
        "Claimant&#8217;s wife caused to be seriously ill by negligently-conducted surgery. Went to see his wife, saw a couple of \u2018particularly horrific&#8217; events/incidents.",
        "He saw his wife immediately before a subsequent emergency surgery (necessitated by the first, which was negligently-conducted). Wife connected up to various drips, lifeglugs, etc."
    ],
    "HELD": [
        "There had been too many events, and what he had seen had not been <span class=\"it\">exceptionally horrific</span> according to the ordinary meanings of those words."
    ],
    "NUMBER": "131",
    "COMMENTARY": "This reveals the state of the law on psychiatric harm as arbitrary and capricious.",
    "CATEGORIES": [
        "Psychiatric Harm",
        "Secondary Victimhood",
        "Necessity of Shocking Event"
    ],
    "CATEGORY": "Psychiatric Harm &mdash; Secondary Victimhood &mdash; Necessity of Shocking Event",
    "CITATION": "Liverpool Womens Hospital NHS Foundation Trust v Ronayne [2015] EWCA Civ 588",
    "COURT": "EWCA",
    "FLAGS": [
        "EPLR",
        "2015/2016!"
    ],
    "YEAR": "2015"
},
{
    "TYPE": "Concept",
    "NAME": "Psychiatric Harm - Analysis of Law",
    "SUMMARY": [
        "The consensus is that this corner of the law is a dog&#8217;s breakfast of arbitrariness.",
        "<span class=\"bd\">Lord Steyn</span>: it ought not be easy to sue in this area &mdash; it costs a lot of time and expense to establish psychiatric harm on medical evidence. Litigation, he says, is an <span class=\"it\">unconscious</span> disincentive to rehabilitation.",
        "He&#8217;s basically just having a good old-fashioned psychiatry-doubting <span class=\"it\">reckon</span>, isn&#8217;t he.",
        "There is a (private member&#8217;s) <span class=\"it\">Negligence and Damages Bill 2016</span>, which is unlikely to make it."
    ],
    "NUMBER": "132"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Vicarious Liability",
        "Private Nuisance",
        "Public Nuisance",
        "Pure Economic Loss",
        "Defamation - Remedies",
        "Defamation",
        "Occupiers' Liability",
        "Defences to Negligence",
        "Duty of Care",
        "Breach of Duty - Standard of Care",
        "The Rule in Rylands v Fletcher",
        "Product Liability"
    ],
    "NAME": "Employers' Primary Liability",
    "CATEGORIES": [
        "Employers' Liability",
        "Primary Liability"
    ],
    "CATEGORY": "Employers' Liability &mdash; Primary Liability",
    "SUMMARY": [
        "An employer is under a <span class=\"bd\">non-delegable duty</span> to employees to take <span class=\"bd\">reasonable care</span> of them &mdash; <span class=\"lnk caseln\">Wilsons and Clyde Coal v English</span>. This duty must be appropriate to each employee, taking into account <span class=\"bd\">his or her particular characteristics</span> where appropriate &mdash; <span class=\"lnk caseln\">Paris v Stepney</span>. But <span class=\"bd\">not</span> owed to an independent contractor.",
        "<span class=\"ud\"><span class=\"bd\">The Employer Must Provide</span></span>",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Reasonably competent fellow employees</span> &mdash; <span class=\"lnk caseln\">Hudson v Ridge</span>.</span></li><li><span class=\"nl\"><span class=\"bd\">Adequate equipment and materials</span> &mdash; <span class=\"lnk caseln\">Smith v Stages</span>, <span class=\"lnk caseln\">The Derbyshire</span>.</span></li><li><span class=\"nl\"><span class=\"bd\">A safe <span class=\"it\">system</span> of work</span> &mdash; <span class=\"lnk caseln\">Barber v Somerset</span>, which has to be not merely theoretical but <span class=\"bd\">operational</span>, too &mdash; <span class=\"lnk caseln\">McDermid v Nash</span>. See also <span class=\"lnk caseln\">Wilsons and Clyde Coal.</span>.</span></li><li><span class=\"nl\"><span class=\"bd\">A safe <span class=\"it\">place</span> of work</span> &mdash; <span class=\"lnk caseln\">Latimer v AEC</span>, and what this means <span class=\"it\">may</span> be related to the particular characteristics of the employee &mdash; <span class=\"lnk caseln\">Coxall v Goodyear</span>.</span></li></ol>",
        "<span class=\"ud\"><span class=\"bd\">Defences</span></span>",
        "<ul><li><span class=\"nl\">In practice <span class=\"it\">contributory negligence</span> is the most frequently pleaded, but volenti and ex turpi causa sometimes also get a look-in. For volenti see <span class=\"lnk caseln\">ICI v Shatwell</span>.</span></li></ul>"
    ],
    "NUMBER": "133"
},
{
    "TYPE": "Reading",
    "RELATED": [
        "Duty of Care - Public Authorities - Reading",
        "Breach of Duty - Reading",
        "Nuisance - Reading",
        "Duty of Care - Reading",
        "Occupiers' Liability - Reading",
        "Remoteness - Reading",
        "Causation - Reading",
        "Psychiatric Harm - Reading"
    ],
    "NAME": "Employers' Liability - Reading",
    "CATEGORIES": [
        "Employers' Liability"
    ],
    "CATEGORY": "Employers' Liability",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Essential</span></span>",
        "Steele, <span class=\"it\">Tort Law</span>, Ch. 9, pp.311-314.",
        "<span class=\"lnk caseln\">Wilsons and Clyde Coal v English</span> &mdash; <span class=\"lnk caseln\">Barber v Somerset</span> &mdash; <span class=\"lnk caseln\">Thompson v Smiths Shiprepairers</span> &mdash; <span class=\"lnk caseln\">Coxall v Goodyear</span> &mdash; <span class=\"lnk caseln\">Viasystems v Thermal Transfer</span> &mdash; <span class=\"lnk caseln\">Biffa v Maschinenfabrik</span> &mdash; <span class=\"lnk caseln\">Cox v Ministry of Justice</span> &mdash; <span class=\"lnk caseln\">Smith v Stages</span> &mdash; <span class=\"lnk caseln\">Lister v Hesley Hall</span> &mdash; <span class=\"lnk caseln\">Maga v Birmingham RC Archdiocese</span> &mdash; <span class=\"lnk caseln\">Mohamud v Morrison</span>.",
        "<span class=\"ud\"><span class=\"bd\">Additional</span></span>",
        "J. Bell, <span class=\"it\">The Basis of Vicarious Liability</span> (2013) 72 CLJ 17<br>D. Brodie, <span class=\"it\">Enterprise Liability: Justifying Vicarious Liability</span> (2007) 27 OJLS 493<br>J. Elvin, <span class=\"it\">Can an Employer be under a Duty to Dismiss an Employee for his own Good in Order to protect his Health?</span> (2003) 62 Cambridge Law Journal 20<br>J. Elvin, <span class=\"it\">How Should the Law Respond to Stress-Related Claims?</span> (2010) 21 King_s Law Journal 41<br>J. Elvin, <span class=\"it\">The Notion of Vicarious Liability for Sexual Abuse</span> (2002) 13 King_s College Law Journal 97<br>P. Morgan, <span class=\"it\">Vicarious Liability on the Move</span> (2013) 129 LQR 139<br>R. Stevens, <span class=\"it\">A Servant of Two Masters</span> (2006) 122 LQR 201<br>S. Tofaris, <span class=\"it\">Who Pays for the Sub-Contractor</span>s Negligence? Vicarious Liability and Liability for &#8220;Extra-Hazardous Activities&#8221; Re-Examined_ (2010) 69 Cambridge Law Journal 13<br>The Rt Hon Lord Hope of Craighead, <span class=\"it\">Tailoring the Law on Vicarious Liability</span> (2013) 129 LQR 514",
        "<span class=\"lnk caseln\">Paris v Stepney</span> &mdash; <span class=\"lnk caseln\">Hudson v Ridge</span> &mdash; <span class=\"lnk caseln\">Walker v Northumberland</span> &mdash; <span class=\"lnk caseln\">Latimer v AEC</span> &mdash; <span class=\"lnk caseln\">McDermid v Nash</span> &mdash; <span class=\"lnk caseln\">Coxall v Goodyear</span> &mdash; <span class=\"lnk caseln\">Stapley v Gypsum Mines</span> &mdash; <span class=\"lnk caseln\">Stevenson Jordan v McDonald</span> &mdash; <span class=\"lnk caseln\">Ferguson v Dawson</span> &mdash; <span class=\"lnk caseln\">Viasystems v Thermal Transfer</span> &mdash; <span class=\"lnk caseln\">Hawley v Luminar</span> &mdash; <span class=\"lnk caseln\">JGE v Our Lady of Charity</span> &mdash; <span class=\"lnk caseln\">Century Insurance v NI Road Transport</span> &mdash; <span class=\"lnk caseln\">Smith v Stages</span> &mdash; <span class=\"lnk caseln\">Bernard v AG of Jamaica</span> &mdash; <span class=\"lnk caseln\">Gravil v Redruth</span> &mdash; <span class=\"lnk caseln\">Radclyffe v MoD</span> &mdash; <span class=\"lnk caseln\">Allen v Hampshire</span>."
    ],
    "NUMBER": "134"
},
{
    "TYPE": "Case",
    "RELATED": [
        "ICI v Shatwell",
        "Thompson v Smiths Shiprepairers",
        "McDermid v Nash",
        "Walker v Northumberland",
        "Barber v Somerset",
        "Davie v New Merton Board Mill",
        "Stapley v Gypsum Mines",
        "Hudson v Ridge",
        "Coxall v Goodyear",
        "Latimer v AEC",
        "Coltman v Bibby Takers",
        "Bernard v AG of Jamaica"
    ],
    "NAME": "Wilsons and Clyde Coal v English",
    "SUMMARY": [
        "An employee was given the task of organising a <span class=\"it\">safe system of work</span>. This task he discharged negligently, with the result that another employee was crushed to death. The employer claimed that in entrusting the task to a competent employee, it had not breached the duty of care it owed to the employee."
    ],
    "HELD": [
        "An employer owes a duty of care to his employers to provide <span class=\"bd\">(1)</span> a safe <span class=\"bd\">place</span> of work; <span class=\"bd\">(2)</span> a safe <span class=\"bd\">system</span> of work; and <span class=\"bd\">(3)</span> reasonably <span class=\"bd\">competent</span> fellow employees. He cannot wriggle out of that duty by delegating to an employee the practicalities how some part of the discharge of that duty should be arranged &mdash; such as arranging a safe system of work."
    ],
    "AKA": "Wilsons and Clyde Coal",
    "NUMBER": "135",
    "CATEGORIES": [
        "Employers' Liability",
        "Primary Liability"
    ],
    "CATEGORY": "Employers' Liability &mdash; Primary Liability",
    "CITATION": "Wilsons and Clyde Coal Ltd v English [1937] UKHL 2",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "YEAR": "1937"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Wilsons and Clyde Coal v English",
        "Walker v Northumberland",
        "Coltman v Bibby Takers",
        "Stapley v Gypsum Mines",
        "Thompson v Smiths Shiprepairers",
        "McDermid v Nash",
        "Barber v Somerset",
        "ICI v Shatwell",
        "Davie v New Merton Board Mill",
        "Latimer v AEC",
        "Coxall v Goodyear",
        "Stevenson Jordan v McDonald"
    ],
    "NAME": "Hudson v Ridge",
    "SUMMARY": [
        "An habitual practical joker (i.e., irritating tosspot) who larked around, tripped people up, etc, had already been told by his boss to stop doing this, and also to stop what the abstract on Westlaw calls <span class=\"bd\">&#8216;otherwise engaging in horseplay and skylarking&#8217;</span>. He tripped someone up, who sprained their wrist and sued. Presumably to make a point."
    ],
    "HELD": [
        "The injury resulted from the employer&#8217;s failure to put a stop to the practical joker&#8217;s behaviour, in breach of the employer&#8217;s primary duty to provide competent staff."
    ],
    "YEAR": "1957",
    "CATEGORIES": [
        "Employers' Liability",
        "Primary Liability",
        "Competent Employees"
    ],
    "CATEGORY": "Employers' Liability &mdash; Primary Liability &mdash; Competent Employees",
    "CITATION": "Hudson v Ridge Manufacturing Co Ltd [1957] EWHC 2 QB 348",
    "COURT": "EWHC",
    "FLAGS": [
        "Development",
        "Amusing"
    ],
    "NUMBER": "136"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Coltman v Bibby Takers",
        "Barber v Somerset",
        "ICI v Shatwell",
        "McDermid v Nash",
        "Walker v Northumberland",
        "Thompson v Smiths Shiprepairers",
        "Wilsons and Clyde Coal v English",
        "Latimer v AEC",
        "Stapley v Gypsum Mines",
        "Hudson v Ridge",
        "Coxall v Goodyear",
        "Mohamud v Morrison"
    ],
    "NAME": "Davie v New Merton Board Mill",
    "SUMMARY": [
        "The claimant had been provided a tool that proved defective, dangerously so, and lost an eye when a chip of metal flew up at him."
    ],
    "HELD": [
        "The supplier of the tool, and the employer, had not been negligent as regards its provision to the claimant. The course of action lay against the manufacturer."
    ],
    "YEAR": "1959",
    "CATEGORIES": [
        "Employers' Liability",
        "Primary Liability",
        "Adequate Materials and Equipment"
    ],
    "CATEGORY": "Employers' Liability &mdash; Primary Liability &mdash; Adequate Materials and Equipment",
    "CITATION": "Davie v New Merton Board Mills Ltd [1959] UKHL AC 604",
    "COURT": "UKHL",
    "FLAGS": [
        "Development"
    ],
    "NUMBER": "137"
},
{
    "TYPE": "Statute",
    "COMMENT": "The judicial interpretation of <span class=\"it\">equipment</span> has been broad &mdash; <span class=\"lnk caseln\">Coltman v Bibby Takers</span>.",
    "NAME": "Employers' Liability (Defective Equipment) Act 1969",
    "SUMMARY": [
        "Section 1 of the act provides, in contrast to <span class=\"lnk caseln\">Davie v New Merton Board Mill</span>, that the employer is liable for damage to employees caused by defects in equipment <span class=\"it\">caused by third parties</span>:",
        "&#8220;(a) an employee suffers personal injury in the course of his employment in consequence of a defect in equipment provided by his employer for the purposes of the employer&#8217;s business; and",
        "(b) <span class=\"bd\">the defect is attributable wholly or partly to the fault of a third party (whether identified or not),</span>",
        "the injury shall be deemed to be also attributable to negligence on the part of the employer (whether or not he is liable in respect of the injury apart from this subsection), but without prejudice to the law relating to contributory negligence and to any remedy by way of contribution or in contract or otherwise which is available to the employer in respect of the injury.&#8221;"
    ],
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/1969/37/contents"
    ],
    "NUMBER": "138"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Davie v New Merton Board Mill",
        "Hudson v Ridge",
        "ICI v Shatwell",
        "Coxall v Goodyear",
        "Barber v Somerset",
        "Stapley v Gypsum Mines",
        "Latimer v AEC",
        "Wilsons and Clyde Coal v English",
        "McDermid v Nash",
        "Walker v Northumberland",
        "Thompson v Smiths Shiprepairers",
        "Hawley v Luminar"
    ],
    "NAME": "Coltman v Bibby Takers",
    "SUMMARY": [
        "The Derbyshire went down off Japan with the loss of all hands. An action was brought by the estate of one of the crew that the ship had been <span class=\"it\">equipment</span> and as such, <span class=\"it\">defective</span>."
    ],
    "HELD": [
        "A ship is indeed equipment for the purposes of S1 <span class=\"lnk caseln\">Employers&#8217; Liability (Defective Equipment) Act</span>."
    ],
    "AKA": "The Derbyshire",
    "NUMBER": "139",
    "CATEGORIES": [
        "Employers' Liability",
        "Primary Liability",
        "Adequate Materials and Equipment",
        "Ships"
    ],
    "CATEGORY": "Employers' Liability &mdash; Primary Liability &mdash; Adequate Materials and Equipment &mdash; Ships",
    "CITATION": "Coltman v Bibby Takers Ltd [1988] AC 276",
    "COURT": "UKHL",
    "FLAGS": [
        "Important"
    ],
    "YEAR": "1988"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Barber v Somerset",
        "Thompson v Smiths Shiprepairers",
        "McDermid v Nash",
        "Hudson v Ridge",
        "Latimer v AEC",
        "ICI v Shatwell",
        "Coltman v Bibby Takers",
        "Davie v New Merton Board Mill",
        "Stapley v Gypsum Mines",
        "Coxall v Goodyear",
        "Wilsons and Clyde Coal v English",
        "Viasystems v Thermal Transfer"
    ],
    "NAME": "Walker v Northumberland",
    "SUMMARY": [
        "The claimant had been in a position of responsibility at the defendant employer, marshalling four teams of fieldworkers, but under a &#8216;great deal of pressure.&#8217; He was sacked when he went on four months of stress-related sick-leave, and sued for breach of duty of care of the defendant."
    ],
    "HELD": [
        "The claim succeeded, as the (psychiatric) damage he incurred was due to the defendant&#8217;s failure to provide a reasonable system of work.",
        "for the purposes of employers&#8217; primary liability, <span class=\"it\">safe</span> means in terms of physical <span class=\"it\">and</span> mental health."
    ],
    "YEAR": "1995",
    "CATEGORIES": [
        "Employers' Liability",
        "Primary Liability",
        "Safe System of Work"
    ],
    "CATEGORY": "Employers' Liability &mdash; Primary Liability &mdash; Safe System of Work",
    "CITATION": "Walker v Northumberland County Council [1995] 1 All ER 737",
    "COURT": "EWHC",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "140"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Thompson v Smiths Shiprepairers",
        "Walker v Northumberland",
        "McDermid v Nash",
        "Hudson v Ridge",
        "Coxall v Goodyear",
        "Wilsons and Clyde Coal v English",
        "Stapley v Gypsum Mines",
        "Coltman v Bibby Takers",
        "Latimer v AEC",
        "Davie v New Merton Board Mill",
        "ICI v Shatwell",
        "Viasystems v Thermal Transfer"
    ],
    "NAME": "Barber v Somerset",
    "SUMMARY": [
        "A teacher had extra work piled onto him. When he protested he couldn&#8217;t cope, he was told he merely needed to learn how to <span class=\"it\">prioritise</span>. Unfortunately he had a nervous breakdown. At every stage his employers were surley and unhelpful."
    ],
    "HELD": [
        "The employer had failed in their duty to provide a safe system of work, in giving the employee far too much work to do, and in treating his complaints about it without any sympathy.",
        "Cf. <span class=\"lnk caseln\">White v South Yorkshire Police</span>"
    ],
    "YEAR": "2004",
    "CATEGORIES": [
        "Employers' Liability",
        "Primary Liability",
        "Safe System of Work"
    ],
    "CATEGORY": "Employers' Liability &mdash; Primary Liability &mdash; Safe System of Work",
    "CITATION": "Barber v Somerset County Council [2004] UKHL 13",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "Leading",
        "EPLR"
    ],
    "NUMBER": "141"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Barber v Somerset",
        "Walker v Northumberland",
        "McDermid v Nash",
        "Hudson v Ridge",
        "Stapley v Gypsum Mines",
        "Coltman v Bibby Takers",
        "Latimer v AEC",
        "Coxall v Goodyear",
        "ICI v Shatwell",
        "Davie v New Merton Board Mill",
        "Wilsons and Clyde Coal v English",
        "Century Insurance v NI Road Transport"
    ],
    "NAME": "Thompson v Smiths Shiprepairers",
    "SUMMARY": [
        "The claimant had worked in an industry where a risk of going deaf was accepted as more or less unavoidable. By the &#8216;60s, the need to provide employees with ear-defenders was generally known, but not standard practice in the defendant&#8217;s industry. The claimant went deaf and sued."
    ],
    "HELD": [
        "The defendant could only invoke <span class=\"it\">industry practice</span> as a defence until the date at which the necessity and effectiveness of precautions (ear defenders) became known about &mdash; 1963. Therefore the claim succeeded, but only for the loss of hearing sustained from the period <span class=\"it\">after</span> 1963, until ear-defenders were supplied."
    ],
    "YEAR": "1984",
    "CATEGORIES": [
        "Employers' Liability",
        "Primary Liability",
        "Safe System of Work"
    ],
    "CATEGORY": "Employers' Liability &mdash; Primary Liability &mdash; Safe System of Work",
    "CITATION": "Thompson v Smiths Shiprepairers (North Shields) Ltd [1984] 1 All ER 881",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "142"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Barber v Somerset",
        "Walker v Northumberland",
        "Thompson v Smiths Shiprepairers",
        "Coxall v Goodyear",
        "Hudson v Ridge",
        "Davie v New Merton Board Mill",
        "Stapley v Gypsum Mines",
        "Wilsons and Clyde Coal v English",
        "Latimer v AEC",
        "ICI v Shatwell",
        "Coltman v Bibby Takers",
        "Radclyffe v MoD"
    ],
    "NAME": "McDermid v Nash",
    "SUMMARY": [
        "Although there were procedures in place, a ship-hand was injured by a rope, when the captain of the ship neglected to follow them. The defendant argued they were not liable, as they had indeed provided a safe system of work."
    ],
    "HELD": [
        "Not only does the system of work have to be safe, it also has to be <span class=\"it\">in operation</span>."
    ],
    "FLAGS": [
        "Important"
    ],
    "YEAR": "1987",
    "CATEGORIES": [
        "Employers' Liability",
        "Primary Liability",
        "Safe System of Work"
    ],
    "CATEGORY": "Employers' Liability &mdash; Primary Liability &mdash; Safe System of Work",
    "COURT": "UKHL",
    "CITATION": "McDermid v Nash Dredging and Reclamation Co Ltd [1987] 2 All ER 878",
    "NUMBER": "143"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Stapley v Gypsum Mines",
        "Latimer v AEC",
        "ICI v Shatwell",
        "Walker v Northumberland",
        "Thompson v Smiths Shiprepairers",
        "Wilsons and Clyde Coal v English",
        "Davie v New Merton Board Mill",
        "Coltman v Bibby Takers",
        "McDermid v Nash",
        "Barber v Somerset",
        "Hudson v Ridge",
        "Gravil v Redruth"
    ],
    "NAME": "Coxall v Goodyear",
    "SUMMARY": [
        "The claimant, who was predisposed to asthma, was told by the work doctor he shouldn&#8217;t work in the paint section of the factory. No action was taken by the employer. He collapsed due to the fumes and was diagnosed with occupational asthma."
    ],
    "HELD": [
        "What constitutes a safe place of work <span class=\"it\">may</span> depend on the particular characteristics of an employee, and, on a case-by-case basis, liability should be assessed as such."
    ],
    "YEAR": "2002",
    "CATEGORIES": [
        "Employers' Liability",
        "Primary Liability",
        "Safe Place of Work"
    ],
    "CATEGORY": "Employers' Liability &mdash; Primary Liability &mdash; Safe Place of Work",
    "CITATION": "Coxall v Goodyear Great Britain Ltd [2002] EWCA Civ 1010",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "144"
},
{
    "TYPE": "Case",
    "RELATED": [
        "ICI v Shatwell",
        "Coxall v Goodyear",
        "Latimer v AEC",
        "Hudson v Ridge",
        "Davie v New Merton Board Mill",
        "Walker v Northumberland",
        "McDermid v Nash",
        "Wilsons and Clyde Coal v English",
        "Spencer v Wincanton Holdings",
        "Co-op v Pritchard",
        "Badger v MOD",
        "Froom v Butcher"
    ],
    "NAME": "Stapley v Gypsum Mines",
    "SUMMARY": [
        "The claimant, a miner, was killed when a dangerous roof collapsed. He and another had in fact been instructed to bring the roof down, but hadn&#8217;t succeeded. So they decided to continue what they&#8217;d been doing previously."
    ],
    "HELD": [
        "The claimant had contributed substantially to the accident in disobeying his employer&#8217;s orders, and as such, was entitled only to 20% damages."
    ],
    "YEAR": "1953",
    "CATEGORIES": [
        "Employers' Liability",
        "Primary Liability",
        "Safe Place of Work",
        "Employers' Liability",
        "Defences",
        "Contributory Negligence"
    ],
    "CATEGORY": "Employers' Liability &mdash; Primary Liability &mdash; Safe Place of Work / Employers' Liability &mdash; Defences &mdash; Contributory Negligence",
    "COURT": "UKHL",
    "CITATION": "Stapley v Gypsum Mines Ltd [1953] UKHL AC 663",
    "NUMBER": "145"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Employers' Primary Liability",
        "Occupiers' Liability",
        "Psychiatric Harm",
        "Private Nuisance - Defences and Remedies",
        "Product Liability",
        "The Rule in Rylands v Fletcher",
        "Defences to Negligence",
        "Defamation - Defences II - Privilege",
        "Foreseeability",
        "Causation - The But For Test",
        "Defamation",
        "Defamation - Remedies"
    ],
    "NAME": "Vicarious Liability",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability",
    "SUMMARY": [
        "This is where employ<span class=\"it\">ee</span> has committed a tort, acting in the course of his empoyment, but his liability is transferred to the employ<span class=\"it\">er</span>.",
        "Academic blather about of agents and principles etc notwithstanding, this doctrine arises, it seems, out of pragmatism. Employers, who have to be insured, have the moolah to stump up damages whereas employees, in general, do not. A lot of the interesting case law concerns the <span class=\"it\">Catholic Church</span>, and there will be bonus points in June 2016 for citing <span class=\"lnk caseln\">Mohamud</span> [2016] in a problem question or essay.",
        "<span class=\"ud\"><span class=\"bd\">The test</span></span><br>The tortfeasor (the doer of the wrong) must:",
        "<ol><li><span class=\"nl\"> Either be</span><ol><li><span class=\"nl\"> the defendant&#8217;s <span class=\"bd\">employee</span>, although more broadly than as per employment law.</span><ul><li><span class=\"nl\">Subcontractors (<span class=\"lnk caseln\">Viasystems</span>) and agency staff (<span class=\"lnk caseln\">Hawley v Luminar</span>) may well count as well,</span></li><li><span class=\"nl\">but on condition that the <span class=\"it\">de juris</span> employer is no longer the <span class=\"it\">de facto</span> employer (<span class=\"lnk caseln\">Biffa</span>).</span></li></ul><li class=\"nonum\"><span class=\"nl\"> or be</span></li><li style=\"counter-reset: item 1;\"><span class=\"nl\"> in a <span class=\"bd\">relationship akin to employment</span>.</span><ul><li><span class=\"nl\">The leading case is <span class=\"lnk caseln\">Cox v Ministry of Justice</span> (2016), affirming <span class=\"lnk caseln\">Christian Brothers</span>.</span></li></ul></li></ol><li><span class=\"nl\"> Have committed a tort, and</span></li><li><span class=\"nl\"> done so <span class=\"bd\">in the course of employment</span>.</span><ul><li><span class=\"nl\">Not, that is (key phrase, this) <span class=\"it\"><span class=\"bd\">off on a frolic of his own</span></span>.</span></li><li><span class=\"nl\">The leading case is probably now <span class=\"lnk caseln\">Mohamud</span> (2016).</span></li><li><span class=\"nl\">For the Catholic take on this, see <span class=\"lnk caseln\">Maga</span>.</span></li><li><span class=\"nl\">The must-know cases are: <span class=\"lnk caseln\">Lister v Hesley Hall</span> and <span class=\"lnk caseln\">Smith v Stages</span>.</span></li></ul></ol>"
    ],
    "NUMBER": "146"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Viasystems v Thermal Transfer",
        "Ferguson v Dawson",
        "Biffa v Maschinenfabrik",
        "Hawley v Luminar",
        "Century Insurance v NI Road Transport",
        "JGE v Our Lady of Charity",
        "Gravil v Redruth",
        "Radclyffe v MoD",
        "Mohamud v Morrison",
        "Various Claimants v Institute of Christian Brothers",
        "Smith v Stages",
        "Maga v Birmingham RC Archdiocese"
    ],
    "NAME": "Stevenson Jordan v McDonald",
    "SUMMARY": [
        "It was unclear whether an employer would be vicariously liable for a tort committed by a person reasonably <span class=\"it\">integrated</span> into a company, but not its employee sensu stricto."
    ],
    "HELD": [
        "What is meant by employee for the purposes of vicarious liability is not limited to the employment law meaning, but may be a function of the person&#8217;s integration into the company.",
        "Denning LJ &mdash; &#8216;It is often easy to recognise a contract of service when you see it, but difficult to say where the difference lies. A ship&#8217;s master, a chauffeur, and a reporter on the staff of a newspaper are all employed under a contract of service; but a ship&#8217;s pilot, a taxi-man, and a newspaper contributor are employed under a contract for services. One feature which seems to run through the instances is that, under a contract of service, a man is employed as part of the business, and his work is done as an integral part of the business; whereas, under a contract for services, his work, although done for the business, is not integrated into it but is only accessory to it.&#8217;"
    ],
    "YEAR": "1952",
    "FLAG": "Important; Denning",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "Meaning of Employee"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; Meaning of Employee",
    "COURT": "EWCA",
    "CITATION": "Stevenson Jordan &amp; Harrison v McDonald &amp; Evans [1952] EWCA 1 TLR 101",
    "NUMBER": "147"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Biffa v Maschinenfabrik",
        "Viasystems v Thermal Transfer",
        "Hawley v Luminar",
        "Stevenson Jordan v McDonald",
        "Various Claimants v Institute of Christian Brothers",
        "Gravil v Redruth",
        "Allen v Hampshire",
        "Mohamud v Morrison",
        "JGE v Our Lady of Charity",
        "Maga v Birmingham RC Archdiocese",
        "Smith v Stages",
        "Radclyffe v MoD"
    ],
    "NAME": "Ferguson v Dawson",
    "SUMMARY": [
        "A casual labourer for a builder had fallen off a roof. He claimed to be owed a statutory duty of care. But he was paid in cash; there were, e.g., no NI contributions."
    ],
    "HELD": [
        "By majority, that the true relationship between the claimant and defendant was one of master and servant. The reality counts more than the formalities: the defendant was not on so casual a basis as to preclude the claimant owing a duty of care under employers&#8217; liability.",
        "Lawton LJ (dissenting): the parties to the relationship had got it right by saying the man was on &#8216;the lump.&#8217; He avoided tax, and it was contrary to public policy for such a relationship to be recognised as employment for tort purposes."
    ],
    "YEAR": "1976",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "Meaning of Employee"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; Meaning of Employee",
    "COURT": "EWCA",
    "CITATION": "Ferguson v John Dawson &amp; Partners (Contractors) Ltd [1976] EWCA 1 WLR 1213",
    "NUMBER": "148"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Biffa v Maschinenfabrik",
        "Ferguson v Dawson",
        "Stevenson Jordan v McDonald",
        "Hawley v Luminar",
        "Lister v Hesley Hall",
        "Maga v Birmingham RC Archdiocese",
        "Allen v Hampshire",
        "Gravil v Redruth",
        "Century Insurance v NI Road Transport",
        "JGE v Our Lady of Charity",
        "Smith v Stages",
        "Radclyffe v MoD"
    ],
    "NAME": "Viasystems v Thermal Transfer",
    "SUMMARY": [
        "The defendants had subcontracted work installing air conditioning in their factory to a company, who then subcontracted part of the work to another. The sub-sub-contractor negligently caused a flood in the claimant&#8217;s factory."
    ],
    "HELD": [
        "Although it had been previously assumed that vicarious liablity for an employee&#8217;s tort could not born dually by two parties, this was wrong. Depending on the facts, liability could be shared.",
        "Here, both sub-contractor and sub-sub-contractor were held vicariously liable."
    ],
    "AKA": "Viasystems",
    "NUMBER": "149",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "Meaning of Employee",
        "Subcontractors"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; Meaning of Employee &mdash; Subcontractors",
    "CITATION": "Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd [2005] EWCA Civ 1151",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Important",
        "EPLR"
    ],
    "YEAR": "2005"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Viasystems v Thermal Transfer",
        "Stevenson Jordan v McDonald",
        "Ferguson v Dawson",
        "Biffa v Maschinenfabrik",
        "Century Insurance v NI Road Transport",
        "JGE v Our Lady of Charity",
        "Maga v Birmingham RC Archdiocese",
        "Bernard v AG of Jamaica",
        "Gravil v Redruth",
        "Lister v Hesley Hall",
        "Radclyffe v MoD",
        "Cox v Ministry of Justice"
    ],
    "NAME": "Hawley v Luminar",
    "SUMMARY": [
        "The claimant had been assaulted and severely injured by a doorman, employed by an agency but working at the respondent&#8217;s nightclub. He made a claim under vicarious liability, but the respondent argued the doorman was not their employee."
    ],
    "HELD": [
        "This was not like <span class=\"lnk caseln\">Viasystems</span>, because complete control of the employee had been effectively transferred to the defendant. For the purposes of"
    ],
    "YEAR": "2006",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "Meaning of Employee",
        "Agency Staff"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; Meaning of Employee &mdash; Agency Staff",
    "CITATION": "Hawley v Luminar Leisure Ltd [2006] EWCA Civ 18",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Leading"
    ],
    "NUMBER": "150"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Viasystems v Thermal Transfer",
        "Hawley v Luminar",
        "Ferguson v Dawson",
        "Stevenson Jordan v McDonald",
        "Mohamud v Morrison",
        "Radclyffe v MoD",
        "Bernard v AG of Jamaica",
        "Allen v Hampshire",
        "Lister v Hesley Hall",
        "Cox v Ministry of Justice",
        "JGE v Our Lady of Charity",
        "Century Insurance v NI Road Transport"
    ],
    "NAME": "Biffa v Maschinenfabrik",
    "SUMMARY": [
        "For the construction of a recycling plant, a <span class=\"it\">ball mill</span> had to be designed. For this the defendant was engaged. They designed it but subcontracted its construction to a third party, who worked independently."
    ],
    "HELD": [
        "The burden is on the company that <span class=\"it\">lends</span> employees to show the worker is now the employee of the other.",
        "The third party in this case had retained control over the employees, not the defendant. They were not <span class=\"it\">lent</span> to the defendant."
    ],
    "AKA": "Biffa",
    "NUMBER": "151",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "Meaning of Employee",
        "Subcontractors"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; Meaning of Employee &mdash; Subcontractors",
    "CITATION": "Biffa Waste Services Ltd v Maschinenfabrik Ernst Hese GmbH [2008] EWCA Civ 1257",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Important",
        "EPLR",
        "Recent"
    ],
    "YEAR": "2008"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Various Claimants v Institute of Christian Brothers",
        "Maga v Birmingham RC Archdiocese",
        "Cox v Ministry of Justice",
        "Lister v Hesley Hall",
        "Gravil v Redruth",
        "Century Insurance v NI Road Transport",
        "Bernard v AG of Jamaica",
        "Hawley v Luminar",
        "Smith v Stages",
        "Allen v Hampshire",
        "Biffa v Maschinenfabrik",
        "Ferguson v Dawson"
    ],
    "NAME": "JGE v Our Lady of Charity",
    "SUMMARY": [
        "Victims of what the Catholic church quite astonishingly expects us to call <span class=\"it\">abuse</span> instead of what it is, <span class=\"it\">the rape of children</span>, sued the diocese of their abuser."
    ],
    "HELD": [
        "The relationship between an RC priest and his bishop was sufficiently similar to that of an employee and employer to make it just and fair to hold the diocese vicariously liable for a priest&#8217;s sexual abuse, even if there was no frequent and direct control exerced by bishop on priest."
    ],
    "FLAGS": [
        "Important",
        "Leading",
        "Child Abuse",
        "Recent"
    ],
    "YEAR": "2012",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "Relationship akin to Employment",
        "Catholic Church",
        "Employers' Liability",
        "Vicarious Liability",
        "Child Abuse"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; Relationship akin to Employment &mdash; Catholic Church / Employers' Liability &mdash; Vicarious Liability &mdash; Child Abuse",
    "COURT": "EWCA",
    "CITATION": "JGE v English Province of Our Lady of Charity [2012] EWCA Civ 938",
    "NUMBER": "152"
},
{
    "TYPE": "Case",
    "RELATED": [
        "JGE v Our Lady of Charity",
        "Maga v Birmingham RC Archdiocese",
        "Cox v Ministry of Justice",
        "Lister v Hesley Hall",
        "Radclyffe v MoD",
        "Century Insurance v NI Road Transport",
        "Stevenson Jordan v McDonald",
        "Mohamud v Morrison",
        "Biffa v Maschinenfabrik",
        "Ferguson v Dawson",
        "Gravil v Redruth",
        "Hawley v Luminar"
    ],
    "NAME": "Various Claimants v Institute of Christian Brothers",
    "SUMMARY": [
        "Victims of child rape at a school for which the defendant had <span class=\"it\">supplied</span> teachers had already established the school was vicariously liable. The question was whether the defendant was, too."
    ],
    "HELD": [
        "The relationship between a priest sent to work in a school and the priest&#8217;s <span class=\"it\">institute</span> was akin to employment, even though the institute had not managed the school.",
        "Defendants cannot avoid liability through technical arguments about the technical status of the tortfeasor."
    ],
    "FLAGS": [
        "Key",
        "Leading",
        "Important",
        "Child Abuse",
        "Recent"
    ],
    "AKA": "Christian Brothers",
    "NUMBER": "153",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "Relationship akin to Employment",
        "Catholic Church",
        "Employers' Liability",
        "Vicarious Liability",
        "Child Abuse"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; Relationship akin to Employment &mdash; Catholic Church / Employers' Liability &mdash; Vicarious Liability &mdash; Child Abuse",
    "COURT": "UKSC",
    "CITATION": "Various Claimants v Institute of the Brothers of the Christian Schools [2012] UKSC 56",
    "YEAR": "2012"
},
{
    "TYPE": "Case",
    "RELATED": [
        "JGE v Our Lady of Charity",
        "Various Claimants v Institute of Christian Brothers",
        "Maga v Birmingham RC Archdiocese",
        "Biffa v Maschinenfabrik",
        "Bernard v AG of Jamaica",
        "Lister v Hesley Hall",
        "Radclyffe v MoD",
        "Allen v Hampshire",
        "Mohamud v Morrison",
        "Smith v Stages",
        "Gravil v Redruth",
        "Viasystems v Thermal Transfer"
    ],
    "COMMENT": "Note this judgment hadn&#8217;t been rendered when this case was discussed by Jesse Elvin on the 20th Nov 15, so <span class=\"it\">Cox</span> may appear in your lecture notes as a 2014 EWCA decision. But nothing changed. The MoD&#8217;s appeal in the UKSC was unsuccessful.",
    "NAME": "Cox v Ministry of Justice",
    "SUMMARY": [
        "The claimant, an employee of HMP Swansea, had been injured by one of the lags, a Mr. Inder, working in the prison kitchen."
    ],
    "HELD": [
        "The <span class=\"lnk caseln\">Christian Brothers</span> requirements for a relationship akin to employment were met.",
        "Lord Reed &mdash; the general approach described in <span class=\"lnk caseln\">Christian Brothers</span> is <span class=\"bd\">not confined to a special category of cases</span>, but provides a basis for identifying the circumstances in which vicarious liability may in principle be imposed outside employment relationships."
    ],
    "AKA": "Cox",
    "NUMBER": "154",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "Relationship akin to Employment",
        "Prisons"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; Relationship akin to Employment &mdash; Prisons",
    "CITATION": "Cox v Ministry of Justice [2016] UKSC 10",
    "COURT": "UKSC",
    "FLAGS": [
        "Key",
        "Leading",
        "Important",
        "EPLR",
        "2015/2016!"
    ],
    "YEAR": "2016"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Gravil v Redruth",
        "Smith v Stages",
        "Mohamud v Morrison",
        "Bernard v AG of Jamaica",
        "Lister v Hesley Hall",
        "Radclyffe v MoD",
        "Maga v Birmingham RC Archdiocese",
        "Allen v Hampshire",
        "Hawley v Luminar",
        "Ferguson v Dawson",
        "Biffa v Maschinenfabrik",
        "Stevenson Jordan v McDonald"
    ],
    "NAME": "Century Insurance v NI Road Transport",
    "SUMMARY": [
        "A petrol tanker delivery driver <span class=\"it\">having a crafty fag</span>. He threw the match on the floor. Can you guess how this ends? The defence argued that he hadn&#8217;t been acting in the course of his employment by smoking."
    ],
    "HELD": [
        "The defendant was liable for the damage done by a discarded match from a cigarette, which the driver was not being paid to smoke: the court ruled that he was acting in the course of his employment."
    ],
    "YEAR": "1942",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "In the Course of Employment",
        "Smoking"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; In the Course of Employment &mdash; Smoking",
    "CITATION": "Century Insurance v Northern Ireland Road Transport Board [1942] UKHL 2",
    "COURT": "UKHL",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "155"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Gravil v Redruth",
        "Allen v Hampshire",
        "Lister v Hesley Hall",
        "Mohamud v Morrison",
        "Radclyffe v MoD",
        "Century Insurance v NI Road Transport",
        "Maga v Birmingham RC Archdiocese",
        "Bernard v AG of Jamaica",
        "Viasystems v Thermal Transfer",
        "Various Claimants v Institute of Christian Brothers",
        "Cox v Ministry of Justice",
        "Ferguson v Dawson"
    ],
    "NAME": "Smith v Stages",
    "SUMMARY": [
        "Two employees were sent to do a week&#8217;s work in a distant part of the country. They were told to finish, sleep, then drive back. In fact they finished, then drove back. They crashed through the negligence of the one at the wheel, and the other suffered serious injuries. He (and then his widow) sued the employer."
    ],
    "HELD": [
        "Having a choice about how to travel does not mean a particular choice is a <span class=\"it\">frolic</span>. They were travelling between workplaces. Had they taken a significant deviation, they would indeed have been off on a frolic of their own."
    ],
    "YEAR": "1989",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "In the Course of Employment",
        "Detour"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; In the Course of Employment &mdash; Detour",
    "CITATION": "Smith v Stages [1989] 1 All ER 833",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "156"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Maga v Birmingham RC Archdiocese",
        "Bernard v AG of Jamaica",
        "Radclyffe v MoD",
        "Mohamud v Morrison",
        "Various Claimants v Institute of Christian Brothers",
        "Smith v Stages",
        "JGE v Our Lady of Charity",
        "Century Insurance v NI Road Transport",
        "Allen v Hampshire",
        "Gravil v Redruth",
        "Biffa v Maschinenfabrik",
        "Cox v Ministry of Justice"
    ],
    "NAME": "Lister v Hesley Hall",
    "SUMMARY": [
        "The claimant had been interfered with by the warden of his school. He sued them as vicariously liable. They argued that the abuser had not in fact sexually abused <span class=\"it\">in the course of his employment</span>, as he was employed to teach, not rape."
    ],
    "HELD": [
        "A finding of vicarious liability will only be made where there is <span class=\"bd\">a sufficiently close connection</span> between the tort and the employment so that it would be fair and just to do so.",
        "The defendant was vicariously liable, as the sexual abuse was closely connected with the thing he was employed to do &mdash; looking after the children, albeit that molesting them was the polar opposite."
    ],
    "AKA": "Lister",
    "NUMBER": "157",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "In the Course of Employment",
        "Child Abuse",
        "Employers' Liability",
        "Vicarious Liability",
        "Child Abuse"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; In the Course of Employment &mdash; Child Abuse / Employers' Liability &mdash; Vicarious Liability &mdash; Child Abuse",
    "CITATION": "Lister v Hesley Hall [2001] UKHL 22",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Important",
        "EPLR"
    ],
    "YEAR": "2001"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Allen v Hampshire",
        "Maga v Birmingham RC Archdiocese",
        "Radclyffe v MoD",
        "Century Insurance v NI Road Transport",
        "Mohamud v Morrison",
        "Gravil v Redruth",
        "Lister v Hesley Hall",
        "Smith v Stages",
        "JGE v Our Lady of Charity",
        "Cox v Ministry of Justice",
        "Viasystems v Thermal Transfer",
        "Biffa v Maschinenfabrik"
    ],
    "NAME": "Bernard v AG of Jamaica",
    "SUMMARY": [
        "The claimant was using a phone in a post office. An off-duty police officer asked for use of the phone. He refused, so the officer shot him in the head. <span class=\"it\">But he didn&#8217;t die</span>. He awoke in hospital to find the police officer who&#8217;d shot him in the head waiting to arrest <span class=\"bd\">him</span> for assaulting a police officer, and handcuff him to the bed."
    ],
    "HELD": [
        "He&#8217;d identified himself as a police officer, so even though he was off-duty, the court held he&#8217;d acted in the course of employment."
    ],
    "FLAGS": [
        "Amusing"
    ],
    "YEAR": "2004",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "In the Course of Employment",
        "Police"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; In the Course of Employment &mdash; Police",
    "COURT": "UKPC",
    "CITATION": "Bernard v Attorney General of Jamaica [2004] UKPC 47",
    "NUMBER": "158"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Maga v Birmingham RC Archdiocese",
        "Smith v Stages",
        "Mohamud v Morrison",
        "Allen v Hampshire",
        "Bernard v AG of Jamaica",
        "Lister v Hesley Hall",
        "Century Insurance v NI Road Transport",
        "Radclyffe v MoD",
        "Biffa v Maschinenfabrik",
        "Stevenson Jordan v McDonald",
        "Hawley v Luminar",
        "Cox v Ministry of Justice"
    ],
    "NAME": "Gravil v Redruth",
    "SUMMARY": [
        "A scrum, in a match between two semi-professional rugby teams, became a fight, after the whistle had been blown. The claimant was punched. Were the players acting in the course of their employment by the defendant, or off on a frolic of their own?"
    ],
    "HELD": [
        "A certain degree of high-spiritedness is to be expected on the rugby pitch: that a scrum should turn into a brawl is not exactly unforeseeable, therefore the claim in vicarious liability succeeded."
    ],
    "YEAR": "2008",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "In the Course of Employment",
        "Sport"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; In the Course of Employment &mdash; Sport",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Recent"
    ],
    "NUMBER": "159"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Lister v Hesley Hall",
        "Gravil v Redruth",
        "Century Insurance v NI Road Transport",
        "Smith v Stages",
        "Bernard v AG of Jamaica",
        "Allen v Hampshire",
        "Mohamud v Morrison",
        "Maga v Birmingham RC Archdiocese",
        "Viasystems v Thermal Transfer",
        "Stevenson Jordan v McDonald",
        "Cox v Ministry of Justice",
        "Hawley v Luminar"
    ],
    "NAME": "Radclyffe v MoD",
    "SUMMARY": [
        "During a training exercise, the claimant, a junior officer, had his men jump into a lake from a bridge twenty metres up. His senior officer told him it would give the impression of cowardice if he did not follow suit.  The next day, the claimant and some of the soldiers went back to the bridge on their own. The claimant jumped, but hit the water with his legs bent, causing a serious injury that left him paraplegic. He argued that the defendant had negligent giving impression it was allowed. But soldiers off duty. Was J acting in course of employment? Court said that military discipline was present at the lake. Could not make them jump in, but had authority to stop them. So he was acting in the course of employment."
    ],
    "HELD": [
        "Having shown the  the lake,"
    ],
    "FLAGS": [
        "Recent"
    ],
    "YEAR": "2009",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "In the Course of Employment",
        "Soldiers"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; In the Course of Employment &mdash; Soldiers",
    "COURT": "EWCA",
    "CITATION": "Ministry of Defence v Radclyffe [2009] EWCA Civ 635",
    "NUMBER": "160"
},
{
    "TYPE": "Case",
    "RELATED": [
        "JGE v Our Lady of Charity",
        "Lister v Hesley Hall",
        "Various Claimants v Institute of Christian Brothers",
        "Smith v Stages",
        "Allen v Hampshire",
        "Bernard v AG of Jamaica",
        "Gravil v Redruth",
        "Mohamud v Morrison",
        "Century Insurance v NI Road Transport",
        "Radclyffe v MoD",
        "Cox v Ministry of Justice",
        "Biffa v Maschinenfabrik"
    ],
    "NAME": "Maga v Birmingham RC Archdiocese",
    "SUMMARY": [
        "A claim in vicarious liability by a victim of that rarest of creatures, a libidinous Catholic Priest. The claim dated back 30 years."
    ],
    "HELD": [
        "The priest&#8217;s relationship with church is akin to that of employment and there was a sufficiently close relationship between the tort and role of priest.",
        "The claim was allowed for several reasons: <span class=\"bd\">(i)</span> Fr. Clonam normally dressed as priest when abuse occurred; <span class=\"bd\">(ii)</span> There was a special role of trust <span class=\"bd\">(iii)</span> the duty was to evangelise, not rape children. He was ostensibly performing this duty when committing abuse. <span class=\"bd\">(iv)</span> The priest had a specific role of youth work. <span class=\"bd\">(v)</span> Some abuse had occurred on church premises."
    ],
    "AKA": "Maga",
    "YEAR": "2010",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "In the Course of Employment",
        "Catholic Church",
        "Child Abu",
        "Employers' Liability",
        "Vicarious Liability",
        "Child Abuse"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; In the Course of Employment &mdash; Catholic Church &mdash; Child Abu / Employers' Liability &mdash; Vicarious Liability &mdash; Child Abuse",
    "CITATION": "Maga v Birmingham Roman Catholic Archdiocese Trustees [2010] EWCA Civ 256",
    "FLAGS": [
        "Important",
        "EPLR",
        "Recent"
    ],
    "NUMBER": "161"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Bernard v AG of Jamaica",
        "Gravil v Redruth",
        "Smith v Stages",
        "Radclyffe v MoD",
        "Century Insurance v NI Road Transport",
        "Lister v Hesley Hall",
        "Mohamud v Morrison",
        "Maga v Birmingham RC Archdiocese",
        "Ferguson v Dawson",
        "Stevenson Jordan v McDonald",
        "Hawley v Luminar",
        "JGE v Our Lady of Charity"
    ],
    "NAME": "Allen v Hampshire",
    "SUMMARY": [
        "A policeman went nutty and started stalking a fellow officer, the claimant. The nastiness included the usual repertoire of threatening letters, heavy breathing, slashed tyres, ... arson."
    ],
    "HELD": [
        "Although it was not proven on the facts that the harassment had been done by the officer, the court saw it as a private vendetta, a frolic, and not at all in the course of the suspect&#8217;s employment."
    ],
    "YEAR": "2013",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "In the Course of Employment",
        "Police"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; In the Course of Employment &mdash; Police",
    "CITATION": "Allen v Chief Constable of Hampshire [2013] EWCA Civ 967",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Recent"
    ],
    "NUMBER": "162"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Allen v Hampshire",
        "Bernard v AG of Jamaica",
        "Smith v Stages",
        "Lister v Hesley Hall",
        "Maga v Birmingham RC Archdiocese",
        "Radclyffe v MoD",
        "Century Insurance v NI Road Transport",
        "Gravil v Redruth",
        "Viasystems v Thermal Transfer",
        "Various Claimants v Institute of Christian Brothers",
        "Stevenson Jordan v McDonald",
        "Hawley v Luminar"
    ],
    "COMMENT": "There is academic skepticism about this judgment, to put it mildly. Personally I&#8217;m just flabbergasted that someone would go up to the counter in a petrol station and ask for documents on a USB drive to be printed, and that someone talking English would spontaneously say &#8216;we don&#8217;t do <span class=\"it\">such</span> shit,&#8217; to mean &#8216;we don&#8217;t do that kind of thing.&#8217;",
    "NAME": "Mohamud v Morrison",
    "SUMMARY": [
        "The claimant, a Somali chap, went to a petrol station run by the defendant company. He asked an employee &mdash; one Mr. Amjid Khan &mdash; to <span class=\"bd\">print out some documents on a USB drive</span>. At this, Khan grew angry. He replied &#8220;we don&#8217;t do <span class=\"it\">such</span> shit,&#8221; racially abused the claimant, chased him out onto the forecourt, then gave him a bit of a jolly old non-Queensbury thrashing. Was Mr. Khan acting in the  In the course of employment? The EWCA said it wasn&#8217;t, and that &#8216;the employer providing the opportunity to commit a tort does <span class=\"bd\">not</span> mean the tort was necessarily committed in course of employment,&#8217; &mdash; and that allowing the claim would amount to doing so."
    ],
    "HELD": [
        "In the Supreme Court, TODO. His wearing of the uniform had something to do with it."
    ],
    "AKA": "Mohamud",
    "NUMBER": "163",
    "CATEGORIES": [
        "Employers' Liability",
        "Vicarious Liability",
        "In the Course of Employment",
        "Assault"
    ],
    "CATEGORY": "Employers' Liability &mdash; Vicarious Liability &mdash; In the Course of Employment &mdash; Assault",
    "CITATION": "Mohamud v WM Morrison Supermarkets Plc [2016] UKSC 11",
    "COURT": "UKSC",
    "FLAGS": [
        "Key",
        "Leading",
        "Important",
        "EPLR",
        "2015/2016!"
    ],
    "YEAR": "2016"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Public Nuisance",
        "Causation - The Fairchild Exception",
        "Pure Economic Loss",
        "Defamation - Defences II - Privilege",
        "Duty of Care - Public Authorities",
        "Defences to Negligence",
        "Breach of Duty - Standard of Care",
        "Defamation - Remedies",
        "Private Nuisance",
        "The Rule in Rylands v Fletcher",
        "Product Liability",
        "Causation - The But For Test"
    ],
    "NAME": "Occupiers' Liability",
    "CATEGORIES": [
        "Occupiers' Liability"
    ],
    "CATEGORY": "Occupiers' Liability",
    "SUMMARY": [
        "This area is governed by two statutes, the <span class=\"lnk caseln\">OLA 1957</span>, which governs the duties owed by occupiers to <span class=\"bd\">visitors</span>, and the <span class=\"lnk caseln\">OLA 1984</span>, which governs the duties owed by occupiers to <span class=\"bd\">non-visitors</span>.",
        "The previous regime of common law drew distinctions between the occupiers, those who had a <span class=\"it\">right</span> to be on the land, and those with a merely contractual right to be on the land.",
        "<span class=\"bd\">S2(1)</span> of <span class=\"lnk caseln\">OLA 1957</span> provides a <span class=\"bd\">duty owed by occupiers to visitors</span>, no matter the reason for the visitor&#8217;s presence &mdash; to <span class=\"bd\">take reasonable care of the premises</span> to ensure the <span class=\"bd\">visitor</span> is reasonably safe <span class=\"bd\">for the purpose</span> for which he or she is there. This applies to personal injury and property damage cause by the state of the premises.",
        "<span class=\"bd\">Occupier</span> is famously not defined by either act. The case law suggests it is someone who has <span class=\"it\">sufficient control over the land to have the power to ensure its safety</span> &mdash; <span class=\"lnk caseln\">Wheat v Lacon</span>. There can be several at once. The owner is not necessarily the occupier; the occupier is not necessarily the owner.",
        "<span class=\"bd\">Premises</span>, according to S1(3)(a) <span class=\"lnk caseln\">OLA 1957</span>, is: any fixed or moveable structure, vessel, vehicle or aircraft on the land.",
        "<span class=\"bd\">Visitors</span>, from S1 <span class=\"lnk caseln\">OLA 1957</span>, are those with express permission to be there; and who are using the place in the ordinary manner rather than sliding down the bannisters &mdash; <span class=\"lnk caseln\">The Calgarth</span>."
    ],
    "NUMBER": "164"
},
{
    "TYPE": "Reading",
    "RELATED": [
        "Employers' Liability - Reading",
        "Breach of Duty - Reading",
        "Psychiatric Harm - Reading",
        "Nuisance - Reading",
        "Duty of Care - Reading",
        "Remoteness - Reading",
        "Duty of Care - Public Authorities - Reading",
        "Causation - Reading"
    ],
    "NAME": "Occupiers' Liability - Reading",
    "CATEGORIES": [
        "Occupiers' Liability"
    ],
    "CATEGORY": "Occupiers' Liability",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Essential</span></span>",
        "Steele, <span class=\"it\">Tort Law</span>, pp.705-735.",
        "<span class=\"lnk caseln\">Wheat v Lacon</span> &mdash; <span class=\"lnk caseln\">Glasgow v Taylor</span> &mdash; <span class=\"lnk caseln\">Occupiers&#8217; Liability Act 1957</span> &mdash; <span class=\"lnk caseln\">Tedstone v Bourne Leisure</span> &mdash; <span class=\"lnk caseln\">Roles v Nathan</span> &mdash; <span class=\"lnk caseln\">Haseldine v Daw</span> &mdash; <span class=\"lnk caseln\">White v Blackmore</span> &mdash; <span class=\"lnk caseln\">Occupiers&#8217; Liability Act 1984</span> &mdash; <span class=\"lnk caseln\">Tomlinson v Congleton</span>.",
        "<span class=\"ud\"><span class=\"bd\">Additional</span></span>",
        "J. Elvin, <span class=\"it\">Occupiers</span> Liability, Free Will, and the Dangers of a &#8220;Compensation Culture&#8221;<span class=\"it\"> (2004) 8 Edinburgh Law Review 123<br> M. Jones, </span>The Occupiers<span class=\"it\"> Liability Act 1984</span> (1984) 47 MLR 713<br> W. Norris, <span class=\"it\">Duty of Care and Personal Responsibility: Occupiers, Owners, Organisers and Individuals</span> [2008] Journal of Personal Injury Law 187",
        "<span class=\"lnk caseln\">The Calgarth</span> &mdash; <span class=\"lnk caseln\">Harvey v Plymouth</span> &mdash; <span class=\"lnk caseln\">1Jolley v Sutton</span> &mdash; <span class=\"lnk caseln\">Occupiers&#8217; Liability Act 1957</span> &mdash; <span class=\"lnk caseln\">Poppleton v Portsmouth YAC</span> &mdash; <span class=\"lnk caseln\">Hufton v Somerset</span> &mdash; <span class=\"lnk caseln\">Butcher v Southend</span> &mdash; <span class=\"lnk caseln\">West Sussex v Pierce</span> &mdash; <span class=\"lnk caseln\">Phipps v Rochester</span> &mdash; <span class=\"lnk caseln\">Maguire v Sefton</span> &mdash; <span class=\"lnk caseln\">Clark v Bourne Leisure</span> &mdash; <span class=\"lnk caseln\">Donoghue v Folkestone Properties</span> &mdash; <span class=\"lnk caseln\">Keown v Coventry NHS</span> &mdash; <span class=\"lnk caseln\">Platt v Liverpool</span>."
    ],
    "NUMBER": "165"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Phipps v Rochester",
        "Butcher v Southend",
        "The Calgarth",
        "Glasgow v Taylor",
        "Hufton v Somerset",
        "Maguire v Sefton",
        "Poppleton v Portsmouth YAC",
        "Keown v Coventry NHS",
        "Tedstone v Bourne Leisure",
        "White v Blackmore",
        "1Jolley v Sutton",
        "Platt v Liverpool"
    ],
    "NAME": "Wheat v Lacon",
    "SUMMARY": [
        "A publican had rented out rooms to paying guests, the claimant and her husband, who went down some stairs in the <span class=\"it\">private</span> part of the pub... and was found dead at the bottom. The handrail stopped three steps short of the bottom, and the staircase was pitch dark as there was no lightbulb. The claim was against the brewery and the publican."
    ],
    "HELD": [
        "Denning MR defined <span class=\"it\">occupier</span> for the purposes of the <span class=\"lnk caseln\">OLA 1957</span> as someone with sufficient control over the premises that he ought to realise a lack of care on his part might cause damage to lawful visitors. The duty could be shared by several occupiers, who would be jointly and severally liable were the duty of care was not exercised.",
        "Therefore the claim succeeded."
    ],
    "YEAR": "1966",
    "FLAG": "Key; Important; Leading; Denning; EPLR",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Meaning of Occupier"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Meaning of Occupier",
    "COURT": "UKHL",
    "CITATION": "Wheat v Lacon and Co Ltd [1966] UKHL 1 All ER 582",
    "NUMBER": "166"
},
{
    "TYPE": "Case",
    "RELATED": [
        "1Jolley v Sutton",
        "Harvey v Plymouth",
        "Glasgow v Taylor",
        "Butcher v Southend",
        "Maguire v Sefton",
        "Clark v Bourne Leisure",
        "Roles v Nathan",
        "Haseldine v Daw",
        "Phipps v Rochester",
        "Tedstone v Bourne Leisure",
        "Hufton v Somerset",
        "West Sussex v Pierce"
    ],
    "NAME": "The Calgarth",
    "HELD": [
        "Having permission to be on land, but using it in non-permitted ways makes you a non-visitor.",
        "Scrutton LJ &mdash; &#8216;when you invite a person into your house, you don&#8217;t expect them to slide down the bannister, you expect them to go down the stairs.&#8217;"
    ],
    "YEAR": "1927",
    "FLAG": "Important",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors",
        "Meaning of Visitor"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors &mdash; Meaning of Visitor",
    "COURT": "EWCA",
    "CITATION": "The Calgarth [1927] EWCA AC P 93",
    "NUMBER": "167"
},
{
    "TYPE": "Case",
    "RELATED": [
        "The Calgarth",
        "Glasgow v Taylor",
        "1Jolley v Sutton",
        "Haseldine v Daw",
        "Maguire v Sefton",
        "White v Blackmore",
        "Tedstone v Bourne Leisure",
        "Clark v Bourne Leisure",
        "Hufton v Somerset",
        "Poppleton v Portsmouth YAC",
        "Roles v Nathan",
        "Phipps v Rochester"
    ],
    "NAME": "Harvey v Plymouth",
    "SUMMARY": [
        "The claimant ran over council land to escape an angry taxi driver to whom he owed money. The land was habitually used by, e.g., children, drinkers, wastrels, etc. He accidentally fell off the edge of the land into a car park quite a distance below, presumably over a cliff. Seriously injured, he sued claiming the council ought to have put up a <span class=\"it\">fence</span>."
    ],
    "HELD": [
        "In running frantically across the land to <span class=\"it\">escape</span>, the claimant had not used the land for the foreseen purpose of <span class=\"it\">recreation</span>. There was therefore no implied assent from the defendant: following <span class=\"lnk caseln\">The Calgarth</span>, he was not a visitor under <span class=\"lnk caseln\">OLA 1957</span>."
    ],
    "YEAR": "2010",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors",
        "Meaning of Visitor"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors &mdash; Meaning of Visitor",
    "CITATION": "Harvey v Plymouth City Council [2010] EWCA 860",
    "COURT": "EWCA",
    "FLAGS": [
        "Amusing",
        "Recent"
    ],
    "NUMBER": "168"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Phipps v Rochester",
        "1Jolley v Sutton",
        "The Calgarth",
        "Harvey v Plymouth",
        "West Sussex v Pierce",
        "Platt v Liverpool",
        "White v Blackmore",
        "Roles v Nathan",
        "Maguire v Sefton",
        "Keown v Coventry NHS",
        "Haseldine v Daw",
        "Clark v Bourne Leisure"
    ],
    "NAME": "Glasgow v Taylor",
    "SUMMARY": [
        "A child had died having eaten poisonous berries in a public park. The landowner argued there was was no express or implied permission to do as the boy had done, and as such a non-visitor."
    ],
    "HELD": [
        "An occupier <span class=\"it\">can</span> be expected to protect against hidden dangers that may be <span class=\"it\">alluring</span> to children, albeit that there is no requirement to protect against obvious dangers arising from natural features.",
        "The shrub was not fenced off and there was no warning sign &mdash; the claim succeeded."
    ],
    "YEAR": "1922",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors",
        "Meaning of Visitor",
        "Allurement",
        "Children"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors &mdash; Meaning of Visitor &mdash; Allurement &mdash; Children",
    "CITATION": "Glasgow Corporation v Taylor [1922] UKHL 1 AC 44",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Development",
        "EPLR",
        "Children"
    ],
    "NUMBER": "169"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Glasgow v Taylor",
        "The Calgarth",
        "Phipps v Rochester",
        "Harvey v Plymouth",
        "White v Blackmore",
        "Butcher v Southend",
        "West Sussex v Pierce",
        "Haseldine v Daw",
        "Poppleton v Portsmouth YAC",
        "Roles v Nathan",
        "Tedstone v Bourne Leisure",
        "Platt v Liverpool"
    ],
    "NAME": "1Jolley v Sutton",
    "SUMMARY": [
        "The boys who found and attempted to do-up a decrepit boat left abandoned on council land. Also discussed in <span class=\"it\">remoteness</span> &mdash; <span class=\"lnk caseln\">Jolley v Sutton</span>."
    ],
    "HELD": [
        "It was conceded that the claimant was a visitor, even though there was no question if implied or express permission.",
        "Steyn LJ: the boat was certainly an allurement, to a child of 14."
    ],
    "YEAR": "2000",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors",
        "Meaning of Visitor",
        "Allurement"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors &mdash; Meaning of Visitor &mdash; Allurement",
    "COURT": "UKHL",
    "CITATION": "Jolley v Sutton LBC [2000] 3 All ER 409",
    "NUMBER": "170"
},
{
    "TYPE": "Statute",
    "RELATED": [
        "Occupiers' Liability Act 1984",
        "Defamation Act 2013",
        "Consumer Protection Act 1987",
        "Compensation Act 2006",
        "Unfair Contract Terms Act 1977",
        "Defamation Act 1996",
        "Law Reform (Contributory Negligence) Act 1945",
        "Road Traffic Act 1988"
    ],
    "NAME": "Occupiers' Liability Act 1957",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">S2 &mdash; Extent of occupier&#8217;s ordinary duty</span></span>",
        "<ol><li><span class=\"nl\">&#8216;An occupier of premises owes the same duty, the <span class=\"bd\">&#8220;common duty of care&#8221;</span>, to <span class=\"bd\">all his visitors</span>, except in so far as he is free to and does extend, restrict, modify or exclude his duty to any visitor or visitors by agreement or otherwise.&#8217; [I.e., the duty can be abrogated.]</span></li><li><span class=\"nl\">&#8216;The common duty of care is a duty to take such care as in all the circumstances of the case is reasonable to see that the visitor will be reasonably safe in using the premises for the purposes for which he is invited or permitted by the occupier to be there.&#8217;</span><ol><li><span class=\"nl\">An occupier must be prepared for <span class=\"bd\">children to be less careful</span> than adults. <span class=\"lnk caseln\">1Jolley v Sutton</span>, <span class=\"lnk caseln\">Glasgow v Taylor</span>.</span><ul><li><span class=\"nl\">There are however limits to the mollycoddling expected. <span class=\"lnk caseln\">West Sussex v Pierce</span>.</span></li><li><span class=\"nl\">And an expectation that young children, however, will not be allowed to roam free and feral by their parents. <span class=\"lnk caseln\">Phipps v Rochester</span></span></li></ul><li><span class=\"nl\">Visitors with <span class=\"bd\">special expertise</span> will be expected to guard against any risks <span class=\"bd\">ordinarily incident</span> to it. <span class=\"lnk caseln\">Roles v Nathan</span>.</span></li><li><span class=\"nl\">If the occupier <span class=\"bd\">subcontracts maintenance</span>, then if reasonable care was taken in <span class=\"bd\">selection, supervision and checking</span> of work, they usually avoid liability &mdash; <span class=\"lnk caseln\">Haseldine v Daw</span>, <span class=\"lnk caseln\">Maguire v Sefton</span>.</span></li><li><span class=\"nl\">This duty may be disclaimed successfully by use of warning signs <span class=\"lnk caseln\">White v Blackmore</span>. Note that <span class=\"lnk caseln\">SARAH 2015</span> and <span class=\"lnk caseln\">UCTA 1977</span> preclude certain exclusions in commercial circs.</span></li></ol></ol>",
        "<span class=\"ud\"><span class=\"bd\">Defences</span></span>",
        "<ul><li><span class=\"nl\">Other than for <span class=\"bd\">S2(4)(a)</span>, <span class=\"lnk caseln\">Consent</span> can apply &mdash; <span class=\"bd\">S2(5)</span>, as can <span class=\"bd\">contributory negligence</span> &mdash; <span class=\"bd\">S2(3)</span>.</span></li><li><span class=\"nl\">The principles of <span class=\"lnk caseln\">Remoteness</span> and <span class=\"lnk caseln\">Causation &mdash; Reading</span> applying here are the same as those in negligence.</span></li></ul>"
    ],
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/Eliz2/5-6/31/contents"
    ],
    "AKA": "OLA 1957",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Statute"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Statute",
    "WIKILINK": [
        "https://en.wikipedia.org/wiki/Occupiers%27_Liability_Act_1957"
    ],
    "FLAGS": [
        "EPLR"
    ],
    "NUMBER": "171"
},
{
    "TYPE": "Case",
    "RELATED": [
        "White v Blackmore",
        "Hufton v Somerset",
        "Roles v Nathan",
        "Glasgow v Taylor",
        "Haseldine v Daw",
        "Phipps v Rochester",
        "The Calgarth",
        "1Jolley v Sutton",
        "Harvey v Plymouth",
        "Butcher v Southend",
        "West Sussex v Pierce",
        "Clark v Bourne Leisure"
    ],
    "NAME": "Tedstone v Bourne Leisure",
    "SUMMARY": [
        "The claimant slipped on a flaque of water by a jacuzzi, which hadn&#8217;t been there for more than five minutes."
    ],
    "HELD": [
        "It wasn&#8217;t unexpected to find spillages of water in the vicinity of a Jacuzzi, and there could be no reasonable system by which an occupier could have got rid of the water so quickly &mdash; followed <span class=\"lnk caseln\">Pollard v Tesco</span> [1976], the slippage on spilt yoghurt.",
        "The claimant failed to demonstrate reasonable care was not taken."
    ],
    "YEAR": "2008",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors",
    "CITATION": "Tedstone v Bourne Leisure Ltd [2008] EWCA Civ 654",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Leading",
        "Amusing",
        "EPLR",
        "Trying it on",
        "Recent"
    ],
    "NUMBER": "172"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Tedstone v Bourne Leisure",
        "Glasgow v Taylor",
        "Maguire v Sefton",
        "The Calgarth",
        "Roles v Nathan",
        "Phipps v Rochester",
        "1Jolley v Sutton",
        "Butcher v Southend",
        "Harvey v Plymouth",
        "West Sussex v Pierce",
        "White v Blackmore",
        "Hufton v Somerset"
    ],
    "NAME": "Poppleton v Portsmouth YAC",
    "SUMMARY": [
        "The claimant was injured when he jumped from an indoor climbing wall. He&#8217;d seen others do it, and so had the defendant. At first instance his claim succeeded, albeit with reduced damages for contributory negligence."
    ],
    "HELD": [
        "The claimant had taken an <span class=\"it\">obvious risk</span>, and the law did not require occupiers to warn of obvious risks."
    ],
    "YEAR": "2008",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors",
    "CITATION": "Poppleton v Trustees of the Portsmouth Youth Activities Committee [2008] EWCA Civ 646",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Important",
        "Recent"
    ],
    "NUMBER": "173"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Harvey v Plymouth",
        "The Calgarth",
        "West Sussex v Pierce",
        "Clark v Bourne Leisure",
        "Butcher v Southend",
        "1Jolley v Sutton",
        "Glasgow v Taylor",
        "White v Blackmore",
        "Roles v Nathan",
        "Phipps v Rochester",
        "Maguire v Sefton",
        "Poppleton v Portsmouth YAC"
    ],
    "COMMENT": "We now live in a country in which schools put out those ghastly yellow <span class=\"it\">Caution: Wet Floor</span> signs when it&#8217;s raining. We live in truly benighted times.",
    "NAME": "Hufton v Somerset",
    "SUMMARY": [
        "The claimant, a 15-year old girl, slipped over at school and injured herself. It was raining outside. She claimed the school was negligent in allowing children to go on a wet floor before the <span class=\"it\">Caution: Wet Floor</span> signs had been put in place."
    ],
    "HELD": [
        "The school had an appropriate system in place, and it would not be reasonable to expect a school in <span class=\"it\">England</span> to have dry floors all the time."
    ],
    "FLAGS": [
        "Recent"
    ],
    "YEAR": "2011",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors",
    "COURT": "EWCA",
    "CITATION": "Hufton v Somerset CC [2011] EWCA Civ 789",
    "NUMBER": "174"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Clark v Bourne Leisure",
        "Glasgow v Taylor",
        "Roles v Nathan",
        "1Jolley v Sutton",
        "Tedstone v Bourne Leisure",
        "Phipps v Rochester",
        "Maguire v Sefton",
        "Hufton v Somerset",
        "Poppleton v Portsmouth YAC",
        "West Sussex v Pierce",
        "Harvey v Plymouth",
        "Haseldine v Daw"
    ],
    "NAME": "Butcher v Southend",
    "SUMMARY": [
        "The claimant had been walking along a tarmac path in the height of summer. The heat had meant the earth had shrunk a few inches from the edges, and. Not paying attention, they lost their footing, fell and was injured. The claim succeeded at first instance, but damages reduced for 50% contributory negligence."
    ],
    "HELD": [
        "As the hazard had not arisen suddenly but was plain to see and had been present for some time; the risk of injury was foreseeable; and repair straightforward to achieve, the claim succeeded.",
        "To be contrasted with situations in which the, such as <span class=\"lnk caseln\">Tedstone v Bourne Leisure</span>, the hazard arises suddenly."
    ],
    "FLAGS": [
        "Recent"
    ],
    "YEAR": "2014",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors",
    "COURT": "EWCA",
    "CITATION": "Butcher v Southend-on-Sea BC [2014] EWCA Civ 1556",
    "NUMBER": "175"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Glasgow v Taylor",
        "Phipps v Rochester",
        "1Jolley v Sutton",
        "Clark v Bourne Leisure",
        "Poppleton v Portsmouth YAC",
        "Maguire v Sefton",
        "Tedstone v Bourne Leisure",
        "Butcher v Southend",
        "Harvey v Plymouth",
        "Roles v Nathan",
        "The Calgarth",
        "Platt v Liverpool"
    ],
    "NAME": "West Sussex v Pierce",
    "SUMMARY": [
        "The nine-year-old claimant was injured by <span class=\"it\">punching a water fountain</span>. You read that right. This was during <span class=\"it\">horseplay</span>. His brother had been trying to spray him with water, but moved as the claimant threw a punch, which connected with the water fountain.",
        "The claim, then, was that the water fountain was dangerous, with an extremely sharp bit on the underside."
    ],
    "HELD": [
        "Punching a metal object does not make that object, per se, dangerous. Per Sharpe LJ &mdash; the problem wasn&#8217;t the water fountain; the problem was the <span class=\"it\">boy</span>.",
        "Sharpe LJ &mdash; &#8220;The question which has to be addressed... is whether as a matter of objective fact, visitors to the School were reasonably safe in using the premises, including for this purpose, the water fountain, bearing in mind of course that children do not behave like adults, and are inclined to lark around.&#8221;"
    ],
    "YEAR": "2013",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors",
        "Children"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors &mdash; Children",
    "CITATION": "West Sussex CC v Master Lewis Pierce [2013] EWCA Civ 1230",
    "COURT": "EWCA",
    "FLAGS": [
        "Leading",
        "Amusing",
        "Trying it on",
        "Recent"
    ],
    "NUMBER": "176"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Glasgow v Taylor",
        "Platt v Liverpool",
        "West Sussex v Pierce",
        "1Jolley v Sutton",
        "Clark v Bourne Leisure",
        "Haseldine v Daw",
        "Keown v Coventry NHS",
        "Maguire v Sefton",
        "Poppleton v Portsmouth YAC",
        "Roles v Nathan",
        "White v Blackmore",
        "Butcher v Southend"
    ],
    "NAME": "Phipps v Rochester",
    "SUMMARY": [
        "The claimant, a five-year-old, was out looking for blackberries. Happened into a building site owned by the claimant and <span class=\"it\">fell into a ditch</span>. The claim was that the occupier had failed to take care, and that there was a foreseeable risk that children would be attracted onto the land."
    ],
    "HELD": [
        "With younger children, the occupier is entitled to assume <span class=\"bd\">the parents won&#8217;t let the children wonder off on their own</span>. But for older children, this was not to be expected."
    ],
    "YEAR": "1955",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors",
        "Children",
        "Allurement"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors &mdash; Children &mdash; Allurement",
    "CITATION": "Phipps v Rochester Corporation [1955] EWHC 1 QB 450",
    "COURT": "EWHC",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "177"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Poppleton v Portsmouth YAC",
        "Harvey v Plymouth",
        "Maguire v Sefton",
        "Haseldine v Daw",
        "1Jolley v Sutton",
        "Butcher v Southend",
        "Glasgow v Taylor",
        "Phipps v Rochester",
        "West Sussex v Pierce",
        "White v Blackmore",
        "Tedstone v Bourne Leisure",
        "Hufton v Somerset"
    ],
    "NAME": "Roles v Nathan",
    "SUMMARY": [
        "Two chimney sweeps were called to the Manchester assembly rooms to seal a hole in a chimney. This they tried to do while the fire was burning. The caretaker &mdash; who&#8217;d already warned them not to &mdash; dragged them out. They waited until he&#8217;d gone, then went back in, and both succumbed to carbon monoxide poisoning. The widow sued."
    ],
    "HELD": [
        "There was no breach of duty &mdash; a chimney sweep ought to be aware of the dangers of sweeping chimneys, even if manifestly they do <span class=\"it\">not</span>."
    ],
    "YEAR": "1963",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors",
        "Special Skills"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors &mdash; Special Skills",
    "CITATION": "Roles v Nathan [1963] EWCA 2 All ER 908",
    "COURT": "EWCA",
    "FLAGS": [
        "Leading",
        "Important",
        "Denning",
        "EPLR"
    ],
    "NUMBER": "178"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Maguire v Sefton",
        "West Sussex v Pierce",
        "Hufton v Somerset",
        "Poppleton v Portsmouth YAC",
        "Glasgow v Taylor",
        "1Jolley v Sutton",
        "White v Blackmore",
        "Phipps v Rochester",
        "Roles v Nathan",
        "Butcher v Southend",
        "Clark v Bourne Leisure",
        "The Calgarth"
    ],
    "NAME": "Haseldine v Daw",
    "SUMMARY": [
        "The defendant, the owner of a block of flats, hired a firm with a reasonable reputation to maintain the lift. But they did so negligently, and, nightmarishly, the lift with the claimant inside, fell to the bottom of the lift shaft."
    ],
    "HELD": [
        "The occupier had fulfilled his duty of ensuring the lift was safe by employing reputable contractors, and it was unreasonable to expect them to check the work carried out in detail, for wont of expert knowledge."
    ],
    "YEAR": "1941",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors",
        "Subcontracting of Maintenance"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors &mdash; Subcontracting of Maintenance",
    "CITATION": "Haseldine v Daw [1941] EWCA 2 KB 343",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Leading",
        "EPLR"
    ],
    "NUMBER": "179"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Haseldine v Daw",
        "The Calgarth",
        "Tedstone v Bourne Leisure",
        "1Jolley v Sutton",
        "Glasgow v Taylor",
        "White v Blackmore",
        "Hufton v Somerset",
        "Roles v Nathan",
        "Clark v Bourne Leisure",
        "Harvey v Plymouth",
        "Poppleton v Portsmouth YAC",
        "Butcher v Southend"
    ],
    "NAME": "Maguire v Sefton",
    "SUMMARY": [
        "The claimant was injured by an incompetently or negligently-maintained piece of equipent at a gym owned by the defendant, the maintenance of which had been subcontracted out."
    ],
    "HELD": [
        "The defendant was entitled to assume a company purporting to be expert in maintaining equipment were indeed expert &mdash; the claim was denied."
    ],
    "FLAGS": [
        "Leading"
    ],
    "YEAR": "2006",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors",
        "Subcontracting of Maintenance",
        "Public Authority"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors &mdash; Subcontracting of Maintenance &mdash; Public Authority",
    "COURT": "EWCA",
    "CITATION": "Maguire v Sefton MBC [2006] EWCA Civ 316",
    "NUMBER": "180"
},
{
    "TYPE": "Case",
    "RELATED": [
        "West Sussex v Pierce",
        "Phipps v Rochester",
        "Tedstone v Bourne Leisure",
        "Harvey v Plymouth",
        "1Jolley v Sutton",
        "The Calgarth",
        "Butcher v Southend",
        "Poppleton v Portsmouth YAC",
        "Clark v Bourne Leisure",
        "Haseldine v Daw",
        "Hufton v Somerset",
        "Roles v Nathan"
    ],
    "NAME": "White v Blackmore",
    "CITATION": "White v Blackmore [1972] EWCA 3 All ER 158",
    "HELD": [
        "Denning MR &mdash; to be relevant, a warning has to be useful, and a genuine attempt to avoid the danger. E.g., a warning on a rotten bridge saying &#8216;this bridge is dangerous,&#8217; if it were the only way to get to the other side, would not avoid the liability. If there were an alternative bridge that was sound, however, it would."
    ],
    "YEAR": "1972",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors",
        "Warning signs"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors &mdash; Warning signs",
    "COURT": "EWCA",
    "FLAGS": [
        "Leading",
        "Key",
        "Denning",
        "EPLR"
    ],
    "NUMBER": "181"
},
{
    "TYPE": "Case",
    "RELATED": [
        "White v Blackmore",
        "Glasgow v Taylor",
        "Harvey v Plymouth",
        "Butcher v Southend",
        "The Calgarth",
        "1Jolley v Sutton",
        "Maguire v Sefton",
        "Phipps v Rochester",
        "Poppleton v Portsmouth YAC",
        "Haseldine v Daw",
        "Tedstone v Bourne Leisure",
        "Roles v Nathan"
    ],
    "COMMENT": "Cite the ratio of this case, and <span class=\"lnk caseln\">White v Blackmore</span>, the next time you hear someone say <span class=\"it\">&#8220;it&#8217;s &#8216;elf and safety gawn mad.&#8221;</span>",
    "NAME": "Clark v Bourne Leisure",
    "SUMMARY": [
        "The claimant, a wheelchair user, was in a bar on two levels connected by some steps, and also a ramp, for wheelchair users. <span class=\"it\">He used the steps</span>, and was injured. He sued on the basis that there ought to have been a warning sign."
    ],
    "HELD": [
        "There was no need for a warning sign when the danger was obvious, and an obvious alternative existed."
    ],
    "NUMBER": "182",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Visitors",
        "Stupidity"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Visitors &mdash; Stupidity",
    "CITATION": "Clark v Bourne Leisure Limited [2011] EWCA Civ 753",
    "COURT": "EWCA",
    "FLAGS": [
        "Leading",
        "Amusing",
        "Trying it on",
        "Recent"
    ],
    "YEAR": "2011"
},
{
    "TYPE": "Statute",
    "RELATED": [
        "Occupiers' Liability Act 1957",
        "Defamation Act 2013",
        "Unfair Contract Terms Act 1977",
        "Consumer Protection Act 1987",
        "Defamation Act 1996",
        "Compensation Act 2006",
        "Law Reform (Contributory Negligence) Act 1945",
        "Road Traffic Act 1988"
    ],
    "NAME": "Occupiers' Liability Act 1984",
    "SUMMARY": [
        "This extends a duty of care for personal injury (<span class=\"bd\">but not property damage</span>) to non-visitors if the non-visitor can prove:",
        "<span class=\"bd\">S1(3)</span> (i) The occupier was aware of the danger or had reasonable to grounds to believe that it existed; (ii) had reasonable grounds to believe the non-visitor would be in the vicinity of the danger, or may come into the vicinity of the danger; and (iii) the risk is one against which, in all the circumstances, the occupier might be expected to offer the non-visitor some protection.",
        "The key case is <span class=\"lnk caseln\">Tomlinson v Congleton</span>. Presumably, the courts will find more care must be taken of children, but <span class=\"lnk caseln\">Keown v Coventry NHS</span> and <span class=\"lnk caseln\">Platt v Liverpool</span> suggest there will be less generosity towards non-visitors.",
        "<span class=\"ud\"><span class=\"bd\">Defences</span></span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\">Consent</span> S1(6), <span class=\"bd\">contributory negligence</span> &mdash; not explicitly mentioned. The situation about <span class=\"bd\">when a notice will exclude liability</span> under the &#8216;84 act is <span class=\"bd\">still unclear</span>.</span></li></ul>"
    ],
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/1984/3"
    ],
    "AKA": "OLA 1984",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Statute"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Statute",
    "WIKILINK": [
        "https://en.wikipedia.org/wiki/Occupiers%27_Liability_Act_1984"
    ],
    "FLAGS": [
        "EPLR"
    ],
    "NUMBER": "183"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Donoghue v Folkestone Properties",
        "Keown v Coventry NHS",
        "Platt v Liverpool",
        "Phipps v Rochester",
        "Hufton v Somerset",
        "Watt v Hertfordshire",
        "Haseldine v Daw",
        "White v Blackmore",
        "The Calgarth",
        "Tedstone v Bourne Leisure",
        "1Jolley v Sutton",
        "Wheat v Lacon"
    ],
    "NAME": "Tomlinson v Congleton",
    "SUMMARY": [
        "On a hot summer&#8217;s day, the claimant dived headfirst into a shallow lake in a park on the defendant&#8217;s property. This was despite notices forbidding swimming. He sued as a non-visitor, claiming he should have been prevented, by, e.g., water plants around the edge to stop people swimming, as the lake was <span class=\"it\">irresistible</span> to people such as he."
    ],
    "HELD": [
        "On appeal to the lords, the claim failed. There was no problem with the state of the premises: the lake was not dangerous per se, only the claimant&#8217;s <span class=\"it\">use</span> of the lake."
    ],
    "YEAR": "2003",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Non-visitors",
        "Local Authorities"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Non-visitors &mdash; Local Authorities",
    "CITATION": "Tomlinson v Congleton BC [2003] UKHL 47",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Leading",
        "EPLR"
    ],
    "NUMBER": "184"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Keown v Coventry NHS",
        "Tomlinson v Congleton",
        "Platt v Liverpool",
        "Butcher v Southend",
        "Roles v Nathan",
        "Hufton v Somerset",
        "Glasgow v Taylor",
        "White v Blackmore",
        "West Sussex v Pierce",
        "Poppleton v Portsmouth YAC",
        "1Jolley v Sutton",
        "Maguire v Sefton"
    ],
    "NAME": "Donoghue v Folkestone Properties",
    "SUMMARY": [
        "The claimant jumped into the harbour, and was injured by a thing in the water, about which he claimed the occupier should have warned. In <span class=\"it\">December</span>."
    ],
    "HELD": [
        "On the third limb of the test for duty to non-visitors in the <span class=\"lnk caseln\">OLA 1984</span>, the claim failed, as it would not be reasonable to believe people would jump into the sea in the middle of winter in England."
    ],
    "YEAR": "2003",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Non-visitors"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Non-visitors",
    "CITATION": "Donoghue v Folkestone Properties [2003] EWCA Civ 231",
    "COURT": "EWCA",
    "FLAGS": [
        "Leading"
    ],
    "NUMBER": "185"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Platt v Liverpool",
        "Glasgow v Taylor",
        "Donoghue v Folkestone Properties",
        "Phipps v Rochester",
        "West Sussex v Pierce",
        "Tomlinson v Congleton",
        "X v Bedfordshire",
        "Osman v UK",
        "Mullin v Richards",
        "Maguire v Sefton",
        "JD v East Berkshire NHS",
        "Gough v Thorne"
    ],
    "NAME": "Keown v Coventry NHS",
    "SUMMARY": [
        "A child had climbed up the outside of a fire-escape, fell, and was injured. He sued under the <span class=\"lnk caseln\">OLA 1984</span> on the basis that as a non-visitor, the danger was (i) known by the occupier, (ii) it was reasonable to believe the claimant would be in the vicinity, as the fire-escape gave onto ground the public had access to, and (iii) the the risk was such that precautions ought to have been taken."
    ],
    "HELD": [
        "Following <span class=\"lnk caseln\">Tomlinson v Congleton</span>, the problem was not the fire-escape, but the claimant&#8217;s way of <span class=\"it\">using</span> the fire-escape, by using it as a climbing frame."
    ],
    "YEAR": "2006",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Non-visitors",
        "Children"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Non-visitors &mdash; Children",
    "CITATION": "Keown v Coventry Healthcare NHS Trust [2006] EWCA Civ 39",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Trying it on"
    ],
    "NUMBER": "186"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Keown v Coventry NHS",
        "Glasgow v Taylor",
        "Phipps v Rochester",
        "West Sussex v Pierce",
        "Donoghue v Folkestone Properties",
        "1Jolley v Sutton",
        "Tomlinson v Congleton",
        "Jolley v Sutton",
        "Harvey v Plymouth",
        "Scout Association v Barnes",
        "Poppleton v Portsmouth YAC",
        "MAK and RK v UK"
    ],
    "NAME": "Platt v Liverpool",
    "SUMMARY": [
        "The claimant, a child, had got into a derelict property that was about to be demolished. The defendant had put up an 8ft corrugated iron fence attached to posts in concrete, but the claimant got under, through an 8&#8221; gap. Then he was killed by the property collapsing."
    ],
    "HELD": [
        "The defendant had taken reasonable steps in surrounding the dangerous but alluring building with an iron fence, so the claim failed on appeal."
    ],
    "YEAR": "1997",
    "CATEGORIES": [
        "Occupiers' Liability",
        "Duty to Non-visitors",
        "Children",
        "Allurement"
    ],
    "CATEGORY": "Occupiers' Liability &mdash; Duty to Non-visitors &mdash; Children &mdash; Allurement",
    "COURT": "EWCA",
    "CITATION": "Platt v Liverpool City Council [1997] WL 1103745",
    "NUMBER": "187"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Vicarious Liability",
        "Public Nuisance",
        "Foreseeability",
        "Pure Economic Loss",
        "Occupiers' Liability",
        "Psychiatric Harm",
        "Causation - The But For Test",
        "Causation - The Fairchild Exception",
        "The Rule in Rylands v Fletcher",
        "Private Nuisance",
        "Defamation - Defences II - Privilege",
        "Duty of Care - Public Authorities"
    ],
    "NAME": "Product Liability",
    "CATEGORIES": [
        "Product Liability",
        "Principles"
    ],
    "CATEGORY": "Product Liability &mdash; Principles",
    "SUMMARY": [
        "There is generally <span class=\"bd\">no liability</span> in tort for a product that <span class=\"bd\">simply doesn&#8217;t work</span>. Pure economic loss is <span class=\"it\">not</span> something tort law is keen on remedying &mdash; that is for contract. Note Lord Atkin&#8217;s speech in <span class=\"lnk caseln\">Donoghue</span> referring to <span class=\"bd\">physical injury</span> or <span class=\"bd\">damage to property</span>.",
        "The leading case on product liability of local authorities for pure economic loss is <span class=\"lnk caseln\">Murphy v Brentwood</span>, which formally overruled <span class=\"lnk caseln\">Anns v Merton</span>.",
        "Product liability aims to provide remedy in situations where a product bought or used by someone has caused damage to person or property.",
        "The common law principle that the manufacturer of a product owes a duty of care was established, of course, by <span class=\"lnk caseln\">Donoghue v Stevenson</span>, but who counts a s consumer has broadened out since then &mdash; <span class=\"lnk caseln\">Stennett v Hancock</span>.",
        "The burden for proving negligence of manufacture is with the <span class=\"it\">claimant</span> &mdash; <span class=\"lnk caseln\">Evans v Triplex</span>. But sometimes the <span class=\"it\">res ipsa loquitur</span>."
    ],
    "NUMBER": "188"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Grant v Aus. Knitting Mills",
        "Piper v JRI",
        "Dutton v Bognor Regis",
        "Vacwell Engineering v BDH",
        "Pollard v Tesco",
        "Junior Books v Vietchi",
        "Evans v Triplex Safety Glass",
        "D&F Estates v CoE",
        "Murphy v Brentwood",
        "A v National Blood Authority",
        "Abouzaid v Mothercare",
        "Bogle v McDonald's"
    ],
    "NAME": "Product Liability - Reading",
    "CATEGORIES": [
        "Product Liability"
    ],
    "CATEGORY": "Product Liability",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Essential</span></span>",
        "Steele, <span class=\"it\">Tort Law</span>, Ch 15, pp.347-358.",
        "<span class=\"lnk caseln\">Donoghue v Stevenson</span> &mdash; <span class=\"lnk caseln\">Grant v Aus. Knitting Mills</span> &mdash; <span class=\"lnk caseln\">Murphy v Brentwood</span> &mdash; <span class=\"lnk caseln\">Consumer Protection Act 1987</span> &mdash; <span class=\"lnk caseln\">A v National Blood Authority</span> &mdash; <span class=\"lnk caseln\">Bogle v McDonald&#8217;s</span> &mdash; <span class=\"lnk caseln\">Pollard v Tesco</span>.",
        "<span class=\"ud\"><span class=\"bd\">Additional</span></span>",
        "D. Fairgrieve and G. Howells, <span class=\"it\">Rethinking Product Liability: A Missing Element in the European Commission</span>s Third Review of the Product Liability Directive<span class=\"it\"> (2007) 70 MLR 962<br> M. Mildred and G. Howells, </span>Comment on \u201cDevelopment Risks: Unanswered Questions\u201d<span class=\"it\"> (1998) 61 MLR 570<br> M. Mildred, </span>Pitfalls in Product Liability<span class=\"it\"> [2007] Journal of Personal Injury Law 141<br> P. Shears, </span>The EU Product Liability Directive: Twenty Years On_ [2007] Journal of Business Law 884",
        "<span class=\"lnk caseln\">Stennett v Hancock</span> &mdash; <span class=\"lnk caseln\">Evans v Triplex Safety Glass</span> &mdash; <span class=\"lnk caseln\">Vacwell Engineering v BDH</span> &mdash; <span class=\"lnk caseln\">Dutton v Bognor Regis</span> &mdash; <span class=\"lnk caseln\">Junior Books v Vietchi</span> &mdash; <span class=\"lnk caseln\">D&amp;F Estates v CoE </span> &mdash; <span class=\"lnk caseln\">Murphy v Brentwood</span> &mdash; <span class=\"lnk caseln\">Aswan Engineering v Lupdine</span> &mdash; <span class=\"lnk caseln\">Consumer Protection Act 1987</span> &mdash; <span class=\"lnk caseln\">Worsley v Tambrands</span> &mdash; <span class=\"lnk caseln\">Richardson v LRC Products</span> &mdash; <span class=\"lnk caseln\">Abouzaid v Mothercare</span> &mdash; <span class=\"lnk caseln\">A v National Blood Authority</span> &mdash; <span class=\"lnk caseln\">Bogle v McDonald&#8217;s</span> &mdash; <span class=\"lnk caseln\">Pollard v Tesco</span> &mdash; <span class=\"lnk caseln\">Piper v JRI</span>."
    ],
    "NUMBER": "189"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Piper v JRI",
        "Commission v UK C-300/95 [1997]",
        "Bogle v McDonald's",
        "Abouzaid v Mothercare",
        "Pollard v Tesco",
        "Richardson v LRC Products",
        "Vacwell Engineering v BDH",
        "Junior Books v Vietchi",
        "Aswan Engineering v Lupdine",
        "Worsley v Tambrands",
        "Product Liability - Reading",
        "Evans v Triplex Safety Glass"
    ],
    "NAME": "Stennett v Hancock",
    "SUMMARY": [
        "The claimant was a member of the public, struck by a wheel which came off a lorry, following negligent repair by the defendant."
    ],
    "HELD": [
        "Manufacturers and repairers could potentially owe a duty of care not just to <span class=\"it\">consumers</span>, but under an extension of the <span class=\"lnk caseln\">Donoghue</span> principle, to anyone who could be <span class=\"it\">affected</span> by the product.HELD The owners of the lorry weren&#8217;t to blame, as they&#8217;d taken reasonable care in preparing it, having had it maintained by people whose competence could reasonably be assumed. See also <span class=\"lnk caseln\">Haseldine v Daw</span>."
    ],
    "YEAR": "1939",
    "CATEGORIES": [
        "Product Liability"
    ],
    "CATEGORY": "Product Liability",
    "CITATION": "Stennett v Hancock [1939] EWHC 2 All ER 578",
    "COURT": "EWHC",
    "FLAGS": [
        "Important",
        "Development",
        "Criticised"
    ],
    "NUMBER": "190"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Grant v Aus. Knitting Mills",
        "Vacwell Engineering v BDH",
        "A v National Blood Authority",
        "Dutton v Bognor Regis",
        "Stennett v Hancock",
        "D&F Estates v CoE",
        "Worsley v Tambrands",
        "Junior Books v Vietchi",
        "Pollard v Tesco",
        "Piper v JRI",
        "Abouzaid v Mothercare",
        "Richardson v LRC Products"
    ],
    "NAME": "Evans v Triplex Safety Glass",
    "SUMMARY": [
        "A windscreen manufactured by the defendant suddenly shattered and injured the claimants, who were in the car."
    ],
    "HELD": [
        "The burden of proof for proving negligence in manufacture lies with the claimant, but the court may be quick to infer negligence.",
        "The claim failed on the facts, as it could easily have been, e.g., the negligence of the fitter."
    ],
    "AKA": "Evans v Triplex",
    "NUMBER": "191",
    "CATEGORIES": [
        "Product Liability",
        "Proving Manufacturer's Negligence"
    ],
    "CATEGORY": "Product Liability &mdash; Proving Manufacturer's Negligence",
    "CITATION": "Evans v Triplex Safety Glass [1936] EWHC 1 All ER 283",
    "COURT": "EWHC",
    "FLAGS": [
        "Important"
    ],
    "YEAR": "1936"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Evans v Triplex Safety Glass",
        "Stennett v Hancock",
        "Piper v JRI",
        "Vacwell Engineering v BDH",
        "Pollard v Tesco",
        "Bogle v McDonald's",
        "Murphy v Brentwood",
        "Junior Books v Vietchi",
        "Abouzaid v Mothercare",
        "Dutton v Bognor Regis",
        "D&F Estates v CoE",
        "A v National Blood Authority"
    ],
    "NAME": "Grant v Aus. Knitting Mills",
    "SUMMARY": [
        "The claimant brought a pair of long-johns, and wore them for <span class=\"it\">a whole week before washing them</span>. This left him with dermatitis, and because, he claimed, of the presence of excess sulphite."
    ],
    "HELD": [
        "Although the claimant had contributed to his condition by wearing the garment for a <span class=\"it\">week</span>, the claim succeeded."
    ],
    "YEAR": "1936",
    "CATEGORIES": [
        "Product Liability",
        "Proving Manufacturer's Negligence"
    ],
    "CATEGORY": "Product Liability &mdash; Proving Manufacturer's Negligence",
    "CITATION": "Grant v Australian Knitting Mills [1936] UKPC AC 85",
    "COURT": "UKPC",
    "FLAGS": [
        "Amusing",
        "EPLR"
    ],
    "NUMBER": "192"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Junior Books v Vietchi",
        "Murphy v Brentwood",
        "D&F Estates v CoE",
        "Dutton v Bognor Regis",
        "Aswan Engineering v Lupdine",
        "Bogle v McDonald's",
        "Commission v UK C-300/95 [1997]",
        "Abouzaid v Mothercare",
        "Richardson v LRC Products",
        "Piper v JRI",
        "Worsley v Tambrands",
        "Product Liability - Reading"
    ],
    "NAME": "Vacwell Engineering v BDH",
    "SUMMARY": [
        "The danger of explosion when one of the defendant&#8217;s chemical products, sold to the claimant, came into contact with water, was known about but not widely mentioned in the textbooks. When the claimant came to wash the labels off the bottles, there was an explosion."
    ],
    "HELD": [
        "A manufacturer has a duty to warn a claimant of the dangers of its products.",
        "The defendant had been negligent in the thoroughness of the research of the properties of the chemical it sold: it ought to have warned the claimant."
    ],
    "AKA": "Vacwell v BDH Chemicals",
    "NUMBER": "193",
    "CATEGORIES": [
        "Product Liability",
        "Manufacturer's Duty"
    ],
    "CATEGORY": "Product Liability &mdash; Manufacturer's Duty",
    "CITATION": "Vacwell Engineering v BDH Chemicals [1969] EWCA 3 All ER 1681",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Amusing",
        "Denning"
    ],
    "YEAR": "1969"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Murphy v Brentwood",
        "D&F Estates v CoE",
        "Junior Books v Vietchi",
        "Vacwell Engineering v BDH",
        "Aswan Engineering v Lupdine",
        "Worsley v Tambrands",
        "Abouzaid v Mothercare",
        "A v National Blood Authority",
        "W v Essex",
        "Grant v Aus. Knitting Mills",
        "Product Liability - Reading",
        "Watt v Hertfordshire"
    ],
    "NAME": "Dutton v Bognor Regis",
    "SUMMARY": [
        "A house had been put up subject to the defendant&#8217;s bylaws, which required the defendant carry out a survey of the foundations. This had been carried out negligently."
    ],
    "HELD": [
        "The principle of <span class=\"lnk caseln\">Donoghue</span> as expanded in later cases applies to real-property. Obiter in <span class=\"lnk caseln\">Anns v Merton</span>."
    ],
    "FLAGS": [
        "Overruled",
        "Denning"
    ],
    "YEAR": "1972",
    "CATEGORIES": [
        "Product Liability",
        "Manufacturer's Duty",
        "Product Liability for Pure Economic Loss",
        "Local Authorities"
    ],
    "CATEGORY": "Product Liability &mdash; Manufacturer's Duty &mdash; Product Liability for Pure Economic Loss &mdash; Local Authorities",
    "COURT": "EWCA",
    "CITATION": "Dutton v Bognor Regis Urban District Council [1972] EWCA 1 QB 373",
    "NUMBER": "194"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Dutton v Bognor Regis",
        "Murphy v Brentwood",
        "D&F Estates v CoE",
        "Vacwell Engineering v BDH",
        "Aswan Engineering v Lupdine",
        "Bogle v McDonald's",
        "A v National Blood Authority",
        "Richardson v LRC Products",
        "Stennett v Hancock",
        "Worsley v Tambrands",
        "Evans v Triplex Safety Glass",
        "Abouzaid v Mothercare"
    ],
    "COMMENT": "This is the high-water mark pure economic loss in product liability, and is criticised as too claim-happy, and as tort riding rough-shod over privity of contract. But isn&#8217;t that what happens in <span class=\"lnk caseln\">Donoghue</span>?",
    "NAME": "Junior Books v Vietchi",
    "SUMMARY": [
        "The claimant hired a firm to put down a floor in their factory. The defendants had the work subcontracted to them &mdash; so on discovering the defectiveness of the floor, the claimant had no remedy in contract. There was no personal injury, and no damage to property."
    ],
    "HELD": [
        "Where the relationship between parties is close enough, there <span class=\"it\">is</span> a duty to avoid causing pure economic loss."
    ],
    "AKA": "Junior Books",
    "COURT": "UKHL",
    "NUMBER": "195",
    "CATEGORIES": [
        "Product Liability",
        "Manufacturer's Duty",
        "Product Liability for Pure Economic Loss"
    ],
    "CATEGORY": "Product Liability &mdash; Manufacturer's Duty &mdash; Product Liability for Pure Economic Loss",
    "CITATION": "Junior Books v Vietchi Ltd [1983] UKHL 1 AC 520",
    "FLAGS": [
        "Criticised"
    ],
    "YEAR": "1983"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Murphy v Brentwood",
        "Junior Books v Vietchi",
        "Dutton v Bognor Regis",
        "Aswan Engineering v Lupdine",
        "Vacwell Engineering v BDH",
        "Evans v Triplex Safety Glass",
        "Product Liability - Reading",
        "Richardson v LRC Products",
        "Bogle v McDonald's",
        "Piper v JRI",
        "Abouzaid v Mothercare",
        "Stennett v Hancock"
    ],
    "NAME": "D&F Estates v CoE",
    "SUMMARY": [
        "The claimant sued for defective plastering in flats built by a subcontractor of the defendant."
    ],
    "HELD": [
        "There was a remedy in contract, so the claim for pure economic loss failed."
    ],
    "YEAR": "1989",
    "CATEGORIES": [
        "Product Liability",
        "Manufacturer's Duty",
        "Product Liability for Pure Economic Loss"
    ],
    "CATEGORY": "Product Liability &mdash; Manufacturer's Duty &mdash; Product Liability for Pure Economic Loss",
    "CITATION": "D&amp;F Estates Ltd v Church Comrs for England [1989] UKHL AC 177",
    "COURT": "UKHL",
    "FLAGS": [
        "Leading"
    ],
    "NUMBER": "196"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Dutton v Bognor Regis",
        "D&F Estates v CoE",
        "Junior Books v Vietchi",
        "Vacwell Engineering v BDH",
        "Aswan Engineering v Lupdine",
        "Richardson v LRC Products",
        "Stennett v Hancock",
        "Pollard v Tesco",
        "Piper v JRI",
        "Worsley v Tambrands",
        "Commission v UK C-300/95 [1997]",
        "W v Essex"
    ],
    "NAME": "Murphy v Brentwood",
    "SUMMARY": [
        "The pattern of facts was the same as <span class=\"lnk caseln\">Dutton v Bognor Regis</span> and, approximately, <span class=\"lnk caseln\">Anns v Merton</span> &mdash; negligently-inspected foundations which turned out to be faulty."
    ],
    "HELD": [
        "Explicitly overruling <span class=\"lnk caseln\">Anns v Merton</span>, a local authority does <span class=\"bd\">not</span> owe a duty to prevent pure economic loss in real property.",
        "Lord Oliver &mdash; there is a general duty of care not to inflict physical injury, but not pure economic loss."
    ],
    "FLAGS": [
        "Criticised",
        "EPLR"
    ],
    "YEAR": "1991",
    "CATEGORIES": [
        "Product Liability",
        "Manufacturer's Duty",
        "Product Liability for Pure Economic Loss",
        "Local Authorities"
    ],
    "CATEGORY": "Product Liability &mdash; Manufacturer's Duty &mdash; Product Liability for Pure Economic Loss &mdash; Local Authorities",
    "COURT": "UKHL",
    "CITATION": "Murphy v Brentwood District Council [1991] UKHL 1 AC 398.",
    "NUMBER": "197"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Dutton v Bognor Regis",
        "Vacwell Engineering v BDH",
        "Murphy v Brentwood",
        "Junior Books v Vietchi",
        "D&F Estates v CoE",
        "Pollard v Tesco",
        "Stennett v Hancock",
        "Abouzaid v Mothercare",
        "Worsley v Tambrands",
        "Product Liability - Reading",
        "Piper v JRI",
        "A v National Blood Authority"
    ],
    "NAME": "Aswan Engineering v Lupdine",
    "SUMMARY": [
        "A waterproofing product bought by the claimant had been stored in plastic containers outside in the sun &mdash; they melted. The claim was that the <span class=\"it\">containers</span>, as opposed to the product itself, were defective."
    ],
    "HELD": [
        "The container is just as much a part of the product as what it contains, and therefore subject to claims under product liability.",
        "But the containers were not, in fact, defective, so the claim failed.",
        "Obiter &mdash; there would be a cause of action, for a corked bottle of wine, against the manufacturer of the <span class=\"it\">cork</span>."
    ],
    "YEAR": "1987",
    "CATEGORIES": [
        "Product Liability",
        "Manufacturer's Duty",
        "One Product Damaging Another"
    ],
    "CATEGORY": "Product Liability &mdash; Manufacturer's Duty &mdash; One Product Damaging Another",
    "CITATION": "Aswan Engineering v Lupdine [1987] EWCA 1 WLR 1",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Leading"
    ],
    "NUMBER": "198"
},
{
    "TYPE": "Statute",
    "RELATED": [
        "Occupiers' Liability Act 1957",
        "Compensation Act 2006",
        "Defamation Act 1996",
        "Law Reform (Contributory Negligence) Act 1945",
        "Occupiers' Liability Act 1984",
        "Road Traffic Act 1988",
        "Unfair Contract Terms Act 1977",
        "Defamation Act 2013"
    ],
    "NAME": "Consumer Protection Act 1987",
    "SUMMARY": [
        "Part 1 came into force in March 1988, giving effect (more or less word-for-word) an EU directive without affecting existing rights in the common law.",
        "<span class=\"ud\">Who can claim?*</span><br>&emsp;&emsp;Anyone who suffers damage because of a defective product.",
        "<span class=\"ud\"><span class=\"bd\">For what type of loss?</span></span><br>&emsp;&emsp;<span class=\"bd\">Personal injury</span> and property damage to the tune of <span class=\"bd\">\u00a3275 or more</span>. But not just the product <span class=\"it\">not working</span>.",
        "<span class=\"ud\"><span class=\"bd\">On whom is the liability imposed?</span></span><br>&emsp;&emsp;Producers, including manufacturers of components of larger products. Badge-engineered product producers <span class=\"bd\">purporting to be manufacturers</span>. Importers into the EU. A supplier who refuses to comply with a request to name, within a reasonable time, the person supplying the product, the next link up the distribution chain.",
        "<span class=\"ud\"><span class=\"bd\">Definitions</span></span><br>&emsp;&emsp;<span class=\"bd\">S1(2)</span> A <span class=\"bd\">product</span> &mdash; &#8216;goods or _electricity... including products comprised in other products, either as a component or raw material, or otherwise.&#8217;<br>&emsp;&emsp;<span class=\"bd\">S3</span> A product is <span class=\"bd\">defective</span> if &mdash; &#8216;the safety is not such as persons generally are entiteld to expect (<span class=\"lnk caseln\">Pollard v Tesco</span>),&#8217; in <span class=\"bd\">all circumstances incuding</span>: &#8216;the manner in which and purposes in which product has been marketed (incl. <span class=\"bd\">packaging</span>, <span class=\"bd\">warnings</span> and <span class=\"bd\">instructions</span>) &mdash; and &mdash; &#8216;what might reasonably be expected to be done with the product&#8217; &mdash; and &mdash; &#8216;the time at which the product was supplied.&#8217;",
        "It is, of course, for the claimant to prove defectiveness<br>&emsp;&emsp;Are provided by <span class=\"bd\">S4(1)</span>:<br>&emsp;&emsp;(a) defect the result of compliance with statute or EU law; (b) proceedings not started against the supplier of the product (i.e., you couldn&#8217;t thieve something, be injured by it then sue <span class=\"it\">under the act</span>.); (c) supply <span class=\"it\">not for profit,</span> i.e., gifts: note that, e.g., cakes sold in a f\u00eate would not be exempt; (d) no defect at relevant time; (e) state of technical knowledge at time of development was not such as producer would be expected to know about defect (unsuccessful in <span class=\"lnk caseln\">A v National Blood Authority</span>); (f) misuse in a subsequent product."
    ],
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/1987/43"
    ],
    "AKA": "CPA 1987",
    "SUMMART": "<span class=\"bd\">General Defences</span>",
    "CATEGORIES": [
        "Product Liability",
        "Consumer Protection",
        "CPA 1987",
        "Statutes"
    ],
    "CATEGORY": "Product Liability &mdash; Consumer Protection &mdash; CPA 1987 &mdash; Statutes",
    "WIKILINK": [
        "https://en.wikipedia.org/wiki/Consumer_Protection_Act_1987"
    ],
    "FLAGS": [
        "EPLR"
    ],
    "NUMBER": "199"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Abouzaid v Mothercare",
        "Bogle v McDonald's",
        "A v National Blood Authority",
        "Pollard v Tesco",
        "Richardson v LRC Products",
        "Commission v UK C-300/95 [1997]",
        "Piper v JRI",
        "Stennett v Hancock",
        "Aswan Engineering v Lupdine",
        "Vacwell Engineering v BDH",
        "Murphy v Brentwood",
        "Evans v Triplex Safety Glass"
    ],
    "COMMENT": "<span class=\"bd\">PIQR</span> is <span class=\"bd\">P</span>ersonal <span class=\"bd\">I</span>njuries and <span class=\"bd\">Q</span>uantum <span class=\"bd\">R</span>eports.",
    "NAME": "Worsley v Tambrands",
    "SUMMARY": [
        "The claimant had used a tampon made by the defendant. She got <span class=\"it\">toxic shock syndrome</span> through the staphyllococal overgrowth that the use of tampons can cause, and was hospitalized. She argued the packaging and leaflet was designed in such a way as to draw insufficient attention to the leaflet and its warnings, and that as such the product was defective."
    ],
    "HELD": [
        "A clear message on the back of the box referred to the leaflet containing the warning. The product was not, therefore, defective."
    ],
    "YEAR": "2000",
    "CATEGORIES": [
        "Product Liability",
        "Consumer Protection",
        "CPA 1987",
        "CPA Defectiveness"
    ],
    "CATEGORY": "Product Liability &mdash; Consumer Protection &mdash; CPA 1987 &mdash; CPA Defectiveness",
    "COURT": "EWHC",
    "CITATION": "Worsley v Tambrands [2000] EWHC PIQR 95",
    "NUMBER": "200"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Abouzaid v Mothercare",
        "Bogle v McDonald's",
        "A v National Blood Authority",
        "Worsley v Tambrands",
        "Pollard v Tesco",
        "Commission v UK C-300/95 [1997]",
        "Piper v JRI",
        "D&F Estates v CoE",
        "Aswan Engineering v Lupdine",
        "Product Liability - Reading",
        "Grant v Aus. Knitting Mills",
        "Murphy v Brentwood"
    ],
    "NAME": "Richardson v LRC Products",
    "SUMMARY": [
        "The claimant became pregnant when her husband&#8217;s condom split."
    ],
    "HELD": [
        "The defendant had never claimed the condom would never fail; the damage, if there was any, was unlikely to be factory damage."
    ],
    "FLAGS": [
        "Important"
    ],
    "YEAR": "2000",
    "CATEGORIES": [
        "Product Liability",
        "Consumer Protection",
        "CPA 1987",
        "CPA Defectiveness"
    ],
    "CATEGORY": "Product Liability &mdash; Consumer Protection &mdash; CPA 1987 &mdash; CPA Defectiveness",
    "COURT": "EWHC",
    "CITATION": "Richardson v LRC Products Ltd [2000] EWHC PIQR 164",
    "NUMBER": "201"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Bogle v McDonald's",
        "Pollard v Tesco",
        "Richardson v LRC Products",
        "Worsley v Tambrands",
        "A v National Blood Authority",
        "Piper v JRI",
        "Commission v UK C-300/95 [1997]",
        "Evans v Triplex Safety Glass",
        "D&F Estates v CoE",
        "Stennett v Hancock",
        "Grant v Aus. Knitting Mills",
        "Murphy v Brentwood"
    ],
    "NAME": "Abouzaid v Mothercare",
    "SUMMARY": [
        "The claimant&#8217;s mother had bought a sort of fleece-lined sleeping back attachment called <span class=\"it\">&#8216;cozytoes&#8217;</span> for his pushchair, which was fastened by a system of elasticated straps. When helping his mother attach it, he was hit in the eye by a fastener catapaulted by a strap."
    ],
    "HELD": [
        "The design of elasticated straps, hazardous to eyes, was defective without a warning that users should <span class=\"it\">stand well back</span>."
    ],
    "FLAGS": [
        "Important"
    ],
    "YEAR": "2001",
    "CATEGORIES": [
        "Product Liability",
        "Consumer Protection",
        "CPA 1987",
        "CPA Defectiveness"
    ],
    "CATEGORY": "Product Liability &mdash; Consumer Protection &mdash; CPA 1987 &mdash; CPA Defectiveness",
    "COURT": "EWCA",
    "CITATION": "Abouzaid v Mothercare [2001] EWCA TLR WL 1918530",
    "NUMBER": "202"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Pollard v Tesco",
        "Worsley v Tambrands",
        "Richardson v LRC Products",
        "Piper v JRI",
        "Bogle v McDonald's",
        "Commission v UK C-300/95 [1997]",
        "Abouzaid v Mothercare",
        "Murphy v Brentwood",
        "Evans v Triplex Safety Glass",
        "D&F Estates v CoE",
        "Stennett v Hancock",
        "Grant v Aus. Knitting Mills"
    ],
    "COMMENT": "The decision was so long it needed an <span class=\"it\">index</span>.",
    "NAME": "A v National Blood Authority",
    "SUMMARY": [
        "Blood products were collected by defendant, some of which they <span class=\"it\">knew</span> to be infected wiht Hepatitis C., but there was no way of screening. The claimant was infected, and sued under the <span class=\"lnk caseln\">CPA 1987</span>."
    ],
    "HELD": [
        "The product was defective, and that it was not relevant that the harm not could be avoided. They had not warned the public, who were entitled to expect that such products were free from infections. Defence (e) under the CPA, <span class=\"it\">development risks</span>, was ineffective here, although the CJEU later criticised this decision &mdash; <span class=\"it\">Commission v UK C-300/95 [1997]</span>."
    ],
    "FLAGS": [
        "Leading",
        "EPLR"
    ],
    "NUMBER": "203",
    "CATEGORIES": [
        "Product Liability",
        "Consumer Protection",
        "CPA 1987",
        "CPA Defectiveness",
        "CPA Defences"
    ],
    "CATEGORY": "Product Liability &mdash; Consumer Protection &mdash; CPA 1987 &mdash; CPA Defectiveness &mdash; CPA Defences",
    "COURT": "EWHC",
    "CITATION": "A and others v National Blood Authority [2001] EWHC 3 All ER 289",
    "YEAR": "2001"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Pollard v Tesco",
        "Worsley v Tambrands",
        "A v National Blood Authority",
        "Richardson v LRC Products",
        "Abouzaid v Mothercare",
        "Piper v JRI",
        "Commission v UK C-300/95 [1997]",
        "Product Liability - Reading",
        "Hunter v Canary Wharf",
        "D&F Estates v CoE",
        "Vacwell Engineering v BDH",
        "Dutton v Bognor Regis"
    ],
    "NAME": "Bogle v McDonald's",
    "SUMMARY": [
        "The 36 claimants had all been injured in some way by <span class=\"it\">hot drinks</span> served by the defendant. Some had spilt the drinks on themselves, some had had drinks spilt on them. They all claimed the coffee was too hot."
    ],
    "HELD": [
        "Providing the drinks were supplied with securely-fitted lids, the product was not defective.",
        "People are entitled to expect restaurants, etc, would take precautions against burning people, but not to the point they&#8217;re denied the ability to buy hot drinks. That would be utter madness."
    ],
    "FLAGS": [
        "Leading",
        "Amusing",
        "EPLR"
    ],
    "YEAR": "2002",
    "CATEGORIES": [
        "Product Liability",
        "Consumer Protection",
        "CPA 1987",
        "CPA Defectiveness",
        "Trying it on"
    ],
    "CATEGORY": "Product Liability &mdash; Consumer Protection &mdash; CPA 1987 &mdash; CPA Defectiveness &mdash; Trying it on",
    "COURT": "EWHC",
    "CITATION": "Bogle v McDonald&#8217;s Restaurants Ltd [2002] EWHC 490",
    "NUMBER": "204"
},
{
    "TYPE": "Case",
    "RELATED": [
        "A v National Blood Authority",
        "Richardson v LRC Products",
        "Bogle v McDonald's",
        "Worsley v Tambrands",
        "Abouzaid v Mothercare",
        "Commission v UK C-300/95 [1997]",
        "Piper v JRI",
        "Platt v Liverpool",
        "Keown v Coventry NHS",
        "Evans v Triplex Safety Glass",
        "Phipps v Rochester",
        "MAK and RK v UK"
    ],
    "NAME": "Pollard v Tesco",
    "SUMMARY": [
        "The claimant, small child, had drunk from a bottle containing dishwasher powder, which poisoned him. The bottle was fitted with child-resistant cap, but not one conforming to the British Standard rating. Claimed that the defendant, having elected to fit such a cap, ought to have fitted the industry standard cap."
    ],
    "HELD": [
        "Under the <span class=\"lnk caseln\">CPA 1987</span>, the test for presence of a defect was one of <span class=\"it\">public expectation</span>.",
        "On this, the claim failed: the public would expect the bottle to be more difficult to open than usual, but would not have specific expectations about meeting, e.g., BS-standards."
    ],
    "YEAR": "2006",
    "CATEGORIES": [
        "Product Liability",
        "Consumer Protection",
        "CPA 1987",
        "CPA Defectiveness",
        "Children"
    ],
    "CATEGORY": "Product Liability &mdash; Consumer Protection &mdash; CPA 1987 &mdash; CPA Defectiveness &mdash; Children",
    "CITATION": "Pollard v Tesco Stores [2006] EWCA Civ 393",
    "COURT": "EWCA",
    "FLAGS": [
        "Leading",
        "Important",
        "EPLR"
    ],
    "NUMBER": "205"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Commission v UK C-300/95 [1997]",
        "A v National Blood Authority",
        "Abouzaid v Mothercare",
        "Bogle v McDonald's",
        "Pollard v Tesco",
        "Richardson v LRC Products",
        "Worsley v Tambrands",
        "Vacwell Engineering v BDH",
        "Stennett v Hancock",
        "Product Liability - Reading",
        "Aswan Engineering v Lupdine",
        "D&F Estates v CoE"
    ],
    "NAME": "Piper v JRI",
    "SUMMARY": [
        "The claimant&#8217;s hip implant, made by the defendant, broke in two."
    ],
    "HELD": [
        "The claimant had not proved the implant was defective at time of supply."
    ],
    "NUMBER": "206",
    "CATEGORIES": [
        "Product Liability",
        "Consumer Protection",
        "CPA 1987",
        "CPA Defences"
    ],
    "CATEGORY": "Product Liability &mdash; Consumer Protection &mdash; CPA 1987 &mdash; CPA Defences",
    "CITATION": "Piper v JRI (Manufacturing) Ltd [2006] EWCA Civ 1344",
    "COURT": "EWCA",
    "FLAGS": [
        "Important"
    ],
    "YEAR": "2006",
    "--END--": ""
},
{
    "TYPE": "Case",
    "RELATED": [
        "Piper v JRI",
        "A v National Blood Authority",
        "Richardson v LRC Products",
        "Worsley v Tambrands",
        "Bogle v McDonald's",
        "Pollard v Tesco",
        "Abouzaid v Mothercare",
        "Aswan Engineering v Lupdine",
        "Evans v Triplex Safety Glass",
        "Junior Books v Vietchi",
        "Dutton v Bognor Regis",
        "Vacwell Engineering v BDH"
    ],
    "NAME": "Commission v UK C-300/95 [1997]",
    "SUMMARY": [
        "TODO"
    ],
    "HELD": [
        "TODO"
    ],
    "YEAR": "1997",
    "CATEGORIES": [
        "Product Liability",
        "Consumer Protection",
        "CPA 1987",
        "CPA Defences"
    ],
    "CATEGORY": "Product Liability &mdash; Consumer Protection &mdash; CPA 1987 &mdash; CPA Defences",
    "COURT": "CJEU",
    "CITATION": "Commission v UK C-300/95 [1997] All ER (EC) 481",
    "NUMBER": "207"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Occupiers' Liability",
        "Private Nuisance - Defences and Remedies",
        "Remoteness",
        "Duty of Care",
        "Causation - The Fairchild Exception",
        "Psychiatric Harm",
        "Breach of Duty - Standard of Care",
        "Defamation - Defences I",
        "Vicarious Liability",
        "Foreseeability",
        "Public Nuisance",
        "The Rule in Rylands v Fletcher"
    ],
    "NAME": "Pure Economic Loss",
    "CATEGORIES": [
        "Pure Economic Loss"
    ],
    "CATEGORY": "Pure Economic Loss",
    "SUMMARY": [
        "The general position is that there is <span class=\"bd\">no liability in negligence for pure economic loss</span>. Lord Oliver in <span class=\"lnk caseln\">Murphy v Brentwood</span>, if you need to cite authority.",
        "What is a <span class=\"bd\">pure economic loss</span>? Ones that do not flow from an injury to the claimant or damage to his or her property.",
        "A major exception was carved out by <span class=\"lnk caseln\">Hedley Byrne</span>, the key case in this area, for <span class=\"it\">negligent misstatement</span>. The subsequent cases have expanded the idea, to give liability for the <span class=\"it\">negligent provision of services</span>.",
        "Top tip: in a problem question, don&#8217;t forget to make it clear to the examiner that you the claimant doesn&#8217;t win a negligence case simply by establishing a duty of care was <span class=\"it\">owed</span>.",
        "Claims in this area have succeeded despite not satisfying the <span class=\"lnk caseln\">But For</span> test of causation. On this issue see <span class=\"it\">Steele</span> p.253 &mdash; &#8216;Claims for loss of chance are clearly accepted in certain cases of <span class=\"bd\">economic loss</span> and of <span class=\"bd\">lost chance of economic gain</span>...&#8217;",
        "So, <span class=\"bd\">when does a duty of care arise?</span> Relevant factors include: defendant&#8217;s assumption of responsibility (<span class=\"lnk caseln\">Lennon v The Met</span>), if the claimant&#8217;s reliance was reasonable (<span class=\"lnk caseln\">Howard Marine v Ogden</span>); the purpose of the statement (<span class=\"lnk caseln\">Smith v Bush</span>, <span class=\"lnk caseln\">Caparo v Dickman</span>); the context (in a social context &mdash; <span class=\"lnk caseln\">Chaudry v Prabhaker</span>); the relationship between the parties (<span class=\"lnk caseln\">Spring v Guardian Assurance</span>); whether the maker of the statement claimed expertise (<span class=\"lnk caseln\">Esso v Mardon</span>); whether the floodgates might be opened (<span class=\"lnk caseln\">McNaughton v Anderson</span>); what would be <span class=\"it\">practically just</span> (<span class=\"lnk caseln\">White v Jones</span>); what D knew (also <span class=\"lnk caseln\">McNaughton v Anderson</span>); and whether C made reasonable enquiries before relying (<span class=\"lnk caseln\">Patchett</span>).",
        "Confusion about how <span class=\"lnk caseln\">Hedley Byrne</span> fits together with <span class=\"lnk caseln\">Caparo</span> was &#8220;cleared up&#8221; by the HL in <span class=\"lnk caseln\">Customs and Excise v Barclays</span>."
    ],
    "NUMBER": "208"
},
{
    "TYPE": "Case",
    "RELATED": [
        "James McNaughton v Hicks Anderson",
        "Howard Marine Dredging v Ogden & Sons",
        "Esso v Mardon",
        "Lennon v Metropolitan Police Commissioner",
        "Chaudry v Prabhaker",
        "Candler v Crane & Christmas",
        "Customs and Excise v Barclays",
        "Hedley Byrne v Heller",
        "Smith v Bush",
        "Spring v Guardian Assurance",
        "Henderson v Merrett",
        "Patchett v Swimming Pool Trades Association"
    ],
    "NAME": "Pure Economic Loss - Reading",
    "CATEGORIES": [
        "Pure Economic Loss"
    ],
    "CATEGORY": "Pure Economic Loss",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Essential</span></span>",
        "Steele, <span class=\"it\">Tort Law</span>, pp.333-347 and 359-392.",
        "<span class=\"lnk caseln\">Candler v Crane &amp; Christmas</span> &mdash; <span class=\"lnk caseln\">Hedley Byrne v Heller</span> &mdash; <span class=\"lnk caseln\">Smith v Bush</span> &mdash; <span class=\"lnk caseln\">Chaudry v Prabhaker</span> &mdash; <span class=\"lnk caseln\">Spring v Guardian Assurance</span> &mdash; <span class=\"lnk caseln\">James McNaughton v Hicks Anderson</span> &mdash; <span class=\"lnk caseln\">White v Jones</span> &mdash; <span class=\"lnk caseln\">Customs and Excise v Barclays</span>.",
        "<span class=\"ud\"><span class=\"bd\">Additional</span></span>",
        "J. Stapleton, <span class=\"it\">Duty of Care and Economic Loss: A Wider Agenda</span> (1991) 107 LQR 249",
        "<span class=\"lnk caseln\">Murphy v Brentwood</span> &mdash; <span class=\"lnk caseln\">Cattle v Stockton Waterworks</span> &mdash; <span class=\"lnk caseln\">Lennon v Metropolitan Police Commissioner</span> &mdash; <span class=\"lnk caseln\">Howard Marine v Ogden</span> &mdash; <span class=\"lnk caseln\">Esso v Mardon</span> &mdash; <span class=\"lnk caseln\">Patchett v Swimming Pool Trades Association</span>."
    ],
    "NUMBER": "209"
},
{
    "TYPE": "Case",
    "RELATED": [
        "White v Jones",
        "Patchett v Swimming Pool Trades Association",
        "Howard Marine Dredging v Ogden & Sons",
        "James McNaughton v Hicks Anderson",
        "Customs and Excise v Barclays",
        "Chaudry v Prabhaker",
        "Candler v Crane & Christmas",
        "Lennon v Metropolitan Police Commissioner",
        "Henderson v Merrett",
        "Hedley Byrne v Heller",
        "Esso v Mardon",
        "Pure Economic Loss - Reading"
    ],
    "NAME": "Cattle v Stockton Waterworks",
    "SUMMARY": [
        "A tunnel under construction was flooded by a leak caused by pipes laid by the defendant. The claimant sued in negligence."
    ],
    "HELD": [
        "Early authority for there being no cause of action for pure economic loss in negligence."
    ],
    "FLAGS": [
        "Development"
    ],
    "YEAR": "1875",
    "CATEGORIES": [
        "Pure Economic Loss"
    ],
    "CATEGORY": "Pure Economic Loss",
    "COURT": "EWCA",
    "CITATION": "Cattle v Stockton Waterworks Co (1875) LR 10 QB 453",
    "NUMBER": "210"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Cattle v Stockton Waterworks",
        "Pure Economic Loss - Reading",
        "Customs and Excise v Barclays",
        "Spring v Guardian Assurance",
        "Henderson v Merrett",
        "Patchett v Swimming Pool Trades Association",
        "Chaudry v Prabhaker",
        "Hedley Byrne v Heller",
        "Lennon v Metropolitan Police Commissioner",
        "James McNaughton v Hicks Anderson",
        "Esso v Mardon",
        "Howard Marine Dredging v Ogden & Sons"
    ],
    "NAME": "Candler v Crane & Christmas",
    "SUMMARY": [
        "The defendant firm of accountants had prepared a negligently-inaccurate set of accounts for a tin-mining company in Cornwall into which, on the basis of the accounts, the claimant invested money. The owner of the tin mine spent the money on himself then went bankrupt."
    ],
    "HELD": [
        "By majority, there was still no liability in tort for a negligent statement. There had never been a decided case, apart from those involving fraud/contract/equity, where a statement had been held negligent, and the court wasn&#8217;t about to change the law.",
        "Denning MR dissented &mdash; &#8216;... no contract between the plaintiff and the accountants, nevertheless the relationship between them was so close and direct that the accountants did owe a duty of care to him within the principles stated in <span class=\"lnk caseln\">Donoghue v Stevenson</span>.&#8217;",
        "Where an expert made a statement, he went on, there should be an exception."
    ],
    "FLAGS": [
        "Overruled",
        "Development",
        "Denning",
        "EPLR"
    ],
    "AKA": "Candler v Crane",
    "NUMBER": "211",
    "CATEGORIES": [
        "Pure Economic Loss"
    ],
    "CATEGORY": "Pure Economic Loss",
    "COURT": "EWCA",
    "CITATION": "Candler v Crane, Christmas &amp; Co [1951] EWCA 2 KB 164",
    "YEAR": "1951"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Customs and Excise v Barclays",
        "White v Jones",
        "Spring v Guardian Assurance",
        "Chaudry v Prabhaker",
        "James McNaughton v Hicks Anderson",
        "Esso v Mardon",
        "Howard Marine Dredging v Ogden & Sons",
        "Lennon v Metropolitan Police Commissioner",
        "Henderson v Merrett",
        "Patchett v Swimming Pool Trades Association",
        "Smith v Bush",
        "Candler v Crane & Christmas"
    ],
    "NAME": "Hedley Byrne v Heller",
    "SUMMARY": [
        "The claimant firm of ad-men had done \u00a317K work for a customer, Easipower Ltd, who then went bust. They&#8217;d contracted on the basis of a creditworthiness report provided ultimately by the defendant bank. The report was headed &#8220;without responsibility on the part of this bank,&#8221; but negligently stated Easipower was &#8220;good for its ordinary business engagements.&#8221; The claimant sued for their loss."
    ],
    "HELD": [
        "Overturning <span class=\"lnk caseln\">Candler v Crane</span>, there <span class=\"bd\">can</span> be liability for negligent misstatement resulting in pure economic loss.",
        "The relationship between the parties was sufficiently proximate (on bare <span class=\"lnk caseln\">Donoghue</span> terms) that a duty of care should be owed. But on the facts, the disclaimer <span class=\"bd\">did</span> operate to exclude liability.",
        "In effect, this approved Denning&#8217;s dissenting judgment in <span class=\"lnk caseln\">Candler v Crane</span>."
    ],
    "AKA": "Hedley Byrne",
    "NUMBER": "212",
    "CATEGORIES": [
        "Pure Economic Loss",
        "Negligent Misstatement"
    ],
    "CATEGORY": "Pure Economic Loss &mdash; Negligent Misstatement",
    "CITATION": "Hedley Byrne v Heller [1964] ULHL AC 465",
    "COURT": "UKHL",
    "FLAGS": [
        "EPLR",
        "Key",
        "Leading"
    ],
    "YEAR": "1964"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Esso v Mardon",
        "Henderson v Merrett",
        "Patchett v Swimming Pool Trades Association",
        "James McNaughton v Hicks Anderson",
        "Spring v Guardian Assurance",
        "Customs and Excise v Barclays",
        "Howard Marine Dredging v Ogden & Sons",
        "Chaudry v Prabhaker",
        "Smith v Bush",
        "White v Jones",
        "Hedley Byrne v Heller",
        "Cattle v Stockton Waterworks"
    ],
    "NAME": "Lennon v Metropolitan Police Commissioner",
    "SUMMARY": [
        "The claimant was in receipt of some sort of housing benefit by virtue of being a copper. He left one police force and joined another, but timed it so he&#8217;d have a holiday between contracts. Worried that he&#8217;d lose the benefit on the technicality, he asked someone in personnel, who explicitly assumed responsibility: &#8220;I&#8217;ll handle everything and make sure you don&#8217;t lose your housing benefit.&#8221; She was wrong."
    ],
    "HELD": [
        "The assumption of responsibility for a statement with economic consequences gives rise to duty, so the claim succeeded."
    ],
    "AKA": "Lennon v The Met",
    "NUMBER": "213",
    "CATEGORIES": [
        "Pure Economic Loss",
        "Negligent Misstatement",
        "Assumption of Responsibility",
        "Reliance"
    ],
    "CATEGORY": "Pure Economic Loss &mdash; Negligent Misstatement &mdash; Assumption of Responsibility &mdash; Reliance",
    "CITATION": "Lennon v Commissioner of Police of the Metropolis [2004] EWCA Civ 130",
    "COURT": "EWCA",
    "FLAGS": [
        "Important"
    ],
    "YEAR": "2004"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Chaudry v Prabhaker",
        "Patchett v Swimming Pool Trades Association",
        "Spring v Guardian Assurance",
        "White v Jones",
        "James McNaughton v Hicks Anderson",
        "Customs and Excise v Barclays",
        "Esso v Mardon",
        "Hedley Byrne v Heller",
        "Henderson v Merrett",
        "Lennon v Metropolitan Police Commissioner",
        "Howard Marine Dredging v Ogden & Sons",
        "Pure Economic Loss - Reading"
    ],
    "NAME": "Smith v Bush",
    "SUMMARY": [
        "A surveyor employed by the Abbey National, had provided a survey of the property bought by the claimant. He disclaimed responsibility, and the survey was negligently in stating no essential repairs were needed. Parts of the chimney collapsed and damaged the roof, and the claimant sued the surveyor."
    ],
    "HELD": [
        "<span class=\"lnk caseln\">Hedley Byrne</span> liability, therefore, was also to proximate third parties. The purchasor of a house was entitled to rely on the surveyor&#8217;s valuation, as doing so was such common practice, and UCTA 1977 disqualified the disclaimer.",
        "Pragmatically, it would be a financial disaster for a housebuyer to bear the loss, where a surveyor could easily take out professional insurance."
    ],
    "YEAR": "1990",
    "CATEGORIES": [
        "Pure Economic Loss",
        "Negligent Misstatement",
        "Disclaiming Responsibility"
    ],
    "CATEGORY": "Pure Economic Loss &mdash; Negligent Misstatement &mdash; Disclaiming Responsibility",
    "CITATION": "Smith v Bush [1990] UKHL 1 AC 831",
    "COURT": "UHKL",
    "FLAGS": [
        "Key",
        "Important",
        "EPLR"
    ],
    "NUMBER": "214"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Lennon v Metropolitan Police Commissioner",
        "James McNaughton v Hicks Anderson",
        "White v Jones",
        "Customs and Excise v Barclays",
        "Spring v Guardian Assurance",
        "Henderson v Merrett",
        "Esso v Mardon",
        "Hedley Byrne v Heller",
        "Chaudry v Prabhaker",
        "Patchett v Swimming Pool Trades Association",
        "Smith v Bush",
        "Candler v Crane & Christmas"
    ],
    "NAME": "Howard Marine Dredging v Ogden & Sons",
    "SUMMARY": [
        "The defendant had given an assurance about the deadweight capacity of barges based on the Lloyd&#8217;s Register, whereas they knew of another authority which gave the correct number. The barges proved inadequate, and the litigation claimed, inter alia, on <span class=\"lnk caseln\">Hedley Byrne</span> grounds for their loss."
    ],
    "HELD": [
        "Denning MR &mdash; in some situations, it isn&#8217;t reasonable to rely on what someone says to you, e.g., off-the-cuff spontaneous advice, <span class=\"it\">even from an expert</span>, or in a casual conversation in the street. Or advice given in a railway carriage."
    ],
    "AKA": "Howard Marine v Ogden",
    "NUMBER": "215",
    "CATEGORIES": [
        "Pure Economic Loss",
        "Negligent Misstatement",
        "Reasonableness of Reliance"
    ],
    "CATEGORY": "Pure Economic Loss &mdash; Negligent Misstatement &mdash; Reasonableness of Reliance",
    "CITATION": "Howard Marine and Dredging Co Ltd v Ogden &amp; Sons Ltd [1978] EWCA QB 574",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Denning"
    ],
    "YEAR": "1978"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Esso v Mardon",
        "Howard Marine Dredging v Ogden & Sons",
        "Hedley Byrne v Heller",
        "White v Jones",
        "Henderson v Merrett",
        "Lennon v Metropolitan Police Commissioner",
        "Patchett v Swimming Pool Trades Association",
        "James McNaughton v Hicks Anderson",
        "Spring v Guardian Assurance",
        "Smith v Bush",
        "Customs and Excise v Barclays",
        "Cattle v Stockton Waterworks"
    ],
    "NAME": "Chaudry v Prabhaker",
    "SUMMARY": [
        "The claimant, having just passed her test, needed a car, but knew nothing about car. Her friend, the defendant, claimed to be something of an expert. He took her to the friendly local panel beater, who happened also to sell cars. He noticed a certain car, which had a previously-crumpled bonnet, and advised her to buy it. The car was a cut-and-shut."
    ],
    "HELD": [
        "There <span class=\"bd\">may</span> be a duty of care in social situations. Here, duty was admitted.",
        "Stuart-Smith LJ &mdash; &#8216;when considering whether there is a duty of care, the relationship between the parties is material... if they are friends, the true view may be that the advice or representation is made on a purely social occasion and that the circumstances show that there is no voluntary"
    ],
    "YEAR": "1989",
    "CATEGORIES": [
        "Pure Economic Loss",
        "Negligent Misstatement",
        "Statement in a Social Context"
    ],
    "CATEGORY": "Pure Economic Loss &mdash; Negligent Misstatement &mdash; Statement in a Social Context",
    "CITATION": "Chaudry v Prabhaker [1989] EWCA 1 WLR 29",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Amusing",
        "EPLR"
    ],
    "NUMBER": "216"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Henderson v Merrett",
        "Customs and Excise v Barclays",
        "Hedley Byrne v Heller",
        "James McNaughton v Hicks Anderson",
        "Esso v Mardon",
        "Lennon v Metropolitan Police Commissioner",
        "Chaudry v Prabhaker",
        "Smith v Bush",
        "Howard Marine Dredging v Ogden & Sons",
        "Patchett v Swimming Pool Trades Association",
        "White v Jones",
        "Pure Economic Loss - Reading"
    ],
    "NAME": "Spring v Guardian Assurance",
    "SUMMARY": [
        "The defendant, a previous employer of the claimant, wrote a reference that was so bad it effectively prevented the claimant getting any more work."
    ],
    "HELD": [
        "It had already been established that on <span class=\"lnk caseln\">Hedley Byrne</span> grounds a referee owes a duty of care to the recipient of the reference &mdash; but there is also such a duty to the <span class=\"it\">subject</span> of the reference. Although this is not to say that a bad reference is, <span class=\"it\">per se</span>, a breach of duty."
    ],
    "YEAR": "1995",
    "CATEGORIES": [
        "Pure Economic Loss",
        "Negligent Misstatement",
        "Relationship between Parties",
        "References"
    ],
    "CATEGORY": "Pure Economic Loss &mdash; Negligent Misstatement &mdash; Relationship between Parties &mdash; References",
    "CITATION": "Spring v Guardian Assurance [1995] UKHL 2 AC 296",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "Amusing",
        "EPLR"
    ],
    "NUMBER": "217"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Henderson v Merrett",
        "Howard Marine Dredging v Ogden & Sons",
        "Smith v Bush",
        "White v Jones",
        "James McNaughton v Hicks Anderson",
        "Lennon v Metropolitan Police Commissioner",
        "Hedley Byrne v Heller",
        "Patchett v Swimming Pool Trades Association",
        "Spring v Guardian Assurance",
        "Customs and Excise v Barclays",
        "Chaudry v Prabhaker",
        "Cattle v Stockton Waterworks"
    ],
    "NAME": "Esso v Mardon",
    "SUMMARY": [
        "The defendant, a would-be franchisee of the claimant wanted to build a petrol station on a main road. The claimant had assured him he would sell 200K gallons/year. But to get planning permission, the entrance had to be on a side-road. He asked the defendant whether this would alter projected sales. The defendant&#8217;s representative scoffed in ripost &#8216;I know all there is to know about petrol stations.&#8217;",
        "He sold only half what he&#8217;d expected, but renewed the lease nonetheless. Eventually, he ran out of money, so the claimant sued for repossession."
    ],
    "HELD": [
        "Albeit that &#8216;<span class=\"it\">I know all there is to know about...</span>&#8216; ought to be taken to mean &#8216;_I, almost to the point of caricature, am savagely ignorant about...&#8217;, just as &#8216;trust me, I&#8217;m telling the truth,&#8217; means &#8216;I am not telling the truth: I am an inveterate liar&#8217; &mdash; the defendant in this case had been reasonable in relying on the claimant&#8217;s self-professed expertise."
    ],
    "YEAR": "1976",
    "CATEGORIES": [
        "Pure Economic Loss",
        "Negligent Misstatement",
        "Representation of Expertise"
    ],
    "CATEGORY": "Pure Economic Loss &mdash; Negligent Misstatement &mdash; Representation of Expertise",
    "CITATION": "Esso Petroleum v Mardon [1976] QB 801",
    "COURT": "EWCA",
    "FLAGS": [
        "Criticised",
        "Denning"
    ],
    "NUMBER": "218"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Esso v Mardon",
        "Hedley Byrne v Heller",
        "Smith v Bush",
        "Patchett v Swimming Pool Trades Association",
        "White v Jones",
        "Customs and Excise v Barclays",
        "Spring v Guardian Assurance",
        "Chaudry v Prabhaker",
        "Howard Marine Dredging v Ogden & Sons",
        "Lennon v Metropolitan Police Commissioner",
        "James McNaughton v Hicks Anderson",
        "Candler v Crane & Christmas"
    ],
    "NAME": "Henderson v Merrett",
    "SUMMARY": [
        "Lloyd&#8217;s names who&#8217;d incurred heavy losses in American hurricanes claimed in negligent misstatement against the defendant underwriters."
    ],
    "HELD": [
        "There could indeed be a liability for pure economic loss for negligent misstatement running alongside a contractual claim."
    ],
    "YEAR": "1994",
    "CITAITON": "Henderson v Merrett Syndicates [1994] UKHL 5",
    "CATEGORIES": [
        "Pure Economic Loss",
        "Negligent Misstatement",
        "Representation of Expertise"
    ],
    "CATEGORY": "Pure Economic Loss &mdash; Negligent Misstatement &mdash; Representation of Expertise",
    "COURT": "UKHL",
    "FLAGS": [
        "Leading"
    ],
    "NUMBER": "219"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Customs and Excise v Barclays",
        "Patchett v Swimming Pool Trades Association",
        "Lennon v Metropolitan Police Commissioner",
        "Chaudry v Prabhaker",
        "Henderson v Merrett",
        "Smith v Bush",
        "Esso v Mardon",
        "White v Jones",
        "Spring v Guardian Assurance",
        "Howard Marine Dredging v Ogden & Sons",
        "Hedley Byrne v Heller",
        "Candler v Crane & Christmas"
    ],
    "NAME": "James McNaughton v Hicks Anderson",
    "SUMMARY": [
        "The claimant wanted to buy (another) paper mill. They got an accountancy firm to draw up accounts, but as the transaction had to happen in a rush, the firm drew up explicitly-signposted <span class=\"it\">draft</span> accounts. The claimant relied on them, went ahead an bought the company.",
        "The accounts turned out to be inaccurate, so they sued the accountants."
    ],
    "HELD": [
        "No reasonable person would rely on a set of <span class=\"it\">draft accounts</span> without checking them, and no reasonable person would expect someone to whom he had provided draft accounts not to check them themselves.",
        "For those reasons, the claim failed.",
        "LJ Neil &mdash; &#8216;for a single advisee, or a member of a small class, may sometimes be simple to infer a duty of care applies to him.&#8217;"
    ],
    "FLAGS": [
        "Key",
        "Leading",
        "EPLR"
    ],
    "AKA": "McNaughton v Anderson",
    "NUMBER": "220",
    "CATEGORIES": [
        "Pure Economic Loss",
        "Negligent Misstatement",
        "Floodgates",
        "Defendant's Knowledge"
    ],
    "CATEGORY": "Pure Economic Loss &mdash; Negligent Misstatement &mdash; Floodgates &mdash; Defendant's Knowledge",
    "COURT": "EWCA",
    "CITATION": "James McNaughton Paper Group Ltd v Hicks Anderson &amp; Co [1991] 2 QB 113",
    "YEAR": "1991"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Howard Marine Dredging v Ogden & Sons",
        "Chaudry v Prabhaker",
        "Spring v Guardian Assurance",
        "Customs and Excise v Barclays",
        "Henderson v Merrett",
        "Lennon v Metropolitan Police Commissioner",
        "Smith v Bush",
        "Patchett v Swimming Pool Trades Association",
        "Esso v Mardon",
        "Hedley Byrne v Heller",
        "James McNaughton v Hicks Anderson",
        "Candler v Crane & Christmas"
    ],
    "COMMENT": "I.e., cab-driver justice.",
    "NAME": "White v Jones",
    "SUMMARY": [
        "A family member cut out of a will following a row &mdash; but then a reconciliation, and a letter sent to the solicitor rectifying the will. Then the maker of the will became the testator, but the solicitor hadn&#8217;t done anything. So the would-be heirs sued the solicitor."
    ],
    "HELD": [
        "Citing <span class=\"lnk caseln\">Hedley Byrne</span>, the claim was allowed.",
        "Goff LJ: the impulse of justice &mdash; if claimant can&#8217;t win a case like this then solicitors can&#8217;t be liable for anything, if they don&#8217;t do their job properly."
    ],
    "NUMBER": "221",
    "CATEGORIES": [
        "Pure Economic Loss",
        "Negligent Misstatement",
        "\"Practical Justice\""
    ],
    "CATEGORY": "Pure Economic Loss &mdash; Negligent Misstatement &mdash; \"Practical Justice\"",
    "CITATION": "White v Jones [1995] UKHL 2 AC 207",
    "COURT": "UKHL",
    "FLAGS": [
        "Leading",
        "EPLR"
    ],
    "YEAR": "1995"
},
{
    "TYPE": "Case",
    "RELATED": [
        "James McNaughton v Hicks Anderson",
        "Patchett v Swimming Pool Trades Association",
        "Spring v Guardian Assurance",
        "Smith v Bush",
        "Chaudry v Prabhaker",
        "Howard Marine Dredging v Ogden & Sons",
        "Esso v Mardon",
        "Lennon v Metropolitan Police Commissioner",
        "White v Jones",
        "Hedley Byrne v Heller",
        "Henderson v Merrett",
        "Cattle v Stockton Waterworks"
    ],
    "COMMENT": "This is the leading case on how the principles of <span class=\"lnk caseln\">Caparo</span> and <span class=\"lnk caseln\">Hedley Byrne</span> fit together.",
    "NAME": "Customs and Excise v Barclays",
    "SUMMARY": [
        "The defendant negligently stated it had processed a Bank Account Freezing Order, when in fact it had not. The account was emptied."
    ],
    "HELD": [
        "In the court of appeal, Peter Gibson, Longmore and Lindsay LLJ held that there was <span class=\"bd\">no duty</span> and proposed Hedley Byrne be subsumed into the <span class=\"lnk caseln\">Caparo</span> test. In the Lords, because the defendant was merely complying with the law, no <span class=\"lnk caseln\">Hedley Byrne</span>-style assumption of responsibility could have arisen, and it would not be fair, just and reasonable to impose liability."
    ],
    "FLAGS": [
        "Key",
        "Leading",
        "EPLR"
    ],
    "NUMBER": "222",
    "CATEGORIES": [
        "Pure Economic Loss",
        "Negligent Misstatement",
        "Floodgates",
        "Defendant's Knowledge"
    ],
    "CATEGORY": "Pure Economic Loss &mdash; Negligent Misstatement &mdash; Floodgates &mdash; Defendant's Knowledge",
    "COURT": "UKHL",
    "CITATION": "Customs and Excise Commissioners v Barclays Bank [2007] UKHL 28",
    "YEAR": "2007"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Customs and Excise v Barclays",
        "James McNaughton v Hicks Anderson",
        "Chaudry v Prabhaker",
        "Lennon v Metropolitan Police Commissioner",
        "Hedley Byrne v Heller",
        "Howard Marine Dredging v Ogden & Sons",
        "Spring v Guardian Assurance",
        "White v Jones",
        "Smith v Bush",
        "Esso v Mardon",
        "Henderson v Merrett",
        "Candler v Crane & Christmas"
    ],
    "NAME": "Patchett v Swimming Pool Trades Association",
    "SUMMARY": [
        "The claimant, wanting a swimming pool, found a contractor listed on the respondent&#8217;s website, on which there were boasts about vetting of members prior to admission; but also a warning to make independent enquiries. The contractor went bust, and the claimant sued the website."
    ],
    "HELD": [
        "There is a need for independent enquiry when engaging contractors, particularly for relatively large sums &mdash; here, \u00a350K. To take a website&#8217;s word for it, was too rash for the claim to succeed."
    ],
    "FLAGS": [
        "Recent"
    ],
    "AKA": "Patchett",
    "YEAR": "2009",
    "CATEGORIES": [
        "Pure Economic Loss",
        "Negligent Misstatement",
        "Floodgates",
        "Claimant's Enquiries"
    ],
    "CATEGORY": "Pure Economic Loss &mdash; Negligent Misstatement &mdash; Floodgates &mdash; Claimant's Enquiries",
    "COURT": "EWCA",
    "CITATION": "Patchett v Swimming Pool Trades Association [2009] EWCA Civ 717",
    "NUMBER": "223"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Private Nuisance - Defences and Remedies",
        "Public Nuisance",
        "The Rule in Rylands v Fletcher",
        "Duty of Care",
        "Psychiatric Harm",
        "Pure Economic Loss",
        "Defamation - Remedies",
        "Defamation - Defences I",
        "Remoteness",
        "Product Liability",
        "Foreseeability",
        "Defamation - Defences II - Privilege"
    ],
    "NAME": "Private Nuisance",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance",
    "SUMMARY": [
        "Private Nuisance <span class=\"it\">would have been an excellent name for a character in a 1960s American army sitcom.</span>",
        "<span class=\"ud\"><span class=\"bd\">What types are there?</span> </span><br>&emsp;&emsp;From <span class=\"lnk caseln\">Hunter v Canary Wharf</span> per Lord Lloyd:<br>&emsp;&emsp;<span class=\"bd\">(1)</span> Encroachment, e.g., branches of trees; <span class=\"bd\">(2)</span> direct physical injury to the <span class=\"it\">land</span>, and <span class=\"bd\">(3)</span> interference.  Observe the absence of <span class=\"bd\">personal injury</span> from that list.",
        "<span class=\"bd\">Private Nuisance</span>, per Scott LJ in <span class=\"lnk caseln\">Read v Lyons</span>, is &#8216;an unlawful interference with a person&#8217;s use or enjoyment of his land, or some right over, or in connection with, that land.&#8217;",
        "The damage must be <span class=\"bd\">foreseeable</span> &mdash; <span class=\"lnk caseln\">Cambridge Water v Eastern Counties Leather</span>.",
        "Factors the court will examine include:<br>&emsp;&emsp;<span class=\"bd\">Locality of the nuisance</span> &mdash; <span class=\"lnk caseln\">Sturges v Bridgman</span> [1879], <span class=\"lnk caseln\">St Helens Smelting v Tipping</span>, <span class=\"lnk caseln\">Coventry v Lawrence</span>.<br>&emsp;&emsp;<span class=\"bd\">Sensitivity of the claimant&#8217;s use</span> of his land will be assessed objectively &mdash; <span class=\"lnk caseln\">Robinson v Kilvert</span>, although not if the defendant has acted <span class=\"bd\">maliciously</span> &mdash; <span class=\"lnk caseln\">Hollywood Silver Fox Farm</span>.<br>&emsp;&emsp;<span class=\"bd\">Duration</span> &mdash; even a single event is enough <span class=\"lnk caseln\">British Celanese v Hunt</span>, <span class=\"lnk caseln\">Crown River Cruises v Kimbolton</span>.<br>&emsp;&emsp;<span class=\"bd\">Public benefit</span> of the nuisance &mdash; <span class=\"lnk caseln\">Miller v Jackson</span> and C19th case of <span class=\"lnk caseln\">Bamford v Turnley</span>. Only relevant for remedy: <span class=\"it\">damages</span> rather than the more usual <span class=\"it\">injunction</span>.<br>&emsp;&emsp;<span class=\"bd\">Article 8</span> rights may be claimed if the benuisanced property is a family home, and if the common law requirement of having property rights is not fulfilled.",
        "<span class=\"ud\"><span class=\"bd\">Is <span class=\"it\">Fault</span> Required?</span></span><br>&emsp;&emsp;Not if the nuisance is adopted and continued, and no measures are taken to stop it &mdash; <span class=\"lnk caseln\">Sedleigh-Denfield v O&#8217;Callaghan</span>, <span class=\"lnk caseln\">Lippiatt v South Gloucestershire</span>, even if the nuisance is of natural origin &mdash; <span class=\"lnk caseln\">Holbeck Hall Hotel v Scarborough</span>.",
        "<span class=\"ud\"><span class=\"bd\">Who can sue?</span></span><br>&emsp;&emsp;See <span class=\"lnk caseln\">Hunter v Canary Wharf</span> per, again, Lord Lloyd. The <span class=\"bd\">owner</span> or the <span class=\"bd\">occupier</span> with rights of exclusive occupation: those having <span class=\"it\">an interest in the land</span>. Not mere licensees &mdash; <span class=\"lnk caseln\">Malone v Laskey</span>. A departure for pragmatism is <span class=\"lnk caseln\">Khoransandjian</span>, but this has been overruled.",
        "<span class=\"ud\"><span class=\"bd\">Who can <span class=\"it\">be</span> sued?</span></span><br>&emsp;&emsp;The <span class=\"bd\">creator</span> of the nuisance &mdash; <span class=\"lnk caseln\">Hussain v Lancaster</span>, the <span class=\"bd\">occupier</span> &mdash; <span class=\"lnk caseln\">Matania v National Provincial</span>. The occupier who <span class=\"bd\">adopts or continues</span> a nuisance created by a <span class=\"bd\">trespasser</span> &mdash; <span class=\"lnk caseln\">Sedleigh-Denfield v O&#8217;Callaghan</span>, or by <span class=\"bd\">mother nature</span> &mdash; <span class=\"lnk caseln\">Holbeck Hall Hotel v Scarborough</span>.<br>&emsp;&emsp;The (absent) <span class=\"bd\">landlord</span> who, impliedly, expressedly or foreseeably, authorizes a nuisance &mdash; <span class=\"lnk caseln\">Tetley v Chitty</span>, <span class=\"lnk caseln\">Hussain v Lancaster</span>, <span class=\"lnk caseln\">Lippiatt v South Gloucestershire</span>. But only if the nuisance was a highly-probable result of the let &mdash; <span class=\"lnk caseln\">Coventry v Lawrence (no 2)</span>."
    ],
    "#SUMMARY": "<span class=\"bd\">(1)</span> An unreasonable interference; <span class=\"bd\">(2)</span> with the claimant&#8217;s <span class=\"it\">use</span> or <span class=\"it\">enjoyment</span> of the land; <span class=\"bd\">(3)</span> the defendant was responsible.",
    "NUMBER": "224"
},
{
    "TYPE": "Reading",
    "RELATED": [
        "Occupiers' Liability - Reading",
        "Psychiatric Harm - Reading",
        "Employers' Liability - Reading",
        "Duty of Care - Reading",
        "Duty of Care - Public Authorities - Reading",
        "Remoteness - Reading",
        "Breach of Duty - Reading",
        "Causation - Reading"
    ],
    "NAME": "Nuisance - Reading",
    "CATEGORIES": [
        "Nuisance",
        "Public Nuisance",
        "Private Nuisance",
        "Rylands v Fletcher"
    ],
    "CATEGORY": "Nuisance &mdash; Public Nuisance &mdash; Private Nuisance &mdash; Rylands v Fletcher",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Essential</span></span>",
        "Steele, <span class=\"it\">Tort Law</span>, chapters 10 and 11",
        "<span class=\"lnk caseln\">Hunter v Canary Wharf</span> &mdash; <span class=\"lnk caseln\">Cambridge Water v Eastern Counties Leather</span> &mdash; <span class=\"lnk caseln\">Sturges v Bridgman</span> &mdash; <span class=\"lnk caseln\">St Helens Smelting v Tipping</span> &mdash; <span class=\"lnk caseln\">Coventry v Lawrence</span> &mdash; <span class=\"lnk caseln\">Dennis v MoD</span> &mdash; <span class=\"lnk caseln\">Marcic v Thames Water</span> &mdash; <span class=\"lnk caseln\">Sedleigh-Denfield v O&#8217;Callaghan</span> &mdash; <span class=\"lnk caseln\">Lippiatt v South Gloucestershire</span> &mdash; <span class=\"lnk caseln\">Dobson v Thames Water</span> &mdash; <span class=\"lnk caseln\">McKenna v British Aluminium</span> &mdash; <span class=\"lnk caseln\">Coventry v Lawrence (no 2)</span> &mdash; <span class=\"lnk caseln\"> 1Barr &amp; Ors v Biffa</span> &mdash; <span class=\"lnk caseln\">AG v PYA Quarries</span> &mdash; <span class=\"lnk caseln\">Rylands v Fletcher</span> &mdash; <span class=\"lnk caseln\">Transco v Stockport</span> &mdash; <span class=\"lnk caseln\">Rickards v Lothian</span>",
        "<span class=\"ud\"><span class=\"bd\">Additional</span></span>",
        "R. Bagshaw, <span class=\"it\">Rylands Confined</span> (2004) 120 LQR 388<br> D. Howarth, <span class=\"it\">Noise and Nuisance</span> (2014) 73 LQR 247<br> M. Lee, <span class=\"it\">Private Nuisance in the House of Lords: Back to Basics</span> (2004) 15 KCLJ 417<br> M. Lee, <span class=\"it\">What is Private Nuisance?</span> (2003) 119 LQR 298<br> D. Nolan, <span class=\"it\">The Distinctiveness of Rylands v Fletcher</span> (2005) 121 LQR 421<br> S. Tofaris, <span class=\"it\">Rylands v Fletcher Restricted Further</span> (2009) CLJ 273<br> D. Wilkinson, <span class=\"it\">Cambridge Water Company v Eastern Counties Leather Plc: Diluting Liability for Continuing Escapes</span> (1994) MLR 1994 799",
        "<span class=\"lnk caseln\">Read v Lyons</span> &mdash; <span class=\"lnk caseln\">Robinson v Kilvert</span> &mdash; <span class=\"lnk caseln\">British Celanese v Hunt</span> &mdash; <span class=\"lnk caseln\">Crown River Cruises v Kimbolton</span> &mdash; <span class=\"lnk caseln\">Miller v Jackson</span> &mdash; <span class=\"lnk caseln\">Bamford v Turnley</span> &mdash; <span class=\"lnk caseln\">Christie v Davey</span> &mdash; <span class=\"lnk caseln\">Hollywood Silver Fox Farm v Emmett</span> &mdash; <span class=\"lnk caseln\">Holbeck Hall Hotel v Scarborough</span> &mdash; <span class=\"lnk caseln\">Malone v Laskey</span> &mdash; <span class=\"lnk caseln\">Khoransandjian v Bush</span> &mdash; <span class=\"lnk caseln\">Dobson v Thames Water</span> &mdash; <span class=\"lnk caseln\">McKenna v British Aluminium</span> &mdash; <span class=\"lnk caseln\">Hussain v Lancaster</span> &mdash; <span class=\"lnk caseln\">Matania v National Provincial</span> &mdash; <span class=\"lnk caseln\">Harris v James</span> &mdash; <span class=\"lnk caseln\">Tetley v Chitty</span> &mdash; <span class=\"lnk caseln\">Adams v Ursell</span> &mdash; <span class=\"lnk caseln\">Allen v Gulf Oil Refining</span> &mdash; <span class=\"lnk caseln\">Gillingham v Medway Dock Co</span> &mdash; <span class=\"lnk caseln\">Kennaway v Thompson</span> &mdash; <span class=\"lnk caseln\">Bone v Searle</span> &mdash; <span class=\"lnk caseln\">R v Rimmington and R v Goldstien</span> &mdash; <span class=\"lnk caseln\">Dymond v Pearce </span> &mdash; <span class=\"lnk caseln\">Tate &amp; Lyle v GLC</span> &mdash; <span class=\"lnk caseln\">The Rule in Rylands v Fletcher</span> &mdash; <span class=\"lnk caseln\">Gore v Stannard (Wyvern Tyres)</span> &mdash; <span class=\"lnk caseln\">LMS Int v Styrene</span> &mdash; <span class=\"lnk caseln\">Ellison v MoD</span> &mdash; <span class=\"lnk caseln\">Ponting v Noakes</span> &mdash; <span class=\"lnk caseln\">Rickards v Lothian</span> &mdash; <span class=\"lnk caseln\">Tennent v Earl of Glasgow</span>."
    ],
    "NUMBER": "225"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Holbeck Hall Hotel v Scarborough",
        "Gillingham v Medway Dock Co",
        "McKenna v British Aluminium",
        "Hollywood Silver Fox Farm v Emmett",
        "Harris v James",
        "Malone v Laskey",
        "Bamford v Turnley",
        "Sedleigh-Denfield v O'Callaghan",
        "St Helens Smelting v Tipping",
        "British Celanese v Hunt",
        "Tetley v Chitty",
        "Dennis v MoD"
    ],
    "NAME": "Read v Lyons",
    "SUMMARY": [
        "The claimant, employed by the MoD, was injured by a shell that exploded as she inspected an armaments factory."
    ],
    "HELD": [
        "Scott LJ &mdash; nuisance is <span class=\"it\">&#8216;an unlawful interference with a person&#8217;s use or enjoyment of his land, or some right over, or in connection with, that land.&#8217;</span>"
    ],
    "YEAR": "1945",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance",
    "CITATION": "Read v Lyons [1945] EWCA KB 216",
    "COURT": "EWCA",
    "FLAGS": [
        "Development"
    ],
    "NUMBER": "226"
},
{
    "TYPE": "Case",
    "RELATED": [
        "McKenna v British Aluminium",
        "Khoransandjian v Bush",
        "Malone v Laskey",
        "Coventry v Lawrence (no 2)",
        "Sedleigh-Denfield v O'Callaghan",
        "Holbeck Hall Hotel v Scarborough",
        "Robinson v Kilvert",
        "Gillingham v Medway Dock Co",
        "Lippiatt v South Gloucestershire",
        "Read v Lyons",
        "Kennaway v Thompson",
        "Crown River Cruises v Kimbolton"
    ],
    "NAME": "Hunter v Canary Wharf",
    "SUMMARY": [
        "The claimant and others brought an action against the defendant construction company because the buildings they&#8217;d erected <span class=\"it\">interfered with their telly reception</span>. The CA ruled, however, that there was no cause of action in private nuisance for this."
    ],
    "HELD": [
        "The HL confirmed the CA ruling that the right to build was not restricted by potential for interrupting reception of TV signals on another&#8217;s land. This case was akin to a vista having been spoiled by the legal putting-up of an ugly building: for this there is no cause of action in English law.",
        "Lord Lloyd &mdash; private nuisances are of three kinds: (1) encroachment (e.g., tree branches); (2) direct physical injury to a neighbour&#8217;s land; and (3) interference.",
        "&#8220;... In cases (1) and (2) it is the owner, or the occupier with the right to exclusive possession, who is entitled to sue. It has never, so far as I know, been suggested that anyone else can sue, for example, a visitor or a lodger.&#8221;"
    ],
    "YEAR": "1997",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Who can sue",
        "Trying it on"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Who can sue &mdash; Trying it on",
    "CITATION": "Hunter v Canary Wharf Ltd [1997] UKHL AC 655",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Development",
        "Amusing",
        "EPLR"
    ],
    "NUMBER": "227"
},
{
    "TYPE": "Case",
    "RELATED": [
        "St Helens Smelting v Tipping",
        "Adams v Ursell",
        "Bamford v Turnley",
        "McKenna v British Aluminium",
        "Malone v Laskey",
        "Tetley v Chitty",
        "Sedleigh-Denfield v O'Callaghan",
        "Khoransandjian v Bush",
        "Harris v James",
        "Lippiatt v South Gloucestershire",
        "Sturges v Bridgman",
        "Christie v Davey"
    ],
    "NAME": "Cambridge Water v Eastern Counties Leather",
    "SUMMARY": [
        "A dangerous chemical stored by the defendant seeped into the groundwater, polluting a borehole belonging to the claimant."
    ],
    "HELD": [
        "The use of the land from which the nuisance arises must be reasonable, and here it was <span class=\"it\">not</span>. But the damage caused by the nuisance must be reasonably foreseeable. On the facts, therefore, the claim failed.",
        "Goff LJ &mdash; <span class=\"lnk caseln\">Rylands v Fletcher</span> liability is an offshoot of nuisance."
    ],
    "YEAR": "1994",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Foreseeability of Nuisance",
        "Reasonableness of Use",
        "Rylands v Fletcher"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Foreseeability of Nuisance &mdash; Reasonableness of Use &mdash; Rylands v Fletcher",
    "CITATION": "Cambridge Water Co v Eastern Counties Leather plc [1994] UKHL 2 AC 264",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Leading",
        "EPLR"
    ],
    "NUMBER": "228"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Coventry v Lawrence",
        "St Helens Smelting v Tipping",
        "Dennis v MoD",
        "Gillingham v Medway Dock Co",
        "Allen v Gulf Oil Refining",
        "Adams v Ursell",
        "Hussain v Lancaster",
        "Bamford v Turnley",
        "Tennent v Earl of Glasgow",
        "Crown River Cruises v Kimbolton",
        "Robinson v Kilvert",
        "Rickards v Lothian"
    ],
    "NAME": "Sturges v Bridgman",
    "SUMMARY": [
        "The claimant, a doctor, moved next door to the defendant, a confectioner, who for many years had produced sweets in his kitchen, using employing some or other species of loud and clattery machinery for the purpose. The doctor built a <span class=\"it\">shed</span> (!) in his garden from which to practise. Disturbed by the constant noise, he sued his neighbour in private nuisance."
    ],
    "HELD": [
        "Coming to the nuisance is not a defence, and &#8220;what is not OK in Belgrave Square is OK in Bermondsey,&#8221; i.e., the character of the local environment must be accounted for when deciding whether something is a nuisance.",
        "Had there been twenty years&#8217; continuous nuisance, by contrast, the claim would have failed. See <span class=\"lnk caseln\">Coventry v Lawrence</span>."
    ],
    "YEAR": "1879",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Coming to the Nuisance",
        "Local Circumstances",
        "Defences"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Coming to the Nuisance &mdash; Local Circumstances &mdash; Defences",
    "CITATION": "Sturges v Bridgman (1879) EWCA 11 CH D 852",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "229"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Sturges v Bridgman",
        "Coventry v Lawrence",
        "Read v Lyons",
        "Hollywood Silver Fox Farm v Emmett",
        "Sedleigh-Denfield v O'Callaghan",
        "Holbeck Hall Hotel v Scarborough",
        "Gillingham v Medway Dock Co",
        "British Celanese v Hunt",
        "McKenna v British Aluminium",
        "Allen v Gulf Oil Refining",
        "Kennaway v Thompson",
        "Harris v James"
    ],
    "NAME": "St Helens Smelting v Tipping",
    "SUMMARY": [
        "The claimant bought a manor and 1300 acres a short distance from the defendant&#8217;s industrial premises. The fumes and ashes damaged the claimant&#8217;s crops and woodland. The defence claimed their use was reasonable, given the character of the locality, i.e., the presence of other factories and foundries."
    ],
    "HELD": [
        "The character of the locality is of <span class=\"it\">no</span> relevance where the nuisance has sustained property damage."
    ],
    "YEAR": "1865",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Coming to the Nuisance",
        "Local Circumstances",
        "Local Circumstances irrelevant where Property Damage"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Coming to the Nuisance &mdash; Local Circumstances &mdash; Local Circumstances irrelevant where Property Damage",
    "CITATION": "St Helens Smelting Co v Tipping (1865) 11 UKHL Cas 642",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "230"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Sturges v Bridgman",
        "Dennis v MoD",
        "Allen v Gulf Oil Refining",
        "Adams v Ursell",
        "Gillingham v Medway Dock Co",
        "St Helens Smelting v Tipping",
        "Marcic v Thames Water",
        "Coventry v Lawrence (no 2)",
        "Bone v Searle",
        "Tennent v Earl of Glasgow",
        "Kennaway v Thompson",
        "Hussain v Lancaster"
    ],
    "COMMENT": "This case important also in Land Law for what Lord Neuberger says about easements: you <span class=\"it\">can</span> have an easement to create noise.",
    "NAME": "Coventry v Lawrence",
    "SUMMARY": [
        "The defendant operator of a &#8216;speedway&#8217; had planning permission for one sort of activity (racing) dating back to 1975, but not for another sort (stock-car racing), which began in 1984. All this caused rather a lot of noise, blighting the claimant&#8217;s house, who sued in private nuisance. The defendant argued the absence of planning permission for stock-car racing had become irrelevant after <span class=\"bd\">twenty years&#8217; continuous operation</span>."
    ],
    "HELD": [
        "Planning permission is not a <span class=\"it\">key</span> factor in establishing a cause of action in private nuisance.",
        "Lord Neuberger &mdash; the twenty years do <span class=\"bd\">not</span> have to be <span class=\"bd\">consecutive</span>."
    ],
    "NUMBER": "231",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Planning Permission as Defence",
        "Coming to the Nuisance",
        "Defences",
        "20 years' Prescription"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Planning Permission as Defence &mdash; Coming to the Nuisance &mdash; Defences &mdash; 20 years' Prescription",
    "CITATION": "Coventry v Lawrence [2014] UKSC 13",
    "COURT": "UKSC",
    "FLAGS": [
        "Important",
        "EPLR",
        "Recent"
    ],
    "YEAR": "2014"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Matania v National Provincial",
        "Sturges v Bridgman",
        "Hollywood Silver Fox Farm v Emmett",
        "Christie v Davey",
        "Coventry v Lawrence (no 2)",
        "Bone v Searle",
        "Gillingham v Medway Dock Co",
        "Malone v Laskey",
        "Tetley v Chitty",
        "Coventry v Lawrence",
        "Dennis v MoD",
        "Allen v Gulf Oil Refining"
    ],
    "COMMENT": "<span class=\"it\">Being particularly vulnerable is not a defence.</span> Take heed, Peter.",
    "NAME": "Robinson v Kilvert",
    "SUMMARY": [
        "The first floor of a commercial premises, the basement of which was kept toasty at a constant 80&amp;deg;F, was rented by the claimant for use as a paper warehouse. Some of the paper was damaged by the heat."
    ],
    "HELD": [
        "There was no nuisance, as an objectively <span class=\"it\">ordinary</span> use of the premises would not have suffered the interference as <span class=\"it\">unreasonable</span>."
    ],
    "NUMBER": "232",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Sensitive Claimant"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Sensitive Claimant",
    "CITATION": "Robinson v Kilvert (1889) EWCA 41 Ch D 88",
    "COURT": "EWCA",
    "FLAGS": [
        "Important"
    ],
    "YEAR": "1889"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Crown River Cruises v Kimbolton",
        "Bamford v Turnley",
        "Christie v Davey",
        "Lippiatt v South Gloucestershire",
        "Malone v Laskey",
        "Read v Lyons",
        "Hollywood Silver Fox Farm v Emmett",
        "Marcic v Thames Water",
        "McKenna v British Aluminium",
        "Allen v Gulf Oil Refining",
        "Dennis v MoD",
        "Dobson v Thames Water"
    ],
    "NAME": "British Celanese v Hunt",
    "SUMMARY": [
        "Some metal foil strips blew from the defendant&#8217;s factory, on the same industrial estate as the claimant&#8217;s, into the estate&#8217;s electricity substation. This caused a power failure halting the claimant&#8217;s machines and necessitating their (costly and time-consuming) cleaning. The same thing had taken place three years before, for which the defendant had been warned by the electricity company. The claim was in <span class=\"lnk caseln\">Rylands v Fletcher</span> strict liability, negligence, and (public and private) nuisance.",
        "The defendant argued this was a mere <span class=\"it\">damnum abseque injuria</span>."
    ],
    "HELD": [
        "An isolated happening was enough for a claim in nuisance to succeed."
    ],
    "YEAR": "1969",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Duration of Interference"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Duration of Interference",
    "CITATION": "British Celanese Ltd v AH Hunt (Capacitors) Ltd [1969] 1 WLR 959",
    "COURT": "EWHC",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "233"
},
{
    "TYPE": "Case",
    "RELATED": [
        "British Celanese v Hunt",
        "Dennis v MoD",
        "Harris v James",
        "Tetley v Chitty",
        "Marcic v Thames Water",
        "Christie v Davey",
        "Bamford v Turnley",
        "Coventry v Lawrence",
        "Allen v Gulf Oil Refining",
        "Lippiatt v South Gloucestershire",
        "Kennaway v Thompson",
        "Hussain v Lancaster"
    ],
    "NAME": "Crown River Cruises v Kimbolton",
    "SUMMARY": [
        "Cinders from a firework display given by the defendant started a fire on a barge belonging to the claimant."
    ],
    "HELD": [
        "Although the nuisance only lasted just twenty minutes, the defendant was liable."
    ],
    "YEAR": "1996",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Duration of Interference"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Duration of Interference",
    "CITATION": "Crown River Cruises Ltd v Kimbolton Fireworks Ltd [1996] 2 Lloyd&#8217;s Rep 533",
    "COURT": "EWHC",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "234"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Gillingham v Medway Dock Co",
        "Christie v Davey",
        "Khoransandjian v Bush",
        "Lippiatt v South Gloucestershire",
        "British Celanese v Hunt",
        "Coventry v Lawrence (no 2)",
        "Coventry v Lawrence",
        "Kennaway v Thompson",
        "Allen v Gulf Oil Refining",
        "Dobson v Thames Water",
        "Marcic v Thames Water",
        "Dennis v MoD"
    ],
    "NAME": "Bamford v Turnley",
    "SUMMARY": [
        "The defendants, pioneers of self-reliance, fired their own kiln to make bricks to build a themselves a house. The fumes, however, poisoned the claimants <span class=\"it\">and their servants</span>, who sued to prevent the nuisance."
    ],
    "HELD": [
        "Reasonable use of land <span class=\"it\">in the public interest</span>, which nevertheless creates a nuisance, ought to be allowed to continue &mdash; but there is still liability for remedies other than injunction."
    ],
    "YEAR": "1862",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Public benefit of nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Public benefit of nuisance",
    "CITATION": "Bamford v Turnley (1862) 3 B&amp;S 66",
    "COURT": "",
    "FLAGS": [
        "Important",
        "Development"
    ],
    "NUMBER": "235"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Allen v Gulf Oil Refining",
        "Gillingham v Medway Dock Co",
        "Sturges v Bridgman",
        "Coventry v Lawrence",
        "Adams v Ursell",
        "North Western v London Guarantee",
        "Khoransandjian v Bush",
        "Tetley v Chitty",
        "Hussain v Lancaster",
        "Rickards v Lothian",
        "Robinson v Kilvert",
        "Ponting v Noakes"
    ],
    "NAME": "Dennis v MoD",
    "SUMMARY": [
        "The defendant flew aeroplanes close over the top of the claimant&#8217;s house."
    ],
    "HELD": [
        "Public benefit of nuisance will not operate as a defence to injunction where the nuisance is <span class=\"it\">unreasonable</span>."
    ],
    "YEAR": "2003",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Defences",
        "Public Benefit"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Defences &mdash; Public Benefit",
    "CITATION": "Dennis v Ministry of Defence [2003] EWHC 793",
    "COURT": "EWHC",
    "FLAGS": [
        "Important",
        "Amusing",
        "EPLR"
    ],
    "NUMBER": "236"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Dobson v Thames Water",
        "McKenna v British Aluminium",
        "Read v Lyons",
        "Malone v Laskey",
        "Dennis v MoD",
        "Hollywood Silver Fox Farm v Emmett",
        "Harris v James",
        "Coventry v Lawrence (no 2)",
        "Bone v Searle",
        "British Celanese v Hunt",
        "Matania v National Provincial",
        "Tetley v Chitty"
    ],
    "NAME": "Marcic v Thames Water",
    "SUMMARY": [
        "Effluent from the defendant&#8217;s sewerage system backed up into a house regularly, flooding it. The claimant argued this amounted to a breach of his Art 8 (family life) rights."
    ],
    "HELD": [
        "The claim failed on the facts, but there might be a cause of action in Art 8 where there&#8217;s none in nuisance."
    ],
    "YEAR": "2003",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Art. 8 in Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Art. 8 in Nuisance",
    "CITATION": "Marcic v Thames Water Utilities Ltd [2003] UKHL 66",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "237"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Hollywood Silver Fox Farm v Emmett",
        "Hussain v Lancaster",
        "Bone v Searle",
        "Cambridge Water v Eastern Counties Leather",
        "Harris v James",
        "Sturges v Bridgman",
        "Tetley v Chitty",
        "Marcic v Thames Water",
        "Matania v National Provincial",
        "Malone v Laskey",
        "Allen v Gulf Oil Refining",
        "St Helens Smelting v Tipping"
    ],
    "NAME": "Christie v Davey",
    "SUMMARY": [
        "The claimants were music teachers, whose music had got so thoroughly up the nose of the defendant that he began banging on the walls, clashing pots and pans, shouting and generally being an obnoxious little <span class=\"it\">fucker</span>."
    ],
    "HELD": [
        "Actions motivated by malice can indeed constitute a nuisance."
    ],
    "YEAR": "1893",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Malicious Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Malicious Nuisance",
    "CITATION": "Christie v Davey [1893] 1 Ch 316",
    "COURT": "EWCA",
    "FLAGS": [
        "Amusing"
    ],
    "NUMBER": "238"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Christie v Davey",
        "Hunter v Canary Wharf",
        "Lippiatt v South Gloucestershire",
        "Allen v Gulf Oil Refining",
        "Harris v James",
        "Marcic v Thames Water",
        "Read v Lyons",
        "Bamford v Turnley",
        "McKenna v British Aluminium",
        "St Helens Smelting v Tipping",
        "Matania v National Provincial",
        "Cambridge Water v Eastern Counties Leather"
    ],
    "NAME": "Hollywood Silver Fox Farm v Emmett",
    "SUMMARY": [
        "The defendant property developer objected to a neighbour breeding <span class=\"it\">silver foxes</span> (on grounds, presumably, of bad taste), so had someone go around the perimeter of the land firing off a shotgun, to stop the foxes breeding. Such beasts are, say the headnotes, particularly timid."
    ],
    "HELD": [
        "Although there was abnormal sensitivity, the defendant was liable for nuisance because he acted out of malice. Cf. <span class=\"lnk caseln\">Robinson v Kilvert</span>."
    ],
    "AKA": "Hollywood Silver Fox Farm",
    "NUMBER": "239",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Malicious Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Malicious Nuisance",
    "CITATION": "Hollywood Silver Fox Farm v Emmett [1936] 2 KB 141",
    "COURT": "EWCA",
    "FLAGS": [
        "Amusing"
    ],
    "YEAR": "1936"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Lippiatt v South Gloucestershire",
        "Holbeck Hall Hotel v Scarborough",
        "Marcic v Thames Water",
        "Harris v James",
        "Allen v Gulf Oil Refining",
        "Dobson v Thames Water",
        "Coventry v Lawrence (no 2)",
        "St Helens Smelting v Tipping",
        "Crown River Cruises v Kimbolton",
        "Gillingham v Medway Dock Co",
        "Bamford v Turnley",
        "British Celanese v Hunt"
    ],
    "NAME": "Sedleigh-Denfield v O'Callaghan",
    "SUMMARY": [
        "The local authority had undertaken work to improve the drainage of the defendant&#8217;s land. This work was undertaken negligently &mdash; the grill to a culvert, a type of gulley, had been put in the wrong place."
    ],
    "HELD": [
        "Adoption or continuation of a nuisance (i.e., with knowledge or presumed knowledge, not having taken reasonable steps to address it) gives rise to liability, whether or not the defendant <span class=\"it\">caused</span> the nuisance."
    ],
    "YEAR": "1940",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Fault for Nuisance",
        "Adoption or Continuation of Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Fault for Nuisance &mdash; Adoption or Continuation of Nuisance",
    "CITATION": "Sedleigh-Denfield v O&#8217;Callaghan [1940] UKHL 8",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Important",
        "EPLR"
    ],
    "NUMBER": "240"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Sedleigh-Denfield v O'Callaghan",
        "Holbeck Hall Hotel v Scarborough",
        "Robinson v Kilvert",
        "Hussain v Lancaster",
        "McKenna v British Aluminium",
        "Crown River Cruises v Kimbolton",
        "Marcic v Thames Water",
        "Bone v Searle",
        "Gillingham v Medway Dock Co",
        "Kennaway v Thompson",
        "St Helens Smelting v Tipping",
        "Tetley v Chitty"
    ],
    "NAME": "Lippiatt v South Gloucestershire",
    "SUMMARY": [
        "Gypsies had set up camp on a field owned by the defendant next to the claimant&#8217;s property. They used the land as a &#8220;lauchpad&#8221; for causing nuisance to a the surrounding land including that of the claimant, getting up to all sorts of standard-issue Gypsy nuisance. The council knew of this but reacted ineffectually, and did not evict."
    ],
    "HELD": [
        "Following <span class=\"lnk caseln\">Hussain v Lancaster</span>, there is liability for repeated acts of nuisance caused by third parties in occupation of a defendant&#8217;s land, where no steps are taken to evict."
    ],
    "YEAR": "2000",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Fault for Nuisance",
        "Adoption or Continuation of Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Fault for Nuisance &mdash; Adoption or Continuation of Nuisance",
    "CITATION": "Lippiatt v South Gloucestershire Council [2000] QB 51",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Amusing",
        "EPLR"
    ],
    "NUMBER": "241"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Sedleigh-Denfield v O'Callaghan",
        "Lippiatt v South Gloucestershire",
        "Hussain v Lancaster",
        "Bone v Searle",
        "British Celanese v Hunt",
        "Marcic v Thames Water",
        "Dennis v MoD",
        "Robinson v Kilvert",
        "Tetley v Chitty",
        "Coventry v Lawrence (no 2)",
        "Hollywood Silver Fox Farm v Emmett",
        "Coventry v Lawrence"
    ],
    "NAME": "Holbeck Hall Hotel v Scarborough",
    "SUMMARY": [
        "The cliffs under the claimant gave way during a particularly heavy storm, in a fairly large-scale textbook example of a <span class=\"it\">rotational sheer</span> landslide. The claimant sued for their loss of amenity, arguing the landowner, knowing of the hazard, owed them a duty."
    ],
    "HELD": [
        "There was indeed a duty to prevent foreseeable natural risks of nuisance, but on the facts, the magnitude of the hazard affecting the claimant&#8217;s land was unforeseeable."
    ],
    "YEAR": "2000",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Fault for Nuisance",
        "Nuisance caused by Acts of Nature"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Fault for Nuisance &mdash; Nuisance caused by Acts of Nature",
    "CITATION": "Holbeck Hall Hotel Ltd v Scarborough Borough Council [2000] QB 836",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Important"
    ],
    "NUMBER": "242"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Hunter v Canary Wharf",
        "Khoransandjian v Bush",
        "McKenna v British Aluminium",
        "Robinson v Kilvert",
        "Harris v James",
        "Matania v National Provincial",
        "Cambridge Water v Eastern Counties Leather",
        "British Celanese v Hunt",
        "Lippiatt v South Gloucestershire",
        "Bone v Searle",
        "Crown River Cruises v Kimbolton",
        "Sedleigh-Denfield v O'Callaghan"
    ],
    "NAME": "Malone v Laskey",
    "SUMMARY": [
        "Vibrations from an engine on the defendant&#8217;s property, which ajoined the tithe house in which she lived, caused the lavatory cistern to work loose and fall on her. She and her husband only had a license to live there."
    ],
    "HELD": [
        "To sue in nuisance requires a proprietary interest in the affected land &mdash; a mere licensee cannot sue."
    ],
    "YEAR": "1907",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Who can sue"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Who can sue",
    "CITATION": "Malone v Laskey [1907] 2 KB 141",
    "COURT": "",
    "FLAGS": [
        "Important",
        "Overruled",
        "Amusing"
    ],
    "NUMBER": "243"
},
{
    "TYPE": "Case",
    "RELATED": [
        "McKenna v British Aluminium",
        "Hunter v Canary Wharf",
        "Malone v Laskey",
        "Harris v James",
        "Coventry v Lawrence",
        "Hussain v Lancaster",
        "British Celanese v Hunt",
        "Dennis v MoD",
        "Sedleigh-Denfield v O'Callaghan",
        "Matania v National Provincial",
        "Adams v Ursell",
        "Allen v Gulf Oil Refining"
    ],
    "COMMENT": "What might explain such a departure from precedent (since overruled) was that this took place before the law contained adequate protection for victims of harassment in the form of, e.g., the <span class=\"it\">Protection from Harassment Act 1997</span>.",
    "NAME": "Khoransandjian v Bush",
    "SUMMARY": [
        "The claimant wanted an injunction to prevent the defendant, a 23-year-old chap, continuing to harass her, an 18-year-old chapesse &mdash; but the chief manifestation of the nuisance was telephone calls to her <span class=\"it\">parents&#8217; house</span>, where the claimant had no proprietary interest."
    ],
    "HELD": [
        "Harassment was actionable in private nuisance <span class=\"it\">despite</span> not having a proprietary interest in the affected property.",
        "Cf. <span class=\"lnk caseln\">Malone v Laskey</span>."
    ],
    "AKA": "Khoransandjian",
    "NUMBER": "244",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Who can sue"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Who can sue",
    "CITATION": "Khoransandjian v Bush [1993] QB 727",
    "COURT": "EWCA",
    "FLAGS": [
        "Overruled"
    ],
    "YEAR": "1993"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Marcic v Thames Water",
        "McKenna v British Aluminium",
        "Lippiatt v South Gloucestershire",
        "Read v Lyons",
        "Adams v Ursell",
        "Christie v Davey",
        "Gillingham v Medway Dock Co",
        "Khoransandjian v Bush",
        "Holbeck Hall Hotel v Scarborough",
        "Sturges v Bridgman",
        "Hollywood Silver Fox Farm v Emmett",
        "Sedleigh-Denfield v O'Callaghan"
    ],
    "NAME": "Dobson v Thames Water",
    "SUMMARY": [
        "A joint claim by more than a thousand people, freeholders, leaseholders and those <span class=\"it\">without any property rights</span> in the affected properties. Mogden Sewage Works, operated by the defendant, was a cause of smell and mosquitos. The point of law was whether art. 8 claims the second class of claimants would be entitled to damages in addition to those who received damages in nuisance."
    ],
    "HELD": [
        "No double-remedies were to be awarded. The common-law damages paid for the nuisance to householders were intended to recompense the households, not merely the household<span class=\"it\">ers</span>."
    ],
    "YEAR": "2009",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Art. 8 in Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Art. 8 in Nuisance",
    "CITATION": "Dobson v Thames Water Utilities [2009] EWCA Civ 28",
    "COURT": "EWCA",
    "FLAGS": [
        "Interesting",
        "Important",
        "EPLR",
        "Recent"
    ],
    "NUMBER": "245"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Malone v Laskey",
        "Marcic v Thames Water",
        "Khoransandjian v Bush",
        "Hunter v Canary Wharf",
        "Dobson v Thames Water",
        "Lippiatt v South Gloucestershire",
        "Coventry v Lawrence (no 2)",
        "Hussain v Lancaster",
        "Tetley v Chitty",
        "Sturges v Bridgman",
        "Allen v Gulf Oil Refining",
        "Harris v James"
    ],
    "COMMENT": "A Neuberger J case.",
    "NAME": "McKenna v British Aluminium",
    "SUMMARY": [
        "A group of claimants sued the defendant in nuisance for emissions from their factory."
    ],
    "HELD": [
        "Although the law conferred a course of action in <span class=\"lnk caseln\">Rylands v Fletcher</span> only on those with an interest in the affected land, the HRA 1998 in effect extended the rule to include those who did <span class=\"it\">not</span>."
    ],
    "NUMBER": "246",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Who can sue",
        "Art. 8 in Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Who can sue &mdash; Art. 8 in Nuisance",
    "CITATION": "McKenna v British Aluminium Ltd [2003] Env LR 30",
    "COURT": "EWHC",
    "FLAGS": [
        "Key",
        "EPLR"
    ],
    "YEAR": "2003"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Tetley v Chitty",
        "Harris v James",
        "Matania v National Provincial",
        "Coventry v Lawrence (no 2)",
        "Marcic v Thames Water",
        "Sedleigh-Denfield v O'Callaghan",
        "Lippiatt v South Gloucestershire",
        "Bone v Searle",
        "Kennaway v Thompson",
        "Bamford v Turnley",
        "Adams v Ursell",
        "Gillingham v Medway Dock Co"
    ],
    "NAME": "Hussain v Lancaster",
    "SUMMARY": [
        "The claimant, a shopkeeper, was subject to serious incidents of racial abuse by tenants from the council estate on which he had his shop. He sued the council for negligence and nuisance, on the grounds that they had failed to throw out the ratbag racists for breaching the express term forbidding racial abuse in their tenancy agreements."
    ],
    "HELD": [
        "The person to sue is <span class=\"it\">generally</span> the creator of the nuisance, not the landlord, unless they had authorized the nuisance.",
        "See also <span class=\"lnk caseln\">Lippiatt v South Gloucestershire</span>."
    ],
    "YEAR": "2000",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Who can be sued"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Who can be sued",
    "CITATION": "Hussain v Lancaster CC [2000] QB 1",
    "COURT": "",
    "FLAGS": [
        "Key",
        "Important"
    ],
    "NUMBER": "247"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Hussain v Lancaster",
        "Tetley v Chitty",
        "Harris v James",
        "Coventry v Lawrence (no 2)",
        "Bone v Searle",
        "Dennis v MoD",
        "St Helens Smelting v Tipping",
        "Sedleigh-Denfield v O'Callaghan",
        "Gillingham v Medway Dock Co",
        "Marcic v Thames Water",
        "Dobson v Thames Water",
        "Adams v Ursell"
    ],
    "NAME": "Matania v National Provincial",
    "SUMMARY": [
        "A singing teacher leased a second-floor flat from which to teach. He moved in and began giving lessons. Then a first-floor flat was granted to someone else, who, with the landlords permission, set about three months of enthusiastic structural modifications, necessitating the usual repertoire of dismaying noise &mdash; hammering, sawing and drilling. The effect of this was to prevent the singing teacher from teaching. He sued the landlord."
    ],
    "HELD": [
        "In consenting to a nuisance being caused, an owner is liable for the nuisance caused by another from his land."
    ],
    "YEAR": "1936",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Who can be sued"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Who can be sued",
    "CITATION": "Matania v National Provincial Bank [1936] 2 All ER 633",
    "COURT": "EWCA",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "248"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Tetley v Chitty",
        "Coventry v Lawrence (no 2)",
        "Hussain v Lancaster",
        "Matania v National Provincial",
        "Lippiatt v South Gloucestershire",
        "Dennis v MoD",
        "Allen v Gulf Oil Refining",
        "Gillingham v Medway Dock Co",
        "Holbeck Hall Hotel v Scarborough",
        "Sturges v Bridgman",
        "Coventry v Lawrence",
        "Bamford v Turnley"
    ],
    "NAME": "Harris v James",
    "SUMMARY": [
        "The facts of this case are nowhere to be found. Neither the googles, nor westlaw, nor lexis nexis has a copy, and I&#8217;m certainly not thumbing around upstairs for it."
    ],
    "HELD": [
        "A landlord who authorizes a nuisance, expressedly or impliedly, is liable."
    ],
    "YEAR": "1876",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Who can be sued",
        "Landlords"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Who can be sued &mdash; Landlords",
    "CITATION": "Harris v James (1876) 45 LJ QB 545",
    "COURT": "EWHC",
    "FLAGS": [
        "Important",
        "Development"
    ],
    "NUMBER": "249"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Coventry v Lawrence (no 2)",
        "Harris v James",
        "Hussain v Lancaster",
        "Matania v National Provincial",
        "St Helens Smelting v Tipping",
        "Lippiatt v South Gloucestershire",
        "Khoransandjian v Bush",
        "Marcic v Thames Water",
        "Hunter v Canary Wharf",
        "Crown River Cruises v Kimbolton",
        "Sturges v Bridgman",
        "British Celanese v Hunt"
    ],
    "NAME": "Tetley v Chitty",
    "SUMMARY": [
        "The defendant had given permission to its tenant to open a <span class=\"it\">go-kart club</span> on their land."
    ],
    "HELD": [
        "A landlord who authorizes an activity which could <span class=\"it\">foreseeably</span> be a nuisance, is liable."
    ],
    "YEAR": "1986",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Who can be sued",
        "Landlords"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Who can be sued &mdash; Landlords",
    "CITATION": "Tetley v Chitty [1986] EWHC 1 All ER 663",
    "COURT": "EWHC",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "250"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Tetley v Chitty",
        "Harris v James",
        "Hussain v Lancaster",
        "Matania v National Provincial",
        "Christie v Davey",
        "Hollywood Silver Fox Farm v Emmett",
        "Kennaway v Thompson",
        "Marcic v Thames Water",
        "Allen v Gulf Oil Refining",
        "Sturges v Bridgman",
        "St Helens Smelting v Tipping",
        "Coventry v Lawrence"
    ],
    "NAME": "Coventry v Lawrence (no 2)",
    "SUMMARY": [
        "Some washing up from <span class=\"lnk caseln\">Coventry v Lawrence</span>, including on the point of whether the landlord had authorized the nuisance."
    ],
    "HELD": [
        "In order to be said to have authorized the nuisance, a landlord must not only have been <span class=\"bd\">aware</span> and have <span class=\"bd\">neglected to take steps</span> to reduce it, <span class=\"bd\">but also</span> the claimant must show a high probability that the nuisance was an inevitable consequence of letting the property out."
    ],
    "YEAR": "2014",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Who can be sued",
        "Landlords"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Who can be sued &mdash; Landlords",
    "CITATION": "Coventry v Lawrence (no 2) [2014] UKSC 46",
    "COURT": "UKSC",
    "FLAGS": [
        "Important",
        "EPLR",
        "Recent"
    ],
    "NUMBER": "251"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Private Nuisance",
        "Public Nuisance",
        "Defamation - Defences II - Privilege",
        "Defences to Negligence",
        "The Rule in Rylands v Fletcher",
        "Defamation - Remedies",
        "Defamation - Defences I",
        "Duty of Care - Public Authorities",
        "Employers' Primary Liability",
        "Occupiers' Liability",
        "Causation - The Fairchild Exception",
        "Vicarious Liability"
    ],
    "NUMBER": "252",
    "NAME": "Private Nuisance - Defences and Remedies",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Defences",
        "Remedies"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Defences &mdash; Remedies",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Generally Ineffective Defences</span></span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\">Coming to the nuisance</span> &mdash; <span class=\"lnk caseln\">Sturges v Bridgman</span>, <span class=\"lnk caseln\">Coventry v Lawrence</span>.</span></li><li><span class=\"nl\"><span class=\"bd\">Public utility</span> &mdash; <span class=\"lnk caseln\">Adams v Ursell</span>, <span class=\"lnk caseln\">Dennis v MoD</span>.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Generally Effective</span></span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\">Twenty years&#8217; prescription</span> &mdash; <span class=\"lnk caseln\">Sturges v Bridgman</span>, in which the court explicitly stated that had the nuisance already lasted twenty years, the claim would have failed.</span></li><li><span class=\"nl\"><span class=\"bd\">Statutory authority</span>, which trumps common law claims in tort. <span class=\"lnk caseln\">Allen v Gulf Oil Refining</span>, <span class=\"lnk caseln\">Gillingham v Medway Dock Co</span>.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Remedies</span></span>",
        "<ul><li><span class=\"nl\">The standard <span class=\"bd\">remedy</span> is always the <span class=\"bd\">equitable injunction</span>. Otherwise you&#8217;d be able to buy the right to commit a tort, which wouldn&#8217;t really be <span class=\"it\">on</span>, would it &mdash; <span class=\"lnk caseln\">Kennaway v Thompson</span>. But if damages are more appropriate, then the judge might freestyle it along <span class=\"it\">personal injury</span> lines &mdash; <span class=\"lnk caseln\">Bone v Searle</span>.</span></li><li><span class=\"nl\">There is also <span class=\"bd\">abatement</span>, a &#8216;self-help remedy,&#8217; which should be used very carefully by the claimant so as to avoid any counter claim being raised. TODO &mdash; Clarify this.</span></li></ul>"
    ],
    "AKA": "Nuisance Remedies"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Coventry v Lawrence",
        "Allen v Gulf Oil Refining",
        "Sturges v Bridgman",
        "Dennis v MoD",
        "Gillingham v Medway Dock Co",
        "Harris v James",
        "Dobson v Thames Water",
        "Tennent v Earl of Glasgow",
        "Tetley v Chitty",
        "Crown River Cruises v Kimbolton",
        "Robinson v Kilvert",
        "British Celanese v Hunt"
    ],
    "NAME": "Adams v Ursell",
    "SUMMARY": [
        "The defendant set up a fish and chip shop in rather a smart street, mainly catering for those from poorer parts of town. All this caused consternation and dismay for the residents of the street, curtain-twitching bastards with too much time on their hands that they may well have been.",
        "The claim was that the odour was was a nuisance. The defendant argued his shop provided public utility."
    ],
    "HELD": [
        "Public utility is not an effective defence to nuisance."
    ],
    "YEAR": "1913",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Defences",
        "Public Utility"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Defences &mdash; Public Utility",
    "CITATION": "Adams v Ursell [1913] 1 Ch. 269",
    "COURT": "EWHC",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "253"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Coventry v Lawrence",
        "Sturges v Bridgman",
        "Adams v Ursell",
        "Gillingham v Medway Dock Co",
        "Dennis v MoD",
        "Matania v National Provincial",
        "Holbeck Hall Hotel v Scarborough",
        "Dobson v Thames Water",
        "Bone v Searle",
        "Hunter v Canary Wharf",
        "Read v Lyons",
        "Hollywood Silver Fox Farm v Emmett"
    ],
    "NAME": "Allen v Gulf Oil Refining",
    "SUMMARY": [
        "An oil refinery authorized by statute and built on the defendant&#8217;s land caused a nuisance of smell, noise and vibration on the claimant&#8217;s."
    ],
    "HELD": [
        "Lord Wilberforce &mdash; to defeat a claim in private nuisance caused by something for which there is explicit statutory authority, the defendant must show there was <span class=\"bd\">no other way to fulfil Parliament&#8217;s intention</span> that avoided creating the nuisance."
    ],
    "YEAR": "1981",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Defences",
        "Statutory Authority"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Defences &mdash; Statutory Authority",
    "CITATION": "Allen v Gulf Oil Refining Ltd [1981] UKHL AC 1001",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Important",
        "Leading"
    ],
    "NUMBER": "254"
},
{
    "#NAME": "1Barr &amp; Ors v Biffa",
    "NAME": "Gillingham v Medway Dock Co",
    "SUMMARY": [
        "The claimant had changed the planning permission of its dockyard, to open it up to commercial use. This entailed HGVs chewing up the tarmac at all hours of the day and night, and local residents complained."
    ],
    "#SUMMARY": "",
    "YEAR": "1993",
    "#COURT": "EWCA",
    "CITATION": "Gillingham Borough Council v Medway (Chatham) Dock Co Ltd [1993] EWHC QB 343",
    "NUMBER": "255",
    "TYPE": "Case",
    "#CITATION": "Barr &amp; Ors v Biffa Waste Services Limited [2012] EWCA Civ 312",
    "RELATED": [
        "Coventry v Lawrence",
        "Dennis v MoD",
        "Allen v Gulf Oil Refining",
        "Adams v Ursell",
        "Sturges v Bridgman",
        "St Helens Smelting v Tipping",
        "Robinson v Kilvert",
        "Christie v Davey",
        "Marcic v Thames Water",
        "Bone v Searle",
        "Ponting v Noakes",
        "Rickards v Lothian"
    ],
    "FLAGS": [
        "Important"
    ],
    "HELD": [
        "Where a nuisance had arisen from lawfully-passed planning permissions, the nuisance was to be judged on the basis of the character of the locality <span class=\"bd\">after</span> not <span class=\"bd\">before</span> the change of use.",
        "That lawful use of the roads would only constitute a public nuisance in extreme circumstances."
    ],
    "#FLAGS": "EPLR",
    "COURT": "EWHC",
    "#YEAR": "2012",
    "#CATEGORY": "",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Defences",
        "Planning Permission"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Defences &mdash; Planning Permission",
    "#HELD": ""
},
{
    "TYPE": "Case",
    "RELATED": [
        "Hussain v Lancaster",
        "Hollywood Silver Fox Farm v Emmett",
        "Matania v National Provincial",
        "Robinson v Kilvert",
        "Crown River Cruises v Kimbolton",
        "Malone v Laskey",
        "Khoransandjian v Bush",
        "Lippiatt v South Gloucestershire",
        "Adams v Ursell",
        "Dobson v Thames Water",
        "Coventry v Lawrence (no 2)",
        "Gillingham v Medway Dock Co"
    ],
    "NAME": "Kennaway v Thompson",
    "SUMMARY": [
        "The claimant built a house next to a lake into which she moved, shortly before the defendant waterskiing and boat-racing club increased its activites in frequebncy and noise. She sued in nuisance and at first instance was awarded \u00a31K for past nuisance and \u00a315K for future nuisance, the judge ruling that such was the public interest, it would be oppressive to injunct."
    ],
    "HELD": [
        "The <span class=\"bd\">routine</span> remedy for nuisance must be an <span class=\"bd\">equitable injunction</span>. Were it damages, people would in effect be able to buy the right to commit a tort.",
        "An injunction was, therefore, granted."
    ],
    "YEAR": "1981",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Remedies -- injunction"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Remedies -- injunction",
    "CITATION": "Kennaway v Thompson [1981] QB 88",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Important"
    ],
    "NUMBER": "256"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Dobson v Thames Water",
        "Sedleigh-Denfield v O'Callaghan",
        "Sturges v Bridgman",
        "Marcic v Thames Water",
        "Holbeck Hall Hotel v Scarborough",
        "Hollywood Silver Fox Farm v Emmett",
        "Crown River Cruises v Kimbolton",
        "Tetley v Chitty",
        "Gillingham v Medway Dock Co",
        "St Helens Smelting v Tipping",
        "Christie v Davey",
        "Coventry v Lawrence (no 2)"
    ],
    "NAME": "Bone v Searle",
    "SUMMARY": [
        "The claimants sued a pig-farmer for the nuisance caused by his pigs, particularly the squalid and overpowering smell of pig-shit."
    ],
    "HELD": [
        "The assessment of damages for loss of amenity caused by nuisance might well be inspired by, or be parallel to, damages for loss of amenity in personal injury."
    ],
    "YEAR": "1975",
    "CATEGORIES": [
        "Nuisance",
        "Private Nuisance",
        "Remedies -- damages"
    ],
    "CATEGORY": "Nuisance &mdash; Private Nuisance &mdash; Remedies -- damages",
    "CITATION": "Bone v Searle [1975] 1 All ER 787",
    "COURT": "EWCA",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "257"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Private Nuisance - Defences and Remedies",
        "The Rule in Rylands v Fletcher",
        "Private Nuisance",
        "Duty of Care",
        "Duty of Care - Public Authorities",
        "Employers' Primary Liability",
        "Causation - The Fairchild Exception",
        "Occupiers' Liability",
        "Causation - The But For Test",
        "Defamation",
        "Foreseeability",
        "Defamation - Defences II - Privilege"
    ],
    "NAME": "Public Nuisance",
    "CATEGORIES": [
        "Nuisance",
        "Public Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Public Nuisance",
    "SUMMARY": [
        "This differs from <span class=\"lnk caseln\">Private Nuisance</span> in being a <span class=\"bd\">crime</span> as well as a tort, but equally, there&#8217;s no cause of action for personal injury in public nuisance.",
        "The accepted definition, from <span class=\"lnk caseln\">AG v PYA Quarries</span> per Romer LJ &mdash;",
        "<ul><li><span class=\"nl\">&#8216;An act or omission which materially affects the reasonable comfort and convenience of life of <span class=\"bd\">a class of HM&#8217;s subjects</span>. The sphere of the nuisance may be described as generally &#8220;the neighbourhood&#8221; (<span class=\"lnk caseln\">Donoghue</span>); but the question whether the local community within that sphere comprises a sufficient number of persons to construe a class is a question of fact in every case.&#8217;</span></li></ul>",
        "<span class=\"bd\">General rule</span><br>A successful claim must prove &mdash;",
        "<ol><li><span class=\"nl\"> There was <span class=\"bd\">interference</span> which was <span class=\"bd\">unreasonable</span></span></li><li><span class=\"nl\"> with a <span class=\"bd\">class of HM&#8217;s subjects</span>,</span></li><li><span class=\"nl\"> which caused <span class=\"bd\">special damage to the claimant</span> beyond that caused to the class;</span></li><li><span class=\"nl\"> that the <span class=\"bd\">defendant was responsible the interference.</span></span></li></ol>"
    ],
    "NUMBER": "258"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Dymond v Pearce",
        "R v Rimmington and R v Goldstien",
        "Tate & Lyle v GLC",
        "Hollywood Silver Fox Farm v Emmett",
        "St Helens Smelting v Tipping",
        "Khoransandjian v Bush",
        "Coventry v Lawrence (no 2)",
        "Lippiatt v South Gloucestershire",
        "Tetley v Chitty",
        "Sturges v Bridgman",
        "Christie v Davey",
        "Ellison v MoD"
    ],
    "NAME": "AG v PYA Quarries",
    "SUMMARY": [
        "People living on a road leading to a quarry complained of vibration and dust."
    ],
    "HELD": [
        "When something materially affects the comfort and convenience of a class of citizens in a particular place, and enough people are affected, then there can be liability in <span class=\"lnk caseln\">Public Nuisance</span>.",
        "Romer LJ &mdash; &#8216;...an act or omission which materially affects the reasonable comfort and convenience of life of a class of Her Majesty\u2019s subjects. The sphere of the nuisance may be described generally as &#8220;the neighbourhood&#8221;; but the question whether the local community within that sphere comprises a sufficient number of persons to constitute a class of the public is a question of fact in every case.&#8217;"
    ],
    "YEAR": "1957",
    "CATEGORIES": [
        "Nuisance",
        "Public Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Public Nuisance",
    "CITATION": "Attorney General v PYA Quarries Ltd (no 1) [1957] 2 QB 169",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "EPLR"
    ],
    "NUMBER": "259"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Tate & Lyle v GLC",
        "Dymond v Pearce",
        "AG v PYA Quarries",
        "Rickards v Lothian",
        "Khoransandjian v Bush",
        "Bone v Searle",
        "British Celanese v Hunt",
        "Malone v Laskey",
        "Hunter v Canary Wharf",
        "Read v Lyons",
        "Crown River Cruises v Kimbolton",
        "Bamford v Turnley"
    ],
    "NAME": "R v Rimmington and R v Goldstien",
    "SUMMARY": [
        "The defendant was <span class=\"bd\">charged</span> with public nuisance. He&#8217;d had sent 538 separate postal packages to members of the public, containing racist material. He&#8217;d picked them out by <span class=\"bd\">going through the phone book</span> and <span class=\"bd\">taking a guess at their race</span>. What a <span class=\"it\">cunt</span>.",
        "Did the recipients constitute a class of Her Majesty&#8217;s subjects?"
    ],
    "HELD": [
        "The court held there were instead 538 separate acts, rather than a <span class=\"it\">single</span> act of public nuisance affecting a large group of the public.",
        "Lady Hale &mdash; multiple, discrete instances of harm suffered by individuals do not add up to a <span class=\"it\">common injury</span>, however similar the harm, in each instance."
    ],
    "YEAR": "2005",
    "CATEGORIES": [
        "Nuisance",
        "Public Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Public Nuisance",
    "CITATION": "R v Rimmington; R v Goldstien [2005] UKHL 63",
    "COURT": "UKHL",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "260"
},
{
    "TYPE": "Case",
    "RELATED": [
        "R v Rimmington and R v Goldstien",
        "AG v PYA Quarries",
        "Tate & Lyle v GLC",
        "Malone v Laskey",
        "Cambridge Water v Eastern Counties Leather",
        "Holbeck Hall Hotel v Scarborough",
        "Rylands v Fletcher",
        "Gillingham v Medway Dock Co",
        "Crown River Cruises v Kimbolton",
        "Hussain v Lancaster",
        "Sedleigh-Denfield v O'Callaghan",
        "Coventry v Lawrence"
    ],
    "NAME": "Dymond v Pearce",
    "SUMMARY": [
        "The passenger of a motorcyclist tried to sue for public nuisance in relation to a road accident. The motorcyclist had managed to crash into a 7&#8217;6&#8221;-wide lorry parked under a streetlamp (and therefore in a 30mph zone), on a road that was 48&#8217; wide, with a clear view from 200 yards ahead.",
        "He claimed he&#8217;d suffered special damage by virtue of being the <span class=\"it\">one</span> member of the public who&#8217;d actually crashed into the lorry"
    ],
    "HELD": [
        "To establish a cause of action in public nuisance for personal injuries, at least in relating to a nuisance on the roads, it must be established that the nuisance was in fact <span class=\"bd\">dangerous</span>.",
        "On the facts, clearly, the accident was the fault of the motorcyclist, and no-one else."
    ],
    "YEAR": "1972",
    "CATEGORIES": [
        "Nuisance",
        "Public Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Public Nuisance",
    "COURT": "EWCA",
    "CITATION": "Dymond v Pearce [1972] EWCA 1 All ER 1142",
    "NUMBER": "261"
},
{
    "#RYLANDS": "AND FLETCHER",
    "RELATED": [
        "R v Rimmington and R v Goldstien",
        "Dymond v Pearce",
        "AG v PYA Quarries",
        "Robinson v Kilvert",
        "Allen v Gulf Oil Refining",
        "Sedleigh-Denfield v O'Callaghan",
        "Ellison v MoD",
        "Transco v Stockport",
        "Hunter v Canary Wharf",
        "Tennent v Earl of Glasgow",
        "British Celanese v Hunt",
        "Marcic v Thames Water"
    ],
    "NAME": "Tate & Lyle v GLC",
    "TYPE": "Case",
    "SUMMARY": [
        "The claimant owned a stretch of riverbank adjoining its factory, to which it had built jetties for the transport of goods. The defendant built ferry terminals upstream, causing the claimant&#8217;s to silt up. As their own land rights had not been affected, they could not sue in <span class=\"it\">private</span> nuisance."
    ],
    "HELD": [
        "As members of the public had been affected, in the decreased navigability of the river, and as the claimant had suffered special damage, the claim was allowed."
    ],
    "YEAR": "1983",
    "CATEGORIES": [
        "Nuisance",
        "Public Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Public Nuisance",
    "COURT": "UKHL",
    "CITATION": "Tate &amp; Lyle Industries v Greater London Council [1983] UKHL 2",
    "NUMBER": "262"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Public Nuisance",
        "Private Nuisance - Defences and Remedies",
        "Private Nuisance",
        "Duty of Care",
        "Breach of Duty - Standard of Care",
        "Foreseeability",
        "Defamation - Defences I",
        "Pure Economic Loss",
        "Product Liability",
        "Employers' Primary Liability",
        "Defamation",
        "Vicarious Liability"
    ],
    "NUMBER": "263",
    "NAME": "The Rule in Rylands v Fletcher",
    "CATEGORIES": [
        "Nuisance",
        "Rylands v Fletcher"
    ],
    "CATEGORY": "Nuisance &mdash; Rylands v Fletcher",
    "SUMMARY": [
        "From <span class=\"lnk caseln\">Rylands v Fletcher</span> per Blackburn J as amended by Lord Cairns in the HL &mdash;",
        "<ul><li><span class=\"nl\">&#8216;...the person who for his own purposes <span class=\"bd\">brings on his land</span> and <span class=\"bd\">collects and keeps there</span> anything likely to do mischief if it <span class=\"bd\">escapes</span>, must keep it <span class=\"bd\">in</span> at his peril, and, if he does not do so, is <span class=\"bd\">prima facie answerable</span> for all the damage which is the natural consequence of its escape&#8217;</span></li><li><span class=\"nl\">The use of the land must be <span class=\"bd\">non-natural</span>.</span></li></ul>",
        "This is a tort of <span class=\"bd\">strict liability</span>. There is no need to show faulty conduct.<br>Per Blackburn J in <span class=\"lnk caseln\">Rylands</span> &mdash;",
        "<ul><li><span class=\"nl\">... The general rule, as above stated, seems on principle just. The person whose grass or corn is eaten down by the escaping cattle of his neighbour, or whose mine is flooded by the water from his neighbour&#8217;s reservoir, or whose cellar is invaded by the filth of his neighbour&#8217;s privy, or whose habitation is made unhealthy by the fumes and noisome vapours of his neighbour&#8217;s alkali works is <span class=\"bd\">damnified without any fault of his own</span> ...&#8217;</span></li></ul>",
        "~<span class=\"bd\">Compared to <span class=\"lnk caseln\">Private Nuisance</span></span><br>The relationship with vanilla nuisance is uncertain.",
        "<ul><li><span class=\"nl\">In <span class=\"lnk caseln\">Cambridge Water v Eastern Counties Leather</span>, Goff LJ considered it was merely an offshoot of nuisance. Or, at least, an expansion of nuisance to suit patterns of facts in which the nuisance was not <span class=\"bd\">continued</span> or <span class=\"bd\">repeated</span>.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Elements</span></span>",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Dangerousness</span> &mdash; in <span class=\"lnk caseln\">Rylands v Fletcher</span> itself, water in a reservoir. In <span class=\"lnk caseln\">Transco v Stockport</span>, water in pipes. In <span class=\"lnk caseln\">Cambridge Water v Eastern Counties Leather</span>, chemicals for tanning.</span></li><li><span class=\"nl\"><span class=\"bd\">Escape</span> does not need to be <span class=\"it\">likely</span>. There is no requirement for negligence.  <span class=\"lnk caseln\">Gore v Stannard (Wyvern Tyres)</span></span></li><li><span class=\"nl\"><span class=\"bd\">Collects/accumulates</span> &mdash; this cannot be something <span class=\"it\">natural</span> &mdash; <span class=\"lnk caseln\">Ellison v MoD</span>, and has to be done <span class=\"it\">deliberately</span> &mdash; <span class=\"lnk caseln\">LMS Int v Styrene</span>.</span></li><li><span class=\"nl\"><span class=\"bd\">Non-natural use</span> amounts to whatever the judge says it does. But it can&#8217;t be the act of a third party &mdash; <span class=\"lnk caseln\">Rickards v Lothian</span>, although that&#8217;s Privy Council. It&#8217;s also natural to have (water) pipes running across the land &mdash; <span class=\"lnk caseln\">Transco v Stockport</span>.</span></li></ol>",
        "<span class=\"ud\"><span class=\"bd\">Who can sue?</span></span>",
        "<ul><li><span class=\"nl\">Those who have an interest in the land &mdash; <span class=\"lnk caseln\">Cambridge Water v Eastern Counties Leather</span>, <span class=\"lnk caseln\">Transco v Stockport</span>, <span class=\"lnk caseln\">McKenna v British Aluminium</span>. And <span class=\"bd\">Who can be sued?</span> The occupier &mdash; <span class=\"lnk caseln\">Rylands v Fletcher</span>.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Defences</span></span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\">Claimant&#8217;s own fault</span> &mdash; <span class=\"lnk caseln\">Ponting v Noakes</span>, <span class=\"bd\">Act of a 3rd Party</span> &mdash; <span class=\"lnk caseln\">Tennent v Earl of Glasgow</span>. There is also <span class=\"bd\">consent</span>, which may be express or implied, and <span class=\"bd\">legislation</span>.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Remedy</span></span>",
        "<ul><li><span class=\"nl\">Usually <span class=\"bd\">damages</span>, cf. <span class=\"lnk caseln\">Nuisance Remedies</span>.</span></li></ul>",
        "Note there have been no successful claims under the Rylands v Fletcher rule since the war."
    ],
    "AKA": "Rylands Rule"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Cambridge Water v Eastern Counties Leather",
        "LMS Int v Styrene",
        "Ellison v MoD",
        "Ponting v Noakes",
        "North Western v London Guarantee",
        "Tennent v Earl of Glasgow",
        "Gore v Stannard (Wyvern Tyres)",
        "Rickards v Lothian",
        "Transco v Stockport",
        "R v Rimmington and R v Goldstien",
        "Tate & Lyle v GLC",
        "Sedleigh-Denfield v O'Callaghan"
    ],
    "NAME": "Rylands v Fletcher",
    "SUMMARY": [
        "The defendant had contracted to have a reservoir constructed. The contractors discovered improperly shut-off mine-shafts, but chose to work on, rather than blocking them up for good. The reservoir was duly filled, flooding the workings underneath. But they were connected to mines under a neighbour&#8217;s land, which were also flooded. The neighbours sued for the sum of, in modern cash, about \u00a3100K."
    ],
    "HELD": [
        "Amended in the Lords by Lord Cairns, Blackburn J &mdash; &#8216;...the person who for his own purposes <span class=\"bd\">brings on his land</span> and <span class=\"bd\">collects and keeps there</span> anything likely to do mischief if it <span class=\"bd\">escapes</span> [and is non-natural use&mdash;Lord Cairns], must keep it <span class=\"bd\">in</span> at his peril, and, if he does not do so, is <span class=\"bd\">prima facie answerable</span> for all the damage which is the natural consequence of its escape.<br>&emsp;&emsp;... The general rule, as above stated, seems on principle just. The person whose grass or corn is <span class=\"it\">eaten down by the escaping cattle</span> of his neighbour, or whose <span class=\"it\">mine is flooded </span>by the water from his neighbour&#8217;s reservoir, or whose <span class=\"it\">cellar is invaded by the filth of his neighbour&#8217;s privy</span>, or whose habitation is made unhealthy by the fumes and noisome vapours of his neighbour&#8217;s alkali works is <span class=\"it\">damnified without any fault of his own</span>.&#8217;<br>&emsp;&emsp;I.e., <span class=\"it\">strict liability</span>."
    ],
    "AKA": "Rylands",
    "NUMBER": "264",
    "CATEGORIES": [
        "Nuisance",
        "Rylands v Fletcher"
    ],
    "CATEGORY": "Nuisance &mdash; Rylands v Fletcher",
    "CITATION": "Rylands v Fletcher [1861] UKHL 1",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Important",
        "EPLR"
    ],
    "YEAR": "1861"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Cambridge Water v Eastern Counties Leather",
        "Gore v Stannard (Wyvern Tyres)",
        "North Western v London Guarantee",
        "Rylands v Fletcher",
        "LMS Int v Styrene",
        "Ellison v MoD",
        "Tennent v Earl of Glasgow",
        "Ponting v Noakes",
        "Rickards v Lothian",
        "Matania v National Provincial",
        "Kennaway v Thompson",
        "Coventry v Lawrence (no 2)"
    ],
    "NAME": "Transco v Stockport",
    "SUMMARY": [
        "A leak had developed in a watermain supplying a block of flats, the responsibility for maintenance of which lay with the defendant. The water collected by and damaged a gas main belonging to the claimant, who repaired the damage then sued for their costs of repair under <span class=\"lnk caseln\">Rylands</span>."
    ],
    "HELD": [
        "The use of land must be <span class=\"it\">non-natural</span> for claims under the <span class=\"lnk caseln\">Rylands</span> rule to succeed. Running water pipes across land is hardly that, and so the claim failed.",
        "Lord Bingham suggested the test ought to be <span class=\"it\">ordinary user</span> rather than <span class=\"it\">natural user</span>, to make the circumstances of application of the rule, which are extraordinariness and unusualness, clearer &mdash; but that in any case the test is not to be applied inflexibly."
    ],
    "YEAR": "2003",
    "CATEGORIES": [
        "Nuisance",
        "Rylands v Fletcher",
        "Meaning of Dangerous"
    ],
    "CATEGORY": "Nuisance &mdash; Rylands v Fletcher &mdash; Meaning of Dangerous",
    "CITATION": "Transco Plc v Stockport MBC [2003] UKHL 61",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "265"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Ponting v Noakes",
        "Ellison v MoD",
        "LMS Int v Styrene",
        "Rickards v Lothian",
        "North Western v London Guarantee",
        "Tennent v Earl of Glasgow",
        "Rylands v Fletcher",
        "Cambridge Water v Eastern Counties Leather",
        "Transco v Stockport",
        "Dobson v Thames Water",
        "R v Rimmington and R v Goldstien",
        "Harris v James"
    ],
    "NAME": "Gore v Stannard (Wyvern Tyres)",
    "SUMMARY": [
        "Some tyres were brought onto the defendant&#8217;s land, which caught fire. As Jesse Elvin puts it, &#8216;which as you might know if you&#8217;ve ever seen The Simpsons is something tyres do.&#8217; The <span class=\"bd\">fire</span> escaped, not the tyres."
    ],
    "HELD": [
        "If something likely to cause mischief is brought onto the land; <span class=\"bd\">and</span> it <span class=\"bd\">escapes</span>, <span class=\"bd\">and</span> it causes <span class=\"bd\">harm</span>, then there will be liability."
    ],
    "YEAR": "2012",
    "CATEGORIES": [
        "Nuisance",
        "Rylands v Fletcher",
        "Nuisance compared to Rylands",
        "Escape"
    ],
    "CATEGORY": "Nuisance &mdash; Rylands v Fletcher &mdash; Nuisance compared to Rylands &mdash; Escape",
    "CITATION": "Gore v Stannard (trading as Wyvern Tyres) [2012] EWCA Civ 1248",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "Recent"
    ],
    "NUMBER": "266"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Ellison v MoD",
        "North Western v London Guarantee",
        "Cambridge Water v Eastern Counties Leather",
        "Rickards v Lothian",
        "Gore v Stannard (Wyvern Tyres)",
        "Ponting v Noakes",
        "Rylands v Fletcher",
        "Tennent v Earl of Glasgow",
        "Transco v Stockport",
        "Lippiatt v South Gloucestershire",
        "Hussain v Lancaster",
        "Tetley v Chitty"
    ],
    "COMMENT": "Wrongly decided according to Jesse Elvin, because of <span class=\"lnk caseln\">Gore v Stannard</span>. In <span class=\"it\">Westlaw</span>&#8216;s opinion, it&#8217;s good law. Lexis by contrast does <span class=\"bd\">not</span> give an opinion.",
    "NAME": "LMS Int v Styrene",
    "SUMMARY": [
        "Packaging being cut by the defendant using a hot-wire cutter caught fire, and the <span class=\"bd\">fire</span> escaped and caused damage to the claimant, whose premises were next door."
    ],
    "HELD": [
        "For the purposes of the <span class=\"lnk caseln\">Rylands v Fletcher</span> rule, deliberately accumulating something not <span class=\"it\">per se</span> dangerous if it escapes, but could give rise to something that itself could escape &mdash; e.g., something flammable and <span class=\"it\">fire</span> &mdash; is enough to fulfil the requirement."
    ],
    "NUMBER": "267",
    "CATEGORIES": [
        "Nuisance",
        "Rylands v Fletcher",
        "Deliberate Accumulation"
    ],
    "CATEGORY": "Nuisance &mdash; Rylands v Fletcher &mdash; Deliberate Accumulation",
    "CITATION": "LMS International v Styrene Packaging Ltd [2005] EWHC 2065",
    "COURT": "EWHC",
    "FLAGS": [
        "Important",
        "Amusing"
    ],
    "YEAR": "2005"
},
{
    "TYPE": "Case",
    "RELATED": [
        "LMS Int v Styrene",
        "Cambridge Water v Eastern Counties Leather",
        "Transco v Stockport",
        "Ponting v Noakes",
        "Tennent v Earl of Glasgow",
        "Gore v Stannard (Wyvern Tyres)",
        "Rylands v Fletcher",
        "North Western v London Guarantee",
        "Rickards v Lothian",
        "Khoransandjian v Bush",
        "Holbeck Hall Hotel v Scarborough",
        "AG v PYA Quarries"
    ],
    "NAME": "Ellison v MoD",
    "SUMMARY": [
        "The claimant owned land adjacent to the defendant&#8217;s land, the drainage of which they&#8217;d altered. A summer storm in 1986 caused an accumulation of water on the defendant&#8217;s land which, argued the claimant under <span class=\"lnk caseln\">Rylands</span>, escaped and flooded their land."
    ],
    "HELD": [
        "If what has escaped is something naturally present, or apt to be naturally present such as rainwayter, then it cannot be said to have been deliberately accumulated."
    ],
    "YEAR": "1997",
    "CATEGORIES": [
        "Nuisance",
        "Rylands v Fletcher",
        "Deliberate Accumulation"
    ],
    "CATEGORY": "Nuisance &mdash; Rylands v Fletcher &mdash; Deliberate Accumulation",
    "CITATION": "Ellison v Ministry of Defence (1997) 81 BLR 101",
    "COURT": "EWHC",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "268"
},
{
    "TYPE": "Case",
    "RELATED": [
        "North Western v London Guarantee",
        "Ponting v Noakes",
        "Tennent v Earl of Glasgow",
        "Transco v Stockport",
        "Ellison v MoD",
        "Allen v Gulf Oil Refining",
        "Rylands v Fletcher",
        "LMS Int v Styrene",
        "Dennis v MoD",
        "Adams v Ursell",
        "Gore v Stannard (Wyvern Tyres)",
        "Cambridge Water v Eastern Counties Leather"
    ],
    "NAME": "Rickards v Lothian",
    "SUMMARY": [
        "The claimant&#8217;s premises, on the second floor of a building owned by the defendant, had been flooded when an unknown prankster blocked all the sinks in the lavs two floors above and turned on all the taps."
    ],
    "HELD": [
        "When the escape is caused by the act of a <span class=\"it\">third party</span>, the use of the land cannot be said to be <span class=\"it\">non-natural</span>."
    ],
    "YEAR": "1913",
    "CATEGORIES": [
        "Nuisance",
        "Rylands v Fletcher",
        "Non-natural use",
        "Defences",
        "Act of a Stranger"
    ],
    "CATEGORY": "Nuisance &mdash; Rylands v Fletcher &mdash; Non-natural use &mdash; Defences &mdash; Act of a Stranger",
    "CITATION": "Rickards v Lothian [1913] AC 263",
    "COURT": "UKPC",
    "FLAGS": [
        "Amusing",
        "EPLR"
    ],
    "NUMBER": "269"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Tennent v Earl of Glasgow",
        "North Western v London Guarantee",
        "Rickards v Lothian",
        "Adams v Ursell",
        "Cambridge Water v Eastern Counties Leather",
        "Allen v Gulf Oil Refining",
        "Transco v Stockport",
        "Rylands v Fletcher",
        "Dennis v MoD",
        "Gillingham v Medway Dock Co",
        "LMS Int v Styrene",
        "Gore v Stannard (Wyvern Tyres)"
    ],
    "NAME": "Ponting v Noakes",
    "SUMMARY": [
        "A horse belonging to the claimant was poisoned when it stuck its head <span class=\"it\">over the defendant&#8217;s fence</span> and nibbled at some leaves from a yew tree. Poor thing. The claimant argued <span class=\"lnk caseln\">Rylands</span>, saying the yew tree had <span class=\"it\">escaped</span> from the defendant&#8217;s land."
    ],
    "HELD": [
        "When nothing escapes, and the damage is caused by the claimant&#8217;s own acts, there is no liability in <span class=\"lnk caseln\">Rylands v Fletcher</span>."
    ],
    "YEAR": "1894",
    "CATEGORIES": [
        "Nuisance",
        "Rylands v Fletcher",
        "Defences",
        "Claimant's own fault"
    ],
    "CATEGORY": "Nuisance &mdash; Rylands v Fletcher &mdash; Defences &mdash; Claimant's own fault",
    "COURT": "EWHC",
    "CITATION": "Ponting v Noakes [1894] 2 QB 281",
    "NUMBER": "270"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Rickards v Lothian",
        "Tennent v Earl of Glasgow",
        "Ponting v Noakes",
        "Ellison v MoD",
        "Rylands v Fletcher",
        "Transco v Stockport",
        "Dennis v MoD",
        "Allen v Gulf Oil Refining",
        "Sturges v Bridgman",
        "Adams v Ursell",
        "Gore v Stannard (Wyvern Tyres)",
        "Coventry v Lawrence"
    ],
    "NAME": "North Western v London Guarantee",
    "SUMMARY": [
        "<span class=\"bd\">Summary missing</span>"
    ],
    "HELD": [
        "If an escape is due to the actions of a third party, and the claimant knows of their actions, then there is a strong presumption against liability in <span class=\"lnk caseln\">Rylands v Fletcher</span>."
    ],
    "YEAR": "1939",
    "CATEGORIES": [
        "Nuisance",
        "Rylands v Fletcher",
        "Defences",
        "Act of a Stranger"
    ],
    "CATEGORY": "Nuisance &mdash; Rylands v Fletcher &mdash; Defences &mdash; Act of a Stranger",
    "COURT": "UKPC",
    "CITATION": "North Western Utilities Ltd v London Guarantee Co [1939] AC 108",
    "NUMBER": "271"
},
{
    "TYPE": "Case",
    "RELATED": [
        "North Western v London Guarantee",
        "Rickards v Lothian",
        "Ponting v Noakes",
        "Gore v Stannard (Wyvern Tyres)",
        "Allen v Gulf Oil Refining",
        "Ellison v MoD",
        "Sturges v Bridgman",
        "Coventry v Lawrence",
        "LMS Int v Styrene",
        "Adams v Ursell",
        "Rylands v Fletcher",
        "Transco v Stockport"
    ],
    "COMMENT": "Jesse thinks this has been used <span class=\"it\">once</span>, in 1876.",
    "NAME": "Tennent v Earl of Glasgow",
    "SUMMARY": [
        "<span class=\"bd\">Summary Missing</span>"
    ],
    "HELD": [
        "When an escape is down to an act of God, there will be no liability under the <span class=\"lnk caseln\">Rylands Rule</span>.",
        "Provided a useful definition of an act of God &mdash; &#8216;circumstances which <span class=\"bd\">no human foresight</span> can provide against, and of which human <span class=\"bd\">prudence is not bound to recognize the possibility</span>, and which when they do occur, therefore, are <span class=\"bd\">calamities</span> that <span class=\"bd\">do not involve the obligation</span> of paying for the <span class=\"bd\">consequences</span> that may result from them.&#8217;"
    ],
    "YEAR": "1864",
    "CATEGORIES": [
        "Nuisance",
        "Rylands v Fletcher",
        "Defences",
        "Act of God"
    ],
    "CATEGORY": "Nuisance &mdash; Rylands v Fletcher &mdash; Defences &mdash; Act of God",
    "COURT": "UKHL",
    "CITATION": "Tennent v Earl of Glasgow (1864) 2 M (HL) 22",
    "NUMBER": "272"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Defamation - Defences II - Privilege",
        "Defamation - Remedies",
        "Defamation - Defences I",
        "Causation - The But For Test",
        "Duty of Care - Public Authorities",
        "Vicarious Liability",
        "Psychiatric Harm",
        "Private Nuisance",
        "Private Nuisance - Defences and Remedies",
        "Public Nuisance",
        "Defences to Negligence",
        "Occupiers' Liability"
    ],
    "NAME": "Defamation",
    "CATEGORIES": [
        "Defamation",
        "Slander",
        "Libel"
    ],
    "CATEGORY": "Defamation &mdash; Slander &mdash; Libel",
    "SUMMARY": [
        "As every good cabbie knows, this divides into <span class=\"bd\">slander</span> and <span class=\"bd\">libel</span>, which is between statements <span class=\"bd\">ephemeral</span> in character and ones with more <span class=\"bd\">permanence</span>. The classic distinction between things <span class=\"bd\">said</span> and things <span class=\"bd\">written</span> is more or less correct, but slander has a <span class=\"it\">general</span> requirement of <span class=\"bd\">special damage</span> &mdash; <span class=\"lnk caseln\">Youssoupoff v MGM</span>, and the thing published does not have to be words &mdash; <span class=\"lnk caseln\">Monson v Tussauds</span>.",
        "Almost all the modern cases have involved 5RB, who&#8217;ve assembled a very useful and well-written compendium of summaries and discussions &mdash;  http://www.5rb.com/case",
        "You can say what you like about <span class=\"bd\">the dead</span>, <span class=\"bd\">government bodies</span> and <span class=\"bd\">political parties</span>. Knock yourself out. E.g., &#8216;Hitler was a bit of a baddie,&#8217; &#8216;The DWP is inefficient and arbitrary,&#8217; and &#8216;UKIP is basically evil.&#8217;",
        "The <span class=\"lnk caseln\">Defamation Act 2013</span> cleaned up and reformed this area, softening threat &#8216;I&#8217;ll sue you <span class=\"it\">in England</span>.&#8217; It also <span class=\"bd\">removed</span> the presumption that <span class=\"bd\">actions in defamation</span> are to be tried before a <span class=\"bd\">jury</span>.",
        "<span class=\"bd\">Slander</span> requires proof of injury <span class=\"bd\">having been</span> sustained, <span class=\"bd\">special damage</span>, except when it imputes <span class=\"bd\">imprisonable criminal conduct</span> &mdash; <span class=\"lnk caseln\">Gray v Jones</span>, or <span class=\"bd\">unfitness in business</span>, which is the most frequently-invoked exception &mdash; S2 <span class=\"it\">Defamation Act 1952</span>. There used to be two more exceptions: imputation of (certain) <span class=\"bd\">contageous diseases</span> &mdash; <span class=\"lnk caseln\">Bloodworth v Gray</span> and imputation of <span class=\"bd\">unchastity</span> (!) &mdash;  <span class=\"it\">Slander of Women Act 1891</span>.",
        "For a claim in defamation to succeed, the following elements must be shown of the statement, after which the burden shifts to the defendant to establish a defence.<br><span class=\"it\">It must be</span> &mdash;",
        "<ol><li><span class=\"nl\"> <span class=\"bd\">Defamatory</span> &mdash; <span class=\"lnk caseln\">Sim v Stretch</span>, <span class=\"lnk caseln\">Youssoupoff</span>.</span><ul><li><span class=\"nl\">Words in jest <span class=\"it\">may</span> be exempt, per dissent in <span class=\"lnk caseln\">Berkoff v Burchill</span>.</span></li><li><span class=\"nl\">Fair-minded members of the public, in whose estimation the reputation of the claimant must be lowered in order for the action to succeed, are deemed to read the <span class=\"bd\">whole of the article, headline and accompanying pictures</span> &mdash; <span class=\"lnk caseln\">Charleston v News Group</span>.</span></li></ul><li><span class=\"nl\"> <span class=\"bd\">Serious</span> &mdash; <span class=\"lnk caseln\">Thornton v Telegraph</span>.</span><ul><li><span class=\"nl\">If it&#8217;s <span class=\"bd\">innuendo</span>, then it&#8217;s either:</span><ul><li><span class=\"nl\"> <span class=\"bd\">False</span> (popular), which can be understood by everyone &mdash; <span class=\"lnk caseln\">Lewis v Daily Telegraph</span>, or</span></li><li><span class=\"nl\"> <span class=\"bd\">True</span> (legal), only decodable by those with special knowledge &mdash; <span class=\"lnk caseln\">Cassidy v Daily Mirror</span>.</span></li></ul></li></ul></li></ol><span class=\"nl\"><span class=\"it\">And must</span> &mdash;</span><ol><li style=\"counter-reset: item 2;\"><span class=\"nl\"> <span class=\"bd\">Refer to the claimant</span></span><ul><li><span class=\"nl\">The best way of achieving this is by naming them.</span></li><li><span class=\"nl\">Whether or not you think you&#8217;re making it up &mdash; <span class=\"lnk caseln\">Hulton v Jones</span>.</span></li><li><span class=\"nl\">It can also refer to them only <span class=\"it\">by accident</span> &mdash; <span class=\"lnk caseln\">Newstead v London Express</span>.</span></li><li><span class=\"nl\">Accidental identification does <span class=\"bd\">not</span> apply to <span class=\"bd\">lookalike photos</span> &mdash; <span class=\"lnk caseln\">O&#8217;Shea v MGN</span>, for ECHR Art. 10 reasons.</span></li></ul><li><span class=\"nl\"> Have been <span class=\"bd\">published by the defendant</span></span><ul><li><span class=\"nl\"> To at least one person <span class=\"it\">other</span> than the claimant. Except the Butler &mdash; <span class=\"lnk caseln\">Huth v Huth</span>.</span></li></ul></ol>"
    ],
    "NUMBER": "273"
},
{
    "TYPE": "Reading",
    "NAME": "Defamation - Reading",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Essential</span></span>",
        "Steele, <span class=\"it\">Tort Law</span>, ch. 13",
        "<span class=\"lnk caseln\">Youssoupoff v MGM</span> &mdash; <span class=\"lnk caseln\">Sim v Stretch</span> &mdash; <span class=\"lnk caseln\">Cooke v MGN</span> &mdash; <span class=\"lnk caseln\">Byrne v Deane</span> &mdash; <span class=\"lnk caseln\">Baturina v Times</span> &mdash; <span class=\"lnk caseln\">Lewis v Daily Telegraph</span> &mdash; <span class=\"lnk caseln\">Cassidy v Daily Mirror</span> &mdash; <span class=\"lnk caseln\">Hulton v Jones</span> &mdash; <span class=\"lnk caseln\">Godfrey v Demon</span> &mdash; <span class=\"lnk caseln\">Bunt v Tilley</span> &mdash; <span class=\"lnk caseln\">Tamiz v Google</span> &mdash; <span class=\"lnk caseln\">Grobbelaar v News Group</span> &mdash; <span class=\"lnk caseln\">British Chiropractic Association v Singh</span> &mdash; <span class=\"lnk caseln\">Defamation Act 2013</span> &mdash; <span class=\"lnk caseln\">Defamation Act 1996</span> &mdash; <span class=\"lnk caseln\">Reynolds v Times Newspapers</span> &mdash; <span class=\"lnk caseln\">Horrocks v Lowe</span> &mdash; <span class=\"lnk caseln\">Flood v The Times</span> &mdash; <span class=\"lnk caseln\">Steel and Morris v UK</span> &mdash; <span class=\"lnk caseln\">John v MGN</span>",
        "<span class=\"ud\"><span class=\"bd\">Additional</span></span>",
        "C. de Than, <span class=\"it\">The Defamation Act 2013: The Art of Missing The Bigger Picture</span>, at &mdash; <br> http://inforrm.wordpress.com/2014/03/24/the-defamation-act-2013-the-art-of-missing-the-big-picture-claire-de-than/ <br> S. Gale, <span class=\"it\">Qualified Privilege in Defamation and the Evolution of the Doctrine of Reportage</span> (2015) 23 Tort L Rev 16<br> D. Hooper, K. Waite, and O. Murphy, <span class=\"it\">Defamation Act 2013 &mdash; what difference will it really make?</span> (2013) 24 Ent LR 199<br> A. Mullis and A. Scott, <span class=\"it\">Tilting at Windmills: The Defamation Act 2013</span> (2014) 77 MLR 87<br> P. Steele, <span class=\"it\">Defamation Act 2013: A Sensible Balance or a Step Back?</span> at -<br> http://inforrm.wordpress.com/2014/01/03/defamation-act-2013-a-sensible-balance-or-a-step-back-philip-steele/<br> D. Tan, <span class=\"it\">The Reynolds Privilege Revitalised</span> (2013) 139 LQR 27<br> Taylor Wessing, <span class=\"it\">Defamation Act 2013: Taylor Wessing Analysis</span>, at &mdash; <br> http://www.taylorwessing.com/fileadmin/files/docs/The-Defamation-Act-2013.pdf",
        "<span class=\"lnk caseln\">Gray v Jones</span> &mdash; <span class=\"lnk caseln\">Bloodworth v Gray</span> &mdash; <span class=\"lnk caseln\">Monson v Tussauds</span> &mdash; <span class=\"lnk caseln\">Berkoff v Burchill</span> &mdash; <span class=\"lnk caseln\">Charleston v News Group</span> &mdash; <span class=\"lnk caseln\">Thornton v Telegraph</span> &mdash; <span class=\"lnk caseln\">Ames v Spamhaus Project Ltd</span> &mdash; <span class=\"lnk caseln\">Tolley v Fry</span> &mdash; <span class=\"lnk caseln\">Morgan v Odhams Press</span> &mdash; <span class=\"lnk caseln\">O&#8217;Shea v MGN</span> &mdash; <span class=\"lnk caseln\">Knuppfer v London Express</span> &mdash; <span class=\"lnk caseln\">Theaker v Richardson</span> &mdash; <span class=\"lnk caseln\">Loutchansky v The Times (no 2)</span> &mdash; <span class=\"lnk caseln\">Times Newspapers Ltd v United Kingdom</span> &mdash; <span class=\"lnk caseln\">Edwards v Bell</span> &mdash; <span class=\"lnk caseln\">Telnikoff v Matusevich</span> &mdash; <span class=\"lnk caseln\">Waterson v Lloyd</span> &mdash; <span class=\"lnk caseln\">Spiller v Joseph</span> &mdash; <span class=\"lnk caseln\">A v UK</span> &mdash; <span class=\"lnk caseln\">Watt v Longsdon</span> &mdash; <span class=\"lnk caseln\">Clift v Slough</span> &mdash; <span class=\"lnk caseln\">Milne v Express</span>"
    ],
    "NUMBER": "274"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Gray v Jones",
        "Bloodworth v Gray",
        "Morgan v Odhams Press",
        "Telnikoff v Matusevich",
        "British Chiropractic Association v Singh",
        "The Times v UK",
        "John v MGN",
        "Loutchansky v The Times (no 2)",
        "Monson v Tussauds",
        "Thornton v Telegraph",
        "Byrne v Deane",
        "Knupffer v London Express"
    ],
    "NAME": "Youssoupoff v MGM",
    "SUMMARY": [
        "The plaintiff, an emigr\u00e9e Russian princess, complained that the character of Princess Natasha in the defendant&#8217;s film <span class=\"it\">Rasputin, the Mad Monk</span> was obviously her. The film suggested that she had been seduced by Rasputin, and she was awarded \u00a325K damages at trial. The defendant argued that if there was an indication of nookie between Rasputin and Natasha, it was in fact <span class=\"it\">rape</span>, or as the headnotes on Lexis put it, <span class=\"it\">ravishing</span>, not seduction."
    ],
    "HELD": [
        "Defamation on screen or other means of reproduction is <span class=\"bd\">libel</span>, not slander; damages in defamation are a matter for the jury.",
        "That implying a woman has been <span class=\"it\">ravished</span> is defamatory, as it will cause her the special damage of being shunned."
    ],
    "AKA": "Youssoupoff",
    "NUMBER": "275",
    "CATEGORIES": [
        "Defamation",
        "Slander",
        "Libel"
    ],
    "CATEGORY": "Defamation &mdash; Slander &mdash; Libel",
    "CITATION": "Youssoupoff v Metro-Goldwyn-Mayer Pictures Ltd (1934) 50 TLR 581",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Development",
        "Criticised",
        "Amusing",
        "EPLR"
    ],
    "YEAR": "1934"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Bloodworth v Gray",
        "Youssoupoff v MGM",
        "Horrocks v Lowe",
        "Bunt v Tilley",
        "Theaker v Richardson",
        "O'Shea v MGN",
        "Spiller v Joseph",
        "Sim v Stretch",
        "British Chiropractic Association v Singh",
        "Reynolds v Times Newspapers",
        "Cassidy v Daily Mirror",
        "Tamiz v Google"
    ],
    "NAME": "Gray v Jones",
    "SUMMARY": [
        "The defendant innkeeper had said publicly of the claimant that they were a <span class=\"bd\">convict</span>, and refused the claimant board, saying &#8216;I won&#8217;t have you here.&#8217;"
    ],
    "HELD": [
        "There is no requirement to show <span class=\"bd\">special damage</span> when the slander is an imputation of criminal conduct punishable by (more than six months) porridge."
    ],
    "YEAR": "1939",
    "CATEGORIES": [
        "Defamation",
        "Slander",
        "Special Damage Exceptions in Slander"
    ],
    "CATEGORY": "Defamation &mdash; Slander &mdash; Special Damage Exceptions in Slander",
    "CITATION": "Gray v Jones [1939] 1 All ER 795",
    "FLAGS": [
        "Key",
        "Development"
    ],
    "NUMBER": "276"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Gray v Jones",
        "Youssoupoff v MGM",
        "Baturina v Times",
        "Monson v Tussauds",
        "Byrne v Deane",
        "Bunt v Tilley",
        "Cassidy v Daily Mirror",
        "Loutchansky v The Times (no 2)",
        "Reynolds v Times Newspapers",
        "British Chiropractic Association v Singh",
        "Flood v The Times",
        "Bryanston v De Vries (no 1)"
    ],
    "NAME": "Bloodworth v Gray",
    "SUMMARY": [
        "The defendant had said of the claimant &#8216;he&#8217;s got the damn pox,&#8217; meaning presumably the <span class=\"it\">French disease</span>."
    ],
    "HELD": [
        "Imputation of certain contagious diseases is actionable in slander without proof of special damage."
    ],
    "YEAR": "1844",
    "CATEGORIES": [
        "Defamation",
        "Slander",
        "Special Damage Exceptions in Slander"
    ],
    "CATEGORY": "Defamation &mdash; Slander &mdash; Special Damage Exceptions in Slander",
    "CITATION": "Bloodworth v Gray (1844) 7 Man &amp; G 334",
    "FLAGS": [
        "Key",
        "Development",
        "Overruled"
    ],
    "NUMBER": "277"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Byrne v Deane",
        "Ames v Spamhaus Project",
        "Trolley v Fry",
        "Berkoff v Burchill",
        "Thornton v Telegraph",
        "Charleston v New Group",
        "Monson v Tussauds",
        "Cassidy v Daily Mirror",
        "Baturina v Times",
        "Cooke v MGN",
        "Lewis v Daily Telegraph",
        "Youssoupoff v MGM"
    ],
    "NAME": "Sim v Stretch",
    "SUMMARY": [
        "The claim was that the defendant had sent him a telegram in which he&#8217;d accused the claimant of <span class=\"it\">enticing away a servant</span>. Tempora mutantur. The question in the HL was whether the words were in fact defamatory."
    ],
    "HELD": [
        "Lord Atkin &mdash; the conventional requirement that the material caused the claimant <span class=\"it\">exposure to hatred, ridicule or contempt</span>, should be replaced with a less-restrictive definition, that <span class=\"bd\">defamatory</span> should mean &#8216;<span class=\"bd\">lowering the reputation of the claimant</span> in the estimation of <span class=\"bd\">&#8220;right-minded&#8221; members of society</span>.&#8217;"
    ],
    "YEAR": "1936",
    "CATEGORIES": [
        "Defamation",
        "Meaning of Defamatory"
    ],
    "CATEGORY": "Defamation &mdash; Meaning of Defamatory",
    "CITATION": "Sim v Stretch [1936] 2 All ER 1237",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Leading",
        "Test",
        "EPLR"
    ],
    "NUMBER": "278"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Trolley v Fry",
        "Baturina v Times",
        "Lewis v Daily Telegraph",
        "Cassidy v Daily Mirror",
        "Charleston v New Group",
        "Berkoff v Burchill",
        "Thornton v Telegraph",
        "Cooke v MGN",
        "Ames v Spamhaus Project",
        "Byrne v Deane",
        "Sim v Stretch",
        "British Chiropractic Association v Singh"
    ],
    "COMMENT": "<span class=\"it\">Not proven</span> is the Scottish half-way house between guilty and not-guilty.",
    "NAME": "Monson v Tussauds",
    "SUMMARY": [
        "The defendant had been tried for murder but acquitted <span class=\"it\">not proven</span>. The defendant put a waxwork of him alongside those of a convicted murderer, Napoleon, a suicide and another murderer, guarding the entrance to the &#8216;Chamber of Horrors&#8217;."
    ],
    "HELD": [
        "Libel can be <span class=\"it\">by innuendo</span>, and although the publication must be in a permanent form, this need not be in words.",
        "His claim was allowed, and was awarded <span class=\"it\">a farthing</span> in damages."
    ],
    "NUMBER": "279",
    "CATEGORIES": [
        "Defamation",
        "Meaning of Defamatory",
        "Innuendo"
    ],
    "CATEGORY": "Defamation &mdash; Meaning of Defamatory &mdash; Innuendo",
    "CITATION": "Monson v Tussauds Ltd [1894] 1 QB 671",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Leading",
        "Amusing"
    ],
    "YEAR": "1894"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Baturina v Times",
        "Thornton v Telegraph",
        "Trolley v Fry",
        "Cooke v MGN",
        "Lewis v Daily Telegraph",
        "Ames v Spamhaus Project",
        "Byrne v Deane",
        "Sim v Stretch",
        "Charleston v New Group",
        "Monson v Tussauds",
        "Cassidy v Daily Mirror",
        "Flood v The Times"
    ],
    "NAME": "Berkoff v Burchill",
    "SUMMARY": [
        "The defendant, a notably-waspish journalist, had said the claimant, an actor, was &#8216;<span class=\"it\">hideously ugly</span>&#8216; in print."
    ],
    "HELD": [
        "Whether words are defamatory is a matter for the jury. By majority, To call an actor &#8216;<span class=\"it\">hideously ugly</span>&#8216; could expose him to ridicule, and so was defamatory, even if there was no imputation of bad conduct.",
        "Millett LJ, dissenting, held that words meant <span class=\"bd\">in jest</span> should not be actionable."
    ],
    "YEAR": "1996",
    "CATEGORIES": [
        "Defamation",
        "Meaning of Defamatory",
        "No imputation of improper conduct"
    ],
    "CATEGORY": "Defamation &mdash; Meaning of Defamatory &mdash; No imputation of improper conduct",
    "CITATION": "Berkoff v Burchill and The Times [1996] 4 All ER 1008",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Leading",
        "Amusing"
    ],
    "NUMBER": "280"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Monson v Tussauds",
        "Cassidy v Daily Mirror",
        "Ames v Spamhaus Project",
        "Byrne v Deane",
        "Sim v Stretch",
        "Baturina v Times",
        "Thornton v Telegraph",
        "Trolley v Fry",
        "Lewis v Daily Telegraph",
        "Cooke v MGN",
        "Berkoff v Burchill",
        "Newstead v Express"
    ],
    "NAME": "Charleston v New Group",
    "SUMMARY": [
        "Two actors in &#8216;Neighbours&#8217; had had their heads photoshopped onto a pornographic image. The defendant published it to accompany a headline and story. The actors sued, claiming that most people would see the photo and headline, and <span class=\"it\">jump to conclusions</span>."
    ],
    "HELD": [
        "The &#8220;right-minded&#8221; members of society, whose estimation of a claimant in defamation must be lowered, will be taken to read <span class=\"bd\">the whole of the publication</span>, rather than just, e.g., a headline or photo that taken on its own would be defamatory."
    ],
    "YEAR": "1995",
    "CATEGORIES": [
        "Defamation",
        "Meaning of Defamatory",
        "Totality of Published Material"
    ],
    "CATEGORY": "Defamation &mdash; Meaning of Defamatory &mdash; Totality of Published Material",
    "CITATION": "Charleston v News Group Newspapers Ltd [1995] UKHL 2 AC 65",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Leading",
        "Amusing"
    ],
    "NUMBER": "281"
},
{
    "TYPE": "Statute",
    "RELATED": [
        "Defamation Act 1996",
        "Unfair Contract Terms Act 1977",
        "Road Traffic Act 1988",
        "Occupiers' Liability Act 1984",
        "Law Reform (Contributory Negligence) Act 1945",
        "Occupiers' Liability Act 1957",
        "Consumer Protection Act 1987",
        "Compensation Act 2006"
    ],
    "NAME": "Defamation Act 2013",
    "CATEGORIES": [
        "Defamation",
        "Statute",
        "Meaning of Defamatory",
        "Requirement of Seriousness",
        "Multiple Publication",
        "Defences",
        "Truth",
        "Opinion or Truth",
        "Websites"
    ],
    "CATEGORY": "Defamation &mdash; Statute &mdash; Meaning of Defamatory &mdash; Requirement of Seriousness &mdash; Multiple Publication &mdash; Defences &mdash; Truth &mdash; Opinion or Truth &mdash; Websites",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Serious Harm</span></span><br>&emsp;&emsp;There must be actual or potential <span class=\"bd\">serious harm</span> arising from the material.<br>&emsp;&emsp;<span class=\"bd\">S1(1)</span> &#8216;A statement is not defamatory unless its publication has caused or is likely to cause serious harm to the reputation of the claimant.&#8217; <span class=\"bd\">S2</span> &mdash; absolute defence of (substantial) <span class=\"bd\">truth</span> &mdash; <span class=\"lnk caseln\">Grobbelaar</span>.<br>&emsp;&emsp;<span class=\"bd\">S3</span> &mdash; absolute defence of <span class=\"bd\">honest opinion</span>.",
        "<span class=\"ud\"><span class=\"bd\">Opinion</span></span><br>&emsp;&emsp;<span class=\"bd\">S3(3)</span> &mdash; opinion could have been held by an honest person basis of &#8216;any fact which existed at the time [of publication]&#8216; or &#8216;anything asserted to be a fact in a privileged statement published <span class=\"it\">before</span> the statement.&#8217;<br>&emsp;&emsp;<span class=\"bd\">S3(4)</span> &mdash; the opinion must have been held <span class=\"bd\">honestly</span>.",
        "<span class=\"ud\"><span class=\"bd\">Publication in the Public Interest</span></span><br>&emsp;&emsp;<span class=\"bd\">S4(1)</span> &mdash; This defence operates when (a) the statement was <span class=\"bd\">in the public interest</span> and (b) the <span class=\"bd\">defendant reasonably believed so</span>.<br>&emsp;&emsp;<span class=\"bd\">S4(6)</span> &mdash; &#8216;The common law defence known as the Reynolds defence is abolished.&#8217; (Lol, <span class=\"it\">really?</span> It&#8217;s still relied upon in 2015...)<br>&emsp;&emsp;<span class=\"bd\">S4(6)</span> &mdash; the <span class=\"lnk caseln\">Reynolds</span> defence is &#8216;replaced&#8217; by &#8216;publication in the public interest.",
        "<span class=\"ud\"><span class=\"bd\">Operators of Websites</span></span><br>&emsp;&emsp;<span class=\"bd\">S5</span> &mdash; a website operator has <span class=\"bd\">S5(3)</span> to show they didn&#8217;t post the statement, unless the claimant can show <span class=\"bd\">S5(3)</span> (a) the author couldn&#8217;t be identified by the claimant, (b) they complained to the operator but (c) the operator didn&#8217;t respond (in accordance with the Act&#8217;s regulations in force). See <span class=\"lnk caseln\">Godfrey v Demon</span>.",
        "<span class=\"ud\"><span class=\"bd\">Single Publication Rule</span></span><br>&emsp;&emsp;<span class=\"bd\">S8</span> provides that repeatedly publishing the same, or substantially the same, actionable statement gives rise to a cause of action on <span class=\"bd\">the date of first publication</span>, unless <span class=\"bd\">(S8(4))</span> the manner of subsequent publication is materially different &mdash; <span class=\"lnk caseln\">Loutchansky</span> and <span class=\"lnk caseln\">The Times v UK</span>.",
        "<span class=\"ud\"><span class=\"bd\">New Remedies</span></span><br>&emsp;&emsp;<span class=\"bd\">S12</span> and <span class=\"bd\">S13</span> provide <span class=\"it\">publication of summary of judgment</span> and <span class=\"it\">order to cease distribuing</span> as new things to plead for. See <span class=\"lnk caseln\">Defamation - Remedies</span>"
    ],
    "WIKILINK": [
        "https://en.wikipedia.org/wiki/Defamation_Act_2013"
    ],
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/2013/26/contents/enacted"
    ],
    "NUMBER": "282"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Cooke v MGN",
        "Ames v Spamhaus Project",
        "Berkoff v Burchill",
        "Baturina v Times",
        "Byrne v Deane",
        "Charleston v New Group",
        "Sim v Stretch",
        "Cassidy v Daily Mirror",
        "Monson v Tussauds",
        "Trolley v Fry",
        "Lewis v Daily Telegraph",
        "Theaker v Richardson"
    ],
    "COMMENT": "Lynn Barber said, on Desert Island Discs in 2010 that at Oxford, she slept with &#8220;probably 50 men&#8221; during <span class=\"bd\">two terms</span> at Oxford: &#8220;It was quite good going. I was just jamming them in.&#8221;",
    "NAME": "Thornton v Telegraph",
    "SUMMARY": [
        "Lynn Barber had written a disobliging review of the claimant&#8217;s book in the defendant newspaper. In it, she said of the claimant that she practiced <span class=\"it\">copy approval</span>, i.e., sending the transcript of an interview to an interviewee after the fact. That, she said, was something of which <span class=\"it\">real</span> writers and journos disapprove with vehemence (because to do so is to jeopardise neutrality, trustworthiness, integrity, credibility and so on)."
    ],
    "HELD": [
        "The imputation must be <span class=\"it\">serious</span> to succeed in defamation. Merely saying that a writer followed an unconventional practice, or one subject to criticism, is not enough."
    ],
    "NUMBER": "283",
    "CATEGORIES": [
        "Defamation",
        "Meaning of Defamatory",
        "Requirement of Seriousness"
    ],
    "CATEGORY": "Defamation &mdash; Meaning of Defamatory &mdash; Requirement of Seriousness",
    "CITATION": "Thornton v Telegraph Media Group Ltd [2010] EWHC 1414 (QB)",
    "COURT": "EWHC",
    "FLAGS": [
        "Important",
        "Amusing",
        "Recent"
    ],
    "YEAR": "2010"
},
{
    "TRIVIA": "Paul Nischal was the first conservative parliamentary candidate of Indian origin.",
    "RELATED": [
        "Thornton v Telegraph",
        "Ames v Spamhaus Project",
        "Baturina v Times",
        "Monson v Tussauds",
        "Cassidy v Daily Mirror",
        "Berkoff v Burchill",
        "Trolley v Fry",
        "Byrne v Deane",
        "Sim v Stretch",
        "Lewis v Daily Telegraph",
        "Charleston v New Group",
        "Hulton v Jones"
    ],
    "NAME": "Cooke v MGN",
    "TYPE": "Case",
    "SUMMARY": [
        "The scandal-sheet purveying defendant published a story about slum landlords, focusing on someone other than the claimant. They, though, were named in a &#8216;rogue&#8217;s gallery&#8217; accompanying the story, which was splashed on the front-paged with the headline MILLIONAIRE TORY CASHES IN ON TV BENEFITS STREET. A week later, the newspaper published an apology and a correction."
    ],
    "HELD": [
        "The publication of an apology, so as to reach the same audience, may militate against there being <span class=\"it\">serious harm</span>."
    ],
    "NUMBER": "284",
    "CATEGORIES": [
        "Defamation",
        "Meaning of Defamatory",
        "Requirement of Seriousness",
        "Apology or Retraction"
    ],
    "CATEGORY": "Defamation &mdash; Meaning of Defamatory &mdash; Requirement of Seriousness &mdash; Apology or Retraction",
    "CITATION": "Cooke v Mirror Group Newspapers Ltd [2014] EWHC 2831",
    "COURT": "EWHC",
    "FLAGS": [
        "Important",
        "EPLR",
        "Recent"
    ],
    "YEAR": "2014"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Cooke v MGN",
        "Thornton v Telegraph",
        "Berkoff v Burchill",
        "Charleston v New Group",
        "Byrne v Deane",
        "Sim v Stretch",
        "Trolley v Fry",
        "Lewis v Daily Telegraph",
        "Baturina v Times",
        "Cassidy v Daily Mirror",
        "Monson v Tussauds",
        "Grobbelaar v News Group"
    ],
    "NAME": "Ames v Spamhaus Project",
    "SUMMARY": [
        "The claimants owned a successful &#8216;direct email marketing&#8217; company. The defendants published claims on their website that the claimants were spam-merchants, and as they put it, &#8216;cybercriminals.&#8217;"
    ],
    "HELD": [
        "Serious <span class=\"bd\">claims</span> do not necessarily do actual or potential serious <span class=\"bd\">harm</span> as required by S1 of the <span class=\"lnk caseln\">Defamation Act 2013</span>."
    ],
    "YEAR": "2015",
    "CATEGORIES": [
        "Defamation",
        "Meaning of Defamatory",
        "Requirement of Seriousness",
        "Defamation Act 2013"
    ],
    "CATEGORY": "Defamation &mdash; Meaning of Defamatory &mdash; Requirement of Seriousness &mdash; Defamation Act 2013",
    "CITATION": "Ames v The Spamhaus Project Ltd [2015] EWHC 127",
    "COURT": "EWHC",
    "FLAGS": [
        "Important",
        "2015/2016!"
    ],
    "NUMBER": "285"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Lewis v Daily Telegraph",
        "Berkoff v Burchill",
        "Trolley v Fry",
        "Knupffer v London Express",
        "Cooke v MGN",
        "Ames v Spamhaus Project",
        "O'Shea v MGN",
        "Monson v Tussauds",
        "Thornton v Telegraph",
        "Sim v Stretch",
        "Cassidy v Daily Mirror",
        "Morgan v Odhams Press"
    ],
    "NAME": "Byrne v Deane",
    "SUMMARY": [
        "Someone had dobbed in a golf club to the rozzers for having illegal gambling machines. A note with accusing the claimant was put on the noticeboard by the defendant.",
        "The text of the note &mdash; &#8216;For many years upon this spot/You heard the sound of a merry bell/Those who were rash and those who were not/Lost and made a spot of cash/But he who gave the game away/May he <span class=\"bd\">Byrne</span> in hell and rue the day.&#8217;"
    ],
    "HELD": [
        "The allegation complained of must tarnish the opinion of the claimant in the opinion of the <span class=\"it\">right-minded</span> member of society invoked by Lord Atkin in <span class=\"lnk caseln\">Sim v Stretch</span>.",
        "The action alleged of the claimant was not dishonourable."
    ],
    "YEAR": "1937",
    "CATEGORIES": [
        "Defamation",
        "Meaning of Defamatory",
        "Public Opinion",
        "Reference to Claimant"
    ],
    "CATEGORY": "Defamation &mdash; Meaning of Defamatory &mdash; Public Opinion &mdash; Reference to Claimant",
    "CITATION": "Byrne v Deane [1937] EWCA 1 KB 818",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Amusing",
        "EPLR"
    ],
    "NUMBER": "286"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Trolley v Fry",
        "Cassidy v Daily Mirror",
        "Monson v Tussauds",
        "Lewis v Daily Telegraph",
        "Cooke v MGN",
        "Thornton v Telegraph",
        "Byrne v Deane",
        "Charleston v New Group",
        "Berkoff v Burchill",
        "Ames v Spamhaus Project",
        "Sim v Stretch",
        "Bunt v Tilley"
    ],
    "COMMENT": "This could be seen to amount to strict liability.",
    "NAME": "Baturina v Times",
    "SUMMARY": [
        "A Russian businesswoman, who&#8217;d recently made a formal declaration of assets as obliged by Russian anti-corruption law, was said in the defendant newspaper to have spent \u00a350M on a mansion in Highgate bought via the BVIs, and was planning on emiserating her neighbours by building an iceberg-basement."
    ],
    "HELD": [
        "Even if an innuendo is not intended or foreseen to have a defamatory effect, it can nevertheless be actionable.  TODO, unclear."
    ],
    "NUMBER": "287",
    "CATEGORIES": [
        "Defamation",
        "Meaning of Defamatory",
        "Innuendo"
    ],
    "CATEGORY": "Defamation &mdash; Meaning of Defamatory &mdash; Innuendo",
    "CITATION": "Baturina v Times Newspapers [2011] EWCA Civ 308",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "EPLR",
        "Recent"
    ],
    "YEAR": "2011"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Trolley v Fry",
        "Cassidy v Daily Mirror",
        "Baturina v Times",
        "Monson v Tussauds",
        "Berkoff v Burchill",
        "Charleston v New Group",
        "Cooke v MGN",
        "Thornton v Telegraph",
        "Ames v Spamhaus Project",
        "Byrne v Deane",
        "Sim v Stretch",
        "Hulton v Jones"
    ],
    "NAME": "Lewis v Daily Telegraph",
    "SUMMARY": [
        "A newspaper article said the claimant company was being investigated for fraud. This was in fact <span class=\"it\">true</span>. The claimant sued, arguing the words amounted to a statement that they were <span class=\"it\">guilty</span> of fraud."
    ],
    "HELD": [
        "The <span class=\"it\">right-minded</span> person would not infer a person to be <span class=\"it\">guilty</span> from a statement that an investigation is being conducted."
    ],
    "YEAR": "1964",
    "CATEGORIES": [
        "Defamation",
        "Meaning of Defamatory",
        "Innuendo",
        "False (popular) Innunendo"
    ],
    "CATEGORY": "Defamation &mdash; Meaning of Defamatory &mdash; Innuendo &mdash; False (popular) Innunendo",
    "CITATION": "Lewis v Daily Telegraph Ltd [1964] AC 234",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "288"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Trolley v Fry",
        "Monson v Tussauds",
        "Lewis v Daily Telegraph",
        "Baturina v Times",
        "Berkoff v Burchill",
        "Cooke v MGN",
        "Ames v Spamhaus Project",
        "Sim v Stretch",
        "Thornton v Telegraph",
        "Byrne v Deane",
        "Charleston v New Group",
        "Newstead v Express"
    ],
    "NAME": "Cassidy v Daily Mirror",
    "SUMMARY": [
        "The defendant published a photo of the claimant, a noteable racehorse owner, and a young woman, with the caption saying the two had announced their engagement. But the defendant was already married. The claimant argued that those who actually <span class=\"it\">knew</span> him might, on seeing the material, think he was an adulterer."
    ],
    "HELD": [
        "Material that superficially has no defamatory import <span class=\"bd\">can</span> be defamatory, if the material would be cast in a different light to a certain class of people who have extra information."
    ],
    "YEAR": "1929",
    "CATEGORIES": [
        "Defamation",
        "Meaning of Defamatory",
        "Innuendo",
        "True (legal) Innunendo"
    ],
    "CATEGORY": "Defamation &mdash; Meaning of Defamatory &mdash; Innuendo &mdash; True (legal) Innunendo",
    "CITATION": "Cassidy v Daily Mirror Newspapers Ltd [1929] 2 KB 331",
    "COURT": "EWCA",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "289"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Cassidy v Daily Mirror",
        "Lewis v Daily Telegraph",
        "Baturina v Times",
        "Monson v Tussauds",
        "Charleston v New Group",
        "Cooke v MGN",
        "Byrne v Deane",
        "Sim v Stretch",
        "Berkoff v Burchill",
        "Ames v Spamhaus Project",
        "Thornton v Telegraph",
        "A v UK"
    ],
    "NAME": "Trolley v Fry",
    "SUMMARY": [
        "The claimant, an amateur golfer, sued the defendant for having used his image in a chocolate ad without consulting him. The special knowedge was that those who knew him would think he was in breach of the rule against remuneration in amateur golfing."
    ],
    "HELD": [
        "An inference about someone&#8217;s conduct available <span class=\"it\">only to those known personally to him</span> could indee be drawn from an innocuous publication such as an advertisement, and as such,following <span class=\"lnk caseln\">Cassidy v Daily Mirror</span>, it could be defamatory."
    ],
    "YEAR": "1931",
    "CATEGORIES": [
        "Defamation",
        "Meaning of Defamatory",
        "Innuendo",
        "True (legal) Innunendo"
    ],
    "CATEGORY": "Defamation &mdash; Meaning of Defamatory &mdash; Innuendo &mdash; True (legal) Innunendo",
    "CITATION": "Tolley v JS Fry &amp; Sons Ltd [1931] UKHL 1",
    "COURT": "UKHL",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "290"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Newstead v Express",
        "Byrne v Deane",
        "Knupffer v London Express",
        "Morgan v Odhams Press",
        "O'Shea v MGN",
        "Tamiz v Google",
        "Clift v Slough",
        "Monson v Tussauds",
        "Berkoff v Burchill",
        "British Chiropractic Association v Singh",
        "Trolley v Fry",
        "Ames v Spamhaus Project"
    ],
    "NAME": "Hulton v Jones",
    "SUMMARY": [
        "A lazy journalist, wanting to add colour to a story about a motor show in France, added in a bit about having seen there &#8216;Artemus Jones with a woman not his wife who must be you know \u2013 the other thing.&#8217; He thought that was a safe name to invent, but he was wrong, and the real Artemus Jones was a barrister."
    ],
    "HELD": [
        "A reasonable reader would think, on reading a publication naming a person and purporting to be factual, that the person had done what was said."
    ],
    "FLAGS": [
        "Important",
        "Amusing",
        "EPLR"
    ],
    "YEAR": "1910",
    "CATEGORIES": [
        "Defamation",
        "Reference to Claimant",
        "Accidental Defamation"
    ],
    "CATEGORY": "Defamation &mdash; Reference to Claimant &mdash; Accidental Defamation",
    "COURT": "UKHL",
    "CITATION": "E. Hulton &amp; Co v Jones [1910] AC 20",
    "NUMBER": "291"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Hulton v Jones",
        "Knupffer v London Express",
        "Byrne v Deane",
        "Morgan v Odhams Press",
        "O'Shea v MGN",
        "Sim v Stretch",
        "Bryanston v De Vries (no 1)",
        "Cooke v MGN",
        "Berkoff v Burchill",
        "Waterson v Lloyd",
        "A v UK",
        "Loutchansky v The Times (no 2)"
    ],
    "NAME": "Newstead v Express",
    "SUMMARY": [
        "The defendant published details of a trial, saying the defendant, &#8216;Harold Newstead, a 30-year-old Camberwell man,&#8217; had been sent down for bigamy. But there happened to be <span class=\"it\">two</span> such people, the non-incarcerated of which sued."
    ],
    "HELD": [
        "A publication which is <span class=\"bd\">accidentlly</span> defamatory is nevertheless actionable. What is to be considered is <span class=\"it\">what a fair-minded reader would think</span>."
    ],
    "YEAR": "1940",
    "CATEGORIES": [
        "Defamation",
        "Reference to Claimant",
        "Accidental Defamation"
    ],
    "CATEGORY": "Defamation &mdash; Reference to Claimant &mdash; Accidental Defamation",
    "COURT": "EWCA",
    "CITATION": "Newstead v London Express Newspaper Ltd [1940] 1 KB 377",
    "NUMBER": "292"
},
{
    "TYPE": "Case",
    "RELATED": [
        "O'Shea v MGN",
        "Knupffer v London Express",
        "Newstead v Express",
        "Hulton v Jones",
        "Byrne v Deane",
        "Reynolds v Times Newspapers",
        "Theaker v Richardson",
        "Grobbelaar v News Group",
        "Sim v Stretch",
        "Bunt v Tilley",
        "The Times v UK",
        "Lewis v Daily Telegraph"
    ],
    "NAME": "Morgan v Odhams Press",
    "SUMMARY": [
        "A story was published in the defendant&#8217;s newspaper which carried the implication that the claimaint, a journalist, had been involved in a woman&#8217;s kidnapping. He was not named, but he argued it carried enough implications, to those who knew him, to identify him de facto."
    ],
    "HELD": [
        "The test for whether a publication refers to a claimant is whether the ordinary, sensible reader would understand the words as referring to the claimant, <span class=\"it\">in light of any facts known to him</span>."
    ],
    "YEAR": "1971",
    "CATEGORIES": [
        "Defamation",
        "Reference to Claimant"
    ],
    "CATEGORY": "Defamation &mdash; Reference to Claimant",
    "CITATION": "Morgan v Odhams Press Ltd [1971] 1 WLR 1239",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Test"
    ],
    "NUMBER": "293"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Hulton v Jones",
        "Newstead v Express",
        "Byrne v Deane",
        "The Times v UK",
        "Morgan v Odhams Press",
        "Knupffer v London Express",
        "Waterson v Lloyd",
        "Trolley v Fry",
        "Bryanston v De Vries (no 1)",
        "Cassidy v Daily Mirror",
        "Steel and Morris v UK",
        "Charleston v New Group"
    ],
    "NAME": "O'Shea v MGN",
    "SUMMARY": [
        "The defendant&#8217;s website featured adverts for a porn-site in which appeared a &#8220;model&#8221; who was a dead-ringer for the claimant. So she sued, arguing those who knew her would think she was involved in the pornography business. The defendant argued the claim was incompatible with article 10(2) rights."
    ],
    "HELD": [
        "When the publication is a photo, then the rule of <span class=\"lnk caseln\">Newstead v Express</span> and <span class=\"lnk caseln\">Morgan v Odhams Press</span>, in which there was liability for innocent defamation, cannot apply. If it were to, that would amount to an infringement of ECHR Art. 10(2)."
    ],
    "YEAR": "2001",
    "CATEGORIES": [
        "Defamation",
        "Reference to Claimant",
        "Art. 10 in Defamation"
    ],
    "CATEGORY": "Defamation &mdash; Reference to Claimant &mdash; Art. 10 in Defamation",
    "CITATION": "O&#8217;Shea v Mirror Group Newspapers Ltd [2001] EMLR 40",
    "COURT": "EWHC",
    "FLAGS": [
        "Leading"
    ],
    "NUMBER": "294"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Hulton v Jones",
        "Byrne v Deane",
        "O'Shea v MGN",
        "Newstead v Express",
        "Morgan v Odhams Press",
        "Godfrey v Demon",
        "The Times v UK",
        "Ames v Spamhaus Project",
        "Huth v Huth",
        "Theaker v Richardson",
        "Tamiz v Google",
        "Sim v Stretch"
    ],
    "NAME": "Knupffer v London Express",
    "SUMMARY": [
        "The claimant was the head of the national branch a political party <span class=\"it\">Mlado Russ</span>, Young Russia, which had twenty or so members in England. It was described by the defendant newspaper as acting for Hitler."
    ],
    "HELD": [
        "If a reasonabe person could interpret a statement about a <span class=\"bd\">group</span> as <span class=\"bd\">applying to each member</span> of it, then the requirement of reference to <span class=\"it\">individual</span> members of the group would be satisfied."
    ],
    "YEAR": "1944",
    "CATEGORIES": [
        "Defamation",
        "Reference to Claimant",
        "Group Defamation"
    ],
    "CATEGORY": "Defamation &mdash; Reference to Claimant &mdash; Group Defamation",
    "CITATION": "Knupffer v London Express [1944] UKHL 1",
    "COURT": "UKHL",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "295"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Theaker v Richardson",
        "Godfrey v Demon",
        "Tamiz v Google",
        "Bunt v Tilley",
        "Monson v Tussauds",
        "Morgan v Odhams Press",
        "Lewis v Daily Telegraph",
        "Steel and Morris v UK",
        "Spiller v Joseph",
        "Youssoupoff v MGM",
        "Byrne v Deane",
        "Telnikoff v Matusevich"
    ],
    "NAME": "Huth v Huth",
    "SUMMARY": [
        "A husband, contemptuous of his estranged wife, sent her a bill that&#8217;d arrived at his house, on which he&#8217;d written (addressing the sender of the bill) the woman purporting to be his wife was in fact a woman by the name of [and then her maiden name]. His wife&#8217;s butler opened it and read it. Their four children sued (!) the husband, on the basis that he&#8217;d published a statement implying they were illegitimate.",
        "Had the note been published?"
    ],
    "HELD": [
        "Communication from a man to his wife is <span class=\"it\">not</span> publication. When there is no intention for a defamatory statement to be published, and when it has only been seen by another through their immoral actions (here, an over-curious butler reading a private note), then there is no liability in defamation."
    ],
    "YEAR": "1915",
    "CATEGORIES": [
        "Defamation",
        "Publication"
    ],
    "CATEGORY": "Defamation &mdash; Publication",
    "CITATION": "Huth v Huth [1915] 3 KB 32",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "EPLR"
    ],
    "NUMBER": "296"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Huth v Huth",
        "Bunt v Tilley",
        "Tamiz v Google",
        "Godfrey v Demon",
        "Knupffer v London Express",
        "Sim v Stretch",
        "Watt v Longsdon",
        "O'Shea v MGN",
        "Spiller v Joseph",
        "John v MGN",
        "Thornton v Telegraph",
        "Horrocks v Lowe"
    ],
    "NAME": "Theaker v Richardson",
    "SUMMARY": [
        "The defendant had written a letter to the claimant saying, inter alia, that she was &#8216;a very dirty whore&#8217; and &#8216;a lying low-down brothel-keeping whore and thief.&#8217; This he put in an envelope, which he sealed, and taped down the flap, just to be sure. He put it through the claimant&#8217;s door, but her <span class=\"it\">husband</span> opened it, mistakenly thinking it was for him."
    ],
    "HELD": [
        "Sending a defamatory letter purporting to be private, but demonstrating a reasonable expectation that it might be opened and seen by others, means the letter has been published."
    ],
    "YEAR": "1963",
    "CATEGORIES": [
        "Defamation",
        "Publication"
    ],
    "CATEGORY": "Defamation &mdash; Publication",
    "CITATION": "Theaker v Richardson [1963] 1 WLR 151",
    "COURT": "EWCA",
    "FLAGS": [
        "Important"
    ],
    "NUMBER": "297"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Tamiz v Google",
        "Bunt v Tilley",
        "Watt v Longsdon",
        "Clift v Slough",
        "Waterson v Lloyd",
        "Bryanston v De Vries (no 1)",
        "Flood v The Times",
        "British Chiropractic Association v Singh",
        "Horrocks v Lowe",
        "Theaker v Richardson",
        "Grobbelaar v News Group",
        "A v UK"
    ],
    "NAME": "Godfrey v Demon",
    "SUMMARY": [
        "A defamatory post had been hosted on the defendant&#8217;s servers. The claimant asked the defendant to remove it. This they later did."
    ],
    "HELD": [
        "Although hosting of publicly-available information is publishing at common law, the host of a forum or blog is not a commercial publisher for the purposes of the <span class=\"lnk caseln\">Defamation Act 1996</span> S1(2). Nevertheless, once notified, such a host must take steps swiftly to remove the objectionable content."
    ],
    "YEAR": "2001",
    "CITATON": "Godfrey v Demon Internet Ltd [2001] QB 201",
    "CATEGORIES": [
        "Defamation",
        "Publication",
        "Websites",
        "Defences",
        "Innocent Dissemination"
    ],
    "CATEGORY": "Defamation &mdash; Publication &mdash; Websites &mdash; Defences &mdash; Innocent Dissemination",
    "COURT": "EWHC",
    "FLAGS": [
        "Key",
        "EPLR"
    ],
    "NUMBER": "298"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Tamiz v Google",
        "Godfrey v Demon",
        "Theaker v Richardson",
        "Huth v Huth",
        "Trolley v Fry",
        "Thornton v Telegraph",
        "Bloodworth v Gray",
        "British Chiropractic Association v Singh",
        "Horrocks v Lowe",
        "Telnikoff v Matusevich",
        "Flood v The Times",
        "O'Shea v MGN"
    ],
    "NAME": "Bunt v Tilley",
    "HELD": [
        "An ISP merely facilitating forum posts is not a publisher at common law <span class=\"bd\">unless</span> they are knowingly involved &mdash; and they become knowingly involved once they are alerted to the content and refuse to remove it."
    ],
    "YEAR": "2007",
    "CITATON": "Bunt v Tilley [2007] 1 WLR 1243",
    "CATEGORIES": [
        "Defamation",
        "Publication",
        "Websites"
    ],
    "CATEGORY": "Defamation &mdash; Publication &mdash; Websites",
    "COURT": "EWHC",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "299"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Godfrey v Demon",
        "Bunt v Tilley",
        "Theaker v Richardson",
        "Huth v Huth",
        "Bryanston v De Vries (no 1)",
        "Hulton v Jones",
        "A v UK",
        "Steel and Morris v UK",
        "Clift v Slough",
        "O'Shea v MGN",
        "Sim v Stretch",
        "Bloodworth v Gray"
    ],
    "NAME": "Tamiz v Google",
    "SUMMARY": [
        "The claimant had been roundly slagged off on a blog hosted by the respondent. He asked them to remove it; a month later they in turn contacted the blogger <span class=\"it\">asking him</span> (!) to take the post down. This he did, more than a month after the claimant had first contacted the respondent."
    ],
    "HELD": [
        "The host of a blog who does not remove defamatory material a <span class=\"bd\">reasonable time</span> after notification might be inferred to have <span class=\"bd\">associated themselves with</span>, or become responsible for, the presence of the material. Thereby they would become its <span class=\"bd\">publisher</span>.",
        "But on the facts, the seriousness and audience were minimal, and the claim was struck out."
    ],
    "YEAR": "2013",
    "CITATON": "Tamiz v Google [2013] EWCA Civ 68",
    "CATEGORIES": [
        "Defamation",
        "Publication",
        "Websites"
    ],
    "CATEGORY": "Defamation &mdash; Publication &mdash; Websites",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "EPLR",
        "Recent"
    ],
    "NUMBER": "300"
},
{
    "TYPE": "Case",
    "RELATED": [
        "The Times v UK",
        "Grobbelaar v News Group",
        "Knupffer v London Express",
        "Youssoupoff v MGM",
        "Theaker v Richardson",
        "John v MGN",
        "Ames v Spamhaus Project",
        "Waterson v Lloyd",
        "A v UK",
        "British Chiropractic Association v Singh",
        "Watt v Longsdon",
        "Cooke v MGN"
    ],
    "NAME": "Loutchansky v The Times (no 2)",
    "SUMMARY": [
        "The defendant published an article saying the claimant, an &#8216;international businessman&#8217; (i.e., a ghastly ratbag), was a money-launderer and a <span class=\"it\">smuggler of nuclear weapons</span>, both serious things to be called. The article was published in print, and then was continously available online and in the defendant&#8217;s archive.",
        "Did each publication give rise to a separate cause of action?"
    ],
    "HELD": [
        "Each time an article is viewed, for the purposes of defamation at common law, there has been a fresh publication leading to a fresh cause of action."
    ],
    "AKA": "Loutchansky",
    "CITATON": "Loutchansky v Times Newspapers Ltd (mo 2) [2001] EWCA Civ 1805",
    "NUMBER": "301",
    "CATEGORIES": [
        "Defamation",
        "Multiple Publication"
    ],
    "CATEGORY": "Defamation &mdash; Multiple Publication",
    "COURT": "EWCA",
    "FLAGS": [
        "Criticised"
    ],
    "YEAR": "2001"
},
{
    "TYPE": "Case",
    "RELATED": [
        "O'Shea v MGN",
        "Loutchansky v The Times (no 2)",
        "Horrocks v Lowe",
        "Telnikoff v Matusevich",
        "Tamiz v Google",
        "Bloodworth v Gray",
        "John v MGN",
        "Monson v Tussauds",
        "Huth v Huth",
        "Sim v Stretch",
        "Knupffer v London Express",
        "Theaker v Richardson"
    ],
    "NAME": "The Times v UK",
    "SUMMARY": [
        "The defendant in <span class=\"lnk caseln\">Loutchansky</span> in Strasbourg, arguing their ECHR Art. 10 rights were infringed by the severe impact on internet publishers of news of the <span class=\"it\">lack of</span> a single-publication rule."
    ],
    "HELD": [
        "The lack of a single-publication rule was perhaps a breach of a newspaper&#8217;s article 10 rights, but a justified one; and courses of action for multiple publication could in any case be avoided by publishers of internet archives simply by attaching a note to the contentious material."
    ],
    "YEAR": "2009",
    "CITATON": "Times Newspapers Ltd v United Kingdom [2009] EMLR 14",
    "CATEGORIES": [
        "Defamation",
        "Multiple Publication",
        "Art. 10 in Defamation"
    ],
    "CATEGORY": "Defamation &mdash; Multiple Publication &mdash; Art. 10 in Defamation",
    "COURT": "ECHR",
    "FLAGS": [
        "Recent"
    ],
    "NUMBER": "302"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Defamation - Defences II - Privilege",
        "Private Nuisance - Defences and Remedies",
        "Defamation - Remedies",
        "Defamation",
        "Defences to Negligence",
        "Duty of Care - Public Authorities",
        "Foreseeability",
        "Psychiatric Harm",
        "Causation - The But For Test",
        "Breach of Duty - Standard of Care",
        "Public Nuisance",
        "Product Liability"
    ],
    "NAME": "Defamation - Defences I",
    "CATEGORIES": [
        "Defamation",
        "Defences"
    ],
    "CATEGORY": "Defamation &mdash; Defences",
    "SUMMARY": [
        "Substantial <span class=\"bd\">Truth</span> (known previously at common law as <span class=\"bd\">justification</span>), provided for by <span class=\"bd\">S2</span> <span class=\"lnk caseln\">Defamation Act 2013</span>. An exception is given by <span class=\"bd\">S8</span> <span class=\"it\">Rehabilitation of Offenders Act 1974</span>, in which the truth cannot be relied upon when  <span class=\"it\">maliciously</span> publishing of details of spent convictions. (How does this square with tabloids publishing rogues galleries of, e.g., paedophiles?)",
        "<span class=\"ud\"><span class=\"bd\">Honest opinion</span></span>",
        "<ul><li><span class=\"nl\">An absolute defence under <span class=\"bd\">S3</span> <span class=\"lnk caseln\">Defamation Act 2013</span>. The dividing line between a statement being a <span class=\"bd\">fact</span> and an <span class=\"bd\">opinion</span> is fuzzy &mdash; <span class=\"lnk caseln\">Quacks v Singh</span>. To say something is scandalous, when the reported facts are correct, is opinion &mdash; <span class=\"lnk caseln\">Waterson v Lloyd</span>. But it&#8217;s generally better to signpost opinion as such, and opinion must <span class=\"bd\">explain itself</span> &mdash; <span class=\"lnk caseln\">Spiller v Joseph</span>, and be <span class=\"bd\">genuinely</span> held (<span class=\"bd\">S3(3)</span>)</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Privilege</span></span> needs and deserves its own section &mdash; <span class=\"lnk caseln\">Defence of Privilege</span>.",
        "Publication in the <span class=\"bd\">Public Interest</span> has &#8216;replaced&#8217; the <span class=\"lnk caseln\">Reynolds Defence</span>, and is provided for by S4 <span class=\"lnk caseln\">Defamation Act 2013</span>, which requires the defendant to show <span class=\"bd\">S4(1)(a)</span> publication was in the public interest and S4(1)(b) they <span class=\"bd\">reasonably believed</span> that.",
        "<span class=\"ud\"><span class=\"bd\">Offer of Amends</span></span>",
        "<ul><li><span class=\"nl\">From S2 <span class=\"lnk caseln\">Defamation Act 1996</span>, this is an <span class=\"bd\">apology and an admission of guilt</span>. The defendant must (1) <span class=\"bd\">admit guilt</span>, (2) offer to make a <span class=\"bd\">suitable correction</span> and <span class=\"bd\">sufficient apology</span>, (3) in a <span class=\"bd\">manner reasonable</span> and practicable in the circs., and (4) <span class=\"bd\">offer compensation</span> and/or <span class=\"bd\">costs</span>. If all the elements are there, the defence has wings, unless the defendant S4(3)(b) <span class=\"bd\">knew</span> or <span class=\"bd\">had reason to believe</span> the claims were false, i.e., the defendant was acting in bad faith &mdash; <span class=\"lnk caseln\">Milne v Express</span>.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Innocent Dissemination</span></span>",
        "<ul><li><span class=\"nl\">S1 <span class=\"lnk caseln\">Defamation Act 1996</span> provides this defence to one who (1) is <span class=\"bd\">not</span> author, editor or <span class=\"bd\">publisher</span>; (2) had <span class=\"bd\">taken care</span> in relation to the publication and (3) neither knew nor had reason to believe had contributed to publication of a defamatory statement.</span></li></ul>"
    ],
    "NUMBER": "303"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Flood v The Times",
        "Watt v Longsdon",
        "Telnikoff v Matusevich",
        "Godfrey v Demon",
        "Waterson v Lloyd",
        "John v MGN",
        "Spiller v Joseph",
        "Horrocks v Lowe",
        "Steel and Morris v UK",
        "British Chiropractic Association v Singh",
        "Clift v Slough",
        "Bryanston v De Vries (no 1)"
    ],
    "NAME": "Grobbelaar v News Group",
    "SUMMARY": [
        "The claimant had been filmed by a reporter from the defendant clearly accepting a bribe to fix a match. The defendant published, saying the claimant was a corrupt ratbag of a match-fixing <span class=\"it\">bribe-taker</span>. There was clear evidence that he <span class=\"it\">had</span> taken a bribe. He claimed, however, he had done so only in order to get to the bottom of who was offering bribes. Astoundingly, the jury awarded \u00a385K damages, on the basis that the defendant had not justified the <span class=\"it\">sting of the allegation</span>, which was to destroy the claimant&#8217;s reputation.",
        "The CA found the jury&#8217;s verdict was irreconcilable with the evidence and set it aside, but held the series of publications nevertheless contained allegations going far beyond what was supported by their secret recordings."
    ],
    "HELD": [
        "Defamation exists to protect those whose reputations have been trashed <span class=\"bd\">unjustly</span>, <span class=\"bd\">by others</span>. Not to protect those who trash their reputations by themselves and are merely <span class=\"bd\">exposed</span> by others, who publish the (substantial) truth.",
        "The CA erred in setting aside the jury&#8217;s verdict, and so it was reinstated. But with damages reduced by \u00a384,999.",
        "Lord Bingham &mdash; &#8216;The tort of defamation protects those whose reputations have been <span class=\"bd\">unlawfully injured</span>. It <span class=\"bd\">affords little or no protection</span> to those who have, or deserve to have, <span class=\"bd\">no reputation deserving of legal protection</span>. Until 9 November 1994 when the newspaper published its first articles about him, the appellant&#8217;s public reputation was unblemished. But he had in fact acted in a way in which no decent or honest footballer would act and in a way which could, if not exposed and stamped on, undermine the integrity of a game which earns the loyalty and support of millions.&#8217;"
    ],
    "AKA": "Grobbelaar",
    "NUMBER": "304",
    "CATEGORIES": [
        "Defamation",
        "Defences",
        "Substantial Truth",
        "Sting of Allegation",
        "Remedies",
        "Derisory Damages",
        "Bribery"
    ],
    "CATEGORY": "Defamation &mdash; Defences &mdash; Substantial Truth &mdash; Sting of Allegation &mdash; Remedies &mdash; Derisory Damages &mdash; Bribery",
    "CITATION": "Grobbelaar v News Group Newspapers Ltd [2002] UKHL 40",
    "COURT": "UKHL",
    "FLAGS": [
        "Key",
        "Amusing",
        "EPLR"
    ],
    "YEAR": "2002"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Spiller v Joseph",
        "Waterson v Lloyd",
        "British Chiropractic Association v Singh",
        "Flood v The Times",
        "Godfrey v Demon",
        "Clift v Slough",
        "A v UK",
        "Grobbelaar v News Group",
        "Watt v Longsdon",
        "Horrocks v Lowe",
        "Bryanston v De Vries (no 1)",
        "Reynolds v Times Newspapers"
    ],
    "NAME": "Telnikoff v Matusevich",
    "SUMMARY": [
        "The claimant had written an article to which the defendant wrote a letter to the editor, insinuating the author of the piece, the claimant was racist. Read alone, the letter would clearly constitute assertions of fact, but in the context of the article, it would be merely opinion."
    ],
    "HELD": [
        "A letter written in reaction to an article is to be considered a separate publication, and is not to be considered in the context of the article to which it relates; the fair-minded member of the public may well read the letter, but not have read the article."
    ],
    "YEAR": "1991",
    "CATEGORIES": [
        "Defamation",
        "Defences",
        "Opinion or Truth"
    ],
    "CATEGORY": "Defamation &mdash; Defences &mdash; Opinion or Truth",
    "COURT": "UKHL",
    "CITATION": "Telnikoff v Matusevich [1991] 2 AC 343",
    "NUMBER": "305"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Spiller v Joseph",
        "Waterson v Lloyd",
        "Telnikoff v Matusevich",
        "Grobbelaar v News Group",
        "Bryanston v De Vries (no 1)",
        "A v UK",
        "Watt v Longsdon",
        "Horrocks v Lowe",
        "Reynolds v Times Newspapers",
        "Clift v Slough",
        "Flood v The Times",
        "Godfrey v Demon"
    ],
    "NAME": "British Chiropractic Association v Singh",
    "SUMMARY": [
        "The claimants, purveyors of dangerous quackery, sued the defendant, an honest and diligent science journalist, for having written an excoriating piece in the Guardian in which he trashed their &#8216;treatments&#8217; as the bogus, dangerous snake-oil that they are, undermining the public understanding of science."
    ],
    "HELD": [
        "Calling someone out for making a claim (on which it might happen to rely for business, for instance), but for which it has no proof, cannot give liability in defamation. To do so is not to assert a fact, but rather an opinion as to the veracity of the claims."
    ],
    "AKA": "Quacks v Singh",
    "YEAR": "2010",
    "NUMBER": "306",
    "CATEGORIES": [
        "Defamation",
        "Defences",
        "Opinion or Truth"
    ],
    "CATEGORY": "Defamation &mdash; Defences &mdash; Opinion or Truth",
    "CITATION": "British Chiropractic Association v Singh [2010] EWCA Civ 350",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Amusing",
        "EPLR",
        "Recent"
    ],
    "LINK": [
        "Yet another reason to hate Jeremy Hunt http://www.theguardian.com/politics/2014/may/08/jeremy-hunt-homeopathy-studies-chief-medical-officer",
        "World Homeopathy Awareness Week (10/05/2016)!  http://sfsbm.org/index.php?option=com_easyblog&view=entry&id=953&Itemid=649"
    ]
},
{
    "TYPE": "Case",
    "RELATED": [
        "Telnikoff v Matusevich",
        "British Chiropractic Association v Singh",
        "Spiller v Joseph",
        "Clift v Slough",
        "Watt v Longsdon",
        "Grobbelaar v News Group",
        "A v UK",
        "Flood v The Times",
        "Reynolds v Times Newspapers",
        "Bryanston v De Vries (no 1)",
        "Horrocks v Lowe",
        "Godfrey v Demon"
    ],
    "NAME": "Waterson v Lloyd",
    "SUMMARY": [
        "The objectionable publication alleged an MP had made a <span class=\"it\">scandalously</span> large expenses claim. There were no claims that the MP had acted illegally, merely that they had claimed \u00a370K in exs for a second home a whole <span class=\"it\">60 miles</span> further from their permanent address."
    ],
    "HELD": [
        "Calling something <span class=\"it\">&#8216;scandalous&#8217;</span> is an assertion of opinion, not fact.",
        "See also <span class=\"lnk caseln\">Quacks v Singh</span> and <span class=\"lnk caseln\">Spiller v Joseph</span>."
    ],
    "FLAGS": [
        "Recent"
    ],
    "YEAR": "2013",
    "CATEGORIES": [
        "Defamation",
        "Defences",
        "Opinion or Truth"
    ],
    "CATEGORY": "Defamation &mdash; Defences &mdash; Opinion or Truth",
    "COURT": "EWCA",
    "CITATION": "Waterson v Lloyd [2013] EWCA Civ 136",
    "NUMBER": "307"
},
{
    "TYPE": "Case",
    "RELATED": [
        "British Chiropractic Association v Singh",
        "Telnikoff v Matusevich",
        "Waterson v Lloyd",
        "Reynolds v Times Newspapers",
        "Horrocks v Lowe",
        "Godfrey v Demon",
        "A v UK",
        "Flood v The Times",
        "Clift v Slough",
        "Grobbelaar v News Group",
        "Watt v Longsdon",
        "Bryanston v De Vries (no 1)"
    ],
    "NAME": "Spiller v Joseph",
    "SUMMARY": [
        "The relationship between a promoter and one of its acts had broken down. The promoter said on its website the act was too <span class=\"it\">unprofessional</span> to feature in the their portfolio of acts and had breached were a pain to work with. They quoted from an email they&#8217;d received from the act saying  their &#8216;<span class=\"it\">contract</span> did not hold water,&#8217; but said &#8216;contract<span class=\"it\"><span class=\"bd\">s</span></span>.&#8217;"
    ],
    "HELD": [
        "Opinion <span class=\"bd\">not</span> published with the facts on which the opinion is based <span class=\"bd\">may not rely on the honest opinion</span> as a defence.",
        "Dicta of Lord Nichols (in a PC case) &mdash; &#8216;The comment must explicitly or implicitly indicate, at least in general terms, the facts on which it is based. The <span class=\"bd\">reader or hearer should be in a position to judge for himself</span> how far the comment was well founded&#8217;."
    ],
    "FLAGS": [
        "Recent"
    ],
    "YEAR": "2010",
    "LINK": [
        "On 5rb.com http://www.5rb.com/case/spiller-anor-v-joseph-ors/"
    ],
    "CATEGORIES": [
        "Defamation",
        "Defences",
        "Opinion or Truth"
    ],
    "CATEGORY": "Defamation &mdash; Defences &mdash; Opinion or Truth",
    "COURT": "UKSC",
    "CITATION": "Spiller v Joseph [2010] UKSC 53",
    "NUMBER": "308"
},
{
    "TYPE": "Statute",
    "RELATED": [
        "Defamation Act 2013",
        "Law Reform (Contributory Negligence) Act 1945",
        "Road Traffic Act 1988",
        "Unfair Contract Terms Act 1977",
        "Compensation Act 2006",
        "Occupiers' Liability Act 1957",
        "Occupiers' Liability Act 1984",
        "Consumer Protection Act 1987"
    ],
    "NAME": "Defamation Act 1996",
    "SUMMARY": [
        "Art. 9 <span class=\"it\">Bill of Rights 1689</span> &mdash; the origin of absolute privilege for defamation for <span class=\"bd\">things said in Parliament</span>. For repeating such things in print, S1 <span class=\"it\">Parliamentary Papers Act 1840</span>, and S1 <span class=\"lnk caseln\">Defamation Act 2013</span> <span class=\"bd\">extended absolute privilege</span> to <span class=\"bd\">things said in court</span>.",
        "<ul><li><span class=\"nl\"><span class=\"bd\">S13</span> &mdash; amended the Bill of Rights to allow MPs do this, a response to the &#8216;Cash for Questions&#8217; scandal in which, in their libel actions, MPs couldn&#8217;t rely on what they&#8217;d said in the house.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Defence of Innocent Dissemination</span></span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\">S1</span> &mdash; for one who is (1) not the author, editor or publisher; (2) having taken care, and (3) being without knowledge or reason to believe contributing to publication of defamatory statement.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Defence of Offer to Amends</span></span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\">S2</span> &mdash; the defendant must (1) <span class=\"bd\">admit guilt</span>, (2) offer to make a <span class=\"bd\">suitable correction</span> and <span class=\"bd\">sufficient apology</span>, (3) in a <span class=\"bd\">manner reasonable</span> and practicable in the circs., and (4) <span class=\"bd\">offer compensation</span> and/or <span class=\"bd\">costs</span>. If all the elements are there, the defence has wings.</span></li><li><span class=\"nl\"><span class=\"bd\">S4(3)</span> &mdash; the defence is removed from those who act in bad faith, i.e., (c) who <span class=\"bd\">know</span> or <span class=\"bd\">have reason to believe</span> the was <span class=\"bd\">false</span> and <span class=\"bd\">defamatory</span>.</span></li></ul>"
    ],
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/1996/31/contents"
    ],
    "SUMAMRY": "<span class=\"ud\"><span class=\"bd\">Waiver of Absolute Privilege</span></span>",
    "CATEGORIES": [
        "Defamation",
        "Defences"
    ],
    "CATEGORY": "Defamation &mdash; Defences",
    "WIKILINK": [
        "https://en.wikipedia.org/wiki/Defamation_Act_1996"
    ],
    "FLAGS": [
        "EPLR"
    ],
    "NUMBER": "309"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Horrocks v Lowe",
        "Godfrey v Demon",
        "Flood v The Times",
        "Watt v Longsdon",
        "Bryanston v De Vries (no 1)",
        "Waterson v Lloyd",
        "British Chiropractic Association v Singh",
        "Spiller v Joseph",
        "Steel and Morris v UK",
        "Grobbelaar v News Group",
        "Telnikoff v Matusevich",
        "Clift v Slough"
    ],
    "NAME": "A v UK",
    "SUMMARY": [
        "A woman and her family were described as <span class=\"it\">neighbours from hell</span> in a parliamentary debate. She sued under ECHR Art. 6."
    ],
    "HELD": [
        "The exercise of absolute privilege in Parliament does not impose a <span class=\"it\">disproportionate</span> restriction on a person&#8217;s access to justice, where the privileged statement was of a defamatory character."
    ],
    "YEAR": "2003",
    "CATEGORIES": [
        "Defamation",
        "Defences",
        "Art. 6 in Defamation",
        "Absolute Privilege"
    ],
    "CATEGORY": "Defamation &mdash; Defences &mdash; Art. 6 in Defamation &mdash; Absolute Privilege",
    "COURT": "ECHR",
    "CITATION": "A v United Kingdom (2003) 36 EHRR 51",
    "NUMBER": "310"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Defamation - Defences I",
        "Private Nuisance - Defences and Remedies",
        "Defamation - Remedies",
        "Defences to Negligence",
        "Defamation",
        "Breach of Duty - Standard of Care",
        "Public Nuisance",
        "Foreseeability",
        "Pure Economic Loss",
        "Psychiatric Harm",
        "Occupiers' Liability",
        "Remoteness"
    ],
    "NAME": "Defamation - Defences II - Privilege",
    "CATEGORIES": [
        "Defamation",
        "Defences",
        "Absolute Privilege",
        "Qualified Privilege"
    ],
    "CATEGORY": "Defamation &mdash; Defences &mdash; Absolute Privilege &mdash; Qualified Privilege",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Absolute Privilege</span></span>",
        "For things said in <span class=\"bd\">Parliament</span> this dates from the <span class=\"it\">Bill of Rights 1689</span>. &#8216;I dare you to say that to me outside of Parliament.&#8217; MPs can waive it since <span class=\"lnk caseln\">Defamation Act 1996</span> S13. Absolute privilege does not restrict access to justice &mdash; <span class=\"lnk caseln\">A v UK</span>.",
        "There is also absolute privilege for communications between <span class=\"bd\">officers of the state</span> in the <span class=\"bd\">course of their official duties</span>.",
        "<span class=\"ud\"><span class=\"bd\">Qualified Privilege</span></span> (common law)",
        "<ul><li><span class=\"nl\">Where potential harm to reputation is outweighed by interest of the recipient(s); and where there is <span class=\"bd\">reciprocity</span> between parties and a <span class=\"bd\">duty</span> to communicate, then there is the defence of <span class=\"bd\">qualified privilege</span>. The communication must be <span class=\"bd\">without malice</span> &mdash; <span class=\"lnk caseln\">Horrocks v Lowe</span>.</span></li><li><span class=\"nl\">In <span class=\"lnk caseln\">Reynolds</span>, Lord Nicholls listed ten criteria against which a defence of qualified privilege could be judged. It is for the court to establish whether D had a <span class=\"bd\">legal, moral or social duty </span>to communicate with the recipient.</span></li><li><span class=\"nl\">The <span class=\"bd\">scope</span> of the privilege is <span class=\"bd\">not to be exceeded</span> &mdash; <span class=\"lnk caseln\">Watt v Longsdon</span>, <span class=\"lnk caseln\">Clift v Slough</span>.</span></li><li><span class=\"nl\">Although still cited, the <span class=\"lnk caseln\">Reynolds</span> defence was replaced by S4(6) <span class=\"lnk caseln\">Defamation Act 2013</span>.</span></li><li><span class=\"nl\">The S15(1) <span class=\"lnk caseln\">Defamation Act 1996</span>, amended by the Defamation Act 2013, provides the defence of qualified privilege for statements made <span class=\"bd\">without malice</span> as listed in Sch. 1 of the Act, and the <span class=\"lnk caseln\">Defamation Act 2013</span> S6 provides a defence for <span class=\"bd\">peer-reviewed</span> statement in <span class=\"bd\">academic journals</span>, presumably in response to climate panic &mdash; but there have been no cases invoking it.</span></li><li><span class=\"nl\">Things which are covered by qualified privilege are <span class=\"bd\">letters of reference</span>, <span class=\"bd\">denouncing someone to the police</span>, <span class=\"bd\">whistleblowing</span>, etc.</span></li></ul>",
        "Top tip: If it&#8217;s covered by precedent or a reciprocal interest and duty, argue qualified privilege."
    ],
    "NUMBER": "311"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Bryanston v De Vries (no 1)",
        "Watt v Longsdon",
        "Clift v Slough",
        "Horrocks v Lowe",
        "Telnikoff v Matusevich",
        "Spiller v Joseph",
        "British Chiropractic Association v Singh",
        "A v UK",
        "Waterson v Lloyd",
        "Flood v The Times",
        "Godfrey v Demon",
        "Grobbelaar v News Group"
    ],
    "NAME": "Reynolds v Times Newspapers",
    "SUMMARY": [
        "The defendant published a story in Ireland alleging the claimant, Taoiseach until 1994, had misled the Irish parliament. It published the same article in England, omitting the paragraphs outlining the claimant&#8217;s side of the story.",
        "The defendant relied on qualified privilege, that they had a duty to the public to publish."
    ],
    "HELD": [
        "Where there was a duty to publish an allegation <span class=\"it\">even if it turned out to be wrong</span>, there could be a defence of qualified privilege, although that would be fact-specific.",
        "Non-exhaustive list of factors, per Lord Nicholls &mdash; (1) <span class=\"bd\">Seriousness</span> of the allegation. (2) <span class=\"bd\">Nature</span> of the information and whether a <span class=\"bd\">matter of public concern</span>. (3) The <span class=\"bd\">Source.</span> (4) <span class=\"bd\">Steps taken to verify</span>. (5) <span class=\"bd\">Status</span> of the information. (6) <span class=\"bd\">Urgency</span>, as news is <span class=\"it\">a perishable commodity</span>. (7) <span class=\"bd\">Whether comment was sought</span> from the plaintiff, but not always. (8) Whether it also mentioned <span class=\"bd\">the plaintiff&#8217;s side of the story</span> (9) <span class=\"bd\">Tone</span> of the article. (10) <span class=\"bd\">The circumstances</span> (background/timing) of publication."
    ],
    "FLAGS": [
        "Key",
        "Test",
        "EPLR"
    ],
    "AKA": "Reynolds",
    "NUMBER": "312",
    "CATEGORIES": [
        "Defamation",
        "Defences",
        "Qualified Privilege",
        "Reynolds Test"
    ],
    "CATEGORY": "Defamation &mdash; Defences &mdash; Qualified Privilege &mdash; Reynolds Test",
    "COURT": "UKHL",
    "CITATION": "Reynolds v Times Newspapers Ltd [2001] 2 AC 127,",
    "YEAR": "2001"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Horrocks v Lowe",
        "Bryanston v De Vries (no 1)",
        "Clift v Slough",
        "Reynolds v Times Newspapers",
        "Grobbelaar v News Group",
        "Flood v The Times",
        "Telnikoff v Matusevich",
        "British Chiropractic Association v Singh",
        "A v UK",
        "Godfrey v Demon",
        "Waterson v Lloyd",
        "Spiller v Joseph"
    ],
    "NAME": "Watt v Longsdon",
    "SUMMARY": [
        "The complainant had written a letter to the defendant alleging drunkenness and other nastinesses, who wrote with his own set of allegations, including about his fitness to do business. This letter the defendant showed to the claimant&#8217;s business partner, and also his wife."
    ],
    "HELD": [
        "Qualified privilege is a defence only where there is a duty to the recipient of the communication. The defendant <span class=\"it\">did</span> have qualified privilege to show the letter to the business partner... but <span class=\"it\">not</span> to the wife."
    ],
    "YEAR": "1930",
    "CATEGORIES": [
        "Defamation",
        "Defences",
        "Qualified Privilege"
    ],
    "CATEGORY": "Defamation &mdash; Defences &mdash; Qualified Privilege",
    "COURT": "EWCA",
    "CITATION": "Watt v Longsdon [1930] 1 KB 130",
    "NUMBER": "313"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Reynolds v Times Newspapers",
        "Watt v Longsdon",
        "Horrocks v Lowe",
        "Bryanston v De Vries (no 1)",
        "Godfrey v Demon",
        "Grobbelaar v News Group",
        "A v UK",
        "Telnikoff v Matusevich",
        "Flood v The Times",
        "Waterson v Lloyd",
        "Spiller v Joseph",
        "British Chiropractic Association v Singh"
    ],
    "NAME": "Clift v Slough",
    "SUMMARY": [
        "The defendant organisation had included the claimant on a list of violent people who might come into contact with them. The list was emailed to everyone in the organisation and its contractors, not just to <span class=\"it\">customer-facing</span> people. The claimant argued, inter alia, that his ECHR Art. 8 rights had been breached."
    ],
    "HELD": [
        "There had been no duty to communicate a list of violent people to anyone other than those who might come into contact with them."
    ],
    "FLAGS": [
        "Leading",
        "Amusing",
        "Recent"
    ],
    "YEAR": "2010",
    "CATEGORIES": [
        "Defamation",
        "Defences",
        "Qualified Privilege",
        "Art. 8 in Defamation"
    ],
    "CATEGORY": "Defamation &mdash; Defences &mdash; Qualified Privilege &mdash; Art. 8 in Defamation",
    "COURT": "EWCA",
    "CITATION": "Clift v Slough BC [2010] EWCA Civ 1171",
    "NUMBER": "314"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Clift v Slough",
        "Bryanston v De Vries (no 1)",
        "Reynolds v Times Newspapers",
        "Watt v Longsdon",
        "A v UK",
        "British Chiropractic Association v Singh",
        "Godfrey v Demon",
        "Spiller v Joseph",
        "Grobbelaar v News Group",
        "Waterson v Lloyd",
        "Flood v The Times",
        "Telnikoff v Matusevich"
    ],
    "NAME": "Horrocks v Lowe",
    "SUMMARY": [
        "The defendant had made a speech defamatory of the claimant at a council meeting. The defendant argued justification and fair comment, but the claimant showed (at first instance) that he had acted out of malice."
    ],
    "HELD": [
        "When a statement is unreasonably but honestly believed to be true, and no malice can be shown, the defence of qualified privilege can operate."
    ],
    "YEAR": "1975",
    "CATEGORIES": [
        "Defamation",
        "Defences",
        "Qualified Privilege",
        "Malice"
    ],
    "CATEGORY": "Defamation &mdash; Defences &mdash; Qualified Privilege &mdash; Malice",
    "CITATION": "Horrocks v Lowe [1975] AC 135",
    "COURT": "UKHL",
    "FLAGS": [
        "Important",
        "EPLR"
    ],
    "NUMBER": "315"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Watt v Longsdon",
        "Horrocks v Lowe",
        "Reynolds v Times Newspapers",
        "Clift v Slough",
        "Godfrey v Demon",
        "British Chiropractic Association v Singh",
        "Spiller v Joseph",
        "Waterson v Lloyd",
        "Telnikoff v Matusevich",
        "A v UK",
        "Grobbelaar v News Group",
        "Flood v The Times"
    ],
    "NAME": "Bryanston v De Vries (no 1)",
    "SUMMARY": [
        "Was a boss dicating a letter to his secretary <span class=\"it\">per se</span> a publication?"
    ],
    "HELD": [
        "The communication between a employees in companies is covered by qualified privilege, e.g., HR departments and managers, bosses and secretaries, etc."
    ],
    "YEAR": "1975",
    "CATEGORIES": [
        "Defamation",
        "Defences",
        "Qualified Privilege"
    ],
    "CATEGORY": "Defamation &mdash; Defences &mdash; Qualified Privilege",
    "COURT": "EWCA",
    "CITATION": "Bryanston Finance Ltd v De Vries (no 1) [1975] QB 703",
    "NUMBER": "316"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Grobbelaar v News Group",
        "Bryanston v De Vries (no 1)",
        "Waterson v Lloyd",
        "A v UK",
        "Spiller v Joseph",
        "Clift v Slough",
        "Watt v Longsdon",
        "Telnikoff v Matusevich",
        "Godfrey v Demon",
        "Reynolds v Times Newspapers",
        "British Chiropractic Association v Singh",
        "Horrocks v Lowe"
    ],
    "COMMENT": "This was the last case before the <span class=\"lnk caseln\">Reynolds Defence</span> was replaced by the Public Interest defence by S4 <span class=\"lnk caseln\">Defamation Act 2013</span>.",
    "CASE": "Milne v Express",
    "NAME": "Flood v The Times",
    "SUMMARY": [
        "A senior police officer had been the subject of an investigation into whether in addition to that, he was also a <span class=\"it\">bribe-taker</span>. The defendant published an article reporting this. He was subsequently cleared, but the article remained online, so he sued for libel, given the qualified privilege had ceased when he&#8217;d been cleared.",
        "The defendant published an article alleging the claimant had lied to the Parliamentary Standards Commissioner. They offered to make amends as per S4 <span class=\"lnk caseln\">Defamation Act 1996</span>, but the claimant thought this was in bad faith, believing they knew or had reason to believe the article was false, and so rejected their offer."
    ],
    "HELD": [
        "The <span class=\"lnk caseln\">Reynolds Defence</span> will only succeed if reasonable steps have been taken to verify the allegations before publication.",
        "The <span class=\"it\">reason to believe</span> required by S4(3) <span class=\"lnk caseln\">Defamation Act 1996</span> is <span class=\"it\">not</span> the same as <span class=\"it\">reason to <span class=\"bd\">suspect</span></span>. The bar must be set quite high for S4(3) to justify rejecting an S2 offer of amends."
    ],
    "NUMBER": "317",
    "CATEGORIES": [
        "Defamation",
        "Defences",
        "Public Interest",
        "Bribery",
        "Defamation",
        "Defences",
        "Offer of Amends"
    ],
    "CATEGORY": "Defamation &mdash; Defences &mdash; Public Interest &mdash; Bribery / Defamation &mdash; Defences &mdash; Offer of Amends",
    "CITATION": "Milne v Express Newspapers Ltd [2005] 1 WLR 772",
    "COURT": "EWCA",
    "FLAGS": [
        "Key"
    ],
    "YEAR": "2005"
},
{
    "TYPE": "Concept",
    "RELATED": [
        "Defamation",
        "Defamation - Defences II - Privilege",
        "Private Nuisance - Defences and Remedies",
        "Defamation - Defences I",
        "Occupiers' Liability",
        "Private Nuisance",
        "Vicarious Liability",
        "The Rule in Rylands v Fletcher",
        "Pure Economic Loss",
        "Breach of Duty - Standard of Care",
        "Employers' Primary Liability",
        "Causation - The But For Test"
    ],
    "NAME": "Defamation - Remedies",
    "CATEGORIES": [
        "Defamation",
        "Remedies"
    ],
    "CATEGORY": "Defamation &mdash; Remedies",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Damages</span></span>",
        "<ul><li><span class=\"nl\">The standard remedy for defamation &mdash; <span class=\"lnk caseln\">Steel and Morris v UK</span>.</span></li><li><span class=\"nl\">They may be insultingly small &mdash; <span class=\"lnk caseln\">Grobbelaar</span>, or reduced when the jury fuck up &mdash; <span class=\"lnk caseln\">John v MGN</span>.</span></li><li><span class=\"nl\"><span class=\"bd\">S34</span> <span class=\"lnk gsln\">Crime and Courts Act 2013</span> contains detailed provisions for the how, why, what, when and where of <span class=\"bd\">exemplary damages</span>, which was the issue on appeal in <span class=\"lnk caseln\">John v MGN</span>.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Injunction</span></span>",
        "<ul><li><span class=\"nl\">Preventing publication of something about which the claimant happens to have been tipped off.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">New Remedies</span></span> provided by <span class=\"lnk caseln\">Defamation Act 2013</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\">S12</span> &mdash; <span class=\"bd\">Publication of summary of judgment</span>, to try and vindicate the damaged reputation. The court orders the defendant to publish a summary of the judgment (details as agreed between parties, or by default, the court).</span></li><li><span class=\"nl\"><span class=\"bd\">S13</span> &mdash; <span class=\"bd\">Order to cease distributing</span>.</span></li></ul>"
    ],
    "NUMBER": "318"
},
{
    "TYPE": "Case",
    "RELATED": [
        "John v MGN",
        "Grobbelaar v News Group",
        "A v UK",
        "British Chiropractic Association v Singh",
        "Bryanston v De Vries (no 1)",
        "Gray v Jones",
        "Godfrey v Demon",
        "Sim v Stretch",
        "Spiller v Joseph",
        "Cassidy v Daily Mirror",
        "Trolley v Fry",
        "Monson v Tussauds"
    ],
    "NAME": "Steel and Morris v UK",
    "SUMMARY": [
        "Forty or so pamphleteers and leaflet-artists were sued by McDonalds for defamation. Their pamphlet had claimed McDonalds were: complicit in Third World starvation; buy from greedy rulers and elites and practises economic imperialism; wastes vast quantities of grain and water; destroys rainforests with poisons and colonial invasions; sells unhealthy and addictive food; alters its food with artificial chemistry; exploits children with its advertising; is responsible for torture and murder of animals; poisons customers with contaminated meat; exploits its workers and bans unions; hides its malfeasance.",
        "All of which seem unobjectionable bar from the last, which is patently false. No-one who&#8217;s ever <span class=\"it\">been</span> to a McDonalds could fail to be creeped out by, at least, the stark clinical lighting, putting one in mind of an execution chamber in an American prison.",
        "Anyway, the case had been the longest in English legal history, and they <span class=\"bd\">could not get legal aid,</span> so winged it with dribs and drabs of pro-bono. McDonalds spent millions, they spent \u00a330K, which meant they couldn&#8217;t call witnesses from abroad they said would vindicate some of their claims.",
        "They lost, and McDonalds were awarded damages &mdash; so they launched an action in Strasbourg alleging (inter alia) ECHR Art. 6 breach for lack of legal aid."
    ],
    "HELD": [
        "When one party spends millions and the other party, for lack of legal aid, spends a few paltry thousands, then there may have been an <span class=\"it\">unacceptable inequality of arms</span>, which would breach ECHR Art. 6.",
        "Damages were awarded to compensate their costs incurred &mdash; the damages they had to pay to McDonalds and the money they spent fighting the case."
    ],
    "AKA": "McLibel",
    "NUMBER": "319",
    "CATEGORIES": [
        "Defamation",
        "Remedies",
        "Damages",
        "Art. 6 in Defamation"
    ],
    "CATEGORY": "Defamation &mdash; Remedies &mdash; Damages &mdash; Art. 6 in Defamation",
    "CITATION": "Steel and Morris v UK [2005] EMLR 15 ECHR",
    "COURT": "ECHR",
    "FLAGS": [
        "EPLR"
    ],
    "YEAR": "2005"
},
{
    "TYPE": "Case",
    "RELATED": [
        "Steel and Morris v UK",
        "Grobbelaar v News Group",
        "Sim v Stretch",
        "British Chiropractic Association v Singh",
        "O'Shea v MGN",
        "Lewis v Daily Telegraph",
        "Thornton v Telegraph",
        "Waterson v Lloyd",
        "Morgan v Odhams Press",
        "Godfrey v Demon",
        "Bloodworth v Gray",
        "Flood v The Times"
    ],
    "NAME": "John v MGN",
    "SUMMARY": [
        "The actionable statements published here were that the claimant, a singer of arguable portliness, was on a fad diet that involved <span class=\"it\">chewing up his food</span> but then <span class=\"it\">not swallowing it</span>, and included quotes from a medical bod to the effect that this was a form of <span class=\"it\">bulemia</span>. At trial, a jury awarded him \u00a375K compensatory damages and \u00a3275K exemplary damages."
    ],
    "HELD": [
        "The jury had not been adequately guided, and had awarded too much.",
        "Tom Bingham MR reduced the damages to \u00a375K. NB., S34 <span class=\"it\">Crime and Courts Act 2013</span> provides for the when, why and how-much of exemplary damages."
    ],
    "YEAR": "1997",
    "CATEGORIES": [
        "Defamation",
        "Remedies",
        "Damages"
    ],
    "CATEGORY": "Defamation &mdash; Remedies &mdash; Damages",
    "CITATION": "John v MGN Ltd [1997] QB 586",
    "COURT": "EWCA",
    "FLAGS": [
        "Key",
        "Amusing",
        "EPLR"
    ],
    "NUMBER": "320"
},
{
    "TYPE": "Case Overviews",
    "RELATED": [
        "Case Overviews for Negligence - Remoteness",
        "Case Overviews for Negligence - Defences",
        "Case Overviews for Negligence - Causation",
        "Case Overviews for Negligence - Breach of Duty",
        "Case Overviews for Defamation",
        "Case Overviews for Pure Economic Loss",
        "Case Overviews for Employers' Liability - Primary Liability",
        "Case Overviews for Product Liability",
        "Case Overviews for Occupiers' Liability",
        "Case Overviews for Nuisance",
        "Case Overviews for Psychiatric Harm"
    ],
    "NAME": "Case Overviews for Negligence",
    "CATEGORIES": [
        "Negligence"
    ],
    "CATEGORY": "Negligence",
    "SUMMARY": [
        "<span class=\"bd\">Duty of Care - Government Liability</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dorset Yacht v Home Office</span></span><br><span class=\"sm\">The neighbour principle should apply unless there&#8217;s <span class=\"it\">good policy reason why it shouldn&#8217;t</span>.</span></span></li></ul>",
        "<span class=\"bd\">Duty of Care</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Donoghue v Stevenson</span></span><br><span class=\"sm\">There is a duty to take reasonable care to avoid acts or omissions likely to injure those who a reasonable degree of foresight would suggest might be affected by the act, i.e., your <span class=\"bd\">neighbour</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Anns v Merton</span></span><br><span class=\"sm\">Lord Wilberforce introduced a <span class=\"it\">two-stage test</span> to establish a duty of care &mdash; <span class=\"bd\">(1)</span> a relationship of <span class=\"bd\">sufficient proximity based on foreseeability</span>; <span class=\"bd\">(2)</span> the absence of <span class=\"bd\">public policy considerations</span> that should preclude there being a duty.  (Note that causes the <span class=\"lnk caseln\">Donoghue</span> principle to be a function of foreseeability, not really proximity/neighbourhood per se).</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Caparo v Dickman</span></span><br><span class=\"sm\">Lord Bridge introduced the famous <span class=\"bd\">three-stage test</span> to measure whether a duty of care is owed between parties &mdash; <span class=\"bd\">(1)</span> the damage must be <span class=\"bd\">reasonably foreseeable</span>; <span class=\"bd\">(2)</span> a relationship of <span class=\"bd\">sufficient proximity</span> between claimant and defendant; and <span class=\"bd\">(3)</span> it would be <span class=\"bd\">fair, just and reasonable</span> to impose the duty.</span></span></li></ul>",
        "<span class=\"bd\">Duty of Care - Caparo - Neighbour Principle</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">AG of British Virgin Islands v Hartwell</span></span><br><span class=\"sm\">A duty of care was owed by the police to ensure unsuitable officers had no access to guns: the neighbour of a policeman is everyone, i.e., passes the close connection criterion of the <span class=\"lnk caseln\">Caparo</span> test (1).</span></span></li></ul>",
        "<span class=\"bd\">Duty of Care - Public Authorities - Children</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Osman v Ferguson</span></span><br><span class=\"sm\">No duty of care is generally owed by the Police on public policy grounds &mdash; <span class=\"lnk caseln\">Caparo</span> (3).</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Osman v UK</span></span><br><span class=\"sm\">The exclusion of a duty of care owed by the police is limited by Human Rights considerations.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Z v UK</span></span><br><span class=\"sm\">Finding that local authorities owed no duty of care to children to prevent abuse did not entail that proceedings had been unfair</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">X v Bedfordshire</span></span><br><span class=\"sm\">Not fair, just and reasonable to impose a duty of care where a local authority had not exercised a <span class=\"it\">power</span> to act, but had it done so, there <span class=\"it\">would</span> have been a duty.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Phelps v Hillingdon</span></span><br><span class=\"sm\">Fair, just and reasonable to impose a duty of care here, as local authority had exercised its power negligently. I.e., the flip-side of <span class=\"lnk caseln\">X v Bedfordshire</span></span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Barett v Enfield</span></span><br><span class=\"sm\">In taking the child into care, a duty had arisen, which had been breached.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">JD v East Berkshire NHS</span></span><br><span class=\"sm\">Parents couldn&#8217;t sue, only the children: the duty of care doesn&#8217;t extend to them. Doctors owe a duty to the children, not the parents. Are the interests of the child different from the interests of the parent? The court thought so, but Jesse Elvin is sceptical.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Lawrence v Pembrokeshire</span></span><br><span class=\"sm\">Relevance to be found in article 8, but allowing claim would degrade focus on protecting children from Local Authorities and make them more cautious.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">MAK and RK v UK</span></span><br><span class=\"sm\">In Strasbourg court, article 8 claim: UK acting through hospital prevented him from seeing his seriously-ill daughter. Court held that hospital incompetent for not diagnosing sooner; claim valid, compensation awarded.</span></span></li></ul>",
        "<span class=\"bd\">Duty of Care - Public Authorities - Police</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Osman v Ferguson</span></span><br><span class=\"sm\">No duty of care is generally owed by the Police on public policy grounds &mdash; <span class=\"lnk caseln\">Caparo</span> (3).</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hill v Chief Constable of West Yorkshire</span></span><br><span class=\"sm\">The police should not <span class=\"bd\">generally</span> owe a duty of care to members of the public for <span class=\"lnk caseln\">Caparo</span> (3) public policy reasons &mdash; fear of defensive policing; the fact that the police already take their job seriously enough and that imposing a duty of care to the public wouldn&#8217;t make them any better at policing; inappropriate to use courts rather than the Police Complaints Authority; if there <span class=\"it\">were</span> liability, <span class=\"it\">some</span> lawsuits would inevitably succeed against them, diverting time and money from actual policing.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Swinny v Chief Constable of Northumbria</span></span><br><span class=\"sm\">Negligent, that duty of care to informant breached, must find duty despite police, <span class=\"it\">pour la bonne fonctionment</span>. Informants are not simply members of the public, to whom no particular duty is owed. Nothing to do with negligence of leaving in car.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Van Colle v Hertfordshire Police</span></span><br><span class=\"sm\">There was no duty, as the police were not aware of a real and immediate risk to his life.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Robinson v Chief Constable of West Yorkshire</span></span><br><span class=\"sm\">On Caparo (3) grounds, it would not be fair, just and reasonable to find a duty &mdash; and questionable Caparo (2) proximity between claimant and police.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Michael v Chief Constable of South Wales</span></span><br><span class=\"sm\">Negligence claim must fail on same grounds as <span class=\"lnk caseln\">Hill</span>, but article 2 breach accepted. Acceptable and coherent (!) that tort law should reject claims of this sort in negligence but that Human Rights accept them. In this sense HR is helpful in sorting out a grey area.</span></span></li></ul>",
        "<span class=\"bd\">Duty of Care - Caparo - Proximity</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Everett v Comojo</span></span><br><span class=\"sm\">A nightclub did indeed owe a duty to take reasonable care to avoid foreseeable acts of third parties, but the claim failed on the facts (upmarket nightclub with &#8216;ritzy&#8217; clientele).</span></span></li></ul>",
        "<span class=\"bd\">Duty of Care - Caparo - Public Policy - Emergency Services</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Kent v Griffiths</span></span><br><span class=\"sm\">The ambulance service would owe a duty of care if (i) further illness reasonably foreseeable should no ambulance attend (i) they took the call and dispatched an ambulance (proximity), (iii) fair, just and reasonable, but only if delayed <span class=\"it\">for no good reason</span>.</span></span></li></ul>",
        "<span class=\"bd\">Duty of Care - Caparo - Public Policy</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Vowles v Evans</span></span><br><span class=\"sm\">Referee there to enforce rules: the <span class=\"lnk caseln\">Caparo</span> test applied. (i) Reasonably foreseeable that failure to enforce them would result in injury, (ii) Relationship of proximity, (iii) no reason to draw distinction between amateur and professional sport.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hill v Chief Constable of West Yorkshire</span></span><br><span class=\"sm\">The police should not <span class=\"bd\">generally</span> owe a duty of care to members of the public for <span class=\"lnk caseln\">Caparo</span> (3) public policy reasons &mdash; fear of defensive policing; the fact that the police already take their job seriously enough and that imposing a duty of care to the public wouldn&#8217;t make them any better at policing; inappropriate to use courts rather than the Police Complaints Authority; if there <span class=\"it\">were</span> liability, <span class=\"it\">some</span> lawsuits would inevitably succeed against them, diverting time and money from actual policing.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Marc Rich v Bishop Rock Marine</span></span><br><span class=\"sm\">Acting in the public welfare can be a Caparo (3) defence. Finding that a duty of care was owed by a marine classification society would have been extremely detrimental to the safety and costs associated with sea-going.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Smith v Littlewoods</span></span><br><span class=\"sm\">An empty cinema was not per se a source of danger. Although the danger was foreseeable, under Caparo (3), it would be unreasonable to impose the burden of guarding the building 24/7.</span></span></li></ul>",
        "<span class=\"bd\">Duty of Care - Caparo - Public Policy - Public Authorities</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Sellwood v Durham</span></span><br><span class=\"sm\">Acting in the public welfare is not necessarily a Caparo (3) defence. Here, a duty of care was owed.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Stovin v Wise</span></span><br><span class=\"sm\">Only when there was a public duty to act, and failing to do so would be irrational, would it be fair, just and reasonable to impose a duty on local authorities. Statutory powers, furthermore, do not per se give rise to a common law duty of care.</span></span></li></ul>",
        "<span class=\"bd\">Duty of Care - Public Authorities - NHS</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Robone v Pennine Care NHS</span></span><br><span class=\"sm\">That although previous case law had found an operational art.2 duty to detained psychiatric patients, the distinction between detained and voluntarily-present in-patients was not to be exaggerated, and here, there had been a duty owed.</span></span></li></ul>",
        "<span class=\"bd\">Duty of Care - Public Authorities - Fire Brigades</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Capital and Countries v Hampshire</span></span><br><span class=\"sm\">May be able to find fire brigades liable if they make things worse. But no duty to attend.</span></span></li></ul>"
    ],
    "NUMBER": "321"
},
{
    "TYPE": "Case Overviews",
    "RELATED": [
        "Case Overviews for Negligence - Defences",
        "Case Overviews for Negligence - Remoteness",
        "Case Overviews for Negligence",
        "Case Overviews for Negligence - Causation",
        "Case Overviews for Occupiers' Liability",
        "Case Overviews for Defamation",
        "Case Overviews for Employers' Liability - Primary Liability",
        "Case Overviews for Nuisance",
        "Case Overviews for Psychiatric Harm",
        "Case Overviews for Pure Economic Loss",
        "Case Overviews for Product Liability"
    ],
    "NAME": "Case Overviews for Negligence - Breach of Duty",
    "CATEGORIES": [
        "Negligence"
    ],
    "CATEGORY": "Negligence",
    "SUMMARY": [
        "<span class=\"bd\">Objective Standard</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Nettleship v Weston</span></span><br><span class=\"sm\">Although the defendant&#8217;s argument that her inexperience should give rise to a lesser standard of care made intuitive sense, an <span class=\"it\">objective</span> standard must be imposed, but a standard unconnected to moral fault. This is for two reasons: the impracticability of the standard being subjective, and the pragmatic necessity to <span class=\"it\">blame</span> someone &mdash; and therefore <span class=\"it\">pay for the damage</span> from their insurance.</span></span></li></ul>",
        "<span class=\"bd\">Foreseeability</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Roe v Minister of Health</span></span><br><span class=\"sm\">The presence of microscopic cracks would neither have been known about nor foreseen by the operating theatre doctors, so there had not been a breach.</span></span></li></ul>",
        "<span class=\"bd\">Cricket</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Miller v Jackson</span></span><br><span class=\"sm\">The claim in negligence (and nuisance) succeeded. The cricket club had owed and breached a duty of care owed to the claimant householders. Nevertheless, the injunction sought against the club was <span class=\"it\">not</span> allowed. Denning MR&#8217;s fabled dissent &mdash; <span class=\"it\">&#8216;In summertime, village cricket is the delight of everyone. Nearly every village has its own cricket field where the young men play and the old men watch.&#8217;</span></span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bolton v Stone</span></span><br><span class=\"sm\">When the <span class=\"bd\">chances</span> of damage occurring are too small, then, unless the magnitude of the potential damage so great as to make it reasonable to take precautions, (<span class=\"lnk caseln\">The Wagon Mound</span>), there will not be a breach of duty.  Cf. <span class=\"lnk caseln\">Miller v Jackson</span> in which the risk was rather greater.</span></span></li></ul>",
        "<span class=\"bd\">Severity of Potential Harm - Risk</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Paris v Stepney</span></span><br><span class=\"sm\">The particular characteristics/circumstances of an employee should be taken into account by an employer, or others owing them a duty of care, if the characteristics are known about. All the more so when precautions, such as the provision of safety goggles, are easy to take.</span></span></li></ul>",
        "<span class=\"bd\">Practicality of Precautions - Risk</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Harris v Perry</span></span><br><span class=\"sm\">Reasonably foreseeable that children could injure one another on a bouncy castle, but not that the injury would be severe.</span></span></li></ul>",
        "<span class=\"bd\">Practicality of Precautions - Risk - Employers&#8217; Liability - Primary Liability - Safe Place of Work</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Latimer v AEC</span></span><br><span class=\"sm\">Closing the factory until completely cleaned wouldn&#8217;t have been a reasonable precaution due to enormous cost of doing so, and risk of serious injury quite low. In the circumstances, the precautions the defendant had taken &mdash; although not such as to remove the danger entirely &mdash; were reasonable and proportionate.</span></span></li></ul>",
        "<span class=\"bd\">Practicality of Precautions - Severity of Potential Harm - Risk</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Overseas Tankship v Miller (The Wagon Mound - no 2)</span></span><br><span class=\"sm\">When the magnitude of potential harm is great, but the chance of it occurring is very slight, a reasonable man <span class=\"bd\">would</span> take precautions against. Therefore, especially when the cost and difficulty involved in taking such precautions are small, damage incurred may well be recoverable in negligence.</span></span></li></ul>",
        "<span class=\"bd\">Causation - Asbestos - Mesothelioma</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Williams v University of Birmingham</span></span><br><span class=\"sm\">The correct test in asbestos cases was whether the defendant had taken reasonable care to ensure that a person was not exposed to a foreseeable risk of <span class=\"it\">asbestos-related injury</span>. <span class=\"bd\">Not</span> that the defendant had exposed the claimant to asbestos. In the &#8216;70s, it was not known that the level of exposure to fibres experienced by the claimant would have given rise to a reasonably-foreseeable risk of asbestos-related injury.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Utility of Conduct</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Watt v Hertfordshire</span></span><br><span class=\"sm\">When actions or omissions which, considered alone would be actionable in negligence, are done or fail to be done in the public interest, then the utility of the conduct may well provide a defence. Therefore, although the risk of injury to a fireman told to go in the back of a van racing to the scene of an accident, to hold secure a massive great jack, was <span class=\"it\">foreseeable</span>, the potential utility of the conduct &mdash; extricating someone trapped in the wreckage of the car &mdash; provided a defence to the injured fireman.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Scout Association v Barnes</span></span><br><span class=\"sm\">Although there was potential utility in playing <span class=\"it\">objects in the dark</span>, there was not enough to weigh against the foreseeable risk of injury, and therefore, a breach of duty. Sagely, the court sagely suggested playing, instead, <span class=\"it\">objects</span>.</span></span></li></ul>",
        "<span class=\"bd\">Local Authorities</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Watt v Hertfordshire</span></span><br><span class=\"sm\">When actions or omissions which, considered alone would be actionable in negligence, are done or fail to be done in the public interest, then the utility of the conduct may well provide a defence. Therefore, although the risk of injury to a fireman told to go in the back of a van racing to the scene of an accident, to hold secure a massive great jack, was <span class=\"it\">foreseeable</span>, the potential utility of the conduct &mdash; extricating someone trapped in the wreckage of the car &mdash; provided a defence to the injured fireman.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Pierce v Doncaster</span></span><br><span class=\"sm\">The defendant was unreasonable in putting the child back with family &mdash; the <span class=\"lnk caseln\">Bolam</span> test applied, the defendant was to be judged according to the standard of an expert.</span></span></li></ul>",
        "<span class=\"bd\">Children</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Scout Association v Barnes</span></span><br><span class=\"sm\">Although there was potential utility in playing <span class=\"it\">objects in the dark</span>, there was not enough to weigh against the foreseeable risk of injury, and therefore, a breach of duty. Sagely, the court sagely suggested playing, instead, <span class=\"it\">objects</span>.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Common Practice</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bolitho v Hackney HA</span></span><br><span class=\"sm\"><span class=\"lnk caseln\">Bolam</span> stands, except where a judge can be satisfied that <span class=\"it\">the body of expert opinion cannot be logically supported at all</span>. And here, in the UKHL, the minority opinion of a certain Dr Dinwiddie held sway.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Sutcliffe v BMI Healthcare</span></span><br><span class=\"sm\">The post-operative care had been conducted on a logical basis &mdash; the claimant was asleep as he was tired.</span></span></li></ul>",
        "<span class=\"bd\">Standard of Care - Professionals</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bolam v Friern Hospital</span></span><br><span class=\"sm\">For professionals acting in the course of their duties, if the standard of care falls below the standard of <span class=\"it\">a responsible body of opinion</span>, then there is negligence. <span class=\"bd\">Cf. <span class=\"lnk caseln\">Montgomery v Lanarkshire Health Board</span></span>, also <span class=\"lnk caseln\">Bolitho</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Pierce v Doncaster</span></span><br><span class=\"sm\">The defendant was unreasonable in putting the child back with family &mdash; the <span class=\"lnk caseln\">Bolam</span> test applied, the defendant was to be judged according to the standard of an expert.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Appraise Patient of Material Risks</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Montgomery v Lanarkshire Health Board</span></span><br><span class=\"sm\">A doctor is under a duty to inform patient of <span class=\"it\">material</span> risks: would a reasonable person in the patient&#8217;s position be able to attach significance to the risk? Cf. <span class=\"lnk caseln\">Bolam v Friern Hospital</span>.</span></span></li></ul>",
        "<span class=\"bd\">Standard of Care - Children</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Mullin v Richards</span></span><br><span class=\"sm\">The standard to be expected of a 15-year-old child was not the standard of a reasonable person, but that of a reasonable and <span class=\"it\">ordinarily prudent</span> 15-year-old.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Orchard v Lee</span></span><br><span class=\"sm\">It was just a boy running around, not even breaking any rules. Doing just what you&#8217;d expect a boy to do. So, seriously, Mrs. Claimant, WTF?</span></span></li></ul>",
        "<span class=\"bd\">Standard of Care - Public Authorities - Prison</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Knight v Home Office</span></span><br><span class=\"sm\">No breach of duty: the hospital wing of a prison necessarily gives lower standard of care than a hospital, as money must be spent on, e.g., <span class=\"it\">stopping prisoners escaping</span> (!)</span></span></li></ul>"
    ],
    "NUMBER": "322"
},
{
    "TYPE": "Case Overviews",
    "RELATED": [
        "Case Overviews for Negligence - Remoteness",
        "Case Overviews for Negligence",
        "Case Overviews for Negligence - Breach of Duty",
        "Case Overviews for Negligence - Defences",
        "Case Overviews for Pure Economic Loss",
        "Case Overviews for Occupiers' Liability",
        "Case Overviews for Defamation",
        "Case Overviews for Product Liability",
        "Case Overviews for Nuisance",
        "Case Overviews for Employers' Liability - Primary Liability",
        "Case Overviews for Psychiatric Harm"
    ],
    "NAME": "Case Overviews for Negligence - Causation",
    "CATEGORIES": [
        "Negligence"
    ],
    "CATEGORY": "Negligence",
    "SUMMARY": [
        "<span class=\"bd\">But For Test</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Barnett v Chelsea and Kensington Hospital</span></span><br><span class=\"sm\">For a cause of action in negligence, the negligent action must be a <span class=\"it\">but for</span> cause of the harm.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hotson v East Berkshire</span></span><br><span class=\"sm\">Non-optimal treatment resulting in the <span class=\"it\">loss of a chance of improvement</span> from an injury does <span class=\"it\">not</span> give a cause of action in negligence.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wilsher v Essex AHA</span></span><br><span class=\"sm\">For liability in negligence, it must be able to be said that the defendant&#8217;s conduct was either a <span class=\"it\">but for</span> cause, or a <span class=\"it\">material contribution</span> to the harm.</span></span></li></ul>",
        "<span class=\"bd\">Exceptions - Pragmatism</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Cook v Lewis</span></span><br><span class=\"sm\">Would be unfair to apply the <span class=\"it\">but for</span> test in such situations. The claimant had been injured, and both possible firers were negligent. So the court found them both liable.</span></span></li></ul>",
        "<span class=\"bd\">Exceptions - Market Share Rule</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Sindell v Abbott Laboratories</span></span><br><span class=\"sm\">Court held each manufacturer liable in accordance with its market share for the drug; that the manufacturers were better able to bear the costs of cancer treatment.</span></span></li></ul>",
        "<span class=\"bd\">Exceptions - Supervening Acts and Combined Events</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Baker v Willoughby</span></span><br><span class=\"sm\">The supervening gunshot should be ignored, and damages awarded on that basis, fully compensating for the injury tortiously inflicted. The gunman, were he to be apprehended, would then be liable for the difference between a gammy leg and no leg at all.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Jobling v Associated Dairies</span></span><br><span class=\"sm\">The supervening injury could not be disregarded, as it did not arise from a tort.</span></span></li></ul>",
        "<span class=\"bd\">Fairchild</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">McGhee v National Coal Board</span></span><br><span class=\"sm\">There had indeed been a breach, but it was unclear whether it was the <span class=\"it\">but for</span> cause of the damage. Nevertheless, as the breach <span class=\"it\">materially increased the risk</span> of the damage, the claim was allowed. Lord Wilberforce held a departure from the <span class=\"it\">but for</span> test to be  appropriate, as there was no way of quantifying the extent to which the breach caused the damage.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Chester v Afshar</span></span><br><span class=\"sm\">By 3-2 majority, on the facts, she only had to prove she may have had the surgery at a <span class=\"bd\">later date</span> (having fully understood and evaluated the risks) rather than that she would not have had the surgery at all, for the claim to succeed. Also that it was important to send a message to surgeons about importance of warning patients of surgical risks.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gregg v Scott</span></span><br><span class=\"sm\">As the chances of surviving were reduced from 42% to 10% by the first GP&#8217;s negligence, it could not be said that on the balance of probabilities he would have survived <span class=\"it\">but for</span> the negligence. The court was also wary of opening the floodgates to claims against GPs.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Sanderson v Hull</span></span><br><span class=\"sm\">Could not prove that breach of duty probably called her infection, and that the trial judge had given no explanation for applying <span class=\"lnk caseln\">Fairchild</span>, which is for exceptional cases.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wooten v J Docter</span></span><br><span class=\"sm\">There was ample (competing) expert evidence on which the first-instance decision had been based; her claim was denied.</span></span></li></ul>",
        "<span class=\"bd\">Fairchild - Mesothelioma</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Fairchild v Glenhaven</span></span><br><span class=\"sm\">A <span class=\"it\">material contribution</span> to the harm, in exceptional circumstances, gives rise to actionable liability in negligence.</span></span></li></ul>",
        "<span class=\"bd\">Fairchild - Supervening Acts and Combined Events</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bailey v MOD</span></span><br><span class=\"sm\">Although the claim would fail the <span class=\"it\">but for</span> test on examination of each instance of negligence, the court applied <span class=\"lnk caseln\">Fairchild</span> and ruled the significant increase in <span class=\"it\">material risk</span> caused by the the defendant hospital was sufficient to establish causation.</span></span></li></ul>",
        "<span class=\"bd\">Fairchild - Mesothelioma - Quantification of Damages</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Barker v Corus</span></span><br><span class=\"sm\">Whereas in <span class=\"lnk caseln\">Fairchild</span>, the employers were held <span class=\"it\">jointly and severally</span> liable, here, each was held liable according to their contribution to the harm. &#8220;The harm may be indivisible, but the material contribution to the risk can be divided.&#8221;</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Sienkiewicz v Greif</span></span><br><span class=\"sm\">The risk had been increased by only 18%. The claim would fail on <span class=\"lnk caseln\">but for</span> grounds &mdash; however, the <span class=\"lnk caseln\">Fairchild Principle</span> was applied, albeit that here, <span class=\"it\">the other defendant was the atmosphere</span>. S3 <span class=\"lnk caseln\">Compensation Act 2006</span> could <span class=\"it\">not</span> be invoked, however, as it was not proven the risk had doubled, which is the statutory stipulation.</span></span></li></ul>"
    ],
    "NUMBER": "323"
},
{
    "TYPE": "Case Overviews",
    "RELATED": [
        "Case Overviews for Negligence - Breach of Duty",
        "Case Overviews for Negligence - Causation",
        "Case Overviews for Negligence",
        "Case Overviews for Negligence - Defences",
        "Case Overviews for Pure Economic Loss",
        "Case Overviews for Psychiatric Harm",
        "Case Overviews for Defamation",
        "Case Overviews for Employers' Liability - Primary Liability",
        "Case Overviews for Product Liability",
        "Case Overviews for Occupiers' Liability",
        "Case Overviews for Nuisance"
    ],
    "NAME": "Case Overviews for Negligence - Remoteness",
    "CATEGORIES": [
        "Negligence"
    ],
    "CATEGORY": "Negligence",
    "SUMMARY": [
        "<span class=\"bd\">New Intervening Act</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">The Sivand</span></span><br><span class=\"sm\">An intervening act can be construed as the <span class=\"it\">effective cause</span> of the damage when it is independent of the negligent conduct.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Lamb v Camden</span></span><br><span class=\"sm\">New intervening <span class=\"it\">squatters</span> had broken the chain of causation, so the claim was allowed for the flood damage but not for the squatter damage.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Meah v McCreamer</span></span><br><span class=\"sm\">A claim for the damage of a personality change and resulting imprisonment for a crime committed as a consequence may succeed, where the personality change arose as a consequence of an injury caused by the defendant&#8217;s negligence.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Meah v McCreamer (no 2)</span></span><br><span class=\"sm\">Sueing someone to recover your costs of sueing them, especially if you&#8217;re a murderer, will be seen as too remote from the original damage.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gray v Thames</span></span><br><span class=\"sm\"><span class=\"it\">Ex turpi causa</span> precludes recovery of general damages.</span></span></li></ul>",
        "<span class=\"bd\">New Intervening Act - Police</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Knightly v Johns</span></span><br><span class=\"sm\">The claim failed, as there had been not one but two intervening acts of negligence, by the officer in charge.</span></span></li></ul>",
        "<span class=\"bd\">New Intervening Act - Personal Injury</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">McKew v Holland</span></span><br><span class=\"sm\">Having suffered an injury, a claimant will not be said to be acting reasonably if he does not take account of his condition in his conduct.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wieland v Cyril Lord Carpets</span></span><br><span class=\"sm\">The claim succeeded: the fall was not too remote a consequence.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Spencer v Wincanton Holdings</span></span><br><span class=\"sm\">The court distinguished <span class=\"lnk caseln\">McKew v Holland</span>, and upheld the claim, albeit with reduced damages.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Contributory Negligence</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Spencer v Wincanton Holdings</span></span><br><span class=\"sm\">The court distinguished <span class=\"lnk caseln\">McKew v Holland</span>, and upheld the claim, albeit with reduced damages.</span></span></li></ul>",
        "<span class=\"bd\">New Intervening Act - Personal Injury - Unwanted Pregnancy</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Emeh v Kensington &amp; Chelsea</span></span><br><span class=\"sm\">Omitting to have an <span class=\"it\">abortion</span>, on discovering that because of a tort you were pregnant, would not be a new intervening act breaking the chain of causation.</span></span></li></ul>",
        "<span class=\"bd\">New Intervening Act - Suicide</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Reeves v The Met</span></span><br><span class=\"sm\">There was contributory negligence by the defendant... in having killed himself, so damages reduced to 50%.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Ex Turpi Causa</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Meah v McCreamer</span></span><br><span class=\"sm\">A claim for the damage of a personality change and resulting imprisonment for a crime committed as a consequence may succeed, where the personality change arose as a consequence of an injury caused by the defendant&#8217;s negligence.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Meah v McCreamer (no 2)</span></span><br><span class=\"sm\">Sueing someone to recover your costs of sueing them, especially if you&#8217;re a murderer, will be seen as too remote from the original damage.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gray v Thames</span></span><br><span class=\"sm\"><span class=\"it\">Ex turpi causa</span> precludes recovery of general damages.</span></span></li></ul>",
        "<span class=\"bd\">New Intervening Act - Suicide;</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Corr v IBC</span></span><br><span class=\"sm\">The suicide of a man whose depression arose through suffering a serious injury as a result of negligence is not too remote from the negligence to preclude recovery.</span></span></li></ul>",
        "<span class=\"bd\">Foreseeability - Children</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hughes v Lord Advocate</span></span><br><span class=\"sm\">That burns were reasonably foreseeable, even if the manner in which they&#8217;d occurred, by an explosion of a substance of which the claimant had not been aware, was not.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Jolley v Sutton</span></span><br><span class=\"sm\">If the type of damage suffered was reasonably foreseeable, the defendant will be liable for it even if the actual damage is far greater in extent than could have been foreseen.</span></span></li></ul>",
        "<span class=\"bd\">Foreseeability</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Doughty v Turner Manufacturing</span></span><br><span class=\"sm\">This turn of events had not been foreseeable. A splash <span class=\"it\">would</span> have been, which would have produced the same injury. But not a <span class=\"it\">magnified splash</span>, which is how the court characterised the incident. Cf. <span class=\"lnk caseln\">Jolley v Sutton</span>.</span></span></li></ul>",
        "<span class=\"bd\">Foreseeability - Thin Skull Rule</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Smith v Leech Brain</span></span><br><span class=\"sm\">That the injury sustained was much worse than the injury that could reasonably have been foreseen does not evaporate liability, if the injury is of <span class=\"it\">the same type</span> as that which is foreseeable.</span></span></li></ul>"
    ],
    "NUMBER": "324"
},
{
    "TYPE": "Case Overviews",
    "RELATED": [
        "Case Overviews for Negligence - Remoteness",
        "Case Overviews for Negligence",
        "Case Overviews for Employers' Liability - Primary Liability",
        "Case Overviews for Negligence - Causation",
        "Case Overviews for Negligence - Breach of Duty",
        "Case Overviews for Pure Economic Loss",
        "Case Overviews for Nuisance",
        "Case Overviews for Product Liability",
        "Case Overviews for Defamation",
        "Case Overviews for Occupiers' Liability",
        "Case Overviews for Psychiatric Harm"
    ],
    "NAME": "Case Overviews for Negligence - Defences",
    "CATEGORIES": [
        "Employers' Liability",
        "Negligence"
    ],
    "CATEGORY": "Employers' Liability / Negligence",
    "SUMMARY": [
        "<span class=\"bd\">Contributory Negligence</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Froom v Butcher</span></span><br><span class=\"sm\">His negligence contributed to all his injuries except of his finger, which, the court heard, would probably have been broken even had he been wearing the seatbelt.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Owens v Brimmell</span></span><br><span class=\"sm\">The claimant&#8217;s negligence, in getting into a car with someone he knew to be drunk, contributed to his injury.</span></span></li></ul>",
        "<span class=\"bd\">Contributory Negligence - Asbestos &mdash; Smoking</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Badger v MOD</span></span><br><span class=\"sm\">He was diagnosed quite a long time after the gov&#8217;t had obliged ciggie manufacturers to put warnings on packets, <span class=\"it\">yet he continued smoking</span>. Therefore although not exclusively the author of his own downfall, he contributed to it &mdash; by 20%, according to the court.</span></span></li></ul>",
        "<span class=\"bd\">Contributory Negligence - Children</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gough v Thorne</span></span><br><span class=\"sm\">When the claimant is a very young child, the defence of contributory negligence will fail</span></span></li></ul>",
        "<span class=\"bd\">Contributory Negligence - Psychiatric Harm</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Co-op v Pritchard</span></span><br><span class=\"sm\">Contributory negligence is not available as a defence to claims for assault and battery</span></span></li></ul>",
        "<span class=\"bd\">Volenti</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Baker v Hopkins</span></span><br><span class=\"sm\">No defence of consent can operate, in a very dangerous situation, unless the warnings are adequately clear.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">ICI v Shatwell</span></span><br><span class=\"sm\">There had been no pressure exerted by their employer to do as they did: they were merely indolent, and so were found to have consented.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Morris v Murray</span></span><br><span class=\"sm\">The claimant had consented to be in an aeroplane piloted by a drunk, and thereby implicitly waived his rights in the event of an injury.</span></span></li></ul>",
        "<span class=\"bd\">Volenti - Sport</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wooldridge v Sumner</span></span><br><span class=\"sm\">A person attending a game or competition accepts liability for any injuries caused to him by a competitor, unless the competitor has been reckless, or has injured deliberately.</span></span></li></ul>",
        "<span class=\"bd\">Ex Turpi Causa</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Revill v Newbery</span></span><br><span class=\"sm\">Damages reduced by 2/3 for contributory negligence, the claimant being, by being there in the first place, largely responsible. Nevertheless, you can&#8217;t just blast burglars with shotguns.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Vellino v Manchester Police</span></span><br><span class=\"sm\">By majority, the claim failed on <span class=\"it\">ex turpi causa</span> grounds.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Moore Stephens v Stone Rolls</span></span><br><span class=\"sm\">In the circumstances, the principle of ex turpi causa applied to a one-man company and prevented their claim.</span></span></li></ul>",
        "<span class=\"bd\">Ex Turpi Causa - Traffic Accident</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Pitts v Hunt</span></span><br><span class=\"sm\">Ex turpi causa: the claimant knew the driver was (i) drunk and (ii) unlicensed.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Delaney v Pickett</span></span><br><span class=\"sm\">Although the defendant was on the way to engage in crime, his injuries did not result from the illegality, but from the defendant&#8217;s negligence. Accordingly, <span class=\"it\">ex turpi causa</span> was no defence, and the claim succeeded.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Joyce v O&#8217;Brien</span></span><br><span class=\"sm\">In a criminal joint enterprise, particularly one involving the need to drive recklessly to avoid arrest (!), then the usual rule (that the <span class=\"it\">turpi</span> needs to have been committed by the person suffering the tort) can be set aside, if it was foreseeable that a party to the enterprise could be subject to increased/unusual risk of harm.</span></span></li></ul>"
    ],
    "NUMBER": "325"
},
{
    "TYPE": "Case Overviews",
    "RELATED": [
        "Case Overviews for Defamation",
        "Case Overviews for Occupiers' Liability",
        "Case Overviews for Employers' Liability - Primary Liability",
        "Case Overviews for Pure Economic Loss",
        "Case Overviews for Negligence - Defences",
        "Case Overviews for Nuisance",
        "Case Overviews for Negligence - Causation",
        "Case Overviews for Negligence - Breach of Duty",
        "Case Overviews for Negligence - Remoteness",
        "Case Overviews for Negligence",
        "Case Overviews for Product Liability"
    ],
    "NAME": "Case Overviews for Psychiatric Harm",
    "CATEGORIES": [
        "Psychiatric Harm"
    ],
    "CATEGORY": "Psychiatric Harm",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hinz v Berry</span></span><br><span class=\"sm\">To recover in psychiatric harm, the claimant must demonstrate that they have a <span class=\"it\">recognised psychiatric condition</span> rather than &#8216;mere&#8217; grief and sorrow.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">White v South Yorkshire Police</span></span><br><span class=\"sm\">In essence, that it would not be fair to allow claims by the police officers, when in <span class=\"lnk caseln\">Alcock</span>, claims by the relatives had failed.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Alcock v South Yorkshire Police</span></span><br><span class=\"sm\">Established the modern rules in psychiatric harm. Drew a fundamental but contentious distinction between <span class=\"it\">primary</span>, to whom a defendant owes a duty of care if a <span class=\"it\">physical</span> injury was reasonably foreseeable, and <span class=\"it\">secondary</span> victims, to whom <span class=\"it\">no such duty is owed</span>, unless four conditions are met, the <span class=\"lnk caseln\">Alcock Test</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dulieu v White</span></span><br><span class=\"sm\">An action in negligence could arise from a reasonable fear for one&#8217;s own immediate safety.</span></span></li></ul>",
        "<span class=\"bd\">Primary Victimhood - Remoteness</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Page v Smith</span></span><br><span class=\"sm\">Followed dicta in <span class=\"lnk caseln\">Alcock</span>: the claimant was a <span class=\"it\">primary</span> victim, for whom it was enough merely to show foreseeable risk of <span class=\"it\">physical</span> injury.</span></span></li></ul>",
        "<span class=\"bd\">Primary Victimhood - Local Authorities - Child Abuse</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">W v Essex</span></span><br><span class=\"sm\">The parents were indeed <span class=\"it\">primary victims</span>, as they were involved in the decision to foster.</span></span></li></ul>",
        "<span class=\"bd\">Primary Victimhood - Bystanders</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Chadwick v BTC</span></span><br><span class=\"sm\">It was reasonably foreseeable that, in the event of an accident due to the defendant&#8217;s negligence, bystanders may come to the rescue, and as such, were owed a duty of care. Injury by shock to such a (physically unharmed) bystander was also reasonably foreseeable.</span></span></li></ul>",
        "<span class=\"bd\">Primary Victimhood;</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Boumedien v Delta Display</span></span><br><span class=\"sm\">Doubtful whether he reasonably thought he was at risk of serious injury on the facts, having merely been <span class=\"it\">woken up</span> by what happened.</span></span></li></ul>",
        "<span class=\"bd\">Primary Victimhood</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Monk v Harrington</span></span><br><span class=\"sm\">He had not believed he was putting himself in danger, or that if he did, he did not do so reasonably. Therefore the claim failed.</span></span></li></ul>",
        "<span class=\"bd\">Secondary Victimhood - Nature of Relationship</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">McFarlane v Caledonia (no 1)</span></span><br><span class=\"sm\">In the circumstances, it was not reasonably foreseeable that the claimant and other off-duty workers aboard support vessels would suffer psychiatric harm.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bourhill v Young</span></span><br><span class=\"sm\">No duty of care owed by a motorcyclist or other road user to a member of the public who might see <span class=\"it\">not even the aftermath</span> of an accident caused by his negligence.</span></span></li></ul>",
        "<span class=\"bd\">Secondary Victimhood - Necessity of Proximity</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">McLoughlin v O&#8217;Brian</span></span><br><span class=\"sm\">In the circumstances of having the victims in hospital <span class=\"it\">still dirty and bloody</span>, the claim of secondary victimhood was to be upheld.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Taylor v A Novo</span></span><br><span class=\"sm\">The passage of time between the negligence and the death, three weeks, meant that the claimant could not be said to have witnessed the aftermath, and to make the defendant liable for the psychiatric harm would require a very significant extension of the law.</span></span></li></ul>",
        "<span class=\"bd\">Secondary Victimhood - Necessity of First-Hand Experience</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hambrook v Stokes</span></span><br><span class=\"sm\">The claimant&#8217;s wife hadn&#8217;t seen the accident with her own unaided senses, so his suit for <span class=\"it\">loss of his wife&#8217;s services</span> failed.</span></span></li></ul>",
        "<span class=\"bd\">Secondary Victimhood - Necessity of Shocking Event</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Liverpool Womens Hospital v Ronayne</span></span><br><span class=\"sm\">There had been too many events, and what he had seen had not been <span class=\"it\">exceptionally horrific</span> according to the ordinary meanings of those words.</span></span></li></ul>"
    ],
    "NUMBER": "326"
},
{
    "TYPE": "Case Overviews",
    "RELATED": [
        "Case Overviews for Negligence - Defences",
        "Case Overviews for Occupiers' Liability",
        "Case Overviews for Defamation",
        "Case Overviews for Negligence - Remoteness",
        "Case Overviews for Pure Economic Loss",
        "Case Overviews for Product Liability",
        "Case Overviews for Negligence",
        "Case Overviews for Negligence - Breach of Duty",
        "Case Overviews for Psychiatric Harm",
        "Case Overviews for Nuisance",
        "Case Overviews for Negligence - Causation"
    ],
    "NAME": "Case Overviews for Employers' Liability - Primary Liability",
    "CATEGORIES": [
        "Employers' Liability"
    ],
    "CATEGORY": "Employers' Liability",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wilsons and Clyde Coal v English</span></span><br><span class=\"sm\">An employer owes a duty of care to his employers to provide <span class=\"bd\">(1)</span> a safe <span class=\"bd\">place</span> of work; <span class=\"bd\">(2)</span> a safe <span class=\"bd\">system</span> of work; and <span class=\"bd\">(3)</span> reasonably <span class=\"bd\">competent</span> fellow employees. He cannot wriggle out of that duty by delegating to an employee the practicalities how some part of the discharge of that duty should be arranged &mdash; such as arranging a safe system of work.</span></span></li></ul>",
        "<span class=\"bd\">Competent Employees</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hudson v Ridge</span></span><br><span class=\"sm\">The injury resulted from the employer&#8217;s failure to put a stop to the practical joker&#8217;s behaviour, in breach of the employer&#8217;s primary duty to provide competent staff.</span></span></li></ul>",
        "<span class=\"bd\">Adequate Materials and Equipment</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Davie v New Merton Board Mill</span></span><br><span class=\"sm\">The supplier of the tool, and the employer, had not been negligent as regards its provision to the claimant. The course of action lay against the manufacturer.</span></span></li></ul>",
        "<span class=\"bd\">Adequate Materials and Equipment - Ships</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Coltman v Bibby Takers</span></span><br><span class=\"sm\">A ship is indeed equipment for the purposes of S1 <span class=\"lnk caseln\">Employers&#8217; Liability (Defective Equipment) Act</span>.</span></span></li></ul>",
        "<span class=\"bd\">Safe System of Work</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Walker v Northumberland</span></span><br><span class=\"sm\">The claim succeeded, as the (psychiatric) damage he incurred was due to the defendant&#8217;s failure to provide a reasonable system of work.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Barber v Somerset</span></span><br><span class=\"sm\">The employer had failed in their duty to provide a safe system of work, in giving the employee far too much work to do, and in treating his complaints about it without any sympathy.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Thompson v Smiths Shiprepairers</span></span><br><span class=\"sm\">The defendant could only invoke <span class=\"it\">industry practice</span> as a defence until the date at which the necessity and effectiveness of precautions (ear defenders) became known about &mdash; 1963. Therefore the claim succeeded, but only for the loss of hearing sustained from the period <span class=\"it\">after</span> 1963, until ear-defenders were supplied.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">McDermid v Nash</span></span><br><span class=\"sm\">Not only does the system of work have to be safe, it also has to be <span class=\"it\">in operation</span>.</span></span></li></ul>",
        "<span class=\"bd\">Safe Place of Work</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Coxall v Goodyear</span></span><br><span class=\"sm\">What constitutes a safe place of work <span class=\"it\">may</span> depend on the particular characteristics of an employee, and, on a case-by-case basis, liability should be assessed as such.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Stapley v Gypsum Mines</span></span><br><span class=\"sm\">The claimant had contributed substantially to the accident in disobeying his employer&#8217;s orders, and as such, was entitled only to 20% damages.</span></span></li></ul>"
    ],
    "NUMBER": "327"
},
{
    "TYPE": "Case Overviews",
    "RELATED": [
        "Case Overviews for Negligence - Breach of Duty",
        "Case Overviews for Product Liability",
        "Case Overviews for Nuisance",
        "Case Overviews for Psychiatric Harm",
        "Case Overviews for Negligence - Remoteness",
        "Case Overviews for Pure Economic Loss",
        "Case Overviews for Defamation",
        "Case Overviews for Employers' Liability - Primary Liability",
        "Case Overviews for Negligence",
        "Case Overviews for Negligence - Defences",
        "Case Overviews for Negligence - Causation"
    ],
    "NAME": "Case Overviews for Occupiers' Liability",
    "CATEGORIES": [
        "Occupiers' Liability"
    ],
    "CATEGORY": "Occupiers' Liability",
    "SUMMARY": [
        "<span class=\"bd\">Duty to Visitors - Meaning of Visitor</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">The Calgarth</span></span><br><span class=\"sm\">Having permission to be on land, but using it in non-permitted ways makes you a non-visitor.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Harvey v Plymouth</span></span><br><span class=\"sm\">In running frantically across the land to <span class=\"it\">escape</span>, the claimant had not used the land for the foreseen purpose of <span class=\"it\">recreation</span>. There was therefore no implied assent from the defendant: following <span class=\"lnk caseln\">The Calgarth</span>, he was not a visitor under <span class=\"lnk caseln\">OLA 1957</span>.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Visitors - Meaning of Visitor - Allurement - Children</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Glasgow v Taylor</span></span><br><span class=\"sm\">An occupier <span class=\"it\">can</span> be expected to protect against hidden dangers that may be <span class=\"it\">alluring</span> to children, albeit that there is no requirement to protect against obvious dangers arising from natural features.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Visitors - Meaning of Visitor - Allurement</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">1Jolley v Sutton</span></span><br><span class=\"sm\">It was conceded that the claimant was a visitor, even though there was no question if implied or express permission.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Visitors</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Tedstone v Bourne Leisure</span></span><br><span class=\"sm\">It wasn&#8217;t unexpected to find spillages of water in the vicinity of a Jacuzzi, and there could be no reasonable system by which an occupier could have got rid of the water so quickly &mdash; followed <span class=\"lnk caseln\">Pollard v Tesco</span> [1976], the slippage on spilt yoghurt.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Poppleton v Portsmouth YAC</span></span><br><span class=\"sm\">The claimant had taken an <span class=\"it\">obvious risk</span>, and the law did not require occupiers to warn of obvious risks.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hufton v Somerset</span></span><br><span class=\"sm\">The school had an appropriate system in place, and it would not be reasonable to expect a school in <span class=\"it\">England</span> to have dry floors all the time.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Butcher v Southend</span></span><br><span class=\"sm\">As the hazard had not arisen suddenly but was plain to see and had been present for some time; the risk of injury was foreseeable; and repair straightforward to achieve, the claim succeeded.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Visitors - Children</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">West Sussex v Pierce</span></span><br><span class=\"sm\">Punching a metal object does not make that object, per se, dangerous. Per Sharpe LJ &mdash; the problem wasn&#8217;t the water fountain; the problem was the <span class=\"it\">boy</span>.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Visitors - Children - Allurement</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Phipps v Rochester</span></span><br><span class=\"sm\">With younger children, the occupier is entitled to assume <span class=\"bd\">the parents won&#8217;t let the children wonder off on their own</span>. But for older children, this was not to be expected.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Visitors - Special Skills</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Roles v Nathan</span></span><br><span class=\"sm\">There was no breach of duty &mdash; a chimney sweep ought to be aware of the dangers of sweeping chimneys, even if manifestly they do <span class=\"it\">not</span>.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Visitors - Subcontracting of Maintenance</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Haseldine v Daw</span></span><br><span class=\"sm\">The occupier had fulfilled his duty of ensuring the lift was safe by employing reputable contractors, and it was unreasonable to expect them to check the work carried out in detail, for wont of expert knowledge.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Visitors - Subcontracting of Maintenance - Public Authority</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Maguire v Sefton</span></span><br><span class=\"sm\">The defendant was entitled to assume a company purporting to be expert in maintaining equipment were indeed expert &mdash; the claim was denied.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Visitors - Warning signs</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">White v Blackmore</span></span><br><span class=\"sm\">Denning MR &mdash; to be relevant, a warning has to be useful, and a genuine attempt to avoid the danger. E.g., a warning on a rotten bridge saying &#8216;this bridge is dangerous,&#8217; if it were the only way to get to the other side, would not avoid the liability. If there were an alternative bridge that was sound, however, it would.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Visitors - Stupidity</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Clark v Bourne Leisure</span></span><br><span class=\"sm\">There was no need for a warning sign when the danger was obvious, and an obvious alternative existed.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Non-visitors - Local Authorities</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Tomlinson v Congleton</span></span><br><span class=\"sm\">On appeal to the lords, the claim failed. There was no problem with the state of the premises: the lake was not dangerous per se, only the claimant&#8217;s <span class=\"it\">use</span> of the lake.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Non-visitors</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Donoghue v Folkestone Properties</span></span><br><span class=\"sm\">On the third limb of the test for duty to non-visitors in the <span class=\"lnk caseln\">OLA 1984</span>, the claim failed, as it would not be reasonable to believe people would jump into the sea in the middle of winter in England.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Non-visitors - Children</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Keown v Coventry NHS</span></span><br><span class=\"sm\">Following <span class=\"lnk caseln\">Tomlinson v Congleton</span>, the problem was not the fire-escape, but the claimant&#8217;s way of <span class=\"it\">using</span> the fire-escape, by using it as a climbing frame.</span></span></li></ul>",
        "<span class=\"bd\">Duty to Non-visitors - Children - Allurement</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Platt v Liverpool</span></span><br><span class=\"sm\">The defendant had taken reasonable steps in surrounding the dangerous but alluring building with an iron fence, so the claim failed on appeal.</span></span></li></ul>"
    ],
    "NUMBER": "328"
},
{
    "TYPE": "Case Overviews",
    "RELATED": [
        "Case Overviews for Negligence",
        "Case Overviews for Negligence - Breach of Duty",
        "Case Overviews for Negligence - Causation",
        "Case Overviews for Nuisance",
        "Case Overviews for Defamation",
        "Case Overviews for Pure Economic Loss",
        "Case Overviews for Psychiatric Harm",
        "Case Overviews for Employers' Liability - Primary Liability",
        "Case Overviews for Negligence - Remoteness",
        "Case Overviews for Occupiers' Liability",
        "Case Overviews for Negligence - Defences"
    ],
    "NAME": "Case Overviews for Product Liability",
    "CATEGORIES": [
        "Product Liability"
    ],
    "CATEGORY": "Product Liability",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Stennett v Hancock</span></span><br><span class=\"sm\">Manufacturers and repairers could potentially owe a duty of care not just to <span class=\"it\">consumers</span>, but under an extension of the <span class=\"lnk caseln\">Donoghue</span> principle, to anyone who could be <span class=\"it\">affected</span> by the product.HELD The owners of the lorry weren&#8217;t to blame, as they&#8217;d taken reasonable care in preparing it, having had it maintained by people whose competence could reasonably be assumed. See also <span class=\"lnk caseln\">Haseldine v Daw</span>.</span></span></li></ul>",
        "<span class=\"bd\">Proving Manufacturer&#8217;s Negligence</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Evans v Triplex Safety Glass</span></span><br><span class=\"sm\">The burden of proof for proving negligence in manufacture lies with the claimant, but the court may be quick to infer negligence.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Grant v Aus. Knitting Mills</span></span><br><span class=\"sm\">Although the claimant had contributed to his condition by wearing the garment for a <span class=\"it\">week</span>, the claim succeeded.</span></span></li></ul>",
        "<span class=\"bd\">Manufacturer&#8217;s Duty</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Vacwell Engineering v BDH</span></span><br><span class=\"sm\">A manufacturer has a duty to warn a claimant of the dangers of its products.</span></span></li></ul>",
        "<span class=\"bd\">Manufacturer&#8217;s Duty - Product Liability for Pure Economic Loss - Local Authorities</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dutton v Bognor Regis</span></span><br><span class=\"sm\">The principle of <span class=\"lnk caseln\">Donoghue</span> as expanded in later cases applies to real-property. Obiter in <span class=\"lnk caseln\">Anns v Merton</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Murphy v Brentwood</span></span><br><span class=\"sm\">Explicitly overruling <span class=\"lnk caseln\">Anns v Merton</span>, a local authority does <span class=\"bd\">not</span> owe a duty to prevent pure economic loss in real property.</span></span></li></ul>",
        "<span class=\"bd\">Manufacturer&#8217;s Duty - Product Liability for Pure Economic Loss</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Junior Books v Vietchi</span></span><br><span class=\"sm\">Where the relationship between parties is close enough, there <span class=\"it\">is</span> a duty to avoid causing pure economic loss.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">D&amp;F Estates v CoE</span></span><br><span class=\"sm\">There was a remedy in contract, so the claim for pure economic loss failed.</span></span></li></ul>",
        "<span class=\"bd\">Manufacturer&#8217;s Duty - One Product Damaging Another</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Aswan Engineering v Lupdine</span></span><br><span class=\"sm\">The container is just as much a part of the product as what it contains, and therefore subject to claims under product liability.</span></span></li></ul>",
        "<span class=\"bd\">Consumer Protection - CPA 1987 - CPA Defectiveness</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Worsley v Tambrands</span></span><br><span class=\"sm\">A clear message on the back of the box referred to the leaflet containing the warning. The product was not, therefore, defective.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Richardson v LRC Products</span></span><br><span class=\"sm\">The defendant had never claimed the condom would never fail; the damage, if there was any, was unlikely to be factory damage.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Abouzaid v Mothercare</span></span><br><span class=\"sm\">The design of elasticated straps, hazardous to eyes, was defective without a warning that users should <span class=\"it\">stand well back</span>.</span></span></li></ul>",
        "<span class=\"bd\">Consumer Protection - CPA 1987 - CPA Defectiveness - CPA Defences</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">A v National Blood Authority</span></span><br><span class=\"sm\">The product was defective, and that it was not relevant that the harm not could be avoided. They had not warned the public, who were entitled to expect that such products were free from infections. Defence (e) under the CPA, <span class=\"it\">development risks</span>, was ineffective here, although the CJEU later criticised this decision &mdash; <span class=\"it\">Commission v UK C-300/95 [1997]</span>.</span></span></li></ul>",
        "<span class=\"bd\">Consumer Protection - CPA 1987 - CPA Defectiveness - Trying it on</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bogle v McDonald&#8217;s</span></span><br><span class=\"sm\">Providing the drinks were supplied with securely-fitted lids, the product was not defective.</span></span></li></ul>",
        "<span class=\"bd\">Consumer Protection - CPA 1987 - CPA Defectiveness - Children</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Pollard v Tesco</span></span><br><span class=\"sm\">Under the <span class=\"lnk caseln\">CPA 1987</span>, the test for presence of a defect was one of <span class=\"it\">public expectation</span>.</span></span></li></ul>"
    ],
    "NUMBER": "329"
},
{
    "TYPE": "Case Overviews",
    "RELATED": [
        "Case Overviews for Employers' Liability - Primary Liability",
        "Case Overviews for Defamation",
        "Case Overviews for Nuisance",
        "Case Overviews for Negligence - Remoteness",
        "Case Overviews for Negligence",
        "Case Overviews for Negligence - Defences",
        "Case Overviews for Negligence - Causation",
        "Case Overviews for Negligence - Breach of Duty",
        "Case Overviews for Product Liability",
        "Case Overviews for Psychiatric Harm",
        "Case Overviews for Occupiers' Liability"
    ],
    "NAME": "Case Overviews for Pure Economic Loss",
    "CATEGORIES": [
        "Pure Economic Loss"
    ],
    "CATEGORY": "Pure Economic Loss",
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Cattle v Stockton Waterworks</span></span><br><span class=\"sm\">Early authority for there being no cause of action for pure economic loss in negligence.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Candler v Crane &amp; Christmas</span></span><br><span class=\"sm\">By majority, there was still no liability in tort for a negligent statement. There had never been a decided case, apart from those involving fraud/contract/equity, where a statement had been held negligent, and the court wasn&#8217;t about to change the law.</span></span></li></ul>",
        "<span class=\"bd\">Negligent Misstatement</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hedley Byrne v Heller</span></span><br><span class=\"sm\">Overturning <span class=\"lnk caseln\">Candler v Crane</span>, there <span class=\"bd\">can</span> be liability for negligent misstatement resulting in pure economic loss.</span></span></li></ul>",
        "<span class=\"bd\">Negligent Misstatement - Assumption of Responsibility - Reliance</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Lennon v Metropolitan Police Commissioner</span></span><br><span class=\"sm\">The assumption of responsibility for a statement with economic consequences gives rise to duty, so the claim succeeded.</span></span></li></ul>",
        "<span class=\"bd\">Negligent Misstatement - Disclaiming Responsibility</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Smith v Bush</span></span><br><span class=\"sm\"><span class=\"lnk caseln\">Hedley Byrne</span> liability, therefore, was also to proximate third parties. The purchasor of a house was entitled to rely on the surveyor&#8217;s valuation, as doing so was such common practice, and UCTA 1977 disqualified the disclaimer.</span></span></li></ul>",
        "<span class=\"bd\">Negligent Misstatement - Reasonableness of Reliance</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Howard Marine Dredging v Ogden &amp; Sons</span></span><br><span class=\"sm\">Denning MR &mdash; in some situations, it isn&#8217;t reasonable to rely on what someone says to you, e.g., off-the-cuff spontaneous advice, <span class=\"it\">even from an expert</span>, or in a casual conversation in the street. Or advice given in a railway carriage.</span></span></li></ul>",
        "<span class=\"bd\">Negligent Misstatement - Statement in a Social Context</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Chaudry v Prabhaker</span></span><br><span class=\"sm\">There <span class=\"bd\">may</span> be a duty of care in social situations. Here, duty was admitted.</span></span></li></ul>",
        "<span class=\"bd\">Negligent Misstatement - Relationship between Parties - References</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Spring v Guardian Assurance</span></span><br><span class=\"sm\">It had already been established that on <span class=\"lnk caseln\">Hedley Byrne</span> grounds a referee owes a duty of care to the recipient of the reference &mdash; but there is also such a duty to the <span class=\"it\">subject</span> of the reference. Although this is not to say that a bad reference is, <span class=\"it\">per se</span>, a breach of duty.</span></span></li></ul>",
        "<span class=\"bd\">Negligent Misstatement - Representation of Expertise</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Esso v Mardon</span></span><br><span class=\"sm\">Albeit that &#8216;<span class=\"it\">I know all there is to know about...</span>&#8216; ought to be taken to mean &#8216;_I, almost to the point of caricature, am savagely ignorant about...&#8217;, just as &#8216;trust me, I&#8217;m telling the truth,&#8217; means &#8216;I am not telling the truth: I am an inveterate liar&#8217; &mdash; the defendant in this case had been reasonable in relying on the claimant&#8217;s self-professed expertise.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Henderson v Merrett</span></span><br><span class=\"sm\">There could indeed be a liability for pure economic loss for negligent misstatement running alongside a contractual claim.</span></span></li></ul>",
        "<span class=\"bd\">Negligent Misstatement - Floodgates - Defendant&#8217;s Knowledge</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">James McNaughton v Hicks Anderson</span></span><br><span class=\"sm\">No reasonable person would rely on a set of <span class=\"it\">draft accounts</span> without checking them, and no reasonable person would expect someone to whom he had provided draft accounts not to check them themselves.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Customs and Excise v Barclays</span></span><br><span class=\"sm\">In the court of appeal, Peter Gibson, Longmore and Lindsay LLJ held that there was <span class=\"bd\">no duty</span> and proposed Hedley Byrne be subsumed into the <span class=\"lnk caseln\">Caparo</span> test. In the Lords, because the defendant was merely complying with the law, no <span class=\"lnk caseln\">Hedley Byrne</span>-style assumption of responsibility could have arisen, and it would not be fair, just and reasonable to impose liability.</span></span></li></ul>",
        "<span class=\"bd\">Negligent Misstatement - &#8220;Practical Justice&#8221;</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">White v Jones</span></span><br><span class=\"sm\">Citing <span class=\"lnk caseln\">Hedley Byrne</span>, the claim was allowed.</span></span></li></ul>",
        "<span class=\"bd\">Negligent Misstatement - Floodgates - Claimant&#8217;s Enquiries</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Patchett v Swimming Pool Trades Association</span></span><br><span class=\"sm\">There is a need for independent enquiry when engaging contractors, particularly for relatively large sums &mdash; here, \u00a350K. To take a website&#8217;s word for it, was too rash for the claim to succeed.</span></span></li></ul>"
    ],
    "NUMBER": "330"
},
{
    "TYPE": "Case Overviews",
    "RELATED": [
        "Case Overviews for Psychiatric Harm",
        "Case Overviews for Employers' Liability - Primary Liability",
        "Case Overviews for Defamation",
        "Case Overviews for Occupiers' Liability",
        "Case Overviews for Negligence - Defences",
        "Case Overviews for Pure Economic Loss",
        "Case Overviews for Product Liability",
        "Case Overviews for Negligence",
        "Case Overviews for Negligence - Breach of Duty",
        "Case Overviews for Negligence - Causation",
        "Case Overviews for Negligence - Remoteness"
    ],
    "NAME": "Case Overviews for Nuisance",
    "CATEGORIES": [
        "Nuisance"
    ],
    "CATEGORY": "Nuisance",
    "SUMMARY": [
        "<span class=\"bd\">Private Nuisance - Who can sue - Trying it on</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hunter v Canary Wharf</span></span><br><span class=\"sm\">The HL confirmed the CA ruling that the right to build was not restricted by potential for interrupting reception of TV signals on another&#8217;s land. This case was akin to a vista having been spoiled by the legal putting-up of an ugly building: for this there is no cause of action in English law.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Foreseeability of Nuisance - Reasonableness of Use - Rylands v Fletcher</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Cambridge Water v Eastern Counties Leather</span></span><br><span class=\"sm\">The use of the land from which the nuisance arises must be reasonable, and here it was <span class=\"it\">not</span>. But the damage caused by the nuisance must be reasonably foreseeable. On the facts, therefore, the claim failed.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Coming to the Nuisance - Local Circumstances - Defences</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Sturges v Bridgman</span></span><br><span class=\"sm\">Coming to the nuisance is not a defence, and &#8220;what is not OK in Belgrave Square is OK in Bermondsey,&#8221; i.e., the character of the local environment must be accounted for when deciding whether something is a nuisance.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Coming to the Nuisance - Local Circumstances - Local Circumstances irrelevant where Property Damage</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">St Helens Smelting v Tipping</span></span><br><span class=\"sm\">The character of the locality is of <span class=\"it\">no</span> relevance where the nuisance has sustained property damage.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Planning Permission as Defence - Coming to the Nuisance - Defences - 20 years&#8217; Prescription</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Coventry v Lawrence</span></span><br><span class=\"sm\">Planning permission is not a <span class=\"it\">key</span> factor in establishing a cause of action in private nuisance.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Sensitive Claimant</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Robinson v Kilvert</span></span><br><span class=\"sm\">There was no nuisance, as an objectively <span class=\"it\">ordinary</span> use of the premises would not have suffered the interference as <span class=\"it\">unreasonable</span>.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Duration of Interference</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">British Celanese v Hunt</span></span><br><span class=\"sm\">An isolated happening was enough for a claim in nuisance to succeed.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Crown River Cruises v Kimbolton</span></span><br><span class=\"sm\">Although the nuisance only lasted just twenty minutes, the defendant was liable.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Public benefit of nuisance</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bamford v Turnley</span></span><br><span class=\"sm\">Reasonable use of land <span class=\"it\">in the public interest</span>, which nevertheless creates a nuisance, ought to be allowed to continue &mdash; but there is still liability for remedies other than injunction.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Defences - Public Benefit</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dennis v MoD</span></span><br><span class=\"sm\">Public benefit of nuisance will not operate as a defence to injunction where the nuisance is <span class=\"it\">unreasonable</span>.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Art. 8 in Nuisance</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Marcic v Thames Water</span></span><br><span class=\"sm\">The claim failed on the facts, but there might be a cause of action in Art 8 where there&#8217;s none in nuisance.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dobson v Thames Water</span></span><br><span class=\"sm\">No double-remedies were to be awarded. The common-law damages paid for the nuisance to householders were intended to recompense the households, not merely the household<span class=\"it\">ers</span>.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Malicious Nuisance</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Christie v Davey</span></span><br><span class=\"sm\">Actions motivated by malice can indeed constitute a nuisance.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hollywood Silver Fox Farm v Emmett</span></span><br><span class=\"sm\">Although there was abnormal sensitivity, the defendant was liable for nuisance because he acted out of malice. Cf. <span class=\"lnk caseln\">Robinson v Kilvert</span>.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Fault for Nuisance - Adoption or Continuation of Nuisance</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Sedleigh-Denfield v O&#8217;Callaghan</span></span><br><span class=\"sm\">Adoption or continuation of a nuisance (i.e., with knowledge or presumed knowledge, not having taken reasonable steps to address it) gives rise to liability, whether or not the defendant <span class=\"it\">caused</span> the nuisance.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Lippiatt v South Gloucestershire</span></span><br><span class=\"sm\">Following <span class=\"lnk caseln\">Hussain v Lancaster</span>, there is liability for repeated acts of nuisance caused by third parties in occupation of a defendant&#8217;s land, where no steps are taken to evict.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Fault for Nuisance - Nuisance caused by Acts of Nature</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Holbeck Hall Hotel v Scarborough</span></span><br><span class=\"sm\">There was indeed a duty to prevent foreseeable natural risks of nuisance, but on the facts, the magnitude of the hazard affecting the claimant&#8217;s land was unforeseeable.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Who can sue</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Malone v Laskey</span></span><br><span class=\"sm\">To sue in nuisance requires a proprietary interest in the affected land &mdash; a mere licensee cannot sue.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Khoransandjian v Bush</span></span><br><span class=\"sm\">Harassment was actionable in private nuisance <span class=\"it\">despite</span> not having a proprietary interest in the affected property.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Who can sue - Art. 8 in Nuisance</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">McKenna v British Aluminium</span></span><br><span class=\"sm\">Although the law conferred a course of action in <span class=\"lnk caseln\">Rylands v Fletcher</span> only on those with an interest in the affected land, the HRA 1998 in effect extended the rule to include those who did <span class=\"it\">not</span>.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Who can be sued</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hussain v Lancaster</span></span><br><span class=\"sm\">The person to sue is <span class=\"it\">generally</span> the creator of the nuisance, not the landlord, unless they had authorized the nuisance.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Matania v National Provincial</span></span><br><span class=\"sm\">In consenting to a nuisance being caused, an owner is liable for the nuisance caused by another from his land.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Who can be sued - Landlords</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Harris v James</span></span><br><span class=\"sm\">A landlord who authorizes a nuisance, expressedly or impliedly, is liable.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Tetley v Chitty</span></span><br><span class=\"sm\">A landlord who authorizes an activity which could <span class=\"it\">foreseeably</span> be a nuisance, is liable.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Coventry v Lawrence (no 2)</span></span><br><span class=\"sm\">In order to be said to have authorized the nuisance, a landlord must not only have been <span class=\"bd\">aware</span> and have <span class=\"bd\">neglected to take steps</span> to reduce it, <span class=\"bd\">but also</span> the claimant must show a high probability that the nuisance was an inevitable consequence of letting the property out.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Defences - Public Utility</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Adams v Ursell</span></span><br><span class=\"sm\">Public utility is not an effective defence to nuisance.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Defences - Statutory Authority</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Allen v Gulf Oil Refining</span></span><br><span class=\"sm\">Lord Wilberforce &mdash; to defeat a claim in private nuisance caused by something for which there is explicit statutory authority, the defendant must show there was <span class=\"bd\">no other way to fulfil Parliament&#8217;s intention</span> that avoided creating the nuisance.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Defences - Planning Permission</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gillingham v Medway Dock Co</span></span><br><span class=\"sm\">Where a nuisance had arisen from lawfully-passed planning permissions, the nuisance was to be judged on the basis of the character of the locality <span class=\"bd\">after</span> not <span class=\"bd\">before</span> the change of use.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Remedies &mdash; injunction</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Kennaway v Thompson</span></span><br><span class=\"sm\">The <span class=\"bd\">routine</span> remedy for nuisance must be an <span class=\"bd\">equitable injunction</span>. Were it damages, people would in effect be able to buy the right to commit a tort.</span></span></li></ul>",
        "<span class=\"bd\">Private Nuisance - Remedies &mdash; damages</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bone v Searle</span></span><br><span class=\"sm\">The assessment of damages for loss of amenity caused by nuisance might well be inspired by, or be parallel to, damages for loss of amenity in personal injury.</span></span></li></ul>",
        "<span class=\"bd\">Public Nuisance</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">AG v PYA Quarries</span></span><br><span class=\"sm\">When something materially affects the comfort and convenience of a class of citizens in a particular place, and enough people are affected, then there can be liability in <span class=\"lnk caseln\">Public Nuisance</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R v Rimmington and R v Goldstien</span></span><br><span class=\"sm\">The court held there were instead 538 separate acts, rather than a <span class=\"it\">single</span> act of public nuisance affecting a large group of the public.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Dymond v Pearce</span></span><br><span class=\"sm\">To establish a cause of action in public nuisance for personal injuries, at least in relating to a nuisance on the roads, it must be established that the nuisance was in fact <span class=\"bd\">dangerous</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Tate &amp; Lyle v GLC</span></span><br><span class=\"sm\">As members of the public had been affected, in the decreased navigability of the river, and as the claimant had suffered special damage, the claim was allowed.</span></span></li></ul>",
        "<span class=\"bd\">Rylands v Fletcher</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Rylands v Fletcher</span></span><br><span class=\"sm\">Amended in the Lords by Lord Cairns, Blackburn J &mdash; &#8216;...the person who for his own purposes <span class=\"bd\">brings on his land</span> and <span class=\"bd\">collects and keeps there</span> anything likely to do mischief if it <span class=\"bd\">escapes</span> [and is non-natural use&mdash;Lord Cairns], must keep it <span class=\"bd\">in</span> at his peril, and, if he does not do so, is <span class=\"bd\">prima facie answerable</span> for all the damage which is the natural consequence of its escape.</span></span></li></ul>",
        "<span class=\"bd\">Rylands v Fletcher - Meaning of Dangerous</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Transco v Stockport</span></span><br><span class=\"sm\">The use of land must be <span class=\"it\">non-natural</span> for claims under the <span class=\"lnk caseln\">Rylands</span> rule to succeed. Running water pipes across land is hardly that, and so the claim failed.</span></span></li></ul>",
        "<span class=\"bd\">Rylands v Fletcher - Nuisance compared to Rylands - Escape</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gore v Stannard (Wyvern Tyres)</span></span><br><span class=\"sm\">If something likely to cause mischief is brought onto the land; <span class=\"bd\">and</span> it <span class=\"bd\">escapes</span>, <span class=\"bd\">and</span> it causes <span class=\"bd\">harm</span>, then there will be liability.</span></span></li></ul>",
        "<span class=\"bd\">Rylands v Fletcher - Deliberate Accumulation</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">LMS Int v Styrene</span></span><br><span class=\"sm\">For the purposes of the <span class=\"lnk caseln\">Rylands v Fletcher</span> rule, deliberately accumulating something not <span class=\"it\">per se</span> dangerous if it escapes, but could give rise to something that itself could escape &mdash; e.g., something flammable and <span class=\"it\">fire</span> &mdash; is enough to fulfil the requirement.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Ellison v MoD</span></span><br><span class=\"sm\">If what has escaped is something naturally present, or apt to be naturally present such as rainwayter, then it cannot be said to have been deliberately accumulated.</span></span></li></ul>",
        "<span class=\"bd\">Rylands v Fletcher - Non-natural use - Defences - Act of a Stranger</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Rickards v Lothian</span></span><br><span class=\"sm\">When the escape is caused by the act of a <span class=\"it\">third party</span>, the use of the land cannot be said to be <span class=\"it\">non-natural</span>.</span></span></li></ul>",
        "<span class=\"bd\">Rylands v Fletcher - Defences - Claimant&#8217;s own fault</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Ponting v Noakes</span></span><br><span class=\"sm\">When nothing escapes, and the damage is caused by the claimant&#8217;s own acts, there is no liability in <span class=\"lnk caseln\">Rylands v Fletcher</span>.</span></span></li></ul>",
        "<span class=\"bd\">Rylands v Fletcher - Defences - Act of a Stranger</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">North Western v London Guarantee</span></span><br><span class=\"sm\">If an escape is due to the actions of a third party, and the claimant knows of their actions, then there is a strong presumption against liability in <span class=\"lnk caseln\">Rylands v Fletcher</span>.</span></span></li></ul>",
        "<span class=\"bd\">Rylands v Fletcher - Defences - Act of God</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Tennent v Earl of Glasgow</span></span><br><span class=\"sm\">When an escape is down to an act of God, there will be no liability under the <span class=\"lnk caseln\">Rylands Rule</span>.</span></span></li></ul>"
    ],
    "NUMBER": "331"
},
{
    "TYPE": "Case Overviews",
    "RELATED": [
        "Case Overviews for Nuisance",
        "Case Overviews for Employers' Liability - Primary Liability",
        "Case Overviews for Negligence - Defences",
        "Case Overviews for Negligence - Causation",
        "Case Overviews for Occupiers' Liability",
        "Case Overviews for Negligence - Breach of Duty",
        "Case Overviews for Negligence",
        "Case Overviews for Pure Economic Loss",
        "Case Overviews for Product Liability",
        "Case Overviews for Psychiatric Harm",
        "Case Overviews for Negligence - Remoteness"
    ],
    "NAME": "Case Overviews for Defamation",
    "CATEGORIES": [
        "Defamation"
    ],
    "CATEGORY": "Defamation",
    "SUMMARY": [
        "<span class=\"bd\">Slander - Special Damage Exceptions in Slander</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gray v Jones</span></span><br><span class=\"sm\">There is no requirement to show <span class=\"bd\">special damage</span> when the slander is an imputation of criminal conduct punishable by (more than six months) porridge.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bloodworth v Gray</span></span><br><span class=\"sm\">Imputation of certain contagious diseases is actionable in slander without proof of special damage.</span></span></li></ul>",
        "<span class=\"bd\">Meaning of Defamatory</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Sim v Stretch</span></span><br><span class=\"sm\">Lord Atkin &mdash; the conventional requirement that the material caused the claimant <span class=\"it\">exposure to hatred, ridicule or contempt</span>, should be replaced with a less-restrictive definition, that <span class=\"bd\">defamatory</span> should mean &#8216;<span class=\"bd\">lowering the reputation of the claimant</span> in the estimation of <span class=\"bd\">&#8220;right-minded&#8221; members of society</span>.&#8217;</span></span></li></ul>",
        "<span class=\"bd\">Meaning of Defamatory - Innuendo</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Monson v Tussauds</span></span><br><span class=\"sm\">Libel can be <span class=\"it\">by innuendo</span>, and although the publication must be in a permanent form, this need not be in words.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Baturina v Times</span></span><br><span class=\"sm\">Even if an innuendo is not intended or foreseen to have a defamatory effect, it can nevertheless be actionable.  TODO, unclear.</span></span></li></ul>",
        "<span class=\"bd\">Meaning of Defamatory - No imputation of improper conduct</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Berkoff v Burchill</span></span><br><span class=\"sm\">Whether words are defamatory is a matter for the jury. By majority, To call an actor &#8216;<span class=\"it\">hideously ugly</span>&#8216; could expose him to ridicule, and so was defamatory, even if there was no imputation of bad conduct.</span></span></li></ul>",
        "<span class=\"bd\">Meaning of Defamatory - Totality of Published Material</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Charleston v New Group</span></span><br><span class=\"sm\">The &#8220;right-minded&#8221; members of society, whose estimation of a claimant in defamation must be lowered, will be taken to read <span class=\"bd\">the whole of the publication</span>, rather than just, e.g., a headline or photo that taken on its own would be defamatory.</span></span></li></ul>",
        "<span class=\"bd\">Meaning of Defamatory - Requirement of Seriousness</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Thornton v Telegraph</span></span><br><span class=\"sm\">The imputation must be <span class=\"it\">serious</span> to succeed in defamation. Merely saying that a writer followed an unconventional practice, or one subject to criticism, is not enough.</span></span></li></ul>",
        "<span class=\"bd\">Meaning of Defamatory - Requirement of Seriousness - Apology or Retraction</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Cooke v MGN</span></span><br><span class=\"sm\">The publication of an apology, so as to reach the same audience, may militate against there being <span class=\"it\">serious harm</span>.</span></span></li></ul>",
        "<span class=\"bd\">Meaning of Defamatory - Requirement of Seriousness - Defamation Act 2013</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Ames v Spamhaus Project</span></span><br><span class=\"sm\">Serious <span class=\"bd\">claims</span> do not necessarily do actual or potential serious <span class=\"bd\">harm</span> as required by S1 of the <span class=\"lnk caseln\">Defamation Act 2013</span>.</span></span></li></ul>",
        "<span class=\"bd\">Meaning of Defamatory - Public Opinion - Reference to Claimant</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Byrne v Deane</span></span><br><span class=\"sm\">The allegation complained of must tarnish the opinion of the claimant in the opinion of the <span class=\"it\">right-minded</span> member of society invoked by Lord Atkin in <span class=\"lnk caseln\">Sim v Stretch</span>.</span></span></li></ul>",
        "<span class=\"bd\">Meaning of Defamatory - Innuendo - False (popular) Innunendo</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Lewis v Daily Telegraph</span></span><br><span class=\"sm\">The <span class=\"it\">right-minded</span> person would not infer a person to be <span class=\"it\">guilty</span> from a statement that an investigation is being conducted.</span></span></li></ul>",
        "<span class=\"bd\">Meaning of Defamatory - Innuendo - True (legal) Innunendo</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Cassidy v Daily Mirror</span></span><br><span class=\"sm\">Material that superficially has no defamatory import <span class=\"bd\">can</span> be defamatory, if the material would be cast in a different light to a certain class of people who have extra information.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Trolley v Fry</span></span><br><span class=\"sm\">An inference about someone&#8217;s conduct available <span class=\"it\">only to those known personally to him</span> could indee be drawn from an innocuous publication such as an advertisement, and as such,following <span class=\"lnk caseln\">Cassidy v Daily Mirror</span>, it could be defamatory.</span></span></li></ul>",
        "<span class=\"bd\">Reference to Claimant - Accidental Defamation</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hulton v Jones</span></span><br><span class=\"sm\">A reasonable reader would think, on reading a publication naming a person and purporting to be factual, that the person had done what was said.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Newstead v Express</span></span><br><span class=\"sm\">A publication which is <span class=\"bd\">accidentlly</span> defamatory is nevertheless actionable. What is to be considered is <span class=\"it\">what a fair-minded reader would think</span>.</span></span></li></ul>",
        "<span class=\"bd\">Reference to Claimant</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Morgan v Odhams Press</span></span><br><span class=\"sm\">The test for whether a publication refers to a claimant is whether the ordinary, sensible reader would understand the words as referring to the claimant, <span class=\"it\">in light of any facts known to him</span>.</span></span></li></ul>",
        "<span class=\"bd\">Reference to Claimant - Art. 10 in Defamation</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">O&#8217;Shea v MGN</span></span><br><span class=\"sm\">When the publication is a photo, then the rule of <span class=\"lnk caseln\">Newstead v Express</span> and <span class=\"lnk caseln\">Morgan v Odhams Press</span>, in which there was liability for innocent defamation, cannot apply. If it were to, that would amount to an infringement of ECHR Art. 10(2).</span></span></li></ul>",
        "<span class=\"bd\">Reference to Claimant - Group Defamation</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Knupffer v London Express</span></span><br><span class=\"sm\">If a reasonabe person could interpret a statement about a <span class=\"bd\">group</span> as <span class=\"bd\">applying to each member</span> of it, then the requirement of reference to <span class=\"it\">individual</span> members of the group would be satisfied.</span></span></li></ul>",
        "<span class=\"bd\">Publication</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Huth v Huth</span></span><br><span class=\"sm\">Communication from a man to his wife is <span class=\"it\">not</span> publication. When there is no intention for a defamatory statement to be published, and when it has only been seen by another through their immoral actions (here, an over-curious butler reading a private note), then there is no liability in defamation.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Theaker v Richardson</span></span><br><span class=\"sm\">Sending a defamatory letter purporting to be private, but demonstrating a reasonable expectation that it might be opened and seen by others, means the letter has been published.</span></span></li></ul>",
        "<span class=\"bd\">Publication - Websites - Defences - Innocent Dissemination</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Godfrey v Demon</span></span><br><span class=\"sm\">Although hosting of publicly-available information is publishing at common law, the host of a forum or blog is not a commercial publisher for the purposes of the <span class=\"lnk caseln\">Defamation Act 1996</span> S1(2). Nevertheless, once notified, such a host must take steps swiftly to remove the objectionable content.</span></span></li></ul>",
        "<span class=\"bd\">Publication - Websites</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bunt v Tilley</span></span><br><span class=\"sm\">An ISP merely facilitating forum posts is not a publisher at common law <span class=\"bd\">unless</span> they are knowingly involved &mdash; and they become knowingly involved once they are alerted to the content and refuse to remove it.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Tamiz v Google</span></span><br><span class=\"sm\">The host of a blog who does not remove defamatory material a <span class=\"bd\">reasonable time</span> after notification might be inferred to have <span class=\"bd\">associated themselves with</span>, or become responsible for, the presence of the material. Thereby they would become its <span class=\"bd\">publisher</span>.</span></span></li></ul>",
        "<span class=\"bd\">Multiple Publication</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Loutchansky v The Times (no 2)</span></span><br><span class=\"sm\">Each time an article is viewed, for the purposes of defamation at common law, there has been a fresh publication leading to a fresh cause of action.</span></span></li></ul>",
        "<span class=\"bd\">Multiple Publication - Art. 10 in Defamation</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">The Times v UK</span></span><br><span class=\"sm\">The lack of a single-publication rule was perhaps a breach of a newspaper&#8217;s article 10 rights, but a justified one; and courses of action for multiple publication could in any case be avoided by publishers of internet archives simply by attaching a note to the contentious material.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Substantial Truth - Sting of Allegation - Remedies - Derisory Damages - Bribery</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Grobbelaar v News Group</span></span><br><span class=\"sm\">Defamation exists to protect those whose reputations have been trashed <span class=\"bd\">unjustly</span>, <span class=\"bd\">by others</span>. Not to protect those who trash their reputations by themselves and are merely <span class=\"bd\">exposed</span> by others, who publish the (substantial) truth.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Opinion or Truth</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Telnikoff v Matusevich</span></span><br><span class=\"sm\">A letter written in reaction to an article is to be considered a separate publication, and is not to be considered in the context of the article to which it relates; the fair-minded member of the public may well read the letter, but not have read the article.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">British Chiropractic Association v Singh</span></span><br><span class=\"sm\">Calling someone out for making a claim (on which it might happen to rely for business, for instance), but for which it has no proof, cannot give liability in defamation. To do so is not to assert a fact, but rather an opinion as to the veracity of the claims.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Waterson v Lloyd</span></span><br><span class=\"sm\">Calling something <span class=\"it\">&#8216;scandalous&#8217;</span> is an assertion of opinion, not fact.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Spiller v Joseph</span></span><br><span class=\"sm\">Opinion <span class=\"bd\">not</span> published with the facts on which the opinion is based <span class=\"bd\">may not rely on the honest opinion</span> as a defence.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Art. 6 in Defamation - Absolute Privilege</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">A v UK</span></span><br><span class=\"sm\">The exercise of absolute privilege in Parliament does not impose a <span class=\"it\">disproportionate</span> restriction on a person&#8217;s access to justice, where the privileged statement was of a defamatory character.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Qualified Privilege - Reynolds Test</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Reynolds v Times Newspapers</span></span><br><span class=\"sm\">Where there was a duty to publish an allegation <span class=\"it\">even if it turned out to be wrong</span>, there could be a defence of qualified privilege, although that would be fact-specific.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Qualified Privilege</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Watt v Longsdon</span></span><br><span class=\"sm\">Qualified privilege is a defence only where there is a duty to the recipient of the communication. The defendant <span class=\"it\">did</span> have qualified privilege to show the letter to the business partner... but <span class=\"it\">not</span> to the wife.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bryanston v De Vries (no 1)</span></span><br><span class=\"sm\">The communication between a employees in companies is covered by qualified privilege, e.g., HR departments and managers, bosses and secretaries, etc.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Qualified Privilege - Art. 8 in Defamation</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Clift v Slough</span></span><br><span class=\"sm\">There had been no duty to communicate a list of violent people to anyone other than those who might come into contact with them.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Qualified Privilege - Malice</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Horrocks v Lowe</span></span><br><span class=\"sm\">When a statement is unreasonably but honestly believed to be true, and no malice can be shown, the defence of qualified privilege can operate.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Public Interest - Bribery</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Flood v The Times</span></span><br><span class=\"sm\">The <span class=\"lnk caseln\">Reynolds Defence</span> will only succeed if reasonable steps have been taken to verify the allegations before publication.</span></span></li></ul>",
        "<span class=\"bd\">Defences - Offer of Amends</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Flood v The Times</span></span><br><span class=\"sm\">The <span class=\"lnk caseln\">Reynolds Defence</span> will only succeed if reasonable steps have been taken to verify the allegations before publication.</span></span></li></ul>",
        "<span class=\"bd\">Remedies - Damages - Art. 6 in Defamation</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Steel and Morris v UK</span></span><br><span class=\"sm\">When one party spends millions and the other party, for lack of legal aid, spends a few paltry thousands, then there may have been an <span class=\"it\">unacceptable inequality of arms</span>, which would breach ECHR Art. 6.</span></span></li></ul>",
        "<span class=\"bd\">Remedies - Damages</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">John v MGN</span></span><br><span class=\"sm\">The jury had not been adequately guided, and had awarded too much.</span></span></li></ul>"
    ],
    "NUMBER": "332"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Joyce v O'Brien",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) W v Essex County Council and Another",
        "(wl) Haseldine v Daw",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Orchard v Lee",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Barber v Somerset County Council",
        "(wl) Patchett v Swimming Pool Trades Association"
    ],
    "NAME": "(wl) Dorset Yacht Co Ltd v Home Office",
    "JUDGE": "Lord Reid; Lord Morris of Borth-y-Gest; Lord Pearson; Lord Diplock; Viscount Dilhorne",
    "CIT": "[1970] AC 1004",
    "HELD": [
        "(1) that the question of law had been rightly answered in the affirmative; and (2) that public policy did not require an immunity from such an action. (Donoghue v Stevenson [1932] A.C. 562 applied; Bourhill v Young [1943] A.C. 92 considered, Carmarthenshire CC v Lewis [1955] C.L.Y. 1904 considered, Commissioner for Railways v Quinlan [1964] A.C. 1054 considered, Davis Contractors v Fareham Urban DC [1956] A.C. 696 considered, Hedley Byrne &amp; Co Ltd v Heller &amp; Partners Ltd [1964] A.C. 465 considered, Overseas Tankship (UK) Ltd v Morts Dock &amp; Engineering Co (The Wagon Mound) [1961] A.C. 388 considered and Rylands v Fletcher (1868) L.R. 3 H.L. 330 considered)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1970",
    "CATEGORIES": [
        "Torts",
        "Borstals",
        "Dangerous Escape",
        "Duty of Care",
        "Vandalism"
    ],
    "CATEGORY": "Torts &mdash; Borstals &mdash; Dangerous Escape &mdash; Duty of Care &mdash; Vandalism",
    "SUMMARY": [
        "Duty of Care; damage caused by persons escaping from Borstal",
        "Borstal officers owe a duty to take such care as is reasonable in all the circumstances with a view to preventing the boys under their control from causing damage to private property. Seven Borstal boys caused damage to the plaintiffs&#8217; yacht for which an action was brought against the Home Office. On the preliminary issue whether the Home Office owed any duty of care, Thesiger, J. held in the affirmative and the Court of Appeal dismissed an appeal from his decision."
    ],
    "COURT": "UKHL",
    "CITATION": "Dorset Yacht Co Ltd v Home Office [1970] AC 1004",
    "NUMBER": "333"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) W v Essex County Council and Another",
        "(wl) Walker v Northumberland County Council",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) Kent v Griffiths",
        "(wl) JD v East Berkshire Community Health NHS Trust",
        "(wl) Orchard v Lee",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Hussain v Lancaster CC",
        "(wl) Moore Stephens v Stone Rolls Ltd",
        "(wl) Van Colle v Chief Constable of Hertfordshire"
    ],
    "NAME": "(wl) Anns v Merton London Borough Council",
    "JUDGE": "Lord Wilberforce; Lord Diplock; Lord Salmon; Lord Russell of Killowen",
    "CIT": "[1978] AC 728",
    "HELD": [
        "that (1) under the Public Health Act 1936 the council had a power, as opposed to a duty, to inspect building work to ensure compliance with the by-laws; (2) failure to carry out inspections would not render the council liable unless it be proved both that they had failed to properly exercise their discretion not to make inspection and that they failed to exercise reasonable care to ensure compliance with the by-laws; (3) where such inspections were carried out the council retained a discretion as to the manner in which such inspections were performed: if such discretion was not bona fide exercised, the council might be liable in negligence for failure to take reasonable care; (4) the actions were not statute-barred, the cause of actions having arisen when the dangerous state of the building manifested itself. ( Home Office v Dorset Yacht Co Ltd [1970] A.C. 1004 and Sparham-Souter v Town &amp; Country Developments (Essex) Ltd [1976] Q.B. 858 applied; East Suffolk Rivers Catchment Board v Kent [1941] A.C. 74 considered; Dutton v Bognor Regis Building Co Ltd [1972] 1 Q.B. 373 explained)."
    ],
    "FLAGS": [
        "Overruled"
    ],
    "YEAR": "1978",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Local Government",
        "Building Inspectors",
        "Duty of Care",
        "Local Authorities' Powers and Duties"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Local Government &mdash; Building Inspectors &mdash; Duty of Care &mdash; Local Authorities' Powers and Duties",
    "SUMMARY": [
        "Duty of care; local authority",
        "A local authority may be liable in negligence for its failure to inspect building foundations properly or at all if it be shown that the action taken was carried out otherwise than in the bona fide exercise of its discretion and negligently. In 1962 the appellant local council approved building plans for a block of flats, the construction of which was completed that year. In 1970 structural movements led to walls cracking and other damage; in 1972 the lessees commenced proceedings against, inter alia, the council, alleging negligence in failing to inspect the building walls properly or at all so as to ensure that the foundations were built to the appropriate depth as shown on the approved plans. Upon hearing the council&#8217;s appeal concerning whether the actions were statute-barred, the House of Lords agreed further to consider whether the council were under a duty of care."
    ],
    "COURT": "UKHL",
    "CITATION": "Anns v Merton London Borough Council [1978] AC 728",
    "NUMBER": "334"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) James McNaughton Paper Group Ltd v Hicks Anderson & Co",
        "(wl) Moore Stephens v Stone Rolls Ltd",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Kent v Griffiths",
        "(wl) W v Essex County Council and Another",
        "(wl) Jobling v Associated Dairies",
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) British Celanese Ltd v AH Hunt (Capacitors) Ltd"
    ],
    "NAME": "(wl) Caparo Industries Plc v Dickman",
    "JUDGE": "Lord Jauncey of Tullichettle; Lord Oliver of Aylmerton; Lord Roskill; Lord Ackner; Lord Bridge of Harwich",
    "CIT": "[1990] 2 AC 605",
    "HELD": [
        "allowing the appeal, that no duty was owed either to existing shareholders, or to potential investors, since for a duty to arise, three factors had to exist, namely: (1) a sufficient degree of proximity in the relationship between the parties; (2) the knowledge that the report would be communicated to the shareholder or investor in connection with a particular transaction in the contemplation of the parties, Smith v Eric S Bush (A Firm) [1990] 1 A.C. 831 applied, and (3) the shareholder or investor would place reliance on the report when deciding whether to enter into the relevant transaction. Auditors of a public company routinely preparing accounts, in contrast to the preparation of a report for a specific purpose for an identified party, owed no duty to the public at large who might place reliance on company accounts when making investment decisions. To impose such a liability would open the floodgates to an indeterminately wide class of people, JEB Fasteners Ltd v Marks Bloom &amp; Co [1981] 3 All E.R. 289 distinguished. Furthermore, it was necessary to impose some limit on liability for economic loss arising in the absence of a contractual relationship between the parties."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For C: Christopher Bathurst Q.C., Michael Brindle and Craig Orr. For TR: Peter Goldsmith Q.C. and Stephen Moriarty.",
    "CATEGORIES": [
        "Negligence",
        "Auditors",
        "Duty of Care",
        "Economic Loss",
        "Professional Negligence",
        "Shareholders"
    ],
    "CATEGORY": "Negligence &mdash; Auditors &mdash; Duty of Care &mdash; Economic Loss &mdash; Professional Negligence &mdash; Shareholders",
    "SUMMARY": [
        "Professional negligence; Auditors&#8217; report to shareholders; No duty of care owed to shareholders or investors",
        "TR, a firm of accountants, appealed against a decision of the Court of Appeal (Times, August 5, 1988) that they owed a duty of care to shareholders when preparing an auditor&#8217;s report as required by statute. C had brought an action against D and another, directors of F, a public company in respect of which the report had been prepared, alleging negligent misstatement. C had purchased shares in F as part of a take over bid and, placing reliance on TR&#8217;s report, had bought further shares. The report was subsequently proved to have to given a false picture of F&#8217;s profits and C suffered a loss. The Court of Appeal had drawn a distinction between existing shareholders, to whom TR owed a duty and potential investors in respect of whom no duty was owed. TR submitted that it did not owe a duty to either group, since the necessary degree of proximity between the parties was missing."
    ],
    "COURT": "UKHL",
    "CITATION": "Caparo Industries Plc v Dickman [1990] 2 AC 605",
    "NUMBER": "335",
    "YEAR": "1990"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Lennon v Commissioner of Police of the Metropolis",
        "(wl) Mohamud v WM Morrison Supermarkets Plc",
        "(wl) Bernard v Attorney General of Jamaica",
        "(wl) Allen v Chief Constable of Hampshire",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Van Colle v Chief Constable of Hertfordshire",
        "(wl) Biffa Waste Services Ltd v Maschinenfabrik Ernst Hese GmbH",
        "(wl) Donoghue v Folkstone Properties"
    ],
    "NAME": "(wl) Attorney General of the British Virgin Islands v Hartwell",
    "JUDGE": "Lord Nicholls of Birkenhead; Lord Hope of Craighead; Lord Walker of Gestingthorpe; Baroness Hale of Richmond; Lord Brown of Eaton-under-Heywood",
    "CIT": "[2004] UKPC 12",
    "HELD": [
        "dismissing the appeal, that (1) the Government was not vicariously liable for L&#8217;s actions. L was &#8220;on a frolic of his own&#8221; having deliberately and consciously abandoned his post and his duties. L&#8217;s wrongful use of the gun was not so closely connected with acts he was authorised to do that, for the purposes of the liability of the Government as his employer, his wrongful use could be regarded as made by him in the ordinary course of his employment; (2) the police authorities had been negligent in permitting L to have access to a revolver. The police authorities knew or ought to have known that L was not a fit and proper person to be entrusted with a gun because, until his domestic problems were resolved, he was volatile and unstable. L&#8217;s deliberate, wrongful conduct did not constitute an intervening event so as to relieve the Government of liability. The case was not one of omission because the alleged duty of care related to entrusting L with access to the gun. The standard of diligence expected of a reasonable person when entrusting another with a gun was high. The police plainly owed a duty to the public at large to take reasonable care to see that police officers to whom they entrusted weapons were suitable. The wide reach of the duty was proportionate to the gravity of the risks. It was reasonably foreseeable that someone like L might take and use the weapon for his own purposes. The police owed a duty of care to H in respect of damage arising in the way it did. Given L&#8217;s previous history the police authorities had failed to exercise the degree of care the situation demanded and were in breach of their duty to H."
    ],
    "FLAGS": [
        "Approved",
        "Hale"
    ],
    "COUNSEL": "For the appellant: James Guthrie QC. For the respondent: James Dingemans QC, Sarah Crowther.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Police",
        "Assault",
        "Duty of Care",
        "Firearms",
        "Police Authorities",
        "Police Officers",
        "Vicarious Liability",
        "Wilful Misconduct"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Police &mdash; Assault &mdash; Duty of Care &mdash; Firearms &mdash; Police Authorities &mdash; Police Officers &mdash; Vicarious Liability &mdash; Wilful Misconduct",
    "SUMMARY": [
        "When entrusting an officer with a gun, police authorities owed the public a duty to take reasonable care to see that the officer was a suitable person to be entrusted with a dangerous weapon; no distinction was to be drawn between personal injuries inflicted in the course of police duties and personal injuries inflicted by an officer using a police gun for his own ends.",
        "The Attorney General of the British Virgin Islands, BVI, appealed against a decision that the BVI Government was liable in damages to a British tourist, H, who had been shot and wounded by a policeman, L. L had abandoned his post and had travelled to another island where his former partner worked in a bar as a waitress. At the bar L opened fire with a police service revolver and H was seriously injured. L pleaded guilty to charges of unlawful and malicious wounding and having a firearm with intent to do grievous bodily harm. H brought civil proceedings against L and the Attorney General as the representative of the BVI Government. The Attorney General submitted that the Government owed no duty of care to H in respect of the persons to whom the police entrusted firearms as there was no sufficiently proximate relationship between the police authorities and H."
    ],
    "COURT": "UKPC",
    "CITATION": "Attorney General of the British Virgin Islands v Hartwell [2004] UKPC 12",
    "NUMBER": "336",
    "YEAR": "2004"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) White v Chief Constable of South Yorkshire",
        "(wl) Gray v Thames Trains",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Joyce v O'Brien",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Thompson v Smiths Shiprepairers (North Shields) Ltd",
        "(wl) Lister v Hesley Hall",
        "(wl) Bernard v Attorney General of Jamaica"
    ],
    "NAME": "(wl) Osman v Ferguson",
    "CIT": "[1993] 4 All ER 344",
    "HELD": [
        "Public policy would not allow a negligence action to be brought against the police for failing to stop a teacher killing a pupil&#8217;s father and injuring the pupil."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the police: Simon Freeland. For O: John Hendy Q.C. and Tim Kerr.",
    "JUDGE": "McCowan LJ; Beldam LJ; Simon Brown LJ",
    "NUMBER": "337",
    "CATEGORIES": [
        "Negligence",
        "Crime Prevention",
        "Negligence",
        "Police Officers",
        "Public Policy"
    ],
    "CATEGORY": "Negligence &mdash; Crime Prevention &mdash; Negligence &mdash; Police Officers &mdash; Public Policy",
    "CITATION": "Osman v Ferguson [1993] 4 All ER 344",
    "COURT": "EWCA",
    "YEAR": "1993"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Harvey v Plymouth City Council",
        "(wl) Barber v Somerset County Council",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Orchard v Lee",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Patchett v Swimming Pool Trades Association",
        "(wl) Butcher v Southend-on-Sea BC",
        "(wl) Mullin v Richards",
        "(wl) Tomlinson v Congleton BC",
        "(wl) Selwood v Durham CC"
    ],
    "NAME": "(wl) Everett v Comojo Ltd UK",
    "JUDGE": "Rix LJ; Smith LJ; Richards LJ",
    "CIT": "[2011] EWCA Civ 13",
    "HELD": [
        "Appeal dismissed.",
        "(1) The test for the existence of a duty of care was the threefold test of proximity, foreseeability and whether it was fair, just and reasonable to impose a duty, Caparo Industries Plc v Dickman [1990] 2 A.C. 605 and Van Colle v Chief Constable of Hertfordshire [2008] UKHL 50, [2009] 1 A.C. 225 followed (see para. 24 of judgment). (2) The relationship between the management of a nightclub and its guests was of sufficient proximity to justify the existence of a duty of care. It was foreseeable that there was some risk that one guest might assault another; that was recognised by C&#8217;s own risk assessment. It was fair, just and reasonable to impose a duty of care on the management of a nightclub in respect of injuries caused by a third party, provided that the scope of the duty was appropriately set (paras 31-33). (3) Thus there was a duty on the management of a nightclub in respect of the actions of third parties on the premises but the standard of care imposed or the scope of the duty had also to be fair, just and reasonable. As between the managers of a nightclub and guests, there should not be a higher degree of foreseeability than was required under the common duty of care in the Occupiers&#8217; Liability Act 1957, Home Office v Dorset Yacht Co Ltd [1970] A.C. 1004 considered. The degree of proximity, including the economic relationship, between the two was so close that no special rule of foreseeability was required in the interests of fairness, justice and reasonableness. The judge did not misdirect himself when he adopted the Australian case of Chordas v Bryant (Wellington) (1988) 91 A.L.R. 149 as the basis of the duty, Chordas considered (paras 34, 35). (4) In all the circumstances, K had not been in breach of duty. She had realised that there was a possibility of a confrontation between G and one or more of the members of E&#8217;s group. But there was no reason to think that a confrontation was imminent. The incident to which B had taken exception had occurred a considerable time earlier. B had no previous history of causing trouble, either himself or through his associates. K could not have been criticised even if she had done nothing. As it was, she went to speak to her manager. That was a reasonable thing for her to do. There was no apparent urgency; it was not as if a confrontation had begun and the risk of violence was imminent (para.37)."
    ],
    "ABSTRACT": [
        "The appellants (E) appealed against a decision dismissing their claims for damages for personal injury arising from an incident at a nightclub owned and managed by the respondent company (C) when they were injured in a knife attack perpetrated by another guest (G).",
        "The nightclub was part of a hotel. Use of the nightclub was restricted to members and their guests and hotel residents. E were guests at the nightclub. It was said that one of the group they were with touched a waitress (K) on the bottom. She did not complain but the incident was witnessed by a member (B) who was aggrieved on her behalf. He told her, more than once, that those responsible would apologise to her before the end of the evening. B was later joined at the nightclub by G. K was concerned that there might be a confrontation and went to speak to the manager. At that time E decided to leave the nightclub. B asked for an apology which was not forthcoming. G then attacked E and stabbed them with a knife. The judge held that C could owe a duty to protect its guests from the actions of a third party, on the basis that there might be such a degree of proximity between the parties that a legal duty would arise. However, he held that no duty of care arose in the circumstances because, at the time when K left the bar to speak to the manager, there was not a sufficiently great risk of injury; she was not under a duty to do anything about G at that stage. If she had done nothing, she could not have been criticised. All she had was a suspicion that that there might be some sort of confrontation. But it was not known that G had a weapon and there had been no history of B or his associates being violent.",
        "E submitted that in the circumstances the judge should have concluded that there was a duty of care and that there had been a breach. C contended that there should be no duty on the managers of a bar to protect guests from violence by other guests and, if there was any duty at all, it should be drawn very restrictively."
    ],
    "COUNSEL": "For the appellant: Simon Butler, Johnathan Payne. For the respondent: Lord Faulks QC, Quintin Tudor-Evans.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Hospitality and Leisure",
        "Personal Injury",
        "Breach of Duty of Care",
        "Duty of Care",
        "Foreseeability",
        "Knives",
        "Nightclubs",
        "Occupiers' Liability",
        "Personal Injury",
        "Proximity",
        "Wounding with Intent"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Hospitality and Leisure &mdash; Personal Injury &mdash; Breach of Duty of Care &mdash; Duty of Care &mdash; Foreseeability &mdash; Knives &mdash; Nightclubs &mdash; Occupiers' Liability &mdash; Personal Injury &mdash; Proximity &mdash; Wounding with Intent",
    "SUMMARY": [
        "There was a duty of care on the management of a nightclub in respect of the actions of third parties on the premises but the standard of care imposed or the scope of the duty had to be fair, just and reasonable. As between the managers of a nightclub and guests, there should not be a higher degree of foreseeability than was required under the common duty of care in the Occupiers&#8217; Liability Act 1957."
    ],
    "COURT": "EWCA",
    "CITATION": "Everett v Comojo Ltd UK [2011] EWCA Civ 13",
    "NUMBER": "338",
    "YEAR": "2011"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Barber v Somerset County Council",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Hughes v Lord Advocate",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Haseldine v Daw",
        "(wl) Orchard v Lee",
        "(wl) Jolley v Sutton LBC",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Smith v Leech Brain and Co Ltd"
    ],
    "NAME": "(wl) Kent v Griffiths",
    "JUDGE": "Lord Woolf MR; Aldous LJ; Laws LJ",
    "CIT": "[2001] QB 36",
    "HELD": [
        "dismissing the appeal, that an ambulance service could owe a duty of care to an individual member of the public, once an emergency phone call providing the personal details of that person had been accepted by the service and LAS was liable in damages to K. The situation with LAS could be distinguished from that of the police force and fire service, since they served to protect the general public, whereas the service provided by LAS, as part of the health service, was more akin to that which was provided by hospitals to individual patients, Alexandrou v Oxford [1993] 4 All E.R. 328 and Capital and Counties Plc v Hampshire CC [1997] Q.B. 1004 distinguished. In the instant case, only K&#8217;s welfare was at issue and there was no conflict of priorities, therefore the requirement of foreseeability necessary to establish sufficient proximity was made out."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For K: Elizabeth-Anne Gumbel Q.C. For LAS: James Munby Q.C. and Mary O&#8217;Rourke.",
    "CATEGORIES": [
        "Negligence",
        "Ambulance Service",
        "Delay",
        "Duty of Care",
        "Foreseeability"
    ],
    "CATEGORY": "Negligence &mdash; Ambulance Service &mdash; Delay &mdash; Duty of Care &mdash; Foreseeability",
    "SUMMARY": [
        "duty of care; ambulance service; duty owed to individual members of public; analogous to service provided by hospitals; reasonable response to emergency call required",
        "K, pregnant and asthmatic, was attended by her GP, who at 4.27 pm dialled 999 and requested an ambulance to take K to hospital, giving her personal details and informing them that she suffered from bronchial asthma. The ambulance took 38 minutes to arrive, although a crew member had falsely recorded the arrival time. K suffered a respiratory arrest with catastrophic results, including substantial memory impairment, personality change and a miscarriage. K brought an action, inter alia, against the London Ambulance Service, LAS, alleging negligence in failing to respond promptly and in failing to give her oxygen continuously in the ambulance. LAS was found liable in damages, since in the particular circumstances they owed a duty of care to K as an individual patient. The judge held that there was no reasonable excuse for the delay and, because it was a highly probable that K would not have suffered a respiratory arrest but for the delay, LAS was culpable. LAS appealed contending that its situation was analogous to that of the police and fire brigade, who owed no common law duty of care to the public at large."
    ],
    "COURT": "EWCA",
    "CITATION": "Kent v Griffiths [2001] QB 36",
    "NUMBER": "339",
    "YEAR": "2001"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Lawrence v Pembrokeshire County Council",
        "(wl) Worsley v Tambrands",
        "(wl) A v United Kingdom",
        "(wl) Steel and Morris v UK",
        "(wl) Dobson v Thames Water Utilities",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Osman v United Kingdom",
        "(wl) Marcic v Thames Water Utilities Ltd",
        "(wl) Cook v Lewis",
        "(wl) Barnett v Chelsea & Kensington Hospital Management Committee",
        "(wl) Waterson v Lloyd"
    ],
    "NAME": "(wl) Vowles v Evans & the Welsh RFU",
    "JUDGE": "Simon Brown LJ; Sedley LJ; Arden LJ",
    "CIT": "[2003] EWCA Civ 31",
    "HELD": [
        "dismissing the appeal, that the removal of K to Sri Lanka was not an interference with his family life with relatives in Germany. Although it was not essential that members of the family should be in the same country, it would only be in exceptional circumstances that a family life could be established with relatives outside the United Kingdom. There was no presumption to family life and something more than normal emotional ties, such as dependency, were required to establish a family life under Art.8."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For K: Manjit S Gill Q.C. and Myles Jackson. For the Secretary of State: Robin Tam.",
    "CATEGORIES": [
        "Immigration",
        "Asylum Seekers",
        "Germany",
        "Parents",
        "Removal",
        "Right to Respect For Private and Family Life",
        "Sri Lanka"
    ],
    "CATEGORY": "Immigration &mdash; Asylum Seekers &mdash; Germany &mdash; Parents &mdash; Removal &mdash; Right to Respect For Private and Family Life &mdash; Sri Lanka",
    "SUMMARY": [
        "Removal of the appellant to Sri Lanka did not amount to an interference with his family life with relatives in Germany; something more than normal emotional ties was required to invoke the protection of the Human Rights Act Sch.1 Part I Art.8 and it would only be in exceptional circumstances that a family life could be established with relatives outside of the UK.",
        "K, a Sri Lankan asylum seeker, appealed against a decision of the Immigration Appeal Tribunal to overset an adjudicator&#8217;s decision not to remove him from the United Kingdom as to do so would have disproportionately interfered with his right to respect for family life under the Human Rights Act 1998 Sch. 1 Part I Art.8. K was a single 38 year old man, with no remaining family members in Sri Lanka and no established family in the United Kingdom. Members of K&#8217;s immediate family had been granted asylum in Germany with whom he had enjoyed &#8220;family life&#8221; by telephone contact or visits from his sister."
    ],
    "COURT": "EWCA",
    "CITATION": "Vowles v Evans &amp; the Welsh RFU [2003] EWCA Civ 31",
    "NUMBER": "340",
    "YEAR": "2003"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Kent v Griffiths",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Haseldine v Daw",
        "(wl) James McNaughton Paper Group Ltd v Hicks Anderson & Co",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) W v Essex County Council and Another",
        "(wl) Rabone v Pennine Care NHS Trust"
    ],
    "NAME": "(wl) Hill v Chief Constable of West Yorkshire",
    "JUDGE": "Lord Keith of Kinkel; Lord Brandon of Oakbrook; Lord Templeman; Lord Oliver; Lord Goff of Chieveley",
    "CIT": "[1989] AC 53",
    "HELD": [
        "dismissing the appeal, that there is no general duty of care owed by the police to members of the public at large to apprehend an unknown criminal. In any event, as a matter of public policy, the police were immune from allegations of negligence arising from their investigation and suppression of crime."
    ],
    "FLAGS": [
        "Criticised"
    ],
    "YEAR": "1989",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Negligence",
        "Police Powers and Duties"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Negligence &mdash; Police Powers and Duties",
    "SUMMARY": [
        "Duty of care; police; duty to suppress crime; whether liable for failure to apprehend criminal",
        "Police officers do not owe a general duty of care to the public at large to apprehend unknown criminals, nor to individual members of the public unless such failure creates an exceptional additional risk and there is a proximity between the officers and the potential victim. H was the mother of the last of the victims of Peter Sutcliffe, who murdered some 13 young women in Yorkshire between 1975 and 1980. She contended that but for negligence by the West Yorkshire police, he would have been apprehended before her daughter had been murdered. H&#8217;s claim was struck out."
    ],
    "COURT": "UKHL",
    "CITATION": "Hill v Chief Constable of West Yorkshire [1989] AC 53",
    "NUMBER": "341"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) JD v East Berkshire Community Health NHS Trust",
        "(wl) Barber v Somerset County Council",
        "(wl) Lawrence v Pembrokeshire County Council",
        "(wl) Tomlinson v Congleton BC",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Orchard v Lee",
        "(wl) Harvey v Plymouth City Council",
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) Chester v Afshar",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Vellino v Chief Constable of Greater Manchester"
    ],
    "NAME": "(wl) Selwood v Durham CC",
    "JUDGE": "Thorpe LJ; Rimer LJ; Dame Janet Smith",
    "CIT": "[2012] EWCA Civ 979",
    "HELD": [
        "Appeal allowed.",
        "(1) The case of Caparo Industries Plc v Dickman [1990] 2 A.C. 605 had set out a tripartite test for the imposition of a duty of care toward a claimant for the actions of a third party. The test was that of foreseeability, proximity and fairness, justice and reasonableness, Caparo followed. It was not necessary for a claimant to show that the defendant had assumed any responsibility for some aspect of his or her safety. If the judge thought that assumption of responsibility was a pre-requisite for the existence of a duty of care that would have been an error of law. It was just one aspect of the wider issue of whether it was fair, just and reasonable to impose the duty of care. However, the judge had not fallen into that error (see paras 50-51 of judgment). (2) The judge appeared to have thought that before an assumption of responsibility could arise, something positive to that effect had to have been said or done which clearly indicated such assumption. However, it was possible to infer an assumption of responsibility from circumstances, Mitchell v Glasgow City Council [2009] UKHL 11, [2009] 1 A.C. 874 followed and Silva&#8217;s Fishing Corp v Maweza 1957 (2) S.A. 256 considered. The judge had failed to consider whether an assumption of responsibility could be inferred from the protocol or working arrangements between the respondents. The judge had therefore erred in that respect (para.52). (3) Factors relating to foreseeability of harm and proximity of the relationship often also impinged on the question of fairness, justice and reasonableness. Where the defendant was a public authority, there would be important additional factors of public policy to be considered, Van Colle v Chief Constable of Hertfordshire [2008] UKHL 50, [2009] 1 A.C. 225 considered. Nevertheless, there might be some classes of claimant who stood in such a special relationship with the defendant public authority that it would be fair, just and reasonable to impose a duty of care. A defendant would owe the employer&#8217;s duty of care to its employees despite there being a potential conflict of interest between that duty and the defendant&#8217;s duties to the recipients of its core services. If a duty was owed to a limited class of employees for the action of a third party, the force of some of the policy considerations was less than if the duty was said to be owed to the world at large. The judge had failed to consider S&#8217;s special position. Taking the particular relationship between the parties into account, it would be open to a trial judge to conclude that it was fair, just and reasonable to impose a duty of care on R2 and R3 (paras 53-56). (4) It was also arguable that the respondents might have breached S&#8217;s rights under the European Convention on Human Rights art.2. The case was remitted for trial on both issues (paras 57-58)."
    ],
    "ABSTRACT": [
        "The appellant (S) appealed against a decision ([2011] Med. L.R. 213) striking out her claim for personal injury against the second and third respondents.",
        "S worked as a social worker for the local authority (R1), which worked closely with closely with two NHS trusts (R2 and R3) to provide integrated social care and mental health services. The respondents had signed a protocol document setting out the working arrangements between them. One of S&#8217;s cases concerned a young girl. The girl&#8217;s father (X) suffered from mental health problems and was a voluntary patient of R2 and R3. He was known to have a history of violent behaviour. He told medical professionals that he wished to harm the social worker involved in his daughter&#8217;s case. He later told medical staff he would &#8220;kill her on the spot&#8221; if he saw her. That threat was not passed to S or to R1. X left hospital and attacked S with a knife, causing grave injuries. He later pleaded guilty to attempted murder. S&#8217;s claim against R2 and R3 was struck out on the basis that they did not owe her a duty of care in respect of the action of a third party."
    ],
    "COUNSEL": "For the appellant: Michael Kent QC, Mark Armitage. For the respondents: Angus Moon QC, James Berry.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Personal Injury",
        "Local Government",
        "Health",
        "Assumption of Responsibility",
        "Duty of Care",
        "Duty to Warn",
        "Local Authorities",
        "Mental Patients",
        "Nhs Trusts",
        "Personal Injury",
        "Public Sector Employees",
        "Right to Life",
        "Social Workers",
        "Third Parties"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Personal Injury &mdash; Local Government &mdash; Health &mdash; Assumption of Responsibility &mdash; Duty of Care &mdash; Duty to Warn &mdash; Local Authorities &mdash; Mental Patients &mdash; Nhs Trusts &mdash; Personal Injury &mdash; Public Sector Employees &mdash; Right to Life &mdash; Social Workers &mdash; Third Parties",
    "SUMMARY": [
        "It was arguable that an NHS trust working closely with a local authority to provide integrated services could owe a duty of care to an employee of the local authority in respect of the action of a third party."
    ],
    "COURT": "EWCA",
    "CITATION": "Selwood v Durham CC [2012] EWCA Civ 979",
    "NUMBER": "342",
    "YEAR": "2012"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) A v United Kingdom",
        "(wl) Vowles v Evans & the Welsh RFU",
        "(wl) Various Claimants v Institute of the Brothers of the Christian Schools",
        "(wl) Anns v Merton London Borough Council",
        "(wl) Clift v Slough BC",
        "(wl) Doughty v Turner Manufacturing Co",
        "(wl) Van Colle v Chief Constable of Hertfordshire",
        "(wl) Wheat v Lacon and Co Ltd",
        "(wl) Biffa Waste Services Ltd v Maschinenfabrik Ernst Hese GmbH",
        "(wl) Chadwick v British Railways Board",
        "(wl) Morris v Murray",
        "(wl) Z and others v United Kingdom"
    ],
    "NAME": "(wl) Osman v United Kingdom",
    "JUDGE": "Lord Phillips MR; Sedley LJ; Scott Baker LJ",
    "CIT": "[2004] EWCA Civ 1731",
    "HELD": [
        "dismissing the appeals, that (1) the statutory regime, including statutory review under s.101(2) of a refusal of permission to appeal, provided adequate and proportionate protection of an asylum seeker&#8217;s rights. The power of judges to review the legality of administrative decisions was a cornerstone of the rule of law. However, the court had a discretion to decline to hear an application for judicial review of issues that had been, or could have been, the subject of statutory review. The court had been correct to consider whether an alternative remedy was proportionate when deciding whether to exercise its power of judicial review. Parliament&#8217;s wish to process asylum applications expeditiously was a legitimate objective of s.101. Section 101 provided for scrutiny of individual cases on paper. That scrutiny was adequate because judges of the Administrative Court were experienced and understood the importance of the decisions they were making. They were unlikely to overlook an error of law, R. (on the application of Sivasubramaniam) v Wandsworth County Court [2002] EWCA Civ 1738, [2003] 1 W.L.R. 475 and Sengupta v Holmes [2002] EWCA Civ 1104, Times, August 19, 2002 considered. (2) Although it was possible to raise an argument under Art.14 there were two reasons why any potential breach could be justified objectively. Firstly, as Art.5(1)(f) recognised, non nationals seeking entry or asylum stood in a fundamentally different situation from those who could enter or remain by right. The courts would ensure due process for them so far as possible, but due process did not necessarily mean the same process for all. Secondly, whilst different from other available forms of recourse to the courts, s.101 was not deficient or unjust to an extent requiring alternative recourse by way of judicial review."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For M: Michael Fordham. For G: Raza Husain. For the secretary of state: Elisabeth Laing.",
    "CATEGORIES": [
        "Immigration Other Related Subjects: Administrative Law",
        "Adversarial Proceedings",
        "Appeals",
        "Asylum Seekers",
        "Discrimination",
        "Immigration Appeals Tribunal",
        "Judicial Review",
        "Statutory Reviews"
    ],
    "CATEGORY": "Immigration Other Related Subjects: Administrative Law &mdash; Adversarial Proceedings &mdash; Appeals &mdash; Asylum Seekers &mdash; Discrimination &mdash; Immigration Appeals Tribunal &mdash; Judicial Review &mdash; Statutory Reviews",
    "SUMMARY": [
        "The regime under the Nationality, Immigration and Asylum Act 2002 s.101, which provided for a statutory review of a decision by the Immigration Appeal Tribunal, provided adequate and proportionate protection of the rights of asylum seekers. Therefore the court had a discretion to decline to hear an application for judicial review of issues that had been, or could have been, the subject of statutory review.",
        "The appellant asylum seekers (M and G), who had come from Zimbabwe and Iran respectively, appealed against a decision ([2004] EWHC 588, [2004] 1 W.L.R. 2953) that it was an abuse of process for an asylum seeker to apply for judicial review of the Immigration Appeal Tribunal&#8217;s refusal to allow an application under the Nationality, Immigration and Asylum Act 2002 s.101(1) . M and G, in separate cases, had had their applications to appeal under s.101(2) refused. M submitted that it was unjust that asylum seekers be restricted to s.101(2), which involved no right to an oral hearing and carried no right, in the event of refusal, of appeal to the Court of Appeal. G submitted that immigration decisions fell within the ambit of the procedural obligations inherent in the Human Rights Act 1998 Sch.1 Part I Art.2 , Art.3, Art.5, Art.6 and Art.8 and the refusal to grant permission to judicially review decisions of the IAT constituted discrimination against foreign nationals contrary to Art.14."
    ],
    "COURT": "EWCA",
    "CITATION": "Osman v United Kingdom [2004] EWCA Civ 1731",
    "NUMBER": "343",
    "YEAR": "2004"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Evans v Triplex Safety Glass",
        "(wl) Lamb v Camden LBC",
        "(wl) Boumedien v Delta Display Ltd",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Jobling v Associated Dairies",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) McKenna v British Aluminium Ltd",
        "(wl) British Celanese Ltd v AH Hunt (Capacitors) Ltd",
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Hughes v Lord Advocate"
    ],
    "NAME": "(wl) Z and others v United Kingdom",
    "JUDGE": "Lord Jones",
    "CIT": "[2015] CSOH 178",
    "HELD": [
        "Case put out by order.",
        "(1) M&#8217;s common law case directed against C was irrelevant: C&#8217;s duty of reasonable care was sufficiently discharged by considering the terms of S&#8217;s reports and given that C was not averred to have had any specialised knowledge of environmental matters, there was no proper basis for averring that C knew, or ought to have known, from S&#8217;s reports of 1991, 1992 and 1994 that the investigations had been limited; in order to succeed, M would have had to establish that C owed them a non-delegable duty of care which, after a consideration of the authorities, they could not do, and to the extent that M sought to invoke the hazardous operations exception to the general rule, their attempt was misconceived where developing residential housing did not fall therein and, in the circumstances, C&#8217;s personal duty of care did not extend to checking S&#8217;s work. (2) M had pled a relevant common law case against S and were entitled to a proof: the duty cast on S was said to have been to take reasonable care in the performance of their work as environmental consultants for the safety of those whom they knew would occupy the houses to be built on the land, that it was their responsibility to investigate for contamination and to remediate, and in the circumstances of this case, it was not arguable that it would not be fair, just or reasonable to impose such a duty of care on S, Mitchell v Glasgow City Council [2008] CSIH 19, 2008 S.C. 351, distinguished ; it would not be possible until after proof to determine the precise nature and extent of S&#8217;s duties to M over the entire period of S&#8217;s involvement in the development but M had averred enough to entitle them to an inquiry. (3) M&#8217;s case against L fell to be dismissed: in so far as M&#8217;s case relied on the provisions of the Housing (Scotland) Act 1987, it was based on a misconstruction of the implied terms on which they founded, statutory and common law made it clear that a landlord&#8217;s obligations related to the repair of the fabric of the let property itself, in respect of which M had averred no defect; thereafter in respect of the alleged breach of statutory duty in the context of the 2001 Act, there was no averment that before the commencement of the Scottish secure tenancy or of when M became joint tenants, that L had failed to ensure that the house was reasonably fit for human habitation. (4) M&#8217;s contention that either C or S were in breach of s.33(1) of the 1990 Act had to be rejected: M had offered to prove, and had relevantly averred, that the ash, slag, volatile and semi-volatile organic compounds, and the ground contaminated thereby, in the part of the site where M&#8217;s homes were built was controlled waste for the purposes of Pt II of the Act, but M was specific about the dates when such waste was redistributed, namely the first quarters of 1993 and 1994, following the completion of which, S had issued a certificate of substantial completion in respect of which M contended that an act of deposit continued indefinitely but the contention that s.33(1) applied to a continuing state of affairs was misplaced, Thames Waste Management Ltd v Surrey CC [1997] Env. L.R. 148, considered . (5) M&#8217;s averments of causation were sufficient to entitle them to lead evidence to the effect that they had each suffered injury to their health as a result of the inhalation of solvents which, but for S&#8217;s fault, would have been discovered and removed before their homes were built. (6) On the time bar issue, M&#8217;s position was that neither had been aware until sometime after September 2009 that their injuries were attributable in whole, or in part, to an act or omission thus on the face of it, their right of action had expired and if postponement of the commencement of the triennium were to be put in issue, it would be for M to do so by asserting that it would not have been reasonably practicable to have become aware that their injuries were attributable, in whole or in part, to an act or omission so that the defenders would be given an opportunity to assert the contrary; it might be that all M required to add was a formal averment to the effect that it would not have been reasonably practicable for them to have acquired knowledge that the injuries were caused by an act or omission until a date falling after September 2009, and the case would be put out by order to allow M&#8217;s advisers the opportunity to consider the sufficiency of their pleadings."
    ],
    "ABSTRACT": [
        "Residents (M) of a street, which was formerly an industrial site, raised an action against developers (C) and environmental consultants (S) alleging that the site was contaminated with harmful chemicals which they had inhaled to their detriment.",
        "M pled common law fault against C and S, as well as breach of the Environmental Protection Act 1990 s.33(1)(a), in respect of which they sought damages in terms of s.73(6). M further claimed that their registered social landlord (L) had breached an implied term of their tenancy agreement that a house be provided in a tenantable and habitable condition, and were thereafter in breach of the Housing (Scotland) Act 2001 that a house be provided which was fit for human habitation.",
        "At procedure roll, each of the defenders raised pleas to the relevancy and argued that the action was time barred in terms of the Prescription and Limitation (Scotland) Act 1973 s.17. M averred inter alia that C were responsible for constructing the part of the site where M&#8217;s homes were located and that C knew of the risks to human health from contamination of land through the former uses thereof; that while remediation works carried out by S in 1993 and 1994 were neither commissioned nor instructed by C, they were nevertheless provided with copies of reports from which C should have known no testing had been done for solvents; C had failed to instruct further investigation of contamination for polyaromatic hydrocarbons or carcinogenic material in response to investigations done at part of the site in 2000 and 2001; and that they had failed to take reasonable care as a result of which the site continued to be contaminated by a variety of volatile and semi-volatile organic compounds. M&#8217;s case against S was predicated on their being environmental consultants, responsible for the investigation and remediation of the site, and it was averred inter alia that they failed to investigate and advise on the nature, concentration and distribution of contamination of the site by solvents as a reasonably competent environmental consultant would have done."
    ],
    "YEAR": "2015",
    "CATEGORIES": [
        "Civil Procedure",
        "Contaminated Land",
        "Pleadings",
        "Remoteness",
        "Scotland"
    ],
    "CATEGORY": "Civil Procedure &mdash; Contaminated Land &mdash; Pleadings &mdash; Remoteness &mdash; Scotland",
    "SUMMARY": [
        "A common law action by residents of a street, which was formerly an industrial site, against environmental consultants was relevantly pled and would be allowed to proceed where it was fair, just and reasonable to impose a duty of care on them."
    ],
    "COURT": "EWHC",
    "CITATION": "Z and others v United Kingdom [2015] CSOH 178",
    "NUMBER": "344"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Selwood v Durham CC",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) James McNaughton Paper Group Ltd v Hicks Anderson & Co",
        "(wl) Barnett v Chelsea & Kensington Hospital Management Committee",
        "(wl) Lawrence v Pembrokeshire County Council",
        "(wl) Moore Stephens v Stone Rolls Ltd",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Patchett v Swimming Pool Trades Association",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) Jobling v Associated Dairies"
    ],
    "NAME": "(wl) JD v East Berkshire Community Health NHS Trust",
    "JUDGE": "Lord Bingham of Cornhill; Lord Nicholls of Birkenhead; Lord Steyn; Lord Rodger of Earlsferry; Lord Brown of Eaton-under-Heywood",
    "CIT": "[2005] UKHL 23",
    "HELD": [
        "dismissing the appeals (Lord Bingham dissenting), that (1) health professionals responsible for investigating suspected child abuse did not owe the person suspected of having committed the abuse a duty sounding in damages if they carried out that investigation in good faith but carelessly. At common law alleged interference with family life did not justify according a suspected parent a higher level of protection than other suspected perpetrators. That was because there was a conflict between the interests of the parents and the child where the parent was the suspected abuser. Health professionals, acting in good faith in what they believed were the best interests of the child, should not be subject to potentially conflicting duties when deciding whether a child might have been abused, or whether their doubts should be communicated to others, or what further investigatory or protective steps should be taken, Sullivan v Moody 207 C.L.R. 562 considered. The appropriate level of protection for a parent suspected of abusing his child was that clinical and other investigations must be conducted in good faith. That afforded suspected parents a similar level of protection to that afforded generally to persons suspected of committing crimes. (2) The respondents did not owe substantially the same duty of care to P as to the children since P were not in sufficient proximity to give rise to a duty of care. As the Court of Appeal held, there were cogent reasons of public policy for holding that no common law duty of care should be owed to P and that it was accordingly not fair, just and reasonable to impose such a duty, Caparo Industries Plc v Dickman [1990] 2 A.C. 605 applied."
    ],
    "FLAGS": [
        "Approved",
        "Bingham"
    ],
    "COUNSEL": "For the appellants: Brian Langstaff QC, Brian Donovan, David Gripton, Mary Ruck. For the respondents (except Kirklees MBC): Robert Francis QC, Angus Moon. For Kirklees MBC: Edward Faulks QC, Alastair Hammerton, Laura Johnson.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Family Law",
        "Health",
        "Child Abuse",
        "Doctors",
        "Duty of Care",
        "Professional Negligence",
        "Proximity",
        "Social Workers"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Family Law &mdash; Health &mdash; Child Abuse &mdash; Doctors &mdash; Duty of Care &mdash; Professional Negligence &mdash; Proximity &mdash; Social Workers",
    "SUMMARY": [
        "Health professionals responsible for investigating suspected child abuse did not owe a parent suspected of having committed the abuse a duty sounding in damages if they carried out that investigation in good faith but carelessly.",
        "The appellant parents (P) appealed against the decision ([2003] EWCA Civ 1151, [2004] Q.B. 558) that their claims for damages for psychiatric injury brought against doctors or social workers who had wrongly determined that P had abused or harmed their children had to be dismissed on public policy grounds. P&#8217;s claims were based on allegations that their children&#8217;s illness or injuries had been negligently misdiagnosed as having a non accidental origin and that as a result of that misdiagnosis P had suffered a recognised form of psychiatric injury and in some cases financial loss. P submitted that the health care professionals&#8217; duty to exercise due skill and care in the investigation of suspected abuse extended to the child&#8217;s parents as primary carers as well as to the child."
    ],
    "COURT": "UKHL",
    "CITATION": "JD v East Berkshire Community Health NHS Trust [2005] UKHL 23",
    "NUMBER": "345",
    "YEAR": "2005"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Selwood v Durham CC",
        "(wl) Barber v Somerset County Council",
        "(wl) JD v East Berkshire Community Health NHS Trust",
        "(wl) Vowles v Evans & the Welsh RFU",
        "(wl) W v Essex County Council and Another",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Biffa Waste Services Ltd v Maschinenfabrik Ernst Hese GmbH",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Jobling v Associated Dairies",
        "(wl) Moore Stephens v Stone Rolls Ltd"
    ],
    "NAME": "(wl) Lawrence v Pembrokeshire County Council",
    "JUDGE": "Auld LJ; Scott Baker LJ; Richards LJ",
    "CIT": "[2007] EWCA Civ 446",
    "HELD": [
        "Appeal dismissed.",
        "L&#8217;s proposed &#8220;small incremental step&#8221; in the development of the common law would be a step too far. The public interest in effective and fair investigation and the prevention of criminal behaviour had fashioned the common law to protect those suspected of it from malice or bad faith, but not from a well-intentioned but negligent mistake. The basis for that distinction was the need to provide protection to those who had a duty to enforce the law in good faith from the imposition of a duty in negligence that could or might tend to inhibit them in the effective fulfilment of that duty. The development proposed would fundamentally distort the law of negligence in this area, putting at risk the protection for children which it provided in its present form. Article 8, with its wholly different legal construct of engaging liability without reference to a duty of care, complemented it in facilitating a similar protection through a mechanism for justification. The provision of a discrete Convention remedy through the medium of the Human Rights Act 1998 did not, on that account, necessitate a change of the common law in the manner proposed. The instant court and the House of Lords had recently clarified in East Berkshire the relevant principles of the common law, including the effect or lack of effect in relation to that issue of the impact of the 1998 Act, concluding that they precluded the existence of such a duty to the parent. That reasoning still stood, East Berkshire followed, Brooks v Commissioner of Police of the Metropolis [2005] UKHL 24, [2005] 1 W.L.R. 1495, Sullivan v Moody 207 C.L.R. 562 and B v Attorney General of New Zealand [2003] UKPC 61, [2003] 4 All E.R. 833 applied, and TP v United Kingdom (28945/95) [2001] 2 F.L.R. 549 and Venema v Netherlands (35731/97) [2003] 1 F.L.R. 552 considered."
    ],
    "ABSTRACT": [
        "The appellant (L) appealed against a decision ([2006] EWHC 1029, [2006] 2 F.C.R. 363) striking out her claim in negligence against the respondent local authority (P).",
        "P had placed L&#8217;s children on the child protection register for about 14 months. The ombudsman upheld a number of complaints by L of maladministration on P&#8217;s part and recommended that it should pay her compensation. L then issued proceedings in negligence against P. The judge held that the reasoning of the majority of the law lords in JD v East Berkshire Community Health NHS Trust [2005] UKHL 23, [2005] 2 A.C. 373 that a duty of care was not owed by investigating professionals to parents suspected of child abuse had not been affected by the advent of the European Convention on Human Rights 1950 Art.8 to domestic law.",
        "L argued that the advent of Art.8 to domestic law called for an evolutionary change in the law of negligence where, as in the instant context, it overlapped with a parent&#8217;s right to respect for his or her family life. L submitted that the court should take a &#8220;small incremental step&#8221; further than that taken by it and the House of Lords in East Berkshire , so as to give full effect to Art.8 in serving the interest of parents in family life as much as that of the child."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Robert Weir. For the respondent: Alastair Hammerton.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Human Rights",
        "Family Law",
        "Local Government",
        "Child Abuse",
        "Conflict of Interest",
        "Duty of Care",
        "Investigations",
        "Local Authorities",
        "Parents",
        "Right to Respect For Private and Family Life"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Human Rights &mdash; Family Law &mdash; Local Government &mdash; Child Abuse &mdash; Conflict of Interest &mdash; Duty of Care &mdash; Investigations &mdash; Local Authorities &mdash; Parents &mdash; Right to Respect For Private and Family Life",
    "SUMMARY": [
        "The reasoning of the majority of the law lords in JD v East Berkshire Community Health NHS Trust (2005) UKHL 23, (2005) 2 AC 373 that a duty of care was not owed by investigating professionals to parents suspected of child abuse had not been affected by the advent of the European Convention on Human Rights 1950 Art.8 to domestic law."
    ],
    "COURT": "EWCA",
    "CITATION": "Lawrence v Pembrokeshire County Council [2007] EWCA Civ 446",
    "NUMBER": "346",
    "YEAR": "2007"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Joyce v O'Brien",
        "(wl) Gray v Thames Trains",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Osman v Ferguson",
        "(wl) Attorney General of the British Virgin Islands v Hartwell",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Humber Oil v The Owners of the Ship 'The Sivand'",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) McFarlane v EE Caledonia Ltd"
    ],
    "NAME": "(wl) Swinney v Chief Constable of Northumbria",
    "JUDGE": "Males J",
    "CIT": "[2016] EWHC 181 (QB)",
    "HELD": [
        "Claim dismissed.",
        "(1) The first issue was whether the police owed R a relevant duty of care. The applicability of the three-stage test in Caparo Industries Plc v Dickman [1990] 2 A.C. 605 to negligence claims against the police was affirmed in Robinson v Chief Constable of West Yorkshire [2014] EWCA Civ 15, [2014] P.I.Q.R. P14. The requirement of foreseeability was satisfied. M had made credible express threats against police officers. The possibility that he might carry them out was not merely foreseeable, but foreseen. The second requirement, proximity, was also satisfied. The real issue was whether the imposition of a duty was fair, just and reasonable. That was closely connected to the principle of public policy that the police were generally under no duty of care in respect of activities inextricably bound up with the investigation and prevention of crime, Hill v Chief Constable of West Yorkshire [1989] A.C. 53 followed. In particular, no private law duty was owed to protect individuals against harm caused by criminals. A chief constable owed officers within his force a non-delegable duty to take reasonable care for their safety by ensuring both the provision and operation of a safe system of work, Mullaney v Chief Constable of the West Midlands [2001] EWCA Civ 700, [2001] Po. L.R. 150 applied. That was a different starting point to cases brought by members of the public. The duty as a quasi employer could, however, be excluded as a matter of public policy, or because it would not be fair, just and reasonable for such a duty to exist, Hill followed. That was more likely in cases involving operational decisions taken under pressure. That was a particularly important consideration where there was a risk that imposition of a duty would give rise to &#8220;defensive policing&#8221;, or in circumstances which involved the performance of the &#8220;core functions&#8221; of the police, Robinson applied. In such cases, the important public policy was likely to outweigh the public interest in the performance of the chief constable&#8217;s duty as a quasi employer (see paras 84-108 of judgment).",
        "(2) It would not be fair, just or reasonable for a duty of care to be owed in the instant circumstances, Caparo and Robinson applied. That was not to say that the superintendent had made the right decision. Rather, it meant that, even if the decision was negligent, the policy decision was that there should be no private law claim for negligence in order to ensure that the police&#8217;s ability to perform their public functions in the interests of the community, fearlessly and with despatch, was not impeded. That policy decision bore harshly on R, but that was a consequence the law was prepared to accept in the overall public interest. That did not mean that the police owed no duty at all or that a victim of police misconduct had no remedy. There might, in appropriate circumstances, be a claim under ECHR art.2 or a private law claim for misconduct in public office. However, the only claim advanced in the instant case was in negligence, for which a private law duty of care was an essential element of the cause of action. On the instant facts, no such duty existed (paras 109-115).",
        "(3) That was sufficient to dismiss the claim. However, the superintendent&#8217;s decision to await the imminent arrival of cell site analysis and to have the 999 call listened to properly before issuing any warning to officers was reasonable, even if other commanders might have taken a different course. The superintendent had to operate, under pressure, in a complex operation, with no time for full reflection. Stripping away sympathy for R and hindsight knowledge of the imminence of M&#8217;s attack on him, the superintendent had made a decision at which other commanders facing a similar dilemma would also have arrived. Her decision could not be regarded as negligent. The operation was not flawless, but the failings had no bearing on the outcome of the case (paras 117-140).",
        "(4) The claimants had also not proved, on the balance of probabilities, that a warning would have averted the injuries suffered by R (paras 141-148)."
    ],
    "ABSTRACT": [
        "The brother and sister of a police officer (R), seriously wounded by a fugitive offender (M) while on duty, claimed that the defendant police force had breached its duty of care by failing to warn him of threats made by the offender against police officers.",
        "R had been shot in the head and blinded by M. M had already shot and seriously injured his ex-partner, and had killed her new partner in the mistaken belief that he was a police officer. M had rung 999 to explain his actions, and made threats against police officers in general, saying that he was &#8220;coming to get you&#8221;. The superintendent in charge of the operation decided not to issue an immediate warning to all police officers. She decided to wait for cell-site analysis and for the 999 call to be considered further before issuing any warning. There was a period of about seven-and-a-half minutes between the superintendent being told of M&#8217;s threat and R being shot. The police denied that a duty of care existed or that it had been negligent not to issue a warning, and did not accept that doing so would have prevented the shooting of R. R began the instant proceedings, which were continued by his brother and sister following his suicide."
    ],
    "COUNSEL": "For the claimants: Geoffrey Tattersall QC, Darryl Allen QC. For the defendant: John Beggs QC, Aaron Rathmell.",
    "CATEGORIES": [
        "Police Other Related Subjects: Torts",
        "Negligence",
        "Causation",
        "Dangerous Offenders",
        "Duty of Care",
        "Fugitive Offenders",
        "Police Forces",
        "Police Officers",
        "Public Policy",
        "Threats",
        "Warnings"
    ],
    "CATEGORY": "Police Other Related Subjects: Torts &mdash; Negligence &mdash; Causation &mdash; Dangerous Offenders &mdash; Duty of Care &mdash; Fugitive Offenders &mdash; Police Forces &mdash; Police Officers &mdash; Public Policy &mdash; Threats &mdash; Warnings",
    "SUMMARY": [
        "The police had not owed a duty of care to an officer, shot and blinded by a fugitive offender who had already killed one person and injured another, to warn him of threats made by the offender against police officers in general."
    ],
    "COURT": "EWHC",
    "CITATION": "Swinney v Chief Constable of Northumbria [2016] EWHC 181 (QB)",
    "NUMBER": "347",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) Attorney General of the British Virgin Islands v Hartwell",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Selwood v Durham CC",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) A and others v National Blood Authority",
        "(wl) A v United Kingdom"
    ],
    "NAME": "(wl) Van Colle v Chief Constable of Hertfordshire",
    "JUDGE": "Lord Bingham of Cornhill; Lord Hope of Craighead; Lord Phillips of Worth Matravers; Lord Carswell; Lord Brown of Eaton-under-Heywood",
    "CIT": "[2008] UKHL 50",
    "HELD": [
        "Appeals allowed.",
        "(Lord Bingham dissenting in respect of S&#8217;s case) (1) (Per Lord Hope) As to the art.2 claim brought by G&#8217;s parents, the relevant test was set out by the Strasbourg court in Osman v United Kingdom (23452/94) [1999] 1 F.L.R. 193 . Under the test, the court had to be satisfied that the authorities knew or ought to have known &#8220;at the time&#8221; of the existence of &#8220;a real and immediate risk to the life&#8221; of an identified individual from the criminal acts of a third party. If they failed to take measures within the scope of their powers which, judged reasonably, might have been expected to avoid that risk, the relevant positive obligation would have been violated. In G&#8217;s case, that test had not been met. The murder had been the action of a seriously disturbed and unpredictable individual, and it could not reasonably be said that R should have anticipated, from the information available to him at the time, that B constituted a risk to G&#8217;s life that was both real and imminent. It had been argued that by involving G in B&#8217;s prosecution, in particular by requesting him to be a witness at B&#8217;s trial, the police had exposed him to a risk to his life, thereby placing him in a special category of witnesses, not shared by all members of the public, to whom a lower threshold applied. However, the test in Osman was invariable and was not intended to impose a standard which might vary from case to case, Osman applied. (2) (Per Lord Hope) As to S&#8217;s claim in negligence, the balance of advantage in this difficult area lay in preserving the principle set out in Hill v Chief Constable of West Yorkshire [1989] A.C. 53 , whereby, in the absence of special circumstances, the police owed no common law duty of care to protect individuals against harm caused by criminals. In Brooks v Commissioner of Police of the Metropolis [2005] UKHL 24, [2005] 1 W.L.R. 1495 Lord Nicholls of Birkenhead said that there might be exceptional cases where the circumstances compelled the conclusion that the absence of a remedy sounding in damages would be an affront to the principles that underlay the common law. That approach was to be respected, but S&#8217;s case did not fall into that category. That was why, if a civil remedy was to be provided, there needed to be a more fundamental departure from the core principle in Hill . That should be resisted, in the interests of the wider community, Hill and Brooks followed. (3) (Per Lord Bingham) The Court of Appeal had been right to decide as it had in S&#8217;s case. If a member of the public (X) furnished a police officer (Y) with apparently credible evidence that a third party whose identity and whereabouts were known presented a specific and imminent threat to his life or physical safety, Y would owe X a duty to take reasonable steps to assess such threat and, if appropriate, take reasonable steps to prevent it being executed."
    ],
    "ABSTRACT": [
        "The first appellant chief constable appealed against a decision ( [2007] EWCA Civ 325, [2007] 1 W.L.R. 1821 ) that the police had been under a duty to take preventive measures to protect a witness who was being threatened and who was subsequently murdered, and that they were in breach of that duty and therefore acted incompatibly with the European Convention on Human Rights 1950 art.2 . The second appellant chief constable appealed against a decision ( Smith v Chief Constable of Sussex [2008] EWCA Civ 39, [2008] H.R.L.R. 23 ) that a claim in negligence against the police arising from an allegation that they had failed to take necessary steps after being informed of death threats against an individual should not have been struck out.",
        "The cases involved two victims (G and S). G had been murdered just days before he was due to give evidence for the prosecution at the trial of a defendant (B) on charges of theft. B was convicted of G&#8217;s murder. G&#8217;s parents alleged that G&#8217;s murder by B had occurred after a number of threats and incidents of witness intimidation by B against G and others of which the investigating police officer (R) should have been aware and which should have led him to take steps to protect G against the risk of serious harm. According to S, he had repeatedly informed the police that his former partner (P) had threatened to kill him, the police had ample evidence and information to arrest P and they had no excuse for not doing so. While the police were investigating the matter, P attacked S with a claw-hammer, causing serious injuries. In bringing proceedings against the respective chief constables, G&#8217;s parents relied on art.2 of the Convention, while S&#8217;s claim was brought under the common law. The issue was whether the Court of Appeal had been correct to reach the two decisions that it had."
    ],
    "FLAGS": [
        "Approved",
        "Bingham"
    ],
    "COUNSEL": "For the original appellant in the first appeal: Edward Faulks QC, Edward Bishop. For the appellant in the second appeal: Edward Faulks QC, Edward Bishop. For the original respondents in the first appeal: Monica Carss-Frisk QC, Julian Waters, Iain Steele. For the respondent in the second appeal: Heather Williams QC, Guy Vassall-Adams. For the first intervener: Nigel Giffin QC, Joanne Clement. For the second intervener: Dinah Rose QC, Paul Bowen, Richard Hermer, Alison Gerry, Anna Edmundson. For the third intervener: Tim Owen QC, Jessica Simor.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Police",
        "Human Rights",
        "Duty of Care",
        "Police Powers and Duties",
        "Right to Life",
        "Threats",
        "Victims"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Police &mdash; Human Rights &mdash; Duty of Care &mdash; Police Powers and Duties &mdash; Right to Life &mdash; Threats &mdash; Victims",
    "SUMMARY": [
        "The principle established in Hill v Chief Constable of West Yorkshire [1989] A.C. 53 , namely that, in the absence of special circumstances, the police owed no common law duty of care to protect individuals against harm caused by criminals, should be preserved."
    ],
    "COURT": "UKHL",
    "CITATION": "Van Colle v Chief Constable of Hertfordshire [2008] UKHL 50",
    "NUMBER": "348",
    "YEAR": "2008"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Selwood v Durham CC",
        "(wl) Van Colle v Chief Constable of Hertfordshire",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) White v Chief Constable of South Yorkshire",
        "(wl) McLoughlin v O'Brian",
        "(wl) W v Essex County Council and Another",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) James McNaughton Paper Group Ltd v Hicks Anderson & Co"
    ],
    "NAME": "(wl) Rabone v Pennine Care NHS Trust",
    "JUDGE": "Lord Walker JSC; Lady Hale JSC; Lord Brown JSC; Lord Mance JSC; Lord Dyson JSC",
    "CIT": "[2012] UKSC 2",
    "HELD": [
        "Appeal allowed.",
        "(1) The European Court of Human Rights had not considered whether an operational duty existed to protect against the risk of suicide by informal psychiatric patients. However, the Strasbourg jurisprudence showed that such a duty existed to protect persons from a real and immediate risk of suicide where they were under the state&#8217;s control, Osman v United Kingdom (23452/94) [1999] 1 F.L.R. 193, Oneryildiz v Turkey (48939/99) (No.1) (2004) 39 E.H.R.R. 12, Powell v United Kingdom (Admissibility) (45305/99) [2000] Inquest L.R. 19 and Savage v South Essex Partnership NHS Foundation Trust [2008] UKHL 74, [2009] 1 A.C. 681 considered. In the instant case, P owed an operational duty to M to take reasonable steps to protect her from the real and immediate risk of suicide. She had been admitted to hospital as a real suicide risk. She was extremely vulnerable and P had assumed responsibility for her. She was under its control. If she had insisted on leaving the hospital, the authorities could and should have exercised their powers under the 1983 Act to prevent her. In reality, the difference between M&#8217;s position and that of a hypothetical detained psychiatric patient in similar circumstances was one of form, not substance. M&#8217;s position was far closer to that of such a hypothetical patient than to a patient undergoing treatment in a public hospital for a physical illness. Those factors led to the conclusion that the operational duty existed in M&#8217;s case (see paras 15-34 of judgment). (2) There was a real risk that M would take her life when allowed home. That risk existed when she left hospital and continued and increased during the two days, which was sufficient to make the risk immediate. P were or ought to have been aware of that risk. The standard demanded for the performance of the operational duty was one of reasonableness, which included &#8220;consideration of the circumstances of the case, the ease or difficulty of taking precautions and the resources available&#8221;, Officer L, Re [2007] UKHL 36, [2007] 1 W.L.R. 2135 applied. The decision to allow M two days&#8217; home leave was one that no reasonable psychiatric practitioner would have made. P had failed to do all that could reasonably have been expected to prevent the real and immediate risk of M&#8217;s suicide (paras 35-43). (3) The ECtHR had repeatedly stated that family members could bring claims in their own right in relation to the investigative and substantive obligations under art.2 (paras 44-48). (4) R had not renounced an art.2 claim by settling the negligence claim. No such claim had been made in the negligence proceedings because it was not available in English law. In the absence of an express renunciation, the settlement had no legal effect on R&#8217;s status as victims for the purposes of their art.2 claim. There had been no adequate redress as there had been no compensation at all for the non-pecuniary damage suffered by R as a result of the breach of art.2, Bubbins v United Kingdom (50196/99) (2005) 41 E.H.R.R. 24 considered. Had it been necessary to decide the issue, P had in substance acknowledged its breach of the art.2 duty (paras 49-63, 64-72). (5) The extension of time would be granted. The required extension was short, P had suffered no prejudice by the delay, R had acted reasonably and, most importantly, they had a good claim for breach of art.2 (paras 73-79). (6) R had expressed their anxiety to the hospital about the dangers of allowing M home. That must have made M&#8217;s death all the more distressing. It was a bad breach of the art.2 duty, which merited an award well above the lower end of the range. R would be awarded \u00a35,000 each (paras 80-88)."
    ],
    "ABSTRACT": [
        "The appellant parents (R) appealed against a decision ([2010] EWCA Civ 698, [2011] Q.B. 1019) that the respondent NHS trust (P) did not have a duty under the European Convention on Human Rights 1950 art.2 to take reasonable steps to protect their mentally ill daughter (M) from the risk of suicide.",
        "M had suffered from depression and had been informally admitted to hospital following a suicide attempt. She was assessed as a high risk of suicide but was allowed two days&#8217; home leave during which she committed suicide. R brought proceedings against P for negligence and breach of art.2. The negligence claim was settled but the High Court held that there had been no duty on the hospital under art.2. The Court of Appeal dismissed R&#8217;s appeal. The issues to be determined were (i) whether the art.2 obligation could in principle be owed to a mentally ill hospital patient who was not detained under the Mental Health Act 1983; (ii) if yes, whether there was a &#8220;real and immediate&#8221; risk to M&#8217;s life of which P had known or ought to have known and which it failed to take reasonable steps to avoid; (iii) if yes, whether R were &#8220;victims&#8221; within the meaning of art.34 of the Convention; (iv) if yes, whether R had lost that victim status because P had made adequate redress and had sufficiently acknowledged its breach of duty; (v) if no, whether R&#8217;s claims were time-barred under the Human Rights Act 1998 s.7(5); (vi) if no, whether the Court of Appeal had erred in holding that it would have awarded \u00a35,000 each to R if their claims had been established."
    ],
    "FLAGS": [
        "Approved",
        "Hale"
    ],
    "COUNSEL": "For the appellants: Jenni Richards QC, Nigel Poole. For the respondent: Monica Carss-Frisk QC, Jane Mulcahy. For the interveners: Paul Bowen, Alison Pickup.",
    "CATEGORIES": [
        "Human Rights Other Related Subjects: Mental Health",
        "Negligence",
        "Damages",
        "Duty of Care",
        "Extensions of Time",
        "Informal In-Patients",
        "Leave of Absence From Hospital",
        "Mental Patients",
        "Right to Life",
        "Suicide",
        "Victims"
    ],
    "CATEGORY": "Human Rights Other Related Subjects: Mental Health &mdash; Negligence &mdash; Damages &mdash; Duty of Care &mdash; Extensions of Time &mdash; Informal In-Patients &mdash; Leave of Absence From Hospital &mdash; Mental Patients &mdash; Right to Life &mdash; Suicide &mdash; Victims",
    "SUMMARY": [
        "The European Convention on Human Rights 1950 art.2 imposed an operational obligation on states to protect mentally ill patients who were not detained under the Mental Health Act 1983 where there was a real and immediate risk of suicide."
    ],
    "COURT": "UKSC",
    "CITATION": "Rabone v Pennine Care NHS Trust [2012] UKSC 2",
    "NUMBER": "349",
    "YEAR": "2012"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Attorney General of the British Virgin Islands v Hartwell",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) White v Chief Constable of South Yorkshire",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) Mullin v Richards",
        "(wl) Lennon v Commissioner of Police of the Metropolis"
    ],
    "NAME": "(wl) Robinson v Chief Constable of West Yorkshire",
    "JUDGE": "Hallett LJ; Sullivan LJ; Arnold J",
    "CIT": "[2014] EWCA Civ 15",
    "HELD": [
        "Appeal dismissed.",
        "The basic principle was that where there was a wrong there should be a remedy. However, there were cases where it would not be fair, just and reasonable to impose a duty of care and the interests of the public at large could outweigh the interests of the individual allegedly wronged (see para.39 of judgment). The Caparo test applied to all claims in the modern law of negligence, and was reflected in all the most recent appellate decisions which addressed in turn, whatever the nature of the harm, the issues of foreseeability, proximity and whether it was just and reasonable to impose a duty, Caparo applied (para.42). The Hill principle was designed to prevent defensive policing and better protect the public. It would fundamentally undermine that objective to make the police liable for direct acts but not indirect acts, and would encourage the police to avoid positive action for fear of being sued (para.44). The general principle was that most claims against the police in negligence for their acts or omissions in the course of investigating and suppressing crime and apprehending offenders would fail the third stage of the Caparo test. It would not be fair, just and reasonable to impose a duty where the courts had concluded that the interests of the public would not be best served by imposing a duty to individuals, Hill, Brooks v Commissioner of Police of the Metropolis [2005] UKHL 24, [2005] 1 W.L.R. 1495 and Van Colle v Chief Constable of Hertfordshire [2008] UKHL 50, [2009] 1 A.C. 225 applied (para.46). However, the Hill principle did not impose a blanket immunity. While there was no definitive list of possible exceptions, there were exceptional cases in which the police did owe a duty of care even when suppressing and investigating crime, Rigby v Chief Constable of Northamptonshire [1985] 1 W.L.R. 1242 considered. In principle, although there was sense in exempting cases of outrageous negligence on the basis no one wished to encourage grossly reckless police operations, such claims would be on the margins. A careful analysis of the case law would provide a sufficient degee of certainty. Accordingly, the Caparo test did apply to the instant case. It would not be fair, just and reasonable to impose a duty on police officers doing their best to get a drug dealer off the street safely (paras 48, 50-51, 65-66). The judge recognised that there were a number of exceptions to the Hill principle and only considered whether outrageous negligence was present because the parties had addressed him on it. He did not find that a finding of outrageous negligence was the only way in which the principle could be defeated. The Hill principle did not apply in general to the law of negligence and to the facts of the instant case. The findings that a duty existed and that there was a breach were unsustainable (paras 62-63)."
    ],
    "ABSTRACT": [
        "The appellant (R) appealed against a decision that the respondent chief constable was not liable to her in negligence for damages for personal injury.",
        "R became caught up in the arrest of a drug dealer when she was walking down a busy high street. She was knocked to the ground and injured. The judge found that there had been negligence, although not outrageous negligence, on the part of the police officers involved in the arrest, but that the immunity from suit for officers engaged in the apprehension of criminals applied. Accordingly, despite the finding of negligence, the claim was dismissed.",
        "R argued that the judge was wrong in law to apply the three-stage test in Caparo Industries Plc v Dickman [1990] 2 A.C. 605 where the case involved direct physical harm, public policy considerations did not arise and there was no need for the court to ask itself whether it was fair, just and reasonable for the action to proceed. Further, that he was wrong in law to apply a blanket immunity and to find that it required &#8220;outrageous negligence&#8221; to defeat the principle in Hill v Chief Constable of West Yorkshire [1989] A.C. 53."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Ceri Widdett. For the respondent: Ian Skelt.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Police",
        "Arrest",
        "Damages",
        "Duty of Care",
        "Immunity From Suit",
        "Negligence",
        "Personal Injury",
        "Police Officers"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Police &mdash; Arrest &mdash; Damages &mdash; Duty of Care &mdash; Immunity From Suit &mdash; Negligence &mdash; Personal Injury &mdash; Police Officers",
    "SUMMARY": [
        "A victim of crime was not allowed to proceed with her claim in negligence for damages for personal injuries against police officers engaged in the apprehension of an offender. The test in Caparo Industries Plc v Dickman [1990] 2 A.C. 605 applied and, in the circumstances, the police did not owe her a duty of care."
    ],
    "COURT": "EWCA",
    "CITATION": "Robinson v Chief Constable of West Yorkshire [2014] EWCA Civ 15",
    "NUMBER": "350",
    "YEAR": "2014"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Van Colle v Chief Constable of Hertfordshire",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Selwood v Durham CC",
        "(wl) Jobling v Associated Dairies",
        "(wl) Kent v Griffiths",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) W v Essex County Council and Another",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) James McNaughton Paper Group Ltd v Hicks Anderson & Co"
    ],
    "NAME": "(wl) Michael v Chief Constable of South Wales",
    "JUDGE": "Lord Neuberger PSC; Lady Hale DPSC; Lord Mance JSC; Lord Kerr JSC; Lord Reed JSC; Lord Toulson JSC; Lord Hodge JSC",
    "CIT": "[2015] UKSC 2",
    "HELD": [
        "Appeal dismissed, cross-appeal dismissed.",
        "(1) (Hale and Kerr JJ.S.C. dissenting) The first issue could be split into two questions. The first was whether the police owed a duty to take reasonable care for the safety of a person where they were aware, or ought reasonably to have been aware, of a threat to her life or physical safety. The answer was no. In general, English law did not impose liability for injury or damage caused by a third party. The courts&#8217; refusal to impose a private law duty on the police to exercise reasonable care to safeguard potential victims of crime, except where there had been a representation and reliance, was consistent with the way in which the common law applied to other authorities vested with powers or duties for the protection of the public. No exception was to be made to the ordinary common law principles so as to cover the facts of the instant case. Although statistics about the incidence of domestic violence were shocking, they were not such as to cause the court to create a new category of duty of care. If the foundation of a duty of care was the police&#8217;s public law duty to preserve the peace, it was hard to see why the duty should be confined to particular potential victims, or to potential victims of a particular kind of breach of the peace. The duty was owed to members of the public at large and did not involve the kind of proximity necessary for the imposition of a private law duty of care. Moreover, it was not clear whether imposing a duty of care in respect of a specific person would improve the police&#8217;s performance in dealing with domestic violence. It would, however, have potentially significant financial implications for the police and the public purse. The development of a private duty of care was not necessary for compliance with art.2 or art.3, and there was no basis for creating a wider duty in negligence than would arise either under common law principles or under the ECHR, Van Colle v Chief Constable of Hertfordshire [2008] UKHL 50, [2009] 1 A.C. 225 followed (see paras 97-100, 114-128 of judgment). The second question was whether, where a member of the public had given the police credible evidence that a third party, whose identity and whereabouts were known, presented an imminent threat to her life or physical safety, the police owed her a duty to take reasonable steps to assess the threat and prevent it being executed. Again, the answer was no. Whether there should be a public compensation scheme for the victims of certain types of crime in cases of pure omission by the police was for Parliament to determine (paras 129-130). (2) The call handler had said nothing to M to give rise to an assumption of responsibility. She had made no promise about how quickly South Wales police would respond, and she had not said anything that amounted to an instruction to stay in the house, Kent v Griffiths (No.3) [2001] Q.B. 36 considered (para.138). (3) The art.2 claim turned on whether the call handler ought to have heard M say that there had been a threat to kill. That was a question of fact, and it would be rare for the instant court to reverse concurrent findings of two lower courts on a question of fact. What the call handler ought to have made of the 999 call was properly a matter for investigation at trial (para.139)."
    ],
    "ABSTRACT": [
        "The appellant (F) appealed against a decision ([2012] EWCA Civ 981) granting summary judgment to the respondent chief constables on her claim against them in negligence. The chief constables cross-appealed against a decision that a claim by F under ECHR art.2 should proceed to trial.",
        "F was the administratrix of the estate of the deceased (M). M had made a 999 call from her home in South Wales in the early hours of the morning. The call was picked up by Gwent Police. M told the operator that her ex-partner had assaulted her and that, although he had left, he had threatened to return imminently and kill her. There was a dispute about whether the operator heard the word &#8220;kill&#8221; or misheard it as &#8220;hit&#8221;. The operator relayed the details of the call to South Wales police, but did not mention the threat to kill. South Wales police downgraded the priority of the call, deeming an immediate response unnecessary. M made a second 999 call about 15 minutes after the first. In it, she could be heard screaming. Police officers arrived at her home within eight minutes of the second call to find that she had been killed by her ex-partner. Data held by South Wales police recorded a history of domestic violence towards M by her ex-partner. F brought claims against Gwent and South Wales police in common law negligence and in respect of ECHR art.2. The Court of Appeal granted summary judgment to the police on the negligence issue, but held that the art.2 claim should proceed to trial. The issues were whether the police (i) owed a common law duty of care to M; (ii) had assumed responsibility to take reasonable care for M&#8217;s safety; (ii) had, arguably, breached art.2."
    ],
    "FLAGS": [
        "Approved",
        "Hale",
        "Neuberger"
    ],
    "COUNSEL": "For the appellants: Nicholas Bowen QC, Duncan Fairgrieve, Jude Bunting. For the respondents: Lord Pannick QC, Jeremy Johnson. For the interveners Refuge and Liberty: Karon Monaghan QC, Rajeev Thacker. For the intervener Welsh Women&#8217;s Aid: Caoilfhionn Gallagher, Conor McCarthy.",
    "CATEGORIES": [
        "Police Other Related Subjects: Negligence",
        "Human Rights",
        "Duty of Care",
        "Negligence",
        "Police",
        "Police Powers and Duties",
        "Right to Life"
    ],
    "CATEGORY": "Police Other Related Subjects: Negligence &mdash; Human Rights &mdash; Duty of Care &mdash; Negligence &mdash; Police &mdash; Police Powers and Duties &mdash; Right to Life",
    "SUMMARY": [
        "The police did not owe a common law duty of care in negligence to a specific member of the public where they were aware, or ought reasonably to have been aware, of a threat to her life or physical safety. Nor did they owe such a duty where a member of the public had given them apparently credible evidence that an identifiable third party presented a specific and imminent threat to her life or physical safety."
    ],
    "COURT": "UKSC",
    "CITATION": "Michael v Chief Constable of South Wales [2015] UKSC 2",
    "NUMBER": "351",
    "YEAR": "2015"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) ICI v Shatwell",
        "(wl) Joyce v O'Brien",
        "(wl) A and others v National Blood Authority",
        "(wl) Barr & Ors v Biffa Waste Services Limited",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Hinz v Berry",
        "(wl) Hughes v Lord Advocate",
        "(wl) Cook v Lewis",
        "(wl) Smith v Stages",
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Lewis v Daily Telegraph Ltd",
        "(wl) Doughty v Turner Manufacturing Co"
    ],
    "NAME": "(wl) Roe v Minister of Health",
    "JUDGE": "Lord Neuberger PSC; Lady Hale DPSC; Lord Hughes JSC; Lord Toulson JSC; Lord Thomas LCJ",
    "CIT": "[2016] UKSC 8",
    "HELD": [
        "Appeals allowed.",
        "The Chan Wing Siu principle could not be supported. The introduction of the principle was based on an incomplete, and in some respects erroneous, reading of the previous case law, coupled with generalised and questionable policy arguments. Reversing a statement of principle which had been made and followed by the Privy Council and the House of Lords on a number of occasions was a big step, but it was right to do so for several reasons. First, the court had had the benefit of a much fuller analysis than on previous occasions when the topic was considered. Second, it could not be said that the law was now well established and working satisfactorily; it remained highly controversial and a continuing source of difficulty for trial judges. Third, secondary liability was an important part of the common law, and if a wrong turn had been taken, it should be corrected. Fourth, in the common law foresight of what might happen was ordinarily no more than evidence from which a jury could infer the presence of a requisite intention. It might be strong evidence, but its adoption as a test for the mental element for murder in the case of a secondary party was a serious and anomalous departure from the basic rule, which resulted in an over-extension of the law of murder and a reduction of the law of manslaughter. Murder already had a relatively low mens rea threshold, as it included an intention to cause serious injury, without intent to kill or to cause risk to life. The Chan Wing Siu principle extended liability for murder to a secondary party on the basis of a still lesser degree of culpability, namely foresight only of the possibility that the principal might commit murder but without there being any need for an intention to assist him to do so. Fifth, the rule had the striking anomaly of requiring a lower mental threshold for guilt in the case of the accessory than in the case of the principal, Chan Wing Siu disapproved. It would not be satisfactory for the court simply to disapprove the Chan Wing Siu principle. Those concerned with criminal justice, including members of the public, were entitled to expect a clear statement of the relevant principles. The proper course was to re-state the principles which had been established over many years before the law took a wrong turn. The error was to equate foresight with intent to assist, as a matter of law; the correct approach was to treat foresight as evidence of intent. The long-standing practice, before Chan Wing Siu , of inferring intent to assist from a common criminal purpose which included the further crime, if the occasion for it were to arise, was always a legitimate one; what was illegitimate was to treat foresight as an inevitable yardstick of common purpose. The court proceeded to re-state the relevant principles. It also addressed the potential impact of the instant decision on past convictions (see paras 79-84, 87-100 of judgment)."
    ],
    "ABSTRACT": [
        "In conjoined appeals against decisions ([2013] EWCA Crim 1433) upholding convictions for murder, the Supreme Court was asked to review the doctrine of parasitic accessory liability, which had been laid down by the Privy Council in Chan Wing Siu v R. [1985] A.C. 168.",
        "In Chan Wing Siu , it was held that if two people set out to commit an offence and in the course of that joint enterprise one of them (D1) committed another offence (crime B), the second person would be guilty as an accessory to crime B if he had foreseen the possibility that D1 might act as he did."
    ],
    "FLAGS": [
        "Hale",
        "Neuberger"
    ],
    "COUNSEL": "For the appellant Jogee: Felicity Gerry QC, Catarina Sjolin, Adam Wagner, Diarmuid Laffan. For the appellant Ruddock: Julian Knowles QC, James Mehigan. For the Crown in Jogee: John McGuinness QC, Duncan Atkinson. For the Crown in Ruddock: Howard Stevens QC, Rowan Pennington-Benton. For the intervener (Just for Kids Law): Francis Fitzgibbon QC, Caoilfhionn Gallagher, Joanne Cecil, Daniella Waddoup. For the intervener (Joint Enterprise Not Guilty by Association): Timothy Moloney QC, Jude Bunting.",
    "CATEGORIES": [
        "Criminal Law",
        "Accessories",
        "Joint Enterprise",
        "Murder"
    ],
    "CATEGORY": "Criminal Law &mdash; Accessories &mdash; Joint Enterprise &mdash; Murder",
    "SUMMARY": [
        "The doctrine of parasitic accessory liability, laid down by the Privy Council in Chan Wing Siu v R. [1985] A.C. 168, could not be supported. The Supreme Court re-stated the principles concerning the liability of accessories or secondary parties."
    ],
    "COURT": "UKSC",
    "CITATION": "Roe v Minister of Health [2016] UKSC 8",
    "NUMBER": "352",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Tomlinson v Congleton BC",
        "(wl) Harvey v Plymouth City Council",
        "(wl) Barber v Somerset County Council",
        "(wl) Mullin v Richards",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Orchard v Lee",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Sutcliffe v BMI Healthcare",
        "(wl) Pierce v Doncaster MBC",
        "(wl) Keown v Coventry Healthcare NHS Trust",
        "(wl) Clark v Bourne Leisure Limited"
    ],
    "NAME": "(wl) Harris v Perry and another",
    "JUDGE": "Lord Phillips LCJ; May LJ; Wilson LJ",
    "CIT": "[2008] EWCA Civ 907",
    "HELD": [
        "Appeal allowed.",
        "(1) It was impossible to preclude all risk that, when playing together, children might injure themselves or each other. It was quite impractical for parents to keep children under constant supervision and it would not be in the public interest for the law to impose a duty upon them to do so. Some activities however involved an unacceptable risk to children unless they were subject to supervision. The standard of care required in the circumstances was that which a reasonably careful parent would have shown for her own children, or, which was the same thing, to act as would any reasonable provider and supervisor of that kind of inflatable for use by young children. In considering the precautions that should have been taken the judge should have had regard to any information in the hire agreement, which P had read, but wrongly had regard to other documents which P neither saw nor ought to have seen. The judge had erred and the appeal court had to form its own view. (2) The hire agreement recommended that the equipment should be supervised at all times and that boisterous behaviour should be stopped. A reasonable parent could foresee that boisterous behaviour might lead to injury but it was not reasonably foreseeable that such injury would be likely to be serious, let alone as severe as the injury sustained by H. Therefore the standard of care called for on the part of P was that appropriate to protect children against a foreseeable risk of physical harm that fell short of serious injury. (3) If the risk that should have been foreseen by a reasonable parent was injury that was not serious, there could be no justification for holding that the duty of care required children playing on a bouncy castle to be kept under constant surveillance. A responsible adult should have been in the vicinity of the castle to intervene if those playing on it got boisterous, but did not have to watch them continuously to ensure that their behaviour never became boisterous. The judge imposed too high a standard of care in holding that a bouncy castle required uninterrupted supervision. (4) It was doubtful whether P could have prevented the accident if she had been keeping the bouncy castle under constant surveillance. The issue was academic since the accident had occurred during a short period when, without fault, she was concentrating her attention elsewhere. (5) The judge also applied too high a standard of care when concluding that P was in breach of duty in allowing children of different sizes to play on the castle."
    ],
    "ABSTRACT": [
        "The appellant husband and wife (T and P) appealed against a decision ( [2008] EWHC 990 (QB), (2008) 105(21) L.S.G. 22 ) that they were liable in negligence to the respondent (H), who had been seriously injured whilst playing on a bouncy castle.",
        "The appellants had hired the bouncy castle for the 10th birthday party of their children. The castle was of a size suitable for adults as well as children. It was pitched on a school playing field outside their back garden. Before the party children, including H, who was then 11, were playing on the castle. H was not invited to the party but P had given him permission to play on the castle. While playing on the castle H had been struck on the head by the heel of a much taller and older boy performing a somersault. H had suffered a depressed skull fracture and subdural haematoma. H&#8217;s accident occurred when P&#8217;s back was turned. She had gone to help another child. The judge held that P&#8217;s duty of care required her to maintain uninterrupted supervision of the castle and that if she had done so she would have prevented the somersault and therefore the accident. He further held that P should not have let H and other bigger children use the castle at the same time.",
        "The appellants submitted that the judge had applied too strict a test in holding that P&#8217;s duty of care was to maintain a continuous watch on the castle, and was wrong to hold that P could have stopped the somersault in time to prevent the accident."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellants: Graham Eklund QC. For the respondent: Susan Rodway QC.",
    "CATEGORIES": [
        "Personal Injury",
        "Accidents",
        "Breach of Duty of Care",
        "Children",
        "Standard of Care",
        "Supervision"
    ],
    "CATEGORY": "Personal Injury &mdash; Accidents &mdash; Breach of Duty of Care &mdash; Children &mdash; Standard of Care &mdash; Supervision",
    "SUMMARY": [
        "A judge imposed too high a standard of care in holding that a bouncy castle required uninterrupted supervision and that it was a breach of duty to allow children of different sizes to play together on it."
    ],
    "COURT": "EWCA",
    "CITATION": "Harris v Perry and another [2008] EWCA Civ 907",
    "NUMBER": "353",
    "YEAR": "2008"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Barker v Corus (UK)",
        "(wl) Sutcliffe v BMI Healthcare",
        "(wl) Sanderson v Hull",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Phipps v Rochester Corporation",
        "(wl) Liverpool Womens Hospital NHS Foundation Trust v Ronayne",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Butcher v Southend-on-Sea BC",
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Jolley v Sutton LBC",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Harvey v Plymouth City Council"
    ],
    "NAME": "(wl) Williams v University of Birmingham",
    "JUDGE": "Maurice Kay LJ; Aikens LJ; Patten LJ",
    "CIT": "[2011] EWCA Civ 1242",
    "HELD": [
        "Appeal allowed.",
        "(1) The test for whether U was negligent and in breach of duty was whether it ought reasonably to have foreseen the risk of contracting mesothelioma arising from W&#8217;s exposure to asbestos fibres by undertaking the experiments in the tunnel to the extent that it should have refused to allow the experiments to be done or taken further precautions or at the least sought advice, Asmussen v Filtrona United Kingdom Ltd [2011] EWHC 1734 (QB) considered (see para.35 of judgment). (2) The question of what U ought reasonably to have foreseen about the consequences of any exposure to asbestos fibres in the course of experiments in the tunnel and the reasonable conduct that U ought to have adopted had to be judged by reference to the state of knowledge and practice as at 1974, Baker v Quantum Clothing Group Ltd [2011] UKSC 17, [2011] 1 W.L.R. 1003 applied (para.36). (3) The judge did not ask the correct question when considering whether U was in breach of duty by asking whether there had been a material increase in the risk. There was nothing in the relevant authorities to suggest that the breach of duty test had been altered in mesothelioma cases so that a claimant only had to demonstrate that the defendant failed to take reasonable steps to ensure that the claimant or victim was not exposed to a material increase in the risk of mesothelioma, Fairchild v Glenhaven Funeral Services Ltd (t/a GH Dovener &amp; Son) [2002] UKHL 22, [2003] 1 A.C. 32 and Sienkiewicz v Greif (UK) Ltd [2011] UKSC 10, [2011] 2 A.C. 229 considered (paras 39-45). (4) There was just sufficient evidence for the judge properly to make the finding that, on the balance of probability, the lagging was in poor condition in 1974 (para.52). However, on the then state of knowledge it had not been shown that, at the level of exposure to asbestos fibres actually found by the judge, U ought reasonably to have foreseen that W would be exposed to an unacceptable risk of asbestos related injury. Therefore the judge&#8217;s finding of breach of duty could not stand (paras 60-62). (5) The judge had not posed the correct legal test on causation, but she had concluded as a matter of fact that the exposure of W to asbestos fibres in the tunnel was such as materially to increase his risk of contracting mesothelioma so that causation had been proved (para.78)."
    ],
    "ABSTRACT": [
        "The appellant university (U) appealed against a decision that it was liable to the estate and dependants of a former student (W) who had died of malignant mesothelioma.",
        "W had carried out scientific experiments in a tunnel underneath university buildings in 1974 in his final year as an undergraduate. The tunnel contained central heating pipes which were lagged with asbestos lagging. Tests on dust residues from the tunnel found all forms of asbestos in the dust and U admitted that W would have received some exposure to asbestos whilst carrying out the experiments. The judge found that W&#8217;s visits to the tunnel were such that there was a material increase in the risk of his contracting mesothelioma as a result. In those circumstances there was a breach of duty and U was negligent. U argued that as a matter of causation the university exposure was so small compared with other exposures to asbestos to which W might have been subject that it had to be regarded as de minimis. The judge rejected that argument and gave judgment for damages to be assessed.",
        "U submitted that it could only be in breach of its duty of care to W if it should reasonably have foreseen at the relevant time that permitting him to do the experiments in the tunnel would expose him to the risk of asbestos-related injury because of the state of the asbestos lagging and/or the existence of dust in the tunnel. The judge had erred in her approach to the issue of breach of duty by considering the question of whether W&#8217;s exposure in the tunnel was more than de minimis because that question was relevant to causation and not to whether there had been a breach of duty. U further submitted that the judge had not made any finding that the condition of the lagging in the tunnel at the relevant time was such as should have alerted U to a reasonably foreseeable risk of asbestos-related injury to people using the tunnel."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Charles Feeny. For the respondent: Julian Goose QC.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Personal Injury",
        "Asbestos",
        "Breach of Duty of Care",
        "Causation",
        "Foreseeability",
        "Mesothelioma"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Personal Injury &mdash; Asbestos &mdash; Breach of Duty of Care &mdash; Causation &mdash; Foreseeability &mdash; Mesothelioma",
    "SUMMARY": [
        "The correct test for breach of duty in a mesothelioma case was not whether the defendant had taken reasonable measures to ensure that the claimant or victim was not exposed to a material increase in the risk of mesothelioma. The duty was to take reasonable care, including measures if necessary, to ensure that a person was not exposed to a foreseeable risk of asbestos related injury."
    ],
    "COURT": "EWCA",
    "CITATION": "Williams v University of Birmingham [2011] EWCA Civ 1242",
    "NUMBER": "354",
    "YEAR": "2011"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Lawrence v Pembrokeshire County Council",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)",
        "(wl) Patchett v Swimming Pool Trades Association",
        "(wl) Chester v Afshar",
        "(wl) Kennaway v Thompson",
        "(wl) Humber Oil v The Owners of the Ship 'The Sivand'",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Lennon v Commissioner of Police of the Metropolis",
        "(wl) John v MGN Ltd",
        "(wl) McLoughlin v O'Brian",
        "(wl) Wooten v J Docter",
        "(wl) The Scout Association v Barnes"
    ],
    "NAME": "(wl) Watt v Hertfordshire",
    "JUDGE": "Longmore LJ; Kitchin LJ; Vos LJ",
    "CIT": "[2016] EWCA Civ 371",
    "HELD": [
        "Appeal dismissed.",
        "(1) The judge&#8217;s reasoning in concluding that there was an opportunity of which G was deprived by the director was entirely convincing. Her findings were not perverse. The judge&#8217;s finding that the opportunity was worth \u00a31.4 million did not ignore commercial common sense. The liquidators alleged that the \u00a31.4 million had been paid for the five-year seat commitment and that was sufficient to establish what it was worth. There was no evidential lacuna. There was no lack of nexus between the alleged dishonesty and the alleged assistance. The issue of whether the deposits were a genuine part of the seat sale agreements was plainly put in issue by the pleadings and the judge was justified in allowing the liquidators to assert in the course of the trial that the deposits were not truly intended by the parties to be repayable. The judge had not behaved unfairly. The appeal on the findings of fact failed (see paras 34, 36, 40, 50, 60, 69-70 of judgment).",
        "(2) The judge had addressed the wrong question when deciding not to reduce G&#8217;s equitable compensation for the recouped \u00a3500,000. The question was whether the appellants as dishonest assisters of the director in the misapplication of G&#8217;s monies should be required to compensate G for the loss of the extra \u00a3500,000 that G had in fact recovered. The director&#8217;s misapplication of G&#8217;s \u00a3500,000 did not cause G any loss because it was repaid. The appellants succeeded in reducing the award of equitable compensation for their dishonest assistance in the misapplication of G&#8217;s monies from \u00a31.25 million to \u00a3750,000 (para.64)."
    ],
    "ABSTRACT": [
        "The second, fourth, fifth and sixth appellants appealed against findings of fact in the respondent company&#8217;s claim ((2014) EWHC 1587 (Ch)) that they had dishonestly assisted the first appellant company director in breaching his fiduciary duties and the Companies Act 2006 s.175.",
        "The company (G) was a tour operator and the director, who owned 100 % of the company, had attempted to sell 50% of his shares to each of two companies without the one knowing about the other. G went into liquidation leaving passengers stranded overseas and owing \u00a320 million for repatriation. The judge found that the appellants had dishonestly assisted the director to breach his duties to G by diverting to himself \u00a31.4 million which would otherwise have been due to G. The judge decided that that money would have been paid to G as payment for an opportunity, namely entering into a five-year seat commitment with an airline. She also found that they had dishonestly assisted the director in misapplying \u00a31.25 million of G&#8217;s money for airline seats which was diverted to a Seychelles company owned by the director. She held that they were only liable to compensate G for the loss that it had suffered, rather than for the profit that the director made, but she rejected the contention that G&#8217;s equitable compensation should be reduced by \u00a3500,000 for flight seats that had been recouped.",
        "The appellants submitted that the judge had unfairly approached the case and had allowed the liquidators to pursue an unpleaded case that they never intended to repay \u00a3750,000 of the deposits paid by G for airline seats so that they were unfairly disadvantaged in adducing evidence. They argued that the judge&#8217;s findings ignored commercial common sense."
    ],
    "COUNSEL": "For the second, fourth, fifth and sixth defendants/appellants: David Eaton Turner. For the respondent: Hilary Stonefrost.",
    "CATEGORIES": [
        "Company Law Other Related Subjects: Hospitality and Leisure",
        "Insolvency",
        "Breach of Fiduciary Duty",
        "Conflict of Interest",
        "Directors' Powers and Duties",
        "Dishonest Assistance",
        "Fraudulent Dealing",
        "Liquidation",
        "Misapplication",
        "Tour Operators"
    ],
    "CATEGORY": "Company Law Other Related Subjects: Hospitality and Leisure &mdash; Insolvency &mdash; Breach of Fiduciary Duty &mdash; Conflict of Interest &mdash; Directors' Powers and Duties &mdash; Dishonest Assistance &mdash; Fraudulent Dealing &mdash; Liquidation &mdash; Misapplication &mdash; Tour Operators",
    "SUMMARY": [
        "In deciding equitable compensation for dishonestly assisting a company director in breaching his fiduciary duties, the dishonest assisters were not liable to compensate the company for the misapplication of money which had been recouped before the company&#8217;s liquidation. The misapplication of that money had not caused the company any loss because it had been repaid."
    ],
    "COURT": "EWCA",
    "CITATION": "Watt v Hertfordshire [2016] EWCA Civ 371",
    "NUMBER": "355",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Clark v Bourne Leisure Limited",
        "(wl) Orchard v Lee",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Tomlinson v Congleton BC",
        "(wl) Wooten v J Docter",
        "(wl) Smith v Stages",
        "(wl) Coxall v Goodyear Great Britain Ltd",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Mullin v Richards",
        "(wl) Revill v Newbery"
    ],
    "NAME": "(wl) The Scout Association v Barnes",
    "JUDGE": "Ward LJ; Smith LJ; Jackson LJ",
    "CIT": "[2010] EWCA Civ 1476",
    "HELD": [
        "Appeal dismissed.",
        "(1) The risks associated with playing the same game in a lighted room were increased when the lights were switched off. It could not be said that B would have suffered the same accident if there had been full illumination (see paras 22-25 of judgment). (2) (Jackson L.J. dissenting) It was clear that the judge had very clearly in mind the well-established principle that the social value of an activity was a relevant consideration, Tomlinson v Congleton BC [2003] UKHL 47, [2004] 1 A.C. 46 and Bolton v Stone [1951] A.C. 850 applied. Everyone accepted that scouting activities were valuable to society and that they often, and properly, carried some elements of risk. However, that did not render every scouting activity, however risky, acceptable. In the instant case, the judge rightly concluded that playing in the dark significantly increased those risks and that the only justification was the additional excitement. Darkness added no other social or educative value. The fact that the judge did not say so explicitly could not undermine his overall conclusion. Whether the social benefit of an activity was such that the degree of risk it entailed was acceptable was a question of fact, degree and judgment which had to be decided on an individual basis. The judge did that and his conclusion should be respected (paras 38, 46-49, 60)."
    ],
    "ABSTRACT": [
        "The appellant association (S) appealed against a decision that it was liable for damages for personal injuries suffered by the respondent (B).",
        "B, who was 13 years&#8217; old at the time, had been injured whilst playing a game called &#8220;Objects in the Dark&#8221; at a scout meeting. The game was organised by the scout leader; blocks were placed in the centre of a room whilst players ran around. Half the main lights were turned off and, at any given moment, the remainder of the lights would be turned off and the players would rush to the middle of the room and grab a block: there were not enough blocks for every player. Rounds were played until one boy was left holding a block and declared the winner. The game was similar to another game which was played with the lights on. In the course of playing the game, B collided with a bench, injuring his head and left shoulder. He recovered from his head injury within two weeks, but the shoulder injury persisted and required physiotherapy. In the event, he made a full recovery. The judge determined that turning the lights off had introduced an unacceptable degree of risk to the game.",
        "S submitted that (1) the risks associated with playing the game were no different to those that existed when playing with the lights on; (2) in his evaluation, the judge failed to take account of or failed to give sufficient weight to the social value of the activity."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Patrick Field QC, David Boyle. For the respondent: Bruce Silvester.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Negligence",
        "Associations",
        "Games",
        "Personal Injury",
        "Reasonable Care",
        "Risk"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Negligence &mdash; Associations &mdash; Games &mdash; Personal Injury &mdash; Reasonable Care &mdash; Risk",
    "SUMMARY": [
        "Whether the social benefit of an activity was such that the degree of risk it entailed was acceptable was a question of fact, degree and judgment which had to be decided on an individual basis. In that context, a judge had been correct to conclude that playing a potentially risky game in the dark unacceptably increased the foreseeable risk of injuries occurring."
    ],
    "COURT": "EWCA",
    "CITATION": "The Scout Association v Barnes [2010] EWCA Civ 1476",
    "NUMBER": "356",
    "YEAR": "2010"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Chester v Afshar",
        "(wl) Williams v University of Birmingham",
        "(wl) Bailey v Ministry of Defence",
        "(wl) Sanderson v Hull",
        "(wl) Liverpool Womens Hospital NHS Foundation Trust v Ronayne",
        "(wl) Barker v Corus (UK)",
        "(wl) Butcher v Southend-on-Sea BC",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Gregg v Scott",
        "(wl) Phipps v Rochester Corporation",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Barnett v Chelsea & Kensington Hospital Management Committee"
    ],
    "NAME": "(wl) Sutcliffe v BMI Healthcare",
    "JUDGE": "Auld LJ; May LJ; Longmore LJ",
    "CIT": "[2007] EWCA Civ 476",
    "HELD": [
        "Appeal dismissed.",
        "(1) The judge had been entitled to find, on the evidence, that S&#8217;s oxygen saturation must have recovered on the ward during the night, and well before 06.00. (2) The lack of vital signs monitoring by nursing staff did not involve questions of diagnosis and treatment. The risk had been that S might not in fact have had a satisfactory normal pulse, temperature or blood pressure, but the judge had accepted that, at the relevant time, on the evidence they would have been within normal limits. As the risks involved were not of the kind that fell for consideration under the principles set out in Bolitho , they were therefore irrelevant, Bolitho considered. The nurse&#8217;s opinion, that it had been within proper nursing competence to leave S without making those observations, had a logical basis, in that it had been reasonable to decide to let a patient who had had little sleep since his operation continue to sleep. It was plain that the nurse had weighed up the risks and benefits. (3) It was clear that the judge had dealt with degrees of rousability. The judge&#8217;s finding as regards S&#8217;s rousability after 06.00, which was critical to the issue of causation and to his conclusions, had a firm evidential base, and had not been shown to be wrong. The judge had been entitled to accept the expert anaesthetist&#8217;s opinion as (a) the judge had been entitled to regard him as in general the more persuasive of the expert anaesthetists; (b) expert witnesses from other disciplines had deferred to the anaesthetists on the critical issues in the instant case; (c) the preferred expert had experience of the effect of morphine in the quantities taken by S on consciousness and levels of sedation. He was therefore entitled to say, based on his experience and opinion, that the amount of morphine taken by S would not make a patient such as him deeply unconscious; (d) if morphine did suppress the gag and cough reflex, it was not illogical for it to do so when the effect on a patient&#8217;s consciousness was less than profound, because a reflex was an action or function that occurred apart from consciousness; (e) the preferred expert&#8217;s evidence was supported by that of another expert, who had referred to S&#8217;s breathing rate as indicative that his consciousness was not severely depressed."
    ],
    "ABSTRACT": [
        "The appellant (S) appealed against the dismissal of his negligence claim against the respondent hospital (B) in respect of personal injuries sustained after a routine knee operation.",
        "Following the successful performance of the operation, during which S was given a general anaesthetic, S was taken to a recovery area, where it was noted that his oxygen saturation levels had dropped to 90 per cent. S was nonetheless discharged to a hospital ward, where he remained overnight. S was able to self-administer morphine. At 06.00, the nursing staff observed that S was asleep and, as he had not slept for most of the night, decided not to wake him to carry out vital signs monitoring. He subsequently suffered severe and permanent hypoxic brain damage which the parties agreed had resulted from regurgitated gastric contents being aspirated into his lungs. Because S was in a deep sleep and had been affected by the morphine, his gag reflex had been impaired. The judge below had found that in deciding not to perform vital signs monitoring, the nursing staff had exercised reasonable clinical judgement, in accordance with a reasonable body of nursing opinion. Furthermore, based on the opinion evidence of a preferred anaesthetist expert, the judge had found that even if the nurses had carried out the vital signs observations, they would have been able to rouse S, but the aspiration and resulting brain damage would still have occurred.",
        "S submitted that (1) the cause of the injury could be traced back to negligence in the recovery room following the operation, when oxygen saturation was measured at 90 per cent, but no remedial action was taken. But for that initial negligence, S would not have been regarded as a routine patient and his levels of consciousness would have been monitored; (2) the judge had been wrong to accept a nurse&#8217;s evidence that it was reasonably justifiable nursing practice to have left S to sleep without monitoring, which should have included observations on his levels of consciousness and rousability. That monitoring would have detected a reduced level of consciousness in time to take remedial action before the brain damaging aspiration occurred. Based on the principles propounded in Bolitho (Deceased) v City and Hackney HA [1998] A.C. 232, the judge should have rejected the nurse&#8217;s opinion as not having a logical basis, and therefore not representing a body of responsible opinion, as the risks of not performing those observations had far outweighed any risk of performing them; (3) the judge had erred in failing to recognise that there were degrees of rousability, and that S&#8217;s consciousness should have been assessed with this in mind. Specifically, the judge had been wrong to accept and prefer the opinion evidence of the expert anaesthetist, that although the morphine had suppressed the gag and cough reflex, it would not have made S unrousable. S&#8217;s level of consciousness could be judged from the fact that he did not cough or wake up when he vomited."
    ],
    "COUNSEL": "For the appellant: John Grace QC, Laura Davidson. For the respondent: Susan Rodway QC, Vikram Sachdeva.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Personal Injury",
        "Brain Damage",
        "Breach of Duty of Care",
        "Causation",
        "Clinical Negligence",
        "Expert Evidence",
        "Hospitals"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Personal Injury &mdash; Brain Damage &mdash; Breach of Duty of Care &mdash; Causation &mdash; Clinical Negligence &mdash; Expert Evidence &mdash; Hospitals",
    "SUMMARY": [
        "In circumstances where, following a failure by nursing staff to monitor a patient&#8217;s vital signs following a routine knee operation, the patient had suffered brain damage as a result of vomit aspirating into his lungs, the judge had been entitled to rely on the opinion evidence of an anaesthetist expert witness in finding that there was no causative link between the omission and the injury."
    ],
    "COURT": "EWCA",
    "CITATION": "Sutcliffe v BMI Healthcare [2007] EWCA Civ 476",
    "NUMBER": "357",
    "YEAR": "2007"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Phipps v Rochester Corporation",
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Hussain v Lancaster CC",
        "(wl) W v Essex County Council and Another",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Jolley v Sutton LBC",
        "(wl) Thompson v Smiths Shiprepairers (North Shields) Ltd",
        "(wl) Hughes v Lord Advocate",
        "(wl) Harris v Perry and another",
        "(wl) Lamb v Camden LBC",
        "(wl) McDermid v Nash Dredging and Reclamation Co Ltd"
    ],
    "NAME": "(wl) Pierce v Doncaster MBC",
    "JUDGE": "Sedley LJ; Hughes LJ; Hedley J",
    "CIT": "[2008] EWCA Civ 1416",
    "HELD": [
        "Appeal allowed in part.",
        "(1) The judge&#8217;s conclusion that it had been negligent to return P was founded upon expert evidence that stated that no reasonable local authority, properly assessing the case, could have reached a decision to permit return, and that the only proper course would have been to seek compulsory powers for P to remain in care if M did not agree. It was clear that the judge had applied the relevant tests, and such a conclusion was not inconsistent with the proposition that care proceedings would not necessarily have succeeded following various later incidents. Accordingly, there was evidential support for the judge&#8217;s conclusion. (2) The judge had also held that if P had not been returned home when he was, it was likely that he would have remained in care indefinitely. On the evidence, it was clear that everyone proceeded upon the basis that if the authority ought not to have returned P when it did, there was no realistic scope for a later return. Further, there had been no evidence from the authority that, had P not been returned, there would have been an attempt to return him later. (3) Although the instant case was a case of neglect rather than that of violence or abuse, the foreseeable loss had been injury through bad parenting, and it was impossible to say that the judge&#8217;s award lay outside the bracket properly available to him. (4) The judge had held that P&#8217;s knowledge of the authority&#8217;s breach was through the consideration of his care records, that he had only been able to obtain shortly before he issued the proceedings, and therefore he was within the limitation period. However, P had requested his file several years earlier, and the authority had offered to pay for his train fare for him to go and view them, but he failed to take up the appointments. Accordingly, it was clear that P had had constructive knowledge under s.14(3) of the 1980 Act, and his claim was out of time. It followed that the matter would be remitted to consider the issue of discretionary extension of time under s.33 of the 1980 Act."
    ],
    "ABSTRACT": [
        "The appellant local authority appealed against a decision that it had negligently returned the respondent (P) to his family after a period in care as an infant.",
        "P had been born into an emotionally and financially unstable household. His mother and father (M and F) were not married to one another, but were living together, although they had periods of brief separation. During a hospital visit when P was around six months old, he had showed signs of neglect, and for the second time he was taken into voluntary care under the Children Act 1948 s.1. Whilst P was still in care, it was clear that M and F&#8217;s situation was unsatisfactory. Their house was often dirty. F was usually out of work and went to prison at one point. F also failed to visit P, and M&#8217;s visits were occasional and disorganised. At about 14 months old P was returned to his family, where he lived until he left home at the age of 14 to fend for himself. He showed signs of personality disorder. His behaviour was sexualised and included living rough as a rent boy, and there were episodes of theft and arson. P claimed that in the years following his return to his family he suffered indifference, neglect and periodic violence, and in his late twenties he claimed damages for the local authority&#8217;s failure to keep him in care. The court held that, in the circumstances, the authority had been negligent. The issues in the instant case were whether (i) there was a basis for finding a breach of duty when P was returned to his home; (ii) if so, there was a basis for finding that the breach caused P to remain in his family for years when otherwise he would have not; (iii) if so, damages for injury by violence as distinct from negligence were recoverable; (iv) the trial judge misdirected himself upon the Limitation Act 1980 s.14(3)."
    ],
    "COUNSEL": "For the appellant: Michael Kent QC, Catherine Foster. For the respondent: Elizabeth-Anne Gumbel QC, H Witcomb.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Local Government",
        "Civil Procedure",
        "Negligence",
        "Breach of Duty of Care",
        "Children'S Welfare",
        "Limitations",
        "Local Authorities' Powers and Duties",
        "Negligence",
        "Social Work Records"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Local Government &mdash; Civil Procedure &mdash; Negligence &mdash; Breach of Duty of Care &mdash; Children'S Welfare &mdash; Limitations &mdash; Local Authorities' Powers and Duties &mdash; Negligence &mdash; Social Work Records",
    "SUMMARY": [
        "Where an individual who had suffered neglect from his family as an infant had obtained his care records from the local authority and subsequently issued proceedings on the grounds that the authority had negligently failed to take him into care when he was younger, the individual had had constructive knowledge of the authority&#8217;s breach of care under the Limitation Act 1980 s.14(3) several years earlier, as he had been given the opportunity to see the care records previously, but had declined to do so."
    ],
    "COURT": "EWCA",
    "CITATION": "Pierce v Doncaster MBC [2008] EWCA Civ 1416",
    "NUMBER": "358",
    "YEAR": "2008"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) JD v East Berkshire Community Health NHS Trust",
        "(wl) Chester v Afshar",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Barker v Corus (UK)",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Barnett v Chelsea & Kensington Hospital Management Committee",
        "(wl) Sutcliffe v BMI Healthcare",
        "(wl) Wooten v J Docter",
        "(wl) Jobling v Associated Dairies",
        "(wl) Bailey v Ministry of Defence",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Joyce v O'Brien"
    ],
    "NAME": "(wl) Montgomery v Lanarkshire Health Board",
    "JUDGE": "Lord Neuberger PSC; Lady Hale DPSC; Lord Kerr JSC; Lord Clarke JSC; Lord Wilson JSC; Lord Reed JSC; Lord Hodge JSC",
    "CIT": "[2015] UKSC 11",
    "HELD": [
        "Appeal allowed.",
        "(1) Lord Scarman&#8217;s dissenting judgment in Sidaway took as a starting point the patient&#8217;s basic human right to make his own decision. He held that if a patient suffered damage as a result of an undisclosed risk which would have been disclosed by a doctor exercising reasonable care to respect the patient&#8217;s right to decide whether to incur the risk, and the patient would have avoided the injury if the risk had been disclosed, then the patient would have a cause of action based in negligence. In England and Wales, lower courts had tacitly ceased to apply the Bolam test in relation to the advice given by doctors to their patients, and had effectively adopted Lord Scarman&#8217;s approach, Pearce v United Bristol Healthcare NHS Trust [1999] E.C.C. 167 approved, Wyatt v Curtis [2003] EWCA Civ 1779 considered. In Chester v Afshar [2004] UKHL 41, [2005] 1 A.C. 134, Lord Walker observed that during the time which had elapsed since Sidaway , the importance of personal autonomy had been more widely recognised, and that, in making a decision which might have a profound effect on her health and wellbeing, a patient was entitled to information and advice about possible alternative or variant treatments, Chester applied. Recent guidance issued by the Department of Health and the General Medical Council had treated Chester as the leading authority. It had become increasingly clear that the paradigm of the doctor-patient relationship implicit in the speeches in Sidaway had ceased to reflect the reality and complexity of the way in which healthcare services were provided, or the way in which the providers and recipients of such services viewed their relationship. Under the stimulus of the Human Rights Act 1998, the courts had become increasingly conscious of the extent to which the common law reflected fundamental values, including the value of self-determination. The analysis of the law by the majority in Sidaway was unsatisfactory, in so far as it treated the doctor&#8217;s duty to advise the patient of the risks of proposed treatment as falling within the scope of the Bolam test, subject to two qualifications of that general principle, neither of which was fundamentally consistent with that test. There was no reason to perpetuate the application of the Bolam test in that context any longer. An adult person of sound mind was entitled to decide which, if any, of the available forms of treatment to undergo, and her consent had to be obtained before treatment interfering with her bodily integrity was undertaken. The doctor was under a duty to take reasonable care to ensure that the patient was aware of any material risks involved in any recommended treatment, and of any reasonable alternative or variant treatments. The test of materiality was whether, in the circumstances, a reasonable person in the patient&#8217;s position would be likely to attach significance to the risk, or the doctor was or should reasonably be aware that the particular patient would be likely to attach significance to it (see paras 39-87 of judgment). (2) There was no doubt that it was incumbent on C to advise M of the substantial risk of shoulder dystocia if a vaginal delivery were attempted, and to discuss with her the alternative of a caesarean section. The Court of Session had erred in focusing upon the consequent risk that the baby might suffer a grave injury, which was relatively small (para.94). (3) There was a compelling reason for concluding that the Court of Session had failed to consider relevant evidence in relation to causation, Thomas v Thomas [1947] A.C. 484 considered. The only conclusion available was that, had C advised M of the risk of shoulder dystocia and discussed with her dispassionately the potential consequences, and the alternative of an elective caesarean, M would probably have opted for the caesarean. It was not in dispute that the baby would then have been born unharmed (paras 96-104)."
    ],
    "ABSTRACT": [
        "The appellant (M) appealed against a decision ([2013] CSIH 3, 2013 S.C. 245) upholding the dismissal of her claim in negligence brought against the respondent health board in relation to her antenatal care.",
        "M had been treated by a consultant obstetrician (C) during her pregnancy because she was diabetic, and was therefore likely to have a large baby. The risk of shoulder dystocia occurring was 9 to 10 per cent, but C did not inform M of the risk because, in her estimation, the risk of a grave problem for the baby arising as a result of shoulder dystocia was very small. During the delivery, shoulder dystocia occurred and the baby was deprived of oxygen due to occlusion of the umbilical cord. He was born with severe disabilities. It was M&#8217;s case that she should have been advised about the risk of shoulder dystocia, and of the alternative possibility of delivery by caesarean section. The Court of Session rejected that argument, following the approach in Sidaway v Board of Governors of the Bethlem Royal Hospital [1985] A.C. 871, namely that the question of whether a doctor&#8217;s omission to advise a patient of risks involved in treatment amounted to a breach of duty of care should be decided primarily on the basis of expert medical evidence, applying the Bolam test. It also concluded that, even if M had been advised about the risk of serious harm to her baby as a consequence of shoulder dystocia, she would not have opted for a caesarean."
    ],
    "FLAGS": [
        "Approved",
        "Hale",
        "Neuberger"
    ],
    "COUNSEL": "For the appellant: James Badenoch QC, Colin J MacAulay QC, Lauren Sutherland. For the respondent: Rory Anderson QC, Neil R Mackenzie. For the intervener: Andrew Smith QC.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Health",
        "Birth Defects",
        "Bolam Test",
        "Causation",
        "Clinical Negligence",
        "Consent to Treatment",
        "Doctors",
        "Duty of Care",
        "Medical Advice",
        "Patients' Rights",
        "Risk",
        "Scotland"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Health &mdash; Birth Defects &mdash; Bolam Test &mdash; Causation &mdash; Clinical Negligence &mdash; Consent to Treatment &mdash; Doctors &mdash; Duty of Care &mdash; Medical Advice &mdash; Patients' Rights &mdash; Risk &mdash; Scotland",
    "SUMMARY": [
        "The analysis of the law by the majority in Sidaway v Board of Governors of the Bethlem Royal Hospital [1985] A.C. 871 was unsatisfactory. An adult person of sound mind was entitled to decide which, if any, of the available forms of treatment to undergo, and her consent had to be obtained before treatment interfering with her bodily integrity was undertaken. Doctors were under a duty to take reasonable care to ensure that patients were aware of any material risks involved in any recommended treatment, and of any reasonable alternative or variant treatments."
    ],
    "COURT": "UKSC",
    "CITATION": "Montgomery v Lanarkshire Health Board [2015] UKSC 11",
    "NUMBER": "359",
    "YEAR": "2015"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Orchard v Lee",
        "(wl) Kent v Griffiths",
        "(wl) Jolley v Sutton LBC",
        "(wl) Harris v Perry and another",
        "(wl) Revill v Newbery",
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Harvey v Plymouth City Council",
        "(wl) Pitts v Hunt",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Hughes v Lord Advocate"
    ],
    "NAME": "(wl) Mullin v Richards",
    "JUDGE": "Butler-Sloss LJ; Hutchison LJ; Sir John Vinelott",
    "CIT": "[1998] 1 WLR 1304",
    "HELD": [
        "allowing the appeal, that the test of foreseeability in this context is whether an ordinarily prudent and reasonable 15 year old schoolgirl in R&#8217;s situation would have realised that her actions gave rise to a risk of injury, McHale v Watson (1966) 115 C.L.R. 199, [1965] C.L.Y. 3987 followed, and Gough v Thorne [1966] 1 W.L.R. 1387 considered. A mere possibility of injury was not enough, Bolton v Stone [1951] A.C. 850 applied. The question of foreseeability must be judged against the evidential background concerning the prevalence of the practice of fencing with plastic rulers, the absence of prohibition, the absence of warning against it or of its dangers and the absence of any evidence of any previous injury. Further there was no evidence to support the judge&#8217;s finding that M and R were guilty of using misdirected and dangerous force over and above that which was inherent in play fencing. Accordingly, the judge erred in finding negligence against R without there being material on which he could properly do so."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For R: Richard Lee. For M: Michael Stephens.",
    "CATEGORIES": [
        "Negligence",
        "Children",
        "Foreseeability",
        "Personal Injury"
    ],
    "CATEGORY": "Negligence &mdash; Children &mdash; Foreseeability &mdash; Personal Injury",
    "SUMMARY": [
        "personal injuries; foreseeability; whether risk foreseeable to 15 year old girl",
        "In February 1988 M and R, two 15 year old schoolgirls, were play fighting with plastic rulers during a class when one of the rulers snapped and a fragment of plastic entered M&#8217;s right eye causing her to lose all sight in that eye. M commenced proceedings in negligence against R and the education authority. The claim was dismissed against the education authority and upheld against R on the basis that she must have appreciated that what she was doing was dangerous, that she had used excessive violence and that it was readily foreseeable that her conduct might cause an eye injury to M. A 50 per cent reduction was made for contributory negligence. R appealed against the finding of negligence against her contending, inter alia, that there was not sufficient evidence for the finding that it was readily foreseeable that R&#8217;s conduct might cause an injury of the type that M suffered."
    ],
    "COURT": "EWCA",
    "CITATION": "Mullin v Richards [1998] 1 WLR 1304",
    "NUMBER": "360",
    "YEAR": "1998"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Mullin v Richards",
        "(wl) Barber v Somerset County Council",
        "(wl) The Scout Association v Barnes",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) Harvey v Plymouth City Council",
        "(wl) Joyce v O'Brien",
        "(wl) Harris v Perry and another"
    ],
    "NAME": "(wl) Orchard v Lee",
    "JUDGE": "Waller LJ; Rimer LJ; Aikens LJ",
    "CIT": "[2009] EWCA Civ 295",
    "HELD": [
        "Appeal dismissed.",
        "L&#8217;s conduct was simply the conduct to be expected of a 13-year-old boy playing tag. No part of his conduct was outside the norm, let alone a significant degree outside it, nor was he breaking any rules. Therefore, his conduct could not be described as being careless to a very high degree, and it was clear that he was not culpable, Mullin v Richards [1998] 1 W.L.R. 1304 and Blake v Galloway [2004] EWCA Civ 814, [2004] 1 W.L.R. 2844 applied, McHale v Watson 115 C.L.R. 199 considered. Further, a reasonable 13-year-old boy would not have anticipated that there was a sufficient probability that the harm actually caused would have resulted, Bolton v Stone [1951] A.C. 850 considered."
    ],
    "ABSTRACT": [
        "The appellant (O) appealed against a decision of the county court to dismiss her claim for personal injury against the respondent schoolboy (L).",
        "L was 13 years old. He was playing tag in the courtyard and part of a walkway that was the designated social area at his school. While he was running backwards he collided with O, who was the lunchtime supervisor, causing her serious injuries. There was no rule against running in the area where the incident occurred. The court held that the incident was a simple accident caused by horseplay. It stated that no ordinarily prudent and reasonable 13-year-old boy would reasonably have foreseen the risk of injury by virtue of the game of tag in question."
    ],
    "COUNSEL": "For the appellant: Anthony Coleman. For the respondent: Benjamin Browne QC, Stephen Archer.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Negligence",
        "Children",
        "Duty of Care",
        "Foreseeability",
        "Personal Injury"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Negligence &mdash; Children &mdash; Duty of Care &mdash; Foreseeability &mdash; Personal Injury",
    "SUMMARY": [
        "A 13-year-old schoolboy was not liable for personal injury caused to a lunchtime supervisor when he collided with her whilst playing a game of tag in an outdoor area. The schoolboy&#8217;s conduct was simply the conduct to be expected of a 13-year-old boy, and therefore did not amount to conduct in which he would reasonably foresee that there was likely to be injury beyond that normally occurring."
    ],
    "COURT": "EWCA",
    "CITATION": "Orchard v Lee [2009] EWCA Civ 295",
    "NUMBER": "361",
    "YEAR": "2009"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Boumedien v Delta Display Ltd",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Evans v Triplex Safety Glass",
        "(wl) Pierce v Doncaster MBC",
        "(wl) Z and others v United Kingdom",
        "(wl) Coventry v Lawrence (no 2)",
        "(wl) Patchett v Swimming Pool Trades Association",
        "(wl) Dorset Yacht Co Ltd v Home Office",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Chadwick v British Railways Board",
        "(wl) LMS International v Styrene Packaging Ltd",
        "(wl) Aswan Engineering v Lupdine"
    ],
    "NAME": "(wl) Knight v Home Office",
    "CIT": "[1990] 1 WLR 577",
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1990",
    "JUDGE": "Evans J",
    "NUMBER": "362",
    "CATEGORIES": [
        "Civil Procedure",
        "Costs",
        "Misconduct",
        "Plaintiffs"
    ],
    "CATEGORY": "Civil Procedure &mdash; Costs &mdash; Misconduct &mdash; Plaintiffs",
    "SUMMARY": [
        "Costs; misconduct; application to reduce costs; whether notice of application to be given to plaintiff prior to transaction of costs",
        "Where an application is to be made at taxation under Rules of the Supreme Court Ord.62 r.28 for costs to be reduced because of the plaintiff&#8217;s misconduct, the plaintiff should be given notice to enable the plaintiff to attend and to enable the plaintiff and his advisers to propose a response."
    ],
    "CITATION": "Knight v Home Office [1990] 1 WLR 577",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) JD v East Berkshire Community Health NHS Trust",
        "(wl) Sutcliffe v BMI Healthcare",
        "(wl) Liverpool Womens Hospital NHS Foundation Trust v Ronayne",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Selwood v Durham CC",
        "(wl) Joyce v O'Brien",
        "(wl) Gregg v Scott",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Barber v Somerset County Council",
        "(wl) Wooten v J Docter"
    ],
    "NAME": "(wl) Barnett v Chelsea & Kensington Hospital Management Committee",
    "CIT": "[1969] 1 QB 428",
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1969",
    "JUDGE": "Nield J",
    "NUMBER": "363",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Professions",
        "Health",
        "Causation",
        "Duty of Care",
        "Hospitals",
        "Medical Negligence",
        "Poisoning"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Professions &mdash; Health &mdash; Causation &mdash; Duty of Care &mdash; Hospitals &mdash; Medical Negligence &mdash; Poisoning",
    "SUMMARY": [
        "Medical practitioners; liability of hospital; casualty department",
        "A hospital authority which provides a casualty department owes a duty of care towards persons presenting themselves there complaining of illness. The deceased drank tea, which had, unknown to him, been contaminated with arsenic; he attended at the casualty department of a hospital complaining that he had been vomiting for three hours after drinking tea. The casualty doctor failed to examine him but sent a message that he should report to his own doctor. About five hours later he died. On his widow&#8217;s action for damages, held, (1) that the hospital authority owed a duty of care; (2) that the doctor was negligent in failing to examine and admit the deceased, and accordingly there had been a breach of that duty; but (3) that on the facts the deceased&#8217;s condition was such that he must have died despite any medical attention which the hospital could have given, so that causation was not established and the claim failed. (Dicta of A. L. Smith L.J. in Le Lievre v Gould [1893] 1 Q.B. 491 applied; Cassidy v Ministry of Health [1951] 2 K.B. 343 distinguished.)"
    ],
    "CITATION": "Barnett v Chelsea &amp; Kensington Hospital Management Committee [1969] 1 QB 428",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Coltman v Bibby Takers Ltd",
        "(wl) Vowles v Evans & the Welsh RFU",
        "(wl) Lewis v Daily Telegraph Ltd",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Reynolds v Times Newspapers Ltd",
        "(wl) Lister v Hesley Hall",
        "(wl) McLoughlin v O'Brian",
        "(wl) Harris v Perry and another",
        "(wl) JGE v English Province of Our Lady of Charity",
        "(wl) Baturina v Times Newspapers",
        "(wl) Montgomery v Lanarkshire Health Board"
    ],
    "NAME": "(wl) Cook v Lewis",
    "JUDGE": "Laws LJ; Burnett LJ; Sir Colin Rimer",
    "CIT": "[2015] EWCA Civ 1003",
    "HELD": [
        "Appeal dismissed.",
        "(1) Both AH and the United Nations High Commissioner for Refugees (UNHCR), intervening, submitted that post-offence events were material to the art.1F(b) decision. AH argued that such events could properly inform the judgment of whether the offence was serious, while the UNHCR submitted that words should be read into art.1F(b) so that it could be disapplied where to do so would be consistent with the Convention&#8217;s objects and purposes. Both arguments meant that the decision-maker would have to make a series of interlocking evaluations of matters such as the gravity of the offence, the passage of time, the age of the criminal at the time of the offence, the extent to which he posed a danger to the receiving state, any punishment he had suffered, and any atonement he had made. That was a wide-ranging and potentially open-ended exercise which amounted to the kind of proportionality assessment ruled out by the European Court of Justice in the parallel context of Directive 2004/83 art.12. Moreover, the various provisions of art.1 required the decision-maker to decide matters of objective fact and then to apply the exclusion or not, as the case dictated. They did not require him to evaluate the individual&#8217;s merits. The construction favoured by AH and the UNHCR would involve the decision-maker exercising a power retained by the Convention itself, namely judging whether the asylum seeker should obtain protection. The Convention did not authorise an inquiry into the asylum seeker&#8217;s character. Rather, it presumed that to give refugee status to anybody who had committed a crime of the stipulated gravity posed a risk to the systemic integrity and viability of refugee law. The mandatory, defining nature of art.1F(b) was confirmed by the Convention&#8217;s travaux preparatoires, and the Supreme Court had held that the exclusion clauses in the Convention had to be restrictively interpreted and cautiously applied, Al-Sirri v Secretary of State for the Home Department [2012] UKSC 54, [2013] 1 A.C. 745 followed. The Supreme Court of Canada had, by a majority, rejected identical submissions to those of AH and the UNHCR in Febles [2014] 3 SCR 431, and its reasoning would be adopted by the instant court, Febles considered (see paras 9-10, 14-15, 18-26, 28-33 of judgment). (2) To justify exclusion under art.1F(b), the offence had to be of the stipulated gravity. The phrase &#8220;serious crime&#8221; denoted especially grave offending. The word &#8220;serious&#8221; needed no further qualification, and the draftsman had not intended that it should be qualified by the word &#8220;particularly&#8221;, AH (Algeria) v Secretary of State for the Home Department [2012] EWCA Civ 395, [2012] 1 W.L.R. 3469 considered (paras 34-36). (3) There was nothing to suggest that the Upper Tribunal&#8217;s factual conclusions did not properly reflect the findings of the French court, or that the French court was not entitled to make the findings it did. The Upper Tribunal had properly accorded a significant degree of respect to the French court&#8217;s decision, but had also recognised that it alone had to decide whether AH&#8217;s conduct was sufficiently serious to justify exclusion. It concluded that he had knowingly been giving succour to a terrorist cause and had been doing so as a senior participant in the conspiracy. Although its findings lacked particularity, it was entitled to reach the conclusion it did. If it was wrong to presume that mere membership of an organisation with terrorist aims was enough for art.1F(b) to bite, it was also wrong to presume that any particular level of overt activity had to be shown, R. (on the application of JS (Sri Lanka)) v Secretary of State for the Home Department [2010] UKSC 15, [2011] 1 A.C. 184 followed (paras 37-39, 45-47)."
    ],
    "ABSTRACT": [
        "The appellant (AH) appealed against a decision of the Upper Tribunal upholding the first respondent secretary of state&#8217;s decision to exclude him from the protection of the Convention relating to the Status of Refugees 1951 (United Nations).",
        "AH was an Algerian national who had been convicted and imprisoned in France for falsifying administrative documents and being a member of an association formed with a view to preparing acts of terrorism. Following his release, he applied for asylum in the UK. He was granted discretionary leave, it being accepted that he had a well-founded fear of persecution in Algeria. However, the secretary of state excluded him from the protection of the Convention pursuant to art.1F(b), on the basis that he had been convicted of a serious criminal offence in France. The Upper Tribunal rejected his appeal against the exclusion.",
        "AH submitted that the Upper Tribunal had erred by not (1) taking into account events since the commission of the offence which expiated his discredit and should have saved him from exclusion; (2) construing the word &#8220;serious&#8221; in art.1F(b) as meaning &#8220;particularly serious&#8221;; (3) finding facts which showed that he had such a degree of personal involvement in the crime as to justify his exclusion."
    ],
    "COUNSEL": "For the appellant: Raza Husain QC, Naina Patel. For the first respondent: Alan Payne. For the second respondent: Michael Fordham QC, Samantha Knights, Jason Pobjoy.",
    "CATEGORIES": [
        "Immigration",
        "Exclusion",
        "Foreign Criminals",
        "Interpretation",
        "Refugees"
    ],
    "CATEGORY": "Immigration &mdash; Exclusion &mdash; Foreign Criminals &mdash; Interpretation &mdash; Refugees",
    "SUMMARY": [
        "When deciding whether the Convention relating to the Status of Refugees 1951 (United Nations) art.1F(b) applied to exclude an asylum seeker from the protection of the Convention on the basis that he had committed a serious non-political crime outside the country of refuge, the secretary of state was not to take account of expiating events occurring after the commission of the offence."
    ],
    "COURT": "EWCA",
    "CITATION": "Cook v Lewis [2015] EWCA Civ 1003",
    "NUMBER": "364",
    "YEAR": "2015"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Haseldine v Daw",
        "(wl) Kent v Griffiths",
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) W v Essex County Council and Another",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Swinney v Chief Constable of Northumbria"
    ],
    "NAME": "(wl) Jobling v Associated Dairies",
    "JUDGE": "Lady Paton; Lady Dorrian; Lord Drummond Young",
    "CIT": "[2016] CSIH 3",
    "HELD": [
        "Reclaiming motion allowed.",
        "(1) Recent authorities from the House of Lords and Supreme Court had emphasised the requirement for a careful approach to the liability of public authorities to private individuals, the circumstances of the third case in Capital were very similar to the circumstances in the present case, and the Court of Appeal&#8217;s conclusion, that the fire brigade was not liable, had been specifically approved by the House of Lords in Gorringe v Calderdale Metropolitan Borough Council [2004] 1 W.L.R. 1057 and had not been criticised by the Supreme Court in Michael v Chief Constable of South Wales Police [2015] 2 W.L.R., and the carefully developed, policy based, more restrictive approach, approved and adopted by the Supreme Court, had to be followed by the Scottish courts, contrary to the views expressed in Duff v Highlands and Islands Fire Board, 1995 S.L.T. 1362, Gibson v Orr, 1999 S.C. 420 and Burnett v Grampian Fire and Rescue Services, 2007 S.L.T. 61 but in keeping with Mackay v Scottish Fire and Rescue Service, 2015 S.L.T. 342; (i) the fire service ought not to be regarded as having undertaken an assumption of responsibility, in the sense defined in the authorities, on the basis of answering a 999 call, attending the scene of a fire or taking steps to extinguish a fire or to save lives or property, as those actions represented them carrying out their statutory functions and public duty; (ii) general policy considerations required be taken into account; (iii) while analogies might be drawn with the provision of medical services, or the ambulance service, they were of limited assistance, (iv) there was no general duty to rescue, the fire service had been held not to be liable if they failed to attend a fire, therefore, it seemed unprincipled to suggest that a fire service which did attend a fire and sought to extinguish it could be held liable for their actions, other than in circumstances where they negligently inflicted fresh injury; and (v) the line of English authority relevant to the liability of public bodies including fire services was well established and of considerable authority and it would be unfortunate to adopt a different approach in Scotland, East Suffolk Rivers Catchment Board v Kent [1941] A.C. 74, Capital &amp; Counties Plc , Gorringe , Mitchell v Glasgow City Council, 2009 S.C. (HL) 21 and Michael , considered , Duff , Gibson and Burnett , disapproved and Mackay , approved . (2) In the present case, S owed a duty of care to the general public, including H but that duty was to take care not to negligently inflict a fresh injury; there were neither averments that S had made matters worse or that they had inflicted a fresh injury when they had arrived at, and dealt with, the fire, nor of circumstances which could properly be categorised as an assumption of responsibility giving rise to a common law duty to exercise reasonable care, and further, it would not be fair, just or reasonable to impose a duty of care of the scope contended for by H on S, thus H&#8217;s case would necessarily fail even were all their averments proved, and the case as pled was irrelevant. Observed , per Lord Drummond Young, (1) that a distinction might properly be drawn between injury to the person and damage to property, consequently, it was hoped that in an appropriate case the law might develop in such a way that, at least in clear cases where action could be taken without danger to the rescuer, the officers of a public service such as the fire service or the police were obliged to take action to rescue persons in danger; (2) that the law had moved in the direction of attaching greater significance to the more traditional categorisation of distinct and recognisable situations as guides to the existence, scope and limits of the varied duties of care which the law imposed but rules derived from existing case law ought not to be applied mechanically to new situations, instead it should be asked whether, as a matter of policy directed to the specific situation under consideration, a new analysis was required, which would result in a law of negligence that was less unified than in the past but which dealt more fairly with individual cases."
    ],
    "ABSTRACT": [
        "A fire service (S) reclaimed against a decision of the Lord Ordinary allowing a proof before answer in an action of damages raised against S by the the heritable proprietors (H) of a farmhouse (F) for damages on the basis of S&#8217;s alleged negligence in extinguishing a fire at F (A J Allan (Blairnyle) Ltd v Strathclyde Fire Board [2014] CSOH 135).",
        "On 31 October 2008, S had extinguished a fire at F and had left the scene at approximately 3 pm. H averred that rotten timbers in the roof space had continued to smoulder such that the fire had reignited in the early hours of the morning on 1 November and F had burned down, and that once the fire had appeared to be extinguished, S ought to have used thermal imaging to locate any questionable areas and further ought to have maintained a regular check on F to ensure that the fire had truly been extinguished."
    ],
    "COUNSEL": "For the reclaimers: R Dunlop QC, E Campbell. For the respondents: Balfour.",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Fire Services",
        "Negligence",
        "Scotland"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Fire Services &mdash; Negligence &mdash; Scotland",
    "SUMMARY": [
        "Firefighters attending the scene of a fire did not owe a duty of care to the heritable proprietor where they had assumed responsibility for controlling and extinguishing the fire but had failed to do so; the carefully developed, policy based, more restrictive approach approved and adopted by the Supreme Court had to be followed by the Scottish courts, and the court had to disapprove of Duff v Highlands and Islands Fire Board, 1995 S.L.T. 1362, Gibson v Orr, 1999 S.C. 420 and Burnett v Grampian Fire and Rescue Services, 2007 S.L.T. 61."
    ],
    "COURT": "EWHC",
    "CITATION": "Jobling v Associated Dairies [2016] CSIH 3",
    "NUMBER": "365",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Sanderson v Hull",
        "(wl) Walker v Northumberland County Council",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Gregg v Scott",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Barker v Corus (UK)",
        "(wl) Phipps v Rochester Corporation",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Coltman v Bibby Takers Ltd",
        "(wl) Wooten v J Docter",
        "(wl) Gray v Thames Trains"
    ],
    "NAME": "(wl) Fairchild v Glenhaven Funeral Services Ltd",
    "JUDGE": "Lord Bingham of Cornhill; Lord Nicholls of Birkenhead; Lord Hoffmann; Lord Hutton; Lord Rodger of Earlsferry",
    "CIT": "[2002] UKHL 22",
    "HELD": [
        "allowing the appeal, that a claimant would be able to recover damages where he had been exposed to asbestos while working for more than one employer and there was no means of determining which exposure had caused the disease. The injustice that arose from the imposition of liability on an employer in such circumstances greatly outweighed the injustice of denying redress to the victim. Such a conclusion was consistent with authority, properly understood, and with principle, McGhee v National Coal Board [1973] 1 W.L.R. 1 and Wilsher v Essex AHA [1988] A.C. 1074 applied. Proof, on a balance of probabilities, that the wrongdoing of each employer had materially increased the risk to the employee that he might contract the disease was to be taken as proof that each employer had materially contributed to it."
    ],
    "FLAGS": [
        "Approved",
        "Bingham",
        "Hoffmann"
    ],
    "COUNSEL": "For Fa: Brain Langstaff Q.C. and Andrew Hogarth. For Fo and M: Sir Sydney Kentridge Q.C., David Allan Q.C. and Matthew Phillips. For W and A: Stephen Stewart Q.C., Michael Rawlinson and Sarah Spear. For S: Nigel Wilkinson Q.C. and William Vandyck.",
    "CATEGORIES": [
        "Health and Safety at Work",
        "Asbestosis",
        "Causation",
        "Damages",
        "Employers' Liability",
        "Industrial Diseases"
    ],
    "CATEGORY": "Health and Safety at Work &mdash; Asbestosis &mdash; Causation &mdash; Damages &mdash; Employers' Liability &mdash; Industrial Diseases",
    "SUMMARY": [
        "Claimants sought damages for asbestos induced mesothelioma - Claimants exposed to asbestos dust working for more than one employer could not show on balance of probabilities which exposure had caused disease - Usual &#8220;but for&#8221; test of causation should exceptionally be relaxed on policy grounds to allow claimants to recover.",
        "Following the decision of the Court of Appeal ([2001] EWCA Civ 1881, [2002] 1 W.L.R. 1052) in relation to a number of claims for damages in asbestos related cases, the issue before the House was whether the claimant would be able to recover damages where he had been exposed to asbestos while working for more than one employer and there were no means of determining which exposure had caused the disease. The Court of Appeal had found that such a claimant could not recover damages."
    ],
    "COURT": "UKHL",
    "CITATION": "Fairchild v Glenhaven Funeral Services Ltd [2002] UKHL 22",
    "NUMBER": "366",
    "YEAR": "2002"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Sutcliffe v BMI Healthcare",
        "(wl) Barker v Corus (UK)",
        "(wl) Bailey v Ministry of Defence",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Williams v University of Birmingham",
        "(wl) Selwood v Durham CC",
        "(wl) Sanderson v Hull",
        "(wl) Gregg v Scott",
        "(wl) Liverpool Womens Hospital NHS Foundation Trust v Ronayne",
        "(wl) Jolley v Sutton LBC",
        "(wl) Lennon v Commissioner of Police of the Metropolis",
        "(wl) Poppleton v Trustees of the Portsmouth Youth Activities Committee"
    ],
    "NAME": "(wl) Chester v Afshar",
    "JUDGE": "Lord Bingham of Cornhill; Lord Steyn; Lord Hoffmann; Lord Hope of Craighead; Lord Walker of Gestingthorpe",
    "CIT": "[2004] UKHL 41",
    "HELD": [
        "dismissing the appeal (Lords Bingham and Hoffmann dissenting), that a judgment in C&#8217;s favour could not be based on conventional causation principles. The &#8220;but for&#8221; test was satisfied since C would not have had the operation when she did if the warning had been given. But the risk of which she should have been warned was not created by the failure to warn. It was already there, as an inevitable risk of the operative procedure itself, however skillfully and carefully it was carried out. The risk was not increased, nor were the chances of avoiding it lessened, by what X had failed to say about it. However, the duty of a surgeon to warn of the dangers inherent in an operation was intended to help minimise the risk to the patient and was also intended to enable the patient to make an informed choice whether to undergo the treatment recommended and, if so, at whose hands and when. X had violated C&#8217;s right to choose for herself, even if he had not increased the risk to her. The function of the law was to enable rights to be vindicated and to provide remedies when duties had been breached. Unless that was done, the duty to warn would be a hollow one. On policy grounds the test of causation was satisfied in the instant case. The risk was within the scope of the duty to warn so that the injury could be regarded as having been caused, in the legal sense, by the breach of that duty, Chappel v Hart [1999] Lloyd&#8217;s Rep. Med. 223 and Fairchild v Glenhaven Funeral Services Ltd (t/a GH Dovener &amp; Son) [2002] UKHL 22, [2003] 1 A.C. 32 considered."
    ],
    "FLAGS": [
        "Approved",
        "Bingham",
        "Hoffmann"
    ],
    "COUNSEL": "For C: Adrian Whitfield Q.C. and Jacqueline Perry. For A: Martin Spencer Q.C. and Kristina Stern.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Personal Injury",
        "Advice",
        "Causation",
        "Clinical Negligence",
        "Duty to Warn",
        "Surgical Procedures"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Personal Injury &mdash; Advice &mdash; Causation &mdash; Clinical Negligence &mdash; Duty to Warn &mdash; Surgical Procedures",
    "SUMMARY": [
        "A neurosurgeon who failed to warn a patient of the small risk of injury inherent in surgery, even if properly performed, was liable to the patient when that risk eventuated, even though the risk was not increased by the failure to warn and the patient had not shown that she would never have had an operation carrying the same risk.",
        "The appellant (X), a consultant neurosurgeon, appealed against a finding ([2002] EWCA Civ 724, [2003] Q.B. 356) that he was liable in damages for his failure to warn the respondent (C) of a risk inherent in surgery that he had performed on her. C suffered repeated episodes of low back pain and had been referred for surgery to X, who was experienced in disc surgery. C underwent the surgery and suffered a rare complication known as cauda equina syndrome, a risk in respect of which X had failed to warn her in advance. The judge had not found that X had been negligent in the actual performance of the surgery. However, he had found that X had failed to warn C of the small risk that the operation could adversely affect her, and that had she been warned of the risk, she would not have undergone the surgery at the time she did."
    ],
    "COURT": "UKHL",
    "CITATION": "Chester v Afshar [2004] UKHL 41",
    "NUMBER": "367",
    "YEAR": "2004"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Badger v Ministry of Defence",
        "(wl) Sutcliffe v BMI Healthcare",
        "(wl) Phipps v Rochester Corporation",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Bailey v Ministry of Defence",
        "(wl) Chester v Afshar",
        "(wl) Barker v Corus (UK)",
        "(wl) Barnett v Chelsea & Kensington Hospital Management Committee",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Liverpool Womens Hospital NHS Foundation Trust v Ronayne",
        "(wl) JD v East Berkshire Community Health NHS Trust"
    ],
    "NAME": "(wl) Gregg v Scott",
    "JUDGE": "Lord Nicholls of Birkenhead; Lord Hoffmann; Lord Hope of Craighead; Lord Phillips of Worth Matravers; Baroness Hale of Richmond",
    "CIT": "[2005] UKHL 2",
    "HELD": [
        "dismissing the appeal (Lord Nicholls and Lord Hope dissenting), that (1) even if the quantification of future losses was conventionally decided on the evaluation of risks and chances, G had to show that the loss was consequential on injury caused by S&#8217;s negligence. Causation had to be shown on the balance of probabilities. On the judge&#8217;s findings it had not been shown that on the balance of probabilities the delay in commencing G&#8217;s treatment that was attributable to S&#8217;s negligence had affected the course of his illness or his prospects of survival, which had never been as good as even. (2) Liability for the loss of a chance of a more favourable outcome should not be introduced into personal injury claims. (3) (Per Lord Nicholls and Lord Hope) The significant reduction in the prospects of a successful outcome for G which S&#8217;s negligence caused was a loss for which G was entitled to be compensated. The fact that G was already suffering from illness at the date of S&#8217;s negligence, from which G had at that date significant prospects of recovery, provided him with a cause of action for the reduction in those prospects that resulted from the negligence. What had to be valued was what G had lost, and the principle on which that loss had to be calculated was the same, irrespective of whether the prospects were better or less than 50 per cent."
    ],
    "FLAGS": [
        "Approved",
        "Hale",
        "Hoffmann"
    ],
    "COUNSEL": "For the appellant: Simeon Maskey QC, Julian Matthews. For the respondent: Philip Havers QC, William Edis, David Mankell.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Damages",
        "Health",
        "Cancer",
        "Causation",
        "Clinical Negligence",
        "Damages",
        "Diagnosis",
        "Loss of Opportunity",
        "Lymph Vessels"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Damages &mdash; Health &mdash; Cancer &mdash; Causation &mdash; Clinical Negligence &mdash; Damages &mdash; Diagnosis &mdash; Loss of Opportunity &mdash; Lymph Vessels",
    "SUMMARY": [
        "Liability for the loss of a chance of a more favourable outcome should not be introduced into clinical negligence claims.",
        "The appellant (G) appealed against a decision ([2002] EWCA Civ 1471, [2003] Lloyd&#8217;s Rep. Med. 105) that his medical negligence claim against the defendant doctor (S) failed. G had visited S because he had a lump under his arm. S negligently misdiagnosed G&#8217;s condition as benign. A year later another general practitioner referred G to hospital for an examination and it was discovered that G had cancer of a lymph gland. By that time the tumour had spread to G&#8217;s chest. G suffered pain and had to undergo a course of chemotherapy. He was left with poor prospects of survival. G sued S, alleging that S should have referred him to hospital and that if S had done so his condition would have been diagnosed earlier and there would have been a high likelihood of a cure. The judge held that on the expert evidence the delay in diagnosis had reduced G&#8217;s chances of surviving for more than 10 years from 42 per cent to 25 per cent. He therefore dismissed G&#8217;s action because the delay had not deprived G of the prospect of a cure, meaning surviving more than 10 years, because, at the time of his misdiagnosis, G had less than a 50 per cent chance of surviving more than 10 years anyway. The Court of Appeal dismissed G&#8217;s appeal. G submitted that (1) the delay in diagnosis and treatment had caused physical injury, in the shape of the spread of the cancer before his therapy began, and the losses he had suffered were consequential on that physical damage; (2) apart from any other injury, the reduction in his chances of survival was itself a compensatable head of damage."
    ],
    "COURT": "UKHL",
    "CITATION": "Gregg v Scott [2005] UKHL 2",
    "NUMBER": "368",
    "YEAR": "2005"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Sutcliffe v BMI Healthcare",
        "(wl) Gregg v Scott",
        "(wl) Chester v Afshar",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Joyce v O'Brien",
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Wooten v J Docter",
        "(wl) Barker v Corus (UK)",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Taylor v A Novo Ltd (UK)"
    ],
    "NAME": "(wl) Bailey v Ministry of Defence",
    "JUDGE": "Waller LJ; Sedley LJ; Smith LJ",
    "CIT": "[2008] EWCA Civ 883",
    "HELD": [
        "Appeal dismissed.",
        "(1) On the evidence, the judge had been entitled to conclude that if B had been properly resuscitated overnight and if correctly cared for following the procedure at the MOD&#8217;s hospital she would have been subjected to a further intervention. (2) If all that was necessary, for the purpose of establishing the cause of B&#8217;s weakness, was a material contribution and if, for that material contribution to be established, it was sufficient to establish a contribution that was more than negligible then the judge&#8217;s conclusion could not be faulted. (3) It was enough for B to establish that, on the balance of probabilities, a lack of care made a material contribution, namely something greater than negligible, to the weakness of her condition, although that was not an application of the &#8220;but for&#8221; test. If the evidence demonstrated on a balance of probabilities that an injury would have occurred as a result of non-tortious cause or causes in any event, a claimant would have failed to establish that the tortious cause contributed, Hotson v East Berkshire HA [1987] A.C. 750 considered. If the evidence demonstrated that &#8220;but for&#8221; the contribution of the tortious cause the injury would probably not have occurred, the claimant would have discharged the burden. In a case where medical science could not establish the probability that &#8220;but for&#8221; an act of negligence the injury would not have happened but could establish that the contribution of the negligent cause was more than negligible, the &#8220;but for&#8221; test was modified, and the claimant would succeed. The instant case involved cumulative causes acting so as to create a weakness and thus the judge had applied the right test and was entitled to reach the conclusion he had reached, Fairchild v Glenhaven Funeral Services Ltd (t/a GH Dovener &amp; Son) [2002] UKHL 22, [2003] 1 A.C. 32 and Bonnington Castings Ltd v Wardlaw [1956] A.C. 613 applied, McGhee v National Coal Board [1973] 1 W.L.R. 1 considered and Wilsher v Essex AHA [1988] A.C. 1074 distinguished."
    ],
    "ABSTRACT": [
        "The appellant MOD appealed against a decision ([2007] EWHC 2913 (QB)) that it was liable in damages for brain damage suffered by the respondent (B).",
        "B had been a patient in a hospital managed by the MOD. B had undergone an unsuccessful procedure to remove a gallstone, the view of which had been obscured by considerable bleeding during the procedure. Following the procedure, there was a period of lack of care and in particular a failure to resuscitate. B was diagnosed as possibly developing pancreatitis. Her condition continued to deteriorate and she was subsequently transferred to an intensive care unit, where she underwent additional procedures, including surgery for massive bleeding to the liver. It was confirmed that she had pancreatitis. B was later moved to the renal ward of another hospital, where she aspirated her vomit, which led to cardiac arrest that caused her to suffer hypoxic brain damage. The judge held that the physical cause of B&#8217;s aspiration and subsequent cardiac arrest was her weakness and inability to react to her vomit, and that the contributory causes of the weakness was the negligent post-operative care at the MOD&#8217;s hospital and what flowed from that and the pancreatitis, a non-negligent cause, each of which had made a material contribution to her overall weakness.",
        "The MOD submitted that (1) the judge had been wrong to conclude that, but for the lack of post-operative care, a further procedure would have taken place, which would have saved all, or at least some, of the traumatic and life-threatening period and procedures that B had to endure following her transfer to the intensive care unit and would have avoided the considerable weakening of B; (2) if the judge rejected the evidence that it had been B&#8217;s weakened condition caused by catabolism that had prevented her responding in the normal way to vomiting, he had no other evidence to link the lack of care and what flowed from it with the occurrence of the vomiting and aspiration; (3) unless B could establish that but for the negligence of the MOD the brain damage would not have happened she could not succeed, and the pancreatitis was the mostly likely cause of the vomit and could have been a cause on its own of her inability to protect her airway."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Derek Sweeting QC. For the respondent: Christopher Gibson QC, Paul Dean.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Negligence",
        "Brain Damage",
        "Causation",
        "Clinical Negligence"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Negligence &mdash; Brain Damage &mdash; Causation &mdash; Clinical Negligence",
    "SUMMARY": [
        "In the circumstances, it was enough for a patient to establish that, on the balance of probabilities, a lack of post-operative care and what flowed from that made a material contribution, namely something greater than negligible, to the overall weakness of her condition that had caused her aspiration and subsequent cardiac arrest and consequent brain damage."
    ],
    "COURT": "EWCA",
    "CITATION": "Bailey v Ministry of Defence [2008] EWCA Civ 883",
    "NUMBER": "369",
    "YEAR": "2008"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Williams v University of Birmingham",
        "(wl) Sutcliffe v BMI Healthcare",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Liverpool Womens Hospital NHS Foundation Trust v Ronayne",
        "(wl) Phipps v Rochester Corporation",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Cox v Ministry of Justice",
        "(wl) Walker v Northumberland County Council",
        "(wl) Chester v Afshar",
        "(wl) Butcher v Southend-on-Sea BC"
    ],
    "NAME": "(wl) Sanderson v Hull",
    "JUDGE": "Tuckey LJ; Scott Baker LJ; Smith LJ",
    "CIT": "[2008] EWCA Civ 1211",
    "HELD": [
        "Appeal allowed.",
        "(1) H&#8217;s request was not an attempt to reargue the issues that had already been argued and decided; it was an admission that she had failed to raise what she later thought was a vital issue. S had a fair opportunity to put their case on the new point. The recorder should not be criticised for taking the course he had, Egan v Motor Services (Bath) Ltd [2007] EWCA Civ 1002, [2008] 1 W.L.R. 1589 and R. (on the application of Edwards) v Environment Agency (No.2) [2008] UKHL 22, [2008] 1 W.L.R. 1587 considered. (2) Great caution was required before any development of the exception to the &#8220;but for&#8221; test of causation should be allowed, Fairchild v Glenhaven Funeral Services Ltd (t/a GH Dovener &amp; Son) [2002] UKHL 22, [2003] 1 A.C. 32 and Barker v Corus UK Ltd [2006] UKHL 20, [2006] 2 A.C. 572 considered. However, the conditions set out in Fairchild in relation to mesothelioma, which might justify the relaxation of the test, were not intended to exclude the application of the exception to other diseases and circumstances. An essential element for the extension of the exception was to be the impossibility for the claimant to prove enough to satisfy the &#8220;but for&#8221; test: mere difficulty of proof would not be enough, Fairchild considered. In the instant case, the recorder had not properly analysed the facts relating to negligence and causation. The recorder&#8217;s difficulties in reaching a conclusion on causation were created not by any impossibility of proof but by his failure to make crucial findings of fact. If the necessary findings of fact had been made, he would have been able to make a decision on the usual &#8220;but for&#8221; basis. If he had held that, if properly warned, H would have been careful not to touch her face whilst working, he might then have been able to say that she would probably not have done so although he might have recognised that a small risk remained that she would do so. If he had accepted that, if warned, H would not have discarded the gloves, he could then have held that it was unlikely that her hands would have been infected. Finally, he would have had to recognise that there was some risk of contact from door handles and other places that could not have been reduced or avoided by any amount of warning. If findings of that kind had been made, it would have been open to the recorder to hold that, on the balance of probabilities, H would not have been infected. Therefore, the instant case was not one in which it was impossible for H to prove causation. The crucial issues were not incapable of proof, which was a necessary feature if a case was to be brought within the Fairchild exception. Accordingly, the recorder was wrong to hold that the case fell within the Fairchild exception."
    ],
    "ABSTRACT": [
        "The appellants (S) appealed against an order that they were liable for an infection that the respondent (H) had contracted whilst working for them.",
        "H had been employed as a turkey plucker. She was provided with gloves and aprons but a few days later she started to work without gloves. She was subsequently diagnosed as suffering from campylobacter enteritis. She alleged that she had been infected by the bacterium during the course of her employment, and that S, in breach of their duty, had failed to protect her from the risks of infection that were inherent in handling dead poultry. Experts agreed that the only route by which the bacterium could have entered H&#8217;s body was by her mouth. The recorder held that S had been negligent and had breached several statutory duties, which included a failure to warn H of the risks of exposure to the bacterium and advise her as to the precautions she should take to minimise the risk of infection. As to causation, the recorder in his draft judgment held that H had failed to prove that but for S&#8217;s negligence she would probably not have contracted the infection. However, he reconsidered his holding on causation after being requested by H on the basis that it was impossible for her to satisfy the test. The recorder concluded that the exception to the &#8220;but for&#8221; test applied and that H had established the causal link between breaches of duty and injury by showing that the breaches had materially increased the risk of infection.",
        "S submitted that (1) the recorder should not have acceded to the request to reconsider the issue of causation because the issue of material contribution to risk had not been argued at the trial; (2) the case was not one where the exception to the &#8220;but for&#8221; test of causation applied, the recorder had wrongly extended the exception to another disease or condition, and it was not impossible for H to satisfy the &#8220;but for&#8221; test."
    ],
    "COUNSEL": "For the appellant: Simon Butler, Abi McHugh de Clare. For the respondent: Stephen Douglas.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Personal Injury",
        "Health and Safety at Work",
        "Breach of Duty of Care",
        "Burden of Proof",
        "Causation",
        "Employers' Liability",
        "Food Hygiene",
        "Infections"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Personal Injury &mdash; Health and Safety at Work &mdash; Breach of Duty of Care &mdash; Burden of Proof &mdash; Causation &mdash; Employers' Liability &mdash; Food Hygiene &mdash; Infections",
    "SUMMARY": [
        "The instant case was not one where it was impossible for an employee to prove that but for the employer&#8217;s negligence she would probably not have been infected by a bacterium whilst plucking turkeys, and the recorder was wrong to hold that the case fell within the exception to the &#8220;but for&#8221; test in Fairchild v Glenhaven Funeral Services Ltd (t/a GH Dovener &amp; Son) [2002] UKHL 22, [2003] 1 A.C. 32."
    ],
    "COURT": "EWCA",
    "CITATION": "Sanderson v Hull [2008] EWCA Civ 1211",
    "NUMBER": "370",
    "YEAR": "2008"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Bailey v Ministry of Defence",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Barker v Corus (UK)",
        "(wl) Joyce v O'Brien",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) The Scout Association v Barnes",
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Gregg v Scott",
        "(wl) Taylor v A Novo Ltd (UK)"
    ],
    "NAME": "(wl) Wooten v J Docter",
    "JUDGE": "Waller LJ; Moses LJ; Hallett LJ",
    "CIT": "[2008] EWCA Civ 1361",
    "HELD": [
        "Appeal dismissed.",
        "(1) There was ample evidence on which the judge could reject J&#8217;s estimate of increased risk and the inferences about contraceptive cover which W suggested should be drawn from the manufacturer&#8217;s and other advice. W had not switched from one oral contraceptive to another over the space of one or more cycles. She had merely reduced the level of one of the two hormones supplied, progesterone, by 100mcg or, at most, 200mcg. None of the medical studies, which were referred to, covered that situation. Added to that was the absence of any biological explanation as to why the reduction in the level of progesterone to a level, which was found to be adequate to prevent ovulation, should have caused pregnancy in the instant case. No reasons were advanced by W for substituting a different conclusion to that of the judge either to the efficacy of Microgynon over Logynon or as to the consequences of taking what was described as two wrong pills. The judge was entitled, on analysis of the material available and on the basis of the evidence of experts relied on by X, to reject J&#8217;s views about the increase in risk. There was no basis for challenging the judge&#8217;s findings of fact. That was sufficient to dispose of the appeal. (2) W had failed to establish that the erroneous intake of two Logynon pills materially increased the risk of contraceptive failure. She could not invoke any principle identified in Fairchild v Glenhaven Funeral Services Ltd (t/a GH Dovener &amp; Son) [2002] UKHL 22, [2003] 1 A.C. 32 or Barker v Corus UK Ltd [2006] UKHL 20, [2006] 2 A.C. 572 to overcome the judge&#8217;s finding that the reduction of 100mcg or 200mcg or progesterone did not increase, let alone materially increase, the risk of contraceptive failure, Fairchild and Barker considered. Whether the instant case was to be regarded as a case in which W had to satisfy the &#8220;but for&#8221; test for causation or whether the principle in Fairchild and Barker could be extended and applied to the instant case was immaterial. The judge had not found as a fact that the intake of two Logynon pills gave rise to additional risk. Whether the risk due to the reduced intake of progesterone was to be regarded as a risk distinct from the inherent risk of contraceptive failure or merely a risk which increased the inherent risk, W had failed to establish any risk, attributable to so limited a reduction of progesterone, at all."
    ],
    "ABSTRACT": [
        "The appellant (W) appealed against a decision that, despite the negligent error of the respondent (X), a pharmacist, in dispensing to her a wrong contraceptive pill, the error had neither caused nor materially contributed to the contraceptive failure and her pregnancy.",
        "W had obtained a repeat prescription for a contraceptive pill, Microgynon. However X dispensed another pill, Logynon. Both pills contained amounts of oestrogen and progesterone hormones. By virtue of the change from Microgynon to Logynon W took exactly the same quantity of oestrogen but took 100mcg less of progesterone. On the second night, again, she took 100mcg less of progesterone but exactly the same amount of oestrogen as she would have taken had she continued with the prescribed contraceptive Microgynon. Thereafter W returned to taking Microgynon. Despite taking Logynon, W conceived and gave birth. W claimed damages for care, expenses and loss of earnings flowing from the pregnancy and a period of post-natal psychosis. The judge accepted expert evidence that there was no biological reason to suggest that the intake of the two Logynon pills increased the risk of contraceptive failure, which was contrary to the evidence of W&#8217;s expert (J). The judge also held that the reduction of 100mcg or 200mcg of progesterone did not increase, let alone materially increase, the risk of contraceptive failure. He accepted that oral contraceptive manufacturers&#8217; advice demonstrated that they believed that a change from one combined oral contraceptive to another increased the risk of a woman becoming pregnant, but pointed out that the advice did not cover W&#8217;s situation. The judge held that, to the extent that there was any possible additional risk resulting from the taking of two wrong pills, that risk was far outweighed by the intrinsic contraceptive failure risk, and that J&#8217;s estimate of the increased risk by a factor of 13 was unsupported.",
        "W submitted that the judge&#8217;s conclusions were not justified by the evidence and that because the state of scientific knowledge precluded her from establishing that but for the erroneous dispensing of Logynon she would not have become pregnant, she could invoke the alternative and exceptional principles of causation."
    ],
    "COUNSEL": "For the appellant: David Thomson. For the respondent: Graham Southall-Edwards.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Negligence",
        "Causation",
        "Contraception",
        "Pregnancy",
        "Risk"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Negligence &mdash; Causation &mdash; Contraception &mdash; Pregnancy &mdash; Risk",
    "SUMMARY": [
        "On the evidence a judge had been entitled to hold that despite the negligent error of a pharmacist, in dispensing to a woman a wrong contraceptive pill, the error had neither caused nor materially contributed to the contraceptive failure and her pregnancy."
    ],
    "COURT": "EWCA",
    "CITATION": "Wooten v J Docter [2008] EWCA Civ 1361",
    "NUMBER": "371",
    "YEAR": "2008"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Williams v University of Birmingham",
        "(wl) Wooten v J Docter",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Gregg v Scott",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Joyce v O'Brien",
        "(wl) Phipps v Rochester Corporation",
        "(wl) Bernard v Attorney General of Jamaica",
        "(wl) Sanderson v Hull"
    ],
    "NAME": "(wl) Barker v Corus (UK)",
    "JUDGE": "Lord Hoffmann; Lord Scott of Foscote; Lord Rodger of Earlsferry; Lord Walker of Gestingthorpe; Baroness Hale of Richmond",
    "CIT": "[2006] UKHL 20",
    "HELD": [
        "allowing the appeals (Lord Rodger of Earlsferry dissenting on the issue of apportionment), that (1) as an exception to the usual rule of causation, a worker who had contracted mesothelioma after being wrongfully exposed to asbestos at different times by more than one employer or occupier could sue any of them notwithstanding that he could not prove which exposure had caused the disease, Fairchild v Glenhaven Funeral Services Ltd (t/a GH Dovener &amp; Son) [2002] UKHL 22, [2003] 1 A.C. 32 applied. The Fairchild exception could operate even though not all the potential causes of damage were tortious, and a non-tortious source of risk did not have to have been created by someone who was also a tortfeasor, McGhee v National Coal Board [1973] 1 W.L.R. 1 considered. However it was an essential condition for the operation of the exception that the impossibility of proving that the defendant caused the damage arose out of the existence of another potential causative agent that operated in the same way, Wilsher v Essex AHA [1988] A.C. 1074 distinguished. (2) The decision of the majority in Fairchild proceeded on the basis that the creation of a material risk of mesothelioma was sufficient for liability. If the basis of liability was the wrongful creation of a risk or chance of causing the disease, the damage that the defendant should be regarded as having caused was the creation of such a risk or chance. If that was the right way to characterise the damage, then it did not matter that the disease as such would be indivisible damage, Associated Newspapers Ltd v Dingle [1961] 2 Q.B. 162 distinguished. Treating the creation of the risk as the damage caused by the defendant involved quantifying the likelihood that the damage that was known to have materialised was caused by that particular defendant. It would then be possible to determine the share of the damage that should be attributed to him. The attribution of liability according to the relative degree of contribution to the chance of the disease being contracted would also be fair. On that approach questions of contributory negligence and contribution would not normally arise. The instant cases would be remitted to redetermine the damages by reference to the proportion of the risk attributable to the breaches of duty by the appellants."
    ],
    "FLAGS": [
        "Approved",
        "Hale",
        "Hoffmann"
    ],
    "COUNSEL": "For the appellants: Jeremy Stuart-Smith QC, Charles Feeny, Jayne La Grua. For the respondents Barker and Murray: David Allan QC, Peter Cowan. For the respondent Patterson: Allan Gore QC, Nigel Lewers.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Personal Injury",
        "Damages",
        "Employment",
        "Torts",
        "Apportionment",
        "Asbestos",
        "Causation",
        "Mesothelioma",
        "Risk",
        "Self-Employment",
        "Several Liability"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Personal Injury &mdash; Damages &mdash; Employment &mdash; Torts &mdash; Apportionment &mdash; Asbestos &mdash; Causation &mdash; Mesothelioma &mdash; Risk &mdash; Self-Employment &mdash; Several Liability",
    "SUMMARY": [
        "Where employers were liable on the basis that they had negligently exposed an employee to asbestos and thereby created a material risk of mesothelioma which had eventuated, it would be fair that they should be severally liable only to the extent of the share of the risk created by their breach of duty.",
        "The appellant employers appealed against decisions of the Court of Appeal (including [2004] EWCA Civ 545, [2005] 3 All E.R. 661) in respect of their liability for damages for negligently exposing the respondents to asbestos dust. The respondent in the first case (B) had died of asbestos related mesothelioma. During his working career he had had three material exposures to asbestos. The first two exposures were in consequence of breaches of duty by the employers, the second employer being the first appellant (C). The third exposure was while B was working as a self-employed plasterer and involved a failure by B to take reasonable care for his own safety. The judge and Court of Appeal held that C was jointly and severally liable with the first employer, but subject to a 20 per cent reduction for B&#8217;s contributory negligence while he was self-employed. In the second case the respondent (P), who had died of mesothelioma, had been during his working life regularly exposed to asbestos in breach of duty by four employers, although the periods of exposure were of different lengths. In the third case the respondent (M) had been exposed to asbestos in shipyards by a number of employers. In the cases of P and M the judges and Court of Appeal followed the decision in B&#8217;s case in holding that the solvent employers were jointly and severally liable for the full damage. C submitted that it should not be liable at all as a matter of causation, since there had been a period when B and no one else had been responsible for his exposure to asbestos dust; and the appellants submitted, amongst other things, that they should be severally liable only according to the share of the risk created by their breach of duty."
    ],
    "COURT": "UKHL",
    "CITATION": "Barker v Corus (UK) [2006] UKHL 20",
    "NUMBER": "372",
    "YEAR": "2006"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Barker v Corus (UK)",
        "(wl) Williams v University of Birmingham",
        "(wl) Harvey v Plymouth City Council",
        "(wl) Selwood v Durham CC",
        "(wl) The Scout Association v Barnes",
        "(wl) Tomlinson v Congleton BC",
        "(wl) Wooten v J Docter",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Hufton v Somerset CC",
        "(wl) Sanderson v Hull",
        "(wl) Richardson v LRC Products Ltd"
    ],
    "NAME": "(wl) Sienkiewicz v Greif (combined appeals)",
    "JUDGE": "Lord Phillips PSC; Lord Rodger JSC; Lady Hale JSC; Lord Brown JSC; Lord Mance JSC; Lord Kerr JSC; Lord Dyson JSC",
    "CIT": "[2011] UKSC 10",
    "HELD": [
        "Appeals dismissed.",
        "(1) The Compensation Act 2006 s.3 had grafted a special rule onto the principle in Fairchild and Barker that applied only to mesothelioma. That had draconian consequences for an employer who had been responsible for only a small proportion of the overall exposure of a claimant to asbestos dust. However, it would be wrong to have regard to those consequences because that position had been laid down by Parliament. Section 3 applied where the responsible person was liable in tort for materially increasing the risk of a victim contracting mesothelioma. Whether and in what circumstances liability in tort attached to one who had materially increased the risk of a victim contracting mesothelioma remained a question of common law which was capable of further development. The rule in Fairchild and Barker had been adopted to cater for the ignorance that had existed at the time of those decisions about the causes of mesothelioma. Section 3 therefore did not preclude the courts from reverting to the conventional approach of balance of probabilities should advances in medical science in relation to the disease make such a step appropriate (see paras 58, 70, 142 of judgment). (2) Knowledge about mesothelioma was based partly on medical science and partly on statistical analysis or epidemiology. Uncertainty about the biological cause of the disease made it impossible for a claimant to prove causation according to the conventional &#8220;but for&#8221; test and that was why the special rules of causation in Fairchild and Barker had been devised. There were special features and knowledge gaps in relation to mesothelioma which meant that it was inappropriate to decide causation on epidemiological data relating incidence to exposure. The &#8220;double the risk&#8221; test was therefore not appropriate in cases of single or multiple defendants and the adoption of the special rule of causation set out in Fairchild and Barker was justified in cases where there was one defendant. Even if it was possible to postulate with confidence that the extent of a defendant&#8217;s contribution to a victim&#8217;s exposure to asbestos precisely reflected the likelihood that his breach of duty had caused the victim&#8217;s disease, there would still be justification for the application of the Fairchild rule where all the exposure was wrongful, Fairchild and Barker followed (paras 11, 19-20, 97-106, 113, 160-162). (3) Liability for mesothelioma fell on anyone who had materially increased the risk of the victim contracting the disease. The insertion of the word &#8220;material&#8221; was intended to exclude an increase of risk that was so insignificant that the court would properly disregard it on the de minimis principle. There was no justification for adopting the &#8220;double the risk&#8221; test as the benchmark of what constituted a material increase of risk. What was de minimis was a question for the judge on the facts of any particular case. In the case of mesothelioma, a stage had to be reached at which, even allowing for the possibility that exposure to asbestos could have a cumulative effect, a particular exposure was too insignificant to be taken into account, having regard to the overall exposure that had taken place (paras 107-108)."
    ],
    "ABSTRACT": [
        "The first appellant manufacturing company (G) and the second appellant local authority (L) appealed against decisions ([2009] EWCA Civ 1159, [2010] Q.B. 370 and [2009] EWCA Civ 1211, [2010] E.L.R. 227) concerning the appropriate rule of causation in cases of mesothelioma involving a single defendant where there was also a risk of exposure from the general atmosphere.",
        "L and G were the sole known sources of exposure of the respondents (W and S) to asbestos dust, S from her employment in a steel drum factory and W from her secondary school. In each case, the extent of the exposure had been found to be small. The Court of Appeal had applied the principle in Fairchild v Glenhaven Funeral Services Ltd (t/a GH Dovener &amp; Son) [2002] UKHL 22, [2003] 1 A.C. 32 and Barker v Corus UK Ltd [2006] UKHL 20, [2006] 2 A.C. 572 and in each case found L and G to be responsible for exposing W and S to sufficient asbestos dust to create a material increase in risk and therefore jointly and severally liable. The issues for determination were: (i) whether the rule of causation that had been developed in cases of mesothelioma left any room for applying a test of balance of probability to causation; (ii) whether the Fairchild exception applied in cases involving a single defendant and whether it was appropriate to apply a test which attributed causative effect to any factor which more than doubled a risk of a claimant developing mesothelioma; (iii) what constituted a material increase in risk."
    ],
    "FLAGS": [
        "Approved",
        "Hale"
    ],
    "COUNSEL": "For the appellants: Jeremy Stuart-Smith QC, Charles Feeny. For the first respondent: Christopher Melton QC, Richard Pearce. For the second respondent: David Allan QC, Simon Kilvington.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Health and Safety at Work",
        "Local Government",
        "Personal Injury",
        "Apportionment",
        "Asbestos",
        "Burden of Proof",
        "Causation",
        "Mesothelioma",
        "Risk",
        "Schools",
        "Several Liability"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Health and Safety at Work &mdash; Local Government &mdash; Personal Injury &mdash; Apportionment &mdash; Asbestos &mdash; Burden of Proof &mdash; Causation &mdash; Mesothelioma &mdash; Risk &mdash; Schools &mdash; Several Liability",
    "SUMMARY": [
        "The exception in Fairchild v Glenhaven Funeral Services Ltd (t/a GH Dovener &amp; Son) [2002] UKHL 22, [2003] 1 A.C. 32, governing attribution of causation in cases of mesothelioma following wrongful exposure to asbestos, applied in cases involving a single defendant. Accordingly, in cases of both single and multiple defendants, a claimant would succeed if he proved, on the balance of probability, that a defendant&#8217;s breach of duty had materially increased the risk that he would develop the disease and there was no need for him to show that the breach had doubled the risk."
    ],
    "COURT": "UKSC",
    "CITATION": "Sienkiewicz v Greif (combined appeals) [2011] UKSC 10",
    "NUMBER": "373",
    "YEAR": "2011"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Jolley v Sutton LBC",
        "(wl) Gray v Thames Trains",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Pierce v Doncaster MBC",
        "(wl) Pitts v Hunt",
        "(wl) Revill v Newbery",
        "(wl) Kent v Griffiths",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Lamb v Camden LBC",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Barker v Corus (UK)"
    ],
    "NAME": "(wl) Humber Oil v The Owners of the Ship 'The Sivand'",
    "JUDGE": "Evans LJ; Hobhouse LJ; Pill LJ",
    "CIT": "[1998] 2 Lloyd&#8217;s Rep 97",
    "HELD": [
        "dismissing the appeal, that H had acted in a reasonable way by employing reputable contractors, who in turn had acted competently. The collapse of the sea bed was an event both unforeseen and unforeseeable, but it did not break the chain of causation. In a tortious claim, the subsequent action of a plaintiff would not of necessity affect the responsibility of the defendant even if he was negligent, unless it affected the reasonableness of his duty to mitigate his loss, whereas the action of a third party, whether negligent or not, might intervene. Causation was restricted only by the two limbs of direct and natural consequences and reasonable foreseeability. In the instant case, it had been clearly foreseeable that the cost of repair might include extra payments made to contractors for unforeseen physical conditions, Overseas Tankship (UK) Ltd v Morts Dock &amp; Engineering Co (The Wagon Mound) [1961] A.C. 388, Overseas Tankship (UK) Ltd v Miller Steamship Co Pty Ltd (The Wagon Mound) [1967] 1 A.C. 617, Oropesa, The [1943] P. 32, Metagama, The (Costs) (1928) 30 Ll. L. Rep. 132, Carslogie Steamship Co Ltd v Royal Norwegian Government (The Carslogie) [1952] A.C. 292 and Liesbosch, The [1933] A.C. 449 considered."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the plaintiffs: Mark Cran Q.C. and Neil Calver. For the defendants: Nicholas Hamblen Q.C.",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Negligence",
        "Novus Actus Interveniens"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Negligence &mdash; Novus Actus Interveniens",
    "SUMMARY": [
        "causation; novus actus interveniens; additional expense arising from unforeseeable intervening event foreseeable",
        "O were the owners of the ship Sivand which damages harbour installations. H engaged contractors under standard form of contract on ICE conditions which provided by cl.12 for the payment of an additional sum if the contractor came upon physical conditions which could not have been reasonably foreseen by an experienced contractor. The contractors lost a jack up barge when the sea bed under its legs collapsed. O appealed against H&#8217;s claim for the additional sum on the ground that it was due by virtue of an intervening event that broke the chain of causation; which event was an unforeseen event, too remote from the admitted negligence, and was not a pre-existing state of affairs."
    ],
    "COURT": "EWCA",
    "CITATION": "Humber Oil v The Owners of the Ship &#8216;The Sivand&#8217; [1998] 2 Lloyd&#8217;s Rep 97",
    "NUMBER": "374",
    "YEAR": "1998"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) McLoughlin v O'Brian",
        "(wl) British Celanese Ltd v AH Hunt (Capacitors) Ltd",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Crown River Cruises Ltd v Kimbolton Fireworks Ltd",
        "(wl) Esso Petroleum v Mardon",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) Lister v Hesley Hall",
        "(wl) Kent v Griffiths",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Haseldine v Daw",
        "(wl) Michael v Chief Constable of South Wales"
    ],
    "NAME": "(wl) Lamb v Camden LBC",
    "CIT": "[1981] QB 625",
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "YEAR": "1981",
    "JUDGE": "Lord Denning MR; Oliver LJ; Watkins LJ",
    "NUMBER": "375",
    "CATEGORIES": [
        "Negligence",
        "Damage to Property",
        "Remoteness",
        "Squatting"
    ],
    "CATEGORY": "Negligence &mdash; Damage to Property &mdash; Remoteness &mdash; Squatting",
    "SUMMARY": [
        "Remoteness of damage; intervening acts by third parties; limitation of liability",
        "Where a property is damaged through actionable nuisance or negligence and thereby left unoccupied, further damage done by invading squatters is too remote to form part of the damages. The plaintiffs owned a house which had been let furnished. Due to local council work nearby a water main was broken and escaping water severely damaged the house. The tenant left and the house was left unoccupied. While the house was thus left empty squatters entered and by the time they were evicted had caused extensive damage. The defendants admitted liability in nuisance, and on the question of the squatters&#8217; damage, the official referee held that this damage was too remote. On appeal, held, dismissing the appeal, that the damage done by squatters was too remote, and that to consider whether squatting was &#8220;likely or not&#8221; was to apply the wrong test. (Overseas Tankship (UK) Ltd v Morts Dock &amp; Engineering Co (The Wagon Mound) [1961] A.C. 388 applied and Gissing v Cow and Gate applied)."
    ],
    "CITATION": "Lamb v Camden LBC [1981] QB 625",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Smith v Stages",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Jolley v Sutton LBC",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Sanderson v Hull",
        "(wl) Gray v Thames Trains",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Mullin v Richards",
        "(wl) Revill v Newbery",
        "(wl) Lister v Hesley Hall"
    ],
    "NAME": "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
    "JUDGE": "Lord Reid; Lord Hodson; Lord Guest; Viscount Dilhorne; Lord Upjohn",
    "CIT": "[1969] 3 All ER 1621",
    "HELD": [
        "dismissing his appeal, (1) that the appellant&#8217;s act in attempting to descend steep stairs without a handrail and without adult assistance was in the circumstances unreasonable or, alternatively (per Lord Guest), the act of jumping was unreasonable; and (2) that the chain of causation was, therefore, broken so that the respondents were not liable for the latter injury. (Decision of Court of Session [1969] C.L.Y. 916 affirmed). Per Lord Reid (Lord Hodson and Viscount Dilhorne concurring): if the chain of causation had not been broken the appellant would not have failed because he jumped unless such action (jumping) was so unreasonable that even in an emergency on the spur of the moment no reasonable man would have been so foolish as to do what he did."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1969",
    "CATEGORIES": [
        "Negligence",
        "Ankle",
        "Causation",
        "Employers' Liability",
        "Leg",
        "Personal Injury",
        "Reasonableness"
    ],
    "CATEGORY": "Negligence &mdash; Ankle &mdash; Causation &mdash; Employers' Liability &mdash; Leg &mdash; Personal Injury &mdash; Reasonableness",
    "SUMMARY": [
        "Personal injuries; remoteness; supervening act causing injury",
        "The appellant sustained injury during the course of his employment; for this injury the respondents, his employers, were admittedly liable. As a result of this injury the appellant occasionally but without warning lost control of his left leg, which gave way under him. Shortly after the accident the appellant, accompanied by his wife, small daughter and brother-in-law, went to inspect a first-floor flat with a view to his taking a tenancy. On leaving the flat his wife and brother-in-law secured the door but he set off down the steep stairs with his small daughter; the stairs had no handrail. Suddenly, the appellant&#8217;s left leg gave way and, in order to save himself from falling, he jumped some ten steps but in landing fractured his ankle severely. He claimed that the respondents were liable for this latter accident."
    ],
    "COURT": "UKHL",
    "CITATION": "McKew v Holland &amp; Hannen &amp; Cubitts (Scotland) Ltd [1969] 3 All ER 1621",
    "NUMBER": "376"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Barnett v Chelsea & Kensington Hospital Management Committee",
        "(wl) Biffa Waste Services Ltd v Maschinenfabrik Ernst Hese GmbH",
        "(wl) Dulieu v White",
        "(wl) Allen v Chief Constable of Hampshire",
        "(wl) Clark v Bourne Leisure Limited",
        "(wl) Chester v Afshar",
        "(wl) Hinz v Berry",
        "(wl) Telnikoff v Matusevich",
        "(wl) Humber Oil v The Owners of the Ship 'The Sivand'",
        "(wl) McLoughlin v O'Brian",
        "(wl) McKenna v British Aluminium Ltd",
        "(wl) Liverpool Womens Hospital NHS Foundation Trust v Ronayne"
    ],
    "NAME": "(wl) Wieland v Cyril Lord Carpets",
    "JUDGE": "Henderson J",
    "CIT": "[2015] EWHC 2171 (Ch)",
    "HELD": [
        "Judgment accordingly.",
        "(1) There was no ambiguity in the language of the agreement and side letter; the notice period was precisely six months. Even if there had been ambiguity, commercial common sense considerations meant that it had been reasonable to stipulate a fixed period, Arnold v Britton [2015] UKSC 36, [2015] A.C. 1619 applied (see paras 136-137, 139 of judgment). (2) The provisions could not reasonably be construed as permitting service of a premature notice which by effluxion of time might mature into a valid notice (para.144). (3) Giving effect to all the words in the agreement, there was a dual condition requiring a decision by LIS to require a member to retire, then consideration by the management committee as a reserved matter. That construction accorded with business common sense (para.153). (4) Service of a valid termination notice was a condition precedent to any exercise of the power to place a member on garden leave, which was conferred on the committee not LIS (para.157). (5) P had a right and duty to play a full role in the LLP&#8217;s business for at least the first 18 months of his initial term. His complete exclusion without prior warning had left him wholly unable to fulfill his role as an active member and was a breach of contract (paras 173-174, 181). (6) A reasonable person in P&#8217;s position would have concluded that the LLP had decided to terminate his active involvement in its affairs with immediate effect, and was prepared to disregard the clear provisions of the agreement where they conflicted with that aim, Eminence Property Developments Ltd v Heaney [2010] EWCA Civ 1168, [2011] 2 All E.R. (Comm) 223 applied. Those matters went to the root of the contract and amounted to immediate renunciation of the agreement (para.197). (7) It would not be right to treat P as having unequivocally elected to affirm the agreement merely because he continued to accept monthly payments. He had taken no positive steps to procure their continuation, and his continued acceptance of them was broadly consistent with his contention that he remained a member of the LLP (para.216). (8) The doctrine of repudiatory breach was excluded in relation to multi-party s.5 agreements. Once a s.5 agreement had been made, it was binding until terminated by agreement, or varied in accordance with an agreed procedure. Only in such circumstances could there be &#8220;an absence of agreement as to any matter&#8221; within the meaning of s.5(1)(b) in relation to a matter previously covered by a s.5 agreement, so as to allow the matter to be governed by the default rules. Only in that way could the possibility of mutually inconsistent rules applying to the same subject matter be avoided. It would be offensive to common sense, and contrary to the parties&#8217; reasonable commercial expectations, if the doctrine permitted P to share in the LLP&#8217;s capital profits when the agreement entitled him to a fixed income not capital. Accordingly, P&#8217;s purported acceptance of the repudiatory breach was of no legal effect and his relationship with the LLP continued to be governed by the agreement (paras 235, 237-241, 243-244). (9) P was entitled to damages for breach of contract, but it was difficult to see how he could have suffered any substantial loss beyond the non-payment of his fixed income. There was no basis for implying a term that the fund was to be marketed and promoted (paras 244, 247)."
    ],
    "ABSTRACT": [
        "The petitioner (P) sought declaratory relief under an unfair prejudice petition in relation to the first respondent limited liability partnership (the LLP).",
        "P had joined the LLP as a fund manager. The LLP&#8217;s members were a wholly owned subsidiary (LIS) and the individual fund managers. The LLP was operated under an agreement which vested a committee with general management functions, with certain matters reserved to LIS. A member was to retire &#8220;following a decision of LIS (as a Reserved matter)&#8220;, and the committee could place a member on garden leave during his notice period. Under a side letter P was to receive a fixed monthly income plus performance-related profits, and he could be compulsorily retired by six months&#8217; notice, not to expire before the end of a fixed two-year membership period. P\u2019s fund performed poorly and was closed. LIS gave him a letter of termination 13 months before the end of the two-year period and placed him on garden leave; the committee took no part in the decisions. The issues were whether (i) P&#8217;s membership of the LLP had been validly terminated; (ii) the termination letter had become valid six months before the end of the two-year period; (iii) a resolution by the committee had also been necessary; (iv) P had validly been put on garden leave; (v) his exclusion from the LLP breached his contractual rights under the agreement; (vi) the letter had been an immediate renunciation of the agreement; (vii) P had affirmed the agreement; (viii) the common law doctrine of repudiatory breach was excluded where there was an agreement governing the rights and duties of the members within the Limited Liability Partnerships Act 2000 s.5.",
        "The LLP argued that s.5, properly construed, had the effect that the mutual rights and duties of all limited liability partnership members had to be governed either by an agreement or, &#8220;in the absence of agreement as to any matter&#8221;, by the default provisions. The LLP argued that Parliament could not have intended that following a breach of a multi-party s.5 agreement, the continuing members would be subject to the s.5 agreement, but a member who accepted the breach would become subject to the default rules."
    ],
    "COUNSEL": "For the petitioner: Andrew Thompson QC, Alex Barden. For the respondents: John Machell QC, Jennifer Heywood.",
    "CATEGORIES": [
        "Partnerships Other Related Subjects: Contracts",
        "Affirmation",
        "Breach of Contract",
        "Limited Liability Partnerships",
        "Members",
        "Notice",
        "Repudiation",
        "Retirement"
    ],
    "CATEGORY": "Partnerships Other Related Subjects: Contracts &mdash; Affirmation &mdash; Breach of Contract &mdash; Limited Liability Partnerships &mdash; Members &mdash; Notice &mdash; Repudiation &mdash; Retirement",
    "SUMMARY": [
        "A limited liability partnership agreement had required precisely six months&#8217; notice compulsorily to retire a member. A notice giving 13 months&#8217; notice and placing the member on garden leave had breached the agreement and the member had not affirmed the agreement. The doctrine of repudiatory breach did not apply where there was a multi-party agreement governing the rights and duties of members within the Limited Liability Partnerships Act 2000 s.5."
    ],
    "COURT": "EWHC",
    "CITATION": "Wieland v Cyril Lord Carpets [2015] EWHC 2171 (Ch)",
    "NUMBER": "377",
    "YEAR": "2015"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Jolley v Sutton LBC",
        "(wl) Williams v University of Birmingham",
        "(wl) Hughes v Lord Advocate",
        "(wl) Orchard v Lee",
        "(wl) Joyce v O'Brien",
        "(wl) Wooten v J Docter",
        "(wl) McLoughlin v O'Brian",
        "(wl) Gray v Thames Trains",
        "(wl) Bailey v Ministry of Defence",
        "(wl) Froom v Butcher"
    ],
    "NAME": "(wl) Spencer v Wincanton Holdings Ltd",
    "JUDGE": "Sedley LJ; Longmore LJ; Aikens LJ",
    "CIT": "[2009] EWCA Civ 1404",
    "HELD": [
        "Appeal dismissed.",
        "The formulation in McKew was problematic in that &#8220;unreasonable&#8221; covered a wide range of meanings, McKew considered. The word&#8217;s purpose in the instant context was to determine the point at which the law regarded a consequence as being too remote; that could help find its correct meaning. Although remoteness had been explained in terms of foreseeability in the past, that was problematic; if anything, it was foreseeability that had to be explained in terms of remoteness, Simmons v British Steel Plc [2004] UKHL 20, 2004 S.C. (H.L.) 94 considered. The rationale of the principle that an intervening event broke the chain of causation was fairness, Corr v IBC Vehicles Ltd [2008] UKHL 13, [2008] 1 A.C. 884 applied, and the question of remoteness involved a value judgment, Kuwait Airways Corp v Iraqi Airways Co (No.6) [2002] UKHL 19, [2002] 2 A.C. 883 applied. The degree of unreasonable conduct required by the McKew test was very high, Emeh v Kensington and Chelsea and Westminster AHA [1985] Q.B. 1012 applied. However, it was unhelpful to describe the later conduct required by the test as reckless or deliberate. The judge had found that S&#8217;s conduct had fallen far below McKew unreasonableness, and there was no good reason to go behind his judgment. If he had found S principally to blame, the case might have been closer to McKew . The apportionment of blame spoke clearly against a finding either that S had acted recklessly or that it was unfair to treat the chain of causation as surviving the second accident. Like the amputation, the second accident had been an unexpected but real consequence of the first accident, albeit one to which S&#8217;s own misjudgement had contributed."
    ],
    "ABSTRACT": [
        "The appellant employer (W) appealed against a decision that it was liable for the injuries the respondent former employee (S) had sustained in an accident he had suffered several years after an accident he had suffered at work.",
        "S had damaged his knee in a minor accident. His injury developed to the point that, three years later, his leg had to be amputated above the knee. W did not dispute its liability for the consequences of the accident, including the amputation. Eight months after the amputation, S filled his car at a petrol station without summoning help or steadying himself using sticks or his prosthesis. He tripped and fell, doing further damage which confined him to a wheelchair permanently. S had earlier issued a claim against W in respect of the first accident, and damages in that claim were assessed after S had the second accident. W resisted the increase in the size of the claim attributable to the second accident, but the judge found that it was liable for the increase, subject to a one-third reduction to reflect S&#8217;s contributory negligence.",
        "W argued that the second accident had been caused by S&#8217;s unreasonable conduct, meaning that, following McKew v Holland &amp; Hannen &amp; Cubitts (Scotland) Ltd [1969] 3 All E.R. 1621, it should not be held liable for the injuries S had suffered in the second accident."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Dominic Nolan QC. For the respondent: John McNeil, Andrew Bridgeman.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Negligence",
        "Accidents",
        "Amputation",
        "Causation",
        "Contributory Negligence",
        "Contributory Negligence",
        "Foreseeability",
        "Intervening Events",
        "Remoteness"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Negligence &mdash; Accidents &mdash; Amputation &mdash; Causation &mdash; Contributory Negligence &mdash; Contributory Negligence &mdash; Foreseeability &mdash; Intervening Events &mdash; Remoteness",
    "SUMMARY": [
        "An employer was liable for the injuries of a former employee who suffered an accident for which the employer was liable, had his leg amputated as a result, and then had a second accident because he only had one leg. The employee&#8217;s contributory conduct towards the second accident had been below the standard of unreasonableness required to break the chain of causation following McKew v Holland &amp; Hannen &amp; Cubitts (Scotland) Ltd [1969] 3 All E.R. 1621."
    ],
    "COURT": "EWCA",
    "CITATION": "Spencer v Wincanton Holdings Ltd [2009] EWCA Civ 1404",
    "NUMBER": "378",
    "YEAR": "2009"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Haseldine v Daw",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) Kent v Griffiths",
        "(wl) W v Essex County Council and Another",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Vellino v Chief Constable of Greater Manchester"
    ],
    "NAME": "(wl) Reeves v Metropolitan Police Commissioner",
    "JUDGE": "Lord Hoffmann; Lord Mackay of Clashfern; Lord Jauncey of Tullichettle; Lord Hope of Craighead; Lord Hobhouse of Woodborough",
    "CIT": "[2000] 1 AC 360",
    "HELD": [
        "allowing the appeal (Lord Hobhouse dissenting on causation), that the amount of damages was reduced. A deliberate act of suicide was not a novus actus interveniens negating the causal connection between the breach of duty and the death. To hold as such would lead to the absurd result that the very act which the duty sought to prevent would be fatal to establishing a causative link. Although persons of sound mind were generally taken to be responsible for their own actions, in rare situations a duty could be owed to such persons to prevent them from self harm. That had occurred in the instant case, owing to the complete control that the police exercised over prisoners in custody and the stresses inherent in the custodial situation. The duty represented an exception to the rule that a deliberate act by a person of sound mind taking advantage of the defendant&#8217;s negligent act would destroy the causative link. Furthermore, the principle of human autonomy was not destroyed by the acts of police officers in ensuring that the prisoner&#8217;s environment was monitored to prevent suicide attempts. However, on the issue of causation, both the police, who had been negligent in leaving the hatch open, and L, who had responsibility for his own life, were the causes of L&#8217;s death. L was held contributorily negligent and damages were reduced by 50 per cent to apportion fault equally."
    ],
    "FLAGS": [
        "Approved",
        "Hoffmann"
    ],
    "COUNSEL": "For the appellant: D Pannick QC, S Freeland, M Shaw, J Johnson. For the respondent: N Blake QC, T Owen.",
    "CATEGORIES": [
        "Negligence",
        "Defences",
        "Duty of Care",
        "Police",
        "Prisoners",
        "Suicide"
    ],
    "CATEGORY": "Negligence &mdash; Defences &mdash; Duty of Care &mdash; Police &mdash; Prisoners &mdash; Suicide",
    "SUMMARY": [
        "professional negligence; police officers; duty of care to known suicide risk; defences of volenti non fit injuria, novus actus interveniens and contributory negligence could not be invoked; prisoner contributorily negligent",
        "R, joint administratrix of L&#8217;s estate, appealed against the dismissal of her claim for damages against the Commissioner following L&#8217;s suicide whilst in police custody. The judge had found that the police officers present had owed a duty to L, as a known suicide risk, to take reasonable care to prevent him committing suicide whilst in custody, and that the officers had been negligent in leaving open the hatch of L&#8217;s cell door, as it was reasonably foreseeable that he would take the opportunity to tie his shirt to it and thus strangle himself. The judge held that the duty of care had been breached but a causative link had not been established between the officers&#8217; negligence and L&#8217;s death because the defences of volenti non fit injuria and novus actus interveniens applied and he assessed L&#8217;s contributory negligence at 100 per cent. That decision was reversed on appeal ([1999] Q.B. 169, [1997] C.L.Y. 3817), where it was held that the defences could not be relied upon where the intervening act contended for was the very same act that the defendant had a duty to prevent and damages of GBP 8,690 were awarded in full. The Commissioner appealed."
    ],
    "COURT": "UKHL",
    "CITATION": "Reeves v Metropolitan Police Commissioner [2000] 1 AC 360",
    "NUMBER": "379",
    "YEAR": "2000"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Joyce v O'Brien",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Jolley v Sutton LBC",
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Liverpool Womens Hospital NHS Foundation Trust v Ronayne",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Osman v Ferguson",
        "(wl) Humber Oil v The Owners of the Ship 'The Sivand'",
        "(wl) Pitts v Hunt",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Lamb v Camden LBC"
    ],
    "NAME": "(wl) Gray v Thames Trains",
    "JUDGE": "Lord Phillips of Worth Matravers; Lord Hoffmann; Lord Scott of Foscote; Lord Rodger of Earlsferry; Lord Brown of Eaton-under-Heywood",
    "CIT": "[2009] UKHL 33",
    "HELD": [
        "Appeal allowed, cross-appeal dismissed.",
        "(1) The narrow expression of the rule, that a person could not recover for damage that was the consequence of a sentence imposed on him for a criminal act was well-established, Clunis applied. The Court of Appeal had been right to hold that it was bound by Clunis to reject G&#8217;s claim for damages suffered in consequence of the sentence of detention. However, it had not been right to go on to hold, despite its finding that the rule applied, that G was entitled to compensation for loss of earnings after his arrest. He had been unable to earn because he was detained after having committed manslaughter. While it was true that even if he had not committed manslaughter, his earning capacity would still have been impaired by the PTSD, liability was precluded by the decision in Jobling v Associated Dairies [1982] A.C. 794, Jobling followed. G&#8217;s claim for loss of earnings after his arrest and his claim for general damages were claims for damage caused by the lawful sentence imposed upon him for manslaughter. They fell within the narrower version of the rule and were not recoverable. (2) Neither the claim for general damages for feelings of guilt and remorse consequent upon the killing nor the claim for an indemnity against any claims which might be brought by dependants of the dead pedestrian was a consequence of the sentence of the criminal court. However, the wider version of the rule, applied by the judge at first instance, covered those heads of damage. G&#8217;s liability to compensate the dependants of the dead pedestrian was an immediate, inextricable consequence of his having intentionally killed him. The same was true of his feelings of guilt and remorse. The judge at first instance was therefore right and his judgment was restored. (3) (Per Lord Phillips) It was not necessarily right to make no distinction between a sentence of imprisonment and a hospital order. While a conviction for an offence punishable with imprisonment was necessary to confer jurisdiction for the imposition of a hospital order, the offence leading to that conviction might have no relevance to the decision to make the order. Where the sentencing judge made it clear that the defendant&#8217;s offending behaviour played no part in the decision to impose the hospital order, it was strongly arguable that the order should be treated as being a consequence of the defendant&#8217;s mental condition and not of his criminal act. In that event ex turpi causa would not apply."
    ],
    "ABSTRACT": [
        "The appellant train operator (T) appealed, and the respondent (G) cross-appealed against a decision ([2008] EWCA Civ 713, [2009] 2 W.L.R. 351) that a rule of law prevented G from recovering general damages, but did not prevent him from recovering special damages for loss of earnings, in consequence of his own criminal act.",
        "G had been a passenger on a train involved in the Ladbroke Grove rail crash. The train was operated by T and the accident had been caused by T&#8217;s negligence. Although G sustained only minor injuries, the experience caused him to suffer post-traumatic stress disorder (PTSD). While he was receiving treatment and taking medication for that condition he stabbed to death a pedestrian who had stepped into the path of his car. He pleaded guilty to manslaughter on the grounds of diminished responsibility caused by PTSD and was sentenced to be detained in hospital. In an action for negligence against T he claimed general damages for his conviction, detention and feelings of guilt and remorse, and for damage to his reputation. He claimed special damages in respect of his loss of earnings until the date of trial and continuing, and he sought an indemnity against any claims which might be brought by dependants of his victim. The trial judge decided that a rule of law based on public policy precluded a person from recovering, in consequence of his own criminal act, both general and special damages. The Court of Appeal held that it was bound by the decision in Clunis v Camden and Islington HA [1998] Q.B. 978 to find that recovery of general damages was precluded, while recovery of loss of earnings was not. The issue was whether the intervention of G&#8217;s criminal act in the causal relationship between T&#8217;s breaches of duty and the damage of which he complained prevented him from recovering that loss caused by the criminal act. But for the accident and the stress disorder it caused, G would not have killed and would not have suffered the consequences for which he sought compensation; on the other hand, the killing was a voluntary and deliberate act.",
        "T argued that a rule of law based on public policy, an aspect of the wider principle of ex turpi causa, prevented a person from recovering compensation for losses suffered in consequence of his own criminal act or, more narrowly, prevented a person recovering for damage that was the consequence of a sentence imposed on him for a criminal act."
    ],
    "FLAGS": [
        "Approved",
        "Hoffmann"
    ],
    "COUNSEL": "For the appellants: Christopher Purchas QC, Steven Snowden. For the respondents: Anthony Scrivener QC, Toby Riley-Smith.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Damages",
        "Negligence",
        "Causation",
        "Compensatory Damages",
        "Criminal Conduct",
        "Ex Turpi Causa",
        "Intervening Events",
        "Post-Traumatic Stress Disorder",
        "Public Policy"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Damages &mdash; Negligence &mdash; Causation &mdash; Compensatory Damages &mdash; Criminal Conduct &mdash; Ex Turpi Causa &mdash; Intervening Events &mdash; Post-Traumatic Stress Disorder &mdash; Public Policy",
    "SUMMARY": [
        "A rule of law that was based on public policy and which was an aspect of the principle of ex turpi causa precluded a person from recovering compensation either for losses suffered in consequence of his own criminal act or for damage that was the consequence of a sentence imposed on him for a criminal act. A claimant who had committed manslaughter as a result of psychological problems caused by the negligence of a third party was therefore precluded from recovering from that third party general damages and loss of earnings flowing from his crime."
    ],
    "COURT": "UKHL",
    "CITATION": "Gray v Thames Trains [2009] UKHL 33",
    "NUMBER": "380",
    "YEAR": "2009"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Joyce v O'Brien",
        "(wl) Orchard v Lee",
        "(wl) Jolley v Sutton LBC",
        "(wl) Barber v Somerset County Council",
        "(wl) Barnett v Chelsea & Kensington Hospital Management Committee",
        "(wl) Gray v Thames Trains",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) Williams v University of Birmingham",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Wooten v J Docter"
    ],
    "NAME": "(wl) Corr v IBC Vehicles Ltd",
    "JUDGE": "Lord Bingham of Cornhill; Lord Scott of Foscote; Lord Walker of Gestingthorpe; Lord Mance; Lord Neuberger of Abbotsbury",
    "CIT": "[2008] UKHL 13",
    "HELD": [
        "Appeal dismissed.",
        "(1) V owed D a duty to avoid causing him psychological as well as physical injury. Its breach caused D injury of both kinds. While D was not, at the time of his death, insane in M&#8217;Naghten terms, nor was he fully responsible. He acted in a way which he would not have done but for the injury from which V&#8217;s breach caused him to suffer. That being so, his conduct in taking his own life could not be said to fall outside the scope of the duty which V owed him. (2) Depression, possibly very severe, was a foreseeable consequence of V&#8217;s breach. It was not incumbent on C to show that suicide itself was foreseeable. A tortfeasor who reasonably foresaw the occurrence of some damage need not foresee the precise form which the damage might take, Hughes v Lord Advocate [1963] A.C. 837 applied. Some manifestations of severe depression could properly be held to be so unusual and unpredictable as to be outside the bounds of what was reasonably foreseeable, but suicide could not be so regarded. It was not a usual manifestation, but it was not uncommon. Further, in the circumstances suicide was reasonably foreseeable by V, considering the possible effect of such an accident on a hypothetical employee. (3) Suicide could be a novus actus if a person took his own life as a conscious decision in the absence of any disabling mental illness, Wright v Davidson (1992) 88 DLR (4th) 698 considered. However, D&#8217;s suicide was not a voluntary, informed decision taken by him as an adult of sound mind making and giving effect to a personal decision about his future. It was the response of a man suffering from a severely depressive illness which impaired his capacity to make reasoned and informed judgments about his future, such illness being a consequence of V&#8217;s tort. It was not unfair to hold V responsible for that consequence of its breach of duty. In order for C to be able to recover, it was not necessary to show that D was insane in M&#8217;Naghten terms. (4) Since the suicide was not a novus actus it was impossible to hold that the damages attributable to the death were rendered too remote because the deceased&#8217;s conduct was unreasonable. (5) D had not consented to the accident and injury which befell him. Nor did he consent to his suicide which was the result of a psychological condition induced by V&#8217;s breach of duty. (6) It was not appropriate for the court to decide the contributory negligence issue on which the courts below had made no findings. (Per Lords Scott, Mance and Neuberger) A deduction for contributory negligence could be appropriate in circumstances of deliberate suicide committed in a state of depression induced by an accident, Reeves v Commissioner of Police of the Metropolis [2000] 1 A.C. 360 considered."
    ],
    "ABSTRACT": [
        "The appellant company (V) appealed against a decision ([2006] EWCA Civ 331, [2007] Q.B. 46) that the respondent widow (C) was entitled to recover damages under the Fatal Accidents Act 1976 s.1 in respect of the financial loss attributable to the suicide of her late husband (D).",
        "D had been employed by V as a maintenance engineer. He had been struck on the head by a machine he was working on. After the accident D underwent reconstructive surgery. He remained disfigured and suffered from post traumatic stress disorder. He became depressed and his condition worsened over time. He committed suicide nearly six years after the accident. He had begun proceedings against V claiming damages for the physical and psychological injuries which he had suffered. After D&#8217;s death C was substituted as claimant. V accepted that the accident involved a breach of the duty owed to D to take reasonable care to avoid causing him personal injury, including psychological injury. It was agreed that the depressive illness from which D suffered was caused by the accident and that his depressive illness drove him to take his own life. The issue dividing the parties was whether the damages claimed by C under the 1976 Act in respect of the financial loss attributable to D&#8217;s suicide were too remote.",
        "V submitted that D&#8217;s suicide (1) fell outside the duty of care owed to him by V; (2) was not an act which was reasonably foreseeable and therefore not one for which V should be held liable; (3) broke the chain of causation and constituted a novus actus interveniens; (4) was an unreasonable act which broke the chain of causation; (5) was the voluntary act of the deceased, and so precluded by the principle volenti non fit injuria ; (6) amounted to contributory negligence."
    ],
    "FLAGS": [
        "Approved",
        "Neuberger",
        "Bingham"
    ],
    "COUNSEL": "For the appellant: Jeremy Cousins QC, John Brennan, Justin Kitson. For the respondent: John Foy QC, Andrew Ritchie, Robert McAllister.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Negligence",
        "Employment",
        "Causation",
        "Consent",
        "Contributory Negligence",
        "Depression",
        "Duty of Care",
        "Fatal Accident Claims",
        "Foreseeability",
        "Insanity",
        "Intervening Events",
        "Remoteness",
        "Suicide",
        "Volenti Non Fit Injuria"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Negligence &mdash; Employment &mdash; Causation &mdash; Consent &mdash; Contributory Negligence &mdash; Depression &mdash; Duty of Care &mdash; Fatal Accident Claims &mdash; Foreseeability &mdash; Insanity &mdash; Intervening Events &mdash; Remoteness &mdash; Suicide &mdash; Volenti Non Fit Injuria",
    "SUMMARY": [
        "In the circumstances loss attributable to the death by suicide of her late husband was recoverable by his dependent widow under the Fatal Accidents Act 1976 s.1 in an action against his former employer, and her claim was not barred by principles of causation, remoteness and foreseeability."
    ],
    "COURT": "UKHL",
    "CITATION": "Corr v IBC Vehicles Ltd [2008] UKHL 13",
    "NUMBER": "381",
    "YEAR": "2008"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Jobling v Associated Dairies",
        "(wl) McLoughlin v O'Brian",
        "(wl) Haseldine v Daw",
        "(wl) Doughty v Turner Manufacturing Co",
        "(wl) Mullin v Richards",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Kent v Griffiths",
        "(wl) Jolley v Sutton LBC",
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Barber v Somerset County Council"
    ],
    "NAME": "(wl) Hughes v Lord Advocate",
    "JUDGE": "Lord Reid; Lord Jenkins; Lord Morris of Borth-y-Gest; Lord Guest; Lord Pearce",
    "CIT": "[1963] AC 837",
    "HELD": [
        "that the action succeeded as the lamp was a foreseeable source of danger and the injury flowed from it, albeit in an unpredictable way Glasgow Corp v Muir [1943] A.C. 448 distinguished."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1963",
    "CATEGORIES": [
        "Damages Other Related Subjects: Negligence",
        "Accidents",
        "Foreseeability",
        "Negligence",
        "Road Works",
        "Scotland"
    ],
    "CATEGORY": "Damages Other Related Subjects: Negligence &mdash; Accidents &mdash; Foreseeability &mdash; Negligence &mdash; Road Works &mdash; Scotland",
    "SUMMARY": [
        "Remoteness; foreseeable kind of danger",
        "The Post Office opened a manhole in a street under its statutory powers to maintain underground telephone equipment. In the evening it was left with a tent over it and paraffin lamps round it. An eight-year-old boy went into the tent and knocked or dropped one of the lamps down the hole, causing an explosion which injured him. He sued the Lord Advocate on behalf of the Post Office for damages in negligence."
    ],
    "COURT": "UKHL",
    "CITATION": "Hughes v Lord Advocate [1963] AC 837",
    "NUMBER": "382"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) Doughty v Turner Manufacturing Co",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Gray v Thames Trains",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Humber Oil v The Owners of the Ship 'The Sivand'",
        "(wl) Mullin v Richards",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Kent v Griffiths",
        "(wl) Hughes v Lord Advocate"
    ],
    "NAME": "(wl) Jolley v Sutton LBC",
    "JUDGE": "Lord Browne-Wilkinson; Lord Mackay of Clashfern; Lord Steyn; Lord Hoffmann; Lord Hobhouse of Woodborough",
    "CIT": "[2000] 1 WLR 1082",
    "HELD": [
        "allowing the appeal, that the actions of the boys were not so far removed from normal play so as to render them unforeseeable. The judge at first instance had been perceptive in his comment that children&#8217;s play could include the mimicry of adult behaviour. The Court of Appeal was justified by disturbing the judge&#8217;s findings of fact on that issue, Hughes v Lord Advocate [1963] A.C. 837 and Overseas Tankship (UK) Ltd v Morts Dock &amp; Engineering Co (The Wagon Mound) [1961] A.C. 388 considered."
    ],
    "FLAGS": [
        "Approved",
        "Hoffmann"
    ],
    "COUNSEL": "For J: Brian Langstaff Q.C. and Paul Spencer. For the council: Michael de Navarro Q.C. and Howard Palmer Q.C.",
    "CATEGORIES": [
        "Negligence",
        "Causation",
        "Contributory Negligence",
        "Foreseeability",
        "Local Authorities",
        "Occupiers' Liability"
    ],
    "CATEGORY": "Negligence &mdash; Causation &mdash; Contributory Negligence &mdash; Foreseeability &mdash; Local Authorities &mdash; Occupiers' Liability",
    "SUMMARY": [
        "J was rendered paraplegic in an accident involving an abandoned derelict boat and SLBC were found to have been in breach of their duty as occupiers pursuant to the Occupiers&#8217; Liability Act 1957 s.2(2). J appealed against the subsequent reversal of the decision contending that the Court of Appeal had wrongly concluded that the nature and circumstances of the accident were not reasonably foreseeable. The court held that it was reasonably foreseeable that play, particularly that of teenagers, would involve some mimicry of adult behaviour and there was no distinction between normal play and the boys&#8217; endeavours to repair the boat.",
        "J, aged 14, was rendered paraplegic in 1990 when a boat which had been abandoned in 1987, on an area of grass outside a block of flats owned by SLBC, fell upon him as he attempted to effect repairs to the structure. The boat had previously been jacked up by J and another boy, W, aged 13. J commenced proceedings against SLBC alleging breach of the Occupiers Liability Act 1957 s.2(2) . At first instance the court gave judgment for J subject to a 25 per cent reduction for contributory negligence, the judge finding that the boat was a trap or allurement to children and the accident reasonably foreseeable. The decision was reversed on appeal to the Court of Appeal, the court holding that the accident was not reasonably foreseeable since the actions of the boys in lifting and propping up the boat were very different activities to normal children&#8217;s play and that the only foreseeable risk was of injury caused by children climbing on the boat and falling through the rotten wood. J appealed."
    ],
    "COURT": "UKHL",
    "CITATION": "Jolley v Sutton LBC [2000] 1 WLR 1082",
    "NUMBER": "383",
    "YEAR": "2000"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Kent v Griffiths",
        "(wl) Hughes v Lord Advocate",
        "(wl) Jolley v Sutton LBC",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) Mullin v Richards",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Various Claimants v Institute of the Brothers of the Christian Schools",
        "(wl) Lamb v Camden LBC",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Pierce v Doncaster MBC",
        "(wl) Gray v Thames Trains",
        "(wl) Wooldridge v Sumner"
    ],
    "NAME": "(wl) Doughty v Turner Manufacturing Co",
    "CIT": "[1964] 1 QB 518",
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1964",
    "JUDGE": "Lord Pearce; Harman LJ; Diplock LJ",
    "NUMBER": "384",
    "CATEGORIES": [
        "Negligence",
        "Causes of Action",
        "Foreseeability",
        "Health and Safety at Work"
    ],
    "CATEGORY": "Negligence &mdash; Causes of Action &mdash; Foreseeability &mdash; Health and Safety at Work",
    "SUMMARY": [
        "Damages; damage caused different from foreseeable damage",
        "A was injured by an eruption caused by chemical changes in a loose compound asbestos cement cover accidentally dropped 4 or 6 inches into a cauldron of molten metal. The employers were not negligent in failing to foresee the chemical changes or the eruption which would result. They should have foreseen that there was a danger from splashing metal on a cover being dropped into the cauldron, but the eruption occurred after all danger from splashing had ceased. In an action by A against the employer for damages in negligence, held that the accident which happened was entirely different from the kind of damage which could have been foreseen, therefore the element of foreseeability of damage was absent, there was no cause of action in negligence, and the action failed. (Overseas Tankship (UK) Ltd v Morts Dock &amp; Engineering Co (The Wagon Mound) [1961] A.C. 388 applied; Hughes v Lord Advocate [1963] A.C. 837 distinguished; Rylands v Fletcher (1868) L.R. 3 H.L. 330 considered)."
    ],
    "CITATION": "Doughty v Turner Manufacturing Co [1964] 1 QB 518",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Jolley v Sutton LBC",
        "(wl) Hughes v Lord Advocate",
        "(wl) Doughty v Turner Manufacturing Co",
        "(wl) Kent v Griffiths",
        "(wl) Mullin v Richards",
        "(wl) Revill v Newbery",
        "(wl) McLoughlin v O'Brian",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) White v Chief Constable of South Yorkshire",
        "(wl) Richardson v LRC Products Ltd"
    ],
    "NAME": "(wl) Smith v Leech Brain and Co Ltd",
    "CIT": "[1962] 2 QB 405",
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1962",
    "JUDGE": "Lord Parker LCJ",
    "NUMBER": "385",
    "CATEGORIES": [
        "Damages",
        "Death",
        "Foreseeability",
        "Liabilities",
        "Negligence"
    ],
    "CATEGORY": "Damages &mdash; Death &mdash; Foreseeability &mdash; Liabilities &mdash; Negligence",
    "SUMMARY": [
        "Remotenes; foreseeable damage; test of liability; Fatal Accidents",
        "The decision in the Overseas Tankship (UK) Ltd v Morts Dock &amp; Engineering Co (The Wagon Mound) [1961] A.C. 388 case has not altered the rule that a tortfeasor takes the person he injures as he finds him. The test of liability is whether the tortfeasor could reasonably foresee the type of injury suffered.Per Lord Parker, C.J.: The Wagon Mound case would be followed in England where the facts were similar.The plaintiff&#8217;s husband&#8217;s lip was burnt by splashing molten metal while galvanizing an article in the course of his employment. The injury was due to the negligence of the defendants, the husband&#8217;s employers. The burn was the promoting agent of a cancer in tissues which already had a pre-malignant condition, which in three years killed the husband. In an action by the plaintiff against the defendants under the Fatal Accidents Acts 1846-1908, and the Law Reform (Miscellaneous Provisions) Act 1934, held that as the defendants could have foreseen injury by burning they were liable in damages for the resulting death. (Smith v London &amp; South Western Railway Co (1870-71) L.R. 6 C.P. 14 applied; Overseas Tankship (UK) Ltd v Morts Dock &amp; Engineering Co (The Wagon Mound) [1961] A.C. 388 distinguished and Polemis and Furness Withy &amp; Co Ltd, Re [1921] 3 K.B. 560 considered)."
    ],
    "CITATION": "Smith v Leech Brain and Co Ltd [1962] 2 QB 405",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Owens v Brimmell",
        "(wl) Gough v Thorne",
        "(wl) Harris v Perry and another",
        "(wl) Co-operative Group Ltd v Pritchard",
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Jolley v Sutton LBC",
        "(wl) McLoughlin v O'Brian",
        "(wl) Poppleton v Trustees of the Portsmouth Youth Activities Committee",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Badger v Ministry of Defence"
    ],
    "NAME": "(wl) Froom v Butcher",
    "JUDGE": "Lord Denning MR; Lawton LJ; Scarman LJ",
    "CIT": "[1976] QB 286",
    "HELD": [
        "Appeal allowed.",
        "A reduction of twenty per cent would be made. It was held that that the prudent man should guard against the possibility of negligence by others by wearing a seat belt; that the chances of injury are four times as great when a seat belt is not worn; that in determining whether contributory negligence is made out the proper question is not what or who caused the accident but what was the cause of the damage. (Decision of Nield J. [1974] C.L.Y. 2563 reversed; Pasternak v Poulton [1973] 1 W.L.R. 476 approved; Smith v Blackburn [1974] 2 Lloyd&#8217;s Rep. 229 [1974] C.L.Y. 2562 disapproved, Freeborn v Thomas [1975] R.T.R. 16 disapproved and Chapman v Ward [1975] 1 Lloyd&#8217;s Rep. 309 disapproved). (Per Lord Denning M.R.) Where injuries would have been altogether prevented by the wearing of a seat belt, the damages should be reduced by 25 per cent.; where injuries would have been &#8220;a good deal less severe&#8221; the reduction should be fifteen per cent."
    ],
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "YEAR": "1976",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Road Traffic",
        "Accidents",
        "Contributory Negligence",
        "Road Safety"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Road Traffic &mdash; Accidents &mdash; Contributory Negligence &mdash; Road Safety",
    "SUMMARY": [
        "Where injuries resulting from a road accident would have been prevented or lessened if a fitted seat belt had been worn, the failure to wear a seat belt amounts to contributory negligence on the part of the plaintiff and damages awarded should therefore be reduced.",
        "The plaintiff, who was not wearing the fitted seat belt while driving his car, received head and chest injuries and a broken finger as the result of a collision solely attributable to the negligent driving of the defendant. Except for the broken finger, the injuries would probably have been prevented by the wearing of a seat belt. The plaintiff stated in evidence that he did not like wearing the belt because of the danger of being trapped in the vehicle after the crash and because he did not drive at more than normal speed. Nield J. had held that the omission to wear the seat belt did not amount to contributory negligence upon the basis, inter alia, that to find otherwise would constitute an unjustified invasion of the freedom of choice of the motorist; if he was wrong, he would have reduced the damages by twenty per cent."
    ],
    "COURT": "EWCA",
    "CITATION": "Froom v Butcher [1976] QB 286",
    "NUMBER": "386"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Gough v Thorne",
        "(wl) Froom v Butcher",
        "(wl) Jolley v Sutton LBC",
        "(wl) Badger v Ministry of Defence",
        "(wl) Poppleton v Trustees of the Portsmouth Youth Activities Committee",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Co-operative Group Ltd v Pritchard",
        "(wl) Attorney General v PYA Quarries Ltd (no 1)",
        "(wl) Baturina v Times Newspapers",
        "(wl) Butcher v Southend-on-Sea BC"
    ],
    "NAME": "(wl) Owens v Brimmell",
    "JUDGE": "Watkins J",
    "CIT": "[1977] QB 859",
    "HELD": [
        "P had been guilty of contributory negligence, but only to the extent of 20 per cent, Insurance Commissioner v Joyce 77 C.L.R. 39, Car &amp; General Insurance Corp v Seymour and Maloney (1956) 2 D.L.R. (2d) 369 and Miller v Decker (1957) 9 D.L.R. (2d) 1 applied."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1977",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Road Traffic",
        "Contributory Negligence",
        "Drink Driving Offences",
        "Passengers"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Road Traffic &mdash; Contributory Negligence &mdash; Drink Driving Offences &mdash; Passengers",
    "SUMMARY": [
        "Contributory negligence; road accident; passenger knowing driver under influence of drink",
        "A plaintiff may be guilty of contributory negligence if he travels as a passenger when he knows the driver has consumed enough alcohol to impair his ability to drive safely, or if he goes drinking with the driver knowing he will be a passenger later when the drink deprives him of his own capacity to appreciate the danger. P and D went out in D&#8217;s car for a pub-crawl. They both drank a great deal. On the way home there was an accident, caused by D&#8217;s negligence, and P suffered severe and permanent injury. Later D pleaded guilty to driving without due care and attention and with excess alcohol in his blood. P claimed damages. D contended that the damages should be reduced due to P&#8217;s contributory negligence."
    ],
    "COURT": "EWHC",
    "CITATION": "Owens v Brimmell [1977] QB 859",
    "NUMBER": "387"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Gregg v Scott",
        "(wl) Barker v Corus (UK)",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) Phipps v Rochester Corporation",
        "(wl) Poppleton v Trustees of the Portsmouth Youth Activities Committee",
        "(wl) Kennaway v Thompson",
        "(wl) Co-operative Group Ltd v Pritchard",
        "(wl) Coventry v Lawrence",
        "(wl) Piper v JRI (Manufacturing) Ltd",
        "(wl) Dobson v Thames Water Utilities"
    ],
    "NAME": "(wl) Badger v Ministry of Defence",
    "JUDGE": "Stanley Burnton J",
    "CIT": "[2005] EWHC 2941 (QB)",
    "HELD": [
        "assessing damages, that R&#8217;s continued smoking constituted contributory negligence. When the first health warnings were put on cigarette packets, it was reasonably foreseeable by a reasonably prudent man that if he smoked he risked damaging his health. In addition, R had been specifically advised about the damaging effects of smoking on his health. He had been advised to stop smoking on numerous occasions. However, R could not be criticised for starting to smoke. When he began smoking the connection between smoking and serious ill health was not widely accepted. R&#8217;s fault was in failing to give up smoking. There was no evidence that R was so addicted to tobacco that he could not reasonably have been expected to have stopped smoking: R could have given up smoking. R had been guilty of a fault that was partly responsible for his death. A reasonably prudent man, warned that there was a substantial risk that smoking would seriously damage his health, would stop smoking, Froom v Butcher [1976] Q.B. 286, Jones v Livox Quarries Ltd [1952] 2 Q.B. 608 and Stapley v Gypsum Mines Ltd [1953] A.C. 663 considered. The principle of contributory negligence was that a person had responsibility for his actions. The reduction in damages that was just and equitable had to take account of the relative blameworthiness of the parties&#8217; conduct, Boothman v British Northrop (1972) 13 K.I.R. 112 and O&#8217;Connell v Jackson [1972] 1 Q.B. 270 applied. The MOD accepted that it was guilty of breaches of statutory duty at a time when the dangers of asbestos were known. Therefore, R&#8217;s contributory negligence was less than 50 per cent. The contribution to his combined risk of his continued smoking when he should have stopped was in the region of a half of his ultimate risk. The appropriate reduction in damages attributable to R&#8217;s continued smoking after he should have stopped was 20 per cent and the damages recoverable by B were reduced by that amount."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the claimant: Christopher Goddard. For the defendant: Wendy Outhwaite.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Damages",
        "Asbestos",
        "Cancer",
        "Contributory Negligence",
        "Damages",
        "Reduction",
        "Smoking"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Damages &mdash; Asbestos &mdash; Cancer &mdash; Contributory Negligence &mdash; Damages &mdash; Reduction &mdash; Smoking",
    "SUMMARY": [
        "A wife&#8217;s claim for damages, following the death of her husband through exposure to asbestos was reduced by 20 per cent, as her husband had contributed to his own death by refusing to give up smoking, which had also caused the lung cancer that killed him.",
        "The defendant MOD sought a reduction in the damages to be paid to the claimant widow (B) after it had admitted liability in negligence for the death of her husband (R). R had died of lung cancer at the age of 63. He had previously been employed by the MOD as a boiler maker, during the course of which employment he was exposed to asbestos fibres, which were causative of the lung cancer that killed him. R had smoked for the majority of his life, which was also causative of his cancer. R had received numerous warnings about the damage that his continued smoking was causing to his health and the government had issued the first health warnings about smoking in the 1970s. Despite the warnings that he received he did not stop smoking. The MOD admitted primary liability for B&#8217;s claim. The MOD submitted that B&#8217;s claim should be reduced by 25 per cent on account of R&#8217;s contributory negligence, as he had continued to smoke when he knew or should have known that in doing so he was liable to damage his health."
    ],
    "COURT": "EWHC",
    "CITATION": "Badger v Ministry of Defence [2005] EWHC 2941 (QB)",
    "NUMBER": "388",
    "YEAR": "2005"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Froom v Butcher",
        "(wl) Owens v Brimmell",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Jolley v Sutton LBC",
        "(wl) Keown v Coventry Healthcare NHS Trust",
        "(wl) Harris v Perry and another",
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Orchard v Lee",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Co-operative Group Ltd v Pritchard",
        "(wl) Platt v Liverpool City Council",
        "(wl) Poppleton v Trustees of the Portsmouth Youth Activities Committee"
    ],
    "NAME": "(wl) Gough v Thorne",
    "JUDGE": "Lord Denning MR; Danckwerts LJ; Salmon LJ",
    "CIT": "[1966] 1 WLR 1387",
    "HELD": [
        "that in the circumstances it was not negligent of P to rely on the lorry driver, there was no contributory negligence and D must compensate P in full."
    ],
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "YEAR": "1966",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Road Traffic",
        "Children",
        "Contributory Negligence",
        "Roads"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Road Traffic &mdash; Children &mdash; Contributory Negligence &mdash; Roads",
    "SUMMARY": [
        "Contributory negligence; children; highways",
        "A very young child cannot be guilty of contributory negligence. An older child may, depending on the circumstances, be of such an age as to be expected to take precautions for his or her own safety, but only if blame can be attached to him or her. A lorry driver stopped, put out a hand to stop other traffic on his right, and waved P, a girl aged 13 1/2, across in front of him. D drove past the lorry on the right as P emerged without looking out and injured her. In an action by P against D for damages for negligence D pleaded contributory negligence by P."
    ],
    "COURT": "EWCA",
    "CITATION": "Gough v Thorne [1966] 1 WLR 1387",
    "NUMBER": "389"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) John v MGN Ltd",
        "(wl) Mohamud v WM Morrison Supermarkets Plc",
        "(wl) Hinz v Berry",
        "(wl) Attorney General of the British Virgin Islands v Hartwell",
        "(wl) Dobson v Thames Water Utilities",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Spiller v Joseph",
        "(wl) Froom v Butcher",
        "(wl) Telnikoff v Matusevich",
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Corr v IBC Vehicles Ltd"
    ],
    "NAME": "(wl) Co-operative Group Ltd v Pritchard",
    "JUDGE": "Sir Anthony May PQBD; Smith LJ; Aikens LJ",
    "CIT": "[2011] EWCA Civ 329",
    "HELD": [
        "Appeal allowed in part.",
        "It was clear from s.1(1) of the Act that its purpose was not to reduce the damages which would have previously have been awarded against defendants, Standard Chartered Bank v Pakistan National Shipping Corp (No.2) [2002] UKHL 43, [2003] 1 A.C. 959 followed. C was only entitled to assert that P was contributorily negligent so that any damages to which she was entitled had to be reduced if, at common law, there was a defence of contributory negligence to a claim against a defendant for damages for the torts of assault or battery. There was no case before the Act which held that there was such a defence in the case of an intentional tort such as assault and battery. Insofar as there were cases since the Act that suggested that it could be used to reduce damages awarded for the torts of assault or battery in a case where it was found that the claimant was contributorily negligent, they were unsatisfactory and could not stand with statements of principle made in two subsequent House of Lords decisions, Lane v Holloway [1968] 1 Q.B. 379 and Murphy v Culhane [1977] Q.B. 94 considered, Reeves v Commissioner of Police of the Metropolis [2000] 1 A.C. 360 and Standard Chartered Bank followed. As a matter of law, therefore, C could not rely on contributory negligence to defeat P&#8217;s claim or to reduce the damages otherwise to be awarded to her (see paras 31, 48-49, 61-63 of judgment). (2) The judge was not entitled to reach the conclusion that he had as to the cause of P&#8217;s agoraphobia. Having rejected entirely the evidence of B and generally accepted X&#8217;s evidence, he had to have given a good reason to reject a particular view of X on the effect of the assault on the psychiatric condition of P, given her medical history to date. He had not done so. The judge should have accepted X&#8217;s opinion and concluded that the effect of the assault was to accelerate a psychiatric state, including agoraphobia, that P would have reached in any event. The damages awarded had, accordingly, to be reduced (paras 72-74)."
    ],
    "ABSTRACT": [
        "The appellant (C) appealed against decisions that the defence of contributory negligence was not available to it in the claim of the respondent (P) for damages for assault and battery, and that the commission of those torts had caused P to suffer from agoraphobia.",
        "P had been employed by C. Having been refused a day&#8217;s leave, she and her sister had visited the store where she worked and confronted the manager (W). They were abusive to W and he asked them to leave. When they refused, W took P&#8217;s arms firmly and held them in front of her. A struggle ensued and P bit W. P stumbled on a step as she left the premises. P never returned to work at the store and C terminated her employment. She alleged that W&#8217;s assault led to a near complete psychiatric breakdown, depression and agoraphobia and left her unable to work. P issued proceedings against C seeking damages for assault and battery, for which acts C was said to be vicariously liable. C denied that W had assaulted P but asserted, alternatively, that her own negligence or conduct had caused or contributed to the assault. P denied that contributory negligence had any legal relevance in relation to the claim for assault and battery. At trial, the parties called consultant psychiatrists who disagreed on the effect of an assault on P&#8217;s psychological problems. C&#8217;s expert (X) stated that even if the court accepted P&#8217;s evidence on the assault in full, she would have ended up in a similar situation within one to two years with increasing periods of ill-health due to anxiety and depression. P&#8217;s expert (B) considered that if the assault was proven, that would be a major factor that would have disturbed P psychologically and affected her capacity to work. The judge found that P had suffered assault and battery by W as alleged and that, although there was a degree of provocation on her part, it was not open to him to make a finding of contributory negligence against her under the Law Reform (Contributory Negligence) Act 1945. He rejected B&#8217;s evidence and generally accepted the evidence of X but concluded that, as a result of the assault, P had suffered significant psychiatric symptoms, including agoraphobia, and that but for the assault she would have continued to work, notwithstanding her psychiatric history. The judge awarded P special damages based on her past loss of earnings from the assault up to the date of trial plus two years&#8217; worth of future loss of earnings, together with general damages and a sum for future vulnerability on the labour market. It fell to be determined (i) if a claimant sued a defendant for damages for the torts of assault and battery whether, as a matter of law, the defendant could assert that there was contributory negligence on the part of the claimant such that any damages awarded might be reduced; (ii) whether the judge had correctly understood or recollected the effect of X&#8217;s evidence on the issue of P&#8217;s agoraphobia, and if so, what the consequences were in terms of the damages due to her."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Anthony Reddiford. For the respondent: Adam C Chippindall.",
    "CATEGORIES": [
        "Torts Other Related Subjects: Damages",
        "Assault",
        "Battery",
        "Contributory Negligence",
        "Defences",
        "Measure of Damages"
    ],
    "CATEGORY": "Torts Other Related Subjects: Damages &mdash; Assault &mdash; Battery &mdash; Contributory Negligence &mdash; Defences &mdash; Measure of Damages",
    "SUMMARY": [
        "Where a claimant sued a defendant for damages for the torts of assault and battery, as a matter of law, the defendant could not assert that there was contributory negligence on the part of the claimant such that any damages awarded might be reduced under the Law Reform (Contributory Negligence) Act 1945."
    ],
    "COURT": "EWCA",
    "CITATION": "Co-operative Group Ltd v Pritchard [2011] EWCA Civ 329",
    "NUMBER": "390",
    "YEAR": "2011"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Lamb v Camden LBC",
        "(wl) Revill v Newbery",
        "(wl) James McNaughton Paper Group Ltd v Hicks Anderson & Co",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) Doughty v Turner Manufacturing Co",
        "(wl) Kent v Griffiths",
        "(wl) Hussain v Lancaster CC",
        "(wl) British Celanese Ltd v AH Hunt (Capacitors) Ltd",
        "(wl) Transco Plc v Stockport MBC"
    ],
    "NAME": "(wl) Wooldridge v Sumner",
    "CIT": "[1963] 2 QB 43",
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1963",
    "JUDGE": "Sellers LJ; Danckwerts LJ; Diplock LJ",
    "NUMBER": "391",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Hospitality and Leisure",
        "Sport",
        "Competitions",
        "Horses",
        "Mistake",
        "Negligence",
        "Spectators"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Hospitality and Leisure &mdash; Sport &mdash; Competitions &mdash; Horses &mdash; Mistake &mdash; Negligence &mdash; Spectators",
    "SUMMARY": [
        "Games; horse show",
        "The duty of care which a competitor or participant in a sport or game owes to a spectator depends on the standard of conduct which the sport or game permits or involves, and a spectator takes the risk of damage done to him by participants in the course of and for the purposes of that sport or game, notwithstanding that such damage may be the result of an error of judgment by the competitor, provided it is not reckless or deliberate. The plaintiff, a photographer, was injured at a horse show by S.&#8217;s horse, which was ridden in a competition by S.&#8217;s employee H., who was a skilled and experienced horseman. The plaintiff sued S. and H. The judge found that the accident was caused by the negligence of H. and awarded the plaintiff damages. On appeal, held (1) that H.&#8217;s conduct, though involving an error of judgment, did not, in the circumstances of the competition, amount to negligence; and (2) that in any event H.&#8217;s conduct did not cause the accident. Per curiam: the maxim &#8220;volenti non fit injuria&#8221; does not normally apply to cases of spectators suing participants in games, because the maxim cannot apply in the absence of negligence. Hall v Brooklands Auto Racing Club [1933] 1 K.B. 205, Bolton v Stone [1951] A.C. 850 and Murray v Harringay Arena [1951] 2 K.B. 529 applied; O&#8217;Dowd v Fraser-Nash [1951] W.N. 173, Cleghorn v Oldham (1927) 43 T.L.R. 465, Bourhill v Young [1943] A.C. 92, Kelly v Farrans [1954] N.I. 41, Letang v Ottawa Electric Railway Co [1926] A.C. 725 and Baker v TE Hopkins &amp; Son Ltd [1959] 1 W.L.R. 966 considered."
    ],
    "CITATION": "Wooldridge v Sumner [1963] 2 QB 43",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Roe v Minister of Health",
        "(wl) Joyce v O'Brien",
        "(wl) A and others v National Blood Authority",
        "(wl) Kennaway v Thompson",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Smith v Stages",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Worsley v Tambrands",
        "(wl) Walker v Northumberland County Council",
        "(wl) Lister v Hesley Hall",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees"
    ],
    "NAME": "(wl) ICI v Shatwell",
    "JUDGE": "Lord Neuberger PSC; Lady Hale DPSC; Lord Hughes JSC; Lord Toulson JSC; Lord Thomas LCJ",
    "CIT": "[2016] UKSC 8",
    "HELD": [
        "Appeals allowed.",
        "The Chan Wing Siu principle could not be supported. The introduction of the principle was based on an incomplete, and in some respects erroneous, reading of the previous case law, coupled with generalised and questionable policy arguments. Reversing a statement of principle which had been made and followed by the Privy Council and the House of Lords on a number of occasions was a big step, but it was right to do so for several reasons. First, the court had had the benefit of a much fuller analysis than on previous occasions when the topic was considered. Second, it could not be said that the law was now well established and working satisfactorily; it remained highly controversial and a continuing source of difficulty for trial judges. Third, secondary liability was an important part of the common law, and if a wrong turn had been taken, it should be corrected. Fourth, in the common law foresight of what might happen was ordinarily no more than evidence from which a jury could infer the presence of a requisite intention. It might be strong evidence, but its adoption as a test for the mental element for murder in the case of a secondary party was a serious and anomalous departure from the basic rule, which resulted in an over-extension of the law of murder and a reduction of the law of manslaughter. Murder already had a relatively low mens rea threshold, as it included an intention to cause serious injury, without intent to kill or to cause risk to life. The Chan Wing Siu principle extended liability for murder to a secondary party on the basis of a still lesser degree of culpability, namely foresight only of the possibility that the principal might commit murder but without there being any need for an intention to assist him to do so. Fifth, the rule had the striking anomaly of requiring a lower mental threshold for guilt in the case of the accessory than in the case of the principal, Chan Wing Siu disapproved. It would not be satisfactory for the court simply to disapprove the Chan Wing Siu principle. Those concerned with criminal justice, including members of the public, were entitled to expect a clear statement of the relevant principles. The proper course was to re-state the principles which had been established over many years before the law took a wrong turn. The error was to equate foresight with intent to assist, as a matter of law; the correct approach was to treat foresight as evidence of intent. The long-standing practice, before Chan Wing Siu , of inferring intent to assist from a common criminal purpose which included the further crime, if the occasion for it were to arise, was always a legitimate one; what was illegitimate was to treat foresight as an inevitable yardstick of common purpose. The court proceeded to re-state the relevant principles. It also addressed the potential impact of the instant decision on past convictions (see paras 79-84, 87-100 of judgment)."
    ],
    "ABSTRACT": [
        "In conjoined appeals against decisions ([2013] EWCA Crim 1433) upholding convictions for murder, the Supreme Court was asked to review the doctrine of parasitic accessory liability, which had been laid down by the Privy Council in Chan Wing Siu v R. [1985] A.C. 168.",
        "In Chan Wing Siu , it was held that if two people set out to commit an offence and in the course of that joint enterprise one of them (D1) committed another offence (crime B), the second person would be guilty as an accessory to crime B if he had foreseen the possibility that D1 might act as he did."
    ],
    "FLAGS": [
        "Hale",
        "Neuberger"
    ],
    "COUNSEL": "For the appellant Jogee: Felicity Gerry QC, Catarina Sjolin, Adam Wagner, Diarmuid Laffan. For the appellant Ruddock: Julian Knowles QC, James Mehigan. For the Crown in Jogee: John McGuinness QC, Duncan Atkinson. For the Crown in Ruddock: Howard Stevens QC, Rowan Pennington-Benton. For the intervener (Just for Kids Law): Francis Fitzgibbon QC, Caoilfhionn Gallagher, Joanne Cecil, Daniella Waddoup. For the intervener (Joint Enterprise Not Guilty by Association): Timothy Moloney QC, Jude Bunting.",
    "CATEGORIES": [
        "Criminal Law",
        "Accessories",
        "Joint Enterprise",
        "Murder"
    ],
    "CATEGORY": "Criminal Law &mdash; Accessories &mdash; Joint Enterprise &mdash; Murder",
    "SUMMARY": [
        "The doctrine of parasitic accessory liability, laid down by the Privy Council in Chan Wing Siu v R. [1985] A.C. 168, could not be supported. The Supreme Court re-stated the principles concerning the liability of accessories or secondary parties."
    ],
    "COURT": "UKSC",
    "CITATION": "ICI v Shatwell [2016] UKSC 8",
    "NUMBER": "392",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) JGE v English Province of Our Lady of Charity",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Badger v Ministry of Defence",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Gregg v Scott",
        "(wl) Revill v Newbery",
        "(wl) Tomlinson v Congleton BC",
        "(wl) Clark v Bourne Leisure Limited",
        "(wl) Selwood v Durham CC",
        "(wl) Mullin v Richards"
    ],
    "NAME": "(wl) Morris v Murray",
    "JUDGE": "Fox LJ; Stocker LJ; Sir George Waller",
    "CIT": "[1991] 2 QB 6",
    "HELD": [
        "allowing the appeal, that his claim was barred by the defence of volenti non fit injuria. P must have realised how drunk the pilot was and thereby implicitly waived his right to damages (dictum in Dann v Hamilton [1939] 1 K.B. 509 applied)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1991",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Damages",
        "Aircraft",
        "Intoxication",
        "Personal Injury",
        "Volenti Non Fit Injuria"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Damages &mdash; Aircraft &mdash; Intoxication &mdash; Personal Injury &mdash; Volenti Non Fit Injuria",
    "SUMMARY": [
        "Volenti non fit injuria; passenger in light aircraft piloted by drunken pilot; whether entitled to damages",
        "A passenger who knowingly and willingly embarks on a flight with a drunken pilot is barred from obtaining damages by the defence of volenti. P had been drinking for some hours with the deceased when they decided to go for a ride in the deceased&#8217;s light aircraft. P assisted in preparing the aircraft, which took off, piloted by the deceased in conditions in which flying at the aerodrome had been suspended. The plane crashed, and P brought an action for negligence against the deceased&#8217;s estate. The judge awarded him GBP 130,000 damages."
    ],
    "COURT": "EWCA",
    "CITATION": "Morris v Murray [1991] 2 QB 6",
    "NUMBER": "393"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Pitts v Hunt",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Smith v Stages",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Mullin v Richards",
        "(wl) Doughty v Turner Manufacturing Co",
        "(wl) James McNaughton Paper Group Ltd v Hicks Anderson & Co",
        "(wl) Hussain v Lancaster CC",
        "(wl) Various Claimants v Institute of the Brothers of the Christian Schools"
    ],
    "NAME": "(wl) Revill v Newbery",
    "JUDGE": "Neill LJ; Evans LJ; Millett LJ",
    "CIT": "[1996] QB 567",
    "HELD": [
        "dismissing the appeal, that the finding of negligence was justified on the facts. As regards the doctrine of ex turpi causa non oritur actio, there was a public interest which required that someone engaging in illegal conduct should not benefit from his crime, but different considerations applied in cases arising in tort than in cases arising in a property or contract context, Tinsley v Milligan [1994] 1 A.C. 340 considered. Old common law authorities and the Law Commission report Liability for Damage or Injury to Trespassers (Cmnd 6428) acknowledged the existence of some duty towards trespassers and N could not rely on the doctrine to relieve him of liability."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For R: Peter Weitzman Q.C. and Jeremy H C Lea. For N: Brian R Escott Cox Q.C. and David Farrell.",
    "CATEGORIES": [
        "Negligence",
        "Liabilities",
        "Personal Injury",
        "Public Interest",
        "Self-Defence",
        "Trespass to Land"
    ],
    "CATEGORY": "Negligence &mdash; Liabilities &mdash; Personal Injury &mdash; Public Interest &mdash; Self-Defence &mdash; Trespass to Land",
    "SUMMARY": [
        "Ex turpi causa; excessive violence; trespasser shot; whether damages available; whether doctrine of ex turpi causa non oritur actio applicable",
        "N appealed against an award of damages in a personal injury action brought by R, who was shot at close range by N when trespassing on N&#8217;s allotment. N, who had been asleep in his shed when he was woken by R trying to break in, had poked his shotgun through a hole in the shed door and fired. The judge awarded damages on the basis that N had used violence in excess of the reasonable limits allowed by lawful self defence and was negligent by reference to the standard of care to be expected of a reasonable man who found himself in such a situation. N challenged the finding that he was negligent and also contended that he had a complete defence under the rule that no cause of action might be founded on an illegal or immoral act."
    ],
    "COURT": "EWCA",
    "CITATION": "Revill v Newbery [1996] QB 567",
    "NUMBER": "394",
    "YEAR": "1996"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Mullin v Richards",
        "(wl) Orchard v Lee",
        "(wl) Kent v Griffiths",
        "(wl) Barber v Somerset County Council",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Osman v Ferguson",
        "(wl) Pitts v Hunt",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Jobling v Associated Dairies",
        "(wl) Reeves v Metropolitan Police Commissioner"
    ],
    "NAME": "(wl) Vellino v Chief Constable of Greater Manchester",
    "JUDGE": "Schiemann LJ; Sedley LJ; Sir Murray Stuart-Smith",
    "CIT": "[2001] EWCA Civ 1249",
    "HELD": [
        "dismissing the appeal (Sedley, L.J. dissenting), that a police officer carrying out an arrest did not owe the person being arrested a duty of care to prevent him from injuring himself in a foreseeable attempt to escape from custody. It followed that in the circumstances of the instant case the two officers had not owed V a duty to prevent him from heading towards the window in an attempt to escape, Sacco v Chief Constable of South Wales (Unreported, May 15, 1998) applied. The act of escaping from custody was a criminal offence at common law but did not give rise to any liability in tort, National Coal Board v England [1954] A.C. 403 considered. Moreover, the Law Reform (Contributory Negligence) Act 1945 did not apply in circumstances where a claimant&#8217;s action constituted a common law crime which did not give rise to tortious liability. V&#8217;s criminal conduct had been sufficiently serious to merit the application of the principle of ex turpi causa. In the opinion of Sedley, L.J., a duty was owed by police officers not to afford the temptation or opportunity for a person in custody to escape where there was a known risk that he would do himself serious harm in so doing."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For V: David Stockdale Q.C. and Hugh Davies. For the Chief Constable: Andrew Edis Q.C. and David Mercer.",
    "CATEGORIES": [
        "Negligence",
        "Arrest",
        "Custody",
        "Duty of Care",
        "Escape",
        "Foreseeability",
        "Personal Injury",
        "Police Officers"
    ],
    "CATEGORY": "Negligence &mdash; Arrest &mdash; Custody &mdash; Duty of Care &mdash; Escape &mdash; Foreseeability &mdash; Personal Injury &mdash; Police Officers",
    "SUMMARY": [
        "A police officer carrying out an arrest did not owe the person being arrested a duty of care to prevent him from injuring himself in a foreseeable attempt to escape from custody.",
        "V, who had sustained serious injuries while attempting to escape from police custody, appealed against a decision that the police did not owe a duty of care to an arrested person to ensure that he did not injure himself in a foreseeable attempt to escape from custody. V had a history of being arrested at his flat and of seeking to evade arrest by jumping from the windows of the flat. He maintained that two police officers who had attended at his flat to arrest him had taken no action to prevent him from jumping from a window. The judge, whilst finding that it had been foreseeable that in jumping V would be likely to sustain injury and that if a duty existed the police officers had been in breach thereof, concluded that escaping from custody was a sufficiently serious criminal offence to attract the principle of ex turpi causa non oritur actio and in such circumstances no duty existed."
    ],
    "COURT": "EWCA",
    "CITATION": "Vellino v Chief Constable of Greater Manchester [2001] EWCA Civ 1249",
    "NUMBER": "395",
    "YEAR": "2001"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Gray v Thames Trains",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Mullin v Richards",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Smith v Stages",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Revill v Newbery",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) Wooldridge v Sumner",
        "(wl) W v Essex County Council and Another",
        "(wl) Michael v Chief Constable of South Wales"
    ],
    "NAME": "(wl) Pitts v Hunt",
    "JUDGE": "Dillon LJ; Balcombe LJ; Beldam LJ",
    "CIT": "[1991] 1 QB 24",
    "HELD": [
        "that the action arose directly ex turpi causa and P was precluded from recovering. In the circumstances, the Road Traffic Act 1972 s.148(3) did not preclude reliance on a defence of illegality (Smith v Jenkins (1970) 44 A.L.J.R. 78, Harrison v Jackson 138 C.L.R. 438, Ashton v Turner [1981] Q.B. 137 and Saunders v Edwards [1987] 1 W.L.R. 1116 considered; Winnik v Dick 1984 S.C. 48 applied)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1991",
    "CATEGORIES": [
        "Negligence",
        "Driving When Unfit",
        "Ex Turpi Causa",
        "Locus Standi",
        "Personal Injury"
    ],
    "CATEGORY": "Negligence &mdash; Driving When Unfit &mdash; Ex Turpi Causa &mdash; Locus Standi &mdash; Personal Injury",
    "SUMMARY": [
        "Contributory negligence; participant in criminal offence; pillion passenger knowingly riding with uninsured, unlicensed, intoxicated motorcyclist; whether recovery possible",
        "A pillion passenger who is injured in a collision where he has encouraged the rider to ride while intoxicated, uninsured and unlicensed cannot sue in respect of his injuries. The action arises ex turpi causa. P was a pillion passenger on a motorcyle which was involved in a collision with a car driven by J. The rider, H, was killed and P was injured. Both P and the rider had been drinking prior to the accident. P knew that the rider had no licence and was uninsured, and P had encouraged him to drive in a reckless manner. P sued J and H&#8217;s personal representatives for damages for his injuries."
    ],
    "COURT": "EWCA",
    "CITATION": "Pitts v Hunt [1991] 1 QB 24",
    "NUMBER": "396"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) JD v East Berkshire Community Health NHS Trust",
        "(wl) James McNaughton Paper Group Ltd v Hicks Anderson & Co",
        "(wl) Joyce v O'Brien",
        "(wl) Phipps v Rochester Corporation",
        "(wl) Patchett v Swimming Pool Trades Association",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) Robinson v Chief Constable of West Yorkshire"
    ],
    "NAME": "(wl) Moore Stephens v Stone Rolls Ltd",
    "JUDGE": "Lord Phillips of Worth Matravers; Lord Scott of Foscote; Lord Walker of Gestingthorpe; Lord Brown of Eaton-under-Heywood; Lord Mance",
    "CIT": "[2009] UKHL 39",
    "HELD": [
        "Appeal dismissed.",
        "(Lords Scott and Mance dissenting) (1) R was primarily rather than vicariously liable for the frauds. There was no doubt that S was the persona of R and it was common ground that he was the directing mind and will of the corporation. (2) The &#8220;sole actor&#8221; exception applied so as to disapply the Hampshire Land principle, Hampshire Land considered. S&#8217;s fraudulent conduct was to be treated as the conduct of R, and the principle of ex turpi causa defeated R&#8217;s claim. In the case of a &#8220;one-man company&#8221; that had deliberately engaged in serious fraud, awareness of that fraud was to be imputed to the company, Royal Brunei Airlines Sdn Bhd v Tan [1995] 2 A.C. 378 considered. In particular, the &#8220;sole actor&#8221; principle was to be applied to a claim made by a company in liquidation against its former auditors where the company was a one-man company engaged in fraud and where the auditors were accused of negligence in failing to call a halt to that fraud. R&#8217;s submission that a claim against auditors was a context in which it should not be treated as primarily liable for its fraud could not be accepted. On the assumption that M did owe a duty of care to R, it was a duty to the company as a whole and not to individual shareholders or creditors. If the only human embodiment of the company already knew about its fraudulent activities there was realistically no protection that its auditors could give it. Moreover, if the company was primarily liable because of the sole actor rule there was no innocent participator within the company who did not share the guilty knowledge. Therefore, one or more individuals who for fraudulent purposes ran a one-man company could not obtain an advantage by claiming that the company was not a fraudster but a secondary victim. (3) In arguing that ex turpi causa did not provide a defence where the claimant&#8217;s illegal conduct was the very thing that the defendant was under a duty to prevent, R was relying on a principle of causation. A principle of causation could not trump ex turpi causa where that latter principle applied, however short of merits the defendant might be. (4) R had also argued that the public policy defence ought not to bar claims brought by a company in insolvent liquidation where the creditors were innocent parties who had been defrauded by S. If that were right it would create a large gap in the public policy defence. Moreover, had S carried out his frauds directly, neither he nor his trustee in bankruptcy could have resisted the public policy defence. There was no good reason to apply a different rule to a company in liquidation. Apart from special statutory claims in respect of misfeasance, wrong trading and so on, it could not assert any cause of action which it could not have asserted before the commencement of its liquidation, and that was especially true in the context of the duties of an auditor, which were not owed to a company&#8217;s creditors. (5) (Per Lord Phillips) The essential issue was whether, in applying ex turpi causa to the instant case, one should look behind the company at those whose interests the relevant duty was intended to protect. Those for whose benefit the claim was brought fell outside the scope of any duty owed by M. The sole person for whose benefit such duty was owed was S, who was responsible for the fraud. In those circumstances ex turpi causa provided a defence to the claim. (6) The reasoning of the majority had the effect of relieving from all responsibility auditors who had negligently failed in their duty to check and report on the activities of one-man companies operating Ponzi schemes. That was questionable policy and it was not required by the law."
    ],
    "ABSTRACT": [
        "The appellant company (R) appealed against a decision ([2008] EWCA Civ 644, [2008] 3 W.L.R. 1146) upholding the striking out of its claim in contract and tort against the respondent auditors (M).",
        "R&#8217;s beneficial owner and sole directing mind and will, S, had used R as a vehicle for defrauding banks. When the fraud was discovered, the principal victim successfully sued R for deceit and was awarded substantial damages. Neither R nor S could satisfy the judgment and R went into liquidation. Its liquidators brought an action in negligence against M, seeking to recover losses caused to R in consequence of the extension of the period of its fraudulent activity caused by M&#8217;s breach of duty. M accepted, for the purposes of the instant proceedings, that they were in breach of their duty to exercise reasonable care and skill in carrying out their responsibilities as auditors and that but for their breach the fraud perpetrated by S would have been discovered earlier.",
        "M submitted, however, that the action could not succeed because it was founded on R&#8217;s fraud and was met by the defence of ex turpi causa. R argued that its liability for S&#8217;s frauds was vicarious; that by reason of the principle in Hampshire Land Co (No.2), Re [1896] 2 Ch. 743, S&#8217;s fraud could not be attributed to it; and that ex turpi causa did not provide a defence where the claimant&#8217;s illegal conduct was the very thing that the defendant was under a duty to prevent."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Michael Brindle QC, Mark Simpson QC, David Murray. For the respondent: Jonathan Sumption QC, Tom Adam QC.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Company Law",
        "Accountancy",
        "Auditors",
        "Corporate Insolvency",
        "Duty of Care",
        "Ex Turpi Causa",
        "Fraud",
        "Knowledge",
        "Professional Negligence"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Company Law &mdash; Accountancy &mdash; Auditors &mdash; Corporate Insolvency &mdash; Duty of Care &mdash; Ex Turpi Causa &mdash; Fraud &mdash; Knowledge &mdash; Professional Negligence",
    "SUMMARY": [
        "Where a &#8220;one-man company&#8221; had deliberately engaged in serious fraud, the principle of ex turpi causa prevented it from claiming that its auditors were in breach of their duty of care in failing to detect that fraud."
    ],
    "COURT": "UKHL",
    "CITATION": "Moore Stephens v Stone Rolls Ltd [2009] UKHL 39",
    "NUMBER": "397",
    "YEAR": "2009"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Joyce v O'Brien",
        "(wl) Pitts v Hunt",
        "(wl) Gray v Thames Trains",
        "(wl) Moore Stephens v Stone Rolls Ltd",
        "(wl) Keown v Coventry Healthcare NHS Trust",
        "(wl) Baturina v Times Newspapers",
        "(wl) Froom v Butcher",
        "(wl) Lewis v Daily Telegraph Ltd",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) R v Rimmington; R v Goldstien",
        "(wl) Wooten v J Docter",
        "(wl) Milne v Express Newspapers Ltd"
    ],
    "NAME": "(wl) Delaney v Pickett",
    "JUDGE": "Ward LJ; Richards LJ; Tomlinson LJ",
    "CIT": "[2011] EWCA Civ 1532",
    "HELD": [
        "Appeal allowed in part.",
        "(Ward L.J. dissenting as to the judge&#8217;s factual findings and on the MIB Agreement issue) (1) On the facts, the judge had been correct to find on the balance of probabilities that the transportation of illegal drugs had been the purpose of the journey. He had therefore proceeded on a correct factual basis when considering ex turpi causa and the MIB Agreement issue (see paras 62-63, 72 of judgment). (2) The judge had been wrong to uphold the ex turpi causa defence. The damage suffered by D had not been caused by his, or his and P&#8217;s, criminal activity. It had been caused by P&#8217;s tortious act in the negligent way in which he drove his car. In those circumstances the illegal acts were incidental and D was entitled to recover his loss from P, Gray v Thames Trains Ltd [2009] UKHL 33, [2009] 1 A.C. 1339 and Pitts v Hunt [1991] 1 Q.B. 24 followed (paras 37, 64, 73). (3) Although the MIB Agreement was intended to give effect to Directive 2009/103, the Directive gave only limited assistance in the interpretation of cl.6(1)(e) as it contained nothing corresponding to the clause. The most that could be derived was that a restrictive interpretation of the clause was required by the fact that it was an exclusion from the general principle of compensation set out in the Directive. It was obvious on the facts that the vehicle was being used in the furtherance and in the course of a crime within the meaning of the clause. &#8220;Crime&#8221; could not be read as being restricted to &#8220;serious crime&#8221;; that would leave the clause with little practical purpose. In any event, possession of a commercial quantity of cannabis with intent to supply was a serious crime to which the clause applied; given the finding that the very purpose of the journey had been the transportation of the drugs, the situation fell squarely within the wording of the clause. Use of the vehicle did not have to constitute an ingredient of the offence for the exclusion to apply; in any event, the vehicle had been an essential element in the crime, as D and P would not have wanted to carry so large a packet of drugs on public transport (paras 67-68, 77). (4) (Per Ward L.J.) The MIB Agreement had to be construed restrictively as it was an exception to the purpose of the Directive. Clause 6(1)(e)(iii) could not mean that compensation was excluded if the vehicle was being used for any crime, as that could be disproportionate; &#8220;crime&#8221; had to mean serious crime. The crime in the instant case had not been heinous enough to be the kind of crime covered by the clause (paras 48-51)."
    ],
    "ABSTRACT": [
        "The appellant car passenger (D) appealed against a decision to dismiss his claim for damages against the first respondent driver (P) and the second respondent insurer (T).",
        "D had been a passenger in P&#8217;s car when there was a serious accident caused by P&#8217;s negligence. When being rescued from the car, P was found to have sufficient cannabis to make 170 cigarettes stuffed down his sock, while D had a package sufficient to make 1,200 cannabis cigarettes under his jacket. D was seriously injured and brought proceedings. The judge rejected D&#8217;s case that P had taken him out for a drive in his new car, instead finding that D and P were in possession of the cannabis with intent to supply it. He accordingly held that D&#8217;s claim had arisen ex turpi causa and therefore failed. T was P&#8217;s insurer but had avoided his policy. It accepted its liability to meet D&#8217;s claim against P, but successfully argued that liability was excluded under the Motor Insurers&#8217; Bureau Agreement cl.6(1)(e)(iii) on the basis that D had known that the vehicle was being used in the course or furtherance of a crime."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Graham Wood QC. For the respondents: William Featherby QC.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Insurance",
        "Road Traffic",
        "Ex Turpi Causa",
        "Motor Insurers' Bureau",
        "Possession with Intent to Supply",
        "Road Traffic Accidents"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Insurance &mdash; Road Traffic &mdash; Ex Turpi Causa &mdash; Motor Insurers' Bureau &mdash; Possession with Intent to Supply &mdash; Road Traffic Accidents",
    "SUMMARY": [
        "A car passenger could not claim under the Motor Insurers&#8217; Bureau Agreement after he had been injured while in possession of cannabis with intent to supply, as the vehicle was being used in the course or furtherance of a crime within cl.6(1)(e)(iii) of the Agreement. Further, &#8220;crime&#8221; in that clause could not be read as being restricted to &#8220;serious crime&#8221;; that would leave the clause with little practical purpose."
    ],
    "COURT": "EWCA",
    "CITATION": "Delaney v Pickett [2011] EWCA Civ 1532",
    "NUMBER": "398",
    "YEAR": "2011"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Gray v Thames Trains",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Orchard v Lee",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Wooten v J Docter",
        "(wl) ICI v Shatwell",
        "(wl) Barker v Corus (UK)",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Moore Stephens v Stone Rolls Ltd"
    ],
    "NAME": "(wl) Joyce v O'Brien",
    "JUDGE": "Elias LJ; Rafferty LJ; Ryder LJ",
    "CIT": "[2013] EWCA Civ 546",
    "HELD": [
        "Appeal dismissed.",
        "(1) The wider principle was that a person could not recover compensation where his cause of action was based on his own criminal or immoral act. The test for determining liability had focused on causation, whereas the principle developed in joint enterprise cases had focused on the existence of a duty of care. However, the same causation principle should apply whether the criminal was acting alone or as part of a joint enterprise, Delaney v Pickett [2011] EWCA Civ 1532, [2012] 1 W.L.R. 2149 applied. When applying the causation principle developed in Gray v Thames Trains Ltd [2009] UKHL 33, [2009] 1 A.C. 1339, the courts should recognise the wider public policy considerations which had led them to deny joint liability in joint enterprise cases. The earlier authorities on joint enterprise provided valuable assistance in answering the question as to when the claimant&#8217;s injury would be treated as having been caused by his own conduct, notwithstanding that the immediate cause was the act of a partner in crime. They reflected what seemed to be the underlying policy, even if the rationale for denying liability had to be cast in terms of causation rather than duty. The injury would be caused by, rather than occasioned by, the criminal activity of the claimant where the joint criminal illegality affected the standard of care the claimant was reasonably entitled to expect from his partner in crime, Ashton v Turner [1981] Q.B. 137 and Pitts v Hunt [1991] 1 Q.B. 24 applied. The principle was to be formulated as: where the character of the joint criminal enterprise was such that it was foreseeable that a party or parties could be subject to unusual or increased risks of harm as a consequence of the activities of the parties in pursuance of their criminal activities, and the risk materialised, the injury could properly be said to be caused by the criminal act of the claimant even if it resulted from the negligent or intentional act of another party to the illegal enterprise, Gray applied. That did not necessarily exhaust situations where the ex turpi causa principle would apply in joint enterprise cases, but would cater for the overwhelming majority of cases (see paras 21-29 of judgment). (2) In the instant case, the judge had been entitled to conclude that although the damage might not have occurred but for O&#8217;s negligent driving, it was caused by the criminal activity in which J was engaged. The injury resulted from his personal conduct in placing himself in such a dangerous position, and because he had accepted the heightened risk of O&#8217;s dangerous driving and that risk had materialised, Gray applied. Active encouragement would not be necessary in all cases; it would be enough that the claimant and negligent driver were involved in the criminal enterprise together, and that the accident had arisen from activity which it could be foreseen might be committed in the course of that enterprise. Active encouragement could constitute the evidence of joint enterprise which would otherwise be lacking, but in the instant case the evidence of joint enterprise and of the implicit encouragement to bad driving was plain even in the absence of active encouragement (paras 46-48). (3) As the doctrine was one of public policy, there should be some flexibility in its operation. It would not apply, for example, to minor traffic offences. In most joint criminal liability cases, the nature and characteristics of the principal offence would in practice determine which acts of a co-conspirator would attract the application of the doctrine, and for relatively trivial offences the range of such acts was likely to be very limited. Nonetheless, there could be a problem in determining in certain cases whether the offences attracted the application of the doctrine. However, wherever the precise line was to be drawn, the theft of the ladders in the instant case clearly fell on the side where the doctrine applied. Theft was not merely an imprisonable offence, it carried a maximum sentence of seven years. It was also not a strict liability offence which could be committed without any real moral culpability (paras 49-52)."
    ],
    "ABSTRACT": [
        "The appellant (J) appealed against a decision ([2012] EWHC 1324 (QB), [2012] Lloyd&#8217;s Rep. I.R. 553) dismissing his claim for damages for personal injury against the first respondent (O) and the second respondent insurance company (T).",
        "J had been seriously injured when he fell from the rear footplate of a van driven by O. O had pleaded guilty to dangerous driving and J claimed damages for personal injury on the basis of O&#8217;s negligence. T asserted that O and J had been making their escape after stealing a set of ladders and that O, and therefore T, was not liable as they had been engaged in a criminal joint enterprise. The judge was satisfied that O and J had been involved in a joint enterprise theft and held that the public policy reflected in the principle of ex turpi causa was applicable. The issue was the ambit of the principle in the context of one criminal being injured by the negligence of another criminal when engaged in a joint criminal enterprise."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Christopher Melton QC, Richard Baker. For the first respondent: No appearance or representation. For the second respondent: Richard Lynagh QC, Suzanne Chalmers.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Negligence",
        "Torts",
        "Criminal Law",
        "Causation",
        "Criminal Conduct",
        "Duty of Care",
        "Ex Turpi Causa",
        "Joint Enterprise",
        "Public Policy",
        "Road Traffic Accidents"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Negligence &mdash; Torts &mdash; Criminal Law &mdash; Causation &mdash; Criminal Conduct &mdash; Duty of Care &mdash; Ex Turpi Causa &mdash; Joint Enterprise &mdash; Public Policy &mdash; Road Traffic Accidents",
    "SUMMARY": [
        "The principle of ex turpi causa was applicable where the character of a joint criminal enterprise was such that it was foreseeable that a party to the enterprise could be subject to unusual or increased risks of harm as a consequence of the pursuit of those criminal activities, as any resulting injury could properly be said to be caused by the claimant&#8217;s criminal act even if it resulted from the negligent or intentional act of another party to the illegal enterprise."
    ],
    "COURT": "EWCA",
    "CITATION": "Joyce v O&#8217;Brien [2013] EWCA Civ 546",
    "NUMBER": "399",
    "YEAR": "2013"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) White v Chief Constable of South Yorkshire",
        "(wl) Dobson v Thames Water Utilities",
        "(wl) Monk v PC Harrington Ltd",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Badger v Ministry of Defence",
        "(wl) John v MGN Ltd",
        "(wl) Mullin v Richards",
        "(wl) Clark v Bourne Leisure Limited",
        "(wl) JGE v English Province of Our Lady of Charity",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Hufton v Somerset CC",
        "(wl) Sienkiewicz v Greif (combined appeals)"
    ],
    "NAME": "(wl) Hinz v Berry",
    "CIT": "[1970] 2 QB 40",
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "YEAR": "1970",
    "JUDGE": "Lord Denning MR; Lord Pearson; Sir Gordon Willmer",
    "NUMBER": "400",
    "CATEGORIES": [
        "Damages",
        "Measure of Damages",
        "Personal Injury",
        "Psychiatric Harm"
    ],
    "CATEGORY": "Damages &mdash; Measure of Damages &mdash; Personal Injury &mdash; Psychiatric Harm",
    "SUMMARY": [
        "Personal injuries; nervous shock",
        "Damages are recoverable for a recognisable psychiatric illness caused by the shock of witnessing an accident resulting from a breach of duty. The plaintiff and her husband with their four children and four foster children stopped in a lay-by whilst on a country outing. The plaintiff and one child left the others in order to pick bluebells. The defendant&#8217;s car driven by him but out of control crashed into the others, killing the husband and injuring most of the children. Hearing the sound of the crash, the plaintiff turned round and saw the scene of disaster. She sued the defendant and recovered GBP 15,000 by reason of the loss of her husband and GBP 4,000 for nervous shock. The evidence showed that having been previously a woman of considerable fortitude and robustness of character she was now suffering from morbid depression as a result of the accident. On appeal by the defendant as to the quantum of damages for nervous shock, held, dismissing the appeal, that in the exceptional circumstances of the case it could not be said that the judge&#8217;s award was wholly erroneous. Per curiam: No damages can properly be awarded for grief or sorrow caused by a person&#8217;s death neither can they properly be awarded to a spouse for the worry about her children following her other spouse&#8217;s death nor for the financial strain and stress nor the difficulties of adjusting to a new life."
    ],
    "CITATION": "Hinz v Berry [1970] 2 QB 40",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Osman v Ferguson",
        "(wl) Hinz v Berry",
        "(wl) Monk v PC Harrington Ltd",
        "(wl) McLoughlin v O'Brian",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Revill v Newbery",
        "(wl) Humber Oil v The Owners of the Ship 'The Sivand'"
    ],
    "NAME": "(wl) White v Chief Constable of South Yorkshire",
    "JUDGE": "Lord Browne-Wilkinson; Lord Griffiths; Lord Goff of Chieveley; Lord Steyn; Lord Hoffmann",
    "CIT": "[1999] 2 AC 455",
    "HELD": [
        "allowing the appeal, (Lord Goff dissenting and Lord Griffiths dissenting in part) that a chief constable owed officers under him a duty analogous to that of an employer to care for the safety of employees and to take reasonable steps to protect them from physical harm, but there was no extension of that duty to protect from psychiatric injury where there was no breach of the duty to protect from physical injury. As a result, the employment relationship did not create a liability on the Chief Constable for psychiatric injury sustained by P who had not been involved in the disaster as rescuers and it was not possible to classify P as primary victims, since none of them were at any time exposed to personal danger nor reasonably believed themselves to be so, Page v Smith [1996] A.C. 155 considered. Recognition of P&#8217;s claims would significantly widen the established categories of cases for which damages could be recovered for pure psychiatric harm and to allow the claims would not fit easily with the decision in Alcock v Chief Constable of South Yorkshire [1992] 1 A.C. 310 to deny compensation to bereaved relatives of victims of the disaster who had not witnessed events at first hand or acted as rescuers. The fact that P&#8217;s injuries were sustained in the course of discharging their duties as police officers did not of itself justify extending the law so as to allow their claims."
    ],
    "FLAGS": [
        "Approved",
        "Hoffmann"
    ],
    "COUNSEL": "For the Chief Constable: Andrew Collender Q.C. and Patrick Limb. For the plaintiffs: Benet Hytner Q.C. and Graham Platts.",
    "CATEGORIES": [
        "Negligence",
        "Damages",
        "Disasters",
        "Police Officers",
        "Psychiatric Harm"
    ],
    "CATEGORY": "Negligence &mdash; Damages &mdash; Disasters &mdash; Police Officers &mdash; Psychiatric Harm",
    "SUMMARY": [
        "psychiatric harm; police officers involved in aftermath of Hillsborough disaster; no entitlement to damages for pure psychiatric injury",
        "The Chief Constable appealed against a ruling ([1998] Q.B. 255, [1996] C.L.Y. 4533) allowing the appeal of four police officers, P, against the dismissal of their action against the Chief Constable and others for damages for negligence and/or breach of statutory duty. P had all suffered post traumatic stress disorder as a result of their involvement in the aftermath of the Hillsborough Football Stadium disaster in which many spectators had been killed and injured. The Chief Constable admitted that the disaster had been caused by police negligence in allowing overcrowding to occur, but disputed P&#8217;s entitlement to recover damages in tort for the psychiatric injury they had suffered. P contended that justice demanded that they be compensated for the harm they had suffered as a result of a tort and that there was no justification for treating physical and psychiatric injury as different kinds of damage. P further argued that they were entitled to recover damages either on the basis of an employer&#8217;s duty to protect employees from harm through work or by virtue of their status as rescuers."
    ],
    "COURT": "UKHL",
    "CITATION": "White v Chief Constable of South Yorkshire [1999] 2 AC 455",
    "NUMBER": "401",
    "YEAR": "1999"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Berkoff v Burchill and The Times",
        "(wl) Barker v Corus (UK)",
        "(wl) Steel and Morris v UK",
        "(wl) Joyce v O'Brien",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Lister v Hesley Hall",
        "(wl) Cooke v Mirror Group Newspapers Ltd",
        "(wl) Hufton v Somerset CC",
        "(wl) Worsley v Tambrands"
    ],
    "NAME": "(wl) Dulieu v White",
    "JUDGE": "Lord Neuberger PSC; Lady Hale DPSC; Lord Clarke JSC; Lord Wilson; Lord Toulson",
    "CIT": "[2015] UKSC 32",
    "HELD": [
        "Appeal allowed.",
        "In Wilkinson v Downton , Wright J. recognised that wilful infringement of the right to personal safety was a tort. It had three elements: a conduct element, a mental element and a consequence element. The issues in this case related to the first and second elements. The conduct element required words or conduct directed towards the claimant for which there was no justification or reasonable excuse. The Court of Appeal treated the publication of the book as conduct directed towards O and considered that the question of justification had therefore to be judged vis-a-vis him. That was wrong. The book was for a wide audience and the question of justification had to be considered accordingly, not in relation to O in isolation. There was every justification for the publication. A person who had suffered in the way that R had, and had struggled to cope with the consequences of his suffering in the way that he had, had the right to tell the world about it. And there was a corresponding public interest in others being able to listen to his life story in all its searing detail. Of course vulnerable children had to be protected as far as reasonably practicable from exposure to material which would harm them, but the right way of doing so was not to expand Wilkinson v Downton to ban the publication of a work of general interest. Freedom to report the truth was a basic right to which the law gave a very high level of protection. It was difficult to envisage any circumstances in which speech which was not deceptive, threatening or possibly abusive could give rise to liability in tort for wilful infringement of another&#8217;s right to personal safety. The right to report the truth was justification in itself. As to the mental element, the Court of Appeal found that the necessary intention could be imputed to R. There was a critical difference between imputing the existence of an intention as a matter of law and inferring the existence of an intention as a matter of fact. The former was a vestige of a previous age and had no proper role in the modern law of tort. The abolition of imputed intent cleared the way to proper consideration of two important questions about the mental element of the tort. The first was whether, where a recognised psychiatric illness was the product of severe mental or emotional distress, it was necessary that the defendant should have intended to cause illness or whether it was sufficient that he intended to cause severe distress which in fact resulted in recognisable illness. The second was whether recklessness was sufficient. The answer to the first question was to choose the second option. Recklessness should not be included in the definition of the mental element. To hold that the necessary mental element was intention to cause physical harm or severe mental or emotional distress struck a just balance. It meant that a person who actually intended to cause another to suffer severe mental or emotional distress bore the risk of legal liability if the deliberately inflicted severe distress caused the other to suffer a recognised psychiatric illness. It would be possible to limit liability for the tort to cases in which the defendant&#8217;s conduct was &#8220;extreme, flagrant or outrageous&#8221;, as in Canada. That argument had not so far been advanced in this country. The instant court was inclined to the view, which was necessarily obiter, that the tort was sufficiently contained by the combination of (a) the conduct element requiring words or conduct directed at the claimant for which there was no justification or excuse, (b) the mental element requiring an intention to cause at least severe mental or emotional distress, and (c) the consequence element requiring physical harm or recognised psychiatric illness. In this case, there was no basis for supposing that R had an actual intention to cause psychiatric harm or severe mental or emotional distress to O. There was no arguable case that publication of the book would constitute the requisite conduct element of the tort or that R had the requisite mental element, Wilkinson v Downton considered (see paras 73-77, 80-84, 87-90 of judgment)."
    ],
    "ABSTRACT": [
        "The appellant (R) appealed against a decision of the Court of Appeal ([2014] EWCA Civ 1277, [2015] E.M.L.R. 4) to grant an interim injunction restraining him from publishing certain information in a semi-autobiographical book.",
        "R, a talented performing artist, had been subject to sexual abuse at school, leading to episodes of severe mental illness. He wished to speak out about his experiences and to describe them in the book. The respondent (O) was his young son. O suffered from significant disabilities, including Asperger&#8217;s syndrome. A psychologist had commented that the book would be likely to cause him enduring psychological harm. R&#8217;s case was that although the book was dedicated to O, he would not expect him to see it until he was much older. The Court of Appeal held that O had sufficiently favourable prospects of establishing at trial his claim under Wilkinson v Downton [1897] 2 Q.B. 57 that the book&#8217;s publication would constitute intentional conduct causing him psychiatric harm to justify an injunction restraining publication of parts of the book pending trial."
    ],
    "FLAGS": [
        "Approved",
        "Hale",
        "Neuberger"
    ],
    "COUNSEL": "For the appellant: Hugh Tomlinson QC, Sara Mansoori, Edward Craven. For the first respondent: Matthew Nicklin QC, Adam Speker. For the second respondent: Antony White QC, Jacob Dean. For the interveners: Adrienne Page QC, Can Yeginsu.",
    "CATEGORIES": [
        "Torts",
        "Books",
        "Freedom of Expression",
        "Intentional Torts",
        "Interim Injunctions",
        "Publication"
    ],
    "CATEGORY": "Torts &mdash; Books &mdash; Freedom of Expression &mdash; Intentional Torts &mdash; Interim Injunctions &mdash; Publication",
    "SUMMARY": [
        "The Supreme Court ruled on the nature and limits of liability under Wilkinson v Downton [1897] 2 Q.B. 57 in a case where the principle in that case was relied on to prevent psychological harm being caused to a child by the publication of a semi-autobiographical book containing graphic details of his father&#8217;s troubled life. There was no arguable case that publication of the book would constitute the requisite conduct element of the tort or that the father had the requisite mental element."
    ],
    "COURT": "UKSC",
    "CITATION": "Dulieu v White [2015] UKSC 32",
    "NUMBER": "402",
    "YEAR": "2015"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Kent v Griffiths",
        "(wl) James McNaughton Paper Group Ltd v Hicks Anderson & Co",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) Pierce v Doncaster MBC",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Anns v Merton London Borough Council"
    ],
    "NAME": "(wl) W v Essex County Council and Another",
    "JUDGE": "Lord Slynn of Hadley; Lord Steyn; Lord Hope of Craighead; Lord Hobhouse of Woodborough; Lord Millett",
    "CIT": "[2001] 2 AC 592",
    "HELD": [
        "allowing the appeal, that (1) on the facts alleged, regardless of whether they were ultimately found to be right or wrong, it was impossible to say that the claim would so clearly not succeed that it ought not to be pursued to trial. It was not sufficient for striking out purposes that W might struggle to prove their case, but rather to consider whether, if the facts were proved, the claim would nevertheless fail, and (2) liability for psychiatric injury could constitute a head of damage subject to a number of limitations, McLoughlin v O&#8217;Brian [1983] 1 A.C. 410 and Alcock v Chief Constable of South Yorkshire [1992] 1 A.C. 310 considered. The categorisation of those claiming to be included as either primary or secondary victims was not conclusive. It depended on the facts of each case and there was insufficient information at this stage to rule that these circumstances were outside the range of psychiatric injury currently recognised by the law. The pleadings indicated that the injury was more than &#8220;acute grief&#8221; but a detailed investigation of the facts was required to ascertain whether the necessary temporal and spatial limitations were satisfied, White v Chief Constable of South Yorkshire [1999] 2 A.C. 455 considered."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For W: Allan Levy Q.C. and Elizabeth Anne Gumbel Q.C. For ECC: Edward Faulks Q.C. and Andrew Warnock.",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Fostering",
        "Local Authorities' Powers and Duties",
        "Sexual Abuse"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Fostering &mdash; Local Authorities' Powers and Duties &mdash; Sexual Abuse",
    "SUMMARY": [
        "W appealed against a decision upholding the striking out of a claim in negligence for the psychiatric injury resulting from the placement with them by a local authority of a child it knew to be a sex abuser and who subsequently abused W&#8217;s children. W, who had informed ECC they were unwilling owing to the risk to their children to have a known sex abuser in their home, argued ECC had thereby been in breach of their duty of care in placing a known abuser with them. The court held that (1) a claim for psychiatric injury was clearly arguable, and (2) it was not possible to conclude the psychiatric injury claimed was outside the range recognised in law.",
        "W, foster carers, sued ECC, the local authority, who, despite W&#8217;s stipulation that they would not house a child known or suspected of being a child abuser, placed G with them, who was known to ECC as having committed sexual offences and who subsequently seriously abused W&#8217;s children. W brought claims against ECC for damages for psychiatric injury suffered upon learning of the abuse to their children and originating from a sense of responsibility for G&#8217;s actions. They alleged that ECC was in breach of its duty of care in placing G with them contrary to their express wishes. The judge at first instance struck out W&#8217;s claim and W&#8217;s appeal was dismissed ([1999] Fam. 90) on the grounds that the claims were unarguable and therefore had no prospect of success. W appealed."
    ],
    "COURT": "UKHL",
    "CITATION": "W v Essex County Council and Another [2001] 2 AC 592",
    "NUMBER": "403",
    "YEAR": "2001"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Gray v Jones",
        "(wl) Attorney General of the British Virgin Islands v Hartwell",
        "(wl) McKenna v British Aluminium Ltd",
        "(wl) Pierce v Doncaster MBC",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Lister v Hesley Hall",
        "(wl) Vowles v Evans & the Welsh RFU",
        "(wl) Gough v Thorne",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Van Colle v Chief Constable of Hertfordshire",
        "(wl) Osman v Ferguson",
        "(wl) Hughes v Lord Advocate"
    ],
    "NAME": "(wl) Chadwick v British Railways Board",
    "JUDGE": "Lord Mance JSC; Lord Clarke JSC; Lord Sumption JSC; Lord Carnwath JSC; Lord Hodge JSC",
    "CIT": "[2016] UKSC 17",
    "HELD": [
        "Appeal dismissed.",
        "(1) The content of the arrangements had been a matter of fact for the judge. The distinction between the arrangements as made by the operator and others&#8217; perception of the arrangements was artificial and unrealistic. The judge had been entitled to find that the understandings of the investors had conformed to what was intended by the operator. He had not been required to give special weight to documents without regard to their context. The judge had concluded that arrangements within s.235 had been made when plots were marketed and investors paid their deposits, the object of the arrangements being that the company should achieve a sale of the site after seeking to enhance its value by improving the prospects for housing development, the price to be shared between the owners. That conclusion was amply supported by the evidence and disclosed no error of law (see paras 54-55, 92 of judgment).",
        "(2) The &#8220;property&#8221; for the purposes of s.235(1) was each of the company&#8217;s sites taken as a whole, not the individual plots. The distinction between the &#8220;property&#8221; being the site and it being the aggregate of the plots was not one of substance. The property for the purposes of s.235(1) was the whole site. That definition remained the same in principle throughout the section. However, management control under s.235(2) and s.235(3) could be achieved in different ways. It was necessary to consider the mechanisms by which the participants on the one hand or the operator on the other managed, or had management control of, the property. &#8220;Control&#8221; within s.235(2) was not confined to legal control; it had to refer to the reality of how the arrangements were to be operated, which could or could not involve rights or powers enforceable in law, Sky Land Consultants Plc, Re [2010] EWHC 399 (Ch) applied. The judge had found that the facts of the instant case meant that in substance each investor got rights under a scheme that provided for someone else to manage the property. He had clearly been entitled to do so. The management of the property had comprised the steps necessary to obtain planning permission and secure a sale. The investors had no part in or control over those activities. Even if attention was directed to the rights attached to individual units, there was no parallel with individual lessees in a block of flats. They had control over the management of both their own flats and the common parts. The investors&#8217; ownership of the individual units was not linked to any exercise of management control. Control of the management activities for the property as a whole had been with the company. Although its control had not been underpinned by legal rights over the units, that did not affect the substance of the arrangements (paras 56-63, 93, 96-102). The judge had considered that s.235(2) required that investors had not actually exercised control. &#8220;Control&#8221; of property meant the ability to decide what was to happen to it. Either the arrangements conferred control on the investors or they did not. That was necessarily to be viewed from the time the arrangements were made. The test could not depend on what happened afterwards. The question was in whom control would be vested were control to be required, Brown v InnovatorOne Plc [2012] EWHC 1321 (Comm) doubted (para.94)."
    ],
    "ABSTRACT": [
        "A company appealed against a decision ([2014] EWCA Civ 435, [2015] 1 All E.R. 1) that &#8220;land banking&#8221; schemes it had operated were unauthorised collective investment schemes within the Financial Services and Markets Act 2000 s.235.",
        "The company had acquired land and divided it into plots, which it sold to investors. The company was not an authorised person under the Act. The Financial Conduct Authority alleged that the schemes were collective investment schemes. The judge accepted investors&#8217; evidence that they were told that the company would have the sites re-zoned for residential building or secure planning approval, and that they would receive a share of the proceeds of sale once developers bought the sites. He held that there had been &#8220;arrangements&#8221; within s.235(1) as the investors had described; that the &#8220;property&#8221; for the purposes of s.235(1) was each site as a whole; on that basis, that no investor had had control over the site as a whole within s.235(2); and that the property had been managed by an operator, namely the company, within s.235(3)(b).",
        "The company argued that",
        "(1) the judge had erred in his identification of the component parts of the arrangements, and that the focus should have been on the arrangements as made by the operator, including the documents prepared for that purpose, rather than as the investors had perceived them;",
        "(2) the relevant &#8220;property&#8221; for the purposes of s.235(1) was the aggregate of the interests owned by the individual investors, not the site as a whole, and it was they who had ultimate control over the management of the property, in the same way as did the individual tenants in a block of flats, where there was no collective investment scheme."
    ],
    "COUNSEL": "For the appellants: Michael Blair QC, Robert Purves. For the respondent: Nicholas Peacock QC, Tim Penny QC, Philip Hinks.",
    "CATEGORIES": [
        "Financial Regulation",
        "Collective Investment Schemes",
        "Land Banking Schemes",
        "Unauthorised Investment Business"
    ],
    "CATEGORY": "Financial Regulation &mdash; Collective Investment Schemes &mdash; Land Banking Schemes &mdash; Unauthorised Investment Business",
    "SUMMARY": [
        "Certain &#8220;land banking&#8221; schemes, under which a company marketed plots of land on sites to investors by undertaking to progress planning procedures at the sites, procure the sites&#8217; sale and pay the investors a share of the consideration, were unauthorised collective investment schemes within the Financial Services and Markets Act 2000 s.235."
    ],
    "COURT": "UKSC",
    "CITATION": "Chadwick v British Railways Board [2016] UKSC 17",
    "NUMBER": "404",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Knight v Home Office",
        "(wl) Z and others v United Kingdom",
        "(wl) Evans v Triplex Safety Glass",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Coventry v Lawrence (no 2)",
        "(wl) Pierce v Doncaster MBC",
        "(wl) Van Colle v Chief Constable of Hertfordshire",
        "(wl) Delaney v Pickett",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) McDermid v Nash Dredging and Reclamation Co Ltd",
        "(wl) Lawrence v Pembrokeshire County Council",
        "(wl) Butcher v Southend-on-Sea BC"
    ],
    "NAME": "(wl) Boumedien v Delta Display Ltd",
    "JUDGE": "Waller LJ; Tuckey LJ; Jacob LJ",
    "CIT": "[2007] EWCA Civ 368",
    "HELD": [
        "Appeal allowed.",
        "(1) A defendant who had paid money into court could not argue that if a claimant had been more reasonable he would have offered more. A defendant had the remedy in his own hands where a claimant was being intransigent. He could pay into court the maximum sum he was prepared to pay. The judge had not found that it was unreasonable to have run the external funding case in relation to the two properties. S&#8217;s loss on that issue was clearly a factor that the judge had been entitled to take into account in considering the extent to which the general rule should not apply, since CPR r.44.3 required a judge to take all circumstances into account. (2) The judge had found that, if he were to disregard T&#8217;s willingness to engage in negotiations on a one property basis and if he were to look at the matter as if there were no Part 36 payment, he would have awarded S two-thirds to three-quarters of his costs. In so finding the judge must have been of the view that the running of a case in relation to external funds being available so as to be able to buy two properties merited a discount of one-quarter or one-third of the costs that S as the successful party would have been entitled to absent any payment in. He had then reduced any award down to nil on the basis that S&#8217;s failure to engage in negotiations was a failure to comply with the pre-action protocol. However he had failed to take into account the extent to which that factor had already in his reasoning reduced S&#8217;s entitlement by one-third or one-quarter. No further reduction should have been made for the fact that S had not engaged in negotiations in accordance with the protocol. In the circumstances, to reduce the recovery of costs to nil for failure to comply with the protocol was so seriously wrong as to be outside the generous ambit within which reasonable disagreement was possible. The judge had misdirected himself as to the applicability of the general rule and had failed to appreciate that the reduction he had first made reflected the appropriate discount for the running of a case that failed. (3) It was necessary for the court to exercise the discretion afresh. Guidance could be obtained from the judge&#8217;s view as to the way he would have treated S as the successful party without T&#8217;s willingness to negotiate and in the absence of a Part 36 offer, with a further discount for non-compliance with the protocol. On that basis S should have 60 per cent of his costs from the date of the Part 36 offer. The judge&#8217;s order for the period up until that date was not disturbed."
    ],
    "ABSTRACT": [
        "The appellant (S) appealed against an order awarding him only limited pre-action costs and no costs of the action in which he had succeeded against the respondent solicitors (T).",
        "S had entered into purchase contracts in respect of two properties &#8220;off-plan&#8221; conditional on obtaining mortgage finance by a particular date. S did not obtain finance by that date. The contracts were later rescinded by the developer. T acted for both sides in the transaction. T accepted that in the circumstances they had acted in breach of duty in either failing to obtain an extension of time or failing to take S&#8217;s instructions, but argued that S had suffered no loss because he would not have been able to raise the finance to purchase either property. In pre-action correspondence, T&#8217;s insurers suggested that S&#8217;s loss should be limited to the loss of opportunity to purchase one of the properties and made a Part 36 offer. That amount was paid into court once proceedings were commenced. The judge held that S would have been able to purchase only one property, but awarded damages that exceeded the Part 36 payment. However, the judge awarded S no costs of the action and only limited pre-action costs.",
        "T submitted that the judge had found by implication that, if S had engaged in negotiations with T on the basis of one property, the case would have settled because T would have offered more than the money in court, and that, in running the external funding point in relation to two properties, S was acting unreasonably and that those factors entitled the judge to depart from the general rule that the successful party was entitled to his costs from the unsuccessful party and to reduce S&#8217;s recovery to nil."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Giles Maynard-Connor. For the respondent: Neil Hext.",
    "CATEGORIES": [
        "Civil Procedure",
        "Costs",
        "Part 36 Payments",
        "Pre-Action Costs",
        "Pre-Action Protocols"
    ],
    "CATEGORY": "Civil Procedure &mdash; Costs &mdash; Part 36 Payments &mdash; Pre-Action Costs &mdash; Pre-Action Protocols",
    "SUMMARY": [
        "A judge had misdirected himself as to the applicability of the general rule on costs and had been wrong to reduce the recovery of costs by the successful party to nil for failure to engage in negotiations in accordance with a pre-action protocol."
    ],
    "COURT": "EWCA",
    "CITATION": "Boumedien v Delta Display Ltd [2007] EWCA Civ 368",
    "NUMBER": "405",
    "YEAR": "2007"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) White v Chief Constable of South Yorkshire",
        "(wl) Hinz v Berry",
        "(wl) Barker v Corus (UK)",
        "(wl) Ferguson v John Dawson & Partners (Contractors) Ltd",
        "(wl) Kennaway v Thompson",
        "(wl) Poppleton v Trustees of the Portsmouth Youth Activities Committee",
        "(wl) Phipps v Rochester Corporation",
        "(wl) Liverpool Womens Hospital NHS Foundation Trust v Ronayne",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Coventry v Lawrence",
        "(wl) McLoughlin v O'Brian"
    ],
    "NAME": "(wl) Monk v PC Harrington Ltd",
    "JUDGE": "George Leggatt QC",
    "CIT": "[2008] EWHC 1879 (QB)",
    "HELD": [
        "Judgment for defendant.",
        "(1) M provided a significant help in comforting the injured men until the emergency services arrived; that assistance was neither trivial nor peripheral and entitled him to be regarded as a rescuer, White v Chief Constable of South Yorkshire [1998] Q.B. 254 and Alcock v Chief Constable of South Yorkshire [1992] 1 A.C. 310 applied. However, the evidence showed that it was improbable that in rushing to the aid of the injured men, M believed he was putting his own physical safety at risk; if M did hold such a belief, it was unreasonable, Page v Smith [1996] A.C. 155 considered. Accordingly, M could not establish that he was a primary victim on the basis of his involvement as a rescuer. (2) For the purposes of establishing himself as a primary victim as an unwilling participant, M had to show that his injuries were induced by a genuine belief that he had caused another person&#8217;s injury or death, Alcock, McFarlane v Wilkinson [1997] 2 Lloyd&#8217;s Rep. 259 and Dooley v Cammell Laird &amp; Co Ltd [1951] 1 Lloyd&#8217;s Rep. 271 applied. Although the traumatic effects of the accident upon M&#8217;s health were increased by a belief that he might have caused the accident, there was no reasonable basis for such a belief. Accordingly, it was not reasonably foreseeable that someone in his position would suffer psychiatric injury as a result of such a belief."
    ],
    "ABSTRACT": [
        "The claimant (M) claimed damages for psychiatric injury suffered as a result of helping victims of a construction accident for which the defendant construction company (P) had admitted liability.",
        "M had been working as a self-employed foreman on site during the construction of Wembley Stadium. M was there when a temporary platform fell 60 feet onto two fellow workers. One of the men died from his injuries shortly after the accident whilst the other suffered a broken leg. Having arrived at the scene of the accident, M tried to help both men and, specifically, to comfort the man with the broken leg. Thereafter, as a result of the accident, M began to suffer from symptoms of post-traumatic stress disorder and associated depression amounting to a psychiatric illness for which he received various treatments and medications. Later, M ceased to go to work. The issue for determination was whether M fell within the class of persons to whom the law would afford a remedy for psychiatric injury caused by the admitted negligence of an employer.",
        "M submitted that (1) his involvement in the accident was such that he fulfilled the necessary conditions to recover compensation as a rescuer; (2) even if he was unable to bring himself within the rescuer category of primary victim, he could nevertheless establish the necessary proximity to the accident, which he believed he had caused, in order that he could be regarded as an unwilling participant."
    ],
    "COUNSEL": "For the claimant: Charles Pugh. For the defendants: Jonathan Watt-Pringle QC.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Torts",
        "Class of Persons",
        "Damages",
        "Primary Victims",
        "Psychiatric Harm",
        "Reasonable Belief",
        "Rescuers"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Torts &mdash; Class of Persons &mdash; Damages &mdash; Primary Victims &mdash; Psychiatric Harm &mdash; Reasonable Belief &mdash; Rescuers",
    "SUMMARY": [
        "A man who had suffered psychiatric injury as a result of assistance provided to victims of a construction accident was not entitled to damages as a primary victim. Although he had assisted at the scene he could not prove that he had a legitimate fear for his own safety at the time or that he reasonably believed he had caused the accident; accordingly, he was neither a rescuer nor an unwilling participant in the accident."
    ],
    "COURT": "EWHC",
    "CITATION": "Monk v PC Harrington Ltd [2008] EWHC 1879 (QB)",
    "NUMBER": "406",
    "YEAR": "2008"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) McLoughlin v O'Brian",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) British Celanese Ltd v AH Hunt (Capacitors) Ltd",
        "(wl) Haseldine v Daw",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Dorset Yacht Co Ltd v Home Office",
        "(wl) James McNaughton Paper Group Ltd v Hicks Anderson & Co",
        "(wl) Kent v Griffiths",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) Corr v IBC Vehicles Ltd"
    ],
    "NAME": "(wl) McFarlane v EE Caledonia Ltd",
    "JUDGE": "Ralph Gibson LJ; Stuart-Smith LJ; McCowan LJ",
    "CIT": "[1994] 2 All ER 1",
    "HELD": [
        "that in the circumstances it could not have been reasonably foreseen that P and other off-duty workers on board the support vessel would suffer psychiatric harm. Neither could it be shown that a man of ordinary fortitude in a similar position would have been so affected, consequently, the injuries being unforeseeable, P would not be allowed to succeed."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For C: Adrian Hamilton Q.C. and Alistair Schaff Q.C. For M: Nigel Wilkinson Q.C. and Anne Guggenheim.",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Nervous Shock",
        "Remoteness",
        "Torts",
        "Witnesses"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Nervous Shock &mdash; Remoteness &mdash; Torts &mdash; Witnesses",
    "SUMMARY": [
        "Foreseeability; psychiatric injury; duty of care; off-duty worker witnessing events on oil rig; whether employer liable",
        "A bystander who witnesses a disaster cannot recover damages for psychiatric harm caused unless a sufficient degree of proximity between the bystander and the victim can be shown. P was off-duty on board a support ship when an explosion occurred, and the oil rig on which P normally worked was engulfed in flames. P sought damages for psychiatric harm which he suffered by witnessing the destruction of the rig."
    ],
    "COURT": "EWCA",
    "CITATION": "McFarlane v EE Caledonia Ltd [1994] 2 All ER 1",
    "NUMBER": "407",
    "YEAR": "1994"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) White v Chief Constable of South Yorkshire",
        "(wl) Hughes v Lord Advocate",
        "(wl) Lamb v Camden LBC",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) British Celanese Ltd v AH Hunt (Capacitors) Ltd",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Piper v JRI (Manufacturing) Ltd",
        "(wl) Gregg v Scott",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees"
    ],
    "NAME": "(wl) McLoughlin v O'Brian",
    "JUDGE": "Lord Wilberforce; Lord Edmund-Davies; Lord Russell; Lord Scarman; Lord Bridge",
    "CIT": "[1983] 1 AC 410",
    "HELD": [
        "that the test of liability for nervous shock is the ordinary test of reasonable foreseeability. If it was reasonably foreseeable that M would suffer nervous shock, even though nowhere near the scene of the accident, she was entitled to recover. In considering the question of reasonable foreseeability there are no legal limitations of time, space, distance, nature of injuries, or the relationship of victim to plaintiff, although these are all factors to be considered (Bourhill v Young [1943] A.C. 92 and Hambrook v Stokes Bros [1925] 1 K.B. 141 applied; King v Phillips [1953] 1 Q.B. 429 dictum approved)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1983",
    "CATEGORIES": [
        "Negligence",
        "Accidents",
        "Damages",
        "Nervous Shock",
        "Remoteness"
    ],
    "CATEGORY": "Negligence &mdash; Accidents &mdash; Damages &mdash; Nervous Shock &mdash; Remoteness",
    "SUMMARY": [
        "Remoteness of damage; nervous shock; plaintiff not at the scene of accident",
        "The House of Lords extended liability for nervous shock to all cases where it was reasonably foreseeable that the plaintiff would suffer such injury, irrespective of any limitations of time and space. One of M&#8217;s children was killed and her husband and other two children were severely injured in a road accident. The incident was reported to M while she was at her home, some two miles from the scene. At the hospital M saw the extent of the injuries to her family and heard of the death of her daughter, as a result of which she suffered severe and persisting nervous shock, for which she claimed damages."
    ],
    "COURT": "UKHL",
    "CITATION": "McLoughlin v O&#8217;Brian [1983] 1 AC 410",
    "NUMBER": "408"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Joyce v O'Brien",
        "(wl) Coltman v Bibby Takers Ltd",
        "(wl) Smith v Stages",
        "(wl) Gray v Thames Trains",
        "(wl) Walker v Northumberland County Council",
        "(wl) Barker v Corus (UK)",
        "(wl) Liverpool Womens Hospital NHS Foundation Trust v Ronayne",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Monk v PC Harrington Ltd"
    ],
    "NAME": "(wl) Taylor v A Novo Ltd (UK)",
    "JUDGE": "Lord Dyson MR; Moore-Bick LJ; Kitchin LJ",
    "CIT": "[2013] EWCA Civ 194",
    "HELD": [
        "Appeal allowed.",
        "The instant case did not raise questions which typically arose in secondary victim cases; instead the issue was whether M&#8217;s death was a relevant incident for the purposes of T&#8217;s claim as a secondary victim. T had to show that there was a relationship of proximity between N and herself in the legal sense. Unfortunately, proximity depended more on the court&#8217;s perception of what was the reasonable area for the imposition of liability than any process of logic. In the instant case, N&#8217;s negligence had two consequences separated by three weeks in time: there was the accident which caused M&#8217;s injuries, and then there was her death. There was clearly a relationship between N and M, but to allow T to recover as a secondary victim on the instant facts was going too far. Had the judge been correct then T would, subject to proving causation, have been able to recover damages had M&#8217;s death occurred months, possibly years later. However, had she died at the time of the accident and T suffered shock coming onto the scene shortly afterwards, T would not have been able to recover damages because she would have failed to satisfy the physical proximity control mechanism. That T could recover in the first situation but not in the latter would strike the ordinary reasonable person as incomprehensible. Therefore, it was not reasonable to impose liability on N for T&#8217;s psychiatric illness. The judge&#8217;s approach potentially extended the scope of liability to secondary victims considerably further than had been done before. The court had for policy reasons confined the rights of secondary victims by means of strict control mechanisms. Those same reasons militated against any further substantial extension unless done by Parliament. The judge was wrong to hold that M&#8217;s death was the relevant event for the purpose of deciding the proximity question, Alcock v Chief Constable of South Yorkshire [1992] 1 A.C. 310 followed, White v Chief Constable of South Yorkshire [1999] 2 A.C. 455, Taylor v Somerset HA [1993] P.I.Q.R. P262 applied, W v Essex CC [2001] 2 A.C. 592 considered, Walters v North Glamorgan NHS Trust [2002] EWCA Civ 1792, [2003] P.I.Q.R. P16 and Galli-Atkinson v Seghal [2003] EWCA Civ 697, [2003] Lloyd&#8217;s Rep. Med. 285 distinguished on the basis that the question whether the death, being a separate event, was a relevant event for the purposes of a claim by a secondary victim did not arise in those cases. The observations of Gibson LJ in Sion v Hampstead HA [1994] 5 Med. L.R. 170 were obiter and were not binding, Sion considered (see paras 25, 27-31, 34-35 of judgment)."
    ],
    "ABSTRACT": [
        "The appellant (N) appealed against a judge&#8217;s decision that the respondent (T) was entitled to claim damages from N as a secondary victim of an accident which led to the death of T&#8217;s mother (M).",
        "M worked for N and was injured when a fellow employee caused a stack of racking boards to fall onto her. She was recovering well when three weeks later she unexpectedly collapsed and died due to a deep vein thrombosis and consequent pulmonary emboli caused by the injuries sustained in the accident. T witnessed M&#8217;s death and suffered significant post-traumatic stress disorder in respect of which she sought damages from N. The judge found that the point at issue had not been previously decided. He concluded that the event which caused damage to T was the sudden death of M and that there was no gap between that event and the injury she suffered, which was the reasonably foreseeable consequence of N&#8217;s negligence.",
        "N submitted that proximity was lacking because T was not present at the accident or involved in its immediate aftermath. T argued that the collapse and death of M was the relevant event and, as she had witnessed it, proximity was established."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Charles Cory-Wright QC, Charles Bagot. For the respondent: Edward Bartley Jones QC, Simon Earlam.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Negligence",
        "Employment",
        "Damages",
        "Employers' Liability",
        "Post-Traumatic Stress Disorder",
        "Public Policy",
        "Secondary Victims"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Negligence &mdash; Employment &mdash; Damages &mdash; Employers' Liability &mdash; Post-Traumatic Stress Disorder &mdash; Public Policy &mdash; Secondary Victims",
    "SUMMARY": [
        "The daughter of a woman who died unexpectedly weeks after an accident at work could not establish proximity in her damages claim against the employer because she had not witnessed the accident or its immediate aftermath, although she had been present when her mother died. It was the accident and not the death that was the relevant event for the purposes of establishing proximity in her damages claim arising from the psychiatric harm she suffered after witnessing her mother&#8217;s death."
    ],
    "COURT": "EWCA",
    "CITATION": "Taylor v A Novo Ltd (UK) [2013] EWCA Civ 194",
    "NUMBER": "409",
    "YEAR": "2013"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Sutcliffe v BMI Healthcare",
        "(wl) Sanderson v Hull",
        "(wl) Gray v Thames Trains",
        "(wl) Williams v University of Birmingham",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Barnett v Chelsea & Kensington Hospital Management Committee",
        "(wl) Chester v Afshar",
        "(wl) Barker v Corus (UK)",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Bailey v Ministry of Defence",
        "(wl) Cox v Ministry of Justice",
        "(wl) Gregg v Scott"
    ],
    "NAME": "(wl) Liverpool Womens Hospital NHS Foundation Trust v Ronayne",
    "JUDGE": "Sullivan LJ; Tomlinson LJ; Beatson LJ",
    "CIT": "[2015] EWCA Civ 588",
    "HELD": [
        "Appeal allowed.",
        "(1) The circumstances fell far short of those which had been recognised as founding secondary victim liability. The judge had been wrong to treat as one event the period of about 36 hours beginning with the sight of W before surgery, through to the moment when he saw her in her post-operative swollen state. Unlike the situation in Walters v North Glamorgan NHS Trust [2002] EWCA Civ 1792, [2003] P.I.Q.R. P16, there was no &#8220;seamless tale with an obvious beginning and an equally obvious end&#8221;. Instead, there was a series of events over a period of time. R&#8217;s perception of what he saw on the two specific occasions was in each case informed by information which he had received in advance. Before the operation, he already knew that abnormalities had been found and he knew before seeing W that she was about to go to theatre for surgery. It was artificial to regard the sight of her in her pre-operative condition as the beginning of an event distinct from what had gone before. It was equally artificial to describe the sight of W in her post-operative condition as the end of a distinct event. It had been explained to R, before he saw her, that W&#8217;s life was in danger and he knew that the 24 hours following the operation would be critical. It was all part of a continuum. The necessary element of suddenness did not exist. Further, what R saw on those two occasions was not horrifying by objective standards, Shorter v Surrey and Sussex Healthcare NHS Trust [2015] EWHC 614 (QB), (2015) 144 B.M.L.R. 136 applied. Walters was the only known reported case in which a claimant had succeeded as a secondary victim after observing the consequences of clinical negligence in a hospital setting. That was unsurprising. In hospital, one had to expect to see patients attached to machines and drips and to see things that one might not like to see. W&#8217;s appearance was as would ordinarily be expected of a person in hospital in such circumstances. It was not exceptional or &#8220;horrifying&#8221; in the sense in which that word was used in the authorities. It did not lead to a sudden violent agitation of the mind because R had been prepared to witness a person in a desperate condition and was, moreover, already extremely angry, Walters distinguished, White v Chief Constable of South Yorkshire [1999] 2 A.C. 455 and Alcock v Chief Constable of South Yorkshire [1992] 1 A.C. 310 followed (see paras 17, 33-42 of judgment). (2) The claim failed because the events had not been&#8221; horrifying&#8221; in the necessary sense. It was therefore unnecessary to determine whether the judge had been justified in finding that R&#8217;s adjustment disorder had been caused by W&#8217;s appearance on the two distinct occasions concerned, as opposed to being caused by her ill health. However, it seemed that the judge had given insufficient weight to the circumstance that R was already extremely angry before he saw W after her operation. Further, having found none of the persistent recurrent flashbacks or nightmares which characterise PTSD, the judge should have been far less ready to attribute causative potency to the two visual images rather than to the whole set of circumstances (paras 43-48)."
    ],
    "ABSTRACT": [
        "An NHS trust appealed against the award of damages to the respondent (R) as a secondary victim of its negligence.",
        "R&#8217;s wife (W) had undergone a hysterectomy which had been performed negligently. A suture had been misplaced in her colon, causing her to develop septicaemia and peritonitis. After being discharged, she became unwell and was re-admitted. During a period of one or two days, R observed a rapid deterioration in W&#8217;s condition, and described two distinct episodes which he found particularly distressing. The first occurred shortly before she underwent emergency exploratory surgery, when he observed her connected to various machines such as drips and monitors. The second was the following day when he saw her in her post-operative condition. She was unconscious and connected to a ventilator. Her arms, legs and face were very swollen and pressure pads were in place. W remained in intensive care for nine weeks, but made a complete recovery. R claimed that he suffered post-traumatic stress disorder as a consequence of seeing her sudden deterioration, particularly on the two occasions he referred to. He described losing control of his stammer, feeling overwhelmed, powerless, out of control, detached, intensely angry, shocked, tense, tearful, agitated, irritable, sleep-disturbed, negative, pessimistic and low in mood. He also experienced intrusive memories. One expert concluded that R had suffered from PTSD but another concluded that he had suffered a mild adjustment disorder. The judge found that R had not suffered from PTSD, as he had not experienced the recurrent flashbacks and nightmares which commonly characterised that condition. However, he concluded that R had suffered from a psychiatric illness, triggered by W&#8217;s sudden shocking state and condition during the period of one or two days after her admission to hospital. The issues were whether (i) the events concerned were &#8220;horrifying&#8221; in the sense necessary to found a secondary victim case; (ii) the sudden appreciation of those events caused R&#8217;s psychiatric illness."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Charles Cory-Wright QC. For the respondent: Amanda Yip QC, Simon Fox.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Personal Injury",
        "Causation",
        "Hospitals",
        "Post-Traumatic Stress Disorder",
        "Psychiatric Harm",
        "Secondary Victims"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Personal Injury &mdash; Causation &mdash; Hospitals &mdash; Post-Traumatic Stress Disorder &mdash; Psychiatric Harm &mdash; Secondary Victims",
    "SUMMARY": [
        "A husband was not entitled to claim for the psychiatric injury which he suffered following a hospital&#8217;s negligence in performing a hysterectomy on his wife. He claimed that he suffered post-traumatic stress disorder as a result of seeing his wife&#8217;s state during two specific episodes. However, the necessary element of suddenness did not exist. Further, his wife&#8217;s appearance was not exceptional for a person in hospital in such circumstances and was not &#8220;horrifying&#8221; in the sense used in the authorities."
    ],
    "COURT": "EWCA",
    "CITATION": "Liverpool Womens Hospital NHS Foundation Trust v Ronayne [2015] EWCA Civ 588",
    "NUMBER": "410",
    "YEAR": "2015"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Smith v Stages",
        "(wl) Walker v Northumberland County Council",
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Barker v Corus (UK)",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Lister v Hesley Hall",
        "(wl) Mohamud v WM Morrison Supermarkets Plc",
        "(wl) Lewis v Daily Telegraph Ltd",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd"
    ],
    "NAME": "(wl) Coltman v Bibby Takers Ltd",
    "JUDGE": "Lord Keith of Kinkel; Lord Roskill; Lord Griffiths; Lord Oliver of Aylmerton; Lord Goff of Chieveley",
    "CIT": "[1988] AC 276",
    "HELD": [
        "allowing the appeal, that a ship provided by the owner for purposes of business was &#8220;equipment&#8221; for the purpose of the 1969 Act regardless of its size."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1988",
    "CATEGORIES": [
        "Employment",
        "Employers' Liability",
        "Equipment",
        "Interpretation",
        "Seaworthiness"
    ],
    "CATEGORY": "Employment &mdash; Employers' Liability &mdash; Equipment &mdash; Interpretation &mdash; Seaworthiness",
    "SUMMARY": [
        "Employer&#8217;s liability; defective equipment; whether ship &#8220;equipment&#8221;",
        "A ship, however large, comes within the definition of &#8220;equipment&#8221; under the Employers Liability (Defective Equipment) Act 1969 s.1(1) . In 1980 a ship owned by the defendants sank off Japan with the loss of all hands. The representatives of one of the crew brought an action claiming death was caused during employment in consequence of defects in equipment, namely the ship. The question whether the ship was &#8220;equipment&#8221; was tried as a preliminary issue. The judge held that it was, the Court of Appeal that it was not."
    ],
    "COURT": "UKHL",
    "CITATION": "Coltman v Bibby Takers Ltd [1988] AC 276",
    "NUMBER": "411"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Sanderson v Hull",
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Coltman v Bibby Takers Ltd",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Smith v Stages",
        "(wl) Anns v Merton London Borough Council",
        "(wl) Joyce v O'Brien",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Maguire v Sefton MBC"
    ],
    "NAME": "(wl) Walker v Northumberland County Council",
    "JUDGE": "Colman J",
    "CIT": "[1995] 1 All ER 737",
    "HELD": [
        "upholding W&#8217;s claim for damages, that (1) there is no logical reason why the risk of psychiatric damage should be excluded from the scope of an employer&#8217;s duty to provide his employee with a reasonably safe system of work and to take reasonable steps to protect him from risks which are reasonably foreseeable, Bolton v Stone [1947-51] C.L.Y. 6789 considered. Once a duty of care has been established the standard of care required for the performance of that duty must be measured against the yardstick of reasonable conduct on the part of a person in the position of that person who owes the duty, Glasgow Corp v Muir [1943] A.C. 448 , Paris v Stepney BC [1951] A.C. 367 considered, and the practicability of the remedial measures must clearly take into account the resources and facilities of the person or body owing the duty of care, British Railways Board v Herrington [1972] A.C. 877 considered. The duty does not extend to negligible risks but only to materially substantial risks. Although the evidence established that prior to W&#8217;s first breakdown it was reasonably foreseeable that W might sustain a mental breakdown of some sort in consequence of his work, it was not reasonably foreseeable to the NCC that the workload to which he was exposed gave rise to a material risk of mental illness, in the sense that the risk to which W was exposed was higher than that which would ordinarily affect a social services middle manager in his position; (2) when W returned to work after his first illness it was reasonably foreseeable to the NCC that if he was again exposed to the same workload as he had been handling at the time of his first breakdown without substantial back-up there was a sizeable risk that he would again succumb to mental illness and that such illness would be likely to end his career; and (3) in deciding whether it was reasonable for the NCC to take action to alleviate that risk regard must be had to the acute staffing problems then experienced by the NCC. However, it was wrong to say that, in the context of a contract of employment between a statutory body and an employee, the statutory body could rely on considerations of policy both to justify a decision which caused damage or injury to the employee, and to prevent the court from evaluating the reasonableness of the body&#8217;s conduct, Anns v Merton LBC [1978] A.C. 728 , Lavis v Kent CC 90 L.G.R. 416 considered. Having regard to the size of the risk of a repetition of W&#8217;s mental illness and the likely gravity of that illness, the standard of care expected of a reasonable local authority required that the NCC take measures to ensure that W&#8217;s workload was permanently reduced, either through additional assistance or restructuring of the social services."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For W: Brian Langstaff Q.C. and Andrew Buchan. For NCC: Simon Hawkesworth Q.C. and Richard Craven.",
    "CATEGORIES": [
        "Employment",
        "Duty of Care",
        "Employers' Liability",
        "Health and Safety at Work",
        "Psychiatric Illness"
    ],
    "CATEGORY": "Employment &mdash; Duty of Care &mdash; Employers' Liability &mdash; Health and Safety at Work &mdash; Psychiatric Illness",
    "SUMMARY": [
        "Contract of employment; duty to take reasonable care for health and safety of employee; duty to provide a safe system of work; whether duty extends to risk of psychiatric illness",
        "An employer&#8217;s duty to take reasonable care to provide his employee with a safe system of work and take reasonable steps to prevent him from risks which are reasonably foreseeable extended to risks of psychiatric illness. W, who was responsible for four teams of social services fieldworkers employed by the NCC, suffered a mental breakdown in November 1986 and was forced to spend four months away from work. This breakdown followed a lengthy period over which W&#8217;s work pressures increased significantly and, despite repeated attempts to do so, he had not persuaded the NCC either to increase staff or provide guidance as to work distribution or prioritisation. Upon his return he was offered no additional support from the NCC and by September 16, 1987 he was advised to go on sick leave and suffered a second mental breakdown. He was dismissed on the grounds of permanent ill-health in February 1988 and brought an action for damages against the NCC for breach of their duty of care to take reasonable steps to avoid exposing him to a health-endangering workload."
    ],
    "COURT": "EWHC",
    "CITATION": "Walker v Northumberland County Council [1995] 1 All ER 737",
    "NUMBER": "412",
    "YEAR": "1995"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Harvey v Plymouth City Council",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Orchard v Lee",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Selwood v Durham CC",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Tomlinson v Congleton BC",
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Lawrence v Pembrokeshire County Council"
    ],
    "NAME": "(wl) Barber v Somerset County Council",
    "JUDGE": "Lord Bingham of Cornhill; Lord Steyn; Lord Scott of Foscote; Lord Rodger of Earlsferry; Lord Walker of Gestingthorpe",
    "CIT": "[2004] UKHL 13",
    "HELD": [
        "allowing the appeal (Lord Scott dissenting), that the issue of the breach of the local authority&#8217;s duty of care to B was borderline. The trial judge, who saw and heard the witnesses, had concluded that the local authority had been in breach and there was insufficient reason for the Court of Appeal to set aside that finding. The test was whether the local authority had fallen below the standard properly to be expected of a reasonable and prudent employer taking positive steps for the safety of his workers in the light of what he knew or ought to have known, Stokes v Guest Keen &amp; Nettlefold (Bolt &amp; Nuts) Ltd [1968] 1 W.L.R. 1776 applied. The Court of Appeal had failed to give adequate weight to the fact that B, an experienced and conscientious teacher, had been absent for three weeks with no physical ailment, such absence having been certified by his GP as being due to stress and depression. The duty to take some action had arisen in June or July 1996 when B had seen members of the school&#8217;s senior management team, and had continued so long as nothing had been done to help him. The senior management team should have made enquiries about B&#8217;s problems and discovered what they could have done to ease them, and the fact that the school as a whole was facing severe problems, with all the teachers stressed and overworked, did not mean that there was nothing that could have been done to help B, Cross v Highlands &amp; Islands Enterprise 2001 S.L.T. 1060 considered. The trial judge had been entitled to form the view that the school&#8217;s senior management team were in a position of continuing breach of the employer&#8217;s duty of care, and that had caused B&#8217;s breakdown in November 1996. (Per Lord Scott) The Court of Appeal had accurately expressed the principles that ought to be applied where a complaint was made of psychiatric illness brought about by stress at work, and these principles were to be preferred to the decision in Stokes , which addressed the question of whether the employer had provided a safe system of work, rather than the problems of psychiatric illness caused by stress."
    ],
    "FLAGS": [
        "Approved",
        "Bingham"
    ],
    "COUNSEL": "For the appellant: Brian Langstaff QC, Andrew Buchan. For the respondents: Andrew Collender QC, Andrew Hogarth QC, Charlotte Reynolds.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Employment",
        "Education",
        "Personal Injury",
        "Local Government",
        "Depression",
        "Duty of Care",
        "Employers' Duties",
        "Foreseeability",
        "Occupational Stress",
        "Personal Injury",
        "Standard of Care",
        "Teachers"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Employment &mdash; Education &mdash; Personal Injury &mdash; Local Government &mdash; Depression &mdash; Duty of Care &mdash; Employers' Duties &mdash; Foreseeability &mdash; Occupational Stress &mdash; Personal Injury &mdash; Standard of Care &mdash; Teachers",
    "SUMMARY": [
        "A local authority was in breach of its duty to its employee to take reasonable care to avoid injuring his health where it had become aware that his difficulties at work were having an adverse effect on his mental health, but had taken no steps to help him.",
        "B appealed against a decision ([2002] EWCA Civ 76, [2002] 2 All E.R. 1) that the local authority had not been in breach of its duty to take reasonable care to avoid injuring his health. B had been employed by the local authority as a teacher. In September 1995 there was a restructuring of staffing at the school at which B was employed, and B was told that in order to maintain his salary level he would have to take on further responsibilities. B worked between 61 and 70 hours per week, and often had to work in the evenings and at weekends. In February 1996 B spoke of &#8220;work overload&#8221; to the school&#8217;s deputy headteacher, and made enquiries about taking early retirement. In May B was absent from work for three weeks, his absence certified by his GP as being due to stress and depression. On his return to work B met with members of the school&#8217;s senior management team and said that he was not coping with his workload and that the situation was becoming detrimental to his health. He was not met with an entirely sympathetic response and no steps were taken to assist him. B contacted his GP on a number of occasions about work related stress and in November 1996, after losing control and shaking a pupil, he left the school and did not return. Since that time B had been unable to work as a teacher, or to do any work other than undemanding part time work. The issue was whether the Court of Appeal had been right to conclude that the evidence before the trial judge did not sustain a finding that the school authorities ought to have foreseen that, if B continued with his existing workload, he was liable to develop a psychiatric illness."
    ],
    "COURT": "UKHL",
    "CITATION": "Barber v Somerset County Council [2004] UKHL 13",
    "NUMBER": "413",
    "YEAR": "2004"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Pierce v Doncaster MBC",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) Osman v Ferguson",
        "(wl) Jobling v Associated Dairies",
        "(wl) Haseldine v Daw",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Coventry v Lawrence (no 2)",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Humber Oil v The Owners of the Ship 'The Sivand'",
        "(wl) Wooldridge v Sumner",
        "(wl) Kennaway v Thompson"
    ],
    "NAME": "(wl) Thompson v Smiths Shiprepairers (North Shields) Ltd",
    "JUDGE": "Mustill J",
    "CIT": "[1984] QB 405",
    "HELD": [
        "that D could only rely on this defence for the years up to about 1963, while there was a lack of social awareness on the part of employers. Once knowledge and protectors became available, D owed a duty of care, and was in breach of that duty between 1963 and the time when he provided ear protection. P was therefore only entitled to recover for damage suffered between those dates. Full allowances in P&#8217;s favour would be made for the uncertainties known to be involved in any apportionment."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1984",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Shipping",
        "Industrial Diseases",
        "Negligence",
        "Noise",
        "Shipyards"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Shipping &mdash; Industrial Diseases &mdash; Negligence &mdash; Noise &mdash; Shipyards",
    "SUMMARY": [
        "Duty of care; shipyard noise; hearing loss",
        "P had worked in D&#8217;s shipyard since 1944. D knew that noise levels in the yards would expose workmen to risks of hearing loss, but like all those concerned in the industry had accepted deafness as an inescapable risk. By the early 1960s the need to protect employees against noise became generally known, and ear protectors became available. D provided P with ear protectors in the early 1970s. P suffered hearing loss before 1963, but this became worse thereafter. P sued D, who relied in defence on the general practice of inaction in the industry."
    ],
    "COURT": "EWHC",
    "CITATION": "Thompson v Smiths Shiprepairers (North Shields) Ltd [1984] QB 405",
    "NUMBER": "414"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Pierce v Doncaster MBC",
        "(wl) Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd",
        "(wl) Mohamud v WM Morrison Supermarkets Plc",
        "(wl) Coltman v Bibby Takers Ltd",
        "(wl) Lister v Hesley Hall",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Sanderson v Hull",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Phipps v Rochester Corporation"
    ],
    "NAME": "(wl) McDermid v Nash Dredging and Reclamation Co Ltd",
    "JUDGE": "Lord Bridge of Harwich; Lord Hailsham LC; Lord Brandon of Oakbrook; Lord Mackay of Clashfern; Lord Ackner",
    "CIT": "[1987] AC 906",
    "HELD": [
        "that (1) N Co owed M a duty to devise a safe system of work and to ensure that it was operated. They remained liable even though they had delegated the performance of the duty to the captain, whose part had been central to its operation. The captain was negligent and W Co was liable; (2) N Co had no interest in the tug within s.3(1) of the Act of 1958, and the captain had remained the servant of S Co under s.3(2)(a). Accordingly N Co could not limit their liability pursuant to the Act."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1987",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Health and Safety at Work",
        "Employers' Liability",
        "Limitations",
        "Safety"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Health and Safety at Work &mdash; Employers' Liability &mdash; Limitations &mdash; Safety",
    "SUMMARY": [
        "Safe system of work; vicarious liability; limitation of liability",
        "M was employed by N Co as a deckhand and in the course of his employment worked on a tug owned by S Co under the direction of its captain who was employed by S Co. M&#8217;s job was to untie the tug from a dredger and then signal to the captain that it was safe to move away. On one occasion the captain started to move the tug away before he received the signal, with the result that M was injured by the rope."
    ],
    "COURT": "UKHL",
    "CITATION": "McDermid v Nash Dredging and Reclamation Co Ltd [1987] AC 906",
    "NUMBER": "415"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) The Scout Association v Barnes",
        "(wl) Walker v Northumberland County Council",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Tomlinson v Congleton BC",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Doughty v Turner Manufacturing Co",
        "(wl) Poppleton v Trustees of the Portsmouth Youth Activities Committee",
        "(wl) JGE v English Province of Our Lady of Charity",
        "(wl) Wooten v J Docter",
        "(wl) Barber v Somerset County Council",
        "(wl) Barker v Corus (UK)"
    ],
    "NAME": "(wl) Coxall v Goodyear Great Britain Ltd",
    "JUDGE": "Simon Brown LJ; Brooke LJ",
    "CIT": "[2002] EWCA Civ 1010",
    "HELD": [
        "dismissing the appeal, that whether or not an employer in a particular case was under a duty to remove an employee from employment which exposed him to a risk of physical danger was dependant upon the magnitude of the risk involved, Withers v Perry Chain Co Ltd [1961] 1 W.L.R. 1314 distinguished. In the instant case, the trial judge had been correct in concluding that G had been negligent in failing to follow the advice of their works doctor by moving C to alternative work or by dismissing him."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For C: Satinder Hunjan Q.C. For G: Simon Beard.",
    "CATEGORIES": [
        "Health and Safety at Work",
        "Asthma",
        "Employees",
        "Employers' Duties",
        "Occupational Health",
        "Risk"
    ],
    "CATEGORY": "Health and Safety at Work &mdash; Asthma &mdash; Employees &mdash; Employers' Duties &mdash; Occupational Health &mdash; Risk",
    "SUMMARY": [
        "Claimant with predisposition to asthma employed at defendant&#8217;s tyre factory on paint section - Claimant informed by works doctor that claimant ought not to work with paint - No action taken by employer and claimant collapsed and diagnosed with occupational asthma - Employer under duty to remove claimant from dangerous work situation - Employers liability dependant on magnitude of risk involved to be assessed on a case by case basis.",
        "G appealed against the award of damages to C, who had suffered occupational asthma as a result of working as a paint and line operator at G&#8217;s tyre factory. In response to health concerns expressed by the workforce following a new lubricant paint being introduced G had provided protective equipment for use when spraying. However, despite the availability of this equipment, C should not have worked with the new paint because he suffered from a mild constitutional predisposition to asthma. Initially, neither C nor his employer were aware of this. C was seen by the works doctor complaining of severe headaches and giddiness. The doctor sent a memo to the business team manager stating that in his opinion C should not work with the new paint. The memo was not received by the team leader and in the result C remained at work as a paint and line operator. A few weeks later, after having been taken to hospital following a fall, C was formally diagnosed as suffering from occupational asthma caused by exposure to irritant fumes at work. The judge found that whilst G had taken all reasonable precautions up to the date C was seen by the works doctor, thereafter G had been under a duty to remove him from a dangerous work situation and that a reasonable employer would have acted within a few days of the doctor&#8217;s memo having been sent. He awarded damages on the basis that G was liable for the exacerbation of C&#8217;s condition through his additional exposure to fume irritant. G contended that in cases such as the present one, it was for the employee to decide whether or not to take the risk of continuing in his job, there being no duty upon the employer to remove the employee from safe work, still less to dismiss him because he was not suited to the work."
    ],
    "COURT": "EWCA",
    "CITATION": "Coxall v Goodyear Great Britain Ltd [2002] EWCA Civ 1010",
    "NUMBER": "416",
    "YEAR": "2002"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Lawrence v Pembrokeshire County Council",
        "(wl) A v United Kingdom",
        "(wl) Owens v Brimmell",
        "(wl) Hufton v Somerset CC",
        "(wl) Hughes v Lord Advocate",
        "(wl) Wooldridge v Sumner",
        "(wl) Gore v Stannard (trading as Wyvern Tyres)",
        "(wl) Z and others v United Kingdom",
        "(wl) Gray v Thames Trains",
        "(wl) Orchard v Lee",
        "(wl) Various Claimants v Institute of the Brothers of the Christian Schools",
        "(wl) Gregg v Scott"
    ],
    "NAME": "(wl) Stevenson Jordan & Harrison v McDonald & Evans",
    "JUDGE": "Hayden J",
    "CIT": "[2016] EWHC 213 (Fam)",
    "HELD": [
        "Application refused.",
        "(1) An individual was required to be discharging the functions of the diplomatic post to benefit from immunity, Empson v Smith [1966] 1 Q.B. 426 applied. A balance had evolved to protect the functionality of a mission while recognising the need to minimise abuse of diplomatic immunity and protect the implied right of access to a court in ECHR art.6. That balance underlaid the policy considerations regarding immunity and established the proportionality of the restriction in ECHR terms. If the diplomat was not in the post discharging functions, what remained was only unjustified privilege or immunity linked solely to an individual&#8217;s private actions. In that case the policy considerations and proportionality of the restriction could not be justified, and could not pursue a legitimate claim sufficient to eclipse the wife&#8217;s right of access to court, Al-Malki v Reyes [2015] EWCA Civ 32, [2016] 2 All E.R. 136 followed, Fogarty v United Kingdom (37112/97) [2002] I.R.L.R. 148 considered. The husband had no pre-existing connection to St Lucia, no evident knowledge or experience of maritime matters, and had not undertaken any duties of any kind since his appointment, which had coincided with the emergent relationship with his third wife. The court was satisfied that the husband had obtained a diplomatic appointment with the sole aim of defeating the wife&#8217;s claims. The appointment was an entirely artificial construct. International comity could not be weighed in the balance when the post was an empty husk. The court would not accede to the husband&#8217;s request to strike out the wife&#8217;s Part III claim (see paras 19-20, 34-36, 40 of judgment).",
        "(2) If to the contrary the husband had acquired diplomatic immunity, the extent of the immunity was governed by the 2002 Order. Pursuant to that order and the VCDR art.31, the husband could enjoy full diplomatic immunity from civil action if he was not permanently resident in the UK, none of the VCDR exceptions applied and immunity was compatible with ECHR art.6 and art.8. Neither the 2002 Order nor the VCDR definitively defined permanent residence for that purpose and the facts surrounding it required careful evaluation. A &#8220;balance sheet&#8221; approach to the factors pointing to and against the status was not very helpful, F (A Child) (International Relocation Cases), Re [2015] EWCA Civ 882 considered. Relevant factors included that the husband was an international businessman, his limited UK visa, and that in his three marriages the family home had always been in the UK and the children brought up in the UK. The person&#8217;s intention was highly relevant but not determinative, and a qualitative rather than quantitative assessment of the intention was more accurate. The most important factor was that each of the husband&#8217;s family units and family homes had been based in the UK, by choice. That signalled an intention which was &#8220;unlimited in period&#8221; and therefore qualified as permanent, Gulbenkian v Gulbenkian [1937] 4 All E.R. 618 applied. He could therefore claim immunity only when exercising official functions; that did not apply to his defence to the wife&#8217;s claim (paras 41-44, 50-51, 64-67).",
        "(3) Although not necessary to decide, the claim would not have met the &#8220;real action exemption&#8221; test in the VCDR art.31(1)(a). Applications for orders transferring title to property in financial disputes on the breakdown of marriages did not fall within the exception, Intpro Properties (UK) v Sauvel [1983] Q.B. 1019, Laverty v Laverty [1994] CPC (3d) 91 and De Andrade v De Andrade [1984] 118 ILR 299 applied (paras 73-74)."
    ],
    "ABSTRACT": [
        "The respondent husband applied to strike out the applicant wife&#8217;s claim for financial relief in divorce proceedings based on his purported protection from civil action arising from diplomatic immunity.",
        "The husband was a wealthy Saudi businessman; the applicant was his second wife. He had since married for a third time; all three matrimonial homes had been in the UK and the children of each marriage were raised in the UK. After the wife issued divorce proceedings, the husband was appointed to represent St Lucia at the International Maritime Organisation (IMO). She was then served with confirmation of a Saudi Talaq divorce. She applied for financial relief under the Matrimonial and Family Proceedings Act 1984 Pt III.",
        "The issues were (1) whether the husband had diplomatic immunity under the Diplomatic Privileges Act 1964 s.2, which incorporated the Vienna Convention on Diplomatic Relations (VCDR) in Sch.1, and whether he was required to be active in the post to benefit from it; (2) if he had immunity, whether the extent of that immunity as set out in the International Maritime Organisation (Immunities and Privileges) Order 2002 art.15 protected him from civil action; (3) if so, whether the Part III claim was nonetheless allowable under the &#8220;real action exemption&#8221; in the VCDR art.31."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the applicant: Charles Howard QC, Tim Owen QC, Deepak Nagpal, Tom Hickman. For the respondent: Martin Pointer QC, Martin Chamberlain QC, Nicholas Wilkinson.",
    "CATEGORIES": [
        "Family Law Other Related Subjects: International Law",
        "Diplomatic Immunity",
        "Financial Orders",
        "International Maritime Organisation",
        "Residence",
        "Talaq Divorce"
    ],
    "CATEGORY": "Family Law Other Related Subjects: International Law &mdash; Diplomatic Immunity &mdash; Financial Orders &mdash; International Maritime Organisation &mdash; Residence &mdash; Talaq Divorce",
    "SUMMARY": [
        "A husband who had obtained a diplomatic appointment with the sole aim of defeating his former wife&#8217;s claim for financial relief in divorce proceedings was not protected by diplomatic immunity. Where a diplomat was not in the post or discharging the functions of the post, the policy considerations justifying immunity did not establish a proportional restriction of the implied ECHR art.6 right of access to a court."
    ],
    "COURT": "EWHC",
    "CITATION": "Stevenson Jordan &amp; Harrison v McDonald &amp; Evans [2016] EWHC 213 (Fam)",
    "NUMBER": "417",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Coventry v Lawrence",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Kennaway v Thompson",
        "(wl) Phipps v Rochester Corporation",
        "(wl) LMS International v Styrene Packaging Ltd",
        "(wl) Hinz v Berry",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Badger v Ministry of Defence",
        "(wl) Piper v JRI (Manufacturing) Ltd",
        "(wl) Dobson v Thames Water Utilities",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) McLoughlin v O'Brian"
    ],
    "NAME": "(wl) Ferguson v John Dawson & Partners (Contractors) Ltd",
    "JUDGE": "Teare J",
    "CIT": "[2016] EWHC 230 (Comm)",
    "HELD": [
        "Application refused.",
        "(1) The bank relied on Surzur Overseas Ltd v Koros [1999] 2 Lloyd&#8217;s Rep. 611. However, that case simply suggested, but did not decide, that breaches of a freezing order could amount to unlawful means, Surzur considered (see paras 8-10 of judgment). It was necessary to consider whether there was a positive common law rule preventing the court from awarding damages to one party following another&#8217;s breach of a court order. The law of contempt was concerned with maintaining the authority of the court in the public interest. Since it was not focussed on compensating litigants who had suffered loss, principle suggested that it did not confer a power to award damages. While some authorities suggested that there was jurisdiction to award damages for contempt, none expressly decided the point and none grappled with the principle that the contempt jurisdiction was concerned with the public interest rather than private redress. Even Chapman v Honig [1963] 2 Q.B. 502, which was often referred to as having decided the issue, simply identified the opposing arguments without resolving them, Chapman considered. The observations of the House of Lords in Customs and Excise Commissioners v Barclays Bank Plc [2006] UKHL 28, [2007] 1 A.C. 181 were a very clear indication that damages could not be awarded for contempt, and the instant court had to apply them. The argument from principle was compelling: the court had no power to order damages for contempt, Hudson, Re [1966] Ch. 209 considered and Barclays Bank applied (paras 16-21, 72-77). However, that simply meant that damages could not be awarded where contempt was the only basis for the claim. Where the claim was based on a conspiracy to injure by unlawful means, namely a contempt, the contempt was not the only basis of the claim. Barclays Bank did not preclude the court from regarding a contempt as unlawful means: while a third party with knowledge of a freezing order was not liable in negligence for damages caused by his failure to obey its terms, that did not mean that a third party who conspired to breach the terms of a freezing order was not liable in the tort of conspiracy to injure by unlawful means. Moreover, the reasoning in Customs and Excise Commissioners v Total Network SL [2008] UKHL 19, [2008] 1 A.C. 1174 provided strong support for the conclusion that a contempt could amount to unlawful means, Total Network applied. Although the court in Digicel (St Lucia) Ltd v Cable &amp; Wireless Plc [2010] EWHC 774 (Ch) had refused to extend unlawful means to non-criminal breaches of Regulations, contempts of court were sufficiently reprehensible to justify treating them as unlawful means, Digicel considered. The bank had a good arguable case that D2 had committed the tort of conspiracy to injure by unlawful means (paras 22-26).",
        "(2)(a) The bank&#8217;s art.6(1) argument on jurisdiction was that when the proceedings were issued against D2, D1 was domiciled in England, which meant that D2 could be sued in England. However, at that time, D1 had abandoned England as his country of residence and hence domicile. Although he had been domiciled in England until his flight to France, he was in custody in France fighting extradition to Russia when the proceedings against D2 were issued. It was unlikely that he would return to England were he not extradited to Russia: he had fled England once, had no connections there, and was liable to arrest and detention there (paras 28-30, 33-36).",
        "(2)(b) The court did, however, have jurisdiction under art.5(3), England being the place &#8220;where the harmful event occurred&#8221;. That phrase encompassed the place where the damage occurred and the place of the event giving rise to the damage, Handelswekerij GJ Bier BV and Stichtung Reinwater (The Reinwater Foundation) v Mines de Potasse d&#8217;Alsace SA (4320/74) [1979] E.C.C. 206 applied. The damage did not occur in England, because the assets were held abroad and bank&#8217;s loss was the receivers&#8217; inability to realise those assets, AMT Futures Ltd v Marzillier, Dr Meier &amp; Dr Guntner Rechtsanwaltsgesellschaft mbH [2015] EWCA Civ 143, [2015] Q.B. 699 applied (paras 38-44). However, the bank had much the better argument that England was the place of the event giving rise to the damage in respect of part of the claim. That event was the implementation, rather than the hatching,of the conspiracy, Domicrest Ltd v Swiss Bank Corp [1999] Q.B. 548 considered. Up until February 2012, the conspiracy had been implemented by instructions given by D1 in London (paras 45-54)."
    ],
    "ABSTRACT": [
        "The second defendant (D2) applied to set aside a claim form issued by the claimant bank.",
        "The bank&#8217;s claim arose in the context of long-running litigation between it and its former chairman (D1). Much of that litigation had concerned the bank&#8217;s attempts to enforce a worldwide freezing order against D1. The bank established that D1 had breached the order, but when it sought his committal for contempt, he fled to France. The bank obtained judgments in default against him and began proceedings against D2, his son-in-law, the basis of the tort of conspiracy to injure by unlawful means. It claimed that D1 and D2 had conspired to prevent it from making any substantial recovery, alleging that they had breached the freezing order by creating and using false and misleading documents. It thus relied on contempt of court as the unlawful means for the purposes of the tort. Because D2 was domiciled in Switzerland, the Lugano Convention 2007 dictated that he be sued there unless the bank could establish that the instant court had jurisdiction pursuant to art.6(1) or art.5(3).",
        "The issues were whether (1) contempt of court could constitute unlawful means; (2) the court had jurisdiction to hear the bank&#8217;s claim."
    ],
    "FLAGS": [
        "appeal-outstanding"
    ],
    "COUNSEL": "For the claimant: Stephen Smith QC, Tim Akkouh. For the second defendant: Charles Samek QC, Marc Delehanty.",
    "CATEGORIES": [
        "Torts Other Related Subjects: Civil Procedure",
        "Breach",
        "Contempt of Court",
        "Damage",
        "Damages",
        "Freezing Injunctions",
        "Jurisdiction",
        "Unlawful Means Conspiracy"
    ],
    "CATEGORY": "Torts Other Related Subjects: Civil Procedure &mdash; Breach &mdash; Contempt of Court &mdash; Damage &mdash; Damages &mdash; Freezing Injunctions &mdash; Jurisdiction &mdash; Unlawful Means Conspiracy",
    "SUMMARY": [
        "The High Court held that contempt of court could constitute &#8220;unlawful means&#8221; for the purpose of the tort of conspiracy to injure by unlawful means. It also considered the issue of jurisdiction under the Lugano Convention 2007 art.5(3) in the context of a conspiracy implemented in England to wrongfully deal with assets located abroad in breach of a worldwide freezing order."
    ],
    "COURT": "EWHC",
    "CITATION": "Ferguson v John Dawson &amp; Partners (Contractors) Ltd [2016] EWHC 230 (Comm)",
    "NUMBER": "418",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Mohamud v WM Morrison Supermarkets Plc",
        "(wl) Cox v Ministry of Justice",
        "(wl) Lister v Hesley Hall",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Sanderson v Hull",
        "(wl) Coltman v Bibby Takers Ltd",
        "(wl) Biffa Waste Services Ltd v Maschinenfabrik Ernst Hese GmbH",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Barber v Somerset County Council",
        "(wl) Smith v Stages",
        "(wl) Attorney General of the British Virgin Islands v Hartwell"
    ],
    "NAME": "(wl) Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd",
    "JUDGE": "May LJ; Rix LJ",
    "CIT": "[2005] EWCA Civ 1151",
    "HELD": [
        "allowing the appeal, that (1) correctly formulated, the question to determine vicarious liability was who was entitled to exercise control over the relevant act or operation of the fitter&#8217;s mate. To look for a transfer of a contract of employment was distracting and misleading. The fitter&#8217;s mate&#8217;s employment was not transferred. The inquiry should concentrate on the relevant negligent act and then ask whose responsibility it was to prevent it: who was entitled and obliged to give orders as to how the work should or should not be done. Entire and absolute control was not a necessary precondition of vicarious liability, Mersey Docks and Harbour Board v Coggins &amp; Griffith (Liverpool) Ltd [1947] A.C. 1 and Denham v Midland Employers Mutual Assurance [1955] 2 Q.B. 437 considered. (2) On the facts of the instant case both D2&#8217;s fitter and D3&#8217;s fitter had been entitled, and if they had had the opportunity obliged, to prevent the mate&#8217;s negligence. (3) It had been assumed since the early 19th century to be the law that where an employee who was lent by one employer to work for another was negligent, liability had to rest on one employer or the other, but not both. But the foundation on which that rested was a slender one and the contrary had never been properly argued. There was no authority binding the court to hold that dual vicarious liability was legally impossible, Donovan v Laing Wharton and Down Construction Syndicate Ltd [1893] 1 Q.B. 629 and Esso Petroleum Co Ltd v Hall Russell &amp; Co Ltd (The Esso Bernicia) [1989] A.C. 643 considered. (4) Dual vicarious liability was legally possible and both D2 and D3 were vicariously liable for the mate&#8217;s negligence. (5) If the relevant relationships led to the conclusion of dual control over the employee, it was likely that the measure of control was equal. That was so in the instant case and, applying the Civil Liability (Contribution) Act 1978 , the just and equitable division of responsibility between D2 and D3 was equal. D2 and D3 should contribute 50 per cent of their several liabilities to C."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the claimant: Andrew Prynne QC, Toby Riley-Smith. For the defendants: Patrick Field QC.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Employment",
        "Contribution",
        "Employers' Liability",
        "Vicarious Liability"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Employment &mdash; Contribution &mdash; Employers' Liability &mdash; Vicarious Liability",
    "SUMMARY": [
        "Two separate employers could both be vicariously liable for the negligence of a single employee.",
        "The appellant (D3) appealed against the decision that it was vicariously liable for the negligence of a fitter&#8217;s mate who had caused a flood at a factory. The claimant (C) had engaged the first defendant (D1) to install air conditioning in C&#8217;s factory. D1 had subcontracted ducting work to the second defendant (D2) and D2 had contracted with D3 to provide fitters and fitters&#8217; mates on a labour only basis. A fitter&#8217;s mate supplied by D3, who was working with a fitter supplied by D3, both under the supervision of a fitter contracted to D2, negligently caused a flood. The judge determined that D3 and not D2 was vicariously liable for the negligence of the fitter&#8217;s mate. The issue on appeal was whether both D2 and D3, rather than only one of them, could be vicariously liable for the negligence of the fitter&#8217;s mate. D3 submitted that dual vicarious liability was not a legal possibility and that D2 alone should be liable. D2 submitted that D3 alone should be liable but that dual vicarious liability was a legal possibility."
    ],
    "COURT": "EWCA",
    "CITATION": "Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd [2005] EWCA Civ 1151",
    "NUMBER": "419",
    "YEAR": "2005"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Cox v Ministry of Justice",
        "(wl) Mohamud v WM Morrison Supermarkets Plc",
        "(wl) Bernard v Attorney General of Jamaica",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Walker v Northumberland County Council",
        "(wl) Smith v Stages",
        "(wl) Coltman v Bibby Takers Ltd",
        "(wl) Lister v Hesley Hall",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) JGE v English Province of Our Lady of Charity"
    ],
    "NAME": "(wl) Hawley v Luminar Leisure Ltd",
    "JUDGE": "Latham LJ; Neuberger LJ; Hallett LJ",
    "CIT": "[2006] EWCA Civ 18",
    "HELD": [
        "dismissing the appeals, that (1) it had been open to the judge on the facts to find that L had become W&#8217;s deemed employer. Vicarious liability required no fault on the part of the employer or, in the instant case, the deemed employer. The contract between S and L was for the provision of labour only. By using S&#8217;s services L did not gain access to a team of trained specialists on whose skill and expertise it depended. L had no need to rely on S&#8217;s staff but merely chose to do so. L exercised detailed control not only over what the doormen did but how they were to do it. Effective control of the doormen had vested in L. L had control of and responsibility for S&#8217;s employees in fact and by virtue of the contractual provisions, Mersey Docks and Harbour Board v Coggins &amp; Griffith (Liverpool) Ltd [1947] A.C. 1 applied. (2) In the circumstances it would not be appropriate to attribute vicarious liability to both S and L, since there had been effectively and substantially a transfer of control and responsibility from S to L, Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd [2005] EWCA Civ 1151, [2006] Q.B. 510 considered. (3) The lack of fault of a person vicariously liable for the wrongful act of his employee was not relevant for the purposes of determining contribution proceedings between that person and another wrongdoer, Dubai Aluminium Co Ltd v Salaam [2002] UKHL 48, [2003] 2 A.C. 366 applied. It had been open to the judge to find that, as between the defendants, S&#8217;s negligence had a negligible causative effect and to assess S&#8217;s contribution at nil. (4) It was not appropriate or in the interests of justice to permit F to reopen the issue of the default judgment. (5) The judge had been right to hold that the question whether the injury caused to C was accidental or fortuitous had to be judged from the perspective of the assured, S, rather than that of the individual perpetrator, W, and that the injury was indeed accidental or fortuitous within the meaning of the policy. S and W were to be treated as separate from the perspective of the policy, so that the intention of W in causing the bodily injury should not be attributed to S. The judge reached the right conclusion that the cover afforded to S by the policy did extend to the liability of S to C in respect of damages for the serious bodily injury inflicted on him by W."
    ],
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "COUNSEL": "For the claimant: John Foy QC, Daniel Lawson. For the first defendant: Derek Sweeting QC. For the third defendant: Jeremy Stuart-Smith QC, Alex Glassbrook.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Insurance",
        "Employment",
        "Hospitality and Leisure",
        "Contribution",
        "Control",
        "Employers' Liability",
        "Insurance Policies",
        "Nightclubs",
        "Public Liability Insurance",
        "Vicarious Liability"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Insurance &mdash; Employment &mdash; Hospitality and Leisure &mdash; Contribution &mdash; Control &mdash; Employers' Liability &mdash; Insurance Policies &mdash; Nightclubs &mdash; Public Liability Insurance &mdash; Vicarious Liability",
    "SUMMARY": [
        "A nightclub was vicariously liable for the acts of a doorman supplied to it under an agreement for the provision of security services since the club had control not only over what the doorman did but also over how he was to do it. An assault by the doorman on a member of the public caused an &#8220;accidental&#8221; bodily injury for the purposes of the employer&#8217;s public liability insurance.",
        "The appellants (L and F) appealed against a decision ([2005] EWHC 5, [2005] Lloyd&#8217;s Rep. I.R. 275) that a doorman supplied to a nightclub was deemed to be a temporary employee of the nightclub for the purposes of vicarious liability. L operated a nightclub and contracted with a supplier (S) for the provision of security services including doormen. A doorman (W) supplied to the club under that agreement assaulted a member of the public (C) and was convicted of causing grievous bodily harm. C sued S as W&#8217;s employer and L as his &#8220;temporary deemed employer&#8221;. C claimed that S and L had been negligent and were liable for W&#8217;s tortious act. S had gone into liquidation and C obtained judgment in default against it. S was covered by insurance issued by F but F declined to indemnify S. The judge held that L was vicariously liable because it had had sufficient control over W to make him a temporary deemed employee. He also found that C&#8217;s bodily injury was &#8220;accidental&#8221; within the meaning of F&#8217;s policy even though W had deliberately punched C intending to do him serious harm. He gave judgment against L and declared that F was liable to indemnify S. On L&#8217;s claim against S for a contribution under the Civil Liability (Contribution) Act 1978 he assessed S&#8217;s contribution at nil. He declined to consider setting aside the default judgment. L submitted that the judge had been wrong to find that W was a deemed temporary employee of L; alternatively that both L and S were vicariously liable for W&#8217;s act; and that the judge had been wrong to find a nil contribution against S under the 1978 Act since S&#8217;s fault was more than negligible. F submitted that S&#8217;s contribution was rightly set at nil, that the default judgment should be set aside and that C&#8217;s injury was not within the policy wording."
    ],
    "COURT": "EWCA",
    "CITATION": "Hawley v Luminar Leisure Ltd [2006] EWCA Civ 18",
    "NUMBER": "420",
    "YEAR": "2006"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Attorney General of the British Virgin Islands v Hartwell",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Anns v Merton London Borough Council",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Moore Stephens v Stone Rolls Ltd",
        "(wl) Mohamud v WM Morrison Supermarkets Plc",
        "(wl) JGE v English Province of Our Lady of Charity",
        "(wl) Bernard v Attorney General of Jamaica",
        "(wl) Patchett v Swimming Pool Trades Association",
        "(wl) JD v East Berkshire Community Health NHS Trust",
        "(wl) Swinney v Chief Constable of Northumbria"
    ],
    "NAME": "(wl) Biffa Waste Services Ltd v Maschinenfabrik Ernst Hese GmbH",
    "JUDGE": "Sir Anthony May PQBD; Rimer LJ; Stanley Burnton LJ",
    "CIT": "[2008] EWCA Civ 1257",
    "HELD": [
        "Appeal allowed.",
        "(1) The court had been wrong to make a finding of vicarious liability. P&#8217;s men were skilled workers and there could be no question of O exercising control over the way that they welded. There had been no express agreement to that effect and there was no basis to infer such agreement. Nor had P&#8217;s workers become part of O&#8217;s business; their work had been very temporary, taking place over a couple of days. The judge had also failed to address the fact that four men had been supplied instead of two. O could not be liable for employees whose work they had not contracted, but there was no basis on which to distinguish between the two for which they might be liable and the two for which they were not liable. The court had been wrong to equate supervision with control. The right to supervise did not, without more, carry with it the entitlement to instruct how to do the work, particularly in the context of skilled labour, Hawley v Luminar Leisure Ltd [2006] EWCA Civ 18, [2006] I.R.L.R. 817 considered and Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd [2005] EWCA Civ 1151, [2006] Q.B. 510 distinguished on the basis that both defendants&#8217; employees had been present when the negligent act took place, whereas in the instant case, M&#8217;s employees were present but O&#8217;s were not. The court had also failed to acknowledge that the burden on a party seeking to show a transfer of liability for an employee was a heavy one. Exceptional facts were required for a contractor to be vicariously liable for the negligence of his sub-contractor and those facts were not present in the instant case, Mersey Docks and Harbour Board v Coggins &amp; Griffith (Liverpool) Ltd [1947] A.C. 1, Smith v Blandford Gee Cementation Co [1970] 3 All E.R. 154 and Denham v Midland Employers Mutual Assurance [1955] 2 Q.B. 437 considered. (2) Regarding liability for ultra-hazardous acts, the principle in Honeywill was anomalous and so unsatisfactory that its application should be kept as narrow as possible and should be truly exceptional. Much in life was &#8220;inherently dangerous&#8221; unless precautions were taken and it was difficult to see what principled basis there might be for distinguishing between operations that were not inherently dangerous and those that were. It was also difficult to reconcile the principle in Honeywill with the decision in Read v J Lyons &amp; Co Ltd [1947] A.C. 156, Read considered. Honeywill was to be applied only to activities that were exceptionally dangerous whatever precautions were taken, Honeywill distinguished. Caution was required when considering cases that were relied upon by the Court of Appeal in Honeywill."
    ],
    "ABSTRACT": [
        "The appellant contractor (O) appealed against a decision ([2008] EWHC 6 (TCC)) that it was vicariously liable for the negligence of the third party (P), which had caused or materially contributed to a fire at a recycling plant.",
        "The fire had occurred while the plant was under construction. The respondents (B) had agreed to construct the plant and had engaged another company (M) to design and build it. M had sub-contracted the fourth party (H) as main contractors, who had overall responsibility for site activities and were permanently on site. H had then entered into a contract with O to supply the &#8220;ball mill&#8221; part of the plant. O was based in Norway and had no presence at the site or in the United Kingdom generally. O designed the ball mill but sub-contracted the manufacture and installation. Welding work to the ball mill became necessary and was performed by P. O had been requested to supervise P&#8217;s repairs and had agreed to pay M for the supply of supervisory labour on the relevant days. The fire had occurred during the course of P&#8217;s work. B had brought proceedings against M and O to cover its losses. The trial judge, finding that P&#8217;s activities were ultra-hazardous within the meaning of the principle in Honeywill &amp; Stein Ltd v Larkin Bros (London&#8217;s Commercial Photographers) Ltd [1934] 1 K.B. 191 and finding that P had been negligent, held that O was liable for P&#8217;s negligence because P&#8217;s welders had become O&#8217;s employees while performing the welding work. He had reached that conclusion on the basis that liability attached to the party who had control over the manner in which the welding work should be done and that O, through M, had had the right to control P&#8217;s operations.",
        "O submitted that the judge had failed to take account of the high burden of proof required for a finding that an employee had been transferred from his normal employer to another party, and had failed to take account of the skill of P&#8217;s workers and the fact that four workers had been involved when O had contracted only for two. O maintained that M were independent contractors for whose conduct it was not responsible and that the court had focused excessively on supervision as against control, with no regard for the fact that O had had no presence on site."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: David Allen QC. For the respondents: Ben Patten.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Construction Law",
        "Construction Contracts",
        "Duty of Care",
        "Hazardous Pursuits",
        "Independent Contractors",
        "Sub-Contractors",
        "Vicarious Liability"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Construction Law &mdash; Construction Contracts &mdash; Duty of Care &mdash; Hazardous Pursuits &mdash; Independent Contractors &mdash; Sub-Contractors &mdash; Vicarious Liability",
    "SUMMARY": [
        "The principle in Honeywill &amp; Stein Ltd v Larkin Bros (London&#8217;s Commercial Photographers) Ltd [1934] 1 K.B. 191 was anomalous and so unsatisfactory that its application should be kept as narrow as possible and should be truly exceptional. It was to be applied only to activities that were exceptionally dangerous whatever precautions were taken."
    ],
    "COURT": "EWCA",
    "CITATION": "Biffa Waste Services Ltd v Maschinenfabrik Ernst Hese GmbH [2008] EWCA Civ 1257",
    "NUMBER": "421",
    "YEAR": "2008"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Various Claimants v Institute of the Brothers of the Christian Schools",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Coxall v Goodyear Great Britain Ltd",
        "(wl) Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Selwood v Durham CC",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Lister v Hesley Hall",
        "(wl) Revill v Newbery",
        "(wl) Harris v Perry and another",
        "(wl) Ministry of Defence v Radclyffe"
    ],
    "NAME": "(wl) JGE v English Province of Our Lady of Charity",
    "JUDGE": "Ward LJ; Tomlinson LJ; Davis LJ",
    "CIT": "[2012] EWCA Civ 938",
    "HELD": [
        "Appeal dismissed.",
        "(Tomlinson L.J. dissenting) The law of vicarious liability had moved beyond the confines of a contract of service. However, it was wrong to conclude that the relationship between the tortfeasor and the person against whom liability was sought had to be sufficiently close. If there was a close connection test, it was that the relationship between the defendant and the tortfeasor had to be so close to a relationship of employer and employee that for vicarious liability purposes it could fairly be said to be akin to employment, Doe v Bennett considered. The test was whether the relationship of the bishop and B was so close in character to one of employer and employee that it was just and fair to hold the employer vicariously liable (see paras 61-63 of judgment). Applying the control test, a priest was subject to no direct control in the sense of the bishop checking what he did every single day, but there was a level of control in the sense that if certain things did not happen then action could be taken. Moreover, under canon law, priests were bound by special obligation to show reverence and obedience to their ordinary. Abuse of a child was a gross breach of ecclesiastical law and if it came to the bishop&#8217;s knowledge, he would be bound to dismiss the priest from his office. A priest also operated within a pre-existing framework of rights and obligations set out in the Code of Canon Law and was ultimately subject to the sanctions and control of his bishop to whom he was accountable, Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd [2005] EWCA Civ 1151, [2006] Q.B. 510 applied, Bazley v Curry (1999) 174 D.L.R. (4th) 45 considered (paras 74-76). The problem in relation to the organisation test was in identifying the employer&#8217;s business. However, the Roman Catholic Church looked like a business and operated like one. The Pope was in the head office; there were &#8220;regional offices&#8221; with appointed bishops; and the &#8220;local branches&#8221; were parishes with their appointed priests (para.77). In relation to the integration test, the role of the parish priest was wholly integrated into the organisational structure of the Church&#8217;s enterprise. He was part and parcel of the organisation, not only accessory to it, Viasystems and Stevenson Jordan &amp; Harrison v MacDonald &amp; Evans [1952] 1 T.L.R. 101 applied (para.78). The question in relation to the entrepreneur test was whether the priest was more like an independent contractor than an employee. He was not paid a salary directly, but was dependent on what he could take from collections given at Mass. However, any surplus formed part of the parish funds. His situation was akin to being paid a wage and certainly did not resonate with being an entrepreneur (para.79). B did not match every facet of being an employee, but the result of each test led to the conclusion that he was more like an employee than an independent contractor. The relationship was akin to employment within the meaning which an ordinary person would give the words, Cassidy v Ministry of Health [1951] 2 K.B. 343 applied. He was in a relationship with his bishop which was close enough and sufficiently akin to that of employer and employee to make it just and fair to impose vicarious liability. Justice and fairness was used as a salutary check on the conclusion, but was not a stand-alone test (paras 80-84)."
    ],
    "ABSTRACT": [
        "The appellant Roman Catholic diocese (D) appealed against a decision ([2011] EWHC 2871 (QB), [2012] 2 W.L.R.709) that it could be vicariously liable for the alleged torts of one of its parish priests (B).",
        "The court below had reached the decision in determination of a preliminary issue relating to a claim for damages for personal injury by the respondent (J) against D. J alleged that she had been sexually abused and raped by B. The judge below acknowledged that vicarious liability involved the synthesis of two elements, the first stage being the relationship between the employer and the employee and the second being whether the act was within the scope of the employment. In relation to the first stage, it was accepted that a priest was not an employee, but that vicarious liability could be founded on a relationship other than employment. On the basis of the decision in Doe v Bennett [2004] 1 S.C.R. 436, the judge concluded that the relationship was akin to employment because of the close connection between the tortfeasor and the person against whom liability was sought. The issue was whether the law could be extended to relationships akin to employment; whether the close connection test was appropriate; and whether it was enough that the result was just and fair."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Lord Faulks QC, Nicholas Fewtrell. For the respondent: Elizabeth-Anne Gumbel QC, Justin Levinson.",
    "CATEGORIES": [
        "Torts Other Related Subjects: Ecclesiastical Law",
        "Personal Injury",
        "Child Sexual Abuse",
        "Employees",
        "Ministers of Religion",
        "Personal Injury",
        "Roman Catholic Church",
        "Vicarious Liability"
    ],
    "CATEGORY": "Torts Other Related Subjects: Ecclesiastical Law &mdash; Personal Injury &mdash; Child Sexual Abuse &mdash; Employees &mdash; Ministers of Religion &mdash; Personal Injury &mdash; Roman Catholic Church &mdash; Vicarious Liability",
    "SUMMARY": [
        "The relationship between a Roman Catholic parish priest and a bishop was sufficiently close in character to that of employee and employer to make it just and fair to hold a diocese vicariously liable for the wrongful acts of one of its priests."
    ],
    "COURT": "EWCA",
    "CITATION": "JGE v English Province of Our Lady of Charity [2012] EWCA Civ 938",
    "NUMBER": "422",
    "YEAR": "2012"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) JGE v English Province of Our Lady of Charity",
        "(wl) Lister v Hesley Hall",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Biffa Waste Services Ltd v Maschinenfabrik Ernst Hese GmbH",
        "(wl) Jolley v Sutton LBC",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) Doughty v Turner Manufacturing Co",
        "(wl) Humber Oil v The Owners of the Ship 'The Sivand'",
        "(wl) McLoughlin v O'Brian",
        "(wl) W v Essex County Council and Another",
        "(wl) Hussain v Lancaster CC"
    ],
    "NAME": "(wl) Various Claimants v Institute of the Brothers of the Christian Schools",
    "JUDGE": "Lord Phillips JSC; Lady Hale JSC; Lord Kerr JSC; Lord Wilson JSC; Lord Carnwath JSC",
    "CIT": "[2012] UKSC 56",
    "HELD": [
        "Appeal allowed.",
        "Vicarious liability involved a two-stage test. First, it was necessary to consider the relationship between the defendant and the tortfeasor to see whether it was one that was capable of giving rise to vicarious liability. Second, regard should be had to the connection that linked the relationship between the defendant and the tortfeasor and the act or omission of the latter. The relationship between the teaching brothers and the Institute was sufficiently akin to that of employer and employees to satisfy the first stage of the test: the Institute was subdivided into a hierarchical structure and conducted its activities as if it were a corporate body; the teaching activity of the brothers was undertaken because the Provincial directed them to undertake it; although the brothers entered into contracts of employment with those managing the school, they did so because the Provincial required them to do so; the teaching activity undertaken by the brothers was in furtherance of the objective, or mission, of the Institute; further, the manner in which the brother teachers were obliged to conduct themselves as teachers was dictated by the Institute&#8217;s rules (see paras 21, 56, 60 of judgment). As to the second stage of the test, the precise criteria for imposing vicarious liability for sexual abuse were still in the course of refinement by judicial decision, but a common theme arose from the authorities. Vicarious liability was imposed where a defendant, whose relationship with the abuser put it in a position to use the abuser to carry on its business or to further its own interests, had done so in a manner which had created or significantly enhanced the risk that the victim or victims would suffer the relevant abuse. The essential closeness of connection between the relationship between the defendant and the tortfeasor and the acts of abuse thus involved a strong causative link. Those were the criteria that established the necessary &#8220;close connection&#8221; between relationship and abuse. It was not right to say that creation of risk was simply a policy consideration and not one of the criteria. It was not enough, of itself, to give rise to vicarious liability for abuse but it was always likely to be an important element in the facts that gave rise to such liability. Here, both the necessary relationship between the brothers and the Institute and the close connection between that relationship and the abuse committed at the school had been made out. As to the former, the relationship between the Institute and the brothers enabled the Institute to place the brothers in teaching positions and, in particular, in the position of headmaster at the school. The standing that the brothers enjoyed as members of the Institute led the managers of that school to comply with the decisions of the Institute as to who should fill that key position. It was particularly significant that the Institute provided the headmasters, for the running of the school was largely carried out by the headmasters. The brother headmaster was almost always the Director of the Institute&#8217;s community, living on the school premises. There was thus a very close connection between the relationship between the brothers and the Institute and the employment of the brothers as teachers in the school. There was also a very close connection between the brother teachers&#8217; employment in the school and the sexual abuse that they committed or must be assumed to have committed. There was no Criminal Records Bureau at the time, but the risk of sexual abuse was recognised, as demonstrated by the prohibition in the Institute&#8217;s rules on touching children. The placement of brother teachers at the school, a residential school in the precincts of which they also resided, greatly enhanced the risk of abuse by them if they had a propensity for such misconduct (paras 85-88, 91, 93)."
    ],
    "ABSTRACT": [
        "The appellant (C) appealed against a decision ([2010] EWCA Civ 1106) that the respondent Institute of the Brothers of the Christian Schools (the Institute) was not vicariously liable for alleged physical and sexual abuse perpetrated by brother teachers at a residential school for boys in need of care between 1958 and 1992.",
        "C represented the various boards of managers which had carried out the day-to-day management of the school from 1973 until its closure in 1994. The Institute was an unincorporated association of lay brothers of the Catholic Church. For the purposes of administration, the Institute was divided into districts called Provinces, each headed by a &#8220;Provincial&#8221;. At all material times, the headteacher and some other teachers at the school were supplied by the Institute. The alleged abusers included Institute brothers as well as non-Institute members of staff. C had been held to be vicariously liable for acts of abuse by the brother teachers. It now sought to challenge the finding that the Institute was not also vicariously liable."
    ],
    "FLAGS": [
        "Approved",
        "Hale"
    ],
    "COUNSEL": "For the appellant: George Leggatt QC, Nicholas Fewtrell. For the respondent: Lord Faulks QC, Alastair Hammerton.",
    "CATEGORIES": [
        "Negligence",
        "Child Sexual Abuse",
        "Denominational Schools",
        "Religious Groups",
        "Unincorporated Associations",
        "Vicarious Liability"
    ],
    "CATEGORY": "Negligence &mdash; Child Sexual Abuse &mdash; Denominational Schools &mdash; Religious Groups &mdash; Unincorporated Associations &mdash; Vicarious Liability",
    "SUMMARY": [
        "Vicarious liability attached to the Institute of the Brothers of the Christian Schools, a religious order, in respect of sexual abuse perpetrated or allegedly perpetrated by brother teachers at a residential school for boys, even though the Institute had not managed the school."
    ],
    "COURT": "UKSC",
    "CITATION": "Various Claimants v Institute of the Brothers of the Christian Schools [2012] UKSC 56",
    "NUMBER": "423",
    "YEAR": "2012"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Sanderson v Hull",
        "(wl) Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Mohamud v WM Morrison Supermarkets Plc",
        "(wl) Lister v Hesley Hall",
        "(wl) McDermid v Nash Dredging and Reclamation Co Ltd",
        "(wl) Bernard v Attorney General of Jamaica",
        "(wl) Liverpool Womens Hospital NHS Foundation Trust v Ronayne",
        "(wl) Walker v Northumberland County Council",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Williams v University of Birmingham"
    ],
    "NAME": "(wl) Cox v Ministry of Justice",
    "JUDGE": "Lord Neuberger PSC; Lady Hale DPSC; Lord Dyson JSC; Lord Reed JSC; Lord Toulson JSC",
    "CIT": "[2016] UKSC 10",
    "HELD": [
        "Appeal dismissed.",
        "(1) The Christian Brothers approach extended the scope of vicarious liability beyond an employer&#8217;s responsibility for the acts of its employees, but did not impose liability where a tortfeasor&#8217;s activities were entirely attributable to an independent business. The defendant did not have to carry on commercial activities, nor did it need to derive a profit from the tortfeasor&#8217;s activities. It was sufficient that there was a defendant carrying on activities in furtherance of its own interests. Defendants could not avoid liability by technical arguments about the employment status of the tortfeasor, Christian Brothers explained, Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd [2005] EWCA Civ 1151, [2006] Q.B. 510 and E v English Province of Our Lady of Charity [2012] EWCA Civ 938, [2013] Q.B. 722 applied (see paras 29-31 of judgment).",
        "(2) The Christian Brothers requirements were met and the ministry was vicariously liable, Christian Brothers applied. The Prison Service carried on activities in furtherance of its aims. The fact that the aims were not commercially motivated, but served the public interest, was no bar to imposing vicarious liability. Prisoners working in the kitchens were integrated into the operation of the prison, so that the activities assigned to them by the Prison Service formed an integral part of the activities it carried on, in particular the activity of providing meals for prisoners. The prisoners were placed in a position where there was a risk that they could commit a variety of negligent acts within the field of activities assigned to them. Further, they worked under the direction of prison staff. C had been injured as a result of negligence by the prisoner in carrying on the activities assigned to him (para.32). The fact that setting prisoners to work was one means by which the Prison Service sought to rehabilitate prisoners did not alter that conclusion. Rehabilitation was not the only objective: the Prison Service also intended that prisoners should contribute to the cost of their upkeep by providing services. The prisoners&#8217; activities formed part of the operation of the prison and were of benefit to the Prison Service itself. It was not essential to the imposition of vicarious liability that the defendant should seek to make a profit. Nor did it depend on alignment of the objectives of the defendant and the tortfeasor. The fact that prisoners were required to serve part of their sentence in prison and to undertake work there for nominal wages, bound them into a closer relationship with the Prison Service than would be the case for an employee. The fact that payments were below commercial level reflected the context in which prisoners worked, but did not mean that vicarious liability should not be imposed. Payment of a wage was not essential, Christian Brothers applied. The fact that prison operators were under a statutory duty to provide prisoners with useful work was not incompatible with vicarious liability. The Christian Brothers criteria were designed to ensure that vicarious liability was imposed where it was fair, just and reasonable to do so; where the criteria were satisfied, it would not generally be necessary to reassess the fairness of the result. However, where a case concerned circumstances which had not previously been the subject of authoritative judicial decision, it could be valuable to consider fairness. The instant appeal was such a case; however, for the Prison Service to be liable to compensate for negligence by the prison catering team appeared just and reasonable whether the tortfeasor was a civilian or a prisoner. The court rejected arguments based on the risk of further claims being brought (paras 34-45)."
    ],
    "ABSTRACT": [
        "The Ministry of Justice appealed against a decision ([2014] EWCA Civ 132, [2015] Q.B. 107) that it was vicariously liable for injury caused to the respondent (C) by the negligent act of a prisoner undertaking paid kitchen work.",
        "C had been a catering manager at a prison. Prisons were required by statute to ensure that prisoners did useful work. The prisoner responsible for the injury had earned a nominal wage. The Court of Appeal, applying the criteria listed in Various Claimants v Institute of the Brothers of the Christian Schools [2012] UKSC 56, [2013] 2 A.C. 1 ( Christian Brothers ) for imposing vicarious liability where a relationship was other than one of employment, held the Prison Service, and therefore the ministry, vicariously liable.",
        "The ministry argued that the relationship between the Prison Service and prisoners was fundamentally different from an employer/employee relationship in that the Prison Service&#8217;s primary purpose was not a business or profit, but prisoners&#8217; rehabilitation, and prisoners had no interest in furthering the Prison Service&#8217;s objectives; it was always necessary to ask whether it would be fair, just and reasonable to impose vicarious liability; and there was a risk of further claims arising should vicarious liability be imposed."
    ],
    "FLAGS": [
        "Approved",
        "Hale",
        "Neuberger"
    ],
    "COUNSEL": "For the appellant: James Eadie QC, Kate Grange, Stephen Kosmin. For the respondent: Robert Weir QC, Robert O&#8217;Leary.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Personal Injury",
        "Employers' Liability",
        "Ministry of Justice",
        "Prisoners",
        "Prison Service",
        "Vicarious Liability"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Personal Injury &mdash; Employers' Liability &mdash; Ministry of Justice &mdash; Prisoners &mdash; Prison Service &mdash; Vicarious Liability",
    "SUMMARY": [
        "The Supreme Court considered the approach to be adopted in deciding whether a relationship other than one of employment can give rise to vicarious liability, in a judgment complementary to its judgment in Mohamud v Wm Morrison Supermarkets Plc [2016] UKSC 11, [2016] 2 W.L.R. 821. The Ministry of Justice was vicariously liable for injury caused by a negligent act of a prisoner undertaking paid kitchen work."
    ],
    "COURT": "UKSC",
    "CITATION": "Cox v Ministry of Justice [2016] UKSC 10",
    "NUMBER": "424",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Coltman v Bibby Takers Ltd",
        "(wl) Revill v Newbery",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Lister v Hesley Hall",
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Walker v Northumberland County Council",
        "(wl) Pitts v Hunt",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Vellino v Chief Constable of Greater Manchester"
    ],
    "NAME": "(wl) Smith v Stages",
    "JUDGE": "Lord Keith of Kinkel; Lord Brandon of Oakbrook; Lord Griffiths; Lord Goff of Chieveley; Lord Lowry",
    "CIT": "[1989] AC 928",
    "HELD": [
        "that they were acting in the course of their employment, and accordingly the employer was liable for S&#8217;s negligence ( St Helens Colliery Co Ltd v Hewitson [1924] A.C. 59 applied. In determining whether an employee was acting in the course of his employment when travelling on the highway the material question was whether he was going about his employer&#8217;s business at the material time. The following general propositions for journeys to and from work were put forward by the court: (1) When an employee was travelling between his ordinary residence and work by any means of transport whether or not provided by his employer he was not acting in the course of his employment unless contractually obliged to do so. (2) Travelling between workplaces was in the course of employment. (3) When an employee was paid for travelling in his employer&#8217;s time the fact that the employee could choose the time and mode of transport did not take the journey out of the course of his employment. (4) When an employee was travelling from his ordinary residence to an unusual place of work or to an emergency the employee would be acting in the course of his employment. (5) A deviation or interruption of a journey would for that time take an employee out of the course of his employment."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1989",
    "CATEGORIES": [
        "Negligence",
        "Employers' Liability",
        "Employment",
        "Personal Injury",
        "Transport"
    ],
    "CATEGORY": "Negligence &mdash; Employers' Liability &mdash; Employment &mdash; Personal Injury &mdash; Transport",
    "SUMMARY": [
        "Vicarious liability; course of employment; travel",
        "An employee who is paid for travelling from his residence to the site of work is not taken outside the course of his employment by virtue of having a discretion as to mode of travel. S and M were instructed by their employer to do a week&#8217;s work in a distant part of the country. They were paid travelling expenses, and for travelling time. The job finished early on a Monday morning, and they were paid for sleeping time, being expected to report for work on the Wednesday morning. In fact they set off on the return journey immediately in S&#8217;s car, and were later involved in a collision in which M suffered serious injury. M, and later his widow, sued S, and the employer on the basis that S and M were acting within the course of their employment on the return journey."
    ],
    "COURT": "UKHL",
    "CITATION": "Smith v Stages [1989] AC 928",
    "NUMBER": "425"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Various Claimants v Institute of the Brothers of the Christian Schools",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) W v Essex County Council and Another",
        "(wl) Cox v Ministry of Justice",
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Mohamud v WM Morrison Supermarkets Plc",
        "(wl) Smith v Stages",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Transco Plc v Stockport MBC"
    ],
    "NAME": "(wl) Lister v Hesley Hall",
    "JUDGE": "Lord Steyn; Lord Clyde; Lord Hutton; Lord Hobhouse of Woodborough; Lord Millett",
    "CIT": "[2001] UKHL 22",
    "HELD": [
        "allowing the appeal, that the line of authority relating to vicarious liability for intentional torts as exemplified by Morris v CW Martin &amp; Sons Ltd [1966] 1 Q.B. 716 was of general application and was not restricted to bailment cases, T v North Yorkshire CC overruled. When applying the test laid down in Salmond and Heutson on Torts, 21st edition (1996) p.443 in respect of whether a wrongful act was outside the scope of employment, the Court of Appeal in T v North Yorkshire CC had wrongly categorised the sexual assaults which took place as far removed from an unauthorised mode of carrying out a teacher&#8217;s duty and failed to acknowledge the close connection between the employment and the tort, Bazley v Curry (1999) 174 D.L.R. (4th) 45 and Jacobi v Griffiths (1999) 174 D.L.R. (4th) 71 considered. In applying the Salmond test it was crucial to focus on the right act of the employee and its connection with the tortious act Rose v Plenty [1976] 1 W.L.R. 141 considered. The court must not simply consider whether the acts of sexual abuse were modes of doing an authorised act but must also consider whether there existed a close connection between the tort and the employee&#8217;s duties. In the instant case, HH had undertaken to care for the resident children and had entrusted that obligation to D. D&#8217;s torts were so closely connected with his employment that it would be fair and just to hold HH vicariously liable."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For L: Richard Maxwell Q.C. and Rosalind Coe. For H: Andrew Collender Q.C. and Andrew Miller.",
    "CATEGORIES": [
        "Torts",
        "Employers' Liability",
        "Negligence",
        "Residential Care",
        "Sexual Abuse",
        "Vicarious Liability"
    ],
    "CATEGORY": "Torts &mdash; Employers' Liability &mdash; Negligence &mdash; Residential Care &mdash; Sexual Abuse &mdash; Vicarious Liability",
    "SUMMARY": [
        "A warden&#8217;s tortious acts in sexually abusing children in his care were so closely connected with his employment as to warrant the imposition of vicarious liability on his employer, T v North Yorkshire CC [1999] I.R.L.R. 98 overruled.",
        "T, who had been subjected to sexual abuse by D, the warden of a residential home, appealed against a decision (Times, October 13, 1999) that the owner of the home, HH, was not vicariously liable for the tortious acts of D, its employee and the home&#8217;s warden, in sexually abusing children in his care. The matter had proceeded before the Court of Appeal, upon the basis that HH was liable for D&#8217;s failure to report the risk of or actual harm caused to the children since, bound by the decision in T v North Yorkshire CC [1999] I.R.L.R. 98 , it had not been open to the court to consider whether HH had been vicariously liable for the actual abuse. T challenged the validity of the decision in T v North Yorkshire CC submitting that employers might be vicariously liable for the sexual torts of an employee even though the sexual abuse could not be considered as an unauthorised mode of carrying out an authorised act."
    ],
    "COURT": "UKHL",
    "CITATION": "Lister v Hesley Hall [2001] UKHL 22",
    "NUMBER": "426",
    "YEAR": "2001"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Allen v Chief Constable of Hampshire",
        "(wl) Barker v Corus (UK)",
        "(wl) Attorney General of the British Virgin Islands v Hartwell",
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Osman v Ferguson",
        "(wl) Smith v Stages",
        "(wl) Poppleton v Trustees of the Portsmouth Youth Activities Committee",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Biffa Waste Services Ltd v Maschinenfabrik Ernst Hese GmbH",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd"
    ],
    "NAME": "(wl) Bernard v Attorney General of Jamaica",
    "JUDGE": "Lord Bingham of Cornhill; Lord Steyn; Lord Millett; Lord Scott of Foscote; Lord Carswell",
    "CIT": "[2004] UKPC 47",
    "HELD": [
        "allowing the appeal, that an employer could be vicariously liable notwithstanding that the employee was acting exclusively for his or her own benefit. It was necessary to consider whether the unlawful shooting was so closely connected with the officer&#8217;s employment that it would be fair and just to hold the Attorney General vicariously liable, Lister v Hesley Hall Ltd [2001] UKHL 22, [2002] 1 A.C. 215 applied and Dubai Aluminium Co Ltd v Salaam [2002] UKHL 48, [2003] 2 A.C. 366 applied. It was of prime importance that the shooting followed immediately upon the announcement by the officer that he was a policeman, which was probably calculated to create the impression that he was acting on police business. The subsequent arrest of B showed that the officer considered that B had interfered with the execution of his duties as a police officer. Moreover, the creation of the risk inherent in giving the officer a revolver for use at home reinforced the conclusion that vicarious liability was established."
    ],
    "FLAGS": [
        "Approved",
        "Bingham"
    ],
    "COUNSEL": "For the appellant: Lord Gifford QC, Clare Gordon. For the respondent: Michael Hylton QC, Curtis Cochrane (Jamaica Bar).",
    "CATEGORIES": [
        "Torts Other Related Subjects: Police",
        "Employment",
        "Jamaica",
        "Police Officers",
        "Risk",
        "Vicarious Liability"
    ],
    "CATEGORY": "Torts Other Related Subjects: Police &mdash; Employment &mdash; Jamaica &mdash; Police Officers &mdash; Risk &mdash; Vicarious Liability",
    "SUMMARY": [
        "In determining whether the Attorney General of Jamaica was vicariously liable for the conduct of a police constable, a relevant factor was the risks to others created by an employer who entrusted duties, tasks and functions to an employee.",
        "The appellant (B) appealed against a decision of the Court of Appeal of Jamaica that the Attorney General was not vicariously liable for the unlawful shooting of B by a police officer. B had been using a public telephone when an off duty officer announced &#8220;police&#8221; and demanded the phone. When B refused the officer shot him. The Attorney General denied that the officer was acting in the course of his employment or for his employer&#8217;s benefit. B submitted that the contrary was true as a police officer was duty bound to preserve the peace on behalf of his employer at all times, that he had asserted his authority as a police officer and it did not matter whether he had done so in furtherance of his duty as a police officer. Furthermore, the officer had shot B using a revolver that his employer had given him and which he was permitted to carry when off duty, and the officer had subsequently arrested B and charged him with an offence, thereby asserting that at the time of the offence he was acting in the execution of his duty as a police officer."
    ],
    "COURT": "UKPC",
    "CITATION": "Bernard v Attorney General of Jamaica [2004] UKPC 47",
    "NUMBER": "427",
    "YEAR": "2004"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Joyce v O'Brien",
        "(wl) Walker v Northumberland County Council",
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Orchard v Lee",
        "(wl) Lister v Hesley Hall",
        "(wl) St Helens Smelting Co v Tipping",
        "(wl) Jolley v Sutton LBC",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Attorney General of the British Virgin Islands v Hartwell"
    ],
    "NAME": "(wl) Ministry of Defence v Radclyffe",
    "JUDGE": "Sir Anthony May PQBD; Hooper LJ; Sullivan LJ",
    "CIT": "[2009] EWCA Civ 635",
    "HELD": [
        "Appeal dismissed.",
        "(1) Although the officers and men were off duty at the lake, rank and military discipline remained relevant. J could not order the men to jump but he could order them not to jump. The swimming trips between organised adventure training were obviously and on the evidence subject to military discipline. (2) J owed R and the soldiers a duty of care when they were at the lake. He was the officer in charge of them in Germany, and in the context of the swimming party it was fair, just and reasonable to ascribe to him a duty to take reasonable care to guard his subordinates against the foreseeable risk of injury, if they jumped from the bridge into the lake. By his own presence there in the circumstances that pertained and by reason of his rank, he assumed responsibility to prevent them from taking undue risks of which he was or ought to have been aware. The soldiers asked him if they might jump. That predicated reliance sufficient for a duty of care. The MOD was not the occupier of the lake, Tomlinson v Congleton BC [2003] UKHL 47, [2004] 1 A.C. 46 distinguished. The relationship between MOD and R was that of employer and employee and the MOD, through J, assumed responsibility for R&#8217;s safety, Poppleton v Trustees of the Portsmouth Youth Activities Committee [2008] EWCA Civ 646, [2009] P.I.Q.R. P1 considered. (3) The fact that J owed R and the men a duty of care indicated that he was acting in the course of his employment and that the MOD was vicariously liable for his breach of duty. J&#8217;s job included taking charge of junior officers and men and taking reasonable care for their safety. That extended to doing so on off duty occasions, such as the swimming party, to which the military relationship extended. There was a sufficient connection between J&#8217;s employment as an army officer and his breach of duty, Lister v Hesley Hall Ltd [2001] UKHL 22, [2002] 1 A.C. 215 followed. (4) J was in breach of his duty of care. It was obviously dangerous to jump from the bridge. He should not have encouraged R to jump but should have ordered him and his men not to do so. (5) The judge was entitled to find that R&#8217;s decision to jump was causatively influenced by the pressure deriving from what J had said and done on the previous day. (6) The judge was entitled to assess R&#8217;s contributory negligence at 40 per cent."
    ],
    "ABSTRACT": [
        "The appellant Ministry of Defence appealed against a decision that it was vicariously liable for the negligence of an army captain (J) which resulted in the respondent (R) suffering personal injury.",
        "R was a second lieutenant. His unit had spent three months in Iraq. He then went with a group of men on an adventure training exercise in Germany. J was in charge of the group. On a day when there was no adventure training members of the group went to a lake to swim. J allowed a number of soldiers to jump into the lake from a bridge. The height of the jump was about 20 metres. J indicated that he and R should also jump and they did. The following day R and others went swimming in the lake again. R allowed two soldiers to make the jump from the bridge. R went first but was badly and permanently injured after he entered the water with his legs bent. R&#8217;s case was that J was negligent in giving permission for or encouraging the men to jump and that the jump in which R was injured followed from and was caused by what J had said and done on the previous day. The MOD&#8217;s case was that R was off duty at the material times; what J did on the previous day was outside the course of his employment; no duty of care was owed to R who acted of his own volition and at his own risk. The judge held that J had been acting in the course of his employment; he owed the men under his command including R a duty of care; J was negligent in giving permission to jump; R would not have jumped and been injured if J had not given permission to the men and indicated that R should jump on the previous day; R&#8217;s contributory negligence was assessed at 40 per cent."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Tania Griffiths QC. For the respondent: Nicholas Braslavsky QC, Michael Rawlinson QC.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Negligence",
        "Armed Forces",
        "Employment",
        "Army",
        "Assumption of Responsibility",
        "Causation",
        "Contributory Negligence",
        "Duty of Care",
        "Employers' Liability",
        "Vicarious Liability"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Negligence &mdash; Armed Forces &mdash; Employment &mdash; Army &mdash; Assumption of Responsibility &mdash; Causation &mdash; Contributory Negligence &mdash; Duty of Care &mdash; Employers' Liability &mdash; Vicarious Liability",
    "SUMMARY": [
        "The Ministry of Defence was vicariously liable for the negligence of an army captain who owed a duty of care to junior officers and men in an off duty situation and whose breach of duty resulted in a second lieutenant suffering personal injury."
    ],
    "COURT": "EWCA",
    "CITATION": "Ministry of Defence v Radclyffe [2009] EWCA Civ 635",
    "NUMBER": "428",
    "YEAR": "2009"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Various Claimants v Institute of the Brothers of the Christian Schools",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Lister v Hesley Hall",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) JGE v English Province of Our Lady of Charity",
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) Attorney General of the British Virgin Islands v Hartwell",
        "(wl) Caparo Industries Plc v Dickman"
    ],
    "NAME": "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
    "JUDGE": "Lord Neuberger MR; Longmore LJ; Smith LJ",
    "CIT": "[2010] EWCA Civ 256",
    "HELD": [
        "Appeal allowed, cross-appeal dismissed.",
        "There were a number of factors which, taken together, showed that there was a sufficiently close connection between C&#8217;s employment as priest at the church and the abuse which he had inflicted on M to render it fair and just to impose vicarious liability for the abuse on his employer, namely the archdiocese, Lister v Hesley Hall Ltd [2001] UKHL 22, [2002] 1 A.C. 215 applied. First, C was normally dressed in clerical garb and was so dressed when he first met M. At the very least, that factor set the scene. A priest had a special role, which involved trust and responsibility in a more general way even than a teacher, a doctor or a nurse. It was C&#8217;s employment as a priest by the archdiocese which enabled him, indeed was intended to enable him, to hold himself out as having such a role and such authority. Second, C&#8217;s functions as a priest included a duty to evangelise or to bring the gospel to other people. Accordingly, he was ostensibly performing his duty as a priest employed by the archdiocese by getting to know M. Third, given that M was aged 12 or 13 when his association with C started, it was significant that C was given a special responsibility for youth work at the church. It underlined the point that, when getting to know and effectively &#8220;grooming&#8221; M, C was ostensibly carrying out one of his specifically assigned functions in the church. Fourth, C was able to develop his relationship with M by inviting him to a disco which was on church premises and which he organised as a priest at the church. Thus, M had been drawn into the relationship through the medium of a church-organised function carried on in church premises by C, a priest at the church. Fifth, the relationship was further developed when C got M to clear up after discos. That work, on church premises at the request of a priest at the church, led M to do other work for C. Thus, C&#8217;s role as priest in the archdiocese gave him the status and opportunity to draw M further into his sexually abusive orbit by ostensibly respectable means connected with his employment as a priest at the church. Sixth, the fact that M was working at the request of a priest on premises, namely the presbytery, owned by the priest&#8217;s archdiocese, adjoining the church where the priest worked, and which were lived in by the priest, was relevant to the issue of vicarious liability for the first three reasons mentioned above, namely moral authority, evangelisation and youth work. Seventh, the opportunity to spend time alone with M, especially in the presbytery, had arisen from C&#8217;s role as a priest employed as such by the archdiocese, Jacobi v Griffiths (1999) 174 D.L.R. (4th) 71 and Bazley v Curry (1999) 174 D.L.R. (4th) 45 considered."
    ],
    "ABSTRACT": [
        "The appellant (M) appealed against a decision ([2009] EWHC 780 (QB)) dismissing his claim against the respondent archdiocese for damages for sexual abuse to which he claimed to have been subjected when he was 12 or 13. The archdiocese cross-appealed.",
        "The judge had found that M had been sexually abused on many occasions by a Catholic priest (C); that his relationship with C had started while he was admiring C&#8217;s car; that C had invited him to attend the church disco, which he did on a number of occasions; that the discos were open to all young people in the area, whether or not they were Roman Catholics (M was not); that C had paid him for cleaning his car and doing small jobs in the presbytery; that C had not involved him in the activities of the church itself but instead had cultivated him for the purpose of sexual abuse; and that most of the abuse had occurred in the presbytery. The judge concluded, however, that the archdiocese was not vicariously liable for the sexual abuse perpetrated by C.",
        "M argued that, irrespective of whether the archdiocese had acted in a blameworthy way, it was responsible for the wrongful acts complained of."
    ],
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "COUNSEL": "For the appellant: Elizabeth-Anne Gumbel QC, Justin Levinson. For the respondent: Edward Faulks QC, Nicholas Fewtrell.",
    "CATEGORIES": [
        "Negligence",
        "Child Sexual Abuse",
        "Clergy",
        "Duty of Care",
        "Vicarious Liability"
    ],
    "CATEGORY": "Negligence &mdash; Child Sexual Abuse &mdash; Clergy &mdash; Duty of Care &mdash; Vicarious Liability",
    "SUMMARY": [
        "A priest&#8217;s sexual abuse of the claimant had been so closely connected with his employment as a priest that it would be fair and just to hold the archdiocese which had employed him vicariously liable for that abuse."
    ],
    "COURT": "EWCA",
    "CITATION": "Maga v Birmingham Roman Catholic Archdiocese Trustees [2010] EWCA Civ 256",
    "NUMBER": "429",
    "YEAR": "2010"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Bernard v Attorney General of Jamaica",
        "(wl) Attorney General of the British Virgin Islands v Hartwell",
        "(wl) Cox v Ministry of Justice",
        "(wl) Osman v Ferguson",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) White v Chief Constable of South Yorkshire",
        "(wl) Lister v Hesley Hall",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Khoransandjian v Bush"
    ],
    "NAME": "(wl) Allen v Chief Constable of Hampshire",
    "JUDGE": "Lord Dyson MR; Gross LJ; Ryder LJ",
    "CIT": "[2013] EWCA Civ 967",
    "HELD": [
        "Appeal dismissed.",
        "(1) C&#8217;s claim for vicarious liability had no realistic prospect of success and the court below was right to strike it out. The criteria to be satisfied for establishing vicarious liability involved a two-stage approach. First, there must be a relationship between the individual tortfeasor and the party said to be vicariously liable capable of triggering the doctrine. Second, the tort committed must be sufficiently connected with that relationship, Various Claimants v Institute of the Brothers of the Christian Schools [2012] UKSC 56, [2013] 2 A.C. 1 applied. It was common ground that R was a serving police officer of the chief constable&#8217;s constabulary and that relationship was therefore capable of giving rise to vicarious liability. The first stage of the criteria was therefore satisfied. It was also true that claims asserting vicarious liability were fact sensitive and, in general, might not lend themselves to determination at a preliminary stage. It did not follow however that in all cases where vicarious liability was alleged a strike out might not be appropriate. In respect of the second stage of the criteria, taken at their highest, the pleaded facts did not reveal any, let alone a close, connection between the acts alleged and R&#8217;s position as a police officer. Given that the letters were anonymous they self evidently could not have purported to have come from a police officer. With regard to the telephone calls, the allegations in no way established that R was acting or was purporting to act as a police officer and accordingly they did not begin to establish a sufficient connection. Again, in relation to the acts of arson and criminal damage, even assuming that R was responsible, whether solely or with others, there was nothing whatsoever to connect those acts with the purported performance of police duties or functions. Were the issue to go to trial, there was therefore no realistic prospect of C making good the second stage of the criteria or bringing the claim within s.88. C&#8217;s claim, if proved, revealed R pursuing a personal vendetta or frolic of her own and that plainly would not do for the purposes of establishing vicarious liability, Weir v Bettison [2003] EWCA Civ 111, [2003] I.C.R. 708 and N v Chief Constable of Merseyside [2006] EWHC 3041 (QB), [2006] Po. L.R. 160 considered (see paras 28-35 of judgment). (2) Article 3 gave rise to an obligation on the part of the State to conduct an effective investigation into allegations that treatment amounted to violation of a person&#8217;s rights. The scope of those obligations would differ greatly depending on whether the violation was inflicted by agents of the State or, at the other end of the scale, private individuals, as in the instant case. A criminal investigation and disciplinary proceedings had been taken against R; the outcome of those was irrelevant for present purposes. The chief constable&#8217;s investigative obligations had been satisfied by the legal mechanisms available to C and the court below had been right to strike out C&#8217;s claim based upon art.3 (paras 47-54)."
    ],
    "ABSTRACT": [
        "The appellant (C) appealed against a decision striking out her claim against the respondent chief constable for torts alleged to have been carried out by a serving police officer (R).",
        "C alleged that after she commenced a relationship with another police officer, R had begun a campaign of harassment against her. The alleged complaints included the receipt of abusive anonymous letters, telephone calls made by R suggesting C move out of the area, an arson attack on C&#8217;s home and criminal damage to her car. C reported the arson and R&#8217;s alleged involvement and a criminal investigation was referred to the CPS, who ultimately decided not to prosecute R. Further, a disciplinary investigation against R was discontinued upon the basis of no evidence to support misconduct. C claimed that the chief constable was vicariously liable for the acts of R by virtue of the Police Act 1996 s.88 and that the inadequate investigation into R&#8217;s wrongdoing breached the State&#8217;s investigative duties under the European Convention on Human Rights 1950 art.3. C&#8217;s claim was struck out on both grounds."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellants: Karon Monaghan QC, Helen Law. For the respondent: Samantha Leek QC, Cicely Hayward.",
    "CATEGORIES": [
        "Torts Other Related Subjects: Police",
        "Harassment",
        "Police Officers",
        "Vicarious Liability"
    ],
    "CATEGORY": "Torts Other Related Subjects: Police &mdash; Harassment &mdash; Police Officers &mdash; Vicarious Liability",
    "SUMMARY": [
        "A chief constable was not vicariously liable for the alleged tortious acts of a police officer as the facts did not reveal any, let alone a close, connection between the alleged acts and the tortfeasor&#8217;s position as a police officer."
    ],
    "COURT": "EWCA",
    "CITATION": "Allen v Chief Constable of Hampshire [2013] EWCA Civ 967",
    "NUMBER": "430",
    "YEAR": "2013"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Lister v Hesley Hall",
        "(wl) Cox v Ministry of Justice",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd",
        "(wl) Attorney General of the British Virgin Islands v Hartwell",
        "(wl) Biffa Waste Services Ltd v Maschinenfabrik Ernst Hese GmbH",
        "(wl) JGE v English Province of Our Lady of Charity",
        "(wl) Co-operative Group Ltd v Pritchard",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Coltman v Bibby Takers Ltd",
        "(wl) Smith v Stages"
    ],
    "NAME": "(wl) Mohamud v WM Morrison Supermarkets Plc",
    "JUDGE": "Lord Neuberger PSC; Lady Hale DPSC; Lord Dyson JSC; Lord Reed JSC; Lord Toulson JSC",
    "CIT": "[2016] UKSC 11",
    "HELD": [
        "Appeal allowed.",
        "(1) After reviewing the development of the doctrine of vicarious liability, the court indicated that the &#8220;close connection&#8221; test adumbrated in Lister v Hesley Hall Ltd [2001] UKHL 22, [2002] 1 A.C. 215 and Dubai Aluminium Co Ltd v Salaam [2002] UKHL 48, [2003] 2 A.C. 366 had been followed in a line of cases, including several at the highest level. There was a risk in attempting to lay down criteria for determining what precisely amounted to a sufficiently close connection to make it just for an employer to be held vicariously liable. A simplification of the essence was more desirable, and in its simplest terms, two matters had to be considered: (a) what functions had been entrusted by the employer to the employee (which had to be addressed broadly); and (b) whether there was sufficient connection between the employee&#8217;s wrongful conduct and the position in which he was employed to make it right for the employer to be fixed with vicarious liability. The cases in which the necessary connection had been found to exist were those in which the employee had used or misused his position in a way which injured the third party, Lloyd v Grace Smith &amp; Co [1912] A.C. 716, Pettersson v Royal Oak Hotel [1948] N.Z.L.R. 136 and Warren v Henlys Ltd [1948] 2 All E.R. 935 considered. There was nothing wrong with the close connection test as such and the law would not be improved by a change of vocabulary, Lister and Dubai Aluminium followed (see paras 42- 46 of judgment). The test should only be abrogated or refined if a demonstrably better test could be devised. However, the proposed &#8220;representative capacity&#8221; test was hopelessly vague. Moreover, while the instant court had suggested in Various Claimants v Institute of the Brothers of the Christian Schools [2012] UKSC 56, [2013] 2 A.C. 1 that the law of vicarious liability was on the move, such change was a response to changes in the legal relationships between enterprises and members of their workforces, Christian Brothers referred to. There had been no changes in societal conditions requiring a change in the law governing the circumstances in which an employer should be held vicariously liable for the torts of an employee (paras 53-55).",
        "(2) It was K&#8217;s job to attend to customers and respond to their inquiries. His conduct in answering the claimant&#8217;s request in a foul-mouthed way and ordering him to leave was inexcusable but was within the field of activities assigned to him. What happened thereafter was an unbroken sequence of events. It was not right to regard K as having metaphorically taken off his uniform when he followed the customer onto the forecourt. Moreover, once on the forecourt, K had repeated his order to leave. That was not something personal between him and the customer; he was ordering him to keep away from his employer&#8217;s premises, and he reinforced that order by violence. In doing so he was purporting to act in the furtherance of his employer&#8217;s business. While it was a gross abuse of his position, it was in connection with the business in which he was employed. Since the supermarket had entrusted him with the position of serving customers it was just that it should be held responsible for his abuse of that position. Finally, it was irrelevant that it looked as if K was motivated by personal racism rather than a desire to benefit his employer&#8217;s business (paras 47-49, 57).",
        "(3) Although the claims and issues in the instant case were separate from those in Cox v Ministry of Justice [2016] UKSC 10, [2016] 2 W.L.R. 806, that and the instant judgment were intended to be complementary in their legal analysis. The instant court agreed with the reasoning and conclusion of Lord Reed in that case (para.1)."
    ],
    "ABSTRACT": [
        "A supermarket customer appealed against a decision ([2014] EWCA Civ 116) that the respondent supermarket was not vicariously liable for an assault perpetrated by one of its employees.",
        "The customer had attended a petrol station kiosk run by the supermarket and had approached one of the staff members (K) with an enquiry. K, whose job was to serve customers and see that the petrol pumps and kiosk were kept in good running order, responded with foul-mouthed abuse and ordered the customer to leave. He then followed him onto the forecourt where he told him to keep away and subjected him to a violent and unprovoked assault. The customer brought proceedings against the supermarket, claiming that it was vicariously liable for the assault. The trial judge held that it was not liable because there was no sufficiently close connection between the assault and what K was employed to do. The Court of Appeal upheld his decision, finding that while K&#8217;s employment involved interaction with customers, that was insufficient to fix the supermarket with vicarious liability for his violence: his duties did not involve him being placed in situations where there was a clear possibility of confrontation.",
        "The customer submitted that there should be a new test of vicarious liability in which the courts applied a &#8220;representative capacity&#8221; rather than a &#8220;close connection&#8221; test. He argued that the question should be whether a reasonable observer would consider the employee to be acting in the capacity of a representative of the employer at the time of committing the tort."
    ],
    "FLAGS": [
        "Approved",
        "Hale",
        "Neuberger"
    ],
    "COUNSEL": "For the appellant: Joel Donovan QC, Adam Ohringer. For the respondent: Benjamin Browne QC, Roger Harris, Isabel Barter.",
    "CATEGORIES": [
        "Torts Other Related Subjects: Employment",
        "Assault",
        "Employers' Liability",
        "Shops",
        "Vicarious Liability"
    ],
    "CATEGORY": "Torts Other Related Subjects: Employment &mdash; Assault &mdash; Employers' Liability &mdash; Shops &mdash; Vicarious Liability",
    "SUMMARY": [
        "There was nothing wrong with the &#8220;close connection&#8221; test of vicarious liability adumbrated in Lister v Hesley Hall Ltd [2001] UKHL 22, [2002] 1 A.C. 215 and the law would not be improved by a change of vocabulary. Applying that test, the employer of a petrol kiosk attendant who had subjected a customer to an unprovoked assault was liable for his actions."
    ],
    "COURT": "UKSC",
    "CITATION": "Mohamud v WM Morrison Supermarkets Plc [2016] UKSC 11",
    "NUMBER": "431",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Phipps v Rochester Corporation",
        "(wl) Barber v Somerset County Council",
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Doughty v Turner Manufacturing Co",
        "(wl) JGE v English Province of Our Lady of Charity",
        "(wl) Owens v Brimmell",
        "(wl) Waterson v Lloyd",
        "(wl) Jolley v Sutton LBC",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) JD v East Berkshire Community Health NHS Trust",
        "(wl) Orchard v Lee"
    ],
    "NAME": "(wl) Wheat v Lacon and Co Ltd",
    "JUDGE": "Lord Neuberger PSC; Lord Mance JSC; Lord Reed JSC; Lord Carnwath JSC; Lord Hodge JSC",
    "CIT": "[2016] UKSC 13",
    "HELD": [
        "Appeals allowed.",
        "(1) Part 7 of the Act was concerned with issues arising when employees were remunerated in shares and other securities. Its purposes were (a) to promote employee share ownership, particularly by encouraging share incentive schemes; (b) since such schemes required benefits to be contingent on future performance, creating a problem if tax was charged on the acquisition of the shares, to wait and see in such cases until the contingency had fallen away; and (c) to counteract consequent opportunities for tax avoidance, Grays Timber Products Ltd v Revenue and Customs Commissioners [2010] UKSC 4, [2010] 1 W.L.R. 497 followed. The background to Ch.2 supported that view: it had been enacted to address aspects of previous provisions which had left them vulnerable to avoidance or created anomalies. It was in that context that it was necessary to consider the scope of the exemption conferred by s.425(2), and more specifically whether, in s.423(1), &#8220;any contract, agreement, arrangement or condition which makes provision to which any of subsections (2) to (4) applies&#8221; referred to &#8220;provision&#8221; with a genuine business or commercial purpose. The fact that Ch.2 had been introduced partly to forestall tax avoidance schemes self-evidently made it difficult to attribute to Parliament an intention that it should apply to schemes which were carefully crafted to fall within its scope purely for the purpose of tax avoidance. Further, it was difficult to accept that Parliament could have intended to encourage by exemption from taxation the award of shares to employees where the award of the shares had no purpose other than the obtaining of the exemption, a matter which was reflected in the fact that the shares were in a company which was brought into existence merely for the purposes of the scheme. The background to the legislation indicated that the s.425(2) exemption was designed to address the problem of valuing a benefit which was, for real-world business or commercial reasons, subject to a restrictive condition involving a contingency. Nothing suggested that Parliament had intended that s.423(2) should apply to transactions having no real-world business connection. Accordingly, adopting a purposive construction, the reference in s.423(1) to &#8220;any contract, agreement, arrangement or condition which makes provision to which any of subsections (2) to (4) applies&#8221;, was to be construed as being limited to provision having a business or commercial purpose, and not to commercially irrelevant conditions whose only purpose was the obtaining of the exemption (see paras 74-78, 85 of judgment).",
        "(2) The condition in UBS&#8217;s case was arbitrary and had no business or commercial rationale beyond tax avoidance. Such a condition was not relevant to the application of s.423. The condition was to be disregarded, meaning that the shares were not restricted securities within s.423. The restrictive condition in DB&#8217;s case was equally artificial. The forfeiture provision had operated for only a short period, during which the possibility that it might be triggered lay largely within the control of the employee who would be adversely affected. It had no business or commercial purpose, Barclays Mercantile Business Finance Ltd v Mawson (Inspector of Taxes) [2004] UKHL 51, [2005] 1 A.C. 684 and Scottish Provident Institution v Inland Revenue Commissioners [2004] UKHL 52, [2004] 1 W.L.R. 3172 applied. The conditions were to be disregarded for the purpose of deciding whether the shares were restricted securities, Furniss (Inspector of Taxes) v Dawson [1984] A.C. 474 applied (paras 86-89). The employees therefore fell to be taxed in respect of their receipt of the shares in accordance with ordinary taxation principles. The shares could not be valued for income tax purposes without regard to the conditions. The conditions had reduced the shares&#8217; value on the date of acquisition by a small amount. Value had to be assessed as at the date of acquisition, taking the conditions into account (paras 90-95)."
    ],
    "ABSTRACT": [
        "HMRC appealed against a decision ([2014] EWCA Civ 452, [2014] S.T.C. 2278) that tax avoidance schemes set up by the respondent banks (UBS and DB) in order to award tax-free bonuses to employees were effective.",
        "The schemes sought to avoid their employees&#8217; income tax liability by taking advantage of the Income Tax (Earnings and Pensions) Act 2003 Pt 7 Ch.2. The banks had used the amount of the employees&#8217; bonuses to pay for redeemable shares in an offshore company set up solely for the purpose of the scheme. The shares were awarded to the employees in place of the bonuses. Conditions were attached to the shares which were intended to make them &#8220;restricted securities&#8221; within s.423(1) and so to enable them to benefit from the exemption from income tax under s.425(2). The restrictions involved a contingency which was unlikely to occur but which might conceivably do so. UBS provided that the shares in its scheme would immediately be sold if the FTSE 100 share index exceeded a certain level within a three-week period. DB provided that the shares would be forfeited if the employee&#8217;s employment was terminated within a certain period. Once the exemptions accrued, the restrictions were removed and the shares were redeemable by the employees for cash.",
        "The issue was whether the Act should be interpreted purposively and the Ramsay principle should be applied so as to disregard the conditions for the purpose of deciding whether the shares were restricted securities."
    ],
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "COUNSEL": "For the appellants: Paul Lasok QC, Richard Vallat, Anneliese Blackwood. For the first respondent: Kevin Prosser QC. For the second respondent: David Goy QC, Nicola Shaw QC.",
    "CATEGORIES": [
        "Tax",
        "Employment-Related Securities",
        "Income Tax",
        "Purposive Interpretation",
        "Ramsay Principle",
        "Restricted Shares",
        "Tax Avoidance"
    ],
    "CATEGORY": "Tax &mdash; Employment-Related Securities &mdash; Income Tax &mdash; Purposive Interpretation &mdash; Ramsay Principle &mdash; Restricted Shares &mdash; Tax Avoidance",
    "SUMMARY": [
        "Where the Income Tax (Earnings and Pensions) Act 2003 s.423(1), which defined which employment-related securities were &#8220;restricted securities&#8221; attracting an exemption from income tax on acquisition, referred to &#8220;any contract, agreement, arrangement or condition which makes provision to which any of subsections (2) to (4) applies&#8221;, that was to be construed as being limited to provision having a business or commercial purpose, and not to commercially irrelevant conditions whose only purpose was the obtaining of the exemption."
    ],
    "COURT": "UKSC",
    "CITATION": "Wheat v Lacon and Co Ltd [2016] UKSC 13",
    "NUMBER": "432",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Butcher v Southend-on-Sea BC",
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Barber v Somerset County Council",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Hufton v Somerset CC",
        "(wl) Selwood v Durham CC",
        "(wl) Jolley v Sutton LBC",
        "(wl) Keown v Coventry Healthcare NHS Trust",
        "(wl) Maguire v Sefton MBC"
    ],
    "NAME": "(wl) Harvey v Plymouth City Council",
    "JUDGE": "Longmore LJ; Carnwath LJ; Hughes LJ",
    "CIT": "[2010] EWCA Civ 860",
    "HELD": [
        "Appeal allowed.",
        "The duty under s.1(2) of the Act was to make premises reasonably safe for use for the purposes for which the visitor was invited or permitted by the occupier to be there and did not extend beyond the scope of activities for which the licence had been expressly or impliedly given, Hillen v ICI (Alkali) Ltd [1936] A.C. 65 and Tomlinson v Congleton BC [2003] UKHL 47, [2004] 1 A.C. 46 followed. In the instant case, even if H&#8217;s conduct might have been foreseen by the local authority, foreseeability was not the relevant test. In deciding whether H was a licensee, the question was not whether his activity or similar activities might have been foreseen, but whether they had been impliedly consented to by the local authority. There was no evidence to support such a finding. When a local authority licensed the public to use its land for recreational purposes, it was consenting to normal recreational activities, carrying normal risks. An implied licence for general recreational activity could not be stretched to cover any form of activity, however reckless. The judge&#8217;s conclusion, that at the time of the accident H was a &#8220;visitor&#8221; for the purposes of the Act, was therefore wrong. The local authority&#8217;s implied licence had not extended to what H was doing on its land and did not found liability under the Act."
    ],
    "ABSTRACT": [
        "The appellant local authority appealed against a decision that it was liable for personal injury sustained by the respondent (H) on its land.",
        "H, when aged 21, had been out one evening drinking alcohol with friends. After leaving a taxi and running away to escape paying the fare, he had entered land owned by the local authority and fallen down a sheer drop onto an adjacent car parking area attached to a superstore. The land consisted of an area of grass bounded by shrubs and trees with a chain link fence next to the drop, which had been lowered to 14 inches above ground level at the place where H fell. H suffered serious injuries in the fall, including brain damage, and consequently sought damages from the local authority on the basis that it had been reasonably foreseeable that youths might fool around on that area of land, perhaps while under the influence of alcohol, and that he had therefore been an implied licensee who was owed a duty of care under the Occupiers&#8217; Liability Act 1957. The judge found that H had entered the land in youthful high spirits and not with dishonest intent, and that such conduct, although not the detail of it, could and should have been foreseen by the local authority and that it should have taken steps to ensure that when on the land H was protected from the risk of serious injury by operating a system of inspection and maintenance of the chain fence to ensure visitors were not at risk of falling over the edge. The judge was therefore satisfied that H was the local authority&#8217;s visitor in law and that it was in breach of its common law duty to him by not securely fencing the edge, although he assessed H&#8217;s contributory negligence at 75 per cent.",
        "The local authority contended that even if there was some form of licence for general recreational use of the land, it had not extended to H&#8217;s activity in running wildly, under the influence of alcohol, to escape a lawful obligation to pay a taxi fare, at night and in a way reckless as to his own safety."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Edward Faulks QC, Catherine Brown. For the respondent: Stephen Killalea QC, Robert Hunter.",
    "CATEGORIES": [
        "Torts Other Related Subjects: Personal Injury",
        "Local Government",
        "Breach of Duty of Care",
        "Foreseeability",
        "Implied Licences",
        "Local Authorities' Liabilities",
        "Occupiers' Liability",
        "Personal Injury",
        "Visitors"
    ],
    "CATEGORY": "Torts Other Related Subjects: Personal Injury &mdash; Local Government &mdash; Breach of Duty of Care &mdash; Foreseeability &mdash; Implied Licences &mdash; Local Authorities' Liabilities &mdash; Occupiers' Liability &mdash; Personal Injury &mdash; Visitors",
    "SUMMARY": [
        "When a local authority licensed the public to use its land for recreational purposes, it was consenting to normal recreational activities, carrying normal risks, and its duty as occupier to an implied licensee could not be stretched to cover any form of activity, however reckless."
    ],
    "COURT": "EWCA",
    "CITATION": "Harvey v Plymouth City Council [2010] EWCA Civ 860",
    "NUMBER": "433",
    "YEAR": "2010"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Butcher v Southend-on-Sea BC",
        "(wl) Hufton v Somerset CC",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Dorset Yacht Co Ltd v Home Office",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Maguire v Sefton MBC",
        "(wl) Sanderson v Hull",
        "(wl) Barker v Corus (UK)",
        "(wl) Platt v Liverpool City Council",
        "(wl) Williams v University of Birmingham",
        "(wl) Joyce v O'Brien"
    ],
    "NAME": "(wl) Tedstone v Bourne Leisure Ltd",
    "JUDGE": "May LJ; Moore-Bick LJ; Richards LJ",
    "CIT": "[2008] EWCA Civ 654",
    "HELD": [
        "Appeal allowed.",
        "The accident had occurred in a place where water had not gathered before and there was evidence to show that water had not been present five minutes before the accident. Water of the volume described came from an unusual spillage from the jacuzzi which must have happened a minute or two before the accident. On the facts, no reasonable system would have dealt with the unusual occurrence in the time available, Ward v Tesco Stores Ltd [1976] 1 W.L.R. 810 distinguished. It was clear from the evidence that the accident had not occurred for want of due care on B&#8217;s part."
    ],
    "ABSTRACT": [
        "The appellant hotel (B) appealed against a decision that it was liable under the Occupiers&#8217; Liability Act 1957 for injuries caused to the respondent (T).",
        "T had been injured when she slipped on a pool of water in the vicinity of a jacuzzi situated at the end of a swimming pool on B&#8217;s premises. At trial evidence was given that the area was clear of water five minutes before the accident. Documentary evidence was adduced that included an investigative report that some areas held water and required repairs. The judge held that there had been a pool of water caused by the jacuzzi bubbling furiously and that the presence of the water constituted a breach of s.2 of the Act.",
        "B contended that the duty of care imposed was too high as the water had been there for no longer than five minutes."
    ],
    "COUNSEL": "For the appellant: Christopher Alldis. For the respondent: Paul Oakley.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Personal Injury",
        "Torts",
        "Breach of Duty of Care",
        "Duty of Care",
        "Occupiers' Liability",
        "Tripping and Slipping"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Personal Injury &mdash; Torts &mdash; Breach of Duty of Care &mdash; Duty of Care &mdash; Occupiers' Liability &mdash; Tripping and Slipping",
    "SUMMARY": [
        "A hotel was not liable under the Occupiers&#8217; Liability Act 1957 for injuries caused to a guest who slipped on a pool of water in the vicinity of a jacuzzi, as the pool of water had only been there for a few minutes and was in an area where water had not gathered before."
    ],
    "COURT": "EWCA",
    "CITATION": "Tedstone v Bourne Leisure Ltd [2008] EWCA Civ 654",
    "NUMBER": "434",
    "YEAR": "2008"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Tomlinson v Congleton BC",
        "(wl) Jolley v Sutton LBC",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Chester v Afshar",
        "(wl) Hufton v Somerset CC",
        "(wl) Butcher v Southend-on-Sea BC",
        "(wl) Harvey v Plymouth City Council",
        "(wl) Bernard v Attorney General of Jamaica",
        "(wl) Owens v Brimmell",
        "(wl) Gough v Thorne",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Co-operative Group Ltd v Pritchard"
    ],
    "NAME": "(wl) Poppleton v Trustees of the Portsmouth Youth Activities Committee",
    "JUDGE": "May LJ; Richards LJ; Sir Paul Kennedy",
    "CIT": "[2008] EWCA Civ 646",
    "HELD": [
        "Appeal allowed, cross-appeal dismissed.",
        "It was extremely rare for an occupier of land to be under a duty to prevent people from taking risks which were inherent in the activities that they freely chose to undertake, Tomlinson v Congleton BC [2003] UKHL 47, [2004] 1 A.C. 46 applied. P engaged in the climbing activity of his own free will and the risk of falling was plainly obvious. The judge effectively held that it was not obvious that there was a risk that the matting might not always protect a climber from serious injury. That finding was not sustainable, since it was quite obvious that no amount of matting would avoid the possibility of injury from an awkward fall. There was an inherent risk in the activity that P voluntarily undertook. The law did not require C to prevent P from engaging in the activity and nor was it required to train or supervise him whilst he did it. If the law required training or supervision in the instant case, it would equally be required for a multitude of other commonplace leisure activities which nevertheless carried with them a degree of obvious inherent risk. It made no difference that C charged P to use the climbing wall, nor that the rules which they displayed could have been more prominent."
    ],
    "ABSTRACT": [
        "The appellant charity (C) appealed against a finding that it was in breach of its duty of care to the respondent (P) in relation to injuries sustained by P whilst he was rock climbing. P cross-appealed in relation to the extent that he was found contributorily liable.",
        "P was an inexperienced climber who had engaged in simulated rock climbing without ropes at C&#8217;s indoor climbing premises. Rules forbidding jumping were displayed outside the climbing room but P was not referred to them. P attempted to leap from the back wall to a buttress on the opposite wall. P lost his grip and landed on his head on the matting below. P was rendered tetraplegic and brought a claim for damages on the grounds that C failed to provide sufficient supervision and had breached the Occupiers&#8217; Liability Act 1957 s.2 . The judge concluded that there was nothing wrong with the state of the premises and that C was under no duty to assess P&#8217;s competence or ensure that he had the necessary training. However, the judge upheld P&#8217;s allegation that C was in breach of its duty of care to him by failing to warn him that thick safety matting did not make a climbing wall safe but might induce or encourage an unfounded belief that it did. The judge concluded that C was liable for 25 per cent of P&#8217;s loss but that as the majority of the blame for the accident rested with P he was contributorily negligent to the extent of 75 per cent.",
        "C submitted that the judge erred in finding that the adequate safety matting could be characterised as a hidden or latent danger; and that it was obvious that a climber who fell awkwardly might suffer injury, so that there was no duty to explain the obvious to a consenting adult who did not ask for advice or supervision when none was offered. P contended that the judge was wrong to find him 75 per cent to blame when he accepted that P mistakenly believed, because of C&#8217;s breach of duty, that it was safe to fall because of the matting; and that the judge should have found a duty to offer training and supervision."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: William Norris QC. For the respondent: Christopher Sharp QC, Christopher Taylor.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Torts",
        "Contributory Negligence",
        "Duty to Warn",
        "Falls From Height",
        "Occupiers' Liability",
        "Paralysis",
        "Risk",
        "Supervision"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Torts &mdash; Contributory Negligence &mdash; Duty to Warn &mdash; Falls From Height &mdash; Occupiers' Liability &mdash; Paralysis &mdash; Risk &mdash; Supervision",
    "SUMMARY": [
        "Where there was an inherent risk of injury as a result of a voluntarily undertaken activity, the law did not require the occupier of the land that the activity occurred on to prevent an individual from engaging in that activity, or to train or supervise him whilst he did it."
    ],
    "COURT": "EWCA",
    "CITATION": "Poppleton v Trustees of the Portsmouth Youth Activities Committee [2008] EWCA Civ 646",
    "NUMBER": "435",
    "YEAR": "2008"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Donoghue v Folkstone Properties",
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Barber v Somerset County Council",
        "(wl) Clark v Bourne Leisure Limited",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Tomlinson v Congleton BC",
        "(wl) Platt v Liverpool City Council",
        "(wl) Butcher v Southend-on-Sea BC",
        "(wl) Harvey v Plymouth City Council",
        "(wl) Mullin v Richards"
    ],
    "NAME": "(wl) Hufton v Somerset CC",
    "JUDGE": "Sir Andrew Morritt C; Jackson LJ; Elias LJ",
    "CIT": "[2011] EWCA Civ 789",
    "HELD": [
        "Appeal dismissed.",
        "(1) The school&#8217;s risk assessment was reasonable and identified appropriate control measures. Its recommendations had been properly implemented. If it started to rain during a break, there would be a delay before a wet-weather sign was placed by the fire doors, and a small amount of water could be deposited on the hall floor during that gap. On the day in question that was what probably happened. The law did not require an occupier of premises to take measures which would absolutely prevent any accident from ever occurring; all that was required was the exercise of reasonable care. The judge had made primary findings of fact and had evaluated those facts. He had not erred in his evaluation, so there was no reason to interfere with it (see paras 22-31 of judgment). (2) The evidence did not show that liquid gathering on the floor was a frequent problem or that there needed to be a special system for mopping it up. It was not realistic to expect the school to have a system in place for spotting and removing a small area of water during a brief period of time between the start of rain and the production of the wet-weather signs (paras 33-38)."
    ],
    "ABSTRACT": [
        "The appellant pupil (H) appealed against the dismissal of her claim for damages for personal injury against the respondent local authority.",
        "H, aged 15-and-a-half, had suffered a knee injury when she slipped and fell on a wet floor in the hall of her school. Her case was that on a rainy day the school staff had negligently permitted pupils to walk through some fire doors directly into the hall, thereby depositing water onto the floor. The judge had preferred the local authority&#8217;s defence, which was that pupils were not permitted to directly enter the school hall on wet days and that a sign was placed by the fire doors on those days, which operated as an instruction to prefects to prevent pupils from entering. He found that the school&#8217;s procedures were reasonable and appropriate and dismissed the incident as an unfortunate accident.",
        "H argued that there had been no proper system in place for (1) preventing the floor of the hall from becoming wet; (2) clearing up water if the floor did become wet."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Brent McDonald. For the respondent: Paul Stagg.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Local Government",
        "Education",
        "Torts",
        "Local Education Authorities' Powers and Duties",
        "Occupiers' Liability",
        "Personal Injury",
        "Preventive Measures",
        "Schools",
        "Tripping and Slipping"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Local Government &mdash; Education &mdash; Torts &mdash; Local Education Authorities' Powers and Duties &mdash; Occupiers' Liability &mdash; Personal Injury &mdash; Preventive Measures &mdash; Schools &mdash; Tripping and Slipping",
    "SUMMARY": [
        "A school which operated a policy of preventing pupils from entering the premises directly into the school hall on rainy days by erecting wet weather signs as soon as it started raining was not expected to have a system in place for observing and removing water deposited in the hall during the brief period of time between it starting to rain and the production of the wet weather signs. Accordingly, it was not liable to a pupil who slipped and fell in the hall during that period."
    ],
    "COURT": "EWCA",
    "CITATION": "Hufton v Somerset CC [2011] EWCA Civ 789",
    "NUMBER": "436",
    "YEAR": "2011"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Harvey v Plymouth City Council",
        "(wl) Maguire v Sefton MBC",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Hufton v Somerset CC",
        "(wl) Selwood v Durham CC",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Sutcliffe v BMI Healthcare",
        "(wl) Sanderson v Hull",
        "(wl) Williams v University of Birmingham",
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Platt v Liverpool City Council"
    ],
    "NAME": "(wl) Butcher v Southend-on-Sea BC",
    "JUDGE": "Kitchin LJ; Bean LJ",
    "CIT": "[2014] EWCA Civ 1556",
    "HELD": [
        "Appeal dismissed.",
        "The issue of a system of inspection was relevant where a hazard suddenly developed, such as a spillage of oil on the path, Ward v Tesco Stores Ltd [1976] 1 W.L.R. 810 considered. The hazard at the edge of the path had not developed within minutes or hours or even days. Nor was it the kind of hazard, such as the risk of branches dropping from trees, which required a professional risk assessment, Bowen v National Trust for Places of Historic Interest or Natural Beauty [2011] EWHC 1992 (QB) considered. The drop at the edge of the path was obvious and had not been detected by the manager of the accommodation or the caretaker. The local authority relied on what was said in Clerk and Lindsell and on a disability discrimination audit which had not found anything wrong with the path. However, Clerk and Lindsell was not a checklist, and no one knew what the state of the path and surrounding area had been when the audit was carried out. The local authority said that the judge had not carried out the balancing exercise required by Beaton v Devon CC [2002] EWCA Civ 1675, (2003) 100(1) L.S.G. 26, but that case did not lay down any general principle. Each case turned on its own facts. It was a point in favour of the local authority that there had been no previous accident, but on the other hand the hazard had been rectified after the accident without difficulty or expense. The question for the judge was whether before the accident it was foreseeable that someone would inadvertently step off the path and lose their balance because of the drop. It could not possibly be said that the judge was wrong to find that that was foreseeable and to go on to find that the local authority had not taken such care as was reasonable in all the circumstances to see that visitors were reasonably safe. There was no error of law."
    ],
    "ABSTRACT": [
        "The appellant local authority appealed against a decision that it was liable to the respondent (B) for personal injury damages for breach of its duty as the occupier of sheltered housing.",
        "B had been visiting her parents who had lived for some years in sheltered housing owned by the local authority. B&#8217;s parents&#8217; accommodation overlooked the back entrance to the property and she used that entrance. When leaving she had walked along a tarmac path which ran diagonally from the entrance. Beside the path was an area of patchy grass. There was a difference in level between the path and the earth of just over two-and-a-half inches. The judge found that the edge of the path was clear and did not need to be marked. He found that B had stepped half on and half off the path and fallen. Shortly after the accident the local authority inspected the area, concluded that dry weather had caused the earth to shrink from the edge of the path, and instructed contractors to fill in the dip with topsoil to bring the surrounding area up to the level of the path. The judge held that the local authority was in breach of its duty as an occupier: it was foreseeable that someone might lose their footing at the edge of the path, as had happened, because of the change of levels. The defect was obvious and easily remedied. The hazard would have been seen by B if she had been paying attention. She was held 50 per cent contributorily negligent.",
        "The local authority argued that the judge had given insufficient weight to the fact that the manager and caretaker of the accommodation had a system of inspection and relied on Clerk and Lindsell on Torts where it was said that an occupier who reasonably acted on professional or semi-professional advice was likely to escape liability, whereas failure to perform an adequate risk assessment might well tip the balance in favour of liability."
    ],
    "COUNSEL": "For the appellant: John Brooke-Smith. For the respondent: Jack Nicholls.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Personal Injury",
        "Local Government",
        "Breach of Duty of Care",
        "Inspections",
        "Occupiers' Liability",
        "Tripping and Slipping"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Personal Injury &mdash; Local Government &mdash; Breach of Duty of Care &mdash; Inspections &mdash; Occupiers' Liability &mdash; Tripping and Slipping",
    "SUMMARY": [
        "In the circumstances a local authority was liable for personal injury suffered by a visitor to sheltered housing who had lost her footing at the edge of a path where the earth had shrunk away leaving a difference in levels. The hazard was obvious and the risk of injury foreseeable. It was not the kind of case where it was relevant to consider whether the local authority could rely on the existence of a system of inspection or risk assessment to avoid liability."
    ],
    "COURT": "EWCA",
    "CITATION": "Butcher v Southend-on-Sea BC [2014] EWCA Civ 1556",
    "NUMBER": "437",
    "YEAR": "2014"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Harvey v Plymouth City Council",
        "(wl) Hufton v Somerset CC",
        "(wl) Harris v Perry and another",
        "(wl) Tomlinson v Congleton BC",
        "(wl) Barber v Somerset County Council",
        "(wl) Orchard v Lee",
        "(wl) Maguire v Sefton MBC",
        "(wl) Mullin v Richards",
        "(wl) Platt v Liverpool City Council",
        "(wl) Clark v Bourne Leisure Limited",
        "(wl) Keown v Coventry Healthcare NHS Trust",
        "(wl) Donoghue v Folkstone Properties"
    ],
    "NAME": "(wl) West Sussex CC v Master Lewis Pierce",
    "JUDGE": "Lord Dyson MR; McFarlane LJ; Sharp LJ",
    "CIT": "[2013] EWCA Civ 1230",
    "HELD": [
        "Appeal allowed",
        "Appeal allowed. The judge had failed to identify or resolve the legal issues that required determination. Under the Occupiers&#8217; Liability Act 1957 s.2 the question to be addressed was whether, as a matter of objective fact, visitors to the school were reasonably safe in using the premises, including the water fountain, bearing in mind that children did not behave like adults. The answer was yes. There was no evidence that the water fountain was not reasonably safe. The edge could not be described as sharp, but even if it was sharp it could not be said to constitute a danger to children. The school was not under a duty to safeguard children from harm under all circumstances. The school was no more obliged as an occupier to take such steps in respect of the water fountain than it would be in respect of any of the other numerous edges, corners or surfaces against which children might accidentally injure themselves while on the premises (see paras 12, 17-18 of judgment)."
    ],
    "ABSTRACT": [
        "The appellant local authority appealed against a decision that it was liable for an injury to the respondent child (P).",
        "P had been a nine-year-old pupil at a school run by the local authority. He had been playing with his brother by a metal wall-mounted water fountain on the school premises. P had intended to punch his brother, but had missed and punched the underside of the water fountain bowl instead. He lacerated his thumb and damaged the tendons. He made a full recovery but was left with a scar. The judge held that the school had not properly considered what risk the water fountain posed to children, that it had failed to carry out a properly considered risk assessment and that there was a distinct possibility that children might harm themselves on the water fountain."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Iain O&#8217;Donnell. For the respondent: Shahram Sharghy.",
    "CATEGORIES": [
        "Torts Other Related Subjects: Local Government",
        "Education",
        "Personal Injury",
        "Accidents",
        "Children",
        "Occupiers' Liability",
        "School Premises",
        "Visitors"
    ],
    "CATEGORY": "Torts Other Related Subjects: Local Government &mdash; Education &mdash; Personal Injury &mdash; Accidents &mdash; Children &mdash; Occupiers' Liability &mdash; School Premises &mdash; Visitors",
    "SUMMARY": [
        "A school was not under a duty to safeguard children from harm under all circumstances. A judge considering liability for a cut sustained by a child when he accidentally punched a metal water fountain should have considered under the Occupiers&#8217; Liability Act 1957 s.2 whether, as a matter of objective fact, visitors to the school were reasonably safe in using the premises, including the water fountain, bearing in mind that children did not behave like adults."
    ],
    "COURT": "EWCA",
    "CITATION": "West Sussex CC v Master Lewis Pierce [2013] EWCA Civ 1230",
    "NUMBER": "438",
    "YEAR": "2013"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Sutcliffe v BMI Healthcare",
        "(wl) Moore Stephens v Stone Rolls Ltd",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Williams v University of Birmingham",
        "(wl) Sanderson v Hull",
        "(wl) Pierce v Doncaster MBC",
        "(wl) Gregg v Scott",
        "(wl) Barker v Corus (UK)",
        "(wl) JD v East Berkshire Community Health NHS Trust",
        "(wl) Coventry v Lawrence",
        "(wl) Joyce v O'Brien",
        "(wl) Robinson v Chief Constable of West Yorkshire"
    ],
    "NAME": "(wl) Phipps v Rochester Corporation",
    "JUDGE": "Roth J",
    "CIT": "[2016] EWHC 664 (Ch)",
    "HELD": [
        "Claim dismissed.",
        "(1) Whether a warning of an alternative interpretation of a scheme such as that in issue was required depended entirely on the circumstances, and in particular whether there were strong factors favouring an alternative interpretation, Dixey &amp; Sons v Parsons considered, Herrmann v Withers LLP [2012] EWHC 1492 (Ch), [2012] 4 Costs L.R. 712 and Matrix Securities Ltd v Theodore Goddard [1998] S.T.C. 1 applied (see paras 127, 136-138, 146-147 of judgment).",
        "(2) The claimant&#8217;s interpretation of s.28(4) was not obvious or likely because it would have the effect that s.28(4)(a) would exclude someone who was a participator at the date of the transfer of value into the trust, whereas s.28(4)(c) was clearly intended to cover a person who was a participator at the time of such a transfer; moreover, s.28(4)(d) would not cover someone who was not a connected person at the time of the transfer but became so connected afterwards. However, several experienced tax specialists had independently interpreted s.28(4) in the same way as the defendant without apparently considering that there was a likely alternative construction. Therefore, the defendant was not in breach of his duty of care in taking the view that the scheme satisfied the conditions of s.28 or in failing to warn the claimant that there was a risk that it would not be effective to avoid his tax liability unless his family were excluded from benefits even after his death (paras 155-159, 165-166, 168, 242).",
        "(3) Any competent tax solicitor putting forward such a scheme to their clients in 1998 would have given a general warning that, since the scheme was one which involved tax avoidance, there was the possibility of a challenge by HMRC and a risk that the scheme would not be upheld in any ensuing litigation. To that extent, the defendant was in breach of his duty of care. However, since the claimant would not have been deterred from entering into the employee benefit trust if he had received such a warning, the defendant&#8217;s breach of duty had not caused the claimant any loss (paras 173-174, 181).",
        "(4) If that conclusion were wrong, the claim would not have been out of time because, for the purposes of the Limitation Act 1980 s.14A, the claimant did not have actual or constructive knowledge before the three-year period prior to the bringing of his claim that he had suffered damage when entering into the deed of gift (paras 182-184, 193).",
        "(5) Had he not entered into the employee benefit trust, the claimant would probably have entered into the private unit trust, since he was keen to avoid a very substantial tax liability and had actively considered that as an alternative. A challenge to the private unit trust scheme was unlikely to have succeeded. Had the defendant been found liable, the claimant would have been entitled to recover 70% of the settlement figure and the foreseeable expenditure of professional fees and costs incurred in dismantling the scheme (paras 200, 216, 223, 228, 242)."
    ],
    "ABSTRACT": [
        "The claimant, the head of a group of companies, brought a professional negligence claim against the defendant solicitor on whose advice he had established an employee benefit trust.",
        "The claimant had been advised by a firm of accountants to consider mitigating capital gains tax liability by establishing a private unit trust. The defendant had proposed the employee benefit trust instead, without knowledge of the accountants&#8217; advice. The group entered into the scheme, modelled on the Inheritance Tax Act 1984 s.28(4), by establishing a discretionary trust for the benefit of the group&#8217;s employees, excluding specified persons, on the basis that a shareholder&#8217;s family could benefit from the scheme only after his or her death. The claimant entered into a deed of gift of his shares in favour of the trust. The business was sold. In 2010, HMRC assessed the claimant to tax arising from the trust on the basis that s.28(4) was to be construed as excluding persons connected to the participating shareholder from benefit at any time, whereas the claimant&#8217;s family were able to benefit from the trust after his death. The claimant reached a settlement with HMRC and wound up the employee benefit trust. In 2013, he brought the instant claim to recover his losses on the basis that, had he not entered into the scheme, he would have avoided the tax by entering into a private unit trust. The defendant claimed that his interpretation of s.28 was correct and that, in any event, no reasonably competent lawyer would have been expected to warn of an alternative interpretation whereby the scheme might not work. Alternatively, the defendant contended that the claim was statute-barred and that the private unit trust would not have worked.",
        "The claimant interpreted s.28(4) as meaning that, in order for a transfer into a trust to be exempt, payments of capital benefits must not be permitted to persons who were connected to the transferor at the time when the transfer of value was made, whereas the defendant submitted that the relevant time was when the benefit was applied to such persons."
    ],
    "COUNSEL": "For the claimant: Michael Furness QC, Dakis Hagen. For the second defendant: Jonathan Seitler QC, Emily Campbell, Stephen Hackett.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Tax",
        "Breach of Duty of Care",
        "Capital Taxation",
        "Causation",
        "Damages",
        "Employee Benefit Trusts",
        "Knowledge",
        "Limitations",
        "Professional Negligence",
        "Solicitors",
        "Tax Avoidance"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Tax &mdash; Breach of Duty of Care &mdash; Capital Taxation &mdash; Causation &mdash; Damages &mdash; Employee Benefit Trusts &mdash; Knowledge &mdash; Limitations &mdash; Professional Negligence &mdash; Solicitors &mdash; Tax Avoidance",
    "SUMMARY": [
        "A solicitor who had recommended an employee benefit trust as a tax avoidance scheme was not negligent notwithstanding his client&#8217;s subsequent assessment to tax. His interpretation of the Inheritance Tax Act 1984 s.28(4) was probably correct, and was one that was shared by other experienced tax specialists. Although the solicitor had failed to warn the client about the possibility of HMRC challenging the scheme, and the risk of it not being upheld in ensuing litigation, the client had expressed his understanding of the inherent risks in tax planning schemes."
    ],
    "COURT": "EWHC",
    "CITATION": "Phipps v Rochester Corporation [2016] EWHC 664 (Ch)",
    "NUMBER": "439",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Stevenson Jordan & Harrison v McDonald & Evans",
        "(wl) Wooten v J Docter",
        "(wl) Gregg v Scott",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Thompson v Smiths Shiprepairers (North Shields) Ltd",
        "(wl) Kent v Griffiths",
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Harris v Perry and another",
        "(wl) Lawrence v Pembrokeshire County Council",
        "(wl) Steel and Morris v UK",
        "(wl) Telnikoff v Matusevich"
    ],
    "NAME": "(wl) Roles v Nathan",
    "JUDGE": "Longmore LJ; Sales LJ; Baker J",
    "CIT": "[2016] EWCA Civ 120",
    "HELD": [
        "Appeal allowed.",
        "(1) To order for security for costs, the court had to believe that a claimant would not be able to pay them; that test should not be elevated to a test on the balance of probabilities, Unisoft Group (No.2), Re [1993] B.C.L.C. 532 and Jirehouse Capital v Beller [2008] EWCA Civ 908, [2009] 1 W.L.R. 751 applied. That was a matter of evaluation: the court should only interfere if the judge applied some wrong principle, failed to take a relevant matter into account, took an irrelevant matter into account or was plainly wrong, Assicurazioni Generali SpA v Arab Insurance Group (BSC) [2002] EWCA Civ 1642, [2003] 1 W.L.R. 577 applied. In the instant case, the judge had been plainly wrong: if a company was given every opportunity to show that it could pay a defendant&#8217;s costs and deliberately refused, there was every reason to believe that, if and when it was required to pay a defendant&#8217;s costs, it would be unable to do so. Even if deliberate reticence to reveal a company&#8217;s financial position was not a breach of CPR r.1.3, the court should take account of that as part of the overall picture. If, therefore, there were to be a practice of the Commercial Court that security for costs would often be granted against a foreign company who was not obliged to publish accounts, had no discernible assets and declined to reveal anything about its financial position, the practice was a sound one which should be upheld, Mbasogo v Logo [2006] EWCA Civ 608 applied (see paras 11-13, 17, 19-20 of judgment). (2) If the claimant were to lose in the instant proceedings, then the supplier will have won against the defendant, who would have to pay the supplier&#8217;s costs. It was highly likely that the defendant would be entitled to recover those costs from the claimant, as well as its own costs in both proceedings. Those costs then became the defendant&#8217;s own costs, for which it ought to be able to obtain security if it was fair to speak of them as being added to the defendant&#8217;s costs, as it was in the instant case, Johnson v Ribbins [1977] 1 W.L.R. 1458 applied. Accordingly, the decision to include the defendant&#8217;s own costs in an order for security was upheld, but the exclusion of the supplier&#8217;s costs was reversed. An order that the claimant should provide security for costs in the agreed sum was made (paras 25-26, 30). (3) Although a costs budget set out incurred and estimated costs, under CPR PD 3E para.7.4 the court only formally approved the estimated costs; and it was only in relation to those costs that the court would not depart from the approved budget &#8220;unless satisfied that there is good reason to do so&#8221; under CPR r.3.18(b). However, the court could still comment on the incurred costs element of costs budgets, as well as take them into account when considering the reasonableness and proportionality of estimated costs. Those comments will carry significant weight when exercising its general discretion as to costs at the end of a trial. Therefore, the practical effect of a comment on already incurred costs might be similar to the effect of formal approval of estimated costs in a cost budget. In the instant case, the judge had been correct to take an approved costs budget as the reference point to work out the defendant&#8217;s own costs which should be provided by way of security, and the supplier&#8217;s costs budget as the reference point for calculating its costs which were to be passed on to the defendant and recovered from the claimant (paras 41-43, 47, 49)."
    ],
    "ABSTRACT": [
        "The defendant appealed against a judge&#8217;s refusal to order the claimant to provide security for costs under CPR r.25.13(2)(c).",
        "The claimant, a BVI company, had sought damages alleging that gas oil it had purchased from the defendant Swiss company did not meet contractual specifications. The defendant denied that allegation, but contended that if true, then that was the fault of the company from whom it had bought the oil; it had accordingly commenced Pt.20 damages proceedings against the supplier or sought an indemnity in respect of the instant claim. The defendant, seeking security for costs, relied on r.25.13(2)(c). The claimant did not reveal its financial position and there was no publicly available financial information. A judge refused the order, stating that there was no reason to believe that the claimant would be unable to pay the defendant&#8217;s costs if ordered to do so and that it had been reticent about revealing its financial position as it would benefit settlement negotiations. The judge added that he suspected it had become Commercial Court practice to order security for costs where a company had not filed publicly available accounts, had no discernible assets and had declined to reveal its financial position; but, if such practice had developed, it was not justified and he would not follow it. Although the judge did not need to determine the scope of the security, if he had ordered security, he would have included the defendant&#8217;s costs of suing the supplier but excluded the costs for which it would be liable to the supplier. He would have also adhered to the amounts set out in the defendant&#8217;s costs budget. The issues were (1) whether the judge had been justified in not following Commercial Court practice; (2) whether the defendant&#8217;s own Pt.20 costs should be included in any order for security for costs, as well as the costs the defendant would have to pay the supplier in respect of the supplier defeating the Pt.20 proceedings; (3) the role of costs budgets in determining the scope of security."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: David Lewis QC, Oliver Caplin. For the respondents: Michael Nolan QC.",
    "CATEGORIES": [
        "Civil Procedure Other Related Subjects: Company Law",
        "Commercial Court",
        "Costs Budgets",
        "Non-Resident Companies",
        "Security For Costs"
    ],
    "CATEGORY": "Civil Procedure Other Related Subjects: Company Law &mdash; Commercial Court &mdash; Costs Budgets &mdash; Non-Resident Companies &mdash; Security For Costs",
    "SUMMARY": [
        "The Commercial Court&#8217;s practice to award security for costs against a foreign company which was not obliged to publish accounts, had no discernible assets, and had declined to reveal its financial position, was a sound one which should be upheld."
    ],
    "COURT": "EWCA",
    "CITATION": "Roles v Nathan [2016] EWCA Civ 120",
    "NUMBER": "440",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Jobling v Associated Dairies",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) Hughes v Lord Advocate",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) W v Essex County Council and Another",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Kent v Griffiths",
        "(wl) Rabone v Pennine Care NHS Trust"
    ],
    "NAME": "(wl) Haseldine v Daw",
    "JUDGE": "Lady Paton; Lady Dorrian; Lord Drummond Young",
    "CIT": "[2016] CSIH 3",
    "HELD": [
        "Reclaiming motion allowed.",
        "(1) Recent authorities from the House of Lords and Supreme Court had emphasised the requirement for a careful approach to the liability of public authorities to private individuals, the circumstances of the third case in Capital were very similar to the circumstances in the present case, and the Court of Appeal&#8217;s conclusion, that the fire brigade was not liable, had been specifically approved by the House of Lords in Gorringe v Calderdale Metropolitan Borough Council [2004] 1 W.L.R. 1057 and had not been criticised by the Supreme Court in Michael v Chief Constable of South Wales Police [2015] 2 W.L.R., and the carefully developed, policy based, more restrictive approach, approved and adopted by the Supreme Court, had to be followed by the Scottish courts, contrary to the views expressed in Duff v Highlands and Islands Fire Board, 1995 S.L.T. 1362, Gibson v Orr, 1999 S.C. 420 and Burnett v Grampian Fire and Rescue Services, 2007 S.L.T. 61 but in keeping with Mackay v Scottish Fire and Rescue Service, 2015 S.L.T. 342; (i) the fire service ought not to be regarded as having undertaken an assumption of responsibility, in the sense defined in the authorities, on the basis of answering a 999 call, attending the scene of a fire or taking steps to extinguish a fire or to save lives or property, as those actions represented them carrying out their statutory functions and public duty; (ii) general policy considerations required be taken into account; (iii) while analogies might be drawn with the provision of medical services, or the ambulance service, they were of limited assistance, (iv) there was no general duty to rescue, the fire service had been held not to be liable if they failed to attend a fire, therefore, it seemed unprincipled to suggest that a fire service which did attend a fire and sought to extinguish it could be held liable for their actions, other than in circumstances where they negligently inflicted fresh injury; and (v) the line of English authority relevant to the liability of public bodies including fire services was well established and of considerable authority and it would be unfortunate to adopt a different approach in Scotland, East Suffolk Rivers Catchment Board v Kent [1941] A.C. 74, Capital &amp; Counties Plc , Gorringe , Mitchell v Glasgow City Council, 2009 S.C. (HL) 21 and Michael , considered , Duff , Gibson and Burnett , disapproved and Mackay , approved . (2) In the present case, S owed a duty of care to the general public, including H but that duty was to take care not to negligently inflict a fresh injury; there were neither averments that S had made matters worse or that they had inflicted a fresh injury when they had arrived at, and dealt with, the fire, nor of circumstances which could properly be categorised as an assumption of responsibility giving rise to a common law duty to exercise reasonable care, and further, it would not be fair, just or reasonable to impose a duty of care of the scope contended for by H on S, thus H&#8217;s case would necessarily fail even were all their averments proved, and the case as pled was irrelevant. Observed , per Lord Drummond Young, (1) that a distinction might properly be drawn between injury to the person and damage to property, consequently, it was hoped that in an appropriate case the law might develop in such a way that, at least in clear cases where action could be taken without danger to the rescuer, the officers of a public service such as the fire service or the police were obliged to take action to rescue persons in danger; (2) that the law had moved in the direction of attaching greater significance to the more traditional categorisation of distinct and recognisable situations as guides to the existence, scope and limits of the varied duties of care which the law imposed but rules derived from existing case law ought not to be applied mechanically to new situations, instead it should be asked whether, as a matter of policy directed to the specific situation under consideration, a new analysis was required, which would result in a law of negligence that was less unified than in the past but which dealt more fairly with individual cases."
    ],
    "ABSTRACT": [
        "A fire service (S) reclaimed against a decision of the Lord Ordinary allowing a proof before answer in an action of damages raised against S by the the heritable proprietors (H) of a farmhouse (F) for damages on the basis of S&#8217;s alleged negligence in extinguishing a fire at F (A J Allan (Blairnyle) Ltd v Strathclyde Fire Board [2014] CSOH 135).",
        "On 31 October 2008, S had extinguished a fire at F and had left the scene at approximately 3 pm. H averred that rotten timbers in the roof space had continued to smoulder such that the fire had reignited in the early hours of the morning on 1 November and F had burned down, and that once the fire had appeared to be extinguished, S ought to have used thermal imaging to locate any questionable areas and further ought to have maintained a regular check on F to ensure that the fire had truly been extinguished."
    ],
    "COUNSEL": "For the reclaimers: R Dunlop QC, E Campbell. For the respondents: Balfour.",
    "CATEGORIES": [
        "Negligence",
        "Duty of Care",
        "Fire Services",
        "Negligence",
        "Scotland"
    ],
    "CATEGORY": "Negligence &mdash; Duty of Care &mdash; Fire Services &mdash; Negligence &mdash; Scotland",
    "SUMMARY": [
        "Firefighters attending the scene of a fire did not owe a duty of care to the heritable proprietor where they had assumed responsibility for controlling and extinguishing the fire but had failed to do so; the carefully developed, policy based, more restrictive approach approved and adopted by the Supreme Court had to be followed by the Scottish courts, and the court had to disapprove of Duff v Highlands and Islands Fire Board, 1995 S.L.T. 1362, Gibson v Orr, 1999 S.C. 420 and Burnett v Grampian Fire and Rescue Services, 2007 S.L.T. 61."
    ],
    "COURT": "EWHC",
    "CITATION": "Haseldine v Daw [2016] CSIH 3",
    "NUMBER": "441",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Harvey v Plymouth City Council",
        "(wl) Butcher v Southend-on-Sea BC",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Tomlinson v Congleton BC",
        "(wl) Keown v Coventry Healthcare NHS Trust",
        "(wl) Barber v Somerset County Council",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Attorney General of the British Virgin Islands v Hartwell",
        "(wl) Joyce v O'Brien"
    ],
    "NAME": "(wl) Maguire v Sefton MBC",
    "CIT": "[2006] EWCA Civ 316",
    "HELD": [
        "allowing the appeal, that (1) it was clear that s.5 of the Act was meant to do away with the previous common law distinction between an occupier&#8217;s liability towards a non contractual visitor and a visitor entering under a contract. Accordingly, the judge had erred by seeking to draw a distinction between S&#8217;s liability as an occupier to M as a contracting party and its liability as an occupier under the Act. (2) S was entitled to rely upon P as the expert to perform a proper inspection of the relevant machine at the pre contractual inspection. The reason for the pre contractual inspection was to ensure that the machine was in good order, and notwithstanding the lack of any contractual obligations existing at that time, P was at risk to subsequent users of the machine. S was entitled to consider that it had employed experts and had taken proper steps by entering into the service contract so as to meet its duties under the Act. There was nothing in the evidence to support a finding that S could be criticised for failing to inspect or maintain the machines or that it should have been aware of the defect. Accordingly there was no substance in the finding of liability under the Act."
    ],
    "COUNSEL": "For the appellant: Yaqub Rahman. For the respondent: Peter Goodbody.",
    "JUDGE": "Rix LJ; Carnwath LJ; Jacob LJ",
    "NUMBER": "442",
    "CATEGORIES": [
        "Torts Other Related Subjects: Negligence",
        "Duty of Care",
        "Inspections",
        "Occupiers' Liability",
        "Visitors"
    ],
    "CATEGORY": "Torts Other Related Subjects: Negligence &mdash; Duty of Care &mdash; Inspections &mdash; Occupiers' Liability &mdash; Visitors",
    "SUMMARY": [
        "There was no distinction to be drawn between the liability owed under the Occupiers&#8217; Liability Act 1957 to a contractual visitor and that owed to non contractual visitors. Under the Act, a local authority had not been liable to a visitor to its leisure centre for injuries sustained in the course of using gymnasium equipment where the authority had entered into a maintenance service agreement with a third party for the maintenance of the equipment and that third party had recently carried out an inspection of the equipment.",
        "The appellant local authority (S) appealed against a decision that it was liable for injuries sustained by the respondent (M) in an accident at a leisure centre operated by it. The gymnasium at the leisure centre had comprised a number of machines, including an uphill climbing machine. All the machines were manufactured by a company in America, and the second defendant (P) was the seller and maintenance provider for them. S had entered into a maintenance service agreement with P in respect of the machines; however, before completion of the agreement could take place, an engineer from P had carried out a pre contractual inspection. No defects had been found in the relevant machine and the contract was duly entered. A little over a month later M was using the climbing machine when the resistance of the machine gave in, causing M to fall backwards and injure himself. On a claim for damages for the injuries sustained the trial judge held both S and P to blame. The judge found that S had been in breach of an implied term of contract between it and M, since M was a paying entrant to the leisure centre, and further found that S had been in breach of its common duty of care under the Occupiers&#8217; Liability Act 1957 by failing to put into place a system of checking the safety of the equipment in the gymnasium. S argued that (1) the judge had erred in applying a different standard of care on the ground of an implied contractual term rather than the duty owed under the Act; (2) under the Act the judge had erred in finding that S had been in breach of its duty of care in light of the service agreement with P."
    ],
    "CITATION": "Maguire v Sefton MBC [2006] EWCA Civ 316",
    "COURT": "EWCA",
    "YEAR": "2006"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Tomlinson v Congleton BC",
        "(wl) Harvey v Plymouth City Council",
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) The Scout Association v Barnes",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Hufton v Somerset CC",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Harris v Perry and another",
        "(wl) Revill v Newbery",
        "(wl) Poppleton v Trustees of the Portsmouth Youth Activities Committee",
        "(wl) Keown v Coventry Healthcare NHS Trust"
    ],
    "NAME": "(wl) Clark v Bourne Leisure Limited",
    "JUDGE": "Lord Neuberger MR; Elias LJ; Dame Janet Smith",
    "CIT": "[2011] EWCA Civ 753",
    "HELD": [
        "Appeal allowed; Claim dismissed.",
        "(1) When assessing whether the premises were reasonably safe for wheelchair users it was incumbent on the judge to make his own judgment about the matter. On the evidence it was clear that he had been influenced in his own decision as to safety by the opinions of B&#8217;s manager. Further, the judge was wrong to conclude that B had conceded that there should have been signage warning of the steps. Accordingly, his decision could not stand (see paras 16-17 of judgment). (2) It was appropriate for the instant court to consider the issue of safety rather than remit the case. On the evidence, the premises were reasonably safe for wheelchair users. A ramp was available and entirely safe for wheelchair users. The steps were not safe for wheelchairs but they were clearly visible and any wheelchair user taking reasonable care for his safety would avoid using them (para.20)."
    ],
    "ABSTRACT": [
        "The appellant company (B) appealed against a decision awarding damages to the respondent (C) on her claim for personal injuries.",
        "Whilst on holiday at one of B&#8217;s sites C, who used an electric wheelchair, visited a bar. The bar was on different levels; on one side of the room the levels were connected by a ramp, on the other they were connected by two steps situated several feet apart. C went up the ramp but later when she wished to go to the lower level used the steps by mistake, tipping her wheelchair causing her to fall out and sustain injuries. C claimed damages on the basis that the premises did not comply with the Occupiers&#8217; Liability Act 1957 s.2 as the steps were a concealed hazard. The judge held that the premises were not reasonably safe for a wheelchair user."
    ],
    "FLAGS": [
        "Neuberger"
    ],
    "COUNSEL": "For the appellant: Christopher Alldis. For the respondent: Roderick Spinks.",
    "CATEGORIES": [
        "Personal Injury",
        "Occupiers' Liability",
        "Personal Injury",
        "Reasonable Care",
        "Wheelchairs"
    ],
    "CATEGORY": "Personal Injury &mdash; Occupiers' Liability &mdash; Personal Injury &mdash; Reasonable Care &mdash; Wheelchairs",
    "SUMMARY": [
        "Although a wheelchair user had mistakenly gone down steps in her wheelchair, causing her to fall out and sustain personal injuries, the premises were reasonably safe for wheelchair users as a ramp was provided and the steps were clearly visible to any wheelchair user taking reasonable care."
    ],
    "COURT": "EWCA",
    "CITATION": "Clark v Bourne Leisure Limited [2011] EWCA Civ 753",
    "NUMBER": "443",
    "YEAR": "2011"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Poppleton v Trustees of the Portsmouth Youth Activities Committee",
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Harris v Perry and another",
        "(wl) Hufton v Somerset CC",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) The Scout Association v Barnes",
        "(wl) Barber v Somerset County Council",
        "(wl) Harvey v Plymouth City Council",
        "(wl) Clark v Bourne Leisure Limited",
        "(wl) Selwood v Durham CC"
    ],
    "NAME": "(wl) Tomlinson v Congleton BC",
    "JUDGE": "Lord Nicholls of Birkenhead; Lord Hoffmann; Lord Hutton; Lord Hobhouse of Woodborough; Lord Scott of Foscote",
    "CIT": "[2003] UKHL 47",
    "HELD": [
        "allowing the appeal, that the lake did not present risks due to the state of the premises or anything done or omitted to be done on the premises, pursuant to s.1(1)(a) of the 1984 Act. Accordingly, there was nothing which gave rise to a duty on the part of the local authority. Even if swimming had not been prohibited and the local authority had owed a duty under s.2(2) of the 1957 Act, it would not have been required to take steps to prevent T from diving or to warn him against dangers which were obvious, Donoghue v Folkestone Properties Ltd [2003] EWCA Civ 231 and Taylor v Glasgow City Council [1922] 1 A.C. 44 applied. T was a person of full capacity who had voluntarily chosen to engage in an activity which had inherent dangers."
    ],
    "FLAGS": [
        "Approved",
        "Hoffmann"
    ],
    "COUNSEL": "For T: Bill S Braithwaite Q.C. and Gerard Martin Q.C. For the local authority: Raymond Machell Q.C. and Peter Burns.",
    "CATEGORIES": [
        "Torts Other Related Subjects: Local Government",
        "Duty to Warn",
        "Occupiers' Liability",
        "Personal Injury",
        "Risk",
        "Standard of Care"
    ],
    "CATEGORY": "Torts Other Related Subjects: Local Government &mdash; Duty to Warn &mdash; Occupiers' Liability &mdash; Personal Injury &mdash; Risk &mdash; Standard of Care",
    "SUMMARY": [
        "When considering, for the purposes of the Occupiers&#8217; Liability Act 1984, what steps, if any, an occupier of land should have taken to prevent an accident, the court should take into account the cost of taking the steps, the social value of the activities that the taking of the steps would prohibit and whether those of full capacity should be allowed to decide for themselves whether to take the relevant risk.",
        "A local authority appealed against a decision ([2002] EWCA Civ 309, [2003] 2 W.L.R. 1120) that, as the owner and occupier of a country park, it had owed a duty of care to T pursuant to the Occupiers&#8217; Liability Act 1984 s.1 and was liable for serious personal injuries that T had sustained when he dived into the shallow water at the edge of a lake and struck his head on the bottom. Swimming in the lake was prohibited and the local authority had erected notices and distributed leaflets warning of the dangers of swimming in the lake. It was accepted that the relevant statutory duty was that owed to a trespasser under the 1984 Act and not the duty owed to a lawful visitor under the Occupiers&#8217; Liability Act 1957 s.2(2) because, by virtue of the prohibition on swimming, when T had entered the water to swim he had become a trespasser. T argued that the local authority had owed him a duty under s.1(4) of the 1984 Act to take such care as was reasonable in all the circumstances to ensure that he did not suffer injury on the premises by reason of the danger concerned. Further, that that duty had not been discharged by the erection of notices because people had ignored those notices which meant that they were obviously ineffectual."
    ],
    "COURT": "UKHL",
    "CITATION": "Tomlinson v Congleton BC [2003] UKHL 47",
    "NUMBER": "444",
    "YEAR": "2003"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Hufton v Somerset CC",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Orchard v Lee",
        "(wl) Tomlinson v Congleton BC",
        "(wl) Maguire v Sefton MBC",
        "(wl) Dorset Yacht Co Ltd v Home Office",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Joyce v O'Brien",
        "(wl) West Sussex CC v Master Lewis Pierce"
    ],
    "NAME": "(wl) Donoghue v Folkstone Properties",
    "JUDGE": "Lord Phillips MR; Brooke LJ; Laws LJ",
    "CIT": "[2003] EWCA Civ 231",
    "HELD": [
        "allowing the appeal, that (1) it was arguable that an injury suffered by a trespasser as a result of a concealed obstruction below what appeared to be deep water could be attributed, in part, to the &#8220;state of the premises&#8221; for the purposes of s.1(1)(a) of the Act, and (2) while consideration of a class of trespasser might be useful when approaching the question raised by s.1(3)(b) of whether the occupier had reasonable grounds for believing that the trespasser might come into the vicinity of the danger, it would be necessary to consider whether any duty was owed to the particular member of the class who suffered the injury. A duty to offer some protection to children known to be in the vicinity of the danger might, for example, exist in circumstances where the occupier could not reasonably be expected to offer any protection to an adult. The question of whether a duty of care existed under the 1984 Act had to be determined with reference to the circumstances prevailing at the time that it was alleged that the breach of duty caused injury to the claimant. At the time that D had sustained his injuries, F had had no reason to believe that he would be diving from the slipway and the criterion of s.1(3)(b) had not been satisfied, Ratcliff v McConnell [1999] 1 W.L.R. 670 and White v St Albans City and District Council Times, March 12, 1990 applied and Tomlinson v Congleton BC [2002] EWCA Civ 309 considered."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For D: Bill Braithwaite Q.C. and Alan Saggerson. For F: Lawrence West.",
    "CATEGORIES": [
        "Torts",
        "Divers",
        "Duty of Care",
        "Occupiers' Liability",
        "Personal Injury",
        "Trespassers"
    ],
    "CATEGORY": "Torts &mdash; Divers &mdash; Duty of Care &mdash; Occupiers' Liability &mdash; Personal Injury &mdash; Trespassers",
    "SUMMARY": [
        "Properly construed, the Occupiers&#8217; Liability Act 1984 s.1(3)(b) imposed a duty of care on the occupier only in circumstances where, at the time of the incident giving rise to the claim, he ought reasonably to have known that his property could be trespassed in the way that it was by the claimant.",
        "F, the owner and occupier of a harbour, appealed against a finding that it was liable under the Occupiers&#8217; Liability Act 1984 for the injuries sustained by D when diving into the harbour. After midnight in late December D dived from a slipway in the harbour and broke his neck after hitting a grid pile located some two feet below the surface of the water. F argued that the duty that was owed to offer some protection to a trespasser against a danger extended only to the time or times at which the occupier had reasonable grounds for believing that the trespasser might be in the vicinity of and at risk from the danger. Accordingly, since there had been no reasonable grounds for believing that anyone would be swimming in the vicinity of the slipway at night in mid winter, it had owed no duty to D at the time of his accident."
    ],
    "COURT": "EWCA",
    "CITATION": "Donoghue v Folkstone Properties [2003] EWCA Civ 231",
    "NUMBER": "445",
    "YEAR": "2003"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Platt v Liverpool City Council",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Harvey v Plymouth City Council",
        "(wl) Orchard v Lee",
        "(wl) Maguire v Sefton MBC",
        "(wl) Butcher v Southend-on-Sea BC",
        "(wl) Hufton v Somerset CC",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Gough v Thorne",
        "(wl) Harris v Perry and another",
        "(wl) Lippiatt v South Gloucestershire Council"
    ],
    "NAME": "(wl) Keown v Coventry Healthcare NHS Trust",
    "JUDGE": "Mummery LJ; Longmore LJ",
    "CIT": "[2006] EWCA Civ 39",
    "HELD": [
        "allowing the appeal, that (1) the authorities would conclude the question in favour of the trust if K was an adult, Donoghue v Folkestone Properties Ltd [2003] EWCA Civ 231 and Tomlinson v Congleton BC [2003] UKHL 47 considered. Premises that were not dangerous from the point of view of an adult could be dangerous for a child and whether they were was a question of fact and degree. However, it would not be right to ignore a child&#8217;s choice to indulge in a dangerous activity in every case merely because he was a child. The judge had found that K had not only appreciated that there was a risk of falling but also that what he was doing was dangerous and that he should not have been climbing the exterior of the fire escape. In the circumstances, it could not be said that K did not recognise the danger, and the risk arose not out of the state of the premises, which were as one would expect them to be, but out of what K chose to do, Young v Kent CC [2005] EWHC 1342 considered. Therefore, K had not suffered injury by reason of any danger due to the state of the premises and did not pass the threshold requirement in s.1(1)(a) of the 1984 Act. (2) If there could be said to have been a risk by reason of a danger due to the state of the premises and the risk could be said to have arisen because the fire escape was unguarded or unfenced, K could have brought himself within s.1(3)(a) of the 1984 Act because the trust knew that the fire escape was unguarded and unfenced. K could also bring himself within s.1(3)(b), since the trust knew that children played in the vicinity of the unguarded or unfenced fire escape. It was doubtful whether K could have brought himself within s.1(3)(c) because it would not be reasonable to expect the trust to offer protection from such a risk."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the claimant: Martin Porter, Nina Goolamali. For the defendant: Paul Bleasdale QC, William Pusey.",
    "CATEGORIES": [
        "Torts Other Related Subjects: Personal Injury",
        "Age",
        "Children",
        "Occupiers' Liability",
        "Trespassers"
    ],
    "CATEGORY": "Torts Other Related Subjects: Personal Injury &mdash; Age &mdash; Children &mdash; Occupiers' Liability &mdash; Trespassers",
    "SUMMARY": [
        "An 11 year old child who had climbed the outside of a fire escape was not at risk of suffering injury by reason of any danger due to the state of the premises within the Occupiers&#8217; Liability Act 1984 s.1(1)(a) but had put himself at risk through his own choice to indulge in a dangerous activity. If there was a danger attributable to the state of the premises, thus giving rise to a potential duty, the content of the duty might vary according to whether the trespasser was a child or an adult, but until that point was reached, then in the general run of cases, the age of the trespasser was not relevant.",
        "The appellant healthcare trust appealed against the county court decision that it was liable for the personal injuries suffered by the respondent trespasser (K). K had been 11 years old at the time of the accident. He had been climbing the underside of a fire escape at the trust&#8217;s hospital premises when he fell to ground and was injured. The fire escape went to the top (third) floor of the building. It was in part of the hospital grounds that were used by the public as a means of going between the streets on either side. The judge held that there existed a danger due to the state of the premises within the Occupiers&#8217; Liability Act 1984 s.1(1)(a) . He held that K was two thirds responsible for what had happened. The trust submitted that the fire escape was not itself dangerous and that any danger was due to K&#8217;s activity on the premises and not the state of the premises. K submitted that there was danger due to the state of the premises &#8220;as found by&#8221; K, since the fire escape was amenable to being climbed from the outside with a consequent risk of harm from falling from a height and constituted an inducement to children habitually playing in the grounds of the hospital."
    ],
    "COURT": "EWCA",
    "CITATION": "Keown v Coventry Healthcare NHS Trust [2006] EWCA Civ 39",
    "NUMBER": "446",
    "YEAR": "2006"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Keown v Coventry Healthcare NHS Trust",
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Hufton v Somerset CC",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Berkoff v Burchill and The Times",
        "(wl) Lippiatt v South Gloucestershire Council",
        "(wl) Dulieu v White",
        "(wl) Jolley v Sutton LBC",
        "(wl) Joyce v O'Brien",
        "(wl) Tomlinson v Congleton BC"
    ],
    "NAME": "(wl) Platt v Liverpool City Council",
    "CIT": "Official Transcript",
    "HELD": [
        "dismissing the appeal, that the duty of L under the Occupiers Liability Act 1984 s.1(4) was to take such care as was reasonable in all the circumstances of the case. At the time the boys entered the property it was surrounded by an eight foot fence which could be overcome only by climbing over it or wriggling under it through an eight inch gap and there was no evidence that on any previous occasion any child had done either of those things. To say that by providing such a fence L did not take such care as was reasonable in all the circumstances of the case to see that these four boys did not suffer injury on the premises would be absurd."
    ],
    "COUNSEL": "For P: John Gruffydd. For LCC: Tania Griffiths.",
    "JUDGE": "Kennedy LJ; McCullough J",
    "NUMBER": "447",
    "CATEGORIES": [
        "Torts",
        "Children",
        "Occupiers' Liability",
        "Trespass"
    ],
    "CATEGORY": "Torts &mdash; Children &mdash; Occupiers' Liability &mdash; Trespass",
    "SUMMARY": [
        "occupiers liability; trespass to land; children overcoming eight foot high fence to enter vandalised property; no liability for child&#8217;s death",
        "For several years L engaged in a rehousing programme which involved the emptying, repairing, and in some instances, the demolition of various properties. Properties which had been vacated were secured against intruders with metal sheets over windows and doors, and L&#8217;s employees routinely checked premises to see whether the shuttering had become insecure. On August 21, 1995 an employee of L found that the shutters at 2 Newlands Close were insecure and, on inspection, the property was found to be so badly vandalised that it needed to be demolished. Since that would take about a week L erected an eight foot high corrugated metal fence around the property, secured by wooded posts fixed in concrete. The next day a group of four boys gained entrance to the property and, whilst they were inside, the building collapsed, killing P and injuring K. P&#8217;s father and K sued L under the Law Reform (Miscellaneous Provisions) Act 1934 , Fatal Accidents Act 1976 and in damages for personal injuries. The trial judge found in favour of L on the issue of liability. P&#8217;s father and K appealed."
    ],
    "CITATION": "Platt v Liverpool City Council Official Transcript",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Moore Stephens v Stone Rolls Ltd",
        "(wl) Coventry v Lawrence (no 2)",
        "(wl) A v United Kingdom",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Wheat v Lacon and Co Ltd",
        "(wl) Hufton v Somerset CC",
        "(wl) Kent v Griffiths",
        "(wl) Gough v Thorne",
        "(wl) Barker v Corus (UK)",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) Baturina v Times Newspapers"
    ],
    "NAME": "(wl) Stennett v Hancock",
    "CIT": "[2016] UKFTT 82 (TC)",
    "HELD": [
        "Preliminary issues determined."
    ],
    "COUNSEL": "For the fifteenth appellant: In person. For the third appellant: No appearance or representation. For the remaining appellants: James Onalaja. For the respondents: Michael Jones.",
    "JUDGE": "Judge Anne Redston",
    "NUMBER": "448",
    "CATEGORIES": [
        "Tax Other Related Subjects: Human Rights",
        "Fraud",
        "Privilege Against Self-Incrimination",
        "Right to Fair Trial",
        "Tax Enquiries",
        "Tax Evasion",
        "Tax Returns"
    ],
    "CATEGORY": "Tax Other Related Subjects: Human Rights &mdash; Fraud &mdash; Privilege Against Self-Incrimination &mdash; Right to Fair Trial &mdash; Tax Enquiries &mdash; Tax Evasion &mdash; Tax Returns",
    "SUMMARY": [
        "Where HMRC suspected tax fraud on the part of a company director, and had issued notices under the Finance Act 2008 Sch.36 for him and his companies to provide documents and information, as well as opening enquiries into relevant corporation tax returns and self-assessment tax returns, the taxpayer&#8217;s right against self-incrimination: (a) did not allow him to refuse to respond to the Sch.36 notices; (b) did not extend to his companies; (c) did not provide him or his companies with a reasonable excuse for non-compliance with the Sch.36 notices; and (d) did not allow him or his companies to refuse to respond to enquiries raised as part of the corporation tax and self-assessment enquiries. The First-tier Tribunal had no jurisdiction to close HMRC&#8217;s investigation into whether the taxpayer should be prosecuted for tax fraud."
    ],
    "CITATION": "Stennett v Hancock [2016] UKFTT 82 (TC)",
    "COURT": "EWHC",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Z and others v United Kingdom",
        "(wl) British Celanese Ltd v AH Hunt (Capacitors) Ltd",
        "(wl) McLoughlin v O'Brian",
        "(wl) Montgomery v Lanarkshire Health Board",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Lamb v Camden LBC",
        "(wl) Pierce v Doncaster MBC",
        "(wl) Jobling v Associated Dairies",
        "(wl) Hughes v Lord Advocate",
        "(wl) McKenna v British Aluminium Ltd",
        "(wl) Boumedien v Delta Display Ltd"
    ],
    "NAME": "(wl) Evans v Triplex Safety Glass",
    "JUDGE": "Lord Jones",
    "CIT": "[2015] CSOH 178",
    "HELD": [
        "Case put out by order.",
        "(1) M&#8217;s common law case directed against C was irrelevant: C&#8217;s duty of reasonable care was sufficiently discharged by considering the terms of S&#8217;s reports and given that C was not averred to have had any specialised knowledge of environmental matters, there was no proper basis for averring that C knew, or ought to have known, from S&#8217;s reports of 1991, 1992 and 1994 that the investigations had been limited; in order to succeed, M would have had to establish that C owed them a non-delegable duty of care which, after a consideration of the authorities, they could not do, and to the extent that M sought to invoke the hazardous operations exception to the general rule, their attempt was misconceived where developing residential housing did not fall therein and, in the circumstances, C&#8217;s personal duty of care did not extend to checking S&#8217;s work. (2) M had pled a relevant common law case against S and were entitled to a proof: the duty cast on S was said to have been to take reasonable care in the performance of their work as environmental consultants for the safety of those whom they knew would occupy the houses to be built on the land, that it was their responsibility to investigate for contamination and to remediate, and in the circumstances of this case, it was not arguable that it would not be fair, just or reasonable to impose such a duty of care on S, Mitchell v Glasgow City Council [2008] CSIH 19, 2008 S.C. 351, distinguished ; it would not be possible until after proof to determine the precise nature and extent of S&#8217;s duties to M over the entire period of S&#8217;s involvement in the development but M had averred enough to entitle them to an inquiry. (3) M&#8217;s case against L fell to be dismissed: in so far as M&#8217;s case relied on the provisions of the Housing (Scotland) Act 1987, it was based on a misconstruction of the implied terms on which they founded, statutory and common law made it clear that a landlord&#8217;s obligations related to the repair of the fabric of the let property itself, in respect of which M had averred no defect; thereafter in respect of the alleged breach of statutory duty in the context of the 2001 Act, there was no averment that before the commencement of the Scottish secure tenancy or of when M became joint tenants, that L had failed to ensure that the house was reasonably fit for human habitation. (4) M&#8217;s contention that either C or S were in breach of s.33(1) of the 1990 Act had to be rejected: M had offered to prove, and had relevantly averred, that the ash, slag, volatile and semi-volatile organic compounds, and the ground contaminated thereby, in the part of the site where M&#8217;s homes were built was controlled waste for the purposes of Pt II of the Act, but M was specific about the dates when such waste was redistributed, namely the first quarters of 1993 and 1994, following the completion of which, S had issued a certificate of substantial completion in respect of which M contended that an act of deposit continued indefinitely but the contention that s.33(1) applied to a continuing state of affairs was misplaced, Thames Waste Management Ltd v Surrey CC [1997] Env. L.R. 148, considered . (5) M&#8217;s averments of causation were sufficient to entitle them to lead evidence to the effect that they had each suffered injury to their health as a result of the inhalation of solvents which, but for S&#8217;s fault, would have been discovered and removed before their homes were built. (6) On the time bar issue, M&#8217;s position was that neither had been aware until sometime after September 2009 that their injuries were attributable in whole, or in part, to an act or omission thus on the face of it, their right of action had expired and if postponement of the commencement of the triennium were to be put in issue, it would be for M to do so by asserting that it would not have been reasonably practicable to have become aware that their injuries were attributable, in whole or in part, to an act or omission so that the defenders would be given an opportunity to assert the contrary; it might be that all M required to add was a formal averment to the effect that it would not have been reasonably practicable for them to have acquired knowledge that the injuries were caused by an act or omission until a date falling after September 2009, and the case would be put out by order to allow M&#8217;s advisers the opportunity to consider the sufficiency of their pleadings."
    ],
    "ABSTRACT": [
        "Residents (M) of a street, which was formerly an industrial site, raised an action against developers (C) and environmental consultants (S) alleging that the site was contaminated with harmful chemicals which they had inhaled to their detriment.",
        "M pled common law fault against C and S, as well as breach of the Environmental Protection Act 1990 s.33(1)(a), in respect of which they sought damages in terms of s.73(6). M further claimed that their registered social landlord (L) had breached an implied term of their tenancy agreement that a house be provided in a tenantable and habitable condition, and were thereafter in breach of the Housing (Scotland) Act 2001 that a house be provided which was fit for human habitation.",
        "At procedure roll, each of the defenders raised pleas to the relevancy and argued that the action was time barred in terms of the Prescription and Limitation (Scotland) Act 1973 s.17. M averred inter alia that C were responsible for constructing the part of the site where M&#8217;s homes were located and that C knew of the risks to human health from contamination of land through the former uses thereof; that while remediation works carried out by S in 1993 and 1994 were neither commissioned nor instructed by C, they were nevertheless provided with copies of reports from which C should have known no testing had been done for solvents; C had failed to instruct further investigation of contamination for polyaromatic hydrocarbons or carcinogenic material in response to investigations done at part of the site in 2000 and 2001; and that they had failed to take reasonable care as a result of which the site continued to be contaminated by a variety of volatile and semi-volatile organic compounds. M&#8217;s case against S was predicated on their being environmental consultants, responsible for the investigation and remediation of the site, and it was averred inter alia that they failed to investigate and advise on the nature, concentration and distribution of contamination of the site by solvents as a reasonably competent environmental consultant would have done."
    ],
    "YEAR": "2015",
    "CATEGORIES": [
        "Civil Procedure",
        "Contaminated Land",
        "Pleadings",
        "Remoteness",
        "Scotland"
    ],
    "CATEGORY": "Civil Procedure &mdash; Contaminated Land &mdash; Pleadings &mdash; Remoteness &mdash; Scotland",
    "SUMMARY": [
        "A common law action by residents of a street, which was formerly an industrial site, against environmental consultants was relevantly pled and would be allowed to proceed where it was fair, just and reasonable to impose a duty of care on them."
    ],
    "COURT": "EWHC",
    "CITATION": "Evans v Triplex Safety Glass [2015] CSOH 178",
    "NUMBER": "449"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Wooldridge v Sumner",
        "(wl) Coltman v Bibby Takers Ltd",
        "(wl) Co-operative Group Ltd v Pritchard",
        "(wl) Worsley v Tambrands",
        "(wl) Ellison v Ministry of Defence",
        "(wl) Biffa Waste Services Ltd v Maschinenfabrik Ernst Hese GmbH",
        "(wl) Boumedien v Delta Display Ltd",
        "(wl) Barker v Corus (UK)",
        "(wl) Kennaway v Thompson",
        "(wl) Hussain v Lancaster CC",
        "(wl) Jolley v Sutton LBC",
        "(wl) Reeves v Metropolitan Police Commissioner"
    ],
    "NAME": "(wl) Aswan Engineering v Lupdine",
    "JUDGE": "Richards LJ; Globe J; Judge Kramer QC",
    "CIT": "[2013] EWCA Crim 257",
    "HELD": [
        "Applications refused",
        "Applications refused. (1) The court had to have the power to vacate the guilty pleas in the absence of an application by H and L or on their behalf. In any event, the judge could have dealt with the case by offering H and L an opportunity to vacate their pleas but allowing their pleas to stand as pleas to the amended indictment if they did not wish to vacate them. In substance, that was exactly the position that was reached by the alternative route adopted in the instant case, namely vacating the pleas and allowing H and L to enter fresh pleas, R. v W considered. H and L unequivocally accepted their guilt of the offence particularised in the amended indictment and there was nothing to cast the remotest doubt on the safety of their convictions (see paras 11-13 of judgment). (2) The judge was entitled to treat the offence as a Category 2 burglary. Taking everything into account, particularly L&#8217;s antecedents, the starting point and sentence after full credit for the plea were not arguably excessive (para.17)."
    ],
    "ABSTRACT": [
        "The appellants (H and L) applied for leave to appeal against their convictions for burglary of a dwelling. L applied for leave to appeal against his sentence of 10 months&#8217; imprisonment.",
        "H and L had entered pleas of guilty to an indictment charging them with an offence under the Theft Act 1968 s.9(1)(a). All concerned were aware that the building concerned was a dwelling, but the indictment did not specify that. When the error came to light, the judge granted permission to amend the indictment and ruled that the pleas should be vacated. H and L were then re-arraigned on the amended indictment and both pleaded guilty. L had 47 previous offences including a number of thefts and similar offences. In sentencing him, the judge found that the offence was a Category 2 burglary and, referring to his record, took a starting point of 15 months before giving full credit for the plea.",
        "H and L accepted that the judge had the power to allow the amendment to the indictment but submitted that the convictions were unsafe because the court did not have jurisdiction to vacate the guilty pleas without an application by a defendant. L submitted that the offence should have been assessed as a Category 3 burglary."
    ],
    "COUNSEL": "For the applicants: Andrew Morris. For the Crown: Gareth Patterson.",
    "CATEGORIES": [
        "Criminal Procedure Other Related Subjects: Sentencing",
        "Burglary",
        "Guilty Pleas",
        "Houses",
        "Indictments",
        "Mistake",
        "Sentencing Guidelines",
        "Starting Point"
    ],
    "CATEGORY": "Criminal Procedure Other Related Subjects: Sentencing &mdash; Burglary &mdash; Guilty Pleas &mdash; Houses &mdash; Indictments &mdash; Mistake &mdash; Sentencing Guidelines &mdash; Starting Point",
    "SUMMARY": [
        "Where an indictment for an offence of burglary erroneously failed to specify that the building in question was a dwelling, the court had jurisdiction to vacate pleas entered by the defendants and allow the indictment to be amended without the need for an application by one of the defendants."
    ],
    "COURT": "EWCA",
    "CITATION": "Aswan Engineering v Lupdine [2013] EWCA Crim 257",
    "NUMBER": "450",
    "YEAR": "2013"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Steel and Morris v UK",
        "(wl) Coventry v Lawrence (no 2)",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) A v United Kingdom",
        "(wl) Lawrence v Pembrokeshire County Council",
        "(wl) Vowles v Evans & the Welsh RFU",
        "(wl) Bone v Searle",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Dulieu v White",
        "(wl) Marcic v Thames Water Utilities Ltd",
        "(wl) St Helens Smelting Co v Tipping"
    ],
    "NAME": "(wl) Worsley v Tambrands",
    "JUDGE": "Charles J",
    "CIT": "[2016] EWCOP 21",
    "HELD": [
        "Application granted.",
        "(1) The court had jurisdiction to make the order. Reporting restrictions orders in serious medical treatment cases could extend beyond the death of the subject of those proceedings. There was no presumption or default position that such orders should end when the subject died, Meek, Re [2014] EWCOP 1, [2014] C.O.P.L.R. 535 and Press Association v Newcastle Upon Tyne Hospitals Foundation Trust [2014] EWCOP 6, [2014] C.O.P.L.R. 502 applied (see paras 9.1, 9.11, 98-108, 144-145 of judgment).",
        "(2) The duration of the order would be &#8220;until further order of the court&#8221;. There was no reason to order that reporting restrictions should terminate on the youngest daughter&#8217;s 18th birthday, as submitted by the respondent media organisations, as the two adult daughters also had valid art.8 rights which were engaged (paras 9.2, 9.14, 110-118, 142-143,167-169, 178-180).",
        "(3) Balancing art.8 and art.10 was a case-sensitive exercise. Care should be taken in transporting comment on the weight of rival factors from one type of case to another, S (A Child) (Identification: Restrictions on Publication), Re [2004] UKHL 47, [2005] 1 A.C. 593 applied and C v Secretary of State for Justice [2016] UKSC 2, [2016] 1 W.L.R. 444 considered (paras 9.3, 43, 69-73).",
        "(4) The first step was to consider whether there was a good reason for a public hearing. That was not an isolated or preliminary stage that, if such a good reason existed, would found an approach that the second stage was addressed on the premise the Court of Protection proceedings were treated in the same way as other proceedings where the default rule was that they were heard in public (para.9.4, 79-80, 90).",
        "(5) The default rule that Court of Protection hearings were held in private represented a general conclusion on how best to administer justice. Neither art.8 nor art.10 took precedence so it would be wrong to approach the default rule as creating a presumption. Rather it was part of the structure for a reasoning process which applied the approach in S (A Child) to a given case (paras 9.5, 80, 91-92).",
        "(6) In most cases, the important safeguards secured by a public hearing could be secured without identifying the people involved. Generally the court should ask (a) whether there were good reasons for a public hearing; (b) if so, whether there should be reporting restrictions; (c) how effective restrictions might be in promoting art 8 rights and how restrictive they would be of art.10 rights; (d) if the hearing was to be in public, what reporting restrictions should be imposed, and if the hearing was to be in private, what documents should be made public (paras 9.6, 9.7, 84-85, 96).",
        "(7) Hearings would almost always be in public because of the benefits of open justice (paras 9.8, 97).",
        "(8) Owing to the rival propositions relating to anonymisation, the court had to distinguish between cases falling within the default position of allowing media access, and cases where media access was restricted. The weight to be given to the general propositions regarding naming, and the court&#8217;s conclusion about what best promoted the administration of justice in any given case, would vary. They would often be taken into account in the context of (a) the validity of the reasons for the application, and (b) the impact of departing from the general conclusion on what generally promoted the administration of justice. Those reasons and that impact would need to be identified (paras 9.9, 9.10, 78, 95).",
        "(9) In the instant case it should have been clear to anyone with compassion that the focus of the reporting would, and did, add greatly to the distress of the deceased&#8217;s daughters, one of whom was still at school. Much of the publicity had been precipitated by a wish not only to report the bases on which the court reached its decision, but to attract prurient interest in the deceased&#8217;s sexual and relationship history. It was obvious that naming or otherwise identifying the deceased would increase the family&#8217;s distress. Their art.8 rights were engaged, not least because the investigatory jurisdiction of the Court of Protection had invaded their private and family lives. (para.9.13, 29-35, 43, 74-77, 130-143)."
    ],
    "ABSTRACT": [
        "The Court of Protection considered its jurisdiction to make a reporting restrictions order after the subject of the proceedings had died, and after previous reporting restrictions orders had ended.",
        "The deceased was a 50-year-old woman who had refused life-saving treatment. The case had attracted much media attention. The woman was a socialite, described in the press as wanting to die because she thought she had &#8220;lost her sparkle&#8221; and did not want to grow old. During Court of Protection proceedings to determine her capacity to refuse treatment there had been a reporting restrictions order expressed to be effective during her lifetime. After the death, media interest increased. A seven-day interim extension was granted on the basis that there was no public interest in the woman or her family being identified. At the instant hearing, an adult daughter applied for a further reporting restrictions order. It was agreed that an order was appropriate, but its duration was disputed. Issues arose as to the court&#8217;s general approach to granting such orders, particularly regarding the balance to be struck between ECHR art.8 and art.10."
    ],
    "COUNSEL": "For the applicant: Richard Spearman QC, Vikram Sachdeva QC, Victoria Butler-Cole. For the respondents: Adam Wolanski.",
    "CATEGORIES": [
        "Civil Procedure Other Related Subjects: Administration of Justice",
        "Human Rights",
        "Media and Entertainment",
        "Anonymity",
        "Capacity",
        "Death",
        "Duration",
        "Freedom of Expression",
        "Injunctions",
        "Life-Sustaining Treatment",
        "Press",
        "Reporting Restrictions",
        "Right to Respect For Private and Family Life"
    ],
    "CATEGORY": "Civil Procedure Other Related Subjects: Administration of Justice &mdash; Human Rights &mdash; Media and Entertainment &mdash; Anonymity &mdash; Capacity &mdash; Death &mdash; Duration &mdash; Freedom of Expression &mdash; Injunctions &mdash; Life-Sustaining Treatment &mdash; Press &mdash; Reporting Restrictions &mdash; Right to Respect For Private and Family Life",
    "SUMMARY": [
        "Reporting restrictions orders made by the Court of Protection in serious medical treatment cases could extend beyond the death of the subject of those proceedings. There was no presumption or default position that such orders should end when the subject died. The court considered the general approach which it should take to granting such orders."
    ],
    "COURT": "EWHC",
    "CITATION": "Worsley v Tambrands [2016] EWCOP 21",
    "NUMBER": "451",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Pierce v Doncaster MBC",
        "(wl) Harvey v Plymouth City Council",
        "(wl) Butcher v Southend-on-Sea BC",
        "(wl) The Scout Association v Barnes",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Hussain v Lancaster CC",
        "(wl) W v Essex County Council and Another",
        "(wl) Selwood v Durham CC",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Mullin v Richards"
    ],
    "NAME": "(wl) Richardson v LRC Products Ltd",
    "JUDGE": "Slade J",
    "CIT": "[2016] EWHC 569 (QB)",
    "HELD": [
        "Appeal allowed.",
        "The principal issue was whether the decision in JD v East Berkshire Community Health NHS Trust [2003] EWCA Civ 1151, [2004] Q.B. 558 had been impliedly overruled by Mitchell v Glasgow City Council [2009] UKHL 11, [2009] 1 A.C. 874 or Michael v Chief Constable of South Wales [2015] UKSC 2, [2015] A.C. 1732. Since the decision in X v Bedfordshire , which had been reached on policy grounds, JD v East Berkshire had reviewed the impact of the Human Rights Act 1998 on the common law principles of negligence and had determined that when considering a child&#8217;s claim in negligence the court had to take into account their rights under the ECHR. Further, following developments in domestic jurisprudence, the effect of the X v Bedfordshire case was restricted to the core proposition that decisions by a local authority whether or not to take a child into care were not reviewable by way of a claim in negligence, JD v East Berkshire followed. The references to JD v East Berkshire in para.7 of Mitchell and in Michael were all to the appeals of the parents and did not affect the dicta of the Court of Appeal in the cases concerning the children, except for para.191 in Michael where in the dissenting judgment of Baroness Hale she had accepted that JD v East Berkshire provided an exception to the general rule that public authorities which failed to perform their duties did not owe a duty of care in negligence towards individuals who suffered harm thereby. As neither Mitchell nor Michael had implicitly overruled JD v East Berkshire, it remained binding authority, Mitchell and Michael considered. The children&#8217;s claims had been wrongly struck out and were reinstated (see paras 40-44 of judgment)."
    ],
    "ABSTRACT": [
        "Two children appealed by their litigation friend against the striking out of their claims for damages in negligence against the local authority.",
        "Both children were minors and one was severely disabled and a protected party. They had both suffered prolonged abuse, and anti-social and criminal behaviour perpetrated by members of a family who lived on the same council estate. That family had been reported to the local authority for causing trouble before the children and their mother moved in. Their claim was struck out on the basis that there was no common law duty of care imposed by the Children Act 1989.",
        "It was submitted for the children that the master had wrongly struck out their claims on the ground that no duty of care arose, in reliance on the case of X (Minors) v Bedfordshire CC [1995] 2 A.C. 633 and the Tenth Edition of &#8220;Charlesworth &amp; Percy on Negligence&#8221;."
    ],
    "COUNSEL": "For the claimant: Elizabeth-Anne Gumbel QC, Iain O&#8217;Donnell. For the defendant: Paul Stagg.",
    "CATEGORIES": [
        "Personal Injury Other Related Subjects: Negligence",
        "Local Government",
        "Anti-Social Behaviour",
        "Breach of Duty of Care",
        "Children'S Welfare",
        "Disabled Persons",
        "Local Authorities' Powers and Duties",
        "Negligence",
        "Personal Injury"
    ],
    "CATEGORY": "Personal Injury Other Related Subjects: Negligence &mdash; Local Government &mdash; Anti-Social Behaviour &mdash; Breach of Duty of Care &mdash; Children'S Welfare &mdash; Disabled Persons &mdash; Local Authorities' Powers and Duties &mdash; Negligence &mdash; Personal Injury",
    "SUMMARY": [
        "Claims by children for negligence against a local authority had been wrongly struck out and were reinstated. Such claims formed an exception to the general rule that public authorities which failed to perform their duties owed no duty of care in negligence towards individuals who had suffered harm."
    ],
    "COURT": "EWHC",
    "CITATION": "Richardson v LRC Products Ltd [2016] EWHC 569 (QB)",
    "NUMBER": "452",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) A v United Kingdom",
        "(wl) Coventry v Lawrence (no 2)",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Steel and Morris v UK",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) ICI v Shatwell",
        "(wl) Roe v Minister of Health",
        "(wl) Ames v The Spamhaus Project Ltd",
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) Joyce v O'Brien",
        "(wl) Van Colle v Chief Constable of Hertfordshire",
        "(wl) Worsley v Tambrands"
    ],
    "NAME": "(wl) A and others v National Blood Authority",
    "JUDGE": "Laws LJ; Poole J",
    "CIT": "[2001] EWHC Admin 554",
    "HELD": [
        "dismissing the appeal and refusing the application for judicial review, that football banning orders were not &#8220;penalties&#8221; for the purposes of Art.7, since the purpose of such orders was to protect the general public from football violence, not to inflict punishment on the individuals concerned, Welch v United Kingdom (A/307-A) (1995) 20 E.H.R.R. 247 considered. Moreover, the banning regime did not constitute a violation of EC law. The EC Treaty Art.46, which authorised special treatment for foreign nationals, served to implicitly endorse the recognition that a Member State was justified, on public policy grounds, in imposing restrictions on its own nationals. The United Kingdom was entitled to its view that banning orders were a proportionate response to football violence."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For G and S: Rhodri Thompson and Jessica Simor. For M: Alan Newman Q.C. and Timothy Moloney. For L: Alan Newman Q.C. and Scott Wilson. For the Chief Constable: Philip Havers Q.C. and Simon Davenport. For the prosecution: Philip Havers Q.C., Simon Davenport and James Hargan. For the Secretary of State: David Pannick Q.C. and Mark Hoskins. For the magistrates court: Not represented.",
    "CATEGORIES": [
        "Criminal Law",
        "Ec Law",
        "Football",
        "Free Movement of Persons",
        "Human Rights",
        "Proportionality",
        "Public Order Offences"
    ],
    "CATEGORY": "Criminal Law &mdash; Ec Law &mdash; Football &mdash; Free Movement of Persons &mdash; Human Rights &mdash; Proportionality &mdash; Public Order Offences",
    "SUMMARY": [
        "Banning orders under the Football Spectators Act 1989 s.14A and s.14B as amended by the Football (Disorder) Act 2000 were not &#8220;penalties&#8221; for the purposes of the Human Rights Act 1998 Sch.1 Part I Art.7 and the banning regime did not constitute a violation of EC law standards of procedural fairness.",
        "G and others appealed against, and M sought judicial review of, orders banning them from travelling overseas to attend football matches. It was contended that such orders imposed under the Football Spectators Act 1989 s.14A and s.14B, as amended by the Football (Disorder) Act 2000, were &#8220;penalties&#8221; for the purposes of the Human Rights Act 1998 Sch.1 Part I Art.7 and that the banning regime contravened EC law provisions relating to freedom of movement."
    ],
    "COURT": "EWHC",
    "CITATION": "A and others v National Blood Authority [2001] EWHC Admin 554",
    "NUMBER": "453",
    "YEAR": "2001"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) James McNaughton Paper Group Ltd v Hicks Anderson & Co",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) W v Essex County Council and Another",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Jobling v Associated Dairies",
        "(wl) Hill v Chief Constable of West Yorkshire"
    ],
    "NAME": "(wl) Bogle v McDonald's Restaurants Ltd",
    "CIT": "[2002] EWHC 490 (QB)",
    "YEAR": "2002",
    "COUNSEL": "For B: Tim Horlock Q.C. and Christopher Kennedy. For M: Kate Thirlwall Q.C. and Simon King.",
    "JUDGE": "Field J",
    "NUMBER": "454",
    "CATEGORIES": [
        "Negligence",
        "Beverages",
        "Consumer Safety",
        "Directives",
        "Duty of Care",
        "Ec Law",
        "Negligence",
        "Restaurants",
        "Warnings"
    ],
    "CATEGORY": "Negligence &mdash; Beverages &mdash; Consumer Safety &mdash; Directives &mdash; Duty of Care &mdash; Ec Law &mdash; Negligence &mdash; Restaurants &mdash; Warnings",
    "SUMMARY": [
        "McDonald&#8217;s was not negligent in serving hot drinks at the temperature that it did or in providing such drinks in the cups and lids that it did."
    ],
    "CITATION": "Bogle v McDonald&#8217;s Restaurants Ltd [2002] EWHC 490 (QB)",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Spencer v Wincanton Holdings Ltd",
        "(wl) Kent v Griffiths",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Baturina v Times Newspapers",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Barber v Somerset County Council",
        "(wl) Harvey v Plymouth City Council",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) Jolley v Sutton LBC",
        "(wl) Doughty v Turner Manufacturing Co",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) Corr v IBC Vehicles Ltd"
    ],
    "NAME": "(wl) Pollard v Tesco Stores",
    "CIT": "[2006] EWCA Civ 393",
    "HELD": [
        "allowing the appeal and dismissing the cross appeal, that (1) this was a case of breach of statutory duty or nothing. One aspect of the factual scenario which, having exonerated P, the judge accepted, was that it was surely not reasonably foreseeable that this injury would happen as he found it did. In a case such as the instant, any calculation of foreseeability had to assume that the child&#8217;s parents would take steps in the home to prevent the child having access to the bottle. Every case must be judged by the colour of its own facts and, in the instant case, foreseeability could not be got out of the fact that it proved possible for C to open the bottle coupled with the fact that the British Standard certificate was not met. Accordingly, the case turned upon whether there was a breach of the 1987 Act. (2) The test as to whether a product had a defect under the 1987 Act was what persons generally were entitled to expect. Persons were generally entitled to expect that the bottle in the instant case would be more difficult to open than if it had an ordinary screwtop. Anything more specific, as a test of public expectation, ran into difficulties. The bottle was more difficult to open than an ordinary screwtop, though not as difficult as it would have been if the British Standard torque measure had been complied with. Thus, there was no breach of the 1987 Act. (3) The judge was entitled to accept P&#8217;s account of events and he was entitled to reach his conclusions as to the way the accident happened."
    ],
    "COUNSEL": "For the appellants: John Norman. For the respondent: Timothy Briden. For the cross-appellant: Neil Block QC.",
    "JUDGE": "Laws LJ; Wilson LJ; Sir Paul Kennedy",
    "NUMBER": "455",
    "CATEGORIES": [
        "Consumer Law Other Related Subjects: Negligence",
        "Bottles",
        "Consumer Protection",
        "Consumer Safety",
        "Defects",
        "Foreseeability"
    ],
    "CATEGORY": "Consumer Law Other Related Subjects: Negligence &mdash; Bottles &mdash; Consumer Protection &mdash; Consumer Safety &mdash; Defects &mdash; Foreseeability",
    "SUMMARY": [
        "Consumer protection; Bottles; Child resistant closure caps; Defective caps",
        "The appellants (T) appealed against a decision granting judgment in favour of the respondent (C) in a personal injury action. C, who was 13 months old at the time, was injured when he ingested dishwasher powder from a plastic bottle. The powder had been purchased from the first appellant, but the bottle had been manufactured by the second appellant. The claim against T was that the bottle and cap had been defective so that the cap was easier to detach than it should have been. The cap was a child resistant closure (CRC) cap. T joined C&#8217;s mother (P) to the action on the basis of their claim that she had left the bottle in a place where C could see and reach it, and had left the cap off or not properly screwed up. The judge found T liable and acquitted P of any negligence. The judge held that, having elected to fit a CRC cap to the bottle, the consumer was entitled to expect the cap to function at least up to the standard usually to be applied to CRCs, namely the British Standard certificate. He held that there was a defect in the cap for a number of reasons, in particular that there had been play between the cap and screw and very much less torque was required to open it. He accordingly held T liable in negligence at common law and under the Consumer Protection Act 1987 . T argued that the judge had erred in finding them liable. In the event that the appeal was allowed, C, challenging the judge&#8217;s exoneration of P, argued that (1) it must have been foreseeable that a child would be liable to suffer injury if he got access to the contents of the bottle; (2) under the 1987 Act, the public was entitled to expect that the product would function to the full extent of the design standard to which it was manufactured, which in the instant case meant the same as compliance with the British Standard torque measure. C submitted that given that a CRC cap was advisedly put onto the bottle design for safety reasons, s.3 of the 1987 Act sufficed to import the British Standard torque measure into the content of general public expectation."
    ],
    "CITATION": "Pollard v Tesco Stores [2006] EWCA Civ 393",
    "COURT": "EWCA",
    "YEAR": "2006"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Monk v PC Harrington Ltd",
        "(wl) Ferguson v John Dawson & Partners (Contractors) Ltd",
        "(wl) Phipps v Rochester Corporation",
        "(wl) White v Chief Constable of South Yorkshire",
        "(wl) Pollard v Tesco Stores",
        "(wl) Gregg v Scott",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Coventry v Lawrence",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Kennaway v Thompson",
        "(wl) Smith v Leech Brain and Co Ltd"
    ],
    "NAME": "(wl) Piper v JRI (Manufacturing) Ltd",
    "CIT": "[2006] EWCA Civ 1344",
    "HELD": [
        "dismissing the appeal, that (1) any imperfections which arose during the machining and polishing process would have been identified at or before the final inspection process. On a visual inspection, a surface defect of 35 microns or more could be detected. There was no evidence to suggest that the surface point defect that initiated the fracture was smaller than 35 microns; therefore the system was capable of detecting the defect. It could be inferred that the defect would have been detected had it been present prior to delivery at the hospital. The judge had been correct to find that the prosthesis was not defective at the time it was supplied to the hospital. (2) P had raised his alternative case in the pleadings, but had not pursued it because the judge had indicated that he was not impressed by it. It was important for parties to identify the issues to which the evidence was to be directed and in relation to which the trial was to be conducted. Once P chose not to pursue his alternative case, it was not incumbent on J to deal with it. The court, on appeal, could not deal with the issues raised in the alternative case."
    ],
    "COUNSEL": "For the appellant: Simeon Maskrey QC. For the respondent: RF Owen QC, Toby Stewart.",
    "JUDGE": "Mummery LJ; Thomas LJ; Maurice Kay LJ",
    "NUMBER": "456",
    "CATEGORIES": [
        "Consumer Law",
        "Damages",
        "Defective Products",
        "Defects",
        "Hip Joint",
        "Issues",
        "Medical Equipment"
    ],
    "CATEGORY": "Consumer Law &mdash; Damages &mdash; Defective Products &mdash; Defects &mdash; Hip Joint &mdash; Issues &mdash; Medical Equipment",
    "SUMMARY": [
        "defective products; medical equipment; defects in hip prosthesis; time when damage occurred",
        "The appellant (P) appealed against a decision dismissing his claim for damages against the respondent prosthetics manufacturer (J). P had had a total hip replacement operation that involved the implantation of a prosthesis supplied by J. After the operation, the prosthesis sheared in two and it had to be removed and replaced, which resulted in P losing a significant amount of mobility. P brought an action for damages claiming that J was strictly liable under the Consumer Protection Act 1987 . On examination of the prosthesis after it was removed, two defects were found. At trial, it was J&#8217;s case that their manufacturing and inspection process was such that the prosthesis had no defect when they supplied it to the hospital, and it was most likely that the defect occurred when the prosthesis was implanted. It was P&#8217;s case that the defects found on examination of the prosthesis after the fracture were caused during the explantation of the prosthesis, and those defects or at least one of them had covered up a pre-existing surface point defect which had initiated the fracture, and which had been present prior to implantation. The trial judge&#8217;s conclusion was that it was not possible to say precisely when the damage to the prosthesis was caused, but that the more likely time would have been at explantation rather than implantation. The judge found that the prosthesis left J&#8217;s factory without any defects, so that J succeeded in establishing the statutory defence under s.4 of the 1987 Act. P submitted that (1) the judge had erred in his analysis of the evidence in reaching his determination based on the evidence as to the surface point defect and manufacturing process; (2) the judge should have considered P&#8217;s alternative case that J had produced a prosthesis which was defective in that a surface point defect, capable of initiating a fracture, could be caused during the ordinary course of implantation."
    ],
    "CITATION": "Piper v JRI (Manufacturing) Ltd [2006] EWCA Civ 1344",
    "COURT": "EWCA",
    "YEAR": "2006"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Patchett v Swimming Pool Trades Association",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Attorney General of the British Virgin Islands v Hartwell",
        "(wl) British Celanese Ltd v AH Hunt (Capacitors) Ltd",
        "(wl) Selwood v Durham CC",
        "(wl) Van Colle v Chief Constable of Hertfordshire",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Bernard v Attorney General of Jamaica",
        "(wl) Chester v Afshar",
        "(wl) Osman v Ferguson",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Ministry of Defence v Radclyffe"
    ],
    "NAME": "(wl) Lennon v Commissioner of Police of the Metropolis",
    "CIT": "[2004] EWCA Civ 130",
    "HELD": [
        "dismissing the appeal, that (1) no new category of duty situation had been created by the judge&#8217;s decision. The particular facts found by the judge brought the case within the Hedley Byrne principle. It was well established that liability in tort for pure economic loss could arise from the negligent carrying out of a task undertaken pursuant to an express voluntary assumption of responsibility, on which L had relied, Hedley Byrne applied. (2) It did not matter that B was not a professional adviser, Spring v Guardian Assurance Plc [1995] 2 A.C. 296 applied, since she had expressly assumed responsibility in L&#8217;s transfer for giving him advice in relation to the loss of the housing allowance, which he had expressly raised with her. B had, or had access to, special complex knowledge concerning the effect of transfers on service allowances of that kind and she had led L to believe that he could leave it to her. She had not told him to seek advice elsewhere. Those features of the case were sufficient to attract a duty to give him advice in respect of the very type of loss about which he had expressed his concern to her and which he had actually suffered as a result of her failure to advise him. (3) L had not invoked a general contractual duty of care positively to give advice to protect him from economic loss, Outram v Academy Plastics distinguished. There was nothing in the case to prevent the Hedley Byrne principle from applying to an omission to give advice in the circumstances, even though the parties were in a relationship akin to that of employer and employee."
    ],
    "COUNSEL": "For the appellant: Timothy Pitt-Payne. For the respondent: Gavin Millar QC, Anthony Hudson.",
    "JUDGE": "Ward LJ; Mummery LJ; Rix LJ",
    "NUMBER": "457",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Police",
        "Advice",
        "Assumption of Responsibility",
        "Economic Loss",
        "Police Officers"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Police &mdash; Advice &mdash; Assumption of Responsibility &mdash; Economic Loss &mdash; Police Officers",
    "SUMMARY": [
        "It was fair, just and reasonable to impose on the police commissioner a duty of care to give advice to an officer in his force to protect him from economic loss.",
        "The defendant Commissioner appealed against a judgment that he was liable in negligence for pure economic loss suffered by the claimant (L) as a result of the failure of an employee (B) to give L advice. L was a serving police officer who was in non contractual relationship with the Commissioner akin to that of employment. B had handled the arrangements for L&#8217;s transfer to another force. She had told him, in response to his specific inquiry, that his allowances would not be affected if he took time off work before starting with the new force. However, under the arrangements made by B, there was a break in the continuity of L&#8217;s service with the result that he did not retain the benefit of a housing allowance. L argued that, as a result of B&#8217;s failure to give proper advice, he had suffered loss of entitlement to the housing allowance and the Commissioner was vicariously liable for the handling of arrangements for his transfer. The judge held that the Commissioner had breached a duty of care owed to L to arrange the transfer, including the giving of advice, so as to ensure that he did not lose his allowances. The Commissioner submitted (1) the judge&#8217;s radical departure from the existing law; (2) B was not a professional adviser and was not under any positive duty to give L advice about the choice of a leaving date; (3) it was not fair, just or reasonable to impose on an employer a decision which involved a general duty of care to give advice to an employee in order to protect them from economic loss and the same reasoning should apply to the relationship between himself and L, Outram v Academy Plastics Ltd [2001] I.C.R. 367 cited. L argued that the judge had correctly applied the principle in Hedley Byrne &amp; Co Ltd v Heller &amp; Partners Ltd [1964] A.C. 465."
    ],
    "CITATION": "Lennon v Commissioner of Police of the Metropolis [2004] EWCA Civ 130",
    "COURT": "EWCA",
    "YEAR": "2004"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) White v Chief Constable of South Yorkshire",
        "(wl) Thompson v Smiths Shiprepairers (North Shields) Ltd",
        "(wl) Haseldine v Daw",
        "(wl) Mullin v Richards",
        "(wl) Various Claimants v Institute of the Brothers of the Christian Schools",
        "(wl) LMS International v Styrene Packaging Ltd",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Wooldridge v Sumner",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Jolley v Sutton LBC",
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) Hill v Chief Constable of West Yorkshire"
    ],
    "NAME": "(wl) Esso Petroleum v Mardon",
    "JUDGE": "Lord Denning MR; Ormrod LJ; Shaw LJ",
    "CIT": "[1976] QB 801",
    "HELD": [
        "(1) the statement as to potential throughput was a contractual warranty, and the plaintiffs were liable for damages for its breach; (2) the statement was a negligent representation made by a party holding himself out as having special expertise in circumstances where a duty of care existed to take care that it was correct; (3) the measure of damage in both cases was the same, i.e. what D had lost by being induced to enter into the contract, which should be assessed on the same lines as damages for personal injuries to include estimated loss of earnings. ( Hedley Byrne &amp; Co Ltd v Heller &amp; Partners Ltd [1964] A.C. 465 applied Bisset v Wilkinson [1927] A.C. 177 distinguished)."
    ],
    "FLAGS": [
        "Criticised",
        "Denning"
    ],
    "YEAR": "1976",
    "CATEGORIES": [
        "Contracts Other Related Subjects: Negligence",
        "Contracts",
        "Misrepresentation",
        "Negligence"
    ],
    "CATEGORY": "Contracts Other Related Subjects: Negligence &mdash; Contracts &mdash; Misrepresentation &mdash; Negligence",
    "SUMMARY": [
        "Negligence; negligent mis-statement; duty of care; special relationship in pre-contract negotiations",
        "Where a special relationship exists, a negligent mis-statement may be not only a breach of contractual warranty, but also an actionable tort as a breach of the duty of care which exists throughout pre-contractual negotiations and which survives the making of the ultimate contract. Esso granted a tenancy of a new filling station to D. During negotiations they told him that they estimated an annual &#8220;throughput&#8221; of petrol at 200,000 gallons a year by the third year. Due to the physical characteristics and layout of the site, the figure after three years was still under 100,000. D lost all his money. He entered into a new tenancy with Esso at a reduced rent plus a surcharge on petrol sold. The losses continued and D was unable to pay cash for the petrol. Esso cut off his supplies and eventually he had to surrender possession. He counterclaimed for breach of warranty, and for negligent misrepresentation."
    ],
    "COURT": "EWCA",
    "CITATION": "Esso Petroleum v Mardon [1976] QB 801",
    "NUMBER": "458"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Bogle v McDonald's Restaurants Ltd",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) Kent v Griffiths",
        "(wl) JD v East Berkshire Community Health NHS Trust",
        "(wl) W v Essex County Council and Another",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Jobling v Associated Dairies"
    ],
    "NAME": "(wl) James McNaughton Paper Group Ltd v Hicks Anderson & Co",
    "JUDGE": "Neill LJ; Nourse LJ; Balcombe LJ",
    "CIT": "[1991] 2 QB 113",
    "HELD": [
        "Appeal allowed. JMPG should not have relied on the draft accounts without having them examined by their own accountants. The circumstances in which the necessary relationship between the maker of a statement and the recipient might be held to exist as defined in Caparo Industries Plc v Dickman [1990] 2 A.C. 605, were considered and applied. HA could not have foreseen that JMPG would treat the accounts as final without further examination and in the circumstances JMPG had been unable to prove that a duty of care was owed to it by HA."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1991",
    "CATEGORIES": [
        "Negligence",
        "Accountants",
        "Duty of Care",
        "Professional Negligence",
        "Take Overs"
    ],
    "CATEGORY": "Negligence &mdash; Accountants &mdash; Duty of Care &mdash; Professional Negligence &mdash; Take Overs",
    "SUMMARY": [
        "Duty of care; preparation of company&#8217;s accounts; accountants&#8217; duty to takeover bidder; whether duty owed",
        "HA, accountants to the MK Paper Group (MK), appealed against the finding that they owed a duty of care, when preparing accounts, to JMPG, a firm considering taking over MK. JMPG suggested that the valuation of MK&#8217;s shares for the purpose of the take over should be made on values certified by MK&#8217;s accountants and examined by JMPG&#8217;s auditors. The chairman of MK asked HA to prepare the annual accounts as quickly as possible. Draft accounts were provided to MK&#8217;s chairman who then passed on the information to JMPG. The take over went ahead. When JMPG&#8217;s accountants subsequently discovered errors in the accounts, an action in negligence was brought for loss and damage suffered in the take over."
    ],
    "COURT": "EWCA",
    "CITATION": "James McNaughton Paper Group Ltd v Hicks Anderson &amp; Co [1991] 2 QB 113",
    "NUMBER": "459"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) British Chiropractic Association v Singh",
        "(wl) Reynolds v Times Newspapers Ltd",
        "(wl) Coventry v Lawrence (no 2)",
        "(wl) The Scout Association v Barnes",
        "(wl) John v MGN Ltd",
        "(wl) Aswan Engineering v Lupdine",
        "(wl) Dobson v Thames Water Utilities",
        "(wl) Clift v Slough BC",
        "(wl) Keown v Coventry Healthcare NHS Trust",
        "(wl) Hufton v Somerset CC",
        "(wl) Waterson v Lloyd",
        "(wl) Allen v Chief Constable of Hampshire"
    ],
    "NAME": "(wl) Customs and Excise Commissioners v Barclays Bank",
    "JUDGE": "Lord Hoffmann; Lord Hope of Craighead; Lord Scott of Foscote; Baroness Hale of Richmond; Lord Neuberger of Abbotsbury",
    "CIT": "[2007] UKHL 28",
    "HELD": [
        "Appeals allowed.",
        "(1) Upon the true construction of s.31(1), &#8220;intention&#8221; meant what the relevant audience, namely the users of the way, would reasonably have understood the landowner&#8217;s intention to be. The law as stated by Denning L.J. in Fairey v Southampton CC [1956] 2 Q.B. 439 and Hobhouse L.J. in Secretary of State for the Environment v Beresford Trustees [1996] N.P.C. 128 was correct, Fairey and Beresford applied. The test was objective: the reasonable user would have to understand that the landowner was intending to disabuse him of the notion that the land was a public highway. Outside the criminal law and parts of the law of torts, it was common to use the word &#8220;intention&#8221; in an objective sense. The Court of Appeal had taken too narrow a view of the purpose and effect of the proviso. It had been drafted against the background of the common law. The presumption of dedication at common law involved a dialogue between the landowner and the public. A landowner had to communicate his intention to the public in some way if he was to satisfy the requirements of the proviso, Mann v Brodie (1885) 10 App. Cas. 378 considered and Folkstone Corp v Brockman [1914] A.C. 338 superseded. Furthermore, if an uncommunicated intention sufficed to satisfy the proviso, then the elaborate and time-consuming measures provided for in s.31(3) to s.31(6) would have no point. (2) The phrase &#8220;during that period&#8221; in the proviso to s.31(1) meant &#8220;at some point during that period&#8221;. The intention not to dedicate did not have to be continuously demonstrated for the whole 20-year period, R. v Secretary of State for the Environment Ex p. Blake [1984] J.P.L. 101 and Merstham Manor Ltd v Coulsdon and Purley Urban DC [1937] 2 K.B. 77 considered."
    ],
    "ABSTRACT": [
        "An issue arose in joined cases as to the effect of the presumption in the Highways Act 1980 s.31(1).",
        "The appellants in both cases claimed that land owned by the respondents had achieved the status of a public path by 20 years&#8217; public user. The cases turned on whether the landowners had shown &#8220;sufficient evidence&#8221; that they had no intention during the relevant 20-year period to dedicate the land as a public path. The issues for determination were (i) whether the &#8220;intention&#8221; in s.31(1) had to be communicated contemporaneously to members of the public using the way, or whether an intention held by the landowner but not revealed to anybody could constitute &#8220;sufficient evidence&#8221;; (ii) whether the phrase &#8220;during that period&#8221; in the proviso to s.31(1) meant &#8220;during the whole of that period&#8221; or &#8220;at some point during that period&#8221;."
    ],
    "FLAGS": [
        "Approved",
        "Hale",
        "Neuberger",
        "Hoffmann"
    ],
    "COUNSEL": "For the appellants: George Laurence QC, Ross Crail. For the respondents: Timothy Mould QC, David Blundell. For the interveners: Edwin Simpson.",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Road Traffic",
        "Dedication",
        "Highways",
        "Intention",
        "Landowners",
        "Public Rights of Way",
        "Statutory Interpretation",
        "Sufficiency of Evidence"
    ],
    "CATEGORY": "Real Property Other Related Subjects: Road Traffic &mdash; Dedication &mdash; Highways &mdash; Intention &mdash; Landowners &mdash; Public Rights of Way &mdash; Statutory Interpretation &mdash; Sufficiency of Evidence",
    "SUMMARY": [
        "Under the Highways Act 1980 s.31(1) there could only be &#8220;sufficient evidence&#8221; that a landowner had no intention to dedicate a path as a public way if the landowner performed overt acts so that the relevant audience, namely the users of the way, would reasonably have understood his intention."
    ],
    "COURT": "UKHL",
    "CITATION": "Customs and Excise Commissioners v Barclays Bank [2007] UKHL 28",
    "NUMBER": "460",
    "YEAR": "2007"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Lennon v Commissioner of Police of the Metropolis",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) JD v East Berkshire Community Health NHS Trust",
        "(wl) Selwood v Durham CC",
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Dorset Yacht Co Ltd v Home Office",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) Kent v Griffiths",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Swinney v Chief Constable of Northumbria",
        "(wl) Joyce v O'Brien"
    ],
    "NAME": "(wl) Patchett v Swimming Pool Trades Association",
    "JUDGE": "Lord Clarke MR; Scott Baker LJ; Smith LJ",
    "CIT": "[2009] EWCA Civ 717",
    "HELD": [
        "Appeal dismissed.",
        "(Smith LJ dissenting) S had not owed P a duty of care in the circumstances. S had made representations on its website which it had expected, or at least hoped and reasonably foreseen, would be acted upon by people like P, including representations that those on its members list would have the benefits of membership because there was no indication that there were different types of member. However, it was necessary to look at the statements made on the website as a whole, and those statements had included reference to an information pack supplied by S. S could reasonably have expected potential customers to have regard to all the information potentially available from the website and not just part of it, and to obtain an information pack. If P had asked for the information pack and the list of members referred to on the website, it would have become immediately apparent that C was not a full member and was not covered by the warranty scheme. In all the circumstances it could not fairly be held that S had assumed a legal responsibility to the claimants for the accuracy of the statements in its website without the further enquiry which the website itself had urged, Hedley Byrne &amp; Co Ltd v Heller &amp; Partners Ltd [1964] A.C. 465 and Caparo Industries Plc v Dickman [1990] 2 A.C. 605 considered. There had been no assumption of responsibility because the degree of reliance which S had intended or should reasonably have expected would be placed on the accuracy of the statements on its website was limited by the advice that potential customers should obtain an information pack. In the circumstances there had not been a sufficient relationship of proximity between S and P to give rise to a duty of care and it would not be fair, just and reasonable to hold that S had owed them a duty to take care, Customs and Excise Commissioners v Barclays Bank Plc [2006] UKHL 28, [2007] 1 A.C. 181 followed. To hold that S had owed a duty of care to P would not be only a small increment or development from existing case law. The mere fact that the representations had been contained on a website did not support the conclusion that a duty of care was owed; all depended on the circumstances."
    ],
    "ABSTRACT": [
        "The appellants (P) appealed against a decision that the respondent trade association (S) did not owe P a duty of care in respect of certain statements made on S&#8217;s website.",
        "S was an incorporated trade association for swimming pool installers. P were looking for a contractor to build them a swimming pool in the garden of their home. They obtained details of installers from S&#8217;s website. They contracted with one installer (C). C was only an affiliate member of S and as such was not subject to the same vetting as a full member and was not subject to S&#8217;s bond and warranty scheme. C began the work but became insolvent and did not complete it. P had the work completed by other contractors. P&#8217;s case was that C did not carry out the work with reasonable skill and care. P&#8217;s claim was for the cost of completing the work plus the amount paid to C less the amount they would have paid to C if it had completed the contract. P brought proceedings against S to recover their financial loss alleging negligent misstatement. They claimed that they had relied on statements on S&#8217;s website which were inaccurate and misleading because C was not a full member of S, was not a competent contractor, became insolvent and provided installations which did not benefit from S&#8217;s warranty scheme. The judge held that S did not owe a duty of care to P essentially because, although S knew that the representations on the website would be likely to be acted upon by people like P, it would not expect them to do so without further enquiry."
    ],
    "COUNSEL": "For the appellants: Jamie McCracken. For the respondents: George Woods.",
    "CATEGORIES": [
        "Negligence Other Related Subjects: Information Technology",
        "Assumption of Responsibility",
        "Duty of Care",
        "Economic Loss",
        "Negligent Misstatement",
        "Proximity",
        "Reliance",
        "Websites"
    ],
    "CATEGORY": "Negligence Other Related Subjects: Information Technology &mdash; Assumption of Responsibility &mdash; Duty of Care &mdash; Economic Loss &mdash; Negligent Misstatement &mdash; Proximity &mdash; Reliance &mdash; Websites",
    "SUMMARY": [
        "In all the circumstances it could not fairly be held that a trade association had assumed a legal responsibility to the claimants for the accuracy of the statements in its website without the further enquiry which the website itself urged."
    ],
    "COURT": "EWCA",
    "CITATION": "Patchett v Swimming Pool Trades Association [2009] EWCA Civ 717",
    "NUMBER": "461",
    "YEAR": "2009"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Ministry of Defence v Radclyffe",
        "(wl) Van Colle v Chief Constable of Hertfordshire",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) Ferguson v John Dawson & Partners (Contractors) Ltd",
        "(wl) Worsley v Tambrands",
        "(wl) R v Rimmington; R v Goldstien",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Selwood v Durham CC",
        "(wl) Ames v The Spamhaus Project Ltd",
        "(wl) Steel and Morris v UK",
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) Crown River Cruises Ltd v Kimbolton Fireworks Ltd"
    ],
    "NAME": "(wl) St Helens Smelting Co v Tipping",
    "JUDGE": "Lord Neuberger PSC; Lady Hale DPSC; Lord Mance JSC; Lord Kerr JSC; Lord Hughes JSC",
    "CIT": "[2015] UKSC 69",
    "HELD": [
        "Appeal dismissed.",
        "(Lady Hale dissenting) (1) It was not open to the secretaries of state to assert that the acts of the British soldiers were not attributable to the UK. While on active service in Malaya, the soldiers remained under the command of the Crown. There was no question of their secondment to any other authority. The secretaries of state could not argue that any liabilities of the Crown had passed to the Federation of Malaya when it became independent in 1957. Even if responsibility for the deaths had transferred to the Federation under the Federal Constitution of 1957, that could not affect any domestic law duty which the UK would otherwise have towards victims of prior misconduct by the British army. The general rule was that state liability for a death remained with the state responsible for the deaths and did not pass to a state which took over the relevant territory or activities (see paras 178, 187-197 of judgment). (2) (Lord Kerr and Lady Hale agreeing that the art.2 claim should fail but dissenting in relation to when the critical date was) The ECHR did not bind a contracting party in relation to any act or fact which took place before the ECHR had entered into force with respect to that party (the &#8220;critical date&#8221;). However, according to the principles set out in Janowiec v Russia (55508/07) (2014) 58 E.H.R.R. 30 a duty to investigate could arise under art.2 where two criteria were satisfied. In the instant case, the first criterion was satisfied: there had been relevant &#8220;acts or omissions&#8221; after the critical date because there had been no full or public investigation of the killings and compelling evidence had come to light suggesting that they were unlawful. However, the second criterion had not been satisfied: there was no &#8220;genuine connection&#8221; between the deaths and the critical date. The critical date was 1966, when the UK first recognised the right to petition the European Court of Human Rights, rather than 1953 when the ECHR came into force in the UK. The killings occurred more than 10 years before the critical date and there was therefore no genuine connection, Janowiec , Silih v Slovenia (71463/01) (2009) 49 E.H.R.R. 37 and Varnava v Turkey (16064/90) (2010) 50 E.H.R.R. 21 applied. The claim under art.2 had to fail (paras 70-87). (3) By 1948, it had not been established that international law required a formal public investigation into a suspicious death, even if there were strong reasons for believing that a war crime had been committed. Even if such a duty had been imposed by customary international law, it had to be subject to a cut-off date and it was inconceivable that it could be treated as retrospective to events which occurred more than 40 years earlier. In any event, if international law did require such an investigation, that requirement could not be implied into the common law. Parliament had expressly provided for investigations into deaths through the coroners&#8217; courts and through the 2005 Act. It had also incorporated art.2 through the Human Rights Act 1998. In those circumstances, it would be inappropriate for the courts to impose a further duty to hold an inquiry, particularly with such potentially wide and uncertain ramifications, McKerr&#8217;s Application for Judicial Review, Re [2004] UKHL 12, [2004] 1 W.L.R. 807 applied (paras 112-122). (4) (Lady Hale dissenting) In exercising their statutory discretion under s.1 of the 2005 Act, the secretaries of state had clearly considered the request for an inquiry seriously and had rejected it for defensible and relevant reasons. It was impossible to characterise their conclusion as unreasonable or irrational. The decision could not be impugned. It was not appropriate to determine K&#8217;s arguments that the time had come to recognise proportionality, rather than rationality, as a basis for challenging administrative decisions. The issue had potentially profound and wide implications and would need to be argued before a panel of nine Justices. However, such a course was unnecessary because the appeal would fail even if it was based on proportionality (paras 127-129, 132). (Per Lady Hale) The decision not to hold an inquiry was not one which a reasonable authority could have reached. The secretaries of state had not taken account of all the possible purposes and benefits of such an inquiry. The value of establishing the truth was overwhelming (paras 309-313)."
    ],
    "ABSTRACT": [
        "The appellants (K) appealed against a decision ([2014] EWCA Civ 312, [2015] Q.B. 57) that the respondent secretaries of state were not required to hold a public inquiry into the deaths of 24 unarmed civilians killed by British soldiers in colonial Malaya in 1948. The secretaries of state cross-appealed on the basis that the claim was outside the jurisdiction of the UK courts.",
        "The British soldiers had been sent to Malaya to combat an insurgency. Shortly after the incident, an official report stated that the civilians who were killed were detained bandits who had been trying to escape. K were witnesses and relatives of the deceased. They alleged that the civilians had been deliberately executed. The secretaries of state refused K&#8217;s requests for an inquiry into the killings. The issues were whether (i) the UK courts had jurisdiction to determine the claim; (ii) an inquiry was required under ECHR art.2; (iii) the secretaries of state had a duty to investigate under customary international law; (iv) the decision not to order an inquiry under the Inquiries Act 2005 could be challenged by judicial review."
    ],
    "FLAGS": [
        "Approved",
        "Hale",
        "Neuberger"
    ],
    "COUNSEL": "For the appellants: Michael Fordham QC, Danny Friedman QC, Zachary Douglas QC. For the respondents: Jonathan Crow QC, James Eadie QC, Jason Coppel QC, Marcus Pilgerstorfer, Amy Rogers. For the interveners: Ben Emmerson QC, Adam Straw.",
    "CATEGORIES": [
        "Administrative Law Other Related Subjects: Human Rights",
        "Armed Forces",
        "Army",
        "Attacking Civilian Population",
        "Colonies",
        "Common Law",
        "Customary Law",
        "Death",
        "Jurisdiction",
        "Public Inquiries",
        "Right to Life",
        "Time"
    ],
    "CATEGORY": "Administrative Law Other Related Subjects: Human Rights &mdash; Armed Forces &mdash; Army &mdash; Attacking Civilian Population &mdash; Colonies &mdash; Common Law &mdash; Customary Law &mdash; Death &mdash; Jurisdiction &mdash; Public Inquiries &mdash; Right to Life &mdash; Time",
    "SUMMARY": [
        "The UK Government was not obliged to hold a public inquiry into the deaths of 24 civilians killed by British soldiers in colonial Malaya in 1948. The lapse of time meant that there was no requirement to hold an inquiry under ECHR art.2. Further, such a duty could not be implied into common law under principles of customary international law and the decision not to hold an inquiry under the Inquiries Act 2005 s.1 was not open to challenge on judicial review principles."
    ],
    "COURT": "UKSC",
    "CITATION": "St Helens Smelting Co v Tipping [2015] UKSC 69",
    "NUMBER": "462",
    "YEAR": "2015"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Kennaway v Thompson",
        "(wl) Dobson v Thames Water Utilities",
        "(wl) Coventry v Lawrence (no 2)",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Ferguson v John Dawson & Partners (Contractors) Ltd",
        "(wl) Hussain v Lancaster CC",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Piper v JRI (Manufacturing) Ltd",
        "(wl) Lippiatt v South Gloucestershire Council",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Attorney General v PYA Quarries Ltd (no 1)",
        "(wl) Monk v PC Harrington Ltd"
    ],
    "NAME": "(wl) Coventry v Lawrence",
    "JUDGE": "Lord Neuberger PSC; Lord Mance JSC; Lord Clarke JSC; Lord Sumption JSC; Lord Carnwath JSC",
    "CIT": "[2014] UKSC 13",
    "HELD": [
        "Appeal allowed.",
        "(1) In the light of the relevant principles, practical considerations and judicial dicta, it was possible to obtain by prescription a right to commit what would otherwise be a nuisance by noise (see para.41 of judgment). (2) It was no defence for a defendant sued in nuisance to argue that the claimant came to the nuisance, although it might well be a defence, at least in some circumstances, for a defendant to argue that, as it was only because the claimant had changed the use of, or built on, his land that the defendant&#8217;s pre-existing activity was claimed to have become a nuisance, the claim should fail (para.58). (3) A defendant, faced with a contention that his activities gave rise to a nuisance, could rely on those activities as constituting part of the character of the locality, but only to the extent that they did not constitute a nuisance. Similarly, any other activity in the neighbourhood could properly be taken into account when assessing the character of the neighbourhood, to the extent that it did not give rise to an actionable nuisance or was otherwise unlawful (paras 74-75). (4) The mere fact that the activity which was said to give rise to the nuisance had the benefit of a planning permission would normally be of no assistance to the defendant in a claim brought by a neighbour who argued that the activity caused a nuisance to his land in the form of noise or other loss of amenity. Among other things, it was wrong in principle that, through the grant of a planning permission, a planning authority should be able to deprive a property-owner of a right to object to what would otherwise be a nuisance, without providing him with compensation, when there was no provision in the planning legislation which suggested such a possibility (paras 90, 94). (5) The court&#8217;s power to award damages in lieu of an injunction involved a classic exercise of discretion, which should not, as a matter of principle, be fettered, although the prima facie position was that an injunction should be granted. As to the four tests set out Shelfer v City of London Electric Lighting Co (No.1) [1895] 1 Ch. 287, their application should not be such as to fetter the exercise of the court&#8217;s discretion. However, it would, in the absence of additional relevant circumstances pointing the other way, normally be right to refuse an injunction if those four tests were satisfied. But the fact that those tests were not all satisfied would not mean that an injunction should be granted, Shelfer considered. The public interest, if it arose, would be a relevant factor; for example, a court would be entitled to have regard to the fact that many other neighbours in addition to the claimant were badly affected by the nuisance as a factor in favour of granting an injunction. In some cases, the grant of planning permission for a particular activity might provide strong support for the contention that the activity was of benefit to the public, which would be relevant to the question of whether or not to grant an injunction (paras 120-121, 123-125). (6) The application of the above principles justified the restoration of the injunction granted by the judge at first instance. Among other things, C and M had not shown that their activities during a period of 20 years amounted to a nuisance. To justify the establishment of a right to create a noise by prescription, it was not enough to show that the activity which now created the noise had been carried on for 20 years. It was not even enough to show that the activity had created a noise for 20 years. What had to be established was that the activity had created a nuisance over 20 years. However, under the &#8220;permission to apply&#8221; provision in the judge&#8217;s order, C and M would be free to argue that the injunction should be discharged and damages awarded instead (paras 143, 148, 151)."
    ],
    "ABSTRACT": [
        "The appellants (L) appealed against a decision ([2012] EWCA Civ 26, [2012] 1 W.L.R. 2127) that activities on land close to their home did not constitute a nuisance.",
        "The first respondent (C) was the operator of a stadium, constructed in 1976, where speedway and stock-car racing had taken place. The second respondent (M) operated a motocross track at the rear of the stadium. Planning permissions covering the speedway racing and motocross activities had been granted, while a certificate of lawful use covered the stock-car racing. In 2006, L moved into a bungalow located near the stadium. The judge at first instance upheld their claim that noise coming from the stadium and track amounted to a nuisance, but the judge&#8217;s finding was reversed on appeal. The instant appeal raised the following issues: (i) the extent, if any, to which it was open to a defendant to argue that he had established a prescriptive right to commit what would otherwise be a nuisance by means of noise; (ii) the extent, if any, to which the defendant could rely on the fact that the claimant &#8220;came to the nuisance&#8221;; (iii) the extent, if any, to which it was open to the defendant to invoke the actual use of his premises when assessing the character of the locality; (iv) the extent, if any, to which the grant of planning permission for a particular use could affect the question of whether that use was a nuisance; (v) the approach to be adopted by a court when deciding whether to grant an injunction to restrain a nuisance or whether to award damages instead."
    ],
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "COUNSEL": "For the appellants: Stephen Hockman QC, William Upton. For the respondents: Robert McCracken QC, Sebastian Kokelaar.",
    "CATEGORIES": [
        "Nuisance",
        "Damages",
        "Injunctions",
        "Noise",
        "Planning Permission",
        "Prescription",
        "Remedies"
    ],
    "CATEGORY": "Nuisance &mdash; Damages &mdash; Injunctions &mdash; Noise &mdash; Planning Permission &mdash; Prescription &mdash; Remedies",
    "SUMMARY": [
        "The Supreme Court set out the approach to be adopted when a court had to consider whether to award damages or grant an injunction in a nuisance case."
    ],
    "COURT": "UKSC",
    "CITATION": "Coventry v Lawrence [2014] UKSC 13",
    "NUMBER": "463",
    "YEAR": "2014"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Crown River Cruises Ltd v Kimbolton Fireworks Ltd",
        "(wl) Lamb v Camden LBC",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) McLoughlin v O'Brian",
        "(wl) Revill v Newbery",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) W v Essex County Council and Another",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) Osman v Ferguson",
        "(wl) Pierce v Doncaster MBC"
    ],
    "NAME": "(wl) British Celanese Ltd v AH Hunt (Capacitors) Ltd",
    "CIT": "[1969] 1 WLR 959",
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1969",
    "JUDGE": "Lawton J",
    "NUMBER": "464",
    "CATEGORIES": [
        "Negligence",
        "Dangerous Escape",
        "Economic Loss",
        "Remoteness"
    ],
    "CATEGORY": "Negligence &mdash; Dangerous Escape &mdash; Economic Loss &mdash; Remoteness",
    "SUMMARY": [
        "Dangerous things; escape of metal foil",
        "As regards remoteness of damage there is no difference in principle between physical injury resulting in loss of profits and personal injury resulting in loss of earnings. P claimed damages against D, manufacturers of electrical components, alleging that in December 1964 metal foil strips blown from D&#8217;s factory on the same industrial estate as P&#8217;s factory came into contact with an electricity sub-station on the estate, causing a power failure which halted P&#8217;s machines, resulted in material in them solidifying, necessitated the cleaning of the machines, and wasted materials and time. P alleged D knew or ought to have known of the likely consequences of the escape because a similar occurrence had taken place in 1961 and D had received a warning from the electricity board. P claimed damages under four heads - (a) strict liability under Rylands v Fletcher (b)negligence; (c) nuisance; and (d) public nuisance. D contended that nothing more than a damnum absque injuria was revealed. On the trial of a preliminary issue whether on the facts set out in the statement of claim, D was in law liable for the damage claimed, held, (1) that the claim under head (a) failed because there was no non-natural user of the land; (2) as to (b) that D owed a duty to P in the circumstances to prevent the metal foil being blown about so as to foul the sub-station and that, as to remoteness of damage, there was no difference between the present case of alleged physical injury with consequential loss of profits and the ordinary case of a plaintiff suffering physical injury and losing earnings; and (3) that as to (c) and (d), an isolated happening by itself could create an actionable nuisance and so, as P was directly and foreseeably affected, P had a good cause of action against D in nuisance. (Dictum of Lord Moulton in Rickards v Lothian [1913] A.C. 263 ; Read v J Lyons &amp; Co Ltd [1947] A.C. 156 ; Donoghue v Stevenson [1932] A.C. 562 and Midwood &amp; Co v Manchester Corp [1905] 2 K.B. 597 applied; Weller &amp; Co v Foot &amp; Mouth Disease Research Institute [1966] 1 Q.B. 569 ; Electrochrome Ltd v Welsh Plastics Ltd [1968] 2 All E.R. 205 and Seaway Hotels v Canada Cragg and Consumers Gas Co (1959) 17 D.L.R. (2d) 292 considered). [Leave to appeal to the Court of Appeal granted]."
    ],
    "CITATION": "British Celanese Ltd v AH Hunt (Capacitors) Ltd [1969] 1 WLR 959",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) British Celanese Ltd v AH Hunt (Capacitors) Ltd",
        "(wl) Hussain v Lancaster CC",
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Osman v Ferguson",
        "(wl) Khoransandjian v Bush",
        "(wl) Hill v Chief Constable of West Yorkshire",
        "(wl) James McNaughton Paper Group Ltd v Hicks Anderson & Co",
        "(wl) Lippiatt v South Gloucestershire Council",
        "(wl) LMS International v Styrene Packaging Ltd",
        "(wl) Dorset Yacht Co Ltd v Home Office",
        "(wl) Kent v Griffiths",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd"
    ],
    "NAME": "(wl) Crown River Cruises Ltd v Kimbolton Fireworks Ltd",
    "CIT": "[1996] 2 Lloyd&#8217;s Rep 533",
    "HELD": [
        "giving judgment for C, that (1) K had been negligent in putting on the firework display without first checking whether any flammable material was on board the vessels in the vicinity, and expert evidence had shown that the second fire occurred because of the fire authority&#8217;s negligent failure to ensure that the first fire was properly extinguished; (2) the barge was permanently moored and C owned a licence which gave them exclusive use and occupation. This meant that, as the barge was attached to the land, an action in private nuisance against K was sustainable as the display interfered with C&#8217;s use and enjoyment of the land and (3) there was a case for extending the rule in Rylands v Fletcher to accumulations in a vessel on a river and to intentional releases, as well as accidental escape, provided the release was not deliberately intended to be aimed at the plaintiff&#8217;s property. However, a finding of liability under Rylands v Fletcher was not made against K in this case."
    ],
    "COUNSEL": "For CRC: Timothy Brenton. For KF: Sebastian Neville-Clark. For the fire authority: Nigel Wilkinson Q.C. and Kerstin Boyd.",
    "JUDGE": "Potter J",
    "NUMBER": "465",
    "CATEGORIES": [
        "Nuisance Other Related Subjects: Negligence",
        "Dangerous Escape",
        "Negligence",
        "Nuisance"
    ],
    "CATEGORY": "Nuisance Other Related Subjects: Negligence &mdash; Dangerous Escape &mdash; Negligence &mdash; Nuisance",
    "SUMMARY": [
        "Nuisance; damage to barge during firework display; whether actionable in private nuisance; rule in &#8220;Rylands v Fletcher&#8221; could extend to facts",
        "C claimed in negligence, nuisance and under the rule in Rylands v Fletcher (1868) L.R. 3 H.L. 330 for damage caused to their floating barge and a passenger vessel moored alongside it following a firework display held by K on the River Thames. The fire authority had been called to a small fire on the barge caused by falling debris during the display and a second fire later damaged both the passenger vessel and the barge."
    ],
    "CITATION": "Crown River Cruises Ltd v Kimbolton Fireworks Ltd [1996] 2 Lloyd&#8217;s Rep 533",
    "COURT": "EWHC",
    "YEAR": "1996"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Marcic v Thames Water Utilities Ltd",
        "(wl) Coventry v Lawrence",
        "(wl) Kennaway v Thompson",
        "(wl) Dobson v Thames Water Utilities",
        "(wl) Co-operative Group Ltd v Pritchard",
        "(wl) Hinz v Berry",
        "(wl) A v United Kingdom",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Vowles v Evans & the Welsh RFU",
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Morris v Murray",
        "(wl) Worsley v Tambrands"
    ],
    "NAME": "(wl) Dennis v Ministry of Defence",
    "JUDGE": "Buckley J",
    "CIT": "[2003] EWHC 793 (QB)",
    "HELD": [
        "granting the application in part, that whilst the noise emanating from the military base constituted a nuisance, the public interest demanded that the flying of the aircraft should continue. The flying of the harriers was not an ordinary use of land. Harrier training was only planned to continue at the base for a further nine years The defence of the realm and the cost and inconvenience of uprooting the military airbase meant that D&#8217;s private rights were subjugated to the public interest. Public interest was to be considered but selected individuals were not to bear the cost of the public benefit. It was not proportionate to give effect to the public interest without compensating D. There had been an interference with D&#8217;s human rights under Art.8 and Art.1 and an appropriate assessment of damages at common law would provide &#8220;just satisfaction&#8221; under the Human Rights Act 1998 s.8, Marcic v Thames Water Utilities Ltd [2002] EWCA Civ 64, [2002] Q.B. 929 applied. Accordingly in this exceptional case damages assessed at GBP 950,000 were awarded for capital loss, loss of amenity and loss of commercial opportunities caused by the nuisance. The MoD had not acquired the right to commit any nuisance by prescription because D had neither consented to nor acquiesced in the nuisance."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For D: Derek Wood Q.C. and David Hart. For the Ministry: David Elvin Q.C. and William Hoskins.",
    "CATEGORIES": [
        "Nuisance",
        "Aircraft",
        "Measure of Damages",
        "Military Bases",
        "Noise",
        "Public Interest",
        "Right to Respect For Private and Family Life"
    ],
    "CATEGORY": "Nuisance &mdash; Aircraft &mdash; Measure of Damages &mdash; Military Bases &mdash; Noise &mdash; Public Interest &mdash; Right to Respect For Private and Family Life",
    "SUMMARY": [
        "Noise emanating from military aircraft from a nearby military base flying over the claimants&#8217; property constituted a nuisance, but public interest demanded that the flying of the aircraft continue; however, damages for capital loss, loss of amenity and loss of commercial opportunities caused by the nuisance were assessed at GBP 950,000.",
        "Noise caused by aircraft at a military base breaches the human rights of persons living nearby and constitutes a nuisance, but public interest demands that the flying of aircraft should continue. D, a husband and wife, applied for a declaration that noise emanating from a military base adjacent to their property constituted a nuisance and sought damages. D owned and lived on an estate adjacent to RAF Wittering, an operational aerodrome. Harrier squadrons trained at the military base and when landing flew directly over D&#8217;s estate. D claimed that the noise levels were deafening when the Harriers were in the course of circuit training, particularly as they flew over D&#8217;s estate at low altitude to land at the military base. D alleged that this constituted a nuisance at common law and/or infringed their human rights under the Human Rights Act 1998 Sch.1 Part I Art.8 and Sch.1 Part II Art.1 and significantly reduced the market value of their estate. TheMoD argued that the flying activity was a necessary part of training pilots and was in the interests of national security and nothing could reasonably be done to improve the situation. The MoD claimed that in any event it had acquired the right to commit any nuisance by prescription since the harriers had been flying at the military base since 1969. The case raised the point of principle of whether and in what circumstances a sufficient public interest could amount to a defence to a claim in nuisance."
    ],
    "COURT": "EWHC",
    "CITATION": "Dennis v Ministry of Defence [2003] EWHC 793 (QB)",
    "NUMBER": "466",
    "YEAR": "2003"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Dobson v Thames Water Utilities",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Khoransandjian v Bush",
        "(wl) Coventry v Lawrence",
        "(wl) Crown River Cruises Ltd v Kimbolton Fireworks Ltd",
        "(wl) Steel and Morris v UK",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Vowles v Evans & the Welsh RFU",
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Worsley v Tambrands",
        "(wl) Hussain v Lancaster CC",
        "(wl) Lippiatt v South Gloucestershire Council"
    ],
    "NAME": "(wl) Marcic v Thames Water Utilities Ltd",
    "JUDGE": "Lord Nicholls of Birkenhead; Lord Steyn; Lord Hoffmann; Lord Hope of Craighead; Lord Scott of Foscote",
    "CIT": "[2003] UKHL 66",
    "HELD": [
        "allowing the appeal, that (1) a cause of action in nuisance would be contrary to the statutory scheme laid down in the Water Industry Act 1991 under which T operated the sewers. Individual householders could bring proceedings in respect of inadequate drainage only when the undertaker had failed to comply with an enforcement order made under the 1991 Act, and a parallel common law right whereby individual householders might bring court proceedings where no enforcement order had been made would set at nought the statutory scheme, Goldman v Hargrave [1967] 1 A.C. 645, Leakey v National Trust for Places of Historic Interest or Natural Beauty [1980] Q.B. 485 and Sedleigh-Denfield v O&#8217;Callagan (Trustees for St Joseph&#8217;s Society for Foreign Missions) [1940] A.C. 880 distinguished, and (2) the claim under the 1998 Act was ill founded. The statutory scheme under the 1991 Act balanced the interests of T&#8217;s customers whose properties were subject to flooding with the remainder of its customers whose properties were drained by the sewers, by imposing a general drainage obligation on T and entrusting enforcement to an independent regulator, Hatton v United Kingdom (36022/97) (2003) 37 E.H.R.R. 28 considered. M could have pursued his complaint with the independent regulator but had chosen not to do so. Parliament had acted well within its bounds as a policy maker and the statutory scheme was compliant with the 1998 Act."
    ],
    "FLAGS": [
        "Approved",
        "Hoffmann"
    ],
    "COUNSEL": "For M: Stephen Hockman Q.C. and Peter Harrison. For TWU: Jonathan Sumption Q.C., David Pannick Q.C. and Michael Daiches.",
    "CATEGORIES": [
        "Nuisance Other Related Subjects: Human Rights",
        "Utilities",
        "Breach of Statutory Duty",
        "Director General of Water Services",
        "Floods",
        "Nuisance",
        "Protection of Property",
        "Right to Respect For Private and Family Life",
        "Sewerage",
        "Sewerage Undertakers"
    ],
    "CATEGORY": "Nuisance Other Related Subjects: Human Rights &mdash; Utilities &mdash; Breach of Statutory Duty &mdash; Director General of Water Services &mdash; Floods &mdash; Nuisance &mdash; Protection of Property &mdash; Right to Respect For Private and Family Life &mdash; Sewerage &mdash; Sewerage Undertakers",
    "SUMMARY": [
        "The claimant, whose property had been subject to flooding as a result of overloaded sewers, did not have a common law action in nuisance against the defendant as to allow such an action would set at nought the comprehensive statutory scheme laid down in the Water Industry Act 1991. The claim under the Human Rights Act 1998 was ill-founded and the statutory scheme complied with the European Convention on Human Rights.",
        "T, a sewerage undertaker, appealed against a decision ([2002] EWCA Civ 64, [2002] Q.B. 929) that it was liable for failing to prevent flooding to M&#8217;s property caused by the back flow of foul water from its sewerage system. M&#8217;s property was regularly flooded by reason of overloaded sewers. The flooding was not due to any failure on T&#8217;s part to clean or maintain the sewers but was, rather, due to a significant increase in the volume of sewage entering the sewers since the time of their construction. T had no control over the volume of sewage entering the system. M had argued that (1) T&#8217;s failure to construct new sewers with greater capacity gave rise to an actionable nuisance, and (2) the flooding constituted an unjustified interference with M&#8217;s right to respect for his private and family life under the Human Rights Act 1998 Sch.1 Part I Art.8 and his right to the peaceful enjoyment of his possessions under Sch.1 Part II Art.1 of the Act."
    ],
    "COURT": "UKHL",
    "CITATION": "Marcic v Thames Water Utilities Ltd [2003] UKHL 66",
    "NUMBER": "467",
    "YEAR": "2003"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) West Sussex CC v Master Lewis Pierce",
        "(wl) Hufton v Somerset CC",
        "(wl) Platt v Liverpool City Council",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Poppleton v Trustees of the Portsmouth Youth Activities Committee",
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Kennaway v Thompson",
        "(wl) Crown River Cruises Ltd v Kimbolton Fireworks Ltd",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Keown v Coventry Healthcare NHS Trust",
        "(wl) Hussain v Lancaster CC",
        "(wl) Transco Plc v Stockport MBC"
    ],
    "NAME": "(wl) Lippiatt v South Gloucestershire Council",
    "CIT": "[2000] QB 51",
    "HELD": [
        "allowing the appeal, that there was no rule in law preventing an owner or occupier being liable in nuisance for the actions of his licensees occurring away from his land, Attorney General v Corke [1933] Ch. 89 and Smith v Scott [1973] Ch. 314 considered and Hussain distinguished on its facts. The attention of the judge below had not been drawn to authorities which showed that an occupier could be liable in circumstances where a claimant&#8217;s enjoyment of his land was interfered with due to the continuing presence on the defendant&#8217;s land of persons whose actual or apprehended activities the defendant knew included repeated harmful acts on the claimant&#8217;s land."
    ],
    "COUNSEL": "For L: Barry Payton and Philip Norman. For SGC: W David Spens.",
    "JUDGE": "Evans LJ; Mummery LJ; Sir Christopher Staughton",
    "NUMBER": "468",
    "CATEGORIES": [
        "Nuisance",
        "Occupiers' Liability",
        "Real Property",
        "Travellers"
    ],
    "CATEGORY": "Nuisance &mdash; Occupiers' Liability &mdash; Real Property &mdash; Travellers",
    "SUMMARY": [
        "Occupiers liability; travellers using land owned by local authority as base to commit acts of nuisance on neighbouring land; local authority liable in nuisance for repeated harmful acts committed by persons it knew were occupying land",
        "L appealed against a decision striking out L&#8217;s statement of claim against SGC on the ground that it disclosed no cause of action, following the decision in Hussain v Lancaster City Council [2000] Q.B. 1 . L claimed damages for acts of nuisance committed on neighbouring land by travellers occupying SGC&#8217;s land, with the exception of a single act of barring access to L&#8217;s land, which had taken place on SGC&#8217;s land. L alleged that SGC had allowed the travellers to congregate on its land over a three year period and that they had used the land as a base for the unlawful activities that L complained of. SGC accepted that it could be liable in nuisance for the single act occurring on its land, as it formed a direct interference with L&#8217;s use and enjoyment of his own land, but contended that no liability arose from acts of independent third parties that took place away from SGC&#8217;s land."
    ],
    "CITATION": "Lippiatt v South Gloucestershire Council [2000] QB 51",
    "COURT": "EWCA",
    "YEAR": "2000"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Everett v Comojo Ltd UK",
        "(wl) Dorset Yacht Co Ltd v Home Office",
        "(wl) Barber v Somerset County Council",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Joyce v O'Brien",
        "(wl) Kent v Griffiths",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Orchard v Lee",
        "(wl) Corr v IBC Vehicles Ltd",
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Vellino v Chief Constable of Greater Manchester"
    ],
    "NAME": "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
    "JUDGE": "Stuart-Smith LJ; Schiemann LJ; Tuckey LJ",
    "CIT": "[2000] QB 836",
    "HELD": [
        "allowing the appeal, that a measured duty of care was owed by a servient landowner who had actual or presumed knowledge of a danger of loss of support. That duty was not limited to escapes from the servient to the dominant land and included non feasance, Leakey v National Trust for Places of Historic Interest or Natural Beauty [1980] Q.B. 485 applied. That duty, however, depended on foreseeability and SBC had not foreseen the magnitude of the risk and would not have done so without expert evidence derived from a geological survey. The duty might extend only to warning the owner of the dominant land of the foreseen risk and did not necessarily require expensive preventative works. Furthermore, it would be unfair and unreasonable to find liability in such circumstances where the danger had been equally apparent to the dominant owner."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For H: Christopher Symons Q.C. and Paul Reed. For SBC: Timothy Stow Q.C. and Paul Darling Q.C.",
    "CATEGORIES": [
        "Torts",
        "Duty of Care",
        "Erosion",
        "Foreseeability",
        "Landslides",
        "Private Nuisance",
        "Right of Support"
    ],
    "CATEGORY": "Torts &mdash; Duty of Care &mdash; Erosion &mdash; Foreseeability &mdash; Landslides &mdash; Private Nuisance &mdash; Right of Support",
    "SUMMARY": [
        "SBC appealed against a finding that they were liable in negligence for a land slip which had caused ground owned by HHH, their neighbour, to collapse. SBC argued that (1) there was no duty to take positive steps to provide support for a neighbour&#8217;s land, and (2) if a duty of care did arise, it only applied where the defect causing the hazard was patent and could be observed by a reasonable landowner. It was held that (1) as SBC knew of the hazard, they did owe a duty to take positive steps to provide support for HHH&#8217;s land; (2) SBC&#8217;s duty was limited to taking care to avoid damage which they ought, without geological investigation, to have foreseen, and (3) SBC could not have foreseen a hazard of the magnitude that affected HHH&#8217;s land.",
        "SBC, owners of lower land, appealed against a decision (57 Con. L.R. 113) that it was liable to H, the owners of a hotel, for damage caused by a landslip. SBC&#8217;s engineers had taken some limited remedial action and had been aware of the danger of further landslide but had not anticipated a slip of such proportions. SBC contended that it was under no duty to support the neighbouring land."
    ],
    "COURT": "EWCA",
    "CITATION": "Holbeck Hall Hotel Ltd v Scarborough Borough Council [2000] QB 836",
    "NUMBER": "469",
    "YEAR": "2000"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Hussain v Lancaster CC",
        "(wl) Coventry v Lawrence",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Allen v Chief Constable of Hampshire",
        "(wl) Marcic v Thames Water Utilities Ltd",
        "(wl) Doughty v Turner Manufacturing Co",
        "(wl) Lippiatt v South Gloucestershire Council",
        "(wl) Kennaway v Thompson",
        "(wl) Crown River Cruises Ltd v Kimbolton Fireworks Ltd",
        "(wl) Bernard v Attorney General of Jamaica",
        "(wl) Flood v Times Newspapers Ltd"
    ],
    "NAME": "(wl) Khoransandjian v Bush",
    "JUDGE": "Dillon LJ; Rose LJ; Peter Gibson J",
    "CIT": "[1993] QB 727",
    "HELD": [
        "dismissing the appeal, that (1) harassment by unwanted telephone calls was actionable as a private nuisance notwithstanding that the recipient had no proprietary right or interest in the property; (2) oral harassment not amounting to a threat was actionable if it caused physical or psychiatric illness, or where there was a risk that the cumulative effect might cause such illness (Janvier v Sweeney [1919] 2 K.B. 316 applied; Burnett v George [1992] 1 F.L.R. 525 considered)."
    ],
    "FLAGS": [
        "Overruled"
    ],
    "COUNSEL": "For B: Caroline Harry Thomas. For K: Philip Turl.",
    "CATEGORIES": [
        "Civil Procedure Other Related Subjects: Telecommunications",
        "Causes of Action",
        "Harassment",
        "Nuisance",
        "Telephones"
    ],
    "CATEGORY": "Civil Procedure Other Related Subjects: Telecommunications &mdash; Causes of Action &mdash; Harassment &mdash; Nuisance &mdash; Telephones",
    "SUMMARY": [
        "Injunction; harassing telephone calls; whether harassment falling short of threats actionable; whether proprietary interest necessary to sustain action",
        "Oral harassment not amounting to threats may be actionable if it may, or does, cause physical or psychiatric illness to the recipient. P, whose relationship with D had broken down, claimed relief against D, his threats and unwanted telephone calls, claiming his conduct was putting her under great distress. The judge made an interlocutory order restraining D from &#8220;using violence, or harassing, pestering or communicating with&#8221; P. D appealed."
    ],
    "COURT": "EWCA",
    "CITATION": "Khoransandjian v Bush [1993] QB 727",
    "NUMBER": "470",
    "YEAR": "1993"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Marcic v Thames Water Utilities Ltd",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Bone v Searle",
        "(wl) Coventry v Lawrence",
        "(wl) Hinz v Berry",
        "(wl) A v United Kingdom",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) Badger v Ministry of Defence",
        "(wl) Vowles v Evans & the Welsh RFU",
        "(wl) Phipps v Rochester Corporation",
        "(wl) John v MGN Ltd",
        "(wl) Monk v PC Harrington Ltd"
    ],
    "NAME": "(wl) Dobson v Thames Water Utilities",
    "JUDGE": "Waller LJ; Richards LJ; Hughes LJ",
    "CIT": "[2009] EWCA Civ 28",
    "HELD": [
        "Appeal allowed in part.",
        "(1) Damages in nuisance were for injury to the property and not to the sensibilities of the occupier, Hunter v Canary Wharf Ltd [1997] A.C. 655 applied. That was so as much for the case of the transitory nuisance interfering with comfort and enjoyment of the land as it was for the case of the nuisance that occasioned permanent injury to the land and to its capital value, or other pecuniary loss. It was also clear that a claimant had to show that he had in truth suffered a loss of amenity before substantial damages could be awarded. The actual impact of the nuisance upon the occupiers of the land would in practice be relevant to the assessment of common law damages for loss of amenity in many cases, including such as the instant case where a family home was in question and no physical injury to the property, loss of capital value, loss of rent or other pecuniary damage, arose. Also none of the majority speeches in Canary Wharf supported the view that the person who had the right to sue in nuisance was recovering damages on behalf of other occupiers of the property. (2) Where a public authority had been found to have acted unlawfully, the court could grant such relief or remedy as it considered just and appropriate. No award of damages was to be made unless, taking account of all the circumstances including any other relief or remedy granted in relation to the same act, the court was satisfied that the award was necessary to afford just satisfaction under art.41 of the Convention. (3) The first of the judge&#8217;s three answers were reversed. An award of damages in nuisance to a person or persons with a proprietary interest in a property would be relevant to the question whether an award of damages was necessary to afford just satisfaction under art.8 to a person who lived in the same household but had no proprietary interest in the property. (4) As the judge had held, the availability of other remedies was relevant to the issue of whether damages were necessary to afford just satisfaction under s.8(3) of the 1998 Act. Under that provision, all circumstances had to be taken into account. (5) Despite the fact that damages for private nuisance were awarded as damage to &#8220;land&#8221;, it was highly improbable, if not inconceivable, that Strasbourg would think it appropriate or just or necessary to award a further sum on top for breach of art.8. Accordingly the award of damages at common law to a property owner would normally constitute just satisfaction to the owner for the purposes of s.8(3) of the 1998 Act and no additional award of compensation under that Act would normally be necessary."
    ],
    "ABSTRACT": [
        "The appellants (D) appealed against a determination ( [2007] EWHC 2021 (TCC), [2008] 2 All E.R. 362 ) concerning the award of damages for nuisance in a group action against the respondent sewerage undertaker (T).",
        "D were divided into two categories: those who occupied properties as owners or lessees and those who occupied without any legal interest in the properties. They all resided in the vicinity of sewage treatment works and had complained that they were affected by odours and mosquitoes. D served a group statement of case, claiming that T was liable for damages for private nuisance and negligence, and under the Human Rights Act 1998 for breaches of their human rights. T raised various threshold defences to the claims. A number of preliminary issues were determined and the instant appeal related to three of the judge&#8217;s answers. Firstly, damages for nuisance might confer a sufficient remedy on those with a legal right to occupy such as to disentitle those living in the same household without such a legal right to a separate remedy under the European Convention on Human Rights 1950 art.8 or the 1998 Act but whether they did would depend on the facts. Secondly, the alternative remedies under the Environmental Protection Act 1990 s.80 and s.82 , a complaint to OFWAT under the Water Industry Act 1991 s.94 and a nuisance abatement notice were all relevant to the issue of whether damages for owners/occupiers and/or those without a legal interest in their homes were necessary to afford just satisfaction under s.8(3) of the 1998 Act. Thirdly, as regards whether damages could be &#8220;topped up&#8221; under the 1998 Act in addition to common law damages, damages would only be awarded under s.8(3) if, taking account of the measure of damages for nuisance and the availability of alternative remedies, such damages were necessary to afford just satisfaction. The instant appeal particularly concerned the proper basis for an award of common law damages and damages for infringement of art.8 of the Convention and the proper remedy in respect of non-property-owning members of the same household.",
        "T submitted that, despite the award of damages being made only to the person with an interest in the land, the reality was to award damages that included the loss of amenity suffered by other persons residing at the property."
    ],
    "COUNSEL": "For the appellants: Richard Gordon QC, Robert Weir. For the respondent: David Hart QC, Michael Daiches.",
    "CATEGORIES": [
        "Nuisance Other Related Subjects: Human Rights",
        "Utilities",
        "Environment",
        "Damages",
        "Just Satisfaction",
        "Measure of Damages",
        "Odours",
        "Private Nuisance",
        "Remedies",
        "Right to Respect For Private and Family Life",
        "Sewerage Undertakers",
        "Waste Water Treatment"
    ],
    "CATEGORY": "Nuisance Other Related Subjects: Human Rights &mdash; Utilities &mdash; Environment &mdash; Damages &mdash; Just Satisfaction &mdash; Measure of Damages &mdash; Odours &mdash; Private Nuisance &mdash; Remedies &mdash; Right to Respect For Private and Family Life &mdash; Sewerage Undertakers &mdash; Waste Water Treatment",
    "SUMMARY": [
        "An award of damages in nuisance to a person with a proprietary interest in a property would be relevant to the question whether an award of damages was necessary to afford just satisfaction under the European Convention on Human Rights 1950 art.8 to a person who lived in the same household but had no proprietary interest in the property. The award of damages at common law to a property owner would normally constitute just satisfaction to the owner for the purposes of the Human Rights Act 1998 s.8(3) and no additional award of compensation under that Act would normally be necessary."
    ],
    "COURT": "EWCA",
    "CITATION": "Dobson v Thames Water Utilities [2009] EWCA Civ 28",
    "NUMBER": "471",
    "YEAR": "2009"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Evans v Triplex Safety Glass",
        "(wl) Z and others v United Kingdom",
        "(wl) St Helens Smelting Co v Tipping",
        "(wl) Stennett v Hancock",
        "(wl) Badger v Ministry of Defence",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) Biffa Waste Services Ltd v Maschinenfabrik Ernst Hese GmbH",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Coventry v Lawrence",
        "(wl) Maguire v Sefton MBC",
        "(wl) Sanderson v Hull"
    ],
    "NAME": "(wl) McKenna v British Aluminium Ltd",
    "JUDGE": "Pill LJ; Laws LJ; Arden LJ",
    "CIT": "[2003] EWCA Civ 400",
    "HELD": [
        "dismissing the appeal, that the Secretary of State had erred in concluding that the imposition of a condition concerning the required remediation works would be successfully implemented, particularly in view of the uncertainties involved in the development proposal, World Wildlife Fund (WWF) v Autonome Provinz Bozen (C-435/97) [1999] E.C.R. I-5613 applied. When making the decision concerning the need for an EIA, the Secretary of State was not required to ignore the proposed remediation measures but had to make a practical judgment as to whether the project would be likely to have significant effects on the environment by virtue of factors such as its nature, size or location. The complexity of the project and of the proposed remedial measures might be important factors for consideration, R. v Rochdale MBC Ex p. Milne (No.2) [2001] Env. L.R. 22 applied."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For B: Keith Lindblom Q.C., Peter Village Q.C. and James Pereira. For G: David Wolfe.",
    "CATEGORIES": [
        "Planning",
        "Brownfield Sites",
        "Contaminated Land",
        "Development",
        "Environmental Impact Assessments",
        "Remedial Works"
    ],
    "CATEGORY": "Planning &mdash; Brownfield Sites &mdash; Contaminated Land &mdash; Development &mdash; Environmental Impact Assessments &mdash; Remedial Works",
    "SUMMARY": [
        "Proposed development of brownfield site containing gasholders - Developer put forward remediation strategy for contaminated land - Secretary of State not required to ignore remediation measures in deciding whether environmental effects were such as to require environmental impact assessment - Secretary of State could not assume in complex case that remediation measures imposed by condition would be successfully implemented - Secretary of State applied wrong test vitiating grant of permission - Town and Country Planning (Assessment of Environmental Effects) Regulations 1988 - Council Directive 85/337.",
        "B appealed against the overturning ([2003] EWHC 8, [2003] N.P.C. 6) of a decision allowing its appeal against the failure of the local authority to determine its application for development within the appropriate period. B had applied for planning permission to redevelop an extensively contaminated brownfield site containing a number of gasholders. In its application B had submitted an outline remediation strategy in relation to the site, obtained from specialist environmental consultants. The judge held that the Secretary of State had erred in taking the remediation measures into account in deciding whether the development was likely to give rise to significant environmental effects such as to activate the requirement for an environmental impact assessment pursuant to the Town and Country Planning (Assessment of Environmental Effects) Regulations 1988. The correct approach it was submitted, was to have found that significant effects were likely and that an EIA was therefore required, leaving the suitability and effectiveness of the proposed remediation measures to be discussed and assessed in the context of the EIA procedures. B contended that this approach was erroneous and that the Secretary of State was required to consider the entirety of the development project which necessarily included the remediation works."
    ],
    "COURT": "EWCA",
    "CITATION": "McKenna v British Aluminium Ltd [2003] EWCA Civ 400",
    "NUMBER": "472",
    "YEAR": "2003"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Pierce v Doncaster MBC",
        "(wl) W v Essex County Council and Another",
        "(wl) Crown River Cruises Ltd v Kimbolton Fireworks Ltd",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Various Claimants v Institute of the Brothers of the Christian Schools",
        "(wl) Caparo Industries Plc v Dickman",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Wooldridge v Sumner",
        "(wl) Coventry v Lawrence",
        "(wl) Revill v Newbery",
        "(wl) McFarlane v EE Caledonia Ltd"
    ],
    "NAME": "(wl) Hussain v Lancaster CC",
    "JUDGE": "Hirst LJ; Hutchison LJ; Thorpe LJ",
    "CIT": "[2000] QB 1",
    "HELD": [
        "allowing the appeal, that (1) in a claim for nuisance, the person to be sued was the occupier of the property from which the nuisance emanated. A landlord was not generally liable for nuisance committed by his tenant unless he had authorised the tenant to commit the nuisance and, since LCC had not done so, it could not be held liable, and (2) in order for a plaintiff to succeed in a claim in negligence relating to the exercise of statutory powers, it was necessary to establish either that the defendant had been irrational in not exercising the relevant power or that there were exceptional reasons for holding that the policy of the legislation at issue required that compensation be paid to those suffering loss due to the failure to exercise the power. In the instant case, H did not come within either of those categories and, furthermore, it was not fair, just and reasonable to impose liability on LCC."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the plaintiffs: Daniel Brennan Q.C. and David Watkinson. For LCC: Rupert Jackson Q.C. and Natasha Joffe.",
    "CATEGORIES": [
        "Nuisance",
        "Local Authorities' Powers and Duties",
        "Negligence",
        "Nuisance",
        "Racial Harassment",
        "Secure Tenancies"
    ],
    "CATEGORY": "Nuisance &mdash; Local Authorities' Powers and Duties &mdash; Negligence &mdash; Nuisance &mdash; Racial Harassment &mdash; Secure Tenancies",
    "SUMMARY": [
        "racial harassment of shopkeeper; council not liable in negligence or nuisance for harassment of shop owner by secured tenants",
        "H, owner of a shop and residential property on a housing estate owned by LCC, brought an action against LCC in nuisance and negligence, alleging that it was liable for failing to institute possession proceedings or otherwise take action against secured tenants or people living with them who had committed serious acts of racial harassment against H. H sought to rely on a clause in LCC&#8217;s standard form of tenancy agreement which placed an obligation on tenants to ensure, inter alia, that they or people living with them did not discriminate against or harass others, on LCC&#8217;s equal opportunities policy which stated that LCC would take action against anyone committing racial harassment, and on the power to order possession under the Housing Act 1985 . LCC appealed against the dismissal of its application to strike out H&#8217;s claim as disclosing no reasonable cause of action."
    ],
    "COURT": "EWCA",
    "CITATION": "Hussain v Lancaster CC [2000] QB 1",
    "NUMBER": "473",
    "YEAR": "2000"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Steel and Morris v UK",
        "(wl) Attorney General v PYA Quarries Ltd (no 1)",
        "(wl) A v United Kingdom",
        "(wl) Kennaway v Thompson",
        "(wl) Worsley v Tambrands",
        "(wl) Coventry v Lawrence",
        "(wl) A and others v National Blood Authority",
        "(wl) Van Colle v Chief Constable of Hertfordshire",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) Dobson v Thames Water Utilities",
        "(wl) Michael v Chief Constable of South Wales",
        "(wl) Stennett v Hancock"
    ],
    "NAME": "(wl) Coventry v Lawrence (no 2)",
    "JUDGE": "Lord Neuberger PSC; Lord Mance JSC; Lord Clarke JSC; Lord Sumption JSC; Lord Carnwath JSC",
    "CIT": "[2014] UKSC 46",
    "HELD": [
        "Judgment accordingly.",
        "(Carnwath and Mance JJ.S.C. dissenting on the issue of W&#8217;s liability) (1) The injunction ought to be suspended until the house was habitable. It was intended to prevent interference with ordinary residential use and enjoyment, and while such use and enjoyment was impossible, there was no justification for maintaining it (see paras 5-7, 49 of judgment). (2) The parties should have liberty to apply at any time to vary or discharge the injunction. The argument that it should be discharged on the ground that damages would be an adequate remedy now had some prospect of success. That provided a good reason, not in existence at the time of the original order, for allowing the parties to apply without delay (paras 8-9, 49). (3) A landlord was liable for his tenant&#8217;s nuisance where he had authorised it, either by actively and directly participating in it, or by letting the property in circumstances where there was a very high degree of probability that the letting would result in the nuisance, Southwark LBC v Mills [2001] 1 A.C. 1 followed. In the instant case, the nuisance had not been an inevitable, or almost certain, consequence of the letting. It was not enough that W had known how C and M would use the premises and that the use had resulted in nuisance. The use could have been carried on without nuisance to L. Nor had W actively or directly participated in the nuisance. There was little authority on the issue, but whether a landlord had directly participated in a nuisance was largely a question of fact for the trial judge. The question turned principally on events subsequent to the grant of the lease, though it might take colour from the nature and circumstances of the grant and what preceded it. None of the factors relied on by L were sufficient to establish that W had participated in the nuisance. The fact that a landlord had done nothing to stop or discourage the nuisance could not amount to participation, Malzy v Eicholz [1916] 2 K.B. 308 applied. Moreover, absent very unusual circumstances, a landlord&#8217;s failure to take steps to mitigate a nuisance could not create an inference that he had authorised it. Nor could it be said that a landlord, by attempting to fight off allegations of nuisance against his tenant, was participating in or authorising the nuisance. Although the judge&#8217;s dismissal of L&#8217;s claim against W would be upheld, there would be no order for costs against L. W had succeeded on a basis that was different from the judge&#8217;s and which had neither been pleaded nor argued at first instance (paras 11-12, 15-26, 31, 49). (4) L&#8217;s costs at first instance consisted of base costs, a success fee and an after the event insurance premium. The costs order required C and M to pay 60 per cent of all three elements. It was open to the instant court to consider whether the costs regime in the Access to Justice Act 1999, and in particular a claimant&#8217;s right to recover any success fee and ATE premium from an unsuccessful defendant, infringed the Convention, James v United Kingdom (A/98) (1986) 8 E.H.R.R. 123, MGN Ltd v United Kingdom (39401/04) [2011] 1 Costs L.O. 84 and Dombo Beheer BV v Netherlands (A/274-A) (1994) 18 E.H.R.R. 213 considered. While C and M&#8217;s liability for the costs might be inconsistent with their rights under art.6 or Protocol 1 art.1, it would be wrong for the court to decide the point without giving the government the opportunity to make representations. If the costs order infringed, the proper outcome might be to grant a declaration of incompatibility. However, that would be questionable given that the relevant provisions of the 1999 Act and the Courts and Legal Services Act 1990 had been repealed and replaced. If C and M wished to pursue the matter, the instant appeal would have to be re-listed for hearing once appropriate notice had been given to the Attorney General and the Secretary of State for Justice (paras 32-34, 40-44, 49)."
    ],
    "ABSTRACT": [
        "The court was required to deal with issues arising from its previous judgment on an appeal by the appellants (L) against the dismissal [2012] EWCA Civ 26) of their noise nuisance claim against the respondents (C and M).",
        "L owned a house close to a motor-sports stadium and track occupied by C and M. They had originally brought the case against C, M and the landlords of the stadium and track (W). Before the trial, a fire rendered the house uninhabitable. At trial, the judge found that only C and M were liable in nuisance. He awarded damages and granted a noise-limiting injunction to take effect on January 1, 2012 or when the bungalow was habitable, whichever was the earlier. He gave permission to apply to vary the terms of the injunction from October 1, 2011 onwards. Finally, he directed that C and M should pay 60 per cent of L&#8217;s costs. The Court of Appeal held that there had been no nuisance. The instant court disagreed, finding C and M liable and restoring the judge&#8217;s orders (Coventry (t/a RDC Promotions) v Lawrence [2014] UKSC 13, [2014] A.C. 822). The remaining issues were (i) whether the injunction should be suspended until the house was habitable; (ii) whether the parties should be permitted to apply to vary immediately; (iii) whether W were liable for C and M&#8217;s nuisance; (iv) whether the costs order infringed the European Convention on Human Rights 1950 art.6 or Protocol 1 art.1."
    ],
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "COUNSEL": "For the appellants: Stephen Hockman QC, William Upton. For the first respondent: Robert McCracken QC, Sebastian Kokelaar. For the second respondent: Edward Denehan, Giselle McGowan.",
    "CATEGORIES": [
        "Nuisance Other Related Subjects: Civil Procedure",
        "Human Rights",
        "After the Event Insurance",
        "Costs",
        "Costs Orders",
        "Injunctions",
        "Landlords",
        "Motor Sports",
        "Noise",
        "Private Nuisance",
        "Right to Fair Trial",
        "Success Fees"
    ],
    "CATEGORY": "Nuisance Other Related Subjects: Civil Procedure &mdash; Human Rights &mdash; After the Event Insurance &mdash; Costs &mdash; Costs Orders &mdash; Injunctions &mdash; Landlords &mdash; Motor Sports &mdash; Noise &mdash; Private Nuisance &mdash; Right to Fair Trial &mdash; Success Fees",
    "SUMMARY": [
        "Whether a landlord had directly participated in a noise nuisance from a motor-sports stadium was largely a question of fact for the trial judge. The fact that a landlord had done nothing to stop or discourage the nuisance could not amount to participation."
    ],
    "COURT": "UKSC",
    "CITATION": "Coventry v Lawrence (no 2) [2014] UKSC 46",
    "NUMBER": "474",
    "YEAR": "2014"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Attorney General v PYA Quarries Ltd (no 1)",
        "(wl) R v Rimmington; R v Goldstien",
        "(wl) Williams v University of Birmingham",
        "(wl) Bone v Searle",
        "(wl) Horrocks v Lowe",
        "(wl) Clark v Bourne Leisure Limited",
        "(wl) Steel and Morris v UK",
        "(wl) Aswan Engineering v Lupdine",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) McKenna v British Aluminium Ltd",
        "(wl) LMS International v Styrene Packaging Ltd",
        "(wl) Corr v IBC Vehicles Ltd"
    ],
    "NAME": "(wl) Barr & Ors v Biffa Waste Services Limited",
    "JUDGE": "Arden LJ; Carnwath LJ; Patten LJ",
    "CIT": "[2012] EWCA Civ 312",
    "HELD": [
        "Appeal allowed, cross-appeal dismissed.",
        "(1) TThe judge saw the concept of &#8220;reasonable user&#8221; as an important part of the argument for taking account of the statutory scheme and the permit. An activity which was conducted in contravention of planning or environmental control was unlikely to be reasonable, but the converse did not follow, Watson v Croft Promo-Sport Ltd [2009] EWCA Civ 15, [2009] 3 All E.R. 249 considered. &#8220;Reasonable user&#8221; was at most a different way of describing old principles, not an excuse for reinventing them, Cambridge Water Co Ltd v Eastern Counties Leather Plc [1994] 2 A.C. 264 and Bamford v Turnley 122 E.R. 27 considered. The permit was neither strategic in nature nor did it change the essential character of the neighbourhood, which had long included tipping. The only change was the introduction of a more offensive form of waste, producing a new type of smell emission. The permit did not, and did not purport to, authorise the emission of such smells. Even if compliance with a statutory permit was capable of being a relevant factor, it was for a defendant to prove compliance (see paras 46, 64-67, 71, 76-77 of judgment). (2) The common law of nuisance had co-existed with statutory controls since the nineteenth century. There was no principle that it should march with a statutory scheme covering similar subject matter. Short of express or implied statutory authority to commit a nuisance, there was no basis, in principle or authority, for using such a statutory scheme to cut down private law rights, Cambridge Water considered. Further, if there was a problem in meeting a need within the existing legal framework, its solution had to rest with the legislature and Parliament had not yet chosen to provide statutory immunity from common law nuisance claims for waste sites provided in accordance with Directive 2006/12, Metropolitan Asylum District Managers v Hill (No.2) (1881) 6 App. Cas. 193 applied (paras 46, 94-102, 106). (3) There was no general rule requiring or justifying the setting of a threshold in nuisance cases, Kennaway v Thompson [1981] Q.B. 88 and Watson considered. By adopting such a threshold, the judge had deprived at least some of X of their right to have their individual cases assessed on their merits (paras 46, 121)."
    ],
    "ABSTRACT": [
        "The appellants (X) appealed against a decision ([2011] EWHC 1003 (TCC), [2011] 4 All E.R. 1065) dismissing their claims against the respondents (B) for nuisance. B cross-appealed against the decision that its activities were not protected by statutory immunity.",
        "X lived on an estate near a waste-tipping site operated by B. In 2003, a waste management permit had been granted for the tipping of pre-treated waste. X later asserted that over a five-year period they had been affected by odour coming from the site, amounting to nuisance. The judge found that (i) the controlling principle was that of &#8220;reasonable user&#8221;; (ii) because the common law had to be adapted to march in step with European and domestic environmental legislation and the 2003 permit, B&#8217;s use was deemed to have been reasonable if it complied with the terms of the permit; (iii) the grant of a permit was strategic in nature and so altered the neighbourhood&#8217;s character against which reasonableness was to be judged and the permit, by implication, provided a statutory licence for the escape of a certain amount of odour emission such that B&#8217;s use was deemed reasonable and the claims failed; (iv) by imposing a threshold requirement of one odour complaint each day, most of the claims would have failed. The court considered the test of a &#8220;reasonable user&#8221; including the planning permission and waste permit; whether B had a defence of statutory authority; and the use of a threshold."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellants: Stephen Tromans QC, John Bates, Catherine Dobson. For the respondent: Ian Croxford QC, Thomas de la Mare.",
    "CATEGORIES": [
        "Nuisance Other Related Subjects: Environment",
        "Household Waste",
        "Public Nuisance",
        "Reasonable User",
        "Smell",
        "Unlicensed Disposal of Waste"
    ],
    "CATEGORY": "Nuisance Other Related Subjects: Environment &mdash; Household Waste &mdash; Public Nuisance &mdash; Reasonable User &mdash; Smell &mdash; Unlicensed Disposal of Waste",
    "SUMMARY": [
        "A judge had erred in dismissing a claim of nuisance relating to smells emitted by a waste-tipping site by extending the existing principles of &#8220;reasonable user&#8221; and considering that complying with the terms of a permit meant that such use of the site had been reasonable. There was no basis for using a statutory scheme to cut down private law rights and, in any event, the permit did not authorise the emission of such smells."
    ],
    "COURT": "EWCA",
    "CITATION": "Barr &amp; Ors v Biffa Waste Services Limited [2012] EWCA Civ 312",
    "NUMBER": "475",
    "YEAR": "2012"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Coventry v Lawrence",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Coventry v Lawrence (no 2)",
        "(wl) Rabone v Pennine Care NHS Trust",
        "(wl) White v Chief Constable of South Yorkshire",
        "(wl) Worsley v Tambrands",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Fairchild v Glenhaven Funeral Services Ltd",
        "(wl) Dobson v Thames Water Utilities",
        "(wl) Marcic v Thames Water Utilities Ltd",
        "(wl) Robinson v Chief Constable of West Yorkshire",
        "(wl) Gregg v Scott"
    ],
    "NAME": "(wl) Kennaway v Thompson",
    "JUDGE": "Lawton LJ; Waller LJ; Sir David Cairns",
    "CIT": "[1981] QB 88",
    "HELD": [
        "allowing the plaintiff&#8217;s appeal, that the public interest should not prevail over the private interest of the person affected by the continuing nuisance and that accordingly the plaintiff was entitled to an injunction (under which the club was ordered to curtail its activities, restricting noisy meetings to a limited number of occasions). (Shelfer v City of London Electric Lighting Co (No.1) [1895] 1 Ch. 287 followed; Miller v Jackson [1977] Q.B. 966 considered)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1981",
    "CATEGORIES": [
        "Nuisance",
        "Damages",
        "Injunctions",
        "Noise",
        "Nuisance"
    ],
    "CATEGORY": "Nuisance &mdash; Damages &mdash; Injunctions &mdash; Noise &mdash; Nuisance",
    "SUMMARY": [
        "Noise; motor boat racing club; injunction",
        "Where a continuing actionable nuisance is proved, only in exceptional circumstances should damages be awarded in lieu of an injunction. Since the early 1960s motor boat racing and water-skiing had been carried on by a club of which the defendants were representatives. In 1972 the plaintiff moved into a house which she had had built near to the lake. Thereafter the nature of the club&#8217;s activities increased in frequency and noise, in that large power boats took part in international meetings preceded by periods of noisy practice. The plaintiff sought damages for nuisance and an injunction. Mais, J. awarded her GBP 1,000 for past nuisance and GBP 15,000 in respect of future nuisance, ruling that the public interest was such that it would be oppressive to enjoin the club from continuing its activities."
    ],
    "COURT": "EWCA",
    "CITATION": "Kennaway v Thompson [1981] QB 88",
    "NUMBER": "476"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Dobson v Thames Water Utilities",
        "(wl) Worsley v Tambrands",
        "(wl) Co-operative Group Ltd v Pritchard",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Coventry v Lawrence",
        "(wl) Kennaway v Thompson",
        "(wl) Coventry v Lawrence (no 2)",
        "(wl) John v MGN Ltd",
        "(wl) Hinz v Berry",
        "(wl) Steel and Morris v UK",
        "(wl) Attorney General v PYA Quarries Ltd (no 1)",
        "(wl) Dennis v Ministry of Defence"
    ],
    "NAME": "(wl) Bone v Searle",
    "JUDGE": "Stephenson LJ; Scarman LJ; Ormrod LJ",
    "CIT": "[1975] 1 WLR 797",
    "HELD": [
        "allowing the appeal against the award, that by drawing a parallel with loss of sense of smell as a result of personal injury it is confirmed that the award was erroneous and GBP 1,000 damages for each plaintiff would be substituted (dictum of Greer L.J. in Flint v Lovell [1935] 1 K.B. 354 applied)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1975",
    "CATEGORIES": [
        "Nuisance Other Related Subjects: Damages",
        "Air Pollution",
        "Injunctions",
        "Measure of Damages",
        "Odours",
        "Pigs"
    ],
    "CATEGORY": "Nuisance Other Related Subjects: Damages &mdash; Air Pollution &mdash; Injunctions &mdash; Measure of Damages &mdash; Odours &mdash; Pigs",
    "SUMMARY": [
        "Smell; no injury to health or pecuniary loss",
        "In assessing damages for loss of amenity caused by a nuisance a parallel may be drawn with the loss of amenity caused by personal injury to achieve a reasonable award without adopting any rigid standard of comparison. Over a period of twelve-and-a-half years smells emanating from a neighbouring pig farm owned by S had caused a nuisance to properties owned by B and W who claimed an injunction restraining the nuisance and damages. The judge found that no diminution in the value of the properties had resulted but granted an injunction and awarded over GBP 6,000 damages to B and W. S appealed contending, inter alia, that the award was too high."
    ],
    "COURT": "EWCA",
    "CITATION": "Bone v Searle [1975] 1 WLR 797",
    "NUMBER": "477"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Coventry v Lawrence (no 2)",
        "(wl) R v Rimmington; R v Goldstien",
        "(wl) Bone v Searle",
        "(wl) Worsley v Tambrands",
        "(wl) Steel and Morris v UK",
        "(wl) Barr & Ors v Biffa Waste Services Limited",
        "(wl) Coventry v Lawrence",
        "(wl) Kennaway v Thompson",
        "(wl) Sanderson v Hull",
        "(wl) Lippiatt v South Gloucestershire Council",
        "(wl) Tedstone v Bourne Leisure Ltd",
        "(wl) Michael v Chief Constable of South Wales"
    ],
    "NAME": "(wl) Attorney General v PYA Quarries Ltd (no 1)",
    "JUDGE": "Parker LJ",
    "CIT": "[1957] 2 QB 169",
    "HELD": [
        "on appeal, any nuisance was &#8220;public&#8221; which materially affected the reasonable comfort and convenience of life of a class of Her Majesty&#8217;s subjects and, on the evidence, a nuisance from vibration and dust was sufficiently widespread to amount to a common or public nuisance; therefore, the injunctions had been rightly granted and the appeal failed. ( Soltau v De Held 61 E.R. 291 applied R. v White and Ward 97 E.R. 338 applied; Attorney General v Sheffield Gas Consumers Co 43 E.R. 119 applied; R. v Price (1884) 12 Q.B.D. 247 applied; Attorney General v Stone (1895) 12 T.L.R. 76 applied; Attorney General v Keymer Brick and Tile Co (1903) 67 J.P. 434 applied; Attorney General v Cole &amp; Son [1901] 1 Ch. 205 applied and Attorney General v Corke [1933] Ch. 89 applied)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1957",
    "CATEGORIES": [
        "Nuisance Other Related Subjects: Civil Procedure",
        "Injunctions",
        "Public Nuisance",
        "Quarries"
    ],
    "CATEGORY": "Nuisance Other Related Subjects: Civil Procedure &mdash; Injunctions &mdash; Public Nuisance &mdash; Quarries",
    "SUMMARY": [
        "Public nuisance; vibration and dust from quarry",
        "The following principles apply to a public nuisance: - 1. Any nuisance is &#8220;public&#8221; which materially affects the reasonable comfort and convenience of life of a class of Her Majesty&#8217;s subjects. 2. The sphere of the nuisance may be described generally as &#8220;the neighbourhood&#8221;; but the question whether the local community within that sphere comprises a sufficient number of persons to constitute a class of the public is a question of fact in every case. 3. It is not necessary to prove that every member of the class has been injuriously affected; it is sufficient to show that a representative crossection of the class has been so affected for an injunction to issue. 4. In general, a public nuisance is proved by the cumulative effect which it is shown to have had on the people living within its sphere of influence. In other words, a normal and legitimate way of proving a public nuisance is to prove a sufficiently large collection of private nuisances. 5. Prima facie, if a nuisance, whether public or private, is shown to have existed at the time the writ was issued the plaintiff is entitled to an injunction. If, however, between the writ and the trial the nuisance has been abated the court will usually stay its hand and merely give the plaintiff leave to apply in the action for an injunction if the trouble should recur.Per Denning L.J.: &#8220; . . . a public nuisance is a nuisance which is so widespread in its range or so indiscriminate in its effect that it would not be reasonable to expect one person to take proceedings on his own responsibility to put a stop to it, but that it should be taken on the responsibility of the community at large.&#8221;The Attorney General in a relator action claimed an injunction perpetually restraining the defendant company from carrying on the business of quarrying in such a manner as to occasion a nuisance by dust or vibrations. The quarry adjoined a highway, and there were several houses abutting on the highway. Since 1949 there had been constant complaints by persons living near the quarry about the vibration and dust. There was a body of evidence as to personal discomfort. Oliver J. found that the various nuisances complained of still existed and granted the injunctions asked for."
    ],
    "COURT": "EWCA",
    "CITATION": "Attorney General v PYA Quarries Ltd (no 1) [1957] 2 QB 169",
    "NUMBER": "478"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Attorney General v PYA Quarries Ltd (no 1)",
        "(wl) Barr & Ors v Biffa Waste Services Limited",
        "(wl) St Helens Smelting Co v Tipping",
        "(wl) Gray v Jones",
        "(wl) Clift v Slough BC",
        "(wl) Patchett v Swimming Pool Trades Association",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)",
        "(wl) Khoransandjian v Bush",
        "(wl) Lamb v Camden LBC",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Osman v United Kingdom"
    ],
    "NAME": "(wl) R v Rimmington; R v Goldstien",
    "JUDGE": "Lord Bingham of Cornhill; Lord Nicholls of Birkenhead; Lord Rodger of Earlsferry; Baroness Hale of Richmond; Lord Brown of Eaton-under-Heywood",
    "CIT": "[2005] UKHL 63",
    "HELD": [
        "allowing the appeals, that (1) the most typical and obvious causes of public nuisance were the subject of express statutory prohibition. Where Parliament had defined the ingredients of an offence, possible defences, a prescribed mode of trial and a maximum penalty it was ordinarily proper that conduct falling within that definition be prosecuted under the statutory offence and not a common law offence for which the potential penalty was unlimited. Good practice and respect for the primacy of a statute required that conduct falling within the terms of a specific statutory provision should be prosecuted under that provision unless there was good reason for doing otherwise. Although cases of common law public nuisance were relatively rare, it was not open to the court to conclude that the common law crime of causing a public nuisance no longer existed. (2) The guiding principles of common law, that no one should be punished under a law unless it was sufficiently clear and certain to enable him to know what conduct was forbidden before he did it, and that no one should be punished for any act that was not clearly and ascertainably punishable when the act was done, were entirely consistent with Art. 7, R. v Misra (Amit) [2004] EWCA Crim 2375, [2005] 1 Cr. App. R. 21 applied. The offence of public nuisance as defined in, R. v Stephens (1865-66) L.R. 1 Q.B. 702 was clear, precise, adequately defined and based on a discernible rational principle, Stephens , Attorney General v PYA Quarries Ltd (No.1) [1957] 2 Q.B. 169 , R. v Madden (Michael John) [1975] 1 W.L.R. 1379 and Sedleigh-Denfield v O&#8217;Callagan (Trustees for St Joseph&#8217;s Society for Foreign Missions) [1940] A.C. 880 considered. In the instant case, R had not caused a common injury to a section of the public, so his conduct lacked the essential ingredient of common nuisance. To permit a conviction of causing a public nuisance to rest on an injury caused to separate individuals, rather than on an injury suffered to the community or a significant section of it as a whole, was to contradict the rationale of the offence, pervert its nature, and change the constituent elements of the offence to the detriment of the accused, R. v Norbury [1978] Crim. L.R. 435 and R. v Johnson (Anthony Thomas) [1997] 1 W.L.R. 367 doubted. R&#8217;s conviction was quashed. A defendant was responsible for a nuisance which he knew, or ought to have known, would be the consequence of what he did or omitted to do, R. v Shorrock (Peter Coar) [1994] Q.B. 279 considered. In G&#8217;s case it had not been proven that G knew or should reasonably have known that the salt would escape into the sorting office or in the course of the post. G&#8217;s conviction was therefore quashed."
    ],
    "FLAGS": [
        "Approved",
        "Hale",
        "Bingham"
    ],
    "COUNSEL": "For the appellant Rimmington: James Guthrie QC, Bernard Eaton. For the Crown in Rimmington: David Perry, Mark Rainsford. For the appellant Goldstein: Jonathan Goldberg QC, Gary Grant. For the Crown in Goldstein: David Perry, Tracy Ayling.",
    "CATEGORIES": [
        "Criminal Law Other Related Subjects: Human Rights",
        "Certainty",
        "Common Law",
        "Mens Rea",
        "No Punishment Without Law",
        "Public Nuisance"
    ],
    "CATEGORY": "Criminal Law Other Related Subjects: Human Rights &mdash; Certainty &mdash; Common Law &mdash; Mens Rea &mdash; No Punishment Without Law &mdash; Public Nuisance",
    "SUMMARY": [
        "The offence of public nuisance was clear, precise, adequately defined and based on a discernible rational principle, and was not therefore contrary to common law principles or incompatible with the Human Rights Act 1989 Sch.1 Part I Art.7.",
        "The appellants (R and G) appealed against a decision ([2003] EWCA Crim 3450, [2004] 1 W.L.R. 2878) refusing their appeals against convictions of causing a public nuisance at common law. R had sent a large number of separate postal packages containing racist material to individual members of the public based on their perceived ethnicity. He had been charged on indictment of a single count of public nuisance, contrary to common law. G had posted an envelope containing salt to the address of a friend as a practical joke. The envelope did not reach G&#8217;s friend, as at a post sorting office some of the salt leaked onto a postal worker&#8217;s hands. The postal worker raised the alarm believing that the salt was anthrax. The sorting office was evacuated, the second delivery was cancelled and the police were called. R and G submitted that (1) the conduct formerly chargeable as the crime of public nuisance had now become the subject of express statutory provision, that the offence should be charged under the appropriate statutory provision, and that the crime of public nuisance had therefore ceased to have any practical application or legal existence; (2) the crime of causing a public nuisance, as currently interpreted and applied, lacked the certainty and predictability necessary to meet the requirements of the common law itself or the Human Rights Act 1998 Sch.1 Part I Art.7 ."
    ],
    "COURT": "UKHL",
    "CITATION": "R v Rimmington; R v Goldstien [2005] UKHL 63",
    "NUMBER": "479",
    "YEAR": "2005"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Gore v Stannard (trading as Wyvern Tyres)",
        "(wl) LMS International v Styrene Packaging Ltd",
        "(wl) Hussain v Lancaster CC",
        "(wl) Pierce v Doncaster MBC",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Lister v Hesley Hall",
        "(wl) Richardson v LRC Products Ltd",
        "(wl) Crown River Cruises Ltd v Kimbolton Fireworks Ltd",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) W v Essex County Council and Another",
        "(wl) Reeves v Metropolitan Police Commissioner"
    ],
    "NAME": "(wl) Transco Plc v Stockport MBC",
    "JUDGE": "Lord Bingham of Cornhill; Lord Hoffmann; Lord Hobhouse of Woodborough; Lord Scott of Foscote; Lord Walker of Gestingthorpe",
    "CIT": "[2003] UKHL 61",
    "HELD": [
        "dismissing the appeal, that the test was whether the local authority had done something on its land which it (1) recognised, or ought reasonably to have recognised judged by the standards appropriate to the place and time, as giving rise to an exceptionally high risk of danger or mischief if there should be an escape, and (2) recognised, or ought to have recognised, as being quite out of the ordinary for the place and time. Piping of a water supply was a routine function which would not have struck anyone as raising any special hazard. The local authority had not accumulated any water but had merely arranged a supply adequate to meet the needs of the residents of the flats; the situation did not stand comparison with the substantial reservoir in Rylands v Fletcher . It was entirely normal and routine and could not be seen as in any way extraordinary or unusual, Rylands v Fletcher considered. The conditions to be met before strict liability could be imposed on the local authority were far from being met on the facts of this case."
    ],
    "FLAGS": [
        "Approved",
        "Bingham",
        "Hoffmann"
    ],
    "COUNSEL": "For T: Ian Leeming Q.C. and Robert Sterling. For the local authority: Mark Turner Q.C., Stephen Davies and John Sorabji.",
    "CATEGORIES": [
        "Torts",
        "Escape",
        "Local Authorities' Powers and Duties",
        "Natural User",
        "Negligence",
        "Nuisance",
        "Right of Support",
        "Rylands V Fletcher Liability",
        "Strict Liability",
        "Subsidence",
        "Water Supply"
    ],
    "CATEGORY": "Torts &mdash; Escape &mdash; Local Authorities' Powers and Duties &mdash; Natural User &mdash; Negligence &mdash; Nuisance &mdash; Right of Support &mdash; Rylands V Fletcher Liability &mdash; Strict Liability &mdash; Subsidence &mdash; Water Supply",
    "SUMMARY": [
        "The court reviewed the rule of law laid down in Rylands v Fletcher, finding that the piping of a water supply from the mains to storage tanks within a property was a routine function that would not ordinarily raise a hazard and was therefore an ordinary use of the land.",
        "T appealed against a ruling ([2001] EWCA Civ 212, [2001] Env. L.R. 44) that the local authority was not liable for damage to T&#8217;s property under the rule in Rylands v Fletcher (1868) L.R. 3 H.L. 330 . Water had escaped from a pipe belonging to the local authority and supplying a block of flats of which it was the owner. There was no negligence on the part of the local authority. The water caused the collapse of a nearby railway embankment which left a gas pipe belonging to T unsupported and at risk of damage. T claimed against the local authority the cost of remedial measures to protect the gas pipe, arguing that the local authority was liable for damage caused by the escape of the water without proof of negligence. The issues to be decided were whether the local authority had brought onto its land something likely to cause danger or mischief if it escaped, and that was an ordinary user of its land."
    ],
    "COURT": "UKHL",
    "CITATION": "Transco Plc v Stockport MBC [2003] UKHL 61",
    "NUMBER": "480",
    "YEAR": "2003"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Transco Plc v Stockport MBC",
        "(wl) LMS International v Styrene Packaging Ltd",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Vellino v Chief Constable of Greater Manchester",
        "(wl) Coventry v Lawrence",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Stennett v Hancock",
        "(wl) Humber Oil v The Owners of the Ship 'The Sivand'",
        "(wl) Wooten v J Docter",
        "(wl) Osman v United Kingdom",
        "(wl) Ferguson v John Dawson & Partners (Contractors) Ltd",
        "(wl) Barker v Corus (UK)"
    ],
    "NAME": "(wl) Gore v Stannard (trading as Wyvern Tyres)",
    "JUDGE": "Ward LJ; Etherton LJ; Lewison LJ",
    "CIT": "[2012] EWCA Civ 1248",
    "HELD": [
        "Appeal allowed.",
        "(1) The decision in Transco Plc v Stockport MBC [2003] UKHL 61, [2004] 2 A.C. 1 was the seminal authority for the test to be applied in Rylands v Fletcher . The proper approach was that the defendant had to be the owner or occupier of land; he had to bring, keep or collect an exceptionally dangerous or mischievous thing on his land; he had to have recognised, or ought reasonably to have recognised, that there was an exceptionally high risk of danger or mischief if that thing should escape; his use of the land had to be extraordinary and unusual; the thing had to escape from his property into or onto the property of another; the escape had to cause damage of a type relevant to the right and enjoyment of the claimant&#8217;s land. That re-statement of the rule had not left aside fire damage as some special category. It was not easy to rationalise the troubling decision in Musgrove v Pandelis [1919] 2 K.B. 43, but the court was bound to hold that the guidance in Transco applied in cases involving the escape of fire, Transco followed. However, cases of fire damage were likely to be very difficult to bring within the rule. First, it was the &#8220;thing&#8221; which had been brought onto the land which had to escape, not the fire which was started or increased by the &#8220;thing&#8221;. Second, whilst fire might be a dangerous thing, the occasions when it was brought onto land might be limited to cases where the fire had been deliberately or negligently started by the occupier. Third, starting a fire on one&#8217;s own land might well be an ordinary use of the land. Musgrove had to be treated as a fact-sensitive decision and would most definitely be decided differently in present times, Musgrove doubted (see paras 21-22, 46-49 of judgment). In the instant case, the &#8220;thing&#8221; brought onto S&#8217;s premises was a large stock of tyres, which were not exceptionally dangerous or mischievous. There was no evidence that W recognised or ought to have recognised that there was an exceptionally high risk of danger or mischief if they escaped. What had escaped was the fire, not the tyres. The recorder had been wrong to conclude that the escape of fire brought the case within Rylands v Fletcher principles. In any event, keeping tyres on the premises of a tyre-fitting business was not an extraordinary or unusual use of the land. Liability under Rylands v Fletcher had not been established (para.50). (2) (Per Lewison L.J.) The scope of strict liability in relation to fire should have been limited further. A fire which started accidentally had not been brought onto the land by the occupier &#8220;for his own purposes&#8221;. Under s.86 of the 1774 Act, a person was expressly exempted from liability for accidental fires. Parliament must have intended to change the common law proposition that a man &#8220;must use his own as not to injure another&#8221;. The decision in Mason v Levy Auto Parts of England Ltd [1967] 2 Q.B. 530, which followed Musgrove, was wrong and should have been overruled. An occupier of land should not be liable to his neighbour for a fire that began accidentally unless he was negligent in failing to prevent its spread, Transco, Musgrove, Mason and Goldman v Hargrave [1967] 1 A.C. 645 considered (paras 107, 109, 112, 126, 129, 164-166)."
    ],
    "ABSTRACT": [
        "The appellant (W) appealed against a decision that he was liable, under the rule in Rylands v Fletcher , for damage caused to the land of the respondent (G).",
        "W ran a business supplying vehicle tyres and stored some 3,000 tyres on its premises, which were next to G&#8217;s premises. A fire broke out, caused by W&#8217;s wiring or electrical appliances. The fire quickly intensified, ignited the tyres, and spread to G&#8217;s premises. The court found that S had a defence to a claim of negligence, under the Fires Prevention (Metropolis) Act 1774 s.86, because the fire was accidental. However, it found that the rule in Rylands v Fletcher applied because the haphazard way in which the tyres were stored was dangerous and a non-natural use of the land within the meaning of the rule. The issue was whether there was a special operation of the rule in Rylands v Fletcher when damage to a claimant&#8217;s land was caused by the spread of fire."
    ],
    "COUNSEL": "For the appellant: Jonathan Waite QC, Michele de Gregorio. For the respondent: Philip Rainey QC, Nicholas Isaac.",
    "CATEGORIES": [
        "Torts Other Related Subjects: Real Property",
        "Dangerousness",
        "Dangerous User",
        "Escape",
        "Fire",
        "Natural User",
        "Rylands V Fletcher Liability",
        "Strict Liability",
        "Tyres"
    ],
    "CATEGORY": "Torts Other Related Subjects: Real Property &mdash; Dangerousness &mdash; Dangerous User &mdash; Escape &mdash; Fire &mdash; Natural User &mdash; Rylands V Fletcher Liability &mdash; Strict Liability &mdash; Tyres",
    "SUMMARY": [
        "The guidance set out in Transco Plc v Stockport MBC [2003] UKHL 61, [2004] 2 A.C. 1 for the application of the rule in Rylands v Fletcher applied to cases involving the escape of fire. However, cases of fire damage were likely to be very difficult to bring within the rule for several reasons, including the fact that it was the &#8220;thing&#8221; which had been brought onto the land which had to escape, not the fire."
    ],
    "COURT": "EWCA",
    "CITATION": "Gore v Stannard (trading as Wyvern Tyres) [2012] EWCA Civ 1248",
    "NUMBER": "481",
    "YEAR": "2012"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Gore v Stannard (trading as Wyvern Tyres)",
        "(wl) Various Claimants v Institute of the Brothers of the Christian Schools",
        "(wl) Wooldridge v Sumner",
        "(wl) McKew v Holland & Hannen & Cubitts (Scotland) Ltd",
        "(wl) Lamb v Camden LBC",
        "(wl) Maga v Birmingham Roman Catholic Archdiocese Trustees",
        "(wl) Hughes v Lord Advocate",
        "(wl) Revill v Newbery",
        "(wl) Mullin v Richards",
        "(wl) Crown River Cruises Ltd v Kimbolton Fireworks Ltd",
        "(wl) Pierce v Doncaster MBC"
    ],
    "NAME": "(wl) LMS International v Styrene Packaging Ltd",
    "JUDGE": "Judge Peter Coulson QC",
    "CIT": "[2005] EWHC 2065 (TCC)",
    "HELD": [
        "giving judgment for L and C, that (1) the cause of the fire was probably associated with an arc or spark caused by the breaking of a wire that ignited the block being cut. The stages in the causation of the fire were not unusual and not in any way inexplicable. (2) In respect of Rylands v Fletcher liability S had brought on to their premises things which were likely to cause and/or catch fire. The flammable material was kept in such a way that if ignited the fire was likely to spread to L&#8217;s premises. The flammable material and the hot wire cutting machine represented a recognisable risk to L. S&#8217;s use of the land was a non-natural user, Cambridge Water Co Ltd v Eastern Counties Leather Plc [1994] 2 A.C. 264 applied and Transco Plc v Stockport MBC [2003] UKHL 61, [2004] 2 A.C. 1 distinguished. (3) S was clearly liable in negligence and nuisance. They failed to take proper fire precautions. There were no interlocks on the cutting machine and the staff were not properly trained to deal with fires. The employee operating the hot wire cutter had not been trained and should not have been left unsupervised. S should have properly segregated the stored blocks of polystyrene or installed an automatic fire detection system. The decision not to install such a system was negligent and in breach of the Fire Precautions (Workplace) Regulations 1997 . (4) There was also negligence in failing to deal with or abate the fire immediately. (5) S was also liable to L in nuisance for failing to carry out proper works to the party wall after the fire. (6) D were not liable as landlords for the default of S, but they were liable to C under the terms of various deeds for failing to provide proper support to the party wall by carrying out appropriate remedial works after the fire."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the claimants: Stephen Bickford-Smith. For the defendants: Andrew McGee.",
    "CATEGORIES": [
        "Torts Other Related Subjects: Negligence",
        "Damage",
        "Fire",
        "Negligence",
        "Party Walls",
        "Right of Support",
        "Rylands V Fletcher Liability"
    ],
    "CATEGORY": "Torts Other Related Subjects: Negligence &mdash; Damage &mdash; Fire &mdash; Negligence &mdash; Party Walls &mdash; Right of Support &mdash; Rylands V Fletcher Liability",
    "SUMMARY": [
        "Rylands v Fletcher liability; fire; making and storing polystyrene blocks; non-natural user of land",
        "The claimants claimed against the defendants under the rule in Rylands v Fletcher and in negligence and nuisance in respect of a fire which had spread from the factory premises occupied by the first defendant (S) to the adjoining premises occupied by the first claimant (L) and owned by the second and third claimants (C). S made expanded polystyrene at its premises. The fire had broken out whilst an employee of S was cutting expanded polystyrene blocks with a hot wire machine. The fire had spread quickly and S&#8217;s premises had been largely destroyed. Fire and smoke had caused extensive damage to L&#8217;s premises and their contents. L claimed for damage to machinery, plant and stock and business interruption and C claimed for building reinstatement costs and loss of rent. The claim was based on strict liability for the escape of fire in accordance with the rule in Rylands v Fletcher , alternatively on negligence and nuisance. There was a secondary negligence/nuisance claim based on S&#8217;s alleged failure to take prompt action to put the fire out. The claims were also made against the individual defendants (D) as S&#8217;s landlords."
    ],
    "COURT": "EWHC",
    "CITATION": "LMS International v Styrene Packaging Ltd [2005] EWHC 2065 (TCC)",
    "NUMBER": "482",
    "YEAR": "2005"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) British Chiropractic Association v Singh",
        "(wl) Steel and Morris v UK",
        "(wl) Monk v PC Harrington Ltd",
        "(wl) Coxall v Goodyear Great Britain Ltd",
        "(wl) Lennon v Commissioner of Police of the Metropolis",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Roe v Minister of Health",
        "(wl) Anns v Merton London Borough Council",
        "(wl) Smith v Stages",
        "(wl) Bailey v Ministry of Defence",
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Allen v Chief Constable of Hampshire"
    ],
    "NAME": "(wl) Ellison v Ministry of Defence",
    "JUDGE": "Coulson J",
    "CIT": "[2016] EWHC 590 (TCC)",
    "HELD": [
        "Judgment for claimant.",
        "(1) In light of the Oxford English dictionary definition of &#8220;deliberate&#8221;, the expression &#8220;deliberate or fraudulent non-disclosure&#8221; suggested a situation where the company intentionally failed to disclose something which it knew it should disclose. There was plenty of authority that the use of &#8220;deliberate&#8221; in the context of a &#8220;breach&#8221; or &#8220;default&#8221; meant an intentional act, and there was no logical distinction between a deliberate breach, on the one hand, and a deliberate non-disclosure on the other, De Beers UK Ltd (formerly Diamond Trading Co Ltd) v Atos Origin IT Services UK Ltd [2010] EWHC 3276 (TCC), [2011] B.L.R. 274 considered. In each case, the act or omission involved an element of culpability, of doing something which should not be done: it incorporated an element of dishonest wrongdoing. The word &#8220;deliberate&#8221; meant that the act of non-disclosure was intentional, that the insured acted in a way in which they knew they should not. Furthermore, the presumption against surplusage was not a &#8220;hard-edged&#8221; rule and the court should guard against giving it too much prominence in circumstances where some surplusage was often found in commercial contracts, Ener-G Holdings Plc v Hormell [2012] EWCA Civ 1059, [2013] 1 All E.R. (Comm) 1162 considered. In any event, the court was not persuaded that &#8220;deliberate&#8221; and &#8220;fraudulent&#8221; meant the same thing. Conduct could be deliberate and dishonest but not fraudulent. For example, a breach of contract could be deliberate and made in the knowledge that it was a breach, but might not be fraudulent. Similarly, a representation might be dishonest but, if there was no intention to deceive or no intention that the misrepresentation be acted upon, then it was not fraudulent. Guidance from the Financial Ombudsman Service also drew that distinction. A sensible and workable distinction between deliberate dishonesty and fraud was readily identifiable. On that basis, both words had utility, but both involved an element of dishonesty. Accordingly, &#8220;deliberate or fraudulent non-disclosure&#8221; in cl.6(a) meant a deliberate decision not to disclose something which the insured knew should be disclosed, and did not extend to an honest mistake (see paras 25-32, 35-36, 40-43, 45 of judgment).",
        "(2) The proviso in cl.6(a) was a carve-out: an acknowledgement that, despite the wide range of remedies which the insurers accepted were not available to them, there was one type of situation which they were not prepared to forego. There was nothing in cl.5 or cl.6(a) which supported the insurers&#8217; case for a wide interpretation of the carve out (paras 46-52).",
        "(3) A finding that the company would be penalised for dishonesty, but not for an honest mistake accorded with commercial common sense, HIH Casualty &amp; General Insurance Ltd v Chase Manhattan Bank [2003] UKHL 6, [2003] 1 All E.R. (Comm) 349 considered (paras 54-55)."
    ],
    "ABSTRACT": [
        "The court was required to determine the meaning of &#8220;deliberate ... non-disclosure&#8221; in an exclusion clause in an insurance policy.",
        "The claimant company owned and operated an undersea interconnector which provided a link between the electricity systems of Northern Ireland and Scotland. The interconnector was insured by the defendant insurers. In Clause 5 of the policy the insurers acknowledged that they had received adequate information to evaluate the risk of insurance, and in cl.6(a) they agreed that the policy could only be avoided for reasons of non-disclosure where that non-disclosure had been deliberate or fraudulent. In 2011 the company made a claim under the policy. The insurers tried to rely on cl.6(a) by alleging that the company had deliberately failed to disclose that there had been problems with the interconnector&#8217;s cables.",
        "The issue was whether the reference in the policy to &#8220;deliberate ... non-disclosure&#8221; meant that the contract could be avoided where the company had honestly but mistakenly decided not to disclose a particular document or fact; or whether it meant that avoidance was only available if there had been a deliberate decision not to disclose, such that the non-disclosure involved an element of dishonesty.",
        "The insurers argued that fraudulent non-disclosure involved an element of dishonesty, and the presumption against surplusage meant that &#8220;deliberate ... non-disclosure&#8221; had to be given a separate and distinct meaning."
    ],
    "COUNSEL": "For the claimant: Marcus Taverner QC, Calum Lamont. For the defendants: Tom Adam QC, Nicholas Saunders.",
    "CATEGORIES": [
        "Insurance Other Related Subjects: Contracts",
        "Dishonesty",
        "Electricity Interconnectors",
        "Exclusion Clauses",
        "Insurance Contracts",
        "Non-Disclosure"
    ],
    "CATEGORY": "Insurance Other Related Subjects: Contracts &mdash; Dishonesty &mdash; Electricity Interconnectors &mdash; Exclusion Clauses &mdash; Insurance Contracts &mdash; Non-Disclosure",
    "SUMMARY": [
        "The court determined that &#8220;deliberate ... non-disclosure&#8221;, as referred to in an exclusion clause in an insurance policy, had to involve a dishonest decision not to disclose. A company&#8217;s decision not to disclose something as the result of an honest but mistaken belief that it did not need to be disclosed was therefore not enough to allow the insurers to avoid the policy."
    ],
    "COURT": "EWHC",
    "CITATION": "Ellison v Ministry of Defence [2016] EWHC 590 (TCC)",
    "NUMBER": "483",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Barker v Corus (UK)",
        "(wl) Sienkiewicz v Greif (combined appeals)",
        "(wl) Viasystems (Tyneside) Ltd v Thermal Transfer (Northern) Ltd",
        "(wl) JD v East Berkshire Community Health NHS Trust",
        "(wl) Attorney General of the British Virgin Islands v Hartwell",
        "(wl) Butcher v Southend-on-Sea BC",
        "(wl) Dobson v Thames Water Utilities",
        "(wl) McKenna v British Aluminium Ltd",
        "(wl) Harris v Perry and another",
        "(wl) A v United Kingdom",
        "(wl) Phipps v Rochester Corporation",
        "(wl) Coxall v Goodyear Great Britain Ltd"
    ],
    "NAME": "(wl) Gray v Jones",
    "JUDGE": "Lord Neuberger PSC; Lord Clarke JSC; Lord Sumption JSC; Lord Carnwath JSC; Lord Hodge JSC",
    "CIT": "[2015] UKSC 72",
    "HELD": [
        "Appeal dismissed.",
        "(1) Implied terms generally - A clear statement of the tests of necessity for business efficacy and obviousness in relation to implying terms appeared in BP Refinery (Westernport) Pty Ltd v Shire of Hastings 180 C.L.R. 266, BP considered. The instant court made additional observations: (a) the implication of a term was not dependent on proof of an intention of the parties; the court was not concerned with the hypothetical answer of the actual parties, but with that of notional reasonable people in their position; (b) a term should not be implied into a detailed commercial contract merely because it appeared fair or because the parties would have agreed it if it had been suggested to them; (c) business necessity and obviousness could be alternatives, in the sense that only one of them needed to be satisfied; (d) if the officious bystander test was used, it was vital to formulate the question to be posed by him with the utmost care; (e) necessity for business efficacy required a value judgement. A simpler way of putting it was that a term could only be implied if, without the term, the contract would lack commercial or practical coherence, Philips Electronique Grand Public SA v British Sky Broadcasting Ltd [1995] E.M.L.R. 472 and Atkins International HA of Vaduz v Islamic Republic of Iran Shipping Lines (The APJ Priti) [1987] 2 Lloyd&#8217;s Rep. 37 applied. The decision in Attorney General of Belize v Belize Telecom Ltd [2009] UKPC 10, [2009] 1 W.L.R. 1988 suggested that the process of implying terms into a contract was part of the exercise of construing the contract. However, construing the words used in a contract and implying additional words were different processes governed by different rules. It was only after the process of construing the express words was complete that the issue of an implied term fell to be considered. The observations of Lord Hoffman at paras 17-27 of the Belize judgment should be treated as inspired discussion rather than authoritative guidance. Belize did not relax the traditional and highly restrictive approach to the implication of terms, Belize explained (see paras 18-22, 26, 31, 60, 66, 77 of judgment).",
        "(2) Factors in favour of an implied term - Each quarter&#8217;s rent paid in advance was referable to the tenant&#8217;s use and enjoyment of the premises for that quarter. There was real force in the contention that if the landlord could retain the advance rent it would be unfairly prejudicial to the tenant. Further, the parties had agreed the terms of the break clause not knowing whether the break dates would be after, before or even on a quarter day. That supported the notion that they were unlikely to have intended the apportioned rent be retained by the landlord as part of the compensation for the operation of the break clause (paras 33-34).",
        "(3) Factors against an implied term - The lease was a very detailed document, entered into between experienced parties and drafted by expert solicitors. The established legal background against which the lease was entered into was also relevant. Rent was not apportionable in time in common law. That position had been remedied to a certain extent by the Apportionment Act 1870 s.2 in relation to rent paid in arrears. However, s.2 did not apply to rent payable in advance, Ellis v Rowbotham [1900] 1 Q.B. 740 approved (paras 38, 42-44).",
        "(4) Outcome - Save in a very clear case, it would be wrong to attribute to a landlord and tenant an intention that the tenant should receive an apportioned part of the rent paid in advance, when the non-apportionability of such rent had been so clearly established for so long. Express words would be needed before it would be right to imply a term to the contrary. The tenant&#8217;s appeal therefore failed in relation to the advance payments of rent, car parking and insurance (paras 50, 55).",
        "(5) Service charge - The position in relation to the service charge was different as the lease enabled the service charge to be apportioned (para.55).",
        "(6) (Per Lord Carnwath) The judgment in Belize had stimulated more than usual academic controversy, but that was not sufficient to question its continuing authority, Belize considered (para.74)."
    ],
    "ABSTRACT": [
        "A tenant (M) appealed against a decision ([2014] EWCA Civ 603, [2014] L. ) that a term concerning repayment of rent could not be implied into a lease.",
        "The term of the lease ran until 2 February 2018. Rent was payable quarterly in advance on the usual quarter days. M exercised a right to terminate the lease under a break clause, and the lease terminated on 24 January 2012. Notice given under the break clause would only be effective if there were no arrears of rent and a break premium of one year&#8217;s rent was paid. M therefore paid the basic rent in full for the quarter starting on 25 December 2011 and ending on 24 March 2012, together with the break premium. Thereafter M demanded repayment of the rent for the period from 25 January to 24 March 2012. The landlord refused to make repayment and M commenced proceedings to recover the rent, a car parking fee, insurance charge and service charge for the post-termination period. The judge at first instance held that a term should be implied into the lease to the effect that M was entitled to those sums. The Court of Appeal disagreed."
    ],
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "COUNSEL": "For the appellant: Guy Fetherstonhaugh QC, Kester Lees. For the respondents: Nicholas Dowding QC, Mark Sefton.",
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Contracts",
        "Apportionment",
        "Break Clauses",
        "Business Tenancies",
        "Implied Terms",
        "Rent",
        "Repayments"
    ],
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Contracts &mdash; Apportionment &mdash; Break Clauses &mdash; Business Tenancies &mdash; Implied Terms &mdash; Rent &mdash; Repayments",
    "SUMMARY": [
        "It would be wrong to imply a term that a tenant would be entitled to a refund of rent paid quarterly in advance if it exercised a break clause. It was well-established that rent paid in advance could not be apportioned on a time basis. It would be wrong to attribute an intention to the contrary save in a very clear case."
    ],
    "COURT": "UKSC",
    "CITATION": "Gray v Jones [2015] UKSC 72",
    "NUMBER": "484",
    "YEAR": "2015"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Baturina v Times Newspapers",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Donoghue v Folkstone Properties",
        "(wl) Transco Plc v Stockport MBC",
        "(wl) Dorset Yacht Co Ltd v Home Office",
        "(wl) McFarlane v EE Caledonia Ltd",
        "(wl) British Chiropractic Association v Singh",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Joyce v O'Brien",
        "(wl) Holbeck Hall Hotel Ltd v Scarborough Borough Council",
        "(wl) Barker v Corus (UK)"
    ],
    "NAME": "(wl) Berkoff v Burchill and The Times",
    "JUDGE": "Neill LJ; Millett LJ; Phillips LJ",
    "CIT": "[1996] 4 All ER 1008",
    "HELD": [
        "dismissing the appeal, that words could be defamatory even if they did not impute disgraceful behaviour or deficiencies in the conduct of business or professional activities. In B&#8217;s case, the test required was whether the words were defamatory when read in context by an ordinary reader. In libel, the words were not to be construed by reference to the publisher&#8217;s intention, although this could colour their meaning, but by the reader&#8217;s reaction to them. As a result, a jury might conclude that the context in which the remarks appeared might give an impression that B, a person in the public eye, was repulsive, and it was wrong to decide such a preliminary issue by withdrawing the matter completely from a jury&#8217;s consideration. Millett, L.J., dissenting, held that words used in jest should not be actionable. Even though the words used were meant to ridicule B, they did not make him look ridiculous or lower his reputation in the eyes of the public and in this sense they were not defamatory."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For B: Manuel Barca. For the defendants: James Price Q.C.",
    "CATEGORIES": [
        "Torts",
        "Defamation"
    ],
    "CATEGORY": "Torts &mdash; Defamation",
    "SUMMARY": [
        "Libel; reputation; derogatory reference to actor&#8217;s physical appearance; whether words were capable of being defamatory was matter for jury",
        "The defendant appealed against a decision refusing an application under the Rules of the Supreme Court Ord.14A for a ruling that using the term &#8220;hideously ugly&#8221; was not capable of being defamatory, as alleged in B&#8217;s statement of claim. Two film reviews, written by the defendant and published in a Sunday newspaper, made deprecatory remarks about the physical appearance of B, an actor and director, who contended that these were intended to mean he was ugly in a way that exposed him to ridicule and that he was liable to be shunned as a result. The defendant argued that injury to feelings or annoyance caused by a statement was not relevant to the issue of defamation, which was defined solely by whether the words used were capable of causing injury to a person&#8217;s reputation."
    ],
    "COURT": "EWCA",
    "CITATION": "Berkoff v Burchill and The Times [1996] 4 All ER 1008",
    "NUMBER": "485",
    "YEAR": "1996"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Baturina v Times Newspapers",
        "(wl) Milne v Express Newspapers Ltd",
        "(wl) Ames v The Spamhaus Project Ltd",
        "(wl) Spiller v Joseph",
        "(wl) Lewis v Daily Telegraph Ltd",
        "(wl) British Chiropractic Association v Singh",
        "(wl) Waterson v Lloyd",
        "(wl) Cooke v Mirror Group Newspapers Ltd",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Telnikoff v Matusevich"
    ],
    "NAME": "(wl) Thornton v Telegraph Media Group Ltd",
    "JUDGE": "Tugendhat J",
    "CIT": "[2010] EWHC 1414 (QB)",
    "HELD": [
        "Application granted.",
        "(1) Business defamation, as defined in Berkoff v Burchill [1996] 4 All E.R. 1008 and in Duncan &amp; Neil on Defamation, 3rd edn Ch 4, where it was dealt with almost as a separate tort, envisaged a claim for libel succeeding which might not involve any adverse reflection on the personal qualities of the claimant, Berkoff followed. Regardless of whether there was a separate tort of &#8220;business defamation&#8221; such cases did require separate consideration. Clearly a distinction had to be made between an imputation upon the goods or products of a professional or business person and an imputation upon the person himself, since the only cause of action available for the former would be malicious falsehood, South Hetton Coal Co Ltd v North Eastern News Association Ltd [1894] 1 Q.B. 133 considered. There was however, a danger of reading too much into Lord Esher&#8217;s example of the wine merchant in South Hetton , since no reference was made in that case to the fact that business men and professionals, including writers, could choose to deal in or produce different products directed to different markets. Some professionals had to work to a specific professional standard, but others, such as writers, were free to direct different products to different readerships or markets. As long as the true position was made clear by the writer to the prospective reading public, the standards to which a writer wrote were simply a matter of choice of one product over another. To impute to a writer that she wrote to one standard rather than another could not of itself be defamatory, Drummond-Jackson v British Medical Association [1970] 1 W.L.R. 688 considered and Dee v Telegraph Media Group Ltd [2010] EWHC 924 (QB), [2010] E.M.L.R. 20 applied. In the instant case, the copy approval allegation was not capable of being a personal libel since it related only to T&#8217;s professional practices, nor was it capable of being professional libel, Derbyshire CC v Times Newspapers Ltd [1993] A.C. 534 applied. There was some similarity between the position of writers and the position of sportsmen in Dee, but it was not possible to translate the principles in cases such as South Hetton and Drummond-Jackson to the arena of professional writing. (2) Whatever definition of &#8220;defamatory&#8221; in Berkoff was adopted, and regardless of whether the defamation was business or professional or some other type of defamation, it had to include a qualification or threshold of seriousness so as to exclude trivial claims, Sim v Stretch [1936] 2 All E.R. 1237, Ecclestone v Telegraph Media Group Ltd [2009] EWHC 2779 (QB) and Jameel v Dow Jones &amp; Co Inc [2005] EWCA Civ 75, [2005] Q.B. 946 applied. The court gave guidance about how the definitions in Berkoff should be construed and/or elaborated so as to give effect to the threshold of seriousness."
    ],
    "ABSTRACT": [
        "The applicant newspaper (X) applied for summary judgment of an action for libel commenced by the respondent book author (T).",
        "Whilst researching her book, T had conducted several interviews. X had published an unfavourable review of the book, in which it stated among other things that T had given her interviewees the right to read what she proposed to say about them and alter it, which was known by journalists as &#8220;copy approval&#8221; and very much disapproved of. T considered X&#8217;s statement to have a defamatory meaning. She maintained in her particulars of claim that the statement also suggested a second defamatory meaning, namely that she had shown herself to be untrustworthy and fatally lacking in integrity and credibility as a researcher and writer. The court was required to determine, for the purposes of both CPR r.24.2 and CPR PD 53 4.1(2) whether T had a real prospect of establishing that the relevant words were defamatory of her.",
        "X submitted that in order to be actionable as business defamation and defeat defences of justification and fair comment, words had to do more than injure a claimant in the way of their office, profession or trade. X contended that as copy approval was not illegal or contrary to any professional code, the allegation did not amount to business libel because it was not serious enough to pass the required threshold of seriousness. T argued that the allegation was business or professional libel because it undermined her integrity as a professional writer and that to impute incompetence in a claimant&#8217;s profession was sufficient to constitute defamation."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the respondent: Justin Rushbrooke. For the applicant: David Price.",
    "CATEGORIES": [
        "Defamation Other Related Subjects: Media and Entertainment",
        "Authors",
        "Defamatory Meaning",
        "Fair Comment",
        "Justification",
        "Libel",
        "Newspapers",
        "Reputation",
        "Ridicule",
        "Summary Judgments"
    ],
    "CATEGORY": "Defamation Other Related Subjects: Media and Entertainment &mdash; Authors &mdash; Defamatory Meaning &mdash; Fair Comment &mdash; Justification &mdash; Libel &mdash; Newspapers &mdash; Reputation &mdash; Ridicule &mdash; Summary Judgments",
    "SUMMARY": [
        "In the context of defamation, the position of professional writers could be compared to the position of professional sportsmen in Dee v Telegraph Media Group Ltd [2010] EWHC 924 (QB), [2010] E.M.L.R. 20; writers were free to direct different products to different readerships or markets. As long as the true position was made clear by the writer to the prospective reading public, the standards to which a writer wrote were simply a matter of choice of one product over another and therefore to impute to a writer that they wrote to one standard rather than another could not of itself be defamatory."
    ],
    "COURT": "EWHC",
    "CITATION": "Thornton v Telegraph Media Group Ltd [2010] EWHC 1414 (QB)",
    "NUMBER": "486",
    "YEAR": "2010"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) British Chiropractic Association v Singh",
        "(wl) John v MGN Ltd",
        "(wl) Baturina v Times Newspapers",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Berkoff v Burchill and The Times",
        "(wl) Dulieu v White",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Horrocks v Lowe",
        "(wl) Spiller v Joseph",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)",
        "(wl) Thornton v Telegraph Media Group Ltd"
    ],
    "NAME": "(wl) Cooke v Mirror Group Newspapers Ltd",
    "JUDGE": "Bean J",
    "CIT": "[2014] EWHC 2831 (QB)",
    "HELD": [
        "Preliminary issues determined.",
        "(1) A reasonable reader would not think that M was being depicted as a &#8220;slum landlord&#8221;. The natural and ordinary meaning of the words complained of was that (a) M, whose chief executive was C, was one of the well-off landlords of rented properties on a particular street who let houses to people in receipt of housing benefit at rents of up to \u00a3650 per month, thereby making money from the misery of those residents; and that (b) C was personally responsible for that conduct of M, and had herself profited and become rich from it, in that she was paid \u00a3179,000 a year and lived in a large house in Gloucestershire. The apology was sufficient in the mind of the hypothetical reader to eradicate or at least minimise any unfavourable impression of M or C created by the original article in the mind of the hypothetical reasonable reader who read both. That left a residual class of readers of the original article who had not read the apology. As far as the latter group was concerned, it was important to note that the apology was now far more accessible on internet searches than the original article. Only someone actively trying to find the unamended article might come across it. The apology was not relevant to meaning, but was relevant to the issue of serious harm. The claimants accepted that there was no specific evidence that the article had caused serious harm to their reputation so far and such serious harm could not be inferred. They had also failed to show that it was more likely than not to cause serious harm to their reputations in the future (see paras 17,19, 21-22, 44-45 of judgment)."
    ],
    "ABSTRACT": [
        "The court was required to determine preliminary issues in a defamation claim brought by the claimants (C and M) against the defendants (X) following the publication of a newspaper article.",
        "C was the CEO of M, a private housing association, and both had been mentioned in an article that focussed on a landlord who was said to have been benefitting from letting sub-standard properties to tenants on benefits. The article mentioned C&#8217;s salary and the location of her home. An online version of the article was published but was subsequently deleted. Following the exchange of correspondence between the parties, X published an apology. A deputy master ordered the trial of two preliminary issues, namely (i) the defamatory meaning of the words, particularly in the context of the entire article, and (ii) whether the article had caused serious harm to the reputations of either or both of the claimants within the meaning of the Defamation Act 2013 s.1.",
        "The claimants submitted that the article was about &#8220;slum landlords&#8221; who were benefitting from squalid properties in &#8220;benefits street&#8221; and that they were part of the &#8220;rogue&#8217;s gallery&#8221; in the article."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the claimants: Hugh Tomlinson QC. For the defendants: David Price QC.",
    "CATEGORIES": [
        "Defamation",
        "Defamatory Meaning",
        "Preliminary Issues",
        "Publication"
    ],
    "CATEGORY": "Defamation &mdash; Defamatory Meaning &mdash; Preliminary Issues &mdash; Publication",
    "SUMMARY": [
        "The court, as a preliminary issue, determined the defamatory meaning of words complained of in a defamation claim but determined that the claimants had not demonstrated serious harm to their reputations as required by the Defamation Act 2013 s.1."
    ],
    "COURT": "EWHC",
    "CITATION": "Cooke v Mirror Group Newspapers Ltd [2014] EWHC 2831 (QB)",
    "NUMBER": "487",
    "YEAR": "2014"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Baturina v Times Newspapers",
        "(wl) Thornton v Telegraph Media Group Ltd",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Milne v Express Newspapers Ltd",
        "(wl) British Chiropractic Association v Singh",
        "(wl) Ferguson v John Dawson & Partners (Contractors) Ltd",
        "(wl) St Helens Smelting Co v Tipping",
        "(wl) Waterson v Lloyd",
        "(wl) Lewis v Daily Telegraph Ltd",
        "(wl) Spiller v Joseph",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Flood v Times Newspapers Ltd"
    ],
    "NAME": "(wl) Ames v The Spamhaus Project Ltd",
    "JUDGE": "Warby J",
    "CIT": "[2015] EWHC 127 (QB)",
    "HELD": [
        "Application refused, cross-application granted.",
        "(1) The Jameel jurisdiction was exceptional; the assessment of whether a real and substantial tort had been committed was not a &#8220;numbers game&#8221;. Even publication to a single individual could be highly damaging and make a substantial and costly libel action proportionate, Haji-Ioannou v Dixon [2009] EWHC 178 (QB) applied, Jameel followed. The Jameel principles were not solely applicable to libel claims but were of general application. The court had to have regard to its duty under the CPR to deal with cases justly and at proportionate cost. However, if a libel claimant had a real prospect of establishing a tort which was real and substantial, the court should be very reluctant to conclude that it could not be adjudicated in a proportionate way and that the only remaining way of dealing justly with the case was to dismiss it, Sullivan v Bristol Film Studios Ltd [2012] EWCA Civ 570, [2012] C.P. Rep. 34 followed (see paras 28, 33-34, 36 of judgment). (2) Although an individual suing for libel did not have to show an established reputation, whether a publication which created a bad reputation for someone who was previously unknown, or little known, amounted to a real and substantial tort would depend on circumstances such as the nature of the statement itself, the gravity of its meaning, and the nature and extent of its publication. Moreover, a publisher was responsible for damage caused by re-publications which were the natural and probably or reasonably foreseeable consequence of its own publication. It was a feature of the internet that material once published might remain accessible for a considerable time even if removed from the original site, as had happened in the instant case where the sting of the words complained of remained on third party sites for months afterwards. After January 1, 2014, the Defamation Act 2013 s.1 introduced the additional requirement that the harm suffered to the reputation of the claimant had to be &#8220;serious&#8221;. That had to be the starting point in relation to publications after that date, before the &#8220;real and substantial&#8221; test was applied. Thus, s.1 did not supersede Jameel (paras 40, 45-51). (3) C had a real prospect of showing that S had published the allegation complained of to all those who read the pages in question; of establishing that a meaning imputing involvement in illegal spamming was conveyed to those readers; and of demonstrating that the publication within England and Wales had caused serious harm to his reputation. It was common ground that S was considered authoritative and reliable; therefore, what it said about those on the ROKSO and Top 10 lists was very likely to be taken as true and relied on by readers. Nor was it possible to say that publication in England and Wales was inconsequential. C had past business connections in England which might be substantial and material; moreover, he had plans to launch a business with a UK presence. Although there had not yet been disclosure or a full examination of the evidence, C therefore had a real prospect of establishing that the words complained of might be read by people whose opinion was of serious consequence to him and his business prospects. That might be enough to establish serious harm to reputation. C had also demonstrated sufficient grounds to fear that, unless restrained, S would further publish words to the same effect as those complained of, since S evidently did not accept that what it published was wrong (paras 62, 92, 94, 97). (4) As it was not plain and obvious that C was unable to establish the existence of serious harm to his reputation in the US, he was granted permission to re-amend the particulars of claim to plead a claim in libel in respect of publication in the US (para.107)."
    ],
    "ABSTRACT": [
        "The defendant (S), an English not-for-profit organisation, applied for an order striking out a libel claim brought against it by the claimant (C). C, who was resident in the US, cross-applied for permission to re-amend his statement of case so as to include a complaint of libel by publication in the US.",
        "S reported on sources of spam on the internet. C, who operated a bulk email marketing services business, brought proceedings on the basis that he had been named as a spammer on S&#8217;s register of Known Spam Offenders (the ROKSO list) and at the top of its list of the Top 10 world&#8217;s worst spammers. C claimed damages and an injunction. S sought to strike out the claim on the basis that it was an abuse of the court&#8217;s process, relying on the principles first established in Jameel v Dow Jones &amp; Co Inc [2005] EWCA Civ 75, [2005] Q.B. 946, where it was held that defamation proceedings would be dismissed as an abuse if they did not serve the legitimate purpose of protecting a claimant&#8217;s reputation.",
        "S argued that C had no significant reputation in England and Wales; that the extent of publication within England and Wales was minimal or insignificant; that the publications had not caused, nor were likely to cause, C to suffer any substantial or serious harm; and that publication had ceased and there was no intention to republish."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the claimants: Adrienne Page QC, Jacob Dean. For the defendants: Ian Helme.",
    "CATEGORIES": [
        "Defamation Other Related Subjects: Civil Procedure",
        "Amendments",
        "Email",
        "Jurisdiction",
        "Libel",
        "Particulars of Claim",
        "Proportionality",
        "Reputation",
        "Striking Out",
        "Unsolicited Communications"
    ],
    "CATEGORY": "Defamation Other Related Subjects: Civil Procedure &mdash; Amendments &mdash; Email &mdash; Jurisdiction &mdash; Libel &mdash; Particulars of Claim &mdash; Proportionality &mdash; Reputation &mdash; Striking Out &mdash; Unsolicited Communications",
    "SUMMARY": [
        "The court refused to strike out a libel claim brought by a US resident who operated a bulk email marketing services business against an English organisation which had reported the claimant as an illegal spammer. The claimant had a real prospect of demonstrating that the publication within England and Wales might be read by people whose opinion was of serious consequence to him and his business prospects, and that it had therefore caused serious harm to his reputation."
    ],
    "COURT": "EWHC",
    "CITATION": "Ames v The Spamhaus Project Ltd [2015] EWHC 127 (QB)",
    "NUMBER": "488",
    "YEAR": "2015"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Lewis v Daily Telegraph Ltd",
        "(wl) Ames v The Spamhaus Project Ltd",
        "(wl) British Chiropractic Association v Singh",
        "(wl) Spiller v Joseph",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Thornton v Telegraph Media Group Ltd",
        "(wl) Barber v Somerset County Council",
        "(wl) Smith v Leech Brain and Co Ltd",
        "(wl) Waterson v Lloyd"
    ],
    "NAME": "(wl) Baturina v Times Newspapers",
    "JUDGE": "Lord Neuberger MR; Sedley LJ; Hooper LJ",
    "CIT": "[2011] EWCA Civ 308",
    "HELD": [
        "Appeal allowed, cross-appeal allowed in part.",
        "(1) T&#8217;s argument was inconsistent with several authorities. Those authorities mostly involved &#8216;reference innuendos&#8217;, where statements were defamatory on their face but knowledge of extrinsic facts was required to link them to the claimant, rather than &#8220;meaning innuendos&#8221; such as in the instant case, where statements were only rendered defamatory by knowledge of extrinsic facts. However, the reasoning in those cases applied equally to both forms of innuendo, E Hulton &amp; Co v Jones [1910] A.C. 20, Cassidy v Daily Mirror Newspapers Ltd [1929] 2 K.B. 331, Hough v London Express Newspaper Ltd [1940] 2 K.B. 507 and Fullam v Newcastle Chronicle &amp; Journal Ltd [1977] 1 W.L.R. 651 applied. The European Convention on Human Rights 1950 art.10 did not compel a change in the law regarding innuendo: the availability of a Reynolds defence was, save perhaps in exceptional circumstances, sufficient acknowledgment by the courts of the need for protection of the press above the previous defence of fair comment, Joseph v Spiller [2010] UKSC 53, [2011] 1 A.C. 852 applied (see paras 21-28 of judgment). (2) There was no fault with the judge&#8217;s reasoning in respect of the second and fourth reader categories, but he had been wrong not to reach the same conclusion regarding the other categories. There were 400,000 Russians in the United Kingdom, some of whom might be in touch with events in Russia and some of whom might read the newspaper: one could not say the claim was bound to fail in that regard. Similar reasoning applied to online readers (paras 34-39). (3) Where meaning innuendo was alleged, the claimant ought to specify the persons with the knowledge from which they inferred the innuendo, Grappelli v Derek Block (Holdings) Ltd [1981] 1 W.L.R. 822 applied. In relation to the first category, although the newspaper had a wide circulation, there was no evidence of a wide circulation among Russians in England. The court would not find for B without specific readers who had appreciated the innuendo on reading the article being called, and it would be unfair on T not to require B to identify such readers. The same conclusion applied to readers in the other categories. Such readers would have to be produced at trial and be credible witnesses (paras 46-50)."
    ],
    "ABSTRACT": [
        "The appellant Russian businesswoman (B) appealed against a decision ([2010] EWHC 696 (QB), [2010] E.M.L.R. 18) to strike out her libel claim against the respondent newspaper (T) in respect of certain classes of reader. T cross-appealed against the decision not to strike out the whole claim.",
        "T had published, in print and on its website, a story suggesting that B had bought a large house in London through a front company. Shortly afterwards, T accepted that that was incorrect, published a correction, and removed the online article. B alleged that the article was defamatory on the basis of innuendo in that Russian law required officials and their spouses to declare their assets publicly, and readers would infer that B, the wife of the then mayor of Moscow, had failed to include the house in her declaration as required. There were four classes of reader to whom publication was alleged, namely readers of (i) the newspaper in England; (ii) the newspaper in Russia; (iii) the online article; (iv) foreseeable re-publications in Russia. The judge allowed the claim to proceed in respect of the second and fourth categories on the basis that it could not be said that no-one in those categories would have inferred the alleged innuendo. He struck out the claim in respect of the other two categories.",
        "T argued that (1) a defendant could not be liable in defamation where that was based on an innuendo which he had not appreciated, and could not reasonably have been expected to appreciate, at the time of the statement; (2) the claim should have been struck out in full, not merely in part; (3) if the claim was to proceed, B should be required to identify specific individuals who had inferred the innuendo."
    ],
    "FLAGS": [
        "Neuberger"
    ],
    "COUNSEL": "For the appellant: Romie Tager QC, Justin Rushbrooke. For the respondent: Andrew Caldecott QC, Manuel Barca.",
    "CATEGORIES": [
        "Defamation",
        "Foreseeability",
        "Innuendos",
        "Libel",
        "Newspapers",
        "Russia",
        "Striking Out",
        "Websites"
    ],
    "CATEGORY": "Defamation &mdash; Foreseeability &mdash; Innuendos &mdash; Libel &mdash; Newspapers &mdash; Russia &mdash; Striking Out &mdash; Websites",
    "SUMMARY": [
        "A libel claim based on an innuendo was allowed to proceed, but the claimant was required to identify specific individuals who had inferred the innuendo from the alleged defamatory statement."
    ],
    "COURT": "EWCA",
    "CITATION": "Baturina v Times Newspapers [2011] EWCA Civ 308",
    "NUMBER": "489",
    "YEAR": "2011"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Thornton v Telegraph Media Group Ltd",
        "(wl) Baturina v Times Newspapers",
        "(wl) Telnikoff v Matusevich",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Cook v Lewis",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) British Chiropractic Association v Singh",
        "(wl) Milne v Express Newspapers Ltd",
        "(wl) Spiller v Joseph",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)"
    ],
    "NAME": "(wl) Lewis v Daily Telegraph Ltd",
    "JUDGE": "Lord Morris of Borth-y-Gest; Lord Hodson; Lord Devlin; Lord Reid; Lord Jenkins",
    "CIT": "[1964] AC 234",
    "HELD": [
        "allowing the appeal and ordering new trials, (1) that in a libel action the judge must rule whether the words are capable of bearing each of the defamatory meanings put forward; (2) that an ordinary man would not have inferred guilt of fraud from the words and the jury should have been directed that they were not capable of bearing this meaning (Lord Morris dissenting); (3) that the damages awarded in each case were excessive; in such a case pursuant to the Defamation Act 1952 s.12 , each jury should be directed to consider how far the damage is attributable solely to the libel with which they are concerned and how far it is the joint result of the two libels, so that the plaintiff will not be compensated twice for the same loss;."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1964",
    "CATEGORIES": [
        "Defamation Other Related Subjects: Civil Evidence",
        "Interpretation",
        "Jury Directions",
        "Libel",
        "Newspapers"
    ],
    "CATEGORY": "Defamation Other Related Subjects: Civil Evidence &mdash; Interpretation &mdash; Jury Directions &mdash; Libel &mdash; Newspapers",
    "SUMMARY": [
        "Defamatory meaning;",
        "In a libel action the judge must rule whether the words are capable of bearing each of the defamatory meanings, if there be more than one, put forward by the plaintiff, whether expressly pleaded or not, if such meanings are alleged to be inferred from the natural and ordinary meaning of the words used. The defendants printed articles stating that the Fraud Squad were inquiring into the affairs of the plaintiff company. The chairman and the company issued writs against the two defendant newspapers. The statements of claim alleged that the words were defamatory in their ordinary and natural meaning. By para.4 it was pleaded that the words meant and were understood to mean that the plaintiffs had been guilty of, or were suspected by the police of being guilty of, fraud or dishonesty. Particulars pursuant to Rules of the Supreme Court Ord.19 r.6(2) , did not support the meaning pleaded in para.4 by extrinsic facts but were inferences from the words complained of. No plea of special damage was included. The defendants pleaded justification, in that it was true that on December 23, 1958, the police were inquiring into the affairs of the company. They denied that the words meant or were capable of meaning that the plaintiffs were guilty of or suspected of fraud. At the trials before Salmon J. and juries evidence showed that the police were inquiring into the affairs of the company on the said date. Salmon J. directed the jury that the words could bear the meaning alleged in the innuendo, but did not point out the absence of any cogent evidence as to financial loss. He left to the jury only two questions, (1) whether they found for the plaintiffs or for the defendants, and (2) if for the plaintiffs, what sums of damages. The two juries awarded a total of GBP 217,000 damages."
    ],
    "COURT": "UKHL",
    "CITATION": "Lewis v Daily Telegraph Ltd [1964] AC 234",
    "NUMBER": "490"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) John v MGN Ltd",
        "(wl) Co-operative Group Ltd v Pritchard",
        "(wl) Knight v Home Office",
        "(wl) Pierce v Doncaster MBC",
        "(wl) Z and others v United Kingdom",
        "(wl) Telnikoff v Matusevich",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Cooke v Mirror Group Newspapers Ltd",
        "(wl) Bone v Searle",
        "(wl) Spiller v Joseph",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Horrocks v Lowe"
    ],
    "NAME": "(wl) Morgan v Odhams Press Ltd",
    "JUDGE": "Lord Reid; Lord Morris of Borth-y-Gest; Lord Guest; Lord Donovan; Lord Pearson",
    "CIT": "[1971] 1 WLR 1239",
    "HELD": [
        "(1) the trial judge was wrong in holding that as a matter of law he was bound by the decision of the Court of Appeal in interlocutory proceedings; all that could be inferred from the court&#8217;s decision was that the case was not unarguable; (2) he was, nevertheless, right in allowing the case to go to the jury, since, inter alia, extrinsic evidence was admissible where necessary to import a defamatory meaning to words otherwise innocent; (3) the award of damages was excessive and a new trial should be ordered on the issue of quantum of damages. ( Cassidy v Daily Mirror Newspapers Ltd [1929] 2 K.B. 331 considered; and Hough v London Express Newspaper Ltd [1940] 2 K.B. 507 considered; Astaire v Campling [1966] 1 W.L.R. 34 distinguished)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1971",
    "CATEGORIES": [
        "Defamation Other Related Subjects: Civil Evidence",
        "Civil Procedure",
        "Defamation",
        "Evidence",
        "Identification",
        "Measure of Damages"
    ],
    "CATEGORY": "Defamation Other Related Subjects: Civil Evidence &mdash; Civil Procedure &mdash; Defamation &mdash; Evidence &mdash; Identification &mdash; Measure of Damages",
    "SUMMARY": [
        "Innuendo; extrinsic evidence",
        "There is no rule that, before an article can be said to be defamatory of a person it must contain some &#8220;key or pointer&#8221; indicating that it refers to him, and where necessary extrinsic evidence is admissible to import a defamatory meaning to words otherwise innocent. In 1965 a newspaper reported that a kennel-girl had been kidnapped by members of a dog-doping gang. In or about the relevant period witnesses had seen her in M&#8217;s company. The newspaper article made no reference to M by name or description. He began an action against the newspaper, pleading that he had been libelled by innuendo. In interlocutory proceedings by the newspaper to have the action struck out, the Court of Appeal, in 1967, allowed it to go forward on the ground that it was &#8220;arguable&#8221; that a jury could conclude that the report referred to M but that much would depend on the evidence. At the trial, the judge declined to withdraw the case from the jury, holding himself bound by the Court of Appeal&#8217;s decision to treat the words as capable of being understood to refer to M. and the jury found for M and awarded him damages to GBP 4,750."
    ],
    "COURT": "UKHL",
    "CITATION": "Morgan v Odhams Press Ltd [1971] 1 WLR 1239",
    "NUMBER": "491"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Baturina v Times Newspapers",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Spiller v Joseph",
        "(wl) British Chiropractic Association v Singh",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Dulieu v White",
        "(wl) Milne v Express Newspapers Ltd",
        "(wl) John v MGN Ltd",
        "(wl) Horrocks v Lowe",
        "(wl) Thornton v Telegraph Media Group Ltd",
        "(wl) Berkoff v Burchill and The Times"
    ],
    "NAME": "(wl) O'Shea v Mirror Group Newspapers Ltd",
    "CIT": "[2001] EMLR 40",
    "HELD": [
        "giving judgment for MGN, that the imposition of strict liability for unintentional defamation by the publication of a &#8220;look alike&#8221; photograph was an unjustifiable interference with the right to freedom of expression. Such a restriction could not be justified under Art.10(2) as necessary in a democratic society given the absence of a pressing social need. The deliberate use of a &#8220;look alike&#8221; photograph would constitute a malicious falsehood and that remedy provided adequate protection to an individual&#8217;s reputation."
    ],
    "COUNSEL": "For O: Geoffrey Shaw Q.C. For MGN and the second defendant: Mark Warby.",
    "JUDGE": "Morland J",
    "NUMBER": "492",
    "CATEGORIES": [
        "Defamation",
        "Advertisements",
        "Freedom of Expression",
        "Libel",
        "Photographs",
        "Strict Liability"
    ],
    "CATEGORY": "Defamation &mdash; Advertisements &mdash; Freedom of Expression &mdash; Libel &mdash; Photographs &mdash; Strict Liability",
    "SUMMARY": [
        "The imposition of strict liability for unintentional defamation by the publication of a &#8220;look alike&#8221; photograph was an unjustifiable interference with the right to freedom of expression under the Human Rights Act 1998 Sch.1 Part I Art.10.",
        "Following the publication in a Sunday newspaper of an advertisement for a pornographic website, O brought an action against MGN for defamation. She alleged that a photograph used in the advert looked so like her that people who knew her would reasonably have thought that it was her. The issue arose as to whether the imposition of strict liability for unintentional defamation by the publication of a &#8220;look alike&#8221; photograph was an infringement of the right to freedom of expression under the Human Rights Act 1998 Sch.1 Part I Art.10."
    ],
    "CITATION": "O&#8217;Shea v Mirror Group Newspapers Ltd [2001] EMLR 40",
    "COURT": "EWHC",
    "YEAR": "2001"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Lewis v Daily Telegraph Ltd",
        "(wl) Baturina v Times Newspapers",
        "(wl) Thornton v Telegraph Media Group Ltd",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Spiller v Joseph",
        "(wl) Horrocks v Lowe",
        "(wl) British Chiropractic Association v Singh",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)",
        "(wl) Coltman v Bibby Takers Ltd",
        "(wl) Ames v The Spamhaus Project Ltd",
        "(wl) Cook v Lewis"
    ],
    "NAME": "(wl) Grobbelaar v News Group Newspapers Ltd",
    "JUDGE": "Lord Bingham of Cornhill; Lord Steyn; Lord Hobhouse of Woodborough; Lord Millett; Lord Scott of Foscote",
    "CIT": "[2002] UKHL 40",
    "HELD": [
        "allowing the appeal (Lord Steyn dissenting), that the jury&#8217;s verdict should be reinstated but the award of damages reduced to the nominal sum of GBP 1. A decision to overturn the verdict of a jury could only be taken in exceptional circumstances where the jury&#8217;s decision could not be explained on any ground not indicative of perversity. In the instant case it seemed safe to infer that the jury had found insufficient justification for the defamatory allegations. Its verdict had not therefore been perverse. The jury had, however, erred in its quantification of damages. The jury had interpreted the libellous sting of the material to lie in the claim that G had actually fixed matches, a claim that could not be justified given evidence to the contrary. However, although an actionable libel had occurred, G should not receive substantial damages as he had acted in flagrant breach of his legal and moral obligations by accepting money to fix games."
    ],
    "FLAGS": [
        "Approved",
        "Bingham"
    ],
    "COUNSEL": "For G: Richard Hartley Q.C. and Sarah Palin. For N: Richard Spearman Q.C.",
    "CATEGORIES": [
        "Defamation",
        "Corruption",
        "Football",
        "Interpretation",
        "Justification",
        "Libel",
        "Newspapers",
        "Nominal Damages",
        "Verdicts"
    ],
    "CATEGORY": "Defamation &mdash; Corruption &mdash; Football &mdash; Interpretation &mdash; Justification &mdash; Libel &mdash; Newspapers &mdash; Nominal Damages &mdash; Verdicts",
    "SUMMARY": [
        "Interpretation of jury&#8217;s verdict - Newspaper allegation that goalkeeper took bribes to fix games - Jury found for claimant and awarded substantial damages - Court of Appeal wrong to set aside decision as perverse - Correct interpretation of jury&#8217;s verdict was that they found that newspaper had not justified sting of articles to effect that claimant actually fixed matches - Evidence clearly showed that claimant had agreed and accepted money to fix games and on that basis damages award should be reduced to GBP 1.",
        "G, a former professional footballer, appealed against a decision of the Court of Appeal ([2001] EWCA Civ 33, [2001] 2 All E.R. 437) quashing a finding that N had libelled him. G&#8217;s reputation was destroyed following articles in a newspaper published by N stating that he had taken bribes in order to fix football matches. The articles concerned were supported by covert video recordings in which G commented that he had previously fixed games and in which he was seen to accept GBP 2,000 in cash. The trial jury found that N had libelled G and awarded him substantial damages in the sum of GBP 85,000. The Court of Appeal considered the jury&#8217;s verdict to be irreconcilable with the evidence presented and therefore perverse."
    ],
    "COURT": "UKHL",
    "CITATION": "Grobbelaar v News Group Newspapers Ltd [2002] UKHL 40",
    "NUMBER": "493",
    "YEAR": "2002"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Milne v Express Newspapers Ltd",
        "(wl) Lewis v Daily Telegraph Ltd",
        "(wl) Spiller v Joseph",
        "(wl) Waterson v Lloyd",
        "(wl) Thornton v Telegraph Media Group Ltd",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)",
        "(wl) Ames v The Spamhaus Project Ltd",
        "(wl) British Chiropractic Association v Singh",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Baturina v Times Newspapers"
    ],
    "NAME": "(wl) Telnikoff v Matusevich",
    "JUDGE": "Lord Keith of Kinkel; Lord Brandon of Oakbrook; Lord Templeman; Lord Ackner; Lord Oliver of Aylmerton",
    "CIT": "[1992] 2 AC 343",
    "HELD": [
        "allowing the appeal in part, that the question whether the words complained of were capable of constituting statements of fact was to be determined by consideration of the contents of the letter alone and not in conjunction with the terms of the article in response to which it was written, since many of the readers of the letter would not have read the article (Kemsley v Foot [1952] A.C. 345 considered)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1992",
    "CATEGORIES": [
        "Defamation Other Related Subjects: Civil Evidence",
        "Defences",
        "Libel"
    ],
    "CATEGORY": "Defamation Other Related Subjects: Civil Evidence &mdash; Defences &mdash; Libel",
    "SUMMARY": [
        "Fair comment; plaintiff&#8217;s article in newspaper; letter in response alleged to be defamatory; whether letter to be read in conjunction with article or in isolation",
        "A letter alleged to be defamatory, written in response to a previously published article, must be read in isolation, not in conjunction with the article, when determining whether the words complained of were capable of constituting statements of fact. P, a Russian emigre employed by the BBC, wrote an article published in a newspaper. D, also a Russian emigre, wrote a letter in reaction which was published in the same newspaper. The letter imputed racist opinions to P and was the subject of a libel claim. D pleaded fair comment, and P alleged express malice. At the end of P&#8217;s case a submission of no case was accepted, the judge finding that the contents of the letter read as a whole were pure comment."
    ],
    "COURT": "UKHL",
    "CITATION": "Telnikoff v Matusevich [1992] 2 AC 343",
    "NUMBER": "494"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Spiller v Joseph",
        "(wl) Baturina v Times Newspapers",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Waterson v Lloyd",
        "(wl) Thornton v Telegraph Media Group Ltd",
        "(wl) Milne v Express Newspapers Ltd",
        "(wl) Cooke v Mirror Group Newspapers Ltd",
        "(wl) Berkoff v Burchill and The Times",
        "(wl) Ames v The Spamhaus Project Ltd",
        "(wl) Customs and Excise Commissioners v Barclays Bank"
    ],
    "NAME": "(wl) British Chiropractic Association v Singh",
    "JUDGE": "Lord Judge LCJ; Lord Neuberger MR; Sedley LJ",
    "CIT": "[2010] EWCA Civ 350",
    "HELD": [
        "Appeal allowed.",
        "(1) The meaning of the words at issue in a libel action was subject to two controls: a decision reserved to the judge as to whether the defamatory meaning alleged by the claimant fell within the range of possible meaning conveyed by the words in their context, and a decision, traditionally reserved to the jury, as to their actual meaning. The former was regarded as a question of law, the latter as one of fact, with the result that the meaning eventually decided upon by the jury would be shielded from attack on appeal save where it had crossed the boundary of reasonableness. However, the decision that was traditionally reserved to the jury was a question of fact only because it was made by the jury, and it therefore followed that the court was entitled to retake the judge&#8217;s decision, Slim v Daily Telegraph [1968] 2 Q.B. 157 followed. (2) The words amounted to opinion. The issue posed by the judge was in reality two distinct issues: firstly, whether there was any evidence to support the material claims, and secondly, if there was not, whether the association&#8217;s personnel knew that. The judge had erred, both in conflating those two elements of the claim, and in treating the first of them as an issue of verifiable fact. The subject matter of the article was an area of epidemiology in which the relationship of primary fact to secondary fact, and of both to permissible inference, was heavily and legitimately contested. In his defence, S had set out, ailment by ailment and study by study, his reasons for considering that none of the available epidemiological evidence reliably supported the association&#8217;s claims, and the association had replied in kind asserting that there was some dependable evidence for its claims. It was one thing to defame somebody in terms that could only be defended by proving their truth, but it was another thing to evaluate published material as giving no evidential support to a claim and on the basis of that evaluation to denounce as irresponsible those who made the claim. It was clear therefore, that what &#8220;evidence&#8221; signified depended heavily on context, and whether such evidence amounted to proof was what scientific opinion was there to debate. If in the course of the debate the view was expressed that there was no evidence for one deduction or another, the natural meaning was that there was no worthwhile or reliable evidence for it. That was as much a value judgment as a contrary viewpoint would be. If the judge&#8217;s decision was to stand, it would not be open to the trial judge to conclude that what the evidence amounted to was a matter of opinion, as it would already have been decided that the existence or non-existence of evidence for the claims made by the association was a verifiable fact. It followed that the natural meaning of the words was not that the association was promoting what it knew to be bogus treatments, but that it was promoting what S contended were bogus treatments without regard to the want of reliable evidence of their efficacy."
    ],
    "ABSTRACT": [
        "The appellant scientist and science writer (S) appealed against the judge&#8217;s determination of alleged defamatory words made by him about the respondent chiropractic association.",
        "The association, whose objects included promoting and maintaining high standards of conduct and practice among chiropractors in the United Kingdom, had contended that it had been defamed in an article written by S that was published on the &#8220;Comment and Debate&#8221; page of a newspaper. The article stated that the association claimed that its members could help treat particular ailments, even though there was no evidence. Determining preliminary issues, the judge held that, to a reasonable reader, the words would mean that the association claimed that chiropractic was effective in helping to treat the stated ailments although it knew that there was absolutely no evidence to support its claim and that by making those claims the association knowingly supported bogus treatments. He also held that the words amounted to assertions of verifiable fact, not expressions of opinion. If that was so, S would not be able, at trial, to rely on the defence of fair comment, but would have to prove that the meanings were factually true or to lose. The issues in the case were whether (i) the instant court was free to interfere with the judge&#8217;s decision as to the meaning of the words; (ii) the words amounted to fact or opinion."
    ],
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "COUNSEL": "For the appellant: Adrienne Page QC, William McCormick. For the respondent: Heather Rogers QC.",
    "CATEGORIES": [
        "Defamation",
        "Chiropractors",
        "Fair Comment",
        "Libel",
        "Meaning",
        "Opinion Evidence",
        "Scientific Uncertainty",
        "Sufficiency of Evidence"
    ],
    "CATEGORY": "Defamation &mdash; Chiropractors &mdash; Fair Comment &mdash; Libel &mdash; Meaning &mdash; Opinion Evidence &mdash; Scientific Uncertainty &mdash; Sufficiency of Evidence",
    "SUMMARY": [
        "Where the relevant data on the extent of the benefits of chiropractic was heavily and legitimately in contest, an alleged defamatory statement that the British Chiropractic Association had no evidence for its claim that its members could treat particular ailments was not a fact but amounted to an opinion that there was no worthwhile evidence to support that claim, and the maker of the statement would be entitled to rely on the defence of fair comment at trial."
    ],
    "COURT": "EWCA",
    "CITATION": "British Chiropractic Association v Singh [2010] EWCA Civ 350",
    "NUMBER": "495",
    "YEAR": "2010"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Milne v Express Newspapers Ltd",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Thornton v Telegraph Media Group Ltd",
        "(wl) British Chiropractic Association v Singh",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Lewis v Daily Telegraph Ltd",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)",
        "(wl) Baturina v Times Newspapers",
        "(wl) Ames v The Spamhaus Project Ltd",
        "(wl) Telnikoff v Matusevich",
        "(wl) Spiller v Joseph",
        "(wl) Grobbelaar v News Group Newspapers Ltd"
    ],
    "NAME": "(wl) Waterson v Lloyd",
    "JUDGE": "Laws LJ; Richards LJ; McCombe LJ",
    "CIT": "[2013] EWCA Civ 136",
    "HELD": [
        "Appeal allowed.",
        "(Richards L.J. dissenting) Caution had to be exercised in disturbing findings of fact by judges at first instance in defamation cases. However, the meaning of the words complained of was quite simple: &#8220;[W] has claimed nearly \u00a370,000 from the taxpayer for a family home that is 60 miles from Eastbourne (fact). That is a scandal (comment)&#8220;. There was no statement, express or implied, to be identified in the publications to the effect that W had either broken the law or the parliamentary rules, or had been required to repay sums previously claimed. The reasonable reader would be well aware that there had been a significant criticism of the system of parliamentary expenses and that some MPs might have broken the law or the parliamentary rules, or might merely have made substantial claims strictly within the rules of the criticised system. However, all that had been stated was what W had claimed and the writers&#8217; view that that was &#8220;a scandal&#8221; or &#8220;scandalous&#8221;. The conduct upon which comment was advanced had been clearly identified, Joseph v Spiller [2010] UKSC 53, [2011] 1 A.C. 852 applied, Myerson v Smith&#8217;s Weekly Publishing Co Ltd considered. The judge had mischaracterised the matter: there was no allegation of scandal beyond the stated facts and the fact that there was thought to be a wider &#8220;scandal&#8221; did not alter that position. Those who thought that some claims to expenses, even within the law and the rules, were &#8220;scandalous&#8221; would not have strayed beyond comment if they identified the precise claims made and said that, in their view, they were scandalous. Deciding the matter in accordance with common sense and first impression, the matters complained of were comment, Jeynes and Slim v Daily Telegraph [1968] 2 Q.B. 157 applied (see paras 50-61 of judgment)."
    ],
    "ABSTRACT": [
        "The appellants (L) were a Member of Parliament and his campaign agent. They appealed against a decision ([2011] EWHC 3197 (QB)) that they were guilty of libel against the respondent former MP (W).",
        "W had lost his seat to L in 2010, following a period when it had been widely reported in the national press that large numbers of MPs had made unlawful expenses claims, breached the parliamentary rules, or made claims which, although within the rules, were essentially improper. During the run-up to the general election, L had distributed two pieces of campaign literature, the first containing a general reference to &#8220;the MPs&#8217; expenses scandal&#8221; and the second referring to &#8220;the scandal of MPs abusing their expenses&#8221;. The first publication referred to W&#8217;s own &#8220;scandalous expenses claims&#8221; and both criticised his claim of \u00a370,000 for a home which was 60 miles away from his constituents, and his claim for re-decorating his garage. L relied on the defence of honest comment, on the basis that the &#8220;scandal&#8221; referred to was confined to the criticism that W had claimed \u00a370,000 for a home that was 60 miles from his constituency, not that his claims constituted a breach of any rules. The judge indicated that it was difficult to follow how a reasonable reader in the circumstances specified in Jeynes v News Magazines Ltd [2008] EWCA Civ 130 could be expected to understand the &#8220;scandal&#8221; in question to be confined to the mere fact that W made a claim in respect of a mortgage and decoration. He found that the scandal referred to in each publication would reasonably be understood as meaning, and did mean, that W was himself guilty of abuse of the parliamentary rules for his own financial advantage and that those were plainly statements of fact.",
        "L submitted that the &#8220;scandal&#8221; comments were clear expressions of opinion, based on non-defamatory facts and that the references to &#8220;the MPs&#8217; expenses scandal&#8221; and &#8220;the scandal of MPs abusing their expenses&#8221; were comments about the system as a whole, not about W. They argued that there had been no suggestion that W&#8217;s expenses claims were unlawful, in breach of the rules, or otherwise improper."
    ],
    "COUNSEL": "For the appellants: Richard Rampton QC, Ian Helme. For the respondent: Desmond Browne QC, David Hirst.",
    "CATEGORIES": [
        "Defamation Other Related Subjects: Media and Entertainment",
        "Expenses",
        "Honest Comment",
        "Libel",
        "Meaning",
        "Members of Parliament",
        "Publications"
    ],
    "CATEGORY": "Defamation Other Related Subjects: Media and Entertainment &mdash; Expenses &mdash; Honest Comment &mdash; Libel &mdash; Meaning &mdash; Members of Parliament &mdash; Publications",
    "SUMMARY": [
        "Political opponents who had disseminated publications about a Member of Parliament&#8217;s expenses claims were entitled to rely on the defence of honest comment in a resulting libel claim. References to the expenses claims being &#8220;scandalous&#8221; did not involve any statement that the MP had broken the law or the parliamentary rules, or had been required to repay sums previously claimed. The publications simply stated what the MP had claimed and the writers&#8217; view on that."
    ],
    "COURT": "EWCA",
    "CITATION": "Waterson v Lloyd [2013] EWCA Civ 136",
    "NUMBER": "496",
    "YEAR": "2013"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) British Chiropractic Association v Singh",
        "(wl) Thornton v Telegraph Media Group Ltd",
        "(wl) Baturina v Times Newspapers",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Milne v Express Newspapers Ltd",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Telnikoff v Matusevich",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Berkoff v Burchill and The Times",
        "(wl) John v MGN Ltd"
    ],
    "NAME": "(wl) Spiller v Joseph",
    "JUDGE": "Lord Phillips JSC; Lord Rodger JSC; Lord Walker JSC; Lord Brown JSC; Lord Dyson JSC",
    "CIT": "[2010] UKSC 53",
    "HELD": [
        "Appeal allowed.",
        "(1) Lord Nicholls&#8217; fourth proposition in Cheng could not be reconciled with Kemsley . Where adverse comment was made generally or generically on matters that were in the public domain, it was not a prerequisite of the defence of fair comment that the readers should be in a position to evaluate the comment for themselves, Kemsley followed, Cheng explained and Lowe v Associated Newspapers Ltd [2006] EWHC 320 (QB), [2007] Q.B. 580 considered. It was now possible for people to make public comment about others via the internet, and millions of people took advantage of that opportunity: it would often be impossible for readers to evaluate derogatory comments without detailed information about the facts that had given rise to the comments. If Lord Nicholls&#8217; fourth proposition were to apply, the defence of fair comment would be robbed of much of its efficacy. Lord Nicholls was not correct to require that the comment must identify the matters on which it was based with sufficient particularity to enable the reader to judge for himself whether it was well founded; however, the comment must identify at least in general terms what it was that led the commentator to make it. The fourth proposition should be rewritten as &#8220;Next the comment must explicitly or implicitly indicate, at least in general terms, the facts on which it was based&#8221; (see paras 90-105 of judgment). (2) The reforms suggested by E and the interveners would radically alter the nature of the defence of fair comment, and would not necessarily serve to simplify defamation actions. The proposed reforms went beyond changes that could properly be made by the Supreme Court in the orderly development of the common law. There was, however, a case for reform, and the whole area merited consideration by the Law Commission, or an expert committee. The only reform that should be made by the instant judgment was one that had already received judicial approval in the case of Reynolds v Times Newspapers Ltd [2001] 2 A.C. 127: the defence of fair comment should be renamed &#8220;honest comment&#8221;, Reynolds referred to (paras 110-117). (3) E&#8217;s defence of fair comment should be reinstated. E could not rely upon the Landmarc breach to support the defence: the Landmarc breach was not referred to in the posting, nor did it form part of a generic allegation of misconduct. E could, however, rely on the Bibis breach: the posting sufficiently identified the breach as part of the subject matter of the comment, albeit that the breach was not particularised."
    ],
    "ABSTRACT": [
        "The second appellant company (E) appealed against a decision ([2009] EWCA Civ 1075, [2010] I.C.R. 642) that it was not entitled to rely on the defence of fair comment in a libel action brought against it by the respondent members of a musical act (J).",
        "E had promoted J&#8217;s shows for a time. A booking at the Landmarc Hotel which E had arranged had been cancelled by J shortly after it was made. A booking at Bibis Restaurant had resulted in a re-booking, which J arranged directly with the venue rather than through E, as was required by a re-engagement clause in the parties&#8217; contract. E stopped representing J and published a posting on its website which contained a partially misquoted extract from an email sent by J to E. The posting stated that J were not professional enough to feature in E&#8217;s portfolio, and had not been able to abide by the terms of their contract. It also stated that &#8220;following a breach of contract&#8221;, J had advised E that the terms and conditions of contracts held no water in legal terms. The Court of Appeal held that the defence of fair comment should not be permitted to stand on the strength of the alleged breach of contract in relation to the Landmarc booking, as it had occurred 14 months before the alleged breach which had led to the publication. The court also held that the Bibis breach could not be relied upon, as the contract and the term allegedly breached had not been identified in the publication. In reaching that conclusion, the court relied on Lord Nicholls&#8217; fourth proposition in relation to fair comment in Tse Wai Chun Paul v Cheng [2001] E.M.L.R. 31, namely: &#8220;the comment must explicitly or implicitly indicate, at least in general terms, what are the facts on which the comment is being made. The reader or hearer should be in a position to judge for himself how far the comment was well founded&#8221;. E and the interveners, who represented newspaper and broadcasting interests, invited the instant court to develop the common law of fair comment so that it was simplified and liberalised.",
        "E submitted that it did not matter that the readers of the posting had no knowledge of the facts in relation to the two breaches of contract referred to, and were unable to judge for themselves how far the comment was well founded. E argued that Lord Nicholls&#8217; fourth proposition was inconsistent with the judgment in Kemsley v Foot [1952] A.C. 345."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellants: David Price (Solicitor Advocate). For the respondents: William Bennett. For the interveners: Andrew Caldecott QC, Sarah Palin.",
    "CATEGORIES": [
        "Defamation",
        "Defamation",
        "Defamatory Statements",
        "Defences",
        "Fair Comment",
        "Libel"
    ],
    "CATEGORY": "Defamation &mdash; Defamation &mdash; Defamatory Statements &mdash; Defences &mdash; Fair Comment &mdash; Libel",
    "SUMMARY": [
        "Lord Nicholls&#8217; fourth proposition in relation to fair comment in Tse Wai Chun Paul v Cheng [2001] E.M.L.R. 31 was incorrect in that it required that the comment must identify the matters on which it was based with sufficient particularity to enable the reader to judge for himself whether it was well founded. It should be rewritten as &#8220;Next the comment must explicitly or implicitly indicate, at least in general terms, the facts on which it was based&#8221;."
    ],
    "COURT": "UKSC",
    "CITATION": "Spiller v Joseph [2010] UKSC 53",
    "NUMBER": "497",
    "YEAR": "2010"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Worsley v Tambrands",
        "(wl) A and others v National Blood Authority",
        "(wl) Coventry v Lawrence (no 2)",
        "(wl) Steel and Morris v UK",
        "(wl) Stennett v Hancock",
        "(wl) Vowles v Evans & the Welsh RFU",
        "(wl) Lawrence v Pembrokeshire County Council",
        "(wl) Ames v The Spamhaus Project Ltd",
        "(wl) Van Colle v Chief Constable of Hertfordshire",
        "(wl) Marcic v Thames Water Utilities Ltd",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Michael v Chief Constable of South Wales"
    ],
    "NAME": "(wl) A v United Kingdom",
    "JUDGE": "Judge Costa (President)",
    "CIT": "(2003) 36 EHRR 51",
    "HELD": [
        "rejecting the complaint, that the rule of absolute parliamentary immunity did not impose a disproportionate restriction on an individual&#8217;s right of access to the courts. It was inevitable that some restrictions would exist and the immunity granted to United Kingdom MPs was in many respects more limited than that enjoyed by MPs in other European countries. The immunity extended only to statements made by MPs during the course of parliamentary debates and not to any statements made outside Parliament. Accordingly the immunity in question did not exceed the margin of appreciation afforded to individual member states to limit the right under Art.6, Al-Adsani v United Kingdom (35763/97) (2002) 34 E.H.R.R. 11 considered."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "2003",
    "CATEGORIES": [
        "Human Rights",
        "Discrimination",
        "Margin of Appreciation",
        "Parliamentary Privilege",
        "Proportionality",
        "Right to Fair Trial",
        "Right to Respect For Private and Family Life"
    ],
    "CATEGORY": "Human Rights &mdash; Discrimination &mdash; Margin of Appreciation &mdash; Parliamentary Privilege &mdash; Proportionality &mdash; Right to Fair Trial &mdash; Right to Respect For Private and Family Life",
    "SUMMARY": [
        "The rule of parliamentary privilege which protected from a defamation action an MP who had named and described a constituent as a &#8220;neighbour from hell&#8221; was designed to protect Parliament as a whole and was within the margin of appreciation.",
        "A, a young black woman sought to challenge the rule of absolute parliamentary immunity on the basis that it infringed her right of access to court as enshrined in the European Convention on Human Rights 1950 Art.6 . A&#8217;s complaint arose from a parliamentary debate during which A&#8217;s MP had named her, gave her full address and made adverse comments concerning the behaviour of both A and her children. Following the debate A had received racist hate mail and the local authority were obliged to rehouse her. Her children were also obliged to attend alternative schools. The statement made by the MP was protected under the Bill of Rights 1689 Art.9 and press reports of the proceedings were protected by qualified privilege."
    ],
    "COURT": "EWHC",
    "CITATION": "A v United Kingdom (2003) 36 EHRR 51",
    "NUMBER": "498"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Customs and Excise Commissioners v Barclays Bank",
        "(wl) Coxall v Goodyear Great Britain Ltd",
        "(wl) Gough v Thorne",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Pitts v Hunt",
        "(wl) Barnett v Chelsea & Kensington Hospital Management Committee",
        "(wl) Delaney v Pickett",
        "(wl) Lennon v Commissioner of Police of the Metropolis",
        "(wl) Sanderson v Hull",
        "(wl) Patchett v Swimming Pool Trades Association",
        "(wl) Stevenson Jordan & Harrison v McDonald & Evans",
        "(wl) Crown River Cruises Ltd v Kimbolton Fireworks Ltd"
    ],
    "NAME": "(wl) Reynolds v Times Newspapers Ltd",
    "JUDGE": "Lord Slynn of Hadley; Lord Nicholls of Birkenhead; Lord Clyde; Lord Hutton; Lord Hobhouse of Woodborough",
    "CIT": "[2001] 1 AC 27",
    "HELD": [
        "allowing the appeal (Hutton, L.J. and Hobhouse, L.J. dissenting), that the same sex partner of a protected tenant could be regarded as a member of the family for the purposes of Sch.1 para.3 and thus had the right to succeed to the tenancy on the death of the original tenant. However, a same sex partner could not be regarded as a surviving spouse, since the wording of the statute precluded this interpretation and Parliament could have specifically referred to same sex partners in the 1988 Act if it had intended that they be brought within this provision. The word &#8220;family&#8221; could be construed very widely in ordinary language and in recent years had not been applied solely to a legal relationship. The intention of the original provision in the Increase of Rent and Mortgage Interest (Restrictions) Act 1920 s.12(1)(g) had been that family members who enjoyed a committed relationship involving mutual love and support with the protected tenant should be protected. The question to be answered was whether in 1994, the date of T&#8217;s death, the homosexual partner of a protected tenant was intended to fall into that category of family members. In legal family relationships, the law made a presumption that the elements of mutual love, support and interdependency were present, but for any other person seeking to assert that they should be afforded protection as a family member, those elements would have to be established on the facts, R. v Ministry of Defence Ex p. Smith [1996] Q.B. 517 and Barclays Bank Plc v O&#8217;Brien [1994] 1 A.C. 180 considered. Despite the fact that this principle had not been accepted by the ECHR under the European Convention on Human Rights 1950 Art.8 and Art.12, the statutory provisions would be interpreted to include same sex partners in the definition of family members, since this was in accordance with social justice and recognised the fact that being part of a family represented a profoundly fundamental human relationship which brought with it obligations and benefits. However, for the familial relationship to be established, the relationship between the parties had to be of sufficient longevity and be more than a superficial relationship between friends living as cohabitees or short term sexual partners."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For F: Nicholas Blake Q.C. and Jan Luba. For SHA: Vivian Chapman.",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Families",
        "Homosexuality",
        "Residential Tenancies",
        "Statutory Interpretation",
        "Succession"
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Families &mdash; Homosexuality &mdash; Residential Tenancies &mdash; Statutory Interpretation &mdash; Succession",
    "SUMMARY": [
        "Appeal against dismissal of claim for automatic succession to private residential tenancy following death of long term homosexual partner; contention that appellant should be deemed spouse and member of family of original tenant for purposes of the Rent Act 1977 Sch.1 paras.2 and 3; tenant&#8217;s homosexual partner could, depending on individual circumstances, be family member but not spouse; a temporary superficial relationship or cohabitation by friends would not establish the necessary familial link",
        "F had lived with his partner, T, in a homosexual relationship for 18 years and sought to succeed to the original protected residential tenancy on T&#8217;s death. Under the Rent Act 1977 Sch.1 para.3 the right to succession upon the death of the original tenant was granted to the &#8220;surviving spouse&#8221; or &#8220;a member of the original tenant&#8217;s family&#8221;. Following amendments made by the Housing Act 1988 , cohabitees were also brought under the definition of &#8220;surviving spouse&#8221; being granted the right to succeed if they could establish that they had lived with the original tenant &#8220;as his or her ...wife or husband&#8221;. F contended that he should be regarded as T&#8217;s surviving spouse since, owing to the changing views in modern society, their relationship had been synonymous with the concept of a &#8220;marriage&#8221; due to its longevity and intimate nature. Secondly, if that was not the case, F argued that he had been living with T as a member of his family since all the necessary ingredients of mutual love, support and interdependency had existed in their relationship."
    ],
    "COURT": "UKHL",
    "CITATION": "Reynolds v Times Newspapers Ltd [2001] 1 AC 27",
    "NUMBER": "499",
    "YEAR": "2001"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Lawrence v Pembrokeshire County Council",
        "(wl) Joyce v O'Brien",
        "(wl) Roles v Nathan",
        "(wl) Reynolds v Times Newspapers Ltd",
        "(wl) Cook v Lewis",
        "(wl) LMS International v Styrene Packaging Ltd",
        "(wl) Hawley v Luminar Leisure Ltd",
        "(wl) Barber v Somerset County Council",
        "(wl) Van Colle v Chief Constable of Hertfordshire",
        "(wl) Maguire v Sefton MBC",
        "(wl) Taylor v A Novo Ltd (UK)",
        "(wl) Barker v Corus (UK)"
    ],
    "NAME": "(wl) Clift v Slough BC",
    "JUDGE": "Ward LJ; Hughes LJ; Patten LJ",
    "CIT": "[2010] EWCA Civ 1171",
    "HELD": [
        "Appeal allowed.",
        "(1) When considering &#8220;big money&#8221; ancillary relief cases where the wealth was inherited, the courts should concentrate on the Matrimonial Causes Act 1973 s.25, which imposed a duty on the court to have regard to all the circumstances of a case, with consideration first being given to the welfare of any child of the family who was under the age of 18 and then to the specific factors in s.25(2). Confusion would be avoided if resort was had to the precise language of the statute. The weight to be given to each factor depended on the particular facts and circumstances of each case and, although there was no order of importance, each relevant factor had to be given its due weight. That approach ensured that flexibility was built into the exercise of discretion and as with every exercise of judicial discretion, the objective had to be to reach a just and fair result. Need, compensation and sharing would usually guide that search for fairness. As inherited wealth formed part of the property and financial resources of a party, it had to be taken into account pursuant to s.25(2)(a). The other relevant factors also had to be taken into account but the fact that wealth was inherited and not earned justified it being treated differently from wealth accruing from the joint efforts of the parties. It was not only the source of the wealth which was relevant but its nature. An ancestral castle might deserve different treatment from a farm inherited from a party&#8217;s father who had acquired it in his lifetime, just as a valuable heirloom was of a different character from an inherited portfolio of stocks and shares. The nature and source of an asset might well be a good reason for departing from equality within the sharing principle. The duration of the marriage and the length of time the wealth had been enjoyed by the parties was also relevant, as was their standard of living and the extent to which it had been afforded and enhanced by drawing down on the added wealth. The way the property was preserved, enhanced or depleted should also be taken into account. When property was acquired before or inherited during a marriage, it might be said that the spouse to whom it had been given should in fairness be allowed to keep it. On the other hand, the more and longer that wealth had been enjoyed, the less fair it was that it should be ring-fenced so as to render it unavailable to meet a party&#8217;s needs generated by the relationship. Judges should be cautious and not invade inherited property unnecessarily. No formula and no resort to percentages would provide the right answer. Weighing the various factors and striking the balance of fairness was an art, not a science (see para.43 of judgment). (2) There was a bracket within which the judge had to endeavour to find that sum of money which would enable W to enjoy a comfortable life while living independently from H. In endeavouring to be fair to both parties, the right sum to award was a total lump sum of \u00a37 million. Looking at the case in the round, that would leave W well provided for and H could afford to make the payment from the proceeds of sale of the estate. The essential balance between needs and resources would be struck (paras 93-94). (3) The Court of Appeal should be very cautious in admitting fresh evidence of events which had occurred after an order had been made. The criteria established in Ladd v Marshall [1954] 1 W.L.R. 1489 of former unavailability, important significance and credibility were principally designed for evidence which related to past events. It did not follow that evidence of new events, which by definition was evidence which was not available at trial, should be admitted, Ladd v Marshall considered (para.96)."
    ],
    "ABSTRACT": [
        "The appellant husband (H) appealed against an award made to the respondent wife (W) in ancillary relief proceedings.",
        "H and W had been married for over 20 years and had two children, aged 20 and 17. H had inherited substantial wealth, including a large farm estate. The judge identified the important factors in the case, including the nature and value of the assets, the extravagant lifestyle of the parties and the agreement, arrangements or understanding underlying that lifestyle, including the parties&#8217; approach to H&#8217;s inherited wealth. He concluded that H and W had effectively lived off the inherited assets. The judge&#8217;s objective had been to achieve a fair result, and the principles he applied in order to achieve that were need, compensation and sharing. He took the view that the source of assets, in the instant case the fact that they were inherited by H before the marriage, was a relevant factor. He found H&#8217;s net worth to be over \u00a322 million and ordered him to pay a lump sum of \u00a38 million to W. He ordered the sale of the farm estate to fund that payment. Periodical payments were ordered to be made until the lump sum was paid in full, when a clean break would be effected. Both parties sought to adduce further evidence for the appeal proceedings relating to events after the making of the order."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Tim Amos QC, Oliver Wise. For the respondent: David Balcombe QC, Nicholas Westley.",
    "CATEGORIES": [
        "Family Law",
        "Ancillary Relief",
        "Financial Provision Orders",
        "Fresh Evidence",
        "Lump Sum Payments",
        "Matrimonial Property"
    ],
    "CATEGORY": "Family Law &mdash; Ancillary Relief &mdash; Financial Provision Orders &mdash; Fresh Evidence &mdash; Lump Sum Payments &mdash; Matrimonial Property",
    "SUMMARY": [
        "The Court of Appeal provided guidance regarding the approach to be taken by courts when considering &#8220;big money&#8221; ancillary relief cases where the wealth in the marriage was inherited."
    ],
    "COURT": "EWCA",
    "CITATION": "Clift v Slough BC [2010] EWCA Civ 1171",
    "NUMBER": "500",
    "YEAR": "2010"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Spiller v Joseph",
        "(wl) Thornton v Telegraph Media Group Ltd",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)",
        "(wl) British Chiropractic Association v Singh",
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Baturina v Times Newspapers",
        "(wl) Berkoff v Burchill and The Times",
        "(wl) Cooke v Mirror Group Newspapers Ltd",
        "(wl) John v MGN Ltd",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Steel and Morris v UK"
    ],
    "NAME": "(wl) Horrocks v Lowe",
    "JUDGE": "Lord Wilberforce; Lord Diplock; Lord Kilbrandon",
    "CIT": "[1975] AC 135",
    "HELD": [
        "dismissing H&#8217;s appeal, that malice could not be inferred since L held an honest and positive belief in the truth of his statement and had not abused the privileged occasion. (Decision of C.A. affirmed; Clark v Molyneaux (1877) 3 Q.B.D. 237 applied; dictum of Lord Esher, M.R. in Royal Aquarium &amp; Summer &amp; Winter Garden Society Ltd v Parkinson [1892] 1 Q.B. 431 explained)."
    ],
    "FLAGS": [
        "Approved"
    ],
    "YEAR": "1975",
    "CATEGORIES": [
        "Defamation",
        "Councillors",
        "Justification",
        "Malice"
    ],
    "CATEGORY": "Defamation &mdash; Councillors &mdash; Justification &mdash; Malice",
    "SUMMARY": [
        "Privilege; qualified privilege; council meeting; honest belief in truth",
        "A statement honestly believed to be true and not made for any improper motive cannot be said to have been made maliciously because of the unreasonableness of the belief. At a local authority council meeting L made a speech defamatory of H who, in answer to L&#8217;s defence of justification and fair comment, alleged that L had been actuated by express malice. At first instance it was found that the occasion was privileged but that malice had been proved."
    ],
    "COURT": "UKHL",
    "CITATION": "Horrocks v Lowe [1975] AC 135",
    "NUMBER": "501"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Baturina v Times Newspapers",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) British Chiropractic Association v Singh",
        "(wl) Spiller v Joseph",
        "(wl) Cooke v Mirror Group Newspapers Ltd",
        "(wl) Milne v Express Newspapers Ltd",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Telnikoff v Matusevich",
        "(wl) Thornton v Telegraph Media Group Ltd",
        "(wl) Ames v The Spamhaus Project Ltd",
        "(wl) Berkoff v Burchill and The Times"
    ],
    "NAME": "(wl) Bryanston Finance Ltd v De Vries (no 1)",
    "JUDGE": "Lord Denning MR; Lord Diplock; Lawton LJ",
    "CIT": "[1975] QB 703",
    "HELD": [
        "allowing V&#8217;s appeal that (1) the publication was covered by qualified privilege and that no express malice had been found by the trial judge; (2) that in an action against joint tortfeasors a satisfied consent judgment against one operated as a bar to a judgment for damages against the other."
    ],
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "YEAR": "1975",
    "CATEGORIES": [
        "Defamation",
        "Employees' Rights",
        "Joint Tortfeasors",
        "Letters",
        "Libel",
        "Privilege"
    ],
    "CATEGORY": "Defamation &mdash; Employees' Rights &mdash; Joint Tortfeasors &mdash; Letters &mdash; Libel &mdash; Privilege",
    "SUMMARY": [
        "Privilege; qualified; arising from relationship of employer and employee",
        "When a letter is dictated to a secretary, that publication being from an employer to an employee is covered by a qualified privilege. It does not depend on a common interest and is an original rather than an ancillary privilege. V and C drafted a letter to S which was typed by their secretary and copied by another clerk. It was delivered by hand to S who claimed damages and an injunction. The action was settled by C by means of a consent judgment."
    ],
    "COURT": "EWCA",
    "CITATION": "Bryanston Finance Ltd v De Vries (no 1) [1975] QB 703",
    "NUMBER": "502"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Thornton v Telegraph Media Group Ltd",
        "(wl) Baturina v Times Newspapers",
        "(wl) Waterson v Lloyd",
        "(wl) Steel and Morris v UK",
        "(wl) Worsley v Tambrands",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Milne v Express Newspapers Ltd",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Lewis v Daily Telegraph Ltd",
        "(wl) Bernard v Attorney General of Jamaica",
        "(wl) British Chiropractic Association v Singh",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)"
    ],
    "NAME": "(wl) Flood v Times Newspapers Ltd",
    "JUDGE": "Lord Phillips JSC; Lord Brown JSC; Lord Mance JSC; Lord Clarke JSC; Lord Dyson JSC",
    "CIT": "[2012] UKSC 11",
    "HELD": [
        "Appeal allowed in part.",
        "(1) Reynolds privilege protected the publication of defamatory matter where it was in the public interest that the information should be published, and the publisher had acted responsibly in publishing it. A claim for Reynolds privilege was often determined as a preliminary issue. However, that could raise a practical problem since in order to perform the balancing act between the desirability of the public receiving the information in question and the potential harm caused if the individual was defamed, it was necessary to determine the meaning of the publication. Meaning was normally a matter for the jury. However, the parties could agree to trial by judge alone. It would then be open to the trial judge to resolve any issues that arose in relation to the meaning of the words published. Further, a responsible journalist should have regard to the full range of meanings that a reasonable reader might attribute to the publication. The claim to Reynolds privilege would have to be assessed having regard to that range of meanings (see paras 2, 48-52 of judgment). (2) F had sought to rely on Purcell v Sowler (1877) 2 C.P.D. 215 and De Buse v McCarthy [1942] 1 K.B. 156, but Tugendhat J was correct to say that it was rather dangerous to rely on cases of such antiquity when dealing with fundamental issues of freedom of speech and respect for private life, Purcell and De Buse doubted. Each case would turn on its own facts and the overriding test was that of responsible journalism. In the instant case, subject to the issue of verification, it was in the public interest that both the accusation and most of the facts that supported it were published. The story, if true, was of high public interest. That interest lay not merely in the fact of police corruption but in the nature of that corruption, Reynolds v Times Newspapers Ltd [2001] 2 A.C. 127 and Jameel v Wall Street Journal Europe SPRL (No.3) [2006] UKHL 44, [2007] 1 A.C. 359 applied. It was generally likely to be in the public interest to publish the details of allegations of police corruption, whatever the nature of the alleged corruption, provided that the test of responsible journalism was met. The motivation of T&#8217;s journalist for publishing the accusation was also relevant. His doubts as to whether the police were exercising due diligence in investigating the allegation might constitute a legitimate aim of publishing, and it was in the public interest to ensure that the investigation was carried out promptly. Naming F had not conflicted with the test of responsible journalism or with the public interest. He would be identified by other members of his unit, and if he were not named, other members of the unit might have come under suspicion (paras 59, 68-74, 155, 169, 179-181, 195). (3) Reportage was a special form of Reynolds privilege which arose where it was not the content of a reported allegation that was of public interest, but the fact that the allegation had been made. The position was quite different where the public interest in the allegation lay in its content and in the fact that it might be true. The responsible journalist had to satisfy himself that the allegation was true; his belief in its truth had to be the result of a reasonable investigation and it had to be a reasonable belief to hold. Where a journalist alleged that there were grounds for suspecting that a person had been guilty of misconduct, he should satisfy himself that such grounds existed, but that did not necessarily require that he should know what those grounds were. Their existence could be based on information from reliable sources, or inferred from the fact of a police investigation. There was a strong circumstantial case against F. The supporting facts and the actions of the police had reasonably satisfied T that there was a serious possibility that F was guilty of corruption. The requirements of responsible journalism had therefore been met (paras 77-81, 99, 158, 167). (4) The second limb of T&#8217;s appeal, concerning continued publication after the outcome of the police investigation was known, was adjourned (para.107)."
    ],
    "ABSTRACT": [
        "The appellant newspaper (T) appealed against a decision ([2010] EWCA Civ 804, [2011] 1 W.L.R. 153) that it could not rely on Reynolds privilege to defeat a defamation claim brought by the respondent police officer (F).",
        "T had published an article in its newspaper and on its website stating that police were investigating whether a senior officer was guilty of taking bribes in exchange for sensitive police information. F was named as the officer under investigation. The police investigation subsequently cleared F, but T did not remove the article from its website. F brought proceedings against T for libel. The Court of Appeal found that T&#8217;s journalists had failed to adequately verify the allegations of fact contained in the article. The Supreme Court was required to determine: (i) how the court should approach the meaning of a publication when considering a claim to Reynolds privilege; (ii) whether, and in what circumstances, it was in the public interest to refer to the fact that accusations had been made to the police that a named person had committed a criminal offence; (iii) what, if any, steps were required on the part of a responsible journalist to verify the information."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Richard Rampton QC, Heather Rogers QC, Kate Wilson. For the respondent: James Price QC, Willliam Bennett.",
    "CATEGORIES": [
        "Defamation Other Related Subjects: Media and Entertainment",
        "Freedom of Expression",
        "Libel",
        "Newspapers",
        "Police Officers",
        "Responsible Journalism",
        "Reynolds Defence",
        "Right to Respect For Private and Family Life",
        "Verification"
    ],
    "CATEGORY": "Defamation Other Related Subjects: Media and Entertainment &mdash; Freedom of Expression &mdash; Libel &mdash; Newspapers &mdash; Police Officers &mdash; Responsible Journalism &mdash; Reynolds Defence &mdash; Right to Respect For Private and Family Life &mdash; Verification",
    "SUMMARY": [
        "The Supreme Court considered the elements necessary for a successful claim of Reynolds privilege in a defamation claim, in particular, how the court should approach the meaning of a publication, whether it was in the public interest to report allegations of police corruption whilst an investigation was ongoing, and the steps that a reasonable journalist should take to verify the information."
    ],
    "COURT": "UKSC",
    "CITATION": "Flood v Times Newspapers Ltd [2012] UKSC 11",
    "NUMBER": "503",
    "YEAR": "2012"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Thornton v Telegraph Media Group Ltd",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Waterson v Lloyd",
        "(wl) Telnikoff v Matusevich",
        "(wl) Spiller v Joseph",
        "(wl) Co-operative Group Ltd v Pritchard",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Baturina v Times Newspapers",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Ames v The Spamhaus Project Ltd",
        "(wl) Reeves v Metropolitan Police Commissioner",
        "(wl) Lewis v Daily Telegraph Ltd"
    ],
    "NAME": "(wl) Milne v Express Newspapers Ltd",
    "JUDGE": "May LJ; Tuckey LJ; Laws LJ",
    "CIT": "[2004] EWCA Civ 664",
    "HELD": [
        "refusing the first application and allowing the second application in part, but dismissing the appeal, that (1) the judge&#8217;s interpretation of s.4(3) of the 1996 Act in his first judgment was entirely correct for the reasons which he gave. The words &#8220;reason to believe&#8221; in s.4(3) imported the concept of recklessness enunciated in Horrocks v Lowe [1975] A.C. 135. The reason for adopting this approach was that where a claimant established malice on the part of a person who published a defamatory statement, he would have the basis for a claim of aggravated, and possibly exemplary, damages. Malice apart, compensation could be fully assessed and awarded under s.3(5) of the Act. There would be little point therefore in relying on s.4(3) unless the requirement there was to establish malice. Recognising that some claimants might prefer a jury trial could not alone have been the parliamentary purpose. The phrase &#8220;had reason to believe&#8221; required an inquiry into what facts were in a person&#8217;s head and not into what facts ought to have been in his head. Reason to believe was not to be equated with reason to suspect or with constructive knowledge, Horrocks applied. (2) The judge was right to refuse permission to amend the reply. M&#8217;s attempt to elevate the proposed amended particulars to a case under s.4(3) fit to go to a jury failed for the reasons given by the judge. M&#8217;s central submission relied on far too brittle a chain of inferred or imputed reasoning on the part of S. What was required was not an inference but reckless indifference to the truth. The judge was right that there would be no proper basis for a jury to conclude from the amended particulars that S was recklessly indifferent to the truth of the relevant defamatory statement which he published."
    ],
    "FLAGS": [
        "Approved"
    ],
    "COUNSEL": "For the appellant: Richard Parkes QC, William Bennett. For the respondent: Geoffrey Shaw QC, Caroline Addy.",
    "CATEGORIES": [
        "Defamation Other Related Subjects: Media and Entertainment",
        "Bad Faith",
        "Defences",
        "Libel",
        "Offer of Amends",
        "Recklessness",
        "Rectification",
        "Statutory Provisions"
    ],
    "CATEGORY": "Defamation Other Related Subjects: Media and Entertainment &mdash; Bad Faith &mdash; Defences &mdash; Libel &mdash; Offer of Amends &mdash; Recklessness &mdash; Rectification &mdash; Statutory Provisions",
    "SUMMARY": [
        "The words &#8220;reason to believe&#8221; in the Defamation Act 1996 s.4(3) were not to be equated with reason to suspect or with constructive knowledge on the part of the person offering to make amends. The provision imported the concept of recklessness enunciated in Horrocks v Lowe [1975] A.C. 175.",
        "The claimant (M) sought permission to appeal against two decisions ([2002] EWHC 2564, [2003] 1 W.L.R. 927, [2003] C.L.Y. 961 and [2003] EWHC 1843) in his defamation action against the defendant newspaper (E). E had published an article written by a journalist (S) that contained words which the parties accepted conveyed the meaning that M was reasonably suspected of giving false evidence to an inquiry by the Parliamentary Standards Commissioner. E had made an unqualified offer to make amends under the Defamation Act 1996 s.2 and made proposals to implement the offer. M rejected the offer and gave reasons for doing so. Consequently, D pleaded the statutory defence under s.4 of the Act. In his reply M sought to rebut that defence alleging, in reliance on s.4(3) of the Act, that S had had &#8220;reason to believe that the statement complained of was false&#8221;. D applied to strike out the part of the reply which relied on s.4(3). In the first judgment the judge decided that a claimant was only able to challenge a s.4 defence where the defendant had chosen to ignore or shut his mind to information which should have led him to believe that the allegation was false. The judge held M&#8217;s reply was insufficient in law to rebut the s.4 defence and struck out the relevant paragraphs. M applied for permission to amend the reply. D opposed the application, contending that the proposed second version of the pleading still failed to measure up to the requirements of s.4(3). In the second judgment the judge upheld D&#8217;s contentions and refused M permission to amend his reply and ordered that judgment should be entered for D. M submitted that the judge misconstrued s.4(3) as importing a wholly subjective recklessness or &#8220;bad faith&#8221; test of the kind required for proof of malice in defamation proceedings."
    ],
    "COURT": "EWCA",
    "CITATION": "Milne v Express Newspapers Ltd [2004] EWCA Civ 664",
    "NUMBER": "504",
    "YEAR": "2004"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Worsley v Tambrands",
        "(wl) Coventry v Lawrence (no 2)",
        "(wl) A v United Kingdom",
        "(wl) Flood v Times Newspapers Ltd",
        "(wl) Marcic v Thames Water Utilities Ltd",
        "(wl) St Helens Smelting Co v Tipping",
        "(wl) Lawrence v Pembrokeshire County Council",
        "(wl) Bone v Searle",
        "(wl) Dobson v Thames Water Utilities",
        "(wl) Vowles v Evans & the Welsh RFU",
        "(wl) A and others v National Blood Authority",
        "(wl) Kennaway v Thompson"
    ],
    "NAME": "(wl) Steel and Morris v UK",
    "JUDGE": "Charles J",
    "CIT": "[2016] EWCOP 21",
    "HELD": [
        "Application granted.",
        "(1) The court had jurisdiction to make the order. Reporting restrictions orders in serious medical treatment cases could extend beyond the death of the subject of those proceedings. There was no presumption or default position that such orders should end when the subject died, Meek, Re [2014] EWCOP 1, [2014] C.O.P.L.R. 535 and Press Association v Newcastle Upon Tyne Hospitals Foundation Trust [2014] EWCOP 6, [2014] C.O.P.L.R. 502 applied (see paras 9.1, 9.11, 98-108, 144-145 of judgment).",
        "(2) The duration of the order would be &#8220;until further order of the court&#8221;. There was no reason to order that reporting restrictions should terminate on the youngest daughter&#8217;s 18th birthday, as submitted by the respondent media organisations, as the two adult daughters also had valid art.8 rights which were engaged (paras 9.2, 9.14, 110-118, 142-143,167-169, 178-180).",
        "(3) Balancing art.8 and art.10 was a case-sensitive exercise. Care should be taken in transporting comment on the weight of rival factors from one type of case to another, S (A Child) (Identification: Restrictions on Publication), Re [2004] UKHL 47, [2005] 1 A.C. 593 applied and C v Secretary of State for Justice [2016] UKSC 2, [2016] 1 W.L.R. 444 considered (paras 9.3, 43, 69-73).",
        "(4) The first step was to consider whether there was a good reason for a public hearing. That was not an isolated or preliminary stage that, if such a good reason existed, would found an approach that the second stage was addressed on the premise the Court of Protection proceedings were treated in the same way as other proceedings where the default rule was that they were heard in public (para.9.4, 79-80, 90).",
        "(5) The default rule that Court of Protection hearings were held in private represented a general conclusion on how best to administer justice. Neither art.8 nor art.10 took precedence so it would be wrong to approach the default rule as creating a presumption. Rather it was part of the structure for a reasoning process which applied the approach in S (A Child) to a given case (paras 9.5, 80, 91-92).",
        "(6) In most cases, the important safeguards secured by a public hearing could be secured without identifying the people involved. Generally the court should ask (a) whether there were good reasons for a public hearing; (b) if so, whether there should be reporting restrictions; (c) how effective restrictions might be in promoting art 8 rights and how restrictive they would be of art.10 rights; (d) if the hearing was to be in public, what reporting restrictions should be imposed, and if the hearing was to be in private, what documents should be made public (paras 9.6, 9.7, 84-85, 96).",
        "(7) Hearings would almost always be in public because of the benefits of open justice (paras 9.8, 97).",
        "(8) Owing to the rival propositions relating to anonymisation, the court had to distinguish between cases falling within the default position of allowing media access, and cases where media access was restricted. The weight to be given to the general propositions regarding naming, and the court&#8217;s conclusion about what best promoted the administration of justice in any given case, would vary. They would often be taken into account in the context of (a) the validity of the reasons for the application, and (b) the impact of departing from the general conclusion on what generally promoted the administration of justice. Those reasons and that impact would need to be identified (paras 9.9, 9.10, 78, 95).",
        "(9) In the instant case it should have been clear to anyone with compassion that the focus of the reporting would, and did, add greatly to the distress of the deceased&#8217;s daughters, one of whom was still at school. Much of the publicity had been precipitated by a wish not only to report the bases on which the court reached its decision, but to attract prurient interest in the deceased&#8217;s sexual and relationship history. It was obvious that naming or otherwise identifying the deceased would increase the family&#8217;s distress. Their art.8 rights were engaged, not least because the investigatory jurisdiction of the Court of Protection had invaded their private and family lives. (para.9.13, 29-35, 43, 74-77, 130-143)."
    ],
    "ABSTRACT": [
        "The Court of Protection considered its jurisdiction to make a reporting restrictions order after the subject of the proceedings had died, and after previous reporting restrictions orders had ended.",
        "The deceased was a 50-year-old woman who had refused life-saving treatment. The case had attracted much media attention. The woman was a socialite, described in the press as wanting to die because she thought she had &#8220;lost her sparkle&#8221; and did not want to grow old. During Court of Protection proceedings to determine her capacity to refuse treatment there had been a reporting restrictions order expressed to be effective during her lifetime. After the death, media interest increased. A seven-day interim extension was granted on the basis that there was no public interest in the woman or her family being identified. At the instant hearing, an adult daughter applied for a further reporting restrictions order. It was agreed that an order was appropriate, but its duration was disputed. Issues arose as to the court&#8217;s general approach to granting such orders, particularly regarding the balance to be struck between ECHR art.8 and art.10."
    ],
    "COUNSEL": "For the applicant: Richard Spearman QC, Vikram Sachdeva QC, Victoria Butler-Cole. For the respondents: Adam Wolanski.",
    "CATEGORIES": [
        "Civil Procedure Other Related Subjects: Administration of Justice",
        "Human Rights",
        "Media and Entertainment",
        "Anonymity",
        "Capacity",
        "Death",
        "Duration",
        "Freedom of Expression",
        "Injunctions",
        "Life-Sustaining Treatment",
        "Press",
        "Reporting Restrictions",
        "Right to Respect For Private and Family Life"
    ],
    "CATEGORY": "Civil Procedure Other Related Subjects: Administration of Justice &mdash; Human Rights &mdash; Media and Entertainment &mdash; Anonymity &mdash; Capacity &mdash; Death &mdash; Duration &mdash; Freedom of Expression &mdash; Injunctions &mdash; Life-Sustaining Treatment &mdash; Press &mdash; Reporting Restrictions &mdash; Right to Respect For Private and Family Life",
    "SUMMARY": [
        "Reporting restrictions orders made by the Court of Protection in serious medical treatment cases could extend beyond the death of the subject of those proceedings. There was no presumption or default position that such orders should end when the subject died. The court considered the general approach which it should take to granting such orders."
    ],
    "COURT": "EWHC",
    "CITATION": "Steel and Morris v UK [2016] EWCOP 21",
    "NUMBER": "505",
    "YEAR": "2016"
},
{
    "TYPE": "Headnotes",
    "RELATED": [
        "(wl) Morgan v Odhams Press Ltd",
        "(wl) Co-operative Group Ltd v Pritchard",
        "(wl) Bone v Searle",
        "(wl) Bryanston Finance Ltd v De Vries (no 1)",
        "(wl) O'Shea v Mirror Group Newspapers Ltd",
        "(wl) Dennis v Ministry of Defence",
        "(wl) Grobbelaar v News Group Newspapers Ltd",
        "(wl) Hinz v Berry",
        "(wl) British Chiropractic Association v Singh",
        "(wl) Cooke v Mirror Group Newspapers Ltd",
        "(wl) Spiller v Joseph",
        "(wl) Dobson v Thames Water Utilities"
    ],
    "NAME": "(wl) John v MGN Ltd",
    "JUDGE": "Sir Thomas Bingham MR; Neill LJ; Hirst LJ",
    "CIT": "[1997] QB 586",
    "HELD": [
        "allowing the appeal in part and reducing the total award to GBP 75,000, that guidance should be given to juries on appropriate awards to be made in defamation cases as it was offensive to public opinion that sums awarded for damage to reputation often well exceeded those awarded in serious personal injury cases. Although juries should not be reminded of previous jury libel awards, reference to such awards was permissible in the absence of any established frame of reference, Rantzen v Mirror Group Newspapers (1986) Ltd [1994] Q.B. 670 and Broome v Cassell &amp; Co Ltd (No.1) [1972] A.C. 1027 considered. However, a change of practice should be introduced whereby counsel could draw a jury&#8217;s attention to the maximum conventional award for personal injuries and what would be reasonable in the circumstances, with the proviso that there could be no precise equiparation between an injury such as quadriplegia and injury to reputation. There was no reason why counsel could not make submissions or the judge indicate to the jury the level of award considered appropriate. With regard to assessment of exemplary damages, the jury had to be satisfied that the publisher had no genuine belief in the truth of the article published and that he was motivated by material gain, not merely the publication of a newspaper for profit. An award should never exceed the minimum necessary to satisfy the requirements of punishment and deterrence."
    ],
    "FLAGS": [
        "Approved",
        "Bingham"
    ],
    "COUNSEL": "For MGN: Charles Gray Q.C. and Heather Rogers. For J: Desmond Browne Q.C. and David Parsons.",
    "CATEGORIES": [
        "Torts Other Related Subjects: Damages",
        "Defamation",
        "Juries",
        "Measure of Damages"
    ],
    "CATEGORY": "Torts Other Related Subjects: Damages &mdash; Defamation &mdash; Juries &mdash; Measure of Damages",
    "SUMMARY": [
        "Libel; jury awards",
        "MGN, a newspaper publisher, appealed against a total libel award of GBP 350,000, comprising GBP 75,000 compensatory damages and GBP 275,000 exemplary damages, awarded to J, a musician, in a libel action in respect of an article published in the Sunday Mirror ."
    ],
    "COURT": "EWCA",
    "CITATION": "John v MGN Ltd [1997] QB 586",
    "NUMBER": "506",
    "YEAR": "1997"
}];"; 

cardsLen = 507;

