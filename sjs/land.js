cts_ = "WwogICAgIkNhc2UiLAogICAgIkNhc2UgT3ZlcnZpZXdzIiwKICAgICJDb25jZXB0IiwKICAgICJFeGFtIEFkdmljZSIsCiAgICAiSGVhZG5vdGVzIiwKICAgICJIZWxwIiwKICAgICJTdGF0dXRlIiwKICAgICJUYWJsZSBvZiBDb250ZW50cyIKXQ=="; 

crt_ = "WwogICAgIkVDdEhSIEdyYW5kIENoYW1iZXIiLAogICAgIkVXQ0EiLAogICAgIkVXSEMiLAogICAgIkxSIFRyaWJ1bmFsIiwKICAgICJVS0hMIiwKICAgICJVS1BDIiwKICAgICJVS1NDIgpd"; 

cnc_ = "WwogICAgIkFkdmVyc2UgUG9zc2Vzc2lvbiIsCiAgICAiQ2lyY3Vtc3RhbmNlcyBmb3IgQWR2ZXJzZSBQb3NzZXNzaW9uIiwKICAgICJDb25kaXRpb25zIGZvciBBdmVyc2UgUG9zc2Vzc2lvbiIsCiAgICAiQ292ZW5hbnRzIC0gT3ZlcnZpZXciLAogICAgIkVhc2VtZW50cyIsCiAgICAiRWFzZW1lbnRzIC0gQ3JlYXRpb24iLAogICAgIkVsZWN0cm9uaWMgQ29udmV5YW5jaW5nIiwKICAgICJFcXVpdGFibGUgU2hhcmVzIG9mIENvLW93bmVyc2hpcCIsCiAgICAiRm9ybWFsaXRpZXMiLAogICAgIkZvcm1hbGl0eSBSdWxlcyAtIEVxdWl0YWJsZSIsCiAgICAiRm9ybWFsaXR5IFJ1bGVzIC0gTGVnYWwiLAogICAgIkZyZWVob2xkIENvdmVuYW50cyAtIEJlbmVmaXQiLAogICAgIkZyZWVob2xkIENvdmVuYW50cyAtIEJ1cmRlbiIsCiAgICAiSW50ZXJlc3RzIG9mIFBlcnNvbnMgaW4gQWN0dWFsIE9jY3VwYXRpb24iLAogICAgIkpvaW50IFRlbmFuY3kgYW5kIFRlbmFuY3kgaW4gQ29tbW9uIiwKICAgICJMYW5kIFJlZ2lzdHJhdGlvbiIsCiAgICAiTGFuZCBSZWdpc3RyYXRpb24gLSBUaGVvcnkiLAogICAgIkxlZ2FsIEVhc2VtZW50cyBhcyBTY2hlZHVsZSAzIE92ZXJyaWRpbmcgSW50ZXJlc3RzIiwKICAgICJMZWdhbCBMZWFzZXMgYXMgU2NoZWR1bGUgMyBPdmVycmlkaW5nIEludGVyZXN0cyIsCiAgICAiTWlzdGFrZXMgb24gdGhlIFJlZ2lzdGVyIGFuZCBJbmRlbW5pdGllcyIsCiAgICAiT3ZlcnJlYWNoaW5nIiwKICAgICJPdmVycmlkaW5nIEludGVyZXN0cyAtIE92ZXJ2aWV3IiwKICAgICJPdmVycmlkaW5nIEludGVyZXN0cyBhdCBGaXJzdCBSZWdpc3RyYXRpb24iLAogICAgIk92ZXJyaWRpbmcgSW50ZXJlc3RzIGF0IFRyYW5zZmVyIiwKICAgICJQYXR0ZXJucyBvZiBGYWN0cyBpbiBSZWN0aWZpY2F0aW9uIENhc2VzIiwKICAgICJQZXJzb25hbCBSaWdodHMiLAogICAgIlByaW9yaXR5IFJ1bGVzIiwKICAgICJQcm9wZXJ0eSBSaWdodHMiLAogICAgIlByb3BlcnR5IFJpZ2h0cyAtIEdlbnRsZSBJbnRybyIsCiAgICAiUmVnaXN0ZXJlZCBQcm90ZWN0ZWQgSW50ZXJlc3RzIiwKICAgICJTY2hlZHVsZSAzKDIpOiBBY3R1YWwgT2NjdXBhdGlvbiIsCiAgICAiU2V2ZXJhbmNlIiwKICAgICJUZW5hbmN5IGluIENvbW1vbiAtIFJlY29nbmlzaW5nIiwKICAgICJUaXRsZSBHdWFyYW50ZWUiCl0="; 

cgs_ = "[
    "Acceleration Clauses",
    "Access",
    "Accommodation",
    "Accrual of Cause of Action",
    "Acquiescence",
    "Actual Occupation Immediately Before Conveyance",
    "Actual Undue Influence",
    "Administration of Estates",
    "Adverse Possession",
    "Adverse Possession of Residential Property as Criminal Offence",
    "Agreements",
    "Agricultural Holdings",
    "Agriculture",
    "Agriculture Other Related Subjects: Landlord and Tenant",
    "Alienation",
    "Alteration",
    "Annexation",
    "Antigua and Barbuda",
    "Appeals",
    "Arrest",
    "Assignment",
    "Assurances",
    "Assured Shorthold Tenancies",
    "Assured Tenancies",
    "Authorised Guarantee Agreements",
    "Bankers' Duties",
    "Banking and Finance",
    "Banking and Finance Other Related Subjects: Civil Procedure",
    "Banking and Finance Other Related Subjects: Consumer Law",
    "Banking and Finance Other Related Subjects: Equity",
    "Banking and Finance Other Related Subjects: Landlord and Tenant",
    "Banking and Finance Other Related Subjects: Real Property",
    "Bankruptcy",
    "Bankruptcy Petitions",
    "Banks",
    "Barns",
    "Basic Rule",
    "Beneficial Interests",
    "Beneficial Ownership",
    "Beneficiaries",
    "Benefit Cap",
    "Benefits of Covenants",
    "Best Interests",
    "Boundaries",
    "Boundary Disputes",
    "Breach",
    "Breach of Contract",
    "British Virgin Islands",
    "Brothels",
    "Building Estates",
    "Building Schemes",
    "Building and Engineering Contracts",
    "Burden of Proof",
    "Burdens of Covenants",
    "Business Premises",
    "Business Tenancies",
    "Caravan Sites",
    "Cautions",
    "Certainty",
    "Certificates",
    "Charges",
    "Charging Orders",
    "Charitable Trusts",
    "Charities",
    "Charities Other Related Subjects: Education",
    "Charity Commission For England and Wales",
    "Children",
    "Children'S Welfare",
    "Civil Procedure",
    "Click to display sets of cards for...",
    "Co-Ownership",
    "Co-ownership",
    "Codes of Conduct",
    "Cohabitants",
    "Cohabitation",
    "Collateral Contracts",
    "Common Law",
    "Common Law Rights",
    "Company Law",
    "Compensation",
    "Completion",
    "Conditions of Sale",
    "Conduct",
    "Confiscation Orders",
    "Consent",
    "Constructive Trusts",
    "Consumer Credit Agreements",
    "Continuity of Possession",
    "Contract For Sale of Land",
    "Contract Terms",
    "Contracts",
    "Contracts For Sale of Land",
    "Contractual Liability",
    "Contractual Rights",
    "Contributions",
    "Conveyances",
    "Conveyancing",
    "Costs Between the Parties",
    "Counterclaims",
    "County Courts",
    "Covenants",
    "Creditors",
    "Creditors' Rights",
    "Criminal Law",
    "Damages",
    "Debentures",
    "Debts",
    "Default",
    "Defences",
    "Definitions",
    "Delay",
    "Delegation of Right",
    "Demoted Tenancies",
    "Deposits",
    "Derogation From Grant",
    "Desertion",
    "Detriment",
    "Discretionary Powers",
    "Dishonesty",
    "Dismissal",
    "Disposition of Property",
    "Distress",
    "Divorce",
    "Documents",
    "Dominant Tenement",
    "Donatio Mortis Causa",
    "Due Diligence",
    "Duration",
    "Duty of Care",
    "Easements",
    "Electronic Conveyancing",
    "Employees",
    "Enforcement",
    "Enfranchisement",
    "Entitlement",
    "Equitable Charges",
    "Equitable Interests",
    "Equitable Mortgages",
    "Equitable Ownership",
    "Equitable Principles",
    "Equitable Remedies",
    "Equitable Rights",
    "Equitable Set-Off",
    "Equity",
    "Equity Other Related Subjects: Contracts",
    "Equity Release Schemes",
    "Estate Contracts",
    "Estates",
    "Estoppel",
    "European Court of Human Rights",
    "European Options Exchange",
    "Eviction",
    "Ex Turpi Causa",
    "Exam Advice",
    "Exceptions",
    "Exclusive Possession",
    "Expert Determination",
    "Explicit",
    "Express Grant",
    "Extinguishment",
    "Failure to Overreach",
    "Fairness",
    "Family Division",
    "Family Home",
    "Family Law",
    "Family Law Other Related Subjects: Banking and Finance",
    "Family Law Other Related Subjects: Real Property",
    "Farms",
    "Finance",
    "Financial Collateral Arrangements",
    "Financial Provision",
    "First Registration",
    "Foreign Currencies",
    "Forfeiture",
    "Forgery",
    "Formalities",
    "Forms",
    "Fraud",
    "Freeholds",
    "Furniture",
    "Gardens",
    "Gifts",
    "Good Faith",
    "Goodwill",
    "Grant",
    "Grazing",
    "Guarantees",
    "Guarantors",
    "Gypsies",
    "Holiday Accommodation",
    "Homelessness",
    "Hong Kong",
    "Hostels",
    "Houses",
    "Housing",
    "Housing Association Tenancies",
    "Human Rights",
    "Human Rights Other Related Subjects: Landlord and Tenant",
    "Human Rights Other Related Subjects: Local Government",
    "Illegality",
    "Implied",
    "Implied Covenants",
    "Implied Creation",
    "Implied Easements",
    "Implied Grant",
    "Implied Promises",
    "Implied Reservations",
    "Implied Terms",
    "Incorporeal Hereditaments",
    "Indemnities",
    "Independent Schools",
    "Indirect Discrimination",
    "Injunctions",
    "Innocent Mistakes",
    "Insolvency",
    "Insolvency Other Related Subjects: Real Property",
    "Insurance",
    "Intention",
    "Interest Rates",
    "Interim Orders",
    "Interlocutory Injunctions",
    "Interpretation",
    "Intestacy",
    "Introductory Tenancies",
    "Joint Accounts",
    "Joint Tenancies",
    "Joint Tenancy",
    "Joint Tenants",
    "Jurisdiction",
    "Justification",
    "LRA 1925",
    "LRA 2002",
    "Land Charges",
    "Land Drainage",
    "Land Registers",
    "Land Registration",
    "Land Use",
    "Landlord and Tenant",
    "Landlord and Tenant Other Related Subjects: Civil Procedure",
    "Landlord and Tenant Other Related Subjects: Housing",
    "Landlord and Tenant Other Related Subjects: Human Rights",
    "Landlord and Tenant Other Related Subjects: Insolvency",
    "Landlord and Tenant Other Related Subjects: Insurance",
    "Landlord and Tenant Other Related Subjects: Real Property",
    "Landlord and Tenant Other Related Subjects: Trusts",
    "Landlords' Duties",
    "Landlords' Rights",
    "Landowners",
    "Leaseback",
    "Leases",
    "Legal Advice",
    "Legal Charges",
    "Legal Methodology",
    "Legal Profession",
    "Legislation",
    "Licences",
    "Life Interests",
    "Life Tenants",
    "Limitation Periods",
    "Limitations",
    "Loan Agreements",
    "Loans",
    "Local Authorities' Powers and Duties",
    "Local Authority Housing",
    "Local Government",
    "Lone Parents",
    "Manorial Rights",
    "Manorial Waste",
    "Market Value",
    "Matrimonial Home",
    "Matrimonial Property",
    "Meaning of Actual Occupation",
    "Meaning of Occupation",
    "Measure of Damages",
    "Minerals",
    "Mistake",
    "Mistakes and Indemnities",
    "Mistakes on the Register",
    "Modification",
    "Moorland",
    "Mortgage Fraud",
    "Mortgagees",
    "Mortgagees' Powers and Duties",
    "Mortgages",
    "Motor Vehicles",
    "Necessity",
    "Neighbour Disputes",
    "Neighbouring Land",
    "Noise",
    "Non-Registration",
    "Notice",
    "Notices",
    "Notices to Quit",
    "Nuisance",
    "Obstruction",
    "Occupancy",
    "Occupation",
    "Occupation or Use",
    "Odours",
    "Offensive Behaviour",
    "Omissions",
    "Options",
    "Oral Contracts",
    "Overreaching",
    "Overriding Interests",
    "Ownership",
    "Parking",
    "Partnership Formation",
    "Partnerships Other Related Subjects: Trusts",
    "Partnerships at Will",
    "Payments",
    "Peaceful Enjoyment of Possessions",
    "Performance",
    "Periodic Tenancies",
    "Persons in Actual Occupation",
    "Pigs",
    "Planning",
    "Planning Permission",
    "Police Powers and Duties",
    "Positive Covenants",
    "Possession",
    "Possession Claims",
    "Possession Orders",
    "Possession Proceedings",
    "Possession of Land",
    "Postponement",
    "Power of Sale",
    "Precedent",
    "Prejudice",
    "Prescription",
    "Presumed Undue Influence",
    "Presumption of Advancement",
    "Priorities",
    "Priority Rules",
    "Private Landlords",
    "Privity of Contract",
    "Professional Conduct",
    "Promises",
    "Property Adjustment Orders",
    "Property Insurance",
    "Property Rights",
    "Proportionality",
    "Proprietary Estoppel",
    "Proprietary Rights",
    "Protection From Eviction",
    "Public Benefit",
    "Public Policy",
    "Public Sector Tenancies",
    "Purchase Money",
    "Quantification",
    "Real Property",
    "Real Property Other Related Subjects: Animals",
    "Real Property Other Related Subjects: Banking and Finance",
    "Real Property Other Related Subjects: Civil Evidence",
    "Real Property Other Related Subjects: Civil Procedure",
    "Real Property Other Related Subjects: Contracts",
    "Real Property Other Related Subjects: Criminal Law",
    "Real Property Other Related Subjects: Criminal Procedure",
    "Real Property Other Related Subjects: Damages",
    "Real Property Other Related Subjects: Equity",
    "Real Property Other Related Subjects: Family Law",
    "Real Property Other Related Subjects: Human Rights",
    "Real Property Other Related Subjects: Landlord and Tenant",
    "Real Property Other Related Subjects: Negligence",
    "Real Property Other Related Subjects: Road Traffic",
    "Real Property Other Related Subjects: Torts",
    "Real Property Other Related Subjects: Trusts",
    "Reasonable Belief",
    "Reasonable Discoverability",
    "Receivers' Powers and Duties",
    "Reciprocity",
    "Rectification",
    "Register of Title",
    "Registered Charges",
    "Registered Interests",
    "Registered Land",
    "Registered Protected Interests",
    "Registration",
    "Relationship Breakdown",
    "Reliance",
    "Relief",
    "Remedies",
    "Rent",
    "Repair Covenants",
    "Repayments",
    "Repossession",
    "Repudiation",
    "Requirement to Disclose when Reasonable",
    "Reservations",
    "Residential Developments",
    "Residential Tenancies",
    "Residential Use",
    "Restaurants",
    "Restrictive Covenants",
    "Resulting Trusts",
    "Reversions",
    "Right to Air",
    "Right to Apply for Rectification as Property Right",
    "Right to Respect For Home",
    "Right to Respect For Private and Family Life",
    "Rights of Way",
    "Roads",
    "Rules for Alteration",
    "Rules for Indemnities",
    "Saint Lucia",
    "Sale of Land",
    "Sale of Property",
    "Schedule 12",
    "Schedule 3",
    "Schedule 6",
    "School Fees",
    "Scotland",
    "Secure Tenancies",
    "Security of Tenure",
    "Service Charges",
    "Service Occupancies",
    "Servient Tenement",
    "Settlements",
    "Severance",
    "Share Ownership",
    "Shareholders' Agreements",
    "Shares",
    "Sheep",
    "Signatures",
    "Social Security Other Related Subjects: Human Rights",
    "Solicitors",
    "Special Educational Needs",
    "Specific Performance",
    "Spouses",
    "Squatters",
    "Squatting",
    "Squatting In Residential Buildings",
    "Standard of Proof",
    "Statutory Demands",
    "Statutory Rights",
    "Statutory Tenancies",
    "Storage",
    "Striking Out",
    "Subtenancies",
    "Succession Other Related Subjects: Equity",
    "Succession Other Related Subjects: Real Property",
    "Sufficiency of Evidence",
    "Sureties",
    "Surety",
    "Surrender",
    "Surveyors",
    "Survivorship",
    "Tenancies",
    "Tenancies In Common",
    "Tenancies at Will",
    "Tenants In Common",
    "Termination",
    "Termination Notices",
    "Time Limits",
    "Title Guarantee",
    "Title to Land",
    "Tolerated Trespass",
    "Torts",
    "Transactions at An Undervalue",
    "Transfer of Land",
    "Transfer of Property In Goods",
    "Travellers",
    "Treasure Trove",
    "Trespass to Land",
    "Trespassers",
    "Trustees' Powers and Duties",
    "Trusts",
    "Trusts For Sale",
    "Trusts Other Related Subjects: Contracts",
    "Trusts Other Related Subjects: Real Property",
    "Trusts of Land",
    "Ultra Vires",
    "Unconscionability",
    "Underleases",
    "Undue Influence",
    "Unfair Dismissal",
    "Unilateral Contracts",
    "Unmarried Couples",
    "Unravelling",
    "User",
    "Uses",
    "Utilities",
    "Validity",
    "Void Contracts",
    "Voluntary Arrangements",
    "Weather",
    "Wills",
    "Women",
    "Yielding of Right"
]"; 

pfl_ = "WwogICAgIjIwMTUvMjAxNiEiLAogICAgIkFwcHJvdmVkIiwKICAgICJCaW5naGFtIiwKICAgICJDcml0aWNpc2VkIiwKICAgICJEZW5uaW5nIiwKICAgICJFc3NlbnRpYWwiLAogICAgIkhhbGUiLAogICAgIkhvZmZtYW5uIiwKICAgICJJbXBvcnRhbnQiLAogICAgIkluZm9ybWF0aXZlIiwKICAgICJLZXkiLAogICAgIk5ldWJlcmdlciIsCiAgICAiT3ZlcnJ1bGVkIiwKICAgICJQZXRlciBHaWJzb24iLAogICAgIlJlY2VudCIsCiAgICAiUmVwZWFsZWQiLAogICAgImFwcGVhbC1vdXRzdGFuZGluZyIKXQ=="; 

ntn_ = '{
    "wl swift investments v combined english stores":"289",
    "wl newlon housing trust v alsulaimen":"302",
    "formality rules for legal property rights":"8",
    "walby v walby":"114",
    "wl oceanic village ltd v united attractions ltd":"292",
    "wl bedson v bedson":"207",
    "platt v crouch":"121",
    "schedule 6 lra 2002":"65",
    "wl wall v collins":"244",
    "land registration  theory":"13",
    "wl jamaica mutual life v hillsborough":"267",
    "wl patel v pirabakaran":"299",
    "wl phipps v pears":"240",
    "s75 lra 1925":"67",
    "wl ks victoria street v house of fraser":"294",
    "laskar v laskar":"82",
    "r square v nissan":"108",
    "wl best v chief land registrar":"154",
    "wl copeland v greenhalf":"238",
    "wl ashburn v arnold":"277",
    "wl ag of hong kong v humphreys estates":"224",
    "case overviews for title guarantee":"129",
    "sood":"44",
    "land registration":"11",
    "overreaching":"43",
    "abbott v abbott":"89",
    "wl harrow lbc v qazi":"311",
    "wl goldberg v edwards":"256",
    "wl horsham properties v beech":"179",
    "city of london building society v flegg":"49",
    "williams v hensman":"94",
    "wl berrisford v mexfield housing corp":"278",
    "kinch v bullard":"92",
    "actual occupation":"40",
    "wl escalus properties v robinson":"298",
    "credit  mercantile v wishart":"56",
    "williams  glyns bank v boland":"50",
    "wl regent oil v gregory":"161",
    "wl four maids v dudley marshall":"170",
    "case overviews for overriding interests":"132",
    "ois at first registration":"37",
    "theory of land registration":"13",
    "wl multiservice bookbinding v mardon":"166",
    "wl hsbc v dyche":"215",
    "wl halifax bs v thomas":"181",
    "lpa misc provisions 1989":"7",
    "wl barrett v morgan":"303",
    "wl phillips v mobil oil":"296",
    "wl whittaker v kinnear":"227",
    "crow v wood":"105",
    "equity v prestridge":"54",
    "guy vs barclays":"34",
    "gould v kemp":"80",
    "schedule 3 lra 2002":"19",
    "wl pye ltd v graham":"308",
    "wl halsall v brizall":"262",
    "wl zarb v parry":"152",
    "wl binions v evans":"235",
    "best v chief land registrar":"75",
    "s58 lra 2002":"15",
    "sovmots v environment secretary":"119",
    "wl davis v smith":"219",
    "wl cukurova finance v alfa telecom":"169",
    "wl facchini v bryson":"279",
    "wl boyer v warbey":"290",
    "overriding interests at first registration":"37",
    "wl the mortgage corporation v shaire and others":"202",
    "circumstances for adverse possession":"64",
    "covenants  overview":"124",
    "copeland v greenhalf":"109",
    "wl giles v tarry":"258",
    "reasonably discoverable":"41",
    "s29 lra 2002":"18",
    "wl iam group v chowdrey":"153",
    "wl kinch v bullard":"217",
    "regency villas":"101",
    "wl city of london corp v fell":"291",
    "pye v graham":"68",
    "fitzwilliam":"28",
    "wl henry v henry":"231",
    "overriding interests  problem questions":"46",
    "schedule 12":"66",
    "fitzwilliam v richall":"28",
    "wl first national securities v heggerty":"216",
    "wl antoniades v villiers":"283",
    "wl mcdonald v mcdonald":"316",
    "formality rules  legal":"8",
    "wl crate v miller":"300",
    "wl keay v morris":"139",
    "chaudhary v yavuz":"57",
    "wl quennell v maltby":"171",
    "wl wright v macadam":"239",
    "joint tenancy and tenancy in common":"76",
    "wl aib finance v debtors":"176",
    "wl chaffe v kingsley":"252",
    "wl swift 1st v chief land registrar":"145",
    "mistakes  dealing with problems":"23",
    "formalities  problem questions":"10",
    "manjang v drameh":"115",
    "property rights  gentle intro":"2",
    "wood v waddington":"122",
    "wl nat west bank v amin":"163",
    "wl gold harp v mcleod":"144",
    "wl wrotham park estate co v park homes":"264",
    "property rights":"4",
    "wl birdlip v hunter":"272",
    "pettitt v pettitt":"84",
    "wl quigley v masterson":"218",
    "cooper v gick":"32",
    "wl walker v burton":"143",
    "regency villas v diamond resorts":"101",
    "red house v catchpole":"70",
    "wl expert clothing service v hillgate house":"297",
    "saeed v plustrado":"47",
    "bachelor v marlowe":"103",
    "lpa 1925 s1":"5",
    "capable of being easement":"95",
    "legal easements as schedule 3 overriding interests":"42",
    "halifax v corbett":"35",
    "roberto mac":"30",
    "schedule 8":"22",
    "wl cook v mortgage business plc":"214",
    "wl taylor fashions v liverpool victoria trustees":"220",
    "wl crago v julian":"275",
    "schedule 8 lra":"22",
    "wl thompson v foy":"146",
    "wl mra engineering ltd v trimester corp":"247",
    "scott v southern pacific mortgages":"48",
    "wl laskar v laskar":"194",
    "fenn tigers case":"112",
    "bormann v griffiths":"120",
    "kernott":"88",
    "wl harris v flower":"257",
    "wl city of london bs v flegg":"140",
    "wl wood v waddington":"255",
    "wl bishop v blake":"178",
    "wright v macadam":"107",
    "wl cherry tree investments v landmain":"142",
    "schedule 4 lra":"21",
    "wl moncrieff v jamieson":"245",
    "sabherwal":"45",
    "begum v issa":"59",
    "wl hounslow lbc v powell":"314",
    "wl burgess v rawnsley":"182",
    "chhokar":"58",
    "wl nat west v ashe":"168",
    "wl re king":"287",
    "wl stafford v lee":"250",
    "patterns of facts in rectification cases":"24",
    "case overviews for land registration":"127",
    "wl edwards v royal bank of scotland":"205",
    "wl lloyds bank v carrick":"159",
    "wl geary v rankine":"197",
    "wl portnip stallion v albert stallion":"229",
    "schedule 1":"37",
    "wl corbett v halifax":"167",
    "gold harp":"26",
    "formality rules for equitable property rights":"9",
    "schedule 3":"19",
    "wl gilbert v spoor":"273",
    "wl bridle v ruby":"259",
    "wl lyus v prowsa developments":"141",
    "wl united bank of kuwait v sahib":"138",
    "wl hsbc v brown":"164",
    "land  contents":"1",
    "wl scott v southern pacific mortgages":"136",
    "conditions for a burden to run":"125",
    "wl downsview nominees ltd v first city corp ltd":"177",
    "wl doherty v birmingham cc":"312",
    "wl javad v aqil":"276",
    "moncreiff v jamieson":"104",
    "s29 lra":"18",
    "wl pettitt v pettitt":"186",
    "wl barca v mears":"203",
    "personal rights":"3",
    "schedule 12 lra 2002":"66",
    "wl gillett v holt":"221",
    "insurance principle":"14",
    "wl fowler v baron":"193",
    "wl morrells v oxford united fc":"263",
    "wl westminster cc v clarke":"284",
    "freehold covenants  benefit":"126",
    "chhokar v chhokar":"58",
    "wl tulk v moxhay":"261",
    "schedule 4 lra 2002":"21",
    "wl palk v mortgage services":"172",
    "special priority rule":"16",
    "rpis":"60",
    "case overviews for mistakes on the register":"128",
    "wl nickerson v barraclough":"248",
    "title guarantee":"14",
    "s38 lra":"61",
    "benefit":"126",
    "overriding interests  overview":"36",
    "interests of persons in actual occupation":"40",
    "wl ashburn anstalt v arnold":"236",
    "case overviews for mortgages":"130",
    "zarb v parry":"74",
    "wl crest nicholson v mcallister":"269",
    "wl shaw v applegate":"274",
    "wl midland bank trust co v green":"156",
    "wl federated homes v mill lodge":"265",
    "wl yaxley v gotts":"225",
    "tenancy in common  recognising":"77",
    "wl jones v challenger":"206",
    "wl goodman v gallant":"185",
    "burden":"125",
    "schedule 4":"21",
    "swift 1st v chief land registrar":"29",
    "gold harp v macleod":"26",
    "fenn tigers":"112",
    "wl batchelor v marlow":"241",
    "s27 lra":"61",
    "curley v parkes":"83",
    "wl state bank of india v sood":"211",
    "antionades v villiers":"81",
    "canham v fisk":"98",
    "wl lloyds bank v rosset":"189",
    "formalities":"6",
    "wl baxter v mannion":"151",
    "wheeldon v burrows":"123",
    "capehorn v harris":"90",
    "wl ghazaani v rowshan":"228",
    "link lending v bustard":"52",
    "wl hua chiao v chia chua":"288",
    "rbs v etridge":"53",
    "wl idc v clark":"237",
    "wl grand junction co v bates":"160",
    "baxter v mannion":"31",
    "wl sava v ss global ltd":"310",
    "mistakes on the register and indemnities":"20",
    "adverse possession":"62",
    "wl williams v williams":"208",
    "wong v beaumont":"117",
    "flegg":"49",
    "schedule 3 lra":"19",
    "schedule 6 lra":"65",
    "thompson v foy":"51",
    "wl vridi v chana":"246",
    "wl mulvaney v gough":"243",
    "overriding interests at transfer":"38",
    "birmingham midshires morgages v sabherwal":"45",
    "mistakes and indemnities":"20",
    "wl halifax v popeck":"149",
    "cardwell v walker":"106",
    "stack v dowden":"87",
    "case overviews for coownership":"134",
    "hill v tupper":"99",
    "registered protected interests":"60",
    "rosset":"86",
    "ois at transfer":"38",
    "equity  home loans v prestridge":"54",
    "wl street v mountford":"281",
    "conditions for averse possession":"63",
    "sovmots":"119",
    "pye v uk":"69",
    "easements":"95",
    "walker v burton":"25",
    "wl abbott v abbott":"192",
    "emcer v miller":"110",
    "williams v mitchell":"33",
    "wl davies v directloans ltd":"165",
    "wl firstpost homes v johnson":"137",
    "legal leases as schedule 3 overriding interests":"39",
    "hounslow v minchinton":"72",
    "electronic conveyancing":"12",
    "wl ag securities v vaughan":"282",
    "wl groveholt ltd v hughes":"150",
    "legal leases as ois":"39",
    "wl roplaigeach v barclays bank":"173",
    "swift 1st":"29",
    "wl city of london bs v flegg hl":"212",
    "wl jones v kernott":"196",
    "wl donovan v rana":"253",
    "wl wong v beaumont property trust":"251",
    "wl errington v errington":"234",
    "wl reeves v sandhu":"295",
    "conditions for a benefit to run":"126",
    "wl kay v lambeth lbc":"286",
    "wl wandsworth lbc v dixon":"301",
    "wl thorner v majors":"222",
    "land":"0",
    "equitable shares of coownership":"78",
    "malory":"27",
    "long v gowlett":"118",
    "phipps v pears":"113",
    "barnes v phillips":"91",
    "wl manchester cc v pinnock":"313",
    "wl abbey national bs v cann":"213",
    "abbey national v cann":"55",
    "wl fitzkriston v panayi":"148",
    "wl cuckmere brick co v mutual finance":"175",
    "wl link lending v bustard":"147",
    "wl ofulue v bossert":"309",
    "wl malik v fassenfelt":"315",
    "easements  creation":"96",
    "wl walby v walby":"249",
    "basic priority rule":"16",
    "wl capehorn v harris":"200",
    "wl stack v dowden":"191",
    "wl grant v edwards":"188",
    "s58 lra":"15",
    "wl curley v parkes":"190",
    "wl clarke v corless":"223",
    "wl hounslow lbc v minchinton":"306",
    "bustard":"52",
    "wl chaudhary v chaudhary":"199",
    "wl cf vallee v birchwood":"230",
    "wl colchester bc v smith":"305",
    "lambeth v ellis":"73",
    "wl huckvale v aegean hotels":"260",
    "wl ives v high":"157",
    "gissing v gissing":"85",
    "jones v kernott":"88",
    "case overviews for adverse possession":"133",
    "severance":"79",
    "s28 lra":"17",
    "wl bucks cc v moran":"304",
    "freehold covenants  burden":"125",
    "tara hotels v kensington":"102",
    "burgess v rawnsly":"93",
    "stack":"87",
    "wl in re pavlou":"210",
    "wl hollington bros ltd v rhodes":"155",
    "lpa 1989":"7",
    "wl good harvest v centaur":"293",
    "wl barclay v barclay":"209",
    "wl roake v chadha":"266",
    "wl national provincial bank v ainsworth":"232",
    "wl emile elias v pine groves":"270",
    "priority rules":"16",
    "moody v steggles":"100",
    "wl meah v ge money":"180",
    "wl norris v checksfield":"280",
    "malory v cheshire":"27",
    "schedule 8 lra 2002":"22",
    "wl st marleybone property co v fairweather":"307",
    "wl wheeler v jj saunders":"254",
    "stafford v lee":"116",
    "schedule 6":"65",
    "wl wilkinson v kerdene":"271",
    "bucks v moran":"71",
    "knights construction v roberto mac":"30",
    "wl central midlands estates v leicester dyers":"242",
    "s27 and s38 lra 2002":"61",
    "state bank of india v sood":"44",
    "wl nat west bank v morgan":"162",
    "wl gissing v gissing":"187",
    "wl mcdowall v hirschfield lipson":"184",
    "case overviews for easements":"135",
    "link lending":"52",
    "wl herbert v doyle":"226",
    "wl harris v goddard":"183",
    "wl rhone v stephens":"268",
    "licenses":"3",
    "case overviews for overreaching":"131",
    "wl kingsworth v tizzard":"158",
    "wl gardner":"201",
    "wl thakker v northern rock plc":"174",
    "boland":"50",
    "wl gray v taylor":"285",
    "wl nicholls v lan":"204",
    "s28 lra 2002":"17",
    "schedule 32 actual occupation":"41",
    "wl cps v piper":"198",
    "wl hapeshi v allnatt":"195",
    "formality rules  equitable":"9",
    "lloyds v rosset":"86",
    "schedule 12 lra":"66",
    "wl wintergarden v millennium productions":"233",
    "s1 lpa 1925":"5",
    "kettel v bloomfold":"111"
}';

subject = 'land';

enableTests = true;

defcols = '4';

currentTexture = 'img/textures/cream-paper.png';

cds_ = " [ {
    "TYPE": "Help",
    "NUMBER": "0",
    "NAME": "Land",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Filter</span></span><br>Enter names of <span class=\"bd\">cases</span>, <span class=\"bd\">categories</span>, <span class=\"bd\">concepts</span>, or free text in quotes. These broaden out what&#8217;s displayed. By contrast, <span class=\"bd\">tags</span>, <span class=\"bd\">courts</span> and <span class=\"bd\">card types</span> all whittle down what you see.",
        "<span class=\"ud\"><span class=\"bd\">Config &amp; </span></span><br>The options button (top left) brings up a panel with options to fiddle with. They, like the cards you&#8217;re looking at, are remembered when you come back a day later. But if something fouls up, a discreet link on the bottom left lets you <span class=\"bd\">reset everything</span>.",
        "<span class=\"ud\"><span class=\"bd\">iPhones</span></span><br>Use on iPhones is rendered more biddable and less cluttered by pressing the &#8216;share&#8217; button (bottom centre) in safari, then <span class=\"bd\">add to home screen</span>.",
        "<span class=\"ud\"><span class=\"bd\">Tags</span></span><br>These, in the panel on the right, can be dragged onto or away from cards, or into the filter thingummy up top. You can also make your own.",
        "<span class=\"ud\"><span class=\"bd\">Links</span></span><br>Links to another cards bring them up, jiggling around and fading out unless you click/press to fasten them down. Why? No idea. <span class=\"bd\">Case cards</span> should have <span class=\"bd\">On Westlaw</span> or <span class=\"bd\">On curia.eu</span> at the top left, which should take you straight to the relevant material on those sites. Other links to, e.g., legislation.gov.uk, or wikipedia, if the entry was particularly helpful, will show up when appropriate or when some inexplicable event caused my level of interest to rise above the endlessly grey and listless dysphoria constituting my mental background noise.",
        "<span class=\"ud\"><span class=\"bd\">Notes</span></span>",
        "<ul><li><span class=\"nl\"><span class=\"it\"><span class=\"bd\">Note well</span></span> &mdash; this was chucked together <span class=\"it\">in a hurry</span> so def. has bugs, glitches, half-rephrased sentences in the cards, etc. And it&#8217;s meant for the <span class=\"bd\">latest version of Safari or Chrome</span> on <span class=\"bd\">Mac</span>. What, you&#8217;re a law student and you don&#8217;t have a Mac?</span></li></ul>"
    ],
    "FLAGS": [
        "2015/2016!"
    ],
    "SPECIAL": "<span class=\"bd\">Hello!</span><br>This is a collection of flashcards for the City GDL. It contains attempts to explain <span class=\"lnk typln\">Concept</span><span class=\"it\">s</span>, cards containing <span class=\"lnk typln\">Case Overviews</span> for a given topic, containing <span class=\"lnk typln\">Statute</span><span class=\"it\">s</span>, and making up the bulk of the material &mdash; <span class=\"lnk typln\">Case</span><span class=\"it\">s</span>. <br><br>Cases can be made less word-heavy by fiddling around in the <span><i class=\"material-icons\" style=\"font-size: 80% !important;\">menu</i></span> options. There you can also change to a <span class=\"sansfont\">sans</span> typeface when Garamond starts to make you want to rip out your kidneys and stuff them into your eye sockets. If the wacky cards-in-a-pile schtick gets up your nose, adjust the <span class=\"it\">messiness</span>. Plus other stuff. <br><br>There are tests. Arguably a bit gimmicky, they&#8217;re by means of multiple-guessing the ratio belonging to a case, or vice-versa. You can also do this by typing in the case name for a ratio <span class=\"it\">without</span> seeing any choices. <br><br>Flipping cards back and forth, moving to the next or fetching back the last, is a matter of the <span class=\"bd\">left</span> and <span class=\"bd\">right</span> keys. Or, on iOS devices, a matter of greasing up the screen by <span class=\"bd\">swiping</span> left or right.",
    "YEAR": "2016",
    "CATEGORIES": [
        "City GDL Land Flashcards"
    ],
    "CATEGORY": "City GDL Land Flashcards"
},
{
    "SPECIAL": "<span class=\"bd\">Term 1</span> &mdash; <span class=\"lnk catln\">Definitions</span> &mdash; <span class=\"lnk catln\">Property Rights</span> &mdash; <span class=\"lnk catln\">Land Registration</span> &mdash; <span class=\"lnk catln\">Overriding Interests</span> &mdash; ... (more to follow) <br><br><span class=\"bd\">Term 2</span> &mdash; <span class=\"lnk catln\">Co-ownership</span> &mdash; <span class=\"lnk catln\">Proprietary Estoppel</span> &mdash; <span class=\"lnk catln\">Easements</span> &mdash; <span class=\"lnk catln\">Covenants</span>",
    "TYPE": "Table of Contents",
    "NUMBER": "1",
    "NAME": "Land - Contents",
    "CATEGORIES": [
        "Click to display sets of cards for..."
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Term 1</span></span><br><span class=\"lnk catln\">Definitions</span> &mdash; <span class=\"lnk catln\">Property Rights</span> &mdash; <span class=\"lnk catln\">Land Registration</span> &mdash; <span class=\"lnk catln\">Overriding Interests</span> &mdash; ... (more to follow)",
        "<span class=\"bd\">Term 2</span><br><span class=\"lnk catln\">Co-ownership</span> &mdash; <span class=\"lnk catln\">Proprietary Estoppel</span> &mdash; <span class=\"lnk catln\">Easements</span> &mdash; <span class=\"lnk catln\">Covenants</span>"
    ],
    "CATEGORY": "Click to display sets of cards for..."
},
{
    "TYPE": "Concept",
    "NUMBER": "2",
    "RELATED": [
        "Personal Rights",
        "Land Registration",
        "Joint Tenancy and Tenancy in Common",
        "Patterns of Facts in Rectification Cases",
        "Conditions for Averse Possession",
        "Formalities",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Title Guarantee",
        "Formality Rules - Equitable",
        "Formality Rules - Legal",
        "Electronic Conveyancing",
        "Equitable Shares of Co-ownership"
    ],
    "NAME": "Property Rights - Gentle Intro",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span><br><span class=\"it\">What exactly does it mean to <span class=\"bd\">own</span> a piece of land, or indeed the buildings on it? And what do we even mean by <span class=\"bd\">land</span>? And why did I get so long-winded, here, when this is supposed to be flash-cards for cramming?</span>",
        "<ul><li><span class=\"nl\">Everything <span class=\"bd\">physical</span> about it. Also the <span class=\"lnk caseln\">Property Rights</span> in it, which may or may not be tangible.</span></li><li><span class=\"nl\">When someone &#8216;owns&#8217; land, they have <span class=\"bd\">an estate in land</span>.</span></li><li><span class=\"nl\">Cf. merely <span class=\"lnk caseln\">Personal Rights</span>, which are <span class=\"bd\">incapable of biting the land</span>.</span></li></ul>",
        "There are two kinds of property right. <span class=\"bd\">Estates in land</span> and <span class=\"bd\">interests in land</span>. These are often held by people other thanto belong to someone other than the holder of the estate.",
        "<span class=\"ud\"><span class=\"bd\">Estates in Land</span></span><br><span class=\"bd\">Freeholds</span> and <span class=\"bd\">leaseholds</span>. &#8216;ownership&#8217; and &#8216;rental&#8217;.",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Freeholds</span>, or <span class=\"it\">fees simple absolute in possession</span>, last for your life and that of your estate. Die intestate with no next-of-kin, and the queen gets the lot.</span><ul><li><span class=\"nl\">They are <span class=\"bd\">freely alienable</span> &mdash; they can be gifted or sold.</span></li><li><span class=\"nl\">Transfer by <span class=\"bd\">deed</span>, or since 1925, <span class=\"lnk caseln\">registering</span> the conveyance, makes a freehold <span class=\"bd\">legal</span>. A screwed-up deed, or a failure to register, may mean the freehold is <span class=\"bd\">equitable</span>.</span></li><li><span class=\"nl\">There are no modern circumstances in which a freehold can be taken away, aside from compulsory purchase.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Leaseholds</span>, or <span class=\"it\">fees simple in term of years absolute</span> (called that even if the term is only a week) are estates explicitly limited in time.</span><ul><li><span class=\"nl\">Rent was traditionally due on the <span class=\"bd\">quarter days</span> &mdash; 29th September, 24th December, 25th March and 22nd June. Commercial rent is often still due on these days.</span></li><li><span class=\"nl\">A peppercorn rent (a nugatory amount) did not enter currency as a metaphor, but as a reality. Just as saffron and salt were used as money, and people buried their parmesan in the fire of 1666, people seem to have an inbuilt tendency to use condiments as money. <span class=\"it\">Discuss</span>. There must be at least a hundred thousand Herlingesque words in that.</span></li></ul></ol>",
        "The arrangement of land ownership in this country is still more-or-less explicitly feudal:",
        "<ul><li><span class=\"nl\"><span class=\"bd\">R > Freehold > Leasehold > Sublease</span></span></li></ul>",
        "The crown is the <span class=\"it\">owner</span>. The other three are merely <span class=\"it\">estates in the land</span>. N.B., a leasehold can derive directly from the crown, and there can be land without any estates &mdash; there are still surprisingly large chunks of the country lacking any estate.",
        "<span class=\"ud\"><span class=\"bd\">Interests in Land</span></span><br>More precisely, interests in <span class=\"it\">estates of</span> land. These might well be in someone <span class=\"it\">else&#8217;s</span> land. They are bona fide <span class=\"bd\">proprietary rights</span>, by which the <span class=\"it\">land</span>, not just the estate-holder, is bound.",
        "The main ones for City GDL purposes are &mdash; <span class=\"lnk caseln\">Easements</span>, <span class=\"lnk caseln\">Covenants</span>, <span class=\"lnk caseln\">Mortgages</span> and <span class=\"lnk caseln\">Proprietary Estoppel</span>. Plus a load of archaisms expressed half in medieval French, half in bad Latin. The <span class=\"lnk caseln\">LPA 1925</span> and some textbooks call them <span class=\"bd\">estates in land</span>. But don&#8217;t do that, as you don&#8217;t want to confuse the poor poppet examiner. At least, not if it&#8217;s Martin Dixon et al."
    ],
    "#/->-X": "owns (has a freehold of) some land. A is a bank with a mortgage on the land, B has an option to purchase the land (a #property developer building up a landbank, for instance); C has a right of way over the land, and D has a right to let #children play on the land. All of these rights were accorded to A, B, C and D.",
    "#NAME": "Interests of People in Estates",
    "#SUMMARY": "<span class=\"ud\"><span class=\"bd\">Terminology</span></span>",
    "#TYPE": "Concept",
    "CATEGORIES": [
        "Definitions"
    ],
    "CATEGORY": "Definitions",
    "#/->-A,": "B, C and D all have <span class=\"bd\">interests</span>, albeit that some of the textbooks, plus the <span class=\"lnk caseln\">LPA 1925</span>, call them <span class=\"bd\">estates</span>. But #don&#8217;t confuse the marker by using that term."
},
{
    "TYPE": "Concept",
    "NUMBER": "3",
    "RELATED": [
        "Property Rights - Gentle Intro",
        "Severance",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Mistakes on the Register and Indemnities",
        "Overriding Interests at First Registration",
        "Overriding Interests at Transfer",
        "Freehold Covenants - Benefit",
        "Circumstances for Adverse Possession",
        "Formality Rules - Legal",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Land Registration - Theory",
        "Overreaching"
    ],
    "NAME": "Personal Rights",
    "CATEGORIES": [
        "Definitions"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span><br>Generically referred to as <span class=\"it\">licenses</span>, these are emphatically <span class=\"it\">not</span> proprietary rights, but personal permissions to do something on land, such, for instance, as a permission to come into a cinema and watch a film, or go into A130 and be a little seduced by Martin Dixon&#8217;s devil-may-care way of taking you through land law.",
        "Licenses are not that readily amenable to taxonomy, because they encompass essentially <span class=\"it\">everything</span> that can be done on land. The frontier between them and proprietary rights is marked by ambiguity, contention and flux. Parking a car used uncontroversially to be a license but has, for the last 15 years, been established by <span class=\"lnk caseln\">Proprietary Estoppel</span> potentially to be a property right.",
        "Before <span class=\"lnk caseln\">Street v Mountford</span>, licenses accounted for the legal character of a large proportion of short-term domestic accommodation. And, says MD, deciding they were in fact <span class=\"bd\">leases</span> buggered up the rental sector in this country for good.",
        "<span class=\"ud\"><span class=\"bd\">Telling Personal from Proprietary</span></span><br>This is <span class=\"bd\">fundamentally examinable</span>. There are two tests, to be applied in this order:",
        "<ol><li><span class=\"nl\"><span class=\"bd\">What does the right entail?</span> (What is its nature? What does it provide for?)</span><ul><li><span class=\"nl\">If it&#8217;s <span class=\"bd\">personal</span> by nature, stop &mdash; it&#8217;s a <span class=\"bd\">merely personal right</span>.</span></li></ul><li><span class=\"nl\">If its character seems <span class=\"bd\">proprietary</span>, was it created with the formal statutory rules?</span><ul><li><span class=\"nl\">If not, it&#8217;s far harder for it to be proprietary.</span></li></ul></ol>",
        "Aside from which:",
        "<ul><li><span class=\"nl\"><span class=\"bd\">Go to the cases</span>. This is a positivist subject: its landscape has been made by cases. MD avers that this really means it&#8217;s <span class=\"it\">an intellectually vacuous subject</span>. Whatever. One persuasive case might be contradicted by another persuasive case, so be <span class=\"bd\">influenced</span> and <span class=\"bd\">circumspect</span> rather than <span class=\"bd\">bound</span> and <span class=\"bd\">literalist</span>.</span><ul><li><span class=\"nl\">I.e., have a healthy appetite for answering problems questions <span class=\"bd\">and</span> essays with <span class=\"bd\">cases</span>, in order to avoid the ignominy of 2:ii-level marks.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Look at the definition</span>. This often comes from a case:</span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Lease</span> or <span class=\"lnk caseln\">License</span>? <span class=\"lnk caseln\">Street v Mountford</span>.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Easement</span> or license? <span class=\"lnk caseln\">Re Ellenborough Park</span>.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Mortgage</span> or personal debt? <span class=\"lnk caseln\">Stantley v Wilde</span>.</span></li></ul></ul>",
        "In <span class=\"lnk caseln\">National Provincial Bank v Ainsworth</span>, Lord Wilberforce had a stab at defining in the abstract what a property right is. He held it was <span class=\"bd\">identifiable</span>, <span class=\"bd\">certain</span> and <span class=\"bd\">related to the land</span>. This case was the <span class=\"bd\">deserted wife&#8217;s equity</span>, and ought not judged by the merit of its obvious moral wonkiness: the important thing is its attempt, by a learned property lawyer, to define property rights.",
        "Property rights tend to be <span class=\"bd\">tidy</span>, <span class=\"bd\">forensic</span> and <span class=\"bd\">not open-ended</span>."
    ],
    "CATEGORY": "Definitions",
    "AKA": "Licenses"
},
{
    "TYPE": "Concept",
    "NUMBER": "4",
    "RELATED": [
        "Formality Rules - Legal",
        "Formality Rules - Equitable",
        "Formalities",
        "Covenants - Overview",
        "Freehold Covenants - Benefit",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Land Registration - Theory",
        "Conditions for Averse Possession",
        "Electronic Conveyancing",
        "Registered Protected Interests",
        "Title Guarantee",
        "Priority Rules"
    ],
    "NAME": "Property Rights",
    "CATEGORIES": [
        "Property Rights",
        "Formalities"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span><br>The foundation-stone of modern property law is <span class=\"lnk caseln\">S1 LPA 1925</span>.",
        "<ul><li><span class=\"nl\">It lists property rights that <span class=\"bd\">may</span> be legal &mdash; <span class=\"lnk caseln\">Freeholds</span>, <span class=\"lnk caseln\">Leaseholds</span>, <span class=\"lnk caseln\">Mortgages</span>, <span class=\"lnk caseln\">Easements</span>, and some other non-examined entities like profits and rent-charges.</span></li><li><span class=\"nl\">These are the <span class=\"bd\">only</span>  property rights enforceable at common law.</span></li><li><span class=\"nl\"><span class=\"bd\">Every other</span> type must therefore be <span class=\"bd\">equitable</span> &mdash; <span class=\"lnk caseln\">Options</span>, <span class=\"lnk caseln\">Covenants</span>, preemptions, <span class=\"lnk caseln\">Estoppel</span>, <span class=\"lnk caseln\">Equitable Co-ownership</span>, and whatever else the courts hold to be an (equitable) property right.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Requirements</span></span><br>Property rights need <span class=\"lnk caseln\">Formalities</span> to exist. These boil down to the need for a <span class=\"bd\">deed</span> <span class=\"bd\"><span class=\"it\">plus</span></span> <span class=\"bd\">registration</span> (for a legal right) and <span class=\"bd\">signed writing</span> for equitable rights, usually, but",
        "<span class=\"ud\"><span class=\"bd\">Legal v Equitable</span></span><br>Before 1925, this mattered. Now, the only noticeable difference is for remedies.",
        "<ul><li><span class=\"nl\">A cause of action for a <span class=\"bd\">legal easement</span> is remedied by damages <span class=\"bd\">by right</span>. But for an <span class=\"bd\">equitable easement, the court can decide </span>not* to award.</span></li><li><span class=\"nl\">A legal mortgage gives the mortgagee a right to take possession of the land <span class=\"bd\">without</span> a court order. An equitable mortgage, by contrast, means they need a judge&#8217;s say-so.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">See also</span></span>"
    ],
    "CATEGORY": "Property Rights &mdash; Formalities"
},
{
    "TYPE": "Statute",
    "NUMBER": "5",
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/Geo5/15-16/20/section/1"
    ],
    "RELATED": [
        "Schedule 6 LRA 2002",
        "Schedule 8 LRA 2002",
        "S58 LRA 2002",
        "S28 LRA 2002",
        "Schedule 3 LRA 2002",
        "Schedule 12 LRA 2002",
        "S27 and S38 LRA 2002",
        "Schedule 4 LRA 2002",
        "S29 LRA 2002",
        "S75 LRA 1925"
    ],
    "NAME": "S1 LPA 1925",
    "CATEGORIES": [
        "Property Rights",
        "Formalities"
    ],
    "SUMMARY": [
        "This fundamentally significant provision lists the things which can be <span class=\"bd\">Legal Property Rights</span>.",
        "<span class=\"ud\"><span class=\"bd\">Text</span></span><br><span class=\"bd\">Legal estates and equitable interests.</span>",
        "<ol><li><span class=\"nl\">The only estates in land which are capable of subsisting or of being conveyed or created at law are\u2014-</span><ol><li><span class=\"nl\">An estate in fee simple absolute in possession;</span></li><li><span class=\"nl\">A term of years absolute.</span></li></ol><li><span class=\"nl\">The only interests or charges in or over land which are capable of subsisting or of being conveyed or created at law are\u2014-</span><ol><li><span class=\"nl\">An easement, right, or privilege in or over land for an interest equivalent to an estate in fee simple absolute in possession or a term of years absolute;</span></li><li><span class=\"nl\">A rentcharge in possession issuing out of or charged on land being either perpetual or for a term of years absolute;</span></li><li><span class=\"nl\">A charge by way of legal mortgage;</span></li><li><span class=\"nl\">and any other similar charge on land which is not created by an instrument;</span></li><li><span class=\"nl\">Rights of entry exercisable over or in respect of a legal term of years absolute, or annexed, for any purpose, to a legal rentcharge.</span></li></ol><li><span class=\"nl\">All other estates, interests, and charges in or over land take effect as equitable interests.</span></li><li><span class=\"nl\">The estates, interests, and charges which under this section are authorised to subsist or to be conveyed or created at law are (when subsisting or conveyed or created at law) in this Act referred to as \u201clegal estates,\u201d and have the same incidents as legal estates subsisting at the commencement of this Act; and the owner of a legal estate is referred to as \u201can estate owner\u201d and his legal estate is referred to as his estate.</span></li><li><span class=\"nl\">A legal estate may subsist concurrently with or subject to any other legal estate in the same land in like manner as it could have done before the commencement of this Act.</span></li><li><span class=\"nl\">A legal estate is not capable of subsisting or of being created in an undivided share in land or of being held by an infant.</span></li><li><span class=\"nl\">Every power of appointment over, or power to convey or charge land or any interest therein, whether created by a statute or other instrument or implied by law, and whether created before or after the commencement of this Act (not being a power vested in a legal mortgagee or an estate owner in right of his estate and exercisable by him or by another person in his name and on his behalf), operates only in equity.</span></li><li><span class=\"nl\">Estates, interests, and charges in or over land which are not legal estates are in this Act referred to as \u201cequitable interests,\u201d and powers which by this Act are to operate in equity only are in this Act referred to as \u201cequitable powers.\u201d</span></li><li><span class=\"nl\">The provisions in any statute or other instrument requiring land to be conveyed to uses shall take effect as directions that the land shall (subject to creating or reserving thereout any legal estate authorised by this Act which may be required) be conveyed to a person of full age upon the requisite trusts.</span></li><li><span class=\"nl\">The repeal of the Statute of Uses (as amended) does not affect the operation thereof in regard to dealings taking effect before the commencement of this Act.</span></li></ol>"
    ],
    "CATEGORY": "Property Rights &mdash; Formalities",
    "AKA": "LPA 1925 S1"
},
{
    "TYPE": "Concept",
    "NUMBER": "6",
    "RELATED": [
        "Formality Rules - Equitable",
        "Formality Rules - Legal",
        "Property Rights",
        "Interests of Persons in Actual Occupation",
        "Freehold Covenants - Benefit",
        "Land Registration",
        "Easements - Creation",
        "Land Registration - Theory",
        "Conditions for Averse Possession",
        "Joint Tenancy and Tenancy in Common",
        "Patterns of Facts in Rectification Cases",
        "Overriding Interests at Transfer"
    ],
    "NAME": "Formalities",
    "CATEGORIES": [
        "Property Rights",
        "Formalities"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span><br>Formalities exist because, as MD puts it, &#8216;who gives a <span class=\"it\">monkey&#8217;s</span> <span class=\"bd\">why</span> they exist?&#8217; By which it should be understood that they <span class=\"bd\">(i)</span> exist, and that <span class=\"bd\">(ii)</span> the arbitrariness of their rules may be, in fact, <span class=\"it\">arbitrariness</span>.",
        "They provide &mdash;",
        "<ul><li><span class=\"nl\"><span class=\"bd\">Certainty</span>. The historical tendency is towards <span class=\"it\">more</span> formality. For an origin, look to the <span class=\"lnk caseln\">Statute of Frauds 1677</span>, material from which is to be detected in the modern regime given by the <span class=\"lnk caseln\">LPA 1925</span>, <span class=\"lnk caseln\">LPA (Misc Provisions) 1989</span> and the <span class=\"lnk caseln\">LRA 2002</span>.</span></li><li><span class=\"nl\">the frontier between <span class=\"bd\">legal</span> and <span class=\"bd\">equitable</span> property rights. This is <span class=\"it\">not</span> the frontier between <span class=\"bd\">strong</span> and <span class=\"bd\">weak</span> property rights. Before 1925, the distinction was crucial, but as of May 2016, most of the the distinction has evaporated away from the difference it once represented.</span></li></ul>",
        "<span class=\"lnk caseln\">LRA 2002</span> attempted, by its introduction of <span class=\"lnk caseln\">Electronic Conveyancing</span>, to do away with the need for formalities. But be doubtful in the face of bold assertions that e-conveyancing is the revolutionary future, and cite the 6-fold increase in fraud that gleefully met the implementation of e-conveyancing in New Zealand.",
        "<span class=\"ud\"><span class=\"bd\">Rules</span></span><br>There are <span class=\"lnk caseln\">Formality Rules for Legal Property Rights</span> and <span class=\"lnk caseln\">Formality Rules for Equitable Property Rights</span>. At minimum, they require a <span class=\"bd\">writing</span>, although there are exceptions in both cases."
    ],
    "CATEGORY": "Property Rights &mdash; Formalities"
},
{
    "TYPE": "Statute",
    "NUMBER": "7",
    "NAME": "LPA (Misc Provisions) 1989",
    "SUMMARY": [
        "<span class=\"bd\">Blackstone&#8217;s</span> Property Law 2015-2016 &mdash; <span class=\"bd\">p.235</span>",
        "<span class=\"ud\"><span class=\"bd\">Text</span></span>",
        "<span class=\"bd\">S1 &mdash; Deeds and their execution</span>",
        "<ol><li style=\"counter-reset: item 1;\"><span class=\"nl\">An instrument shall not be a deed unless\u2014</span><ol><li><span class=\"nl\">it makes it clear on its face that it is intended to be a deed by the person making it or, as the case may be, by the parties to it (whether by describing itself as a deed or expressing itself to be executed or signed as a deed or otherwise); and</span></li><li><span class=\"nl\">it is validly executed as a deed by that person or, as the case may be, one or more of those parties.</span></li></ol></ol>"
    ],
    "AKA": "LPA 1989"
},
{
    "TYPE": "Concept",
    "NUMBER": "8",
    "RELATED": [
        "Formality Rules - Equitable",
        "Formalities",
        "Property Rights",
        "Priority Rules",
        "Registered Protected Interests",
        "Overriding Interests - Overview",
        "Property Rights - Gentle Intro",
        "Overreaching",
        "Title Guarantee",
        "Tenancy in Common - Recognising",
        "Personal Rights",
        "Patterns of Facts in Rectification Cases"
    ],
    "NAME": "Formality Rules - Legal",
    "CATEGORIES": [
        "Property Rights",
        "Formalities"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Overview</span></span><br>A property right is legal if it&#8217;s:<br>&emsp;&emsp;1. <span class=\"bd\">listed in <span class=\"lnk caseln\">S1 LPA</span></span> &mdash; 2. <span class=\"bd\">established by deed</span> &mdash; 3. <span class=\"bd\">registered</span> &mdash;  4. <span class=\"bd\">not an exception</span>.",
        "<span class=\"ud\"><span class=\"bd\">Detail</span></span>",
        "<ol><li style=\"counter-reset: item 1;\"><span class=\"nl\">Legal property rights must be established by <span class=\"bd\">deed</span> (a document declaring itself to be a deed, signed with a single witness &mdash; S1(3) <span class=\"lnk caseln\">LPA 1989</span>).</span></li><li><span class=\"nl\">In <span class=\"it\">most</span> situations, the property right arises <span class=\"it\">by registration of the deed</span> &mdash; <span class=\"lnk caseln\">S58 LRA</span>.</span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Freeholds</span>, <span class=\"lnk caseln\">Mortgages</span>, <span class=\"lnk caseln\">Easements</span>, <span class=\"lnk caseln\">Leases over 7 Years</span>, plus profits and rent-charges.</span></li></ul></ol>",
        "Fulfilling these requirements gives you a <span class=\"bd\">registered disposition</span>.",
        "<ul><li><span class=\"nl\">In default of which (usually because of absence/failure of the deed), the <span class=\"lnk caseln\">Formality Rules - Equitable</span> may still be fulfilled.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Exceptions</span></span>",
        "<ol><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Short leases</span></span> &mdash; <span class=\"lnk caseln\">S52 LPA</span>, <span class=\"lnk caseln\">S54 LPA</span>.</span><ul><li><span class=\"nl\">Short means <span class=\"bd\">three years or less</span>.</span></li><li><span class=\"nl\">Can be purely verbal, or, by reference to the parties&#8217; conduct, an <span class=\"bd\">implied periodic lease</span>.</span></li><li><span class=\"nl\">Rent paid every month (at a term, for exclusive occupation, naturally) is this, at rock bottom. <span class=\"lnk caseln\">Prudential Assurance v LRB</span>.</span></li><li><span class=\"nl\">N.B., means, nevertheless, being booted out on a month&#8217;s notice.</span></li></ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Adverse Possession</span></span></span><ul><li><span class=\"nl\">Control over someone&#8217;s land for a minimum period gives a copper-bottomed legal title to it.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Prescription</span></span><ul><li><span class=\"nl\">A little like <span class=\"lnk caseln\">adverse possession</span>, this explains paths closed for one day a year to prevent prescriptive rights arising.</span></li></ul></ol>"
    ],
    "CATEGORY": "Property Rights &mdash; Formalities",
    "AKA": "Formality Rules for Legal Property Rights"
},
{
    "TYPE": "Concept",
    "NUMBER": "9",
    "RELATED": [
        "Formalities",
        "Formality Rules - Legal",
        "Property Rights",
        "Freehold Covenants - Benefit",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Covenants - Overview",
        "Schedule 3(2): Actual Occupation",
        "Equitable Shares of Co-ownership",
        "Registered Protected Interests",
        "Mistakes on the Register and Indemnities",
        "Patterns of Facts in Rectification Cases",
        "Overriding Interests at First Registration"
    ],
    "NAME": "Formality Rules - Equitable",
    "CATEGORIES": [
        "Property Rights",
        "Formalities",
        "Equitable Rights"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Rules</span></span>",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Signed writing</span> within S2 <span class=\"lnk caseln\">LPA 1989</span>, which must contain all the terms and be signed by both parties.</span></li><li><span class=\"nl\"><span class=\"bd\">A trust of land</span>, although by S58 <span class=\"lnk caseln\">LPA 1989</span>, this must be established in writing.</span></li></ol>",
        "<span class=\"ud\"><span class=\"bd\">Exceptions</span></span>",
        "<ul><li><span class=\"nl\"><span class=\"lnk caseln\">Proprietary Estoppel</span>, in which assurance, reliance, detriment <span class=\"bd\">and unconscionability</span> (which is sometimes forgotten, and which is emphatically <span class=\"bd\">not</span> the same as <span class=\"bd\">unfairness</span>) can be ground up and fed by the courts into the sausage-skin of a <span class=\"it\">crystalized property right</span>.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Resulting Trusts</span> and <span class=\"lnk caseln\">Constructive Trusts</span>, to quantify (or, recently, also to <span class=\"it\">establish</span>) an equitable share of ownership.</span></li></ul>"
    ],
    "CATEGORY": "Property Rights &mdash; Formalities &mdash; Equitable Rights",
    "AKA": "Formality Rules for Equitable Property Rights"
},
{
    "TYPE": "Exam Advice",
    "NUMBER": "10",
    "RELATED": [
        "Overriding Interests - Problem Questions",
        "Mistakes - Dealing with Problems"
    ],
    "NAME": "Formalities - Problem Questions",
    "CATEGORIES": [
        "Property Rights",
        "Formalities",
        "Exam Advice"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Is the right <span class=\"it\">legal</span>?</span></span>",
        "<ol><li><span class=\"nl\">Was there a <span class=\"bd\">registered disposition</span>?</span><ul><li><span class=\"nl\">This means a registered deed &mdash; it&#8217;s a <span class=\"bd\">legal</span> right.</span></li></ul><li><span class=\"nl\">Was there a <span class=\"bd\">grant</span> or <span class=\"bd\">conveyance</span>?</span><ul><li><span class=\"nl\">If it was then <span class=\"bd\">registered</span>, it&#8217;s <span class=\"bd\">legal</span>.</span></li><li><span class=\"nl\">If it wasn&#8217;t registered, then it <span class=\"bd\">could be equitable</span>.</span></li></ul><li><span class=\"nl\">Is it a lease of <span class=\"bd\">3-7 years</span> created by deed?</span><ul><li><span class=\"nl\">It&#8217;s <span class=\"bd\">legal</span>.</span></li></ul><li><span class=\"nl\">Is it a lease of 3 or fewer years?</span><ul><li><span class=\"nl\">It&#8217;s</span></li></ul></ol>",
        "<span class=\"ud\"><span class=\"bd\">Is it <span class=\"it\">equitable</span>?</span></span>",
        "<ol><li><span class=\"nl\">Was there <span class=\"bd\">writing</span> or <span class=\"bd\">signed writing</span> or an <span class=\"bd\">instrument in writing</span>?</span><ul><li><span class=\"nl\">This means <span class=\"bd\">not a deed</span>, so a <span class=\"bd\">legal</span> right is out of the question. It may be equitable &mdash; <span class=\"lnk caseln\">S2 LPA 1989</span></span></li></ul><li><span class=\"nl\">Is it a <span class=\"bd\">trust of land</span> created <span class=\"bd\">in writing</span>?</span><ul><li><span class=\"nl\">This is an *e</span></li></ul></ol>"
    ],
    "CATEGORY": "Property Rights &mdash; Formalities &mdash; Exam Advice"
},
{
    "TYPE": "Concept",
    "NUMBER": "11",
    "WIKILINK": [
        "Land Registration Act 2002 https://en.wikipedia.org/wiki/Land_Registration_Act_2002",
        "Land Registration Act 1925 https://en.wikipedia.org/wiki/Land_Registration_Act_1925",
        "Land Registry Act 1862 https://en.wikipedia.org/wiki/Land_Registry_Act_1862"
    ],
    "RELATED": [
        "Land Registration - Theory",
        "Priority Rules",
        "Electronic Conveyancing",
        "Title Guarantee",
        "Property Rights",
        "Mistakes on the Register and Indemnities",
        "Overreaching",
        "Freehold Covenants - Benefit",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Schedule 3(2): Actual Occupation",
        "Overriding Interests at Transfer",
        "Personal Rights"
    ],
    "NAME": "Land Registration",
    "CATEGORIES": [
        "Land Registration"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Registered vs Unregistered Title</span></span><br>Unregistered land (unregistered <span class=\"it\">title</span> to land, to be correct) isn\u2019t on the syllabus, for the practical reason that about 87% of all transactions are for registered land. By area it\u2019s less, about 70%.",
        "Unregistered land comprises big areas of largely uninhabited land \u2014 coastlines, river beds, etc. The the second law of thermodynamics holds for land registration; but maximum registration-entropy would be about 95%, not 100%, as there are some parcels of land on which there will never be transactions \u2014- land held by the crown, charities, etc.",
        "It comes with it&#8217;s very own <span class=\"it\">theory</span> &mdash; <span class=\"lnk caseln\">Land Registration - Theory</span>.",
        "<span class=\"ud\"><span class=\"bd\">Potted History in the UK</span></span>",
        "<ul><li><span class=\"nl\">Registration of deeds was established by the <span class=\"lnk caseln\">Title Registration Act 1880</span>, and there had been equivocal, partial, muddled and failed attempts to introduce Land Registration since 1862.</span><ul><li><span class=\"nl\">Note that Land Registration should really be spelled &#8220;Registration of Title.&#8221;</span></li></ul><li><span class=\"nl\">The <span class=\"lnk caseln\">LRA 1925</span> was drafted in 1919. In 1925, 10% owned 90%. It introduced a <span class=\"bd\">voluntary</span> and <span class=\"bd\">comprehensive</span> system of registration.</span></li><li><span class=\"nl\">It did not <span class=\"bd\">replace</span> the existing system until 1950. Until then, the system of unregistered land ran in parallel.</span></li><li><span class=\"nl\"><span class=\"bd\">By 1990</span>, the majority of land was registered.</span></li><li><span class=\"nl\">The original ambition was that the process would be complete <span class=\"bd\">thirty years</span> after 1925.</span></li><li><span class=\"nl\">On 1st December 1990, <span class=\"bd\">first registration became compulsory</span> in England and Wales &mdash;</span><ul><li><span class=\"nl\">When the land was <span class=\"bd\">sold</span>, <span class=\"bd\">given</span>, <span class=\"bd\">leased</span>, <span class=\"bd\">mortgaged</span>.</span></li><li><span class=\"nl\">The penalty for non-compliance was and is <span class=\"bd\">loss of title</span>, as the title comes about <span class=\"bd\">by registration</span> and not by execution of the deed.</span></li></ul><li><span class=\"nl\">The current regime is the <span class=\"lnk caseln\">LRA 2002</span>, which provides for a system of <span class=\"lnk caseln\">Electronic Conveyancing</span>, which is a notable failure.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Discussion</span></span><br>Notwithstanding <span class=\"lnk caseln\">Electronic Conveyancing</span>, land registration is a <span class=\"bd\">success</span>. Transactions are now cheaper and quicker &mdash; and <span class=\"lnk caseln\">Adverse Possession</span> has become all but impossible. Conveyancing takes an afternoon, not a couple of months &mdash; although greedy bastard solicitors like to spin it out to a couple of months, by pretending it&#8217;s complex and involved."
    ],
    "CATEGORY": "Land Registration"
},
{
    "TYPE": "Concept",
    "NUMBER": "12",
    "RELATED": [
        "Title Guarantee",
        "Land Registration",
        "Priority Rules",
        "Land Registration - Theory",
        "Formality Rules - Equitable",
        "Property Rights - Gentle Intro",
        "Schedule 3(2): Actual Occupation",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Property Rights",
        "Formalities",
        "Tenancy in Common - Recognising",
        "Overriding Interests - Overview"
    ],
    "NAME": "Electronic Conveyancing",
    "CATEGORIES": [
        "Land Registration",
        "Electronic Conveyancing"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span><br>&emsp;&emsp;The regime since the 13th October 2003 is the <span class=\"lnk caseln\">LRA 2002</span>. This introduced &mdash; but did not implement) <span class=\"bd\">electronic conveyancing.</span>",
        "<span class=\"ud\"><span class=\"bd\">Electronic Conveyancing</span></span><br>&emsp;&emsp;This is the idea of making the whole transaction a matter of pressing one button to pay the fee, and another button to update the register. Sounds simple, right?<br>&emsp;&emsp;A pilot scheme was meant to be up and running in 2007. It coughed and spluttered to life in 2012 &mdash; but was a complete disaster and is now <span class=\"bd\">on hold</span>, or <span class=\"bd\">shelved</span>, depending on who you talk to. Talk to Martin Dixon, and you&#8217;ll hear  cheerfully-expressed scoffing at the idea that this system will come to pass in a 2016 GDL student&#8217;s working lifetime."
    ],
    "CATEGORY": "Land Registration &mdash; Electronic Conveyancing"
},
{
    "TYPE": "Concept",
    "NUMBER": "13",
    "RELATED": [
        "Land Registration",
        "Title Guarantee",
        "Electronic Conveyancing",
        "Priority Rules",
        "Schedule 3(2): Actual Occupation",
        "Joint Tenancy and Tenancy in Common",
        "Formality Rules - Legal",
        "Adverse Possession",
        "Covenants - Overview",
        "Equitable Shares of Co-ownership",
        "Overriding Interests - Overview",
        "Easements"
    ],
    "NAME": "Land Registration - Theory",
    "CATEGORIES": [
        "Land Registration"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span><br>The theory of land registration &mdash; aside from being a convenient way of padding out Land Law textbooks by a few thousand words &mdash; is the analysis of  how well a system of LR maniests the <span class=\"bd\">mirror principle</span>, <span class=\"bd\">curtain principle</span> and <span class=\"bd\">insurance principle</span>, or <span class=\"lnk caseln\">Title Guarantee</span>.",
        "<span class=\"ud\"><span class=\"bd\">Mirror Principle</span></span>",
        "<ul><li><span class=\"nl\">The registry must reflect the <span class=\"bd\">truth</span> &mdash; the registration document should be a fair reflection of the reality of the property and its attributes.</span></li><li><span class=\"nl\">Cadastral systems exhibit this. They reproduce in fairly fine detail, up to and including ancient-monument trees, the content of the land and the rights on it.</span></li><li><span class=\"nl\">But a system of Registration <span class=\"it\">of Title</span>, such as ours, falls quite a long way short. It fails to record significant potential attributes, chief amongst which are <span class=\"lnk caseln\">Overriding Interests</span>, <span class=\"lnk caseln\">Short Term Leases</span> and <span class=\"lnk caseln\">Proprietary Estoppel</span>.</span></li><li><span class=\"nl\">But it isn&#8217;t even supposed to. Its intention was not to preclude the need to use common sense, i.e., to <span class=\"it\">inspect the land</span> and politely ask a few pointed questions of the seller.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Curtain Principle</span></span>",
        "<ul><li><span class=\"nl\">The registration should draw a veil over certain <span class=\"it\">equitable</span> interests. In practice this means <span class=\"it\">beneficiaries of trusts of land</span> &mdash; <span class=\"lnk caseln\">Equitable Co-ownership</span>.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Insurance Principle</span></span>",
        "<ul><li><span class=\"nl\">AKA <span class=\"lnk caseln\">Title Guarantee</span> &mdash; the state should stand behind the content of the register as <span class=\"bd\">definitive</span>. <span class=\"lnk caseln\">S58 LRA 2002</span>, which provides for title guarantee, is headed &#8216;Conclusiveness.&#8217;</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Commentary</span></span><br>MD unbosoms himself of the opinion that some sizeable part of Greece&#8217;s modern ration of woe can be chalked up to its archaic system of title. See link for article from New York Times."
    ],
    "CATEGORY": "Land Registration",
    "LINK": [
        "NY Times article on Greece and LR. http://www.nytimes.com/2013/05/27/world/europe/greeces-tangled-land-ownership-is-a-hurdle-in-recovery.html?_r=0"
    ],
    "AKA": "Theory of Land Registration"
},
{
    "TYPE": "Concept",
    "NUMBER": "14",
    "RELATED": [
        "Land Registration",
        "Electronic Conveyancing",
        "Land Registration - Theory",
        "Priority Rules",
        "Formality Rules - Legal",
        "Interests of Persons in Actual Occupation",
        "Easements - Creation",
        "Freehold Covenants - Burden",
        "Severance",
        "Easements",
        "Overriding Interests - Overview",
        "Patterns of Facts in Rectification Cases"
    ],
    "NAME": "Title Guarantee",
    "CATEGORIES": [
        "Land Registration",
        "Title Guarantee"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span><br><span class=\"lnk caseln\">S58 LRA 2002</span> provides that <span class=\"bd\">the register is conclusive</span>. It&#8217;s not <span class=\"it\">registration <span class=\"bd\">of</span> title</span>, it&#8217;s <span class=\"it\">title <span class=\"bd\">by</span> registration</span>. The title arises when the registry makes an entry on the register, having received Form AP1 and the &#8216;title&#8217; deed. At which point, the documents have no further significance &mdash; they are usually destroyed.",
        "<span class=\"ud\"><span class=\"bd\">Problems</span></span><br>Imagine a crooked solicitor helps Dixon, a fraudster, to persuade the LR that he&#8217;s the owner of the your land. He then sells it to a bank. Could you get it back? <span class=\"bd\">No</span>. Because of <span class=\"lnk caseln\">S58 LRA 2002</span>, the registration is conclusive. (See <span class=\"lnk caseln\">Mistakes and Indemnities</span>).",
        "<span class=\"bd\"><span class=\"lnk caseln\">Malory</span> and <span class=\"lnk caseln\">Fitzwilliam</span></span> vs <span class=\"bd\"><span class=\"lnk caseln\">Swift 1st</span></span><br>Current textbooks illustrate rectification of the register in cases of fraud by <span class=\"lnk caseln\">Malory v Cheshire</span> and <span class=\"lnk caseln\">Fitzwilliam v Richall</span>. But note that these two cases seriously undermined the Title Guarantee Provision (S58).",
        "<ul><li><span class=\"nl\">On this point, both were overruled by <span class=\"lnk caseln\">Swift 1st v chief Land Registrar</span> [2015] as wrongly decided <span class=\"it\">per incuriam</span>. <span class=\"bd\">Ignore what the textbooks say</span>.</span></li></ul>"
    ],
    "CATEGORY": "Land Registration &mdash; Title Guarantee",
    "AKA": "Insurance Principle"
},
{
    "TYPE": "Statute",
    "NUMBER": "15",
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/2002/9/section/58"
    ],
    "RELATED": [
        "Schedule 3 LRA 2002",
        "S29 LRA 2002",
        "S28 LRA 2002",
        "Schedule 12 LRA 2002",
        "Schedule 6 LRA 2002",
        "S75 LRA 1925",
        "Schedule 8 LRA 2002",
        "Schedule 4 LRA 2002",
        "S1 LPA 1925",
        "S27 and S38 LRA 2002"
    ],
    "NAME": "S58 LRA 2002",
    "CATEGORIES": [
        "Land Registration",
        "Title Guarantee",
        "LRA 2002"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Blackstone&#8217;s</span> Property Law 2015-2016 &mdash; <span class=\"bd\">p.321</span>",
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span><br>Provides for the conclusiveness of the <span class=\"lnk caseln\">Title Guarantee</span> of the register.",
        "<span class=\"ud\"><span class=\"bd\">S58 &mdash; Conclusiveness</span></span>",
        "<ol><li><span class=\"nl\">If, on the entry of a person in the register as the proprietor of a legal estate, the legal estate would not otherwise be vested in him, it shall be deemed to be vested in him as a result of the registration.</span></li><li><span class=\"nl\">Subsection (1) does not apply where the entry is made in pursuance of a registrable disposition in relation to which some other registration requirement remains to be met.</span></li></ol>"
    ],
    "CATEGORY": "Land Registration &mdash; Title Guarantee &mdash; LRA 2002",
    "AKA": "S58 LRA"
},
{
    "TYPE": "Concept",
    "NUMBER": "16",
    "RELATED": [
        "Land Registration - Theory",
        "Title Guarantee",
        "Electronic Conveyancing",
        "Land Registration",
        "Easements",
        "Adverse Possession",
        "Patterns of Facts in Rectification Cases",
        "Property Rights - Gentle Intro",
        "Circumstances for Adverse Possession",
        "Interests of Persons in Actual Occupation",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Freehold Covenants - Benefit"
    ],
    "NAME": "Priority Rules",
    "CATEGORIES": [
        "Land Registration",
        "Priority Rules"
    ],
    "SUMMARY": [
        "<span class=\"bd\"><span class=\"ud\">Summary</span></span><br>Priority is the system of establishing which property rights <span class=\"it\">bite</span> land, and bind the RP at first registration or transfer.",
        "<ul><li><span class=\"nl\">Don&#8217;t count on passing a Land Law exam without a decent acquaintance with <span class=\"lnk caseln\">S28 LRA 2002</span> and <span class=\"lnk caseln\">S29 LRA 2002</span>.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">S28 &mdash; Basic Priority Rule</span></span><br>For <span class=\"bd\">transfer not for value</span> &mdash; all existing property rights are binding.",
        "<ul><li><span class=\"nl\"><span class=\"ilc\">This appears to have been missed in <span class=\"lnk caseln\">Gold Harp v MacLeod</span>.</span></span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">S29 &mdash; Special Priority Rule</span></span><br>The new RP the is a transferee for valuable consideration, i.e., a purchasor. In assessing whether there has in fact been such a transfer is a matter of substance not form &mdash; <span class=\"lnk caseln\">Halifax v Corbett</span>. The transferee could be a lessee; a purchasor of the freehold; the bank lending money to X as a mortgage.<br>The rule, <span class=\"bd\">which you must not get wrong</span>, is &mdash;",
        "<ul><li><span class=\"nl\">The purchasor takes the land <span class=\"bd\">free from everything except</span>...</span><ol><li><span class=\"nl\"><span class=\"bd\">Entries on the Register</span></span><ul><li><span class=\"nl\">Which cannot surprise the purchasor, unless he <span class=\"it\">hasn&#8217;t even looked</span>.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Overriding Interests</span></span><ul><li><span class=\"nl\">I.e., property rights <span class=\"bd\">not</span> on the register, but nevertheless <span class=\"bd\">binding</span>.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Schedule 3 LRA 2002</span> lists what these are. There are ten, seven of which are trivial.</span></li><li><span class=\"nl\"><span class=\"bd\">The purchasor finds out about them by inspecting the land, and asking the seller questions.</span></span></li><li><span class=\"nl\">... and shows why the mirror principle doesn&#8217;t really apply.</span></li></ul></ol></ul>"
    ],
    "CATEGORY": "Land Registration &mdash; Priority Rules",
    "AKA": "Basic Priority Rule; Special Priority Rule"
},
{
    "TYPE": "Statute",
    "NUMBER": "17",
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/2002/9/section/28"
    ],
    "RELATED": [
        "S29 LRA 2002",
        "Schedule 3 LRA 2002",
        "S58 LRA 2002",
        "Schedule 12 LRA 2002",
        "Schedule 8 LRA 2002",
        "Schedule 6 LRA 2002",
        "S75 LRA 1925",
        "Schedule 4 LRA 2002",
        "S27 and S38 LRA 2002",
        "S1 LPA 1925"
    ],
    "NAME": "S28 LRA 2002",
    "CATEGORIES": [
        "Land Registration",
        "Priority Rules",
        "Basic Rule",
        "LRA 2002"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Blackstone&#8217;s</span> Property Law 2015-2016 &mdash; <span class=\"bd\">p.315</span>",
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span>",
        "<span class=\"ud\"><span class=\"bd\">S28 &mdash; Basic Rule</span></span>",
        "<ol><li><span class=\"nl\">Except as provided by <span class=\"lnk caseln\">S29 LRA 2002</span> and S30, the <span class=\"bd\">priority of an interest affecting a registered estate or charge is not affected by a disposition of the estate or charge</span>.</span></li><li><span class=\"nl\">It makes no difference for the purposes of this section whether the interest or disposition is registered.</span></li></ol>"
    ],
    "CATEGORY": "Land Registration &mdash; Priority Rules &mdash; Basic Rule &mdash; LRA 2002",
    "AKA": "S28 LRA"
},
{
    "TYPE": "Statute",
    "NUMBER": "18",
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/2002/9/section/29"
    ],
    "RELATED": [
        "S28 LRA 2002",
        "Schedule 3 LRA 2002",
        "S58 LRA 2002",
        "Schedule 8 LRA 2002",
        "Schedule 6 LRA 2002",
        "Schedule 4 LRA 2002",
        "Schedule 12 LRA 2002",
        "S75 LRA 1925",
        "S1 LPA 1925",
        "S27 and S38 LRA 2002"
    ],
    "NAME": "S29 LRA 2002",
    "CATEGORIES": [
        "Land Registration",
        "Priority Rules",
        "Basic Rule",
        "LRA 2002"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Blackstone&#8217;s</span> Property Law 2015-2016 &mdash; <span class=\"bd\">p.315</span>",
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span>",
        "<span class=\"ud\"><span class=\"bd\">S29 &mdash; Effect of registered dispositions: estates</span></span>",
        "<ol><li><span class=\"nl\">If a registrable disposition of a registered estate is made <span class=\"bd\">for valuable consideration</span>, completion of the disposition by registration has the effect of postponing to the interest under the disposition any interest affecting the estate immediately before the disposition whose priority is not protected at the time of registration.</span></li><li><span class=\"nl\">For the purposes of subsection (1), the <span class=\"bd\">priority of an interest is protected</span>-\u2014</span><ol><li><span class=\"nl\">in any case, if the interest\u2014-</span><ol><li><span class=\"nl\">is a registered charge or the <span class=\"bd\">subject of a notice in the register</span>,</span></li><li><span class=\"nl\">falls within any of the paragraphs of <span class=\"lnk caseln\">Schedule 3</span>, or</span></li><li><span class=\"nl\">appears from the register to be excepted from the effect of registration, and</span></li></ol><li><span class=\"nl\">in the case of a disposition of a leasehold estate, if the burden of the interest is incident to the estate.</span></li></ol><li><span class=\"nl\">Subsection (2)(a)(ii) does not apply to an interest which has been the subject of a notice in the register at any time since the coming into force of this section.</span></li><li><span class=\"nl\">Where the grant of a leasehold estate in land out of a registered estate does not involve a registrable disposition, this section has effect as if\u2014-</span><ol><li><span class=\"nl\">the grant involved such a disposition, and</span></li><li><span class=\"nl\">the disposition were registered at the time of the grant.</span></li></ol></ol>"
    ],
    "CATEGORY": "Land Registration &mdash; Priority Rules &mdash; Basic Rule &mdash; LRA 2002",
    "AKA": "S29 LRA"
},
{
    "TYPE": "Statute",
    "NUMBER": "19",
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/2002/9/schedule/3"
    ],
    "RELATED": [
        "S28 LRA 2002",
        "S29 LRA 2002",
        "S58 LRA 2002",
        "S75 LRA 1925",
        "Schedule 8 LRA 2002",
        "Schedule 12 LRA 2002",
        "Schedule 4 LRA 2002",
        "Schedule 6 LRA 2002",
        "S27 and S38 LRA 2002",
        "S1 LPA 1925"
    ],
    "NAME": "Schedule 3 LRA 2002",
    "CATEGORIES": [
        "Land Registration",
        "Priority Rules",
        "Schedule 3",
        "LRA 2002"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Blackstone&#8217;s</span> Property Law 2015-2016 &mdash; <span class=\"bd\">p. 340</span>",
        "<span class=\"ud\"><span class=\"bd\">Text</span></span><br><span class=\"bd\">Leasehold estates in land</span>",
        "<ol><li><span class=\"nl\">leasehold estate in land granted for a term not exceeding seven years from the date of the grant, except for\u2014-</span><ol><li><span class=\"nl\">a lease the grant of which falls within section 4(1)(d), (e) or (f);</span></li><li><span class=\"nl\">a lease the grant of which constitutes a registrable disposition.</span></li></ol></ol>",
        "<span class=\"bd\"><span class=\"lnk caseln\">Interests of Persons in Actual Occupation</span></span>",
        "<ol><li style=\"counter-reset: item 1;\"><span class=\"nl\"> An interest belonging at the time of the disposition to a person in actual occupation, so far as relating to land of which he is in actual occupation, except for\u2014-</span><ol><li><span class=\"nl\">an interest under a settlement under the Settled Land Act 1925 (c. 18);</span></li><li><span class=\"nl\">an interest of a person of whom inquiry was made before the disposition and who failed to disclose the right when he could reasonably have been expected to do so;</span></li><li><span class=\"nl\">an interest\u2014</span><ol><li><span class=\"nl\">which belongs to a person whose occupation would not have been obvious on a reasonably careful inspection of the land at the time of the disposition, and</span></li><li><span class=\"nl\">of which the person to whom the disposition is made does not have actual knowledge at that time;</span></li></ol><li><span class=\"nl\">a leasehold estate in land granted to take effect in possession after the end of the period of three months beginning with the date of the grant and which has not taken effect in possession at the time of the disposition.</span></li></ol></ol>",
        "<span class=\"bd\"><span class=\"lnk caseln\">Easements</span> and Profits a Prendre</span>",
        "<ol><li style=\"counter-reset: item 2;\"><span class=\"nl\"> (1) A <span class=\"lnk caseln\">Legal Easement</span> ... <span class=\"bd\">except for an easement</span> ... <span class=\"bd\">which is not registered</span> ..., which at the time of the disposition\u2014</span><ol><li><span class=\"nl\">is not within the actual knowledge of the person to whom the disposition is made, and</span></li><li><span class=\"nl\">would *not have been obvious on a reasonably careful inspection of the land over which the easement or profit is exercisable.</span></li></ol><li class=\"nonum\"><span class=\"nl\"> The exception in sub-paragraph (1) does not apply if the person entitled to the easement or profit proves that it has been exercised in the period of one year ending with the day of the disposition.</span></li></ol>"
    ],
    "CATEGORY": "Land Registration &mdash; Priority Rules &mdash; Schedule 3 &mdash; LRA 2002",
    "AKA": "Schedule 3 LRA; Schedule 3"
},
{
    "TYPE": "Concept",
    "NUMBER": "20",
    "RELATED": [
        "Patterns of Facts in Rectification Cases",
        "Freehold Covenants - Burden",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Circumstances for Adverse Possession",
        "Registered Protected Interests",
        "Formality Rules - Legal",
        "Land Registration",
        "Joint Tenancy and Tenancy in Common",
        "Title Guarantee",
        "Easements - Creation",
        "Priority Rules",
        "Overriding Interests at Transfer"
    ],
    "NAME": "Mistakes on the Register and Indemnities",
    "CATEGORIES": [
        "Mistakes on the Register"
    ],
    "SUMMARY": [
        "<span class=\"it\">Given the <span class=\"lnk caseln\">Title Guarantee</span> of the register, how do people get compensated when a mistake is made?</span>",
        "The rules governing <span class=\"it\">alteration</span> of the register are in <span class=\"lnk caseln\">Schedule 4 LRA 2002</span>, and for the payment of <span class=\"it\">indemnities</span>, in <span class=\"lnk caseln\">Schedule 8 LRA 2002</span>.",
        "<span class=\"ud\"><span class=\"bd\">Mistakes</span></span><br>These can be of two types:",
        "<span class=\"bd\">Type 1</span> &mdash; for which the register will be <span class=\"bd\">altered</span><br>Barring exceptional circumstances, alteration is systematic.",
        "<ul><li><span class=\"nl\">Subtypes:</span><ul><li><span class=\"nl\"><span class=\"bd\">Administrative</span>: the cocking-up of name, address, etc.</span></li><li><span class=\"nl\"><span class=\"bd\">Substantive</span>, but which <span class=\"it\">cause no loss</span>, and therefore the correction of which would not prejudicially affect the new RP&#8217;s title.<br><span class=\"ilc\">MD &mdash; this basically never happens, as the circs in which a substantial loss would <span class=\"it\">not</span> prejudicially affect do so are vanishingly slight.</span></span></li></ul></ul>",
        "<span class=\"lnk caseln\">Walker v Burton</span> is <span class=\"it\">probably</span> an example of a type 1 mistake, but the courts see it as a type 1 mistake.",
        "<span class=\"bd\">Type 2</span> &mdash; for which the register <span class=\"bd\">may</span> be <span class=\"bd\">rectified</span><br>By contrast to alteration, rectifications are corrections that prejudicially affect the title of the RP &mdash; <span class=\"lnk caseln\">Schedule 4</span> 1(b).",
        "<ul><li><span class=\"nl\">Naturally enough, this is where most of the litigation is.</span></li><li><span class=\"nl\">It can involve something mistakenly <span class=\"it\">added</span> &mdash; <span class=\"lnk caseln\">Swift 1st</span>, or <span class=\"it\">removed</span> &mdash; <span class=\"lnk caseln\">Gold Harp v MacLeod</span>.</span></li></ul>",
        "Generally, there <span class=\"bd\">is</span> rectification if the new RP is not in possession &mdash; <span class=\"lnk caseln\">Knights Construction v Roberto Mac</span>, but there is <span class=\"bd\">not</span> if he is, unless he has acted in bad faith &mdash; <span class=\"lnk caseln\">Schedule 4</span> 3(2)(a) and (b) &mdash; <span class=\"lnk caseln\">Baxter v Mannion</span>.",
        "<span class=\"ud\"><span class=\"bd\">Indemnities</span></span><br>This is strict-liability/no-fault compensation. A claim succeeds merely by showing the LR has caused loss.",
        "<ul><li><span class=\"nl\">Cf. tortious damages, which <span class=\"lnk caseln\">Schedule 8</span> indemnities are <span class=\"bd\">not</span>. The rationale of tortious damages, of putting you back the position before the tort, could only be achieved by rectification.</span></li><li><span class=\"nl\">A fundamental principle of the law of real property is that each piece of land is unique, and cannot be equated with money &mdash; Lady Hale obiter in <span class=\"lnk caseln\">Scott v Southern Pacific Mortgages</span>.</span><ul><li><span class=\"nl\">Cf. <span class=\"lnk caseln\">Overreaching</span>, in which this &#8216;fundamental&#8217; principle is ignored to favour land changing hands.</span></li></ul></ul>",
        "<span class=\"ud\"><span class=\"bd\">See also</span></span><br><span class=\"lnk caseln\">Mistakes - Dealing with Problems</span>"
    ],
    "CATEGORY": "Mistakes on the Register",
    "AKA": "Mistakes and Indemnities"
},
{
    "TYPE": "Statute",
    "NUMBER": "21",
    "CATEGORY": "Mistakes and Indemnities &mdash; Rules for Alteration &mdash; LRA 2002",
    "RELATED": [
        "Schedule 8 LRA 2002",
        "Schedule 6 LRA 2002",
        "Schedule 12 LRA 2002",
        "S75 LRA 1925",
        "S58 LRA 2002",
        "S28 LRA 2002",
        "S29 LRA 2002",
        "Schedule 3 LRA 2002",
        "S1 LPA 1925",
        "S27 and S38 LRA 2002"
    ],
    "NAME": "Schedule 4 LRA 2002",
    "CATEGORIES": [
        "Mistakes and Indemnities",
        "Rules for Alteration",
        "LRA 2002"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Blackstone&#8217;s</span> Property Law 2015-2016 &mdash; <span class=\"bd\">p. 348</span>",
        "<span class=\"bd\">Introduction</span>",
        "<ol><li><span class=\"nl\">In this Schedule, references to rectification, in relation to alteration of the register, are to alteration which\u2014</span><ol><li><span class=\"nl\">involves the correction of a mistake, and</span></li><li><span class=\"nl\">prejudicially affects the title of a registered proprietor.</span></li></ol></ol>",
        "<span class=\"bd\">Alteration <span class=\"it\">pursuant</span> to a court order</span>",
        "<ol><li><span class=\"nl\">(1)The court may make an order for alteration of the register for the purpose of\u2014</span><ol><li><span class=\"nl\">correcting a mistake,</span></li><li><span class=\"nl\">bringing the register up to date, or</span></li><li><span class=\"nl\">giving effect to any estate, right or interest excepted from the effect of registration.</span></li></ol><li class=\"nonum\"><span class=\"nl\">(2)An order under this paragraph has effect when served on the registrar to impose a duty on him to give effect to it.</span></li><li><span class=\"nl\">(1)This paragraph applies to the power under paragraph 2, so far as relating to rectification.</span></li><li class=\"nonum\"><span class=\"nl\">(2)If alteration affects the title of the proprietor of a registered estate in land, no order may be made under paragraph 2 without the proprietor\u2019s consent in relation to land in his possession unless\u2014</span><ol><li><span class=\"nl\">he has by fraud or lack of proper care caused or substantially contributed to the mistake, or</span></li><li><span class=\"nl\">it would for any other reason be unjust for the alteration not to be made.</span></li><li><span class=\"nl\">If in any proceedings the court has power to make an order under paragraph 2, it must do so, unless there are exceptional circumstances which justify its not doing so.</span></li><li><span class=\"nl\">In sub-paragraph (2), the reference to the title of the proprietor of a registered estate in land includes his title to any registered estate which subsists for the benefit of the estate in land.</span></li></ol><li><span class=\"nl\">Rules may\u2014</span><ol><li><span class=\"nl\">make provision about the circumstances in which there is a duty to exercise the power under paragraph 2, so far as not relating to rectification;</span></li><li><span class=\"nl\">make provision about the form of an order under paragraph 2;</span></li><li><span class=\"nl\">make provision about service of such an order.</span></li></ol></ol>",
        "<span class=\"bd\">Alteration <span class=\"it\">otherwise than pursuant</span> to a court order</span>",
        "<ol><li><span class=\"nl\">The registrar may alter the register for the purpose of\u2014</span><ol><li><span class=\"nl\">correcting a mistake,</span></li><li><span class=\"nl\"><span class=\"bd\">bringing the register up to date</span>,</span></li><li><span class=\"nl\">giving effect to any estate, right or interest excepted from the effect of registration, or</span></li><li><span class=\"nl\">removing a superfluous entry.</span></li></ol></ol>"
    ],
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/2002/9/schedule/4"
    ],
    "AKA": "Schedule 4 LRA; Schedule 4"
},
{
    "TYPE": "Statute",
    "NUMBER": "22",
    "RELATED": [
        "Schedule 4 LRA 2002",
        "S58 LRA 2002",
        "S75 LRA 1925",
        "S28 LRA 2002",
        "S29 LRA 2002",
        "Schedule 6 LRA 2002",
        "Schedule 12 LRA 2002",
        "Schedule 3 LRA 2002",
        "S1 LPA 1925",
        "S27 and S38 LRA 2002"
    ],
    "NAME": "Schedule 8 LRA 2002",
    "CATEGORIES": [
        "Mistakes and Indemnities",
        "Rules for Indemnities",
        "LRA 2002"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Blackstone&#8217;s</span> Property Law 2015-2016 &mdash; <span class=\"bd\">p. 348</span>",
        "<span class=\"bd\">Entitlement</span>",
        "<ol><li><span class=\"nl\">(1)A person is entitled to be indemnified by the registrar if he suffers loss by reason of\u2014</span><ol><li><span class=\"nl\">rectification of the register,</span></li><li><span class=\"nl\">a mistake whose correction would involve rectification of the register,</span></li><li><span class=\"nl\">a mistake in an official search,</span></li><li><span class=\"nl\">a mistake in an official copy,</span></li><li><span class=\"nl\">a mistake in a document kept by the registrar which is not an original and is referred to in the register,</span></li><li><span class=\"nl\">the loss or destruction of a document lodged at the registry for inspection or safe custody,</span></li><li><span class=\"nl\">a mistake in the cautions register, or</span></li><li><span class=\"nl\">failure by the registrar to perform his duty under section 50.</span></li></ol><li class=\"nonum\"><span class=\"nl\">(2)For the purposes of sub-paragraph (1)(a)\u2014</span><ol><li><span class=\"nl\">any person who suffers loss by reason of the change of title under section 62 is to be regarded as having suffered loss by reason of rectification of the register, and</span></li><li><span class=\"nl\">the proprietor of a registered estate or charge claiming in good faith under a forged disposition is, where the register is rectified, to be regarded as having suffered loss by reason of such rectification as if the disposition had not been forged.</span></li><li><span class=\"nl\">No indemnity under sub-paragraph (1)(b) is payable until a decision has been made about whether to alter the register for the purpose of correcting the mistake; and the loss suffered by reason of the mistake is to be determined in the light of that decision.</span></li></ol></ol>"
    ],
    "CATEGORY": "Mistakes and Indemnities &mdash; Rules for Indemnities &mdash; LRA 2002",
    "AKA": "Schedule 8 LRA; Schedule 8"
},
{
    "TYPE": "Exam Advice",
    "NUMBER": "23",
    "RELATED": [
        "Formalities - Problem Questions",
        "Overriding Interests - Problem Questions"
    ],
    "NAME": "Mistakes - Dealing with Problems",
    "CATEGORIES": [
        "Mistakes on the Register"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">General Strategy</span></span>",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Identify the relevant mistake</span></span><ul><li><span class=\"nl\">In the register? <span class=\"lnk caseln\">Swift 1st</span>, or</span></li><li><span class=\"nl\">in the underlying facts? <span class=\"lnk caseln\">Baxter v Mannion</span>.</span></li><li><span class=\"nl\"><span class=\"it\">Usually incompetence, sometimes fraud.</span></span></li></ul><li><span class=\"nl\"><span class=\"bd\">Who has been prejudiced?</span></span><ul><li><span class=\"nl\">Usually just the RP&#8217;s title.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Current RP <span class=\"it\">not</span> in possession?</span></span><ul><li><span class=\"nl\">Rectify &mdash; <span class=\"lnk caseln\">Knights Construction v Roberto Mac</span></span></li></ul><li><span class=\"nl\"><span class=\"bd\">Current RP <span class=\"it\">in</span> possession?</span></span><ul><li><span class=\"nl\">Presumption <span class=\"bd\">against</span> rectification, rebuttable if the current RP &mdash;</span><ul><li><span class=\"nl\"><span class=\"bd\">Consents</span> &mdash; <span class=\"lnk caseln\">Schedule 4</span> <span class=\"bd\">3(2)</span>; or</span></li><li><span class=\"nl\"><span class=\"bd\">Substantially contributed</span> to the mistake through fraud or lack of proper care &mdash; <span class=\"bd\">3(2)<span class=\"ud\">(a)</span></span>, <span class=\"lnk caseln\">Baxter v Mannion</span>; or</span></li><li><span class=\"nl\">Not to do so would be <span class=\"bd\">unjust</span> &mdash; <span class=\"bd\">3(2)<span class=\"ud\">(b)</span></span>, but the threshold is <span class=\"bd\">high</span> &mdash; <span class=\"lnk caseln\">Baxter v Mannion</span>, higher than merely the original RP having lost title. Also <span class=\"lnk caseln\">Cooper v Gick</span>.</span></li></ul></ul></ol>"
    ],
    "CATEGORY": "Mistakes on the Register"
},
{
    "TYPE": "Concept",
    "NUMBER": "24",
    "RELATED": [
        "Mistakes on the Register and Indemnities",
        "Conditions for Averse Possession",
        "Tenancy in Common - Recognising",
        "Formality Rules - Equitable",
        "Electronic Conveyancing",
        "Title Guarantee",
        "Property Rights",
        "Property Rights - Gentle Intro",
        "Overriding Interests - Overview",
        "Interests of Persons in Actual Occupation",
        "Overriding Interests at Transfer",
        "Freehold Covenants - Burden"
    ],
    "NAME": "Patterns of Facts in Rectification Cases",
    "CATEGORIES": [
        "Mistakes on the Register"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">A &mdash; B</span></span><br>Original RP transfers to New RP, but a registration mistake is made, e.g., B buys half the land but only gets registered in a quarter.",
        "<ul><li><span class=\"nl\">If B is in possession (and has not acted fraudulently or contributed to the mistake (or there is another reason for which it would be unfair)</span><ul><li><span class=\"nl\">B keeps the title.</span></li><li><span class=\"nl\">A is paid indemnities by the Land Registry &mdash; <span class=\"lnk caseln\">Williams v Mitchell</span>, <span class=\"lnk caseln\">Roberto Mac</span>.</span></li></ul></ul>",
        "<span class=\"ilc\">Note that this is fairly poisonous to common sense. Take someone&#8217;s daughter&#8217;s bike (!) and it&#8217;s still their daughter&#8217;s bike. Strident disapprovers include Lady Hale.</span>",
        "<span class=\"ud\"><span class=\"bd\">A &mdash; B &mdash; C</span></span><br>The fraudster is <span class=\"bd\">B</span>. He&#8217;s nabbed the title from <span class=\"bd\">A</span> then transferred it to <span class=\"bd\">C</span>, an innocent party. <span class=\"lnk caseln\">Swift 1st</span>, <span class=\"lnk caseln\">Guy v Barclay&#8217;s</span>, <span class=\"lnk caseln\">Fitzwilliam v Richall</span>, <span class=\"lnk caseln\">Malory v Cheshire</span>.",
        "<ul><li><span class=\"nl\">Dixon&#8217;s opinion: this <span class=\"it\">shouldn&#8217;t</span> be treated differently to <span class=\"bd\">A &mdash; B</span>. If C is in possession, the normal rules of <span class=\"lnk caseln\">Schedule 4</span> should apply.<br>Nevertheless &mdash;</span></li><li><span class=\"nl\">The cases tend to send the land back to A (without going through the legislative provisions) in one of two ways:</span><ol><li><span class=\"nl\"><span class=\"bd\">Unravelling the whole sequence of events</span><br>By use of the equitable maxims <span class=\"it\">&#8220;fraud unravels all&#8221;</span> and/or <span class=\"it\">&#8220;equity will not permit a statute to be an instrument of fraud&#8221;</span>.</span><ul><li><span class=\"nl\">A gets the land back, but the <span class=\"bd\">innocent party gets no indemnity</span>.<br>Unravelling the whole shebang entails <span class=\"it\">un</span>registering the fraudulent registration whose rectification would entitled C to damages &mdash; <span class=\"lnk caseln\">Fitzwilliam v Richall</span>.</span><ul><li><span class=\"nl\">cf. <span class=\"lnk caseln\">Guy v Barclay&#8217;s</span>, decided in favour of the bank, the claimant having discovered the fraud but failed to register a notice against the title.</span></li></ul><li class=\"nonum\"><span class=\"nl\"><span class=\"it\">Having no remedy, Richall went to the CA &mdash; but dropped the action on the morning of the hearing, having been paid off under a confidential agreement. By, one might speculate, the bank in the upcoming case of <span class=\"lnk caseln\">Swift 1st</span>, to avoid the danger of being scuppered by an EWCA precedent against them.</span></span></li></ul><ul></li><li><span class=\"nl\">In any event, <span class=\"lnk caseln\">Swift 1st</span> clipped the wings of this means of sorting out fraud cases quite considerably, the claim for rectification succeeding at first instance and on appeal despite the fraud.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">A&#8217;s right to <span class=\"it\">seek</span> rectification as an OI</span></span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Malory</span> established this is a property right.</span></li><li><span class=\"nl\">Should A be in actual occupation, it would override and bind C.<br>However, it <span class=\"bd\">seems</span> like a statutory right, not a property right.</span></li></ul></ol></ul>"
    ],
    "CATEGORY": "Mistakes on the Register"
},
{
    "TYPE": "Case",
    "SUMMARY": [
        "Burton bought a manor next to a fell. He subsequently discovered, so he thought, that the manor gave him the fell. He asked the LR to register it for him &mdash; they did so. Intent, it seems, on rubbing everyone up the wrong way, he put a fence around the fell, and stopped the villagers from, e.g., parking on it.  Villagers including the claimant challenged this on the grounds that the land was in fact <span class=\"bd\">common land</span>. They were correct. At some point in the 1400s, the land had been conveyed away."
    ],
    "NUMBER": "25",
    "RELATED": [
        "Fitzwilliam v Richall",
        "Gold Harp v MacLeod",
        "Malory v Cheshire",
        "Guy vs Barclay's",
        "Swift 1st v Chief Land Registrar",
        "Cooper v Gick",
        "Knights Construction v Roberto Mac",
        "Baxter v Mannion",
        "Halifax v Corbett",
        "Williams v Mitchell",
        "Curley v Parkes",
        "Link Lending v Bustard"
    ],
    "NAME": "Walker v Burton",
    "CATEGORIES": [
        "Land Registration",
        "Title Guarantee",
        "Mistakes on the Register",
        "Innocent Mistakes",
        "Alteration",
        "Rectification"
    ],
    "HELD": [
        "The mistaken registration of a disposition to which there is no other claimant will not give rise to rectification.  The claim to correct the mistaken registration of <span class=\"it\">a large chunk of moorland</span> merely because it seemed unjust, failed. Obiter &mdash; it was better to have <span class=\"it\">someone</span> rather than <span class=\"it\">no one</span> taking care of the land."
    ],
    "CATEGORY": "Land Registration &mdash; Title Guarantee / Mistakes on the Register &mdash; Innocent Mistakes &mdash; Alteration &mdash; Rectification"
},
{
    "TYPE": "Case",
    "NUMBER": "26",
    "RELATED": [
        "Swift 1st v Chief Land Registrar",
        "Fitzwilliam v Richall",
        "Malory v Cheshire",
        "Halifax v Corbett",
        "Walker v Burton",
        "Guy vs Barclay's",
        "Baxter v Mannion",
        "Williams v Mitchell",
        "Knights Construction v Roberto Mac",
        "Cooper v Gick",
        "Lloyd's v Rosset",
        "Bachelor v Marlowe"
    ],
    "NAME": "Gold Harp v MacLeod",
    "SUMMARY": [
        "A property developer with a long lease to <span class=\"it\">roof space</span> persuaded the LR to close the titles of some short leaseholders they wished to dislodge from the same space, by dishonestly claiming the titles were validly forfeited. A long lease was granted to a friend, which was assigned through various companies until it ended up with Gold Harp.",
        "At first instance, the judge found the forfeitures invalid in several ways, and ordered rectification &mdash; but that the purportedly forfeit short-term leases be entered against the <span class=\"it\">freehold</span> rather than the long lease. The question on appeal was whether Gold Harp had priority over the short-term lessors."
    ],
    "COMMENT": "See Dixon&#8217;s <span class=\"lnk wls\" data-ln=\"%5B2015%5D%20LQR%20131%2C%20207-213\">case comment on Gold Harp</span> in the LQR.",
    "LINK": [
        "Dixon Article"
    ],
    "AKA": "Gold Harp",
    "YEAR": "2014",
    "CITATION": "Gold Harp Properties Ltd v MacLeod [2014] EWCA Civ 1084",
    "CATEGORIES": [
        "Mistakes on the Register",
        "Fraud",
        "Land Registration",
        "Title Guarantee"
    ],
    "HELD": [
        "<span class=\"it\">from wl:</span> &#8220;(1) The judge had been entitled to order that J&#8217;s title numbers should take priority. J&#8217;s and G&#8217;s leases fell within the subject matter of Sch.4 para.8. The primary effect of that provision was to confirm that the power to rectify the register was not limited to simply restoring an interest, but extended to changing what would otherwise be its priority.&#8221;  <span class=\"ilc\">TODO <span class=\"bd\">still</span> to do, ffs.</span>"
    ],
    "CATEGORY": "Mistakes on the Register &mdash; Fraud / Land Registration &mdash; Title Guarantee"
},
{
    "TYPE": "Case",
    "NUMBER": "27",
    "RELATED": [
        "Gold Harp v MacLeod",
        "Swift 1st v Chief Land Registrar",
        "Fitzwilliam v Richall",
        "Guy vs Barclay's",
        "Walker v Burton",
        "Halifax v Corbett",
        "Baxter v Mannion",
        "Cooper v Gick",
        "Williams v Mitchell",
        "Knights Construction v Roberto Mac",
        "Hill v Tupper",
        "Sovmots v Environment Secretary"
    ],
    "NAME": "Malory v Cheshire",
    "CITATION": "Malory Enterprises v Cheshire Homes [2002] EWCA Civ 151",
    "AKA": "Malory",
    "YEAR": "2002",
    "FLAGS": [
        "Overruled"
    ],
    "CATEGORIES": [
        "Land Registration",
        "Title Guarantee",
        "Fraud",
        "Mistakes on the Register",
        "Fraud",
        "Right to Apply for Rectification as Property Right"
    ],
    "HELD": [
        "(i) The right to apply for rectification is a property right. (ii) Registration by fraud did not give a <span class=\"it\">disposition</span> within the meaning of <span class=\"lnk caseln\">LRA 1925</span>; merely the bare legal title. The beneficial interest remained with the defrauded party. (Overruled on the second point by <span class=\"lnk caseln\">Swift 1st</span> for having undermined the plain intention of <span class=\"lnk caseln\">S58 LRA 2002</span>)."
    ],
    "CATEGORY": "Land Registration &mdash; Title Guarantee &mdash; Fraud / Mistakes on the Register &mdash; Fraud &mdash; Right to Apply for Rectification as Property Right"
},
{
    "TYPE": "Case",
    "NUMBER": "28",
    "RELATED": [
        "Guy vs Barclay's",
        "Swift 1st v Chief Land Registrar",
        "Gold Harp v MacLeod",
        "Walker v Burton",
        "Malory v Cheshire",
        "Halifax v Corbett",
        "Knights Construction v Roberto Mac",
        "Baxter v Mannion",
        "Cooper v Gick",
        "Williams v Mitchell",
        "Birmingham Midshires Morgages v Sabherwal",
        "Platt v Crouch"
    ],
    "NAME": "Fitzwilliam v Richall",
    "FLAGS": [
        "Overruled"
    ],
    "AKA": "Fitzwilliam",
    "YEAR": "2013",
    "CITATION": "Fitzwilliam v Richall [2013] EWHC 86 (Ch)",
    "CATEGORIES": [
        "Mistakes on the Register",
        "Fraud",
        "Unravelling",
        "Rectification",
        "Land Registration",
        "Title Guarantee"
    ],
    "HELD": [
        "When B fraudulently obtains title by registration of A&#8217;s land which he then transfers to C, equity will unravel the whole transaction, and rectification will not be necessary to restore the title to A. But as there is no rectification, there will be no indemnity payable to C.  Following <span class=\"lnk caseln\">Malory</span>, fraudulent registration only confers <span class=\"bd\">bare legal title</span> (overturned in <span class=\"lnk caseln\">Swift 1st</span>)."
    ],
    "CATEGORY": "Mistakes on the Register &mdash; Fraud &mdash; Unravelling &mdash; Rectification / Land Registration &mdash; Title Guarantee"
},
{
    "TYPE": "Case",
    "NUMBER": "29",
    "RELATED": [
        "Fitzwilliam v Richall",
        "Gold Harp v MacLeod",
        "Malory v Cheshire",
        "Guy vs Barclay's",
        "Walker v Burton",
        "Halifax v Corbett",
        "Williams v Mitchell",
        "Knights Construction v Roberto Mac",
        "Baxter v Mannion",
        "Cooper v Gick",
        "Wood v Waddington",
        "Williams v Hensman"
    ],
    "NAME": "Swift 1st v Chief Land Registrar",
    "CITATION": "Swift 1st v Chief Land Registrar [2015] EWCA Civ 330",
    "AKA": "Swift 1st",
    "YEAR": "2015",
    "FLAGS": [
        "Key"
    ],
    "CATEGORIES": [
        "Mistakes on the Register",
        "Fraud",
        "Indemnities",
        "Land Registration",
        "Title Guarantee"
    ],
    "HELD": [
        "Indemnities are owed for loss as a consequence of rectification of a mistake, even when the mistake occurs through fraud. Such registration confers title definitively &mdash; <span class=\"lnk caseln\">S58 LRA 2002</span>.  <span class=\"lnk caseln\">Malory</span> and <span class=\"lnk caseln\">Fitzwilliam</span> erred in deciding such circumstances only gave rise to the bare legal title and not the equitable interest."
    ],
    "CATEGORY": "Mistakes on the Register &mdash; Fraud &mdash; Indemnities / Land Registration &mdash; Title Guarantee"
},
{
    "TYPE": "Case",
    "NUMBER": "30",
    "RELATED": [
        "Fitzwilliam v Richall",
        "Walker v Burton",
        "Baxter v Mannion",
        "Cooper v Gick",
        "Guy vs Barclay's",
        "Williams v Mitchell",
        "Halifax v Corbett",
        "Swift 1st v Chief Land Registrar",
        "Malory v Cheshire",
        "Gold Harp v MacLeod",
        "Abbey National v Cann",
        "Sovmots v Environment Secretary"
    ],
    "NAME": "Knights Construction v Roberto Mac",
    "SUMMARY": [
        "Knights Construction was the rightful proprietor, but the title had been registered wrongly to Roberto Mac."
    ],
    "FLAGS": [
        "Key"
    ],
    "AKA": "Roberto Mac",
    "CATEGORIES": [
        "Mistakes on the Register",
        "Rectification"
    ],
    "HELD": [
        "A mistake in the register is to be rectified when the RP to whom the title was wrongly registered is <span class=\"bd\">not in possession</span>."
    ],
    "CATEGORY": "Mistakes on the Register &mdash; Rectification"
},
{
    "TYPE": "Case",
    "NUMBER": "31",
    "RELATED": [
        "Cooper v Gick",
        "Fitzwilliam v Richall",
        "Knights Construction v Roberto Mac",
        "Guy vs Barclay's",
        "Walker v Burton",
        "Gold Harp v MacLeod",
        "Malory v Cheshire",
        "Williams v Mitchell",
        "Swift 1st v Chief Land Registrar",
        "Halifax v Corbett",
        "Pettitt v Pettitt",
        "Stafford v Lee"
    ],
    "NAME": "Baxter v Mannion",
    "CATEGORIES": [
        "Mistakes on the Register",
        "Rectification"
    ],
    "FLAGS": [
        "Key"
    ],
    "CATEGORY": "Mistakes on the Register &mdash; Rectification",
    "HELD": [
        "When a wrongful RP is in possession, the threshold for rectification of the register on grounds of unfairness under <span class=\"lnk caseln\">Schedule 4</span>(3)(2)(b) is <span class=\"bd\">high</span>. Merely having lost title to the land is not enough. The unconscionability of a wrongful RP&#8217;s connivance in the mistake, however, strongly militates in favour of rectification.",
        "The register <span class=\"it\">was</span> rectified, as the defendant had behaved unconscionably."
    ]
},
{
    "TYPE": "Case",
    "NUMBER": "32",
    "RELATED": [
        "Guy vs Barclay's",
        "Baxter v Mannion",
        "Walker v Burton",
        "Fitzwilliam v Richall",
        "Knights Construction v Roberto Mac",
        "Swift 1st v Chief Land Registrar",
        "Malory v Cheshire",
        "Gold Harp v MacLeod",
        "Halifax v Corbett",
        "Williams v Mitchell",
        "Williams & Glyn's Bank v Boland",
        "Scott v Southern Pacific Mortgages"
    ],
    "NAME": "Cooper v Gick",
    "CATEGORIES": [
        "Mistakes on the Register",
        "Rectification"
    ],
    "FLAGS": [
        "Informative"
    ],
    "CATEGORY": "Mistakes on the Register &mdash; Rectification",
    "HELD": [
        "When a wrongful RP is in possession but <span class=\"bd\">bears no blame for the mistake</span> in the register, it would be unfair not to rectify."
    ],
    "COURT": "LR Tribunal"
},
{
    "TYPE": "Case",
    "NUMBER": "33",
    "RELATED": [
        "Swift 1st v Chief Land Registrar",
        "Cooper v Gick",
        "Baxter v Mannion",
        "Guy vs Barclay's",
        "Fitzwilliam v Richall",
        "Malory v Cheshire",
        "Knights Construction v Roberto Mac",
        "Halifax v Corbett",
        "Walker v Burton",
        "Gold Harp v MacLeod",
        "Begum v Issa",
        "Antionades v Villiers"
    ],
    "NAME": "Williams v Mitchell",
    "CATEGORIES": [
        "Mistakes on the Register",
        "Indemnities"
    ],
    "HELD": [
        "When rectification of the register would prejudicially affect the new RP&#8217;s title, the usual remedy for the claimant will be indemnities from the Land Registry rather than rectification."
    ],
    "CATEGORY": "Mistakes on the Register &mdash; Indemnities"
},
{
    "TYPE": "Case",
    "NUMBER": "34",
    "RELATED": [
        "Fitzwilliam v Richall",
        "Swift 1st v Chief Land Registrar",
        "Walker v Burton",
        "Gold Harp v MacLeod",
        "Malory v Cheshire",
        "Cooper v Gick",
        "Baxter v Mannion",
        "Knights Construction v Roberto Mac",
        "Halifax v Corbett",
        "Williams v Mitchell",
        "Cardwell v Walker",
        "Begum v Issa"
    ],
    "NAME": "Guy vs Barclay's",
    "CATEGORIES": [
        "Mistakes on the Register",
        "Fraud",
        "Unravelling",
        "Rectification",
        "Title Guarantee"
    ],
    "CITATION": "Guy vs Barclay&#8217;s Bank Plc [2010] EWCA Civ 1396",
    "CATEGORY": "Mistakes on the Register &mdash; Fraud &mdash; Unravelling &mdash; Rectification / Title Guarantee",
    "HELD": [
        "When land is fraudulently transferred from A to B, then should the land subsequently be transferred to an innocent party C but A should <span class=\"it\">fail</span> to register a unilateral <span class=\"lnk caseln\">Notice</span> against the title when the mistake comes to his attention, C&#8217;s title will be good, and A&#8217;s claim for rectification will fail."
    ],
    "YEAR": "2010"
},
{
    "TYPE": "Case",
    "NUMBER": "35",
    "RELATED": [
        "Fitzwilliam v Richall",
        "Gold Harp v MacLeod",
        "Malory v Cheshire",
        "Swift 1st v Chief Land Registrar",
        "Guy vs Barclay's",
        "Walker v Burton",
        "Cooper v Gick",
        "Williams v Mitchell",
        "Baxter v Mannion",
        "Knights Construction v Roberto Mac",
        "Bucks v Moran",
        "Credit & Mercantile v Wishart"
    ],
    "NAME": "Halifax v Corbett",
    "CATEGORIES": [
        "Land Registration",
        "Mistakes on the Register",
        "Fraud"
    ],
    "CITATION": "Halifax v Corbett [2002] EWCA Civ 1849",
    "CATEGORY": "Land Registration / Mistakes on the Register &mdash; Fraud",
    "HELD": [
        "Whether a sale has genuinely taken place is a matter of substance not form."
    ],
    "YEAR": "2002"
},
{
    "TYPE": "Concept",
    "NUMBER": "36",
    "RELATED": [
        "Overriding Interests at First Registration",
        "Schedule 3(2): Actual Occupation",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Overriding Interests at Transfer",
        "Interests of Persons in Actual Occupation",
        "Overreaching",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Conditions for Averse Possession",
        "Circumstances for Adverse Possession",
        "Formality Rules - Legal",
        "Property Rights",
        "Title Guarantee"
    ],
    "NAME": "Overriding Interests - Overview",
    "CATEGORIES": [
        "Overriding Interests"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span><br>&emsp;&emsp;These are estates or interests in land that are <span class=\"bd\">not</span> registered, but, having <span class=\"lnk caseln\">Priority</span>, <span class=\"bd\">override</span> the estate of the RP, whether freehold (S11 LRA 2002) or leasehold (S12 LRA 2002).<br>&emsp;&emsp;Here is the &#8216;crack in the mirror&#8217; of registration, or a pragmatic concession to the reality of the transition to registration and the chaotic and improvised reality of peoples&#8217; dealings. <span class=\"lnk caseln\">LRA 2002</span> sought to reduce the number of OIs to facilitate e-conveyancing. This it achieved, but by doing away with OIs that weren&#8217;t much more than academic.<br>&emsp;&emsp;<span class=\"lnk caseln\">S71 LRA 2002</span> introduced a way to bring existing OIs onto the register. Doing so doesn&#8217;t change their status, it merely makes it clearer. The act contains two lists of overriding interests, governing what overrides when the land is first registered, and what overrides when, subsequently, the land is transferred.",
        "<span class=\"ud\"><span class=\"bd\"><span class=\"lnk caseln\">OIs at First Registration</span></span></span>",
        "<ul><li><span class=\"nl\">The goal is to bring the land onto the register without changing the status of anyone&#8217;s rights or interests.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Schedule 1</span> lists the interests that can override, and is broad in scope, containing no qualifications.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\"><span class=\"lnk caseln\">OIs at Transfer</span></span></span>",
        "<ul><li><span class=\"nl\">Here, there is the need to protect the interests of the purchasor, so the interests that can override are fewer.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Schedule 3</span> lists them.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Purpose</span></span>",
        "<ol><li><span class=\"nl\">Administrative convenience:</span></li><li><span class=\"nl\">To protect <span class=\"it\">semi-public</span> rights &mdash; easements for infrastructure: sewers, telephone lines, etc.</span><ul><li><span class=\"nl\">The policy decision is that it would be inconvenient to make their enforcement the cumbersome matter of referrence to the LR.</span></li><li><span class=\"nl\">E.g., <span class=\"lnk caseln\">Schedule 3</span> para 6, the &#8216;local land charge&#8217; &mdash; the right of a local authority to put pipes etc under an RP&#8217;s land.</span></li></ul><li><span class=\"nl\">As an expression of the general preference for <span class=\"bd\">social</span> rather than <span class=\"bd\">economic</span> utility in land law.</span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Schedule 3</span> para 2 protects people <span class=\"bd\">in actual occupation</span> &mdash; people <span class=\"bd\">using</span> the land...</span></li><li><span class=\"nl\">... a commodity of which they show no immediate signs of making any more. It ought therefore be <span class=\"bd\">used well</span>.</span></li><li><span class=\"nl\">On the whole, such rights arise informally. Those who have them tend not to know they can be registered, or that a right may arise through the RP&#8217;s <span class=\"bd\">conduct</span> &mdash; <span class=\"lnk caseln\">Implied Trusts of Property</span>.</span></li></ul></ol>",
        "<span class=\"ud\"><span class=\"bd\">Discussion</span></span><br>MD thinks overriding interests are an attempt to balance things out between right-holders and RPs. In the exam: by all means say that OIs should be fazed out, but justify, and realise that it\u2019s rather nuanced. The original Torrens system (New South Wales) didn\u2019t contain OIs. But was amended to include them 18 months later.",
        "Most OIs are easily discoverable &mdash; most people don\u2019t conceal them, or they&#8217;re obvious to inspection of the land. Undiscoverable OIs only exist in the legislation and problem questions. MD says there are only <span class=\"bd\">5</span> cases of purchasers being caught out by genuinely undiscoverable OIs."
    ],
    "CATEGORY": "Overriding Interests",
    "LINK": [
        "Ss 11-12 LRA 2002 http://www.legislation.gov.uk/ukpga/2002/9/part/2/chapter/1/crossheading/effect-of-first-registration",
        "Schedule 1 http://www.legislation.gov.uk/ukpga/2002/9/schedule/1",
        "Schedule 3 http://www.legislation.gov.uk/ukpga/2002/9/schedule/3"
    ]
},
{
    "TYPE": "Concept",
    "NUMBER": "37",
    "RELATED": [
        "Schedule 3(2): Actual Occupation",
        "Overreaching",
        "Interests of Persons in Actual Occupation",
        "Overriding Interests at Transfer",
        "Overriding Interests - Overview",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Mistakes on the Register and Indemnities",
        "Tenancy in Common - Recognising",
        "Property Rights - Gentle Intro",
        "Title Guarantee",
        "Covenants - Overview"
    ],
    "NAME": "Overriding Interests at First Registration",
    "CATEGORIES": [
        "Overriding Interests"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Schedule 1</span></span><br>Applies at first registration, it provides the following interests to override the estate of the RP:",
        "The interests that override a registered proprietor in the context of an <span class=\"lnk caseln\">S28 LRA 2002</span> transfer are given by the act&#8217;s <span class=\"lnk caseln\">Schedule 1</span>. They are:",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Legal Leases</span> &mdash; of fewer than 7 years and therefore not subject to compulsory registration. There are four exceptions given by S4(1)(d), (e) and (f).</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Interests of Persons in Actual Occupation</span>.</span></li><li><span class=\"nl\">Legal Easements (and profits \u00e0 prendre).</span></li><li><span class=\"nl\"><span class=\"bd\">.. (n)</span> &mdash; other OIs, of lesser interest.</span></li></ol>"
    ],
    "CATEGORY": "Overriding Interests",
    "LINK": [
        "Schedule 1 http://www.legislation.gov.uk/ukpga/2002/9/schedule/1"
    ],
    "AKA": "Schedule 1; OIs at First Registration"
},
{
    "TYPE": "Concept",
    "NUMBER": "38",
    "RELATED": [
        "Legal Leases as Schedule 3 Overriding Interests",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Overreaching",
        "Overriding Interests - Overview",
        "Interests of Persons in Actual Occupation",
        "Schedule 3(2): Actual Occupation",
        "Overriding Interests at First Registration",
        "Patterns of Facts in Rectification Cases",
        "Severance",
        "Personal Rights",
        "Registered Protected Interests",
        "Priority Rules"
    ],
    "NAME": "Overriding Interests at Transfer",
    "CATEGORIES": [
        "Overriding Interests"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Schedule 3</span></span><br>Cf. <span class=\"lnk caseln\">OIs at First Registration</span>. Here, the interests overriding the new RP are <span class=\"bd\">fewer</span> and <span class=\"bd\">more qualified</span> This is because there is a necessity to protect their rights.  They add to Schedule 1 the requirement that the OI is <span class=\"bd\">reasonably discoverable</span>. They are listed in Schedule 3",
        "See also <span class=\"lnk caseln\">Legal Leases as Schedule 3 Overriding Interests</span>, <span class=\"lnk caseln\">Interests of Persons in Actual Occupation</span> &mdash; as well as <span class=\"lnk caseln\">Schedule 3(2): Actual Occupation</span> and <span class=\"lnk caseln\">Legal Easements as Schedule 3 Overriding Interests</span>."
    ],
    "CATEGORY": "Overriding Interests",
    "LINK": [
        "Schedule 3 http://www.legislation.gov.uk/ukpga/2002/9/schedule/3"
    ],
    "AKA": "OIs at Transfer"
},
{
    "TYPE": "Concept",
    "NUMBER": "39",
    "RELATED": [
        "Schedule 3(2): Actual Occupation",
        "Interests of Persons in Actual Occupation",
        "Overreaching",
        "Overriding Interests at First Registration",
        "Overriding Interests at Transfer",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Overriding Interests - Overview",
        "Priority Rules",
        "Tenancy in Common - Recognising",
        "Equitable Shares of Co-ownership",
        "Severance",
        "Title Guarantee"
    ],
    "NAME": "Legal Leases as Schedule 3 Overriding Interests",
    "CATEGORIES": [
        "Overriding Interests"
    ],
    "SUMMARY": [
        "<span class=\"bd\"><span class=\"ud\">Para 1</span> &mdash; Legal Leases</span><br>Legal leases of fewer than 7 years as per <span class=\"lnk caseln\">Schedule 1</span>. Four exceptions:",
        "<ul><li><span class=\"nl\"><span class=\"bd\">Discontinuous</span> leases, e.g., <span class=\"bd\">timeshares</span> for a particular slot of weeks in the year, or <span class=\"bd\">market stalls</span>, for a particular day of the week. Excluded as their discovery is <span class=\"it\">inherently not obvious</span>.</span></li><li><span class=\"nl\"><span class=\"bd\">Delayed possession</span> (AKA <span class=\"bd\">reversionary leases</span>), where possession is from no fewer than <span class=\"bd\">three months</span> from the date of transfer &mdash; excluded for the same reason.</span></li><li><span class=\"nl\"><span class=\"ilc\">(some) <span class=\"bd\">social housing tenancies</span>, slipped into the list by the Localism Act 2011. Not on the syllabus.</span></span></li><li><span class=\"nl\"><span class=\"ilc\"><span class=\"bd\">PPP</span> (Private Public Partnership) leases.</span></span></li></ul>"
    ],
    "CATEGORY": "Overriding Interests",
    "AKA": "Legal Leases as OIs"
},
{
    "TYPE": "Concept",
    "NUMBER": "40",
    "RELATED": [
        "Overriding Interests at First Registration",
        "Overriding Interests at Transfer",
        "Schedule 3(2): Actual Occupation",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Overriding Interests - Overview",
        "Overreaching",
        "Easements - Creation",
        "Freehold Covenants - Benefit",
        "Tenancy in Common - Recognising",
        "Covenants - Overview",
        "Registered Protected Interests"
    ],
    "NAME": "Interests of Persons in Actual Occupation",
    "CATEGORIES": [
        "Overriding Interests"
    ],
    "SUMMARY": [
        "<span class=\"bd\"><span class=\"ud\"><span class=\"lnk caseln\">Schedule 3</span>(2)</span> &mdash; Interests of Persons in Actual Occupation</span>",
        "<ul><li><span class=\"nl\">This is about a <span class=\"bd\">situation</span>, rather than a right.</span></li><li><span class=\"nl\">Refer to the blackletter text in problem questions.</span></li><li><span class=\"nl\">The sense of &#8216;actual&#8217; is <span class=\"it\">more</span> like the French meaning, &#8216;at the current time,&#8217; than the English sense of &#8216;in fact,&#8217; but not entirely.</span></li></ul>",
        "<span class=\"bd\">The claimed right must</span> &mdash;",
        "<ul><li><span class=\"nl\"><span class=\"bd\">Exist</span>. Being in actual occupation <span class=\"it\">per se</span> does not give an overriding interest. What does is <span class=\"bd\">having an interest</span> and <span class=\"bd\">being in actual occupation</span>.</span><ul><li><span class=\"nl\">The mistake is made in the courts, notably <span class=\"lnk caseln\">Saeed v Plustrado</span> is <span class=\"it\">per incuriam</span> on this basis. Cf. <span class=\"lnk caseln\">Scott v Southern Pacific</span>, where the claim of Mrs. Scott, in actual occupation, fails as she has no property right.</span></li></ul><li><span class=\"nl\">Be <span class=\"bd\">valid</span> and enforceable <span class=\"bd\">immediately before the transfer</span>.</span><ul><li><span class=\"nl\">TODO more on this.</span></li></ul><li><span class=\"nl\">Not have been swept away by <span class=\"lnk caseln\">Overreaching</span> and transformed into <span class=\"bd\">money</span> &mdash; or, more usually, <span class=\"it\">bugger all</span>). See <span class=\"lnk caseln\">Overreaching</span>, S2 LPA, S20 LPA.</span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">City of London Building Society v Flegg</span>, in which equitable interest of the Fleggs was swept off the land by transfer to a mortgagee. Cf. <span class=\"lnk caseln\">Williams &amp; Glyns Bank v Boland</span>, in which there was no overreaching, as there was only a single trustee.</span></li></ul><li><span class=\"nl\">Not have been voluntarily <span class=\"bd\">yielded</span>, either:</span><ul><li><span class=\"nl\">Explicitly, e.g., by signing a form &mdash; <span class=\"lnk caseln\">RBS v Etridge</span>, or</span></li><li><span class=\"nl\">Implicitly, e.g., by involvement in creation of mortgage &mdash; <span class=\"lnk caseln\">Equity &amp; Home Loans v Prestridge</span>, <span class=\"lnk caseln\">Abbey National v Cann</span>.</span></li></ul><li><span class=\"nl\">Be <span class=\"lnk caseln\">Reasonably discoverable</span>, so the purchasor is not hoodwinked if he does not <span class=\"bd\">know</span> about the actual occupation.</span></li></ul>",
        "<span class=\"bd\">The claimant right must</span> &mdash;",
        "<ul><li><span class=\"nl\"><span class=\"bd\">Not</span> have <span class=\"bd\">given authority</span> to the transferror to act on their behalf.</span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Credit &amp; Mercantile v Wishart</span>, which will not go to appeal for wont of cash on the part of Mr. Wishart.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Be</span> in <span class=\"lnk caseln\">Actual Occupation</span> <span class=\"bd\">immediately before</span> the transfer &mdash; <span class=\"lnk caseln\">Abbey National v Cann</span>, confirmed by <span class=\"lnk caseln\">Scott v Southern Pacific Mortgages</span>.</span><ul><li><span class=\"nl\">Registration lags behind transfer by <span class=\"it\">three days</span>.</span></li></ul></ul>"
    ],
    "CATEGORY": "Overriding Interests",
    "AKA": "Actual Occupation"
},
{
    "TYPE": "Concept",
    "NUMBER": "41",
    "RELATED": [
        "Overriding Interests - Overview",
        "Overriding Interests at Transfer",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Interests of Persons in Actual Occupation",
        "Overriding Interests at First Registration",
        "Overreaching",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Formalities",
        "Personal Rights",
        "Equitable Shares of Co-ownership",
        "Land Registration - Theory",
        "Severance"
    ],
    "NAME": "Schedule 3(2): Actual Occupation",
    "CATEGORIES": [
        "Overriding Interests",
        "Overriding Interests",
        "Persons in Actual Occupation"
    ],
    "SUMMARY": [
        "<span class=\"bd\"><span class=\"ud\">Summary</span> &mdash; Schedule 3(2)</span><br>&emsp;&emsp;The person claiming the overriding interest must be in <span class=\"bd\">actual occupation</span>. This is interpreted broadly &mdash; <span class=\"lnk caseln\">Link Lending v Bustard</span>, and  must be <span class=\"bd\">obvious on a reasonably careful inspection</span>. The new RP must <span class=\"bd\">not have had knowledge</span> of the interest at the time of transfer. The claimant must have disclosed, if asked, when he could <span class=\"bd\">reasonably have been expected</span> to do so &mdash; <span class=\"lnk caseln\">Begum v Issa</span>.",
        "<span class=\"bd\"><span class=\"ud\">Actual Occupation</span> &mdash; Schedule 3(2)(c)(i)</span>",
        "<ul><li><span class=\"nl\">Quite a corpus of cases reveals the meaning to be not notably undersupplied with wiggle-room. In MD&#8217;s view, the open-endedness is deliberate. Cases where actual occupation have <span class=\"bd\">not</span> been found are few and far between. <span class=\"lnk caseln\">Thompson v Foy</span> and <span class=\"lnk caseln\">Chowdhary v Yavuz</span> are more the exception than the rule.</span></li><li><span class=\"nl\">It&#8217;s a question of quite subtly nuanced fact for each case &mdash; <span class=\"lnk caseln\">Lloyd&#8217;s Bank v Rossett</span>.</span></li><li><span class=\"nl\">Can be inferred from the presence of personal property on the land &mdash; <span class=\"lnk caseln\">Link Lending v Bustard</span>.</span></li><li><span class=\"nl\">It is <span class=\"bd\">not</span> the same as <span class=\"bd\">use</span>, e.g., of an easement &mdash; <span class=\"lnk caseln\">Chaudhary v Yavuz</span>.</span></li><li><span class=\"nl\">It <span class=\"bd\">may</span> be Leaving the property with the intention to return &mdash; <span class=\"lnk caseln\">Thompson v Foy</span>.</span></li><li><span class=\"nl\">It can be merely symbolic, e.g., the construction of a fence around some derelict land &mdash; <span class=\"lnk caseln\">Malory v Cheshire</span>.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Discoverable on a Reasonably Careful Inspection</span></span><br>This is an <span class=\"bd\">objective</span> criterion.",
        "<ul><li><span class=\"nl\">If the right is not known about by the purchasor, then to override it must have been  discover<span class=\"bd\">able</span> (cf. discover<span class=\"bd\">ed</span>) by a <span class=\"bd\">reasonably careful inspection of the land</span> at the <span class=\"bd\">time of disposition</span> &mdash; Schedule 3(2)(c)(i).</span></li><li><span class=\"nl\">Note <span class=\"lnk caseln\">Chhokar v Chhokar</span>.</span></li></ul>",
        "<span class=\"bd\"><span class=\"ud\">Knowledge of the OI</span> &mdash; Schedule 3(2)(c)(ii)</span><br>This adds a <span class=\"bd\">subjective</span> element. Note that it&#8217;s knowledge of the OI, not knowledge of the actual occupation.",
        "<span class=\"bd\"><span class=\"ud\">Disclosure by the claimant when <span class=\"it\">Reasonable</span></span> &mdash; Schedule 3(2)(b)</span>",
        "<ul><li><span class=\"nl\">The bit in italics must mean that in some circumstances, it&#8217;s reasonable to <span class=\"bd\">lie</span> about the right, or be <span class=\"bd\">ignorant</span> as to its existence.</span></li><li><span class=\"nl\">The utility of this clause is confirmed by <span class=\"lnk caseln\">Begum v Issa</span>, in which a Bangladeshi woman felt compelled by the collective glower of her family, when put on the spot at a family gathering, to act the submissive and subservient &#8220;traditional&#8221; wife (i.e., a piece of the husband&#8217;s personal property) and therefore, presumably, not be a source of &#8220;dishonour&#8221; (and therefore of course be fit to be disfigured or murdered.</span></li></ul>"
    ],
    "CATEGORY": "Overriding Interests / Overriding Interests &mdash; Persons in Actual Occupation",
    "AKA": "Reasonably Discoverable; Actual Occupation"
},
{
    "TYPE": "Concept",
    "NUMBER": "42",
    "RELATED": [
        "Interests of Persons in Actual Occupation",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Overreaching",
        "Schedule 3(2): Actual Occupation",
        "Overriding Interests - Overview",
        "Overriding Interests at Transfer",
        "Overriding Interests at First Registration",
        "Tenancy in Common - Recognising",
        "Freehold Covenants - Burden",
        "Property Rights - Gentle Intro",
        "Patterns of Facts in Rectification Cases",
        "Severance"
    ],
    "NAME": "Legal Easements as Schedule 3 Overriding Interests",
    "CATEGORIES": [
        "Overriding Interests"
    ],
    "SUMMARY": [
        "<span class=\"bd\"><span class=\"ud\">Summary</span> &mdash; Schedule 3(3)</span>",
        "<ul><li><span class=\"nl\">One of the worst-drafted provisions in the act, says MD, who thinks there&#8217;s a word missing &mdash; the word &#8216;not.&#8217;</span></li><li><span class=\"nl\">An implied legal easement overrides if (i) it&#8217;s a registered right of commons; it&#8217;s been (ii) used in the 12 months prior to transfer; (iii) it&#8217;s obvious on a reasonable inspection or (iv) is known to the new RP.<br>(At registration, all legal easements will be &#8220;picked up and put on the register&#8221; by the LR.)</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Conditions to Override</span></span><br>Implied <span class=\"bd\">legal</span> easements override if they&#8217;re:",
        "<ol><li><span class=\"nl\"><span class=\"bd\">A right of commons</span> on the commons act register.</span></li><li><span class=\"nl\">Has been <span class=\"bd\">used within the twelve months</span> preceeding transfer.</span><ul><li><span class=\"nl\">I.e., an easement for sewage would be used if someone <span class=\"it\">flushed the lavatory</span>; an easement for telephone cables would be used by <span class=\"it\">picking up the phone.</span> <span class=\"ilc\">Query whether this wouldn&#8217;t more normally be a wayleave</span></span></li></ul><li><span class=\"nl\">Is <span class=\"bd\">obvious on a reasonable inspection</span> &mdash; as for <span class=\"lnk caseln\">Actual Occupation</span>, or</span></li><li><span class=\"nl\">Is <span class=\"bd\">known</span> about by the new RP &mdash; idem.</span></li></ol>"
    ],
    "CATEGORY": "Overriding Interests"
},
{
    "TYPE": "Concept",
    "NUMBER": "43",
    "RELATED": [
        "Overriding Interests at First Registration",
        "Interests of Persons in Actual Occupation",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Overriding Interests at Transfer",
        "Overriding Interests - Overview",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Schedule 3(2): Actual Occupation",
        "Freehold Covenants - Benefit",
        "Conditions for Averse Possession",
        "Property Rights - Gentle Intro",
        "Adverse Possession",
        "Formality Rules - Legal"
    ],
    "NAME": "Overreaching",
    "CATEGORIES": [
        "Overreaching",
        "Overriding Interests",
        "Mortgages"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span><br>The very <span class=\"it\">2nd</span> of the 209 sections comprising the <span class=\"lnk caseln\">LPA 1925</span> provides that conveyance of legal title to a purchasor <span class=\"bd\">overreaches</span> certain <span class=\"bd\">equitable</span> interests in the land, as long as the transfer was made by trustee<span class=\"ud\">s</span> of a co-owned estate in the land.",
        "The concept wasn&#8217;t new in 1925; it operated and operates similarly on unregistered land. What it promotes is <span class=\"bd\">alienability</span>, by preventing land getting <span class=\"bd\">clogged-up</span>. And what goes hand in hand with that? Vast sums in stamp duty.",
        "<span class=\"bd\"><span class=\"ud\">Rationale</span></span><br>The <span class=\"it\">idea</span>, or maybe <span class=\"it\">doctrine</span>, or perhaps simply <span class=\"it\">legal fiction</span> underlying overreaching is that the overreached equitable property rights do not evaporate but are dislodged from the property right and attach instead to (a share of) the purchase money &mdash; which is held on trust for the beneficial owners, as was the beneficial ownership before the transaction that overreached it.",
        "This square peg cannot, needless to say, be rammed into the round hole of <span class=\"lnk caseln\">Sood</span> &mdash; in which there was <span class=\"it\">no purchase money</span>, but in which there was a massive great apple-cart imperatively not to be upset, the practice of remortgaging the family house to fund (or, as in <span class=\"lnk caseln\">Sood</span> itself secure the debts of) a small businss.",
        "<span class=\"ud\"><span class=\"bd\">Criticism</span></span>",
        "<ul><li><span class=\"nl\">At best, the conditions in which overreaching might be used necessitate  the holder of the overreached interest has <span class=\"bd\">not been informed</span> prior to the transfer*.</span><ul><li><span class=\"nl\">If they <span class=\"it\">had</span>, but they <span class=\"it\">hadn&#8217;t</span> protested, this would be implied consent, and their interest would not override.</span></li><li><span class=\"nl\">If they <span class=\"bd\">had protested</span>, then they could have stopped the transfer by, for instance, by entering a <span class=\"it\">Caution against Dealing</span> notice against the LR entry, which would have nixed the conveyance.</span></li></ul><li><span class=\"nl\">At worst, they imply the holder has been outright deceived.</span></li><li><span class=\"nl\">In all the cases, <span class=\"bd\">the money has gone</span>. So the idea that everything&#8217;s OK, as their property right has been magicked into a massive great wad of mortgage cash is cloud cuckoo Land Law.</span><ul><li><span class=\"nl\">E.g., the son and his missus in <span class=\"lnk caseln\">Flegg</span> who remortgaged the house behind the equitable owners&#8217; backs.</span></li></ul></ul>",
        "<span class=\"ud\"><span class=\"bd\">Conditions for Overreaching</span></span>",
        "<ol><li><span class=\"nl\">The equitable right must be <span class=\"bd\">capable</span> of being overreached. For GDL purposes, this means <span class=\"bd\">equitable co-ownership</span> behind a <span class=\"bd\">trust of land</span>.</span></li><li><span class=\"nl\">The trust must have <span class=\"bd\">at least two trustees</span>. I.e., the legal title of the transferror must have been held by <span class=\"bd\">more than one</span> co-owner.</span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Boland</span> has one O, <span class=\"lnk caseln\">Flegg</span> has two Gs.</span></li><li><span class=\"nl\">Don&#8217;t bother thinking too long or too hard about why there must be two.</span></li></ul><li><span class=\"nl\">Consideration for the transfer has to be paid to <span class=\"bd\">all</span> the trustees, if the &#8216;purchasor&#8217; gave money consideration at all &mdash; <span class=\"lnk caseln\">Sood</span>.</span></li></ol>"
    ],
    "CATEGORY": "Overreaching / Overriding Interests / Mortgages"
},
{
    "TYPE": "Case",
    "NUMBER": "44",
    "RELATED": [
        "Birmingham Midshires Morgages v Sabherwal",
        "Williams & Glyn's Bank v Boland",
        "City of London Building Society v Flegg",
        "Pye v Graham",
        "Fenn Tigers Case",
        "Equity & Home Loans v Prestridge",
        "Hounslow v Minchinton",
        "Wright v Macadam",
        "Moncreiff v Jamieson",
        "Copeland v Greenhalf",
        "Canham v Fisk",
        "Curley v Parkes"
    ],
    "NAME": "State Bank of India v Sood",
    "SUMMARY": [
        "The two trustees executed a charge against their title in favour of their bank, as security for their considerable personal and business debts, thereby, converting the debts into a mortgage. For this, no capital was received from the bank, which sought possession when they defaulted."
    ],
    "FLAGS": [
        "Key",
        "Peter Gibson"
    ],
    "AKA": "Sood",
    "YEAR": "1997",
    "CITATION": "State Bank of India v Sood [1997] Ch 276",
    "CATEGORIES": [
        "Overreaching",
        "Public Policy",
        "Mortgages"
    ],
    "HELD": [
        "A charge executed to secure existing debts: a mortgage where no money is received, <span class=\"it\">nevertheless</span> falls within the conditions provided by S2(1)(iii) and S27(2) of LPA 1925, and sweeps equitable shares of co-ownership off the land and into the purchase price."
    ],
    "CATEGORY": "Overreaching &mdash; Public Policy / Mortgages",
    "COMMENT": "Fairly obviously <span class=\"bd\">outside</span> the intention of LPA 1925, this is nevertheless pragmatic in its adjustment to modern circumstances. Grossly unfair to the parties whose equitable property rights were overreached into <span class=\"bd\">existing debt</span>, yes: but worse would be putting in jeopardy the availability of mortgages to owners of small businesses. <span class=\"ilc\">In my tutorial notes for this case I have &#8220;Pete Gibson, never forgiven by Simon Golding&#8217;s pupilmaster (!)&#8220;</span>"
},
{
    "TYPE": "Case",
    "NUMBER": "45",
    "RELATED": [
        "State Bank of India v Sood",
        "City of London Building Society v Flegg",
        "Williams & Glyn's Bank v Boland",
        "Curley v Parkes",
        "Wheeldon v Burrows",
        "Sovmots v Environment Secretary",
        "Jones v Kernott",
        "Chhokar v Chhokar",
        "Gissing v Gissing",
        "Zarb v Parry",
        "Bachelor v Marlowe",
        "Guy vs Barclay's"
    ],
    "NAME": "Birmingham Midshires Morgages v Sabherwal",
    "SUMMARY": [
        "A woman&#8217;s house &mdash; fucking stupidly &mdash; was in the name of her two sons. They mortgaged it to fund business interests and promptly defaulted. The bank sought possession; Mrs. S. claimed her financial contributions gave rise to an equitable interest and that she was in actual occupation, and so had an overriding interest. She claimed <span class=\"lnk caseln\">TOLATA 1996</span> was incompatible with the common law rule, and that her Article 8 rights had been breached. The bank said her interest, should it have existed, had been overreached \u00e0 la <span class=\"lnk caseln\">Flegg</span>."
    ],
    "CITATION": "Birmingham Midshires Mortgage Services Limited v Sabherwal [2000] 80 P&amp;CR 256",
    "AKA": "Sabherwal",
    "YEAR": "2000",
    "CATEGORIES": [
        "Overreaching",
        "Mortgages"
    ],
    "HELD": [
        "Even when the rule of <span class=\"lnk caseln\">Overreaching</span> of equitable interests in the family home &#8216;offends natural justice,&#8217; it must nevertheless be applied.",
        "Although clearly unhappy about it, the court could find no reason not to apply <span class=\"lnk caseln\">Flegg</span> &mdash; and find the mother&#8217;s equitable interest had been overreached by the transfer to the mortgagee, thereby transformed into a share of the mortgage capital."
    ],
    "CATEGORY": "Overreaching / Mortgages",
    "COURT": "EWCA"
},
{
    "TYPE": "Exam Advice",
    "NUMBER": "46",
    "RELATED": [
        "Formalities - Problem Questions",
        "Mistakes - Dealing with Problems"
    ],
    "NAME": "Overriding Interests - Problem Questions",
    "CATEGORIES": [
        "Overriding Interests",
        "Overreaching"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Checklist for S29 Transfer</span></span><br><span class=\"bd\">Scenario</span> &mdash; C claims an overriding interest in priority to the new registered proprietor, P.",
        "<ol><li><span class=\"nl\">Is the claimed right a <span class=\"bd\">lease</span>?</span><ol><li><span class=\"nl\">If so, is it <span class=\"bd\">legal</span> (and under 7 years)?</span></li><li><span class=\"nl\">Is it <span class=\"bd\">discontinuous</span> (a timeshare, or maybe a market stall?)</span><ol><li class=\"nonum\"><span class=\"nl\"><span class=\"it\">(or a PPP lease, or a social housing lease...)</span></span></li></ol><li><span class=\"nl\">Occupation due in <span class=\"bd\">fewer than 3 months</span>?</span></li></ol><li><span class=\"nl\">Is <span class=\"bd\">C</span> overreached?</span><ol><li><span class=\"nl\">Was the land transferred to P by two or more trustees? <span class=\"lnk caseln\">Flegg</span>.</span></li><li><span class=\"nl\">Or just <span class=\"bd\">one</span>? <span class=\"lnk caseln\">Boland</span>.</span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"it\">If</span></span> the transfer was to a mortgagee for a capital sum, did <span class=\"bd\">all</span> the trustees receive the money, as per S</span></li></ol><li><span class=\"nl\">Is <span class=\"bd\">C in actual occupation</span>? <span class=\"lnk caseln\">Link Lending</span>, <span class=\"lnk caseln\">Thompson v Foy</span>, <span class=\"lnk caseln\">Malory v Cheshire</span>.</span><ol><li><span class=\"nl\">Or is it really just <span class=\"bd\">use of an easement</span>? <span class=\"lnk caseln\">Chaudhary v Yavuz</span>.</span></li><li><span class=\"nl\"><span class=\"bd\">Is there a property right</span>? Or like <span class=\"lnk caseln\">Saeed v Plustrado</span>, just actual occupation? <span class=\"lnk caseln\">Scott v Southern Pacific Mortgages</span>.</span></li><li><span class=\"nl\"><span class=\"bd\">Did P know</span> of the <span class=\"bd\">right</span> claimed by C? (Not to be confused with <span class=\"it\">knowledge of the actual occupation</span>)</span></li><li><span class=\"nl\"><span class=\"bd\">Did C fail to disclose</span> the right to P when asked? Was it unreasonable to have expected them to? <span class=\"lnk caseln\">Begum v Issa</span></span></li><li><span class=\"nl\"><span class=\"bd\">Did C consent</span> to the transfer, explicitly? <span class=\"lnk caseln\">RBS v Etridge</span>. Implicitly? <span class=\"lnk caseln\">Abbey National v Cann</span>.</span></li><li><span class=\"nl\"><span class=\"bd\">Did C give authority</span> to the original RP to act on their behalf? <span class=\"lnk caseln\">Credit &amp; Mercantile v Wishart</span>.</span></li><li><span class=\"nl\">Is the <span class=\"bd\">right</span> <span class=\"lnk caseln\">Reasonably Discoverable</span>? But even so, is it like <span class=\"lnk caseln\">Chhokar</span>?</span></li></ol><li><span class=\"nl\">Is it an <span class=\"bd\">easement</span>?</span><ol><li><span class=\"nl\">Has it been used within the 12 months prior to the transfer?</span></li><li><span class=\"nl\">Is it obvious on a reasonable inspection (as above)?</span></li><li><span class=\"nl\">Is it known to the new RP?</span></li></ol></ol>"
    ],
    "CATEGORY": "Overriding Interests / Overreaching"
},
{
    "TYPE": "Case",
    "NUMBER": "47",
    "RELATED": [
        "RBS v Etridge",
        "Abbey National v Cann",
        "Equity & Home Loans v Prestridge",
        "Williams & Glyn's Bank v Boland",
        "Chaudhary v Yavuz",
        "Chhokar v Chhokar",
        "Scott v Southern Pacific Mortgages",
        "Credit & Mercantile v Wishart",
        "Begum v Issa",
        "City of London Building Society v Flegg",
        "Link Lending v Bustard",
        "Thompson v Foy"
    ],
    "NAME": "Saeed v Plustrado",
    "CATEGORIES": [
        "Overriding Interests",
        "Persons in Actual Occupation"
    ],
    "FLAGS": [
        "Overruled",
        "Key"
    ],
    "CATEGORY": "Overriding Interests &mdash; Persons in Actual Occupation",
    "HELD": [
        "The claim of an overriding interest succeeded on the grounds that the claimant was a person in actual occupation. Decided per incuriam on a misunderstanding of <span class=\"lnk caseln\">Schedule 3</span>(2) &mdash; overruled in <span class=\"lnk caseln\">Scott v Southern Pacific Mortgages</span>."
    ]
},
{
    "TYPE": "Case",
    "NUMBER": "48",
    "RELATED": [
        "Chaudhary v Yavuz",
        "RBS v Etridge",
        "Equity & Home Loans v Prestridge",
        "Williams & Glyn's Bank v Boland",
        "Credit & Mercantile v Wishart",
        "Begum v Issa",
        "City of London Building Society v Flegg",
        "Saeed v Plustrado",
        "Chhokar v Chhokar",
        "Abbey National v Cann",
        "Thompson v Foy",
        "Link Lending v Bustard"
    ],
    "NAME": "Scott v Southern Pacific Mortgages",
    "CATEGORIES": [
        "Overriding Interests",
        "Persons in Actual Occupation"
    ],
    "FLAGS": [
        "Essential"
    ],
    "CATEGORY": "Overriding Interests &mdash; Persons in Actual Occupation",
    "HELD": [
        "The claimant had no interest in the property. Being in actual occupation did not per se create a Schedule 3(2) overriding interest."
    ]
},
{
    "TYPE": "Case",
    "NUMBER": "49",
    "RELATED": [
        "Williams & Glyn's Bank v Boland",
        "Begum v Issa",
        "Saeed v Plustrado",
        "RBS v Etridge",
        "Credit & Mercantile v Wishart",
        "Chaudhary v Yavuz",
        "Equity & Home Loans v Prestridge",
        "Scott v Southern Pacific Mortgages",
        "Abbey National v Cann",
        "Chhokar v Chhokar",
        "State Bank of India v Sood",
        "Link Lending v Bustard"
    ],
    "NAME": "City of London Building Society v Flegg",
    "SUMMARY": [
        "An elderly couple had sold their house and given the money to their son and his wife, to buy a larger house for all four of them. The solicitor had advised that all four should share legal title in joint ownership, but only the son and his wife did. The son and his wife remortgaged without the parents&#8217; consent &mdash; the bank sought possession."
    ],
    "CITATION": "City of London Building Society v Flegg [1987] UKHL 6",
    "AKA": "Flegg",
    "YEAR": "1987",
    "WIKILINK": [
        "https://en.wikipedia.org/wiki/City_of_London_Building_Society_v_Flegg"
    ],
    "FLAGS": [
        "Essential"
    ],
    "CATEGORIES": [
        "Overriding Interests",
        "Persons in Actual Occupation",
        "Overreaching"
    ],
    "HELD": [
        "The equitable interests of the parents had been overreached by the bank, as the two trustees, the RPs, had extinguished the parents&#8217; equitable interest by conveying the property to the bank. Cf. <span class=\"lnk caseln\">Williams &amp; Glyns Bank v Boland</span>."
    ],
    "CATEGORY": "Overriding Interests &mdash; Persons in Actual Occupation / Overreaching"
},
{
    "TYPE": "Case",
    "NUMBER": "50",
    "RELATED": [
        "City of London Building Society v Flegg",
        "Begum v Issa",
        "Credit & Mercantile v Wishart",
        "Chhokar v Chhokar",
        "Scott v Southern Pacific Mortgages",
        "Chaudhary v Yavuz",
        "Saeed v Plustrado",
        "RBS v Etridge",
        "Equity & Home Loans v Prestridge",
        "Abbey National v Cann",
        "Link Lending v Bustard",
        "Thompson v Foy"
    ],
    "NAME": "Williams & Glyn's Bank v Boland",
    "SUMMARY": [
        "Mr. Boland, the sole RP, had taken out a mortgage for his business: he defaulted. The bank sought possession, but Mrs. Boland claimed that as she&#8217;d made substantial financial contributions, she had an equitable share of co-ownership, and was in actual occupation.",
        "At first instance, she was found merely to be accompanying the sole RP&#8217;s actual occupation. On appeal, Lord Denning MR decried the <span class=\"it\">stripping bare</span>  of the spouse in <span class=\"lnk caseln\">National Provincial Bank v Ainsworth</span> and held that two persons can be jointly or severally in actual occupation."
    ],
    "FLAGS": [
        "Essential",
        "Denning"
    ],
    "AKA": "Boland",
    "YEAR": "1980",
    "CITATION": "Williams &amp; Glyn&#8217;s Bank v Boland [1980] UKHL 4",
    "CATEGORIES": [
        "Overriding Interests",
        "Persons in Actual Occupation",
        "Overreaching",
        "Failure to Overreach"
    ],
    "HELD": [
        "Overriding interests cannot be overreached when there is a single trustee/registered proprietor.",
        "Lord Wilberforce &mdash; &#8216;... as Lord Denning MR points out, to describe the interests of spouses in a house jointly bought to be lived in as a matrimonial home as merely an interest in proceeds of sale, or rents and profits until sale, <span class=\"bd\">is just a little unreal</span> ...&#8217;"
    ],
    "CATEGORY": "Overriding Interests &mdash; Persons in Actual Occupation / Overreaching &mdash; Failure to Overreach"
},
{
    "SUMAMRY": "Mrs. Foy had buggered off to start a new life in Spain. But she intended to return. She claimed an overriding interest, and that she was in actual occupation by virtue of her intention to return.",
    "TYPE": "Case",
    "NUMBER": "51",
    "RELATED": [
        "Link Lending v Bustard",
        "RBS v Etridge",
        "Williams & Glyn's Bank v Boland",
        "Scott v Southern Pacific Mortgages",
        "City of London Building Society v Flegg",
        "Credit & Mercantile v Wishart",
        "Chaudhary v Yavuz",
        "Abbey National v Cann",
        "Saeed v Plustrado",
        "Equity & Home Loans v Prestridge",
        "Chhokar v Chhokar",
        "Begum v Issa"
    ],
    "NAME": "Thompson v Foy",
    "FLAGS": [
        "Key",
        "Recent"
    ],
    "YEAR": "2009",
    "CATEGORIES": [
        "Overriding Interests",
        "Meaning of Actual Occupation"
    ],
    "HELD": [
        "Leaving property temporarily, with the intention of returning, counts as actual occupation for Schedule 3(2).",
        "Lewison J &mdash; Where actual occupation is replied on as causing the interest to affect the estate, this suggests that there must be actual occupation both at the date of the disposition and also at the time of registration. Paragraph 2 of Schedule 3 begins with the words: &#8220;An interest belonging at the time of the disposition to a person in actual occupation&#8221;. If it had been intended that actual occupation at the time of the disposition was the sole criterion, the phrase would more naturally have read: &#8220;An interest belonging to a person in actual occupation at the time of the disposition"
    ],
    "CATEGORY": "Overriding Interests &mdash; Meaning of Actual Occupation"
},
{
    "TYPE": "Case",
    "NUMBER": "52",
    "RELATED": [
        "Thompson v Foy",
        "RBS v Etridge",
        "Credit & Mercantile v Wishart",
        "Begum v Issa",
        "Williams & Glyn's Bank v Boland",
        "City of London Building Society v Flegg",
        "Chaudhary v Yavuz",
        "Abbey National v Cann",
        "Saeed v Plustrado",
        "Scott v Southern Pacific Mortgages",
        "Chhokar v Chhokar",
        "Equity & Home Loans v Prestridge"
    ],
    "NAME": "Link Lending v Bustard",
    "FLAGS": [
        "Key",
        "Recent"
    ],
    "AKA": "Bustard; Link Lending",
    "YEAR": "2010",
    "CATEGORIES": [
        "Overriding Interests",
        "Meaning of Actual Occupation",
        "Actual Occupation Immediately Before Conveyance"
    ],
    "HELD": [
        "Inter alia, the presence of personal property is evidence from which actual occpuation can be found. The old lady was in fact in a care home, but her personal property was still in on the land in question, to which she returned from time to time."
    ],
    "CATEGORY": "Overriding Interests &mdash; Meaning of Actual Occupation &mdash; Actual Occupation Immediately Before Conveyance"
},
{
    "TYPE": "Case",
    "NUMBER": "53",
    "RELATED": [
        "Equity & Home Loans v Prestridge",
        "Abbey National v Cann",
        "Saeed v Plustrado",
        "Scott v Southern Pacific Mortgages",
        "City of London Building Society v Flegg",
        "Williams & Glyn's Bank v Boland",
        "Chhokar v Chhokar",
        "Chaudhary v Yavuz",
        "Credit & Mercantile v Wishart",
        "Begum v Issa",
        "Thompson v Foy",
        "Link Lending v Bustard"
    ],
    "NAME": "RBS v Etridge",
    "CATEGORIES": [
        "Overriding Interests",
        "Persons in Actual Occupation",
        "Yielding of Right",
        "Explicit"
    ],
    "HELD": [
        "The claimant of an overriding interest over a new registered proprietor is deemed to have yielded the right by signing a consent form, e.g., to a bank, for a mortgage."
    ],
    "CATEGORY": "Overriding Interests &mdash; Persons in Actual Occupation &mdash; Yielding of Right &mdash; Explicit"
},
{
    "TYPE": "Case",
    "NUMBER": "54",
    "RELATED": [
        "Abbey National v Cann",
        "RBS v Etridge",
        "Scott v Southern Pacific Mortgages",
        "Chhokar v Chhokar",
        "Williams & Glyn's Bank v Boland",
        "City of London Building Society v Flegg",
        "Chaudhary v Yavuz",
        "Saeed v Plustrado",
        "Credit & Mercantile v Wishart",
        "Begum v Issa",
        "Link Lending v Bustard",
        "Thompson v Foy"
    ],
    "NAME": "Equity & Home Loans v Prestridge",
    "CATEGORIES": [
        "Overriding Interests",
        "Persons in Actual Occupation",
        "Yielding of Right",
        "Implied"
    ],
    "HELD": [
        "Involvement in the creation of a mortgage was deemed to be a waiver of of an overriding interest in favour of the new RP, the mortgagee."
    ],
    "CATEGORY": "Overriding Interests &mdash; Persons in Actual Occupation &mdash; Yielding of Right &mdash; Implied",
    "AKA": "Equity v Prestridge"
},
{
    "TYPE": "Case",
    "NUMBER": "55",
    "RELATED": [
        "Equity & Home Loans v Prestridge",
        "RBS v Etridge",
        "Chhokar v Chhokar",
        "City of London Building Society v Flegg",
        "Credit & Mercantile v Wishart",
        "Begum v Issa",
        "Saeed v Plustrado",
        "Chaudhary v Yavuz",
        "Scott v Southern Pacific Mortgages",
        "Williams & Glyn's Bank v Boland",
        "Thompson v Foy",
        "Link Lending v Bustard"
    ],
    "NAME": "Abbey National v Cann",
    "SUMMARY": [
        "A mother and son had both contributed to the purchase of a house in the son&#8217;s name. They then moved to a more expensive property for which the mother consented to a mortgage of \u00a34K from Abbey National. The son also took out a further mortgage of \u00a325K about which she remained in ignorance. The mortgage of \u00a34K defaulted; the bank sought possession.<br>The mother had started to move <span class=\"it\">carpets</span> in, 35 minutes (!) before completion. On this basis, she claimed she was in actual occupation in priority to the bank&#8217;s charge, which came later."
    ],
    "CITATION": "Abbey National Building Society v Cann [1990] UKHL 3",
    "YEAR": "1990",
    "WIKILINK": [
        "https://en.wikipedia.org/wiki/Abbey_National_Building_Society_v_Cann"
    ],
    "CATEGORIES": [
        "Overriding Interests",
        "Persons in Actual Occupation",
        "Yielding of Right",
        "Implied"
    ],
    "HELD": [
        "Actual occupation is distinct to <span class=\"bd\">acts of preparation</span> for actual occupation. Involvement in a transfer (e.g., the creation of a mortgage) by the claimant of an OI in actual occupation has the effect of a waiver to the right."
    ],
    "CATEGORY": "Overriding Interests &mdash; Persons in Actual Occupation &mdash; Yielding of Right &mdash; Implied"
},
{
    "TYPE": "Case",
    "SUMMARY": [
        "Mr. Wishart had a lease, but was not &#8216;discovered&#8217; by the surveyor, as he thought he was a <span class=\"it\">builder</span>. The bank claimed he had ceded authority to the transferror, who in fact had secured the mortgage to pay off his gambling debts. (Once alleged, the claim that he had somehow communicated with the transferror was hard to disprove)."
    ],
    "NUMBER": "56",
    "RELATED": [
        "Scott v Southern Pacific Mortgages",
        "Equity & Home Loans v Prestridge",
        "Chaudhary v Yavuz",
        "Begum v Issa",
        "Saeed v Plustrado",
        "Williams & Glyn's Bank v Boland",
        "Chhokar v Chhokar",
        "Abbey National v Cann",
        "City of London Building Society v Flegg",
        "RBS v Etridge",
        "Link Lending v Bustard",
        "Thompson v Foy"
    ],
    "NAME": "Credit & Mercantile v Wishart",
    "CATEGORIES": [
        "Overriding Interests",
        "Persons in Actual Occupation",
        "Delegation of Right"
    ],
    "HELD": [
        "A property right of a person in actual occupation will not override under Schedule 3(2) when the person claiming it has (implicitly) given authority to the original RP to act on his behalf."
    ],
    "CATEGORY": "Overriding Interests &mdash; Persons in Actual Occupation &mdash; Delegation of Right",
    "COMMENT": "This seems spurious as hell. Why didn&#8217;t C&amp;M just sue the surveyor, who presumably would have been insured against prof. neg.?"
},
{
    "TYPE": "Case",
    "NUMBER": "57",
    "RELATED": [
        "Abbey National v Cann",
        "City of London Building Society v Flegg",
        "RBS v Etridge",
        "Chhokar v Chhokar",
        "Saeed v Plustrado",
        "Equity & Home Loans v Prestridge",
        "Begum v Issa",
        "Scott v Southern Pacific Mortgages",
        "Credit & Mercantile v Wishart",
        "Williams & Glyn's Bank v Boland",
        "Link Lending v Bustard",
        "Thompson v Foy"
    ],
    "NAME": "Chaudhary v Yavuz",
    "CATEGORIES": [
        "Overriding Interests",
        "Persons in Actual Occupation",
        "Occupation or Use"
    ],
    "HELD": [
        "The use of an <span class=\"lnk caseln\">easement</span> is not <span class=\"bd\">actual occupation</span> under Schedule 3(2)."
    ],
    "CATEGORY": "Overriding Interests &mdash; Persons in Actual Occupation &mdash; Occupation or Use"
},
{
    "TYPE": "Case",
    "NUMBER": "58",
    "RELATED": [
        "Equity & Home Loans v Prestridge",
        "RBS v Etridge",
        "Williams & Glyn's Bank v Boland",
        "Chaudhary v Yavuz",
        "Abbey National v Cann",
        "Begum v Issa",
        "Saeed v Plustrado",
        "Scott v Southern Pacific Mortgages",
        "City of London Building Society v Flegg",
        "Credit & Mercantile v Wishart",
        "Link Lending v Bustard",
        "Thompson v Foy"
    ],
    "NAME": "Chhokar v Chhokar",
    "SUMMARY": [
        "The husband, evidently a complete bastard, erased all trace of his from the family home whilst she was <span class=\"bd\">in hospital giving birth</span>, in order to prevent her overriding interest from being reasonably discoverable to a purchasor."
    ],
    "CITATION": "Chhokar v Chhokar [1984] FLR 313",
    "AKA": "Chhokar",
    "YEAR": "1984",
    "WIKILINK": [
        "https://en.wikipedia.org/wiki/Chhokar_v_Chhokar"
    ],
    "CATEGORIES": [
        "Overriding Interests",
        "Persons in Actual Occupation",
        "Reasonable Discoverability"
    ],
    "HELD": [
        "The claim of an overriding interest will succeed, if its lack of reasonable discoverability on a careful inspection comes about through the transferor&#8217;s malice.  Of the transferee &mdash; &#8216;everything he did from first to last in connection with the transaction is stamped with immoral stigma.&#8217;"
    ],
    "CATEGORY": "Overriding Interests &mdash; Persons in Actual Occupation &mdash; Reasonable Discoverability"
},
{
    "TYPE": "Case",
    "SUMMARY": [
        "A woman who, at least according to the topsy-turvey moral universe into which she was unlucky enough to have been born, <span class=\"it\">knew her place</span> but clearly didn&#8217;t like it, claimed an overriding interest. When challenged at a family do, and presumably with various assorted cousins etc glowering on, she&#8217;d explicitly denied having any such right."
    ],
    "NUMBER": "59",
    "RELATED": [
        "Chaudhary v Yavuz",
        "Equity & Home Loans v Prestridge",
        "City of London Building Society v Flegg",
        "RBS v Etridge",
        "Williams & Glyn's Bank v Boland",
        "Saeed v Plustrado",
        "Chhokar v Chhokar",
        "Credit & Mercantile v Wishart",
        "Abbey National v Cann",
        "Scott v Southern Pacific Mortgages",
        "Link Lending v Bustard",
        "Thompson v Foy"
    ],
    "NAME": "Begum v Issa",
    "CATEGORIES": [
        "Overriding Interests",
        "Persons in Actual Occupation",
        "Requirement to Disclose when Reasonable"
    ],
    "HELD": [
        "It may not be reasonable to expect a right-holder to disclose rights to a purchasor, in the meaning of Schedule 3(2)(b) LRA 2002, when doing so could lead to potentially-violent retribution."
    ],
    "CATEGORY": "Overriding Interests &mdash; Persons in Actual Occupation &mdash; Requirement to Disclose when Reasonable"
},
{
    "TYPE": "Concept",
    "NUMBER": "60",
    "RELATED": [
        "Overriding Interests at Transfer",
        "Title Guarantee",
        "Freehold Covenants - Benefit",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Personal Rights",
        "Covenants - Overview",
        "Joint Tenancy and Tenancy in Common",
        "Interests of Persons in Actual Occupation",
        "Easements",
        "Formality Rules - Legal",
        "Electronic Conveyancing",
        "Property Rights - Gentle Intro"
    ],
    "NAME": "Registered Protected Interests",
    "CATEGORIES": [
        "Registered Protected Interests"
    ],
    "SUMMARY": [
        "<span class=\"bd\"><span class=\"ud\">Intro</span></span><br><span class=\"lnk caseln\">S29 LRA</span> provides that the transferee for value of a registered disposition takes the land free of every obligation except <span class=\"lnk caseln\">Overriding Interests</span> and <span class=\"bd\">things on the register</span>. This means <span class=\"bd\">Registered Protected Interests</span>, RPIs, and was the big innovation of the <span class=\"lnk caseln\">LRA 2002</span>.",
        "The basic proposition is this &mdash; <span class=\"bd\">(i)</span> rights should be registered; and <span class=\"bd\">(ii)</span> by virtue of registration, they are <span class=\"bd\">protected</span>.",
        "For titles and mortgages, the registration is what <span class=\"bd\">creates</span> the right. RPIs, on the other hand, are rights <span class=\"bd\">already in existence</span>. Putting them on the register merely <span class=\"bd\">protects</span> them.",
        "This is where <span class=\"bd\">third party</span> rights are to be found &mdash; short term leases, mortgages, etc. They&#8217;re entered by the right-holder, and not the title-holder.",
        "<span class=\"ud\"><span class=\"bd\">Scope</span></span>",
        "Every type of property right apart from those which must be registered under <span class=\"lnk caseln\">S29 LRA</span> can be an RPI. They&#8217;re listed in <span class=\"lnk caseln\">S38 LRA</span>. We&#8217;re interested in <span class=\"it\">three</span> &mdash;",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Interests behind <span class=\"lnk caseln\">Trusts of Land</span></span></span><ul><li><span class=\"nl\">X is the RP, but holds the land on trust for X and Y, e.g., himself and his wife.</span></li><li><span class=\"nl\">They&#8217;re designed with <span class=\"lnk caseln\">Overreaching</span> in mind. Y&#8217;s right isn&#8217;t <span class=\"it\">meant</span> to bite the land, for the sake of maintaining its alienability.<br><span class=\"it\">N.B., in this example, Y&#8217;s interest may in fact be an <span class=\"lnk caseln\">Overriding Interest</span>, and so </span>not<span class=\"it\"> overreachable.</span></span><ul><li><span class=\"nl\"><span class=\"ilc\">Exam advice: don&#8217;t make the mistake of stating that you can register a share of co-ownership. Don&#8217;t do this, because you <span class=\"it\">can\u2019t</span>, and saying so means you\u2019ve understood, essentially, <span class=\"it\">fuck all</span>.</span></span></li></ul></li></ul><li><span class=\"nl\"><span class=\"bd\">Leases of One Year or Less</span></span><ul><li><span class=\"nl\">Either <span class=\"bd\">legal</span>, overriding under <span class=\"lnk caseln\">Schedule 3</span>(1), or <span class=\"bd\">equitable</span>, overriding (if in actual occupation) under <span class=\"lnk caseln\">Schedule 3</span>(2).</span></li></ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"it\">Leasehold</span> covenants</span></span><ul><li><span class=\"nl\">E.g., an obligation to pay rent; to maintain in a certain state of repair; not use in a certain way; not to alienate by subletting or selling.<br>(Cf. <span class=\"lnk caseln\">Freehold Covenants</span>, which <span class=\"it\">should</span> be registered.)</span></li><li><span class=\"nl\">These things are agreed as a matter of contract for <span class=\"it\">short</span> leases.</span></li><li><span class=\"nl\">But what happens if tenant sells the lease to T2, and the landlord then sells the freehold to L2.</span><ul><li><span class=\"nl\">Do the leasehold covenants still bind T2 and L2?  Will they <span class=\"it\">run with</span> the land?<br><span class=\"ilc\">This is regulated by the <span class=\"lnk caseln\">Landlord and Tenant (Covenants) Act 1995</span>. Whilst this is <span class=\"it\">technically</span> on the syllabus, don&#8217;t be surprised if it&#8217;s <span class=\"it\">not</span> in the exam, simply because it takes about ten hours to explain to pupils at Falcon, Wilberforce, Serle Court and Landmark, let alone a bunch of sullen GDL students</span></span></li></ul></ul></ol>",
        "<span class=\"ud\"><span class=\"bd\">Registration of Protected Interests &mdash; Notices</span></span><br>These are either <span class=\"bd\">unilateral</span> or <span class=\"bd\">agreed</span>. Both offer the same protection, a unilateral Notice is not <span class=\"it\">weaker</span>.",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Agreed Notices</span></span><ul><li><span class=\"nl\">They <span class=\"bd\">contain the details</span> of the right.</span></li><li><span class=\"nl\">They may be arranged between parties, <span class=\"it\">or</span> may be imposed by court order.</span></li><li><span class=\"nl\">They cannot subsequently be challenged, but can be removed on expiration.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Unilateral Notices</span>~</span><ul><li><span class=\"nl\">They <span class=\"bd\">merely contain the fact</span> of the right.</span></li><li><span class=\"nl\">Subject a plausible prima facie justification, the Notice is (i) entered on the register; and (ii) the title-holder is informed.</span></li><li><span class=\"nl\">In response they may then ask for the Notice to be <span class=\"it\">vacated</span>.</span></li><li><span class=\"nl\">But between (i) and the response to (ii), if any, the right is legally protected.</span></li></ul><li class=\"nonum\"><span class=\"nl\">N.B.: <span class=\"it\">Commercial situations in which the protection afforded by a Notice is desirable, but the disclosure of details entailed by an Agreed Notice is </span>not_, there may be contractual terms  stipulating the use of a Unilateral Notice &mdash; or precluding making an entry.</span></li></ol><ul></li><li><span class=\"nl\">E.g., Duke of Westminster shopping centre scenario, in which, to avoid the each short-term lessee knowing the terms of each other&#8217;s terms and rent. So unilateral notices don\u2019t necessarily mean a dispute._</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Registration of Protected Interests &mdash; Restrictions</span></span><br>These don&#8217;t protect a right; they inhibit the RP from something.",
        "<ul><li><span class=\"nl\">By consequence this may of course amount to an indirect protection of rights. A Restriction on <span class=\"it\">sale</span> would preclude a right-holder losing out in an S29 priority dispute.</span><ul><li><span class=\"nl\">E.g., an equitable <span class=\"it\">option</span> is granted (i.e., by <span class=\"it\">deed</span>) for five years.</span></li><li><span class=\"nl\">This could be registered as an Agreed Notice.</span></li><li><span class=\"nl\">But should you want to keep the price confidential, the better bet would be to apply for a Restriction on the title preventing <span class=\"it\">sale</span> without your consent, instead.</span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Mortgagees</span> sometimes (irrelevantly) put these on your land.</span></li></ul></ul></ul>",
        "By contrast to Notices, anyone can apply for a Restriction on a title, not just those with property rights."
    ],
    "CATEGORY": "Registered Protected Interests",
    "AKA": "RPIs"
},
{
    "TYPE": "Statute",
    "NUMBER": "61",
    "RELATED": [
        "Schedule 4 LRA 2002",
        "S28 LRA 2002",
        "Schedule 8 LRA 2002",
        "S29 LRA 2002",
        "Schedule 6 LRA 2002",
        "S75 LRA 1925",
        "S1 LPA 1925",
        "Schedule 12 LRA 2002",
        "Schedule 3 LRA 2002",
        "S58 LRA 2002"
    ],
    "NAME": "S27 and S38 LRA 2002",
    "CATEGORIES": [
        "Registration",
        "Registered Protected Interests"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">S27(1) and (2) &mdash; Dispositions required to be registered</span></span>",
        "<ol><li><span class=\"nl\">If a disposition of a registered estate or registered charge is required to be completed by registration, it does not operate at law until the relevant registration requirements are met.</span></li><li><span class=\"nl\">In the case of a registered estate, the following are the dispositions which are required to be completed by registration\u2014-</span><ol><li><span class=\"nl\">a transfer,</span></li><li><span class=\"nl\">where the registered estate is an estate in land, the grant of a term of years absolute\u2014</span><ol><li><span class=\"nl\">for a term of more than seven years from the date of the grant,</span></li><li><span class=\"nl\">to take effect in possession after the end of the period of three months beginning with the date of the grant,</span></li><li><span class=\"nl\">under which the right to possession is discontinuous,</span></li><li><span class=\"nl\">in pursuance of Part 5 of the Housing Act 1985 (c. 68) (the right to buy), or</span></li><li><span class=\"nl\">in circumstances where section 171A of that Act applies (disposal by landlord which leads to a person no longer being a secure tenant),</span></li></ol><li><span class=\"nl\">where the registered estate is a franchise or manor, the grant of a lease,</span></li><li><span class=\"nl\">the express grant or reservation of an interest of a kind falling within of <span class=\"lnk caseln\">LPA 1925 S1</span>(2)(a), other than one which is capable of being registered under Part 1 of the Commons Act 2006,</span></li><li><span class=\"nl\">the express grant or reservation of an interest of a kind falling within <span class=\"lnk caseln\">LPA 1925 S1</span>(2)(b) or (e)</span></li><li><span class=\"nl\">the grant of a legal charge.</span></li></ol></ol>",
        "<span class=\"bd\">S38 &mdash; Registrable dispositions</span><br>Where a person is entered in the register as the proprietor of an interest under a disposition falling within section <span class=\"bd\">27(2)(b) to (e)</span>, the registrar must also <span class=\"bd\">enter a notice in the register in respect of that interest</span>."
    ],
    "CATEGORY": "Registration &mdash; Registered Protected Interests",
    "LINK": [
        "S37 http://www.legislation.gov.uk/ukpga/2002/9/section/27",
        "S38 http://www.legislation.gov.uk/ukpga/2002/9/section/38"
    ],
    "AKA": "S38 LRA; S27 LRA"
},
{
    "TYPE": "Concept",
    "NUMBER": "62",
    "RELATED": [
        "Circumstances for Adverse Possession",
        "Conditions for Averse Possession",
        "Property Rights",
        "Registered Protected Interests",
        "Electronic Conveyancing",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Equitable Shares of Co-ownership",
        "Personal Rights",
        "Severance",
        "Easements - Creation",
        "Formality Rules - Legal",
        "Joint Tenancy and Tenancy in Common"
    ],
    "NAME": "Adverse Possession",
    "CATEGORIES": [
        "Adverse Possession"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Summary</span></span><br>Also spelled &#8216;squatting.&#8217; Acquisition of title by long use or control.",
        "Most successful adverse possessors are white, middle-class folk, although not the dreadlocks-and-weed type of white middle-class folk you might imagine. <span class=\"lnk caseln\">Pye v Graham</span>, <span class=\"lnk caseln\">Zarb v Parry</span>.",
        "It may impress or disgust as deeply pretentious to state, in an exam, &#8216;<span class=\"lnk gsln\">nec vi, nec clam, nec precario</span>&#8216;.",
        "The AP&#8217;s occupation may well be <span class=\"it\">deliberate</span> occupation of land to which they <span class=\"it\">knew they had no right</span>.  No matter.  AP works like <span class=\"lnk caseln\">proprietary estoppel</span> gone to the bad &mdash; it stops the paper RP from enforcing their right of possession against the AP.",
        "<ul><li><span class=\"nl\">Hence its infrequently-used name &#8216;limitation of <span class=\"ilc\">TODO what?!</span>.&#8217;</span></li></ul>",
        "The AP gains has a seaworthy property right that they can sell, inherit, register, etc, like any other. Or on which they can gain a possession order <span class=\"it\">against the registered proprietor</span>.",
        "The three <span class=\"lnk caseln\">conditions for adverse possession</span> are:<br>&emsp;&emsp; 1. <span class=\"bd\">control</span> of the land: <span class=\"lnk caseln\">Pye v Graham</span>, <span class=\"lnk caseln\">Red House v Catchpole</span> &mdash; 2. <span class=\"bd\">intention to possess</span>: <span class=\"lnk caseln\">Bucks v Moran</span> &mdash; 3. <span class=\"bd\">not accepting permission</span>, if offered.",
        "The three sets of <span class=\"lnk caseln\">circumstances for adverse possession</span> are:<br>&emsp;&emsp; 1. <span class=\"bd\">unregistered</span> land &mdash; 2. registered land with adverse possession of <span class=\"bd\">12 years before 13th Oct 2013</span> &mdash; 3. idem with 10 years <span class=\"bd\">ending after</span> that date.",
        "<ul><li><span class=\"nl\">To which, three exceptions:<br>&emsp;&emsp;(a) <span class=\"bd\">honest and reasonable boundary disputes</span> (<span class=\"lnk caseln\">Zarb v Parry</span>) &mdash; (b) <span class=\"bd\">estoppel</span> and, spuriously &mdash; (c) <span class=\"bd\">&#8220;other reasons&#8221;</span>.</span></li></ul>",
        "A clear policy goal of <span class=\"lnk caseln\">LRA 2002</span> was to make it vanishingly difficult for squatters to gain possession. In this it largely succeeded.",
        "<ul><li><span class=\"nl\">S15 of the <span class=\"lnk caseln\">Limitation Act 1980</span> (codifying the common law) had the length of use at <span class=\"bd\">12 years</span>, and there was no notification of the original RP.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Schedule 6</span>(1)(1) allows registration after <span class=\"bd\">10 years</span>, but with a subsequent <span class=\"bd\">2 years</span> for the original RP to object and regain possession</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Attributes of AP</span></span><br>It is:",
        "<ul><li><span class=\"nl\">Rooted in the organic and uncontrived nature of land law.</span></li><li><span class=\"nl\">An instance of land law having: followed and <span class=\"it\">formalised how people behave in practice</span>, rather than how they should, thereby <span class=\"it\">making best use of a scarce resource</span>, land, and; arbitrating legal disputes for which not much external or documentary evidence could be produced.</span></li><li><span class=\"nl\">Historically then, it had a weighty practical justification.</span></li><li><span class=\"nl\">Consistent with European HR law according to the Grand Chamber in <span class=\"lnk caseln\">Pye v UK</span>, because:</span><ul><li><span class=\"nl\">AP is in the public interest, and within the &#8216;margin of appreciation&#8217;.<br>(Although n.b., the First Tier chamber <span class=\"it\">had</span> found squatting to be a breach.)</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Powerful</span>. The English Common Law version being the <span class=\"it\">most</span> powerful.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Criminal Offence</span></span><br>In certain circumstances, AP of <span class=\"it\">residential</span> property is an offence attracting a \u00a35K fine, or up to 51 weeks in jail.",
        "<ul><li><span class=\"nl\">Parliament buried this deep within <span class=\"lnk caseln\">LAPSO 2012</span>, after a whole 90 minutes of late-night debate.</span></li><li><span class=\"nl\">It&#8217;s retroactive, affecting APs in possession on the day the law came into force.</span></li></ul>",
        "Potentially, you could go to jail for this but nevertheless gain the title by AP.",
        "<ul><li><span class=\"nl\"><span class=\"lnk caseln\">Best v Chief Land Registrar</span>, in which the LR had refused to register, on principle of <span class=\"it\">ex turpi causa</span>.</span></li><li><span class=\"nl\">Best had <span class=\"it\">not</span> been charged or convicted of anything.</span></li><li><span class=\"nl\">The EWCA held the CLR&#8217;s contention of <span class=\"it\">ex turpi causa</span> inapplicable, and not to have been in the contemplation of parliament.</span></li><li><span class=\"nl\">Watch this space.</span></li></ul>"
    ],
    "CATEGORY": "Adverse Possession",
    "LINK": [
        "Nec vi, nec clam, nec precario https://en.wikipedia.org/wiki/Nec_vi,_nec_clam,_nec_precario"
    ]
},
{
    "TYPE": "Concept",
    "NUMBER": "63",
    "RELATED": [
        "Circumstances for Adverse Possession",
        "Adverse Possession",
        "Property Rights",
        "Land Registration - Theory",
        "Formalities",
        "Easements",
        "Freehold Covenants - Burden",
        "Mistakes on the Register and Indemnities",
        "Interests of Persons in Actual Occupation",
        "Easements - Creation",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Formality Rules - Equitable"
    ],
    "NAME": "Conditions for Averse Possession",
    "CATEGORIES": [
        "Adverse Possession"
    ],
    "SUMMARY": [
        "See also <span class=\"lnk caseln\">Circumstances for Adverse Possession</span>.",
        "There are three:",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Control</span> of the land.</span><ul><li><span class=\"nl\">Mending fences, changing locks, etc. <span class=\"lnk caseln\">Pye v Graham</span>.</span></li><li><span class=\"nl\">But not merely keeping it neat. <span class=\"lnk caseln\">Red House v Catchpole</span>.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Intention to possess</span></span><ul><li><span class=\"nl\"><span class=\"bd\">Intention</span> to possess must be present as well as actual occupation. <span class=\"lnk caseln\">Bucks v Moran</span>, cf. <span class=\"lnk caseln\">Hounslow v Minchinton</span>.</span></li><li><span class=\"nl\"><span class=\"bd\">Possession</span> is not interrupted by a failure to comply with a local authority&#8217;s formality. <span class=\"lnk caseln\">Lambeth v Ellis</span>.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Not having accepted permission</span> to be there.</span><ul><li><span class=\"nl\">The RP telling the possessor, &#8216;I give you permission to be here&#8217; does <span class=\"it\">not</span> transform him from an adverse possessor to a licensee. That only happens when he says &#8220;OK, thanks!&#8221;</span></li></ul></ol>"
    ],
    "CATEGORY": "Adverse Possession"
},
{
    "TYPE": "Concept",
    "NUMBER": "64",
    "RELATED": [
        "Conditions for Averse Possession",
        "Adverse Possession",
        "Formalities",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Easements",
        "Tenancy in Common - Recognising",
        "Freehold Covenants - Burden",
        "Mistakes on the Register and Indemnities",
        "Patterns of Facts in Rectification Cases",
        "Interests of Persons in Actual Occupation",
        "Property Rights - Gentle Intro",
        "Overriding Interests at Transfer"
    ],
    "NAME": "Circumstances for Adverse Possession",
    "CATEGORIES": [
        "Adverse Possession"
    ],
    "SUMMARY": [
        "There are three:",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Unregistered Land</span></span><ul><li><span class=\"nl\"><span class=\"bd\">12 years</span> adverse possession gives title &mdash; S15 <span class=\"lnk caseln\">Limitation Act 1980</span>.</span><ul><li><span class=\"nl\">The previous registered title is _extinguished*.</span></li><li><span class=\"nl\">Then the adverse possessor can choose to register &mdash; <span class=\"lnk caseln\">Cooper v Gick</span>, but this may be AP of a <span class=\"it\">registered</span> title.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">30 years</span> if the Crown is the owner.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Registered Land</span> adversely possessed for <span class=\"bd\">12 years before <span class=\"ud\">13th Oct 2013</span>.</span></span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">LRA 2002</span> doesn&#8217;t apply to the adverse possessor &mdash; <span class=\"lnk caseln\">Pye v Graham</span>.</span></li><li><span class=\"nl\">The adverse possessor then becomes entitled to be registered &mdash; <span class=\"lnk caseln\">Schedule 12</span>(18).</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Registered Land</span> where <span class=\"lnk caseln\">LRA 2002</span> applies: 12 years <span class=\"bd\">not</span> completed before Oct 2013.</span><ul><li><span class=\"nl\">Adverse possessor may apply for title after <span class=\"bd\">10 years</span>, <span class=\"lnk caseln\">Schedule 6 LRA</span> applies.</span></li><li><span class=\"nl\">The RP is sent a letter informing them, and giving them <span class=\"bd\">65 business days</span> to &mdash;</span><ul><li><span class=\"nl\"><span class=\"bd\">Consent</span><br>Not out of the question &mdash; local authorities not wanting to look after grass verges, etc. Although pretty unlikely in other circumstances.</span></li><li><span class=\"nl\"><span class=\"bd\">Object</span>, relying on <span class=\"lnk caseln\">Schedule 6</span>.<br>The RP then has <span class=\"bd\">2 years</span> to get a possession order <span class=\"it\">granted</span>. N.B., only <span class=\"it\">granted</span>, not <span class=\"it\">carried out</span>.<br>Failure to do so will award the title to the AP.</span></li></ul><li><span class=\"nl\">(But what is likely to happen to the letter sent to the RP at the adversely-possessed land?)</span></li></ul></ol>",
        "<span class=\"ud\"><span class=\"bd\">Three Exceptions</span></span><br>In order of use, rather than appearance on <span class=\"lnk caseln\">Schedule 6</span> &mdash;",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Honest and Reasonable Boundary Disputes</span><br>A fence six inches in the wrong place, that you&#8217;d neglected to notice on inspection prior to transfer.</span><ul><li><span class=\"nl\"><span class=\"bd\">Settled boundaries may not be disturbed by paper documents</span> &mdash; land law preferring <span class=\"it\">use</span> to <span class=\"it\">ownership</span>.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Zarb v Parry</span>. Trivial amount of land. &#8220;Both psychopaths,&#8221; according to MD.</span></li></ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Estoppel</span></span><br>The RP makes representations to the AP that the land is really theirs.</span><ul><li><span class=\"nl\">AP is unlikely to be unnecessary, as the unconscionability of an estoppel where the assurance was to ownership may well be remedied with the award of title.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Some other Reason</span>~</span><ul><li><span class=\"nl\">If there&#8217;s another reason for entitlement to the land, why not use <span class=\"it\">that</span> instead of AP?</span></li><li><span class=\"nl\">Mere arse-covering by the drafters of <span class=\"lnk caseln\">Schedule 6</span>, says MD.</span></li></ul></ol>"
    ],
    "CATEGORY": "Adverse Possession"
},
{
    "TYPE": "Statute",
    "NUMBER": "65",
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/2002/9/schedule/12"
    ],
    "RELATED": [
        "S75 LRA 1925",
        "Schedule 12 LRA 2002",
        "S58 LRA 2002",
        "S29 LRA 2002",
        "S28 LRA 2002",
        "Schedule 3 LRA 2002",
        "Schedule 4 LRA 2002",
        "Schedule 8 LRA 2002",
        "S1 LPA 1925",
        "S27 and S38 LRA 2002"
    ],
    "NAME": "Schedule 6 LRA 2002",
    "CATEGORIES": [
        "Adverse Possession",
        "Schedule 6",
        "LRA 2002"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Blackstone&#8217;s</span> Property Law 2015-2016 &mdash; <span class=\"bd\">p. 345</span>",
        "<span class=\"ud\"><span class=\"bd\">Text</span></span>"
    ],
    "CATEGORY": "Adverse Possession &mdash; Schedule 6 &mdash; LRA 2002",
    "AKA": "Schedule 6 LRA; Schedule 6"
},
{
    "TYPE": "Statute",
    "NUMBER": "66",
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/2002/9/schedule/12"
    ],
    "RELATED": [
        "S75 LRA 1925",
        "Schedule 6 LRA 2002",
        "Schedule 4 LRA 2002",
        "Schedule 8 LRA 2002",
        "S29 LRA 2002",
        "Schedule 3 LRA 2002",
        "S28 LRA 2002",
        "S58 LRA 2002",
        "S1 LPA 1925",
        "S27 and S38 LRA 2002"
    ],
    "NAME": "Schedule 12 LRA 2002",
    "CATEGORIES": [
        "Adverse Possession",
        "Schedule 12",
        "LRA 2002"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Blackstone&#8217;s</span> Property Law 2015-2016 &mdash; <span class=\"bd\">p. 354</span>",
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span><br>Governs transition to the 2002 act. Para 18 applies when 12 years of adverse possession according to <span class=\"lnk caseln\">S75 LRA 1925</span> were <span class=\"bd\">completed before 13th Oct 2013</span>.",
        "<span class=\"ud\"><span class=\"bd\">18 &mdash; Adverse possession</span></span>",
        "<ol><li><span class=\"nl\">Where a registered estate in land is held in trust for a person by virtue of (1) of <span class=\"lnk caseln\">S75 LRA 1925</span> immediately before the coming into force of section 97, he is entitled to be registered as the proprietor of the estate.</span></li><li><span class=\"nl\">A person has a defence to any action for the possession of land (in addition to any other defence he may have) if he is entitled under this paragraph to be registered as the proprietor of an estate in the land.</span></li><li><span class=\"nl\">Where in an action for possession of land a court determines that a person is entitled to a defence under this paragraph, the court must order the registrar to register him as the proprietor of the estate in relation to which he is entitled under this paragraph to be registered.</span></li><li><span class=\"nl\">Entitlement under this paragraph shall be disregarded for the purposes of section 131(1).</span></li><li><span class=\"nl\">Rules may make transitional provision for cases where a rentcharge is held in trust under section 75(1) of the Land Registration Act 1925 immediately before the coming into force of section 97.</span></li></ol>"
    ],
    "CATEGORY": "Adverse Possession &mdash; Schedule 12 &mdash; LRA 2002",
    "AKA": "Schedule 12 LRA; Schedule 12"
},
{
    "TYPE": "Statute",
    "NUMBER": "67",
    "LEGILINK": [
        "http://www.legislation.gov.uk/ukpga/2002/9/schedule/12"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Blackstone&#8217;s</span> Property Law 2015-2016 &mdash; <span class=\"bd\">p. 121-122</span>",
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span><br><span class=\"bd\">Repealed</span> by the 2002 act, except for references to S75(1) <span class=\"lnk caseln\">Schedule 12</span>(18), applying to claims of adverse possession where the 12 years were <span class=\"bd\">completed before 13th Oct 2013</span>.",
        "<span class=\"ud\"><span class=\"bd\">S75 &mdash; Acquisition of title by possession</span></span>",
        "<ol><li><span class=\"nl\">The Limitation Acts shall apply to registered land in the same manner and to the same extent as those Acts apply to land not registered, except that where, if the land were not registered, the estate of the person registered as proprietor would be extinguished, such estate shall not be extinguished but shall be deemed to be held by the proprietor for the time being in trust for the person who, by virtue of the said Acts, has acquired title against any proprietor, but without prejudice to the estates and interests of any other person interested in the land whose estate or interest is not extinguished by those Acts.</span></li><li><span class=\"nl\">Any person claiming to have acquired a title under the Limitation Acts to a registered estate in the land may apply to be registered as proprietor thereof.</span></li><li><span class=\"nl\">The registrar shall, on being satisfied as to the applicant\u2019s title, enter the applicant as proprietor either with absolute, good leasehold, qualified, or possessory title, as the case may require, but without prejudice to any estate or interest protected by any entry on the register which may not have been extinguished under the Limitation Acts, and such registration shall, subject as aforesaid, have the same effect as the registration of a first proprietor; but the proprietor or the applicant or any other person interested may apply to the court for the determination of any question arising under this section.</span></li></ol>",
        "(etc)"
    ],
    "NAME": "S75 LRA 1925",
    "CATEGORIES": [
        "Adverse Possession",
        "Schedule 12",
        "LRA 2002",
        "LRA 1925"
    ],
    "FLAGS": [
        "Repealed"
    ],
    "CATEGORY": "Adverse Possession &mdash; Schedule 12 &mdash; LRA 2002 &mdash; LRA 1925",
    "RELATED": [
        "Schedule 12 LRA 2002",
        "Schedule 6 LRA 2002",
        "Schedule 4 LRA 2002",
        "Schedule 8 LRA 2002",
        "S58 LRA 2002",
        "S28 LRA 2002",
        "S29 LRA 2002",
        "Schedule 3 LRA 2002",
        "S27 and S38 LRA 2002",
        "S1 LPA 1925"
    ]
},
{
    "TYPE": "Case",
    "NUMBER": "68",
    "RELATED": [
        "Red House v Catchpole",
        "Hounslow v Minchinton",
        "Best v Chief Land Registrar",
        "Zarb v Parry",
        "Lambeth v Ellis",
        "Bucks v Moran",
        "Pye v UK",
        "Cooper v Gick",
        "Gould v Kemp",
        "Barnes v Phillips",
        "Moncreiff v Jamieson",
        "Wright v Macadam"
    ],
    "NAME": "Pye v Graham",
    "SUMMARY": [
        "The paper owner was Pye Developments. The land was 29 hectares of mixed rural land in Oxfordshire. One year, a grazing license was granted to Graham. When it ran out, he wrote to Pye asking for another. They didn&#8217;t respond. Graham sent out another three. Still no response &mdash; but needed to graze his animals, so used the land anyway. Twelve years went by."
    ],
    "FLAGS": [
        "Key"
    ],
    "YEAR": "2002",
    "CITATION": "Pye Ltd v Graham [2002] UKHL 30",
    "CATEGORIES": [
        "Adverse Possession",
        "Meaning of Occupation"
    ],
    "HELD": [
        "Being in control of land for one&#8217;s own benefit is enough for adverse possession. Such control might be shown by, e.g., repairing fences, excluding other people, maintaining gates and changing padlocks, but is not equivalent to an intention to own.<br>Cf. <span class=\"lnk caseln\">Red House v Catchpole</span>, in which <span class=\"it\">tidying up</span> land wasn&#8217;t enough to establish control."
    ],
    "CATEGORY": "Adverse Possession &mdash; Meaning of Occupation",
    "COMMENT": "Pye then took the case to Strasbourg &mdash; <span class=\"lnk caseln\">Pye v UK</span>."
},
{
    "TYPE": "Case",
    "NUMBER": "69",
    "RELATED": [
        "Bucks v Moran",
        "Red House v Catchpole",
        "Lambeth v Ellis",
        "Hounslow v Minchinton",
        "Best v Chief Land Registrar",
        "Zarb v Parry",
        "Pye v Graham",
        "Baxter v Mannion",
        "Gold Harp v MacLeod",
        "Canham v Fisk",
        "Phipps v Pears",
        "Kettel v Bloomfold"
    ],
    "NAME": "Pye v UK",
    "CATEGORIES": [
        "Adverse Possession",
        "Human Rights"
    ],
    "HELD": [
        "Adverse Possession is consistent with ECHR rights."
    ],
    "CATEGORY": "Adverse Possession &mdash; Human Rights",
    "COURT": "ECtHR Grand Chamber"
},
{
    "TYPE": "Case",
    "NUMBER": "70",
    "RELATED": [
        "Pye v Graham",
        "Zarb v Parry",
        "Hounslow v Minchinton",
        "Pye v UK",
        "Bucks v Moran",
        "Best v Chief Land Registrar",
        "Lambeth v Ellis",
        "Phipps v Pears",
        "Scott v Southern Pacific Mortgages",
        "Fitzwilliam v Richall",
        "Birmingham Midshires Morgages v Sabherwal",
        "Kinch v Bullard"
    ],
    "NAME": "Red House v Catchpole",
    "SUMMARY": [
        "A would-be adverse possessor used land on the other side of a river from his own, for &#8216;unting wildfowl. For this he kept it tidy, keeping pathways clear, etc.",
        "And wasn&#8217;t a poacher."
    ],
    "CITATION": "Red House v Catchpole [1977] 1 EGLR 125",
    "YEAR": "1977",
    "COMMENT": "Cf. <span class=\"lnk caseln\">Pye v Graham</span>, where in addition to keeping the land tidy, its fences, gates and padlocks were also maintained.",
    "CATEGORIES": [
        "Adverse Possession",
        "Meaning of Occupation"
    ],
    "HELD": [
        "Merely tidying up a piece of land is not enough evidence from which to adduce <span class=\"it\">control</span> for the purposes of adverse possession."
    ],
    "CATEGORY": "Adverse Possession &mdash; Meaning of Occupation"
},
{
    "TYPE": "Case",
    "NUMBER": "71",
    "RELATED": [
        "Hounslow v Minchinton",
        "Lambeth v Ellis",
        "Red House v Catchpole",
        "Best v Chief Land Registrar",
        "Zarb v Parry",
        "Pye v Graham",
        "Pye v UK",
        "City of London Building Society v Flegg",
        "Jones v Kernott",
        "Lloyd's v Rosset",
        "Stack v Dowden",
        "Equity & Home Loans v Prestridge"
    ],
    "NAME": "Bucks v Moran",
    "SUMMARY": [
        "Buckinghamshire CC had acquired a plot of land onto which gave the garden of Moran&#8217;s house &mdash; without a fence, although the plot was fenced off on the other side. Buckinghamshire had acquired the plot to build a road. Moran&#8217;s predecessor in title occupied the plot as a piece of his own garden; Moran continued the practice."
    ],
    "CITATION": "Bucks CC v Moran [1990] Ch 623",
    "YEAR": "1990",
    "CATEGORIES": [
        "Adverse Possession",
        "Continuity of Possession"
    ],
    "HELD": [
        "A would-be adverse possessor must show <span class=\"bd\">both</span> actual occupation <span class=\"bd\">and</span> intention to adversely possess. Adverse possession is not defeated by the original owner&#8217;s intention to use the land at a later date in a manner compatible with the adverse possession."
    ],
    "CATEGORY": "Adverse Possession &mdash; Continuity of Possession"
},
{
    "TYPE": "Case",
    "NUMBER": "72",
    "RELATED": [
        "Bucks v Moran",
        "Lambeth v Ellis",
        "Pye v Graham",
        "Red House v Catchpole",
        "Zarb v Parry",
        "Pye v UK",
        "Best v Chief Land Registrar",
        "Fenn Tigers Case",
        "Gold Harp v MacLeod",
        "Hill v Tupper",
        "Moody v Steggles",
        "Williams v Mitchell"
    ],
    "NAME": "Hounslow v Minchinton",
    "SUMMARY": [
        "Like <span class=\"lnk caseln\">Bucks v Moran</span>, the plot of land gave on to the defendant&#8217;s garden without a fence. A fence <span class=\"it\">at the bottom</span> had been erected by Hounslow&#8217;s predecessor in title, as had a tree or two.  Minchinton applied for planning permission to build a summer house spilling onto the plot. This was duly granted and work began.  The council sought an injunction that it be knocked down.  Both parties sought a declaration as to the boundary.  From the presence of the fence and trees, the council sought to establish their continued possession.  They succeeded at first instance."
    ],
    "CITATION": "Hounslow LBC v Minchinton (1997) 74 P&amp;CR 221",
    "YEAR": "1997",
    "CATEGORIES": [
        "Adverse Possession",
        "Continuity of Possession"
    ],
    "HELD": [
        "Having enclosed with a fence yet not having access, nor taking any action to maintain a piece of land, will not be enough to demonstrate a paper-titleholder&#8217;s continued possession in order to defeat adverse possession."
    ],
    "CATEGORY": "Adverse Possession &mdash; Continuity of Possession"
},
{
    "TYPE": "Case",
    "NUMBER": "73",
    "RELATED": [
        "Bucks v Moran",
        "Hounslow v Minchinton",
        "Pye v UK",
        "Pye v Graham",
        "Zarb v Parry",
        "Red House v Catchpole",
        "Best v Chief Land Registrar",
        "R Square v Nissan",
        "RBS v Etridge",
        "Kinch v Bullard",
        "Jones v Kernott",
        "Moncreiff v Jamieson"
    ],
    "NAME": "Lambeth v Ellis",
    "CITATION": "Lambeth LBC v Ellis (2000) 32 HLR 596",
    "YEAR": "2000",
    "CATEGORIES": [
        "Adverse Possession",
        "Continuity of Possession"
    ],
    "HELD": [
        "Adverse possession of land is not interrupted by the failure to submit a form required by statute of its occupier."
    ],
    "CATEGORY": "Adverse Possession &mdash; Continuity of Possession",
    "COURT": "EWCA"
},
{
    "TYPE": "Case",
    "NUMBER": "74",
    "RELATED": [
        "Lambeth v Ellis",
        "Pye v UK",
        "Hounslow v Minchinton",
        "Best v Chief Land Registrar",
        "Bucks v Moran",
        "Pye v Graham",
        "Red House v Catchpole",
        "Pettitt v Pettitt",
        "Equity & Home Loans v Prestridge",
        "Swift 1st v Chief Land Registrar",
        "Guy vs Barclay's",
        "Long v Gowlett"
    ],
    "NAME": "Zarb v Parry",
    "SUMMARY": [
        "The fence between the gardens of Zarb and Parry was out by a couple of feet or thereabouts, in favour of the Parrys. Mrs. and Mrs. Zarb, evidently utter psychopaths, uprooted the fence, cut down an elderflower tree and banged in new posts.  Winding up in court, the Parrys relied upon adversely possessed the land. At first instance this was successful. The Zarbs appealed.",
        "From Mrs. Parry&#8217;s witness statement:<br>&emsp;&emsp; &#8220;19. On Sunday 29 July 2007, it was a lovely morning and we were taking photographs around the house and garden, <span class=\"it\">we had heard the Zarbs making a noise but that was not unusual as at weekends they frequently used a chain saw, tractor and post rammer around their property</span>. On going behind the Coach House <span class=\"it\">we were absolutely amazed to find Mr and Mrs Zarb on [the Plot] banging fence posts into our lawn</span>. They had removed some of Mr Little&#8217;s original post and wire fence from the eastern boundary of [the Plot], <span class=\"it\">cut down an elderflower tree</span> on our property that I used for making elderflower champagne and cordial and had uprooted our 12 foot post rail fence on the southern boundary of [the Plot] and had thrown it onto the lawn.<br>&emsp;&emsp;I instantly took photographs, I think they thought we were away (we have a camper van) and were very surprised at being caught, my husband asked them to remove themselves from our garden immediately and I fetched a little dictating machine to record any conversations. Both of them refused to leave. Mr Zarb actually unwound a long surveyor&#8217;s tape from the bottom of our garden (east) in a westerly direction towards the walnut tree that was roughly on the boundary between [the Plot] and [the Zarbs&#8217; property] and approximately 5 feet inside the boundary hedge to the south of [the Zarbs&#8217; property] enclosing not only the entire hedge but also our Victoria and Mirabelle plum trees in the garden and saying that he was taking it by force as it belonged to him. We asked him to explain and he said that he had a map (plan B) that showed that the eastern boundary of [the Plot] (that he later referred to as C-B2) should be 40 feet long and because on the ground that distance from post B2 to the hedge measured 42.5 feet, the southern hedge and nearby trees belonged to him and he was taking them.&#8221;"
    ],
    "CITATION": "Zarb v Parry [2011] EWCA Civ 1306",
    "YEAR": "2011",
    "FLAGS": [
        "Neuberger"
    ],
    "CATEGORIES": [
        "Adverse Possession",
        "Exceptions",
        "Boundary Disputes"
    ],
    "HELD": [
        "Paper documents are not to be used to disturb boundaries which are settled, but incorrect to a nugatory degree. Such actions are defeated by adverse possession &mdash; especially if the claimant is a vexatious nutter."
    ],
    "CATEGORY": "Adverse Possession &mdash; Exceptions &mdash; Boundary Disputes"
},
{
    "TYPE": "Case",
    "NUMBER": "75",
    "RELATED": [
        "Bucks v Moran",
        "Pye v Graham",
        "Zarb v Parry",
        "Red House v Catchpole",
        "Lambeth v Ellis",
        "Pye v UK",
        "Hounslow v Minchinton",
        "Lloyd's v Rosset",
        "Birmingham Midshires Morgages v Sabherwal",
        "Canham v Fisk",
        "Cooper v Gick",
        "Williams v Mitchell"
    ],
    "NAME": "Best v Chief Land Registrar",
    "CATEGORIES": [
        "Adverse Possession",
        "Adverse Possession of Residential Property as Criminal Offence"
    ],
    "HELD": [
        "The LR may not refuse to register title to residential property to an adverse possessor as a result of the potential criminalisation of such AP by <span class=\"lnk caseln\">LAPSO 2012</span>. The defence of <span class=\"it\">ex turpi causa</span> may not be invoked."
    ],
    "CATEGORY": "Adverse Possession &mdash; Adverse Possession of Residential Property as Criminal Offence"
},
{
    "TYPE": "Concept",
    "CATEGORIES": [
        "Co-ownership"
    ],
    "NUMBER": "76",
    "CATEGORY": "Co-ownership",
    "RELATED": [
        "Tenancy in Common - Recognising",
        "Severance",
        "Equitable Shares of Co-ownership",
        "Covenants - Overview",
        "Personal Rights",
        "Circumstances for Adverse Possession",
        "Freehold Covenants - Burden",
        "Property Rights - Gentle Intro",
        "Formality Rules - Legal",
        "Formality Rules - Equitable",
        "Conditions for Averse Possession",
        "Land Registration"
    ],
    "NAME": "Joint Tenancy and Tenancy in Common",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span>",
        "<ul><li><span class=\"nl\"> Legal co-ownership can only be in <span class=\"bd\">joint tenancy</span>.</span></li><li><span class=\"nl\"> Equitable co-ownership &#8216;underneath&#8217; the legal co-ownership can also be <span class=\"bd\">tenants in common</span></span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Joint Tenancy</span></span>",
        "<ul><li><span class=\"nl\">The fullest type of co-ownership, in which each of the (at most, <span class=\"bd\">4</span> &mdash; <span class=\"lnk gsln\">S34(2) LPA 1925</span>) JTs has an <span class=\"bd\">undivided and equal share</span>.</span></li><li><span class=\"nl\"><span class=\"bd\">Survivorship</span> makes JTs <span class=\"it\">evaporate</span> on death. Their &#8216;share&#8217; automatically accrues to the other JTs.</span><ul><li><span class=\"nl\">A JT can&#8217;t leave their &#8220;share in the house&#8221; to someone: it isn&#8217;t exclusively theirs to give, belonging equally to the other JTs. <span class=\"lnk caseln\">Gould v Kemp</span>.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Conveyancing lawyers</span> tend to assume marriage or civil partnership means you want to be joint tenants, and don&#8217;t even ask.</span><ul><li><span class=\"nl\"> Which is pretty dreadful.</span></li></ul><li><span class=\"nl\">If a car crash eradicates A, B, C and D<span class=\"bd\"> and it can&#8217;t be said who died last (to whose estate the title would accrue), it&#8217;s </span>automatically the youngest*.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\">Joint Tenancy: the Four Unities</span></span>",
        "<ol><li><span class=\"nl\"> <span class=\"bd\">Possession</span><br>All joint tenants can possess whole of land.</span><ul><li><span class=\"nl\">And its <span class=\"it\">fruits</span>: D lets out room whilst abroad? Rent the property of <span class=\"it\">all</span> JTs, not just D.</span></li></ul><li><span class=\"nl\"> <span class=\"bd\">Interest</span><br>All freehold, all leasehold. Not clear before LPA 1925.</span></li><li><span class=\"nl\"> <span class=\"bd\">Title</span><br>Title for each JT must arise from <span class=\"bd\">same set of conveyancing transactions</span>.</span><ul><li><span class=\"nl\"> Not defeated by sneakily getting them to sign on different days. <span class=\"lnk caseln\">Antionades v Villiers</span>.</span></li></ul><li><span class=\"nl\"> <span class=\"bd\">Time</span><br>Interests of the JTs must arise at same time.</span><ul><li><span class=\"nl\"> <span class=\"bd\">Important</span> &mdash; someone coming into the picture <span class=\"it\">later</span> cannot be a JT.</span></li></ul></ol>",
        "<span class=\"ud\"><span class=\"bd\">Tenancy in Common</span></span>",
        "<ul><li><span class=\"nl\">ABCD still have an (undivided) share in the land, but in any distribution they choose &mdash; no fucks given here about equality.</span></li><li><span class=\"nl\">No survivorship &mdash; shares of TiCs don&#8217;t accrue to other co-owners on death.</span></li><li><span class=\"nl\">Only unity required is <span class=\"bd\">possession</span>. Even if you own 3%, you can <span class=\"it\">possess</span> all of it, as the share is undivided.</span></li><li><span class=\"nl\">Otherwise it wouldn\u2019t be co-ownership.</span></li></ul>"
    ]
},
{
    "TYPE": "Concept",
    "NUMBER": "77",
    "RELATED": [
        "Severance",
        "Equitable Shares of Co-ownership",
        "Joint Tenancy and Tenancy in Common",
        "Registered Protected Interests",
        "Easements - Creation",
        "Priority Rules",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Property Rights",
        "Formalities",
        "Freehold Covenants - Benefit",
        "Electronic Conveyancing",
        "Patterns of Facts in Rectification Cases"
    ],
    "NAME": "Tenancy in Common - Recognising",
    "CATEGORIES": [
        "Co-ownership"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Distinguishing between TiC and JT</span>",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Words in conveyancing document</span> must show <span class=\"it\">equitable interest</span> is intended.</span><ul><li><span class=\"nl\">E.g., words like <span class=\"it\">beneficial</span> and <span class=\"it\">equitable</span>.</span></li><li><span class=\"nl\">Conveyance <span class=\"it\">&#8216;to A and B as co-owners&#8217;</span> &mdash; not enough.</span></li><li><span class=\"nl\">Neither is stipulation that either party could may receipt. <span class=\"lnk caseln\">Stack v Dowden</span>.</span></li><li><span class=\"nl\">Form JO ought to be compulsory, in sensible view of Lady Hale&#8217;s in <span class=\"lnk caseln\">Stack</span>, even though wouldn&#8217;t go on register for sake of <span class=\"lnk caseln\">curtain principle</span>.</span></li><li><span class=\"nl\"><span class=\"it\">&#8216;To A,B,C,D and E equally&#8217;</span> is inconclusive, as consistent with joint tenancy.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Words of severance</span> indicate tenancy in common.</span></li><li><span class=\"nl\"><span class=\"bd\">Absence of one or more of PITT</span></span></li><li><span class=\"nl\"><span class=\"bd\">Equity follows the law</span></span><ul><li><span class=\"nl\">In doubt, joint tenancy will be assumed. <span class=\"lnk caseln\">Stack v Dowden</span>, <span class=\"lnk caseln\">Jones v Kernott</span>.</span></li><li><span class=\"nl\">Doesn&#8217;t necessarily 50/50, should that be inequitable. <span class=\"lnk caseln\">Stack</span>.</span></li></ul></ol>"
    ],
    "CATEGORY": "Co-ownership"
},
{
    "TYPE": "Concept",
    "NUMBER": "78",
    "RELATED": [
        "Tenancy in Common - Recognising",
        "Joint Tenancy and Tenancy in Common",
        "Severance",
        "Title Guarantee",
        "Circumstances for Adverse Possession",
        "Freehold Covenants - Benefit",
        "Priority Rules",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Freehold Covenants - Burden",
        "Covenants - Overview",
        "Formalities",
        "Mistakes on the Register and Indemnities"
    ],
    "NAME": "Equitable Shares of Co-ownership",
    "CATEGORIES": [
        "Co-ownership"
    ],
    "SUMMARY": [
        "<span class=\"bd\">1. Resulting Trust</span><br><span class=\"it\">A trust of the purchase money.</span>",
        "<ul><li><span class=\"nl\"> Requires of the claimant &mdash;</span><ul><li><span class=\"nl\"> <span class=\"bd\">Direct financial contributions to the purchase price</span>.</span></li><li><span class=\"nl\"> <span class=\"bd\">Contribution to the acquisition mortgage</span>, since <span class=\"lnk caseln\">Laskar v Laskar</span> in 2008.</span></li><li><span class=\"nl\"> <span class=\"bd\">Use of a discount</span> (e.g., right to buy).</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Proofs of payments</span> strongly indicate appropriateness of resulting trust.</span></li><li><span class=\"nl\"> But solicitor&#8217;s fees, removal fees, do <span class=\"bd\">not</span> count as direct . <span class=\"lnk caseln\">Curley v Parkes</span>.</span></li><li><span class=\"nl\"> They only recover in proportion to contributed. So in <span class=\"lnk caseln\">Midland Bank v Cook</span>, where she&#8217;d only paid 5%, the judge rather gamely suggested pleading instead a <span class=\"it\">constructive</span> trust &mdash; so she got 50%.</span></li><li><span class=\"nl\"> The majority in <span class=\"lnk caseln\">Stack</span> doubted there were still any circs. in which resulting trusts would be suitable in modern domestic property dispute.</span></li></ul>",
        "<span class=\"bd\">2. Common Intention Constructive Trust</span><br><span class=\"it\">Flexible. Require both <span class=\"bd\">common intention</span> and (as equity does not assist a volunteer) <span class=\"bd\">detrimental reliance</span>.</span>",
        "<ol><li><span class=\"nl\"> <span class=\"bd\">Detrimental Reliance</span></span><ul><li><span class=\"nl\"> Usually not the live issue. May evince common intention.</span></li></ul><li><span class=\"nl\"> <span class=\"bd\">Common Intention</span></span><ul><li><span class=\"nl\"><span class=\"lnk caseln\">Pettitt v Pettitt</span> (1970) &mdash; DIY not enough.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Gissing v Gissing</span> (1971) &mdash; white goods not enough.</span><ul><li><span class=\"nl\">In CA, following his own judgment in <span class=\"lnk caseln\">Eves v Eves</span> (1975), in which there had been discussions about co-ownership, but only flimsy detriment), Denning MR held &mdash;<br>_&#8216;... If they both <span class=\"bd\">contribute to it by their joint efforts, the prima facie inference is that it belongs to them both  equally</span> [... and] may be confirmed or rejected by looking at their conduct afterwards, when the marriage breaks up.</span></li></ul><li><span class=\"nl\"><span class=\"lnk caseln\">Burns v Burns</span> (1984) &mdash; Contributed everything but the cash, so no share of equitable ownership.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Lloyd&#8217;s v Rosset</span> (1991) &mdash; Lord Bridge held CI from either  <span class=\"bd\">objective evidence</span> or <span class=\"bd\">express assurance</span>.</span><ul><li><span class=\"nl\"><span class=\"it\">Breezy statements like &#8220;all of this is yours&#8221; or &#8220;it&#8217;s as much yours as mine&#8221;.</span></span></li><li><span class=\"nl\"><span class=\"it\">Cf. &#8220;you&#8217;ll always have a home here&#8221;, which seems </span>not<span class=\"it\"> to carry the payload of intention of co-ownership. More appropriate as claim in <span class=\"lnk caseln\">proprietary estoppel</span>.</span></span></li></ul><li><span class=\"nl\"><span class=\"lnk caseln\">Stack v Dowden</span> (2007) &mdash; CI also validly <span class=\"bd\">inferred from the whole conduct</span>, as &#8216;context is everything.&#8217;</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Jones v Kernott</span> (2012) added <span class=\"bd\">imputation</span> as means to find CI: <span class=\"it\">what they would have said if it had occurred to them.</span></span></li></ul></ol>",
        "<span class=\"it\">For acquisition?</span>",
        "<ul><li><span class=\"nl\"> <span class=\"bd\">Inference?</span></span><ul><li><span class=\"nl\"> <span class=\"lnk caseln\">Abbott v Abbott</span> (2007) UKPC &mdash; <span class=\"bd\">yes</span>. Lady Hale, again.</span></li><li><span class=\"nl\"> <span class=\"lnk caseln\">Capehorn v Harris</span> &mdash; <span class=\"bd\">no</span>, but waters muddied by commercial relationship between parties.</span></li><li><span class=\"nl\"> <span class=\"lnk caseln\">Barnes v Phillips</span> &mdash; <span class=\"bd\">probably not</span>, and not clear how to tell <span class=\"it\">imputation</span> from <span class=\"it\">inference</span>.</span></li></ul></ul>"
    ],
    "CATEGORY": "Co-ownership"
},
{
    "TYPE": "Concept",
    "NUMBER": "79",
    "RELATED": [
        "Equitable Shares of Co-ownership",
        "Tenancy in Common - Recognising",
        "Joint Tenancy and Tenancy in Common",
        "Title Guarantee",
        "Easements - Creation",
        "Registered Protected Interests",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Overriding Interests - Overview",
        "Personal Rights",
        "Easements",
        "Property Rights - Gentle Intro",
        "Conditions for Averse Possession"
    ],
    "NAME": "Severance",
    "SUMMARY": [
        "<span class=\"bd\">Conditions</span>",
        "<ol><li><span class=\"nl\">By statutory notice, S36(2) of LPA.</span><ul><li><span class=\"nl\">An unilateral method of severance to which the other members of the joint tenancy do not have to assent. Or even know. The written document does not need to announce itself to be a notice of severance. Any written communication evincing an immediate intention to sever.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Kinch v Bullard</span> written notice only needs to be delivered, not read.</span></li><li><span class=\"nl\"><span class=\"lnk caseln\">Burgess v Rawnsly</span> must show an immediate intention, not an expression of desire.</span></li></ul><li><span class=\"nl\">Act Operating on Own Share &mdash; <span class=\"lnk caseln\">Williams v Hensman</span></span><ul><li><span class=\"nl\"> Which will often transfer.</span></li></ul><li><span class=\"nl\">Mutual Agreement - also from <span class=\"lnk caseln\">Williams v Hensman</span></span><ul><li><span class=\"nl\">All JTs must agree. Doesn&#8217;t have to be in writing.</span></li><li><span class=\"nl\">Doesn&#8217;t have to be immediate.</span></li></ul><li><span class=\"nl\">Mutual Conduct - also from <span class=\"lnk caseln\">Williams v Hensman</span></span></li></ol><ul></li><li><span class=\"nl\"> They all behave as though the joint tenancy doesn\u2019t exist any more.</span></li></ul><ol></li><li><span class=\"nl\">Unlawful Killing</span><ul><li><span class=\"nl\">Weren\u2019t expecting that, were you?</span></li><li><span class=\"nl\">Killing someone, if you\u2019re in a joint tenancy with them, severs.</span></li><li><span class=\"nl\">N.B. forfeiture: you can\u2019t inherit from someone you\u2019ve murdered.</span></li></ul><li><span class=\"nl\">In Re Crippen is the example for this one. Dr. Crippen was Martin Dixon\u2019s (wife\u2019s) great uncle, he says. And he\u2019s seen the bath.</span></li></ol>"
    ],
    "CATEGORIES": [
        "Co-ownership",
        "Severance"
    ],
    "CATEGORY": "Co-ownership &mdash; Severance"
},
{
    "TYPE": "Case",
    "NUMBER": "80",
    "RELATED": [
        "Antionades v Villiers",
        "Lloyd's v Rosset",
        "Curley v Parkes",
        "Capehorn v Harris",
        "Pettitt v Pettitt",
        "Barnes v Phillips",
        "Abbott v Abbott",
        "Gissing v Gissing",
        "Kinch v Bullard",
        "Burgess v Rawnsly",
        "Jones v Kernott",
        "Williams v Hensman"
    ],
    "NAME": "Gould v Kemp",
    "CATEGORIES": [
        "Co-ownership",
        "Joint Tenancy"
    ],
    "HELD": [
        "When a joint tenant dies, his share cannot be &#8220;left&#8221; as part of his estate. A clause in a will purporting to do so is inoperative."
    ],
    "CATEGORY": "Co-ownership &mdash; Joint Tenancy"
},
{
    "TYPE": "Case",
    "NUMBER": "81",
    "RELATED": [
        "Gould v Kemp",
        "Capehorn v Harris",
        "Pettitt v Pettitt",
        "Gissing v Gissing",
        "Abbott v Abbott",
        "Burgess v Rawnsly",
        "Stack v Dowden",
        "Laskar v Laskar",
        "Curley v Parkes",
        "Barnes v Phillips",
        "Lloyd's v Rosset",
        "Kinch v Bullard"
    ],
    "NAME": "Antionades v Villiers",
    "CATEGORIES": [
        "Co-ownership",
        "Joint Tenancy"
    ],
    "HELD": [
        "There may well be unity of title despite contracts being signed on different days. In such circumstances, they may be read together."
    ],
    "CATEGORY": "Co-ownership &mdash; Joint Tenancy"
},
{
    "TYPE": "Case",
    "NUMBER": "82",
    "RELATED": [
        "Barnes v Phillips",
        "Kinch v Bullard",
        "Jones v Kernott",
        "Capehorn v Harris",
        "Lloyd's v Rosset",
        "Pettitt v Pettitt",
        "Stack v Dowden",
        "Burgess v Rawnsly",
        "Curley v Parkes",
        "Williams v Hensman",
        "Abbott v Abbott",
        "Gissing v Gissing"
    ],
    "NAME": "Laskar v Laskar",
    "CATEGORIES": [
        "Co-ownership",
        "Quantification"
    ],
    "CITATION": "Laskar v Laskar (2008)",
    "CATEGORY": "Co-ownership &mdash; Quantification",
    "HELD": [
        "Payments to the acquisition mortgage is enough for the establishment of a resulting trust."
    ],
    "YEAR": "2008"
},
{
    "TYPE": "Case",
    "NUMBER": "83",
    "RELATED": [
        "Abbott v Abbott",
        "Jones v Kernott",
        "Pettitt v Pettitt",
        "Burgess v Rawnsly",
        "Capehorn v Harris",
        "Stack v Dowden",
        "Barnes v Phillips",
        "Kinch v Bullard",
        "Williams v Hensman",
        "Gissing v Gissing",
        "Laskar v Laskar",
        "Lloyd's v Rosset"
    ],
    "NAME": "Curley v Parkes",
    "CATEGORIES": [
        "Co-ownership",
        "Quantification"
    ],
    "HELD": [
        "Solicitor&#8217;s fees, removal fees, etc, are insufficient grounds to quantifying a share of co-ownership by means of a resulting trust"
    ],
    "CATEGORY": "Co-ownership &mdash; Quantification"
},
{
    "TYPE": "Case",
    "NUMBER": "84",
    "RELATED": [
        "Kinch v Bullard",
        "Capehorn v Harris",
        "Curley v Parkes",
        "Burgess v Rawnsly",
        "Jones v Kernott",
        "Abbott v Abbott",
        "Williams v Hensman",
        "Stack v Dowden",
        "Lloyd's v Rosset",
        "Gissing v Gissing",
        "Laskar v Laskar",
        "Barnes v Phillips"
    ],
    "NAME": "Pettitt v Pettitt",
    "CATEGORIES": [
        "Co-ownership",
        "Quantification"
    ],
    "CITATION": "Pettitt v Pettitt (1970)",
    "CATEGORY": "Co-ownership &mdash; Quantification",
    "HELD": [
        "For the purposes of quantification of a share of equitable co-ownership by means of a common intention constructive trust, having done DIY was <span class=\"it\">not</span> evidence from which a common-intention to co-own could be found."
    ],
    "YEAR": "1970"
},
{
    "TYPE": "Case",
    "NUMBER": "85",
    "RELATED": [
        "Lloyd's v Rosset",
        "Williams v Hensman",
        "Pettitt v Pettitt",
        "Stack v Dowden",
        "Barnes v Phillips",
        "Curley v Parkes",
        "Abbott v Abbott",
        "Jones v Kernott",
        "Laskar v Laskar",
        "Kinch v Bullard",
        "Capehorn v Harris",
        "Burgess v Rawnsly"
    ],
    "NAME": "Gissing v Gissing",
    "CATEGORIES": [
        "Co-ownership",
        "Quantification"
    ],
    "CITATION": "Gissing v Gissing (1971)",
    "CATEGORY": "Co-ownership &mdash; Quantification",
    "HELD": [
        "The provision of white goods was not evidence from which common intention to establish equitable co-ownership could be found."
    ],
    "YEAR": "1971"
},
{
    "TYPE": "Case",
    "NUMBER": "86",
    "RELATED": [
        "Williams v Hensman",
        "Capehorn v Harris",
        "Pettitt v Pettitt",
        "Gissing v Gissing",
        "Stack v Dowden",
        "Burgess v Rawnsly",
        "Curley v Parkes",
        "Barnes v Phillips",
        "Kinch v Bullard",
        "Laskar v Laskar",
        "Abbott v Abbott",
        "Jones v Kernott"
    ],
    "NAME": "Lloyd's v Rosset",
    "CATEGORIES": [
        "Co-ownership",
        "Quantification"
    ],
    "HELD": [
        "Common intention could be shown either by <span class=\"bd\">objective evidence</span>, or <span class=\"bd\">express assurance</span>, but, per Lord Bridge, by no other means."
    ],
    "CATEGORY": "Co-ownership &mdash; Quantification",
    "AKA": "Rosset"
},
{
    "TYPE": "Case",
    "NUMBER": "87",
    "RELATED": [
        "Williams v Hensman",
        "Burgess v Rawnsly",
        "Gissing v Gissing",
        "Kinch v Bullard",
        "Lloyd's v Rosset",
        "Pettitt v Pettitt",
        "Barnes v Phillips",
        "Curley v Parkes",
        "Jones v Kernott",
        "Capehorn v Harris",
        "Laskar v Laskar",
        "Abbott v Abbott"
    ],
    "NAME": "Stack v Dowden",
    "CITATION": "Stack v Dowden (2007)",
    "AKA": "Stack",
    "YEAR": "2007",
    "CATEGORIES": [
        "Co-ownership",
        "Quantification"
    ],
    "HELD": [
        "For the purpose of quantifying shares of equitable co-ownership by means of common intention constructive trust, common intention could validly be <span class=\"bd\">inferred from the whole conduct</span> of the parties."
    ],
    "CATEGORY": "Co-ownership &mdash; Quantification"
},
{
    "TYPE": "Case",
    "NUMBER": "88",
    "RELATED": [
        "Burgess v Rawnsly",
        "Abbott v Abbott",
        "Capehorn v Harris",
        "Laskar v Laskar",
        "Gissing v Gissing",
        "Lloyd's v Rosset",
        "Stack v Dowden",
        "Barnes v Phillips",
        "Pettitt v Pettitt",
        "Williams v Hensman",
        "Kinch v Bullard",
        "Curley v Parkes"
    ],
    "NAME": "Jones v Kernott",
    "CITATION": "Jones v Kernott (2012)",
    "AKA": "Kernott",
    "YEAR": "2012",
    "CATEGORIES": [
        "Co-ownership",
        "Quantification"
    ],
    "HELD": [
        "Not only can common intention be <span class=\"bd\">inferred</span> from the parties&#8217; conduct &mdash; it can also be <span class=\"bd\">imputed</span>, if it could be said of the parties that, had they thought about it, they would have intended it."
    ],
    "CATEGORY": "Co-ownership &mdash; Quantification"
},
{
    "TYPE": "Case",
    "NUMBER": "89",
    "RELATED": [
        "Stack v Dowden",
        "Pettitt v Pettitt",
        "Barnes v Phillips",
        "Lloyd's v Rosset",
        "Jones v Kernott",
        "Laskar v Laskar",
        "Curley v Parkes",
        "Capehorn v Harris",
        "Burgess v Rawnsly",
        "Kinch v Bullard",
        "Gissing v Gissing",
        "Williams v Hensman"
    ],
    "NAME": "Abbott v Abbott",
    "CATEGORIES": [
        "Co-ownership",
        "Quantification"
    ],
    "CITATION": "Abbott v Abbott [2007] UKPC 53",
    "CATEGORY": "Co-ownership &mdash; Quantification",
    "HELD": [
        "Not only could <span class=\"bd\">existing</span> shares of co-ownership be quantified by inferring common intention, but such shares could also be <span class=\"bd\">established</span> by that means. (Privy Council for Australia)"
    ],
    "YEAR": "2007"
},
{
    "TYPE": "Case",
    "NUMBER": "90",
    "RELATED": [
        "Abbott v Abbott",
        "Kinch v Bullard",
        "Pettitt v Pettitt",
        "Lloyd's v Rosset",
        "Barnes v Phillips",
        "Burgess v Rawnsly",
        "Stack v Dowden",
        "Curley v Parkes",
        "Gissing v Gissing",
        "Laskar v Laskar",
        "Williams v Hensman",
        "Jones v Kernott"
    ],
    "NAME": "Capehorn v Harris",
    "CATEGORIES": [
        "Co-ownership",
        "Quantification"
    ],
    "CITATION": "Capehorn v Harris [2015] EWCA Civ 955",
    "CATEGORY": "Co-ownership &mdash; Quantification",
    "HELD": [
        "Courts must stop short of <span class=\"it\">imputing</span> common intention of equitable co-ownership as a means of <span class=\"it\">acquiring</span> it."
    ],
    "YEAR": "2015"
},
{
    "TYPE": "Case",
    "NUMBER": "91",
    "RELATED": [
        "Laskar v Laskar",
        "Curley v Parkes",
        "Abbott v Abbott",
        "Stack v Dowden",
        "Kinch v Bullard",
        "Capehorn v Harris",
        "Burgess v Rawnsly",
        "Lloyd's v Rosset",
        "Gissing v Gissing",
        "Pettitt v Pettitt",
        "Jones v Kernott",
        "Williams v Hensman"
    ],
    "NAME": "Barnes v Phillips",
    "CATEGORIES": [
        "Co-ownership",
        "Quantification"
    ],
    "CITATION": "Barnes v Phillips [2015]",
    "CATEGORY": "Co-ownership &mdash; Quantification",
    "HELD": [
        "The difference between imputation and inference, may not be very great, when applied to the facts of a case."
    ],
    "YEAR": "2015"
},
{
    "TYPE": "Case",
    "NUMBER": "92",
    "RELATED": [
        "Abbott v Abbott",
        "Jones v Kernott",
        "Gissing v Gissing",
        "Curley v Parkes",
        "Stack v Dowden",
        "Capehorn v Harris",
        "Barnes v Phillips",
        "Williams v Hensman",
        "Burgess v Rawnsly",
        "Pettitt v Pettitt",
        "Laskar v Laskar",
        "Lloyd's v Rosset"
    ],
    "NAME": "Kinch v Bullard",
    "CATEGORIES": [
        "Co-ownership",
        "Quantification"
    ],
    "HELD": [
        "The notice to sever joint tenancy, as per S36(2) LPA 1925, need only be delivered, not read."
    ],
    "CATEGORY": "Co-ownership &mdash; Quantification"
},
{
    "TYPE": "Case",
    "NUMBER": "93",
    "RELATED": [
        "Capehorn v Harris",
        "Jones v Kernott",
        "Barnes v Phillips",
        "Curley v Parkes",
        "Stack v Dowden",
        "Gissing v Gissing",
        "Kinch v Bullard",
        "Pettitt v Pettitt",
        "Williams v Hensman",
        "Lloyd's v Rosset",
        "Laskar v Laskar",
        "Abbott v Abbott"
    ],
    "NAME": "Burgess v Rawnsly",
    "CATEGORIES": [
        "Co-ownership",
        "Quantification"
    ],
    "HELD": [
        "A statutory notice to sever under S36(2) LPA must show an <span class=\"it\">immediate intention</span>, not an expression of desire."
    ],
    "CATEGORY": "Co-ownership &mdash; Quantification"
},
{
    "TYPE": "Case",
    "NUMBER": "94",
    "RELATED": [
        "Jones v Kernott",
        "Abbott v Abbott",
        "Pettitt v Pettitt",
        "Stack v Dowden",
        "Lloyd's v Rosset",
        "Kinch v Bullard",
        "Capehorn v Harris",
        "Burgess v Rawnsly",
        "Gissing v Gissing",
        "Curley v Parkes",
        "Barnes v Phillips",
        "Laskar v Laskar"
    ],
    "NAME": "Williams v Hensman",
    "CATEGORIES": [
        "Co-ownership",
        "Quantification"
    ],
    "HELD": [
        "Joint tenancy can be severed by (i) a legally-valid act on one&#8217;s own share; (ii) mutual agreement, which can be oral; or (iii) mutual conduct."
    ],
    "CATEGORY": "Co-ownership &mdash; Quantification"
},
{
    "TYPE": "Concept",
    "CATEGORIES": [
        "Easements"
    ],
    "NUMBER": "95",
    "CATEGORY": "Easements",
    "RELATED": [
        "Easements - Creation",
        "Covenants - Overview",
        "Land Registration - Theory",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Property Rights - Gentle Intro",
        "Electronic Conveyancing",
        "Formality Rules - Legal",
        "Overriding Interests - Overview",
        "Tenancy in Common - Recognising",
        "Formalities",
        "Circumstances for Adverse Possession",
        "Equitable Shares of Co-ownership"
    ],
    "NAME": "Easements",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">General</span></span>",
        "<ul><li><span class=\"nl\">From <span class=\"lnk caseln\">Re Ellenborough Park</span>, an easement must have these four attributes: (i) dominant and servient tenements &mdash; (ii) in separate occupation or ownership &mdash; (iii) servient tenement confers benefit on dominant, and &mdash; (iv) easement itself must be capable of forming the subject matter of a grant.</span></li></ul>",
        "<span class=\"ud\"><span class=\"bd\"><span class=\"lnk caseln\">Re Ellenborough Park</span> Criteria</span></span><br><span class=\"it\">For <span class=\"bd\">capability</span> of being an easement.</span>",
        "<ol><li><span class=\"nl\"> <span class=\"bd\">Both dominant and servient tenement</span></span><ul><li><span class=\"nl\"> Can&#8217;t exist without both.</span></li></ul><li><span class=\"nl\"> <span class=\"bd\">Separate ownership <span class=\"ud\">or occupation</span></span></span><ul><li><span class=\"nl\"> Merger of plots via S29 TFV?</span><ul><li><span class=\"nl\"> Easement is <span class=\"bd\">extinguished by merger</span> if intention to treat plots as one.</span></li><li><span class=\"nl\"> Easement is merely <span class=\"bd\">suspended</span> if intention to re-separate in future. <span class=\"lnk caseln\">Canham v Fisk</span>.</span></li></ul></li></ul><li><span class=\"nl\"> <span class=\"bd\">Accommodation of dominant tenement</span></span><ul><li><span class=\"nl\"> Proximity &mdash; <span class=\"bd\">but not contiguity</span> &mdash; of plots is necessary. <span class=\"lnk caseln\">Hill v Tupper</span>, a failed attempt to get an easement to run boats along a canal. Not <span class=\"it\">land</span>.</span></li><li><span class=\"nl\"> <span class=\"lnk caseln\">Moody v Steggles</span>, a pub sign.</span></li><li><span class=\"nl\"> <span class=\"bd\">Leisure</span></span><ul><li><span class=\"nl\"> Maybe possible after <span class=\"lnk caseln\">Regency Villas v Diamond Resorts</span>.</span></li></ul></li></ul><li><span class=\"nl\"> <span class=\"bd\">Capable of being subject matter of grant</span></span><ul><li><span class=\"nl\"> Can be reduced to writing.</span></li><li><span class=\"nl\"> Legally-capable grantor and grantee. <span class=\"it\">N.B. Lunatics, bankrupts, minors, companies w/o capacity of grant in arts. of assoc., etc.</span></span></li><li><span class=\"nl\"> <span class=\"lnk caseln\">Tara Hotels v Kensington</span>, easement to <span class=\"bd\">flood out</span> of a fire-escape, followed <span class=\"lnk caseln\">Coventry v Lawrence</span> on basis of comparability of sound-waves. See also <span class=\"lnk caseln\">Fenn Tigers</span>.</span></li></ul></ol>",
        "<span class=\"ud\"><span class=\"bd\">Capability of a Right to be an Easement</span></span>",
        "<ol><li style=\"counter-reset: item 4;\"><span class=\"nl\"> <span class=\"bd\">No positive burden</span> on servient tenement.</span><ul><li><span class=\"nl\"> <span class=\"lnk caseln\">Moncreiff v Jamieson</span>, obiter &mdash; couldn&#8217;t have an easement of a swimming pool, as would require upkeep.</span></li><li><span class=\"nl\"> Compatible with ratio of <span class=\"lnk caseln\">Regency Villas</span>?</span></li></ul><li class=\"nonum\"><span class=\"nl\"> <span class=\"it\">Exceptions</span></span><ul><li><span class=\"nl\"> <span class=\"bd\">Established</span>: easement to fencing. <span class=\"lnk caseln\">Crow v Wood</span>.</span></li><li><span class=\"nl\"> <span class=\"bd\">Surprising</span>: easement to <span class=\"bd\">generate and supply &#8216;leccie</span>, <span class=\"lnk caseln\">Cardwell v Walker</span>.</span><ul><li><span class=\"nl\"> Not quite so bonkers as that sounds, on its facts.</span></li></ul></li></ul><li style=\"counter-reset: item 5;\"><span class=\"nl\"> <span class=\"bd\">Impact not excessive</span> on burdened land.</span><ul><li><span class=\"nl\"> Test in <span class=\"lnk caseln\">Bachelor v Marlowe</span> (2003, EWHC) was whether servient owner&#8217;s reasonable use is retained, and <span class=\"bd\">not rendered illusory</span>.</span></li><li><span class=\"nl\"> Test in <span class=\"lnk caseln\">Moncrieff v Jamieson</span> (2007, UKHL) per Lord Scott &mdash; not whether servient owner retains reasonable use, but whether <span class=\"bd\">retains control</span>. Lord Neuberger unconvinced.</span></li><li><span class=\"nl\"> Wouldn&#8217;t be practical. <span class=\"lnk caseln\">Emcer v Miller</span>, use of lavatory, inherently entails such exclusion.</span></li><li><span class=\"nl\"> <span class=\"bd\">Examples</span></span><ul><li><span class=\"nl\"> <span class=\"lnk caseln\">Wright v Macadam</span> &mdash; too much coal? Maybe, but use was not exclusive, therefore upheld.</span></li><li><span class=\"nl\"> <span class=\"lnk caseln\">R Square v Nissan</span> &mdash; too many cars? Nevertheless, upheld as owner retained right.</span></li></ul><li><span class=\"nl\"> <span class=\"bd\">Must not amount to shared use</span></span><ul><li><span class=\"nl\"> The claimed right must be <span class=\"bd\">specific</span>, not a claim to general use of the land. <span class=\"lnk caseln\">Copeland v Greenhalf</span>.</span></li></ul></ul></ol>",
        "<span class=\"ud\"><span class=\"bd\">Notes</span></span>",
        "<ul><li><span class=\"nl\"> <span class=\"bd\">Storage, Parking and Garages, etc</span></span><ul><li><span class=\"nl\"> Double vs. single garage &mdash; <span class=\"lnk caseln\">Kettel v Bloomfold</span>.</span></li><li><span class=\"nl\"> Garage with a lock? <span class=\"lnk caseln\">Law Commission - Easements</span>.</span></li></ul><li><span class=\"nl\"> <span class=\"bd\">Incapable of Being Easements</span></span></li><li><span class=\"nl\"> Protection from the weather &mdash; <span class=\"lnk caseln\">Phipps v Pears</span>, Denning MR, S62 LPA.</span></li></ul>"
    ],
    "AKA": "Capable of Being Easement"
},
{
    "TYPE": "Concept",
    "CATEGORIES": [
        "Easements"
    ],
    "NUMBER": "96",
    "CATEGORY": "Easements",
    "RELATED": [
        "Easements",
        "Legal Easements as Schedule 3 Overriding Interests",
        "Joint Tenancy and Tenancy in Common",
        "Formality Rules - Legal",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Personal Rights",
        "Land Registration - Theory",
        "Freehold Covenants - Burden",
        "Overriding Interests - Overview",
        "Formality Rules - Equitable",
        "Adverse Possession",
        "Property Rights - Gentle Intro"
    ],
    "NAME": "Easements - Creation",
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Intro</span></span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\">Express Creation</span><br>Legal if deed sent to LR, equitable otherwise.</span><ul><li><span class=\"nl\"><span class=\"bd\">Agreement</span> &mdash; the landowners collaborate, a deed is granted.</span></li><li><span class=\"nl\"><span class=\"bd\">Splitting of land</span> &mdash; in which easements are <span class=\"bd\">reserved</span> in the transaction.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Implied Creation</span></span><ul><li><span class=\"nl\">X sells part of the land to Y, but they fail:</span><ul><li><span class=\"nl\">to mention the easements in the deed, and</span></li><li><span class=\"nl\">to exclude the creation of implied easements by an explicit clause per <span class=\"lnk gsln\">S62(4) LPA 1925</span>.</span></li></ul><li><span class=\"nl\"><span class=\"it\">MD: &#8220;I&#8217;ve only ever seen cases about rights of way&#8221;.</span></span></li></ul></ul>",
        "<span class=\"bd\">Situations for Implied Creation</span>",
        "<ol><li><span class=\"nl\"><span class=\"bd\">Absolute Necessity</span></span><ul><li><span class=\"nl\">Without the claimed easement, the dominant tenement would be, to some significant degree, unusable.</span></li><li><span class=\"nl\">Not merely inconvenient. <span class=\"lnk caseln\">Walby v Walby</span>.</span></li><li><span class=\"nl\">An easement to a right of way will fail, when, instead, when you could go by boat (!) <span class=\"lnk caseln\">Manjang v Drameh</span>.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Common Intention</span></span><ul><li><span class=\"nl\">The easement is clearly necessary for the purpose for which the land was sold. E.g., splitting up a plot, and selling it to someone so they can build a house.</span><ul><li><span class=\"nl\">Sewerage pipes &mdash; <span class=\"lnk caseln\">Stafford v Lee</span>.</span></li><li><span class=\"nl\">Ventilation shaft &mdash; <span class=\"lnk caseln\">Wong v Beaumont</span>. <span class=\"it\">MD &mdash; a case everyone remembers as it involves a Chinese Restaurant (!)</span></span></li></ul><li><span class=\"nl\">In principle, for <span class=\"bd\">reservation</span> of easements. <span class=\"lnk caseln\">Chaffe v Kingsley</span>.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">S62 LPA</span><br>Blackstone&#8217;s <span class=\"it\">Property Law 2015-16</span> at <span class=\"bd\">p.61</span></span><ul><li><span class=\"nl\"> Has been <span class=\"it\">read</span> as implicitly converting <span class=\"it\">precarious</span> rights, personal permissions, etc, in existence <span class=\"it\">before</span> the transfer, into cast-iron easements. <span class=\"lnk caseln\">Long v Gowlett</span>, the mill on the Cam, and <span class=\"lnk caseln\">Sovmots</span>.</span></li><li><span class=\"nl\"> <span class=\"it\">... but that&#8217;s not what the words say.</span></span></li><li><span class=\"nl\"> <span class=\"bd\">Conditions</span></span><ol><li><span class=\"nl\"> <span class=\"bd\">Transfer by deed or RDP</span>, except of course legal leases up to 3 years. Inoperative for transfers by <span class=\"it\">contract</span>. <span class=\"lnk caseln\">Bormann v Griffiths</span>.</span></li><li><span class=\"nl\"> <span class=\"bd\">No explicit exclusion</span> in deed, per S62(4).</span></li><li><span class=\"nl\"> <span class=\"bd\"><span class=\"lnk caseln\">Capable of being easement</span></span></span></li><li><span class=\"nl\"> <span class=\"bd\">Continuous and apparent</span> existence of rights immediately before sale. <span class=\"lnk caseln\">Long v Gowlett</span>.</span></li><li><span class=\"nl\"> <span class=\"bd\">Prior diversity of occupation</span> &mdash; needed in <span class=\"lnk caseln\">Platt v Crouch</span> before <span class=\"lnk caseln\">Wood v Waddington</span> confirmed <span class=\"lnk caseln\">Platt v Crouch</span>, <span class=\"bd\">not</span> now needed.</span></li></ol><li><span class=\"nl\"> SG &mdash; <span class=\"it\">you don&#8217;t sell an orange with the juice, the pips, the skin, the pith... you just sell the <span class=\"bd\">orange</span>.</span></span></li></ul><li><span class=\"nl\"> <span class=\"bd\"><span class=\"lnk caseln\">Wheeldon v Burrows</span></span></span><ul><li><span class=\"nl\"> Used to be like S62 without its prior-diversity requirement.</span></li><li><span class=\"nl\"> Now it is identical, except:</span><ol><li><span class=\"nl\">Transfer can be equitable as well.</span></li><li><span class=\"nl\">Instead of the requirement of continuous and apparent existence, under <span class=\"lnk caseln\">Wheeldon</span>, the right in question has to be <span class=\"it\">reasonable and apparent <span class=\"bd\">and necessary for the reasonable enjoyment</span> of the land</span>.</span></li></ol><li><span class=\"nl\"> Like going to pick up a second-hand car, and being asked if you want the tyres as well.</span></li></ul></ol>",
        "<span class=\"bd\">Prior Diversity</span>",
        "<ul><li><span class=\"nl\">The ratio of <span class=\"lnk caseln\">Wood v Waddington</span>, that prior diversity is <span class=\"it\">not</span> necessary, introduces a danger for the seller.</span></li><li><span class=\"nl\">Sell the house and keep the field, and now, everything <span class=\"it\">you</span> could do on the field, <span class=\"it\">they</span> can now do.</span></li></ul>"
    ]
},
{
    "TYPE": "Case",
    "NUMBER": "101",
    "RELATED": [
        "R Square v Nissan",
        "Stafford v Lee",
        "Canham v Fisk",
        "Crow v Wood",
        "Cardwell v Walker",
        "Manjang v Drameh",
        "Sovmots v Environment Secretary",
        "Phipps v Pears",
        "Moody v Steggles",
        "Wright v Macadam",
        "Wood v Waddington",
        "Emcer v Miller"
    ],
    "NAME": "Regency Villas v Diamond Resorts",
    "CITATION": "Regency Villas v Diamond Resorts [2015] EWHC 3564",
    "AKA": "Regency Villas",
    "YEAR": "2015",
    "FLAGS": [
        "Important"
    ],
    "CATEGORIES": [
        "Easements"
    ],
    "HELD": [
        "The claim of an easement to the use of <span class=\"it\">leisure</span> facilities was upheld, developing the law and going against dicta in <span class=\"lnk caseln\">Moncrieff v Jamieson</span>. Potentially not inconsistent with requirement of <span class=\"it\">necessity</span> for implication of an easement,  in light of evolving modern idea as to what in fact <span class=\"it\">is</span> necessary."
    ],
    "CATEGORY": "Easements"
},
{
    "TYPE": "Case",
    "NUMBER": "98",
    "RELATED": [
        "Phipps v Pears",
        "Hill v Tupper",
        "Emcer v Miller",
        "Wheeldon v Burrows",
        "Fenn Tigers Case",
        "Sovmots v Environment Secretary",
        "Copeland v Greenhalf",
        "Wong v Beaumont",
        "Regency Villas v Diamond Resorts",
        "Wright v Macadam",
        "Moncreiff v Jamieson",
        "Crow v Wood"
    ],
    "NAME": "Canham v Fisk",
    "CATEGORIES": [
        "Easements"
    ],
    "HELD": [
        "An easement is not extinguished by merger of dominant and servient tenements if there&#8217;s an intention to re-separate the plots in future."
    ],
    "CATEGORY": "Easements"
},
{
    "TYPE": "Case",
    "NUMBER": "99",
    "RELATED": [
        "Stafford v Lee",
        "Regency Villas v Diamond Resorts",
        "Sovmots v Environment Secretary",
        "Wheeldon v Burrows",
        "Moncreiff v Jamieson",
        "Manjang v Drameh",
        "Wright v Macadam",
        "Wong v Beaumont",
        "R Square v Nissan",
        "Bachelor v Marlowe",
        "Bormann v Griffiths",
        "Kettel v Bloomfold"
    ],
    "NAME": "Hill v Tupper",
    "CATEGORIES": [
        "Easements"
    ],
    "HELD": [
        "The servient and dominant tenements of an easement need not be contiguous, but must be proximate. A <span class=\"it\">canal</span> and a particular piece of land are <span class=\"it\">not</span>."
    ],
    "CATEGORY": "Easements"
},
{
    "TYPE": "Case",
    "YEAR": "1879",
    "NUMBER": "100",
    "RELATED": [
        "Copeland v Greenhalf",
        "Tara Hotels v Kensington",
        "Walby v Walby",
        "Fenn Tigers Case",
        "Wood v Waddington",
        "Stafford v Lee",
        "Wong v Beaumont",
        "Hill v Tupper",
        "Platt v Crouch",
        "Phipps v Pears",
        "R Square v Nissan",
        "Emcer v Miller"
    ],
    "NAME": "Moody v Steggles",
    "CATEGORIES": [
        "Easements"
    ],
    "HELD": [
        "An easement to signage may validly confer a business benefit on the dominant tenement."
    ],
    "CATEGORY": "Easements"
},
{
    "TYPE": "Case",
    "NUMBER": "101",
    "RELATED": [
        "R Square v Nissan",
        "Stafford v Lee",
        "Canham v Fisk",
        "Crow v Wood",
        "Cardwell v Walker",
        "Manjang v Drameh",
        "Sovmots v Environment Secretary",
        "Phipps v Pears",
        "Moody v Steggles",
        "Wright v Macadam",
        "Wood v Waddington",
        "Emcer v Miller"
    ],
    "NAME": "Regency Villas v Diamond Resorts",
    "CITATION": "Regency Villas v Diamond Resorts [2015] EWHC 3564",
    "AKA": "Regency Villas",
    "YEAR": "2015",
    "FLAGS": [
        "Important"
    ],
    "CATEGORIES": [
        "Easements"
    ],
    "HELD": [
        "The claim of an easement to the use of <span class=\"it\">leisure</span> facilities was upheld, developing the law and going against dicta in <span class=\"lnk caseln\">Moncrieff v Jamieson</span>. Potentially not inconsistent with requirement of <span class=\"it\">necessity</span> for implication of an easement,  in light of evolving modern idea as to what in fact <span class=\"it\">is</span> necessary."
    ],
    "CATEGORY": "Easements"
},
{
    "TYPE": "Case",
    "NUMBER": "102",
    "RELATED": [
        "Wright v Macadam",
        "Cardwell v Walker",
        "Moody v Steggles",
        "Hill v Tupper",
        "Crow v Wood",
        "R Square v Nissan",
        "Walby v Walby",
        "Canham v Fisk",
        "Moncreiff v Jamieson",
        "Fenn Tigers Case",
        "Stafford v Lee",
        "Wong v Beaumont"
    ],
    "NAME": "Tara Hotels v Kensington",
    "CATEGORIES": [
        "Easements"
    ],
    "HELD": [
        "If, as in <span class=\"lnk caseln\">Coventry v Lawrence</span>, there can be an easement to make <span class=\"it\">noise</span> &mdash; which entails sound waves flooding from dominant to servient tenement &mdash; then there can also be an easement for people to flood out from a fire-escape onto the burdened land. See also <span class=\"lnk caseln\">Fenn Tigers</span>."
    ],
    "CATEGORY": "Easements"
},
{
    "TYPE": "Case",
    "NUMBER": "103",
    "RELATED": [
        "Wood v Waddington",
        "Moncreiff v Jamieson",
        "Manjang v Drameh",
        "Wong v Beaumont",
        "Regency Villas v Diamond Resorts",
        "R Square v Nissan",
        "Phipps v Pears",
        "Emcer v Miller",
        "Stafford v Lee",
        "Walby v Walby",
        "Bormann v Griffiths",
        "Copeland v Greenhalf"
    ],
    "NAME": "Bachelor v Marlowe",
    "CATEGORIES": [
        "Easements"
    ],
    "CITATION": "Bachelor v Marlowe [2003] EWHC",
    "CATEGORY": "Easements",
    "HELD": [
        "The test for whether the burden of a claimed easement is excessive is whether the servient owner <span class=\"it\">retains reasonable use</span> of his land &mdash; that it does not <span class=\"it\">render the servient owner&#8217;s use illusory</span>."
    ],
    "YEAR": "2003"
},
{
    "TYPE": "Case",
    "NUMBER": "104",
    "RELATED": [
        "Regency Villas v Diamond Resorts",
        "Hill v Tupper",
        "Kettel v Bloomfold",
        "Canham v Fisk",
        "Phipps v Pears",
        "Tara Hotels v Kensington",
        "Fenn Tigers Case",
        "Wright v Macadam",
        "Manjang v Drameh",
        "Long v Gowlett",
        "Walby v Walby",
        "Wheeldon v Burrows"
    ],
    "NAME": "Moncreiff v Jamieson",
    "CATEGORIES": [
        "Easements"
    ],
    "CITATION": "Moncreiff v Jamieson [2007] UKHL",
    "CATEGORY": "Easements",
    "HELD": [
        "Per Lord Scott, the test for whether a claimed easement imposes an excessive burden should <span class=\"it\">not</span> be whether the <span class=\"it\">servient owner retains reasonable use</span>, but whether he <span class=\"it\">retains control</span> of the servient tenement. Doubted by Lord Neuberger. Obiter &mdash; an easement of use of a swimming pool could <span class=\"it\">not</span> be valid, as would require upkeep. Cf. <span class=\"lnk caseln\">Regency Villas</span>."
    ],
    "YEAR": "2007"
},
{
    "TYPE": "Case",
    "NUMBER": "105",
    "RELATED": [
        "Fenn Tigers Case",
        "Wood v Waddington",
        "Canham v Fisk",
        "Long v Gowlett",
        "Stafford v Lee",
        "Walby v Walby",
        "Phipps v Pears",
        "Bachelor v Marlowe",
        "Cardwell v Walker",
        "Manjang v Drameh",
        "Kettel v Bloomfold",
        "Moody v Steggles"
    ],
    "NAME": "Crow v Wood",
    "CATEGORIES": [
        "Easements"
    ],
    "HELD": [
        "Although the burden of an easement may not, in general, be <span class=\"it\">positive</span> (i.e., necessitate that owner of burdened land must <span class=\"it\">do</span> something), the <span class=\"it\">easement to fencing</span> is an established exception."
    ],
    "CATEGORY": "Easements"
},
{
    "TYPE": "Case",
    "NUMBER": "106",
    "RELATED": [
        "Bormann v Griffiths",
        "Wood v Waddington",
        "Long v Gowlett",
        "R Square v Nissan",
        "Walby v Walby",
        "Sovmots v Environment Secretary",
        "Stafford v Lee",
        "Phipps v Pears",
        "Manjang v Drameh",
        "Canham v Fisk",
        "Tara Hotels v Kensington",
        "Hill v Tupper"
    ],
    "NAME": "Cardwell v Walker",
    "CATEGORIES": [
        "Easements"
    ],
    "HELD": [
        "The claim of an easement to the (paid) supply of electricity from a generator, to a caravan park, was upheld."
    ],
    "CATEGORY": "Easements"
},
{
    "TYPE": "Case",
    "NUMBER": "107",
    "RELATED": [
        "Wood v Waddington",
        "Bachelor v Marlowe",
        "Manjang v Drameh",
        "Bormann v Griffiths",
        "Stafford v Lee",
        "Emcer v Miller",
        "Wheeldon v Burrows",
        "Canham v Fisk",
        "Hill v Tupper",
        "Kettel v Bloomfold",
        "Copeland v Greenhalf",
        "R Square v Nissan"
    ],
    "NAME": "Wright v Macadam",
    "CATEGORIES": [
        "Easements"
    ],
    "HELD": [
        "The use of the burdened land entailed by a claimed easement must not be excessive. Nevertheless, because the owner of a shed used to store coal for the dominant tenement retained <span class=\"it\">access</span>, the claim succeeded."
    ],
    "CATEGORY": "Easements"
},
{
    "TYPE": "Case",
    "NUMBER": "108",
    "RELATED": [
        "Wheeldon v Burrows",
        "Wong v Beaumont",
        "Copeland v Greenhalf",
        "Wood v Waddington",
        "Emcer v Miller",
        "Stafford v Lee",
        "Cardwell v Walker",
        "Long v Gowlett",
        "Wright v Macadam",
        "Moody v Steggles",
        "Bormann v Griffiths",
        "Kettel v Bloomfold"
    ],
    "NAME": "R Square v Nissan",
    "CATEGORIES": [
        "Easements"
    ],
    "HELD": [
        "An easement of parking was upheld despite that it was for <span class=\"it\">many</span> cars, as the owner retained reasonable use."
    ],
    "CATEGORY": "Easements"
},
{
    "TYPE": "Case",
    "NUMBER": "109",
    "RELATED": [
        "Canham v Fisk",
        "Wheeldon v Burrows",
        "Moody v Steggles",
        "Fenn Tigers Case",
        "Hill v Tupper",
        "Bachelor v Marlowe",
        "Moncreiff v Jamieson",
        "Cardwell v Walker",
        "Emcer v Miller",
        "Platt v Crouch",
        "Regency Villas v Diamond Resorts",
        "Phipps v Pears"
    ],
    "NAME": "Copeland v Greenhalf",
    "CATEGORIES": [
        "Easements"
    ],
    "FLAGS": [
        "Key"
    ],
    "CATEGORY": "Easements",
    "HELD": [
        "A right claimed as an easement must be for something <span class=\"it\">specific</span>; not so general as to amount to <span class=\"it\">shared general use</span> of the burdened land.  The use of an orchard to store vans, having evolved from the use established fifty years previously of mending wagon-wheels, was found to be an excessive burden on the land and did not per se confer a <span class=\"it\">specific</span> benefit on the claimant&#8217;s land. It amounted, instead, to a claim to shared use, and was therefore, decided per Upjohn J to be &#8216;wholly outside the normal idea of an easement&#8217;."
    ]
},
{
    "TYPE": "Case",
    "NUMBER": "110",
    "RELATED": [
        "Platt v Crouch",
        "Regency Villas v Diamond Resorts",
        "Crow v Wood",
        "Phipps v Pears",
        "Fenn Tigers Case",
        "Canham v Fisk",
        "Copeland v Greenhalf",
        "Sovmots v Environment Secretary",
        "Long v Gowlett",
        "Cardwell v Walker",
        "Bormann v Griffiths",
        "Manjang v Drameh"
    ],
    "NAME": "Emcer v Miller",
    "CATEGORIES": [
        "Easements"
    ],
    "HELD": [
        "If the nature of the benefit/burden conferred/imposed necessarily entails <span class=\"it\">temporary exclusive use</span>, then it may nevertheless valid as the subject of an easement. Therefore, an easement of use of a lavatory was upheld."
    ],
    "CATEGORY": "Easements"
},
{
    "TYPE": "Case",
    "NUMBER": "111",
    "RELATED": [
        "Wong v Beaumont",
        "Cardwell v Walker",
        "Crow v Wood",
        "Bormann v Griffiths",
        "Hill v Tupper",
        "Tara Hotels v Kensington",
        "Stafford v Lee",
        "Platt v Crouch",
        "Moody v Steggles",
        "Wood v Waddington",
        "Fenn Tigers Case",
        "Long v Gowlett"
    ],
    "NAME": "Kettel v Bloomfold",
    "CATEGORIES": [
        "Easements"
    ],
    "HELD": [
        "As long as the use of a garage is not <span class=\"it\">exclusive</span>, it may be capable of being an easement. The right to park a single car in a double garage (a hypothetical case in the <span class=\"lnk caseln\">Law Commission Report on Easements</span>) could be capable, therefore, as long as the owner retains access. <span class=\"it\">What about a single garage where owner uses to store tools?</span>"
    ],
    "CATEGORY": "Easements"
},
{
    "TYPE": "Case",
    "NUMBER": "112",
    "RELATED": [
        "Kettel v Bloomfold",
        "Manjang v Drameh",
        "Platt v Crouch",
        "Crow v Wood",
        "Wheeldon v Burrows",
        "Tara Hotels v Kensington",
        "Wright v Macadam",
        "R Square v Nissan",
        "Moncreiff v Jamieson",
        "Copeland v Greenhalf",
        "Cardwell v Walker",
        "Canham v Fisk"
    ],
    "NAME": "Fenn Tigers Case",
    "CATEGORIES": [
        "Easements"
    ],
    "HELD": [
        "As in <span class=\"lnk caseln\">Coventry v Lawrence</span>, the making of noise is capable of being an easement."
    ],
    "CATEGORY": "Easements",
    "AKA": "Fenn Tigers"
},
{
    "TYPE": "Case",
    "NUMBER": "113",
    "RELATED": [
        "Walby v Walby",
        "Bachelor v Marlowe",
        "Canham v Fisk",
        "Moody v Steggles",
        "Crow v Wood",
        "Wong v Beaumont",
        "Fenn Tigers Case",
        "Wheeldon v Burrows",
        "R Square v Nissan",
        "Tara Hotels v Kensington",
        "Manjang v Drameh",
        "Wood v Waddington"
    ],
    "NAME": "Phipps v Pears",
    "CATEGORIES": [
        "Easements"
    ],
    "FLAGS": [
        "Denning"
    ],
    "CATEGORY": "Easements",
    "HELD": [
        "Protection from the elements is <span class=\"it\">not</span> capable of being an easement."
    ]
},
{
    "TYPE": "Case",
    "NUMBER": "114",
    "RELATED": [
        "Wong v Beaumont",
        "Wood v Waddington",
        "Stafford v Lee",
        "Manjang v Drameh",
        "Sovmots v Environment Secretary",
        "Wheeldon v Burrows",
        "Platt v Crouch",
        "Long v Gowlett",
        "Bormann v Griffiths",
        "Bachelor v Marlowe",
        "Regency Villas v Diamond Resorts",
        "Kettel v Bloomfold"
    ],
    "NAME": "Walby v Walby",
    "CATEGORIES": [
        "Easements",
        "Implied Creation"
    ],
    "HELD": [
        "The implied creation of easements on grounds of necessity will only succeed if not to do so would render the land in question unusable, to a significant degree. That the implied easement would be <span class=\"it\">convenient</span>, by contrast, is not enough."
    ],
    "CATEGORY": "Easements &mdash; Implied Creation"
},
{
    "TYPE": "Case",
    "NUMBER": "115",
    "RELATED": [
        "Wong v Beaumont",
        "Walby v Walby",
        "Wheeldon v Burrows",
        "Sovmots v Environment Secretary",
        "Stafford v Lee",
        "Long v Gowlett",
        "Wood v Waddington",
        "Bormann v Griffiths",
        "Platt v Crouch",
        "Hill v Tupper",
        "Bachelor v Marlowe",
        "Moody v Steggles"
    ],
    "NAME": "Manjang v Drameh",
    "CATEGORIES": [
        "Easements",
        "Implied Creation"
    ],
    "HELD": [
        "A claim to imply an easement of access will fail to be sufficiently <span class=\"it\">necessary</span>, if another means of access is available. Even if that means by boat."
    ],
    "CATEGORY": "Easements &mdash; Implied Creation"
},
{
    "TYPE": "Case",
    "NUMBER": "116",
    "RELATED": [
        "Walby v Walby",
        "Platt v Crouch",
        "Wheeldon v Burrows",
        "Manjang v Drameh",
        "Long v Gowlett",
        "Sovmots v Environment Secretary",
        "Wood v Waddington",
        "Bormann v Griffiths",
        "Wong v Beaumont",
        "Regency Villas v Diamond Resorts",
        "Canham v Fisk",
        "Crow v Wood"
    ],
    "NAME": "Stafford v Lee",
    "CATEGORIES": [
        "Easements",
        "Implied Creation"
    ],
    "HELD": [
        "When the parties&#8217; common intention in the transfer evinces that the plot will be used for a particular purpose, those easements <span class=\"it\">necessary for that use</span> will be impliedly created. Such as, e.g., an easement to run sewerage pipes to serve a plot sold to build a house."
    ],
    "CATEGORY": "Easements &mdash; Implied Creation"
},
{
    "TYPE": "Case",
    "NUMBER": "117",
    "RELATED": [
        "Wheeldon v Burrows",
        "Long v Gowlett",
        "Manjang v Drameh",
        "Wood v Waddington",
        "Sovmots v Environment Secretary",
        "Platt v Crouch",
        "Walby v Walby",
        "Bormann v Griffiths",
        "Stafford v Lee",
        "Kettel v Bloomfold",
        "Moody v Steggles",
        "Cardwell v Walker"
    ],
    "NAME": "Wong v Beaumont",
    "CATEGORIES": [
        "Easements",
        "Implied Creation"
    ],
    "HELD": [
        "The common intention of the parties to a transfer for the purpose of a restaurant will give rise to the implied easements necessary for that purpose &mdash; such as ventilation shafts to carry away the smell of MSG and shrimp."
    ],
    "CATEGORY": "Easements &mdash; Implied Creation"
},
{
    "TYPE": "Case",
    "NUMBER": "118",
    "RELATED": [
        "Bormann v Griffiths",
        "Platt v Crouch",
        "Wheeldon v Burrows",
        "Walby v Walby",
        "Wong v Beaumont",
        "Sovmots v Environment Secretary",
        "Stafford v Lee",
        "Wood v Waddington",
        "Manjang v Drameh",
        "Tara Hotels v Kensington",
        "Copeland v Greenhalf",
        "R Square v Nissan"
    ],
    "NAME": "Long v Gowlett",
    "CATEGORIES": [
        "Easements",
        "Implied Creation"
    ],
    "HELD": [
        "For S62(1) LPA to transform precarious personal rights into easements, there was a requirement of prior diversity of ownership or occupation. (No longer applies, since <span class=\"lnk caseln\">Wood v Waddington</span> in 2015)."
    ],
    "CATEGORY": "Easements &mdash; Implied Creation"
},
{
    "TYPE": "Case",
    "NUMBER": "119",
    "RELATED": [
        "Wood v Waddington",
        "Wong v Beaumont",
        "Bormann v Griffiths",
        "Platt v Crouch",
        "Manjang v Drameh",
        "Long v Gowlett",
        "Wheeldon v Burrows",
        "Walby v Walby",
        "Stafford v Lee",
        "Kettel v Bloomfold",
        "Moody v Steggles",
        "Fenn Tigers Case"
    ],
    "NAME": "Sovmots v Environment Secretary",
    "CITATION": "Sovmots v Environment Secretary [1977] UKHL 3",
    "AKA": "Sovmots",
    "YEAR": "1977",
    "CATEGORIES": [
        "Easements",
        "Implied Creation"
    ],
    "HELD": [
        "Confirming the rule in <span class=\"lnk caseln\">Long v Gowlett</span>, prior diversity of occupation or ownership was necessary for S62 creation of implied easements from personal permissions following transfer. (Not good law since <span class=\"lnk caseln\">Wood v Waddington</span> in 2015)."
    ],
    "CATEGORY": "Easements &mdash; Implied Creation"
},
{
    "TYPE": "Case",
    "NUMBER": "120",
    "RELATED": [
        "Manjang v Drameh",
        "Wood v Waddington",
        "Long v Gowlett",
        "Sovmots v Environment Secretary",
        "Wong v Beaumont",
        "Wheeldon v Burrows",
        "Stafford v Lee",
        "Platt v Crouch",
        "Walby v Walby",
        "Wright v Macadam",
        "Tara Hotels v Kensington",
        "Cardwell v Walker"
    ],
    "NAME": "Bormann v Griffiths",
    "CATEGORIES": [
        "Easements",
        "Implied Creation"
    ],
    "HELD": [
        "S62(1) LPA only applies to transfers taking place by deed or registered disposition &mdash; a claim relying on S62&#8217;s means of implying easements from personal permissions, therefore, failed."
    ],
    "CATEGORY": "Easements &mdash; Implied Creation"
},
{
    "TYPE": "Case",
    "NUMBER": "121",
    "RELATED": [
        "Long v Gowlett",
        "Sovmots v Environment Secretary",
        "Walby v Walby",
        "Manjang v Drameh",
        "Wheeldon v Burrows",
        "Bormann v Griffiths",
        "Wood v Waddington",
        "Stafford v Lee",
        "Wong v Beaumont",
        "R Square v Nissan",
        "Kettel v Bloomfold",
        "Crow v Wood"
    ],
    "NAME": "Platt v Crouch",
    "CATEGORIES": [
        "Easements",
        "Implied Creation"
    ],
    "CITATION": "Platt v Crouch (2003)",
    "CATEGORY": "Easements &mdash; Implied Creation",
    "HELD": [
        "Transforming personal rights into implied easements, under S62 of the LPA 1925, did <span class=\"it\">not</span> require prior diversity of occupation. Confirmed in 2016 in <span class=\"lnk caseln\">Wood v Waddington</span>."
    ],
    "YEAR": "2003"
},
{
    "TYPE": "Case",
    "NUMBER": "122",
    "RELATED": [
        "Bormann v Griffiths",
        "Sovmots v Environment Secretary",
        "Platt v Crouch",
        "Wheeldon v Burrows",
        "Stafford v Lee",
        "Walby v Walby",
        "Wong v Beaumont",
        "Manjang v Drameh",
        "Long v Gowlett",
        "Wright v Macadam",
        "Cardwell v Walker",
        "Fenn Tigers Case"
    ],
    "NAME": "Wood v Waddington",
    "CITATION": "Wood v Waddington [2015] EWCA Civ 538",
    "YEAR": "2015",
    "FLAGS": [
        "Key"
    ],
    "CATEGORIES": [
        "Easements",
        "Implied Creation"
    ],
    "HELD": [
        "Confirming <span class=\"lnk caseln\">Platt v Crouch</span>, implied easements created under S62 LPA 1925 does <span class=\"it\">not</span> require prior diversity of occupation/ownership."
    ],
    "CATEGORY": "Easements &mdash; Implied Creation"
},
{
    "TYPE": "Case",
    "NUMBER": "123",
    "RELATED": [
        "Bormann v Griffiths",
        "Walby v Walby",
        "Platt v Crouch",
        "Wood v Waddington",
        "Sovmots v Environment Secretary",
        "Stafford v Lee",
        "Manjang v Drameh",
        "Long v Gowlett",
        "Wong v Beaumont",
        "Bachelor v Marlowe",
        "Fenn Tigers Case",
        "Crow v Wood"
    ],
    "NAME": "Wheeldon v Burrows",
    "CATEGORIES": [
        "Easements",
        "Implied Creation"
    ],
    "HELD": [
        "Where the transfer fails formality requirements and is therefore only equitable, easements can nevertheless implied by similar means to S62 LPA. Although under S62 the rights must have been <span class=\"it\">continous and apparent</span> immediately prior to transfer, the right in question under this rule is <span class=\"bd\">either</span> <span class=\"it\">reasonable and apparent</span> <span class=\"bd\">or</span> _necessary for reasonable enjoyment*."
    ],
    "CATEGORY": "Easements &mdash; Implied Creation"
},
{
    "TYPE": "Concept",
    "NUMBER": "124",
    "RELATED": [
        "Freehold Covenants - Burden",
        "Freehold Covenants - Benefit",
        "Registered Protected Interests",
        "Circumstances for Adverse Possession",
        "Mistakes on the Register and Indemnities",
        "Adverse Possession",
        "Overriding Interests - Overview",
        "Overriding Interests at Transfer",
        "Patterns of Facts in Rectification Cases",
        "Land Registration - Theory",
        "Title Guarantee",
        "Interests of Persons in Actual Occupation"
    ],
    "NAME": "Covenants - Overview",
    "CATEGORIES": [
        "Covenants"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Leasehold Covenants</span></span><br>Contractual obligations about rent, quiet enjoyment, use, subletting, reversion, repair, insurance, and the like. But this is not on the City GDL Land syllabus, so sections 6.4 through 6.8 of <span class=\"it\">Modern Land Law</span>, pp.240-280, can safely be neglected.",
        "<span class=\"ud\"><span class=\"bd\">Freehold Covenants</span></span><br>A covenant was originally one type of contract, which merged with the other, a thing called an <span class=\"bd\">assumpsit</span>, and evolved into the law of contract.<br>Freehold covenants had <span class=\"bd\">merely contractual</span> effect until the 1848 case of <span class=\"lnk caseln\">Tulk v Moxhay</span> in which a covenant <span class=\"bd\">not to build on Leicester Square</span> was found to pass or &#8216;run&#8217; with the land.<br>&emsp;&emsp;This transformed freehold covenants, under certain conditions, from binding the original freeholders to binding freeholds, becoming a bona fide <span class=\"bd\">interest in land</span>.<br>See &mdash; <span class=\"lnk caseln\">Conditions for a Burden to Run</span> and <span class=\"lnk caseln\">Conditions for a Benefit to Run</span>.",
        "<span class=\"ud\"><span class=\"bd\">Compared to Easements</span></span><br>&emsp;&emsp;Similarly, they affect two plots of land. Talk of <span class=\"bd\">burdened</span> and <span class=\"bd\">benefitted</span> instead of <span class=\"bd\">dominant</span> and <span class=\"bd\">servient</span>. Dissimilarly, they cannot arise by accident. They must ultimately come from explicit promises made by covenantor to covenantee.<br>&emsp;&emsp;<span class=\"ilc\"><span class=\"it\">Dixon</span> &mdash; &#8220;the way to remember which is which is that <span class=\"it\">there are two Es in covenantee, and two Es in benefit.</span>&#8220; Hashtag JK.</span>",
        "<span class=\"ud\"><span class=\"bd\">In Practice</span></span><br>&emsp;&emsp;They are often made when land is split up. An <span class=\"lnk caseln\">LRA S29</span> t-for-v is concluded between X to Y, and promises are made in writing or by deed. Often, but not always, the promise burdens the buyer and the new plot, and benefits the seller and the original plot.<br>&emsp;&emsp;They can be <span class=\"bd\">negative</span>, restricting use of the burdened land. This  amounts to <span class=\"bd\">private planning law</span>. Common negative covenants are <span class=\"bd\">not to conduct trade</span> &mdash; <span class=\"lnk caseln\">Gafford v Graham</span> or <span class=\"lnk caseln\">Re Bromor Properties</span>; or <span class=\"bd\">not to subdivide</span> &mdash; <span class=\"lnk caseln\">[Case!]</span>. As such, they tend to <span class=\"bd\">preserve the character</span> of land.<br>&emsp;&emsp;They can also be <span class=\"bd\">positive</span>, potentially to the same character-preserving effect, and imply the spending of money. E.g., a  covenant to maintain the appearance of externally-visible buildings.",
        "<span class=\"ud\"><span class=\"bd\">Benefit and Burden</span></span><br>&emsp;&emsp;An action on a covenant requires showing the benefit has passed to the claimant and the burden to the defendant, assuming they aren&#8217;t the original covenantor/ee.  Otherwise, there&#8217;s no cause of action &mdash; <span class=\"lnk caseln\">Thamesmead Town v Allotey</span>.<br>&emsp;&emsp;<span class=\"bd\">Burden</span> runs with the land in fewer circs. than <span class=\"bd\">benefit</span> &mdash; cf. <span class=\"lnk caseln\">Freehold Covenants - Burden</span> and <span class=\"lnk caseln\">Freehold Covenants - Benefit</span>.<br>&emsp;&emsp;<span class=\"bd\">Benefit</span> can split &mdash; Hampstead case [NAME?] of a man who refused \u00a3400K to waive a covenant not to build. The other party went ahead and built. The former sued for an injunction but instead was given \u00a3500K damages &mdash; a large chunk of which was punishment for having ignored the covenant. It then emerged the benefit was split between the complainant and <span class=\"bd\">82 other people</span>, so he ended up with 1/82 of \u00a3500K.<br>&emsp;&emsp;The <span class=\"lnk caseln\">Conditions for a Burden to Run</span> with the land are not the same as the <span class=\"lnk caseln\">Conditions for a Benefit to Run</span>.<br>&emsp;&emsp;This causes odd situations. Dixon cites Ilkley, where many plots are burdened, without any plots benefitted, meaning the covenants are unenforceable. This, he says, doesn&#8217;t stop shyster solicitors selling insurance against the contingency of the benefitted covenantee coming back from the dead and suing the burdened freeholder."
    ],
    "CATEGORY": "Covenants"
},
{
    "TYPE": "Concept",
    "NUMBER": "125",
    "RELATED": [
        "Covenants - Overview",
        "Freehold Covenants - Benefit",
        "Joint Tenancy and Tenancy in Common",
        "Personal Rights",
        "Equitable Shares of Co-ownership",
        "Formality Rules - Legal",
        "Severance",
        "Land Registration - Theory",
        "Registered Protected Interests",
        "Schedule 3(2): Actual Occupation",
        "Conditions for Averse Possession",
        "Circumstances for Adverse Possession"
    ],
    "NAME": "Freehold Covenants - Burden",
    "CATEGORIES": [
        "Covenants"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Remedies</span></span><br>Enforcement of a <span class=\"bd\">freehold</span> covenant <span class=\"bd\">at law</span> is out of the question once the burdened land has been S29 transferred &mdash; <span class=\"lnk caseln\">Rhone v Stephens</span>. At law, damages are yours <span class=\"it\">by right</span>, whereas in equity, everything is at the court&#8217;s discretion.",
        "<span class=\"ud\"><span class=\"bd\">Conditions for a Burden to Run</span></span><br>The burden must:",
        "<ol><li><span class=\"nl\">Be <span class=\"bd\">restrictive</span> not <span class=\"bd\">positive</span> &mdash; <span class=\"lnk caseln\">Rhone v Stephens</span> in the Lords; <span class=\"lnk caseln\">Thamesmead Town v Allotey</span> in the CA. In both, this (fundamental) rule was criticised but reluctantly upheld.</span><ul><li><span class=\"nl\">Whether positive or negative is a matter of substance &mdash; <span class=\"lnk caseln\">Holland Park v Hicks</span>, where a neighbour &#8220;having to agree&#8221; was <span class=\"bd\">restrictive</span>, as it constrained the covenantor&#8217;s capacity for indecision.</span></li><li><span class=\"nl\">A covenant <span class=\"bd\">not to allow</span> something may be substantially <span class=\"bd\">positive</span>, e.g., not to allow property to fall into disrepair &mdash; money must be spent and actions must be taken, so it&#8217;s <span class=\"bd\">positive</span>.</span></li><li><span class=\"nl\">In <span class=\"lnk caseln\">Tulk v Moxhay</span> itself, the covenant was to <span class=\"bd\">keep</span> Leicester Square as an open space. This was held to be substantially a restriction.</span></li><li><span class=\"nl\"><span class=\"bd\">N.B.</span>, a <span class=\"bd\">covenant to erect a fence</span> is an <span class=\"bd\">easement to fencing</span>, <span class=\"ud\"><span class=\"bd\">not</span></span> a covenant &mdash; <span class=\"lnk caseln\">Crow v Wood</span>.</span></li></ul><li><span class=\"nl\"><span class=\"bd\">Touch and concern the land</span> &mdash; <span class=\"lnk caseln\">Robins v Berkeley Homes</span>. A matter of circumstance for each case, but there&#8217;s a general (albeit flexible) test from <span class=\"lnk caseln\">Swift Investments v Combined English Stores</span> per Lord Oliver:</span><ol><li><span class=\"nl\">Can the burden act on <span class=\"bd\">any</span> owner, not only the original covenantor?</span></li><li><span class=\"nl\">Can it affect the <span class=\"bd\">nature</span>/<span class=\"bd\">use</span>/<span class=\"bd\">value</span> of the burdened land?</span></li><li><span class=\"nl\">Aside from it&#8217;s substance, was the original intention really to bind <span class=\"bd\">only</span> the original parties?</span></li></ol><ul></li><li><span class=\"nl\">N.B. <span class=\"lnk caseln\">Marten v Flight Refuelling</span> per Wilberforce J: an express statement in a covenant that it affects the land is evidence that it <span class=\"bd\">should</span> run.</span></li></ul><li><span class=\"nl\">The burden must <span class=\"bd\">confer a benefit</span> on the other plot &mdash; <span class=\"lnk caseln\">Whitgift Homes v Stocks</span>.</span><ul><li><span class=\"nl\">This is satisfied if the covenant was to benefit <span class=\"bd\">a proprietary interest</span> of the covenantee, e.g., a lessor or mortgagee. There is no separate physical plot, but there <span class=\"bd\">is</span> a separate <span class=\"bd\">estate in land</span>, which benefits.</span></li><li><span class=\"nl\">If no such plot or estate is retained by the covenantee, it cannot run &mdash; <span class=\"lnk caseln\">Formby v Barker</span>.</span></li></ul><li><span class=\"nl\">Be <span class=\"bd\">intended</span> to run with the land. S79 LPA 1925 presumes this -\u2013 <span class=\"lnk caseln\">Roake v Chaddah</span>; <span class=\"lnk caseln\">Tophams v Earl of Sefton</span> &mdash; which can be rebutted by evidence in its instrument of creation or the circumstances between parties &mdash; <span class=\"lnk caseln\">Morrells v Oxford United FC</span>.</span></li><li><span class=\"nl\">Have complied with the rules of <span class=\"bd\">registration</span>.</span><ul><li><span class=\"nl\">To enforce a covenant against a transferee for value of a <span class=\"bd\">registered</span> disposition, it <span class=\"bd\">must</span> have been the subject of a notice in the register. Otherwise, it loses priority and is unenforceable as per S29.</span></li><li><span class=\"nl\">It remains enforceable against a S2<span class=\"bd\">8</span> transferee (whether registered or not), or against a purchasor of an <span class=\"bd\">equitable</span> interest in the land.</span></li></ul></ol>"
    ],
    "CATEGORY": "Covenants",
    "AKA": "Conditions for a Burden to Run; Burden"
},
{
    "TYPE": "Concept",
    "NUMBER": "126",
    "RELATED": [
        "Covenants - Overview",
        "Freehold Covenants - Burden",
        "Conditions for Averse Possession",
        "Formality Rules - Legal",
        "Legal Leases as Schedule 3 Overriding Interests",
        "Priority Rules",
        "Formality Rules - Equitable",
        "Joint Tenancy and Tenancy in Common",
        "Circumstances for Adverse Possession",
        "Severance",
        "Easements",
        "Mistakes on the Register and Indemnities"
    ],
    "NAME": "Freehold Covenants - Benefit",
    "CATEGORIES": [
        "Covenants"
    ],
    "SUMMARY": [
        "<span class=\"ud\"><span class=\"bd\">Conditions for a Benefit to Run</span></span><br>By contrast with <span class=\"lnk caseln\">Burdens</span>, a <span class=\"bd\">benefit can be passed at law</span> as well as equity; the benefit of a positive burden can run &mdash; although for that to add up to a successful claim requires the burdened land be in the hands of the original covenantor.",
        "<span class=\"ud\"><span class=\"bd\">At Law (against the <span class=\"it\">original</span> covenantor)</span></span>",
        "<ol><li><span class=\"nl\">The covenant must <span class=\"bd\">touch and concern</span> the original covenantee&#8217;s land &mdash; <span class=\"lnk caseln\">Rogers v Hosegood</span>. The same test as for <span class=\"lnk caseln\">Burdens</span>, from <span class=\"lnk caseln\">Swift Investments v Combined English Stores</span>.</span></li><li><span class=\"nl\">The claimant must have a legal estate in the benefitted land, but not necessarily the same that of the original covenantee &mdash; S78 LPA 1925.</span></li></ol>"
    ],
    "CATEGORY": "Covenants",
    "AKA": "Benefit; Conditions for a Benefit to Run"
},
{
    "TYPE": "Case Overviews",
    "NUMBER": "127",
    "RELATED": [
        "Case Overviews for Adverse Possession",
        "Case Overviews for Mortgages",
        "Case Overviews for Easements",
        "Case Overviews for Title Guarantee",
        "Case Overviews for Mistakes on the Register",
        "Case Overviews for Co-ownership",
        "Case Overviews for Overriding Interests",
        "Case Overviews for Overreaching"
    ],
    "NAME": "Case Overviews for Land Registration",
    "CATEGORIES": [
        "Land Registration"
    ],
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Halifax v Corbett</span></span><br><span class=\"sm\">Whether a sale has genuinely taken place is a matter of substance not form.</span></span></li></ul>"
    ],
    "CATEGORY": "Land Registration"
},
{
    "TYPE": "Case Overviews",
    "NUMBER": "128",
    "RELATED": [
        "Case Overviews for Overreaching",
        "Case Overviews for Co-ownership",
        "Case Overviews for Mortgages",
        "Case Overviews for Easements",
        "Case Overviews for Title Guarantee",
        "Case Overviews for Land Registration",
        "Case Overviews for Overriding Interests",
        "Case Overviews for Adverse Possession"
    ],
    "NAME": "Case Overviews for Mistakes on the Register",
    "CATEGORIES": [
        "Mistakes on the Register"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Fraud</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gold Harp v MacLeod</span></span><br><span class=\"sm\"><span class=\"it\">from wl:</span> &#8220;(1) The judge had been entitled to order that J&#8217;s title numbers should take priority. J&#8217;s and G&#8217;s leases fell within the subject matter of Sch.4 para.8. The primary effect of that provision was to confirm that the power to rectify the register was not limited to simply restoring an interest, but extended to changing what would otherwise be its priority.&#8221;  <span class=\"ilc\">TODO <span class=\"bd\">still</span> to do, ffs.</span></span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Halifax v Corbett</span></span><br><span class=\"sm\">Whether a sale has genuinely taken place is a matter of substance not form.</span></span></li></ul>",
        "<span class=\"bd\">Fraud - Right to Apply for Rectification as Property Right</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Malory v Cheshire</span></span><br><span class=\"sm\">(i) The right to apply for rectification is a property right. (ii) Registration by fraud did not give a <span class=\"it\">disposition</span> within the meaning of <span class=\"lnk caseln\">LRA 1925</span>; merely the bare legal title. The beneficial interest remained with the defrauded party. (Overruled on the second point by <span class=\"lnk caseln\">Swift 1st</span> for having undermined the plain intention of <span class=\"lnk caseln\">S58 LRA 2002</span>).</span></span></li></ul>",
        "<span class=\"bd\">Fraud - Unravelling - Rectification</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Fitzwilliam v Richall</span></span><br><span class=\"sm\">When B fraudulently obtains title by registration of A&#8217;s land which he then transfers to C, equity will unravel the whole transaction, and rectification will not be necessary to restore the title to A. But as there is no rectification, there will be no indemnity payable to C.  Following <span class=\"lnk caseln\">Malory</span>, fraudulent registration only confers <span class=\"bd\">bare legal title</span> (overturned in <span class=\"lnk caseln\">Swift 1st</span>).</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Guy vs Barclay&#8217;s</span></span><br><span class=\"sm\">When land is fraudulently transferred from A to B, then should the land subsequently be transferred to an innocent party C but A should <span class=\"it\">fail</span> to register a unilateral <span class=\"lnk caseln\">Notice</span> against the title when the mistake comes to his attention, C&#8217;s title will be good, and A&#8217;s claim for rectification will fail.</span></span></li></ul>",
        "<span class=\"bd\">Fraud - Indemnities</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Swift 1st v Chief Land Registrar</span></span><br><span class=\"sm\">Indemnities are owed for loss as a consequence of rectification of a mistake, even when the mistake occurs through fraud. Such registration confers title definitively &mdash; <span class=\"lnk caseln\">S58 LRA 2002</span>.  <span class=\"lnk caseln\">Malory</span> and <span class=\"lnk caseln\">Fitzwilliam</span> erred in deciding such circumstances only gave rise to the bare legal title and not the equitable interest.</span></span></li></ul>",
        "<span class=\"bd\">Rectification</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Knights Construction v Roberto Mac</span></span><br><span class=\"sm\">A mistake in the register is to be rectified when the RP to whom the title was wrongly registered is <span class=\"bd\">not in possession</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Baxter v Mannion</span></span><br><span class=\"sm\">When a wrongful RP is in possession, the threshold for rectification of the register on grounds of unfairness under <span class=\"lnk caseln\">Schedule 4</span>(3)(2)(b) is <span class=\"bd\">high</span>. Merely having lost title to the land is not enough. The unconscionability of a wrongful RP&#8217;s connivance in the mistake, however, strongly militates in favour of rectification.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Cooper v Gick</span></span><br><span class=\"sm\">When a wrongful RP is in possession but <span class=\"bd\">bears no blame for the mistake</span> in the register, it would be unfair not to rectify.</span></span></li></ul>",
        "<span class=\"bd\">Indemnities</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Williams v Mitchell</span></span><br><span class=\"sm\">When rectification of the register would prejudicially affect the new RP&#8217;s title, the usual remedy for the claimant will be indemnities from the Land Registry rather than rectification.</span></span></li></ul>"
    ],
    "CATEGORY": "Mistakes on the Register"
},
{
    "TYPE": "Case Overviews",
    "NUMBER": "129",
    "RELATED": [
        "Case Overviews for Mortgages",
        "Case Overviews for Overriding Interests",
        "Case Overviews for Mistakes on the Register",
        "Case Overviews for Land Registration",
        "Case Overviews for Co-ownership",
        "Case Overviews for Overreaching",
        "Case Overviews for Easements",
        "Case Overviews for Adverse Possession"
    ],
    "NAME": "Case Overviews for Title Guarantee",
    "CATEGORIES": [
        "Title Guarantee"
    ],
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Guy vs Barclay&#8217;s</span></span><br><span class=\"sm\">When land is fraudulently transferred from A to B, then should the land subsequently be transferred to an innocent party C but A should <span class=\"it\">fail</span> to register a unilateral <span class=\"lnk caseln\">Notice</span> against the title when the mistake comes to his attention, C&#8217;s title will be good, and A&#8217;s claim for rectification will fail.</span></span></li></ul>"
    ],
    "CATEGORY": "Title Guarantee"
},
{
    "TYPE": "Case Overviews",
    "NUMBER": "130",
    "RELATED": [
        "Case Overviews for Land Registration",
        "Case Overviews for Overriding Interests",
        "Case Overviews for Adverse Possession",
        "Case Overviews for Overreaching",
        "Case Overviews for Mistakes on the Register",
        "Case Overviews for Co-ownership",
        "Case Overviews for Title Guarantee",
        "Case Overviews for Easements"
    ],
    "NAME": "Case Overviews for Mortgages",
    "CATEGORIES": [
        "Mortgages"
    ],
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">State Bank of India v Sood</span></span><br><span class=\"sm\">A charge executed to secure existing debts: a mortgage where no money is received, <span class=\"it\">nevertheless</span> falls within the conditions provided by S2(1)(iii) and S27(2) of LPA 1925, and sweeps equitable shares of co-ownership off the land and into the purchase price.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Birmingham Midshires Morgages v Sabherwal</span></span><br><span class=\"sm\">Even when the rule of <span class=\"lnk caseln\">Overreaching</span> of equitable interests in the family home &#8216;offends natural justice,&#8217; it must nevertheless be applied.</span></span></li></ul>"
    ],
    "CATEGORY": "Mortgages"
},
{
    "TYPE": "Case Overviews",
    "NUMBER": "131",
    "RELATED": [
        "Case Overviews for Easements",
        "Case Overviews for Co-ownership",
        "Case Overviews for Mortgages",
        "Case Overviews for Land Registration",
        "Case Overviews for Mistakes on the Register",
        "Case Overviews for Overriding Interests",
        "Case Overviews for Adverse Possession",
        "Case Overviews for Title Guarantee"
    ],
    "NAME": "Case Overviews for Overreaching",
    "CATEGORIES": [
        "Overreaching"
    ],
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Birmingham Midshires Morgages v Sabherwal</span></span><br><span class=\"sm\">Even when the rule of <span class=\"lnk caseln\">Overreaching</span> of equitable interests in the family home &#8216;offends natural justice,&#8217; it must nevertheless be applied.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">City of London Building Society v Flegg</span></span><br><span class=\"sm\">The equitable interests of the parents had been overreached by the bank, as the two trustees, the RPs, had extinguished the parents&#8217; equitable interest by conveying the property to the bank. Cf. <span class=\"lnk caseln\">Williams &amp; Glyns Bank v Boland</span>.</span></span></li></ul>",
        "<span class=\"bd\">Failure to Overreach</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Williams &amp; Glyn&#8217;s Bank v Boland</span></span><br><span class=\"sm\">Overriding interests cannot be overreached when there is a single trustee/registered proprietor.</span></span></li></ul>"
    ],
    "CATEGORY": "Overreaching"
},
{
    "TYPE": "Case Overviews",
    "NUMBER": "132",
    "RELATED": [
        "Case Overviews for Co-ownership",
        "Case Overviews for Title Guarantee",
        "Case Overviews for Mistakes on the Register",
        "Case Overviews for Land Registration",
        "Case Overviews for Mortgages",
        "Case Overviews for Adverse Possession",
        "Case Overviews for Easements",
        "Case Overviews for Overreaching"
    ],
    "NAME": "Case Overviews for Overriding Interests",
    "CATEGORIES": [
        "Overriding Interests"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Persons in Actual Occupation</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Saeed v Plustrado</span></span><br><span class=\"sm\">The claim of an overriding interest succeeded on the grounds that the claimant was a person in actual occupation. Decided per incuriam on a misunderstanding of <span class=\"lnk caseln\">Schedule 3</span>(2) &mdash; overruled in <span class=\"lnk caseln\">Scott v Southern Pacific Mortgages</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Scott v Southern Pacific Mortgages</span></span><br><span class=\"sm\">The claimant had no interest in the property. Being in actual occupation did not per se create a Schedule 3(2) overriding interest.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">City of London Building Society v Flegg</span></span><br><span class=\"sm\">The equitable interests of the parents had been overreached by the bank, as the two trustees, the RPs, had extinguished the parents&#8217; equitable interest by conveying the property to the bank. Cf. <span class=\"lnk caseln\">Williams &amp; Glyns Bank v Boland</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Williams &amp; Glyn&#8217;s Bank v Boland</span></span><br><span class=\"sm\">Overriding interests cannot be overreached when there is a single trustee/registered proprietor.</span></span></li></ul>",
        "<span class=\"bd\">Meaning of Actual Occupation</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Thompson v Foy</span></span><br><span class=\"sm\">Leaving property temporarily, with the intention of returning, counts as actual occupation for Schedule 3(2).</span></span></li></ul>",
        "<span class=\"bd\">Meaning of Actual Occupation - Actual Occupation Immediately Before Conveyance</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Link Lending v Bustard</span></span><br><span class=\"sm\">Inter alia, the presence of personal property is evidence from which actual occpuation can be found. The old lady was in fact in a care home, but her personal property was still in on the land in question, to which she returned from time to time.</span></span></li></ul>",
        "<span class=\"bd\">Persons in Actual Occupation - Yielding of Right - Explicit</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">RBS v Etridge</span></span><br><span class=\"sm\">The claimant of an overriding interest over a new registered proprietor is deemed to have yielded the right by signing a consent form, e.g., to a bank, for a mortgage.</span></span></li></ul>",
        "<span class=\"bd\">Persons in Actual Occupation - Yielding of Right - Implied</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Equity &amp; Home Loans v Prestridge</span></span><br><span class=\"sm\">Involvement in the creation of a mortgage was deemed to be a waiver of of an overriding interest in favour of the new RP, the mortgagee.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Abbey National v Cann</span></span><br><span class=\"sm\">Actual occupation is distinct to <span class=\"bd\">acts of preparation</span> for actual occupation. Involvement in a transfer (e.g., the creation of a mortgage) by the claimant of an OI in actual occupation has the effect of a waiver to the right.</span></span></li></ul>",
        "<span class=\"bd\">Persons in Actual Occupation - Delegation of Right</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Credit &amp; Mercantile v Wishart</span></span><br><span class=\"sm\">A property right of a person in actual occupation will not override under Schedule 3(2) when the person claiming it has (implicitly) given authority to the original RP to act on his behalf.</span></span></li></ul>",
        "<span class=\"bd\">Persons in Actual Occupation - Occupation or Use</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Chaudhary v Yavuz</span></span><br><span class=\"sm\">The use of an <span class=\"lnk caseln\">easement</span> is not <span class=\"bd\">actual occupation</span> under Schedule 3(2).</span></span></li></ul>",
        "<span class=\"bd\">Persons in Actual Occupation - Reasonable Discoverability</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Chhokar v Chhokar</span></span><br><span class=\"sm\">The claim of an overriding interest will succeed, if its lack of reasonable discoverability on a careful inspection comes about through the transferor&#8217;s malice.  Of the transferee &mdash; &#8216;everything he did from first to last in connection with the transaction is stamped with immoral stigma.&#8217;</span></span></li></ul>",
        "<span class=\"bd\">Persons in Actual Occupation - Requirement to Disclose when Reasonable</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Begum v Issa</span></span><br><span class=\"sm\">It may not be reasonable to expect a right-holder to disclose rights to a purchasor, in the meaning of Schedule 3(2)(b) LRA 2002, when doing so could lead to potentially-violent retribution.</span></span></li></ul>"
    ],
    "CATEGORY": "Overriding Interests"
},
{
    "TYPE": "Case Overviews",
    "NUMBER": "133",
    "RELATED": [
        "Case Overviews for Title Guarantee",
        "Case Overviews for Easements",
        "Case Overviews for Mortgages",
        "Case Overviews for Mistakes on the Register",
        "Case Overviews for Land Registration",
        "Case Overviews for Co-ownership",
        "Case Overviews for Overreaching",
        "Case Overviews for Overriding Interests"
    ],
    "NAME": "Case Overviews for Adverse Possession",
    "CATEGORIES": [
        "Adverse Possession"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Human Rights</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Pye v UK</span></span><br><span class=\"sm\">Adverse Possession is consistent with ECHR rights.</span></span></li></ul>",
        "<span class=\"bd\">Meaning of Occupation</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Pye v Graham</span></span><br><span class=\"sm\">Being in control of land for one&#8217;s own benefit is enough for adverse possession. Such control might be shown by, e.g., repairing fences, excluding other people, maintaining gates and changing padlocks, but is not equivalent to an intention to own.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Red House v Catchpole</span></span><br><span class=\"sm\">Merely tidying up a piece of land is not enough evidence from which to adduce <span class=\"it\">control</span> for the purposes of adverse possession.</span></span></li></ul>",
        "<span class=\"bd\">Continuity of Possession</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bucks v Moran</span></span><br><span class=\"sm\">A would-be adverse possessor must show <span class=\"bd\">both</span> actual occupation <span class=\"bd\">and</span> intention to adversely possess. Adverse possession is not defeated by the original owner&#8217;s intention to use the land at a later date in a manner compatible with the adverse possession.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hounslow v Minchinton</span></span><br><span class=\"sm\">Having enclosed with a fence yet not having access, nor taking any action to maintain a piece of land, will not be enough to demonstrate a paper-titleholder&#8217;s continued possession in order to defeat adverse possession.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Lambeth v Ellis</span></span><br><span class=\"sm\">Adverse possession of land is not interrupted by the failure to submit a form required by statute of its occupier.</span></span></li></ul>",
        "<span class=\"bd\">Exceptions - Boundary Disputes</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Zarb v Parry</span></span><br><span class=\"sm\">Paper documents are not to be used to disturb boundaries which are settled, but incorrect to a nugatory degree. Such actions are defeated by adverse possession &mdash; especially if the claimant is a vexatious nutter.</span></span></li></ul>",
        "<span class=\"bd\">Adverse Possession of Residential Property as Criminal Offence</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Best v Chief Land Registrar</span></span><br><span class=\"sm\">The LR may not refuse to register title to residential property to an adverse possessor as a result of the potential criminalisation of such AP by <span class=\"lnk caseln\">LAPSO 2012</span>. The defence of <span class=\"it\">ex turpi causa</span> may not be invoked.</span></span></li></ul>"
    ],
    "CATEGORY": "Adverse Possession"
},
{
    "TYPE": "Case Overviews",
    "NUMBER": "134",
    "RELATED": [
        "Case Overviews for Overriding Interests",
        "Case Overviews for Mortgages",
        "Case Overviews for Land Registration",
        "Case Overviews for Title Guarantee",
        "Case Overviews for Adverse Possession",
        "Case Overviews for Overreaching",
        "Case Overviews for Mistakes on the Register",
        "Case Overviews for Easements"
    ],
    "NAME": "Case Overviews for Co-ownership",
    "CATEGORIES": [
        "Co-ownership"
    ],
    "SUMMARY": [
        "<span class=\"bd\">Joint Tenancy</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gould v Kemp</span></span><br><span class=\"sm\">When a joint tenant dies, his share cannot be &#8220;left&#8221; as part of his estate. A clause in a will purporting to do so is inoperative.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Antionades v Villiers</span></span><br><span class=\"sm\">There may well be unity of title despite contracts being signed on different days. In such circumstances, they may be read together.</span></span></li></ul>",
        "<span class=\"bd\">Quantification</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Laskar v Laskar</span></span><br><span class=\"sm\">Payments to the acquisition mortgage is enough for the establishment of a resulting trust.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Curley v Parkes</span></span><br><span class=\"sm\">Solicitor&#8217;s fees, removal fees, etc, are insufficient grounds to quantifying a share of co-ownership by means of a resulting trust</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Pettitt v Pettitt</span></span><br><span class=\"sm\">For the purposes of quantification of a share of equitable co-ownership by means of a common intention constructive trust, having done DIY was <span class=\"it\">not</span> evidence from which a common-intention to co-own could be found.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Gissing v Gissing</span></span><br><span class=\"sm\">The provision of white goods was not evidence from which common intention to establish equitable co-ownership could be found.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Lloyd&#8217;s v Rosset</span></span><br><span class=\"sm\">Common intention could be shown either by <span class=\"bd\">objective evidence</span>, or <span class=\"bd\">express assurance</span>, but, per Lord Bridge, by no other means.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Stack v Dowden</span></span><br><span class=\"sm\">For the purpose of quantifying shares of equitable co-ownership by means of common intention constructive trust, common intention could validly be <span class=\"bd\">inferred from the whole conduct</span> of the parties.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Jones v Kernott</span></span><br><span class=\"sm\">Not only can common intention be <span class=\"bd\">inferred</span> from the parties&#8217; conduct &mdash; it can also be <span class=\"bd\">imputed</span>, if it could be said of the parties that, had they thought about it, they would have intended it.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Abbott v Abbott</span></span><br><span class=\"sm\">Not only could <span class=\"bd\">existing</span> shares of co-ownership be quantified by inferring common intention, but such shares could also be <span class=\"bd\">established</span> by that means. (Privy Council for Australia)</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Capehorn v Harris</span></span><br><span class=\"sm\">Courts must stop short of <span class=\"it\">imputing</span> common intention of equitable co-ownership as a means of <span class=\"it\">acquiring</span> it.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Barnes v Phillips</span></span><br><span class=\"sm\">The difference between imputation and inference, may not be very great, when applied to the facts of a case.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Kinch v Bullard</span></span><br><span class=\"sm\">The notice to sever joint tenancy, as per S36(2) LPA 1925, need only be delivered, not read.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Burgess v Rawnsly</span></span><br><span class=\"sm\">A statutory notice to sever under S36(2) LPA must show an <span class=\"it\">immediate intention</span>, not an expression of desire.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Williams v Hensman</span></span><br><span class=\"sm\">Joint tenancy can be severed by (i) a legally-valid act on one&#8217;s own share; (ii) mutual agreement, which can be oral; or (iii) mutual conduct.</span></span></li></ul>"
    ],
    "CATEGORY": "Co-ownership"
},
{
    "TYPE": "Case Overviews",
    "NUMBER": "135",
    "RELATED": [
        "Case Overviews for Land Registration",
        "Case Overviews for Overreaching",
        "Case Overviews for Co-ownership",
        "Case Overviews for Mortgages",
        "Case Overviews for Overriding Interests",
        "Case Overviews for Title Guarantee",
        "Case Overviews for Mistakes on the Register",
        "Case Overviews for Adverse Possession"
    ],
    "NAME": "Case Overviews for Easements",
    "CATEGORIES": [
        "Easements"
    ],
    "SUMMARY": [
        "<span class=\"bd\">General</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Regency Villas v Diamond Resorts</span></span><br><span class=\"sm\">Despite the ample textbook rhetoric about how you can&#8217;t have an easement for a purely recreational purpose, this recent case may establish that in fact, you <span class=\"it\">can</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Canham v Fisk</span></span><br><span class=\"sm\">An easement is not extinguished by merger of dominant and servient tenements if there&#8217;s an intention to re-separate the plots in future.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Hill v Tupper</span></span><br><span class=\"sm\">The servient and dominant tenements of an easement need not be contiguous, but must be proximate. A <span class=\"it\">canal</span> and a particular piece of land are <span class=\"it\">not</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Moody v Steggles</span></span><br><span class=\"sm\">An easement to signage may validly confer a business benefit on the dominant tenement.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Tara Hotels v Kensington</span></span><br><span class=\"sm\">If, as in <span class=\"lnk caseln\">Coventry v Lawrence</span>, there can be an easement to make <span class=\"it\">noise</span> &mdash; which entails sound waves flooding from dominant to servient tenement &mdash; then there can also be an easement for people to flood out from a fire-escape onto the burdened land. See also <span class=\"lnk caseln\">Fenn Tigers</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bachelor v Marlowe</span></span><br><span class=\"sm\">The test for whether the burden of a claimed easement is excessive is whether the servient owner <span class=\"it\">retains reasonable use</span> of his land &mdash; that it does not <span class=\"it\">render the servient owner&#8217;s use illusory</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Moncreiff v Jamieson</span></span><br><span class=\"sm\">Per Lord Scott, the test for whether a claimed easement imposes an excessive burden should <span class=\"it\">not</span> be whether the <span class=\"it\">servient owner retains reasonable use</span>, but whether he <span class=\"it\">retains control</span> of the servient tenement. Doubted by Lord Neuberger. Obiter &mdash; an easement of use of a swimming pool could <span class=\"it\">not</span> be valid, as would require upkeep. Cf. <span class=\"lnk caseln\">Regency Villas</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Crow v Wood</span></span><br><span class=\"sm\">Although the burden of an easement may not, in general, be <span class=\"it\">positive</span> (i.e., necessitate that owner of burdened land must <span class=\"it\">do</span> something), the <span class=\"it\">easement to fencing</span> is an established exception.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Cardwell v Walker</span></span><br><span class=\"sm\">The claim of an easement to the (paid) supply of electricity from a generator, to a caravan park, was upheld.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wright v Macadam</span></span><br><span class=\"sm\">The use of the burdened land entailed by a claimed easement must not be excessive. Nevertheless, because the owner of a shed used to store coal for the dominant tenement retained <span class=\"it\">access</span>, the claim succeeded.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">R Square v Nissan</span></span><br><span class=\"sm\">An easement of parking was upheld despite that it was for <span class=\"it\">many</span> cars, as the owner retained reasonable use.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Copeland v Greenhalf</span></span><br><span class=\"sm\">A right claimed as an easement must be for something <span class=\"it\">specific</span>; not so general as to amount to <span class=\"it\">shared general use</span> of the burdened land.  The use of an orchard to store vans, having evolved from the use established fifty years previously of mending wagon-wheels, was found to be an excessive burden on the land and did not per se confer a <span class=\"it\">specific</span> benefit on the claimant&#8217;s land. It amounted, instead, to a claim to shared use, and was therefore, decided per Upjohn J to be &#8216;wholly outside the normal idea of an easement&#8217;.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Emcer v Miller</span></span><br><span class=\"sm\">If the nature of the benefit/burden conferred/imposed necessarily entails <span class=\"it\">temporary exclusive use</span>, then it may nevertheless valid as the subject of an easement. Therefore, an easement of use of a lavatory was upheld.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Kettel v Bloomfold</span></span><br><span class=\"sm\">As long as the use of a garage is not <span class=\"it\">exclusive</span>, it may be capable of being an easement. The right to park a single car in a double garage (a hypothetical case in the <span class=\"lnk caseln\">Law Commission Report on Easements</span>) could be capable, therefore, as long as the owner retains access. <span class=\"it\">What about a single garage where owner uses to store tools?</span></span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Fenn Tigers Case</span></span><br><span class=\"sm\">As in <span class=\"lnk caseln\">Coventry v Lawrence</span>, the making of noise is capable of being an easement.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Phipps v Pears</span></span><br><span class=\"sm\">Protection from the elements is <span class=\"it\">not</span> capable of being an easement.</span></span></li></ul>",
        "<span class=\"bd\">Implied Creation</span>",
        "<ul><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Walby v Walby</span></span><br><span class=\"sm\">The implied creation of easements on grounds of necessity will only succeed if not to do so would render the land in question unusable, to a significant degree. That the implied easement would be <span class=\"it\">convenient</span>, by contrast, is not enough.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Manjang v Drameh</span></span><br><span class=\"sm\">A claim to imply an easement of access will fail to be sufficiently <span class=\"it\">necessary</span>, if another means of access is available. Even if that means by boat.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Stafford v Lee</span></span><br><span class=\"sm\">When the parties&#8217; common intention in the transfer evinces that the plot will be used for a particular purpose, those easements <span class=\"it\">necessary for that use</span> will be impliedly created. Such as, e.g., an easement to run sewerage pipes to serve a plot sold to build a house.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wong v Beaumont</span></span><br><span class=\"sm\">The common intention of the parties to a transfer for the purpose of a restaurant will give rise to the implied easements necessary for that purpose &mdash; such as ventilation shafts to carry away the smell of MSG and shrimp.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Long v Gowlett</span></span><br><span class=\"sm\">For S62(1) LPA to transform precarious personal rights into easements, there was a requirement of prior diversity of ownership or occupation. (No longer applies, since <span class=\"lnk caseln\">Wood v Waddington</span> in 2015).</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Sovmots v Environment Secretary</span></span><br><span class=\"sm\">Confirming the rule in <span class=\"lnk caseln\">Long v Gowlett</span>, prior diversity of occupation or ownership was necessary for S62 creation of implied easements from personal permissions following transfer. (Not good law since <span class=\"lnk caseln\">Wood v Waddington</span> in 2015).</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Bormann v Griffiths</span></span><br><span class=\"sm\">S62(1) LPA only applies to transfers taking place by deed or registered disposition &mdash; a claim relying on S62&#8217;s means of implying easements from personal permissions, therefore, failed.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Platt v Crouch</span></span><br><span class=\"sm\">Transforming personal rights into implied easements, under S62 of the LPA 1925, did <span class=\"it\">not</span> require prior diversity of occupation. Confirmed in 2016 in <span class=\"lnk caseln\">Wood v Waddington</span>.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wood v Waddington</span></span><br><span class=\"sm\">Confirming <span class=\"lnk caseln\">Platt v Crouch</span>, implied easements created under S62 LPA 1925 does <span class=\"it\">not</span> require prior diversity of occupation/ownership.</span></span></li><li><span class=\"nl\"><span class=\"bd\"><span class=\"lnk caseln\">Wheeldon v Burrows</span></span><br><span class=\"sm\">Where the transfer fails formality requirements and is therefore only equitable, easements can nevertheless implied by similar means to S62 LPA. Although under S62 the rights must have been <span class=\"it\">continous and apparent</span> immediately prior to transfer, the right in question under this rule is <span class=\"bd\">either</span> <span class=\"it\">reasonable and apparent</span> <span class=\"bd\">or</span> _necessary for reasonable enjoyment*.</span></span></li></ul>"
    ],
    "CATEGORY": "Easements"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "136",
    "RELATED": [
        "(wl) Cook v Mortgage Business plc",
        "(wl) Palk v Mortgage Services",
        "(wl) City of London BS v Flegg HL",
        "(wl) Abbey National BS v Cann",
        "(wl) Link Lending v Bustard",
        "(wl) Ashburn v Arnold",
        "(wl) Kingsworth v Tizzard",
        "(wl) City of London BS v Flegg",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) National Provincial Bank v Ainsworth",
        "(wl) KS Victoria Street v House of Fraser",
        "(wl) Laskar v Laskar"
    ],
    "NAME": "(wl) Scott v Southern Pacific Mortgages",
    "SUMMARY": [
        "A purchaser of land could not create a proprietary interest in that land, capable of being an overriding interest, until after completion of the contract for sale."
    ],
    "CITATION": "Scott v Southern Pacific Mortgages [2014] UKSC 52",
    "ABSTRACT": [
        "The appellant (S) appealed against a decision ([2012] EWCA Civ 17) that the right of the respondent mortgagee (M) to its security had priority over her right to remain in occupation.",
        "Under a &#8220;sale and rent back&#8221; scheme, S had sold her house to a purchaser (N) on the strength of N&#8217;s promise that she could remain in the house indefinitely as a tenant. N bought the house with the assistance of a mortgage from M and purported to grant a leaseback to S. Exchange, completion and the execution of the mortgage took place on the same day. N did not tell M about its promise to S. After completion, N granted S a two-year assured shorthold tenancy. That was in breach of the mortgage terms, which permitted only the grant of an assured shorthold tenancy for a fixed term of not more than 12 months. When N defaulted on the loan, M sought possession. S argued that N&#8217;s promise had given her, from the exchange of contracts, an equitable proprietary right which took effect as an overriding interest under the Land Registration Act 2002 Sch.3 para.2 and was binding on M by virtue of s.29(2)(a)(ii). She argued that N was a constructive trustee or was bound by a proprietary estoppel. Both the High Court and the Court of Appeal found in favour of M. The central issue for the instant court was whether S had an overriding interest. That involved determining whether (i) a prospective purchaser could grant proprietary, as opposed to merely personal, rights before completion; (ii) even if S had proprietary rights, Abbey National Building Society v Cann [1991] 1 A.C. 56 applied to prevent her from asserting an equitable right that had arisen only on completion."
    ],
    "YEAR": "2014",
    "COUNSEL": "For the appellant: Bryan McGuire QC, James Stark. For the first and second respondent: Justin Fenwick QC, Nicole Sandells, Nicholas Broomfield. For the intervener: Lesley Anderson QC, Daniel Gatty.",
    "JUDGE": "Lady Hale JSC; Lord Wilson JSC; Lord Sumption JSC; Lord Reed JSC; Lord Collins JSC",
    "CIT": "[2014] UKSC 52",
    "FLAGS": [
        "Hale"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Banking and Finance",
        "Completion",
        "Equity Release Schemes",
        "Leaseback",
        "Mortgages",
        "Occupation",
        "Overriding Interests",
        "Proprietary Rights"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) S relied on s.116 of the Act to establish that she had proprietary rights. Unregistered interests which overrode registered dispositions had to be proprietary in nature, and the combined effect of s.116 and s.132 was that s.116 rights had to have a proprietary element in order to have any effect. S also relied on the line of authority to the effect that following the exchange of contracts, a seller held the property on trust for the purchaser. On the face of it, N&#8217;s promise bore the hallmarks of a proprietary estoppel, but the question was whether such an estoppel could be an interest in land before the promisor became the owner. Between exchange and completion the purchaser had a proprietary interest &#8220;of a sort&#8221;, Oughtred v Inland Revenue Commissioners [1960] A.C. 206 and Berkley v Poulett [1977] 1 E.G.L.R. 86 considered. The question was whether the conveyance and the mortgage were one indivisible transaction, or whether there was a moment between the completion of the purchase and the grant of the mortgage in which the purchaser acquired legal estate before disposing of it by way of mortgage, Coventry Permanent Economic Building Society v Jones [1951] 1 All E.R. 901, Church of England Building Society v Piskor [1954] Ch. 553, Universal Permanent Building Society v Cooke [1952] Ch. 95 and Woolwich Equitable Building Society v Marshall [1952] Ch. 1 considered. Cann decided that the conveyance and the mortgage were indivisible but, in any event, each of the above cases assumed that even if the tenant had equitable rights as against the purchaser, those rights would only become proprietary and capable of taking priority over a mortgage when they were &#8220;fed&#8221; by the purchaser&#8217;s acquisition of the legal estate, Cann applied. S&#8217;s appeal had therefore to be dismissed on the ground that she acquired merely personal rights against N when she agreed to sell on the basis of its promise. Her rights only became proprietary and capable of taking priority over the mortgage when N acquired the legal estate on completion, at which point the acquisition of the legal estate and the grant of the charge were one indivisible transaction (see paras 24, 36, 56-80, 105-114 of judgment). (2) (Obiter) (Per Lords Collins and Sumption JJ.S.C.) Given the conclusion on the first issue, the second, whether the contract for sale was part of an indivisible transaction together with the conveyance and the mortgage, did not arise and was unlikely ever to arise. Nevertheless, the court would express its views on it. It was implicit in Cann that the contract, transfer and mortgage were one indivisible transaction, Nationwide Anglia Building Society v Ahmed and Balakrishnan (1995) 70 P. &amp; C.R. 381 considered. In the instant case the contract and conveyance had been executed on the same day, but the analysis was not dependant on that. It would be unrealistic to treat the contract of sale as a divisible element. Even if S had equitable rights of a proprietary nature arising on exchange, the mortgage would still have taken priority (paras 84-85, 90). (Per Lady Hale J.S.C and Lords Wilson and Reed JJ.S.C.) The mortgagee was not a party to the contract between the vendor and purchaser. It was difficult to see how the House of Lords rejection of Piskor in Cann implied that the contract of sale was part of the indivisible transaction along with the conveyance and mortgage (paras 115-123)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Banking and Finance &mdash; Completion &mdash; Equity Release Schemes &mdash; Leaseback &mdash; Mortgages &mdash; Occupation &mdash; Overriding Interests &mdash; Proprietary Rights",
    "COURT": "UKSC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "137",
    "RELATED": [
        "(wl) Bridle v Ruby",
        "(wl) Facchini v Bryson",
        "(wl) Davis v Smith",
        "(wl) Wall v Collins",
        "(wl) Nat West Bank v Amin",
        "(wl) Thorner v Majors",
        "(wl) Portnip Stallion v Albert Stallion",
        "(wl) Bishop v Blake",
        "(wl) Abbey National BS v Cann",
        "(wl) Corbett v Halifax",
        "(wl) Pye Ltd v Graham",
        "(wl) Lloyds Bank v Rosset"
    ],
    "NAME": "(wl) Firstpost Homes v Johnson",
    "SUMMARY": [
        "Sale of land; form of contract; whether letter and plan were a single document; whether typing of name sufficient",
        "F orally agreed to purchase land from J. F prepared a letter bearing J&#8217;s name as addressee, and setting out the agreement to purchase the land &#8220;shown on the enclosed plan&#8221;. J signed the accompanying plan only, F signed both the plan and the letter. J died and F sought specific performance of the contract against J&#8217;s personal representatives. The personal representatives sought to strike out the claim because there was no contract satisfying the requirements of writing under the Law of Property (Miscellaneous Provisions) Act 1989 s.2 , which required written terms, in one document, signed by or on behalf of each party. The district judge dismissed the application on the basis that it was arguable that the letter and plan were one document, the judge overruled this and F appealed, further contending that if there were two documents, the purchaser had signed the letter by causing his name to be typed on it as addressee."
    ],
    "CITATION": "Firstpost Homes v Johnson [1995] 1 WLR 1567",
    "YEAR": "1995",
    "COUNSEL": "For FH: Thomas Seymour. For J: Robert Wakefield.",
    "JUDGE": "Balcombe LJ; Gibson LJ; Hutchison LJ",
    "CIT": "[1995] 1 WLR 1567",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Contract For Sale of Land",
        "Documents",
        "Signatures"
    ],
    "HELD": [
        "dismissing the appeal, that (1) for the purposes of s.2 of the 1989 Act, a letter and a plan enclosed with it were separate documents; the letter contained the terms and so was the document which needed to be signed; (2) the same section required each party to write his name on the document in his own handwriting, so that the typing of J&#8217;s name was not sufficient."
    ],
    "CATEGORY": "Real Property &mdash; Contract For Sale of Land &mdash; Documents &mdash; Signatures",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "138",
    "RELATED": [
        "(wl) Halifax v Popeck",
        "(wl) Abbey National BS v Cann",
        "(wl) Lloyds Bank v Carrick",
        "(wl) HSBC v Dyche",
        "(wl) Colchester BC v Smith",
        "(wl) Clarke v Corless",
        "(wl) Errington v Errington",
        "(wl) The Mortgage Corporation v Shaire and others",
        "(wl) Halifax BS v Thomas",
        "(wl) Midland Bank Trust Co v Green",
        "(wl) Gold Harp v McLeod",
        "(wl) McDowall v Hirschfield Lipson"
    ],
    "NAME": "(wl) United Bank of Kuwait v Sahib",
    "SUMMARY": [
        "Equitable interests in land; enforcement of charging order; deposit of title deeds as security; absence of agreement in writing; whether mere deposit sufficient to create equitable mortgage",
        "SGA, the third defendants in proceedings to enforce a charging order to secure a judgment debt in relation to S&#8217;s property, appealed against a declaration, that they did not hold an equitable mortgage over S&#8217;s undivided share in the proceeds of sale. SGA contended that the Law of Property (Miscellaneous Provisions) Act 1989 s.2 had not affected the rule, applicable since Russel v Russel (1783) 1 Bro C.C. 269 , that the deposit of the title deeds by way of security could be taken as creating an equitable mortgage without any writing and was not dependent on any actual contract between the parties."
    ],
    "CITATION": "United Bank of Kuwait v Sahib [1997] Ch 107",
    "YEAR": "1997",
    "COUNSEL": "For SGA: Christopher Pymont. For the plaintiff: James Munby Q.C.",
    "JUDGE": "Leggatt LJ; Peter Gibson LJ; Phillips LJ",
    "CIT": "[1997] Ch 107",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Agreements",
        "Charging Orders",
        "Disposition of Property",
        "Equitable Interests",
        "Equitable Mortgages"
    ],
    "HELD": [
        "dismissing the appeal, that under s.2 of the 1989 Act a disposition of an interest in land had to be by way of a written document, signed by both parties, containing all the terms of the agreement. The section was intended to provide certainty and the parties&#8217; intention to enforce a common agreement could not be inferred from the mere deposit of title deeds."
    ],
    "CATEGORY": "Real Property &mdash; Agreements &mdash; Charging Orders &mdash; Disposition of Property &mdash; Equitable Interests &mdash; Equitable Mortgages",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "139",
    "RELATED": [
        "(wl) Ghazaani v Rowshan",
        "(wl) HSBC v Dyche",
        "(wl) United Bank of Kuwait v Sahib",
        "(wl) Colchester BC v Smith",
        "(wl) Street v Mountford",
        "(wl) Cherry Tree Investments v Landmain",
        "(wl) Whittaker v Kinnear",
        "(wl) Clarke v Corless",
        "(wl) Hollington Bros Ltd v Rhodes",
        "(wl) Halsall v Brizall",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Gilbert v Spoor"
    ],
    "NAME": "(wl) Keay v Morris",
    "SUMMARY": [
        "The court made observations about the correct interpretation of Tootal Clothing Ltd v Guinea Properties Management Ltd (1992) 64 P. &amp; C.R. 452 which concerned the impact of the Law of Property (Miscellaneous Provisions) Act 1989 s.2 upon contracts which did not contain all the express terms of an agreement for the sale of land."
    ],
    "CITATION": "Keay v Morris [2012] EWCA Civ 900",
    "ABSTRACT": [
        "The court was required to determine the impact, if any, of the Law of Property (Miscellaneous Provisions) Act 1989 s.2 upon an alleged oral agreement between the parties.",
        "The appellant (M) was a company which had entered into an agreement to purchase plots of land from the respondents (K) and K&#8217;s company. It was agreed that after the sale K would take a lease of a medical centre which M was to build on part of the land. M agreed to pay a total price of \u00a34.5 million. The price was later reduced to \u00a33.8 million and the parties entered into a written supplemental agreement. K alleged that there was an oral agreement which had led to the price reduction. Under the terms of the oral agreement the price would be reduced on the basis that M would quickly enter into an agreement with the local authority under the Town and Country Planning Act 1990 s.106, and promptly begin building work on the medical centre (the works obligation). K alleged that M had breached the oral agreement by not carrying out the building works promptly, thereby causing K loss. On K&#8217;s summary judgment application, the judge refused to determine whether the oral agreement contained terms which ought to have been incorporated into the written agreement in compliance with s.2. On appeal, the court was required to determine (1) whether s.2 of the 1989 Act applied to the oral agreement; (2) if it did apply, whether the agreement was void for lack of compliance with s.2 since it was not in writing or signed by the parties."
    ],
    "YEAR": "2012",
    "COUNSEL": "For the appellant: John Randall QC, Conrad Rumney. For the respondents: Jeremy Cousins QC, Andrew Charman.",
    "JUDGE": "Laws LJ; Rimer LJ; Patten LJ",
    "CIT": "[2012] EWCA Civ 900",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Contracts",
        "Agreements",
        "Collateral Contracts",
        "Conditions of Sale",
        "Contracts For Sale of Land",
        "Void Contracts"
    ],
    "HELD": [
        "Appeal allowed in part.",
        "(1) The question to which s.2(1) of the 1989 Act required an answer was whether the written document the parties had signed as recording the terms for the sale included all the terms of such sale that they had expressly agreed. That was a question of fact, Grossman v Hooper [2001] EWCA Civ 615, [2001] 3 F.C.R. 662 applied. The answer might be that the disputed term was not a term of the relevant sale but was part of a strictly unrelated transaction. The problem in the instant case was that the works obligation sued upon was an oral one, North Eastern Properties Ltd v Coleman &amp; Quinn Conveyancing [2010] EWCA Civ 277, [2010] 1 W.L.R. 2715 considered. When the parties reached an agreement to vary the sale agreement, their agreement had to be contained in a document satisfying s.2. That was because by agreeing to vary the contract, they were in effect entering into a new contract, and could only validly do so if it was made in a written and signed document containing all the expressly agreed terms of the original agreement. The supplemental agreement purported to comply with s.2, but the critical question was whether it needed to also incorporate the works obligation on the basis that it was an expressly agreed term of the variation of the sale agreement. On the limited material before the court it was not possible to decide the point finally one way or the other. The judge had been correct to decline to do so, and had not erred by deferring its determination to the trial (see paras 27-33 of judgment). (2) In Kilcarne Holdings Ltd v Targetfollow (Birmingham) Ltd [2004] EWHC 2547 (Ch), [2005] 2 P. &amp; C.R. 8 Lewison J. deduced from Tootal Clothing Ltd v Guinea Properties Management Ltd (1992) 64 P. &amp; C.R. 452 a principle to the effect that, in a case in which the parties had purportedly made a s.2 contract but had in fact created a nullity because not all the terms of the sale were included within it, once the land elements of the purported contract had been completed, either side could then enforce any non-land terms that were or should have been included in it, even though, by reason of the non-compliance with s.2, they had no contractual force. The court respectfully disagreed with that summary of Tootal , Kilcarne doubted. Whilst Tootal was a difficult case, it was not authority for any such proposition, and the proposition that a void contract could, by acts in the nature of part performance, mature into a valid one was contrary to principle and wrong. There was nothing in Tootal to support K&#8217;s submission that once the land elements of the sale agreement had been completed it was open to them to sue M for the alleged breach of the works obligation which should have been included in the supplemental agreement, Tootal explained. M&#8217;s appeal on the Tootal point was therefore allowed (paras 36, 40-48)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Contracts &mdash; Agreements &mdash; Collateral Contracts &mdash; Conditions of Sale &mdash; Contracts For Sale of Land &mdash; Void Contracts",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "140",
    "RELATED": [
        "(wl) City of London BS v Flegg HL",
        "(wl) Scott v Southern Pacific Mortgages",
        "(wl) State Bank of India v Sood",
        "(wl) Fitzkriston v Panayi",
        "(wl) HSBC v Brown",
        "(wl) Horsham Properties v Beech",
        "(wl) Laskar v Laskar",
        "(wl) Link Lending v Bustard",
        "(wl) Davies v Directloans Ltd",
        "(wl) Moncrieff v Jamieson",
        "(wl) Regent Oil v Gregory",
        "(wl) McDonald v McDonald"
    ],
    "NAME": "(wl) City of London BS v Flegg",
    "SUMMARY": [
        "Overriding interest; mortgage by two trustees for sale; beneficiaries in occupation of land; whether overriding interest; whether interest overreached",
        "The interest of a beneficiary under a trust for sale of land in occupation of the land was not an overriding interest and was overreached where capital moneys were advanced to both trustees pursuant to a mortgage entered into by the trustees holding the land on trust for sale. In October 1977, Bleak House was purchased for GBP 34,000. Mr. and Mrs. Flegg provided GBP 18,000 of the purchase price. The remainder was provided by their son-in-law and daughter, Mr. and Mrs. Maxwell-Brown. It was necessary for the M-Bs to mortgage the house to the Hastings and Thanet Building Society to raise their contribution. In consequence, the house was transferred to Mr. and Mrs. M-B upon trust for sale as joint tenants. The house was in fact held by Mr. and Mrs. M-B on trust for sale and to stand possessed of the net proceeds of sale and rents and profits until sale upon trust for Mr. and Mrs. M-B and Mr. and Mrs. F as tenants in common in the proportions which they had contributed to the purchase price. From that time, Mr. and Mrs. M-B and Mr. and Mrs. F occupied the property in common. In January 1982, Mr. and Mrs. M-B executed a charge of the house in favour of the City of London Building Society to secure a loan of GBP 37,500. Mr. and Mrs. M-B used the money to discharge the existing mortgage and a number of other charges. Mr. and Mrs. M-B defaulted and the Building Society sought an order for possession of the house which was granted at first instance. On Mr. and Mrs. F&#8217;s appeal, the Court of Appeal held applying Williams &amp; Glyn&#8217;s Bank Ltd v Boland [1981] A.C. 487 , that Mr. and Mrs. F had an overriding interest in the house so that the Building Society&#8217;s charge was subject to their interest."
    ],
    "CITATION": "City of London BS v Flegg [1988] AC 54",
    "YEAR": "1988",
    "JUDGE": "Lord Bridge of Harwich; Lord Templeman; Lord Mackay of Clashfern; Lord Oliver of Aylmerton; Lord Goff of Chieveley",
    "CIT": "[1988] AC 54",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Banking and Finance",
        "Mortgages",
        "Overriding Interests",
        "Scotland",
        "Trusts For Sale"
    ],
    "HELD": [
        "allowing the Building Society&#8217;s appeal, that Mr. and Mrs. F&#8217;s interest was that of a beneficiary under a trust for sale. The advancement of capital moneys by the Building Society to Mr. and Mrs. M-B, being an advancement to two trustees, overreached Mr. and Mrs. F&#8217;s interest. Their interest transferred to the capital moneys in the hands of Mr. and Mrs. M-B and the equity of redemption. The enjoyment of occupation of the property did not give rise to any separate or severable right from those enjoyed under the trust for sale. the Law of Property Act 1925 S.14 could not enlarge or add to Mr. and Mrs. F&#8217;s interest; it could not create an interest in the nature of a right to occupy the property that survived the execution of the trust for sale. Upon the execution of the trust for sale, any rights in reference to the house ceased to subsist within the meaning of the Land Registration Act 1925 s.70(1)(g) ; there was no longer a right for the time being subsisting. Accordingly, there was nothing in s.70(1)(g) that had the effect of preserving any rights of Mr. and Mrs. F to occupy the house against the Building Society&#8217;s. In Williams and Glyn&#8217;s Bank v Boland, the beneficiary&#8217;s rights were not overreached because payment was not made to two trustees as required by s.27 Law of Property Act 1925. The same did not apply in the present case ( Williams &amp; Glyn&#8217;s Bank Ltd v Boland [1981] A.C. 487 distinguished; Bull v Bull [1955] 1 Q.B. 234 , National Provincial Bank Ltd v Ainsworth [1965] A.C. 1175 , Irani Finance Ltd v Singh [1971] Ch. 59 considered)."
    ],
    "CATEGORY": "Banking and Finance &mdash; Mortgages &mdash; Overriding Interests &mdash; Scotland &mdash; Trusts For Sale",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "141",
    "RELATED": [
        "(wl) Gillett v Holt",
        "(wl) Curley v Parkes",
        "(wl) Hapeshi v Allnatt",
        "(wl) Jones v Kernott",
        "(wl) Cherry Tree Investments v Landmain",
        "(wl) Clarke v Corless",
        "(wl) Ghazaani v Rowshan",
        "(wl) Geary v Rankine",
        "(wl) Lloyds Bank v Carrick",
        "(wl) Herbert v Doyle",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Grant v Edwards"
    ],
    "NAME": "(wl) Lyus v Prowsa Developments",
    "SUMMARY": [
        "Constructive trust; building contract; power of sale",
        "Where land is sold &#8220;subject to and with the benefit of a contract,&#8221; the purchaser holds the plot upon constructive trust for the beneficiary of the contract, and so does a second purchaser who buys with notice of the contract. By a contract in 1978 P contracted to purchase a plot of registered land, part of an estate being developed by the vendor company. The plot was to be transferred on completion of the house, but the company was wound up before completion. The bank, a prior mortgagee, elected to sell P&#8217;s land &#8220;subject to and with the benefit of the plaintiff&#8217;s contract.&#8221; The plot was then sold to D2 subject to the contract in so far as it was enforceable against D1. The transfer itself made no mention of the contract."
    ],
    "CITATION": "Lyus v Prowsa Developments [1982] 1 WLR 1044",
    "YEAR": "1982",
    "JUDGE": "Dillon J",
    "CIT": "[1982] 1 WLR 1044",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Equity",
        "Building and Engineering Contracts",
        "Constructive Trusts",
        "Unfair Dismissal"
    ],
    "HELD": [
        "P&#8217;s claim for a declaration that the original agreement was binding and for specific performance, that (1) P could not rely on the Law of Property Act 1925s.56; but (2) D were in turn not entitled to rely on the Land Registration Act 1925 s.20 and s.34(4) and P were entitled to an order for specific performance (White v Bijou Mansions Ltd [1937] Ch. 610, Bannister v Bannister [1948] 2 All E.R. 133 and dictum in Binions v Evans [1972] Ch. 359 applied)."
    ],
    "CATEGORY": "Equity &mdash; Building and Engineering Contracts &mdash; Constructive Trusts &mdash; Unfair Dismissal",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "142",
    "RELATED": [
        "(wl) Ofulue v Bossert",
        "(wl) Gold Harp v McLeod",
        "(wl) Baxter v Mannion",
        "(wl) Keay v Morris",
        "(wl) Multiservice Bookbinding v Mardon",
        "(wl) Gillett v Holt",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Walby v Walby",
        "(wl) Walker v Burton",
        "(wl) Thompson v Foy",
        "(wl) Lyus v Prowsa Developments",
        "(wl) Chaffe v Kingsley"
    ],
    "NAME": "(wl) Cherry Tree Investments v Landmain",
    "SUMMARY": [
        "Where parties had registered a charge over land but had mistakenly omitted a clause contained in an ancillary document extending the circumstances in which the power of sale could be exercised, that clause could not be inserted as a matter of interpretation. A legal charge was a public document on a public register upon which third parties could be expected to rely in order to obtain an accurate picture of the state of the title to the land."
    ],
    "CITATION": "Cherry Tree Investments v Landmain [2012] EWCA Civ 736",
    "ABSTRACT": [
        "The appellant (L) appealed against the entry of summary judgment in favour of the respondent (C) in an action concerning the validity of a sale of land.",
        "L was the registered proprietor of the land in question. It had charged the land to a finance company (D), and the charge had been registered. On the same day as they executed the charge, L and D entered into a written facility agreement which purported to extend the power of sale beyond that provided for in the Law of Property Act 1925 s.101(1)(i) so that it became exercisable immediately upon execution of the charge, without any default. The charge did not include the extended power of sale and did not refer to the facility agreement. In exercise of the extended power of sale, D sold the land to C with full title guarantee. C applied to be registered as the freehold proprietor but L objected, maintaining that the sale was invalid. It argued that because the charge made no reference to the facility agreement and the extended power of sale, the property could only be sold upon default. C sought an order that it be registered as proprietor of the land. The judge found in its favour. He found that L and D must have intended that the power of sale should arise immediately upon execution of the charge. He held that there was thus a mistake in the charge, which had to be read as if it contained a power of sale arising immediately upon execution. The question on appeal was whether the charge could be interpreted as expressing something which, by reason of a mistake, it did not say."
    ],
    "YEAR": "2012",
    "COUNSEL": "For the appellant: Edward Francis. For the respondent: James Pickering.",
    "JUDGE": "Arden LJ; Longmore LJ; Lewison LJ",
    "CIT": "[2012] EWCA Civ 736",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Contracts",
        "Equity",
        "Interpretation",
        "Mistake",
        "Power of Sale",
        "Rectification",
        "Registered Charges"
    ],
    "HELD": [
        "Appeal allowed.",
        "(Arden L.J. dissenting) (1) Under the principles of interpretation, the existence and terms of the facility agreement were admissible evidence, Investors Compensation Scheme Ltd v West Bromwich Building Society (No.1) [1998] 1 W.L.R. 896 followed. However, the extent to which that evidence could influence the interpretation of the charge was constrained by the fact that the land was registered. The land register was intended to be a complete and accurate reflection of the state of the title to registered land. Anybody applying to inspect the register would be supplied with the documents kept by the registrar. The facility agreement was not one of those documents, and to treat it as modifying the registered charge would fall foul of s.120(2)(b), under which the documents kept by the registrar were to be taken as containing all the material parts of the original documents. The courts distinguished between the use of background material in the interpretation of ordinary commercial contracts on the one hand, and its use in interpreting registrable contracts and public documents on the other. A more restrictive approach was to be taken in respect of the latter. Even though the system of land registration did not mean that registered title was wholly indefeasible, a person inspecting the register could not, in general, be expected to look further for extrinsic material, Westfield Management Ltd v Perpetual Trustee Co Ltd [2007] HCA 45 considered. When considering the extent to which background material not appearing on the face of the charge could influence the interpretation of that charge, the question was what weight would be attributed to it by a reasonable person with all the background knowledge of the parties Attorney General of Belize v Belize Telecom Ltd [2009] UKPC 10, [2009] 1 W.L.R. 1988 considered. In the instant case, the reasonable reader&#8217;s background knowledge would include the knowledge that the charge would be registered on a publicly accessible register upon which third parties might be expected to rely. He would know that documents retained by the registrar were to be taken as containing all material terms, and he would understand that the parties had a choice about what they put into the public domain and what they kept private. He would conclude that matters which the parties had chosen to keep private should not influence those parts of the bargain that they had chosen to make public. There was a real difference between allowing the physical features of the land to influence the interpretation of a transfer, and allowing the terms of a collateral document to do so. Even the staunchest advocates of the court&#8217;s ability to consider extrinsic evidence stopped short of saying that, by the process of interpretation, the court could insert whole clauses that the parties had mistakenly failed to include (see paras 104-105, 108-109, 123-132, 148-150 of judgment). The decision in Chartbrook Ltd v Persimmon Homes Ltd [2009] UKHL 38, [2009] 1 A.C. 1101 did not abolish the remedy of rectification, and the instant case demonstrated that it still had a useful role, if properly pleaded, Chartbrook considered. In the context of a charge intended to be completed by registration at the land registry, the insertion of a missing clause ought to be effected, if at all, by way of a properly pleaded and proved claim for rectification. C had neither pleaded such a claim nor attempted to prove one, and its case should not have been decided summarily as a pure question of interpretation. To interpret the registered charge as including the extended power of sale contained in the facility agreement was a step too far (paras 97-99, 136-138)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Contracts &mdash; Equity &mdash; Interpretation &mdash; Mistake &mdash; Power of Sale &mdash; Rectification &mdash; Registered Charges",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "143",
    "RELATED": [
        "(wl) Gold Harp v McLeod",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Davis v Smith",
        "(wl) Lloyds Bank v Rosset",
        "(wl) Halifax v Popeck",
        "(wl) Walby v Walby",
        "(wl) Clarke v Corless",
        "(wl) Best v Chief Land Registrar",
        "(wl) Baxter v Mannion",
        "(wl) The Mortgage Corporation v Shaire and others",
        "(wl) Halifax BS v Thomas",
        "(wl) Four Maids v Dudley Marshall"
    ],
    "NAME": "(wl) Walker v Burton",
    "SUMMARY": [
        "The correction of a mistaken registration of title to a lordship of the manor by closing the title did not mean that title to a fell, as waste of the manor, also had to be closed. The proprietors had not caused or contributed to the mistaken registration as they held an honest and reasonable belief in their ownership, and it was not unjust to leave the registration of the fell in their names where they had expended time and money in improving and managing it and no-one else had claimed ownership."
    ],
    "CITATION": "Walker v Burton [2013] EWCA Civ 1228",
    "ABSTRACT": [
        "The appellant villagers (W) appealed against a decision ([2012] EWHC 978 (Ch)) of a deputy adjudicator refusing their application to remove the respondents (B) from the Land Register as proprietors of a fell.",
        "After purchasing a farmhouse, B had registered the lordship of the manor, an incorporeal hereditament, and an adjoining fell that was waste of the manor, in their names. The fell had previously been unclaimed unregistered land, used by the villagers for grazing and recreation. B enforced their registered rights by erecting a gate and placing formal controls over the use of the fell through grazing and sports rights agreements with third parties. W believed that B had profited from an erroneous registration and applied under the Land Registration Act 2002 Sch.4 para.5(a) to alter the register on the ground of mistake and rectify the titles by closing them. The deputy registrar found that the lordship had either been vested in the Crown or was extinct so that there had been no lordship for B to acquire. He therefore closed that title. He found that the fell had also been registered by mistake. However, he refused to close that title, concluding that B had held an honest and reasonable belief that they were owners of the fell via ownership of the lordship and had therefore not caused or contributed to the mistake through lack of care under Sch.4 para.6(2)(a). He further held that it would not be unjust to refuse to make the alteration within the meaning of Sch.4 para 6(2)(b) as B had incurred expense in maintaining control of the fell; W had not objected to B&#8217;s application to register the fell; W had taken no steps for a further two years and had not claimed title to the fell so B&#8217;s removal served no useful purpose. The registrar made no express finding concerning whether the title to the fell had passed to the Crown. The Crown had not been joined to the proceedings and reserved its position pending the instant appeal. The issues were whether (i) the deputy adjudicator had accorded Crown title sufficient weight when determining the injustice point; (ii) the mistaken registration of the lordship meant that title to the fell should also be closed; (iii) there had been a lack of care on B&#8217;s part contributing to the mistaken registration of the fell; (iv) it would be unjust not to correct the fell registration."
    ],
    "YEAR": "2013",
    "COUNSEL": "For the appellants: Paul Stafford, Naomi Winston. For the respondents: Jeffrey Littman (Public Access barrister).",
    "JUDGE": "Mummery LJ; Jackson LJ; McCombe LJ",
    "CIT": "[2013] EWCA Civ 1228",
    "CATEGORIES": [
        "Real Property",
        "First Registration",
        "Incorporeal Hereditaments",
        "Land Registers",
        "Land Registration",
        "Manorial Rights",
        "Manorial Waste",
        "Moorland",
        "Ownership",
        "Rectification"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) The deputy adjudicator had not been required to decide who was entitled to the fell. The Crown had not asserted title and was not a party. It had not disclaimed ownership but was content to be bound by the decision. In those circumstances, W could not complain that it had been wrong not to have accorded Crown title significant weight in determining the injustice point under Sch.4 para.6 of the Act (see paras 92-93 of judgment). (2) W&#8217;s argument, that the mistaken registration of the fell was consequential on the mistaken registration of the lordship, was logical. However, Sch.4 para.6(2) required the court to take specified factors into account where there was a registered proprietor in possession of the land. That was not the case with the correction of the lordship registration, because it was not &#8220;land&#8221; but an incorporeal hereditament. The consequential nature of the mistaken registration of the fell did not result in the disapplication of Sch.4 para.6(2) (para.95). (3) It was a question of fact for the deputy adjudicator as to whether there had been a lack of care contributing to the mistaken registration of the fell. He had been entitled to reach his conclusion because: (a) the burden of showing lack of care had been on W; (b) B had behaved reasonably and responsibly in engaging solicitors to advise and act for them. B&#8217;s belief had been reasonable having regard to what was known about title to the lordship; (c) it was a fatal flaw that the lack of care point had not been raised in relation to the registration of the fell, as distinct from the registration of the lordship. It had only been raised after the evidence was closed and B had no opportunity to deal with it in their evidence (paras 96-99). (4) There had been no error of law in the deputy adjudicator&#8217;s conclusion on the injustice point. The following factors were relevant: (a) W had not claimed title to the fell and the Crown had shown no sign of asserting title against B. It was therefore a relevant factor that the fell should be owned by someone rather than being left in continuing uncertainty about title to it; (b) in view of the Crown&#8217;s stance it would have made no difference had the Crown been notified of B&#8217;s application for registration; (c) W had delayed bringing the application for rectification; (d) B had invested time, effort and money on the management and improvement of the fell and had entered into commitments on which they and others relied; (e) the fact that the mistake as to registration of the fell had been consequential on the registration of the lordship, which had been corrected, did not mean that it also had to be corrected or that it would be unjust not to correct it (paras 100, 102-106)."
    ],
    "CATEGORY": "Real Property &mdash; First Registration &mdash; Incorporeal Hereditaments &mdash; Land Registers &mdash; Land Registration &mdash; Manorial Rights &mdash; Manorial Waste &mdash; Moorland &mdash; Ownership &mdash; Rectification",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "144",
    "RELATED": [
        "(wl) Walker v Burton",
        "(wl) Lloyds Bank v Rosset",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Halifax v Popeck",
        "(wl) Mulvaney v Gough",
        "(wl) Bridle v Ruby",
        "(wl) Baxter v Mannion",
        "(wl) Cherry Tree Investments v Landmain",
        "(wl) St Marleybone Property Co v Fairweather",
        "(wl) Davis v Smith",
        "(wl) Colchester BC v Smith",
        "(wl) Abbey National BS v Cann"
    ],
    "NAME": "(wl) Gold Harp v McLeod",
    "SUMMARY": [
        "The court considered the power in the Land Registration Act 2002 Sch.4 to &#8220;correct&#8221; mistakes in the land register. It gave particular focus to the rectification provisions in Sch.4 para.8 in the context of changes to the priority of competing rights, explaining how the words &#8220;for the future&#8221; should be construed."
    ],
    "CITATION": "Gold Harp v McLeod [2014] EWCA Civ 1084",
    "ABSTRACT": [
        "The appellant property company (G) appealed against a decision ordering rectification of Land Registry title documents in favour of the respondents (J).",
        "The dispute concerned a residential property acquired in 1988 by J and others. J had title to, but did not occupy, the top floor. The space had its own title numbers. By 1999, the lower floors had been acquired and developed by a property developer (R). He wanted to acquire and develop the top floor without paying J. He therefore caused his son to acquire the freehold of the property in February 2009. On June 4, 2009, when J was around 11 weeks late paying the ground rent, R instructed bailiffs to effect a formal re-entry of the top floor. One week later, in ignorance of R&#8217;s activities, J sent a cheque for the ground rent. R did not cash it, but made a statutory declaration that J&#8217;s leases had been determined. He applied for closure of the title numbers and granted a long lease, with a new title number, to a company owned by an associate. That lease was further assigned, ultimately to G, a company owned and controlled by R. In August 2011, J began proceedings against R&#8217;s son and G for relief from forfeiture and damages for trespass. A judge decided as a preliminary issue that forfeiture of J&#8217;s leases had not been effective. J amended their claim to plead rectification of the register, and added R to the claim. In May 2013, a judge ordered that J&#8217;s title numbers be reinstated with immediate effect on the basis of &#8220;mistake&#8221; within the meaning of the Land Registration Act 2002 Sch.4 para.2(1)(a). He also held that there were no exceptional circumstances within the meaning of Sch.4 para.3(3) which would justify not rectifying the register. He ordered J&#8217;s title numbers to rank in priority to that owned by G. The issues were whether the judge had been wrong (i) to give J&#8217;s title priority; (ii) to find that there were no exceptional circumstances justifying non-rectification of the register."
    ],
    "YEAR": "2014",
    "COUNSEL": "For the appellant: Philip Brown (Direct Access). For the respondents: Kerry Bretherton, Robert Bowker.",
    "JUDGE": "Richards LJ; Sullivan LJ; Underhill LJ",
    "CIT": "[2014] EWCA Civ 1084",
    "CATEGORIES": [
        "Real Property",
        "Land Registers",
        "Land Registration",
        "Mistake",
        "Priorities",
        "Rectification",
        "Title to Land"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) The judge had been entitled to order that J&#8217;s title numbers should take priority. J&#8217;s and G&#8217;s leases fell within the subject matter of Sch.4 para.8. The primary effect of that provision was to confirm that the power to rectify the register was not limited to simply restoring an interest, but extended to changing what would otherwise be its priority. The words &#8220;for the future&#8221; qualified that power; the question was how those words fell to be interpreted. G&#8217;s argument was that if its interest was registered after the mistake but before the rectification, and would otherwise enjoy priority, that priority could not be altered, because an alteration to a priority which already existed could not be described as an alteration &#8220;for the future&#8221;. That construction would defeat the situation that Sch.4 para.8 was intended to address. Schedule 4 was concerned with &#8220;correcting&#8221; mistakes in the register and it was established law that the power to correct extended to correcting the consequences of such mistakes. Under para.3(3), that power was, in some circumstances, also a duty. An interest having priority meant that an owner could exercise his rights to the exclusion of any inconsistent rights of the owner of the competing interest. Thus, the concept of priority arose as soon as a party sought to enjoy those rights. The words &#8220;for the future&#8221; therefore meant that the person whose interest had been restored to the register could exercise his rights as the owner of that interest, to the exclusion of the rights of the owner of the competing interest, from the moment that the order was made. The effect of the judge&#8217;s order was to enable J to immediately exercise their rights as leaseholders to the exclusion of G, Argyle Building Society v Hammond (1985) 49 P. &amp; C.R. 148 applied, Knights Construction (March) Ltd v Roberto Mac Ltd [2011] 2 E.G.L.R. 123 approved, and Piper Trust Ltd v Caruso (UK) Ltd and DB UK Bank Ltd v Santander UK Plc considered. The court drew attention to the contrary reasoning advanced in Ruoff &amp; Roper: Registered Conveyancing (London: Sweet &amp; Maxwell) and Dr Charles Harpum, Stuart Bridge, Dr Martin Dixon, Megarry &amp; Wade: The Law of Real Property, 8th edn (London: Sweet &amp; Maxwell, 2012) concerning the interpretation of Sch.4 para.8, Freer v Unwins Ltd [1976] Ch. 288 and Malory Enterprises Ltd v Cheshire Homes (UK) Ltd [2002] EWCA Civ 151, [2002] Ch. 216 considered (see paras 20, 32-33, 35-42, 47-52, 54-56, 77, 79-83, 86-99 of judgment). (2) The judge had been right to find that there were no exceptional circumstances justifying non-rectification of the register. Delay by J in claiming rectification did not amount to an exceptional circumstance justifying the court not making an order which it would otherwise be obliged to make (paras 101, 104)."
    ],
    "CATEGORY": "Real Property &mdash; Land Registers &mdash; Land Registration &mdash; Mistake &mdash; Priorities &mdash; Rectification &mdash; Title to Land",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "145",
    "RELATED": [
        "(wl) Gold Harp v McLeod",
        "(wl) Walker v Burton",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Halifax BS v Thomas",
        "(wl) Walby v Walby",
        "(wl) Halifax v Popeck",
        "(wl) Link Lending v Bustard",
        "(wl) Davis v Smith",
        "(wl) Ashburn v Arnold",
        "(wl) HSBC v Dyche",
        "(wl) Lloyds Bank v Rosset",
        "(wl) Abbey National BS v Cann"
    ],
    "NAME": "(wl) Swift 1st v Chief Land Registrar",
    "SUMMARY": [
        "A claim brought by the registered proprietor of a charge against the Chief Land Registrar under the Land Registration Act 2002 Sch.8 for an indemnity for loss caused by cancellation of the charge succeeded, despite the charge having been a forged disposition. The claim was not defeated by the fact that the occupier of the relevant property had always had an overriding interest in the form of a right to have the forged disposition set aside."
    ],
    "CITATION": "Swift 1st v Chief Land Registrar [2015] EWCA Civ 330",
    "ABSTRACT": [
        "The registrar appealed against a decision (Swift 1st Ltd v Chief Land Registrar) that a mortgage company (S) was entitled to an indemnity for loss caused by cancellation of a registered charge.",
        "The registered proprietor (R) of the relevant property was in occupation of it. A third party executed a fraudulent charge in S&#8217;s favour as security for a loan to R. S later accepted that the charge was a forgery. The Land Registry deleted the relevant entry in the charges register. S sought an indemnity from the registrar under the Land Registration Act 2002 Sch.8 on the basis that the register had been rectified to its prejudice."
    ],
    "YEAR": "2015",
    "COUNSEL": "For the appellant: Timothy Morshead QC. For the respondent: Josephine Hayes.",
    "JUDGE": "Moore-Bick LJ; Patten LJ; Tomlinson LJ",
    "CIT": "[2015] EWCA Civ 330",
    "CATEGORIES": [
        "Real Property",
        "Forgery",
        "Fraud",
        "Indemnities",
        "Land Registration",
        "Legal Charges",
        "Overriding Interests",
        "Prejudice",
        "Rectification"
    ],
    "HELD": [
        "Appeal dismissed.",
        "S&#8217;s claim turned on the interaction between Sch.8 para.1(1)(a) and para.1(2)(b). The registrar contended that alteration of the register did not amount to rectification within para.1(1)(a) because it had not prejudicially affected S&#8217;s title to the registered charge so as to cause loss: the registration had always been subject to R&#8217;s right to have the forged disposition set aside, which was an overriding interest binding on S&#8217;s registered title. S relied on para.1(2)(b), under which, it said, the proprietor of a registered charge claiming in good faith under a forged disposition was deemed to have suffered loss (see paras 14-15 of judgment). The Land Registration Act 1925 s.83(4) largely contained the provisions now found in para.1(2)(b). However, the 2002 definition of rectification introduced the requirement to show that the registered title had been &#8220;prejudicially affected&#8221;. Chowood&#8217;s Registered Land, Re [1933] Ch. 574, held that no &#8220;loss&#8221; was suffered under s.83 where the register was rectified to give effect to an overriding interest. Accordingly, S accepted that it could not establish loss and prejudice unless either R&#8217;s right to set aside the charge was not an overriding interest, or loss was established under the deeming provisions in para.1(2)(b). Before 2002, it would have been necessary to consider whether s.83(4) created an exception to Chowood where the registered title was a forged disposition. Section 83(4) was designed to exclude the argument that rectification to remove a forged disposition caused no loss to the registered proprietor. The Law Commission&#8217;s proposals leading to the 2002 Act showed that it had intended prejudicial effect under the 2002 Act to be limited to cases where alteration of the title would have been held to cause &#8220;loss&#8221; under s.83(1)(a), and that the reference, in the definition of rectification in Sch.8 para.11, to alteration of the register which prejudicially affected the registered title was intended to give effect to Chowood . That left open the question of how Chowood operated in cases involving forged dispositions. The Law Commission&#8217;s proposals showed that it had regarded para.1(2)(b)&#8216;s objective as being to reproduce s.83(4) on the basis that the registered proprietor under a forged disposition acting in good faith would be treated as suffering loss from rectification. The unqualified application of Chowood , absent para.1(2)(b), was likely in most cases to completely answer any allegation of prejudice. The judge had rejected the registrar&#8217;s submission that para.1(2)(b) only applied once it was determined that alteration to the register amounted to rectification. That argument faced difficulty regarding the effect of para.1(2)(b) if Chowood applied in priority to the presumption of loss. Malory Enterprises Ltd v Cheshire Homes (UK) Ltd [2002] EWCA Civ 151, [2002] Ch. 216 decided that the fraudulent transfer of land only transferred the legal estate on registration, leaving the original proprietor with a beneficial interest. If that was correct, no alteration by removal of the new entry would constitute prejudice for the purposes of rectification under the 2002 Act; the transferee would never receive more than the bare legal estate and could not suffer loss by alteration of the register, regardless of whether the right of rectification was an overriding interest. However, the beneficial ownership point in Malory had been decided per incuriam. It did not consider Argyle Building Society v Hammond (1985) 49 P. &amp; C.R. 148, which stated that s.69(1) of the 1925 Act vested title by registration even when the transfer was a forgery, or consider s.114, which contradicted its reasoning, Hammond considered, Malory not followed (paras 19-45). The registrar had submitted that the limitation of what constituted rectification under the 2002 Act to cases of prejudice in the sense of loss made it impossible to regard para.1(2)(b) as intended to neutralise Chowood . The phrase &#8220;where the register is rectified&#8221; in para.1(2)(b) did not compel the conclusion that the existence of an overriding interest ousted the right to rectification. The differing origins of Chowood and the statutory provisions did not mean the provisions did not apply where the overriding interest consisted of a right to seek rectification on the ground that the disposition was forged. That such a right was capable of being an overriding interest did not alter the fact that the registered proprietor was claiming in good faith and was to be regarded as suffering loss by rectification as if the disposition had not been forged. Applying Chowood in the instant case led to the conclusion that there had been no loss, which contradicted the presumption under para.1(2)(b). If the 2002 or 1925 Acts had intended the deemed loss provisions to provide an exception for cases involving enforcement of an overriding interest, much clearer indication would have been necessary, Chowood considered (paras 47-51)."
    ],
    "CATEGORY": "Real Property &mdash; Forgery &mdash; Fraud &mdash; Indemnities &mdash; Land Registration &mdash; Legal Charges &mdash; Overriding Interests &mdash; Prejudice &mdash; Rectification",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "146",
    "RELATED": [
        "(wl) Henry v Henry",
        "(wl) Whittaker v Kinnear",
        "(wl) Hapeshi v Allnatt",
        "(wl) HSBC v Dyche",
        "(wl) Link Lending v Bustard",
        "(wl) Ashburn v Arnold",
        "(wl) Jones v Kernott",
        "(wl) Cherry Tree Investments v Landmain",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Rhone v Stephens",
        "(wl) Kingsworth v Tizzard",
        "(wl) Gillett v Holt"
    ],
    "NAME": "(wl) Thompson v Foy",
    "SUMMARY": [
        "A claim to set aside a deed of family arrangement and deed of gift transferring a property from a mother to her daughter based on undue influence failed where the kind of trust in play between the parties was no more than a trust that a daughter would keep her promise to her mother to pay her a sum to buy out her share, and there had been no actual undue influence and the mother had accepted that she was taking a risk."
    ],
    "CITATION": "Thompson v Foy [2009] EWHC 1076 (Ch)",
    "ABSTRACT": [
        "In conjoined actions, the court was required to determine issues concerning ownership and beneficial interest in a property, and priority over a registered charge.",
        "In the first action, the claimant (T) was the mother of the defendant (F). T, who was a widow, had shared her property with F and her family, and allowed them to build a substantial self-contained extension to live in, paid for by F. T acknowledged that the extension belonged to F. F and her family subsequently expressed an interest in moving to Spain, taking T with them. At that time, F did not have the money to fund the purchase of a Spanish property unless her part of the value of the property was realised. It was agreed that F would buy out T&#8217;s share of the property for \u00a3200,000 and then mortgage the property and rent it out to cover the mortgage. T would then receive the \u00a3200,000 and F would use the excess to purchase a Spanish home. T lent F \u00a320,000 to put a deposit on a Spanish property. F then applied for a buy-to-let mortgage from a company (X) which was the claimant in the second action, wrongly stating that she owned the property at that time. Following repeated requests for reassurance from F, T subsequently transferred the property to F via a deed of family arrangement and deed of gift. She then decided that she no longer wanted to move to Spain, and began searching instead for her own bungalow. When the mortgage moneys were released to F by X, F informed T that she could not pay her the \u00a3200,000 because she had been advised that if T were to die within seven years she would have to pay inheritance tax on her part of the money. F offered T \u00a360,000, with the remainder to be paid in seven years. A dispute then arose between T and F, as a result of which the property was not let out. In consequence, the mortgage was not paid and arrears amounted. X repossessed the property and obtained a money judgment against F. T claimed to be entitled to set aside the documents by which F came to be registered as proprietor of the property and that her right to do so had priority over the registered charge because it was an overriding interest. It fell to be determined whether (i) F was entitled to any beneficial interest in the property, and the extent of any such interest; (ii) T was entitled to set aside the deed of family arrangements and deed of gift to F on the ground of undue influence; (iii) if T was so entitled, her right to do so was binding on X; (iv) F had repaid to T the sum lent to pay for the deposit on the Spanish property."
    ],
    "YEAR": "2009",
    "COUNSEL": "For the claimant in the first action: Soofi Din. For the claimant in the second action: Benjamin Wood. For the defendant in both actions: In person.",
    "JUDGE": "Lewison J",
    "CIT": "[2009] EWHC 1076 (Ch)",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Equity",
        "Actual Undue Influence",
        "Beneficial Interests",
        "Overriding Interests",
        "Presumed Undue Influence",
        "Proprietary Estoppel",
        "Registered Charges",
        "Undue Influence"
    ],
    "HELD": [
        "Judgment accordingly.",
        "(1) F was entitled to a beneficial interest in the property based on proprietary estoppel. There had been a mutual understanding between T and F that if F built an extension it would belong to her. T had failed to establish that F had not acted in reliance on that representation, and F established her claim to ownership of the extension. (2) Unacceptable conduct amounting to undue influence might arise out of a relationship between two persons where one had acquired over the other a measure of influence or ascendancy, of which the ascendant person took unfair advantage. Whether a transaction had been brought about by undue influence was a question of fact, Royal Bank of Scotland Plc v Etridge (No.2) [2001] UKHL 44, [2002] 2 A.C. 773 applied. On the evidence, there had not been a complete relationship of trust and confidence between T and F, as T had appreciated that she was taking a risk, although F had promised to pay T the \u00a3200,000. The kind of trust in play was no more than a trust that a daughter would keep her promise to her mother. No presumption of undue influence arose, therefore, and the burden was on T to prove that F had actually used undue influence to procure that the transaction went ahead. The fact that F&#8217;s promise had been repeatedly and sincerely given did not amount to undue influence. Accordingly, the claim to set aside the deed of family arrangement and the gift of the legal title had to fail. (3) Even if, contrary to that finding, T had been entitled to set aside the transaction on the ground of undue influence, that would not have affected the registered estate at the date of the charge in favour of X because the claim based on undue influence would not crystallise until F&#8217;s misappropriation of the mortgage moneys and the equity would not arise until that time. (4) F had not repaid the \u00a320,000 that T had lent to her and it was still owing."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Equity &mdash; Actual Undue Influence &mdash; Beneficial Interests &mdash; Overriding Interests &mdash; Presumed Undue Influence &mdash; Proprietary Estoppel &mdash; Registered Charges &mdash; Undue Influence",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "147",
    "RELATED": [
        "(wl) Ashburn v Arnold",
        "(wl) Abbey National BS v Cann",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) HSBC v Dyche",
        "(wl) Scott v Southern Pacific Mortgages",
        "(wl) Halifax v Popeck",
        "(wl) Wood v Waddington",
        "(wl) Bucks CC v Moran",
        "(wl) Lloyds Bank v Rosset",
        "(wl) Herbert v Doyle",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Walby v Walby"
    ],
    "NAME": "(wl) Link Lending v Bustard",
    "SUMMARY": [
        "A party was found to be a person in actual occupation of a property for the purposes of the Land Registration Act 2002 Sch.3 para.2 where there was evidence of a sufficient degree of continuity and permanence of occupation, of involuntary residence elsewhere, which was satisfactorily explained by objective reasons, and of a persistent intention to return home when possible, as manifested by her regular visits to the property."
    ],
    "CITATION": "Link Lending v Bustard [2010] EWCA Civ 424",
    "ABSTRACT": [
        "The appellant (L) appealed against the dismissal of its claim for possession of a property.",
        "The respondent (B) had been the registered proprietor of the property where she lived. B suffered from a severe mental condition which affected her understanding and judgment. In 2004 B executed a transfer of the property to a fraudulent third party (H), who took advantage of her vulnerability. H then raised a loan from a bank secured by a legal charge over the property. B received no money from the transfer of the property or the loan. B continued to live in the property but was sectioned under the Mental Health Act 1983 s.3 in 2007 and was transferred to a psychiatric hospital. She was not allowed by the medical authorities to return to the property but she visited once a week and paid the necessary household bills. H went on to obtain a bridging loan from L in 2008 and granted L a legal charge over the property. H defaulted on the loan and L brought proceedings for possession of the property. The judge dismissed L&#8217;s claim on the basis that B was a person in actual occupation of the property so that she had an overriding interest under the Land Registration Act 2002 Sch.3 para.2.",
        "L submitted that B was not physically present at the property at the date of the bridging loan and had not been resident there for the previous year so the judge was wrong in law."
    ],
    "YEAR": "2010",
    "COUNSEL": "For the appellant: Antoine Tinnion. For the respondent: Iris Ferber.",
    "JUDGE": "Mummery LJ; Jacob LJ; Sullivan LJ",
    "CIT": "[2010] EWCA Civ 424",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Equitable Ownership",
        "Occupation",
        "Overriding Interests",
        "Possession",
        "Transfer of Land"
    ],
    "HELD": [
        "Appeal dismissed.",
        "Whether B was in actual occupation of the property at the relevant date was an issue on which the trial judge had to make an evaluation based on his findings of primary fact. The judge had considered the relevant authorities, which identified the factors that had to be weighed by the judge. The court could only interfere with the judge&#8217;s decision on that issue if it was satisfied that, in the light of the law, it was wrong as a matter of statutory construction or if it was wrong as a judgment of fact and degree. The judge was justified in ruling that B was a person in actual occupation of the property. His conclusion was supported by evidence of a sufficient degree of continuity and permanence of occupation, of involuntary residence elsewhere, which was satisfactorily explained by objective reasons, and of a persistent intention to return home when possible, as manifested by B&#8217;s regular visits to the property, Abbey National Building Society v Cann [1991] 1 A.C. 56 and Stockholm Finance Ltd v Garden Holdings Inc [1995] N.P.C. 162 considered, Thompson v Foy [2009] EWHC 1076 (Ch), [2010] 1 P. &amp; C.R. 16 applied."
    ],
    "CATEGORY": "Real Property &mdash; Equitable Ownership &mdash; Occupation &mdash; Overriding Interests &mdash; Possession &mdash; Transfer of Land",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "148",
    "RELATED": [
        "(wl) KS Victoria Street v House of Fraser",
        "(wl) City of London Corp v Fell",
        "(wl) Antoniades v Villiers",
        "(wl) Javad v Aqil",
        "(wl) AG Securities v Vaughan",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Goldberg v Edwards",
        "(wl) Street v Mountford",
        "(wl) Crago v Julian",
        "(wl) Doherty v Birmingham CC",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Grand Junction Co v Bates"
    ],
    "NAME": "(wl) Fitzkriston v Panayi",
    "SUMMARY": [
        "Registered ownership of land took precedence over a prior purported tenancy agreement that had not been dated and signed and, as the rent paid was not the best rent, could not be a valid parole tenancy and therefore not a periodic tenancy amounting to an overriding interest."
    ],
    "CITATION": "Fitzkriston v Panayi [2008] EWCA Civ 283",
    "ABSTRACT": [
        "The appellant tenant (P) appealed against a county court judge&#8217;s order for possession of an industrial unit.",
        "After the respondent landlord (F) had bought the unit, it brought the instant proceedings for possession against P, who carried on his business there. At the county court trial, P produced a copy of the purported original lease document between the previous landlord and tenant. That document referred to a tenancy for one year at a rent of \u00a34,000 per annum. It was undated and had not been signed by the original landlord. The judge was dismissive of the document.",
        "P contended that the manner in which the judge had conducted proceedings had deprived him of a fair trial. F maintained that its title took precedence over P&#8217;s prior interest."
    ],
    "YEAR": "2008",
    "COUNSEL": "For the appellant: M Roberts. For the respondent: D Lewis.",
    "JUDGE": "Laws LJ; Rix LJ; Jacob LJ",
    "CIT": "[2008] EWCA Civ 283",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Business Tenancies",
        "Fairness",
        "Leases",
        "Overriding Interests",
        "Periodic Tenancies",
        "Possession Claims",
        "Registered Interests",
        "Rent",
        "Security of Tenure"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) The criticisms of the judge&#8217;s conduct of the trial were well-founded. (2) However, the title of F, as registered owner, took precedence over all prior interests unless they were overriding interests pursuant to the Land Registration Act 2002 s.29. Under the Law of Property Act 1925 s.54, a parole tenancy took effect as an interest at will only and was not sufficient for a periodic tenancy unless it fell within s.54(2) as being a parole lease for a term not exceeding three years at the best rent. On the evidence, \u00a34,000 was not the best rent for the property. It followed that there was no valid parole tenancy, and thus no continuing periodic tenancy under the 1954 Act which was capable of overriding F&#8217;s registered interest."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Business Tenancies &mdash; Fairness &mdash; Leases &mdash; Overriding Interests &mdash; Periodic Tenancies &mdash; Possession Claims &mdash; Registered Interests &mdash; Rent &mdash; Security of Tenure",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "149",
    "RELATED": [
        "(wl) Lloyds Bank v Rosset",
        "(wl) Gold Harp v McLeod",
        "(wl) Abbey National BS v Cann",
        "(wl) United Bank of Kuwait v Sahib",
        "(wl) Whittaker v Kinnear",
        "(wl) Ghazaani v Rowshan",
        "(wl) Link Lending v Bustard",
        "(wl) Herbert v Doyle",
        "(wl) Lloyds Bank v Carrick",
        "(wl) Walby v Walby",
        "(wl) Thorner v Majors",
        "(wl) Walker v Burton"
    ],
    "NAME": "(wl) Halifax v Popeck",
    "SUMMARY": [
        "On the facts, a transfer of land was not made for valuable consideration because it was part of a fraudulent enterprise in which the concept of consideration was meaningless. Accordingly, the general rule in the Land Registration Act 2002 s.28 applied so that an equitable interest created before the transfer had priority over an interest created subsequent to it."
    ],
    "CITATION": "Halifax v Popeck [2008] EWHC 1692 (Ch)",
    "ABSTRACT": [
        "The court was required to determine as a preliminary issue the priority of the competing interests of the claimant banks (H and S) over a property so as to establish which of them had a loss claimable from the defendant conveyancing firms (D) as a result of the actions of mortgage fraudsters (T and J).",
        "J and T had fraudulently obtained mortgage advances, first from H and then from S, as a result of transfers of a domestic property executed with D&#8217;s assistance. Both H and S had thought they were making advances against the security of the entire property but in fact each ended up with a registered charge over only a small strip of the property. By the time S became involved J and T had transferred the property to J, who was acting under another name. In due course S obtained a money judgment against J, then a charging order over the property, which created an equitable charge in its favour. It then obtained an order for sale and sold the property. The order required S to apply the proceeds to discharge other securities over the property that had priority to its charging order. It was common ground that H had not acquired an immediate and direct equitable charge over the property because there was no contract that satisfied the Law of Property (Miscellaneous Provisions) Act 1989 s.2 signed by J and T promising to grant such a charge; and instead a proprietary estoppel had arisen in favour of H. The issue was whether H&#8217;s interest by proprietary estoppel had priority over S&#8217;s subsequent equitable charge.",
        "The second defendant argued that the registration of the transfer of the property to J had had the effect of wiping the registered estate clean of all equities not noted on the register as at the date of registration."
    ],
    "YEAR": "2008",
    "COUNSEL": "For the claimants: Mark Wonnacott. For the first defendant: S Ayliffe QC. For the second defendant: P Jones QC.",
    "JUDGE": "Norris J",
    "CIT": "[2008] EWHC 1692 (Ch)",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Equitable Interests",
        "Land Registration",
        "Mortgage Fraud",
        "Priorities",
        "Proprietary Estoppel",
        "Transfer of Land"
    ],
    "HELD": [
        "Preliminary issue determined in favour of first claimant.",
        "The burden lay upon S to show that there had been a transfer to J for valuable consideration. On the evidence, S had not discharged that burden because none of the conveyancing documents could be trusted. The transfer was part of a fraudulent enterprise in which the concept of consideration was entirely meaningless. Accordingly, the general rule that where equitable interests were equal the first in time prevailed, as preserved by the Land Registration Act 2002 s.28, applied because S could not bring itself within the provisions of s.29. Therefore H&#8217;s interest had priority as it was created first in time."
    ],
    "CATEGORY": "Real Property &mdash; Equitable Interests &mdash; Land Registration &mdash; Mortgage Fraud &mdash; Priorities &mdash; Proprietary Estoppel &mdash; Transfer of Land",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "150",
    "RELATED": [
        "(wl) Lloyds Bank v Carrick",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) HSBC v Dyche",
        "(wl) Corbett v Halifax",
        "(wl) Herbert v Doyle",
        "(wl) Clarke v Corless",
        "(wl) Halifax BS v Thomas",
        "(wl) Morrells v Oxford United FC",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Midland Bank Trust Co v Green",
        "(wl) Gilbert v Spoor",
        "(wl) Whittaker v Kinnear"
    ],
    "NAME": "(wl) Groveholt Ltd v Hughes",
    "SUMMARY": [
        "In certain circumstances a constructive trust could be imposed on a transferee of registered land to give effect to third-party rights notwithstanding their non-registration, but the third party in the instant case had failed to establish that such a trust should be imposed."
    ],
    "CITATION": "Groveholt Ltd v Hughes [2012] EWHC 3351 (Ch)",
    "ABSTRACT": [
        "The court determined the counterclaim of the first defendant (H), judgment having been entered against him in the action issued by the claimant company (G).",
        "By an agreement dated April 9, 1998, H sold part of a development site owned by him to a property-development company (C). Part of the land sold was referred to as the &#8220;Phase One Residential Land&#8221;; the remaining part was referred to as the &#8220;Phase Two Residential Land&#8221;. The former became the subject of development. The agreement envisaged that the Phase Two Residential Land would be developed at a later stage; it provided that if the relevant planning consent was not obtained within 10 years, the land would be transferred back to H for a nominal consideration. Planning consent was not obtained within that period. The property sold to C by H was registered with absolute title, but H did not at any time register his right to a re-transfer of the Phase Two Residential Land as an estate contract under the Land Registration Act 1925. In 2000, C sold the entire site owned by it to G. By his counterclaim, H sought specific performance of the obligation to re-transfer the Phase Two Residential Land to him."
    ],
    "YEAR": "2012",
    "COUNSEL": "For the claimant: Neil Kitchener QC, Zachary Bredemear. For the first defendant: Pav Korpal.",
    "JUDGE": "David Richards J",
    "CIT": "[2012] EWHC 3351 (Ch)",
    "CATEGORIES": [
        "Real Property",
        "Constructive Trusts",
        "Estate Contracts",
        "Non-Registration",
        "Sale of Land"
    ],
    "HELD": [
        "Counterclaim dismissed.",
        "It was well established that in certain circumstances a constructive trust could be imposed on a transferee of registered land to give effect to third-party rights notwithstanding their non-registration. Because that clearly cut across the underlying premise of the land-registration system that purchasers should acquire good title free of any interests which did not appear on the register, subject to statutorily defined overriding interests, the circumstances in which a constructive trust would arise had been narrowly confined. The crucial question was whether the transferee of the land had undertaken a new obligation to give effect to the relevant encumbrance or prior interest, Lloyd v Dugdale [2001] EWCA Civ 1754, [2002] 2 P. &amp; C.R. 13 followed. Although G accepted that it had knowledge or notice of H&#8217;s rights as contained in the agreement between him and C, it had not assumed an obligation to re-transfer the Phase Two Residential Land to him under the sale agreement which it had entered into with C. The effect of one clause in that agreement was that, for the purposes of the Law of Property (Miscellaneous Provisions) Act 1994, C sold with full title guarantee free of all rights created by it, which would clearly include H&#8217;s right to a re-transfer. Another clause provided that the property was sold subject to the entries on the property and charges registers and to certain other matters, none of which included H&#8217;s rights. Further, there was no specific reference in the agreement to H&#8217;s right to a re-transfer of the Phase Two Residential Land. Accordingly, G was not obliged to re-transfer that land to him (see paras 14-15, 19, 31, 38 of judgment)."
    ],
    "CATEGORY": "Real Property &mdash; Constructive Trusts &mdash; Estate Contracts &mdash; Non-Registration &mdash; Sale of Land",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "151",
    "RELATED": [
        "(wl) Cherry Tree Investments v Landmain",
        "(wl) Gold Harp v McLeod",
        "(wl) Davis v Smith",
        "(wl) Best v Chief Land Registrar",
        "(wl) Abbey National BS v Cann",
        "(wl) Bucks CC v Moran",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Hounslow LBC v Minchinton",
        "(wl) Ives v High",
        "(wl) Sava v SS Global Ltd",
        "(wl) Colchester BC v Smith",
        "(wl) Walby v Walby"
    ],
    "NAME": "(wl) Baxter v Mannion",
    "SUMMARY": [
        "It was implicit in the wording of the Land Registration Act 2002 Sch.6 para.1 that a person who was not in adverse possession of land was not entitled to apply to be registered as its owner. If registration occurred in those circumstances it would be susceptible to correction as a mistake within the meaning of Sch.4 para.1 and para.5."
    ],
    "CITATION": "Baxter v Mannion [2011] EWCA Civ 120",
    "ABSTRACT": [
        "The appellant (B) appealed against a decision ([2010] EWHC 573 (Ch), [2010] 1 W.L.R. 1965) upholding the judgment of a deputy adjudicator to the Land Registry to rectify the registration of title to a field in favour of the respondent (M).",
        "M had bought the field in 1996 and was registered as its proprietor. B made use of that field for a number of years and, in 2005, applied for registration of the field in his name pursuant to the Land Registration Act 2002 Sch.6 para.1(1), claiming to have been in adverse possession since 1985. The registry informed M that if he wished to object to such registration, he had to do so by a certain date by completing and returning a prescribed form. M failed to return the form within the time limit. The registry informed M that there was no power to extend time and duly registered B as proprietor. M lodged an application for rectification to correct a mistake pursuant to Sch.4 para.5(a). The adjudicator determined, amongst other things, that B had not been in exclusive possession during the relevant period and did not have the necessary intention to exclude the world at large. On appeal, the judge accepted that the adjudicator had applied the wrong onus of proof, but found that such mistake made no difference to her conclusion. He determined that the registration was a mistake that he had power to correct, and that it would be unjust not to order rectification despite the fact that B had since assumed possession of the land.",
        "B submitted that (1) the Act provided a clear and once-and-for-all system by way of notice to be followed by a counter-notice, failing that registration; (2) registration pursuant to a fraudulent application could amount to a mistake, whereas a registration following an innocent but mistaken application could not; (3) the judge had been wrong to hold that the question of onus of proof made no difference to the adjudicator&#8217;s decision; (4) it would be unjust to alter the register in circumstances where B had assumed possession of the land and where M could have returned the prescribed form challenging registration."
    ],
    "YEAR": "2011",
    "COUNSEL": "For the appellant: Helen Galley. For the respondent: Tom Weekes.",
    "JUDGE": "Mummery LJ; Jacob LJ; Tomlinson LJ",
    "CIT": "[2011] EWCA Civ 120",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Civil Evidence",
        "Adverse Possession",
        "Burden of Proof",
        "Mistake",
        "Rectification",
        "Register of Title",
        "Registration"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) It was implicit in the wording of Sch.6 para.1 that a person who was not in adverse possession of land was not entitled to apply to be registered as its owner. A registration obtained by a person not entitled to apply for it would be mistaken, so putting the register back in the condition it was prior to that application would be correction of a mistake within the meaning of Sch.4 para.1 and para.5. There was no reason to limit the jurisdiction to correct a mistake to official errors in the course of examination of a relevant application. To otherwise conclude would be an invitation to fraud. The fact that there was no possibility of extending the prescribed time meant that Parliament either intended that the rectification power could cover such a case or that the true owner could lose his land for failure to submit a form in time, a conclusion which was wholly improbable (see paras 24-26, 30 of judgment). The normal operation of the provisions would lead to certainty and simplicity and there was no answer to the fact that if landowners could lose land in such a way they would have lost it without compensation, with a consequential breach of the European Convention on Human Rights 1950 Protocol 1 art.1 (para.34). (2) It was impossible to draw any rational distinction between a mistake induced by fraud and a mistake induced by a wrong application. In both scenarios the reason for the mistake was the same, namely the fact that the registrar had been given false information. As the judge had noted, it would be strange if a registered proprietor could be at risk of losing his land to a squatter who had never been in adverse possession (paras 28-29). (3) The legal onus of proof lay on M. Having shown, prima facie, that B&#8217;s claim to have been in exclusive possession for upwards of 10 years was wrong, the evidential burden shifted to B and B had failed to prove that he had been in adverse possession. In any event, the adjudicator&#8217;s findings did not turn on the issue of onus of proof but rather came as the result of having heard all the evidence (paras 38-89). (4) As the judge had found, it was a matter of &#8220;simple justice&#8221; to put M back as the registered owner. B had made an unjustified attempt to acquire title (para.41)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Civil Evidence &mdash; Adverse Possession &mdash; Burden of Proof &mdash; Mistake &mdash; Rectification &mdash; Register of Title &mdash; Registration",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "152",
    "RELATED": [
        "(wl) IAM Group v Chowdrey",
        "(wl) St Marleybone Property Co v Fairweather",
        "(wl) Colchester BC v Smith",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Pye Ltd v Graham",
        "(wl) Bucks CC v Moran",
        "(wl) Sava v SS Global Ltd",
        "(wl) Hounslow LBC v Minchinton",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Four Maids v Dudley Marshall",
        "(wl) Halifax BS v Thomas",
        "(wl) Harris v Goddard"
    ],
    "NAME": "(wl) Zarb v Parry",
    "SUMMARY": [
        "In order to interrupt adverse possession, the paper title owners had to bring the adverse possessor&#8217;s exclusive possession to an end."
    ],
    "CITATION": "Zarb v Parry [2011] EWCA Civ 1306",
    "ABSTRACT": [
        "The appellants (Z) appealed against a decision that the respondents (P), their neighbours, had acquired title to a strip of land by adverse possession.",
        "Z&#8217;s predecessor (L) had sold part of his garden to P&#8217;s predecessors (C). A plan was attached to the transfer and the judge held that it showed that the boundary between the properties ran to the north of a hedge which was on Z&#8217;s land. However, he further held that P had acquired title by adverse possession to the strip of land between the boundary and the hedge which formed part of their garden.",
        "Z submitted that (1) C&#8217;s possession of the strip was with L&#8217;s consent so that the possession could not be adverse; (2) adverse possession of the strip by P had been interrupted by Z&#8217;s attempt to fence off the strip so as to start time running again; (3) P did not satisfy the requirement that throughout the previous period of 10 years they reasonably believed that they owned the strip, as required by the Land Registration Act 2002 Sch.6 para.5(4)(c)."
    ],
    "YEAR": "2011",
    "COUNSEL": "For the appellants: Laura Collignon. For the respondents: Christian Sweeney.",
    "JUDGE": "Lord Neuberger MR; Arden LJ; Jackson LJ",
    "CIT": "[2011] EWCA Civ 1306",
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "CATEGORIES": [
        "Real Property",
        "Adverse Possession",
        "Boundaries",
        "Consent",
        "Exclusive Possession",
        "Reasonable Belief"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) Z&#8217;s case that L gave his implied consent to the occupation of the strip by C was based on the fact that he erected a stock-proof fence on his side of the hedge and their evidence that &#8220;[L] actually chose to give us the extra tree and a few feet&#8221;. However, in order to demonstrate that L gave permission his words and acts had to be probative of, and not merely consistent with, the giving of permission. The erection of the fence was equivocal and C&#8217;s evidence was not inconsistent with P&#8217;s case on adverse possession. Z failed to disturb the judge&#8217;s finding that L did not consent to C&#8217;s occupation of the strip (see paras 22-28, 64-66 of judgment). (2) In order to establish that P&#8217;s adverse possession had been interrupted the factual possession of P would have to be brought to an end, Bligh v Martin [1968] 1 W.L.R. 804 applied. Z did not retake exclusive possession of the strip as they intended to do by banging in posts and starting to erect a fence. They decided to withdraw part-way through that exercise, because of the protests from P. It was clear that Z intended that they should recover possession, but they did not retake possession in any meaningful sense. It was not enough that Z planted stakes or took other steps symbolic of taking possession of the whole of the strip. The judge was entitled to come to the conclusion that P&#8217;s adverse possession had not been interrupted (paras 35-44). (3) The judge impliedly held that C and P reasonably believed that they owned the strip. C thought that L had given them the strip. When P purchased the property the dispute was dormant. By the time Z asserted their ownership C and P together had been in possession of the land for well over 10 years. A surveyor&#8217;s report commissioned by the parties found that the boundary was in the middle of the hedge. In the circumstances P&#8217;s belief was reasonable and the judge&#8217;s finding was not against the weight of the evidence (paras 46-51, 77-80)."
    ],
    "CATEGORY": "Real Property &mdash; Adverse Possession &mdash; Boundaries &mdash; Consent &mdash; Exclusive Possession &mdash; Reasonable Belief",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "153",
    "RELATED": [
        "(wl) Zarb v Parry",
        "(wl) Sava v SS Global Ltd",
        "(wl) Colchester BC v Smith",
        "(wl) Bucks CC v Moran",
        "(wl) Pye Ltd v Graham",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) St Marleybone Property Co v Fairweather",
        "(wl) United Bank of Kuwait v Sahib",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Ashburn v Arnold",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Crest Nicholson v McAllister"
    ],
    "NAME": "(wl) IAM Group v Chowdrey",
    "SUMMARY": [
        "A judge had been correct to rule that an individual had acquired land by adverse possession where the reasonableness of his belief in the ownership of the disputed land, as required under the Land Registration Act 2002 Sch.6 para.5(4)(c), could not be challenged."
    ],
    "CITATION": "IAM Group v Chowdrey [2012] EWCA Civ 505",
    "ABSTRACT": [
        "The appellant company (G) appealed against a decision dismissing its claim for possession of land which the respondent (C) had acquired by adverse possession.",
        "G had been registered as the proprietor of a property, &#8220;No.26&#8221;, in 2001. The disputed land concerned the first and second floors of No.26. C had entered into occupation of No.26A under an oral tenancy in 1990, before purchasing it in 1993 whereupon he was registered as the proprietor. From when C had first leased the property, he had exclusive possession of No.26A as a shop and had used the disputed land as an area for keeping stock. Subsequently, in 2009 and 2010, G wrote to C, asserting that he was not the owner of the disputed land, and enclosed copies of the relevant entries at the Land Registry. G brought a claim for possession of the disputed land in 2010. The judge concluded that the land fell within G&#8217;s title at the registry, but that C had nevertheless been in adverse possession of the disputed land since purchasing No.26A because, under the Land Registration Act 2002 Sch.6 para.5(4), he had been in possession of it for more than 10 years prior to the commencement of proceedings.",
        "G submitted that (1) C&#8217;s solicitors involved in the purchase of No.26A would have understood that there was no flying freehold over No.26 within the title of No.26A, and accordingly that the judge ought to have inferred that C did not reasonably believe that he owned the disputed land as required by Sch.6 para.5(4)(c); (2) C could not have reasonably continued to believe that he owned the disputed property after G&#8217;s correspondence."
    ],
    "YEAR": "2012",
    "COUNSEL": "For the appellant: Stephen Evans. For the respondent: John Osbourne.",
    "JUDGE": "Thorpe LJ; Etherton LJ; Ryder J",
    "CIT": "[2012] EWCA Civ 505",
    "CATEGORIES": [
        "Real Property",
        "Adverse Possession",
        "Reasonable Belief"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) The issue was not the question of the knowledge of reasonably competent solicitors acting for C, but the requirement for C&#8217;s reasonable belief in ownership of the disputed property. The question was whether, in all the circumstances, C was reasonable in holding his belief in ownership and whether he should have made enquiries as to whether the disputed land belonged to him. On the basis of the judge&#8217;s findings, there was nothing which would have put C on notice of the need to make enquiries, of his solicitors or of others, as to whether his title included the disputed land that he had enjoyed from when he had first acquired his interest (see paras 27-28 of judgment). (2) The mere fact that the paper title owner challenged asserted ownership by adverse possession was not always sufficient to make the adverse possessor&#8217;s belief unreasonable, Zarb v Parry [2011] EWCA Civ 1306, [2012] 1 W.L.R. 1240 applied. The question in each case was what, in all the circumstances, was the proper conclusion on reasonableness of belief. By the time C had received G&#8217;s letters, he had been enjoying unchallenged, exclusive occupation for 18 years. Accordingly, the judge was entitled and correct to conclude that the correspondence did not mean that C&#8217;s belief in ownership ceased to be reasonable (paras 29-30)."
    ],
    "CATEGORY": "Real Property &mdash; Adverse Possession &mdash; Reasonable Belief",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "154",
    "RELATED": [
        "(wl) Colchester BC v Smith",
        "(wl) Gold Harp v McLeod",
        "(wl) St Marleybone Property Co v Fairweather",
        "(wl) Pye Ltd v Graham",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Halifax v Popeck",
        "(wl) Baxter v Mannion",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Walker v Burton",
        "(wl) Bucks CC v Moran",
        "(wl) Sava v SS Global Ltd",
        "(wl) Cf Vallee v Birchwood"
    ],
    "NAME": "(wl) Best v Chief Land Registrar",
    "SUMMARY": [
        "Where a squatter claimed title to a residential property based on adverse possession, the fact that part of his occupation constituted a criminal offence under the Legal Aid, Sentencing and Punishment of Offenders Act 2012 s.144 did not prevent his conduct from qualifying as relevant adverse possession for the purposes of the Land Registration Act 2002 Sch.6. The criminalisation of squatting did not mean that granting title to a squatter in such circumstances amounted to him benefiting from his criminal conduct."
    ],
    "CITATION": "Best v Chief Land Registrar [2015] EWCA Civ 17",
    "ABSTRACT": [
        "The appellant registrar appealed against a decision ([2014] EWHC 1370 (Admin)) that the respondent squatter could rely on his adverse possession of a residential property to claim title to the property even though his occupation was a criminal offence under the Legal Aid, Sentencing and Punishment of Offenders Act 2012 s.144.",
        "The squatter had taken possession of an empty and vandalised house in 1997 without the owner&#8217;s consent. He did significant work to make the house habitable. From 2001 he treated the house as his own. In January 2012 he moved in and applied to become the registered proprietor. The registrar rejected the squatter&#8217;s application under the Land Registration Rules 2003 r.16(3) on the ground that he could not rely on an act which was itself a criminal offence as evidence of adverse possession. The court below held that adverse possession based on criminal trespass did not prevent an application for registration under the Land Registration Act 2002 Sch.6 from being successful. The issue was whether the criminalisation of squatting meant that granting title of a residential property to a squatter who claimed adverse possession allowed the squatter to improperly benefit from his criminal conduct.",
        "The registrar submitted that although adverse possession operated on the premise that the public interest in active use and marketability of land outweighed the general concern that a person should not be able to benefit from their own wrong, the enactment of s.144 meant that the public interest in ensuring that a person did not benefit from committing a crime was especially strong and outweighed the public policy expressed in Sch.6 of the 2002 Act."
    ],
    "YEAR": "2015",
    "COUNSEL": "For the appellant: Jonathan Karas QC, Katrina Yates. For the respondent: Philip Rainey QC, Marc Glover. For the interested party: No appearance or representation.",
    "JUDGE": "Arden LJ; McCombe LJ; Sales LJ",
    "CIT": "[2015] EWCA Civ 17",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Criminal Law",
        "Adverse Possession",
        "Ex Turpi Causa",
        "Illegality",
        "Land Registration",
        "Public Policy",
        "Squatting In Residential Buildings",
        "Title to Land"
    ],
    "HELD": [
        "Appeal dismissed.",
        "It was an established principle that the law of illegality did not give the court a discretion to take a claimant&#8217;s illegal actions into account when deciding the extent to which such illegality impacted the relief sought by the claimant. Rather, the court had to identify in the specific context a particular rule which appropriately reflected the relevant underlying policy, Tinsley v Milligan [1994] 1 A.C. 340 and Allen v Hounga [2014] UKSC 47, [2014] 1 W.L.R. 2889 applied. There was no single rule with blanket effect across all areas of law. In the instant case, the illegality affected statutory rights, and the registrar&#8217;s argument would involve &#8220;reading down&#8221; Sch.6 para.1 of the 2002 Act so as to provide that a period of adverse possession in reliance on behaviour which constituted a criminal offence could not qualify to be treated as adverse possession. Balancing the public policy considerations in the 2002 Act with those in the 2012 Act, it was clear that Parliament had not intended s.144 of the latter to impact Sch.6 of the former. Section 144 was designed to provide deterrence and practical assistance for homeowners in removing squatters from their properties; it was not to re-balance the rights of property owners and adverse possessors regarding their respective entitlements to be treated as title holders to property. That was so in respect of either registered or unregistered land. Accordingly, criminally unlawful activity falling within s.144 could occur without it preventing a successful claim to acquire title by virtue of adverse possession. There was no overriding public policy concern associated with s.144 which ought to be taken to affect the usual balance of interests between landowner and adverse possessor, Bakewell Management Ltd v Brandwood [2004] UKHL 14, [2004] 2 A.C. 519 and R. (on the application of Smith) v Land Registry (Peterborough Office) [2009] EWHC 328 (Admin) considered. The Proceeds of Crime Act 2002 Pt 5 did not provide relevant guidance on the meaning and effect of s.144 in the context of its intended impact on the regime in Sch.6, and it provided no support for the registrar&#8217;s case. Moreover it was questionable whether the requirements of POCA had been satisfied in relation to the squatter&#8217;s acquisition of the house, because there were other acts of assertion of possession which he could rely on, such as maintaining the property and boundary fence. POCA operated a separate regime, and the illegality defence was not to be imported into the scheme of the 2002 Act in an attempt to short-circuit the POCA procedure (see paras 51-52, 56, 58, 63, 65, 67-73, 75, 80, 84-88, 90-95, 108 of judgment)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Criminal Law &mdash; Adverse Possession &mdash; Ex Turpi Causa &mdash; Illegality &mdash; Land Registration &mdash; Public Policy &mdash; Squatting In Residential Buildings &mdash; Title to Land",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "155",
    "RELATED": [
        "(wl) Keay v Morris",
        "(wl) Ghazaani v Rowshan",
        "(wl) Yaxley v Gotts",
        "(wl) Nat West Bank v Morgan",
        "(wl) Midland Bank Trust Co v Green",
        "(wl) Cherry Tree Investments v Landmain",
        "(wl) Thompson v Foy",
        "(wl) Goodman v Gallant",
        "(wl) AIB Finance v Debtors",
        "(wl) Gilbert v Spoor",
        "(wl) Meah v GE Money",
        "(wl) Federated Homes v Mill Lodge"
    ],
    "NAME": "(wl) Hollington Bros Ltd v Rhodes",
    "SUMMARY": [
        "Estate contract; contract to grant underlease",
        "Where a contract to grant an underlease which might be registered under the Land Charges Act, 1925, is not registered and the head lease is sold to a purchaser with notice, the following principles apply: 1. The contract to grant the underlease is void against the purchaser of the head lease, by virtue of the Land Charges Act, 1925, s.13(2), and the Law of Property Act, 1925, s.199(1)(i). 2. Although the purchaser of the head lease expressly takes subject to and with the benefit of such leases and tenancies as may affect the premises, he is not bound by an estate contract which has not been registered. 3. The vendor of the head lease who has contracted to grant an underlease but who sells before completion of the underlease is in breach of contract and, as demonstrated in Wright v Dean [1948] Ch. 686 , the damages will be substantial. 4. There is no duty on the underlessee to register the contract to prevent its being void against a purchaser of the head lease and thereby preventing the breach of contract. In 1945 a draft underlease for seven years was agreed between the plaintiffs and the defendants. The plaintiffs, who were the underlessees, completed and returned the counterpart to the defendants&#8217; solicitor but the defendants did not exchange their part, although periodically requested by the plaintiffs to complete. In 1947 the defendants sold the head lease to a third party, with notice that the plaintiffs held an underlease for seven years. The third party served a notice to quit on the plaintiffs on the footing that they were only yearly tenants. Held, on the facts of the case there was no contract between the plaintiffs and defendants, but, had there been a contract, the defendants would have committed a breach and would have been liable for substantial damages. ( Wright v. Dean approved)."
    ],
    "CITATION": "Hollington Bros Ltd v Rhodes [1951] 2 All ER 578 (Note)",
    "YEAR": "1951",
    "JUDGE": "Harman J",
    "CIT": "[1951] 2 All ER 578 (Note)",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Contracts",
        "Contracts",
        "Grant",
        "Land Charges",
        "Underleases"
    ],
    "CATEGORY": "Real Property Other Related Subjects: Contracts &mdash; Contracts &mdash; Grant &mdash; Land Charges &mdash; Underleases",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "156",
    "RELATED": [
        "(wl) Mulvaney v Gough",
        "(wl) Phipps v Pears",
        "(wl) IAM Group v Chowdrey",
        "(wl) Chaffe v Kingsley",
        "(wl) Rhone v Stephens",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Nat West Bank v Amin",
        "(wl) Bucks CC v Moran",
        "(wl) Abbey National BS v Cann",
        "(wl) Walker v Burton",
        "(wl) Zarb v Parry",
        "(wl) Herbert v Doyle"
    ],
    "NAME": "(wl) Midland Bank Trust Co v Green",
    "SUMMARY": [
        "Unregistered option; conveyance at undervalue to defeat option",
        "In 1961, for the consideration of GBP 1, W granted G the option to buy a farm. This was an estate contract and so a legal charge, Class C, registrable under the Land Charges Act 1925 but G did not register it. In 1967, when the farm was worth GBP 40,000, W conveyed it to his wife E for GBP 500. A month later G registered the option as an estate contract, and a month after that he gave notice exercising the option. In 1970 G issued a writ stating that the option was still binding, and claiming specific performance. He failed at first instance, the judge holding that the sale to E had been a genuine sale by a vendor to a purchaser, as defined by the Land Charges Act 1925 s.13(2) for money or money&#8217;s worth, and that the option was therefore not specifically enforceable. G appealed successfully. E&#8217;s estate appealed to the House of Lords, where G contended that such a transaction had to be in good faith, and that the consideration given had to be more than nominal, in order to override an unregistered Class C interest."
    ],
    "CITATION": "Midland Bank Trust Co v Green [1981] AC 513",
    "YEAR": "1981",
    "JUDGE": "Lord Wilberforce; Lord Edmund-Davies; Lord Fraser of Tullybelton; Lord Russell of Killowen; Lord Bridge of Harwich",
    "CIT": "[1981] AC 513",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Conveyancing",
        "Land Charges",
        "Options"
    ],
    "HELD": [
        "allowing the appeal, (1) there was no requirement in s.13(3) that the purchaser should be in good faith; (2) the word &#8220;purchaser&#8221; in s.13(2), by definition, meant one who had provided valuable consideration; a term of art which precluded any inquiry into adequacy. There was no clause in the Land Charges Act 1925 equivalent to s.205(1)(xxi). To exclude a nominal sum of money from s.13(2) would be to rewrite the section, Monolithic Building Co, Re [1915] 1 Ch. 643 considered. Articles. See post, p.[31]."
    ],
    "CATEGORY": "Real Property &mdash; Conveyancing &mdash; Land Charges &mdash; Options",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "157",
    "RELATED": [
        "(wl) Taylor Fashions v Liverpool Victoria Trustees",
        "(wl) Goldberg v Edwards",
        "(wl) Wood v Waddington",
        "(wl) Baxter v Mannion",
        "(wl) Javad v Aqil",
        "(wl) Nickerson v Barraclough",
        "(wl) Fitzkriston v Panayi",
        "(wl) Stafford v Lee",
        "(wl) Colchester BC v Smith",
        "(wl) Binions v Evans",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Wright v Macadam"
    ],
    "NAME": "(wl) Ives v High",
    "SUMMARY": [
        "Estate contract; agreement for right of way",
        "A built a block of flats whose foundations encroached on B&#8217;s land. In 1949 an agreement was reached between them that B would allow the foundations to remain in return for a right of way, with or without motor vehicles, across the yard at the back of the block. In 1950 A sold his land and the block to C. In 1959, B, in reliance upon the agreement, built himself a garage which could only be entered over C&#8217;s land. C complimented B on it and B used the yard for access for his car. In 1960 he contributed one-fifth to the cost of re-surfacing the yard. That same year the flats were sold to the plaintiffs subject &#8220;to the right (if any) of the owners and occupiers&#8221; of B&#8217;s land &#8220;as now enjoyed to pass and repass with or without vehicles, over the open yard. . . .&#8221; No registration under the Land Charges Act 1925 , was ever effected by B. The plaintiffs sought an injunction to restrain B from exercising a right of way across the yard. The county court judge refused the injunction. On appeal to the Court of Appeal, held (1) that B was entitled in equity to a right of way (a) on the principle &#8220;qui sentit commodum sentire debet et onus&#8221; and (b) an equity arising out of acquiescence (by reason of C having stood by while B was building the garage so that he only had access to it over the yard); and (2) (per Lord Denning M.R. and Danckwerts L.J.) that neither of those rights was an estate contract or equitable easement within the Land Charges Act 1925 s.10(1), Class C (iv), Class D (iii) and so neither was invalidated for want of registration; and (per Winn L.J.) that the Act had no impact on the equitable estoppel that had arisen. Appeal dismissed. ( Hopgood v Brown [1955] 1 W.L.R. 213 applied, Inwards v Baker [1965] 2 Q.B. 29 applied, Halsall v Brizell [1957] Ch. 169 applied, May v Belleville [1905] 2 Ch. 605 applied, Ward v Kirkland [1966] C.L.Y. 4174 applied, Ramsden v Dyson (1866) L.R. 1 H.L. 129 applied and Plimmer v Wellington Corp (1884) 9 App. Cas. 699 applied; Lewisham BC v Maloney [1947-51] C.L.Y. 5226 approved, dicta of Denning L.J. in Errington v Errington and Woods [1952] C.L.Y. 1973 approved, and of Greene M.R. in Booker v Palmer [1942] 2 All E.R. 674 approved; Von Hatzfeldt Wildenburg v Alexander [1912] 1 Ch. 284 distinguished and Chillingworth v Esche [1924] 1 Ch. 97 distinguished; Rossiter v Miller (1878) 3 App. Cas. 1124 followed and Bonnewell v Jenkins (1878) 8 Ch. D. 70 followed)."
    ],
    "CITATION": "Ives v High [1967] 2 QB 379",
    "YEAR": "1967",
    "JUDGE": "Lord Denning MR; Danckwerts LJ; Winn LJ",
    "CIT": "[1967] 2 QB 379",
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Estoppel",
        "Registration",
        "Rights of Way"
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Estoppel &mdash; Registration &mdash; Rights of Way",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "158",
    "RELATED": [
        "(wl) Fowler v Baron",
        "(wl) Capehorn v Harris",
        "(wl) Grant v Edwards",
        "(wl) Laskar v Laskar",
        "(wl) Curley v Parkes",
        "(wl) National Provincial Bank v Ainsworth",
        "(wl) Stack v Dowden",
        "(wl) Gissing v Gissing",
        "(wl) Scott v Southern Pacific Mortgages",
        "(wl) Lloyds Bank v Rosset",
        "(wl) State Bank of India v Sood",
        "(wl) Abbott v Abbott"
    ],
    "NAME": "(wl) Kingsworth v Tizzard",
    "SUMMARY": [
        "Notice of equitable interest; person in occupation",
        "A wife who is separated from her husband but spends some part of virtually every day in the matrimonial home remains in occupation. A purchaser or mortgagee needs to carry out a full inspection of property in order to discover who other than a husband is in occupation, and has to look behind the husband&#8217;s attempted concealment of his wife&#8217;s occupation. The marriage between a husband and wife broke down and the wife left the matrimonial home but returned there regularly, including sleeping there when the husband was away. The house was in the husband&#8217;s name. The husband approached mortgage brokers to obtain a loan of GBP 66,000 on the security of the house which was unregistered land. He signed the application form and stated that he was single. The brokers instructed a surveyor to carry out a survey and the husband arranged a time on a Sunday when the wife was away. The surveyor saw evidence of the occupation by the husband and his children, but no evidence of occupation by any other female. The husband told the surveyor that his wife had left many months ago, and was living with someone nearby. The plaintiffs made a loan offer which was accepted in the light of the surveyor&#8217;s report. Shortly after, the husband and son emigrated. The plaintiffs sought to enforce their charge and the question arose whether the charge was subject to or overrode the wife&#8217;s equitable interest. The plaintiffs contended that mere occupation in the case of unregistered land was not sufficient to protect a person claiming equitable rights against a purchaser or mortgagee of the legal estate unless the claimant was found in occupation or would have been found on proper inspection taking place. It was common ground that the surveyor was the plaintiffs&#8217; agent."
    ],
    "CITATION": "Kingsworth v Tizzard [1986] 1 WLR 783",
    "YEAR": "1986",
    "JUDGE": "Judge Finlay QC",
    "CIT": "[1986] 1 WLR 783",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Family Law",
        "Beneficial Interests",
        "Matrimonial Home",
        "Mortgages",
        "Occupation"
    ],
    "HELD": [
        "that for physical presence to amount to actual occupation it did not have to be either exclusive or continuous and uninterrupted. Nor was it negatived by regular or repeated absence. Since on the facts the wife spent some part of virtually every day in the former matrimonial home, it was clear she had been in occupation and her change of habits had not altered that (dictum of Lord Wilberforce in Williams &amp; Glyn&#8217;s Bank Ltd v Boland [1981] A.C. 487 applied). When the surveyor discovered that the husband was married but separated he was under a duty to look for signs of occupation and to tell the plaintiffs. In any event, the reference in the report to the &#8220;son and daughter&#8221; itself should have put the plaintiffs on further inquiry which would have led them to discover the wife&#8217;s beneficial interest by virtue of the Law of Property Act 1925 s.199(1)(ii)(a) . They had knowledge of her beneficial interest and the mortgage took effect subject to those rights. The husband&#8217;s attempt to conceal the wife&#8217;s occupation could not be relied on by the plaintiff as preventing the need for further inquiry. Where a purchaser or mortgagee made reasonable inquiries and inspections and did not find the claimant in occupation or evidence sufficient to give notice of it, they were not fixed with notice of the claimant&#8217;s rights. In the case of residential property what was a reasonable inspection depended on all the circumstances. On the facts, the plaintiffs&#8217; pre-arranged inspection on a Sunday afternoon was not within the category of &#8220;such...inspections...as ought reasonably to have been made&#8221; under s.199(1)(ii) of the 1925 Act. The plaintiffs&#8217; claim for possession was dismissed."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Family Law &mdash; Beneficial Interests &mdash; Matrimonial Home &mdash; Mortgages &mdash; Occupation",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "159",
    "RELATED": [
        "(wl) Herbert v Doyle",
        "(wl) United Bank of Kuwait v Sahib",
        "(wl) Abbey National BS v Cann",
        "(wl) IDC v Clark",
        "(wl) HSBC v Dyche",
        "(wl) Clarke v Corless",
        "(wl) Halifax v Popeck",
        "(wl) Ghazaani v Rowshan",
        "(wl) Yaxley v Gotts",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Stafford v Lee",
        "(wl) Chaffe v Kingsley"
    ],
    "NAME": "(wl) Lloyds Bank v Carrick",
    "SUMMARY": [
        "Equitable interests in land; oral agreement; property under lease owned by another; lease charged as security for a loan; bank claiming possession; whether occupier who had paid whole of purchase price had equitable interest",
        "L appealed against the dismissal of its claim for possession in relation to a legal charge over a leasehold property. The lease was owned by RC, who had received the proceeds of sale as payment for the property under an oral agreement with his sister-in-law, MC, who was in possession. The judge below had held that the lease was held in trust for MC, but the bank argued that no equitable interest had been established, either by way of bare trust, constructive trust or proprietary estoppel, and that MC&#8217;s interest under the estate contract was unregistered and therefore void under the Land Charges Act 1972."
    ],
    "CITATION": "Lloyds Bank v Carrick [1996] 4 All ER 630",
    "YEAR": "1996",
    "COUNSEL": "For LB: Josephine Hayes. For C: Neil Vickery.",
    "JUDGE": "Beldam LJ; Morritt LJ; Sir Ralph Gibson",
    "CIT": "[1996] 4 All ER 630",
    "CATEGORIES": [
        "Real Property",
        "Constructive Trusts",
        "Equitable Interests",
        "Leases",
        "Oral Contracts",
        "Possession Proceedings"
    ],
    "HELD": [
        "allowing the appeal, that although no agreement had been made in writing, the contract became enforceable when MC paid the purchase price which removed any beneficial interest RC had. A bare trust could not be established simply as an equitable consequence of that contract. Furthermore, once a specifically enforceable contract had been made it was not possible to establish a constructive trust in addition to the rights of MC under the contractual relationship. Nor was it possible to apply principles of proprietary estoppel, by arguing that MC carried out improvements to the property believing that she owned it, as a trust already arose from the contract, Lloyds Bank Plc v Rosset [1991] A.C. 107, [1990] C.L.Y. 706 considered. However, if the title to the property had been registered MC would have had an overriding interest binding on the bank under the Land Registration Act 1925 s.70(1)(g) as no enquiries had been made and MC was in possession."
    ],
    "CATEGORY": "Real Property &mdash; Constructive Trusts &mdash; Equitable Interests &mdash; Leases &mdash; Oral Contracts &mdash; Possession Proceedings",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "160",
    "RELATED": [
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Escalus Properties v Robinson",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Crago v Julian",
        "(wl) AG Securities v Vaughan",
        "(wl) Re King",
        "(wl) Goldberg v Edwards",
        "(wl) Good Harvest v Centaur",
        "(wl) Ofulue v Bossert",
        "(wl) City of London Corp v Fell"
    ],
    "NAME": "(wl) Grand Junction Co v Bates",
    "SUMMARY": [
        "Covenant; breach of covenant; forfeiture; sublessees; mortgagee",
        "The Law of Property Act 1925 s.87(1) provides that a mortgagee by way of legal charge is to have the same &#8220;protection, powers and remedies&#8221; as though he had a subdemise. A lessee by subdemise has the right to protect his mortgage, where it is of a term of years, by applying for relief from forfeiture under s.146 of the Act. That is a most important right possessed by a mortgagee by subdemise, for it may be the only way of saving his security in the hands of an insolvent lessee. The effect of s.87 is to give the mortgagee, by way of legal charge, this same right, because he has the same protection, as if he were an underlessee. The plaintiffs granted a lease of premises to the defendant. That lease contained a covenant against assigning or underletting the premises or any part thereof without the plaintiffs&#8217; consent and also a convenant not to use the premises or any part thereof for any illegal or immoral purpose and to use the same for a single private dwelling-house or for letting furnished apartments. The defendant, with the plaintiff&#8217;s consent, assigned the lease to B, part of the purchase-money being secured by a legal charge. By an oral arrangement with B, the defendant and his family occupied the basement as a temporary arrangement on payment of GBP 3 10s. a week. The furniture in the basement belonged to the defendant. B was twice convicted of permitting the premises to be used as a brothel. The plaintiffs brought an action against the defendant and B for forfeiture of the lease on the ground of a breach of the covenant not to use the premises for an immoral purpose. B did not appear and judgment was entered against her. The defendant claimed that he was entitled to relief against forfeiture under s.146(4) of the Law of Property Act 1925."
    ],
    "CITATION": "Grand Junction Co v Bates [1954] 2 QB 160",
    "YEAR": "1954",
    "JUDGE": "Upjohn J",
    "CIT": "[1954] 2 QB 160",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Breach of Contract",
        "Brothels",
        "Covenants",
        "Forfeiture",
        "Leases"
    ],
    "HELD": [
        "(1) by s.87 of the Law of Property Act 1925 the defendant was put in the same position as if he had a charge by way of subdemise; therefore, he was entitled to make a claim under s.146; (2) the defendant was a tenant of the basement, but no relief from forfeiture would have been granted to him in respect of such tenancy (which, in any event, could only have extended to the basement) because that tenancy was only for a purely temporary occupation and the arrangement between the defendant and B was in breach of a convenant in the lease; (3) the defendant, who had not known of the acts of immorality, and who was in every way satisfactory as a tenant, was entitled to relief on payment of arrears of rent and payment for repairs; (4) as other premises owned by the plaintiffs in the same street had a reputation for prostitution, the damages for breach of convenant could be little more than nominal, namely, GBP 10. Re Good&#8217;s Lease applied."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Breach of Contract &mdash; Brothels &mdash; Covenants &mdash; Forfeiture &mdash; Leases",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "161",
    "RELATED": [
        "(wl) Good Harvest v Centaur",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Crago v Julian",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) City of London Corp v Fell",
        "(wl) MRA Engineering Ltd v Trimester Corp",
        "(wl) Re King",
        "(wl) KS Victoria Street v House of Fraser",
        "(wl) Grand Junction Co v Bates",
        "(wl) Reeves v Sandhu",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Halifax BS v Thomas"
    ],
    "NAME": "(wl) Regent Oil v Gregory",
    "SUMMARY": [
        "Covenants by mortgagor; running with mortgaged land",
        "The Law of Property Act 1925 s. 87(1) places a chargee by way of legal mortgage in the same position as if the mortgage were by sub-demise, and covenants protecting the chargee&#8217;s security are enforceable by him by virtue of s.87(1) which confers on it the &#8220;same protection . . . and remedies&#8221; as if the mortgage were by sub-demise. In 1956 a filling station was leased to C, who later in the year borrowed GBP 4,000 from P and undertook by deed to repay the sum by 20 half- yearly instalments of GBP 200 each, and charged the property by way of legal mortgage with the repayment. C covenanted by cl. 1(9) to purchase only P&#8217;s motor fuels, and by cl. 6 attorned tenant of the property to P at a peppercorn rent with a proviso for re-entry after the power of sale had become exercisable, after seven days&#8217; notice to quit. In 1961 a new lease was substituted and charged to P on the same terms as the previous one. In 1962 C assigned the lease to D subject to the mortgage and D took his supplies of motor fuels from P. In 1964, when GBP 1,000 remained secured on the mortgage, D declined to accept P as supplier and claimed to be free of the covenants to do so."
    ],
    "CITATION": "Regent Oil v Gregory [1966] Ch 402",
    "YEAR": "1966",
    "JUDGE": "Willmer LJ; Harman LJ; Salmon LJ",
    "CIT": "[1966] Ch 402",
    "CATEGORIES": [
        "Banking and Finance Other Related Subjects: Landlord and Tenant",
        "Assignment",
        "Covenants",
        "Leases",
        "Mortgages"
    ],
    "HELD": [
        "that the covenants were binding on D because (1) (per Harman and Willmer, L.JJ.) the attornment clause in the legal charge survived the assignment of the lease to D so that the relationship of landlord and tenant subsisted between P and D and the burden of the covenants ran with the land; (2) by s.87(1) of the Law of Property Act 1925 the covenants were enforceable by P, and, moreover, s.87(1) in conjunction with the attornment clause put D in the position of tenant. (Observations of Upjohn, J. in Grand Junction Co v Bates [1954] 2 Q.B. 160 approved)."
    ],
    "CATEGORY": "Banking and Finance Other Related Subjects: Landlord and Tenant &mdash; Assignment &mdash; Covenants &mdash; Leases &mdash; Mortgages",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "162",
    "RELATED": [
        "(wl) Nat West Bank v Amin",
        "(wl) Cook v Mortgage Business plc",
        "(wl) Davies v Directloans Ltd",
        "(wl) City of London BS v Flegg",
        "(wl) Hollington Bros Ltd v Rhodes",
        "(wl) HSBC v Brown",
        "(wl) State Bank of India v Sood",
        "(wl) City of London BS v Flegg HL",
        "(wl) Gissing v Gissing",
        "(wl) CPS v Piper",
        "(wl) Regent Oil v Gregory",
        "(wl) Laskar v Laskar"
    ],
    "NAME": "(wl) Nat West Bank v Morgan",
    "SUMMARY": [
        "Undue influence; mortgage arrears; bank offering loan subject to charge; whether presumption of undue influence",
        "Evidence of the mere relationship between parties to a contract is not, without more, sufficient to raise the presumption of undue influence. In 1974 M and his wife bought a house on mortgage. The payments fell into arrears, and the building society began proceedings for possession. M asked for a bridging loan, which the bank agreed to subject to a legal charge. M signed the charge, and the bank manager attended the house to obtain the wife&#8217;s signature. The wife signed it albeit with some reluctance. M failed to repay the loan and the bank brought possession proceedings. The wife&#8217;s defence was that the bank manager had exercised undue influence. The judge rejected the wife&#8217;s defence. Her appeal was allowed."
    ],
    "CITATION": "Nat West Bank v Morgan [1985] AC 686",
    "YEAR": "1985",
    "JUDGE": "Lord Scarman; Lord Keith of Kinkel; Lord Roskill; Lord Bridge of Harwich; Lord Brandon of Oakbrook",
    "CIT": "[1985] AC 686",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Contracts",
        "Bankers' Duties",
        "Mortgages",
        "Spouses",
        "Undue Influence"
    ],
    "HELD": [
        "allowing the bank&#8217;s appeal, that in &#8220;undue influence&#8221; cases the mere relationship of parties was not sufficient to raise the presumption without more, that the transaction itself had been wrongful in that it constituted a taking of advantage of the person involved ( Bank of Montreal v Stuart [1911] A.C. 120 and Poosathurai v Kannappa Chettiar (1919) L.R. 47 Ind. App. 1 applied; Lloyds Bank Ltd v Bundy [1975] Q.B. 326 considered)."
    ],
    "CATEGORY": "Contracts &mdash; Bankers' Duties &mdash; Mortgages &mdash; Spouses &mdash; Undue Influence",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "163",
    "RELATED": [
        "(wl) HSBC v Brown",
        "(wl) Nat West Bank v Morgan",
        "(wl) State Bank of India v Sood",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Halifax BS v Thomas",
        "(wl) The Mortgage Corporation v Shaire and others",
        "(wl) Laskar v Laskar",
        "(wl) Ashburn v Arnold",
        "(wl) Quennell v Maltby",
        "(wl) Four Maids v Dudley Marshall",
        "(wl) Kingsworth v Tizzard",
        "(wl) City of London BS v Flegg"
    ],
    "NAME": "(wl) Nat West Bank v Amin",
    "SUMMARY": [
        "A mortgagor who, in her defence to possession proceedings, alleged that she had been induced to enter into the relevant charge by undue influence, that the solicitor appointed by the bank to advise her was not her solicitor and that he had, in any event, failed to explain the transaction to her should not have had her defence struck out.",
        "A appealed against a decision of the Court of Appeal ((1999) 77 P. &amp; C.R. D35) that she had no reasonable prospect of defending possession proceedings brought by the mortgagee, N. A, who did not speak, read or write English, had alleged in her defence to the possession proceedings that the mortgage should be avoided because of undue influence exerted by her son, the debtor, for whose benefit the mortgage had been entered into. She maintained that N had failed to advise her, in the absence of her husband and the debtor, of the amount of her potential liability and of the risks she was undertaking, and that she had not been advised to obtain independent legal advice. The Court of Appeal had applied the principles set out by Stuart-Smith, L.J. in Royal Bank of Scotland Plc v Etridge (No.2) [1998] 4 All E.R. 705, a decision which had subsequently been affirmed in part by the House of Lords."
    ],
    "CITATION": "Nat West Bank v Amin [2002] UKHL 9",
    "YEAR": "2002",
    "COUNSEL": "For N: M Cottle. For A: Ramby DeMello.",
    "JUDGE": "Lord Nicholls of Birkenhead; Lord Hoffmann; Lord Hope of Craighead; Lord Scott of Foscote; Lord Rodger of Earlsferry",
    "CIT": "[2002] UKHL 9",
    "FLAGS": [
        "Hoffmann"
    ],
    "CATEGORIES": [
        "Real Property",
        "Banks",
        "Legal Advice",
        "Mortgages",
        "Possession of Land",
        "Solicitors",
        "Striking Out",
        "Undue Influence"
    ],
    "HELD": [
        "allowing the appeal, that it was appropriate that the case go to trial. A number of features were present that raised the issue of whether something more might be required of N before it could claim to be free of constructive notice of undue influence or of some other impropriety of the debtor, namely (1) an allegation that N had been aware that A and her husband could not speak English and were in a vulnerable position; (2) a letter from N to a firm of solicitors which had indicated that no special care was necessary when advising A and her husband and which had not stressed the importance that the couple should receive proper advice about the consequences of the proposed transaction, and (3) a letter from the solicitors to N which had not stated that A and her husband had understood what had been explained to them, Royal Bank of Scotland Plc v Etridge (No.2) [2001] UKHL 44, [2002] 2 A.C. 773 considered. The issue of whether the solicitors were in fact acting for A or for N was a matter which ought properly to be determined at trial."
    ],
    "CATEGORY": "Real Property &mdash; Banks &mdash; Legal Advice &mdash; Mortgages &mdash; Possession of Land &mdash; Solicitors &mdash; Striking Out &mdash; Undue Influence",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "164",
    "RELATED": [
        "(wl) Nat West Bank v Amin",
        "(wl) Rhone v Stephens",
        "(wl) McDonald v McDonald",
        "(wl) Wrotham Park Estate Co v Park Homes",
        "(wl) Roake v Chadha",
        "(wl) Jamaica Mutual Life v Hillsborough",
        "(wl) City of London BS v Flegg HL",
        "(wl) Thompson v Foy",
        "(wl) Lloyds Bank v Rosset",
        "(wl) City of London BS v Flegg",
        "(wl) Birdlip v Hunter",
        "(wl) Nat West Bank v Morgan"
    ],
    "NAME": "(wl) HSBC v Brown",
    "SUMMARY": [
        "A bank would not be granted an order for possession of a property which the owner had charged as security for her son&#8217;s indebtedness to the bank, as she had not received the appropriate independent legal advice."
    ],
    "CITATION": "HSBC v Brown [2015] EWHC 359 (Ch)",
    "ABSTRACT": [
        "A bank sought an order for possession of a freehold property which the owner had charged as security for her son&#8217;s indebtedness to the bank.",
        "The property owner submitted that the charge was unenforceable because despite a certificate of execution having been signed by her and a solicitor who claimed to have given her independent legal advice, she had simply signed it without having met him or having received legal advice from him."
    ],
    "YEAR": "2015",
    "COUNSEL": "For the claimant: Kate Rogers. For the defendant: Michael F Barrow.",
    "JUDGE": "Judge Simon Barker QC",
    "CIT": "[2015] EWHC 359 (Ch)",
    "CATEGORIES": [
        "Banking and Finance",
        "Banks",
        "Charges",
        "Enforcement",
        "Legal Advice",
        "Loans",
        "Sureties",
        "Undue Influence"
    ],
    "HELD": [
        "Judgment for defendant.",
        "A bank which was lending money to a borrower on the basis of security provided by a surety should arrange for the surety to be given independent legal advice. The bank should inform the surety that, for its own protection, it would require written confirmation from the solicitor that the nature of the documents and their practical implications had been fully explained. It should also inform the surety that the purpose of the written confirmation was to preclude the surety from subsequently disputing that the documents signed were legally binding, Royal Bank of Scotland Plc v Etridge (No.2) [2001] UKHL 44, [2002] 2 A.C. 773 and Barclays Bank Plc v O&#8217;Brien [1994] 1 A.C. 180 applied. In the instant case, the bank ought not to have proceeded with the transaction until it had communicated to the property owner the purpose underlying the requirement that she obtained legal advice and it had received an appropriate response from her. As a further preliminary step, the bank was required to furnish the nominated solicitor with information that would enable the solicitor to explain the financial risks to be assumed by the surety. On the evidence, the bank had not given that information to the solicitor. The bank had failed to take the necessary preliminary steps to protect itself and to constitute the solicitor as the property owner&#8217;s agent thereby entitling it to rely on the certificate of execution. The bank ought to have realised that she had not received the appropriate advice. In consequence, the charge was unenforceable (see paras 47-49, 63-64, 74 of judgment)."
    ],
    "CATEGORY": "Banking and Finance &mdash; Banks &mdash; Charges &mdash; Enforcement &mdash; Legal Advice &mdash; Loans &mdash; Sureties &mdash; Undue Influence",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "165",
    "RELATED": [
        "(wl) City of London BS v Flegg HL",
        "(wl) Nat West v Ashe",
        "(wl) Palk v Mortgage Services",
        "(wl) Cook v Mortgage Business plc",
        "(wl) Horsham Properties v Beech",
        "(wl) Regent Oil v Gregory",
        "(wl) Nat West Bank v Morgan",
        "(wl) State Bank of India v Sood",
        "(wl) Curley v Parkes",
        "(wl) Abbott v Abbott",
        "(wl) Laskar v Laskar",
        "(wl) Kingsworth v Tizzard"
    ],
    "NAME": "(wl) Davies v Directloans Ltd",
    "SUMMARY": [
        "Extortionate credit bargain; rate of interest; whether justified",
        "A credit bargain was not extortionate within the meaning of the Consumer Credit Act of 1974 s.138 where the borrower had been warned of the cost of the credit and where the risk taken by the lender justified the rate of interest charged and the rate was not out of line with that charged by other lending bodies. On August 1, 1979 P, after consulting solicitors, entered into a deferred sale agreement with D and became entitled to enter into occupation of a house which they were contractually bound to purchase in 12 months&#8217; time, with payment of interest meanwhile on the balance of the purchase price. They fell behind in their interest payments, but on September 2, 1980 completed the purchase and executed a charge over it to pay D the principal sum lent of GBP 17,450 plus interest at the rate of 25.785 per cent per annum over 10 years. They missed instalments, tried and failed to sell the house, and in January 1982 D started possession proceedings. In March P found a buyer and in April the house was transferred and the mortgage redeemed. D made no charge for interest on arrears of instalments. In May 1984 P brought proceedings seeking an order that the rate of interest stipulated under the legal charge be reduced to a proper rate on the grounds that the loan and terms of repayment constituted an extortionate credit bargain within the meaning of s.138 of the Consumer Credit Act 1974, that the rate of interest was &#8220;grossly exorbitant,&#8221; and that the circumstances surrounding the loan and the charge &#8220;grossly contravenes ordinary principles of fair trading.&#8221; The claim failed."
    ],
    "CITATION": "Davies v Directloans Ltd [1986] 1 WLR 823",
    "YEAR": "1986",
    "JUDGE": "Edward Nugee QC",
    "CIT": "[1986] 1 WLR 823",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Banking and Finance Other Related Subjects: Consumer Law",
        "Consumer Credit Agreements",
        "Due Diligence",
        "Finance",
        "Interest Rates",
        "Mortgages"
    ],
    "HELD": [
        "that it was for the court to determine whether a credit bargain was &#8220;extortionate&#8221; and the meaning of the word was confined to the meaning given in s.138 (dictum of Browne-Wilkinson J. in Multiservice Bookbinding Ltd v Marden [1979] Ch. 84 considered). On the evidence P could not rely on their lack of business experience or financial pressure as relevant factors since they had been warned by independent solicitors and D that a mortgage would be expensive, and no advantage was taken of them by D. The degree of risk, accepted by D on the security offered was a relevant factor and justified the rate of interest charged, since P had found difficulty in obtaining a building society or other institutional loan. As to the remaining factor set out in s.138, namely prevailing interest rates, regard should be had to the true rate of interest, i.e. the annual percentage rate of charge calculated in accordance with the Consumer Credit (Total Charge for Credit) Regulations 1980 even though they did not apply to the loan in question. A comparison of rates charged by other lending bodies showed that the payments required of P fell far short of constituting the legal charge an &#8220;extortionate credit bargain&#8221; under s.138 or one which &#8220;grossly contravened&#8221; the principles of fair dealing (dictum of Sir John Donaldson in Wills v Wood (1984) 81 L.S.G. 1211 applied)."
    ],
    "CATEGORY": "Banking and Finance Other Related Subjects: Consumer Law &mdash; Consumer Credit Agreements &mdash; Due Diligence &mdash; Finance &mdash; Interest Rates &mdash; Mortgages",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "166",
    "RELATED": [
        "(wl) Gillett v Holt",
        "(wl) Cukurova Finance v Alfa Telecom",
        "(wl) Lyus v Prowsa Developments",
        "(wl) Cherry Tree Investments v Landmain",
        "(wl) Nickerson v Barraclough",
        "(wl) Best v Chief Land Registrar",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) Javad v Aqil",
        "(wl) IAM Group v Chowdrey",
        "(wl) Meah v GE Money",
        "(wl) Cook v Mortgage Business plc",
        "(wl) Pye Ltd v Graham"
    ],
    "NAME": "(wl) Multiservice Bookbinding v Mardon",
    "SUMMARY": [
        "Repayment; foreign currency; whether clog on equity",
        "A collateral stipulation in a mortgage which does not clog the equity is only objectionable if it is unfair and unconscionable, i.e. imposed in a morally reprehensible manner, not merely if it is unreasonable. M lent P GBP 36,000 secured by a mortgage in 1966. Cl.6 of the mortgage linked repayment to the Swiss franc which at the date of the loan was worth less than 9p. When P wished to redeem the mortgage in 1976, the Swiss franc was worth 25p, thus trebling the amount of sterling required for redemption. P contended that the clause was void either on the grounds that it was contrary to public policy, or that it was unconscionable and a clog on the equity."
    ],
    "CITATION": "Multiservice Bookbinding v Mardon [1979] Ch 84",
    "YEAR": "1979",
    "JUDGE": "Browne-Wilkinson J",
    "CIT": "[1979] Ch 84",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Banking and Finance Other Related Subjects: Equity",
        "Equity",
        "Foreign Currencies",
        "Public Policy",
        "Repayments"
    ],
    "HELD": [
        "that the clause was not contrary to public policy; it was not a clog on the equity of redemption, and both parties had been of equal bargaining power, so, whilst possibly unreasonable, such a term was not unconscionable. The court could not rewrite an improvident contract, and the term would have to stand. ( G&amp;C Kreglinger v New Patagonia Meat &amp; Cold Storage Co Ltd [1914] A.C. 25 ; Knightsbridge Estates Trust Ltd v Byrne [1939] Ch. 441 , and dicta of Lord Hodson in White &amp; Carter (Councils) Ltd v McGregor [1962] A.C. 413 applied; Cityland and Property (Holdings) Ltd v Dabrah [1968] Ch. 166 distinguished; dicta of Denning L.J. in Treseder-Griffin v Cooperative Insurance Society Ltd [1956] 2 Q.B. 127 not followed)."
    ],
    "CATEGORY": "Banking and Finance Other Related Subjects: Equity &mdash; Equity &mdash; Foreign Currencies &mdash; Public Policy &mdash; Repayments",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "167",
    "RELATED": [
        "(wl) Roplaigeach v Barclays Bank",
        "(wl) Halifax BS v Thomas",
        "(wl) Four Maids v Dudley Marshall",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Palk v Mortgage Services",
        "(wl) Morrells v Oxford United FC",
        "(wl) AIB Finance v Debtors",
        "(wl) Meah v GE Money",
        "(wl) The Mortgage Corporation v Shaire and others",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Wall v Collins",
        "(wl) United Bank of Kuwait v Sahib"
    ],
    "NAME": "(wl) Corbett v Halifax",
    "SUMMARY": [
        "Claimants&#8217; house repossessed by Halifax - Halifax employees prohibited from purchasing property in possession - Employee duped Halifax into sale to him of claimants&#8217; property - Property sold at undervalue unknown to purchaser - Sale at undervalue not liable to be set aside merely because it took place at undervalue - Impropriety necessary - Purchaser&#8217;s impropriety related not to purchase of property but to breach of Halifax rules - No equity upon which claimants could rely to seek to set aside sale - Improper exercise of power of sale by sale at undervalue in Law of Property Act 1925 s 104(2) did not include circumstances of which purchaser had no knowledge and in which claimants had no legitimate concern - Damages proper remedy.",
        "D, an employee of H, appealed against a decision to set aside a sale of C&#8217;s house by H as mortgagee in possession to D. H had obtained a possession order in respect of C&#8217;s house. D and any family member of his had been prevented by H&#8217;s internal rules from purchasing repossessed houses. D persuaded M, his uncle, to purchase C&#8217;s house for GBP 140,000 and in a back to back transaction, D purchased C&#8217;s house from M. C&#8217;s house had been purchased at an undervalue and the judge found that D had not been a purchaser in good faith in accordance with the Law of Property Act 1925 s.205 so could not benefit from s.104 of the Act. The question on appeal was whether the sale to D had been liable to be set aside, not because D or H had known or should have known of the undervalue, but because D had deceived H in selling the house to him rather than to someone else."
    ],
    "CITATION": "Corbett v Halifax [2002] EWCA Civ 1849",
    "YEAR": "2002",
    "COUNSEL": "For C: Philomena Harrison. For H: Neil Levy. For D: Thomas Jefferies.",
    "JUDGE": "Schiemann LJ; Scott Baker LJ; Pumfrey J",
    "CIT": "[2002] EWCA Civ 1849",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Dishonesty",
        "Employees",
        "Mortgagees' Powers and Duties",
        "Repossession",
        "Sale of Land",
        "Transactions at An Undervalue"
    ],
    "HELD": [
        "allowing the appeal in part, that the sale did not have to be set aside because it had taken place at an undervalue. Impropriety had been a prerequisite. Section 104(2) of the Act made it clear that a purchaser would not be protected if he had actual knowledge of impropriety. D&#8217;s deception of H had not conferred upon C any right to set aside the sale which they would not have possessed against any other purchaser at an undervalue who did not know of the undervalue and who had not been involved in the exercise of the power of sale by H. The sale would have been voidable by H but this would not have been relevant to C. The sale had to be tainted by impropriety and not have been just at an undervalue. Equity would only intervene if there had been impropriety or bad faith on the part of the mortgagee. The lack of good faith had had nothing to do with C, only H. Accordingly C had not been affected. The judge had been wrong to set the sale aside on the basis that D could not take the benefit of s.104(2). The judge had also exercised his discretion to set aside the sale wrongly as he had failed to consider delay, the work carried out to the property, the fact that it was a family home to minor children and that there had been a rise in property prices."
    ],
    "CATEGORY": "Real Property &mdash; Dishonesty &mdash; Employees &mdash; Mortgagees' Powers and Duties &mdash; Repossession &mdash; Sale of Land &mdash; Transactions at An Undervalue",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "168",
    "RELATED": [
        "(wl) Hounslow LBC v Minchinton",
        "(wl) City of London BS v Flegg",
        "(wl) Abbott v Abbott",
        "(wl) State Bank of India v Sood",
        "(wl) Zarb v Parry",
        "(wl) Sava v SS Global Ltd",
        "(wl) City of London BS v Flegg HL",
        "(wl) Regent Oil v Gregory",
        "(wl) Nat West Bank v Morgan",
        "(wl) Best v Chief Land Registrar",
        "(wl) Horsham Properties v Beech",
        "(wl) Scott v Southern Pacific Mortgages"
    ],
    "NAME": "(wl) Nat West v Ashe",
    "SUMMARY": [
        "The meaning given to &#8220;adverse possession&#8221; in JA Pye (Oxford) Ltd v Graham [2002] UKHL 30, [2003] 1 A.C. 419 was of general application to actions for the recovery of land, including land that was mortgaged, such that the failure of a mortgagee bank to enforce its right to possession of a property occupied by mortgagors who failed to make any mortgage payments over a period that exceeded 12 years meant that the mortgage had been extinguished by the operation of the Limitation Act 1980."
    ],
    "CITATION": "Nat West v Ashe [2008] EWCA Civ 55",
    "ABSTRACT": [
        "The appellant bank (N) appealed against a decision ((2007) EWHC 494 (Ch)) determining that a mortgage in its favour over a property had been extinguished by the operation of the Limitation Act 1980.",
        "A married couple (C) had granted a mortgage to N over their registered leasehold interest in the property to secure the husband&#8217;s liabilities on his accounts with N. N made formal demands for payment but took no steps to protect its legal position. Some payments were made but the husband was then made bankrupt. N informed the husband that he remained liable to it on his account that was secured by the mortgage and that it would accept monthly instalments over a 10-year period, failing which N would continue to await an eventual sale of the property to repay his liabilities. A number of years passed during which there was intermittent correspondence between N and the husband in which N made formal demands for payment. No further payments were paid and no legal proceedings were issued by N to enforce its rights. Legal proceedings were commenced by the husband&#8217;s trustee in bankruptcy, the respondent (T). T sought a declaration that, given that the last payment to N had been made over 12 years previously, N&#8217;s legal charge on the property had been extinguished. A judge held that C had been in adverse possession of the property and that the mortgage in favour of N had been extinguished by s.15 and s.17 of the Act.",
        "N contended that C&#8217;s possession of the property had been with its express or implied consent so that their possession could not be treated as adverse possession and that its right of action for possession had not accrued 12 years before T&#8217;s action commenced."
    ],
    "YEAR": "2008",
    "COUNSEL": "For the appellant: Justin Fenwick QC, Nicole Sandells. For the respondent: Michael Driscoll QC, Peter Shaw.",
    "JUDGE": "Mummery LJ; Hughes LJ; David Richards J",
    "CIT": "[2008] EWCA Civ 55",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Civil Procedure",
        "Accrual of Cause of Action",
        "Adverse Possession",
        "Limitation Periods",
        "Mortgages"
    ],
    "HELD": [
        "Appeal dismissed.",
        "The requirement of adverse possession had to be applied in accordance with the exposition of it in JA Pye (Oxford) Ltd v Graham [2002] UKHL 30, [2003] 1 A.C. 419, Pye applied. Adverse possession referred to the capacity of a person in possession of land and not to the nature of that person&#8217;s possession. Possession had to be given its ordinary meaning. C were in ordinary possession of the property in the period following the grant of the mortgage and after the last payment to N. That possession was exclusive possession. N had a right to possession of the property, but it was not in possession of the property. C were prima facia in adverse possession of the property at the material time, being the persons in whose favour time could run under the Act and N&#8217;s right of action be treated as accruing. The crucial issue was whether any good reason had been shown for treating C other than in ordinary possession of the property. There was no such reason. There was no evidence that C applied for, or were positively given, express permission by N to remain in possession of the property after the legal charge or after the last payment made in respect of the mortgage debt. Although N had never enforced its right to possession against C it did not necessarily follow that N had impliedly granted them permission to remain in possession of the property so as to prevent them from being in adverse possession within Sch.1 para.8 of the Act. N had simply chosen not to do anything to enforce its right of action. C did not need N&#8217;s permission to possess the property. Their possession of the property was referable to their own registered legal title to the property. It was not derived from N&#8217;s title to the property. Accordingly C had been in adverse possession for a period of over 12 years and the judge was right to grant the declaration that N&#8217;s legal charge was extinguished by reason of the operation of s.15 and s.17 of the Act."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Civil Procedure &mdash; Accrual of Cause of Action &mdash; Adverse Possession &mdash; Limitation Periods &mdash; Mortgages",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "169",
    "RELATED": [
        "(wl) Escalus Properties v Robinson",
        "(wl) Patel v Pirabakaran",
        "(wl) Downsview Nominees Ltd v First City Corp Ltd",
        "(wl) Four Maids v Dudley Marshall",
        "(wl) United Bank of Kuwait v Sahib",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Multiservice Bookbinding v Mardon",
        "(wl) Grand Junction Co v Bates",
        "(wl) Geary v Rankine",
        "(wl) Best v Chief Land Registrar",
        "(wl) Malik v Fassenfelt",
        "(wl) Federated Homes v Mill Lodge"
    ],
    "NAME": "(wl) Cukurova Finance v Alfa Telecom",
    "SUMMARY": [
        "Although a company had been justified in enforcing an appropriation of charged shares under a facility agreement following a specified event of default, the Privy Council exercised its jurisdiction to grant relief from forfeiture."
    ],
    "CITATION": "Cukurova Finance v Alfa Telecom [2013] UKPC 2",
    "ABSTRACT": [
        "The appellant companies (C) appealed against a decision of the Court of Appeal of the British Virgin Islands (BVI) that the respondent company (X) had established an event of default under a facility agreement.",
        "C held the majority shareholding in a company (T). The remaining shares were held by another company (S). S contended that C were obliged to transfer their shares to S under a pre-emption agreement. C transferred its shares to a newly formed BVI registered company (Y). C was under cash flow pressures and entered into an agreement which gave X 49 per cent of the issued shares in Y in return for US$1.6 billion. There was also a &#8220;facility agreement&#8221; secured by charges over C&#8217;s shares in Y. Clause 17 of the agreement identified &#8220;events of default&#8221;. S successfully claimed specific performance of the pre-emption agreement in arbitration proceedings. C disclosed those proceedings to X. X claimed 16 events of default and demanded immediate repayment of $1.352 billion and transfer of the shares in Y. The judge at first instance held that the events of default were not made out, but rejected C&#8217;s argument that appropriation of the shares by X was not justified because of bad faith or improper motive. The Court of Appeal held that events of default had been established and that the allegations of bad faith and improper purpose were not made out. It held that X had properly accelerated the loan and had properly appropriated the charged shares.",
        "X contended that the award to S was clearly &#8220;an event or circumstances which in the opinion of [X] has had or is reasonably likely to have a material adverse effect on the financial condition, assets or business of [C]&#8220;, as required by cl.17.16. C contended that the mortgages were a classic example of the type of transaction in which the court had jurisdiction to grant relief from forfeiture."
    ],
    "YEAR": "2013",
    "COUNSEL": "For the appellants: Kenneth Maclean QC, Arabella di Iorio, James Nadin. For the respondent: Iain Milligan QC, Blair Leahy.",
    "JUDGE": "Lord Neuberger; Lord Mance; Lord Kerr; Lord Clarke; Lord Sumption",
    "CIT": "[2013] UKPC 2",
    "FLAGS": [
        "Neuberger"
    ],
    "CATEGORIES": [
        "Banking and Finance Other Related Subjects: Equity",
        "Company Law",
        "Acceleration Clauses",
        "British Virgin Islands",
        "Default",
        "Equitable Mortgages",
        "Financial Collateral Arrangements",
        "Forfeiture",
        "Loan Agreements",
        "Relief",
        "Shareholders' Agreements"
    ],
    "HELD": [
        "Judgment accordingly.",
        "(1) S&#8217;s award clearly gave rise to a substantial order for damages and was likely to have a material adverse effect on C&#8217;s financial condition. Clause 17.16 virtually entitled X to be judge in its own cause as to whether the clause was satisfied and, if so, whether it had a potentially drastic effect on C&#8217;s economic position. The court had to be convinced that X had formed the requisite honest and rational opinion. The first instance judge had over-complicated the position with regard to X&#8217;s decision-making process. It was difficult to identify any evidence contrary to X&#8217;s case, and the event of default was made out. X was entitled to accelerate the loan under cl.17.18 (see paras 43-62 of judgment). (2) The judge&#8217;s findings afforded no basis for treating the appropriation as ineffective. In equity, a mortgagee had a limited title which was available only to secure satisfaction of the debt. The security was enforceable for that purpose only, Quennell v Maltby [1979] 1 W.L.R. 318 and Downsview Nominees Ltd v First City Corp Ltd [1993] A.C. 295 applied. It followed that any act by way of enforcement of the security purely for a collateral purpose would be ineffective between mortgagor and mortgagee. The fact that it was an incident which was highly attractive to X did not mean that the right of appropriation was exercised in bad faith. If a chargee enforced his security for the proper purpose of satisfying the debt, the fact that he might have additional purposes which were collateral to that object could not vitiate enforcement. If the law were otherwise, the result would be that the exercise of the right to enforce the charge for its proper purpose would be indefinitely impeded because of other aspects of the chargee&#8217;s state of mind, which were by definition irrelevant (paras 73-79). (3) C&#8217;s case for relief in equity was distinct from their case on bad faith and improper purpose. It did not therefore follow from rejection of the latter case that equitable relief should not be afforded on appropriate terms; it had to be considered on its own terms as a freestanding remedy. The issues were whether the court had jurisdiction to grant such relief and, if so, whether it should and on what terms. Repayment of the loan to X was secured by equitable mortgages over the charged shares. The primary object of the bargain was to secure the repayment of the loan together with contractual interest, and the forfeiture provision, namely the power to appropriate, was added to secure that result. It followed that, unless it could be said that the jurisdiction to give such relief was limited to mortgages of real property, no convincing reason had been identified as to why there should not be jurisdiction. On the contrary, it was a classic case for the exercise of the jurisdiction; there was no principled basis on which jurisdiction could be limited to real property, Shiloh Spinners Ltd v Harding [1973] A.C. 691 and BICC Plc v Burndy Corp [1985] Ch. 232 applied (paras 80-97). There was nothing in the Financial Collateral Arrangements (No.2) Regulations 2003 precluding the availability of relief against forfeiture in such circumstances (paras 98-115). The need for commercial certainty was recognised; however, the instant case involved a combination of unusual features which were unlikely to be repeated. Relief against forfeiture would be available to C on appropriate conditions to be determined (paras 116-126)."
    ],
    "CATEGORY": "Banking and Finance Other Related Subjects: Equity &mdash; Company Law &mdash; Acceleration Clauses &mdash; British Virgin Islands &mdash; Default &mdash; Equitable Mortgages &mdash; Financial Collateral Arrangements &mdash; Forfeiture &mdash; Loan Agreements &mdash; Relief &mdash; Shareholders' Agreements",
    "COURT": "UKPC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "170",
    "RELATED": [
        "(wl) Corbett v Halifax",
        "(wl) Roplaigeach v Barclays Bank",
        "(wl) The Mortgage Corporation v Shaire and others",
        "(wl) Halifax BS v Thomas",
        "(wl) Laskar v Laskar",
        "(wl) Federated Homes v Mill Lodge",
        "(wl) Colchester BC v Smith",
        "(wl) United Bank of Kuwait v Sahib",
        "(wl) IDC v Clark",
        "(wl) Firstpost Homes v Johnson",
        "(wl) Lloyds Bank v Carrick",
        "(wl) Edwards v Royal Bank of Scotland"
    ],
    "NAME": "(wl) Four Maids v Dudley Marshall",
    "SUMMARY": [
        "Recovery of possession; no default of mortgagor",
        "The right of a mortgagee to possession in the absence of some specific contract has nothing to do with default on the part of the mortgagor. The mortgagor may go into possession at any time after execution of the mortgage unless by a term expressed or necessarily implied in the contract he has contracted himself out of that right. If there is an attornment clause, he must give notice. A mortgagee took out a summons under RSC Ord.55 r.5a , asking for an order for possession of the mortgaged property. The mortgage contained a provision that so long as interest was punctually paid the mortgage money would not be called in before December 31, 1958. The mortgage interest had fallen into arrear, although the interest was not in arrear at the time of the hearing of the summons."
    ],
    "CITATION": "Four Maids v Dudley Marshall [1957] Ch 317",
    "YEAR": "1957",
    "JUDGE": "Harman J",
    "CIT": "[1957] Ch 317",
    "FLAGS": [
        "Criticised"
    ],
    "CATEGORIES": [
        "Real Property",
        "Default",
        "Mortgagees' Powers and Duties",
        "Repossession"
    ],
    "HELD": [
        "the mortgagee was entitled to an order for possession; there would be such an order, but its operation would be postponed for two months. ( Alliance Perpetual Building Society v Belrum Investments Ltd [1957] 1 W.L.R. 720 applied)."
    ],
    "CATEGORY": "Real Property &mdash; Default &mdash; Mortgagees' Powers and Duties &mdash; Repossession",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "171",
    "RELATED": [
        "(wl) Ashburn v Arnold",
        "(wl) The Mortgage Corporation v Shaire and others",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Nat West Bank v Amin",
        "(wl) Corbett v Halifax",
        "(wl) Batchelor v Marlow",
        "(wl) Pye Ltd v Graham",
        "(wl) Firstpost Homes v Johnson",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Harris v Goddard",
        "(wl) HSBC v Dyche",
        "(wl) Clarke v Corless"
    ],
    "NAME": "(wl) Quennell v Maltby",
    "SUMMARY": [
        "Possession; action not bona fide; brought by wife as mortgagee",
        "The court is entitled to look behind the formal legal relationship of the parties, and a mortgagee will not be granted possession of property unless it is sought bona fide for the purpose of enforcing the security. The landlord, the mortgagor, owned a valuable house which he mortgaged to the bank to secure an overdraft. Without the bank&#8217;s consent he let the house to a tenant who became a statutory tenant. The landlord, wishing to regain possession, approached the bank to take action but they refused. The landlord&#8217;s wife then paid off the bank, the mortgage was transferred to her name, and she brought an action for possession on her husband&#8217;s behalf. The judge upheld her claim. On appeal, held, allowing the appeal, that the wife had brought the action for the ulterior motive of assisting her husband obtain vacant possession, and she would therefore be treated as the landlord&#8217;s agent in the action. (Dudley and District Benefit Society v Emerson [1949] Ch. 707 distinguished)."
    ],
    "CITATION": "Quennell v Maltby [1979] 1 WLR 318",
    "YEAR": "1979",
    "JUDGE": "Lord Denning MR; Bridge LJ; Templeman LJ",
    "CIT": "[1979] 1 WLR 318",
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CATEGORIES": [
        "Real Property",
        "Good Faith",
        "Possession of Land"
    ],
    "CATEGORY": "Real Property &mdash; Good Faith &mdash; Possession of Land",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "172",
    "RELATED": [
        "(wl) Halifax BS v Thomas",
        "(wl) Cook v Mortgage Business plc",
        "(wl) Corbett v Halifax",
        "(wl) Cuckmere Brick Co v Mutual Finance",
        "(wl) Scott v Southern Pacific Mortgages",
        "(wl) HSBC v Dyche",
        "(wl) Morrells v Oxford United FC",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) City of London BS v Flegg",
        "(wl) Downsview Nominees Ltd v First City Corp Ltd",
        "(wl) City of London BS v Flegg HL",
        "(wl) Roplaigeach v Barclays Bank"
    ],
    "NAME": "(wl) Palk v Mortgage Services",
    "SUMMARY": [
        "Possession; order for sale; whether court has power to order sale against wishes of mortgagee",
        "It was appropriate to order sale where unfairness and injustice would otherwise follow, despite objections by the mortgagees. In 1990 A borrowed GBP 300,000 from mortgagees, secured by a mortgage over the house owned jointly by himself and his wife, B. A&#8217;s company then went into insolvent liquidation. In July 1990and B decided to sell the house. In March 1991 a sale was negotiated for GBP 283,000, the amount required to redeem the mortgage being GBP 358,587. The mortgagees declined to agree to the sale as they had obtained a suspended order for possession and were intending to let the property until the housing market improved. However, the sum due under the mortgage was increasing by about GBP 43,000 per year and letting the property was likely to produce only GBP 13,000 to GBP 14,000 per year. A and B applied for an order for sale. At trial the judge dismissed the application and B appealed."
    ],
    "CITATION": "Palk v Mortgage Services [1993] Ch 330",
    "YEAR": "1993",
    "COUNSEL": "For P: Anthony Rimmer. For MSF: Gavin Lightman Q.C. and Michael Kay.",
    "JUDGE": "Sir Donald Nicholls VC; Butler-Sloss LJ; Sir Michael Kerr",
    "CIT": "[1993] Ch 330",
    "FLAGS": [
        "Criticised"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Banking and Finance",
        "Civil Procedure",
        "Consent",
        "Mortgagees",
        "Mortgages",
        "Repossession",
        "Sale of Land"
    ],
    "HELD": [
        "allowing B&#8217;s appeal, that (1) the discretion given to the court by the Law of Property Act 1925, s.91(2) is not hedged about with preconditions; the fact that the mortgagee is not in breach of any duty it owes to the mortgagor is only one of the circumstances to be taken into account; (2) it was just and equitable to order a sale because otherwise unfairness and injustice would follow ( China and South Seas Bank Ltd v Tan [1990] 1 A.C. 536 ; McHugh (Felix) v Union Bank of Canada (No.2) [1913] A.C. 299 considered); (3) to direct a sale did not run counter to the established practice of the court ( Woolley v Colman (1882) 21 Ch. D. 169 , Merchant Banking Co of London v London and Hanseatic Bank (1886) 55 L.J. Ch. 479 distinguished)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Banking and Finance &mdash; Civil Procedure &mdash; Consent &mdash; Mortgagees &mdash; Mortgages &mdash; Repossession &mdash; Sale of Land",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "173",
    "RELATED": [
        "(wl) Four Maids v Dudley Marshall",
        "(wl) Corbett v Halifax",
        "(wl) The Mortgage Corporation v Shaire and others",
        "(wl) Halifax BS v Thomas",
        "(wl) Morrells v Oxford United FC",
        "(wl) Quigley v Masterson",
        "(wl) Herbert v Doyle",
        "(wl) IDC v Clark",
        "(wl) AIB Finance v Debtors",
        "(wl) Wandsworth LBC v Dixon",
        "(wl) United Bank of Kuwait v Sahib",
        "(wl) Wilkinson v Kerdene"
    ],
    "NAME": "(wl) Roplaigeach v Barclays Bank",
    "SUMMARY": [
        "mortgages; repossession; lender entitled to repossess and sell property held as security without court order",
        "BB, the mortgagee of residential property mortgaged by R, made a valid demand for payment which R did not honour. BB wrote to R telling him that the property was to be put up for sale at auction and then sold the property. R, who was not residing in the property at the time, claimed he had never received the letter and, having discovered from a neighbour that the house had been sold, made an ex parte application for an injunction restraining BB from selling the house, which was refused on the basis that the sale had already been completed. R now appealed against a decision to uphold the dismissal of his originating summons to determine whether BB had been entitled to act without a court order in taking possession of his house and selling it. R submitted that the Administration of Justice Act 1970 s.36 had clearly been enacted to protect a borrower from ejectment should the lender apply for a possession order and relied on Remon v City of London Real Property Co Ltd [1921] 1 K.B. 49 and Cruise v Terrell [1922] 1 K.B. 664 to contend that s.36 should be construed as extending to circumstances where a court order had not been obtained and the lender had resorted to a self help remedy."
    ],
    "CITATION": "Roplaigeach v Barclays Bank [2000] QB 263",
    "YEAR": "2000",
    "COUNSEL": "For R: Anthony Scrivener Q.C. and Norman Joss. For BB: Elizabeth Gloster Q.C. and Michael Sullivan.",
    "JUDGE": "Henry LJ; Chadwick LJ; Clarke LJ",
    "CIT": "[2000] QB 263",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Mortgagees' Powers and Duties",
        "Repossession"
    ],
    "HELD": [
        "dismissing the appeal, that it was not possible to be sure that Parliament, in enacting s.36, must have intended that a lender could only exercise its common law right to possession of a house where it had obtained a court order. It was common ground that s.36 had been enacted to restore the situation that had appertained prior to the decision in Birmingham Citizens Permanent Building Society v Caunt [1962] Ch. 883 , in which it had been held that the court had no power to refuse or suspend an order for possession which the lender was otherwise entitled to. That circumstance, together with the statutory context and the language employed, indicated that s.36 had not been intended to deal with the protection of a borrower against a lender who exercised his common law right to take possession by peaceable entry without seeking a possession order. It was also relevant that a borrower in occupation was protected by the Criminal Law Act 1977 s.6 ."
    ],
    "CATEGORY": "Real Property &mdash; Mortgagees' Powers and Duties &mdash; Repossession",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "174",
    "RELATED": [
        "(wl) AIB Finance v Debtors",
        "(wl) McDonald v McDonald",
        "(wl) Horsham Properties v Beech",
        "(wl) Meah v GE Money",
        "(wl) Four Maids v Dudley Marshall",
        "(wl) Roplaigeach v Barclays Bank",
        "(wl) Kay v Lambeth LBC",
        "(wl) Doherty v Birmingham CC",
        "(wl) Hounslow LBC v Powell",
        "(wl) Corbett v Halifax",
        "(wl) Fitzkriston v Panayi",
        "(wl) The Mortgage Corporation v Shaire and others"
    ],
    "NAME": "(wl) Thakker v Northern Rock Plc",
    "SUMMARY": [
        "A mortgagee&#8217;s non-compliance with the Mortgage Conduct of Business Rules did not affect its underlying right to possession. A mortgagor&#8217;s defence of equitable set-off, on the basis of a counterclaim for breaches of the rules, was therefore no defence to a possession claim."
    ],
    "CITATION": "Thakker v Northern Rock Plc [2014] EWHC 2107 (QB)",
    "ABSTRACT": [
        "The appellant mortgagor (T) appealed against a declaration that his pleaded defence of equitable set-off was no defence to the respondent bank&#8217;s possession claim.",
        "T&#8217;s defence to the bank&#8217;s possession claim, which had followed an accrual of arrears, was an equitable set-off of his counterclaim for unliquidated damages. T alleged that the bank had breached the Mortgage Conduct of Business Rules (MCOB) by failing to treat him fairly and reasonably in respect of subsequent mortgage advances, and by seeking possession before all other reasonable attempts at resolution had been made. In particular, T claimed that the bank&#8217;s failure to meet him was unreasonable and not justified under the MCOB. At a preliminary hearing the judge held that T&#8217;s counterclaim was not a good defence, on the basis of National Westminster Bank Plc v Skelton [1993] 1 W.L.R. 72, which was authority for the principle that an equitable set-off could not defeat a possession claim.",
        "T submitted that that principle was subject to the regulatory regime under the statutory regime which gave effect to the MCOB, so that there was no legal right to possession unless the rules had been complied with."
    ],
    "YEAR": "2014",
    "COUNSEL": "For the appellants: John Pugh. For the respondents: Richard Hawke.",
    "JUDGE": "Simler J",
    "CIT": "[2014] EWHC 2107 (QB)",
    "CATEGORIES": [
        "Banking and Finance Other Related Subjects: Civil Procedure",
        "Codes of Conduct",
        "Counterclaims",
        "Creditors' Rights",
        "Equitable Set-Off",
        "Mortgagees' Powers and Duties",
        "Possession Claims"
    ],
    "HELD": [
        "Appeal dismissed.",
        "The first stage of this type of claim was to determine whether the mortgagee had a right to possession; it was at that stage that the judge had decided that T&#8217;s defence was not good. Discretionary considerations were relevant at the second stage, at which the judge could have exercised his discretion to stay execution pending the trial of the counterclaim. That stage had not been reached. As a matter of strict statutory construction T&#8217;s case that the bank&#8217;s alleged breaches made the right to possession unenforceable was inconsistent with the Financial Services and Markets Act 2000 s.151(2), which provided that the contravention of an MCOB rule did not make any transaction void or unenforceable. It was significant that a leading textbook on the subject had not referred to the possibility of running T&#8217;s argument. The rules did not give rise to T&#8217;s purported defence even if the breaches were proven. The rules were broad conduct requirements and did not refer to the mortgagee&#8217;s underlying enforcement rights under the contract. Although r.13.3.2AR required firms to make reasonable efforts to reach agreement over repayment methods, and not to repossess unless all other reasonable attempts to resolve the position had failed, the rules did not seek to alter the underlying rights of the parties, National Westminster Bank Plc v Skelton [1993] 1 W.L.R. 72 applied."
    ],
    "CATEGORY": "Banking and Finance Other Related Subjects: Civil Procedure &mdash; Codes of Conduct &mdash; Counterclaims &mdash; Creditors' Rights &mdash; Equitable Set-Off &mdash; Mortgagees' Powers and Duties &mdash; Possession Claims",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "175",
    "RELATED": [
        "(wl) Downsview Nominees Ltd v First City Corp Ltd",
        "(wl) Palk v Mortgage Services",
        "(wl) Chaudhary v Chaudhary",
        "(wl) HSBC v Dyche",
        "(wl) Pettitt v Pettitt",
        "(wl) Binions v Evans",
        "(wl) Williams v Williams",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Morrells v Oxford United FC",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) AIB Finance v Debtors",
        "(wl) National Provincial Bank v Ainsworth"
    ],
    "NAME": "(wl) Cuckmere Brick Co v Mutual Finance",
    "SUMMARY": [
        "Sale; mortgagees&#8217; duty of care.",
        "A mortgagee, when exercising his power of sale, owes a duty to the mortgagor to take reasonable care to obtain a proper price. C Co. charged land with planning permission for 100 flats to M Co. for GBP 50,000. Later, permission was given to erect 35 houses. M Co.&#8217;s power of sale became exercisable, and M Co. advertised the land by reference to the planning permission for houses, but not to that for flats. On being informed of their omission M Co. refused to postpone the sale. The price obtained was GBP 44,000."
    ],
    "CITATION": "Cuckmere Brick Co v Mutual Finance [1971] Ch 949",
    "YEAR": "1971",
    "JUDGE": "Salmon LJ; Cairns LJ; Cross LJ",
    "CIT": "[1971] Ch 949",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Negligence",
        "Duty of Care",
        "Mortgagees",
        "Sale of Land"
    ],
    "HELD": [
        "(1) M Co. owed a duty to C Co. to take reasonable care to obtain a proper price, and (2) M Co. had been in breach of that duty by failing adequately to publicise the planning permission for flats, and by refusing to postpone sale. ( Tomlin v Luce (1889) 43 Ch. D. 191 followed; Kennedy v De Trafford [1896] 1 Ch. 762 explained)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Negligence &mdash; Duty of Care &mdash; Mortgagees &mdash; Sale of Land",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "176",
    "RELATED": [
        "(wl) Thakker v Northern Rock Plc",
        "(wl) Corbett v Halifax",
        "(wl) Williams v Williams",
        "(wl) Cuckmere Brick Co v Mutual Finance",
        "(wl) Horsham Properties v Beech",
        "(wl) Roplaigeach v Barclays Bank",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) National Provincial Bank v Ainsworth",
        "(wl) McDonald v McDonald",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Halifax BS v Thomas",
        "(wl) The Mortgage Corporation v Shaire and others"
    ],
    "NAME": "(wl) AIB Finance v Debtors",
    "SUMMARY": [
        "statutory demands; setting aside; sale of business premises; duty of mortgagee to safeguard goodwill and sell business as going concern",
        "A entered into a mortgage with AIB using both the premises and the goodwill of their business, comprising a post office, newsagent and off licence, as security for the loan. When A fell into arrears, AIB obtained a possession order and judgment for arrears and principal. The business closed prior to AIB repossessing the property and the sale of the premises yielded a shortfall in respect of which AIB served statutory demands on A. The district judge set aside the statutory demands on the ground that A had a defence and a potentially substantial counterclaim based on AIB&#8217;s failure to sell the business as a going concern. A appealed against a ruling ([1997] 4 All E.R. 677, [1997] C.L.Y. 3033) allowing AIB&#8217;s appeal against the setting aside of the statutory demands, the judge finding that, while A had an arguable counterclaim, it would not &#8220;equal or exceed&#8221; the amount of the statutory demand as required by the Insolvency Rules 1986 r.6.5(4)(a) . A disputed the judge&#8217;s valuation of the counterclaim and argued that AIB had a duty of care to take steps to preserve the goodwill of the business and ensure that it was included in the sale."
    ],
    "CITATION": "AIB Finance v Debtors [1998] 2 All ER 929",
    "YEAR": "1998",
    "COUNSEL": "For the debtors: Peter Leighton. For the bank: David Iwi.",
    "JUDGE": "Nourse LJ; Potter LJ; Mummery LJ",
    "CIT": "[1998] 2 All ER 929",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Insolvency",
        "Counterclaims",
        "Goodwill",
        "Mortgagees' Powers and Duties",
        "Sale of Land",
        "Statutory Demands"
    ],
    "HELD": [
        "dismissing the appeal, that, while a mortgagee owed the mortgagor a duty to take reasonable care to obtain a proper price for the sale of mortgaged property and in some circumstances that might include a duty to attempt to sell a business as a going concern, in the instant case the proprietors had closed down the business and moved from the premises prior to the mortgagee repossessing the property, and no duty to safeguard the goodwill of the business could arise in those circumstances. There was no question of AIB being under any duty to take action to preserve the business until it took possession of it, although the bank would have had the power to appoint a receiver and manager of the business if they had chosen to. Accordingly, the judge below had been wrong to conclude that A had an arguable counterclaim."
    ],
    "CATEGORY": "Insolvency &mdash; Counterclaims &mdash; Goodwill &mdash; Mortgagees' Powers and Duties &mdash; Sale of Land &mdash; Statutory Demands",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "177",
    "RELATED": [
        "(wl) Cuckmere Brick Co v Mutual Finance",
        "(wl) Palk v Mortgage Services",
        "(wl) Cukurova Finance v Alfa Telecom",
        "(wl) HSBC v Dyche",
        "(wl) Sava v SS Global Ltd",
        "(wl) Escalus Properties v Robinson",
        "(wl) Halifax v Popeck",
        "(wl) Wood v Waddington",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Phillips v Mobil Oil",
        "(wl) Reeves v Sandhu",
        "(wl) Meah v GE Money"
    ],
    "NAME": "(wl) Downsview Nominees Ltd v First City Corp Ltd",
    "SUMMARY": [
        "Mortgagee; duty of care; negligence; detriment suffered by second mortgagee; whether mortgagee acted in bad faith; whether liable in damages",
        "A mortgagee owes no duty in negligence to a subsequent mortgagee, but will be liable for damages where he has acted in bad faith, to the detriment of the second mortgagee. A debenture-holder sought to enforce the debenture, and appointed a receiver in order to prevent a second debenture-holder from enforcing his debenture over the company. The receivers appointed by the first debenture-holder allowed the company to continue trading, during which time it made considerable losses. The second debenture-holder brought an action claiming breach of duty by the first debenture-holder and the receiver."
    ],
    "CITATION": "Downsview Nominees Ltd v First City Corp Ltd [1993] AC 295",
    "YEAR": "1993",
    "JUDGE": "Lord Templeman; Lord Goff of Chieveley; Lord Lane; Lord Mustill; Lord Slynn of Hadley",
    "CIT": "[1993] AC 295",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Company Law",
        "Debentures",
        "Duty of Care",
        "Mortgagees"
    ],
    "HELD": [
        "that although a mortgagee and a receiver appointed by him owe no duty of care to subsequent encumbrancers generally, where they have acted in bad faith, as here, they will be liable."
    ],
    "CATEGORY": "Company Law &mdash; Debentures &mdash; Duty of Care &mdash; Mortgagees",
    "COURT": "UKPC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "178",
    "RELATED": [
        "(wl) Copeland v Greenhalf",
        "(wl) Link Lending v Bustard",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Stafford v Lee",
        "(wl) Batchelor v Marlow",
        "(wl) Quigley v Masterson",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) HSBC v Dyche",
        "(wl) Lloyds Bank v Carrick",
        "(wl) Sava v SS Global Ltd",
        "(wl) Bridle v Ruby",
        "(wl) Ashburn Anstalt v Arnold"
    ],
    "NAME": "(wl) Bishop v Blake",
    "SUMMARY": [],
    "CITATION": "Bishop v Blake [2006] EWHC 831 (Ch)",
    "YEAR": "2006",
    "COUNSEL": "For the claimant: Hugh Jackson. For the defendant: Paul Clarke.",
    "JUDGE": "Sir Francis Ferris",
    "CIT": "[2006] EWHC 831 (Ch)",
    "CATEGORIES": [
        "Real Property"
    ],
    "CATEGORY": "Real Property",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "179",
    "RELATED": [
        "(wl) Cook v Mortgage Business plc",
        "(wl) Gardner",
        "(wl) Nat West Bank v Amin",
        "(wl) McDonald v McDonald",
        "(wl) Nat West v Ashe",
        "(wl) Halifax BS v Thomas",
        "(wl) Davies v Directloans Ltd",
        "(wl) Regent Oil v Gregory",
        "(wl) Hounslow LBC v Powell",
        "(wl) Antoniades v Villiers",
        "(wl) Abbott v Abbott",
        "(wl) Bucks CC v Moran"
    ],
    "NAME": "(wl) Horsham Properties v Beech",
    "SUMMARY": [
        "The court determined that the Law of Property Act 1925 s.101 did not infringe the rights of mortgagors under the European Convention on Human Rights 1950 Protocol 1 art.1 by permitting mortgagees to sell properties without first obtaining a court order for possession. Read as a whole, s.101 of the Act implemented rather than overrode the private bargain between mortgagor and mortgagee."
    ],
    "CITATION": "Horsham Properties v Beech [2008] EWHC 2327 (Ch)",
    "ABSTRACT": [
        "The claimant company (H) claimed possession of a property formerly belonging to the defendants (B).",
        "B had fallen into mortgage arrears in respect of the property. Pursuant to the mortgage deed and the Law of Property Act 1925 s.101(1)(iii) , the mortgagee appointed receivers over the property who contracted to sell it at auction. On sale, the property was transferred to H, who became the registered proprietor. B remained in possession of the property and H instigated the instant claim. The issue for determination was whether s.101 of the Act, by permitting mortgagees to overreach their rights in relation to the mortgaged property by selling it out of court without first obtaining a court order for possession or sale, infringed the rights of mortgagors under the European Convention on Human Rights 1950 .",
        "B submitted that the statutory power under the Act would only be compatible with the Convention rights of residential mortgagors if it was construed as requiring a mortgagee first to obtain a court order for possession or to make an application for an order permitting sale."
    ],
    "YEAR": "2008",
    "COUNSEL": "For the claimant: Tom Poole. For the second defendant: Victoria Williams. For the intervener: Sam Grodzinski.",
    "JUDGE": "Briggs J",
    "CIT": "[2008] EWHC 2327 (Ch)",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Human Rights",
        "Mortgagees' Powers and Duties",
        "Mortgages",
        "Overreaching",
        "Peaceful Enjoyment of Possessions",
        "Possession"
    ],
    "HELD": [
        "Judgment for claimant.",
        "(1) B had lost the equity of redemption in the property without statutory intervention. The receivers&#8217; power to sell the property was derived wholly from the mortgage contract. There was no corresponding power under the Act. On a strict analysis of the facts of the instant case, the issue for determination never arose. However the outcome of such an important question should not remain unanswered and the analysis of the legal position would continue as if s.101 had been engaged. (2) It was clear that s.101 of the Act served to implement rather than override the private bargain between mortgagor and mortgagee. It was a form of conveyancing shorthand designed to implement the ordinary expectations of mortgagors and mortgagees whilst reducing the costs and delays therein. Section.101 of the Act was expressed to be subject to the doctrine of &#8220;contrary intention&#8221; pursuant to s.101(4) of the Act. Accordingly, s.101 of the Act, read as a whole, was very far removed from the concept of state intervention into private rights through overriding legislation. It was not rigid, arbitrary or discriminatory and its effect was not only apparent on its face but, in the instant case, was spelt out in terms in the mortgage itself, Wilson v First County Trust Ltd (No.2) [2003] UKHL 40, [2004] 1 A.C. 816 and Ropaigealach v Barclays Bank Plc [2000] Q.B. 263 applied and Pennycook v Shaws (EAL) Ltd [2004] EWCA Civ 100, [2004] Ch. 296 considered. The exercise of a statutory power of sale under s.101 of the Act after a relevant default by the mortgagor was not a deprivation of possession within the meaning of the European Convention on Human Rights 1950 Protocol 1 art.1 and neither was the exercise by receivers acting under purely contractual powers in overriding B&#8217;s equity of redemption by contracting to sell the property. (3) (Obiter) Any deprivation of possession constituted by the exercise by a mortgagee of its powers under s.101 of the Act after a relevant default was justified in the public interest and required no case-by-case exercise of a proportionality exercise by the court. It clearly reflected the bargain habitually and historically drawn between mortgagors and mortgagees, in which the ability of a mortgagee to sell the property offered as a security without having to go to court was identified as an essential aspect of the security necessary if substantial property based security lending was to be available at affordable rates of interest, Barclays Bank Plc v Alcorn [2002] EWHC 498 (Ch), [2002] 2 P. &amp; C.R. DG10 considered."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Human Rights &mdash; Mortgagees' Powers and Duties &mdash; Mortgages &mdash; Overreaching &mdash; Peaceful Enjoyment of Possessions &mdash; Possession",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "180",
    "RELATED": [
        "(wl) Corbett v Halifax",
        "(wl) McDonald v McDonald",
        "(wl) Four Maids v Dudley Marshall",
        "(wl) The Mortgage Corporation v Shaire and others",
        "(wl) Horsham Properties v Beech",
        "(wl) AIB Finance v Debtors",
        "(wl) Thakker v Northern Rock Plc",
        "(wl) Cherry Tree Investments v Landmain",
        "(wl) Roplaigeach v Barclays Bank",
        "(wl) Davis v Smith",
        "(wl) Barrett v Morgan",
        "(wl) Mulvaney v Gough"
    ],
    "NAME": "(wl) Meah v GE Money",
    "SUMMARY": [
        "Although there were various shortcomings in the way a property had been marketed when a mortgagee was exercising its power of sale, including advertising it at a grossly inadequate value, the mortgagee had not breached its duty to the mortgagor to take reasonable precautions to obtain the property&#8217;s true market value."
    ],
    "CITATION": "Meah v GE Money [2013] EWHC 20 (Ch)",
    "ABSTRACT": [
        "The claimant mortgagor (M) claimed compensation from the defendant mortgagee (G) for allegedly having sold mortgaged property at an undervalue.",
        "M had defaulted on his mortgage payments to G and a possession order was made. The property was originally put on the market with an asking price of \u00a3185,000. Sales particulars and advertisements for the property were circulated which did not reference the property&#8217;s potential for conversion into flats. Having received several offers, the asking price was increased to \u00a3245,550. The property was later sold to a developer for \u00a3221,500. The estate agent responsible for marketing the property gave evidence that purchasers would understand that the asking price in a sale by a mortgagee was not necessarily the price which a vendor would accept, and that it might be low in order to generate interest. He also gave evidence that the persons to whom the sales particulars were circulated included many developers, and therefore that the property&#8217;s development potential would have been obvious to them.",
        "M relied on an expert&#8217;s assessment that the property had a true market value of \u00a3325,000 when it was sold. He argued that G had breached its duty to take reasonable precautions to obtain that true market value, and sought an order that G account to him for the \u00a3103,500 difference between the property&#8217;s true market value and the amount that it was actually sold for."
    ],
    "YEAR": "2013",
    "COUNSEL": "For the claimant: Charles Douthwaite. For the defendant: William Hibbert.",
    "JUDGE": "Alan Steinfeld QC",
    "CIT": "[2013] EWHC 20 (Ch)",
    "CATEGORIES": [
        "Banking and Finance Other Related Subjects: Real Property",
        "Market Value",
        "Mortgagees' Powers and Duties",
        "Power of Sale",
        "Transactions at An Undervalue"
    ],
    "HELD": [
        "Judgment for defendant.",
        "There was considerable force in many of M&#8217;s criticisms about how the property was marketed. It was true that, when valuing the property, there was no real comparable that could be justifiably relied upon to assess the property&#8217;s market value. It was self-evident that the original asking price was far too low, and it was surprising that the sales particulars or advertisements did not mention the property&#8217;s potential for conversion into flats. Although the estate agent had explained the low asking price and the lack of a reference to development potential, the instant court still had serious misgivings about how the property was marketed: it did not regard it as sensible, even in the sale by a mortgagee, to put a property on the market at a grossly inadequate price simply to generate interest, or to neglect to mention its development potential. However, despite those justifiable criticisms, the property was sufficiently exposed to the market to enable all potential purchasers to bid for it if they so wished. The absence of any reference to development potential in the advertising and the low asking price had not deterred potential purchasers, including developers, from making offers above the asking price. Further, \u00a3325,000 did not represent the price which could and should have been achieved for the property at the date of sale. There was no evidence to establish that the price obtained for the property was less than the best price reasonably achievable. The market value of a property was the price which a willing purchaser was prepared to pay to a willing vendor after the property had been exposed to the market for a reasonable period of time. It followed that, in the instant case, the property&#8217;s market value when the contracts of sale were exchanged was the sum actually agreed to be paid, namely \u00a3221,500. It was possible that a developer such as the actual purchaser in the instant case could have made similar calculations to M&#8217;s expert and concluded that the property was potentially worth to it as much as \u00a3325,000. However, unless a bidding war developed between two or more developers who had made similar calculations, such a sum could not be said to represent the best price reasonably achievable for the property at that time, and did not represent its true market value. Accordingly, G had not breached its duty to M, Cuckmere Brick Co v Mutual Finance [1971] Ch. 949 applied (see paras 12, 19, 23 of judgment)."
    ],
    "CATEGORY": "Banking and Finance Other Related Subjects: Real Property &mdash; Market Value &mdash; Mortgagees' Powers and Duties &mdash; Power of Sale &mdash; Transactions at An Undervalue",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "181",
    "RELATED": [
        "(wl) Palk v Mortgage Services",
        "(wl) Corbett v Halifax",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Morrells v Oxford United FC",
        "(wl) State Bank of India v Sood",
        "(wl) Roplaigeach v Barclays Bank",
        "(wl) Four Maids v Dudley Marshall",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Nat West Bank v Amin",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Laskar v Laskar",
        "(wl) AIB Finance v Debtors"
    ],
    "NAME": "(wl) Halifax BS v Thomas",
    "SUMMARY": [
        "Repossession; fraud; suspense accounts; whether fraudulent mortgagor could keep the proceeds of sale on a mortgaged property",
        "HBS appealed against a decision that it could not recover surplus monies generated after the sale of a house on the default of a fraudulent mortgagor. T obtained a mortgage from HBS by making false representations as to his identity and creditworthiness. On his subsequent default the property was sold and the surplus was placed in a suspense account. T was convicted and the CPS sought a confiscation order and a charging order on the suspense account. HBS argued that to allow T to keep the money would be an unjust enrichment brought about by the commission of a wrong against it. HBS also argued that it might recover the money through waiver of tort or on the basis of being a beneficiary to a constructive trust ."
    ],
    "CITATION": "Halifax BS v Thomas [1996] Ch 217",
    "YEAR": "1996",
    "COUNSEL": "For HBS: Malcolm Waters. For the CPS: Geoffrey Zelin.",
    "JUDGE": "Glidewell LJ; Simon Brown LJ; Peter Gibson LJ",
    "CIT": "[1996] Ch 217",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Fraud",
        "Mortgages",
        "Repossession",
        "Sale of Land"
    ],
    "HELD": [
        "dismissing the appeal, that (1) the relationship of lender and borrower was that of debtor and creditor and it was never contemplated by the parties that T would incur liability other than debt. On the sale, he became entitled to the proceeds. The effect of condition 23 of the Law Society&#8217;s Mortgage conditions operating on the Law of Property Act 1925 s.105 was not to make T liable to account to HBS for the money as money &#8220;due under the mortgage&#8221; and secured by the mortgage; (2) it was inconsistent with the mortgage to argue that T could sue in tort for deceit to recover any shortfall which the security did not cover. T did not need to rely on illegality to support his claim and his rights were not denied, Tinsley v Milligan [1994] A.C. 340, [1993] C.L.Y. 1839 followed and (3) having affirmed the mortgage HBS remained only a secured creditor. The Criminal Justice Act 1988 Part IV prevented the criminal from keeping the benefits of his crime and the courts also had power to confiscate that benefit. A remedy for unjust enrichment was not provided by a constructive trust."
    ],
    "CATEGORY": "Real Property &mdash; Fraud &mdash; Mortgages &mdash; Repossession &mdash; Sale of Land",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "182",
    "RELATED": [
        "(wl) Laskar v Laskar",
        "(wl) Stack v Dowden",
        "(wl) Bedson v Bedson",
        "(wl) Kinch v Bullard",
        "(wl) Antoniades v Villiers",
        "(wl) Hapeshi v Allnatt",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Herbert v Doyle",
        "(wl) Newlon Housing Trust v Alsulaimen",
        "(wl) AG Securities v Vaughan",
        "(wl) Lloyds Bank v Carrick",
        "(wl) Goodman v Gallant"
    ],
    "NAME": "(wl) Burgess v Rawnsley",
    "SUMMARY": [
        "Resulting trust; joint purchase of house for purposes that failed; no communication to each other of different purposes; whether resulting trust",
        "An oral agreement by one joint tenant of a house to sell his interest to the other joint tenant, which is not specifically enforceable and is subsequently repudiated, will nevertheless operate to sever the joint tenancy. M, a widower, and F, a widow, bought a house in their joint names, each providing half of the purchase price, as joint tenants. M, who already occupied part of the house, bought it as a matrimonial home, intending to marry F. F intended to occupy the other part of the house herself, had no intention of marrying and did not know of M&#8217;s intentions. They did not marry, and F never moved in. M and F agreed orally that F would sell M her share. F subsequently refused to carry out the agreement. M died, and F claimed that the house was hers by survivorship."
    ],
    "CITATION": "Burgess v Rawnsley [1975] Ch 429",
    "YEAR": "1975",
    "JUDGE": "Lord Denning MR; Browne LJ; Sir John Pennycuick",
    "CIT": "[1975] Ch 429",
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CATEGORIES": [
        "Trusts Other Related Subjects: Contracts",
        "Joint Tenancies",
        "Oral Contracts",
        "Repudiation",
        "Resulting Trusts",
        "Settlements",
        "Survivorship"
    ],
    "HELD": [
        "that since there was no common purpose which had failed, there was no resulting trust; however, the agreement to sell had operated to sever the joint tenancy, the house was not F&#8217;s by survivorship, and she held it on trust for herself and for M&#8217;s estate in equal shares. (<span class=\"ud\">Re Wilks</span> Wilks, Re [1891] 3 Ch. 59 doubted and Nielson-Jones v Fedden [1975] Ch. 222 doubted; Hawkesley v May [1956] 1 Q.B. 304 considered and Draper&#8217;s Conveyance, Re [1969] 1 Ch. 486 considered)."
    ],
    "CATEGORY": "Trusts Other Related Subjects: Contracts &mdash; Joint Tenancies &mdash; Oral Contracts &mdash; Repudiation &mdash; Resulting Trusts &mdash; Settlements &mdash; Survivorship",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "183",
    "RELATED": [
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Davis v Smith",
        "(wl) Quigley v Masterson",
        "(wl) First National Securities v Heggerty",
        "(wl) Kinch v Bullard",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Laskar v Laskar",
        "(wl) In re Pavlou",
        "(wl) Herbert v Doyle",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Antoniades v Villiers",
        "(wl) Wall v Collins"
    ],
    "NAME": "(wl) Harris v Goddard",
    "SUMMARY": [
        "Joint tenancy; prayer of severance in divorce petition; whether notice to sever tenancy",
        "A prayer in a divorce petition for an order in relation to the matrimonial home and property does not operate of itself so as to sever the spouses&#8217; joint tenancy. H and W were equitable joint tenants of the matrimonial home and shop premises. W petitioned for divorce. The petition included a prayer for such order in relation to the property by way of transfer or settlement as should be just. H was killed in a car accident before the hearing of the petition. H&#8217;s executors claimed that the joint tenancy had been severed by the prayer in the petition, and that his estate was entitled to half the property. The judge rejected that claim."
    ],
    "CITATION": "Harris v Goddard [1983] 1 WLR 1203",
    "YEAR": "1983",
    "JUDGE": "Lawton LJ; Kerr LJ; Dillon LJ",
    "CIT": "[1983] 1 WLR 1203",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Divorce",
        "Joint Tenancies",
        "Jurisdiction",
        "Matrimonial Home"
    ],
    "HELD": [
        "dismissing the appeal, that although a notice in writing of a desire to sever a joint tenancy took effect forthwith, the desire to sever must itself be immediate. The prayer in the petition was merely an invitation to the court to decide at some future time whether or not to exercise its jurisdiction in any one of a number of ways in relation to the property. Accordingly, W was beneficially entitled to the whole of the property (Draper&#8217;s Conveyance, Re [1969] 1 Ch. 486 distinguished; Bedson v Bedson [1965] 2 Q.B. 666 considered; Wilks, Re [1891] 3 Ch. 59 not followed)."
    ],
    "CATEGORY": "Real Property &mdash; Divorce &mdash; Joint Tenancies &mdash; Jurisdiction &mdash; Matrimonial Home",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "184",
    "RELATED": [
        "(wl) Harris v Goddard",
        "(wl) Quigley v Masterson",
        "(wl) Davis v Smith",
        "(wl) Hapeshi v Allnatt",
        "(wl) Goodman v Gallant",
        "(wl) Kinch v Bullard",
        "(wl) Pye Ltd v Graham",
        "(wl) Wilkinson v Kerdene",
        "(wl) Stafford v Lee",
        "(wl) Bucks CC v Moran",
        "(wl) Sava v SS Global Ltd",
        "(wl) Chaffe v Kingsley"
    ],
    "NAME": "(wl) McDowall v Hirschfield Lipson",
    "SUMMARY": [
        "Joint tenancy; severance; matrimonial home; husband filing divorce petition; death of husband before hearing; whether filing of petition and discussions with solicitors showed course of dealing to sever joint tenancy",
        "In the absence of an express act of severance a party had to prove a course of dealing in which both parties had evinced an intention to sever a joint tenancy. H and W were joint tenants of a property. Later H left W and lived with P. The sale of the matrimonial home and divorce proceedings were discussed between solicitors acting for H and W, but neither W nor her solicitors expressed any interest in severing the joint tenancy. H died after he had filed a divorce petition but before the suit had been concluded, leaving P as the sole executrix and beneficiary of his will. H&#8217;s solicitors contended that although there had been no express act of severance, they had affected a severance in correspondence with W&#8217;s solicitors in the context of discussion about the divorce. P alleged that the solicitors had been negligent in not severing the joint tenancy; alternatively she sought a declaration that his estate was entitled to a half share of the house in the event that the solicitors established that the tenancy had been severed."
    ],
    "CITATION": "McDowall v Hirschfield Lipson [1992] 2 FLR 126",
    "YEAR": "1992",
    "JUDGE": "Eric Stockdale",
    "CIT": "[1992] 2 FLR 126",
    "CATEGORIES": [
        "Real Property",
        "Divorce",
        "Intention",
        "Joint Tenancies",
        "Severance"
    ],
    "HELD": [
        "that in the absence of an express act of severance of a joint tenancy, a party had to prove a course of dealing in which both parties had evinced an intention to sever the tenancy. There was no evidence of such intention in the parties&#8217; discussions about the divorce and the sale of the property and there had been no advantage to be gained by either party in severance as the property would have been dealt with under the provisions of the Matrimonial Causes Act 1973. The correspondence between the solicitors was not privileged and admissible to see if there had been a severance, which had to be investigated as an independent fact."
    ],
    "CATEGORY": "Real Property &mdash; Divorce &mdash; Intention &mdash; Joint Tenancies &mdash; Severance",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "185",
    "RELATED": [
        "(wl) Kinch v Bullard",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Barclay v Barclay",
        "(wl) Jones v Challenger",
        "(wl) Davis v Smith",
        "(wl) Bedson v Bedson",
        "(wl) Quigley v Masterson",
        "(wl) State Bank of India v Sood",
        "(wl) AG Securities v Vaughan",
        "(wl) Harrow LBC v Qazi",
        "(wl) Antoniades v Villiers",
        "(wl) Cf Vallee v Birchwood"
    ],
    "NAME": "(wl) Goodman v Gallant",
    "SUMMARY": [
        "Joint tenancy; severance; trust for sale; beneficial interests",
        "Where a conveyance into joint names contains an express declaration that the parties are to hold the proceeds of sale on trust for themselves as joint tenants, then on severance a tenancy in common in equal shares is created, and the declaration is conclusive of the position. In 1960 P and her husband purchased a house which was conveyed into the sole name of the husband, although it was agreed between them that P was entitled to a half share in the beneficial interest in the property. In 1971 P left the husband and later began living in the property with D. In 1978 the husband, in consideration of the cost of his share, conveyed the freehold to P and D as beneficial joint tenants of trust for sale &#8220;to hold the net proceeds of sale...UPON TRUST for themselves as joint tenants.&#8221; In 1983 P severed the joint tenancy and issued a summons for the determination of their respective beneficial interests, contending that she was entitled to three- quarters of the beneficial interest on the basis that she already owned one-half and it was intended that the joint tenancy should only extend to the half share she received from the husband. The registrar held that they held as tenants in common in equal shares, and the judge, on appeal by the plaintiff, upheld this decision. P further appealed to the Court of Appeal."
    ],
    "CITATION": "Goodman v Gallant [1986] Fam 106",
    "YEAR": "1986",
    "JUDGE": "Slade LJ; Purchas LJ; Sir Roualeyn Cumming-Bruce",
    "CIT": "[1986] Fam 106",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Trusts",
        "Beneficiaries",
        "Joint Tenancies",
        "Severance",
        "Trusts For Sale"
    ],
    "HELD": [
        "dismissing the appeal, that where a conveyance into joint names contained an express declaration of trust that the parties were to hold the proceeds of sale of the property on trust for themselves as joint tenants, then on severance of the tenancy, a tenancy in common in equal shares was created. Furthermore, the doctrine of resulting implied or constructive trusts could not be invoked where there was an express declaration which comprehensively declared what were the beneficial interests in the property or its proceeds of sale since such a declaration was exhaustive and conclusive of the position unless and until the conveyance was set aside or rectified. D was therefore entitled to a half share of the beneficial interest in the property (Wilson v Wilson (Matrimonial Home) [1963] 1 W.L.R. 601, dicta of Lord Upjohn in Pettitt v Pettitt [1969] C.L.Y. 1639, [1969] 2 All E.R. at 405 ; of Lord Diplock in Gissing v Gissing [1970] C.L.Y. 1243, [1970] 2 All E.R. at 789 ; Leake (formerly Bruzzi) v Bruzzi [1974] 1 W.L.R. 1528 and Pink v Lawrence (1978) 36 P. &amp; C.R. 98 followed. Dictum of Lord Denning M.R. in Bedson v Bedson [1965] 2 Q.B. 666 disapproved)."
    ],
    "CATEGORY": "Trusts &mdash; Beneficiaries &mdash; Joint Tenancies &mdash; Severance &mdash; Trusts For Sale",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "186",
    "RELATED": [
        "(wl) Williams v Williams",
        "(wl) National Provincial Bank v Ainsworth",
        "(wl) First National Securities v Heggerty",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Gissing v Gissing",
        "(wl) Abbott v Abbott",
        "(wl) Jones v Kernott",
        "(wl) Bedson v Bedson",
        "(wl) In re Pavlou",
        "(wl) Kinch v Bullard",
        "(wl) Harris v Goddard",
        "(wl) Kingsworth v Tizzard"
    ],
    "NAME": "(wl) Pettitt v Pettitt",
    "SUMMARY": [
        "Matrimonial home; husband&#8217;s work on wife&#8217;s house",
        "The Married Women&#8217;s Property Act 1882 s.17 is purely procedural; it does not confer on the court an unfettered discretion to override existing rights in property, or to apply any notion of family assets not to be found in English law in determining disputes as to title or possession after a marriage has broken down. Such issues involve questions of social policy which should be dealt with by Parliament. The legal title to H and W&#8217;s former matrimonial home was in W alone. H had not paid any money towards its purchase but he had redecorated and improved the home, thus enhancing its value. Following a divorce H issued proceedings under s.17 claiming an interest in the proceeds of sale of the home."
    ],
    "CITATION": "Pettitt v Pettitt [1970] AC 777",
    "YEAR": "1970",
    "JUDGE": "Lord Reid; Lord Morris of Borth-y-Gest; Lord Hodson; Lord Upjohn; Lord Diplock",
    "CIT": "[1970] AC 777",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Family Law",
        "Matrimonial Home",
        "Sale of Land"
    ],
    "HELD": [
        "allowing W&#8217;s appeal, (1) that s.17 was merely procedural, and (2) that in the absence of any agreement or estoppel to the contrary W was absolutely entitled to the home or the proceeds of its sale. ( Appleton v Appleton [1965] 1 W.L.R. 25 overruled)."
    ],
    "CATEGORY": "Family Law &mdash; Matrimonial Home &mdash; Sale of Land",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "187",
    "RELATED": [
        "(wl) CPS v Piper",
        "(wl) Jones v Kernott",
        "(wl) Fowler v Baron",
        "(wl) Grant v Edwards",
        "(wl) Abbott v Abbott",
        "(wl) Pettitt v Pettitt",
        "(wl) Nicholls v Lan",
        "(wl) Kingsworth v Tizzard",
        "(wl) Hapeshi v Allnatt",
        "(wl) First National Securities v Heggerty",
        "(wl) Williams v Williams",
        "(wl) Chaudhary v Chaudhary"
    ],
    "NAME": "(wl) Gissing v Gissing",
    "SUMMARY": [
        "Matrimonial home; wife&#8217;s interest; joint venture",
        "Where the matrimonial home was conveyed into the name of one spouse only and there was no agreement or understanding or expression of intention that the other spouse, though she had contributed, should have a beneficial interest therein, the law of trust would apply to resolve the entitlement of each spouse. The respondent made no direct contribution towards the purchase of the matrimonial home. She, however, spent her own money on furniture, improvement of the lawn and the family&#8217;s clothes. The parties got married in 1935, purchased the house in 1951 and the respondent obtained a decree absolute in 1966."
    ],
    "CITATION": "Gissing v Gissing [1971] AC 886",
    "YEAR": "1971",
    "JUDGE": "Lord Reid; Lord Morris of Borth-y-Gest; Viscount Dilhorne; Lord Pearson; Lord Diplock",
    "CIT": "[1971] AC 886",
    "FLAGS": [
        "Criticised"
    ],
    "CATEGORIES": [
        "Family Law",
        "Beneficial Interests",
        "Entitlement",
        "Intention",
        "Matrimonial Home",
        "Spouses"
    ],
    "HELD": [
        "that it was not possible to draw an inference that there was any common intention that the respondent should have any beneficial interest in the matrimonial home. (Decision of Court of Appeal [1969] C.L.Y. 1646 reversed; Bishop, Re [1965] Ch. 450 considered, Chapman v Chapman [1969] 1 W.L.R. 1367 considered, Fribance v Fribance (No.1) [1956] P. 99 considered, Nixon v Nixon [1969] 1 W.L.R. 1676 considered, Pettitt v Pettitt [1970] A.C. 777 considered and Ulrich v Ulrich and Felton [1968] 1 W.L.R. 180 considered)."
    ],
    "CATEGORY": "Family Law &mdash; Beneficial Interests &mdash; Entitlement &mdash; Intention &mdash; Matrimonial Home &mdash; Spouses",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "188",
    "RELATED": [
        "(wl) Jones v Kernott",
        "(wl) Capehorn v Harris",
        "(wl) Curley v Parkes",
        "(wl) Kingsworth v Tizzard",
        "(wl) Kinch v Bullard",
        "(wl) HSBC v Dyche",
        "(wl) Hapeshi v Allnatt",
        "(wl) Gissing v Gissing",
        "(wl) Barca v Mears",
        "(wl) Geary v Rankine",
        "(wl) Goodman v Gallant",
        "(wl) Edwards v Royal Bank of Scotland"
    ],
    "NAME": "(wl) Grant v Edwards",
    "SUMMARY": [
        "Constructive trust; unmarried couple; property in man&#8217;s name; woman&#8217;s indirect contributions to household; whether beneficial interest",
        "Indirect contributions to the purchase price of a house by substantial contributions towards the housekeeping and to the bringing up of children are sufficient to create a beneficial interest in favour of the woman where the property is in the name of the man and a common intention that she should have such an interest exists. P and D commenced a casual relationship in 1967. In July 1969 P gave birth to a child of which D was the father. They decided to live together and in December 1969 a house was purchased. The house was conveyed into the names of D and his brother. D told P her name was not going onto the title because it would prejudice pending matrimonial proceedings between P and her husband. GBP 1,043 of the purchase price of GBP 5,490 was paid in cash by D. The remainder was raised by means of two mortgages. The mortgage repayments were made by D. After they moved into the house P paid D GBP 6 per week. A second child was born on 13 July 1971. In addition there were two children from P&#8217;s earlier marriage. From 1972 to 1980 when the relationship broke up P earned similar sums to D out of which she made very substantial contributions to the housekeeping and to the feeding and bringing up of the children. In September 1975 a sum of GBP 1,037 was paid into a building society account in their joint names. The sum represented the balance of insurance moneys paid out for repairs to the house after a fire. P claimed a beneficial interest in the house. The trial judge rejected her claim."
    ],
    "CITATION": "Grant v Edwards [1986] Ch 638",
    "YEAR": "1986",
    "JUDGE": "Sir Nicolas Browne-Wilkinson VC; Mustill LJ; Nourse LJ",
    "CIT": "[1986] Ch 638",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Trusts",
        "Beneficial Interests",
        "Cohabitation",
        "Constructive Trusts",
        "Matrimonial Home"
    ],
    "HELD": [
        "allowing P&#8217;s appeal, that the court would find a constructive trust giving P a beneficial interest if P was able to establish a common intention between her and D and acted on by her that she should have a beneficial interest in the property. In acting to her detriment the conduct required of P was conduct that she could not reasonably be expected to embark upon unless she was to have an interest in the house. In the present case the common intention of the parties that P was to have a beneficial interest in the house was established by the excuse given by D to P for not putting her name on the title of the house; such an excuse could only have been necessary if it was intended that P should have an interest in the house. It could properly be inferred that P made substantial contributions to the mortgage payments by her contributions towards the housekeeping given that the parties had barely sufficient money when they were both earning similar sums of money. P could not reasonably have been expected to give D such substantial assistance in making the mortgage payments unless she was to have an interest in the house. Accordingly P acted to her detriment on the faith of the common intention of the parties that she should have an interest in the house. P was entitled to a half interest in the house. Mustill L.J. set out a summary of the relevant propositions of law to be applied in such cases (Pettitt v Pettitt [1970] A.C. 777, Gissing v Gissing [1971] A.C. 886, Eves v Eves [1975] 1 W.L.R. 1338, Midland Bank Plc v Dobson [1986] 1 F.L.R. 171 considered)."
    ],
    "CATEGORY": "Trusts &mdash; Beneficial Interests &mdash; Cohabitation &mdash; Constructive Trusts &mdash; Matrimonial Home",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "189",
    "RELATED": [
        "(wl) Halifax v Popeck",
        "(wl) Abbey National BS v Cann",
        "(wl) Gold Harp v McLeod",
        "(wl) Kingsworth v Tizzard",
        "(wl) State Bank of India v Sood",
        "(wl) Wood v Waddington",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Link Lending v Bustard",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) HSBC v Dyche",
        "(wl) Laskar v Laskar",
        "(wl) Ashburn v Arnold"
    ],
    "NAME": "(wl) Lloyds Bank v Rosset",
    "SUMMARY": [
        "Overriding interest; mortgage; equitable interest; &#8220;actual occupation&#8221;; relevant date for determining overriding interest",
        "L appealed against a decision upholding R&#8217;s beneficial right to occupy property over which L had a registered charge ([1989] Ch. 350). R had carried out decorating work and supervised restoration on property purchased in the sole name of her husband (H). R was in possession on 7 November 1982 but contracts were not exchanged until 23 November and completion took place on 17 December. On 14 December H executed a charge in favour of L unbeknown to R. The charge was registered on 7 February 1983. H defaulted on the loan."
    ],
    "CITATION": "Lloyds Bank v Rosset [1991] 1 AC 107",
    "YEAR": "1991",
    "JUDGE": "Lord Bridge of Harwich; Lord Griffiths; Lord Ackner; Lord Oliver of Aylmerton; Lord Jauncey of Tullichettle",
    "CIT": "[1991] 1 AC 107",
    "FLAGS": [
        "Criticised"
    ],
    "CATEGORIES": [
        "Real Property",
        "Beneficial Interests",
        "Charges",
        "Land Registration",
        "Occupation",
        "Priorities"
    ],
    "HELD": [
        "dismissing the appeal, that the relevant date for determining whether R was in occupation of the property for creation of an overriding interest in terms of the Land Registration Act 1925 s.70 was the date of the creation of the charge, 17 December. L correctly challenged whether R had any beneficial interest in the property. There was no express agreement between R and H between November and 17 December that R would have a beneficial interest in the property and no express evidence of discussions to that effect. The work R did on the property was insufficient to create the inference of beneficial ownership or creation of a constructive trust. Conduct such as payment towards the purchase price by the party who was not the legal owner was required before such an inference would be drawn."
    ],
    "CATEGORY": "Real Property &mdash; Beneficial Interests &mdash; Charges &mdash; Land Registration &mdash; Occupation &mdash; Priorities",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "190",
    "RELATED": [
        "(wl) Laskar v Laskar",
        "(wl) Grant v Edwards",
        "(wl) Jones v Kernott",
        "(wl) Stack v Dowden",
        "(wl) HSBC v Dyche",
        "(wl) State Bank of India v Sood",
        "(wl) Capehorn v Harris",
        "(wl) Hapeshi v Allnatt",
        "(wl) Kingsworth v Tizzard",
        "(wl) Herbert v Doyle",
        "(wl) Jones v Challenger",
        "(wl) Horsham Properties v Beech"
    ],
    "NAME": "(wl) Curley v Parkes",
    "SUMMARY": [
        "The appellant (C) appealed against a decision that he and the respondent (P) did not own beneficially in equal shares the house in which they had cohabited. The parties had moved into L after C had been asked by his employer (V) to relocate with the financial assistance of a relocation scheme. P had bought L in April 2001 by using the proceeds of sale of her previous home, being a little under GBP 9,000, a mortgage for GBP 138,480 and GBP 6,000 cash. C paid no part of the purchase price. C received from V&#8217;s relocation scheme GBP 8,557 and about GBP 260 per month. C paid into P&#8217;s current account GBP 9,213 in six instalments between May and November 2001. C paid GBP 4,393 to P on May 21, 2001, being all that C had left from the monies that he had received from V. C also paid a total of GBP 8,775 into the parties&#8217; joint account between May 2001 and April 2002. The relationship between C and P ended in February 2002. The sole issue was whether the judge had erred by failing to decide that C had been entitled to an interest under a resulting trust by reason of actual contributions that he had made to the purchase price of L. C submitted that he was entitled to 8.5 per cent of the equity in L as commensurate with the proportion of the purchase monies he had paid, such monies comprising the sum of GBP 9,213 which he had paid to P, payment of the solicitors&#8217; fees and expenses of GBP 2,858 made on C&#8217;s behalf direct through V&#8217;s relocation scheme and the sum of GBP 1,556 in payment of the removal costs."
    ],
    "CITATION": "Curley v Parkes [2004] EWCA Civ 1515",
    "YEAR": "2004",
    "COUNSEL": "For the appellant: Jeremy Garood. For the respondent: Nicola Preston.",
    "JUDGE": "Peter Gibson LJ; Sir William Aldous",
    "CIT": "[2004] EWCA Civ 1515",
    "CATEGORIES": [
        "Trusts",
        "Beneficial Interests",
        "Cohabitants",
        "Constructive Trusts",
        "Contributions",
        "Mortgages",
        "Purchase Money",
        "Resulting Trusts"
    ],
    "HELD": [
        "dismissing the appeal, that (1) in the absence of contrary intention, a resulting trust of a property purchased in the name of another could only arise once and for all at the date on which the property was acquired and any payments after that date were not payments of the purchase price, Marsh v Von Sternberg [1986] 1 F.L.R. 526 and Huntingford v Hobbs [1993] 1 F.L.R. 736 considered. None of the payments made by C formed part of the purchase price. (2) (Obiter) because subsequent payments of mortgage instalments could not constitute contributions to property purchase monies under a resulting trust, reliance could instead be placed on a constructive trust if an agreement or common intention could be found or inferred from the circumstances."
    ],
    "CATEGORY": "Trusts &mdash; Beneficial Interests &mdash; Cohabitants &mdash; Constructive Trusts &mdash; Contributions &mdash; Mortgages &mdash; Purchase Money &mdash; Resulting Trusts",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "191",
    "RELATED": [
        "(wl) Capehorn v Harris",
        "(wl) Fowler v Baron",
        "(wl) Jones v Kernott",
        "(wl) Laskar v Laskar",
        "(wl) CPS v Piper",
        "(wl) Hapeshi v Allnatt",
        "(wl) Curley v Parkes",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Kingsworth v Tizzard",
        "(wl) Gissing v Gissing",
        "(wl) Burgess v Rawnsley",
        "(wl) Chaudhary v Chaudhary"
    ],
    "NAME": "(wl) Stack v Dowden",
    "SUMMARY": [
        "Where a property was conveyed into the joint names of a cohabiting couple without any explicit declaration of their respective beneficial interests, the starting point where the property had to be divided upon the breakdown of the relationship was that where there was joint legal ownership, there was also joint beneficial ownership. The onus was upon the person seeking to show that the parties intended their beneficial interests to be different from their legal interests and in what way."
    ],
    "CITATION": "Stack v Dowden [2007] UKHL 17",
    "ABSTRACT": [
        "The appellant (S) appealed against an order ( [2005] EWCA Civ 857, (2006) 1 F.L.R. 254 ) specifying the division of the net proceeds of sale of the home he had shared with his former partner (D) and their children.",
        "D and S had purchased the house in their joint names using the then current land registry form, which contained no declaration of trust but contained a declaration that the survivor could give a good receipt for capital money arising from a disposition of the property. The purchase was funded by the sale of their previous property, which had been in D&#8217;s sole name, plus savings in D&#8217;s name, and a mortgage held in both names. S paid the mortgage interest and endowment policy premiums, while together they paid off the capital, with D contributing a greater proportion. When they bought the house, D and S had been cohabiting for 18 years and had four children. Nearly all aspects of their respective finances had been kept separate. Nine years after purchasing the house, their relationship broke down and they agreed a court order that excluded S from the house and required D to pay S for the cost of his alternative accommodation. S then successfully sought a declaration that the house was held upon trust by the couple as tenants in common in equal shares and an order for its sale. D appealed and the Court of Appeal ordered that the net proceeds be divided 65 per cent to her and 35 per cent to S on the basis that the declaration as to the receipt for capital money in the transfer document could not be taken as an express declaration of trust, nor could it infer an intention that the beneficial ownership be equal, because there was no evidence that either of them had understood the declaration to carry such significance. The issues were whether a conveyance into joint names established a prima facie case of joint and equal beneficial interests and whether the Court of Appeal had been correct to overrule the judge&#8217;s order that D compensate S for the cost of his accommodation."
    ],
    "YEAR": "2007",
    "COUNSEL": "For the appellant: Lucy Theis QC, Francis Wilkinson, Miriam Shalom. For the respondent: Christopher Lundie, Emily Saunderson.",
    "JUDGE": "Lord Hoffmann; Lord Hope of Craighead; Lord Walker of Gestingthorpe; Baroness Hale of Richmond; Lord Neuberger of Abbotsbury",
    "CIT": "[2007] UKHL 17",
    "FLAGS": [
        "Approved",
        "Hale",
        "Neuberger",
        "Hoffmann"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Family Law",
        "Beneficial Interests",
        "Co-Ownership",
        "Family Home",
        "Intention",
        "Joint Tenancies",
        "Land Registers",
        "Relationship Breakdown",
        "Resulting Trusts",
        "Unmarried Couples"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(Lord Neuberger dissenting on the issue of accommodation payments) (1) The starting point where there was joint legal ownership was joint beneficial ownership. The onus was upon the person seeking to show that the parties intended their beneficial interests to be different from their legal interests and in what way. Context was everything, and each case would turn on its own facts. Many more factors than financial contributions could be relevant to intention, and the court gave a non-exhaustive list. Cases in which the joint legal owners were to be taken to have intended that their beneficial interests should be different from their legal interests would be very unusual. Accordingly, it was for D to show that the common intention when they bought the house was that she and S should hold the property otherwise than as joint beneficial tenants, and there were, on the evidence, many factors for her to rely on. The fact that she and S had lived together for such a long time and had children together, yet had kept their affairs rigidly separate, was strongly indicative that they did not intend their shares, even in the property that was put into their joint names, to be equal, and she had made good her case for a higher share, Pettitt v Pettitt [1970] A.C. 777 considered, Oxley v Hiscock [2004] EWCA Civ 546, [2005] Fam. 211 applied and Walker v Hall [1984] Fam. Law 21 , Springette v Defoe [1992] 2 F.L.R. 388 and Huntingford v Hobbs [1993] 1 F.L.R. 736 doubted. (2) In determining the issue of payments from D to S for his alternative accommodation, the criteria laid down in the Trusts of Land and Appointment of Trustees Act 1996 were to be applied in preference to cases pre-dating that regime. The judge at first instance had erred in failing to apply those criteria and the Court of Appeal had been correct to quash his order in this respect. (3) (Per Lord Neuberger) Although the judge&#8217;s reason for ordering D to pay S&#8217;s accommodation costs had been weak, partly because he had not been referred to the 1996 Act, a proper exercise of the court&#8217;s power under s.14 of the Act would, in the circumstances, have been to order the compensation at the level the parties had originally agreed."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Family Law &mdash; Beneficial Interests &mdash; Co-Ownership &mdash; Family Home &mdash; Intention &mdash; Joint Tenancies &mdash; Land Registers &mdash; Relationship Breakdown &mdash; Resulting Trusts &mdash; Unmarried Couples",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "192",
    "RELATED": [
        "(wl) Williams v Williams",
        "(wl) Kingsworth v Tizzard",
        "(wl) First National Securities v Heggerty",
        "(wl) Pettitt v Pettitt",
        "(wl) Gissing v Gissing",
        "(wl) Laskar v Laskar",
        "(wl) Halifax BS v Thomas",
        "(wl) Harris v Goddard",
        "(wl) Bedson v Bedson",
        "(wl) City of London BS v Flegg HL",
        "(wl) National Provincial Bank v Ainsworth",
        "(wl) Jones v Kernott"
    ],
    "NAME": "(wl) Abbott v Abbott",
    "SUMMARY": [
        "In determining the beneficial ownership of a former matrimonial home, the Court of Appeal of Antigua and Barbuda had erred by attaching undue significance to the dictum of Lord Bridge in Lloyds Bank Plc v Rosset [1991] 1 A.C. 107. The law had moved on since then, and the parties&#8217; whole course of conduct in relation to a property had to be taken into account in determining their intentions as to its ownership."
    ],
    "CITATION": "Abbott v Abbott [2007] UKPC 53",
    "ABSTRACT": [
        "The appellant wife (W) appealed against a decision of the Court of Appeal of Antigua and Barbuda allowing an appeal by the respondent husband (H) against a decision regarding the beneficial ownership of the parties&#8217; former matrimonial home, its furniture, and some shares.",
        "The parties had married in 1983. In 1984, H&#8217;s mother transferred a plot of land into H&#8217;s name, so that the parties could build their matrimonial home there. The home was built in 1990 and 1991, and H was the legal owner. H&#8217;s mother contributed towards the construction costs, but H and W also took out a bridging loan and then a mortgage. W made herself jointly and severally liable for the repayment of the principal and interest on the mortgage. Throughout the marriage, H and W&#8217;s income went into a joint bank account, and all payments were made out of that joint account. W did not work between 1986 and 1995. The parties separated in 1996 and, after a brief reconciliation in 1997, they commenced divorce proceedings in 1999. The trial judge held that H and W had an equal beneficial interest in the matrimonial home, given that they were both liable for repaying the mortgage and there was no reason to believe that H&#8217;s mother wanted to make a gift of the land to H alone. The Court of Appeal held that there was no factual basis for the inference that the land was a gift to both H and W, and took the view, relying on Lloyds Bank Plc v Rosset [1991] 1 A.C. 107, that W could only acquire an interest by way of direct contributions to the mortgage payments. Accordingly, it held that W was only entitled to an 8.31 per cent share in the equity, based on her actual contributions towards the mortgage."
    ],
    "YEAR": "2007",
    "COUNSEL": "For the appellant: Nicola Martin. For the respondent: Gerald Watt QC (Antigua Bar).",
    "JUDGE": "Lord Bingham of Cornhill; Lord Walker of Gestingthorpe; Baroness Hale of Richmond; Lord Carswell; Lord Neuberger of Abbotsbury",
    "CIT": "[2007] UKPC 53",
    "FLAGS": [
        "Approved",
        "Hale",
        "Neuberger",
        "Bingham"
    ],
    "CATEGORIES": [
        "Family Law",
        "Antigua and Barbuda",
        "Beneficial Ownership",
        "Furniture",
        "Joint Accounts",
        "Matrimonial Home",
        "Matrimonial Property",
        "Mortgages",
        "Shares"
    ],
    "HELD": [
        "Appeal allowed in part.",
        "(1) The Court of Appeal should not have interfered with the trial judge&#8217;s findings on the beneficial ownership of the matrimonial home. It appeared to have attached undue significance to the dictum of Lord Bridge in Rosset , in particular as to what conduct was to be taken into account in quantifying an acknowledged beneficial interest. The law had moved on since then, Rosset disapproved. The parties&#8217; whole course of conduct in relation to a property had to be taken into account in determining their shared intentions as to its ownership, Stack v Dowden [2007] UKHL 17, [2007] 2 A.C. 432 applied. If a parent gave financial assistance to a newly-married couple to acquire a home, the usual inference was that it was intended as a gift to both of them, McHardy &amp; Sons v Warren [1994] 2 F.L.R. 338 and Midland Bank Plc v Cooke [1995] 4 All E.R. 562 considered. In the instant case, that inference was supported by H and W&#8217;s behaviour throughout the marriage. The fact that they arranged their finances entirely jointly and undertook joint liability for the repayment of the mortgage was significant, Hyett v Stanley [2003] EWCA Civ 942, [2004] 1 F.L.R. 394 considered. The Court of Appeal appeared not to have attached any weight to that factor. (2) The shares belonged to H exclusively. W had made a concession to that effect before the Court of Appeal, and that concession was properly made. (3) The judge at first instance had been correct to find that H and W owned the furniture in the matrimonial home in equal shares. However, he had made an adjustment based on W&#8217;s estimate of the costs of purchasing the furniture in 1991. That was unrealistic, as in the intervening years much of the furniture would be of little value. Some had been disposed of, and W had declined to take any of it with her when she left the matrimonial home. (4) There should be an order that the house be sold and the proceeds divided equally, subject to an adjustment in favour of W for 20 per cent of the costs of acquiring the furniture."
    ],
    "CATEGORY": "Family Law &mdash; Antigua and Barbuda &mdash; Beneficial Ownership &mdash; Furniture &mdash; Joint Accounts &mdash; Matrimonial Home &mdash; Matrimonial Property &mdash; Mortgages &mdash; Shares",
    "COURT": "UKPC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "193",
    "RELATED": [
        "(wl) Stack v Dowden",
        "(wl) Capehorn v Harris",
        "(wl) Hapeshi v Allnatt",
        "(wl) Jones v Kernott",
        "(wl) Gissing v Gissing",
        "(wl) CPS v Piper",
        "(wl) Laskar v Laskar",
        "(wl) Chaudhary v Chaudhary",
        "(wl) Kingsworth v Tizzard",
        "(wl) Pye Ltd v Graham",
        "(wl) State Bank of India v Sood",
        "(wl) Curley v Parkes"
    ],
    "NAME": "(wl) Fowler v Baron",
    "SUMMARY": [
        "A judge had erred in seeking to determine the parties&#8217; intentions, in the absence of an express agreement, with respect to the shares in which they owned a property by concentrating on the parties&#8217; financial contributions and not having regard to the whole of the parties&#8217; relationship. The facts were consistent with the inference of a common intention to share the property in equal shares."
    ],
    "CITATION": "Fowler v Baron [2008] EWCA Civ 377",
    "ABSTRACT": [
        "The appellant (F) appealed against an order declaring that the property, in which she and the respondent (B), her former partner, had lived and which had been registered in their joint names belonged beneficially to B.",
        "F and B, who had had an unmarried relationship, had bought the property with the aid of a mortgage that had been taken out in their joint names. B had paid the deposit and the balance of the purchase price. The transfer document did not contain any declaration of trust. B had paid the mortgage instalments and the direct fixed costs of the property such as utility bills. He had also cared for their children whilst F worked. The parties had lived together for a long period until they had separated. The judge accepted B&#8217;s evidence that, when he had agreed to the property being registered in joint names, he had intended that the property would become F&#8217;s home by way of survivorship. The judge did not refer to the fact that, according to B, he and F had executed mutual wills each leaving the interest in the property to the other. The judge found that, with the exception of some money that F had saved, she had always spent her income on herself and the children. The judge held that the presumption of a resulting trust applied and the property had to be taken to be held in shares proportionate to the respective contributions to the purchase price, and that F had made no such contributions.",
        "F argued that the judge had wrongly considered resulting trust, rather than common intention constructive trust, to determine whether she had a beneficial interest in the property, and had erred in his approach to her income since he had treated that as purely hers. F contended that the judge should have drawn the inference that the parties&#8217; shared intention was that she should have a 50 per cent interest in the property. She submitted that the presumption of a beneficial joint tenancy could not be rebutted simply because she had made no contribution to the costs of acquiring the property. B submitted that he had not correctly understood the significance of the property being in joint names since his only intention was that F should inherit the property if he predeceased her and their relation subsisted at the date of death. B contended that F&#8217;s maximum share should represent a one-half share of the contribution to the purchase price made by the mortgage to which she was a party."
    ],
    "YEAR": "2008",
    "COUNSEL": "For the appellant: Dirk Van Heck. For the respondent: Marc Living.",
    "JUDGE": "Waller LJ; Arden LJ; Toulson LJ",
    "CIT": "[2008] EWCA Civ 377",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Family Law",
        "Beneficial Interests",
        "Beneficial Ownership",
        "Entitlement",
        "Intention",
        "Unmarried Couples"
    ],
    "HELD": [
        "Appeal allowed.",
        "(1) The judge had erred in seeking to determine the parties&#8217; intentions with respect to the shares in which they owned the property by concentrating on the parties&#8217; financial contributions. In the absence of an express agreement, the parties&#8217; intentions, actual or inferred, with respect to the property had to be ascertained in the light of the whole course of their conduct in relation to it, Stack v Dowden [2007] UKHL 17, [2007] 2 A.C. 432 applied. (2) As a matter of law, a presumption of joint beneficial ownership arose from the fact that B and F were joint legal owners, Stack applied. It was open to B to rebut that presumption. There was only circumstantial evidence of the parties&#8217; intentions. The relevant intention of each party was the intention that was reasonably understood by the other party to be manifested by that party&#8217;s words or conduct, Gissing v Gissing [1971] A.C. 886 applied. Thus any secret intention of B that F should only benefit in the event of his death and on the basis that they were then still living together, did not provide the evidential basis for rebutting the presumption, since it was not evidence of the parties&#8217; shared intention. B&#8217;s mistaken belief as to the effect of putting the property into joint names was of no materiality. He had not communicated his belief to F, and there was no basis for saying that it should have been apparent to her. The fact that F had signed the mortgage deed, although she was not expected to make any payment towards the discharge of the mortgage debt, was not inconsistent with the shared intention that she should be a joint beneficial owner. As regards the amount of the parties&#8217; contributions, that was not necessarily a critical factor. It could be inferred that F had contributed to the household expenses for which both parties were responsible and the parties had intended that it should make no difference to their interests in the property which party paid for what expense. The proper inference from the execution of mutual wills was that the parties intended each to have an interest. There was no logical reason why F&#8217;s interest should be equal to a one half-share of the proportion that the mortgage loan bore to the total acquisition cost to the property since the parties could not have expected her actually to contribute to that amount. Accordingly, B had not discharged the onus on him of showing that it was not the parties&#8217; shared intention that F should have a one half-share in the property."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Family Law &mdash; Beneficial Interests &mdash; Beneficial Ownership &mdash; Entitlement &mdash; Intention &mdash; Unmarried Couples",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "194",
    "RELATED": [
        "(wl) Curley v Parkes",
        "(wl) State Bank of India v Sood",
        "(wl) Hapeshi v Allnatt",
        "(wl) Stack v Dowden",
        "(wl) Fowler v Baron",
        "(wl) Davis v Smith",
        "(wl) Quigley v Masterson",
        "(wl) Burgess v Rawnsley",
        "(wl) HSBC v Dyche",
        "(wl) Abbott v Abbott",
        "(wl) Harris v Goddard",
        "(wl) Halifax BS v Thomas"
    ],
    "NAME": "(wl) Laskar v Laskar",
    "SUMMARY": [
        "The purchase of a property as an investment by a mother and daughter did not give rise to a presumption of joint ownership, but where both parties were jointly liable under the mortgage it was correct to treat the value of the mortgage as representing equal contributions to the purchase price for the purpose of calculating beneficial interest."
    ],
    "CITATION": "Laskar v Laskar [2008] EWCA Civ 347",
    "ABSTRACT": [
        "The appellant daughter (R) appealed against a decision that she was not entitled to the equal beneficial ownership of a property purchased by her mother (Z).",
        "Z and her husband had been tenants of the relevant property since before R had been born. The landlord was the local council. Later, the property was transferred into Z&#8217;s sole name and she pursued an application under the Housing Act 1985 s.118 to buy the property outright as an investment. Z&#8217;s application was successful and the property was offered to her for a value that, pursuant to s.129 of the Act, was significantly discounted. Z was unable to raise all the funds necessary to purchase the property and in order to secure a mortgage, she transferred the property into joint names, namely hers and R&#8217;s. On that basis the mortgage was granted, and both R and Z became jointly liable under it. R also provided a small amount of money of her own to help with the purchase. Having raised sufficient funds, Z completed the purchase of the property. Later, both R and Z moved out of the property and began renting it out. At all times, Z was solely responsible for the property, and for the mortgage repayments, which were funded by money drawn from the rent on the property. Subsequently, the familial relationship broke down and R instituted proceedings to have her equal beneficial interest in the property recognised.",
        "R submitted that (1) there was a presumption at law that the beneficial interest mirrored the legal interest, so that joint tenants were entitled to equal proportions of the beneficial interest. Since R had been named as the joint tenant of the property she was entitled to equal beneficial ownership; (2) even if the presumption of joint ownership was rebutted, the judge should not have concluded that the discount awarded to Z under s.129 of the Act was Z&#8217;s contribution alone. R was entitled to an equal share of that contribution since she had, along with Z, lived in the property for a significant period of time; (3) since R was jointly liable with Z upon the mortgage, the judge should have considered that the mortgage monies were a joint contribution to the purchase price and not Z&#8217;s alone."
    ],
    "YEAR": "2008",
    "COUNSEL": "For the appellant: Simeon Thrower (Public Access barrister), Andrew Veen (Public Access barrister). For the respondent: Richard Colbey (Public Access barrister).",
    "JUDGE": "Lord Neuberger of Abbotsbury; Tuckey LJ; Rimer LJ",
    "CIT": "[2008] EWCA Civ 347",
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "CATEGORIES": [
        "Real Property",
        "Beneficial Interests",
        "Beneficial Ownership",
        "Contributions",
        "Joint Tenancies",
        "Joint Tenants",
        "Mortgages",
        "Resulting Trusts"
    ],
    "HELD": [
        "Appeal allowed in part.",
        "(1) Where the property in question was purchased as an investment it would not be appropriate to apply the presumption of joint ownership. This was so, despite the nature of the familial relationship between the parties, Stack v Dowden [2007] UKHL 17, [2007] 2 A.C. 432 distinguished. In the instant case, the purchase of the property was nothing more than a business venture. Both parties led separate and distinct lives and maintained separate and distinct finances. It was clear that R had been brought into the transaction on the basis that it had been necessary to name her as a joint tenant in order to raise the requisite finances on the property. Despite its familial appearance, the relationship was one between investors, and the presumption of joint ownership did not apply in such circumstances. Accordingly, there was nothing more than a resulting trust, and each party was entitled to the value of her own contribution. (2) The award of discount under s.129 of the Act had been made to Z on the basis of her long tenancy as sole tenant. R had been named as joint tenant comparatively recently and only as a mechanism to raise finance on the property. Therefore, the beneficial interest would not follow the legal interest and the judge had been correct to treat the discount as a contribution solely made by Z, Springette v Defoe [1992] 2 F.L.R. 388, Evans (formerly Newton) v Hayward [1992] N.P.C. 85, and Ashe (Trustee in Bankruptcy of Henry Samuel Mumford) v Mumford (No.2) [2001] B.P.I.R. 1, applied. (3) By virtue of the fact that both R and Z were jointly liable under the mortgage, it was correct to treat the mortgage as representing equal contributions to the purchase price. That was especially the case where mortgage repayments were funded by the rent on the property and not by the personal finances of the parties. Accordingly, on the basis of her contributions, R&#8217;s beneficial interest in the property was raised appropriately to represent the uplift created by her mortgage contribution."
    ],
    "CATEGORY": "Real Property &mdash; Beneficial Interests &mdash; Beneficial Ownership &mdash; Contributions &mdash; Joint Tenancies &mdash; Joint Tenants &mdash; Mortgages &mdash; Resulting Trusts",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "195",
    "RELATED": [
        "(wl) Jones v Kernott",
        "(wl) Capehorn v Harris",
        "(wl) Chaudhary v Chaudhary",
        "(wl) Fowler v Baron",
        "(wl) Stack v Dowden",
        "(wl) Laskar v Laskar",
        "(wl) Gissing v Gissing",
        "(wl) CPS v Piper",
        "(wl) Grant v Edwards",
        "(wl) HSBC v Dyche",
        "(wl) Whittaker v Kinnear",
        "(wl) McDowall v Hirschfield Lipson"
    ],
    "NAME": "(wl) Hapeshi v Allnatt",
    "SUMMARY": [
        "Applying an holistic approach to the evidence the court determined that a claimant held a 25 per cent interest in a property with the estate of his deceased mother holding a 50 per cent interest and the estate of his deceased brother holding a 25 per cent interest."
    ],
    "CITATION": "Hapeshi v Allnatt [2010] EWHC 392 (Ch)",
    "ABSTRACT": [
        "The claimant (H) claimed a declaration that he was the beneficial owner of a property.",
        "H&#8217;s mother (M) had exercised her right to buy the property as a local authority tenant at a discount of slightly over 50 per cent of the value of the property. The house was purchased by means of a mortgage and the property was registered in the name of M and H&#8217;s brother (B), as proprietors, at the Land Registry. The transfer form stated that M and B held the property as joint tenants. B predeceased M who died some years later. M&#8217;s will appointed H and the first defendant (D), who was H&#8217;s sister, as executors and stated that eight-ninths of the residuary estate was to be left to her eight surviving children with the remaining ninth to be divided amongst B&#8217;s children. Probate was granted to D and double probate was later granted to H.",
        "H contended that he held the entire beneficial interest in the property pursuant to a constructive trust that had been created through the intention of M, B and himself before the property was purchased, that they would hold the property as joint tenants or in equity pursuant to proprietary estoppel. He argued that he had not been named on the formal documents because he had not satisfied the local authority&#8217;s residence qualification at the time of the purchase."
    ],
    "YEAR": "2010",
    "COUNSEL": "For the claimant: Joseph Goldsmith. For the first defendant: Paul Clarke. For the second defendant: No appearance or representation.",
    "JUDGE": "Judge Hodge QC",
    "CIT": "[2010] EWHC 392 (Ch)",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Trusts",
        "Beneficial Interests",
        "Beneficial Ownership",
        "Constructive Trusts",
        "Intention",
        "Joint Tenancies",
        "Proprietary Estoppel"
    ],
    "HELD": [
        "Judgment accordingly.",
        "In order to establish a common intention constructive trust, a claimant had to demonstrate first, a common intention that both parties should have a beneficial interest in the property and second, that the claimant had acted to his detriment on the basis of that common law intention, so that it would be inequitable for the legal owner to deny the claimant his interest. On the evidence before the court it was apparent that before the property was purchased, it was intended that H would be named as a joint purchaser, but that intention could not be effected as the local authority would not accept H&#8217;s name on the legal title of the property. Parts of H&#8217;s case were well-founded but at times he was prone to exaggerate the extent to which he had actually implemented such intentions as there may have been at the time of the original purchase. The intention that H should participate had survived the news that the local authority would not accept his name on the title. That was consistent with the terms of letters written by their solicitor at the time, and the solicitor&#8217;s suggestion that a trust deed should be drawn up to protect H&#8217;s position. However, it was clear that there was no express agreement between M, H or B as to how the property was to be held by them or in what shares, and there was no satisfactory explanation as to why they had not entered into a trust deed either before the property was purchased or afterwards. The fact that the transfer form stated that M and B held the property as joint tenants was of little relevance as it was apparent that M could not read English and there was no evidence that at the time of the transfer she understood what a joint tenancy was. On the evidence before the court H had not made a full initial contribution towards the purchase price nor had he consistently contributed monies towards payment of the mortgage. However, he had made some payments to clear mortgage arrears and had made other payments towards insurance and household items for the property. H had taken out an endowment policy in the full sum of the purchase price before the mortgage was drawn down, as B had also done, and that policy had been taken out with the mortgage in mind, but H&#8217;s endowment policy had not been charged as security. It was also noteworthy that for a considerable period, the mortgage payments had been made through the use of benefits received by M and rent received from lodgers at the property and that the property purchase had been made possible through the use of M&#8217;s discount which was greater than the purchase price. Against all of that background H had not made out his case that there was any express agreement as to the shares in which the property should be held. Accordingly, adopting an holistic approach to the parties&#8217; whole course of conduct in relation to the property, M&#8217;s share in the property was quantified at 50 per cent, and the shares of H and B&#8217;s estate were quantified at 25 per cent each, Stack v Dowden [2007] UKHL 17, [2007] 2 A.C. 432 applied and Abbott v Abbott [2007] UKPC 53, [2008] 1 F.L.R. 1451 considered."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Trusts &mdash; Beneficial Interests &mdash; Beneficial Ownership &mdash; Constructive Trusts &mdash; Intention &mdash; Joint Tenancies &mdash; Proprietary Estoppel",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "196",
    "RELATED": [
        "(wl) Capehorn v Harris",
        "(wl) Stack v Dowden",
        "(wl) Hapeshi v Allnatt",
        "(wl) Grant v Edwards",
        "(wl) Curley v Parkes",
        "(wl) Chaudhary v Chaudhary",
        "(wl) Gissing v Gissing",
        "(wl) Fowler v Baron",
        "(wl) CPS v Piper",
        "(wl) HSBC v Dyche",
        "(wl) Laskar v Laskar",
        "(wl) Geary v Rankine"
    ],
    "NAME": "(wl) Jones v Kernott",
    "SUMMARY": [
        "In line with the decision in Stack v Dowden [2007] UKHL 17, [2007] 2 A.C. 432, where a property was bought in the joint names of a cohabiting couple, who were both responsible for any mortgage, but without any express declaration of their beneficial interests, the presumption that the beneficial interests coincided with the legal estate could be rebutted by evidence of a contrary intention. Where that evidence did not show what shares were intended, it was for the court to decide what shares were either intended or fair."
    ],
    "CITATION": "Jones v Kernott [2011] UKSC 53",
    "ABSTRACT": [
        "The appellant (J) appealed against a decision ([2010] EWCA Civ 578) declaring that the property co-owned by her and the respondent (K) was held by them as tenants in common in equal shares.",
        "The parties bought the property in joint names in 1985, with the benefit of a mortgage in their joint names. They lived there together, sharing the household expenses, for over eight years, and K moved out of the property in 1993. Thereafter, J remained in the property with their two children, and paid all the household expenses herself. K made no further contribution towards the acquisition of the property. That situation continued for over 14 years, when the property was put up for sale. K commenced proceedings in the county court claiming a declaration under the Trusts of Land and Appointment of Trustees Act 1996 s.14. A declaration was made that the beneficial interest was split 90 per cent to 10 per cent in favour of J, and that decision was upheld on appeal. The Court of Appeal allowed K&#8217;s appeal."
    ],
    "YEAR": "2011",
    "COUNSEL": "For the appellant: Richard Power. For the respondent: Andrew Bailey.",
    "JUDGE": "Lord Walker JSC; Lady Hale JSC; Lord Collins JSC; Lord Kerr JSC; Lord Wilson JSC",
    "CIT": "[2011] UKSC 53",
    "FLAGS": [
        "Approved",
        "Hale"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Trusts",
        "Family Law",
        "Beneficial Interests",
        "Cohabitation",
        "Constructive Trusts",
        "Contributions",
        "Co-Ownership",
        "Intention",
        "Unmarried Couples"
    ],
    "HELD": [
        "Appeal allowed.",
        "In line with the decision in Stack v Dowden [2007] UKHL 17, [2007] 2 A.C. 432, where a property was purchased in the joint names of a married or unmarried couple for joint occupation, who were both responsible for any mortgage, and where there was no express declaration of their beneficial interests, there was a presumption that the beneficial interests coincided with the legal estate. That presumption could be rebutted by evidence of a contrary intention, which might more readily be shown where the parties had contributed to the acquisition of the property in unequal shares, but each case would turn on its own facts. It was for the court to ascertain the parties&#8217; common intention as to what their shares in the property would be, in the light of their whole course of conduct in relation to it, Gissing v Gissing [1971] A.C. 886 and Oxley v Hiscock [2004] EWCA Civ 546, [2005] Fam. 211 applied, Stack followed (see paras 10-15, 25, 51 of judgment). Any challenge to the presumption was not to be lightly embarked on, since a decision to buy a property in joint names indicated an emotional and economic commitment to a joint enterprise, and the notion that in a trusting personal relationship the parties did not hold each other to account financially, was underpinned by the practical difficulty of taking any such account after years of living together (paras 19-22). The search was primarily to ascertain the parties&#8217; actual shared intentions, whether expressed or to be inferred from their conduct. However, where it was clear that the beneficial interests were to be shared, but it was impossible to divine a common intention as to the proportions in which they were to be shared, it was for the court to impute an intention to the parties which they might never have had. The court could not impose a solution on them which was contrary to what the evidence showed that they actually intended (paras 31, 46-47). Where a family home was put into the name of one party only, the starting point was different, and the first issue was whether it was intended that the other party should have any beneficial interest at all: there was no presumption of joint beneficial ownership, but their common intention had again to be deduced from their conduct (para.52). In the instant case there was no need to impute an intention that the parties&#8217; beneficial interests would change, as the judge had made a finding that their intention did in fact change, and that was an intention which he both could have and should have inferred from their conduct. The calculation of their shares by the instant court produced a result so close to that produced by the judge that it would be wrong for the instant court to interfere (paras 48-49)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Trusts &mdash; Family Law &mdash; Beneficial Interests &mdash; Cohabitation &mdash; Constructive Trusts &mdash; Contributions &mdash; Co-Ownership &mdash; Intention &mdash; Unmarried Couples",
    "COURT": "UKSC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "197",
    "RELATED": [
        "(wl) Jones v Kernott",
        "(wl) Capehorn v Harris",
        "(wl) Hapeshi v Allnatt",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Curley v Parkes",
        "(wl) Bucks CC v Moran",
        "(wl) Chaffe v Kingsley",
        "(wl) Stack v Dowden",
        "(wl) Pye Ltd v Graham",
        "(wl) Stafford v Lee",
        "(wl) Herbert v Doyle",
        "(wl) Lloyds Bank v Carrick"
    ],
    "NAME": "(wl) Geary v Rankine",
    "SUMMARY": [
        "A judge had not erred in holding that two individuals in a family partnership who ran a guest house had not been in a business partnership, and that there had not been a common intention that the appellant would have a beneficial interest in the guest house property."
    ],
    "CITATION": "Geary v Rankine [2012] EWCA Civ 555",
    "ABSTRACT": [
        "The appellant (G) appealed against the decision that she was not entitled to a share of a guest house titled to the respondent (R), with whom she had been in a 19-year relationship.",
        "G and R had been in a relationship from 1990 to 2009. In 1996, R purchased a guest house with his own savings. At the time of the purchase the parties had not intended to live in the property or run it themselves; rather, the guest house would be run by a manager. Due to difficulties with the manager, however, R began to run the business himself. When he realised that he could not run it alone, G also became involved with the business, cleaning, cooking, looking after guests, and doing paperwork. R did not pay G wages. When she needed money she had to ask R for it. After the parties&#8217; relationship deteriorated, G brought a county court claim for an interest in the guest house based on either a business partnership or a constructive trust. The judge rejected her claim."
    ],
    "YEAR": "2012",
    "COUNSEL": "For the appellant: Donald Broatch. For the respondent: In person.",
    "JUDGE": "Thorpe LJ; Etherton LJ; Lewison LJ",
    "CIT": "[2012] EWCA Civ 555",
    "CATEGORIES": [
        "Partnerships Other Related Subjects: Trusts",
        "Conduct",
        "Constructive Trusts",
        "Intention",
        "Partnership Formation",
        "Partnerships at Will"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) As G challenged the judge&#8217;s reasoning, it was necessary to look at some of the evidence that had been before him on the question of partnership. G had worked in the business to a greater extent than R had admitted and had not been paid wages; those facts pointed to a partnership. The remainder of the evidence, however, weighed against a partnership: the business&#8217;s accounts listed R as a sole trader, the accounts showed no evidence of sharing of profits, the net profits from the business went to R, all drawings on the accounts were made by R, G had not been held out as a partner, there had not been a joint bank account, and G always had to ask R when she needed money. Moreover, the business carried on while G and R were separated; had there been a partnership it would have been at will, and it would have been dissolved when G left. Finally, D had told G that the business should remain solely in his name so that G would be shielded from liability in the event of bankruptcy; that was a strong pointer against inferring partnership. There had thus been ample evidence to support the judge&#8217;s conclusion that there was no business partnership. Even if there had been a partnership, it would not follow that the property was partnership property. A partnership in profits did not indicate that the asset itself was partnership property. One partner might solely own property that the partnership used in its business; in the instant case the property had been acquired with R&#8217;s own money before the partnership could have arisen (see paras 11-16 of judgment). (2) As the property was titled solely in R&#8217;s name, G had the burden of establishing a constructive trust. The relevant question was whether there had been a common intention that G would have a beneficial interest in the property, Jones v Kernott [2011] UKSC 53, [2012] 1 A.C. 776 applied. The common intention had to be determined objectively from the parties&#8217; conduct. Although G had presented evidence that the parties had had a common intention to run the business together, it was an impermissible leap to reach a conclusion of a common intention that the property in which the business had been run, which had been bought by only one of them, would now belong to both of them. G therefore had failed to show that the judge had been wrong in concluding that there had not been a constructive trust (paras 18-19, 22-24)."
    ],
    "CATEGORY": "Partnerships Other Related Subjects: Trusts &mdash; Conduct &mdash; Constructive Trusts &mdash; Intention &mdash; Partnership Formation &mdash; Partnerships at Will",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "198",
    "RELATED": [
        "(wl) Stack v Dowden",
        "(wl) Gissing v Gissing",
        "(wl) Jones v Kernott",
        "(wl) Fowler v Baron",
        "(wl) Cf Vallee v Birchwood",
        "(wl) Hapeshi v Allnatt",
        "(wl) Chaudhary v Chaudhary",
        "(wl) Capehorn v Harris",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Bucks CC v Moran",
        "(wl) Grant v Edwards",
        "(wl) Kingsworth v Tizzard"
    ],
    "NAME": "(wl) CPS v Piper",
    "SUMMARY": [
        "The court explained its reasoning for its decision that the wife of a man who was subject to a confiscation order was beneficially entitled to a half share in the matrimonial home registered in his sole name. It ordered a stay of the receivers&#8217; power of sale pending investigation of whether the husband&#8217;s share could be sold to the wife and ordered the Crown Prosecution Service to pay the wife&#8217;s costs in full."
    ],
    "CITATION": "CPS v Piper [2011] EWHC 3570 (Admin)",
    "ABSTRACT": [
        "The applicant wife (W) claimed a half-share beneficial ownership in the matrimonial home that she shared with the respondent (H), her husband, and which was registered in his sole name.",
        "A receivership order had been made over H&#8217;s assets because he had failed to satisfy a confiscation order made against him. The matrimonial home was the only known remaining asset. The court was required to determine (i) whether there had been a common intention for W to have a beneficial interest in the property; (ii) the size of the beneficial interest; (iii) whether the power of sale should be postponed to enable W to buy H&#8217;s interest."
    ],
    "YEAR": "2011",
    "COUNSEL": "For the applicant: M Warwick. For the respondent: In person. For the CPS: J Dennison.",
    "JUDGE": "Holman J",
    "CIT": "[2011] EWHC 3570 (Admin)",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Criminal Procedure",
        "Beneficial Interests",
        "Confiscation Orders",
        "Co-Ownership",
        "Costs Between the Parties",
        "Intention",
        "Receivers' Powers and Duties",
        "Spouses",
        "Sufficiency of Evidence"
    ],
    "HELD": [
        "Judgment for claimant.",
        "(1) The established principles of law emanating from a long stream of authority ending with Jones v Kernott [2011] UKSC 53, [2012] 1 A.C. 776, was that the burden of proof was on W to displace the presumption that equity followed the law and that H held the beneficial interest in the property. Their common intention was to be deduced objectively from their conduct and careful scrutiny of the evidence was required. If W had a beneficial interest, which was not referable to a direct financial contribution and its size could not be ascertained by direct evidence or common intention, the court had to determine the fair size of the interest having regard to the whole course of dealings between H and W in relation to the property (see paras 7-14 of judgment). On the evidence, W was probably telling the truth when she said that she had contributed \u00a330,000 towards the purchase price (para.57). Whether she had a beneficial interest depended on H&#8217;s and W&#8217;s common intention in 1999, immediately before H was arrested; if she had no such interest by that time, they could not subvert the restraint order by subsequently forming a common intention that what was still beneficially his should become beneficially hers. From 1992 the evidence showed that there had been, and still was, a close and trusting relationship between H and W. Although their respective interests in the property had rarely been discussed, everything about their interaction, together with contemporaneous documentation from 1996 and 1997, led to the conclusion that W had an interest which amounted to co-ownership even though neither party had consciously formed such an intention, Jones and Gissing v Gissing [1971] A.C. 886 applied (paras 77-79). (2) W&#8217;s beneficial interest amounted to a half share. Although she had not paid half of the purchase price, there was not the least indication that H or W had intended or understood that W should have a fractional share calculated by reference to their respective contributions. On the evidence, co-ownership had been their common intention and that word, as used by a lay person, denoted shared or equal ownership (paras 80-84). (3) The power of sale was stayed for seven weeks to enable investigation of a possible sale of H&#8217;s share to W. The judge and counsel discussed the receiver&#8217;s potential duties arising from the money laundering provisions (paras 88, 104-154). (4) W was awarded her costs in full under the CPR r.44.3 because she had consistently maintained that she had a half share in the property and had clearly been &#8220;wholly successful&#8221; in her claim. The Crown Prosecution Service had a duty to ensure that confiscation orders were fully and effectively enforced, yet it was fundamental to the interrelation between criminal confiscation proceedings and proceedings of the instant type that decisions made in the criminal courts did not bind, and thereby prejudice, persons who were not party to those criminal proceedings. W&#8217;s costs amounted to \u00a390,000. Despite a great deal of sympathy for the CPS, there was no justification for departing from the general costs rule. Under CPR r.44.3(8) an order for a \u00a325,000 payment on account of costs was made in W&#8217;s favour (paras 327-403)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Criminal Procedure &mdash; Beneficial Interests &mdash; Confiscation Orders &mdash; Co-Ownership &mdash; Costs Between the Parties &mdash; Intention &mdash; Receivers' Powers and Duties &mdash; Spouses &mdash; Sufficiency of Evidence",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "199",
    "RELATED": [
        "(wl) Jones v Kernott",
        "(wl) Hapeshi v Allnatt",
        "(wl) Capehorn v Harris",
        "(wl) Fowler v Baron",
        "(wl) Stack v Dowden",
        "(wl) Gissing v Gissing",
        "(wl) CPS v Piper",
        "(wl) AIB Finance v Debtors",
        "(wl) Wilkinson v Kerdene",
        "(wl) Cf Vallee v Birchwood",
        "(wl) Thompson v Foy",
        "(wl) Pettitt v Pettitt"
    ],
    "NAME": "(wl) Chaudhary v Chaudhary",
    "SUMMARY": [
        "A judge was wrong to hold that a stepmother did not have a beneficial interest in her stepson&#8217;s property where she had provided eight per cent of the purchase price. Her subjective intention was that her contribution would be for her own benefit and not that it would act as a gift to her stepson."
    ],
    "CITATION": "Chaudhary v Chaudhary [2013] EWCA Civ 758",
    "ABSTRACT": [
        "The appellant stepmother (M) appealed against a decision that she did not have a beneficial interest in a property owned by the respondent stepson (S).",
        "S had purchased the property for \u00a365,000 in his sole name; the majority of the purchase price was funded by way of a loan, and the remaining sum, of around \u00a35,000, was provided by his father (F) and M. M continued to live in the property after F&#8217;s death. S claimed possession of the property, and M counterclaimed that S had no right to claim possession because she had the sole beneficial interest in the property. The judge made findings, including that F had asked S to buy the property in order to provide him and M with a stable home, and that F had said that he hoped to purchase the property from S as soon as he was able. The judge held that the \u00a35,000 paid by F and M was akin to a premium or arrangement fee, and that M had no beneficial interest in the property.",
        "M submitted that her and F&#8217;s \u00a35,000 contribution meant that she held a beneficial interest in the property to that extent, namely eight per cent. S argued that the judge was correct to conclude that M had no beneficial interest because the evidence demonstrated that it was his and F&#8217;s common intention that he would take the property as the sole owner in exchange for allowing F and M to use the property as their home."
    ],
    "YEAR": "2013",
    "COUNSEL": "For the appellant: Jonathan Upton. For the respondent: Roman Poplawski.",
    "JUDGE": "Aikens LJ; Sullivan LJ; Underhill LJ",
    "CIT": "[2013] EWCA Civ 758",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Trusts",
        "Beneficial Interests",
        "Intention",
        "Presumption of Advancement",
        "Sale of Land"
    ],
    "HELD": [
        "Appeal allowed.",
        "The instant court had to approach the question of whether M had a beneficial interest on the footing that the judge had seen and heard the relevant witnesses, and on the basis that he had made three important conclusions: (i) that the agreement about the property was between F and S alone, and neither M nor anyone else was involved; (ii) that M was an unreliable witness; (iii) that S&#8217;s evidence was to be preferred. However, it was also clear on the judge&#8217;s findings that neither F nor S had expressed an intention whether the \u00a35,000 was a gift or whether it would entitle F and M to a beneficial interest in the property. In those circumstances, in the absence of evidence of intention, the law applied presumptions, Lavelle v Lavelle [2004] EWCA Civ 223, [2004] 2 F.C.R. 418 applied. There was no basis for the judge&#8217;s conclusion that the \u00a35,000 was akin to a premium or arrangement fee. He had held that F had said that he hoped to purchase the property from S as soon as he could, and in those circumstances it was clear that F and M&#8217;s subjective intention was that the \u00a35,000 would stand to their credit for when they eventually bought the property, and that they had paid that sum for their own benefit and not as a gift to S. On that basis, it was appropriate to make a declaration that M had an eight per cent beneficial interest in the property."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Trusts &mdash; Beneficial Interests &mdash; Intention &mdash; Presumption of Advancement &mdash; Sale of Land",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "200",
    "RELATED": [
        "(wl) Stack v Dowden",
        "(wl) Jones v Kernott",
        "(wl) Fowler v Baron",
        "(wl) Grant v Edwards",
        "(wl) Hapeshi v Allnatt",
        "(wl) Gissing v Gissing",
        "(wl) Curley v Parkes",
        "(wl) HSBC v Dyche",
        "(wl) Kingsworth v Tizzard",
        "(wl) Geary v Rankine",
        "(wl) CPS v Piper",
        "(wl) Chaudhary v Chaudhary"
    ],
    "NAME": "(wl) Capehorn v Harris",
    "SUMMARY": [
        "A judge&#8217;s decision concerning the beneficial ownership of a family home was overturned because she had elided the two-stage analysis necessary to determine whether a common intention constructive trust had arisen between the unmarried cohabitees."
    ],
    "CITATION": "Capehorn v Harris [2015] EWCA Civ 955",
    "ABSTRACT": [
        "The court was required to determine whether the respondent (H) had acquired a beneficial interest in property owned by the appellant (C).",
        "C and H had lived together for 20 years. C took over H&#8217;s frozen food business after he was made bankrupt. Ten years after the beginning of their relationship, C purchased a property (Sunnyside). The property was purchased with an interest-only mortgage in C&#8217;s sole name, and the deposit came from her business earnings. She later purchased another property (Beaumont). H set up his own company. The relationship between the parties began to break down. C asserted that she had agreed to transfer her business to H&#8217;s company in exchange for a weekly payment of \u00a3750. She moved out of Sunnyside, and H continued to live, and run the frozen food business, there. H paid C \u00a3750 per week for several years. He asserted a beneficial interest in Sunnyside. The judge concluded that there was no agreement that H should have a beneficial interest in Sunnyside, but she concluded that by reason of H&#8217;s contribution to the business, he had acquired a beneficial interest of 25 per cent. She also found that H held the issued shares of the company on trust for himself and C with a 65:35 split in his favour."
    ],
    "YEAR": "2015",
    "COUNSEL": "For the appellant: B Sefi. For the respondent: N Burroughs.",
    "JUDGE": "Sir Brian Leveson PQBD; Sharp LJ; Sales LJ",
    "CIT": "[2015] EWCA Civ 955",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Family Law",
        "Beneficial Interests",
        "Cohabitation",
        "Constructive Trusts",
        "Family Home",
        "Intention",
        "Share Ownership",
        "Unmarried Couples"
    ],
    "HELD": [
        "Appeal allowed, cross-appeal dismissed.",
        "(1) In relation to unmarried cohabitees, where an asset was owned in law by one person, but another claimed to share a beneficial interest in it, a two-stage analysis was necessary to determine whether a common intention constructive trust had arisen. First, the person claiming the beneficial interest had to show that there was an agreement that he should have a beneficial interest, even if there was no agreement as to the precise extent of that interest. Second, if such an agreement could be shown to have been made, but there was no agreement on the extent of the interest, the court could impute an intention that the person was to have a fair beneficial share in the asset, Oxley v Hiscock [2004] EWCA Civ 546, [2005] Fam. 211, Stack v Dowden [2005] EWCA Civ 857, [2006] 1 F.L.R. 254 and Jones v Kernott [2011] UKSC 53, [2012] 1 A.C. 776 considered. The court was not entitled to impute an intention to the parties at the first stage in the analysis; an actual agreement had to be found to have been made (see paras 16-17 of judgment). (2) The judge had erroneously elided the two stages. She had imputed an intention to the parties for the first stage of the analysis rather than identifying an actual agreement that H should have any beneficial interest in Sunnyside. No actual agreement to that effect had ever been made between the parties. C was the sole legal and beneficial owner of Sunnyside and Beaumont. H had no valid claim to a beneficial interest in either of those properties (paras 18-23). (3) H was the sole legal and beneficial owner of the shares in the company, and C had no beneficial interest in them. She had sold the business to H&#8217;s company in 2007 in return for a payment by H of \u00a3750 per week. The company was the sole owner of the business, and C had no beneficial interest in the business or the company. The payment of \u00a3750 per week was agreed to last while H was in occupation of Sunnyside or until the interest-only mortgage expired in 2019, whichever was sooner. There was a strong probability that Sunnyside would have to be sold by C in 2019 in order to repay the mortgage, as contemplated by the parties (paras 24, 26, 28)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Family Law &mdash; Beneficial Interests &mdash; Cohabitation &mdash; Constructive Trusts &mdash; Family Home &mdash; Intention &mdash; Share Ownership &mdash; Unmarried Couples",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "201",
    "RELATED": [
        "(wl) Nicholls v Lan",
        "(wl) Horsham Properties v Beech",
        "(wl) Javad v Aqil",
        "(wl) Kingsworth v Tizzard",
        "(wl) Grand Junction Co v Bates",
        "(wl) Norris v Checksfield",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Bishop v Blake",
        "(wl) Hounslow LBC v Powell",
        "(wl) Lyus v Prowsa Developments",
        "(wl) Geary v Rankine",
        "(wl) Clarke v Corless"
    ],
    "NAME": "(wl) Gardner",
    "SUMMARY": [
        "The Benefit Cap (Housing Benefit) Regulations 2012 were not incompatible with ECHR art.14. The fact that they affected a greater number of women than men had an objective and reasonable justification."
    ],
    "CITATION": "Gardner [2015] UKSC 16",
    "ABSTRACT": [
        "The appellant single mothers (S) appealed against a decision that the benefit cap introduced by the Benefit Cap (Housing Benefit) Regulations 2012 was justified for the purposes of ECHR art.14.",
        "The Regulations capped entitlement to welfare benefits. The cap affected households living in high-cost areas of housing with several children. The scheme was justified by economic and social policy, namely to limit the extent to which non-working families were publicly funded, to motivate people to work, and to reduce public expenditure. It affected more women than men, as single parent households were most impacted, and single parents were, generally, women. The issue was whether the Regulations violated art.14 and Protocol 1 art.1 owing to an unjustifiably discriminatory impact on women in relation to their right to the peaceful enjoyment of their possessions. It was not in dispute that the benefits were &#8220;possessions&#8221; and that the Regulations resulted in indirect discrimination between men and women."
    ],
    "YEAR": "2015",
    "COUNSEL": "For the appellants: Ian Wise QC, Caoilfhionn Gallagher, Samuel Jacobs. For the respondent: Clive Sheldon QC, Karen Steyn QC, Simon Pritchard. For the intervener (Child Poverty Action Group): Richard Drabble QC, Tim Buley, Zoe Leventhal. For the intervener (Shelter Children&#8217;s Legal Service): Jonathan Manning, Clare Cullen.",
    "JUDGE": "Lady Hale DPSC; Lord Kerr JSC; Lord Reed JSC; Lord Carnwath JSC; Lord Hughes JSC",
    "CIT": "[2015] UKSC 16",
    "FLAGS": [
        "Approved",
        "Hale"
    ],
    "CATEGORIES": [
        "Social Security Other Related Subjects: Human Rights",
        "Benefit Cap",
        "Best Interests",
        "Children'S Welfare",
        "Indirect Discrimination",
        "Justification",
        "Lone Parents",
        "Peaceful Enjoyment of Possessions",
        "Women"
    ],
    "HELD": [
        "Appeals dismissed.",
        "(Lady Hale and Lord Kerr dissenting, and Lord Carnwath concurring with the result but for different reasons) (1) The Regulations undoubtedly pursued a legitimate aim. The Government concluded in 2010 that expenditure on benefits was unaffordable. All three policy reasons were equally legitimate. S&#8217;s argument that a fairer system would have set the cap using as a benchmark not the average earnings of working households, but their average income including benefits, was problematic for several reasons. One reason was that the Welfare Reform Act 2012 s.96, whose compatibility with the ECHR was not challenged, required the cap to be set by reference to &#8220;earnings&#8221;; the Regulations would be ultra vires if they failed to do so. Other criticisms focused on the cap&#8217;s impact upon the income of the households most affected. The cap was set at \u00a335,000 per annum; the median earnings of working households. Half of all working households earned less than that. Whether non-working households should receive more was a political question, which it was not the court&#8217;s function to determine. Importantly, affected households had received advance notice of their income reduction, and assistance had been made available to help them address the implications. It was highly significant that no credible means had been put forward by which the legitimate aims of the Regulations might have been achieved without impacting more women than men. As women headed most of the households at which the aims were directed, a disparity between the numbers of men and women affected was inevitable. That was because child-related benefits were included within the scope of the cap. But if they were not so included, the cap&#8217;s legitimate aims would not have been achieved (see paras 63-69, 72-73, 76-77 of judgment). S&#8217;s argument that the secretary of state was obliged by the Human Rights Act 1998 s.6 to treat the best interests of the child as a primary consideration in accordance with the United Nations Convention on the Rights of the Child art.3(1) was also problematic. The cap impacted the children of affected households, and the children&#8217;s Convention, although not part of UK law, was relevant to issues involving children&#8217;s rights. However, the instant context was not one in which the adults&#8217; rights were inseparable from the best interests of their children. The consequences of the cap for children depended upon how their parents responded to it. There was no relationship between the fact that the cap affected more women than men on the one hand, and the assumed failure of the legislation to give primacy to the interests of children on the other (paras 78, 81-82, 86-87, 89). Proportionality involved issues of social and economic policy, the determination of which was for democratically-elected institutions. The court had to respect assessments performed by those institutions unless they were manifestly without foundation. The Regulations had been considered and approved by both Houses of Parliament (paras 93-96). (2) (Per Lord Carnwath) Child-related benefits existed to meet children&#8217;s needs. The cap deprived children of their benefits for reasons unrelated to their own needs. The secretary of state had not shown how the Regulations were compatible with the obligation to treat children&#8217;s best interests as a primary consideration. However, the consequences of that were to be dealt with in a political, rather than a legal, arena (paras 124-128, 133). (3) (Per Lady Hale) The duty to treat children&#8217;s best interests as a primary consideration under art.3(1) of the children&#8217;s Convention was binding on the UK as part of its international obligations. The duty was relevant to proportionality and discrimination, whether affecting children or their mothers. The question was whether the benefit cap could be justified independently of its discriminatory effect. That involved asking whether proper account had been taken of children&#8217;s interests. Clearly it had not, because the cap deprived them of the basic necessities of life. The cap could not, therefore, be viewed as a proportionate means of achieving a legitimate aim (paras 215-216, 218-227, 229)."
    ],
    "CATEGORY": "Social Security Other Related Subjects: Human Rights &mdash; Benefit Cap &mdash; Best Interests &mdash; Children'S Welfare &mdash; Indirect Discrimination &mdash; Justification &mdash; Lone Parents &mdash; Peaceful Enjoyment of Possessions &mdash; Women",
    "COURT": "UKSC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "202",
    "RELATED": [
        "(wl) Quennell v Maltby",
        "(wl) Roplaigeach v Barclays Bank",
        "(wl) Ashburn v Arnold",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Four Maids v Dudley Marshall",
        "(wl) Nat West Bank v Amin",
        "(wl) Corbett v Halifax",
        "(wl) Copeland v Greenhalf",
        "(wl) Morrells v Oxford United FC",
        "(wl) Thorner v Majors",
        "(wl) Sava v SS Global Ltd",
        "(wl) State Bank of India v Sood"
    ],
    "NAME": "(wl) The Mortgage Corporation v Shaire and others",
    "SUMMARY": [
        "MC made an application under the Trusts of Land and Appointment of Trustees Act 1996 s.14 in an action for possession of S&#8217;s home as a consequence of mortgage arrears. The court considered that the 1996 Act had altered its powers to order a sale in an action for possession by a chargee and that it now had a duty to consider the interests of any children in occupation before making such an order.",
        "MC made an application under the Trusts of Land and Appointment of Trustees Act 1996 s.14 in an action for possession of S&#8217;s home due to mortgage arrears. The court considered the application of its powers under s.15 with regard to the factors to be taken into consideration before making such an order. The authorities, including Lloyds Bank Plc v Byrne [1993] 1 F.L.R. 369 , decided prior to the coming into effect of the 1996 Act, indicated the primacy of the interests of the party seeking an order for sale, but the 1996 Act raised the issue of whether the court now had to exercise its powers differently in an application for possession by a chargee."
    ],
    "CITATION": "The Mortgage Corporation v Shaire and others [2001] Ch 743",
    "YEAR": "2001",
    "COUNSEL": "For MC: Timothy Harry. For S: Jalil Asif.",
    "JUDGE": "Neuberger J",
    "CIT": "[2001] Ch 743",
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "CATEGORIES": [
        "Real Property",
        "Children",
        "Discretionary Powers",
        "Mortgagees' Powers and Duties",
        "Possession of Land",
        "Trusts of Land"
    ],
    "HELD": [
        "making no order, that (1) Parliament must have intended a change in the law in setting out matters to be taken into consideration in s.15; (2) s.15(1) indicated that the interests of the chargee were only one of four factors to be considered in the court&#8217;s exercise of its powers, suggesting that Byrne was no longer decisive. There was nothing to indicate that the interests of the chargee took priority over the interests of any resident children; (3) there was nothing in the language of the 1996 Act to indicate that it upheld the old concept of the trust for sale, and (4) Byrne supported the reasoning in the Law of Property Act 1925 s.30 that a case involving a bankrupt co-owner should be treated the same as one involving an application for possession by a chargee. It was evident that Parliament now contemplated a different approach, having regard to Law Com No.181, which gave rise to the 1996 Act. The language of the 1996 Act suggested that Parliament had intended the courts to have a wider discretion in favour of families as against chargees. The pre 1997 authorities, whilst still useful, should not be taken to be decisive in all cases."
    ],
    "CATEGORY": "Real Property &mdash; Children &mdash; Discretionary Powers &mdash; Mortgagees' Powers and Duties &mdash; Possession of Land &mdash; Trusts of Land",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "203",
    "RELATED": [
        "(wl) Nicholls v Lan",
        "(wl) Malik v Fassenfelt",
        "(wl) McDonald v McDonald",
        "(wl) State Bank of India v Sood",
        "(wl) Stack v Dowden",
        "(wl) Grant v Edwards",
        "(wl) Hapeshi v Allnatt",
        "(wl) Berrisford v Mexfield Housing Corp",
        "(wl) Gissing v Gissing",
        "(wl) Capehorn v Harris",
        "(wl) Hounslow LBC v Powell",
        "(wl) Lloyds Bank v Rosset"
    ],
    "NAME": "(wl) Barca v Mears",
    "SUMMARY": [
        "A shift in emphasis in the interpretation of the Insolvency Act 1986 s.335A, s.336 and s.337 might be necessary to achieve compatibility with a bankrupt&#8217;s rights under the European Convention on Human Rights 1950 in that those sections ought to be regarded as recognising that, in the general run of cases, the creditors&#8217; interests would outweigh all other interests, but leaving it open to a court to find that, on a proper consideration of the facts of a particular case, it was one of the exceptional cases in which that proposition was not true.",
        "The appellant bankrupt (B) appealed against an order that he give vacant possession of his property, that the property should be sold and the net proceeds of sale held until determination of the beneficial interests in it. B was declared bankrupt and the respondent (T) was appointed trustee in bankruptcy. T applied for a declaration for an absolute beneficial interest in the property and for an order for possession and sale. B asserted that his former partner (C) had a beneficial interest in the property and that their son (S) lived with B in the property most days per week. B alleged that S had special educational needs that were helped by living with B in the property. The deputy registrar was not prepared to proceed with the application as to the beneficial interests in the property but proceeded with the application for possession and sale of the property, notwithstanding C&#8217;s claim. The main issue between the parties was whether the court should make an order for sale pursuant to the Trusts of Land and Appointment of Trustees Act 1996 s.14 and the Insolvency Act 1986 s.335A. The deputy registrar heard argument from both sides as to whether there were exceptional circumstances under s.335A of the 1986 Act and ordered B to give vacant possession of the property. B resisted an order for possession and sale of the property on the basis that (1) such an order would disrupt the education of S and that if B was rendered homeless S&#8217;s progress would be severely curtailed. Therefore the hardship which would be caused to S by an order for possession and sale constituted &#8220;exceptional circumstances&#8221; under s.335A of the 1986 Act; and (2) the order had failed to take into account his or S&#8217;s rights under the Human Rights Act 1998 Sch.1 Part I Art.8."
    ],
    "CITATION": "Barca v Mears [2004] EWHC 2170 (Ch)",
    "YEAR": "2004",
    "COUNSEL": "For the respondent: Andrew Westwood, Michael Gibbons. For the appellant: In person.",
    "JUDGE": "Nicholas Strauss QC",
    "CIT": "[2004] EWHC 2170 (Ch)",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Insolvency Other Related Subjects: Real Property",
        "Human Rights",
        "Bankruptcy",
        "Beneficial Interests",
        "Creditors",
        "Possession Orders",
        "Right to Respect For Private and Family Life",
        "Special Educational Needs"
    ],
    "HELD": [
        "dismissing the appeal, that (1) s.335A of the 1986 Act, which applied if C had an equitable interest in the property, gave statutory effect to the previous case law relating to the interests of a bankrupt&#8217;s creditors, which was reviewed in Citro (Domenico) (A Bankrupt), Re [1991] Ch. 142, in which it was found that in a case in which both the bankrupt and his spouse had a beneficial interest in the matrimonial home, the creditors&#8217; interest in achieving a sale of the property within a short period would usually prevail over the interests of the spouse unless exceptional circumstances were shown. In almost all of the reported decisions the interests of the creditors had prevailed, Holliday (A Bankrupt), Re [1981] Ch. 405 distinguished. The view taken by the deputy registrar could not be faulted on the basis that the law was as stated in Citro . S&#8217;s problems could not be said to be extreme and further, unlike Citro , the instant case was not one in which there would be any question of S having to leave his present school. (2) The state had to have regard to the fair balance that had to be struck between the general interest of the community and the interests of the individual, Cossey v United Kingdom (10843/84) [1991] 2 F.L.R. 492 applied. It was questionable whether the narrow approach as to what might be &#8220;exceptional circumstances&#8221; adopted in Citro was consistent with the European Convention on Human Rights 1950. In particular, it might be incompatible with Convention rights to follow the approach taken by the majority in Citro , in drawing a distinction between what was exceptional, in the sense of being unusual, and what Nourse, L.J. referred to in Citro as the &#8220;usual melancholy consequences&#8221; of a bankruptcy. A shift in emphasis in the interpretation of the statute might be necessary to achieve compatibility with the Convention. Thus it might be that, on a reconsideration of s.335A, or the corresponding wording in s.336 and s.337, those sections were to be regarded as recognising that, in the general run of cases, the creditors&#8217; interests would outweigh all other interests, but leaving it open to a court to find that, on a proper consideration of the facts of a particular case, it was one of the exceptional cases in which that proposition was not true. So interpreted, and without the possibly undue bias in favour of the creditors&#8217; property interests embodied in the pre 1998 case law, those sections would be compatible with the Convention. However, on the facts of the instant case, the decision of the deputy registrar should be upheld as the prejudice to the creditors would be substantial, S&#8217;s educational problems were not severe and it was unclear if B&#8217;s ability to help S would be impaired and if so to what extent."
    ],
    "CATEGORY": "Insolvency Other Related Subjects: Real Property &mdash; Human Rights &mdash; Bankruptcy &mdash; Beneficial Interests &mdash; Creditors &mdash; Possession Orders &mdash; Right to Respect For Private and Family Life &mdash; Special Educational Needs",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "204",
    "RELATED": [
        "(wl) Barca v Mears",
        "(wl) Gissing v Gissing",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) In re Pavlou",
        "(wl) Grant v Edwards",
        "(wl) Abbott v Abbott",
        "(wl) Kinch v Bullard",
        "(wl) Pettitt v Pettitt",
        "(wl) National Provincial Bank v Ainsworth",
        "(wl) Doherty v Birmingham CC",
        "(wl) Malik v Fassenfelt",
        "(wl) CPS v Piper"
    ],
    "NAME": "(wl) Nicholls v Lan",
    "SUMMARY": [
        "A bankrupt&#8217;s wife&#8217;s rights under the Human Rights Act 1998 Sch.1 Part I Art.8 and Sch.1 Part II Art.1 had not been breached where the trustee in bankruptcy had sought an order for the sale of the matrimonial home.",
        "The appellant spouse (N) appealed against part of an order for sale of a property that she owned jointly with the second respondent discharged bankrupt (X), who was her husband. The first respondent (L) had been X&#8217;s trustee in bankruptcy and had applied for an order for sale of the property under the Trusts of Land and Appointment of Trustees Act 1996 s.14. N and X lived apart and N resided in the property. Medical evidence indicated that N had a chronic health condition. N was also the joint owner of another property that was inhabited by her brother who was the other owner. N&#8217;s open offer to L, which provided for orders for possession and sale of the property owned by her and X to be suspended in certain circumstances, and for charges over the other property, was not accepted. At the hearing L argued that the main drawback of the offer was that X&#8217;s creditors would be unlikely to receive anything towards payment of the bankruptcy debt in the near future. The judge decided that he could not make an order reflecting the offer as it would directly affect the other property, which was not the subject of the proceedings. He then held that the circumstances of the case were exceptional within the Insolvency Act 1986 s.335A(3), declared that the property was held beneficially in equal shares by L and N, and ordered that it should be placed on the market for sale not earlier than 18 months from the date of the order. On the application for permission to appeal the judge made it clear that even if he had had jurisdiction to make an order in line with the offer, he would have exercised his discretion not to make it. N argued that the judge had not approached the balancing exercise correctly when considering his discretion to make the order, particularly in relation to the fact that the creditors&#8217; interests had been given too much weight as there was no evidence as to their identity or their debts.",
        "N argued that the judge had not approached the balancing exercise correctly when considering his discretion to make the order, particularly in relation to the fact that the creditors&#8217; interests had been given too much weight as there was no evidence as to their identity or their debts."
    ],
    "CITATION": "Nicholls v Lan [2006] EWHC 1255 (Ch)",
    "YEAR": "2006",
    "COUNSEL": "For the appellant: Max Thorowgood. For the first respondent: Gary Pryce. For the second respondent: No appearance or representation.",
    "JUDGE": "Paul Morgan QC",
    "CIT": "[2006] EWHC 1255 (Ch)",
    "CATEGORIES": [
        "Insolvency Other Related Subjects: Real Property",
        "Human Rights",
        "Bankruptcy",
        "Bankruptcy",
        "Creditors",
        "Matrimonial Home",
        "Matrimonial Home",
        "Peaceful Enjoyment of Possessions",
        "Right to Respect For Home",
        "Sale of Property",
        "Spouses"
    ],
    "HELD": [
        "dismissing the appeal, that (1) the judge&#8217;s conclusion that he could not make an order on the terms of the offer was wrong, as he did have jurisdiction to make such an order. However, the balancing exercise carried out by the judge under s.335A(2) of the 1986 Act had been conducted correctly and the order for sale would not be set aside. (2) The criteria of exceptional circumstances in s.335A(3) did not cause N any difficulty, as she had met it. In the instant circumstances s.335A(3) operated by requiring the court to perform a balancing exercise and to decide what was just and reasonable. Amongst the circumstances that were to be taken into account were the creditors&#8217; interests. The test in s.335A was not inconsistent with the qualified nature of the rights in the Human Rights Act 1998 Sch.1 Part I Art.8 and Sch.1 Part II Art.1, Jackson v Bell [2001] EWCA Civ 387, [2001] B.P.I.R. 612 considered. The whole purpose of s.335A(2)(b) was to identify the need to respect the home, not as an absolute objective to be guaranteed in every case but as a consideration in a balancing exercise. (3) While the 1986 Act provided that creditors&#8217; interests were to be taken into account, in an exceptional case such as the instant it did not prescribe the weight to be given to those interests but did require the court to make an order that was fair and reasonable. Where there was little evidence as to the identity of creditors and their concerns, it was not necessary for a trustee to do very much by way of positive evidence as to those interests. The judge had a statement of indebtedness before him and concluded that in the circumstances of the instant case he could not justify denying the creditors access to the asset while N retained an interest in the other property."
    ],
    "CATEGORY": "Insolvency Other Related Subjects: Real Property &mdash; Human Rights &mdash; Bankruptcy &mdash; Bankruptcy &mdash; Creditors &mdash; Matrimonial Home &mdash; Matrimonial Home &mdash; Peaceful Enjoyment of Possessions &mdash; Right to Respect For Home &mdash; Sale of Property &mdash; Spouses",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "205",
    "RELATED": [
        "(wl) Corbett v Halifax",
        "(wl) Gissing v Gissing",
        "(wl) Harris v Goddard",
        "(wl) National Provincial Bank v Ainsworth",
        "(wl) Nicholls v Lan",
        "(wl) Pettitt v Pettitt",
        "(wl) Williams v Williams",
        "(wl) Morrells v Oxford United FC",
        "(wl) Halifax BS v Thomas",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Wood v Waddington",
        "(wl) Link Lending v Bustard"
    ],
    "NAME": "(wl) Edwards v Royal Bank of Scotland",
    "SUMMARY": [
        "When a court had to consider whether to order the sale of a matrimonial home at the request of a spouse&#8217;s creditor chargee or trustee in bankruptcy, a powerful consideration was whether the creditor was receiving proper recompense for being kept out of his money, repayment of which was overdue. It was also necessary to take into account what would happen to the other spouse if the sale were ordered."
    ],
    "CITATION": "Edwards v Royal Bank of Scotland [2010] EWHC 652 (Ch)",
    "ABSTRACT": [
        "The Part 20 claimant bank (B) sought an order for the possession and sale of the matrimonial home of the Part 20 defendants (E and V).",
        "It had been determined in earlier proceedings that E and V, who were an estranged husband and wife, each had a 50 per cent interest, as equitable tenants in common, in the home as well as in a nightclub which they also owned. V had procured an advance from B on the security of the home by forging E&#8217;s signature on the mortgage deed in favour of B. As E had been entirely unaware of the circumstances, only V&#8217;s equitable interest in the home stood charged to B. Following default on the mortgage repayments, B applied, as equitable chargee, for the possession and sale order pursuant to the Trusts of Land and Appointment of Trustees Act 1996 s.14."
    ],
    "YEAR": "2010",
    "COUNSEL": "For the claimant/second Part 20 defendant: In person. For the second defendant/Part 20 claimant: T Grant.",
    "JUDGE": "William Trower QC",
    "CIT": "[2010] EWHC 652 (Ch)",
    "CATEGORIES": [
        "Real Property",
        "Equitable Charges",
        "Matrimonial Home",
        "Possession Orders",
        "Sale of Land",
        "Spouses",
        "Tenants In Common"
    ],
    "HELD": [
        "Judgment for Part 20 claimant.",
        "When a court had to consider whether to order the sale of a matrimonial home at the request of a spouse&#8217;s creditor chargee or trustee in bankruptcy, a powerful consideration was whether the creditor was receiving proper recompense for being kept out of his money, repayment of which was overdue, Bank of Ireland Home Mortgages Ltd v Bell [2001] 2 All E.R. (Comm) 920 applied. It was also necessary to take into account the general circumstances of the beneficiaries of the trust, which for present purposes meant primarily E. He was 77 years old, in reasonable health, and entitled to an equity of more than \u00a3600,000 from the two properties, which would be more than sufficient to enable him to buy another home. Accordingly, it was appropriate to order possession and sale."
    ],
    "CATEGORY": "Real Property &mdash; Equitable Charges &mdash; Matrimonial Home &mdash; Possession Orders &mdash; Sale of Land &mdash; Spouses &mdash; Tenants In Common",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "206",
    "RELATED": [
        "(wl) Goodman v Gallant",
        "(wl) Rhone v Stephens",
        "(wl) Kinch v Bullard",
        "(wl) State Bank of India v Sood",
        "(wl) Barclay v Barclay",
        "(wl) Tulk v Moxhay",
        "(wl) City of London BS v Flegg",
        "(wl) Curley v Parkes",
        "(wl) City of London BS v Flegg HL",
        "(wl) Cf Vallee v Birchwood",
        "(wl) Grant v Edwards",
        "(wl) Bishop v Blake"
    ],
    "NAME": "(wl) Jones v Challenger",
    "SUMMARY": [
        "Trustee; power to postpone sale",
        "One of two trustees for sale can insist on the execution of the trust for sale if that will not defeat the purpose of the trust and he is a person whose voice should be allowed to prevail. A husband and wife held the lease of the matrimonial home as joint tenants upon trust for sale and upon trust for themselves as tenants in common in equal shares. They were divorced and the wife remarried and the husband lived on in the house. The wife applied under the Law of Property Act 1925 s.30 , for an order for sale of the house."
    ],
    "CITATION": "Jones v Challenger [1961] 1 QB 176",
    "YEAR": "1961",
    "JUDGE": "Donovan J; Ormerod LJ; Devlin LJ",
    "CIT": "[1961] 1 QB 176",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Trusts",
        "Trustees' Powers and Duties",
        "Trusts For Sale"
    ],
    "HELD": [
        "such an order should be made as the house was no longer needed as a matrimonial home and the wife should be allowed to realise her half of the investment. ( Mayo, Re [1943] Ch. 302 applied; Buchanan-Wollaston&#8217;s Conveyance, Re [1939] Ch. 738 distinguished; Stevens v. Hutchinson [1953] C.L.Y. 2804 distinguished; and Bull v Bull [1955] 1 Q.B. 234 distinguished).Per Devlin L.J.: &#8220;The question of sale can be dealt with somewhat differently under the Married Women&#8217;s Property Act 1882 s.17 , the marriage still being alive. If the court thinks it proper to give one party or the other the right to reside in the house after the marriage is over, it is not then necessarily interfering with the equal division of property held in equal shares. If there is other property to be divided, an overall equality may be reached; or if there is not, the necessary adjustment may be made in the settlement of alimony or maintenance&#8221;."
    ],
    "CATEGORY": "Trusts &mdash; Trustees' Powers and Duties &mdash; Trusts For Sale",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "207",
    "RELATED": [
        "(wl) Quigley v Masterson",
        "(wl) Kinch v Bullard",
        "(wl) Davis v Smith",
        "(wl) Goodman v Gallant",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Abbott v Abbott",
        "(wl) Shaw v Applegate",
        "(wl) Burgess v Rawnsley",
        "(wl) Harris v Flower",
        "(wl) Antoniades v Villiers",
        "(wl) First National Securities v Heggerty",
        "(wl) Laskar v Laskar"
    ],
    "NAME": "(wl) Bedson v Bedson",
    "SUMMARY": [
        "Matrimonial home; joint tenancy",
        "1. Per Lord Denning M.R.: Where husband and wife acquire a property for the joint purposes of a matrimonial home and a business, the court in its equitable jurisdiction will refuse to make an order which would defeat those purposes. 2. Per Lord Denning, M.R.: While the husband is in occupation there can be no severance of the joint tenancy and the wife cannot sell her interest separately. H used almost all his life&#8217;s savings to buy freehold property consisting of a draper&#8217;s shop with living accommodation above, for the purpose of providing a home and means of livelihood for himself, W, his wife, and three children. The property was conveyed into the joint names of H and W as joint tenants. The business accounts accepted by H showed the property as half owned by W, who assisted in the shop for a time. However, in September 1963 W left home, taking the children. A year later she applied to the county court under the Married Women&#8217;s Property Act 1882 s.17 for an order that the property be sold and the proceeds divided between herself and H in equal shares. No matrimonial proceedings had been started. The county court judge assessed at GBP 275 W&#8217;s help in building up the business and ordered that on payment of that sum to her by H she should execute all necessary documents to vest the property in him."
    ],
    "CITATION": "Bedson v Bedson [1965] 2 QB 666",
    "YEAR": "1965",
    "JUDGE": "Lord Denning MR; Davies LJ; Russell LJ",
    "CIT": "[1965] 2 QB 666",
    "FLAGS": [
        "Criticised",
        "Denning"
    ],
    "CATEGORIES": [
        "Family Law",
        "Injunctions",
        "Joint Tenancies",
        "Property Rights",
        "Severance"
    ],
    "HELD": [
        "allowing W&#8217;s appeal, (1) that she was entitled to a beneficial interest in the freehold property equal to that of H; (2) that the court would not order a sale of the property at this stage; (3) (Russell L.J. dissenting) that H should pay GBP 1 per week to W in respect of her beneficial interest; and (4) (Russell L.J. dissenting) that during H&#8217;s occupation W should be restrained from assigning, pledging or otherwise dealing with her interest, without leave of the court. (National Provincial Bank Ltd v Ainsworth [1965] A.C. 1175 considered, Jones v Challenger [1961] 1 Q.B. 176 considered; Hine v Hine [1962] 1 W.L.R. 1124 considered and Wilson v Wilson (Matrimonial Home) [1963] 1 W.L.R. 601 considered; Rawlings v Rawlings [1964] P. 398 distinguished)."
    ],
    "CATEGORY": "Family Law &mdash; Injunctions &mdash; Joint Tenancies &mdash; Property Rights &mdash; Severance",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "208",
    "RELATED": [
        "(wl) Pettitt v Pettitt",
        "(wl) Abbott v Abbott",
        "(wl) Gissing v Gissing",
        "(wl) First National Securities v Heggerty",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) National Provincial Bank v Ainsworth",
        "(wl) Halifax BS v Thomas",
        "(wl) Chaudhary v Chaudhary",
        "(wl) Grant v Edwards",
        "(wl) Jones v Kernott",
        "(wl) Cuckmere Brick Co v Mutual Finance",
        "(wl) Nicholls v Lan"
    ],
    "NAME": "(wl) Williams v Williams",
    "SUMMARY": [
        "Matrimonial home; order for sale; Family Division the proper forum",
        "An application about a matrimonial home should not be restricted to the Law of Property Act 1925 s. 30 but should be made to the Family Division under the relevant provisions. In 1970 the parties, who had been married since 1950 and had four children, bought a house for their family home as joint tenants upon a trust for sale. In 1971 W obtained a decree absolute of divorce and continued to live in the matrimonial home with the children, paying the mortgage instalments and rates herself. In 1973 H applied by originating summons in the Chancery Division under s. 30 of the Act for an order for sale. The judge granted the order. W appealed."
    ],
    "CITATION": "Williams v Williams [1976] Ch 278",
    "YEAR": "1976",
    "JUDGE": "Lord Denning MR; Roskill LJ; Geoffrey Lane LJ",
    "CIT": "[1976] Ch 278",
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CATEGORIES": [
        "Family Law",
        "Family Division",
        "Forms",
        "Matrimonial Home",
        "Sale of Land"
    ],
    "HELD": [
        "allowing the appeal, that the primary object in acquiring the house was to provide a home, not an investment, and as it was still being used as a family home the order would be set aside and the case remitted to a judge of the Family Division on W&#8217;s undertaking to issue a cross-summons under the matrimonial property legislation. (Decision of Foster J. reversed; Browne (formerly Pritchard) v Pritchard [1975] 1 W.L.R. 1366 followed and Jackson v Jackson [1971] 1 W.L.R. 1539 followed; Jones v Challenger [1961] 1 Q.B. 176 considered)."
    ],
    "CATEGORY": "Family Law &mdash; Family Division &mdash; Forms &mdash; Matrimonial Home &mdash; Sale of Land",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "209",
    "RELATED": [
        "(wl) Goodman v Gallant",
        "(wl) Jones v Kernott",
        "(wl) City of London BS v Flegg HL",
        "(wl) Jones v Challenger",
        "(wl) In re Pavlou",
        "(wl) State Bank of India v Sood",
        "(wl) City of London BS v Flegg",
        "(wl) Chaudhary v Chaudhary",
        "(wl) Hapeshi v Allnatt",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) IAM Group v Chowdrey",
        "(wl) Curley v Parkes"
    ],
    "NAME": "(wl) Barclay v Barclay",
    "SUMMARY": [
        "Tenancy in common; dwelling-house; beneficiary under will in occupation",
        "A beneficiary under a trust for sale of realty may have an interest in the proceeds of sale only. T by his will left his bungalow to be sold and the proceeds divided in five equal shares among his surviving sons, C, F and A, and his daughters-in-law, W and E. T died in 1954; F took out letters of administration but did nothing further. A, who had lived in the bungalow before T&#8217;s death, stayed on there. In 1964 F died, and his widow, W, who was now entitled to a two- fifths share, took out letters of administration to T&#8217;s estate, thereby acquiring legal title to the bungalow. W brought an action against A for possession, and for damages for use and occupation. A contended that he occupied the premises as tenant in common pursuant to the terms of the will."
    ],
    "CITATION": "Barclay v Barclay [1970] 2 QB 677",
    "YEAR": "1970",
    "JUDGE": "Lord Denning MR; Edmund Davies LJ; Megaw LJ",
    "CIT": "[1970] 2 QB 677",
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Trusts",
        "Beneficiaries",
        "Occupancy",
        "Tenancies In Common",
        "Trusts For Sale"
    ],
    "HELD": [
        "the prime object of the trust was that the bungalow should be sold, and no beneficiary was entitled to possession of it. There was no tenancy in common of the bungalow itself, but at most in the proceeds of sale. This was not a case where a requisite consent could not be obtained within the Law of Property Act 1925 s.30 , but a case where A plainly had no interest at all in the bungalow. ( Bull v Bull [1955] 1 Q.B. 234 distinguished; Jones v Challenger [1961] 1 Q.B. 176 applied)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Trusts &mdash; Beneficiaries &mdash; Occupancy &mdash; Tenancies In Common &mdash; Trusts For Sale",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "210",
    "RELATED": [
        "(wl) Harris v Goddard",
        "(wl) Nicholls v Lan",
        "(wl) First National Securities v Heggerty",
        "(wl) Kingsworth v Tizzard",
        "(wl) Abbott v Abbott",
        "(wl) Barca v Mears",
        "(wl) Grant v Edwards",
        "(wl) Kinch v Bullard",
        "(wl) Pettitt v Pettitt",
        "(wl) Williams v Williams",
        "(wl) Gissing v Gissing",
        "(wl) Barclay v Barclay"
    ],
    "NAME": "(wl) In re Pavlou",
    "SUMMARY": [
        "Matrimonial home; held as tenants in common; joint tenancy severed on husband&#8217;s bankruptcy; interest of each in property; whether wife&#8217;s expenditure on property to be considered",
        "On divorce, and the partition of the matrimonial home, allowance is to be made for any expenditure made by one party, who is a beneficial joint tenant or a tenant in common, which has resulted in an increase to the value of the property. A wife obtained a decree for divorce at the same time as her husband was declared bankrupt. The beneficial joint tenancy in which they had held the matrimonial home was severed on the husband&#8217;s bankruptcy, and the property thereafter held by them as tenants in common. The trustee in bankruptcy sought a declaration as to the interest of each party in the property."
    ],
    "CITATION": "In re Pavlou [1993] 1 WLR 1046",
    "YEAR": "1993",
    "JUDGE": "Millett J",
    "CIT": "[1993] 1 WLR 1046",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Family Law Other Related Subjects: Banking and Finance",
        "Bankruptcy",
        "Divorce",
        "Matrimonial Home",
        "Tenancies In Common"
    ],
    "HELD": [
        "that as the wife had spent considerable sums on the property, effecting repairs and paying the mortgage instalments, she was entitled to have this expenditure taken into account when determining the shares in the property (Leigh v Dickeson (1884) 15 Q.B.D. 60 applied; Dennis v McDonald [1982] Fam. 63, Gorman (A Bankrupt), Re [1990] 1 W.L.R. 616 considered)."
    ],
    "CATEGORY": "Family Law Other Related Subjects: Banking and Finance &mdash; Bankruptcy &mdash; Divorce &mdash; Matrimonial Home &mdash; Tenancies In Common",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "211",
    "RELATED": [
        "(wl) Laskar v Laskar",
        "(wl) Nat West Bank v Amin",
        "(wl) Lloyds Bank v Rosset",
        "(wl) Curley v Parkes",
        "(wl) Kingsworth v Tizzard",
        "(wl) HSBC v Dyche",
        "(wl) City of London BS v Flegg",
        "(wl) Halifax BS v Thomas",
        "(wl) City of London BS v Flegg HL",
        "(wl) Walker v Burton",
        "(wl) Nat West v Ashe",
        "(wl) Gissing v Gissing"
    ],
    "NAME": "(wl) State Bank of India v Sood",
    "SUMMARY": [
        "Equitable interests in land; trusts for sale; whether overreached when land was mortgaged but no capital money was advanced",
        "The first and second defendants were registered proprietors of land on which they executed a second legal charge in favour of S as security for all their present and future liabilities. S, claiming that substantial debts under the legal charge remained unsatisfied, brought possession proceedings in which the third to seventh defendants argued that they had equitable interests in the property as their main residence and that they had overriding interests under the Land Registration Act 1925 s.70(1)(g) . They also contended that, because no capital money had been paid over by S at the time the mortgage was made, their interests were not overreached by the legal charge in terms of the Law of Property Act 1925 s.2(1)(ii) . S argued that there was no requirement that capital money and disposition should arise at the same time. The judge refused to strike out parts of the defence to the claim for possession, and S appealed."
    ],
    "CITATION": "State Bank of India v Sood [1997] Ch 276",
    "YEAR": "1997",
    "COUNSEL": "For the bank: Grant Crawford. For the defendants: Peter Havey and Andrew A Williams.",
    "JUDGE": "Peter Gibson LJ; Hirst LJ; Pill LJ",
    "CIT": "[1997] Ch 276",
    "CATEGORIES": [
        "Real Property",
        "Beneficial Interests",
        "Mortgages",
        "Trusts For Sale"
    ],
    "HELD": [
        "allowing the appeal, that, on the true construction of the Law of Property Act 1925 s.2(1)(ii), compliance with the statutory requirements concerning the payment of capital money was only required if capital money arose. It followed that it was not necessary for capital money to have arisen under the conveyance. Notwithstanding their occupation of the property, the beneficial interests of the third to seventh defendants were overreached."
    ],
    "CATEGORY": "Real Property &mdash; Beneficial Interests &mdash; Mortgages &mdash; Trusts For Sale",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "212",
    "RELATED": [
        "(wl) City of London BS v Flegg",
        "(wl) Scott v Southern Pacific Mortgages",
        "(wl) State Bank of India v Sood",
        "(wl) HSBC v Brown",
        "(wl) Thompson v Foy",
        "(wl) Halifax BS v Thomas",
        "(wl) Kingsworth v Tizzard",
        "(wl) McDonald v McDonald",
        "(wl) Nat West Bank v Amin",
        "(wl) HSBC v Dyche",
        "(wl) Abbott v Abbott",
        "(wl) Fitzkriston v Panayi"
    ],
    "NAME": "(wl) City of London BS v Flegg HL",
    "SUMMARY": [
        "Overriding interest; mortgage by two trustees for sale; beneficiaries in occupation of land; whether overriding interest; whether interest overreached",
        "The interest of a beneficiary under a trust for sale of land in occupation of the land was not an overriding interest and was overreached where capital moneys were advanced to both trustees pursuant to a mortgage entered into by the trustees holding the land on trust for sale. In October 1977, Bleak House was purchased for GBP 34,000. Mr. and Mrs. Flegg provided GBP 18,000 of the purchase price. The remainder was provided by their son-in-law and daughter, Mr. and Mrs. Maxwell-Brown. It was necessary for the M-Bs to mortgage the house to the Hastings and Thanet Building Society to raise their contribution. In consequence, the house was transferred to Mr. and Mrs. M-B upon trust for sale as joint tenants. The house was in fact held by Mr. and Mrs. M-B on trust for sale and to stand possessed of the net proceeds of sale and rents and profits until sale upon trust for Mr. and Mrs. M-B and Mr. and Mrs. F as tenants in common in the proportions which they had contributed to the purchase price. From that time, Mr. and Mrs. M-B and Mr. and Mrs. F occupied the property in common. In January 1982, Mr. and Mrs. M-B executed a charge of the house in favour of the City of London Building Society to secure a loan of GBP 37,500. Mr. and Mrs. M-B used the money to discharge the existing mortgage and a number of other charges. Mr. and Mrs. M-B defaulted and the Building Society sought an order for possession of the house which was granted at first instance. On Mr. and Mrs. F&#8217;s appeal, the Court of Appeal held applying Williams &amp; Glyn&#8217;s Bank Ltd v Boland [1981] A.C. 487 , that Mr. and Mrs. F had an overriding interest in the house so that the Building Society&#8217;s charge was subject to their interest."
    ],
    "CITATION": "City of London BS v Flegg HL [1988] AC 54",
    "YEAR": "1988",
    "JUDGE": "Lord Bridge of Harwich; Lord Templeman; Lord Mackay of Clashfern; Lord Oliver of Aylmerton; Lord Goff of Chieveley",
    "CIT": "[1988] AC 54",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Banking and Finance",
        "Mortgages",
        "Overriding Interests",
        "Scotland",
        "Trusts For Sale"
    ],
    "HELD": [
        "allowing the Building Society&#8217;s appeal, that Mr. and Mrs. F&#8217;s interest was that of a beneficiary under a trust for sale. The advancement of capital moneys by the Building Society to Mr. and Mrs. M-B, being an advancement to two trustees, overreached Mr. and Mrs. F&#8217;s interest. Their interest transferred to the capital moneys in the hands of Mr. and Mrs. M-B and the equity of redemption. The enjoyment of occupation of the property did not give rise to any separate or severable right from those enjoyed under the trust for sale. the Law of Property Act 1925 S.14 could not enlarge or add to Mr. and Mrs. F&#8217;s interest; it could not create an interest in the nature of a right to occupy the property that survived the execution of the trust for sale. Upon the execution of the trust for sale, any rights in reference to the house ceased to subsist within the meaning of the Land Registration Act 1925 s.70(1)(g) ; there was no longer a right for the time being subsisting. Accordingly, there was nothing in s.70(1)(g) that had the effect of preserving any rights of Mr. and Mrs. F to occupy the house against the Building Society&#8217;s. In Williams and Glyn&#8217;s Bank v Boland, the beneficiary&#8217;s rights were not overreached because payment was not made to two trustees as required by s.27 Law of Property Act 1925. The same did not apply in the present case ( Williams &amp; Glyn&#8217;s Bank Ltd v Boland [1981] A.C. 487 distinguished; Bull v Bull [1955] 1 Q.B. 234 , National Provincial Bank Ltd v Ainsworth [1965] A.C. 1175 , Irani Finance Ltd v Singh [1971] Ch. 59 considered)."
    ],
    "CATEGORY": "Banking and Finance &mdash; Mortgages &mdash; Overriding Interests &mdash; Scotland &mdash; Trusts For Sale",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "213",
    "RELATED": [
        "(wl) Link Lending v Bustard",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Halifax v Popeck",
        "(wl) Ashburn v Arnold",
        "(wl) Lloyds Bank v Rosset",
        "(wl) HSBC v Dyche",
        "(wl) Wood v Waddington",
        "(wl) Lloyds Bank v Carrick",
        "(wl) United Bank of Kuwait v Sahib",
        "(wl) Gold Harp v McLeod",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Scott v Southern Pacific Mortgages"
    ],
    "NAME": "(wl) Abbey National BS v Cann",
    "SUMMARY": [
        "Overriding interest; mortgages; equitable interest; whether overriding by virtue of actual occupation; relevant date for determining overriding interests",
        "The relevant date for determining the existence of an overriding interest was the date of registration of the estate rather than the date when the estate was transferred or created. However, a person claiming an overriding interest by virtue of actual occupation had to be in actual occupation at the time of the creation or transfer of the legal estate. In May 1984 D1 applied to P for a loan to be secured by a mortgage of a leasehold house which he proposed to buy, stating that the property, which was registered land, was for his sole occupation. In fact he intended it to be occupied by his mother, D2, and D3, who was to become her husband. P made a formal offer of loan which D1 accepted, contracts were exchanged on July 19, 1984, the completion being fixed for August 13. On August 6, P put a cheque for the loan in the hands of D1&#8217;s solicitors, and prior to August 13, D1 executed a legal charge in favour of P to secure the sum loaned. On August 13, completion of the purchase took place and the charge was executed. D2 and D3 then occupied the property. On September 13, 1984 D1 was registered as sole proprietor and P as proprietors of the charge. D1 then defaulted and P commenced proceedings against him and D2 and D3. D1 took no part in the proceedings and D2 and D3 claimed that because of D2&#8217;s contribution to the purchase price and an assurance by D1 that she would always have a roof over her head, D2 had equitable interest that by virtue of her actual occupation had taken priority over P&#8217;s charge and was binding on P as an overriding interest pursuant to the Land Registration Act 1925 ss.23(1) and 70(1)(g) . The judge made an order for possession and the Court of Appeal dismissed D2 and D3&#8217;s appeal."
    ],
    "CITATION": "Abbey National BS v Cann [1991] 1 AC 56",
    "YEAR": "1991",
    "JUDGE": "Lord Bridge of Harwich; Lord Griffiths; Lord Ackner; Lord Oliver of Aylmerton; Lord Jauncey of Tullichettle",
    "CIT": "[1991] 1 AC 56",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Equitable Interests",
        "Occupation",
        "Overriding Interests",
        "Priorities",
        "Real Property",
        "Registration"
    ],
    "HELD": [
        "dismissing D2 and D3&#8217;s appeals to the House of Lords, that (1) the relevant date for determining the existence of overriding interests was the date of the registration of the estate, not the date when the estate was transferred or created, Lloyds Bank Plc v Rosset [1989] Ch. 350 approved and Boyle&#8217;s Claim, Re [1961] 1 W.L.R. 339 distinguished; (2) however, to substantiate a claim to an overriding interest against a transferee or chargee under s.70(1)(g) as a person in actual occupation of the land, the person claiming the overriding interest had to have been in actual occupation at the time of creation or transfer of the legal estate; (3) where a purchaser relied on a loan to complete his purchase, the transaction of acquiring the legal estate and granting the charge was one indivisible transaction, at least where there had been a prior agreement to grant the charge on the legal estate when acquired. The purchaser at no time acquired the estate free of charge, and so D2 had no overriding interest arising from actual occupation by moving in carpets for some 35 minutes before the time of completion, Connolly Bros Ltd (No.2), Re [1912] 2 Ch. 25 and Coventry Permanent Economic Building Society v Jones [1951] 1 All E.R. 901 approved; Security Trust Co v Royal Bank of Canada [1976] A.C. 503 applied and Church of England Building Society v Piskor [1954] Ch. 553 overruled and (4) the judge was entitled to find that the acts of D2 and D3 on the day of completion were merely preparatory, leading to actual residential occupation only after completion. &#8220;Actual occupation&#8221; involved some degree of permanence or continuity and acts of a preparatory nature, carried out by courtesy of the vendor, could not constitute actual occupation under s.70(1)(g). Moreover, the Court of Appeal was entitled to conclude that D2 had impliedly authorised D1 to obtain the mortgage so as to preclude her from relying on any interest as prevailing over that of P."
    ],
    "CATEGORY": "Real Property &mdash; Equitable Interests &mdash; Occupation &mdash; Overriding Interests &mdash; Priorities &mdash; Real Property &mdash; Registration",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "214",
    "RELATED": [
        "(wl) Scott v Southern Pacific Mortgages",
        "(wl) Palk v Mortgage Services",
        "(wl) Horsham Properties v Beech",
        "(wl) Abbey National BS v Cann",
        "(wl) Link Lending v Bustard",
        "(wl) Halifax BS v Thomas",
        "(wl) Nat West Bank v Amin",
        "(wl) Lloyds Bank v Carrick",
        "(wl) Antoniades v Villiers",
        "(wl) KS Victoria Street v House of Fraser",
        "(wl) Nat West Bank v Morgan",
        "(wl) Ofulue v Bossert"
    ],
    "NAME": "(wl) Cook v Mortgage Business plc",
    "SUMMARY": [
        "Mortgagees were entitled to possession of properties that had been sold in an equity release scheme and leased back to the vendors where the purchaser of the properties had defaulted on the loan agreements. The contracts of sale provided that the properties were sold with full title guarantee and vacant possession, and the vendors had no equitable rights over the properties."
    ],
    "CITATION": "Cook v Mortgage Business plc [2012] EWCA Civ 17",
    "ABSTRACT": [
        "The appellant vendors (X) appealed against decisions ([2010] EWHC 2991 (Ch)) made in nine test cases determining preliminary issues in favour of the respondent lenders (M).",
        "In equity release schemes, X had sold their homes to a purchaser (N). X alleged that N made promises as to their right to occupy the properties after completion. In each case N had applied for a loan from M; the application form disclosed that the property was being purchased on a &#8220;buy-to-let&#8221; basis and that the tenancies granted would be assured shorthold tenancies of six months&#8217; duration. On that basis secured loans were made to N. Exchange and completion occurred on the same day. Thereafter, N purported to grant assured shorthold tenancies to X, the terms varying from two to 10 years. N failed to pay sums due and M issued proceedings for possession. Following the determination of preliminary issues in favour of M, possession orders were granted. The issue for determination was whether a mortgagee&#8217;s right to possession had priority over, or was subject to, any entitlement of the vendor to continue in occupation where the right asserted by the vendor was prohibited by the mortgage."
    ],
    "YEAR": "2012",
    "COUNSEL": "For the appellants: Jonathan Small QC, James Stark, Daniel Robinson. For the respondents: Jonathan Seitler QC, Daniel Gatty. For the interested party: Nicole Sandells.",
    "JUDGE": "Lord Neuberger MR; Rix LJ; Etherton LJ",
    "CIT": "[2012] EWCA Civ 17",
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Banking and Finance",
        "Contract Terms",
        "Equitable Interests",
        "Equity Release Schemes",
        "Leaseback",
        "Mortgages",
        "Possession"
    ],
    "HELD": [
        "Appeals dismissed.",
        "(1) The correct approach was to first analyse the true commercial and legal nature of the transactions between X and N. Objectively appraised, there were two separate transactions; one for the sale of the freehold and one for a leaseback to X upon completion. The contracts for sale provided expressly that the property was sold with full title guarantee and with vacant possession, they made no reference to the grant of a lease to X on completion. The clear impression created by the contracts was that X would be selling without reserving any beneficial interests, or other rights in the properties. That was how M was entitled to view the matter. The contracts disclosed no basis for a qualified report on title to M by their solicitors which would have alerted M to the possibility that X expected to remain in possession after completion, or that N would obtain anything less than the entire legal and beneficial interest in the properties. In those circumstances, no equitable interest, or equivalent equity, could have arisen in X&#8217;s favour prior to completion, Sargaison v Roberts [1969] 1 W.L.R. 951 considered. Even if an equity arose in favour of X immediately upon exchange of contracts, in consequence of N&#8217;s assurances, there was no moment of time when the freehold acquired by N was free from the mortgage but subject to the equity as the contract for sale was exchanged and the transfer and mortgage were executed on the same day, Nationwide Anglia Building Society v Ahmed and Balakrishnan (1995) 70 P. &amp; C.R. 381 and Abbey National Building Society v Cann [1991] 1 A.C. 56 applied. The principle in the case of Cann was directly applicable and it would not be appropriate, as a matter of policy, to place on M the risk of carelessness or fraud in the carrying out of the promises or representations made to X because M could have, and should have, made direct enquiries of X (see paras 34-37, 56 of judgment). (2) Prior to the registration of the transfer the grant of any lease by N took effect only in equity and did not fall within the Land Registration Act 2002 s.29 (para.58). (3) The problems that had arisen for X would have been avoided if the contracts for sale had given details of the entire contractual deal between X and N, and the precise contractual arrangements that were to operate in relation to X&#8217;s occupation after completion would have been clearly stated. Further, M&#8217;s solicitors would have been bound to report those contractual arrangements to M, which would then have been in a position to decide whether or not to make a loan in light of those arrangements. If the arrangements were intended to be binding on any third party as well as N their omission appeared, on the face of it, inconsistent with proper conveyancing practice (para.67)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Banking and Finance &mdash; Contract Terms &mdash; Equitable Interests &mdash; Equity Release Schemes &mdash; Leaseback &mdash; Mortgages &mdash; Possession",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "215",
    "RELATED": [
        "(wl) Link Lending v Bustard",
        "(wl) Clarke v Corless",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Bucks CC v Moran",
        "(wl) State Bank of India v Sood",
        "(wl) Thompson v Foy",
        "(wl) Hapeshi v Allnatt",
        "(wl) Ashburn v Arnold",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Lloyds Bank v Rosset",
        "(wl) Curley v Parkes"
    ],
    "NAME": "(wl) HSBC v Dyche",
    "SUMMARY": [
        "A common intention constructive trust had arisen where a property owner had transferred the property to his daughter against a promise that it would be retransferred to him once the mortgage she had obtained, which was treated as a loan from him to her, had been repaid through his monthly repayments. Having made those repayments, the original owner had a beneficial and overriding interest in the property which took priority over two subsequent mortgages taken out by his daughter, thus defeating a claim for possession by her mortgagee."
    ],
    "CITATION": "HSBC v Dyche [2009] EWHC 2954 (Ch)",
    "ABSTRACT": [
        "The claimant mortgagee (H) sought possession of a property owned by the first defendant bankrupt (D) and occupied by the second defendant (C).",
        "C, who was D&#8217;s father, had occupied the property as his home. Following C&#8217;s bankruptcy, the property was transferred, with the concurrence of C&#8217;s trustee in bankruptcy, to D for \u00a325,000. That purchase price bore no relation to the property&#8217;s actual value, which was far greater, but was set to meet C&#8217;s immediate financial needs and commitments. D had financed the purchase through a mortgage of \u00a317,000 from a bank and a loan from a friend. In due course, D obtained two later mortgages on the property from H. She subsequently became bankrupt also and H was owed in excess of \u00a380,000 under the mortgages. When H sought possession, D and the third party, her trustee in bankruptcy, took no part in the proceedings: they were defended by C.",
        "C contended that he was the beneficial owner of the property and that his beneficial interest was an overriding interest having priority over H&#8217;s two mortgages. He submitted that the property was acquired by D for himself and his wife as, in light of his bankruptcy, D was unable to obtain a mortgage in his own name. C claimed that the property had been transferred to D against a promise by her that it would be retransferred to C once the first mortgage, which was treated as a loan from D to C, and interest were repaid, and the loan and interest were then calculated to be repayable by monthly instalments over ten years, which corresponded to the monthly sums due under the first mortgage. C submitted that, in effect, D had acquired the property and entered into the first mortgage as nominee for himself with the result that the property was held by D on constructive trust for C."
    ],
    "YEAR": "2009",
    "COUNSEL": "For the claimant: Sheelagh Putnam. For the first defendant and third party: No appearance or representation. For the second defendant: Thomas Weeks.",
    "JUDGE": "Judge Purle QC",
    "CIT": "[2009] EWHC 2954 (Ch)",
    "CATEGORIES": [
        "Real Property",
        "Agreements",
        "Beneficial Interests",
        "Constructive Trusts",
        "Mortgagees",
        "Overriding Interests",
        "Possession"
    ],
    "HELD": [
        "Judgment for second defendant.",
        "The agreement alleged by C was made out on the evidence and gave rise to a common intention constructive trust. C had agreed to transfer the property upon faith of a clear agreement or understanding that it would thereafter be held for him. That agreement and understanding had been acted upon by his transferring the property, at a price that bore no relationship to its true value, to D and making repayments to D corresponding broadly to the sums falling due under the first mortgage. The requisite common intention was to be inferred also from the simple fact that C had continued to have sole beneficial use of the property as his home. C&#8217;s beneficial interest overrode the registration of H&#8217;s mortgages, as he was in actual occupation throughout, pursuant to the Land Registration Act 1925 s.70(1)(g), as replaced by the Land Registration Act 2002 Sch.3 para.2. In those circumstances, H&#8217;s claim for possession had to be dismissed, and C was further entitled to a declaration that he was solely beneficially entitled to the property and that his interest overrides the interests of H as mortgagee. He was also entitled to a transfer of the property free from H&#8217;s mortgages."
    ],
    "CATEGORY": "Real Property &mdash; Agreements &mdash; Beneficial Interests &mdash; Constructive Trusts &mdash; Mortgagees &mdash; Overriding Interests &mdash; Possession",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "216",
    "RELATED": [
        "(wl) Pettitt v Pettitt",
        "(wl) Williams v Williams",
        "(wl) In re Pavlou",
        "(wl) Harris v Goddard",
        "(wl) Gissing v Gissing",
        "(wl) Abbott v Abbott",
        "(wl) Kinch v Bullard",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Bedson v Bedson",
        "(wl) Jones v Kernott",
        "(wl) Grant v Edwards",
        "(wl) Nicholls v Lan"
    ],
    "NAME": "(wl) First National Securities v Heggerty",
    "SUMMARY": [
        "Matrimonial home; charging order; joint ownership; husband forging wife&#8217;s signature",
        "Where plaintiffs seeking a charging order have been diligent in pursuing a debtor husband before his wife has petitioned for divorce, and the judge has exercised his discretion in favour of making the order, the Court of Appeal will not interfere. Per Stephenson L.J.: the court should not use its powers under the Matrimonial Causes Act 1973 so as to defeat legitimate creditors of a husband, but may, and often should, defer enforcement of a charging order until after disposing of any application underthe Law of Property Act 1925 s.30. In 1978 H and W bought a house as joint tenants. In 1979 H, pretending that he was acting on behalf of himself and W, obtained a loan from FNS and charged the house as security, forging W&#8217;s signature on both application and charge. In 1980 FNS obtained judgment in default against H, who had left the country, and subsequently obtained ex parte a charging order nisi over H&#8217;s interest in the house. Shortly thereafter W petitioned for divorce and the Master refused to make absolute the charging order. The judge allowed the appeal and refused at the same time to permit a transfer, on W&#8217;s application, to the Family Division."
    ],
    "CITATION": "First National Securities v Heggerty [1985] QB 850",
    "YEAR": "1985",
    "JUDGE": "Stephenson LJ; O&#8217;Connor LJ; Sir Denys Buckley",
    "CIT": "[1985] QB 850",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Family Law",
        "Charging Orders",
        "Debts",
        "Divorce",
        "Matrimonial Home"
    ],
    "HELD": [
        "dismissing W&#8217;s appeal, that the judge had considered all the relevant matters when he had allowed the appeal. FNS had been prompt in pursuing their remedies against H&#8217;s share in the house and had done so before W began her divorce proceedings. There were no grounds for varying the order made by the judge (Roberts Petroleum Ltd v Bernard Kenny Ltd (In Liquidation) [1983] 2 A.C. 192 applied; Harman v Glencross [1985] Fam. 49 considered)."
    ],
    "CATEGORY": "Family Law &mdash; Charging Orders &mdash; Debts &mdash; Divorce &mdash; Matrimonial Home",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "217",
    "RELATED": [
        "(wl) Goodman v Gallant",
        "(wl) Bedson v Bedson",
        "(wl) Rhone v Stephens",
        "(wl) Grant v Edwards",
        "(wl) Harris v Goddard",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Davis v Smith",
        "(wl) Quigley v Masterson",
        "(wl) Gissing v Gissing",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Williams v Williams",
        "(wl) AG Securities v Vaughan"
    ],
    "NAME": "(wl) Kinch v Bullard",
    "SUMMARY": [
        "joint tenancies; severance; validity of service of notice where sender destroyed notice after delivery by post",
        "A husband, H, and wife, W, occupied the matrimonial home as beneficial joint tenants. W, who was suffering from a terminal illness, was considering divorce and, so that the whole legal and beneficial ownership of the property would not vest in H on her death, decided to serve a notice severing the joint tenancy which, under the proviso to the Law of Property Act 1925 s.36(2), would have the effect that the legal title would vest in H on W&#8217;s death but he would hold the beneficial interest on trust in equal shares for himself and on the trusts of W&#8217;s will. The notice was signed by W and sent to H at the matrimonial home by ordinary first class post. H, having been admitted to hospital after being taken ill suddenly, was not at home to receive the notice and W, thinking that H might predecease her and having changed her mind about wanting to sever the tenancy, destroyed it. H died a week later and W several months later. H&#8217;s executors, seeking a declaration that they were entitled to a one half beneficial share of the property or the proceeds of sale, issued proceedings against W&#8217;s executors, contending that the notice of severance was validly served in terms of s.196(3) of the Act and was therefore effective to sever the joint tenancy."
    ],
    "CITATION": "Kinch v Bullard [1999] 1 WLR 423",
    "YEAR": "1999",
    "COUNSEL": "For the plaintiffs: Michael Waterworth. For the defendants: John Waters.",
    "JUDGE": "Neuberger J",
    "CIT": "[1999] 1 WLR 423",
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Equity",
        "Trusts",
        "Joint Tenancies",
        "Matrimonial Home",
        "Notices",
        "Severance"
    ],
    "HELD": [
        "that H&#8217;s executors were entitled to the declaration. The notice had been validly served within s.196(3), having been posted to and delivered at H&#8217;s last known place of abode, even though it had not come to his attention. The fact that W picked up the notice and destroyed it did not invalidate the service. There was nothing in s.36(2) which required a court to inquire into the sender&#8217;s state of mind and it made no difference that, at the time of service, W no longer wished to sever the tenancy. However, W herself would not have been entitled to claim as against H that the notice had been validly served where she had taken steps to deliberately conceal the notice from him."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Equity &mdash; Trusts &mdash; Joint Tenancies &mdash; Matrimonial Home &mdash; Notices &mdash; Severance",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "218",
    "RELATED": [
        "(wl) Davis v Smith",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Bedson v Bedson",
        "(wl) Goodman v Gallant",
        "(wl) Kinch v Bullard",
        "(wl) Laskar v Laskar",
        "(wl) Harris v Goddard",
        "(wl) Portnip Stallion v Albert Stallion",
        "(wl) Wall v Collins",
        "(wl) Roake v Chadha",
        "(wl) IAM Group v Chowdrey",
        "(wl) Halifax v Popeck"
    ],
    "NAME": "(wl) Quigley v Masterson",
    "SUMMARY": [
        "A joint tenant&#8217;s application to the Court of Protection to be joined to proceedings in relation to the affairs of the other joint tenant was capable of qualifying as a notice of severance under the Law of Property Act 1925 s.36(2), as it gave unambiguous notice of the desire to sever the joint tenancy."
    ],
    "CITATION": "Quigley v Masterson [2011] EWHC 2529 (Ch)",
    "ABSTRACT": [
        "The appellant executrix (Q), of the deceased (D), appealed against a decision of the deputy adjudicator that there had been no severance of a joint tenancy held by D and the respondent (M).",
        "D and M had lived together and owned a property as joint tenants. The relationship broke down and M left the property. D instructed solicitors who purported to serve notice to sever the tenancy on M. D&#8217;s health subsequently deteriorated and Q, who was D&#8217;s daughter, applied to the Court of Protection for an order authorising her to apply D&#8217;s money and to sell the property. M applied for permission to be joined in the proceedings stating that she owned 50 per cent of the property and for the property to be valued with the proceeds divided between her and D. It was directed that M should have conduct of the sale of the property and Q be made deputy of D&#8217;s affairs. Before any action to sell the property could be taken D died. A dispute arose as to whether the joint tenancy had been severed. The deputy adjudicator ruled that it had not been severed. The issue for determination was whether M&#8217;s application constituted notice pursuant to the Law of Property Act 1925 s.36(2) and also operated as a severance of the joint tenancy."
    ],
    "YEAR": "2011",
    "COUNSEL": "For the appellant: Robert Sheridan. For the respondent: Andrew Skelly.",
    "JUDGE": "Henderson J",
    "CIT": "[2011] EWHC 2529 (Ch)",
    "CATEGORIES": [
        "Real Property",
        "Joint Tenancies",
        "Notice",
        "Severance"
    ],
    "HELD": [
        "Appeal allowed.",
        "There was no reason why M&#8217;s application to the Court of Protection should not qualify as a notice of severance under s.36(2). Read in the context of the proceedings, it gave unambiguous notice of M&#8217;s desire, at the time, to sever the joint tenancy. M&#8217;s acceptance that D was entitled to a half share in the property would have been reasonably understood by Q, or any other person upon whom the application was served, as a present, unconditional and unambiguous notice to sever, Harris v Goddard [1983] 1 W.L.R. 1203 considered. The application was not served on D in any of the ways permitted under s.196. However, the position changed when the court ordered that Q should be made D&#8217;s deputy for his affairs. It was right to regard Q as having sufficient authority to receive a notice of severance on D&#8217;s behalf from the time she was appointed deputy and since she knew of M&#8217;s application the notice could and should be treated as having been given to her for the purposes of s.36(2) (see paras 33-35 of judgment)"
    ],
    "CATEGORY": "Real Property &mdash; Joint Tenancies &mdash; Notice &mdash; Severance",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "219",
    "RELATED": [
        "(wl) Quigley v Masterson",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Laskar v Laskar",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Walker v Burton",
        "(wl) Goodman v Gallant",
        "(wl) Bedson v Bedson",
        "(wl) Walby v Walby",
        "(wl) Harris v Goddard",
        "(wl) Gold Harp v McLeod",
        "(wl) Kinch v Bullard",
        "(wl) Halifax v Popeck"
    ],
    "NAME": "(wl) Davis v Smith",
    "SUMMARY": [
        "It was clear from the conduct of parties that they had agreed to sever a joint tenancy of a former matrimonial property and that it had been severed in equity."
    ],
    "CITATION": "Davis v Smith [2011] EWCA Civ 1603",
    "ABSTRACT": [
        "The appellant (S) appealed against a decision that a joint tenancy of a former matrimonial property had been severed in equity.",
        "S had been married to the mother (M) of the respondents (D) and they had jointly purchased a property that M had previously occupied as a council tenant. The marriage broke down and S moved out of the property and issued divorce proceedings against M. M and S&#8217;s joint assets consisted of the property, some minimal cash and an endowment policy. It was agreed between M and S that the property should be sold and that the policy would be surrendered. Correspondence between the parties&#8217; solicitors indicated that S would get all the proceeds from the policy and that M would get the &#8220;lion&#8217;s share&#8221; of the sale of the property to make up for S receiving the policy proceeds. An offer was received for the sale of the house; however, the exchange of contracts was delayed. S&#8217;s solicitors wrote to M mentioning the offer and the need to agree division of the proceeds of sale. A couple of days later M executed a will appointing D as executors of her estate. A few days later M died unexpectedly on a day that she had intended to visit her solicitors to serve a notice of severance of the joint tenancy pursuant to the Law of Property Act 1925 s.36(2). Both parties had been advised to serve a notice of severance, but neither had prior to M&#8217;s death. The judge held that the joint tenancy had been severed by mutual agreement between M and S or by the course of dealing between them which led to the same result.",
        "S contended that the judge had erred in finding that the joint tenancy had been severed."
    ],
    "YEAR": "2011",
    "COUNSEL": "For the appellant: April Plant. For the respondent: Charlotte Ford.",
    "JUDGE": "Lord Neuberger MR; Maurice Kay LJ; Sullivan LJ",
    "CIT": "[2011] EWCA Civ 1603",
    "FLAGS": [
        "Neuberger"
    ],
    "CATEGORIES": [
        "Real Property",
        "Joint Tenancies",
        "Rectification",
        "Remedies",
        "Severance"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1)The law pertaining to the severance of joint tenancies was largely to be found in Burgess v Rawnsley [1975] Ch. 429. It was clear that a joint tenancy could survive a proposal and an agreement to put a property on the market and a subject to contract offer; even an eventual sale could be compliant with a joint tenancy continuing to exist, Marshall v Marshall applied. However, in the instant case, it was apparent from the correspondence between M and S that the parties had a common intention that the property be sold and that the proceeds be divided equally, albeit with balancing payments being made to M to reflect the fact that S had received the benefit of the sale of the policy. Cognizance had to be given to the fact that both M and S had been advised by solicitors, that both knew that the other was being advised by solicitors and that they both knew that having been married so long equal division of their assets was inevitable. Further, the only source for the balancing payment to M was from the sale of the property. Moreover, the parties had embarked upon the division of their assets on the basis that their assets would be divided equally. Accordingly, the judge had reached the right conclusion on the severance of the property, Burgess and Marshall applied. (2) Evidence pertaining to what parties wished to do, what they intended to do and what they were advised by their solicitors was irrelevant to the issue at hand. The court should concentrate on what passed between the parties by way of words and actions and what they knew. It should not normally consider what was communicated between a party and their solicitor (paras 22-23)."
    ],
    "CATEGORY": "Real Property &mdash; Joint Tenancies &mdash; Rectification &mdash; Remedies &mdash; Severance",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "220",
    "RELATED": [
        "(wl) Ives v High",
        "(wl) Javad v Aqil",
        "(wl) City of London Corp v Fell",
        "(wl) Fitzkriston v Panayi",
        "(wl) Barrett v Morgan",
        "(wl) Facchini v Bryson",
        "(wl) Baxter v Mannion",
        "(wl) Grand Junction Co v Bates",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Doherty v Birmingham CC",
        "(wl) Yaxley v Gotts",
        "(wl) Norris v Checksfield"
    ],
    "NAME": "(wl) Taylor Fashions v Liverpool Victoria Trustees",
    "SUMMARY": [
        "Option to renew; unregistered; landlord alleging invalidity; whether estoppel",
        "Tenants of two adjoining shops claimed specific performance of options to renew in their leases which the landlord disclaimed for lack of registration under the Land Charges Act 1925. Both tenants had carried out substantial improvements in reliance on the option."
    ],
    "CITATION": "Taylor Fashions v Liverpool Victoria Trustees [1982] QB 133",
    "YEAR": "1982",
    "JUDGE": "Oliver J",
    "CIT": "[1982] QB 133",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Business Tenancies",
        "Estoppel",
        "European Options Exchange",
        "Registration"
    ],
    "HELD": [
        "options are registrable, following Beesly v Hallwood Estates Ltd [1961] Ch. 105 . However, the doctrine of acquiescence or equitable estoppel will bind the landlord if it would be &#8220;dishonest or unconscionable&#8221; for him to argue otherwise: per Buckley L.J. in Shaw v Applegate [1977] 1 W.L.R. 970 . In Taylor&#8217;s case the landlord had arrived on the scene after the work had been done and it was not possible to say that the works would not have been done had the tenant known that the option was void: specific performance refused. In Old&#8217;s case the landlord had encouraged the tenant to carry out works, to take another lease of adjoining premises and had fixed the value of the freehold with the burden of the option: specific performance granted. Per curiam, it is not an essential element of this category of estoppel that the party estopped, although he must have known of the other party&#8217;s belief, must have known that that belief was mistaken."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Business Tenancies &mdash; Estoppel &mdash; European Options Exchange &mdash; Registration",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "221",
    "RELATED": [
        "(wl) Thorner v Majors",
        "(wl) Portnip Stallion v Albert Stallion",
        "(wl) Henry v Henry",
        "(wl) Halifax v Popeck",
        "(wl) Ghazaani v Rowshan",
        "(wl) Lyus v Prowsa Developments",
        "(wl) Thompson v Foy",
        "(wl) Cherry Tree Investments v Landmain",
        "(wl) Hapeshi v Allnatt",
        "(wl) Multiservice Bookbinding v Mardon",
        "(wl) Wall v Collins",
        "(wl) Shaw v Applegate"
    ],
    "NAME": "(wl) Gillett v Holt",
    "SUMMARY": [
        "G, a farm manager, appealed against the dismissal of his claim for equitable relief following promises of inheritance made to him by H, a wealthy landowner who had acted as his employer and benefactor for over 40 years. The court held that on the facts of the case, the repeated assurances made by H were capable of constituting an enforceable claim for proprietary estoppel, and that G had acted to his detriment in reliance on those assurances.",
        "G, who was then aged 12, met H, a wealthy landowner, in 1952 and a close friendship developed between the two. At the age of 15, G left school and began to work for H on a full time basis. Although it was initially intended that G should attend agricultural college, this idea was later abandoned as H persuaded G that he could learn more if he continued to work for him. G met S whom he subsequently married. Prior to the marriage, G and S were taken out for a meal by H during which H stated that G would eventually take over the running of the farm and that on his death, the entire business would be left to G. At the christening of G&#8217;s first child, H stated that the child&#8217;s birth would enable the farm to continue through to the next generation. Further assurances were made over subsequent years. In 1992, H met W. A relationship developed between them, and by 1994 W had taken the place of G as the principal beneficiary of H&#8217;s will. H initiated a police investigation into G&#8217;s management of the accounts relating to the farm business and other associated businesses which G was by then involved with. As a result of the investigation, G and S were the subject of disciplinary proceedings and thereafter summarily dismissed. G issued proceedings against H and W seeking equitable relief on the basis of proprietary estoppel. The judge held ([1998] 3 All E.R. 917) that whilst G&#8217;s evidence in relation to the assurances made by H was true, there had nevertheless been no assurance from H capable of amounting to an irrevocable promise that G would inherit his estate despite subsequent changes in circumstances, and the claim therefore failed. The court also held that there was insufficient evidence of detriment. G appealed."
    ],
    "CITATION": "Gillett v Holt [2001] Ch 210",
    "YEAR": "2001",
    "COUNSEL": "For G: John McDonnell Q.C. and James Aldridge. For H: John Martin Q.C. and Keith Rowley.",
    "JUDGE": "Beldam LJ; Waller LJ; Robert Walker LJ",
    "CIT": "[2001] Ch 210",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Equity",
        "Breach",
        "Equitable Principles",
        "Equitable Remedies",
        "Promises",
        "Proprietary Estoppel",
        "Reliance"
    ],
    "HELD": [
        "allowing the appeal, that (1) the fact that a testamentary disposition was always capable of revocation could not defeat a promise of the kind made by H, whereby he had effectively assured G that &#8220;all this will be yours&#8221;, Taylor v Dickens [1998] 1 F.L.R. 806 considered. On the facts, it was intended that G should rely on the assurances given and they were clearly relied on. Reliance would in any event be presumed, Greasley v Cooke [1980] 1 W.L.R. 1306 referred to. The judge had misdirected himself with regard to the necessary elements of proprietary estoppel. In particular he had exaggerated the extent to which a promise had to be expressly irrevocable in order to give rise to an estoppel, and had further erred in suggesting that there had been a need to find a definite agreement as per the doctrine of mutual wills, and (2) G&#8217;s case on detriment was compelling. He had left school in the face of opposition from his headmaster and concern from his parents to work for a much older man who had influenced both his social and his working life. In effect, for a period exceeding 30 years, G and his family had acted as a surrogate family to H. In many ways G had been denied the opportunity of bettering himself in reliance on H&#8217;s oft repeated assurances, and in those circumstances detriment had clearly been established."
    ],
    "CATEGORY": "Equity &mdash; Breach &mdash; Equitable Principles &mdash; Equitable Remedies &mdash; Promises &mdash; Proprietary Estoppel &mdash; Reliance",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "222",
    "RELATED": [
        "(wl) Portnip Stallion v Albert Stallion",
        "(wl) Henry v Henry",
        "(wl) Whittaker v Kinnear",
        "(wl) Halifax v Popeck",
        "(wl) Gillett v Holt",
        "(wl) Wilkinson v Kerdene",
        "(wl) Phipps v Pears",
        "(wl) Link Lending v Bustard",
        "(wl) Roplaigeach v Barclays Bank",
        "(wl) HSBC v Dyche",
        "(wl) IDC v Clark",
        "(wl) St Marleybone Property Co v Fairweather"
    ],
    "NAME": "(wl) Thorner v Majors",
    "SUMMARY": [
        "The Court of Appeal had been wrong to reverse a trial judge&#8217;s decision that a sufficient assurance had been made by a landowner to his nephew to support the operation of proprietary estoppel so as to enable the nephew to inherit his uncle&#8217;s land. The judge&#8217;s findings of fact had not been open to challenge in the Court of Appeal and there had been insufficient reason for that court to reverse them. The court considered the operation of proprietary estoppel generally and the necessary character or qualities that an assurance must have in order to be relied upon as proprietary estoppel."
    ],
    "CITATION": "Thorner v Majors [2009] UKHL 18",
    "ABSTRACT": [
        "The appellant (D) appealed against a decision ([2008] EWCA Civ 732) that proprietary estoppel could not operate in his favour so as to entitle him to inherit the estate of his deceased uncle (P).",
        "At the time of his death in 2005, P had owned a farm of substantial value and also had considerable savings. He had made a will in 1997 leaving the residue of his estate, including his farm, to D but had subsequently destroyed the will and died intestate. D had worked at P&#8217;s farm for no remuneration from 1976 onwards, and by the 1980s, he had come to hope that he might inherit the farm. No express representation had ever been made, but D relied on various hints and remarks made by P over the years, which he claimed had led him to believe that he was to inherit the farm. In 1990, P had handed D a bonus notice relating to two policies on P&#8217;s life, saying &#8220;that&#8217;s for my death duties&#8221;. It was D&#8217;s case that at that point his hope had become an expectation. The judge at first instance had found that D had the benefit of proprietary estoppel because he had reasonably understood P&#8217;s words and acts as an assurance that he would inherit the farm and that P had intended them to be understood in that way. The Court of Appeal had reversed that decision, finding that there had been no clear and unequivocal intention on the part of P and that there was no basis to construe P&#8217;s statements as a definite assurance rather than a statement of present intention. The issues for the instant court were (i) the character or quality of the representation or assurance made to D; (ii) whether, if the other elements for proprietary estoppel were established, D must fail if the land to which the assurance related was inadequately identified or had undergone a change during the period between the giving of the assurance and its eventual repudiation.",
        "D submitted that the Court of Appeal had been wrong to apply the &#8220;clear and unequivocal&#8221; test because it was not relevant to proprietary estoppel."
    ],
    "YEAR": "2009",
    "COUNSEL": "For the appellant: John McDonnell QC, Michael Jefferis. For the respondents: Andrew Simmonds QC, Penelope Reed.",
    "JUDGE": "Lord Hoffmann; Lord Scott of Foscote; Lord Rodger of Earlsferry; Lord Walker of Gestingthorpe; Lord Neuberger",
    "CIT": "[2009] UKHL 18",
    "FLAGS": [
        "Approved",
        "Neuberger",
        "Hoffmann"
    ],
    "CATEGORIES": [
        "Succession Other Related Subjects: Equity",
        "Real Property",
        "Assurances",
        "Detriment",
        "Estates",
        "Implied Promises",
        "Intestacy",
        "Proprietary Estoppel",
        "Reliance",
        "Unconscionability"
    ],
    "HELD": [
        "Appeal allowed.",
        "(1) To establish a proprietary estoppel, the relevant assurance had to be clear enough. What amounted to sufficient clarity depended on context, Walton v Walton (Unreported) April 14, 1994applied. There was some authority for the view that the &#8220;clear and unequivocal&#8221; test did not apply to proprietary estoppel, especially in Treitel, Law of Contract (12th edn. 2007) and at least the two earlier editions, and in Jones v Watkins (Unreported) November 26, 1987, Jones applied. There was a degree of unreality in making a distinction between the meaning of written words and the meaning of spoken words because in cases of the instant type, a judge&#8217;s conclusion as to the meaning of spoken words would be inextricably entangled with his factual findings about the surrounding circumstances. In the instant case, the Court of Appeal had concentrated too much on the significance of the 1990 incident regarding the bonus notices and had not given sufficient weight to the advantage that the trial judge had had in seeing and hearing the witnesses. The 1990 incident had marked the transition from hope to expectation, but it had not stood alone, and the evidence had demonstrated a continuing pattern of conduct by P for the remaining 15 years of his life. It was not helpful to try to break that pattern down into discrete elements. There had been insufficient reason for the Court of Appeal to reverse the trial judge&#8217;s careful findings and conclusion. (2) Proprietary estoppel had to relate to identified property (usually land) owned or about to be owned by the defendant. The trial judge had made a clear finding of an assurance by P that D would become entitled to the farm. Both P and D knew that the extent of the farm was liable to fluctuate as development opportunities arose and tenancies came and went. There was no reason to doubt that their common understanding had been that P&#8217;s assurance related to whatever the farm consisted of at P&#8217;s death, Walton applied and Layton v Martin [1986] 2 F.L.R. 227 and Basham (Deceased), Re [1986] 1 W.L.R. 1498 considered. There was no ground on which to challenge the trial judge&#8217;s discretion in determining the remedy and his order was to be restored, Gillett v Holt [2001] Ch. 210, Crabb v Arun DC [1976] Ch. 179 and Cobbe v Yeoman&#8217;s Row Management Ltd [2008] UKHL 55, [2008] 1 W.L.R. 1752 considered."
    ],
    "CATEGORY": "Succession Other Related Subjects: Equity &mdash; Real Property &mdash; Assurances &mdash; Detriment &mdash; Estates &mdash; Implied Promises &mdash; Intestacy &mdash; Proprietary Estoppel &mdash; Reliance &mdash; Unconscionability",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "223",
    "RELATED": [
        "(wl) HSBC v Dyche",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Lloyds Bank v Carrick",
        "(wl) Herbert v Doyle",
        "(wl) Walker v Burton",
        "(wl) United Bank of Kuwait v Sahib",
        "(wl) Colchester BC v Smith",
        "(wl) Quigley v Masterson",
        "(wl) Four Maids v Dudley Marshall",
        "(wl) Stafford v Lee",
        "(wl) Mulvaney v Gough",
        "(wl) Central Midlands Estates v Leicester Dyers"
    ],
    "NAME": "(wl) Clarke v Corless",
    "SUMMARY": [
        "Certain land serving a gated estate, which was purchased by one of the three homeowners on the estate, was not held on constructive trust for the owners of all three houses where no reliance had been placed on an informal agreement between the parties that the land would be purchased by them jointly."
    ],
    "CITATION": "Clarke v Corless [2009] EWHC 1636 (Ch)",
    "ABSTRACT": [
        "The claimant homeowners (B) of one of three houses in a gated estate claimed that an estate road and adjoining land serving the estate that was purchased by the defendant homeowners (C) was held by C on constructive trust for the owners of the three houses.",
        "The estate had been owned by a property development company (E) who had previously installed automatic electric gates and a sewage treatment plant, which it was required to maintain. E had sold two of the three houses to C and B, but retained ownership of the estate road and adjoining land. The third house was occupied by tenants (G). The treatment plant kept breaking down causing the escape of sewage and noxious smells. At a meeting between B, C and G, it was agreed that they would get E to fix the broken treatment plant and that they would remove E from the ownership of the amenity land. G then purchased their house from E. C informed E of the need to fix the treatment plant and, subsequently, that it should transfer ownership of the amenity land to a formal management company that the residents intended to form. E rejected the proposal to transfer the land. C suggested to B that they should wait until the issues with the treatment plant were sorted before they addressed the situation about the transfer of the amenity land. After the problems with the treatment plant were resolved, C personally offered to buy the amenity land from E. The sale was completed and C informed the other residents but did not keep B informed of their negotiations with E. They stated that the principal reason for proceeding alone was because B were showing a lack of interest over the amenity land issue and that B were intending to move away from the estate. B claimed that there was a continuing agreement that there would be negotiation with E for the purchase of the amenity land on behalf of all the residents once the treatment plant problems had been resolved, but that C had gone behind their back and acquired the property for themselves. B issued their proprietary claim based on constructive trust.",
        "B claimed that there was a continuing agreement that there would be negotiation with E for the purchase of the amenity land on behalf of all the residents once the treatment plant problems had been resolved, but that C had gone behind their back and acquired the property for themselves. C submitted that there was no settled or lasting consensus in the first meeting giving rise to legal consequences about the manner in which E should be removed from the estate or how the amenity land was to be owned and managed. They also contended that whatever the consensus at that meeting, it did not affect the consciences of any of the parties and that none of them relied upon it."
    ],
    "YEAR": "2009",
    "COUNSEL": "For the claimants: Paul Stafford. For the defendants: Timothy Morshead.",
    "JUDGE": "Proudman J",
    "CIT": "[2009] EWHC 1636 (Ch)",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Trusts Other Related Subjects: Real Property",
        "Agreements",
        "Constructive Trusts",
        "Ownership",
        "Real Property"
    ],
    "HELD": [
        "Judgment for defendants.",
        "(1) For an agreement between parties to give rise to a proprietary claim to a constructive trust, there had to be an express accord between them on the basic details of the arrangement without difference of principle. The claimants had to show that they had relied on the alleged agreement, arrangement or understanding. Typically that would be by staying out of the market themselves, or by committing expenditure that they would not otherwise had committed, but on any view their activity or inactivity had to be referable to the consensus on which they relied, Cobbe v Yeoman&#8217;s Row Management Ltd [2008] UKHL 55, [2008] 1 W.L.R. 1752 and Thorner v Major [2009] UKHL 18, [2009] 1 W.L.R. 776 applied. (2) The consensus reached in the first meeting between the residents did not bind C&#8217;s conscience in the acquisition of the amenity land as it was of the nature of an informal agreement between neighbours as to how to proceed concerning E&#8217;s removal, rather than an agreement intended to give rise to legal consequences between themselves. It could not be said that the consensus of that meeting continued to bind B&#8217;s conscience when C purchased the amenity land. E had rejected the residents&#8217; proposal to transfer the amenity land to their incorporated management company, which could suggest that any earlier agreement between the residents had come to an end. B also remained inactive concerning the amenity land, and did nothing to indicate that they were relying on an agreement from the first meeting. C had gained the impression that B intended to move away from the estate in the short term, and it was common ground that B had put their house on the market. Accordingly, it was clear that B had placed no reliance on any earlier agreement and they had not, therefore, made out their claim to a constructive trust of the amenity land."
    ],
    "CATEGORY": "Trusts Other Related Subjects: Real Property &mdash; Agreements &mdash; Constructive Trusts &mdash; Ownership &mdash; Real Property",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "224",
    "RELATED": [
        "(wl) Burgess v Rawnsley",
        "(wl) Gillett v Holt",
        "(wl) Wall v Collins",
        "(wl) Chaudhary v Chaudhary",
        "(wl) Kinch v Bullard",
        "(wl) Firstpost Homes v Johnson",
        "(wl) City of London BS v Flegg HL",
        "(wl) Reeves v Sandhu",
        "(wl) Birdlip v Hunter",
        "(wl) Kingsworth v Tizzard",
        "(wl) Nickerson v Barraclough",
        "(wl) Abbott v Abbott"
    ],
    "NAME": "(wl) AG of Hong Kong v Humphreys Estates",
    "SUMMARY": [
        "Conduct; agreement &#8220;subject to contract&#8221;",
        "An estoppel will not arise unless a party&#8217;s actions are unfair, unjust or unconscionable so that where the evidence showed that one party expressly retained a right to resile from an agreement an estoppel will not arise. An agreement in principle, &#8220;subject to contract&#8221; was reached between HK and HE to the effect that in exchange for acquiring 83 flats from HE, HK would grant a Crown lease of certain land, and a permission to develop. HK moved some civil servants into the flats, spending some money on them, and HE did some work on the land, the subject of the intended lease. HE withdrew from the agreement."
    ],
    "CITATION": "AG of Hong Kong v Humphreys Estates [1987] AC 114",
    "YEAR": "1987",
    "JUDGE": "Lord Keith of Kinkel; Lord Templeman; Lord Oliver of Aylmerton; Lord Goff of Chieveley; Sir Ivor Richardson",
    "CIT": "[1987] AC 114",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Equity Other Related Subjects: Contracts",
        "Contractual Liability",
        "Equitable Remedies",
        "Hong Kong",
        "Repudiation"
    ],
    "HELD": [
        "on appeal, that HE were entitled to withdraw. On the evidence it was not shown by HK that HE had encouraged an expectation that it would not withdraw from the agreement. Notwithstanding that HK had acted to its detriment it had not been shown to be unjust, unconscionable, or unfair to allow HE to withdraw. Thus HE were entitled to withdraw from the agreement ( Salvation Army Trustee Co Ltd v West Yorkshire CC (1981) 41 P. &amp; C.R. 179 distinguished)."
    ],
    "CATEGORY": "Equity Other Related Subjects: Contracts &mdash; Contractual Liability &mdash; Equitable Remedies &mdash; Hong Kong &mdash; Repudiation",
    "COURT": "UKPC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "225",
    "RELATED": [
        "(wl) Lloyds Bank v Carrick",
        "(wl) Crago v Julian",
        "(wl) KS Victoria Street v House of Fraser",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Escalus Properties v Robinson",
        "(wl) Reeves v Sandhu",
        "(wl) Wright v Macadam",
        "(wl) Goldberg v Edwards",
        "(wl) Regent Oil v Gregory",
        "(wl) Ives v High",
        "(wl) IDC v Clark"
    ],
    "NAME": "(wl) Yaxley v Gotts",
    "SUMMARY": [
        "estoppel; proprietary estoppel allowed on basis that constructive trust not affected by failure to comply with Law of Property (Miscellaneous Provisions) Act 1989 s.2",
        "Y alleged an oral agreement with G that Y would renovate a property for G to purchase and act as managing agent in return for Y&#8217;s ownership of the ground floor. However, unknown to Y, G arranged for his son to buy the property. Y performed the renovation and acted as managing agent, but there was a subsequent dispute between Y and G, in which G denied any agreement to transfer the ground floor to Y. Y succeeded below in establishing an equitable interest and G and his son were ordered to provide Y with a 99-year lease or the equivalent sum within four months. G appealed, contending that the oral contract was void for failure to comply with the formalities of the Law of Property (Miscellaneous Provisions) Act 1989 s.2 and the remedy of proprietary estoppel was therefore inappropriate."
    ],
    "CITATION": "Yaxley v Gotts [2000] Ch 162",
    "YEAR": "2000",
    "COUNSEL": "For G: George Laurence Q.C. and Louise Davies. For Y: Anthony Allstone.",
    "JUDGE": "Beldam LJ; Robert Walker LJ; Clarke LJ",
    "CIT": "[2000] Ch 162",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Contracts",
        "Estoppel",
        "Formalities",
        "Leases",
        "Oral Contracts"
    ],
    "HELD": [
        "dismissing the appeal, that although the existence of a constructive trust had not been confirmed by the judge below, he had found an undisputed proprietary estoppel, which was a similar remedy and which provided sufficient basis for the existence of a constructive trust. It was clear that s.2(5)(c) expressly provided that the existence or operation of a constructive trust would not be affected by the application of that section."
    ],
    "CATEGORY": "Contracts &mdash; Estoppel &mdash; Formalities &mdash; Leases &mdash; Oral Contracts",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "226",
    "RELATED": [
        "(wl) Ghazaani v Rowshan",
        "(wl) Lloyds Bank v Carrick",
        "(wl) Walby v Walby",
        "(wl) HSBC v Dyche",
        "(wl) Link Lending v Bustard",
        "(wl) Whittaker v Kinnear",
        "(wl) Halifax v Popeck",
        "(wl) Clarke v Corless",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Laskar v Laskar",
        "(wl) Halsall v Brizall",
        "(wl) Colchester BC v Smith"
    ],
    "NAME": "(wl) Herbert v Doyle",
    "SUMMARY": [
        "If, following an oral agreement, the parties still intended to make a formal agreement setting out the terms on which one or more of the parties was to acquire an interest in property, or if further terms for that acquisition remained to be agreed between them so that the interest in property was not clearly identified, or if the parties did not expect their agreement to be immediately binding, neither party could rely on constructive trust as a means of enforcing their original agreement."
    ],
    "CITATION": "Herbert v Doyle [2010] EWCA Civ 1095",
    "ABSTRACT": [
        "The applicant (H) sought permission to appeal against a High Court judgment that an agreement he had made with the respondents (D) concerning land had given rise to a constructive trust in their favour.",
        "H and D owned the freeholds of adjacent properties. D leased part of H&#8217;s property. H wanted to build on his property, but to do so needed to exchange some of D&#8217;s parking spaces for others on his property. The parties made an oral agreement containing nine conditions and H proceeded with the development. A dispute arose over the parking spaces and H brought proceedings to require D to complete the exchange. The judge found that the agreement had not simply been for an exchange. Instead, he held that if H was willing and able to satisfy the other terms which had been agreed, it would be unconscionable for D to resile from their agreement by refusing to transfer the spaces to him; but if H was not willing and able to satisfy those terms, then it would not be unconscionable for D to retain those spaces unless and until those other terms were satisfied. However, H decided not to exercise that right to obtain a transfer of the spaces by complying with all the other terms of the agreement. D then counterclaimed that if they transferred the spaces and paid the sum in the agreement for H to create an extension to the part of his property that they leased, then he was bound to transfer to them his parking spaces and to grant a lease to them of that extension and another building. The judge found that although there was no written contract for the purposes of the Law of Property (Miscellaneous Provisions) Act 1989 s.2(1), there was, for the purposes of s.2(5), a constructive trust relating to the spaces, the extension and the other building in favour of D as they had relied on the oral agreement to their detriment by allowing H&#8217;s development to encroach on to their parking spaces.",
        "H submitted, among other things, that the judge&#8217;s decision was not compliant with Cobbe v Yeoman&#8217;s Row Management Ltd [2008] UKHL 55, [2008] 1 W.L.R. 1752 because the agreement had not been sufficiently certain and there were matters outstanding to be agreed."
    ],
    "YEAR": "2010",
    "COUNSEL": "For the appellant: Timothy Becker. For the respondents: Amanda Tipples.",
    "JUDGE": "Arden LJ; Jackson LJ; Morgan J",
    "CIT": "[2010] EWCA Civ 1095",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Certainty",
        "Constructive Trusts",
        "Oral Contracts",
        "Transfer of Land"
    ],
    "HELD": [
        "Application granted in part, appeal dismissed.",
        "If, following an oral agreement, the parties still intended to make a formal agreement setting out the terms on which one or more of the parties was to acquire an interest in property, or if further terms for that acquisition remained to be agreed between them so that the interest in property was not clearly identified, or if the parties did not expect their agreement to be immediately binding, neither party could rely on constructive trust as a means of enforcing their original agreement. In those situations, if their agreement, which did not comply with s.2(1), was incomplete, they could not utilise the doctrine of proprietary estoppel or the doctrine of constructive trust to make their agreement binding on the other party by virtue of s.2(5), Cobbe applied (see para.57 of judgment). There was no doubt, on the findings made by the judge, that D had relied to their detriment on H&#8217;s assurance since the effect of their acceptance of his assurance was that he had proceeded to build with an allocated parking space encroaching partly on to one of their parking spaces. Likewise, on the judge&#8217;s findings the agreement was not subject to contract (para.67). There was no doubt as to the identification of the extent of D&#8217;s interest in the extension or the other building and there was sufficient clarity about the rest of the agreement (paras 68-77). There had been no evidence before the judge showing that the parties knew that their agreement was incomplete (para.80)."
    ],
    "CATEGORY": "Real Property &mdash; Certainty &mdash; Constructive Trusts &mdash; Oral Contracts &mdash; Transfer of Land",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "227",
    "RELATED": [
        "(wl) Ghazaani v Rowshan",
        "(wl) Hapeshi v Allnatt",
        "(wl) Herbert v Doyle",
        "(wl) Thorner v Majors",
        "(wl) Halifax v Popeck",
        "(wl) Henry v Henry",
        "(wl) Thompson v Foy",
        "(wl) Walby v Walby",
        "(wl) Jones v Kernott",
        "(wl) Kinch v Bullard",
        "(wl) Clarke v Corless",
        "(wl) Link Lending v Bustard"
    ],
    "NAME": "(wl) Whittaker v Kinnear",
    "SUMMARY": [
        "The doctrine of proprietary estoppel in cases involving the sale of land had survived the enactment of the Law of Property (Miscellaneous Provisions) Act 1989, s.2."
    ],
    "CITATION": "Whittaker v Kinnear [2011] EWHC 1479 (QB)",
    "ABSTRACT": [
        "The appellant (W) appealed against a decision that her defence of proprietary estoppel to the respondent&#8217;s possession claim was defeated by the Law of Property (Miscellaneous Provisions) Act 1989 s.2.",
        "W had been the freehold owner and occupier of two adjacent registered titles: her house and garden, and some land. She sold them to the respondent (K) but remained in occupation of the house and garden. K defaulted on a mortgage he had granted over the property, a possession order was obtained against him and receivers were appointed to pursue possession of the property. Notice to quit was served on W, but she did not leave so the receivers issued possession proceedings. W raised the defence of proprietary estoppel, contending that she had sold the land to K at an undervalue on the understanding, based on assurances from K, that she could remain living there as long as she wanted. That arrangement was not mentioned in the sale agreement. Because the case had not been allocated to a track, the hearing was analogous to a summary judgment application. K successfully argued that the defence of proprietary estoppel could not succeed in light of s.2 of the 1989 Act and therefore did not amount to a genuine dispute on substantial grounds under CPR r.55.8. Consequently an order for possession was made against W."
    ],
    "YEAR": "2011",
    "COUNSEL": "For the appellant: John McDonnell QC, Clare Roberts. For the respondent: Francis Moraes.",
    "JUDGE": "Bean J",
    "CIT": "[2011] EWHC 1479 (QB)",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Equity",
        "Assurances",
        "Constructive Trusts",
        "Contracts For Sale of Land",
        "Proprietary Estoppel",
        "Transfer of Land"
    ],
    "HELD": [
        "Appeal allowed.",
        "(1) Notwithstanding obiter dicta in Cobbe v Yeoman&#8217;s Row Management Ltd [2008] UKHL 55, [2008] 1 W.L.R. 1752, proprietary estoppel in a case involving the sale of land had survived the enactment of s.2, Yaxley v Gotts [2000] Ch. 162 followed, Cobbe considered. There was a distinction to be drawn between commercial and domestic cases, Cobbe and Thorner v Major [2009] UKHL 18, [2009] 1 W.L.R. 776 considered. It was the nature of the parties&#8217; dealings, and not the nature of the property, which determined whether a case should be regarded as commercial or domestic. The judge had been correct to classify the instant case as commercial (see paras 24-32 of judgment). (2) There was no binding authority that answered the issue of whether the assurances given to W by K would create a proprietary estoppel or constructive trust in her favour despite the parties signing a contract of sale that did not mention them. Such clams were fact-sensitive, Thorner v Major , Herbert v Doyle [2010] EWCA Civ 1095, [2011] 1 E.G.L.R. 119 and Stack v Dowden [2007] UKHL 17, [2007] 2 A.C. 432 followed. In the instant case the facts were not sufficiently clear to make a summary determination on the documents. Therefore, the claim was genuinely disputed on grounds that appeared to be substantial within the meaning of CPR r.55.8. Accordingly, the order for possession would be set aside and the case remitted (paras 33-39)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Equity &mdash; Assurances &mdash; Constructive Trusts &mdash; Contracts For Sale of Land &mdash; Proprietary Estoppel &mdash; Transfer of Land",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "228",
    "RELATED": [
        "(wl) Whittaker v Kinnear",
        "(wl) Herbert v Doyle",
        "(wl) Lloyds Bank v Carrick",
        "(wl) Hapeshi v Allnatt",
        "(wl) Halifax v Popeck",
        "(wl) Keay v Morris",
        "(wl) Burgess v Rawnsley",
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Cherry Tree Investments v Landmain",
        "(wl) Gillett v Holt",
        "(wl) Thorner v Majors",
        "(wl) Capehorn v Harris"
    ],
    "NAME": "(wl) Ghazaani v Rowshan",
    "SUMMARY": [
        "Although an oral agreement between two parties concerning the transfer of a property did not satisfy the Law of Property (Miscellaneous Provisions) Act 1989 s.2, owing to the exceptional circumstances a proprietary estoppel existed and the property was transferred."
    ],
    "CITATION": "Ghazaani v Rowshan [2015] EWHC 1922 (Ch)",
    "ABSTRACT": [
        "The claimant sought the transfer of property which he claimed the defendant held on constructive trust.",
        "A dispute between the parties had arisen out of an oral agreement to exchange a property in Leeds for a property in Tehran together with an equality payment. The defendant was the registered proprietor of the Leeds property and the claimant the registered proprietor of the Tehran property. The first floor of the Leeds property had been empty from 2011 and the ground floor and basement were rented. The Tehran property also had a tenant The claimant asserted that he had transferred the Tehran property to the defendant in November 2011 and paid a 500 million IR equality payment and that he would pay 400 million IR repayable to the existing tenant on termination of the lease; that he had told the defendant about the existing tenant during their negotiations; that the Tehran property was now registered in the defendant&#8217;s name; that the defendant&#8217;s alleged wife was living in the property and had evicted the tenant; that his solicitor had advised the defendant to seek legal advice when the title deeds to the Leeds property were deposited; that the defendant had refused to transfer the Leeds property to him in breach of their agreement. It was the defendant&#8217;s case that the parties had agreed that he would sell the Leeds property to the claimant for \u00a3175,000 payable by way of exchange with the Tehran property, which was valued at \u00a3100,000, and \u00a375,000 in Iranian currency; he denied the transfer of the Tehran property to him or that its tenant had been evicted; he denied receiving payment of 500 million IR; he denied being married and that his &#8220;wife&#8221; was occupying the Tehran property.",
        "The claimant submitted that he was entitled to have the Leeds property transferred to him by way of constructive trust or proprietary estoppel."
    ],
    "YEAR": "2015",
    "COUNSEL": "For the claimant: Roger Birch. For the defendant: Robert Toone.",
    "JUDGE": "Judge Behrens",
    "CIT": "[2015] EWHC 1922 (Ch)",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Contracts",
        "Constructive Trusts",
        "Contracts For Sale of Land",
        "Oral Contracts",
        "Proprietary Estoppel",
        "Transfer of Land"
    ],
    "HELD": [
        "Judgment for claimant.",
        "(1) In relation to the factual dispute between the parties, the parties had agreed to exchange the Leeds property for the Tehran property with an equality payment of 500 million IR by the claimant, the claimant was to reimburse the defendant 400 million IR payable on termination of the Tehran tenant&#8217;s lease and the defendant had been made aware of the tenant&#8217;s existence during the negotiations. The defendant took possession of the Leeds property from November 2011 and directed the Leeds tenant to pay the claimant rent. The tenant paid the claimant rent for six months and thereafter made rent payments to the defendant; the claimant had not made any council tax payments for the Leeds property. In relation to the Tehran property, it had been validly transferred and registered to the defendant in November 2011, the claimant had given the defendant two cheques totalling 500 million IR, although they were later stolen, the claimant&#8217;s solicitor had made an unconditional offer to pay the defendant 400 million IR and steps had been taken to evict the Tehran tenant. (2) There was no illegality arising out of the fact that the parties agreed that the defendant had received \u00a3100,000 for the transfer of the Leeds property. Even if there had been, it would not have been sufficient to defeat the constructive trust/proprietary estoppel claim. The claimant&#8217;s solicitor had not breached his professional obligations to the defendant, and he had advised the defendant to seek advice (see paras 182-184 of judgment). Despite Cobbe v Yeoman&#8217;s Row Management Ltd [2008] UKHL 55, [2008] 1 W.L.R. 1752, it was still probably possible to have a proprietary estoppel in the case of a contract that did not satisfy the Law of Property (Miscellaneous Provisions) Act 1989 s.2, but that would be an exceptional case, Cobbe considered. In the exceptional circumstances of the instant case, it would be unconscionable for the defendant to refuse to complete the transfer of the Leeds property to the claimant. The claimant had made out his claim for a constructive trust and/or a proprietary estoppel. The appropriate relief was to put the parties in the position that they would have been in had the contract been concluded in November 2011, namely the Leeds property would have been transferred to the claimant; he would have received rents and been liable for council tax/business rates for the first floor; he would have remained liable to pay the defendant 400 million IR; the Leeds property would have been transferred to him, and he would have been able to increase the rent. Taking all matters into account, the loss of rental income was sufficient to satisfy the loss of 400 million IR and any council tax paid or payable by the defendant in respect of the first floor flat since November 2011. Accordingly, the Leeds property would be transferred to the claimant and he would receive any further rent payable by the tenant (187-201 of judgment)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Contracts &mdash; Constructive Trusts &mdash; Contracts For Sale of Land &mdash; Oral Contracts &mdash; Proprietary Estoppel &mdash; Transfer of Land",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "229",
    "RELATED": [
        "(wl) Thorner v Majors",
        "(wl) Henry v Henry",
        "(wl) Halifax v Popeck",
        "(wl) Gillett v Holt",
        "(wl) Link Lending v Bustard",
        "(wl) IAM Group v Chowdrey",
        "(wl) Colchester BC v Smith",
        "(wl) Zarb v Parry",
        "(wl) Ghazaani v Rowshan",
        "(wl) Morrells v Oxford United FC",
        "(wl) Batchelor v Marlow",
        "(wl) Pye Ltd v Graham"
    ],
    "NAME": "(wl) Portnip Stallion v Albert Stallion",
    "SUMMARY": [
        "An agreement to consent to a divorce in return for a life interest in a property had not on the evidence conferred exclusive possession on the former wife, but she had relied on the promise of a life interest and, in forgoing the certainty of a court order for ancillary relief, she had suffered a substantial detriment so that the former husband would be estopped from denying the promise."
    ],
    "CITATION": "Portnip Stallion v Albert Stallion [2009] EWHC 1950 (Ch)",
    "ABSTRACT": [
        "The claimant (P) sought a declaration that she was entitled to a life interest in a property owned by the first defendant company (D). D counterclaimed for a declaration that P had no interest, or alternatively that any interest would be satisfied by payment of a sum set out in a memorandum of agreement.",
        "P&#8217;s former husband (S) had been the sole director and majority shareholder of D. P and S had lived at the relevant property, which was a four-storey terrace. S had wished to marry the second defendant (L) and he produced a memorandum of a proposed agreement stating that in return for P consenting to a divorce she could continue to live in the property rent free for the rest of her life, but if the property had to be sold she would be paid \u00a355,000. P had been handed the memorandum and later that day S and his accountant met with her to discuss the details. S then married L and they also, at various times, resided at the property. During the following few years S and P had disputes about P&#8217;s occupation of the property. After S&#8217;s death L remarried and lived at the property with her new husband and child. D wished to redevelop the property and served a notice to quit on P, offering to pay the \u00a355,000 mentioned in the memorandum. P claimed that she had the benefit of a proprietary estoppel against D on the basis of an oral agreement with S, made at the meeting to discuss the divorce, that P would have the sole and exclusive possession of the property for life. The accountant also gave evidence that exclusive possession had been agreed. In support of her claim P asserted that any occupation of the property by S and L had always been with her permission.",
        "P argued that she had reasonably relied on the oral representation, and as a result had suffered substantial detriment because she had given up the status and entitlements of a wife and the certainty and finality of an order for ancillary relief. P submitted that it would be unconscionable to allow S&#8217;s estate to renege on the promise and that the equity that arose should be satisfied by payment of a sum sufficient for her to buy an alternative property."
    ],
    "YEAR": "2009",
    "COUNSEL": "For the claimant: Bernard O&#8217;Sullivan. For the first defendant: Mark Woodland. For the second defendant: Myriam Stacey.",
    "JUDGE": "Sarah Asplin QC",
    "CIT": "[2009] EWHC 1950 (Ch)",
    "CATEGORIES": [
        "Real Property",
        "Detriment",
        "Life Interests",
        "Proprietary Estoppel",
        "Reliance",
        "Unconscionability"
    ],
    "HELD": [
        "Judgment accordingly.",
        "(1) The evidence did not support P&#8217;s claim that the representation was that she should have exclusive possession of the property. She had not suggested the same until after notice to quit had been served and previously had relied on the terms of the memorandum on several occasions. Further, the evidence did not establish that P&#8217;s permission had been required for S and L to stay at the property and the actual occupation of the property did not support the contention that P had exclusive possession. There was no documentary evidence to support the alleged oral agreement. The accountant had not referred to it in an affidavit made in connection with the earlier disputes about P&#8217;s occupation. On the balance of probabilities, the only representation made to P was the one contained in the memorandum. (2) P&#8217;s conduct was consistent with the memorandum being an inducement to consent to the divorce and not to seek ancillary relief. Forgoing the certainty of a court order was a substantial detriment. Looking at the matter in the round, it would be unconscionable for S&#8217;s estate to avoid the consequences of the representation made in the memorandum. Taking into account the detriment, L&#8217;s position and the benefit that P had already derived from the agreement in the memorandum, the minimum equity required to do justice and to avoid an unconscionable and disproportionate result was a declaration that P was entitled to reside at the property rent free for life, not with exclusive possession, if and until the circumstances provided for in the memorandum arose, Jennings v Rice [2002] EWCA Civ 159, [2003] 1 F.C.R. 501 and Sledmore v Dalby (1996) 72 P. &amp; C.R. 196 considered."
    ],
    "CATEGORY": "Real Property &mdash; Detriment &mdash; Life Interests &mdash; Proprietary Estoppel &mdash; Reliance &mdash; Unconscionability",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "230",
    "RELATED": [
        "(wl) CPS v Piper",
        "(wl) Kinch v Bullard",
        "(wl) Pye Ltd v Graham",
        "(wl) Jones v Challenger",
        "(wl) Gissing v Gissing",
        "(wl) Goodman v Gallant",
        "(wl) Thorner v Majors",
        "(wl) Colchester BC v Smith",
        "(wl) St Marleybone Property Co v Fairweather",
        "(wl) Hapeshi v Allnatt",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Wilkinson v Kerdene"
    ],
    "NAME": "(wl) Cf Vallee v Birchwood",
    "SUMMARY": [
        "The court considered the doctrine of donatio mortis causa , with particular focus on the first and third essential requirements as enunciated in Sen v Headley [1991] Ch. 425, namely how to determine whether the gift had been made in contemplation of &#8220;impending death&#8221; and, where the gift concerned intangible items of property which could not physically be delivered, how to determine whether there had been a parting with dominion."
    ],
    "CITATION": "Cf Vallee v Birchwood [2013] EWHC 1449 (Ch)",
    "ABSTRACT": [
        "The appellant administrator (B) of the estate of the deceased (D) appealed against a decision that D&#8217;s house had passed to the respondent (V) under the doctrine of donatio mortis causa . He also appealed against an order that he pay V&#8217;s costs.",
        "V was D&#8217;s daughter. She lived in France and visited him twice a year. In August 2003, she found him in poor health. She told him she would next visit at Christmas. He replied that he did not expect to live much longer and might not be alive by then. He told her that he wanted her to have his house when he died. He gave her the title deeds, the key, and some personal belongings. He died intestate just before Christmas. It materialised that V could not be D&#8217;s heir because she had been adopted as a child. The Treasury Solicitor rejected her claim and advertised for potential claimants. B, a genealogist, discovered that D had a surviving brother. He obtained power of attorney and administered D&#8217;s estate on the brother&#8217;s behalf. In proceedings for a declaration that D&#8217;s house had been transferred to V under the doctrine of donatio mortis causa, a judge ruled that it had. He also ordered B to pay V&#8217;s costs on the basis that he had gone out as a venture to become an administrator rather than having the office thrust upon him by circumstances, and that he had to bear the consequences of his actions.",
        "B submitted that dominion in the property had not passed to V because (1) the four-month gap between the gift and the death was too great for the gift to have been made in contemplation of impending death; (2) the property had not been physically delivered to her, nor had she enjoyed any control over it, in the period between the gift and the death."
    ],
    "YEAR": "2013",
    "COUNSEL": "For the appellant: William Moffett. For the respondent: Sinclair Cramsie.",
    "JUDGE": "Jonathan Gaunt QC",
    "CIT": "[2013] EWHC 1449 (Ch)",
    "FLAGS": [
        "Overruled"
    ],
    "CATEGORIES": [
        "Succession Other Related Subjects: Real Property",
        "Trusts",
        "Civil Procedure",
        "Administration of Estates",
        "Costs Between the Parties",
        "Donatio Mortis Causa",
        "Gifts",
        "Houses",
        "Intention",
        "Intestacy",
        "Title to Land",
        "Transfer of Property In Goods",
        "Wills"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) The judge had been right to hold that the gift had been made in contemplation of impending death. It was clear that D had made the gift because he feared that he was not likely to live until V&#8217;s next visit. The question was not whether D had had good grounds to anticipate his demise, nor whether his death occurred as quickly as he might have feared, but whether the motive for the gift was that he subjectively contemplated the possibility of death in the near future. The fact that D thought he might die before V&#8217;s next visit was &#8220;the near future&#8221;. The doctrine only required the gift to be made in &#8220;contemplation&#8221; of death, not in &#8220;expectation&#8221; of it. Lack of opportunity by a deceased to make a will was not something which a donee had to prove in modern times; that was best regarded as justification for the doctrine rather than as a precondition for its operation (see paras 14-15, 24-27 of judgment). (2) In order for donatio mortis causa to be effective, there had to be an overt act of physical transfer. &#8220;Dominion&#8221; connoted conditional ownership. In the context of chattels, it was interchangeable with &#8220;possession&#8221;. In the case of intangible items of property which could not be physically delivered, the concept of dominion was slippery. Its fundamental rationale was that something must be done by way of delivery sufficient to indicate that a conditional gift was intended: something amounting to a &#8220;parting with dominion&#8221;. Sen was the only reported case where a valid donatio of land had been found. Although the facts of that case were distinguishable from those of the instant case, the principle in Sen was that land was to be treated in the same way as a chose in action; the delivery of title deeds would usually be enough to constitute delivery of dominion unless there was evidence that the donor had reserved power to deal with the land in a manner that was incompatible with the gift. There was no reason why a donor&#8217;s continued enjoyment of the property was to be regarded as incompatible with an intention to make a gift as, under the doctrine, the gift only became effective upon death. In the instant case, D&#8217;s delivery of the deeds to V meant that he had no power to transfer the house elsewhere, and the handing over of the keys diminished his control over it; there had been sufficient delivery of dominion to constitute a valid donatio mortis causa , Craven&#8217;s Estate (No.1), Re [1937] Ch. 423 and Ward v Turner 28 E.R. 275 considered, Wasserberg, Re [1915] 1 Ch. 195 and Sen applied (paras 21-22, 29, 32-43). (3) The judge&#8217;s reasons for making the costs order were adequate justification. While B had been torn between V&#8217;s claim to the only worthwhile asset of the estate and his duty to D&#8217;s brother, the situation had been of his own making, in the hope of personal financial gain. That fact should be reflected in the costs (paras 44-56)."
    ],
    "CATEGORY": "Succession Other Related Subjects: Real Property &mdash; Trusts &mdash; Civil Procedure &mdash; Administration of Estates &mdash; Costs Between the Parties &mdash; Donatio Mortis Causa &mdash; Gifts &mdash; Houses &mdash; Intention &mdash; Intestacy &mdash; Title to Land &mdash; Transfer of Property In Goods &mdash; Wills",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "231",
    "RELATED": [
        "(wl) Thorner v Majors",
        "(wl) Portnip Stallion v Albert Stallion",
        "(wl) Thompson v Foy",
        "(wl) Whittaker v Kinnear",
        "(wl) Gillett v Holt",
        "(wl) Malik v Fassenfelt",
        "(wl) Halifax v Popeck",
        "(wl) McDonald v McDonald",
        "(wl) HSBC v Dyche",
        "(wl) Hapeshi v Allnatt",
        "(wl) Gold Harp v McLeod",
        "(wl) Mulvaney v Gough"
    ],
    "NAME": "(wl) Henry v Henry",
    "SUMMARY": [
        "The Court of Appeal of the Eastern Caribbean Supreme Court had adopted an erroneous approach to the issue of detriment in considering a proprietary estoppel claim. It had failed to weigh any disadvantages suffered by the claimant by reason of his reliance on the promise against any countervailing advantages which he had enjoyed by reason of that reliance."
    ],
    "CITATION": "Henry v Henry [2010] UKPC 3",
    "ABSTRACT": [
        "The appellant (T) appealed against a decision of the Court of Appeal of the Eastern Caribbean Supreme Court that an equity had arisen in favour of the respondent (C) in respect of a plot of agricultural land, and that the equity should be satisfied by awarding the plot of land to C.",
        "T had bought the land from an elderly relative (G) shortly before G died. C had been living on and cultivating the land for more than 30 years. It was his case that G had promised to leave the land to him upon her death, and that, by working on the land and taking care of G until she died, he had relied on that promise to his detriment. The judge dismissed C&#8217;s proprietary estoppel claim, finding that he had not suffered a detriment, rather he had positively benefited from residing on the land and reaping its produce. The judge also found that there were no grounds for disturbing T&#8217;s title to the land, given that she was a purchaser for value, she had been the registered proprietor since 1999 and she had made no promises to C. The Court of Appeal held that C had suffered a detriment, and that accordingly an equity had arisen in his favour in respect of the land; furthermore, the equity was binding on T since it was an &#8220;overriding interest&#8221; within the meaning of the Land Registration Act 1984 (Saint Lucia) s.28.",
        "T argued that (1) there were no grounds justifying the Court of Appeal&#8217;s interference with the judge&#8217;s conclusion that there was no detriment. Relying upon Steria Ltd v Hutchison [2006] EWCA Civ 1551, [2007] I.C.R. 445, she submitted that the concepts of reliance and detriment fell to be considered separately; (2) although any equity enjoyed by C would constitute an &#8220;overriding interest&#8221; within the meaning of s.28 of the Act, the test of unconscionability had to be considered afresh in relation to her position as purchaser of the land. There was nothing unconscionable about the circumstances in which she purchased the land, so she should take the land free of any equity which might be found to have arisen in C&#8217;s favour as against G; (3) any equity which had arisen had been fully satisfied by the countervailing benefits which C had received over the years. Entitlement to the plot of land was on any basis disproportionate to the detriment which C might have suffered."
    ],
    "YEAR": "2010",
    "COUNSEL": "For the appellant: Myriam Stacey. For the respondent: Colin Foster.",
    "JUDGE": "Lord Hope; Lord Brown; Lord Mance; Lord Clarke; Sir Jonathan Parker",
    "CIT": "[2010] UKPC 3",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Equity",
        "Detriment",
        "Overriding Interests",
        "Proportionality",
        "Proprietary Estoppel",
        "Reliance",
        "Saint Lucia",
        "Title to Land"
    ],
    "HELD": [
        "Appeal allowed",
        "Appeal allowed. (1) Even though the concepts of reliance and detriment could be regarded, in the abstract, as different, in applying the principles of proprietary estoppel they were often intertwined, Gillett v Holt [2001] Ch. 210 applied, Steria cited. The two concepts were intertwined in the instant case. The judge had misdirected himself on the issue of detriment by failing to weigh the disadvantages suffered by C against the countervailing advantages which he enjoyed as a result of G&#8217;s promises, Jennings v Rice [2002] EWCA Civ 159, [2003] 1 F.C.R. 501 and Campbell v Griffin [2001] EWCA Civ 990, [2001] W.T.L.R. 981 applied. The Court of Appeal had also approached the issue of detriment erroneously, as demonstrated by its finding that the judge had erred in attempting to compare the advantage with the detriment. Therefore, the question of detriment had to be considered afresh. It was clear from the evidence that, by remaining on the land, C had deprived himself of the opportunity of a better life elsewhere. That detriment had not been outweighed by the advantages C enjoyed as a result of remaining on the land. Accordingly, an equity had arisen in C&#8217;s favour under the doctrine of proprietary estoppel in respect of the land. (2) It was possible that cases might arise in which the circumstances surrounding a third party purchase might, notwithstanding the claimant&#8217;s overriding interest, require the court to reassess the extent of the claimant&#8217;s equity in the property. However, T&#8217;s case contained no plea to that effect, nor was any such case pursued on her behalf at trial, so the issue did not arise. (3) In determining the extent of the equity in C&#8217;s favour, the Court of Appeal had erred in stating that it had no power to say that the promise, and the resulting benefit, was disproportionate to the detriment. Proportionality was at the heart of the doctrine of proprietary estoppel, and it permeated its every application. In the circumstances, the appropriate relief was to award C one half of the plot of land."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Equity &mdash; Detriment &mdash; Overriding Interests &mdash; Proportionality &mdash; Proprietary Estoppel &mdash; Reliance &mdash; Saint Lucia &mdash; Title to Land",
    "COURT": "UKPC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "232",
    "RELATED": [
        "(wl) Williams v Williams",
        "(wl) Kingsworth v Tizzard",
        "(wl) Pettitt v Pettitt",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Gissing v Gissing",
        "(wl) Javad v Aqil",
        "(wl) Newlon Housing Trust v Alsulaimen",
        "(wl) Abbott v Abbott",
        "(wl) Corbett v Halifax",
        "(wl) Kinch v Bullard",
        "(wl) Binions v Evans",
        "(wl) In re Pavlou"
    ],
    "NAME": "(wl) National Provincial Bank v Ainsworth",
    "SUMMARY": [
        "Matrimonial home; deserted wife&#8217;s right to possession",
        "1. A deserted wife&#8217;s right against her husband to remain in the matrimonial home is a personal right and does not clog the land in the hands of anyone who genuinely purchased the house from the husband before or after the desertion. 2. This applies to registered land. The wife&#8217;s right is not an overriding interest within the Land Registration Act 1925 s.70 which relates only to rights having the quality of being capable of enduring through different ownership of the land, according to normal conceptions of title to real property. Per curiam: (1) A wife has a right to occupation of the matrimonial home by means of her status as a wife, not any licence from her husband. (2) The law is unsatisfactory. Quaere whether a husband or a deserted wife is the person in occupation for the purpose of s.70. H deserted his wife, W, who remained in the matrimonial home, which was registered land. Later H transferred the house to his company, which charged it to its bank. The bank applied by originating summons for possession of the house."
    ],
    "CITATION": "National Provincial Bank v Ainsworth [1965] AC 1175",
    "YEAR": "1965",
    "JUDGE": "Lord Hodson; Lord Cohen; Lord Guest; Lord Upjohn; Lord Wilberforce",
    "CIT": "[1965] AC 1175",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Family Law Other Related Subjects: Real Property",
        "Desertion",
        "Matrimonial Home",
        "Occupation",
        "Registered Land",
        "Sale of Land"
    ],
    "HELD": [
        "that an order for possession should be made. (Observations of Roxburgh J. in Thompson v Earthy [1951] 2 K.B. 596 approved; Lee v Lee [1952] 2 Q.B. 489 (Note) considered and Ferris v. Weaven [1952] C.L.Y. 1956 considered; Bendall v McWhirter [1952] 2 Q.B. 466 overruled and Jess B Woodcock &amp; Sons v Hobbs [1955] 1 W.L.R. 152 overruled)."
    ],
    "CATEGORY": "Family Law Other Related Subjects: Real Property &mdash; Desertion &mdash; Matrimonial Home &mdash; Occupation &mdash; Registered Land &mdash; Sale of Land",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "233",
    "RELATED": [
        "(wl) Street v Mountford",
        "(wl) Westminster CC v Clarke",
        "(wl) Corbett v Halifax",
        "(wl) Fitzkriston v Panayi",
        "(wl) Emile Elias v Pine Groves",
        "(wl) Norris v Checksfield",
        "(wl) Facchini v Bryson",
        "(wl) AG of Hong Kong v Humphreys Estates",
        "(wl) Halsall v Brizall",
        "(wl) Cook v Mortgage Business plc",
        "(wl) MRA Engineering Ltd v Trimester Corp",
        "(wl) Hapeshi v Allnatt"
    ],
    "NAME": "(wl) Wintergarden v Millennium Productions",
    "SUMMARY": [
        "Housing (Rural Workers) Acts; application of Rent Restriction Acts"
    ],
    "CITATION": "Wintergarden v Millennium Productions [1947] KB 221",
    "YEAR": "1947",
    "JUDGE": "Scott LJ; Bucknill LJ; Somervell LJ",
    "CIT": "[1947] KB 221",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Agriculture Other Related Subjects: Landlord and Tenant",
        "Employees",
        "Housing",
        "Rent"
    ],
    "HELD": [
        "that the standard rent provisions of the Rent and Mortgage Interest (Restriction) Act 1920 did not apply to houses the rent of which was subject to a different and special legislation. Therefore where a house was let under the Housing (Rural Workers) Act 1926, the rent payable on such letting cannot form the basis for the determination of the standard rent under the 1920 Act. The landlord had applied for a grant in aid under the Housing (Rural Workers) Act 1926, in order to be able to make the house fit for the habitation of his agricultural workers. He received a grant of GBP 100 under the Act and in accordance with the conditions of the grant as laid down by the Housing (Rural Workers) Act 1926 s.3(1), a rent of 7s. 6d. was fixed by the authority as the proper figure payable by agricultural workers. The tenant paid this rent from 1938 until 1941, when the landlord put in a man who was in his employment and who agreed to pay 17s. 6d. This was done on the footing that the landlord was going to pay off the grant which was in fact paid off in 1941. This man brought proceedings to recover rent which he had overpaid on the footing that the standard rent under the Act was 7s. 6d. Held, the letting under the Housing (Rural Workers) Act 1926 could not form a basis for the standard rent under the Rent Restriction Acts and the standard rent in this case was 17s. 6d, Signy v Abbey National Building Society [1944] K.B. 449 applied."
    ],
    "CATEGORY": "Agriculture Other Related Subjects: Landlord and Tenant &mdash; Employees &mdash; Housing &mdash; Rent",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "234",
    "RELATED": [
        "(wl) Antoniades v Villiers",
        "(wl) Binions v Evans",
        "(wl) Norris v Checksfield",
        "(wl) Street v Mountford",
        "(wl) Gray v Taylor",
        "(wl) Facchini v Bryson",
        "(wl) AG Securities v Vaughan",
        "(wl) Lloyds Bank v Carrick",
        "(wl) Wright v Macadam",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Westminster CC v Clarke",
        "(wl) Goldberg v Edwards"
    ],
    "NAME": "(wl) Errington v Errington",
    "SUMMARY": [
        "Licence; lease or; tenancy at will",
        "&#8220;It is of the essence of a tenancy at will that it should be determinable by either party on demand.&#8221; &#8220;The difference between a tenancy and a licence is, therefore, that in a tenancy an interest passes in the land, whereas in a licence it does not. . . . Although a person who is let into exclusive possession is, prima facie, to be considered to be a tenant, nevertheless he will not be held to be so if the circumstances negative any intention to create a tenancy. Words alone may not suffice. Parties cannot turn a tenancy into a licence merely by calling it one. But if the circumstances and the conduct of the parties show that all that was intended was that the occupier should be granted a personal privilege with no interest in the land, he will be held only to be a licensee&#8221;: per Denning, L.J. In 1936 a father bought a house for his son and daughter-in-law to live in. The father put down GBP 250 in cash and borrowed GBP 500 from a building society on the security of the house, repayable with interest by instalments of 15s. a week. He took the house in his own name and made himself responsible for the instalments. The father told the daughter-in-law that the GBP 250 was a present for them, but he left them to pay the building society instalments of 15s. a week themselves. He handed the building society book to the daughter-in-law and said to her: &#8220;Don&#8217;t part with this book. The house will be your property when the mortgage is paid.&#8221; He said that when he retired he would transfer it into their names. The daughter-in-law paid the instalments regularly from that date onwards with the result that much of the mortgage had been repaid. The father, on being informed that the couple could not pay the rates, paid those also. In 1945 the father died leaving the house to his widow. Soon after, the son left his wife. The widow sued her daughter-in-law for possession of the house. Held, (1) there was no tenancy at will as the father could not revoke his promise once the couple entered on performance of the act: his promise would only cease to bind him if they left it incomplete and unperformed, which they had not done; (2) the 15s. which the couple paid was not rent as they were not bound to pay it: the father could not sue for it or distrain for it; he could only refuse to transfer the house to them; (3) the couple were licensees, having a permissive occupation short of a tenancy, but with a contractual right or, at any rate, an equitable right to remain so long as they paid the instalments, which would grow into a good equitable title to the house itself as soon as the mortgage was paid. Lynes v Snaith [1899] 1 Q.B. 486 doubted; Thompson v Earthy [1951] 2 K.B. 596 doubted; and dictum in Foster v Robinson [1951] 1 K.B. 149 doubted"
    ],
    "CITATION": "Errington v Errington [1952] 1 KB 290",
    "YEAR": "1952",
    "JUDGE": "Somervell LJ; Denning LJ; Hodson LJ",
    "CIT": "[1952] 1 KB 290",
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Contractual Rights",
        "Equitable Interests",
        "Licences",
        "Tenancies at Will",
        "Unilateral Contracts"
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Contractual Rights &mdash; Equitable Interests &mdash; Licences &mdash; Tenancies at Will &mdash; Unilateral Contracts",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "235",
    "RELATED": [
        "(wl) Street v Mountford",
        "(wl) Gray v Taylor",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Crate v Miller",
        "(wl) AG Securities v Vaughan",
        "(wl) Facchini v Bryson",
        "(wl) Errington v Errington",
        "(wl) Ashburn v Arnold",
        "(wl) Antoniades v Villiers",
        "(wl) Norris v Checksfield",
        "(wl) Westminster CC v Clarke",
        "(wl) Doherty v Birmingham CC"
    ],
    "NAME": "(wl) Binions v Evans",
    "SUMMARY": [
        "Licence; tenancy for life; effect on subsequent purchaser",
        "A person who acquires land expressly subject to a contractual licence is bound by the licence. L1 granted to T, who was the widow of an employee of L1, the right to reside in a cottage. The document described L1 as &#8220;landlord&#8221; and T as &#8220;tenant,&#8221; and by it L1, &#8220;in order to provide a temporary home,&#8221; for T &#8220;but not otherwise,&#8221; agreed to permit her &#8220;to reside in and occupy&#8221; the cottage &#8220;as tenant at will of [L1] free of rent for the remainder of her life or until determined . . . by [T] giving . . . not less than four weeks&#8217; . . . notice.&#8221; T undertook to keep the cottage in repair and not to assign or sublet. L1 sold the property to L2 expressly &#8220;subject to the tenancy of&#8221; T. L2 gave notice to quit to T and sought possession."
    ],
    "CITATION": "Binions v Evans [1972] Ch 359",
    "YEAR": "1972",
    "JUDGE": "Lord Denning MR; Megaw LJ; Stephenson LJ",
    "CIT": "[1972] Ch 359",
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Licences",
        "Sale of Land",
        "Tenancies"
    ],
    "HELD": [
        "that the expressions in the agreement as to a tenancy at will and a temporary home were contradictory to others making it clear that the arrangement could only be determined by T on notice or on T&#8217;s death and not by L1. L2 could be in no better position and held on constructive trust to give effect to the agreement. (Bannister v Bannister [1948] 2 All E.R. 133 applied)."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Licences &mdash; Sale of Land &mdash; Tenancies",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "236",
    "RELATED": [
        "(wl) Ashburn v Arnold",
        "(wl) Abbey National BS v Cann",
        "(wl) Street v Mountford",
        "(wl) Link Lending v Bustard",
        "(wl) Binions v Evans",
        "(wl) Scott v Southern Pacific Mortgages",
        "(wl) The Mortgage Corporation v Shaire and others",
        "(wl) Lloyds Bank v Rosset",
        "(wl) IDC v Clark",
        "(wl) Quennell v Maltby",
        "(wl) Nat West Bank v Amin",
        "(wl) HSBC v Dyche"
    ],
    "NAME": "(wl) Ashburn Anstalt v Arnold",
    "SUMMARY": [
        "Registered land occupation agreement; whether licence or tenancy; whether binding on purchaser with notice",
        "The reservation of a rent is not necessary for the creation of a tenancy. In 1973 R sold to M a headlease and sublease of premises in Kensington. The sale agreement provided by clause 5 that R could remain in the premises without payment of rent as &#8220;Licensees&#8221; until M should give one quarter&#8217;s notice in writing and should certify that it was ready at the expiration of such notice to redevelop the premises; and further provided by clause 6 that upon completion of such redevelopment M should grant to R &#8220;a lease of a shop in a prime position at the development with an area available for trading of approximately 1,000 s.m. and with car parking facilities ...&#8221;. M subsequently sold the headlease and sublease to the freeholder A, who claimed that R were licensees only and sought possession. R claimed that the agreement with M created a tenancy which took effect as an overriding interest under the Land Registration Act 1925 s.70(1)(g) ; alternatively that, if they were licensees only, the licence was binding upon A by reason of the decision in Errington v Errington and Woods [1952] 1 K.B. 290 , or by reason of the doctrine of constructive trust. The judge held that the agreement had created a licence only, but that the licence had been binding upon A; and he refused to order possession."
    ],
    "CITATION": "Ashburn Anstalt v Arnold [1989] Ch 1",
    "YEAR": "1989",
    "JUDGE": "Fox LJ; Neill LJ; Bingham LJ",
    "CIT": "[1989] Ch 1",
    "FLAGS": [
        "Criticised",
        "Bingham"
    ],
    "CATEGORIES": [
        "Real Property",
        "Licences",
        "Occupation",
        "Overriding Interests",
        "Possession of Land",
        "Real Property",
        "Tenancies"
    ],
    "HELD": [
        "dismissing A&#8217;s appeal upon other grounds, that (1) the reservation of a rent is not necessary for the creation of a tenancy; (2) the period of the occupation agreement was sufficiently certain in that the agreement could be determined by both parties in circumstances in which there could be no doubt as to whether the determining event had occurred; (3) the agreement had accordingly created a tenancy, which took effect as an overriding interest under s.70(1)(g) of the 1925 Act; (4) clause 6 of the agreement was sufficiently clear to be capable of enforcement as a contract, and likewise took effect as an overriding interest under s. 70(1)(g), notwithstanding that it had not been registered, as an estate contract, since R were in actual occupation of the premises ( Street v Mountford [1985] A.C. 809 applied; Midland Railway Co&#8217;s Agreement, Re [1971] Ch. 725 considered; Lace v Chantler [1944] K.B. 368 distinguished). Per curiam: (i) In view of the decisions in Thomas v Sorrell 124 E.R. 1098 , Daly v Edwardes (1900) 83 L.T. 548 , Frank Warr &amp; Co v London CC [1904] 1 K.B. 713 , King v David Allen &amp; Sons Billposting Ltd [1916] 2 A.C. 54 , and Clore v Theatrical Properties Ltd [1936] 3 All E.R. 483 , a contractual license does not create an interest in land capable of binding third parties; and the decision in Errington was to this extent only per incuriam ( Winter Garden Theatre (London) Ltd v Millennium Productions Ltd [1948] A.C. 173 and National Provincial Bank Ltd v Ainsworth [1965] A.C. 1175 also considered); (ii) Neither could a mere contractual licence in this case have bound A by way of constructive trust, since the courts will not impose a constructive trust unless it is satisfied that the conscience of the estate owner is affected; and the mere fact that land is expressed to be conveyed &#8220;subject to&#8221; a contract does not necessarily imply that the grantee is to be under an obligation, not otherwise existing, to give effect to the provisions of that contract ( London CC v Allen [1914] 3 K.B. 642 , Bannister v Bannister [1948] 2 All E.R. 133 , Schebsman (Deceased) Ex p. Official Receiver, Re [1944] Ch. 83 , Binions v Evans [1972] Ch. 359 , DHN Food Distributors v Tower Hamlets LBC [1976] 1 W.L.R. 852 , Lyus v Prowsa Developments Ltd [1982] 1 W.L.R. 1044 and Sharpe Ex p. Trustee of the Bankrupt&#8217;s Property, Re [1980] 1 W.L.R. 219 considered."
    ],
    "CATEGORY": "Real Property &mdash; Licences &mdash; Occupation &mdash; Overriding Interests &mdash; Possession of Land &mdash; Real Property &mdash; Tenancies",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "237",
    "RELATED": [
        "(wl) Mulvaney v Gough",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) Wood v Waddington",
        "(wl) Chaffe v Kingsley",
        "(wl) Moncrieff v Jamieson",
        "(wl) Lloyds Bank v Carrick",
        "(wl) AG Securities v Vaughan",
        "(wl) Ashburn v Arnold",
        "(wl) Antoniades v Villiers",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Vridi v Chana",
        "(wl) Phipps v Pears"
    ],
    "NAME": "(wl) IDC v Clark",
    "SUMMARY": [
        "Fire escape route; deed purporting to grant licence to use adjoining premises; whether legal easement binding successors",
        "The use of the words &#8216;grant a licence&#8217; in a lease cannot be said to create an easement which binds the successor in title. A licence had been granted in a 1969 lease allowing the owners of one property to use, as a fire escape, a door which led into another property. The second property was sold and the new owner blocked up the door. The first property owners applied to the court for a ruling that the grant of the licence created an easement which gave them the right to use the escape route. This was denied at first instance, and they appealed."
    ],
    "CITATION": "IDC v Clark (1993) 65 P &amp; CR 179",
    "YEAR": "1993",
    "COUNSEL": "For IDC: John Lindsay Q.C. and John Randall. For C: J G Boggis. For the first third party: Peter Crampin.",
    "CIT": "(1993) 65 P &amp; CR 179",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Easements",
        "Leases",
        "Licences"
    ],
    "HELD": [
        "dismissing the appeal, that the lower court had been correct in holding that the term in the lease merely granted a licence, did not create an easement, and was not binding on the successor."
    ],
    "CATEGORY": "Real Property &mdash; Easements &mdash; Leases &mdash; Licences",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "238",
    "RELATED": [
        "(wl) Vridi v Chana",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) IDC v Clark",
        "(wl) Batchelor v Marlow",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Moncrieff v Jamieson",
        "(wl) Mulvaney v Gough",
        "(wl) Chaffe v Kingsley",
        "(wl) Phipps v Pears",
        "(wl) Wood v Waddington",
        "(wl) Lloyds Bank v Rosset",
        "(wl) Bridle v Ruby"
    ],
    "NAME": "(wl) Copeland v Greenhalf",
    "SUMMARY": [
        "Keeping things on neighbouring land",
        "A claim to leave an unlimited number of vehicles for an indefinite time on a strip of land belonging to a neighbour and to enter on that strip to do repair work thereon is not a claim which can be the proper subject-matter of an easement. The defendant claimed an easement to store vehicles on a strip of land 20-35 feet wide and 150 feet long and to repair them on that strip, provided an adequate means of access to the plaintiff&#8217;s orchard was left, such adequate means being a width of something like 10 feet. The defendant established that he and his predecessors had for the last 50 years used that strip of land for such purposes in connection with their business as wheelwrights. Held, the right claimed went wholly outside any normal idea of an easement; it really amounted to a claim to a joint user of the land by the defendant; this was not a claim which could be established as an easement. ( Hill v Tupper 159 E.R. 51 applied; Dyce v Hay (1852) 1 Macq. 305 applied; and Moody v Steggles (1879) 12 Ch. D. 261 applied; Attorney General of Southern Nigeria v John Holt &amp; Co (Liverpool) Ltd [1915] A.C. 599 distinguished)."
    ],
    "CITATION": "Copeland v Greenhalf [1952] Ch 488",
    "YEAR": "1952",
    "JUDGE": "Upjohn J",
    "CIT": "[1952] Ch 488",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Easements",
        "Motor Vehicles",
        "Storage"
    ],
    "CATEGORY": "Real Property &mdash; Easements &mdash; Motor Vehicles &mdash; Storage",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "239",
    "RELATED": [
        "(wl) Goldberg v Edwards",
        "(wl) Escalus Properties v Robinson",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Phipps v Pears",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Moncrieff v Jamieson",
        "(wl) Ofulue v Bossert",
        "(wl) IDC v Clark",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Antoniades v Villiers",
        "(wl) Crago v Julian"
    ],
    "NAME": "(wl) Wright v Macadam",
    "SUMMARY": [
        "Grant; implied grant; right to use coal shed",
        "The following observations apply to s.62(1) of the Law of Property Act, 1925, which provides that &#8220;a conveyance of land shall be deemed to include and shall by virtue of this Act operate to convey, with the land, all . . . liberties, privileges, easements, rights, and advantages whatsoever appertaining or reputed to appertain to the land, or any part thereof, or, at the time of conveyance demised, occupied, or enjoyed with, or reputed or known as part or parcel of or appurtenant to the land or any part thereof&#8221;: 1. The section is not confined to rights which, as a matter of law, were so annexed or appurtenant to the property conveyed at the time of the conveyance as to make them actual legally enforceable rights. Thus, on severance of a piece of land in common ownership, the quasi easements de facto enjoyed in respect of it by one part of the land over another will pass although, of course, as a matter of law, no man can have a right appendant or appurtenant to one part of his property exercisable by him over the other part of his property. 2. The right, in order to pass, need not be one to which the owner or occupier for the time being of the land has had what may be described as a permanent title. A right enjoyed merely by permission is enough. 3. For the purposes of s.62 it is only necessary that the right should be one capable of being granted at law, or, in other words, a right known to the law. If it is a right of that description, it matters not that it has been, in fact, enjoyed by permission only. 4. The provisions of s.62 cannot apply where in the circumstances of the case there can have been no expectation by the parties that the enjoyment of the right could be other than temporary. In 1941, Mrs. W. was a statutory tenant of two rooms on the top floor of the defendant&#8217;s house, and, by permission separately granted, was using a shed in the garden for the storage of her coal. In 1943, the defendant granted to Mrs. W. and her daughter, the plaintiffs in the action, a new tenancy of the upper flat, including an additional room. The tenancy agreement contained no reference to the coal shed, nor any indication of intention one way or the other whether the plaintiffs were to continue to enjoy the use of the coal shed. A dispute arose between the parties about the plaintiffs&#8217; right to use the coal shed. Held, the fact that Mrs. W. used the coal shed by permission of the defendant could not prevent s.62 from applying. The right to use the coal shed for the purpose of storing such coal as might be required for domestic purposes was a right or easement which the law would recognise. It could not be said that it was in the contemplation of the parties that the enjoyment of the right should be purely temporary. Consequently, the right to use the coal shed was, at the date of the letting in 1943, a right enjoyed with the top floor flat within the meaning of s.62 of the Law of Property Act, 1925, with the result that (as no contrary intention was expressed in the document) the right in question had to be regarded as having passed by virtue of that letting. ( International Tea Stores Co v Hobbs [1903] 2 Ch. 165 applied; Lewis v Meredith [1913] 1 Ch. 571 applied; White v Williams [1922] 1 K.B. 727 applied; Burrows v Lang [1901] 2 Ch. 502 applied; and Birmingham Dudley &amp; District Banking Co v Ross (1888) 38 Ch. D. 295 applied)."
    ],
    "CITATION": "Wright v Macadam [1949] 2 KB 744",
    "YEAR": "1949",
    "JUDGE": "Jenkins LJ; Singleton LJ; Tucker LJ",
    "CIT": "[1949] 2 KB 744",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Easements",
        "Implied Terms",
        "Leases",
        "Statutory Rights"
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Easements &mdash; Implied Terms &mdash; Leases &mdash; Statutory Rights",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "240",
    "RELATED": [
        "(wl) Moncrieff v Jamieson",
        "(wl) Mulvaney v Gough",
        "(wl) IDC v Clark",
        "(wl) Batchelor v Marlow",
        "(wl) Chaffe v Kingsley",
        "(wl) Wood v Waddington",
        "(wl) Copeland v Greenhalf",
        "(wl) Vridi v Chana",
        "(wl) Midland Bank Trust Co v Green",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) Wright v Macadam"
    ],
    "NAME": "(wl) Phipps v Pears",
    "SUMMARY": [
        "Implied grant; protection from weather",
        "The protection of a structure from the weather is neither an easement nor such a right known to the law as will impliedly pass on a conveyance under the Law of Property Act 1925 s.62 . In about 1930 the common owner of two houses pulled one down and rebuilt it close to, but getting no support from, the other, the nearest walls not being bonded together. He later sold the new house to P, and the old house was sold after his death to R who demolished it, leaving the flank wall of the new house exposed for the first time to the weather, which did damage. P sued R for damages on the footing of an implied easement on the sale to him of a right of protection from weather."
    ],
    "CITATION": "Phipps v Pears [1965] 1 QB 76",
    "YEAR": "1965",
    "JUDGE": "Lord Denning MR; Pearson LJ; Salmon LJ",
    "CIT": "[1965] 1 QB 76",
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CATEGORIES": [
        "Real Property",
        "Conveyancing",
        "Easements",
        "Implied Terms",
        "Weather"
    ],
    "HELD": [
        "that there was no such easement, nor was there a right known to the law which passed on the conveyance to P under s.62 of the Law of Property Act, 1925. ( Dalton v Henry Angus &amp; Co (1881) 6 App. Cas. 740 considered; Wright v Macadam [1949] 2 K.B. 744 applied)."
    ],
    "CATEGORY": "Real Property &mdash; Conveyancing &mdash; Easements &mdash; Implied Terms &mdash; Weather",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "241",
    "RELATED": [
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Bridle v Ruby",
        "(wl) Moncrieff v Jamieson",
        "(wl) Vridi v Chana",
        "(wl) Wood v Waddington",
        "(wl) Mulvaney v Gough",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) Chaffe v Kingsley",
        "(wl) IDC v Clark",
        "(wl) Stafford v Lee",
        "(wl) Copeland v Greenhalf",
        "(wl) Wall v Collins"
    ],
    "NAME": "(wl) Batchelor v Marlow",
    "SUMMARY": [
        "A right to park cars, on Mondays to Fridays between 9.30 am until 6.00 pm, on a strip of land owned by B was incapable of being an exclusive prescriptive easement because the use of the land was so intrusive as to render B&#8217;s ownership illusory.",
        "B appealed against a decision that M had acquired an exclusive prescriptive right to park up to six cars on Mondays to Fridays between the hours of 9.30 am and 6.00 pm, on a strip of land owned by B ([2001] R.T.R. 12, [2000] C.L.Y. 4630). B contended that the right was incapable of being a valid easement and that the judge&#8217;s findings of fact did not justify a conclusion that such a right had been acquired. B submitted that his ownership of the land had become illusory as a result because (1) the right asserted was exclusive of all others, including his own, and (2) the parking on the land was so intrusive as to prevent any other use of the land being possible during periods when cars were parked. M contended that B had 120 hours of use of the land per week and that in that time he could use it for parking or charging others to park, or alternatively he could sell the land."
    ],
    "CITATION": "Batchelor v Marlow [2001] EWCA Civ 1051",
    "YEAR": "2001",
    "COUNSEL": "For B: Bridget Williamson. For M: Mark West.",
    "JUDGE": "Henry LJ; Tuckey LJ; Maurice Kay J",
    "CIT": "[2001] EWCA Civ 1051",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Easements",
        "Parking",
        "Prescription",
        "Rights of Way"
    ],
    "HELD": [
        "allowing the appeal, that B had no reasonable use of the land for parking because he was unable to use it during the periods when parking spaces were most likely to be needed. His right to use the land for other purposes was restricted by the times during the week when he could not use the land, and therefore his ownership of the land was illusory. Accordingly the judge had erred in his conclusion since such a right was incapable of being an easement."
    ],
    "CATEGORY": "Real Property &mdash; Easements &mdash; Parking &mdash; Prescription &mdash; Rights of Way",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "242",
    "RELATED": [
        "(wl) Batchelor v Marlow",
        "(wl) Mulvaney v Gough",
        "(wl) Wood v Waddington",
        "(wl) Vridi v Chana",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) Moncrieff v Jamieson",
        "(wl) Bridle v Ruby",
        "(wl) St Marleybone Property Co v Fairweather",
        "(wl) Zarb v Parry",
        "(wl) Pye Ltd v Graham",
        "(wl) IDC v Clark",
        "(wl) Phipps v Pears"
    ],
    "NAME": "(wl) Central Midlands Estates v Leicester Dyers",
    "SUMMARY": [
        "Defendant claimed title by adverse possession to strip of land by its factory on industrial estate where its employees parked their cars - Defendant failed to establish possession of strip by parking of cars or otherwise for necessary 12-year period - Parking not user as of right by defendant - Right to park unlimited number of vehicles anywhere on strip of land could not be acquired by prescription - No private or public right of way over estate road.",
        "C sought the removal of a caution registered by L in respect of a strip of wasteland owned by C. Employees of L had been in the habit of parking their vehicles on the land in question before entering L&#8217;s premises. L had previously made an application to the Land Registry for registration of the title to the strip together with a right of way over the roadway to and from the strip, both claims being based upon adverse possession. The Land Registry rejected the claim and L opted to register a caution. L maintained that it had acquired title to the land as a result of the car parking usage which it alleged had extended over a period of more than 12 years stretching back to 1974 or even earlier."
    ],
    "CITATION": "Central Midlands Estates v Leicester Dyers (2003) 100(11) LSG 33",
    "YEAR": "2003",
    "COUNSEL": "For C: Bryan McGuire. For L: Steven Gastowicz.",
    "JUDGE": "Robert Englehart QC",
    "CIT": "(2003) 100(11) LSG 33",
    "CATEGORIES": [
        "Real Property",
        "Adverse Possession",
        "Cautions",
        "Easements",
        "Parking",
        "Prescription",
        "Rights of Way"
    ],
    "HELD": [
        "giving judgment for C, that whilst L had been able to establish regular and systematic parking by its employees on the strip of wasteland from the mid 1990s onwards, it had been unable to establish such usage prior to that time, JA Pye (Oxford) Ltd v Graham [2002] UKHL 30, [2003] 1 A.C. 419 applied. In any event regular car parking would not constitute the taking of possession on the facts of the instant case. Whilst car parking might in certain circumstances amount to the taking of possession of land, it was clear that L had never attempted to enclose the strip of land, erect car park signs or otherwise act in relation to the land as though it were the true owner of it, Burns v Anthony (1997) 74 P. &amp; C.R. D41 and Pavledes v Ryesbridge Properties (1989) 58 P. &amp; C.R. 459 applied."
    ],
    "CATEGORY": "Real Property &mdash; Adverse Possession &mdash; Cautions &mdash; Easements &mdash; Parking &mdash; Prescription &mdash; Rights of Way",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "243",
    "RELATED": [
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Phipps v Pears",
        "(wl) Batchelor v Marlow",
        "(wl) Gold Harp v McLeod",
        "(wl) Vridi v Chana",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) Wood v Waddington",
        "(wl) Bridle v Ruby",
        "(wl) St Marleybone Property Co v Fairweather",
        "(wl) Moncrieff v Jamieson",
        "(wl) IDC v Clark",
        "(wl) Midland Bank Trust Co v Green"
    ],
    "NAME": "(wl) Mulvaney v Gough",
    "SUMMARY": [
        "Cottages sold with joint use of back yard and rights of way - Back yard used for many years as communal garden - Claimant tended flower bed on passage adjacent to her cottage - Defendants removed flower bed without notice to create driveway to access other land - Easement to use land as communal garden could be acquired by prescription - Claimant entitled to right to use land as communal garden but not to reinstatement of flower bed - Defendants could create driveway so long as character of communal garden could be maintained - Claimant entitled to damages for destruction of flower bed without notice.",
        "G, the trustees of the owner of a piece of land, appealed against a declaration that M, the owner of a cottage adjacent to the land who had used the land as part of a communal garden, was entitled to reinstate a flower bed destroyed by G. The conveyance for M&#8217;s cottage had included a right of way over the disputed land. M had contended however that the right was more extensive by reason of use of the land over years. M had tended a garden on the land which included a grassed area and a flower bed. M had returned home one day to find that G, exercising what they believed to be their right over the land, had removed the flower bed in a bid to create a driveway across the land. M had commenced proceedings for, and was granted, a declaration that she was entitled to freehold rights over the land. G&#8217;s subsequent appeal was dismissed on the grounds that the facts of the case were sufficient to found an easement known to law. G argued that the easement was so wide as to be tantamount to a claim to use the land to the exclusion of the trustees, and was an attempt to pass off a claim for adverse possession, which could not succeed because of the communal use of the land, as a claim for an easement. G contended that such an extensive use could not be justified as an easement even if the subject of an express grant, and could not be created by way of prescription."
    ],
    "CITATION": "Mulvaney v Gough [2002] EWCA Civ 1078",
    "YEAR": "2002",
    "COUNSEL": "For M: Jonathan Gaunt Q.C. and Mark Harper. For G: Sean Kelly.",
    "JUDGE": "Simon Brown LJ; Mance LJ; Latham LJ",
    "CIT": "[2002] EWCA Civ 1078",
    "CATEGORIES": [
        "Real Property",
        "Conveyancing",
        "Easements",
        "Gardens",
        "Implied Covenants",
        "Prescription",
        "Title to Land"
    ],
    "HELD": [
        "allowing the appeal in part, that M was entitled to use the land as a communal garden but the right did not justify excluding the trustees from any use they may wish to make of the land, Ellenborough Park, Re [1956] Ch. 131 considered. Although G had not created or maintained the communal garden, the land had been used as such since the sale of the cottages. G had been content to allow the owners of the cottages to determine the layout of the garden and maintain it, facts which did not derogate from the conclusion that the trustees had been prepared to set aside the land for use as a communal garden. The declaration granted in favour of M went beyond what was necessary to reflect the right which had been established on the evidence. The restriction on the trustees could only be insofar as was necessary to ensure that the rights of M to use the land as a communal garden for recreational and amenity purposes were protected. In removing M&#8217;s flower bed without notice, G interfered with M&#8217;s rights. However, they were entitled to create a driveway over the land, as it would not necessarily interfere with the rights to use the land as a communal garden, but in carrying out works on the land, G had to ensure that the use of the land as a communal garden for recreational and amenity purposes was maintained."
    ],
    "CATEGORY": "Real Property &mdash; Conveyancing &mdash; Easements &mdash; Gardens &mdash; Implied Covenants &mdash; Prescription &mdash; Title to Land",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "244",
    "RELATED": [
        "(wl) Huckvale v Aegean Hotels",
        "(wl) Batchelor v Marlow",
        "(wl) Bridle v Ruby",
        "(wl) Stafford v Lee",
        "(wl) Wood v Waddington",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Goldberg v Edwards",
        "(wl) Gilbert v Spoor",
        "(wl) Moncrieff v Jamieson",
        "(wl) Pye Ltd v Graham",
        "(wl) Federated Homes v Mill Lodge",
        "(wl) Roake v Chadha"
    ],
    "NAME": "(wl) Wall v Collins",
    "SUMMARY": [
        "The court refused to grant an injunction or make an award of damages in respect of a neighbour dispute concerning a right of way."
    ],
    "CITATION": "Wall v Collins [2009] EWHC 2100 (Ch)",
    "ABSTRACT": [
        "The claimant (W) sought remedies to protect his right of way over land owned by the defendants (C) and sought damages for loss of amenity and loss of value of his property caused by intermittent obstructions of the right of way.",
        "W and C lived in adjoining semi-detached properties, W&#8217;s to the north of C&#8217;s. Roads ran to the front and rear of the properties and a passageway to the south of C&#8217;s property afforded access between the two roads. The passageway formed part of C&#8217;s title. It was not a public highway but it was established by the Court of Appeal in Wall v Collins [2007] EWCA Civ 444, [2007] Ch. 390 that W had an express right of way over it. In that case the court held that the right of way was exercisable for the benefit of a double garage constructed by W to the rear of his house. When C acquired their property gates had been erected at both ends of the passageway preventing vehicular access. Those gates were removed following the Court of Appeal&#8217;s decision. The gate at the eastern end was removed immediately, that at the western end some seven months later. W issued the instant claim two days after the western gate was removed. His case was that C had deliberately blocked the passageway both with the gates and with parked cars, and that only a perpetual injunction would protect his right of way."
    ],
    "YEAR": "2009",
    "COUNSEL": "For the claimant: In person with a McKenzie friend. For the defendants: Ian Foster.",
    "JUDGE": "Judge Hodge QC",
    "CIT": "[2009] EWHC 2100 (Ch)",
    "CATEGORIES": [
        "Real Property",
        "Damages",
        "Equitable Remedies",
        "Neighbour Disputes",
        "Obstruction",
        "Rights of Way"
    ],
    "HELD": [
        "Judgment for defendants.",
        "W&#8217;s claim should never have been brought. By the time he issued his claim form the gates had been removed and the offending parking had ceased. If there were any matters that still required determination the proper course would have been for him to have brought the matter back to court by way of application in the earlier action. It was long-established law that an action for disturbance of a right of way would not lie unless there was a real and substantial interference with its enjoyment having regard to the terms of the express grant. On the facts of the case, both the existence of the gates and the parking of cars in the passageway could constitute a substantial interference with W&#8217;s right of way. Until the removal of the western gate two days before W issued his claim form, he was clearly unable to exercise his vehicular right over the passageway. However, that had to be seen in the context of the fact that in recognising that W had a right of way over the passageway, the Court of Appeal indicated that it was not a right to use it for purposes for which he had a more, or equally, convenient access. While that observation could not stand following the decision in Brooks v Young [2008] EWCA Civ 816, [2008] 3 E.G.L.R. 27, C might for some time have been labouring under a genuine misapprehension as to the extent of W&#8217;s rights, Young referred to. That misapprehension had since been dispelled and C had satisfied the court that they did not intend to obstruct W&#8217;s right of way in the future. There was no ongoing obstruction to W&#8217;s exercise of his right of way and he had not made out any case of sufficient prior obstruction to sound in damages for inconvenience."
    ],
    "CATEGORY": "Real Property &mdash; Damages &mdash; Equitable Remedies &mdash; Neighbour Disputes &mdash; Obstruction &mdash; Rights of Way",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "245",
    "RELATED": [
        "(wl) Phipps v Pears",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Vridi v Chana",
        "(wl) Batchelor v Marlow",
        "(wl) Copeland v Greenhalf",
        "(wl) IDC v Clark",
        "(wl) Walby v Walby",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) Wright v Macadam",
        "(wl) Wood v Waddington",
        "(wl) Mulvaney v Gough",
        "(wl) Chaffe v Kingsley"
    ],
    "NAME": "(wl) Moncrieff v Jamieson",
    "SUMMARY": [
        "A servitudal right to park appurtenant to some identifiable dominant land was recognised by Scots law."
    ],
    "CITATION": "Moncrieff v Jamieson [2007] UKHL 42",
    "ABSTRACT": [
        "The appellant (J) appealed against a decision ( 2005 1 S.C. 281 ) that a right of vehicular access from a public road included a right to park on the servient tenement such vehicles as were reasonably incidental to the enjoyment of access to the dominant tenement.",
        "The respondents (M) owned a property situated between the foot of a steep escarpment and the foreshore. Vehicles could not be driven onto the property. The property once formed part of the lands owned by J and he was the owner of the land between the property and the public road. Since the property had no access to the public road, the rights conveyed by the disposition in 1973 included a right of access from the public road through J&#8217;s land. The effect of that conveyance was to confer a servitude right of access to the property from the public road for both pedestrian and vehicular traffic; and a right to stop vehicles on the servient tenement in order to turn, load and unload goods from them and set down and pick up passengers was accessory to the right of vehicular access. M claimed that there was also an accessory right to park vehicles on the servient tenement. The sheriff granted declarator that M were entitled to park vehicles on the servient tenement in the exercise of rights accessory to the servitude right of access and pronounced permanent interdict against J. The Court of Session dismissed an appeal.",
        "J submitted that it was not possible in the law of Scotland for there to be a servitude of parking; a permanent interdict was unnecessary and its terms were too uncertain to enable J to know what was prohibited by it."
    ],
    "YEAR": "2007",
    "COUNSEL": "For the appellants: Andrew Hajducki QC, Gordon Junor. For the respondents: Iain Mitchell QC, Nicholas Holroyd.",
    "JUDGE": "Lord Hope of Craighead; Lord Scott of Foscote; Lord Rodger of Earlsferry; Lord Mance; Lord Neuberger of Abbotsbury",
    "CIT": "[2007] UKHL 42",
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "CATEGORIES": [
        "Real Property",
        "Access",
        "Dominant Tenement",
        "Easements",
        "Implied Terms",
        "Parking",
        "Scotland",
        "Servient Tenement"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) A servitude right to park could be constituted as ancillary to a servitude right of vehicular access if it was necessary for the enjoyment of the servitude of access. (2) The express grant of a right of access had to be construed in the light of the circumstances that existed when it was granted in 1973, but it was not necessary for it to be shown that all the rights that were later claimed as necessary for the comfortable use and enjoyment of the servitude were actually in use at that date. It was sufficient that they might be considered to have been in contemplation at the time of the grant, having regard to what the dominant proprietor might reasonably be expected to do in the exercise of his right to convenient and comfortable use of the property, Ewart v Cochrane (1861) 4 Macq. 117 considered. In the particular and unusual circumstances of the instant case, the rights ancillary to the express grant of a right of access in favour of the dominant tenement included a right to park vehicles on the servient tenement, in so far as that was reasonably incidental to the enjoyment of the dominant tenement. (3) The history of the case justified the granting of interdict and in practice there ought to be no real difficulty in giving effect to the declarator or in enforcement of the interdict."
    ],
    "CATEGORY": "Real Property &mdash; Access &mdash; Dominant Tenement &mdash; Easements &mdash; Implied Terms &mdash; Parking &mdash; Scotland &mdash; Servient Tenement",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "246",
    "RELATED": [
        "(wl) Batchelor v Marlow",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Moncrieff v Jamieson",
        "(wl) Mulvaney v Gough",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) Phipps v Pears",
        "(wl) IDC v Clark",
        "(wl) Chaffe v Kingsley",
        "(wl) Copeland v Greenhalf",
        "(wl) Wood v Waddington",
        "(wl) Quennell v Maltby",
        "(wl) Lloyds Bank v Carrick"
    ],
    "NAME": "(wl) Vridi v Chana",
    "SUMMARY": [
        "Where a dominant landowner had successfully registered an exclusive right to park as an easement, denial of that right to an individual who in part owned the servient land, where the part within her ownership was not sufficient to park on, did not amount to a denial of her reasonable use of the servient land, as she would have to commit a trespass in order to park."
    ],
    "CITATION": "Vridi v Chana [2008] EWHC 2901 (Ch)",
    "ABSTRACT": [
        "The appellant landowner (V) appealed against a decision of an adjudicator entitling the respondent landowners (C) to register an easement to park over land in part owned by her.",
        "C had a right of way across a piece of unregistered land which adjoined V&#8217;s property. C claimed that they had acquired by prescription the right to park one car on part of the land. By an order of the adjudicator a plan was drawn up delineating in yellow the area over which C claimed a prescriptive right. The yellow land was in part owned by V and was in part within the unregistered land. The adjudicator determined that C had proved the requisite user to justify registration of the right to park as an easement, and that such an easement was capable of existing in law. However, the adjudicator did not limit the prescriptive right to the yellow land but extended it to a slightly larger gravelled area, as that larger area comprised the parking area in dispute. The adjudicator further held that there was room to park only a single car on the gravelled area and that C alone was entitled to exercise the right of parking.",
        "V submitted that (1) the adjudicator should have limited her consideration of the issues to the yellow land as indicated on the plan; (2) an easement could not exist giving the dominant owner an exclusive right to park in a single parking space."
    ],
    "YEAR": "2008",
    "COUNSEL": "For the appellant: W Hansen. For the respondents: J Stenhouse.",
    "JUDGE": "Judge Purle QC",
    "CIT": "[2008] EWHC 2901 (Ch)",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Easements",
        "Parking"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) Although the plan delineated the yellow land only, V had not been prejudiced by the adjudicator considering the gravelled area. Had C sought permission to amend the plan to mark on the gravelled area, the adjudicator could not have refused permission. Therefore, the adjudicator was right to consider the ouster issue in relation to the gravelled area as well as the yellow land. Moreover, even though the yellow land was marked on the plan the evidence had not discriminated between it and the gravelled area. In any event, if the gravelled area had been delineated on the plan the evidence presented would not have been any different and as the adjudicator considered both plots of land it would have been artificial and unjust to limit consideration to the yellow land only. (2) It could not be said that depriving V of the ability to park on the gravelled area amounted to denying her a reasonable use of the servient land. The part of the land that was within V&#8217;s ownership was not sufficient to park a car on and in order to do so she would have to trespass on the adjoining unregistered owner&#8217;s land to park on the gravelled area. A user that could only be sensibly effected by trespassing on adjoining land did not amount to a reasonable use of the servient land, and depriving V of that right did not render her ownership of the servient land illusory. The adjudicator had been wrong to accept that the test of user in Batchelor v Marlow [2001] EWCA Civ 1051, [2003] 1 W.L.R. 764 had been modified to one of possession and control by Moncrieff v Jamieson [2007] UKHL 42, [2007] 1 W.L.R. 2620, Moncrieff considered. While Moncrieff criticised the strict test of user in Batchelor it had not overruled it, and therefore Batchelor remained binding. However, the present case was distinguishable on the facts as the parking space was adjacent to V&#8217;s property and she had the ability to alter the surface for aesthetic reasons. The adjudicator had correctly noted that V was still able to maintain the part of the land that she owned and deal with it as the owner in that she had the ability to alter the surface of the land, maintain her fence, and plantage providing they did not interfere with the parking. None of those users of land could be dismissed as insignificant or illusory, Batchelor distinguished. In addition the adjudicator had had the benefit of hearing the witnesses and the advantage of a site view. Accordingly, the adjudicator had been right to conclude that easement was capable of existing in law and that the ouster principle did not apply."
    ],
    "CATEGORY": "Real Property &mdash; Easements &mdash; Parking",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "247",
    "RELATED": [
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Regent Oil v Gregory",
        "(wl) Reeves v Sandhu",
        "(wl) Crago v Julian",
        "(wl) KS Victoria Street v House of Fraser",
        "(wl) Good Harvest v Centaur",
        "(wl) Grand Junction Co v Bates",
        "(wl) Fitzkriston v Panayi",
        "(wl) Escalus Properties v Robinson",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Barrett v Morgan",
        "(wl) Re King"
    ],
    "NAME": "(wl) MRA Engineering Ltd v Trimester Corp",
    "SUMMARY": [
        "Agricultural holdings; enfranchisement; effect of partition of holding",
        "Partition of a leasehold interest without the landlord&#8217;s consent does not create two holdings for the purposes of the Leasehold Reform Act 1967. R&#8217;s predecessor&#8217;s in title demised a house and some land for a term of 99 years from December 1901. In 1955 the lease was assigned to a father and son who carried on a farming partnership using the land until 1963. They then entered into a deed of partition the father taking the house and a small portion of the land. In 1982, L purchased the father&#8217;s interest whereupon R learnt of the partition. In 1985 L gave notice that he wished to purchase the freehold, and thereafter sought a declaration that he was entitled to do so under the 1967 Act."
    ],
    "CITATION": "MRA Engineering Ltd v Trimester Corp [1990] 2 QB 430",
    "YEAR": "1990",
    "JUDGE": "Slade LJ; Dillon LJ; Staughton LJ",
    "CIT": "[1990] 2 QB 430",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Trusts",
        "Agricultural Holdings",
        "Assignment",
        "Enfranchisement",
        "Leases",
        "Reversions"
    ],
    "HELD": [
        "that the house was still comprised in an agricultural holding and thus L had no right of enfranchisement Jelley v Buckman [1974] Q.B. 488 applied."
    ],
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Trusts &mdash; Agricultural Holdings &mdash; Assignment &mdash; Enfranchisement &mdash; Leases &mdash; Reversions",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "248",
    "RELATED": [
        "(wl) Halsall v Brizall",
        "(wl) Ives v High",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Bridle v Ruby",
        "(wl) Wood v Waddington",
        "(wl) Chaffe v Kingsley",
        "(wl) Stafford v Lee",
        "(wl) Wilkinson v Kerdene",
        "(wl) Best v Chief Land Registrar",
        "(wl) Multiservice Bookbinding v Mardon",
        "(wl) Donovan v Rana",
        "(wl) Wall v Collins"
    ],
    "NAME": "(wl) Nickerson v Barraclough",
    "SUMMARY": [
        "Right of way; public policy",
        "In 1973 P bought a piece of land which was landlocked except for access to a highway over a bridge onto a lane belonging to D, who denied any right of way. P claimed title to a right of way from two conveyances to predecessors in title, one in 1906 giving no right of way until proposed new roads had been built, if ever. In 1922, an adjoining piece of land on the north side was conveyed. P claimed that the 1922 conveyance gave a right of way over the bridge to D&#8217;s land for access to the highway. She also claimed that the 1922 conveyance and the Law of Property Act 1925 s.62 granted the right of way. She further claimed that there was an implied way of necessity in the 1906 conveyance over the sites of new roads, as planned. P succeeded, the Vice Chancellor holding that she had a limited right of way &#8220;as now and heretofore used.&#8221; He further held that the 1906 conveyance would be construed in the interests of public policy so as to imply the grant of a way of necessity. D appealed."
    ],
    "CITATION": "Nickerson v Barraclough [1981] Ch 426",
    "YEAR": "1981",
    "JUDGE": "Buckley LJ; Eveleigh LJ; Brightman LJ",
    "CIT": "[1981] Ch 426",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Road Traffic",
        "Public Policy",
        "Rights of Way",
        "Roads"
    ],
    "HELD": [
        "allowing the appeal, the doctrine of the way of necessity was based on implication from circumstances, not public policy, which could play no part in the construction of a document. In construing the 1906 document, its express terms were that unless roads were made, there would be no right of way given. Before the 1922 conveyance, the bridge and lane were used for agricultural purposes and amateur sports.s.62 was not concerned with the future, but only with an advantage that could properly be regarded as appertaining to the land granted. Accordingly, P was entitled to the user appertaining at the time of the 1922 conveyance, namely for agricultural and amateur sports purposes."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Road Traffic &mdash; Public Policy &mdash; Rights of Way &mdash; Roads",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "249",
    "RELATED": [
        "(wl) Moncrieff v Jamieson",
        "(wl) Donovan v Rana",
        "(wl) Herbert v Doyle",
        "(wl) Stafford v Lee",
        "(wl) Walker v Burton",
        "(wl) Halifax v Popeck",
        "(wl) Link Lending v Bustard",
        "(wl) Gold Harp v McLeod",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Davis v Smith",
        "(wl) Lloyds Bank v Rosset",
        "(wl) Federated Homes v Mill Lodge"
    ],
    "NAME": "(wl) Walby v Walby",
    "SUMMARY": [
        "There were no grounds on which to imply into a transfer of part of farming land and buildings an easement of drainage in favour of the retained land, either on the basis of necessity, mutual benefit or to give effect to any intention as to the particular use of the land retained."
    ],
    "CITATION": "Walby v Walby [2012] EWHC 3089 (Ch)",
    "ABSTRACT": [
        "In a claim for rectification of a transfer deed, the court considered whether the second claimant (D), the transferor, had impliedly reserved to himself an easement for drainage for buildings retained by him.",
        "D owned the freehold of land and buildings over which he granted a tenancy to himself and his wife as a farming partnership. In 1989, he executed a transfer of part of the farm to the first defendant (M), his son, by way of gift. The land transferred, which included part of an existing building used for housing cattle and part of a yard in front of the building, was not delineated by a boundary following any physical feature of the building. In 2001, D sold to the first claimant (X), another of his sons, the land which he had retained at the time of the 1989 transfer (the retained land). A specialised drainage system was installed on the farm around the time of the 1989 transfer. On the basis that it was in existence prior to that transfer, D and X claimed that an easement of drainage had been impliedly reserved by the transfer to M.",
        "D and X contended that an easement of drainage was impliedly reserved as an easement of necessity; that drainage easements had been both impliedly granted and reserved as reciprocal easements, since the drainage system operated for the benefit of both the land transferred and the retained land; and that the reservation of a drainage easement was necessary to give effect to a common intention of the parties as to a particular use of the retained land."
    ],
    "YEAR": "2012",
    "COUNSEL": "For the claimants: Emily Windsor. For the defendants: Mark Wonnacott.",
    "JUDGE": "Morgan J",
    "CIT": "[2012] EWHC 3089 (Ch)",
    "CATEGORIES": [
        "Real Property",
        "Derogation From Grant",
        "Farms",
        "Implied Easements",
        "Implied Reservations",
        "Land Drainage",
        "Necessity",
        "Reciprocity",
        "Rectification",
        "Servient Tenement",
        "Transfer of Land"
    ],
    "HELD": [
        "Judgment accordingly.",
        "(1) The Law of Property Act 1925 s.65 had the effect of creating a legal easement in favour of the transferor even where the transfer was not executed by the transferee, whether the reservation was express or implied. Thus, the fact that M did not execute the 1989 transfer did not preclude D and X from arguing that the transfer impliedly reserved easements to D in relation to the retained land (see para.27 of judgment). (2) The test for implying an easement of necessity was a strict one. It was not enough to show that the easement was necessary for the reasonable enjoyment of the land retained; the facts had to be such that the retained land could not be used at all without the implication of an easement, Union Lighterage Co v London Graving Dock Co [1902] 2 Ch. 557 and MRA Engineering Ltd v Trimster Co Ltd (1988) 56 P. &amp; C.R. 1 applied. In the instant case, there were no grounds on which to imply the reservation of a drainage easement on the basis of necessity because the absence of such an easement did not have much impact on the use that could be made of the retained part of the building and the yard, which were not self-contained parts (paras 32, 49). (3) The movement of effluent and other liquid began on the retained land. If the transfer had reserved a right to drain onto the land transferred, then the land transferred would have the burden of dealing with that effluent. However, if there were no reserved right of drainage, then the land transferred could refuse to accept effluent from the retained land. As it was far from clear that there would be an implied grant of a drainage easement in favour of the land transferred over the land retained, it was difficult for D and X to establish the case for an implied reservation of a drainage easement from the retained land onto the land transferred. The flow of effluent and other liquid onto the land transferred would be an obvious burden in excess of any arguable benefit. There was therefore no implied derogation from the express grant to M and no reason to hold that he took the land transferred in 1989 subject to the burden of being obliged to deal with effluent water from the land retained, Pyer v Carter 156 E.R. 1472 considered (paras 50-51, 56-58). (4) Given the factual findings in the instant case, it was not possible to hold that a drainage easement should be impliedly reserved to give effect to an intention that the retained land should be used in some definite and particular manner. It was therefore not possible to imply into the 1989 transfer the reservation of an easement of drainage in favour of the retained land (paras 59-60)."
    ],
    "CATEGORY": "Real Property &mdash; Derogation From Grant &mdash; Farms &mdash; Implied Easements &mdash; Implied Reservations &mdash; Land Drainage &mdash; Necessity &mdash; Reciprocity &mdash; Rectification &mdash; Servient Tenement &mdash; Transfer of Land",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "250",
    "RELATED": [
        "(wl) Wood v Waddington",
        "(wl) Chaffe v Kingsley",
        "(wl) Bucks CC v Moran",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Donovan v Rana",
        "(wl) Pye Ltd v Graham",
        "(wl) Walby v Walby",
        "(wl) Sava v SS Global Ltd",
        "(wl) Wall v Collins",
        "(wl) Wilkinson v Kerdene",
        "(wl) Bridle v Ruby",
        "(wl) Central Midlands Estates v Leicester Dyers"
    ],
    "NAME": "(wl) Stafford v Lee",
    "SUMMARY": [
        "In determining whether an intended easement should be implied, the requirement that the parties should have intended a definite and particular use of the land conveyed did not require that the intention be proved as a certainty. It was enough that it was proved on the balance of probabilities."
    ],
    "CITATION": "Stafford v Lee (1993) 65 P &amp; CR 172",
    "ABSTRACT": [
        "The defendants (L) appealed against a decision of a county court judge declaring that the plaintiffs (S) were entitled to a right of way along a section of roadway owned by L.",
        "S owned an area of woodland, and had been granted planning permission to build a dwelling on it. The only practicable means of access to the land was over and along L&#8217;s roadway. S&#8217;s land had been transferred to the original owner in 1955 by a deed of gift. The deed described the land conveyed as having a frontage to the roadway, but contained no express grant of a right of way over it. S claimed entitlement to an &#8220;intended easement&#8221;, as described in Pwllbach Colliery Co Ltd v Woodman [1915] A.C. 634. L admitted in their defence that the 1955 deed passed to the donee a right to use the roadway, and that that right had passed to S. However, their case was that the right was limited to use for all purposes necessary for the reasonable enjoyment of the land as woodland, which was the manner of its enjoyment in 1955. The judge held that S could establish an entitlement to the easement based on the Pwllbach Colliery principle."
    ],
    "YEAR": "1993",
    "COUNSEL": "For the defendants: Jacqueline Baker. For the plaintiffs: Philip Rossdale.",
    "JUDGE": "Nourse LJ; Russell LJ",
    "CIT": "(1993) 65 P &amp; CR 172",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Conveyances",
        "Implied Easements",
        "Intention",
        "Residential Use",
        "Rights of Way",
        "Uses"
    ],
    "HELD": [
        "Appeal dismissed",
        "Appeal dismissed. (1) Intended easements, like all other implied easements, were subject to the general rule that they were implied more readily in favour of a grantee than a grantor. Nevertheless, the parties had to intend that the subject of the grant should be used in some definite and particular manner. If the grantee could establish the requisite intention, the law would then imply the grant of such easements as might be necessary to give effect to it, Pwllbach Colliery applied. It was axiomatic that in construing any conveyance, the facts in reference to which it was made had to be taken into account. In the instant case, no extrinsic evidence had been adduced, so the court could only refer to the 1955 deed. The material question in the instant case was not how the land was enjoyed in 1955, but whether the parties to the deed had intended that it should be used in some definite and particular manner. The requirement that the parties should have intended a definite and particular use of the land did not require that the intention be proved as a certainty. It was enough that it was proved on the balance of probabilities. (2) The plan annexed to the deed could be relied upon for the purpose of establishing the parties&#8217; intention as to the use to which the land should be put. It was part of the material agreed on by the parties: there was no reason why their common intention, if it was not expressed, should not be implied from that as much as from any other part of the agreed material. The plan delineated, as the land conveyed, a plot adjoining two other similar-sized plots on which dwellings had already been constructed. On the balance of probabilities, the parties could only have intended that the land should be used for the construction of another dwelling to be used thereafter for residential purposes. No other intention could reasonably be imputed to them. The easements claimed by S and declared in their favour by the judge were necessary, and were no more than was necessary, to give effect to the intention so established."
    ],
    "CATEGORY": "Real Property &mdash; Conveyances &mdash; Implied Easements &mdash; Intention &mdash; Residential Use &mdash; Rights of Way &mdash; Uses",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "251",
    "RELATED": [
        "(wl) IDC v Clark",
        "(wl) Chaffe v Kingsley",
        "(wl) Donovan v Rana",
        "(wl) Walby v Walby",
        "(wl) Mulvaney v Gough",
        "(wl) Wright v Macadam",
        "(wl) Phipps v Pears",
        "(wl) Copeland v Greenhalf",
        "(wl) Wood v Waddington",
        "(wl) Hounslow LBC v Minchinton",
        "(wl) Moncrieff v Jamieson",
        "(wl) Wheeler v JJ Saunders"
    ],
    "NAME": "(wl) Wong v Beaumont Property Trust",
    "SUMMARY": [
        "Necessity; necessity not realised at time of grant",
        "An easement of necessity may impliedly be granted even though the parties did not realise that necessity at the time of the grant. A basement was let as a restaurant, the tenant covenanting to use the premises as a popular restaurant, to control and eliminate all smells and odours and to comply with the health regulations, one of which requires suitable ventilation. There was no such ventilation, though it was not realised at that time that a duct was necessary for this, and the tenant under the lease sued the landlord in the county court for damages and a declaration that he was entitled to erect a duct to the roof."
    ],
    "CITATION": "Wong v Beaumont Property Trust [1965] 1 QB 173",
    "YEAR": "1965",
    "JUDGE": "Lord Denning MR; Pearson LJ; Salmon LJ",
    "CIT": "[1965] 1 QB 173",
    "FLAGS": [
        "Denning"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Civil Procedure",
        "Easements",
        "Necessity",
        "Restaurants",
        "Right to Air"
    ],
    "HELD": [
        "that (a) the county court had jurisdiction, on the assumption, not disproved by the evidence, that the rateable value of neither of the properties exceeded GBP 400; (b) there was an easement of necessity and the declaration should be made. ( Pwllbach Colliery Co Ltd v Woodman [1915] A.C. 634 applied)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Civil Procedure &mdash; Easements &mdash; Necessity &mdash; Restaurants &mdash; Right to Air",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "252",
    "RELATED": [
        "(wl) Wilkinson v Kerdene",
        "(wl) Mulvaney v Gough",
        "(wl) Moncrieff v Jamieson",
        "(wl) Halsall v Brizall",
        "(wl) Sava v SS Global Ltd",
        "(wl) Stafford v Lee",
        "(wl) Pye Ltd v Graham",
        "(wl) Batchelor v Marlow",
        "(wl) Bucks CC v Moran",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Central Midlands Estates v Leicester Dyers"
    ],
    "NAME": "(wl) Chaffe v Kingsley",
    "SUMMARY": [
        "Appellant claimed right of way over respondent&#8217;s land and right to build roadway on it based on conveyances made by predecessors in title; contention that although no express reservation of rights, those rights were to be implied; rights clearly contemplated by predecessors, common intention to reserve, exercisable in perpetuity, could not be established",
        "C commenced proceedings against K, his neighbour, following a number of minor incidents. K counterclaimed in relation to disputed easements. K claimed a right for himself and his successors in title to Lostock Hall Farm, to enter the property of C, known as The Paddock, for the purpose of constructing a road leading to Lostock Hall Farm and thereafter a right of way over that road. The proposed extension of the roadway encroached upon the boundaries of The Paddock. K based his claim on two conveyances of plots of land that now formed part of The Paddock, which included easements providing a right of way over the land for the purpose of the roadway. One conveyance included an attached plan detailing the existing roadway and by means of a dotted line the proposed future line of road improvement leading to Lostock Hall Farm. The other conveyance included easements providing a right of way over an &#8220;intended road&#8221; to Lostock Hall Farm. No extension to the roadway occurred prior to 1989 when K began to construct an extension to the roadway. At first instance, K&#8217;s counterclaim was dismissed and K appealed, contending that, while neither of the conveyances contained an express reservation of the rights within them, on their true construction a reservation of those rights was to be implied and as successor in title K could therefore still benefit from the easements. C argued that even if an implied reservation existed, it was only exercisable within a reasonable time from the date of grant and on this basis the rights were unenforceable because a reasonable time had expired."
    ],
    "CITATION": "Chaffe v Kingsley (2000) 79 P &amp; CR 404",
    "YEAR": "2000",
    "COUNSEL": "For C: Simon Berry Q.C. and John Dagnall. For K: Jonathan Brock Q.C. and David Ainger.",
    "JUDGE": "Evans LJ; Sedley LJ; Jonathan Parker J",
    "CIT": "(2000) 79 P &amp; CR 404",
    "CATEGORIES": [
        "Real Property",
        "Easements",
        "Intention",
        "Interpretation",
        "Roads"
    ],
    "HELD": [
        "dismissing the appeal, that (1) there was no clear evidence of a common intention at the time when the two conveyances were originally granted that the easements contained within them should be exercisable in perpetuity. It was clear that an extension to the roadway had been contemplated at some point in the future but that did not imply a reservation of the right to construct the road after the expiry of a reasonable time, and (2) furthermore, any common intention to reserve a right could not successfully form the basis of an implied reservation where the precise nature and extent of that right had never been defined, Webb&#8217;s Lease, Re [1951] Ch. 808, Wheeldon v Burrows (1879) 12 Ch. D. 31, Philips Electronique Grand Public SA v British Sky Broadcasting Ltd [1995] E.M.L.R. 472, Trollope &amp; Colls Ltd v North West Metropolitan Regional Hospital Board [1973] 1 W.L.R. 601 and Peckham v Ellison (1999) 31 H.L.R. 1030 considered."
    ],
    "CATEGORY": "Real Property &mdash; Easements &mdash; Intention &mdash; Interpretation &mdash; Roads",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "253",
    "RELATED": [
        "(wl) Walby v Walby",
        "(wl) Stafford v Lee",
        "(wl) Wong v Beaumont Property Trust",
        "(wl) Bridle v Ruby",
        "(wl) Batchelor v Marlow",
        "(wl) Ives v High",
        "(wl) Goldberg v Edwards",
        "(wl) Wheeler v JJ Saunders",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) Wood v Waddington",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Wall v Collins"
    ],
    "NAME": "(wl) Donovan v Rana",
    "SUMMARY": [
        "An easement was implied into the transfer of a building plot allowing the transferee and his successors in title access to a plot of land to install and maintain connections to the public utility services in the road. The easement was necessary to achieve the inferred common intention of the parties that the building of a dwelling-house on the building plot would have included the connection to mains utility services across the obvious route."
    ],
    "CITATION": "Donovan v Rana [2014] EWCA Civ 99",
    "ABSTRACT": [
        "The appellants (D) appealed against the dismissal of their claim for damages against the respondents (R) for having dug up a small plot of land (&#8220;the blue land&#8221;) forming part of D&#8217;s property to connect utilities to R&#8217;s building plot.",
        "At auction D had sold the building plot adjoining their property with an express right of way over the blue land which separated the building plot from the road. The transfer granted an express right to pass over the blue land &#8220;for all purposes connected with the use and enjoyment of the land but not for any other purpose&#8221;. It included a provision that, save for any express rights of way or access, no rights of way or access for the benefit of the property over the blue land would be &#8220;expressly implied granted or reserved&#8221;. R were the successors in title to the original purchasers of the building plot and built a house on it. Without D&#8217;s express permission, R allowed workmen to dig up the blue land in order to connect their utilities to the mains service a few metres away in the road. The judge dismissed D&#8217;s claim on the basis that it was the common intention of the parties to the original transfer of the building plot that it would be used to build a house with modern facilities connected up to the street. He held that there was an implication of a right to connect through the blue land and that, once a common intention to install utility connections had been established, it followed that rights of access that had already been granted could be used for putting in those connections.",
        "D submitted that (1) the transfer expressly excluded any further rights of access so that the judge was wrong to imply an easement that included further rights; (2) the judge was wrong to infer an intention that any house built on the building plot would be connected to all normal utilities and to have found an implied grant of easements that far exceeded what was necessary to give effect to the common intention of building a house."
    ],
    "YEAR": "2014",
    "COUNSEL": "For the appellants: Nicholas Isaac (Direct Access). For the respondents: Peter Fox (Direct Access).",
    "JUDGE": "Moore-Bick LJ; Rimer LJ; Vos LJ",
    "CIT": "[2014] EWCA Civ 99",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Torts",
        "Implied Easements",
        "Necessity",
        "Nuisance",
        "Rights of Way",
        "Trespass to Land",
        "Utilities"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) The judge was right to hold that the express provisions of the transfer did not exclude the implied easement which he held to exist. The transferee was granted an express right of way over the blue land for the use and enjoyment of the land and one such purpose was the laying of connections to utilities. Accordingly, if there was an easement of necessity allowing such connections to be laid or maintained, a right of way to facilitate it would already exist on the blue land. The proposed easement did not violate the inhibitions stated in the transfer (see paras 16-18 of judgment). (2) The amended defence had pleaded an inferred and implied easement of necessity. The blue land was undoubtedly intended for access to both properties. It was clear from the auction particulars that the purpose of the transfer was to enable the transferee to build a dwelling-house on the building plot. The suggestion that such a dwelling-house might sensibly be expected by the parties to be constructed without connections to the mains utilities was optimistic. The judge was right, applying Lord Parker&#8217;s second test in Pwllbach Colliery Co Ltd v Woodman [1915] A.C. 634, the parties must be taken to have intended that the building of a dwelling-house on the building plot would have included the connection to mains utility services across the obvious route of the blue land, Pwllbach and Stafford v Lee (1993) 65 P. &amp; C.R. 172 followed. The easement proposed was necessary to achieve the parties&#8217; expressly intended purpose. It was not seeking to manufacture a necessity out of what was merely reasonable or desirable (paras 26-29, 32-33). (3) The easement was to be implied into the transfer allowing the transferee and his successors in title access to the blue land to install and maintain connections to the public utility services in the road (para.34)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Torts &mdash; Implied Easements &mdash; Necessity &mdash; Nuisance &mdash; Rights of Way &mdash; Trespass to Land &mdash; Utilities",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "254",
    "RELATED": [
        "(wl) Harris v Flower",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Vridi v Chana",
        "(wl) Mulvaney v Gough",
        "(wl) Donovan v Rana",
        "(wl) Moncrieff v Jamieson",
        "(wl) Wright v Macadam",
        "(wl) Wood v Waddington",
        "(wl) Batchelor v Marlow",
        "(wl) Phipps v Pears",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) IDC v Clark"
    ],
    "NAME": "(wl) Wheeler v JJ Saunders",
    "SUMMARY": [
        "Smell; pig housing units erected in close proximity to neighbouring dwellings pursuant to planning permission; whether grant of planning permission constituting defence to action in nuisance",
        "P bought a farmhouse and outbuildings on land adjacent to D&#8217;s pig farm. Both P&#8217;s property and the farmland were formerly in common ownership. There were two means of access to P&#8217;s property, one of which (&#8220;the south entrance&#8221;) could only be reached by crossing a part of D&#8217;s land but there was no express right of way and D took the view that P were not entitled to use it and blocked it off with a wall. D also applied for and, despite P&#8217;s objections, obtained planning permission to build two pig housing units on their land, one of which was only a few metres away from one of P&#8217;s outbuildings which was used as a holiday cottage. In proceedings, P obtained damages against D for obstructing a right of way to their property with the new wall and for nuisance in the form of smell from the pigs in the housing units, and injunctions requiring D to demolish the wall and restraining them from keeping pigs in the housing units. On D&#8217;s appeal P contended for an implied grant in their conveyance of an easement of necessity entitling them to a right of way over D&#8217;s land. D argued that no such right was intended and, as regards the nuisance, contended that since they had obtained planning permission for the pig housing units, any smell emanating therefrom could not amount to a nuisance in law."
    ],
    "CITATION": "Wheeler v JJ Saunders [1996] Ch 19",
    "YEAR": "1996",
    "COUNSEL": "For S: Gregory Stone Q.C. and Charles Auld. For W: Joseph Harper Q.C. and David Phillips.",
    "JUDGE": "Staughton LJ; Gibson LJ; Sir John May",
    "CIT": "[1996] Ch 19",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Torts",
        "Easements",
        "Nuisance",
        "Odours",
        "Pigs",
        "Planning Permission"
    ],
    "HELD": [
        "allowing the appeal in part, that (1) the class of easements implied in favour of a grantee included easements necessary to the reasonable enjoyment of the property granted and which had been and were at the time of the grant used by the owners of the entirety for the benefit of the part granted but that, on the facts, the south entrance to P&#8217;s property was not necessary for its reasonable enjoyment since the other entrance would do just as well and it followed that P acquired no right of way through the south entrance, Wheeldon v Burrows (1879) 12 Ch. D. 31, Sovmots Investments Ltd v Secretary of State for the Environment [1979] A.C. 144 considered; (2) unlike Parliament, a planning authority had no jurisdiction to authorise a nuisance save insofar as it had a statutory power to permit a change in the character of a neighbourhood and the nuisance was such that it inevitably resulted from the authorised use, and (3) in the present case, the planning permission granted was not a strategic planning decision affected by considerations of public interest but amounted only to a change of use of a small piece of land for the benefit of P and to the detriment of the objectors in the quiet enjoyment of their house and as such it followed that the judge was entitled to conclude that the planning consents did not prevent P from succeeding in their claim in nuisance, Allen v Gulf Oil Refining Ltd [1981] A.C. 1001 considered."
    ],
    "CATEGORY": "Torts &mdash; Easements &mdash; Nuisance &mdash; Odours &mdash; Pigs &mdash; Planning Permission",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "255",
    "RELATED": [
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) Stafford v Lee",
        "(wl) Batchelor v Marlow",
        "(wl) Copeland v Greenhalf",
        "(wl) Link Lending v Bustard",
        "(wl) Mulvaney v Gough",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Ashburn v Arnold",
        "(wl) Moncrieff v Jamieson",
        "(wl) Lloyds Bank v Rosset",
        "(wl) Bridle v Ruby"
    ],
    "NAME": "(wl) Wood v Waddington",
    "SUMMARY": [
        "A claim for rights of way over land was dismissed where the rights claimed were not (i) expressly granted to the claimants&#8217; predecessors in title by the transfer of land to them and reserved out of the transfer of land to the defendant; (ii) advantages to be enjoyed with the land which became easements under the Law of Property Act 1925 s.62; (iii) implied into the transfer under the rule in Wheeldon v Burrows (1879) 12 Ch. D. 31. The defendant&#8217;s counterclaim for infringement of his right of way over the claimants&#8217; land was rejected since, although the right of way had been narrowed by the claimants&#8217; construction of a building, sufficient width remained for him to use it."
    ],
    "CITATION": "Wood v Waddington [2014] EWHC 1358 (Ch)",
    "ABSTRACT": [
        "The claimants (C) claimed rights of way over land owned by the defendant (D), and D counterclaimed alleging C&#8217;s infringement of his admitted right of way over their land.",
        "The land owned by C and D had previously been owned by one individual as a residential, agricultural and sporting estate. In 1998, part of the land was conveyed to D, and part to C&#8217;s predecessors in title (S). The transfer to S was &#8220;subject to and with the benefit of all liberties privileges and advantages of a continuous nature now used or enjoyed by or over the property&#8221;. The transfer to S contained a mirror clause. D&#8217;s land was crossed by two bridleways, although riders generally followed a different route over it. The land conveyed to S granted D a right of way along a boundary. C purchased S&#8217;s land in 2009 and carried out extensive works on it to further a livery stables business, including the narrowing of a concrete track over which D had a right of way by building next to it. They and their clients crossed over D&#8217;s land other than on the designated bridleways. In 2012, D erected gates which prevented them from continuing to do that, and C issued proceedings claiming four rights of way over D&#8217;s land.",
        "C contended that the rights claimed were (1) expressly granted to S by the transfer to them and reserved out of the transfer to D; (2) advantages enjoyed with the land transferred to S and became easements pursuant to the Law of Property Act 1925 s.62; (3) to be implied into the transfer to S either under the rule in Wheeldon v Burrows (1879) 12 Ch. D. 31or to give effect to the way in which the land transferred was intended to be used. D submitted that C had substantially interfered with the right of way expressly granted to him by the transfer to him and expressly reserved out of the transfer to S."
    ],
    "YEAR": "2014",
    "COUNSEL": "For the claimants: Martin Hutchings QC, Simon Atkinson. For the defendant: Jonathan Gaunt QC.",
    "JUDGE": "Morgan J",
    "CIT": "[2014] EWHC 1358 (Ch)",
    "CATEGORIES": [
        "Real Property",
        "Conveyances",
        "Easements",
        "Express Grant",
        "Implied Grant",
        "Occupation",
        "Reservations",
        "Rights of Way"
    ],
    "HELD": [
        "Judgment accordingly.",
        "(1) On the proper construction of the original property transfers, a right of way was not a liberty, privilege or advantage &#8220;of a continuous nature&#8221;. Those words had to be given their established conveyancing meaning as excluding rights of way. The transfer to S did not, therefore, grant them the rights of way later claimed by C. Even if the phrase &#8220;of a continuous nature&#8221; was given some looser meaning, on the evidence there was no regular and frequent use of the claimed rights of way prior to the transfer (see paras 91-93 of judgment). (2) Section 62 could operate to create and easement or a right which did not previously exist because of unity of ownership before the relevant conveyance. There was no absolute rule that a right of way could not be claimed under s.62 where there had not been diversity of occupation before the relevant conveyance: a right of way could pass under s.62 without diversity of occupation, provided always that the right was continuous and apparent, Sovmots Investments Ltd v Secretary of State for the Environment [1979] A.C. 144 considered, P&amp;S Platt Ltd v Crouch [2003] EWCA Civ 1110, [2004] 1 P. &amp; C.R. 18 and Alford v Hannaford [2011] EWCA Civ 1099, [2012] 1 P. &amp; C.R. DG2 followed. The ultimate question was whether the advantage claimed was, on the facts, &#8220;enjoyed with&#8221; the land conveyed. A consideration of how the land was actually used and whether it was apparently for the benefit of the land conveyed and apparently a burden on the land retained would be of great importance. There was no evidence that any of the four rights of way claimed by C had been enjoyed with the land conveyed. C were therefore unable to rely on s.62 to assert any rights of way (paras 110, 119, 128, 131, 133-138). (3) For an implied right of way to have arisen, C had to show that, at the date of the transfer to S, the rights claimed were (a) continuous and apparent in that they were enjoyed for the benefit of the land conveyed; (b) necessary for the reasonable and convenient enjoyment of the property conveyed; (c) not inconsistent with the conveyance&#8217;s express terms, Wheeldon followed. The requirement that the right claimed be necessary was an important qualification of the rule, Moncrieff v Jamieson [2007] UKHL 42, [2007] 1 W.L.R. 2620 followed. On the evidence, none of the rights of way claimed were necessary for the reasonable and convenient enjoyment of the land conveyed. Nor had S had a common intention as to a definite and particular use of the land which made it necessary for them to have any of the rights now claimed. No rights of way had been granted to C by implication (paras 144-145, 148, 151-154, 156, 162). (4) Simply to narrow an area over which there was a right of way would not necessarily involve an actionable interference with the right of way; the question was how much width was left. Notwithstanding C&#8217;s construction of a new building beside D&#8217;s right of way, there remained a sufficient width of track over which he could exercise his right so that it had not been substantially interfered with (paras 165, 176)."
    ],
    "CATEGORY": "Real Property &mdash; Conveyances &mdash; Easements &mdash; Express Grant &mdash; Implied Grant &mdash; Occupation &mdash; Reservations &mdash; Rights of Way",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "256",
    "RELATED": [
        "(wl) Wright v Macadam",
        "(wl) AG Securities v Vaughan",
        "(wl) Ives v High",
        "(wl) Crago v Julian",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Ofulue v Bossert",
        "(wl) Fitzkriston v Panayi",
        "(wl) Escalus Properties v Robinson",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Antoniades v Villiers",
        "(wl) Oceanic Village Ltd v United Attractions Ltd"
    ],
    "NAME": "(wl) Goldberg v Edwards",
    "SUMMARY": [
        "Grant; implied grant; right of access to back land",
        "In s.62(2) of the Law of Property Act, 1925, which provides that &#8220;a conveyance of land, having houses or other buildings thereon, shall be deemed to include and shall by virtue of this Act operate to convey, with the land all . . . rights, and advantages whatsoever, appertaining or reputed to appertain to the land, houses or other buildings conveyed, or any of them, or any part thereof, or, at the time of conveyance, demised, occupied or enjoyed with, or reputed or known as part or parcel of or appurtenant to, the land, houses, or other buildings conveyed, or any of them, or any part thereof&#8221;, the expression &#8220;at the time of conveyance&#8221; means in the case of a lease, not the date from which the term granted by the lease runs, but the date of the instrument in writing, if there is one. Such a right may be personal to the lessees qua lessees. The owner of a house agreed to let to tenants for two years from January 18, 1947, an annexe at the back of her house. Access to the annexe was permitted to the tenants through the house, though there was other access to it from waste land at the back. On July 10, 1947, the lease was executed. The landlord then let the house to another tenant, who purported to bar the access through it to the annexe. Held, (1) it required strong evidence to show that a right to pass through another&#8217;s premises &#8220;was necessary for the reasonable and convenient enjoyment&#8221; of premises behind, and, therefore, there could be no implied grant apart from s.62 of the Law of Property Act, 1925; (2) under the provisions of that section the tenants had, however, established a right in themselves alone as lessees, and not in their servants or workmen or persons authorised by them, to pass through the house to and from the annexe. ( Wright v Macadam [1949] 2 K.B. 744 applied)."
    ],
    "CITATION": "Goldberg v Edwards [1950] Ch 247",
    "YEAR": "1950",
    "JUDGE": "Sir Raymond Evershed MR",
    "CIT": "[1950] Ch 247",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Implied Terms",
        "Leases",
        "Rights of Way",
        "Statutory Rights"
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Implied Terms &mdash; Leases &mdash; Rights of Way &mdash; Statutory Rights",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "257",
    "RELATED": [
        "(wl) Wheeler v JJ Saunders",
        "(wl) Shaw v Applegate",
        "(wl) Bridle v Ruby",
        "(wl) Wall v Collins",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Wrotham Park Estate Co v Park Homes",
        "(wl) Davis v Smith",
        "(wl) Batchelor v Marlow",
        "(wl) Bedson v Bedson",
        "(wl) Mulvaney v Gough",
        "(wl) Donovan v Rana",
        "(wl) Patel v Pirabakaran"
    ],
    "NAME": "(wl) Harris v Flower",
    "SUMMARY": [
        "The Supreme Court set out the approach to be adopted when a court had to consider whether to award damages or grant an injunction in a nuisance case."
    ],
    "CITATION": "Harris v Flower [2014] UKSC 13",
    "ABSTRACT": [
        "The appellants (L) appealed against a decision ([2012] EWCA Civ 26, [2012] 1 W.L.R. 2127) that activities on land close to their home did not constitute a nuisance.",
        "The first respondent (C) was the operator of a stadium, constructed in 1976, where speedway and stock-car racing had taken place. The second respondent (M) operated a motocross track at the rear of the stadium. Planning permissions covering the speedway racing and motocross activities had been granted, while a certificate of lawful use covered the stock-car racing. In 2006, L moved into a bungalow located near the stadium. The judge at first instance upheld their claim that noise coming from the stadium and track amounted to a nuisance, but the judge&#8217;s finding was reversed on appeal. The instant appeal raised the following issues: (i) the extent, if any, to which it was open to a defendant to argue that he had established a prescriptive right to commit what would otherwise be a nuisance by means of noise; (ii) the extent, if any, to which the defendant could rely on the fact that the claimant &#8220;came to the nuisance&#8221;; (iii) the extent, if any, to which it was open to the defendant to invoke the actual use of his premises when assessing the character of the locality; (iv) the extent, if any, to which the grant of planning permission for a particular use could affect the question of whether that use was a nuisance; (v) the approach to be adopted by a court when deciding whether to grant an injunction to restrain a nuisance or whether to award damages instead."
    ],
    "YEAR": "2014",
    "COUNSEL": "For the appellants: Stephen Hockman QC, William Upton. For the respondents: Robert McCracken QC, Sebastian Kokelaar.",
    "JUDGE": "Lord Neuberger PSC; Lord Mance JSC; Lord Clarke JSC; Lord Sumption JSC; Lord Carnwath JSC",
    "CIT": "[2014] UKSC 13",
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "CATEGORIES": [
        "Nuisance",
        "Damages",
        "Injunctions",
        "Noise",
        "Planning Permission",
        "Prescription",
        "Remedies"
    ],
    "HELD": [
        "Appeal allowed.",
        "(1) In the light of the relevant principles, practical considerations and judicial dicta, it was possible to obtain by prescription a right to commit what would otherwise be a nuisance by noise (see para.41 of judgment). (2) It was no defence for a defendant sued in nuisance to argue that the claimant came to the nuisance, although it might well be a defence, at least in some circumstances, for a defendant to argue that, as it was only because the claimant had changed the use of, or built on, his land that the defendant&#8217;s pre-existing activity was claimed to have become a nuisance, the claim should fail (para.58). (3) A defendant, faced with a contention that his activities gave rise to a nuisance, could rely on those activities as constituting part of the character of the locality, but only to the extent that they did not constitute a nuisance. Similarly, any other activity in the neighbourhood could properly be taken into account when assessing the character of the neighbourhood, to the extent that it did not give rise to an actionable nuisance or was otherwise unlawful (paras 74-75). (4) The mere fact that the activity which was said to give rise to the nuisance had the benefit of a planning permission would normally be of no assistance to the defendant in a claim brought by a neighbour who argued that the activity caused a nuisance to his land in the form of noise or other loss of amenity. Among other things, it was wrong in principle that, through the grant of a planning permission, a planning authority should be able to deprive a property-owner of a right to object to what would otherwise be a nuisance, without providing him with compensation, when there was no provision in the planning legislation which suggested such a possibility (paras 90, 94). (5) The court&#8217;s power to award damages in lieu of an injunction involved a classic exercise of discretion, which should not, as a matter of principle, be fettered, although the prima facie position was that an injunction should be granted. As to the four tests set out Shelfer v City of London Electric Lighting Co (No.1) [1895] 1 Ch. 287, their application should not be such as to fetter the exercise of the court&#8217;s discretion. However, it would, in the absence of additional relevant circumstances pointing the other way, normally be right to refuse an injunction if those four tests were satisfied. But the fact that those tests were not all satisfied would not mean that an injunction should be granted, Shelfer considered. The public interest, if it arose, would be a relevant factor; for example, a court would be entitled to have regard to the fact that many other neighbours in addition to the claimant were badly affected by the nuisance as a factor in favour of granting an injunction. In some cases, the grant of planning permission for a particular activity might provide strong support for the contention that the activity was of benefit to the public, which would be relevant to the question of whether or not to grant an injunction (paras 120-121, 123-125). (6) The application of the above principles justified the restoration of the injunction granted by the judge at first instance. Among other things, C and M had not shown that their activities during a period of 20 years amounted to a nuisance. To justify the establishment of a right to create a noise by prescription, it was not enough to show that the activity which now created the noise had been carried on for 20 years. It was not even enough to show that the activity had created a noise for 20 years. What had to be established was that the activity had created a nuisance over 20 years. However, under the &#8220;permission to apply&#8221; provision in the judge&#8217;s order, C and M would be free to argue that the injunction should be discharged and damages awarded instead (paras 143, 148, 151)."
    ],
    "CATEGORY": "Nuisance &mdash; Damages &mdash; Injunctions &mdash; Noise &mdash; Planning Permission &mdash; Prescription &mdash; Remedies",
    "COURT": "UKSC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "258",
    "RELATED": [
        "(wl) Wall v Collins",
        "(wl) Wood v Waddington",
        "(wl) Donovan v Rana",
        "(wl) Nickerson v Barraclough",
        "(wl) City of London Corp v Fell",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Ives v High",
        "(wl) Stafford v Lee",
        "(wl) Good Harvest v Centaur",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Bridle v Ruby",
        "(wl) Central Midlands Estates v Leicester Dyers"
    ],
    "NAME": "(wl) Giles v Tarry",
    "SUMMARY": [
        "Where a right of way over a driveway was only for the benefit of one field it was not a permissible use of the right of way to drive sheep into that field and then out of it via another gate onto a public highway and then to re-enter through that gate and thereafter graze the field and an adjoining field together."
    ],
    "CITATION": "Giles v Tarry [2012] EWCA Civ 837",
    "ABSTRACT": [
        "The appellant (G) appealed against a decision declaring that the use by the respondent (T) of a right of way was permissible and that his use of a hovel did not infringe the terms of a conveyance.",
        "T had a right of way over G&#8217;s driveway only for the benefit of fields on either side. The field on the eastern side adjoined another field which was rented by T and which could only be accessed from the eastern field. T appreciated that the right of way did not permit him to drive sheep into the eastern field for the purpose of going onto the adjoining field to graze. He therefore drove his sheep into the eastern field from the driveway, then out of a gate onto the public highway; he then drove them back into the field, from where they could access the adjoining field. The judge held that that was permissible since usage of a right of way was to be analysed in terms of actual movement, not the ultimate intention of the user. In the western field was an open barn or hovel, adjacent to the driveway. T was bound by a covenant not to use it to keep animals or poultry except on a temporary basis. The judge held that the use made of it by T for lambing, treatments, winter feeding or emergency purposes for not more than 45 sheep did not infringe the covenant.",
        "G submitted that (1) once the judge had found that T&#8217;s objective had been to graze his sheep both on the eastern field and on the adjoining field and that the route taken by the sheep was a somewhat artificial device or expedient, he ought to have concluded that use of the right of way for that purpose was impermissible; (2) the judge&#8217;s decision on use of the hovel failed to reflect the fact that T&#8217;s use was not casual or transient because it was part of a planned cycle of husbandry."
    ],
    "YEAR": "2012",
    "COUNSEL": "For the appellant: Alexander Hill-Smith. For the respondent: Lindsay Johnson.",
    "JUDGE": "Ward LJ; Lewison LJ; Norris J",
    "CIT": "[2012] EWCA Civ 837",
    "CATEGORIES": [
        "Real Property Other Related Subjects: Animals",
        "Agriculture",
        "Barns",
        "Covenants",
        "Grazing",
        "Rights of Way",
        "Sheep"
    ],
    "HELD": [
        "Appeal allowed in part.",
        "(1) The judge had erred in focussing on the actual movement, not the ultimate intention of the user. The correct test was to consider what was in substance and intention the user claimed, Harris v Flower &amp; Sons (1905) 74 L.J. Ch. 127 followed. Once the judge had identified that the objective of T was to graze his sheep both on the eastern field and on the adjoining field, and once he had identified what T actually did, which demonstrated that objective, and once he had correctly characterised those manoeuvres as a somewhat artificial device or expedient, then he was bound to conclude that T was in substance and intention using the driveway for the purpose of gaining access to the eastern field and the adjoining field as a single agricultural unit. That was not permitted by the right of way (see paras 20-21, 56-58 of judgment). (2) The meaning to be given to the word &#8220;temporary&#8221; was the meaning that the word had in the context of the conveyance containing the covenant. It did not have a single meaning in all legal contexts. The judge correctly recognised that the word was an ordinary English word containing within it a variety of nuances. He correctly held that whether a particular use or combination of uses was &#8220;temporary&#8221; was a question of fact and degree. His decision should not be disturbed (paras 28, 62)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Animals &mdash; Agriculture &mdash; Barns &mdash; Covenants &mdash; Grazing &mdash; Rights of Way &mdash; Sheep",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "259",
    "RELATED": [
        "(wl) Batchelor v Marlow",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Mulvaney v Gough",
        "(wl) Wall v Collins",
        "(wl) Stafford v Lee",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) Gold Harp v McLeod",
        "(wl) Wood v Waddington",
        "(wl) Baxter v Mannion",
        "(wl) Halifax BS v Thomas",
        "(wl) Copeland v Greenhalf",
        "(wl) Clarke v Corless"
    ],
    "NAME": "(wl) Bridle v Ruby",
    "SUMMARY": [
        "Right of way; grant; mistaken belief of existence of express grant; user for 22 years; presumption of lost modern grant",
        "A presumption of a lost modern grant was not rebutted by a mistaken belief as to the right of way over the land. The transfers to the predecessors in title of both the plaintiff and defendant originally reserved to the transferor and his successors a right of way over the driveway of the property. That reservation was deleted in both cases. G, the plaintiff&#8217;s predecessor in title, built a garage on his property, access to which was obtained over the driveway of the property next door. G and his successors in title, including the plaintiff, used the driveway in the mistaken belief that the conveyance gave them the right to do so. In 1981 the defendant denied that the plaintiff had a right of way. The plaintiff sought a declaration in the county court. The judge held that user for a period of 22 years had been established and the plaintiff was entitled to succeed on the presumption of a lost modern grant to G. The defendant appealed."
    ],
    "CITATION": "Bridle v Ruby [1989] QB 169",
    "YEAR": "1989",
    "JUDGE": "Parker LJ; Ralph Gibson LJ; Caulfield J",
    "CIT": "[1989] QB 169",
    "CATEGORIES": [
        "Real Property",
        "Mistake",
        "Prescription",
        "Rights of Way"
    ],
    "HELD": [
        "that the mistaken belief of G&#8217;s successors in title that the conveyance reserved a right of way did not prevent uninterrupted user from becoming a right by prescription. The mistaken belief did not afford an explanation for the user that rebutted the presumption. The judge&#8217;s finding that the origin of the user was consistent only with permission being granted by the defendant&#8217;s predecessor in title meant a finding of permanent and irrevocable permission attributable to a lost modern grant. The appeal would be dismissed ( Earl de la Warr v Miles (1881) 17 Ch. D. 535 and Tehidy Minerals v Norman [1971] 2 Q.B. 528 applied; Chamber Colliery Co v Hopwood (1886) 32 Ch. D. 549 distinguished)."
    ],
    "CATEGORY": "Real Property &mdash; Mistake &mdash; Prescription &mdash; Rights of Way",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "260",
    "RELATED": [
        "(wl) Wood v Waddington",
        "(wl) Batchelor v Marlow",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) IDC v Clark",
        "(wl) Moncrieff v Jamieson",
        "(wl) Stafford v Lee",
        "(wl) Phipps v Pears",
        "(wl) Mulvaney v Gough",
        "(wl) Wall v Collins",
        "(wl) Vridi v Chana",
        "(wl) Copeland v Greenhalf",
        "(wl) Bridle v Ruby"
    ],
    "NAME": "(wl) Huckvale v Aegean Hotels",
    "SUMMARY": [
        "Extinguishment; change of circumstances; whether serious triable issue; whether interlocutory injunction to be granted to prevent building",
        "An easement may be extinguished where there is no longer any practical possibility of it ever benefiting the dominant tenement, but the question whether this has occurred raises a serious triable issue. H owned premises used as a bakery business. They sold a plot of land at the rear to V Co., the predecessors in title of A Co., for use as a car park for their adjacent hotel. They reserved a right of way over it and also received rights of way over other land belonging to V Co. The latter were never registered and became unenforceable when the land was conveyed to A Co. A Co. then sought to build on the car park, and argued that H&#8217;s right of way over it had been complementary to the rights, which were now unenforceable, and was thus extinguished."
    ],
    "CITATION": "Huckvale v Aegean Hotels (1989) 58 P &amp; CR 163",
    "YEAR": "1989",
    "JUDGE": "Slade LJ; Nourse LJ; Butler-Sloss LJ",
    "CIT": "(1989) 58 P &amp; CR 163",
    "CATEGORIES": [
        "Real Property",
        "Easements",
        "Extinguishment",
        "Interlocutory Injunctions",
        "Rights of Way"
    ],
    "HELD": [
        "that an interlocutory injunction would be granted to restrain interference with H&#8217;s right of way as there was a serious triable issue as to whether the easement had been extinguished ( Ellenborough Park, Re [1955] 3 W.L.R. 91 and Tehidy Minerals v Norman [1971] 2 Q.B. 528 considered."
    ],
    "CATEGORY": "Real Property &mdash; Easements &mdash; Extinguishment &mdash; Interlocutory Injunctions &mdash; Rights of Way",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "261",
    "RELATED": [
        "(wl) Jones v Challenger",
        "(wl) Stafford v Lee",
        "(wl) Grand Junction Co v Bates",
        "(wl) Cf Vallee v Birchwood",
        "(wl) Vridi v Chana",
        "(wl) City of London Corp v Fell",
        "(wl) KS Victoria Street v House of Fraser",
        "(wl) Sava v SS Global Ltd",
        "(wl) Walker v Burton",
        "(wl) Street v Mountford",
        "(wl) Fowler v Baron",
        "(wl) Curley v Parkes"
    ],
    "NAME": "(wl) Tulk v Moxhay",
    "SUMMARY": [
        "It was for the trustees of independent schools to determine how those schools were to be run as charitable trusts and guidance issued by the Charities Commission in relation to the public benefit requirement contained in the Charities Act 2006 was erroneous and would have to be corrected."
    ],
    "CITATION": "Tulk v Moxhay [2011] UKUT 421 (TCC)",
    "ABSTRACT": [
        "The court was required to determine an application for judicial review by the claimant council (ISC) in relation to Guidance issued by the defendant Commission on the public benefit requirement contained in the Charities Act 2006 s.2 and s.3. It was also required to determine a reference by the Attorney General regarding the operation of charity law in relation to independent schools.",
        "The Commission had a duty under the Act to issue guidance regarding its objective of promoting awareness and understanding of the operation of the public benefit requirement. The guidance focused on two stated principles of public benefit: there had to be an identifiable benefit and that benefit had to be to the public or a section of the public. Charity trustees were to have regard to the guidance when exercising their powers and duties. The ISC, an organisation representing over 1,200 schools, considered the Commission&#8217;s guidance to be erroneous and over-prescriptive and claimed that it should not usurp the function of the school trustees in determining how the purposes of a charity should be furthered. It sought an order quashing the parts of the guidance which provided that, where benefit was to a section of the public, the opportunity to benefit was not to be restricted by ability to pay fees."
    ],
    "YEAR": "2011",
    "COUNSEL": "For the claimant: Nigel Giffin QC, Matthew Smith. For the defendant: Robert Pearce QC. For the first intervener: Francesca Quint. For the second interveners: David Lawson. For the Attorney General: William Henderson, Mark Mullen.",
    "JUDGE": "Warren J; Judge McKenna; Judge Ovey",
    "CIT": "[2011] UKUT 421 (TCC)",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Charities Other Related Subjects: Education",
        "Charities",
        "Charity Commission For England and Wales",
        "Independent Schools",
        "Public Benefit",
        "School Fees",
        "Trustees' Powers and Duties"
    ],
    "HELD": [
        "Judgment accordingly.",
        "(1) The courts had adopted an incremental and somewhat ad-hoc approach in relation to what benefited the community or a section of the community. However, it was possible to discern from the authorities two related aspects of public benefit. The first was that the nature of the purpose itself had to be such as to be a benefit to the community; the second was that those who might benefit from the carrying out of the purpose had to be sufficiently numerous and identified in such a manner as to constitute a section of the public, Oppenheim v Tobacco Securities Trust Co Ltd [1951] A.C. 297 applied. A trust for the advancement of education was not necessarily for the public benefit, even if it was directed to a sufficiently wide section of the community. The terms of a particular trust had to be considered on a case-by-case basis, National Anti-Vivisection Society v Inland Revenue Commissioners [1948] A.C. 31 and Hetherington (Deceased), Re [1990] Ch. 1 considered (see paras 44-53, 62-71 of judgment). The provision of mainstream education in the schools concerned in the instant application was for the public benefit in the first sense. Whether that public benefit was outweighed by disbenefits arising from the charging of fees required a balancing exercise and in the instant case the material before the court had not displaced the conclusion that the nature of the education provided was for the public benefit (paras 94-113). However, the further question was whether the class of beneficiaries, those able to afford the fees, was a sufficient section of the community. A charitable organisation which in practice excluded poor people remained a charity; what it had to do was to make some provision for the poor to pass the de minimis hurdle and to provide more than a token benefit. On that basis, the guidance stating that a person&#8217;s exclusion because of an inability to pay would not have aims that were for the public benefit was wrong. If the guidance should not be read in that way, it was ambiguous and confusing and should be clarified. The guidance stating that there was a practical requirement that people who could not afford to pay had to be able to benefit in some other material way was obscure and problematic. The guidance required a level of benefit which the Commission considered to be reasonable and which went beyond that which was necessary. However, that was not a requirement. Although it was necessary that there be more than a token benefit, once that low threshold was reached, what the trustees decided to do in the running of a school was entirely up to them, subject to acting within the range within which trustees could properly act. That was entirely different from imposing on trustees anyone else&#8217;s view about what was reasonable. In some circumstances, it might be that the trustees would be acting properly if they provided a quite modest benefit for the poor in excess of the de minimis level. The public benefit requirement would then be fulfilled. The Commission&#8217;s error was to view the public benefit test as satisfied if, and only if, the provision for the poor was reasonable. It was not a question of reasonableness; it was a question of the proper exercise of the trustees&#8217; powers. The principle that the opportunity to a section of the public to benefit had not to be unreasonably restricted by an ability to pay fees, and that people in poverty had not to be excluded, was wrong. It followed that the guidance based on those principles should be corrected (paras 224-236). (2) The court answered the questions referred by the Attorney General (paras 237-258)."
    ],
    "CATEGORY": "Charities Other Related Subjects: Education &mdash; Charities &mdash; Charity Commission For England and Wales &mdash; Independent Schools &mdash; Public Benefit &mdash; School Fees &mdash; Trustees' Powers and Duties",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "262",
    "RELATED": [
        "(wl) Wilkinson v Kerdene",
        "(wl) Birdlip v Hunter",
        "(wl) Crest Nicholson v McAllister",
        "(wl) Jamaica Mutual Life v Hillsborough",
        "(wl) Chaffe v Kingsley",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) Nat West Bank v Amin",
        "(wl) Midland Bank Trust Co v Green",
        "(wl) Quennell v Maltby",
        "(wl) Davis v Smith",
        "(wl) Gilbert v Spoor"
    ],
    "NAME": "(wl) Halsall v Brizall",
    "SUMMARY": [
        "Covenants; maintenance of road; to pay expenses of maintaining roads",
        "A covenant by plot owners under a building scheme to pay a due and just proportion in respect of amenities for the benefit of the owners of the plots contemplates that there will be an assessment upon each plot, but an assessment in respect of the user to which the plot may be put will be ultra vires. Under a building scheme entered into in 1851 by a large number of owners of properties a piece of land was sold off in some 174 plots. After the plots had been sold off there remained vested in two of the original purchasers, whose successors the plaintiffs were, the roads and a promenade along a sea wall. On the sale of the plots in 1851 the respective purchasers entered into a number of building covenants and these covenants were repeated in a deed of August 19, 1851. The object of the deed was to declare trusts concerning the roads and the promenade for the benefit of the purchasers and to provide (inter alia) for payment of the necessary expenses proportionately by the owners in respect of the upkeep and maintenance of the roads and promenade, and also of the sewers, which had been placed under the road. Cl. 7 of the deed provided: &#8220;That each and every of them the said persons parties to these presents and his respective heirs executors administrators and assigns shall and will from time to time contribute and pay a due and just proportion in respect of the plot or several plots of land in the said plan marked with his name respectively and of the dwelling-house on each such plot erected or to be erected . . .&#8221; in respect of (inter alia) the expenses to be incurred in maintaining and keeping in good repair the roads, sea wall, promenade and sewers. The trustees were empowered to distrain on failure to pay calls. Provision was made for the calling of an annual general meeting of the owners of plots, at which expenses to be incurred in carrying out maintenance and repair work were to be agreed. In 1928, the Lancaster Chancery Court declared that the restrictive covenants did not prevent the owner for the time being of any house erected under the building scheme from dividing it into two or more flats. Pursuant to that declaration the defendants&#8217; house was divided and let to five separate tenants. In 1950 a resolution was passed by a general meeting of plot owners according to which three calls of GBP 3 each were to be made upon the defendants as their plot had been divided into five flats. (The resolution provided that no more than three calls were to be made in respect of any one plot.) The defendants had been willing to pay GBP 3 in respect of the one plot but denied the validity of the resolution purporting to make them liable to pay three calls in respect of one plot."
    ],
    "CITATION": "Halsall v Brizall [1957] Ch 169",
    "YEAR": "1957",
    "JUDGE": "Upjohn J",
    "CIT": "[1957] Ch 169",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Benefits of Covenants",
        "Building Schemes",
        "Burdens of Covenants",
        "Residential Developments",
        "Roads",
        "Ultra Vires"
    ],
    "HELD": [
        "(1) although the covenant in respect of which the application to the court had been made was a positive covenant in respect of which the defendants could not have been sued, the defendants could not take the benefits under the deed without subscribing to the obligations thereunder; therefore, they were bound by the deed, if they desired to take its benefits; (2) the provision for distraining on failure to pay the calls was invalid since a right to distrain could only be annexed to a rentcharge, which was not the case here; (3) the whole of this document was concerned with the management of the roads and other amenities for the benefit of the owners of the plots as such and when the document referred to a contributor paying a due and just proportion in respect of a plot or several plots and the dwelling-house thereon, the parties contemplated that there would be an assessment upon each plot; that might be an assessment according to the value of the plot, but it could not really be an assessment in respect of the user to which the plot might be put; accordingly, the resolution was ultra vires and void, for the deed did not empower the meeting of plot owners to exercise their discretion in that way. (Elliston v Reacher [1908] 2 Ch. 665 applied)."
    ],
    "CATEGORY": "Real Property &mdash; Benefits of Covenants &mdash; Building Schemes &mdash; Burdens of Covenants &mdash; Residential Developments &mdash; Roads &mdash; Ultra Vires",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "263",
    "RELATED": [
        "(wl) Groveholt Ltd v Hughes",
        "(wl) Halifax BS v Thomas",
        "(wl) Federated Homes v Mill Lodge",
        "(wl) Corbett v Halifax",
        "(wl) Birdlip v Hunter",
        "(wl) Crest Nicholson v McAllister",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Roake v Chadha",
        "(wl) Rhone v Stephens",
        "(wl) Midland Bank Trust Co v Green",
        "(wl) IAM Group v Chowdrey",
        "(wl) Bridle v Ruby"
    ],
    "NAME": "(wl) Morrells v Oxford United FC",
    "SUMMARY": [
        "M challenged a decision to dismiss its application for an injunction to enforce a restrictive covenant against OUFC, the proposed purchasers of a neighbouring plot of land. M argued that OUFC would be in breach of the restrictive covenant contained within the original conveyance which, it was contended, should apply by virtue of the Law of Property Act 1925 s.79. The court held that to impose s. 79 of the 1925 Act would be to read words into the covenant which were clearly not intended. Other covenants within the conveyance made it clear that successors should be bound, and the absence of such words in the clause in question showed a contrary intention.",
        "M sought an injunction to enforce a restrictive covenant contained in a conveyance of land against O, who proposed to use the land as a football stadium with leisure facilities. The covenant contained in a 1962 conveyance prohibited the building of licensed premises within half a mile of the public house which had been the object of the original conveyance. It was contended that, by virtue of the Law of Property Act 1925 s.79, the covenant could be presumed to bind successors in title to the land unless a contrary intention was expressed. O was granted summary judgment under the Civil Procedure Rules 1998 Part 24 and M appealed."
    ],
    "CITATION": "Morrells v Oxford United FC [2001] Ch 459",
    "YEAR": "2001",
    "COUNSEL": "For M: John Cherryman Q.C. and Colin Sydenham. For OUFC: Guy Fetherstonehaugh. For the local authority: Kathryn Purkis.",
    "JUDGE": "Schiemann LJ; Robert Walker LJ; Sir Ronald Waterhouse",
    "CIT": "[2001] Ch 459",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Land Use",
        "Restrictive Covenants",
        "Sale of Land"
    ],
    "HELD": [
        "dismissing the appeal, that to impose s.79 of the Act would be to read words into the covenant which were clearly not intended and were inconsistent with the purpose of the instrument, Inland Revenue Commissioners v Bernstein [1961] Ch. 399 considered. The purpose of s.79 was to remove the difficulty of expressing an intention to bind successors by allowing that intention to be presumed unless a contrary intention was expressed. However, other covenants within the conveyance made it clear that successors should be bound, and the absence of such words in the clause in question showed a contrary intention. The covenant was thus merely personal in nature and could not be enforced against successors in title."
    ],
    "CATEGORY": "Real Property &mdash; Land Use &mdash; Restrictive Covenants &mdash; Sale of Land",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "264",
    "RELATED": [
        "(wl) Shaw v Applegate",
        "(wl) Birdlip v Hunter",
        "(wl) Federated Homes v Mill Lodge",
        "(wl) Jamaica Mutual Life v Hillsborough",
        "(wl) Good Harvest v Centaur",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Harris v Flower",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Regent Oil v Gregory",
        "(wl) City of London Corp v Fell",
        "(wl) Wandsworth LBC v Dixon",
        "(wl) Lloyds Bank v Rosset"
    ],
    "NAME": "(wl) Wrotham Park Estate Co v Park Homes",
    "SUMMARY": [
        "This case is the basis for the term &#8220;Wrotham Park damages&#8221;.",
        "The validity of a restrictive covenant agreed at the time of sale of land and expressed to be for the benefit of the estate should be upheld, provided the estate owner may reasonably consider that the restriction remains of value to the estate. In 1935 the owner of the estate sold part of the land to a developer subject to a covenant (the layout stipulation) not to develop the land without prior approval of a layout plan by the estate owner, the covenant being registered as a land charge. The development approved by the owner left a central area undeveloped. That area was bought by the local authority in 1955, planning consent for development was obtained and in 1971 the land was sold to P with the planning consent. Before construction commenced the owner&#8217;s successors in title W reminded P of the covenant stating that any unapproved development would be in breach thereof. After preliminary work started W issued a writ seeking an injunction restraining the development, but P proceeded with the building and sold all the completed houses, remaining owners only of the access road. W did not seek any interlocutory relief. At the trial of W&#8217;s claim for a mandatory injunction against P and the house-owners for demolition of the buildings, held (1) that the covenant was enforceable since it had been entered for the benefit of the covenantee&#8217;s land which was sufficiently defined and was still capable of benefiting the estate; (2) that although P clearly acted in breach of the covenant it would not be just to order demolition of the houses and access road, and damages would be granted in lieu of the mandatory injunctions sought; (3) that the proper measure of damages was a sum which W might reasonably have required in return for relaxing the covenant, being five per cent of P&#8217;s profits, the damages being payable by P and the house-owners in equal proportions. (Lord Northbourne v Johnston &amp; Son [1922] 2 Ch. 309 applied, Marten v Flight Refuelling Ltd [1962] Ch. 115 applied, Redland Bricks v Morris [1970] A.C. 652 applied, Whitwham v Westminster Brymbo Coal &amp; Coke Co [1896] 2 Ch. 538 applied and Watson Laidlaw &amp; Co Ltd v Pott Cassels &amp; Williamson (A Firm) 1914 S.C. (H.L.) 18 applied)."
    ],
    "CITATION": "Wrotham Park Estate Co v Park Homes [1974] 1 WLR 798",
    "YEAR": "1974",
    "JUDGE": "Brightman J",
    "CIT": "[1974] 1 WLR 798",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Damages",
        "Building Schemes",
        "Charges",
        "Covenants",
        "Injunctions",
        "Local Authorities' Powers and Duties",
        "Measure of Damages",
        "Restrictive Covenants"
    ],
    "CATEGORY": "Real Property Other Related Subjects: Damages &mdash; Building Schemes &mdash; Charges &mdash; Covenants &mdash; Injunctions &mdash; Local Authorities' Powers and Duties &mdash; Measure of Damages &mdash; Restrictive Covenants",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "265",
    "RELATED": [
        "(wl) Crest Nicholson v McAllister",
        "(wl) Roake v Chadha",
        "(wl) Birdlip v Hunter",
        "(wl) Morrells v Oxford United FC",
        "(wl) Wrotham Park Estate Co v Park Homes",
        "(wl) Phipps v Pears",
        "(wl) Davis v Smith",
        "(wl) Walker v Burton",
        "(wl) Wilkinson v Kerdene",
        "(wl) City of London Corp v Fell",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Jamaica Mutual Life v Hillsborough"
    ],
    "NAME": "(wl) Federated Homes v Mill Lodge",
    "SUMMARY": [
        "Covenants; restrictive covenants; annexation of benefit; annexation by statute",
        "Where there is a restrictive covenant which relates to or touches and concerns the covenantee&#8217;s land, the Law of Property Act 1925 s.78(1) does not merely provide a shorthand for shortening a conveyance; it has the effect of annexing the benefit of the covenant to the covenantee&#8217;s land. X Co owned a site containing three parcels of land, the red, the green, and the blue. They obtained planning permission to develop the site, by the erection of a specified number of dwellings. X Co sold the blue land to D Co They imposed a restrictive covenant that D Co should not build more than 300 dwellings on it, so as not to reduce the number of dwellings X Co might build under the planning consent on the retained land. The retained land was described as &#8220;any adjoining or adjacent property&#8221; returned by X Co and included both red and green land. P Co ultimately became owners of both red and green land after various intermediate purchasers. The green land carried an unbroken chain of express assignments of the benefit of the covenant; the red land did not. D Co obtained planning permission to develop the blue land to a higher density than 300 dwellings. P Co sought to restrict them from carrying out the development. The judge held that the green land claimed the benefit of the covenant, but that the red land did not. On appeal by D Co, held, dismissing the appeal, that since the covenant was for the benefit of the retained land and the land was sufficiently described in the conveyance for the purpose of annexation, the covenant related to, or touched and concerned, the land, and the Law of Property Act 1925 s.78(1) annexed the benefit of the covenant to every part of the land. Accordingly, the benefit of the covenant ran with the red land, and P Co were entitled to enforce it as owners both of the green and the red land. (Shelfer v City of London Electric Lighting Co (No.1) [1895] 1 Ch. 287 and Smith v River Douglas Catchment Board [1947-51] C.L.Y. 10592 applied; dictum of Romer L.J. in Drake v Gray [1936] 1 All E.R. 363 considered)."
    ],
    "CITATION": "Federated Homes v Mill Lodge [1980] 1 WLR 594",
    "YEAR": "1980",
    "JUDGE": "Megaw LJ; Browne LJ; Brightman LJ",
    "CIT": "[1980] 1 WLR 594",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Annexation",
        "Covenants",
        "Legislation",
        "Restrictive Covenants"
    ],
    "CATEGORY": "Real Property &mdash; Annexation &mdash; Covenants &mdash; Legislation &mdash; Restrictive Covenants",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "266",
    "RELATED": [
        "(wl) Birdlip v Hunter",
        "(wl) Federated Homes v Mill Lodge",
        "(wl) Crest Nicholson v McAllister",
        "(wl) Morrells v Oxford United FC",
        "(wl) Jamaica Mutual Life v Hillsborough",
        "(wl) Rhone v Stephens",
        "(wl) Harris v Goddard",
        "(wl) Nat West Bank v Amin",
        "(wl) Laskar v Laskar",
        "(wl) Regent Oil v Gregory",
        "(wl) Bucks CC v Moran",
        "(wl) Good Harvest v Centaur"
    ],
    "NAME": "(wl) Roake v Chadha",
    "SUMMARY": [
        "Restrictive covenant; enforceability; whether annexation of benefit",
        "Where a restrictive covenant is said not to enure for the benefit of subsequent purchasers unless expressly assigned it is clear that the benefit is not annexed to the land and so did not enure for their benefit under the terms of the Law of Property Act 1925 s.62 and s.78. In 1934 one of a number of plots of land was sold to D&#8217;s predecessors in title under a standard form of transfer containing as part of a covenant with the vendor a stipulation against building more than one dwelling-house on the plot. The covenant contained the words &#8220;And the purchaser to the intent and so as to bind (so far as practicable) the land hereby transferred . . . hereby covenants with the vendor but so that this covenant shall not enure for the benefit of any owner or subsequent purchaser of any part of the . . . estate unless the benefit of this covenant shall be expressly assigned . . .&#8221; Similar standard forms of transfer (although later in date) to P&#8217;s predecessors in title in respect of two nearby plots of land were in the same terms. Neither transfer contained any express assignment of the benefit of the covenant contained in the transfer to D&#8217;s predecessors. P sought an injunction to restrain D from building another house on their plot claiming that the benefit of the covenant with the vendor in the transfer to D&#8217;s predecessor in title had become annexed to each of P&#8217;s plots by reason of s.78 of the L.P.A. 1925 whereby such covenants were to have effect as if successors in title to the covenantee had been expressed. Alternatively they claimed that the benefit had passed as appertaining or as reputed to appertain to the land within the meaning of s.62 of the Act."
    ],
    "CITATION": "Roake v Chadha [1984] 1 WLR 40",
    "YEAR": "1984",
    "JUDGE": "Judge Paul Baker QC",
    "CIT": "[1984] 1 WLR 40",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Assignment",
        "Enforcement",
        "Restrictive Covenants"
    ],
    "HELD": [
        "that although under s.78 no express terms were required for the benefit of a covenant relating to land to be annexed to the land, the section could not have effect irrespective of the terms of the covenant and where, as here, the covenant was not to enure for the benefit of subsequent purchasers unless expressly assigned, it was clear that the benefit was not annexed to the land: in these circumstances, the covenant could not be deemed to have ensured for the benefit of P under s.78 and since there had been no assignment of the benefit of the covenant, it could not &#8220;appertain or be reputed to appertain&#8221; to the land under s.62 of the Act (Federated Homes Ltd v Mill Lodge Properties Ltd [1980] 1 W.L.R. 594 considered)."
    ],
    "CATEGORY": "Real Property &mdash; Assignment &mdash; Enforcement &mdash; Restrictive Covenants",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "267",
    "RELATED": [
        "(wl) Birdlip v Hunter",
        "(wl) Halsall v Brizall",
        "(wl) Roake v Chadha",
        "(wl) Wrotham Park Estate Co v Park Homes",
        "(wl) Rhone v Stephens",
        "(wl) Morrells v Oxford United FC",
        "(wl) Federated Homes v Mill Lodge",
        "(wl) Shaw v Applegate",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Crest Nicholson v McAllister",
        "(wl) HSBC v Brown",
        "(wl) Wood v Waddington"
    ],
    "NAME": "(wl) Jamaica Mutual Life v Hillsborough",
    "SUMMARY": [
        "Restrictive covenants; enforceability; whether ran with the land; whether intended for the benefit of land retained by the vendors; whether covenants&#8217; benefits assigned to successors in title; whether building scheme",
        "J wished to develop land as a multi-unit residential complex and applied for a declaration as to whether certain restrictive covenants affected the land and whether and by whom they were enforceable. In 1956 landowners, D, had transferred one lot to J&#8217;s predecessor in title and two lots to the predecessors in title of the first two objectors. The transfers were subject to covenants not to sub-divide the land into lots of less than one acre each and not to carry on a trade or business. The instruments of transfer did not state that the restrictions were intended for the benefit of land retained by D. No rights for the benefit of land arising from covenants granted in the first transfer were expressly assigned in the second transfer. The second two objectors had subsequently purchased neighbouring land subject to the same covenants. The judge held that the covenants in J&#8217;s title ran with the land and enured to the benefit of the objectors and their successors."
    ],
    "CITATION": "Jamaica Mutual Life v Hillsborough [1989] 1 WLR 1101",
    "YEAR": "1989",
    "CIT": "[1989] 1 WLR 1101",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Planning",
        "Building Schemes",
        "Enforcement",
        "Residential Developments",
        "Restrictive Covenants"
    ],
    "HELD": [
        "allowing the appeal, that since there was no express assignment of the benefit of the covenants in Ds&#8217; other transfers and no inference could be drawn that when the covenants were imposed D intended to benefit land they retained, the covenants were personal to the original covenantee and covenantor. No benefit was annexed to any other land, nor did the covenant enure to the benefit of any lands. The objectors had failed to prove that the original purchasers accepted an obligation enforceable against them not only by D but also by those deriving title from D or accepted a benefit which could be enforceable by them against others. Therefore no building scheme was in existence at the time the covenants were imposed (Renals v Cowlishaw (1878) 9 Ch. D. 125 applied; Rogers v Hosegood [1900] 2 Ch. 388 applied; Reid v Bickerstaff [1909] 2 Ch. 305 applied; and White v Bijou Mansions Ltd [1938] Ch. 351 applied; Wembley Park Estate Co Ltd&#8217;s Transfer, Re [1968] Ch. 491 considered)."
    ],
    "CATEGORY": "Planning &mdash; Building Schemes &mdash; Enforcement &mdash; Residential Developments &mdash; Restrictive Covenants",
    "COURT": "UKPC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "268",
    "RELATED": [
        "(wl) Roake v Chadha",
        "(wl) Birdlip v Hunter",
        "(wl) Kinch v Bullard",
        "(wl) Wilkinson v Kerdene",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Bucks CC v Moran",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Laskar v Laskar",
        "(wl) Morrells v Oxford United FC",
        "(wl) Walby v Walby",
        "(wl) Colchester BC v Smith",
        "(wl) Wall v Collins"
    ],
    "NAME": "(wl) Rhone v Stephens",
    "SUMMARY": [
        "Covenant; positive covenant; covenant to repair; vendor convenating for himself and successors in title to repair roof of own dwelling; whether positive covenant to be enforced against successor in title to land",
        "R appealed against the decision of the Court of Appeal (Times, January 21, 1993) to allow the appeal of S, executrix of the estate of the last owner of Walford House, against an order that she was bound by a covenant entered into by her predecessor in title to repair part of the roof of the house which overhung R&#8217;s property, Walford Cottage."
    ],
    "CITATION": "Rhone v Stephens [1994] 2 AC 310",
    "YEAR": "1994",
    "COUNSEL": "For R: James Munby Q.C. and John Virgo. For S: David Spens.",
    "JUDGE": "Lord Templeman; Lord Oliver of Aylmerton; Lord Woolf; Lord Lloyd of Berwick; Lord Nolan",
    "CIT": "[1994] 2 AC 310",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Equity",
        "Trusts",
        "Enforcement",
        "Freeholds",
        "Real Property",
        "Repair Covenants"
    ],
    "HELD": [
        "Appeal dismissed. The Court of Appeal were right not to overrule Austerberry v Oldham Corp (1885) 29 Ch. D. 750 which held that, although equity could prevent or punish the breach of negative covenants which restricted the user of freehold land, it could not compel an owner to comply with positive covenants entered into by his predecessors in title. While recommendations had been made for reforming the law relating to positive and restrictive obligation, no legislation had resulted, and overruling Austerberry would create a number of difficulties and uncertainties. R&#8217;s argument that this was an exceptional case, such as Tito v Waddell (No.2) [1977] 1 Ch. 106 , under the &#8220;pure principle of benefit and burden&#8221; could not be accepted because conditions attached to the exercise of a power could only be enforceable if relevant to the exercise of the right to which they were attached, Halsall v Brizell [1957] Ch. 169 distinguished."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Equity &mdash; Trusts &mdash; Enforcement &mdash; Freeholds &mdash; Real Property &mdash; Repair Covenants",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "269",
    "RELATED": [
        "(wl) Federated Homes v Mill Lodge",
        "(wl) Birdlip v Hunter",
        "(wl) Halsall v Brizall",
        "(wl) Roake v Chadha",
        "(wl) Wilkinson v Kerdene",
        "(wl) Morrells v Oxford United FC",
        "(wl) Batchelor v Marlow",
        "(wl) Firstpost Homes v Johnson",
        "(wl) Walker v Burton",
        "(wl) Midland Bank Trust Co v Green",
        "(wl) Mulvaney v Gough",
        "(wl) Halifax BS v Thomas"
    ],
    "NAME": "(wl) Crest Nicholson v McAllister",
    "SUMMARY": [
        "The respondent house owner was not entitled to the benefit of restrictive covenants from neighbouring land where the benefit of those covenants was not annexed to her land."
    ],
    "CITATION": "Crest Nicholson v McAllister [2004] EWCA Civ 410",
    "ABSTRACT": [
        "The appellant company (C) appealed and the respondent house owner (M) cross appealed against an order ([2002] EWHC 2443, [2003] 1 All E.R. 46) determining the extent to which land, in respect of which C was the purchaser under a conditional contract, was subject to restrictive covenants of which M claimed to be entitled to the benefit.",
        "The land had been sold for building development to two brothers operating as a company. The company sold the land in plots to individual purchasers by way of conveyances which imposed restrictive covenants on the land conveyed: a user restriction and a building restriction. There were four groups of conveyances relevant to the instant claim, A, H, R and W conveyances. M was the owner of a property, N, which was part of the land conveyed by the W conveyance. C entered into a conditional contract for the purchase of land, which comprised parts of land conveyed by the relevant conveyances, with a view to erecting five new houses on it. M argued that the erection of new houses would breach the terms of the restrictive covenants of which she, as owner of N, was entitled to the benefit. The judge held that the building restriction had become spent on the death of the two brothers or the dissolution of their company. However, he found that the effect of the user restriction was to preclude C from erecting more than one dwelling house. C argued that, on a true construction of the relevant conveyances and having regard to the language of the Law of Property Act 1925 s.78, there was no annexation to land which ceased to be in the ownership of the company or the two brothers."
    ],
    "YEAR": "2004",
    "COUNSEL": "For the appellant: Vivian Chapman. For the respondent: Nicholas Grundy.",
    "JUDGE": "Auld LJ; Chadwick LJ; Arden LJ",
    "CIT": "[2004] EWCA Civ 410",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Annexation",
        "Benefits of Covenants",
        "Neighbouring Land",
        "Restrictive Covenants"
    ],
    "HELD": [
        "allowing the appeal and making no order on the cross appeal, that the benefit of the covenants was not annexed to the land owned by M. The effect of the express words of annexation contained in the two H conveyances and in the second of the R conveyances was to identify the land of the covenantee intended to be benefited for the purposes of s.78(1) of the 1925 Act, in terms that excluded land which was in the ownership of the company at the time of the relevant conveyance but which, thereafter, was sold by the company. There was nothing in the first R conveyance that enabled the court to identify what land if any was intended to be benefited by the covenants. In relation to the two A conveyances s.78(1) did not assist M and she could not show that she was the owner or occupier of land of the covenantee intended to be benefited. The conclusion on annexation precluded the need for findings on the effect of the restrictions. The judge&#8217;s order would be varied to declare that the covenants in the relevant conveyances were not enforceable by M as the owner of N, Federated Homes Ltd v Mill Lodge Properties Ltd [1980] 1 W.L.R. 594, Marquess of Zetland v Driver [1939] Ch. 1 and Roake v Chadha [1984] 1 W.L.R. 40 considered."
    ],
    "CATEGORY": "Real Property &mdash; Annexation &mdash; Benefits of Covenants &mdash; Neighbouring Land &mdash; Restrictive Covenants",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "270",
    "RELATED": [
        "(wl) Fitzkriston v Panayi",
        "(wl) Street v Mountford",
        "(wl) Reeves v Sandhu",
        "(wl) Wintergarden v Millennium Productions",
        "(wl) MRA Engineering Ltd v Trimester Corp",
        "(wl) City of London BS v Flegg HL",
        "(wl) AG Securities v Vaughan",
        "(wl) St Marleybone Property Co v Fairweather",
        "(wl) Re King",
        "(wl) Colchester BC v Smith",
        "(wl) Stafford v Lee",
        "(wl) First National Securities v Heggerty"
    ],
    "NAME": "(wl) Emile Elias v Pine Groves",
    "SUMMARY": [
        "Rent; arrears; distress; tenant in financial difficulties; individual voluntary arrangement under consideration; interim order in force; whether landlord entitled to distrain for arrears of rent",
        "The execution by a landlord of the remedy of distress for arrears of rent did not contravene the provisions of an interim order made under the Insolvency Act 1986 s.252 in support of a proposed voluntary arrangement on the part of the tenant. T ran into financial difficulties and proposed a voluntary arrangement to his creditors under the provisions of the Insolvency Act 1986. The court made an interim order under s.252 of the Act preventing the presentation of a bankruptcy petition and the commencement or continuance of any other proceedings, execution or other legal process. T was in arrears with his rent. L, with knowledge of the interim order, distrained on the premises and seized T&#8217;s stock-in- trade. T obtained an order restraining the continuance or completion of the distress. L applied to set aside the order on the ground that the court had no power to prevent L distraining for arrears of rent notwithstanding the interim order under s.252 of the Act."
    ],
    "CITATION": "Emile Elias v Pine Groves [1994] BCC 25",
    "YEAR": "1994",
    "JUDGE": "Judge Roger Kaye QC",
    "CIT": "[1994] BCC 25",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Insolvency",
        "Distress",
        "Interim Orders",
        "Rent",
        "Voluntary Arrangements"
    ],
    "HELD": [
        "granting L&#8217;s application, that the words &#8220;other proceedings&#8221; related to court proceedings and not to the self-help remedy of distress, the word &#8220;execution&#8221; related to the legal process of executing a judgment and the words &#8220;other legal process&#8221; related to a process of judicial or adjudicative nature. The words &#8220;other legal process&#8221; were not apt to refer to the process of distraint. Accordingly the court had no power to restrain the continuance or completion of the process of distress (Naeem (A Bankrupt) (No.18 of 1988), Re [1990] 1 W.L.R. 48, Olympia &amp; York Canary Wharf Ltd (No.1), Re [1993] B.C.C. 154 considered)."
    ],
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Insolvency &mdash; Distress &mdash; Interim Orders &mdash; Rent &mdash; Voluntary Arrangements",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "271",
    "RELATED": [
        "(wl) Halsall v Brizall",
        "(wl) Chaffe v Kingsley",
        "(wl) Bucks CC v Moran",
        "(wl) Pye Ltd v Graham",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Rhone v Stephens",
        "(wl) Sava v SS Global Ltd",
        "(wl) Crest Nicholson v McAllister",
        "(wl) Birdlip v Hunter",
        "(wl) Stafford v Lee",
        "(wl) Roplaigeach v Barclays Bank",
        "(wl) Groveholt Ltd v Hughes"
    ],
    "NAME": "(wl) Wilkinson v Kerdene",
    "SUMMARY": [
        "The owner of a holiday village was entitled to enforce positive covenants against bungalow owners in the village, requiring them to make payments in respect of the costs of maintaining the roads, car parks, and recreational facilities in the village. Some of the bungalow owners were successors in title to the covenants, but the payments had a real relation to rights granted in their favour which they continued to exercise, namely use of the facilities."
    ],
    "CITATION": "Wilkinson v Kerdene [2013] EWCA Civ 44",
    "ABSTRACT": [
        "The appellant bungalow owners (W) appealed against a decision that they were bound by covenants requiring them to pay maintenance costs to the respondent (K), owner of the holiday village where the bungalows were situated.",
        "The village included a leisure complex and various recreational facilities, roads and footpaths. Two slightly different conveyances had been used for the sale of the bungalows, depending on when they were purchased. Both contained a Sch.1 which granted various rights to the purchaser, including for use of roads, footpaths, lawns and recreational facilities in the village. Both contained an identical cl.4, by which the vendor covenanted to maintain the roads, drives, car parking spaces, footpaths, lawns, recreational facilities and paint the external surfaces of the bungalow. Form A contained a covenant that the purchaser would pay an annual sum or a proportionate part for maintaining the roads, car parks, pleasure grounds and other recreational facilities in the village, whereas form B contained a covenant for a payment to be made for the purpose of carrying out the various matters referred to in cl.4. The village had fallen into disrepair. It had been sold to K, which had attempted to restore it to a proper state of repair, but had not complied with all the requirements of cl.4. K sought to recover from W the sums payable under the covenants in the conveyances. Most of W were successors in title and the positive covenants were therefore only enforceable if the equitable benefit and burden principle in Halsall v Brizell [1957] Ch. 169 applied. The judge found that the charging provision was relevant to and correlated with the right to use the access road and that the difference in wording between form A and form B should not produce a different outcome because both conveyances contained maintenance charges.",
        "W submitted that the payment covenant was linked to the obligation to repair under cl.4, rather than to the grant of rights under Sch.1. They argued that the payment of a fixed annual amount was not capable of being apportioned, meaning that the burden of the fixed sum did not correlate with the exercise of the rights granted."
    ],
    "YEAR": "2013",
    "COUNSEL": "For the appellants: In person. For the respondent: Alan Johns.",
    "JUDGE": "Rix LJ; Arden LJ; Patten LJ",
    "CIT": "[2013] EWCA Civ 44",
    "CATEGORIES": [
        "Real Property",
        "Benefits of Covenants",
        "Burdens of Covenants",
        "Holiday Accommodation",
        "Intention",
        "Payments",
        "Positive Covenants",
        "Repair Covenants",
        "Roads"
    ],
    "HELD": [
        "Appeals dismissed.",
        "A successor in title to the original covenantor did not incur a liability to perform a positive covenant unless it had some real relation to a right granted in his favour under the conveyance which he did wish to exercise. The reference, in Lord Templeman&#8217;s speech in Rhone v Stephens [1994] 2 A.C. 310, to the exercise of those rights being conditional upon the performance of the positive obligation was not limited to cases in which it was expressly so conditional. In substance, the payment of an annual charge for the maintenance of facilities which the covenantors were only entitled to use by virtue of rights granted under the deed was relevant to the continued exercise of those rights even though it was a contribution to the cost of their maintenance: the two were not inconsistent. In some cases, the positive obligation might be completely unrelated to the rights which the owner sought to exercise, Rhone v Stephens , Halsall v Brizell and Thamesmead Town Ltd v Allotey (1998) 30 H.L.R. 1052 applied. W&#8217;s submission about the inability to apportion the maintenance charges was a non-sequitur. In the form A conveyances, the payment was due for the purpose of maintaining the roads, car parks, pleasure grounds and other recreational facilities under Sch.1. In the form B conveyances, it was a payment towards all the matters referred to in cl.4, which included the Sch.1 facilities together with the upkeep of the lawns and the painting of the bungalows. In form B, it did arguably contribute towards the cost of work carried out by the site owner which was not within the rights granted under Sch.1. However, unless the charge could be apportioned, it remained recoverable provided that it also related at least in part to the rights which were included in Sch.1. The successors in title therefore had no answer to the claims unless they could show that the payment covenant had no relation to the Sch.1 rights which they had continued to exercise. Although the continued exercise of those rights was not made expressly conditional upon payment, the payment was intended to ensure that they remained capable of being exercised. The payment, at least in substantial part, was intended to provide a contribution to the cost of maintaining the roads and other facilities over which the owners of the bungalows were granted rights. The cl.4 covenant, by the original site owner, to carry out the repairs was not sufficient to sever any link between the payment covenant and the Sch.1 rights (see paras 27-34 of judgment)."
    ],
    "CATEGORY": "Real Property &mdash; Benefits of Covenants &mdash; Burdens of Covenants &mdash; Holiday Accommodation &mdash; Intention &mdash; Payments &mdash; Positive Covenants &mdash; Repair Covenants &mdash; Roads",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "272",
    "RELATED": [
        "(wl) Crest Nicholson v McAllister",
        "(wl) Roake v Chadha",
        "(wl) Halsall v Brizall",
        "(wl) Jamaica Mutual Life v Hillsborough",
        "(wl) Wrotham Park Estate Co v Park Homes",
        "(wl) Rhone v Stephens",
        "(wl) Federated Homes v Mill Lodge",
        "(wl) Wilkinson v Kerdene",
        "(wl) Morrells v Oxford United FC",
        "(wl) Colchester BC v Smith",
        "(wl) Moncrieff v Jamieson",
        "(wl) Wall v Collins"
    ],
    "NAME": "(wl) Birdlip v Hunter",
    "SUMMARY": [
        "A building scheme had existed for the benefit of purchasers of lots of land from a common vendor where the restrictive covenants attached to each lot were substantially the same and had been in existence for over 100 years. Accordingly, the current owner of one of the lots was bound by the covenants and could not build further houses on it."
    ],
    "CITATION": "Birdlip v Hunter [2015] EWHC 808 (Ch)",
    "ABSTRACT": [
        "A company sought a declaration that it was not bound by restrictive covenants.",
        "The company owned a plot of land with one house built on it. It had obtained planning permission to build two further houses. The defendants were owners of an adjoining property. The properties had originally been sold by the same vendor in 1909 and 1910. At that time a road had been laid out, but the plots of land did not have any buildings on them. The company&#8217;s plot was subject to a covenant not to build more than &#8220;one or two detached residences&#8221; on it. Eighteen plots were bound by similar covenants. The covenants were stated to bind purchasers&#8217; and vendors&#8217; &#8220;heirs and assigns&#8221;. The original vendor reserved a right to vary the covenants &#8220;in so far as regards the other parts of their Estate&#8221;. &#8220;Estate&#8221; was not defined in the conveyances, but was marked on two plans dated 1908 and 1914. The plans were not identical. The company issued an application in the Upper Tribunal to modify or discharge the covenants under the Law of Property Act 1925 s.84(1). Those proceedings were transferred to the High Court, to be heard together with its claim for a declaration under s.84(2). The court was required to determine whether the covenants were enforceable under a building scheme for the benefit of the other properties on the estate.",
        "The company submitted that there was no defined estate and it had not been established that the covenants enured for the benefit of other purchasers as opposed to the vendor."
    ],
    "YEAR": "2015",
    "COUNSEL": "For the claimant: Martin Hutchings QC, Jonathan Chew. For the defendants: Wayne Beglan.",
    "JUDGE": "Judge Behrens",
    "CIT": "[2015] EWHC 808 (Ch)",
    "FLAGS": [
        "appeal-outstanding"
    ],
    "CATEGORIES": [
        "Real Property",
        "Benefits of Covenants",
        "Building Estates",
        "Building Schemes",
        "Enforcement",
        "Modification",
        "Restrictive Covenants"
    ],
    "HELD": [
        "Claim dismissed.",
        "(1) For an enforceable scheme to exist, it was necessary for the extent of the estate to be defined at the date of the crystallisation of the scheme. There was no evidence that any plan formed part of the conveyances of the land. However, the 1908 plan had been attached to a contract for a lot sold in that year. That plan identified the lots for sale and also purported to define the boundaries of the estate. It was not speculation to infer that when the first lot was sold in 1906 there was a plan which defined the boundaries of the estate in the same way as the 1908 plan. When the parties&#8217; properties were sold in 1909 and 1910, there would have been a plan attached to the agreement for sale. It might not have been identical to the 1908 plan and the shape of some of the lots might have altered. However, it was near the beginning of the development and the court inferred that it would still have contained the boundaries set out in the 1908 plan. The differences in the 1914 plan in the plots available for sale did not persuade the court that the 1908 plan did not show the estate boundaries (see paras 92-99 of judgment). (2) The estate had many of the classic features of a building scheme. There was a defined estate and it was laid out in lots, albeit the lotting of the eastern part of the estate took place significantly after the initial lotting. Lotting was cogent evidence of an intention that the covenant should be for the common benefit of purchasers. In a case of partial lotting, that inference might not be quite so strong. The covenants attached to each lot were substantially the same and appeared to derive from a standard form of contract. The variations in the covenants were not material. It was also significant that the covenants had been in existence for over 100 years, an association had successfully upheld them, and they were treated as enforceable by purchasers in two cases before the Lands Tribunal. The existence of a power to vary the covenants was equivocal, and was just one matter to be considered in the context of the whole in deciding whether a scheme existed, Wembley Park Estate Co Ltd&#8217;s Transfer, Re [1968] Ch. 491, Whitgift Homes Ltd v Stocks [2001] EWCA Civ 1732, [2001] 48 E.G. 130 (C.S.) and Seymour Road (Southampton) Ltd v Williams [2010] EWHC 111 (Ch), [2010] 2 P. &amp; C.R. DG5 applied. On the balance of probabilities, it was intended that the covenants should be for the common benefit of the purchasers as well as for the vendor, Elliston v Reacher [1908] 2 Ch. 374, Jamaica Mutual Life Assurance Society v Hillsborough [1989] 1 W.L.R. 1101 and Emile Elias &amp; Co Ltd v Pine Groves Ltd [1993] 1 W.L.R. 305 applied. Accordingly, the court was satisfied that a building scheme was established (paras 61-62, 100-108)."
    ],
    "CATEGORY": "Real Property &mdash; Benefits of Covenants &mdash; Building Estates &mdash; Building Schemes &mdash; Enforcement &mdash; Modification &mdash; Restrictive Covenants",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "273",
    "RELATED": [
        "(wl) Halsall v Brizall",
        "(wl) Halifax v Popeck",
        "(wl) State Bank of India v Sood",
        "(wl) Clarke v Corless",
        "(wl) Swift 1st v Chief Land Registrar",
        "(wl) Mulvaney v Gough",
        "(wl) Huckvale v Aegean Hotels",
        "(wl) IAM Group v Chowdrey",
        "(wl) Four Maids v Dudley Marshall",
        "(wl) Herbert v Doyle",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Link Lending v Bustard"
    ],
    "NAME": "(wl) Gilbert v Spoor",
    "SUMMARY": [
        "Treasure trove; description",
        "Only coins containing a substantial amount of gold or silver can properly be described as treasure trove. A hoard of Roman coins was found in the defendants&#8217; field. A coroner&#8217;s inquest found that the hoard was treasure trove; the defendants disputed that, contending that the coins were of base metal. Expert evidence showed that the coins contained only a small silver content. The judge found that they were not treasure trove."
    ],
    "CITATION": "Gilbert v Spoor [1982] Ch 277",
    "YEAR": "1982",
    "JUDGE": "Lord Denning MR; Dunn LJ; Oliver LJ",
    "CIT": "[1982] Ch 277",
    "FLAGS": [
        "Denning"
    ],
    "CATEGORIES": [
        "Real Property",
        "Treasure Trove"
    ],
    "HELD": [
        "dismissing the appeal, that only objects of gold or silver were capable of being treasure trove and that coins must contain a substantial amount of gold or silver to be treasure trove ( R. v Thomas &amp; Willet (1863) 9 Cox C.C. 376 and R. v Toole (1867) 11 Cox C.C. 75 applied; dicta in Palser v Grinling, Property Holding Co. v Mischeff [1947-51] C.L.Y. 8463 applied)."
    ],
    "CATEGORY": "Real Property &mdash; Treasure Trove",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "274",
    "RELATED": [
        "(wl) Wrotham Park Estate Co v Park Homes",
        "(wl) Harris v Flower",
        "(wl) Bedson v Bedson",
        "(wl) Jamaica Mutual Life v Hillsborough",
        "(wl) Wall v Collins",
        "(wl) Roake v Chadha",
        "(wl) Gillett v Holt",
        "(wl) Federated Homes v Mill Lodge",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Hounslow LBC v Minchinton",
        "(wl) Wong v Beaumont Property Trust",
        "(wl) Birdlip v Hunter"
    ],
    "NAME": "(wl) Shaw v Applegate",
    "SUMMARY": [
        "Covenants; restrictive covenant; breach; delay in bringing action; acquiescence; injunction and damages in lieu",
        "The owner of a legal right is only to be deprived of the benefit of that right on the ground of acquiescence on his part, when it would be dishonest or unconscionable of him to set it up. A, the purchaser of certain property in 1967, covenanted not to use it as an amusement arcade. He started installing amusement machines in 1970, and added more in subsequent years. S, the assignee of the benefit of the covenant, did not give notice of the assignment to A until 1973, shortly before issuing the writ in the action, which claimed an injunction and damages. Blackett-Ord V.C. found that there had been a continuing breach of covenant since at least 1971, but dismissed the action on the ground that the plaintiffs had acquiesced in the breach and that damages were incapable of assessment."
    ],
    "CITATION": "Shaw v Applegate [1977] 1 WLR 970",
    "YEAR": "1977",
    "JUDGE": "Buckley LJ; Goff LJ; Shaw LJ",
    "CIT": "[1977] 1 WLR 970",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Civil Procedure",
        "Acquiescence",
        "Breach",
        "Damages",
        "Delay",
        "Injunctions",
        "Restrictive Covenants"
    ],
    "HELD": [
        "allowing the plaintiffs&#8217; appeal, that in view of the doubtful state of mind of the parties between 1971 and 1973, it could not be concluded that the plaintiffs were acting dishonestly or unconscionably in seeking to enforce their contractual rights; but that in the particular circumstances, and especially the failure of the plaintiffs to protest earlier and the lack of an application for interlocutory relief, and heavy investment by the defendant in the meantime, an injunction would not be granted, but an order made for an inquiry as to damages. Per Goff, L.J., it is easier to establish a case of acquiescence where the right is equitable only. (Richards v Revitt (1877) 7 Ch. D. 224 and dicta of Fry J. in Willmott v Barber (1880) 15 Ch. D. 96 explained; Osborne v Bradley [1903] 2 Ch. 446 distinguished)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Civil Procedure &mdash; Acquiescence &mdash; Breach &mdash; Damages &mdash; Delay &mdash; Injunctions &mdash; Restrictive Covenants",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "275",
    "RELATED": [
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Reeves v Sandhu",
        "(wl) Wright v Macadam",
        "(wl) Fitzkriston v Panayi",
        "(wl) MRA Engineering Ltd v Trimester Corp",
        "(wl) Antoniades v Villiers",
        "(wl) City of London Corp v Fell",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Yaxley v Gotts",
        "(wl) Escalus Properties v Robinson",
        "(wl) Goldberg v Edwards",
        "(wl) KS Victoria Street v House of Fraser"
    ],
    "NAME": "(wl) Crago v Julian",
    "SUMMARY": [
        "Possession; oral assignment; no written assignment; whether oral assignment valid; whether landlord entitled to possession",
        "The assignment of a weekly tenancy must be by deed if it is to be valid under the Law of Property Act 1925 s.53. D and her husband, H, lived in a flat let to H on a weekly tenancy. D and H divorced, with H undertaking &#8220;within 14 days of the granting of the decree absolute...to do all acts and things as may be necessary&#8221; to transfer the tenancy to D. H moved out, leaving D in possession and paying the rent. P served notice to quit on D and obtained an order for possession against her."
    ],
    "CITATION": "Crago v Julian [1992] 1 WLR 372",
    "YEAR": "1992",
    "JUDGE": "Sir Donald Nicholls VC; Russell LJ; Leggatt LJ",
    "CIT": "[1992] 1 WLR 372",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Assignment",
        "Formalities",
        "Leases"
    ],
    "HELD": [
        "dismissing D&#8217;s appeal, that the assignment of a weekly tenancy must be by deed if it is to be valid; accordingly, since there had been no assignment of the tenancy in writing, the possession order had been rightly made (Botting v Martin 170 E.R. 970 considered)."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Assignment &mdash; Formalities &mdash; Leases",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "276",
    "RELATED": [
        "(wl) City of London Corp v Fell",
        "(wl) Fitzkriston v Panayi",
        "(wl) Street v Mountford",
        "(wl) Taylor Fashions v Liverpool Victoria Trustees",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Gray v Taylor",
        "(wl) National Provincial Bank v Ainsworth",
        "(wl) Ofulue v Bossert",
        "(wl) Goldberg v Edwards",
        "(wl) Facchini v Bryson",
        "(wl) Grand Junction Co v Bates"
    ],
    "NAME": "(wl) Javad v Aqil",
    "SUMMARY": [
        "Business tenancy; terms",
        "A tenancy springs from a consensual arrangement between two parties, so that the extent of the rights thus granted and accepted depends primarily upon their intentions. R was let into occupation of business premises owned by P while negotiations proceeded for the grant to him of a 10-year lease at a rent of GBP 10,000 p.a. reviewable after 12 months; and he was there with P&#8217;s consent for some months, paying rent on a quarterly basis on three occasions. Eventually negotiations broke down and P told him to leave, whereupon he refused to do so and claimed to be a quarterly tenant protected by the Landlord and Tenant Act 1954 Part II . The judge held that the arrangement had created merely a tenancy at will (i.e. one on terms that either party could determine it at any time) and accordingly ordered possession. On appeal R contended that proof of possession and payment of rent by reference to a quarterly period raises a presumption in favour of a periodic tenancy which can only be rebutted in favour of a tenancy at will by an express agreement to that effect."
    ],
    "CITATION": "Javad v Aqil [1991] 1 WLR 1007",
    "YEAR": "1991",
    "JUDGE": "Nicholls LJ; Ralph Gibson LJ; Mustill LJ",
    "CIT": "[1991] 1 WLR 1007",
    "FLAGS": [
        "Criticised"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Business Tenancies",
        "Occupation"
    ],
    "HELD": [
        "dismissing R&#8217;s appeal, that (1) a tenancy springs from a consensual arrangement between two parties, so that the extent of the rights thus granted and accepted depends primarily upon their intentions. Where parties proceed with an arrangement whereby one person takes possession of another&#8217;s lands for payment without having agreed or directed their minds to one or more fundamental aspects of their transaction, the inference sensibly and reasonably to be drawn as to their intentions will depend upon all the circumstances, of which the payment of rent on a periodic basis is only one, albeit a very important one; (2) that the judge had correctly considered the question whether it was right in all the circumstances to infer a periodic tenancy, and there were no grounds for disturbing his conclusion to the contrary ( Wheeler v Mercer [1957] A.C. 416 considered; Hagee (London) Ltd v AB Erikson and Larson [1976] Q.B. 209 considered; D&#8217;Silva v Lister House Developments Ltd [1971] Ch. 17 considered; Longrigg Burrough &amp; Trounson v Smith [1979] 2 E.G.L.R. 42 considered; Doe d Cheny v Batten 98 E.R. 1066 considered; Doe d Bastow v Cox 116 E.R. 421 considered; Lewis v MTC Cars Ltd [1975] 1 W.L.R. 457 considered; Marcroft Wagons Ltd v Smith [1951] 2 K.B. 496 considered; Sopwith v Stutchbury (1985) 17 H.L.R. 50 considered; and Cardiothoracic Institute v Shrewdcrest [1986] 1 W.L.R. 368 considered; Doe d Lord v Crago 36 E.R. 1185 applied); (3) the Court of Appeal noted that entry into possession while negotiations proceed was one of the classic circumstances in which a tenancy at will may exist."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Business Tenancies &mdash; Occupation",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "277",
    "RELATED": [
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Link Lending v Bustard",
        "(wl) Street v Mountford",
        "(wl) Abbey National BS v Cann",
        "(wl) Nat West Bank v Amin",
        "(wl) Scott v Southern Pacific Mortgages",
        "(wl) HSBC v Dyche",
        "(wl) Lloyds Bank v Rosset",
        "(wl) The Mortgage Corporation v Shaire and others",
        "(wl) Wood v Waddington",
        "(wl) Binions v Evans",
        "(wl) Swift 1st v Chief Land Registrar"
    ],
    "NAME": "(wl) Ashburn v Arnold",
    "SUMMARY": [
        "Registered land occupation agreement; whether licence or tenancy; whether binding on purchaser with notice",
        "The reservation of a rent is not necessary for the creation of a tenancy. In 1973 R sold to M a headlease and sublease of premises in Kensington. The sale agreement provided by clause 5 that R could remain in the premises without payment of rent as &#8220;Licensees&#8221; until M should give one quarter&#8217;s notice in writing and should certify that it was ready at the expiration of such notice to redevelop the premises; and further provided by clause 6 that upon completion of such redevelopment M should grant to R &#8220;a lease of a shop in a prime position at the development with an area available for trading of approximately 1,000 s.m. and with car parking facilities ...&#8221;. M subsequently sold the headlease and sublease to the freeholder A, who claimed that R were licensees only and sought possession. R claimed that the agreement with M created a tenancy which took effect as an overriding interest under the Land Registration Act 1925 s.70(1)(g) ; alternatively that, if they were licensees only, the licence was binding upon A by reason of the decision in Errington v Errington and Woods [1952] 1 K.B. 290 , or by reason of the doctrine of constructive trust. The judge held that the agreement had created a licence only, but that the licence had been binding upon A; and he refused to order possession."
    ],
    "CITATION": "Ashburn v Arnold [1989] Ch 1",
    "YEAR": "1989",
    "JUDGE": "Fox LJ; Neill LJ; Bingham LJ",
    "CIT": "[1989] Ch 1",
    "FLAGS": [
        "Criticised",
        "Bingham"
    ],
    "CATEGORIES": [
        "Real Property",
        "Licences",
        "Occupation",
        "Overriding Interests",
        "Possession of Land",
        "Real Property",
        "Tenancies"
    ],
    "HELD": [
        "dismissing A&#8217;s appeal upon other grounds, that (1) the reservation of a rent is not necessary for the creation of a tenancy; (2) the period of the occupation agreement was sufficiently certain in that the agreement could be determined by both parties in circumstances in which there could be no doubt as to whether the determining event had occurred; (3) the agreement had accordingly created a tenancy, which took effect as an overriding interest under s.70(1)(g) of the 1925 Act; (4) clause 6 of the agreement was sufficiently clear to be capable of enforcement as a contract, and likewise took effect as an overriding interest under s. 70(1)(g), notwithstanding that it had not been registered, as an estate contract, since R were in actual occupation of the premises ( Street v Mountford [1985] A.C. 809 applied; Midland Railway Co&#8217;s Agreement, Re [1971] Ch. 725 considered; Lace v Chantler [1944] K.B. 368 distinguished). Per curiam: (i) In view of the decisions in Thomas v Sorrell 124 E.R. 1098 , Daly v Edwardes (1900) 83 L.T. 548 , Frank Warr &amp; Co v London CC [1904] 1 K.B. 713 , King v David Allen &amp; Sons Billposting Ltd [1916] 2 A.C. 54 , and Clore v Theatrical Properties Ltd [1936] 3 All E.R. 483 , a contractual license does not create an interest in land capable of binding third parties; and the decision in Errington was to this extent only per incuriam ( Winter Garden Theatre (London) Ltd v Millennium Productions Ltd [1948] A.C. 173 and National Provincial Bank Ltd v Ainsworth [1965] A.C. 1175 also considered); (ii) Neither could a mere contractual licence in this case have bound A by way of constructive trust, since the courts will not impose a constructive trust unless it is satisfied that the conscience of the estate owner is affected; and the mere fact that land is expressed to be conveyed &#8220;subject to&#8221; a contract does not necessarily imply that the grantee is to be under an obligation, not otherwise existing, to give effect to the provisions of that contract ( London CC v Allen [1914] 3 K.B. 642 , Bannister v Bannister [1948] 2 All E.R. 133 , Schebsman (Deceased) Ex p. Official Receiver, Re [1944] Ch. 83 , Binions v Evans [1972] Ch. 359 , DHN Food Distributors v Tower Hamlets LBC [1976] 1 W.L.R. 852 , Lyus v Prowsa Developments Ltd [1982] 1 W.L.R. 1044 and Sharpe Ex p. Trustee of the Bankrupt&#8217;s Property, Re [1980] 1 W.L.R. 219 considered."
    ],
    "CATEGORY": "Real Property &mdash; Licences &mdash; Occupation &mdash; Overriding Interests &mdash; Possession of Land &mdash; Real Property &mdash; Tenancies",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "278",
    "RELATED": [
        "(wl) McDonald v McDonald",
        "(wl) Harrow LBC v Qazi",
        "(wl) Wright v Macadam",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Errington v Errington",
        "(wl) AG Securities v Vaughan",
        "(wl) Javad v Aqil",
        "(wl) Barca v Mears",
        "(wl) Gray v Taylor"
    ],
    "NAME": "(wl) Berrisford v Mexfield Housing Corp",
    "SUMMARY": [
        "As a matter of contractual interpretation, an occupancy agreement between a mutual housing association and one of its members, which was expressed to be &#8220;from month to month until determined&#8221; could not be determined simply by a month&#8217;s notice to quit. The agreement, although incapable of being a tenancy by virtue of its uncertain duration, was treated as a tenancy for life at common law and therefore took effect as a 90-year lease determinable either on the tenant&#8217;s death or in accordance with its express termination provisions."
    ],
    "CITATION": "Berrisford v Mexfield Housing Corp [2011] UKSC 52",
    "ABSTRACT": [
        "The appellant tenant (B) appealed against a decision ([2010] EWCA Civ 811) that an order for possession obtained by the respondent landlord (M) was valid.",
        "The parties had entered into an &#8220;occupancy agreement&#8221; whereby B would live in a property owned by M &#8220;from month to month until determined&#8221;. Clause 5 of the agreement specified that it was determinable by B on one month&#8217;s written notice. Clause 6 stated that M was only entitled to end the agreement in four defined circumstances. M served a month&#8217;s notice to quit. It was not in dispute that none of the four termination provisions applied. M&#8217;s case was that the agreement was a monthly tenancy at common law and that the only statutory protection to which B was entitled was the right not to be evicted without a court order and the right to at least four weeks&#8217; notice to quit. The court at first instance accepted M&#8217;s argument and granted a possession order. The Court of Appeal upheld the possession order. The issues for determination were whether (i) the agreement was terminable by one month&#8217;s notice; (ii) it was a valid tenancy in law; (iii) it would have been treated as a tenancy before the Law of Property Act 1925 came into effect; (iv) it was converted into a 90-year term by virtue of s.149(6) of the Act; (v) B was entitled to remain in possession."
    ],
    "YEAR": "2011",
    "COUNSEL": "For the appellant: Mark Wonnacott. For the respondent: Jonathan Gaunt QC, Kerry Bretherton, Laura Tweedy.",
    "JUDGE": "Lord Hope DPSC; Lord Walker JSC; Lady Hale JSC; Lord Mance JSC; Lord Neuberger JSC; Lord Clarke JSC; Lord Dyson JSC",
    "CIT": "[2011] UKSC 52",
    "FLAGS": [
        "Approved",
        "Hale",
        "Neuberger"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Common Law Rights",
        "Duration",
        "Housing Association Tenancies",
        "Landlords' Rights",
        "Life Tenants",
        "Possession Orders",
        "Termination"
    ],
    "HELD": [
        "Appeal allowed.",
        "(1) In the absence of any indication to the contrary, a tenancy granted &#8220;from month to month&#8221; was a monthly tenancy and might be determined by one month&#8217;s notice. However, the precise rights and obligations of the parties depended on the circumstances in which they had been agreed. The circumstances surrounding the agreement were that M was a co-operative housing association and the purpose of entering into an agreement with B had been to provide her with a home. B&#8217;s right of occupation was evidently not intended to be precarious. It was clear for various reasons that the arrangement created by the agreement could only be determinable by M pursuant to cl.6 (see paras 13-22 of judgment). (2) It was a long established principle of law that an agreement for an uncertain term could not be a tenancy, Lace v Chantler [1944] K.B. 368 applied and Prudential Assurance Co Ltd v London Residuary Body [1992] 2 A.C. 386 followed. Prudential continued to represent the current state of the law even though aspects of its practical effect were unsatisfactory and without justification. However, the rule had been regarded as fundamental for several centuries and was not to be jettisoned, at least not in the instant case (paras 26-27, 32-37). (3) If the agreement had been entered into before January 1, 1926, when the Act came into force, it would have been treated by the court as being the grant of a tenancy to B for her life subject to her right to determine it under cl.5 and M&#8217;s right to determine it under cl.6, Doe on the demise of Crake v Brown 172 E.R. 992 and Zimbler v Abrahams [1903] 1 K.B. 577 considered (paras 41-44). (4) Under s.149(6) of the Act, the agreement was a tenancy for life at common law and was to be treated as a term of 90 years determinable on B&#8217;s death subject to the express determination provisions in cl.5 and cl.6, Bass Holdings Ltd v Lewis [1986] 2 E.G.L.R. 40 and Skipton Building Society v Clayton (1993) 25 H.L.R. 596 considered (paras 45-53, 82-86). (5) (Obiter) B had established that she had a subsisting tenancy of the premises, but if she had failed to do so, she would still have defeated M&#8217;s claim for possession on the ground that she was entitled to enforce her contractual rights under the agreement. Just because the agreement was incapable of giving rise to a tenancy for some old and technical property law rule did not render it invalid as a matter of contract (paras 59-63). (6) (Per Lord Hope) There were significant differences between the way that English and Scottish law treated occupancy agreements (paras 71-81)."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Common Law Rights &mdash; Duration &mdash; Housing Association Tenancies &mdash; Landlords' Rights &mdash; Life Tenants &mdash; Possession Orders &mdash; Termination",
    "COURT": "UKSC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "279",
    "RELATED": [
        "(wl) Norris v Checksfield",
        "(wl) Binions v Evans",
        "(wl) Antoniades v Villiers",
        "(wl) Errington v Errington",
        "(wl) AG Securities v Vaughan",
        "(wl) Street v Mountford",
        "(wl) Gray v Taylor",
        "(wl) City of London Corp v Fell",
        "(wl) Crate v Miller",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Doherty v Birmingham CC",
        "(wl) Firstpost Homes v Johnson"
    ],
    "NAME": "(wl) Facchini v Bryson",
    "SUMMARY": [
        "Licence; lease or; employee",
        "The Court of Appeal held that upon the proper interpretation of a document under which the defendant, an ex-employee of the plaintiffs, occupied premises, it was a lease and not a licence, and that parties could not turn a lease into a licence merely by stating that the document was to be deemed to be a licence."
    ],
    "CITATION": "Facchini v Bryson [1952] 1 TLR 1386",
    "YEAR": "1952",
    "CIT": "[1952] 1 TLR 1386",
    "FLAGS": [
        "Criticised"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Documents",
        "Employees",
        "Licences"
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Documents &mdash; Employees &mdash; Licences",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "280",
    "RELATED": [
        "(wl) Facchini v Bryson",
        "(wl) AG Securities v Vaughan",
        "(wl) Antoniades v Villiers",
        "(wl) Binions v Evans",
        "(wl) Barrett v Morgan",
        "(wl) Errington v Errington",
        "(wl) Crate v Miller",
        "(wl) Gray v Taylor",
        "(wl) Street v Mountford",
        "(wl) Boyer v Warbey",
        "(wl) Ashburn v Arnold",
        "(wl) Taylor Fashions v Liverpool Victoria Trustees"
    ],
    "NAME": "(wl) Norris v Checksfield",
    "SUMMARY": [
        "Service occupancy; service licence; termination of employment; whether notice to quit required",
        "Where an employee was granted a licence to occupy property during his employment for the better performance of his duties, his licence came to an end if he was summarily dismissed for misconduct, and no notice to quit was required. In 1989, N took on C as a semi-skilled mechanic, and it was a condition of his employment that he would drive coaches and apply for a PSV licence. He was allowed to occupy a bungalow near his work &#8220;for the better performance of his duties.&#8221; Before moving into the property he signed a document confirming the terms of the occupation which referred to him having a &#8220;licence&#8221; to occupy the bungalow, and that on termination of his employment the licence would cease forthwith. Every week, GBP 5 was deducted from his wages for the occupation. In December 1989, he was summarily dismissed since N found out that he was a disqualified driver. Without serving a notice to quit, N brought an action for possession. The judge granted the order and C appealed."
    ],
    "CITATION": "Norris v Checksfield [1991] 1 WLR 1241",
    "YEAR": "1991",
    "JUDGE": "Balcombe LJ; Woolf LJ; Staughton LJ",
    "CIT": "[1991] 1 WLR 1241",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Dismissal",
        "Employees",
        "Licences",
        "Notices to Quit",
        "Service Occupancies"
    ],
    "HELD": [
        "dismissing C&#8217;s appeal, that (1) an employee&#8217;s right to exclusive possession of an employer&#8217;s house, together with payment of rent, did not necessarily create a tenancy if the employee was genuinely required to occupy it &#8220;for the better performance of his duties&#8221;. An employer could grant a licence even where the employee went into occupation before taking up the employment where there was a sufficient nexus between the start of the occupation and the employment. As he had gone into occupation to perform the driving duties expected of him, he was a service licensee and not a tenant ( Street v Mountford [1985] A.C. 809 , AG Securities v Vaughan [1990] 1 A.C. 417 distinguished); (2) the Protection from Eviction Act 1977 s.5(1A) , which requires a valid notice to quit to be served in order to determine the right to occupy a dwelling-house, only applies to a &#8220;periodic licence&#8221;. The licence in this case was not periodic, being granted for the single period of employment, and was terminable on the end of the employment without notice ( Ivory v Palmer [1975] I.C.R. 340 considered)."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Dismissal &mdash; Employees &mdash; Licences &mdash; Notices to Quit &mdash; Service Occupancies",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "281",
    "RELATED": [
        "(wl) Binions v Evans",
        "(wl) Ashburn v Arnold",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Fitzkriston v Panayi",
        "(wl) Facchini v Bryson",
        "(wl) AG Securities v Vaughan",
        "(wl) Norris v Checksfield",
        "(wl) Errington v Errington",
        "(wl) Javad v Aqil",
        "(wl) Gray v Taylor",
        "(wl) Crate v Miller",
        "(wl) Antoniades v Villiers"
    ],
    "NAME": "(wl) Street v Mountford",
    "SUMMARY": [
        "Licence agreement; exclusive occupation; whether a tenancy",
        "An agreement granting exclusive occupation of residential accommodation for a term at a rent (where no services are provided) creates a tenancy, notwithstanding the use of the word &#8220;licence&#8221;. By an agreement S granted M the right to occupy two rooms at a weekly rent subject to 14 days notice of termination. The agreement was entitled &#8220;licence agreement,&#8221; and contained a declaration signed by M, to the effect that the agreement did not create a tenancy. Later S sought an order declaring whether the occupancy was a license or a protected tenancy. The recorder declared it to be a tenancy; the Court of Appeal declared it to be a licence."
    ],
    "CITATION": "Street v Mountford [1985] AC 809",
    "YEAR": "1985",
    "JUDGE": "Lord Scarman; Lord Keith of Kinkel; Lord Bridge of Harwich; Lord Brightman; Lord Templeman",
    "CIT": "[1985] AC 809",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Agreements",
        "Licences",
        "Occupation",
        "Rent",
        "Tenancies"
    ],
    "HELD": [
        "allowing the appeal, that where residential accommodation was granted for a term with exclusive possession, no attendance or services being provided, the legal consequence was the granting of a tenancy (notwithstanding the use of the word &#8220;licence&#8221;) (Murray Bull &amp; Co Ltd v Murray [1953] 1 Q.B. 211 overruled; Sturolson &amp; Co v Weniz (1985) 17 H.L.R. 140 disapproved)."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Agreements &mdash; Licences &mdash; Occupation &mdash; Rent &mdash; Tenancies",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "282",
    "RELATED": [
        "(wl) Antoniades v Villiers",
        "(wl) Ofulue v Bossert",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Wright v Macadam",
        "(wl) IDC v Clark",
        "(wl) Crago v Julian",
        "(wl) Gray v Taylor",
        "(wl) Binions v Evans",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Street v Mountford",
        "(wl) Harrow LBC v Qazi",
        "(wl) Norris v Checksfield"
    ],
    "NAME": "(wl) AG Securities v Vaughan",
    "SUMMARY": [
        "Licences; lease or licence; exclusive occupation; joint occupation",
        "An agreement permitting occupation of residential premises in common with a stated number of others who might be granted a like right is capable of preventing a grant of exclusive possession where there is no joint tenancy. In the first appeal, the four occupants, by four separate agreements made on different dates had each been granted by A Co. the exclusive right to use a four bedroom flat in common with three other occupants who might from time to time be granted the like right. Each made monthly payments, in different amounts. The county court judge granted a declaration that the occupants were licensees. In the second appeal, A granted to V and his girlfriend the right to use a flat. Each occupant signed separate but identical agreements described as licenses, which stated that the Rent Acts did not apply, that &#8220;the licensor is not willing to grant...exclusive possession&#8221; and that the use of the flat was &#8220;in common with the licensor and such other licensees or invitees as he may permit from time to time&#8221;. On the landlord&#8217;s claim for possession, the judge held that these were tenancies within the Rent Acts. This decision was overturned by the Court of Appeal."
    ],
    "CITATION": "AG Securities v Vaughan [1990] 1 AC 417",
    "YEAR": "1990",
    "JUDGE": "Lord Bridge of Harwich; Lord Templeman; Lord Ackner; Lord Oliver of Aylmerton; Lord Jauncey of Tullichettle",
    "CIT": "[1990] 1 AC 417",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Joint Tenancies",
        "Leases",
        "Licences",
        "Possession"
    ],
    "HELD": [
        "allowing the first appeal, that there was no exclusive occupation and no joint tenancy and accordingly the occupants were licensees. Allowing the second appeal, the two agreements were interdependent and the terms set out were a pretence designed to avoid the Rent Acts. In reality there had been an intention to grant exclusive possession and accordingly a tenancy had been created Street v Mountford [1985] A.C. 809 applied; dictum of Ralph Gibson, L.J. in Crancour Ltd v Da Silvaesa (1986) 18 H.L.R. 265 approved. Aldrington Garages Ltd v Fielder (1983) 7 H.L.R. 51, Facchini v Bryson [1952] 1 T.L.R. 1386 distinguished. Hadjiloucas v Crean [1988] 1 W.L.R. 1006, Snook v London and West Riding Investments Ltd [1967] 2 Q.B. 786, Somma v Hazelhurst [1978] 1 W.L.R. 1014, Shell-Mex and BP Ltd v Manchester Garages [1971] 1 W.L.R. 612, Radaich v Smith 101 C.L.R. 209, Sturolson &amp; Co v Weniz (1985) 17 H.L.R. 140 considered."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Joint Tenancies &mdash; Leases &mdash; Licences &mdash; Possession",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "283",
    "RELATED": [
        "(wl) AG Securities v Vaughan",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Fitzkriston v Panayi",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Grand Junction Co v Bates",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Street v Mountford",
        "(wl) Escalus Properties v Robinson",
        "(wl) IDC v Clark",
        "(wl) Goldberg v Edwards",
        "(wl) Wright v Macadam",
        "(wl) Oceanic Village Ltd v United Attractions Ltd"
    ],
    "NAME": "(wl) Antoniades v Villiers",
    "SUMMARY": [
        "Licences; lease or licence; exclusive occupation; joint occupation",
        "An agreement permitting occupation of residential premises in common with a stated number of others who might be granted a like right is capable of preventing a grant of exclusive possession where there is no joint tenancy. In the first appeal, the four occupants, by four separate agreements made on different dates had each been granted by A Co. the exclusive right to use a four bedroom flat in common with three other occupants who might from time to time be granted the like right. Each made monthly payments, in different amounts. The county court judge granted a declaration that the occupants were licensees. In the second appeal, A granted to V and his girlfriend the right to use a flat. Each occupant signed separate but identical agreements described as licenses, which stated that the Rent Acts did not apply, that &#8220;the licensor is not willing to grant...exclusive possession&#8221; and that the use of the flat was &#8220;in common with the licensor and such other licensees or invitees as he may permit from time to time&#8221;. On the landlord&#8217;s claim for possession, the judge held that these were tenancies within the Rent Acts. This decision was overturned by the Court of Appeal."
    ],
    "CITATION": "Antoniades v Villiers [1990] 1 AC 417",
    "YEAR": "1990",
    "JUDGE": "Lord Bridge of Harwich; Lord Templeman; Lord Ackner; Lord Oliver of Aylmerton; Lord Jauncey of Tullichettle",
    "CIT": "[1990] 1 AC 417",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Joint Tenancies",
        "Leases",
        "Licences",
        "Possession"
    ],
    "HELD": [
        "allowing the first appeal, that there was no exclusive occupation and no joint tenancy and accordingly the occupants were licensees. Allowing the second appeal, the two agreements were interdependent and the terms set out were a pretence designed to avoid the Rent Acts. In reality there had been an intention to grant exclusive possession and accordingly a tenancy had been created Street v Mountford [1985] A.C. 809 applied; dictum of Ralph Gibson, L.J. in Crancour Ltd v Da Silvaesa (1986) 18 H.L.R. 265 approved. Aldrington Garages Ltd v Fielder (1983) 7 H.L.R. 51, Facchini v Bryson [1952] 1 T.L.R. 1386 distinguished. Hadjiloucas v Crean [1988] 1 W.L.R. 1006, Snook v London and West Riding Investments Ltd [1967] 2 Q.B. 786, Somma v Hazelhurst [1978] 1 W.L.R. 1014, Shell-Mex and BP Ltd v Manchester Garages [1971] 1 W.L.R. 612, Radaich v Smith 101 C.L.R. 209, Sturolson &amp; Co v Weniz (1985) 17 H.L.R. 140 considered."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Joint Tenancies &mdash; Leases &mdash; Licences &mdash; Possession",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "284",
    "RELATED": [
        "(wl) Wandsworth LBC v Dixon",
        "(wl) Errington v Errington",
        "(wl) IDC v Clark",
        "(wl) Ashburn Anstalt v Arnold",
        "(wl) Gray v Taylor",
        "(wl) Doherty v Birmingham CC",
        "(wl) Wintergarden v Millennium Productions",
        "(wl) Ashburn v Arnold",
        "(wl) Facchini v Bryson",
        "(wl) AG Securities v Vaughan",
        "(wl) Antoniades v Villiers",
        "(wl) Wrotham Park Estate Co v Park Homes"
    ],
    "NAME": "(wl) Westminster CC v Clarke",
    "SUMMARY": [
        "Local authority hostel; agreement for occupation described as &#8220;licence to occupy&#8221;; whether occupier licensee or tenant",
        "An occupant of a council hostel for single homeless persons was held to be a licensee, not a tenant, with the same rights as a lodger. P owned premises which were used as a hostel for single homeless men. The occupants were there as &#8220;licensees&#8221; with no exclusive rights of occupation, with their licences terminable on seven days&#8217; notice or forthwith if in breach of the rules. In 1988, P gave him notice because of complaints about him, and claimed possession of the room. D claimed to be a secure tenant entitled to the protection of Part IV of the 1985 Act. The trial judge made an order for possession; the Court of Appeal reversed that decision."
    ],
    "CITATION": "Westminster CC v Clarke [1992] 2 AC 288",
    "YEAR": "1992",
    "COUNSEL": "For WCC: Andrew Collins Q.C. For C: Stephen Sedley Q.C.",
    "JUDGE": "Lord Bridge of Harwich; Lord Templeman; Lord Griffiths; Lord Ackner; Lord Lowry",
    "CIT": "[1992] 2 AC 288",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Housing",
        "Hostels",
        "Licences",
        "Local Authorities' Powers and Duties",
        "Secure Tenancies"
    ],
    "HELD": [
        "allowing P&#8217;s appeal, that s.79(3) of the 1985 Act had not altered the law; a licence could only create a secure tenancy if it conferred exclusive possession of a separate dwelling. In the circumstances of this case D was only a licensee with the rights of a lodger ( Street v Mountford [1985] A.C. 809 applied; Family Housing Association v Jones [1990] 1 W.L.R. 779 overruled)."
    ],
    "CATEGORY": "Housing &mdash; Hostels &mdash; Licences &mdash; Local Authorities' Powers and Duties &mdash; Secure Tenancies",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "285",
    "RELATED": [
        "(wl) Errington v Errington",
        "(wl) AG Securities v Vaughan",
        "(wl) Antoniades v Villiers",
        "(wl) Binions v Evans",
        "(wl) Facchini v Bryson",
        "(wl) Street v Mountford",
        "(wl) Norris v Checksfield",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Ashburn v Arnold",
        "(wl) Grand Junction Co v Bates",
        "(wl) Boyer v Warbey",
        "(wl) Javad v Aqil"
    ],
    "NAME": "(wl) Gray v Taylor",
    "SUMMARY": [
        "assured tenancies; licences; almsperson appointed under charitable trust permitted to occupy",
        "T, having been appointed an almsperson by a charitable trust, was permitted to occupy a flat in one of the almshouses owned by the charity, paying a weekly sum towards the upkeep of the properties. However, the trustees subsequently sought to terminate T&#8217;s appointment as an almsperson, claiming that her conduct had disturbed the quiet enjoyment of the accommodation. T contended that, upon her appointment, she had been granted exclusive possession of the flat for a term at a rent, which rendered her an assured tenant whose tenancy could not be terminated except by an order of the court. She appealed against a decision on a preliminary issue that she was not an assured tenant of the flat under the Housing Act 1988 s.1."
    ],
    "CITATION": "Gray v Taylor [1998] 1 WLR 1093",
    "YEAR": "1998",
    "COUNSEL": "For T: David Watkinson and Maggie Jones. For the trustees: Christopher McCall Q.C. and Francesca Quint.",
    "JUDGE": "Nourse LJ; Mummery LJ; Sir John Vinelott",
    "CIT": "[1998] 1 WLR 1093",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Accommodation",
        "Assured Tenancies",
        "Charitable Trusts",
        "Licences"
    ],
    "HELD": [
        "dismissing the appeal, that a person appointed as an almsperson under a charitable trust occupied accommodation in the almshouse as a personal privilege in her capacity as a beneficiary and therefore the nature of the legal relationship between the parties could only be characterised as a licence and not an assured tenancy, Errington v Errington and Woods [1952] 1 K.B. 290 applied, Street v Mountford [1985] A.C. 809 distinguished. The trustees&#8217; power to grant T a right to occupy the flat did not permit them to grant a right which could run contrary to the purpose of the trust by allowing T to continue to occupy the flat after she no longer qualified as a beneficiary and it made no difference that T had made a weekly payment towards the upkeep of the almshouses."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Accommodation &mdash; Assured Tenancies &mdash; Charitable Trusts &mdash; Licences",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "286",
    "RELATED": [
        "(wl) Doherty v Birmingham CC",
        "(wl) Hounslow LBC v Powell",
        "(wl) Javad v Aqil",
        "(wl) Lloyds Bank v Rosset",
        "(wl) Nicholls v Lan",
        "(wl) Ashburn v Arnold",
        "(wl) Kingsworth v Tizzard",
        "(wl) Harrow LBC v Qazi",
        "(wl) Street v Mountford",
        "(wl) National Provincial Bank v Ainsworth",
        "(wl) Abbey National BS v Cann",
        "(wl) Wood v Waddington"
    ],
    "NAME": "(wl) Kay v Lambeth LBC",
    "SUMMARY": [
        "In so far as the ratio of the decision in Harrow LBC v Qazi [2003] UKHL 43, [2004] 1 A.C. 983 was that the enforcement of a right to possession in accordance with the domestic law of property could never be incompatible with the Human Rights Act 1998 Sch.1 Part I Art.8, that had to be modified in the light of Connors v United Kingdom (66746/01) (2005) 40 E.H.R.R. 9.",
        "The appellants (K and P) appealed against decisions ([2004] EWCA Civ 926 and [2005] EWCA Civ 289) that the Human Rights Act 1998 Sch.1 Part I Art.8 afforded them no defence against actions for possession brought by the respondent local authorities (B and L). K had occupied residential premises owned by B and originally licensed to a housing trust. Although they had originally been granted licences, they had become tenants of the trust when B had granted the trust a lease of the properties. B had then terminated the lease and sought possession of the properties on the basis that K were trespassers. K had argued that on the termination of the lease they had become tenants of B, and alternatively that Art.8 afforded them a defence to the claim. P were gypsies who had entered onto land owned by L. In response to an application by L for possession of the land they had argued that L was in breach of its statutory obligation to provide gypsy sites, that their circumstances were exceptional and that they were protected by Art.8. The issues were whether (i) K were tenants of B or were trespassers; (ii) the majority decision in Qazi v Harrow LBC [2003] UKHL 43, [2004] 1 A.C. 983 had to be modified to take account of later Strasbourg jurisprudence, particularly the case of Connors v United Kingdom (66746/01) (2005) 40 E.H.R.R. 9; (iii) defendants to possession proceedings brought by public authorities should be permitted in principle to raise an Art.8 defence in those proceedings, rather than being required to raise them by way of judicial review; (iv) the English rules of precedent had to be modified to enable a court to decline to follow a decision by which it would otherwise be bound, if that decision appeared to be inconsistent with a later ruling of the court in Strasbourg."
    ],
    "CITATION": "Kay v Lambeth LBC [2006] UKHL 10",
    "YEAR": "2006",
    "COUNSEL": "For the appellants: Jan Luba QC, David Watkinson, Kelvin Rutledge, Alex Offer. For Leeds City Council: Ashley Underwood QC, Thomas Tyson. For Lambeth LBC: Andrew Arden QC, Terence Gallivan, John McCafferty. For the intervener: Philip Sales, Daniel Stilitz.",
    "JUDGE": "Lord Bingham of Cornhill; Lord Nicholls of Birkenhead; Lord Hope of Craighead; Lord Scott of Foscote; Lord Walker of Gestingthorpe; Baroness Hale of Richmond; Lord Brown of Eaton-under-Heywood",
    "CIT": "[2006] UKHL 10",
    "FLAGS": [
        "Criticised",
        "Hale",
        "Bingham"
    ],
    "CATEGORIES": [
        "Human Rights Other Related Subjects: Landlord and Tenant",
        "Legal Methodology",
        "Defences",
        "European Court of Human Rights",
        "Gypsies",
        "Local Authority Housing",
        "Occupation",
        "Possession Claims",
        "Precedent",
        "Right to Respect For Home"
    ],
    "HELD": [
        "dismissing the appeals (Lords Bingham, Nicholls and Walker dissenting on the issue of the circumstances in which an Art.8 issue had to be considered), that (1) K were, vis a vis B, trespassers with no right to remain in the properties. Though the lease by B to the trust had meant that there was a relationship of landlord and tenant between the trust and K, K had had no estate in the land and had simply been a licensee when it had granted the original licences. Thus, the tenancies were not derivative estates and any rights enjoyed by K had never been enforceable against B. (2) In so far as the ratio of Qazi was that the enforcement of a right to possession in accordance with the domestic law of property could never be incompatible with Art.8, that had to be modified in the light of Connors , Qazi doubted and Connors applied. (3) It was open to an occupier to raise an Art.8 defence to possession proceedings in the county court rather than by way of judicial review. However, the public authority did not from the outset have to plead and prove that the order sought was justified. Once the court accepted that the property in question was the occupier&#8217;s home for the purposes of Art. 8, it was to proceed on the assumption that the requirements of the domestic law regarding possession struck a fair balance and would provide the justification for interference required by Art.8(2). Further consideration of the interests protected by Art.8 would be unnecessary and there was no requirement that the Art.8 issue had to be considered by the court in every case by taking into account the occupier&#8217;s personal circumstances. Indeed, such a requirement would go further than justified by the Strasbourg jurisprudence. There would, however, be some cases of a special and unusual kind, such as Connors , where the interference with the occupier&#8217;s Art.8 interests would have to be justified by a decision making process that ensured that some special consideration was given to those interests. If there was any defect in the law giving rise to possession then it would have to be amended to provide the necessary safeguards. A defence that did not challenge the law under which the possession order was sought as being incompatible with Art.8, but was based only on the occupier&#8217;s personal circumstances had to be struck out. Where the domestic law provided for personal circumstances to be taken into account, for example where the statutory test was whether it was reasonable to make the order, then there had to be a fair opportunity for the arguments in favour of the occupier to be presented. If, however, the requirements of the law had been established and the right to recover possession was unqualified, the only situations in which it would be open to the court to refrain from making the possession order were if a seriously arguable point was raised that the law was incompatible with Art.8, or if the occupier wished to challenge the public authority&#8217;s decision to seek possession as an improper exercise of its powers on the ground that no reasonable person would consider the decision justifiable. In the former situation the High Court would have to deal with the compatibility issue unless the county court was able to give effect to the law in a way that was compatible, pursuant to s.3 of the 1998 Act. (4) The English courts had to adhere to the English rules of precedent. It was for the national courts to decide in the first instance how the principles expounded in Strasbourg were to be applied, and the ordinary rules of precedent had to apply to those decisions. There had to be a degree of certainty in the interpretation of the law and that was best achieved by adhering to the rules of precedent. If a judge felt that a decision was inconsistent with Strasbourg authority he had to follow the binding precedent but could give leave to appeal as appropriate. (5) (Per Lords Bingham, Nicholls and Walker) In highly exceptional circumstances an occupier might be able to raise a seriously arguable case, on the basis of his personal circumstances, that a possession order would be in breach of Art.8."
    ],
    "CATEGORY": "Human Rights Other Related Subjects: Landlord and Tenant &mdash; Legal Methodology &mdash; Defences &mdash; European Court of Human Rights &mdash; Gypsies &mdash; Local Authority Housing &mdash; Occupation &mdash; Possession Claims &mdash; Precedent &mdash; Right to Respect For Home",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "287",
    "RELATED": [
        "(wl) Good Harvest v Centaur",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Grand Junction Co v Bates",
        "(wl) Regent Oil v Gregory",
        "(wl) AG Securities v Vaughan",
        "(wl) Fitzkriston v Panayi",
        "(wl) Giles v Tarry",
        "(wl) Ofulue v Bossert",
        "(wl) IDC v Clark",
        "(wl) Wright v Macadam"
    ],
    "NAME": "(wl) Re King",
    "SUMMARY": [
        "Covenant; breach of covenant; assignee&#8217;s rights",
        "1. On the assignment of the reversion expectant on a lease the assignee becomes entitled to sue for breaches of covenant committed before the assignment and, a fortiori, for continuing breaches. Semble the Conveyancing Act 1881 s.10 (now the Law of Property Act 1925 s.141 ) altered the law in this respect and previous authorities cannot now be relied on.Per Diplock L.J.: Where a tenant has insured in pursuance of an absolute covenant in his lease to insure against fire and reinstate in case of fire, his damage from a fire and his insurable interest is the whole value of the property, not merely his leasehold interest.Per Upjohn and Diplock L.JJ., Lord Denning M.R. dissenting: Where insurance is effected in the joint names of lessor and lessee in pursuance of a covenant in a lease the object is only to see that the insurance money is spent on reinstatement. If, therefore, the policy is paid but reinstatement of the property is impossible, the money belongs to the tenant who paid the premiums.The executor of X took out an originating summons to determine whether Y, the owner of the freehold reversion on a lease vested in X, would be able, after his reversion had been compulsorily acquired, to sue the executor for breaches of a covenant committed by X while Y was the reversioner, and also asking whether insurance money paid under a policy of fire insurance kept up by X belonged to Y or to X&#8217;s estate. The policy had been kept up by X under covenants in the lease to keep up a policy in the joint names of landlord and tenant and to reinstate in case of fire, and there was also a tenant&#8217;s repairing covenant. After the fire the policy money had been invested in the joint names of X and Y on the terms of a letter from Y&#8217;s solicitors to X&#8217;s solicitors whereby the fund was charged with X&#8217;s liability to perform his covenants under the lease and it was provided that on X&#8217;s decease it was not to form part of his estate."
    ],
    "CITATION": "Re King [1963] Ch 459",
    "YEAR": "1963",
    "JUDGE": "Lord Denning MR; Upjohn LJ; Diplock LJ",
    "CIT": "[1963] Ch 459",
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Insurance",
        "Administration of Estates",
        "Covenants",
        "Insurance",
        "Leases"
    ],
    "HELD": [
        "(1) that after Y had assigned his reversion to the acquiring authority he could not sue X&#8217;s executor on the breaches of covenant; (2) (Upjohn and Diplock L.JJ., Lord Denning M.R. dissenting) that the insurance money belonged to X&#8217;s estate, as the object of the latter, like that of insuring in joint names was only to make sure that the money was available for the reinstatement. Waters v Monarch Fire &amp; Life Assurance Co [1834-60] All E.R. Rep. 654 distinguished and London &amp; North Western Railway v Glyn 120 E.R. 1054 distinguished."
    ],
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Insurance &mdash; Administration of Estates &mdash; Covenants &mdash; Insurance &mdash; Leases",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "288",
    "RELATED": [
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Grand Junction Co v Bates",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) AG Securities v Vaughan",
        "(wl) City of London Corp v Fell",
        "(wl) Crago v Julian",
        "(wl) Wright v Macadam",
        "(wl) Regent Oil v Gregory",
        "(wl) Antoniades v Villiers",
        "(wl) Escalus Properties v Robinson",
        "(wl) Goldberg v Edwards"
    ],
    "NAME": "(wl) Hua Chiao v Chia Chua",
    "SUMMARY": [
        "Lease; covenant to return deposit; assignment of reversion; whether covenant touched and concerned the land",
        "Where a lease contained a covenant by the landlord that at the end of the lease he would return a deposit to the tenant, and the landlord assigned the reversion to a third party, from whom the tenant sought the return of the deposit, it was held that the covenant was not binding on the assignee, as the covenant did not touch or concern the land. The landlord (L) granted the tenant (T) a lease of premises in Hong Kong for five years. The lease provided that the expressions `the landlord&#8217; and `the tenant&#8217; should include their assigns. There was payable a security deposit by T returnable at the expiration of the term, if there were no breaches of any of the terms, but otherwise forfeited. T paid the deposit and took the lease. L assigned the reversion to a bank by way of mortgage, but no reference was made to the deposit. L defaulted, and the bank entered into possession. L went into liquidation. T at the end of the term sought the return of the deposit from the bank. The High Court of Hong Kong dismissed the claim, but the Court of Appeal of Hong Kong allowed T&#8217;s appeal, holding that the obligation to return the deposit touched and concerned the land, so that the burden of paying it passed to the bank. The bank&#8217;s appeal to the Judicial Committee was allowed. The obligations to pay and return the deposit were held to be merely personal obligations, between the original parties to the lease, and the right to return was not enforceable against an assignee in the absence of express agreement. Although the deposit was to secure T&#8217;s obligations under the lease including those which touched and concerned the land, the landlord&#8217;s covenant to return the deposit was not itself a covenant dealing with the subject matter of the lease or touching or concerning the land, and did not pass with the reversion. The bank as assignee was under no obligation to pay the amount deposited with the landlord. Dollar Land Corp v Solomon (1963) 39 D.L.R. (2d) 221 applied. Mansel v Norton (1883) 22 Ch. D. 769, C.A.; Lord Howard de Walden v Barber (1903) 19 T.L.R. 183 and Moss Empires Ltd v Olympia (Liverpool) Ltd [1939] A.C. 544, distinguished."
    ],
    "CITATION": "Hua Chiao v Chia Chua [1987] AC 99",
    "YEAR": "1987",
    "JUDGE": "Lord Bridge of Harwich; Lord Brandon of Oakbrook; Lord Oliver of Aylmerton; Lord Goff of Chieveley; Sir Ivor Richardson",
    "CIT": "[1987] AC 99",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Covenants",
        "Deposits",
        "Leases"
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Covenants &mdash; Deposits &mdash; Leases",
    "COURT": "UKPC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "289",
    "RELATED": [
        "(wl) Regent Oil v Gregory",
        "(wl) Good Harvest v Centaur",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) MRA Engineering Ltd v Trimester Corp",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Crago v Julian",
        "(wl) City of London Corp v Fell",
        "(wl) Grand Junction Co v Bates",
        "(wl) Goldberg v Edwards",
        "(wl) Wright v Macadam",
        "(wl) Re King",
        "(wl) Oceanic Village Ltd v United Attractions Ltd"
    ],
    "NAME": "(wl) Swift Investments v Combined English Stores",
    "SUMMARY": [
        "Assignment; covenant guaranteeing lessee&#8217;s obligations",
        "A covenant guaranteeing a lessee&#8217;s obligations is enforceable by an assignee of the reversion, without a specific assignment. A Co. let premises on an underlease to B Co., a subsidiary of C Co. C Co. guaranteed B Co.&#8217;s obligations under the underlease. A Co. conveyed the interest expectant on the reversion to P Co. without any specific assignment of the benefit of C Co.&#8217;s covenant. B Co. was wound up and P Co. sued C Co. for the outstanding rent, and obtained judgment."
    ],
    "CITATION": "Swift Investments v Combined English Stores [1989] AC 632",
    "YEAR": "1989",
    "JUDGE": "Lord Keith of Kinkel; Lord Roskill; Lord Templeman; Lord Ackner; Lord Oliver of Aylmerton",
    "CIT": "[1989] AC 632",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Assignment",
        "Covenants",
        "Leases",
        "Reversions",
        "Surety"
    ],
    "HELD": [
        "that this covenant touched and concerned the land, and thus the appeal would be dismissed (Vyvyan v Arthur [1814-23] All E.R. Rep. 352 and Dyson v Forster [1909] A.C. 98 applied; Kumar v Dunning [1989] Q.B. 193 approved)."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Assignment &mdash; Covenants &mdash; Leases &mdash; Reversions &mdash; Surety",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "290",
    "RELATED": [
        "(wl) Crate v Miller",
        "(wl) Barrett v Morgan",
        "(wl) Norris v Checksfield",
        "(wl) Ives v High",
        "(wl) Doherty v Birmingham CC",
        "(wl) Newlon Housing Trust v Alsulaimen",
        "(wl) Binions v Evans",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Antoniades v Villiers",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Facchini v Bryson",
        "(wl) Harrow LBC v Qazi"
    ],
    "NAME": "(wl) Boyer v Warbey",
    "SUMMARY": [
        "Statutory tenancy; notice to quit",
        "The tenancy of a flat had been assigned with the consent of the landlords (L) to the defendant (D) who, on the expiration of the lease, held the property as a statutory tenant. On August 30, 1951, D left the flat without giving L the three months&#8217; notice required by the Increase of Rent and Mortgage Interest (Restrictions) Act 1920 s.15(1). D subsequently sent the keys to L, who refused to accept a surrender of the tenancy. L claimed that D was liable to pay rent until November 21, 1951, when the flat was re-let. The issues for determination were (i) whether, in the case of a statutory tenant, the effect of a failure to give notice to quit in breach of the statutory obligation imposed by s.15(1) was that the statutory obligation to pay rent continued or whether such breach merely gave rise to a claim for damages; (ii) whether a legal point that had not been taken before a county court judge could be argued before the Court of Appeal."
    ],
    "CITATION": "Boyer v Warbey [1953] 1 QB 234",
    "YEAR": "1953",
    "JUDGE": "Lord Evershed MR; Denning LJ; Romer LJ",
    "CIT": "[1953] 1 QB 234",
    "FLAGS": [
        "Approved",
        "Denning"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Appeals",
        "County Courts",
        "Notices to Quit",
        "Omissions",
        "Statutory Tenancies",
        "Surrender"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) D was liable to pay the rent (either as such or as damages for breach of statutory duty) until November 21, when the flat had been re-let. (2) The general rule in regard to county court appeals was that for a point in a county court appeal to be open for argument in the Court of Appeal it must have been taken in the county court. Except in the limited class of cases which involved the question of compliance with the mandatory terms of the Rent Restriction Acts, the general rule must be followed. In that respect county court appeals differed from High Court appeals. If the point had not been taken before the county court judge, it could not be argued on appeal. (Smith v Charles Baker &amp; Sons [1891] A.C. 325 applied; Elvins v Slaney [1948] W.N. 129 explained.)"
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Appeals &mdash; County Courts &mdash; Notices to Quit &mdash; Omissions &mdash; Statutory Tenancies &mdash; Surrender",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "291",
    "RELATED": [
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Regent Oil v Gregory",
        "(wl) Grand Junction Co v Bates",
        "(wl) Javad v Aqil",
        "(wl) Fitzkriston v Panayi",
        "(wl) Good Harvest v Centaur",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) KS Victoria Street v House of Fraser",
        "(wl) Crago v Julian",
        "(wl) Taylor Fashions v Liverpool Victoria Trustees",
        "(wl) Oceanic Village Ltd v United Attractions Ltd"
    ],
    "NAME": "(wl) City of London Corp v Fell",
    "SUMMARY": [
        "Business tenancy; assignment; continuation of lease under statute; assignee compulsorily wound up owing rent to landlord; whether original tenant liable for outstanding rent after expiry of term of lease",
        "The Landlord and Tenant Act 1954 Part II imposes liability only on the landlord and the occupying tenant. D entered into a lease of business premises owned by P and covenanted, inter alia, to pay the annual rent during the contractual term. D later assigned the unexpired term of the lease to a company who, on expiry of the term, remained in occupation pursuant to the provisions of Pt.II of the 1954 Act. Subsequently the company was compulsorily wound up and surrendered the premises to P, owing substantial arrears of rent. P commenced proceedings against D as the original tenants for the outstanding rent. The judge dismissed P&#8217;s claim, holding that, although by virtue of s.24(1) of the 1954 Act the tenancy had continued after the expiry of the term, D&#8217;s obligation to pay rent ceased on the expiration of the contractual term of the lease. P&#8217;s appeal to the Court of Appeal was dismissed and P appealed again."
    ],
    "CITATION": "City of London Corp v Fell [1994] 1 AC 458",
    "YEAR": "1994",
    "COUNSEL": "For CLC: Andrew Arden Q.C. and Jonathan Manning. For F: David Neuberger Q.C. and Erica Foggin.",
    "JUDGE": "Lord Templeman; Lord Goff of Chieveley; Lord Jauncey of Tullichettle; Lord Browne-Wilkinson; Lord Mustill",
    "CIT": "[1994] 1 AC 458",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Assignment",
        "Business Tenancies",
        "Covenants",
        "Privity of Contract"
    ],
    "HELD": [
        "dismissing the appeal, that Part II of the 1954 Act imposed liability only on the landlord and the occupying tenant. It did not expressly impose liability on the original tenant, in the case of an assignment, to pay arrears of rent incurred by the assignee after the expiry of the contractual term. Accordingly, since the continued tenancy was capable of existing in law independently of the original contract, no such liability needed to be, nor was it to be, implied."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Assignment &mdash; Business Tenancies &mdash; Covenants &mdash; Privity of Contract",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "292",
    "RELATED": [
        "(wl) Wright v Macadam",
        "(wl) Crago v Julian",
        "(wl) Antoniades v Villiers",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Fitzkriston v Panayi",
        "(wl) Ofulue v Bossert",
        "(wl) Escalus Properties v Robinson",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) AG Securities v Vaughan",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Goldberg v Edwards",
        "(wl) Grand Junction Co v Bates"
    ],
    "NAME": "(wl) Oceanic Village Ltd v United Attractions Ltd",
    "SUMMARY": [
        "restrictive covenants; business tenancies; demise of part; restrictive covenant unenforceable against other tenants of premises",
        "The landlord of the former London County Hall granted a lease of a part of the premises to O, who set up a gift shop connected to the London Aquarium. The lease contained a covenant that the landlord would not allow another gift shop to be opened in the building. Subsequently, the landlord granted another lease to U, without any restriction on gift shop use. O sought an injunction preventing U from opening a gift shop, contending that under the Landlord and Tenant (Covenants) Act 1995 s.3(5), it was entitled to enforce the covenant against the tenant of &#8220;any demised premises&#8221; let by the landlord or, alternatively, that since the covenant was not registrable under the Land Registration Act 1925 s.50(1), U was fixed with actual or constructive notice of it."
    ],
    "CITATION": "Oceanic Village Ltd v United Attractions Ltd [2000] Ch 234",
    "YEAR": "2000",
    "COUNSEL": "For OV: Jonathan Gaunt Q.C. and David Lord. For UA: Timothy Fancourt.",
    "JUDGE": "Neuberger J",
    "CIT": "[2000] Ch 234",
    "FLAGS": [
        "Neuberger"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Leases",
        "Restrictive Covenants"
    ],
    "HELD": [
        "dismissing the application, that &#8220;any demised premises&#8221; had a restrictive meaning and referred only to the premises demised in the particular lease. O could not, therefore, enforce the covenant against U, who had taken the lease under a separate demise. Moreover, although it was true that the covenant was not capable of being registered under s.50(1), the application of s.19(2) and s.20(1) of the 1925 Act meant that U&#8217;s actual or constructive knowledge of the covenant was irrelevant."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Leases &mdash; Restrictive Covenants",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "293",
    "RELATED": [
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Regent Oil v Gregory",
        "(wl) KS Victoria Street v House of Fraser",
        "(wl) MRA Engineering Ltd v Trimester Corp",
        "(wl) Crago v Julian",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Re King",
        "(wl) Grand Junction Co v Bates",
        "(wl) City of London Corp v Fell",
        "(wl) Reeves v Sandhu",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Goldberg v Edwards"
    ],
    "NAME": "(wl) Good Harvest v Centaur",
    "SUMMARY": [
        "The Landlord and Tenant (Covenants) Act 1995 precluded a person who had guaranteed a tenant&#8217;s obligations under a lease from being required to give a further guarantee in respect of an assignee of the lease."
    ],
    "CITATION": "Good Harvest v Centaur [2010] EWHC 330 (Ch)",
    "ABSTRACT": [
        "The applicant landlord (G) applied for summary judgment in its claim, pursuant to a purported guarantee agreement entered into by the respondent company (R), for rent due under an underlease.",
        "A third party company (P) had demised the underlease to a third party company (C) with R acting as guarantor for the underlease. C later assigned the underlease to another third party company (T). On the same day, P, C and R entered into a document described as an &#8220;authorised guarantee agreement&#8221;. It recited that P had agreed to grant C a licence to effect the assignment to T subject to C and T entering into a formal licence, as they in fact did, and to C and R entering into the guarantee agreement. The guarantee agreement stated that C and R each covenanted with P and its successors that T would pay rent, and otherwise perform certain lessee covenants, from the date of the assignment to T until the next lawful assignment of the underlease. The headlease from which the underlease was drawn was later surrendered with the result that G became the registered freehold proprietor and thus T&#8217;s direct landlord. Rent became due under the underlease and G commenced a claim to recover the rent from R.",
        "C contended that the guarantee agreement was void and unenforceable as against it, by reason of the Landlord and Tenant (Covenants) Act 1995 s.25."
    ],
    "YEAR": "2010",
    "COUNSEL": "For the claimant: Romie Tager QC, Philip Kremen. For the defendant: David Holland.",
    "JUDGE": "Newey J",
    "CIT": "[2010] EWHC 330 (Ch)",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Real Property",
        "Assignment",
        "Covenants",
        "Guarantors",
        "Leases"
    ],
    "HELD": [
        "Application refused.",
        "It was apparent that s.24 of the Act was meant to ensure that any obligations undertaken by a person as guarantor for a tenant should come to an end on the assignment of the lease. If the guarantor was required to enter into a further guarantee when the lease was assigned, that guarantee would be contrary to s.25(1)(a) of the Act in that it would, if valid, impose on the guarantor obligations equivalent to those from which s.24 was designed to secure his release. That conclusion was reinforced by the fact that s.25 was not to be interpreted generously, Avonridge Property Co Ltd v Mashru [2005] UKHL 70, [2005] 1 W.L.R. 3956 followed. If Parliament had intended a tenant&#8217;s guarantor to be able to guarantee obligations of an assignee, it would have been expected to say so explicitly, particularly since guarantors were mentioned expressly in the Act more than once; it had not done so. The circumstances in which a tenant could give a guarantee for an assignee were addressed by s.16 of the Act, but there was no equivalent provision dealing with guarantors; nor did s.16 itself contain any reference to guarantors. Accordingly, the guarantee agreement was invalidated by s.25 insofar as it purported to impose liability on R."
    ],
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Real Property &mdash; Assignment &mdash; Covenants &mdash; Guarantors &mdash; Leases",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "294",
    "RELATED": [
        "(wl) Good Harvest v Centaur",
        "(wl) Crago v Julian",
        "(wl) MRA Engineering Ltd v Trimester Corp",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Regent Oil v Gregory",
        "(wl) Fitzkriston v Panayi",
        "(wl) City of London Corp v Fell",
        "(wl) Reeves v Sandhu",
        "(wl) Cook v Mortgage Business plc",
        "(wl) AG Securities v Vaughan",
        "(wl) Javad v Aqil",
        "(wl) Antoniades v Villiers"
    ],
    "NAME": "(wl) KS Victoria Street v House of Fraser",
    "SUMMARY": [
        "The court explained the general effect of the Landlord and Tenant (Covenants) Act 1995 s.24 and s.25 on existing guarantors."
    ],
    "CITATION": "KS Victoria Street v House of Fraser [2011] EWCA Civ 904",
    "ABSTRACT": [
        "The appellant landlord (V) appealed against a decision ([2010 EWHC 3006 (Ch), [2010] 44 E.G. 125 (C.S.)) that a clause in a leaseback agreement was void under the Landlord and Tenant (Covenants) Act 1995 s.25(1)(a). All three respondents (D1, D2 and D3), who were companies in the same group, appealed against a subsequent decision ([2010] EWHC 3344(Ch)) on the specific performance of the clause.",
        "V had acquired the freehold of some premises and had granted a 35-year lease back to the previous owner, the first respondent (D1). The third respondent (D3) acted as surety for D1&#8217;s liabilities. The parties agreed that within three months, the lease would be assigned to another company within the group. Clause 3.5 of the agreement stipulated that if an assignee had not been chosen by a certain date, D1 would assign the lease to the second respondent (D2) and, under cl.3.5(iii), D3 would enter into a deed of guarantee. However, the lease was never assigned. The judge found that cl.3.5(iii) was void, but ordered specific performance of the clause on the basis that cl.3.5(iii) was severable from the rest of the clause. In the subsequent hearing, the judge dismissed D&#8217;s claim that, in the light of cl.3.15(F), if the lease was assigned to D2, D2 could immediately assign it back to D1 without any guarantee other than that of D3, which was insolvent on a balance sheet basis. The court had to determine whether (i) cl.3.5(iii) was invalid; (ii) the reasoning in Good Harvest Partnership LLP v Centaur Services Ltd [2010] EWHC 330 (Ch), [2010] Ch. 426 was correct; (iii) cl.3.15(F) was a &#8220;stand-alone&#8221; provision so that an assignment was lawful if the requirements of cl.3.15(F) alone were fulfilled."
    ],
    "YEAR": "2011",
    "COUNSEL": "For the appellant: Anthony Speaight QC. For the respondents: Jonathan Seitler QC, Nicholas Taggart.",
    "JUDGE": "Lord Neuberger MR; Thomas LJ; Etherton LJ",
    "CIT": "[2011] EWCA Civ 904",
    "FLAGS": [
        "Approved",
        "Neuberger"
    ],
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Civil Procedure",
        "Alienation",
        "Assignment",
        "Authorised Guarantee Agreements",
        "Business Tenancies",
        "Guarantees",
        "Guarantors",
        "Leaseback",
        "Leases",
        "Specific Performance"
    ],
    "HELD": [
        "Appeals dismissed.",
        "(1) If a landlord could, when granting a tenancy, impose an obligation on the tenant&#8217;s guarantor to guarantee the liability of the assignee in the event of an assignment, and, on an assignment by the tenant, enforce that obligation, it would frustrate the operation of s.24(2). If it were otherwise, a landlord, when granting a tenancy, could require a guarantor of the tenant&#8217;s liabilities, on every assignment of the tenancy, to guarantee the liability of each successive assignee. That would be wholly contrary to the purpose of s.24(2), as it would enable a well-advised landlord to ensure that any guarantor was in precisely the position in which it would have been before the Act came into force. Given the plain purpose of the Act, and the widely expressed terms of s.25(1)(a) and s.25(4), any contractual arrangement contained in the tenancy imposing an obligation, on an existing or prospective guarantor of the tenant&#8217;s liabilities, to guarantee a future assignee&#8217;s liabilities would be void, Avonridge Property Co Ltd v Mashru [2005] UKHL 70, [2005] 1 W.L.R. 3956 followed. That conclusion would also apply to a contractual arrangement contained in a later document, for instance a renewal obligation imposed on a guarantor of an assignee&#8217;s liabilities in an assignment or a licence to assign. When it came to frustrating the effect of s.24(2), cl.3.5(iii) was a fortiori the example of a guarantor of the original tenant entering into a renewal obligation. That was because cl.3.5(iii) was not merely an undertaking by a guarantor of the liability of the original tenant, namely D1, to guarantee the liability of a future assignee, namely D2: it was an undertaking to do so in relation to an assignment which V was entitled to insist on taking place (see paras 21, 23-25 of judgment). (2) The interpretation of s.25(1) apparently given in Good Harvest , that it invalidated any agreement which involved a guarantor of the assignor guaranteeing that assignor&#8217;s assignee, was correct, albeit subject to a very important qualification relating to authorised guarantee agreements under s.16: while the guarantor of an assignor could not normally validly guarantee the liability of the assignee, it could validly do so by being party to an authorised guarantee agreement, Good Harvest applied. Accordingly, the effect of s.24 and s.25 on existing guarantors was that (a) an existing or contracting guarantor of a tenant could not validly be required to commit himself in advance to guarantee the liability of a future assignee; (b) subject to (c) and (d), a guarantor of an assignor could not validly guarantee the liability of the assignor&#8217;s assignee; (c) such a guarantor could validly do so by being party to an authorised guarantee agreement which otherwise complied with s.16; (d) such a guarantor could in any event validly guarantee the liability of an assignee on a further assignment (paras 34, 44, 53). (3) Under cl.3.15(F), V&#8217;s consent was not required to an assignment of the property to another company within the group, provided D3 acted as surety to the assignee. If cl.3.15(F) was a stand-alone provision, then even if the lease was assigned to D2, it could freely be re-assigned straight back to D1, so that any order for specific performance would be pointless. However, the requirements of cl.3.15(F) were cumulative with those in cl.3.15(E), and the commercial context in which the lease was granted eliminated any doubt on that point. Accordingly, cl.3.15(E) could be relied on by V if D2 sought to re-assign the lease back to D1 (paras 62-63, 65, 69)."
    ],
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Civil Procedure &mdash; Alienation &mdash; Assignment &mdash; Authorised Guarantee Agreements &mdash; Business Tenancies &mdash; Guarantees &mdash; Guarantors &mdash; Leaseback &mdash; Leases &mdash; Specific Performance",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "295",
    "RELATED": [
        "(wl) KS Victoria Street v House of Fraser",
        "(wl) Regent Oil v Gregory",
        "(wl) Good Harvest v Centaur",
        "(wl) MRA Engineering Ltd v Trimester Corp",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Crago v Julian",
        "(wl) Re King",
        "(wl) Fitzkriston v Panayi",
        "(wl) IDC v Clark",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Wright v Macadam",
        "(wl) AG Securities v Vaughan"
    ],
    "NAME": "(wl) Reeves v Sandhu",
    "SUMMARY": [
        "A landlord could not rely on the fact that he had assigned his freehold interest to a company in order to escape liability in relation to lease covenants entered into before the assignment without applying for release from those obligations under the Landlord and Tenant (Covenants) Act 1995 s.6."
    ],
    "CITATION": "Reeves v Sandhu [2015] EWHC 985 (Ch)",
    "ABSTRACT": [
        "The appellant tenants (R) appealed against the dismissal of their bankruptcy petition that they had presented against the respondent landlord (S), and against an order setting aside the default judgment on which the petition was based.",
        "S had granted a long lease of his property to tenants in 2002. The lease included covenants requiring him to obtain insurance for certain perils, including fire. Around a month after granting the lease, S assigned the reversion to his company (X). In 2008 there was a fire at the premises. R believed that they had not been appropriately reimbursed for their losses, and that remedial work had not been done properly. In June 2009, they issued proceedings against S for alleged breach of the insurance covenants. S was listed as defendant on the claim form, with X&#8217;s details underneath. The particulars of claim made it clear that S was the defendant. R obtained a default judgment. In unsuccessfully seeking to set aside that judgment, S failed to state a defence and failed to attend the hearing. An interim charging order over the property was made final in August 2010. S also failed to serve a fully particularised defence in a second application to set aside the default judgment, which was dismissed. The judgment debt was, however, reduced owing to R&#8217;s receipt of an insurance payment. In an application to set aside a statutory demand served by R, S for the first time stated that, having parted with the reversion of the lease by the time of the alleged breach, he was not liable to R, as he had not been the landlord at the relevant time. His application was dismissed, and R issued a bankruptcy petition. S opposed the petition and repeated his point about not being the right defendant. R maintained that they had an unassailable judgment and that there were no grounds for going behind it. The district judge was concerned that the issue of ownership of the property had never been addressed. She noted that X was the registered owner of the property and concluded that it would be extremely unjust to make a bankruptcy order when the claim had been brought against an innocent person. She also set aside the judgment and the charging order."
    ],
    "YEAR": "2015",
    "COUNSEL": "For the appellants: Philippa Seal. For the respondent: In person.",
    "JUDGE": "Mann J",
    "CIT": "[2015] EWHC 985 (Ch)",
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Insolvency",
        "Legal Profession",
        "Assignment",
        "Bankruptcy Petitions",
        "Burdens of Covenants",
        "Landlords' Duties",
        "Leases",
        "Professional Conduct",
        "Property Insurance"
    ],
    "HELD": [
        "Appeal allowed.",
        "(1) The district judge had been wrong to dismiss the bankruptcy petition and to set aside the related orders. Her premise for doing so had been based on a mistaken assumption that once S had parted with the freehold, he could no longer be liable under the covenants in the lease. Under the Landlord and Tenant (Covenants) Act 1995, only a tenant escaped liability when he parted with the lease; a landlord did not escape unless and until he applied under s.6 of the Act for release. In the absence of any evidence that S had applied for release after assigning the reversion of the lease, he was the correct defendant to the proceedings. There was no indication that R had been aware of that provision when naming S as the defendant to their proceedings. R&#8217;s success was, therefore, a happy accident for them. S&#8217;s complaint that he should not be liable because R&#8217;s legal team had not operated due diligence when issuing the proceedings was misconceived. There was no duty on a counterpart in litigation to get things right. If they got something wrong, they generally suffered through failing to get the orders they sought. In the instant case, R had taken the right course, albeit by accident. They had secured a judgment, and it had not been appropriate to set it aside, certainly not without taking more formal steps and without giving R an opportunity to consider the proposed decision. Nor had it been appropriate to dismiss the bankruptcy petition. A bankruptcy order would, therefore, be made against S."
    ],
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Insolvency &mdash; Legal Profession &mdash; Assignment &mdash; Bankruptcy Petitions &mdash; Burdens of Covenants &mdash; Landlords' Duties &mdash; Leases &mdash; Professional Conduct &mdash; Property Insurance",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "296",
    "RELATED": [
        "(wl) Hounslow LBC v Powell",
        "(wl) Good Harvest v Centaur",
        "(wl) Downsview Nominees Ltd v First City Corp Ltd",
        "(wl) Thorner v Majors",
        "(wl) Thompson v Foy",
        "(wl) The Mortgage Corporation v Shaire and others",
        "(wl) Jones v Challenger",
        "(wl) Meah v GE Money",
        "(wl) Clarke v Corless",
        "(wl) Malik v Fassenfelt",
        "(wl) Barclay v Barclay",
        "(wl) Ives v High"
    ],
    "NAME": "(wl) Phillips v Mobil Oil",
    "SUMMARY": [
        "Arrest; public order; whether police officer capable of being caused harassment alarm or distress",
        "Although a police officer can be a &#8220;person likely to be caused harassment alarm or distress&#8221; by another&#8217;s &#8220;threatening insulting or abusive behaviour&#8221; if the officer is not caused harassment alarm or distress by such words or behaviour, it is unlikely that he will be able to arrest that person under s.5(4) of the Public Order Act 1986 s.5(4) as, if there is no one else about, the officer cannot be in a position to suspect that an offence under s.5(1) has been committed."
    ],
    "CITATION": "Phillips v Mobil Oil [1989] 1 WLR 88",
    "YEAR": "1989",
    "JUDGE": "Glidewell LJ; McCullough J",
    "CIT": "[1989] 1 WLR 88",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Criminal Law",
        "Arrest",
        "Offensive Behaviour",
        "Police Powers and Duties"
    ],
    "CATEGORY": "Criminal Law &mdash; Arrest &mdash; Offensive Behaviour &mdash; Police Powers and Duties",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "297",
    "RELATED": [
        "(wl) Grand Junction Co v Bates",
        "(wl) Escalus Properties v Robinson",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Re King",
        "(wl) Goldberg v Edwards",
        "(wl) Crago v Julian",
        "(wl) Fitzkriston v Panayi",
        "(wl) Ofulue v Bossert",
        "(wl) Regent Oil v Gregory",
        "(wl) Wright v Macadam",
        "(wl) Antoniades v Villiers"
    ],
    "NAME": "(wl) Expert Clothing Service v Hillgate House",
    "SUMMARY": [
        "Forfeiture; breach of covenant; whether capable of remedy; waiver of right",
        "A breach of a positive covenant, whether a continuing breach or a once and for all breach, is ordinarily capable of remedy by the performance of the covenant and the payment of compensation. The landlord, L, granted to the tenant, T, a lease of premises for 25 years. In 1979 T failed to pay the rent and L re-entered the premises. T brought proceedings to recover possession which were settled in 1981 on terms that the lease should be varied and T do certain works by a certain date. T charged the premises to its bank in breach of covenant and failed to do the work. Both breaches of covenant were admitted. L refused to accept rent and served a Law of Property Act 1925 s.146 notice alleging that the breaches were incapable of remedy. Thereafter solicitors acting for L in relation to the variation wrote to T saying that they were arranging for L to seal the deed of variation. L brought proceedings for possession and T sought a declaration that L had waived its right to forfeit. The judge made a possession order."
    ],
    "CITATION": "Expert Clothing Service v Hillgate House [1986] Ch 340",
    "YEAR": "1986",
    "JUDGE": "O&#8217;Connor LJ; Slade LJ; Bristow J",
    "CIT": "[1986] Ch 340",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Compensation",
        "Covenants",
        "Forfeiture",
        "Leases",
        "Performance"
    ],
    "HELD": [
        "allowing T&#8217;s appeal, that (1) a breach of a positive covenant, whether continuing or once for all, was ordinarily capable of remedy by the performance of the covenant and the payment of compensation; L had suffered no irremediable loss and the breach was capable of remedy; the s.146 notice was defective in that it did not require T to remedy the breaches, and was therefore invalid and L was not entitled to possession of the premises ( Scala House &amp; District Property Co v Forbes [1974] Q.B. 575 , Governors of Rugby School v Tannahill [1935] 1 K.B. 87 and Egerton v Esplanade Hotels (London) Ltd [1947] 2 All E.R. 88 distinguished); (2) against the background of the parties&#8217; indications of their intentions, the letter from L&#8217;s solicitors could not have been reasonably understood by anyone as unequivocally indicating an intention to treat the lease as subsisting; L had not waived its right to forfeit the lease ( Central Estates (Belgravia v Woolgar (No.2) [1971] C.L.Y. 6646 applied). Central Estates (Belgravia) Ltd v Woolgar (No.2) [1972] 1 W.L.R. 1048 and Bader Properties Ltd v Linley Property Investments Ltd (1968) 19 P. &amp; C.R. 620 considered."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Compensation &mdash; Covenants &mdash; Forfeiture &mdash; Leases &mdash; Performance",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "298",
    "RELATED": [
        "(wl) Grand Junction Co v Bates",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Crago v Julian",
        "(wl) Cukurova Finance v Alfa Telecom",
        "(wl) AG Securities v Vaughan",
        "(wl) Antoniades v Villiers",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Ofulue v Bossert",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Fitzkriston v Panayi",
        "(wl) Wright v Macadam"
    ],
    "NAME": "(wl) Escalus Properties v Robinson",
    "SUMMARY": [
        "Leases; tenant defaulting on mortgage, rent and service charges; relief from forfeiture; whether service charge treated as rent",
        "The tenants had all mortgaged their properties and had defaulted in making mortgage repayments as well as payments required under the lease. In three cases there were arrears of service charges and two of these were under a lease that provided that service charges were to be treated as rent and recoverable as such. The landlords commenced proceedings for possession and the mortgagees were joined as defendants seeking relief against forfeiture. The actions were brought in the County Court and the High Court. The mortgagees sought relief under the County Courts Act 1984 s.138 and the Supreme Court Act 1981 s.38. The landlords conceded that the mortgagees were entitled to relief against forfeiture but only as from the court&#8217;s order on condition that they paid all arrears of rent up to the date of forfeiture and all mesne profits thereafter. The mortgagees sought and obtained retrospective relief on payment of arrears but not mesne profits. The landlords appealed."
    ],
    "CITATION": "Escalus Properties v Robinson [1996] QB 231",
    "YEAR": "1996",
    "COUNSEL": "For the landlords: David Neuberger Q.C. and Graham Clark. For Abbey National: Michael Driscoll Q.C. and John McGhee. For Bristol &amp; West: Michael Driscoll Q.C. and Timothy Harry.",
    "JUDGE": "Nourse LJ; Roch LJ; Henry LJ",
    "CIT": "[1996] QB 231",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Forfeiture",
        "Leases",
        "Relief",
        "Service Charges"
    ],
    "HELD": [
        "dismissing the appeals, that (1) &#8220;rent&#8221; in the Acts of 1981 and 1984 was a periodical sum paid in return for occupation of land, issuing out of the land where a distress would be levied for non-payment. Where a lease provided that a service charge was to be treated as rent it invested the charge with the character of rent and it was to be treated as such for the purposes of obtaining relief against forfeiture; (2) in proceedings brought for forfeiture of a lease for non-payment of rent by the tenant, the mortgagee was entitled to retrospective relief on payment of all arrears without any liability for mesne profits, United Dominions Trust Ltd v Shellpoint Trustees Ltd [1993] 4 All E.R. 310 applied and (3) such relief was restricted to cases of forfeiture for non-payment of rent and could not assist a mortgagee where there was non-payment of a service charge that had not been invested with the character of rent in the lease. In such circumstances the court had a discretion under the Law of Property Act 1925 s.146(2) to grant relief to the lessee or a person claiming as an underlessee which included the mortgagees, Nind v Nineteenth Century Building Society [1894] 2 Q.B. 226 not followed."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Forfeiture &mdash; Leases &mdash; Relief &mdash; Service Charges",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "299",
    "RELATED": [
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) KS Victoria Street v House of Fraser",
        "(wl) Cukurova Finance v Alfa Telecom",
        "(wl) Harrow LBC v Qazi",
        "(wl) Escalus Properties v Robinson",
        "(wl) Grand Junction Co v Bates",
        "(wl) Abbott v Abbott",
        "(wl) Westminster CC v Clarke",
        "(wl) Halifax BS v Thomas",
        "(wl) Cook v Mortgage Business plc",
        "(wl) MRA Engineering Ltd v Trimester Corp",
        "(wl) Emile Elias v Pine Groves"
    ],
    "NAME": "(wl) Patel v Pirabakaran",
    "SUMMARY": [
        "The phrase &#8220;let as a dwelling&#8221; in the Protection from Eviction Act 1977 s.2 meant &#8220;let wholly or partly as a dwelling&#8221; and so applied to premises that were let for mixed residential and business purposes.",
        "The appellant (T) appealed against a decision that his lease of mixed business and residential premises had been lawfully forfeited by the respondent landlords (L). T conducted a retail business on the ground floor of the premises and resided on the first floor. T fell into arrears and L exercised their right of re-entry in relation to the shop premises. T remained resident in the residential premises. L issued a claim for possession on the basis that as a result of their re-entry of the shop premises the lease had been forfeited. L subsequently excluded T from the residential premises and T issued a claim for an injunction that L should be restrained from excluding him from either part of the premises because under the Protection from Eviction Act 1977 s.2 the purported forfeiture of the lease was unlawful. The judge found that the demised premises were not let &#8220;as a dwelling&#8221;, that accordingly L were not constrained by s.2 of the 1977 Act, and that therefore the lease had been lawfully forfeited."
    ],
    "CITATION": "Patel v Pirabakaran [2006] EWCA Civ 685",
    "YEAR": "2006",
    "COUNSEL": "For the appellant: Jan Luba QC. For the respondents: Tom Weekes.",
    "JUDGE": "Wilson LJ; Sir Peter Gibson",
    "CIT": "[2006] EWCA Civ 685",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Civil Procedure",
        "Business Premises",
        "Forfeiture",
        "Protection From Eviction",
        "Residential Tenancies"
    ],
    "HELD": [
        "allowing the appeal, that (1) the phrase &#8220;let as a dwelling&#8221; in s.2 of the 1977 Act meant &#8220;let wholly or partly as a dwelling&#8221; and so applied to premises that were let for mixed residential and business purposes. When the precursor to s.2 was introduced as the Rent Act 1965 s.31, such was understood to be the established meaning of the phrase, contained, as it had been, in a series of prior enactments and so construed in a series of judgments of the instant court. If that was what the phrase meant in s.31 of the 1965 Act, that was what it must mean in s.2 of the 1977 Act, for the words were identical and lay on the page without any later qualification. The inclusion of a tenancy for mixed purposes in s.8 of the 1977 Act, as in the Housing Act 1996 s.81 and the Commonhold and Leasehold Reform Act 2002 s.167 and s.168, was not idly surplus and its purpose was to exclude such a tenancy from s.3 of the 1977 Act because otherwise the phrase &#8220;let as a dwelling&#8221; would have included such a tenancy in it. It was the clearest window into the meaning of the phrase at least in s.3 and, by reference, in s.2. Wellcome Trust Ltd v Hamad [1998] Q.B. 638 and National Trust for Places of Historic Interest or Natural Beauty v Knipe [1998] 1 W.L.R. 230 considered. (2) Reference to T&#8217;s human rights fortified that interpretation of s.2 of the 1977 Act. The cases of Connors v United Kingdom (66746/01) (2005) 40 E.H.R.R. 9 and Kay v Lambeth LBC [2006] UKHL 10, [2006] 2 A.C. 465 assisted performance in the instant case of the obligation under the Human Rights Act 1998 s.3 to strive for compatible interpretation, Connors and Kay applied. From the judgment in Connors the court derived the following: that an interpretation of s.2 of the 1977 Act that prohibited a landlord from exercising otherwise than by proceedings in court an alleged right of re-entry upon premises let for use as a dwelling as well as for business purposes was an interpretation that would be compatible with the tenant&#8217;s rights under the European Convention on Human Rights 1950 Art.8; and by contrast, that the opposite interpretation of it would be incompatible."
    ],
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Civil Procedure &mdash; Business Premises &mdash; Forfeiture &mdash; Protection From Eviction &mdash; Residential Tenancies",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "300",
    "RELATED": [
        "(wl) AG Securities v Vaughan",
        "(wl) Boyer v Warbey",
        "(wl) Binions v Evans",
        "(wl) Norris v Checksfield",
        "(wl) Barrett v Morgan",
        "(wl) Antoniades v Villiers",
        "(wl) Street v Mountford",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) HSBC v Dyche",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Fitzkriston v Panayi",
        "(wl) Harrow LBC v Qazi"
    ],
    "NAME": "(wl) Crate v Miller",
    "SUMMARY": [
        "Notice to quit; date for giving possession; alternative dates",
        "A notice &#8220;terminating a tenancy&#8221; on the last day of a current period may fairly be said to mean the same thing as a notice to quit and deliver up possession on the following day, for in both cases the landlord is intimating that the last day of the current period is to be the last day of the tenancy. In a weekly tenancy commencing on Saturday, notice dated Friday, July 5, 1946, was given to the tenant &#8220;that the landlord will terminate your tenancy on Friday, July 19, 1946, or at the end of the next complete week of your tenancy from the date hereof, on which date you are hereby required to quit and deliver up possession&#8221;. It was contended by the tenant that the notice to quit was invalid in that it expired on Friday instead of on a Saturday. Held, the notice was valid. Qu&amp;oelig;re: whether if the tenant had relied upon the alternative in the notice the length of the notice would have been sufficient and whether the alternative was in a form which could be validly used. ( Sidebotham v Holland [1895] 1 Q.B. 378 applied; and Queens Club Garden Estates Ltd v Bignell [1924] 1 K.B. 117 applied)."
    ],
    "CITATION": "Crate v Miller [1947] KB 946",
    "YEAR": "1947",
    "JUDGE": "Wynn-Parry J",
    "CIT": "[1947] KB 946",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Notices to Quit",
        "Possession",
        "Tenancies",
        "Termination Notices",
        "Time Limits"
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Notices to Quit &mdash; Possession &mdash; Tenancies &mdash; Termination Notices &mdash; Time Limits",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "301",
    "RELATED": [
        "(wl) Doherty v Birmingham CC",
        "(wl) Hounslow LBC v Powell",
        "(wl) McDonald v McDonald",
        "(wl) Westminster CC v Clarke",
        "(wl) Laskar v Laskar",
        "(wl) Palk v Mortgage Services",
        "(wl) Norris v Checksfield",
        "(wl) Manchester CC v Pinnock",
        "(wl) Corbett v Halifax",
        "(wl) Crate v Miller",
        "(wl) Harrow LBC v Qazi",
        "(wl) Kay v Lambeth LBC"
    ],
    "NAME": "(wl) Wandsworth LBC v Dixon",
    "SUMMARY": [
        "The common law rule in Hammersmith and Fulham LBC v Monk [1992] 1 A.C. 478 which entitled the local authority to recover possession of accommodation following a joint tenant&#8217;s notice to quit had not been invalidated by the enactment of the Human Rights Act 1998 and the repossession did not interfere with the remaining tenant&#8217;s art.8 Convention rights."
    ],
    "CITATION": "Wandsworth LBC v Dixon [2009] EWHC 27 (Admin)",
    "ABSTRACT": [
        "The applicant tenant (D) applied to set aside a possession order and to stay or suspend the execution of the warrant for possession obtained by the respondent local housing authority (W) over a two bedroom flat, which D had occupied as his home on a joint weekly secure tenancy for over 20 years.",
        "In 1983 W granted a joint tenancy of the flat to D, who was then 17 years old, and to his sister. In 2005 D&#8217;s sister served a notice to quit on W, thereby determining the joint tenancy. D sought alternative accommodation from W, which initially made him an offer of a one bedroom property. W issued proceedings for possession of the flat on the ground that D was an unauthorised occupant who had been told he must vacate, and an order for possession was made. However, before execution of the possession order and while D was still in the original flat, police found small amounts of herbal cannabis and cocaine and D was convicted and fined for possession of a Class A drug. Subsequently, W notified D that it had decided he was ineligible for rehousing. In prior related proceedings D was unsuccessful in judicial review of that decision (Dixon v Wandsworth LBC [2007] EWHC 3075 (Admin)).",
        "D relied on McCann v United Kingdom (19009/04) [2008] 2 F.L.R. 899 to submit that making a summary order for possession and its execution breached his rights to respect for his home under the European Convention on Human Rights 1950 art.8 and was unlawful by virtue of the Human Rights Act 1998 s.6(1). D argued that (1) the common law rule in Hammersmith and Fulham LBC v Monk [1992] 1 A.C. 478 which entitled W to recover possession was inconsistent with his art.8 rights; and (2) the decision in Doherty v Birmingham City Council [2008] UKHL 57, [2009] 1 A.C. 367 had altered the gateway B test in Kay v Lambeth LBC [2004] EWCA Civ 926, [2005] Q.B. 352 so as to allow proportionality to be considered."
    ],
    "YEAR": "2009",
    "COUNSEL": "For the claimant: Wayne Beglan. For the defendant: Terence Gallivan.",
    "JUDGE": "Judge Bidder QC",
    "CIT": "[2009] EWHC 27 (Admin)",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Human Rights",
        "Local Government",
        "Common Law",
        "Joint Tenants",
        "Local Authorities' Powers and Duties",
        "Notices to Quit",
        "Repossession",
        "Right to Respect For Home",
        "Secure Tenancies"
    ],
    "HELD": [
        "Application refused",
        "Application refused. (1) It was clear from the judgment of Lord Hope in Qazi v Harrow LBC [2003] UKHL 43, [2004] 1 A.C. 983 at para.74 that the rule in Monk , which meant that an order for possession was inevitable, was not a violation of art.8, particularly in the light of the Commission&#8217;s response in Ure v United Kingdom (Admissibility) (28027/95) . In the binding decisions of Qazi , Kay , and Doherty all the arguments were predicated on the indefeasible right to possession arising from service of a notice to quit, and it had been accepted that the provision for notices to quit in common law was consistent with Article 8. McCann was only of persuasive authority and was distinguishable because in that case the local authority had chosen to bypass the statutory scheme by requesting Mrs McCann to sign a notice to quit and had given no consideration to the applicant&#8217;s right to respect to his home, whereas in the instant case W had not persuaded D&#8217;s sister to serve her notice to quit. Furthermore D had no right to remain in the property, not only because of the common law rule, but also because Parliament had deliberately chosen not to bring a case such as his within the statutory scheme of protection; (2) Whereas Doherty was an exceptional case because of the discriminatory effect of the statutory scheme, D&#8217;s case was not in any way exceptional as required by Kay , but rather D&#8217;s challenge to the possession order was based only on his personal circumstances. Kay was binding authority that the decision made by W to seek summary possession in reliance on its right to possession under domestic law could only be challenged if its decision was one that no reasonable person could consider justifiable, i.e. the test enunciated in Wandsworth LBC v Winder (No.1) [1985] A.C. 461. There was a distinction between W having to take into account D&#8217;s art.8 rights and to consider proportionality, and the court substituting its own view of proportionality for W&#8217;s. Although W had not specifically referred to the balancing exercise set out in art.8(2), its careful decision making process accorded with art.8 and the decision was one to which it could reasonably come."
    ],
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Human Rights &mdash; Local Government &mdash; Common Law &mdash; Joint Tenants &mdash; Local Authorities' Powers and Duties &mdash; Notices to Quit &mdash; Repossession &mdash; Right to Respect For Home &mdash; Secure Tenancies",
    "COURT": "EWHC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "302",
    "RELATED": [
        "(wl) Quigley v Masterson",
        "(wl) Stack v Dowden",
        "(wl) Norris v Checksfield",
        "(wl) Harrow LBC v Qazi",
        "(wl) Burgess v Rawnsley",
        "(wl) McDonald v McDonald",
        "(wl) National Provincial Bank v Ainsworth",
        "(wl) Crate v Miller",
        "(wl) Goodman v Gallant",
        "(wl) Kinch v Bullard",
        "(wl) Wandsworth LBC v Dixon",
        "(wl) Davis v Smith"
    ],
    "NAME": "(wl) Newlon Housing Trust v Alsulaimen",
    "SUMMARY": [
        "financial provision; property adjustment orders; whether termination of joint periodic tenancy by wife giving notice to quit was reviewable disposition of property",
        "A husband, H, and his wife, W, held a joint assured weekly tenancy of a property owned by NHT. When W left the flat, she gave NHT notice to quit the premises expiring on December 4, 1995, the notice being effective to terminate the tenancy on that date. H successfully appealed ((1997) 29 H.L.R. 767, [1997] C.L.Y. 2490) against a decision (i) refusing his application for an adjournment of possession proceedings brought by NHT on the ground that he intended to apply for a property adjustment order under the Matrimonial Causes Act 1973 s.24 , and (ii) making a possession order in NHT&#8217;s favour. The Court of Appeal held that the merits of H&#8217;s claim should have been considered, the termination of the tenancy by the expiry of the notice to quit being a reviewable disposition which, under s.37(2)(b) of the Act, the court had power to set aside if satisfied that it was made with a view to defeating H&#8217;s claim for financial relief. NHT appealed, arguing that the termination of the tenancy was not a disposition of property and consequently the court had no power to revive the tenancy, there being no property in respect of which an adjustment order could be made."
    ],
    "CITATION": "Newlon Housing Trust v Alsulaimen [1999] 1 AC 313",
    "YEAR": "1999",
    "COUNSEL": "For NHT: Andrew Arden Q.C. and Oliver Campbell. For the husband: Simon Buckhaven and V Baun.",
    "JUDGE": "Lord Goff of Chieveley; Lord Lloyd; Lord Hoffmann; Lord Hope; Lord Saville",
    "CIT": "[1999] 1 AC 313",
    "FLAGS": [
        "Approved",
        "Hoffmann"
    ],
    "CATEGORIES": [
        "Family Law Other Related Subjects: Real Property",
        "Financial Provision",
        "Joint Tenancies",
        "Notices to Quit",
        "Property Adjustment Orders"
    ],
    "HELD": [
        "allowing the appeal, that the property which W held on giving notice to quit was a joint interest in a weekly tenancy of the flat. The notice to quit did not serve to destroy the tenancy; it merely indicated that W was unwilling to consent to the tenancy continuing beyond the date at which it could otherwise expire, Hammersmith and Fulham LBC v Monk [1992] 1 A.C. 478 considered. At the moment when the periodic tenancy expired by effluxion of time, W&#8217;s interest ceased to exist and she had no property of which she could dispose. Therefore, the court would have had no power to make an order for its transfer to H."
    ],
    "CATEGORY": "Family Law Other Related Subjects: Real Property &mdash; Financial Provision &mdash; Joint Tenancies &mdash; Notices to Quit &mdash; Property Adjustment Orders",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "303",
    "RELATED": [
        "(wl) Norris v Checksfield",
        "(wl) Boyer v Warbey",
        "(wl) Crate v Miller",
        "(wl) Doherty v Birmingham CC",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Gray v Taylor",
        "(wl) Ives v High",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Crago v Julian",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Facchini v Bryson",
        "(wl) Hua Chiao v Chia Chua"
    ],
    "NAME": "(wl) Barrett v Morgan",
    "SUMMARY": [
        "agricultural holdings; subtenancies; notice to quit; validity where collusion between landlord and tenant; effect on subtenancy",
        "B, freehold owners of agricultural land, appealed against the dismissal ([1999] 1 W.L.R. 1109, [1998] C.L.Y. 124) of a claim for possession of land subject to a tenancy from year to year of T but farmed by M, the subtenant. B and T, seeking vacant possession of the land, devised a scheme whereby B served a notice to quit on T who agreed not to serve a counter notice, claiming the protection of the Agricultural Holdings Act 1986 . The Court of Appeal held that the scheme amounted to a surrender that did not effect the subtenancy. B argued that the agreement did not alter the effect of the notice to determine any subtenancy."
    ],
    "CITATION": "Barrett v Morgan [2000] 2 AC 264",
    "YEAR": "2000",
    "COUNSEL": "For the plaintiffs: Derek Woods Q.C. and John McGhee. For the defendant: Andrzej Kolodziej.",
    "JUDGE": "Lord Slynn of Hadley; Lord Woolf MR; Lord Nicholls; Lord Hope; Lord Millett",
    "CIT": "[2000] 2 AC 264",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Agricultural Holdings",
        "Notices to Quit",
        "Subtenancies"
    ],
    "HELD": [
        "allowing the appeal, that a notice to quit made following an agreement that the tenant would not serve a counter notice operated as a notice to quit, not as a surrender, and had the effect of determining any subtenancy, Pennell v Payne [1995] Q.B. 192 approved. In periodic tenancies the parties agreed in advance that the tenancy would be terminable by a notice to quit. No further consent was required, irrespective of whether it was given or not. The subtenancy was not destroyed by any agreement between the landlord and tenant. The landlord had merely exercised his rights as contained in the lease."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Agricultural Holdings &mdash; Notices to Quit &mdash; Subtenancies",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "304",
    "RELATED": [
        "(wl) Pye Ltd v Graham",
        "(wl) Sava v SS Global Ltd",
        "(wl) IAM Group v Chowdrey",
        "(wl) Chaffe v Kingsley",
        "(wl) Link Lending v Bustard",
        "(wl) Stafford v Lee",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Colchester BC v Smith",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) St Marleybone Property Co v Fairweather",
        "(wl) HSBC v Dyche",
        "(wl) Wilkinson v Kerdene"
    ],
    "NAME": "(wl) Bucks CC v Moran",
    "SUMMARY": [
        "Adverse possession; standard of proof; land held by owner for purpose of future road development",
        "A person claiming to have obtained title by adverse possession must show both actual possession and the requisite intention to possess the land. In 1955 the plaintiff council acquired a plot of land near some houses needed to carry out a planned road diversion. The land was left vacant for many years. The roadside of the plot was fenced but there was no fence between the garden of a house owned by the defendant&#8217;s predecessor in title and the plot: the predecessor in title treated it as part of his garden. The defendant carried on this practice after he bought the house in 1971, although he was aware who owned it. In January 1976 the defendant replied to an enquiry of the council in a letter marked &#8220;Without prejudice&#8221; that he understood that he was entitled to use the land until the road was built. The council replied refuting his right to use the land but did not assert actual possession until a writ was issued in October 1985, claiming possession. The defendant claimed adverse possession for more than 12 years, and that the council&#8217;s claim was barred by the Limitation Act 1980 s.15 . The judge held that the defendant&#8217;s letter of January 1976 was inadmissible since it was marked &#8220;Without prejudice&#8221; and was privileged. The council&#8217;s claim was dismissed and they appealed."
    ],
    "CITATION": "Bucks CC v Moran [1990] Ch 623",
    "YEAR": "1990",
    "JUDGE": "Slade LJ; Nourse LJ; Butler-Sloss LJ",
    "CIT": "[1990] Ch 623",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property",
        "Adverse Possession",
        "Intention",
        "Limitations",
        "Possession",
        "Standard of Proof"
    ],
    "HELD": [
        "dismissing the appeal, that the defendant&#8217;s letter was not an offer to negotiate but an assertion of the defendant&#8217;s right and so could not fairly be read as the opening of negotiations. Therefore it was not privileged and was admissible in evidence South Shropshire DC v Amos [1986] 1 W.L.R. 1271 distinguished. There was no special rule of law that an owner of land who intended to use it for a particular purpose at some future date could not lose title to it to a squatter whose acts did not substantially interfere with the owner&#8217;s plans for future use. Where the squatter could show factual possession and an intention to create adverse possession to exclude the world at large, including the true owner, he could establish adverse possession if there was very clear evidence in a case that he was aware of the owner&#8217;s plans for the future of the land. Since the defendant had established adverse possession by October 28, 1973 i.e. 12 years before the writ was issued by acquiring complete and exclusive physical control and had an intention for the time being to possess to the exclusion of all others including the true owner, he had defeated the council&#8217;s claim Powell v McFarlane (1979) 38 P. &amp; C.R. 452 applied; Leigh v Jack (1879) 5 Ex. D. 264 not followed."
    ],
    "CATEGORY": "Real Property &mdash; Adverse Possession &mdash; Intention &mdash; Limitations &mdash; Possession &mdash; Standard of Proof",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "305",
    "RELATED": [
        "(wl) St Marleybone Property Co v Fairweather",
        "(wl) IAM Group v Chowdrey",
        "(wl) United Bank of Kuwait v Sahib",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Zarb v Parry",
        "(wl) Mulvaney v Gough",
        "(wl) Best v Chief Land Registrar",
        "(wl) Gold Harp v McLeod",
        "(wl) Pye Ltd v Graham",
        "(wl) Bucks CC v Moran",
        "(wl) HSBC v Dyche",
        "(wl) Clarke v Corless"
    ],
    "NAME": "(wl) Colchester BC v Smith",
    "SUMMARY": [
        "Conduct estoppel; adverse possession; compromise agreement; acknowledgment that possession not adverse; whether occupier estopped from asserting adverse possession",
        "Where, in a bona fide compromise agreement, an occupier of land acknowledges that his occupation of land has not been adverse possession, he is estopped from relying on a claim for adverse possession in subsequent proceedings against the same party. For over 12 years prior to November 1983, T occupied certain land adversely to the freehold owner, the council. In correspondence starting in November 1982, the council sought to regularise T&#8217;s occupation by granting him a licence for a fee, but T&#8217;s solicitors initially maintained that he had acquired the freehold title by adverse possession. After threats by the council to institute proceedings for possession, an agreement dated November 3, 1983, was concluded for a lease of the land by the council to T, in which T acknowledged the council&#8217;s title to the land and stated that he had not gained any right, title or interest to or in it by adverse possession. In subsequent proceedings, the council sought declarations that it was the freehold owner to the land and that T had no estate or interest except as a tenant under the November 1983 agreement. The judge held that T was estopped from asserting any other title. T appealed on the basis that the council&#8217;s title having been extinguished by adverse occupation by T for more than 12 years, it was impossible, having regard to the Limitation Acts, for that title to be revived."
    ],
    "CITATION": "Colchester BC v Smith [1992] Ch 421",
    "YEAR": "1992",
    "JUDGE": "Dillon LJ; Butler-Sloss LJ; Stocker LJ",
    "CIT": "[1992] Ch 421",
    "CATEGORIES": [
        "Real Property",
        "Adverse Possession",
        "Agreements",
        "Estoppel",
        "Title to Land"
    ],
    "HELD": [
        "dismissing the appeal, that the agreement was a bona fide compromise to resolve the dispute to prevent court proceedings. T was legally advised. He was estopped from going behind the agreement and asserting a freehold title by adverse possession ( Binder v Alachouzos [1972] 2 Q.B. 151 applied). Per Butler-Sloss L.J.: the courts have an interest in upholding agreements to compromise disputes. The November 1983 agreement was therefore in a wholly different position from the situations caught within the scope of the Limitation Acts, such as payment of rent or acknowledgment of title."
    ],
    "CATEGORY": "Real Property &mdash; Adverse Possession &mdash; Agreements &mdash; Estoppel &mdash; Title to Land",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "306",
    "RELATED": [
        "(wl) Nat West v Ashe",
        "(wl) Zarb v Parry",
        "(wl) St Marleybone Property Co v Fairweather",
        "(wl) Pye Ltd v Graham",
        "(wl) IAM Group v Chowdrey",
        "(wl) Sava v SS Global Ltd",
        "(wl) Baxter v Mannion",
        "(wl) Shaw v Applegate",
        "(wl) Bucks CC v Moran",
        "(wl) Wong v Beaumont Property Trust",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Best v Chief Land Registrar"
    ],
    "NAME": "(wl) Hounslow LBC v Minchinton",
    "SUMMARY": [
        "boundaries; ownership of land disputed; adverse possession established by care and use of land",
        "M, the owner and occupier of the property, claimed she had acquired title to a strip of land at the foot of her garden by adverse possession although H had the paper title to it. M started work on building a summer house, part of which encroached on the strip of land. H sought a mandatory injunction that M remove the encroaching part. Both parties sought a declaration as to the boundary. It was found that M did not have title by adverse possession. It was not ordered that she remove the summer house or any part of it, but damages in lieu of an injunction were to be assessed. M appealed. Evidence in support of the claim of adverse possession was given by D, the son in law of R, the previous owner of the property, to the effect that they had always treated the disputed strip of land as part of the garden and assumed that the chestnut paling fence, originally erected by H&#8217;s predecessor, formed the rear boundary. The garden had been enclosed to a sufficient extent to prevent R&#8217;s and M&#8217;s dogs from escaping. When M decided to build the summer house she applied for planning permission which was granted."
    ],
    "CITATION": "Hounslow LBC v Minchinton (1997) 74 P &amp; CR 221",
    "YEAR": "1997",
    "COUNSEL": "For M: Edward Bannister Q.C. and Francis Moraes. For HLBC: Kim Lewison Q.C. and Jonathan Karas.",
    "JUDGE": "Butler-Sloss LJ; Millett LJ; Thorpe LJ",
    "CIT": "(1997) 74 P &amp; CR 221",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Civil Procedure",
        "Adverse Possession",
        "Boundaries"
    ],
    "HELD": [
        "allowing the appeal, that the construction of the fence at the bottom of the garden, enclosing the disputed strip of land, by H&#8217;s predecessor was evidence of discontinuance of possession by the true owner of that land, Kynoch Ltd v Rowlands [1912] 1 Ch. 527 considered. The judge was in error to find that the continued presence of the fence and trees placed there by H&#8217;s predecessor represented continued possession of the land. H could not access the land and never trimmed the hedges or used the land, whereas M and her predecessors regularly tended the land as part of the garden. H had no intentions for the use of the land of which M was aware, Leigh v Jack (1879) 5 Ex. D. 264 disapproved, Buckinghamshire CC v Moran [1990] 1 Ch. 623, [1989] C.L.Y. 449 considered."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Civil Procedure &mdash; Adverse Possession &mdash; Boundaries",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "307",
    "RELATED": [
        "(wl) Colchester BC v Smith",
        "(wl) Best v Chief Land Registrar",
        "(wl) IAM Group v Chowdrey",
        "(wl) Zarb v Parry",
        "(wl) Gold Harp v McLeod",
        "(wl) Mulvaney v Gough",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Sava v SS Global Ltd",
        "(wl) Pye Ltd v Graham",
        "(wl) Bucks CC v Moran",
        "(wl) Baxter v Mannion",
        "(wl) Harris v Goddard"
    ],
    "NAME": "(wl) St Marleybone Property Co v Fairweather",
    "SUMMARY": [
        "Surrender; trespasser with title against lessee remaining in possession",
        "Where a squatter has obtained a possessory title against the tenant of land, the landlord can obtain an immediate right to possession by obtaining a surrender from the tenant. In such a case the landlord has an estate or interest in reversion or remainder, and the tenant&#8217;s right and title is not extinguished as against the landlord, but only as against the squatter, and on the surrender his term is determined, not extinguished, so that the landlord&#8217;s right to possession accrues at that moment. A squatter barred by adverse possession the right of the tenant under a 99-year lease of land and afterwards the tenant surrendered the rest of the term to the landlord. The landlord then sued the squatter for possession."
    ],
    "CITATION": "St Marleybone Property Co v Fairweather [1963] AC 510",
    "YEAR": "1963",
    "JUDGE": "Lord Radcliffe; Lord Denning; Lord Morris of Borth-y-Gest; Lord Guest",
    "CIT": "[1963] AC 510",
    "FLAGS": [
        "Criticised",
        "Denning"
    ],
    "CATEGORIES": [
        "Real Property",
        "Adverse Possession",
        "Squatting",
        "Surrender",
        "Title to Land"
    ],
    "HELD": [
        "that he was entitled to possession at once. Walter v Yalden [1902] 2 K.B. 304 overruled and Taylor v Twinberrow [1930] 2 K.B. 16 approved"
    ],
    "CATEGORY": "Real Property &mdash; Adverse Possession &mdash; Squatting &mdash; Surrender &mdash; Title to Land",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "308",
    "RELATED": [
        "(wl) Sava v SS Global Ltd",
        "(wl) Bucks CC v Moran",
        "(wl) Colchester BC v Smith",
        "(wl) IAM Group v Chowdrey",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Zarb v Parry",
        "(wl) St Marleybone Property Co v Fairweather",
        "(wl) Wilkinson v Kerdene",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Stafford v Lee",
        "(wl) Chaffe v Kingsley",
        "(wl) HSBC v Dyche"
    ],
    "NAME": "(wl) Pye Ltd v Graham",
    "SUMMARY": [
        "Respondents sold farm but retained some land with development potential - After 1984 respondents did nothing to land which was farmed by appellants with rest of their land - Appellants acquired title by adverse possession - Adverse possession did not require squatter to act adversely to paper title owner in order to dispossess him - Appellants had factual possession of land for requisite 12-year period and intention to possess - Necessary intention was intention to possess not to own and to exclude paper owner so far as reasonably possible - Limitation Act 1980 s 15, sched 1 para 1.",
        "A squatter, G, appealed against a ruling ([2001] EWCA Civ 117, [2001] Ch. 804) granting possession of 25 hectares of agricultural land to J, the freehold owner of the land. J had permitted G to occupy the land for grazing purposes by means of a written agreement in 1983. The agreement expired in December 1983. J declined to renew it and requested that G vacate the land. Although permitted to take a cut of hay in 1984, G&#8217;s continued occupation and use of the land thereafter lacked permission. At first instance the judge had held that from 1984 G had been in factual possession with the necessary intention to possess the land with the effect that J&#8217;s title had been extinguished."
    ],
    "CITATION": "Pye Ltd v Graham [2002] UKHL 30",
    "YEAR": "2002",
    "COUNSEL": "For J: Jonathan Gaunt Q.C., David Pannick Q.C. and Jonathan Small. For G: Kim Lewison Q.C., Martin Dray and Jane Mulcahy.",
    "JUDGE": "Lord Bingham of Cornhill; Lord Mackay of Clashfern; Lord Browne-Wilkinson; Lord Hope of Craighead; Lord Hutton",
    "CIT": "[2002] UKHL 30",
    "FLAGS": [
        "Approved",
        "Bingham"
    ],
    "CATEGORIES": [
        "Real Property",
        "Adverse Possession",
        "Intention"
    ],
    "HELD": [
        "allowing the appeal, that the question to be posed was whether the squatter had dispossessed the paper owner of the land by ordinary possession of the land for the relevant period in the absence of consent from the owner. In order to be in possession of land the squatter had to exercise the necessary degree of physical custody and control and to show an intention to possess the land. The squatter had to intend to exclude the world at large, including the paper title owner so far as was reasonably practicable. The requisite degree of physical control was dependent, inter alia, on the nature of the land and the manner of its usage. It was also necessary to demonstrate that the squatter had been treating the land in the manner of an occupying owner and that no other individual had done so. It was immaterial that the squatter would have been willing to pay to occupy the land if requested to do so. Furthermore, it was not necessary to demonstrate an intention to own or acquire ownership of the land. In the instant case, the judge had been correct to conclude that G had established possessory title to the land, Powell v McFarlane (1979) 38 P. &amp; C.R. 452 and Buckinghamshire CC v Moran [1990] Ch. 623 applied and Leigh v Jack (1879) 5 Ex. D. 264 overruled."
    ],
    "CATEGORY": "Real Property &mdash; Adverse Possession &mdash; Intention",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "309",
    "RELATED": [
        "(wl) Goldberg v Edwards",
        "(wl) Oceanic Village Ltd v United Attractions Ltd",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) AG Securities v Vaughan",
        "(wl) Hua Chiao v Chia Chua",
        "(wl) Cherry Tree Investments v Landmain",
        "(wl) Grand Junction Co v Bates",
        "(wl) Crago v Julian",
        "(wl) Expert Clothing Service v Hillgate House",
        "(wl) Fitzkriston v Panayi",
        "(wl) Antoniades v Villiers",
        "(wl) Wright v Macadam"
    ],
    "NAME": "(wl) Ofulue v Bossert",
    "SUMMARY": [
        "A surveyor&#8217;s mineral exhaustion certificate certifying that the minerals on the land were not economically recoverable was issued on a mistaken basis, because he had misconstrued what was meant by &#8220;the minerals&#8221;, and that error vitiated the certificate."
    ],
    "CITATION": "Ofulue v Bossert [2008] EWCA Civ 1",
    "ABSTRACT": [
        "The appellant tenant (S) appealed against a decision that a certificate issued by an expert under a lease was not valid.",
        "The lease was of land including a disused quarry which had planning consent for the extraction of limestone and backfilling the quarry with waste material to restore the land to agriculture. The lease demised much more land than had the benefit of that permission. Applications to extend the planning permission to more of the land had been refused and there was no prospect of such permission being granted. The respondent landlord (H) reserved the right to take up to 12,000 tonnes each year of the top layer of limestone which was suitable for use as building stone. S was liable to pay an annual rent but the liability to pay could be suspended and the lease terminated by giving notice accompanied by a surveyor&#8217;s mineral exhaustion certificate certifying that the minerals on the land were exhausted or were not economically recoverable and there was no reasonable prospect of them becoming economically recoverable within the next 10 years. A surveyor (J) appointed by the parties issued a certificate under the lease that the minerals were not economically recoverable. He explained that he did so taking account only of the minerals and not of the reserved minerals, meaning all limestone suitable for building. The judge held that J had thereby misconstrued the definition of minerals and that his certificate was invalid.",
        "H submitted that the reserved minerals only extended to the building stone that it extracted each year, and that S could extract all the rest of the building stone as well as the lower strata, even if, sooner or later, that left H with no more building stone available to it under the reservation, and that accordingly J had misconstrued the definition of minerals."
    ],
    "YEAR": "2008",
    "COUNSEL": "For the appellant: Martin Hutchings. For the respondent: Mark Wonnacott.",
    "JUDGE": "Waller LJ; Smith LJ; Lloyd LJ",
    "CIT": "[2008] EWCA Civ 1",
    "CATEGORIES": [
        "Landlord and Tenant",
        "Certificates",
        "Contract Terms",
        "Expert Determination",
        "Interpretation",
        "Leases",
        "Minerals",
        "Mistake",
        "Surveyors",
        "Validity"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) The binding effect of an expert&#8217;s determination depended on the terms of the contract under which the determination was made, both as to what it was that the expert had to decide, and as to how far his decision was binding on the parties. In each case it was necessary to examine the determination, in order to see whether it lay within the scope of the expert&#8217;s authority. If it did not, then it had no effect as between the parties. If it did, then the contract also governed the question whether the determination was binding or whether, and if so to what extent or on what grounds, the determination could be questioned, Jones v Sherwood Computer Services Plc [1992] 1 W.L.R. 277 and Mercury Communications Ltd v Director General of Telecommunications [1996] 1 W.L.R. 48 applied. (2) Despite the absence of any words such as &#8220;final and binding&#8221;, the surveyor was given exclusive power under the lease to determine the questions to which his certificate was directed. J need not have responded to the requests for clarification of his certificate and his report. If he had not done so, he could not have been compelled to explain himself. However, since he did so, and thereby made clear the basis on which he had proceeded, the court had to look at his explanations when considering whether the certificate was prepared on the correct basis. (3) The definition of the reserved minerals was puzzling, but the implications of the rival interpretations were such that H&#8217;s reading was clearly to be preferred. H was only able to take for itself 12,000 tonnes of building stone in any year, and S would be entitled to sell as building stone any stone suitable for that purpose which it in fact extracted. (4) J accordingly erred by proceeding on the basis that S was not entitled to remove from the land any limestone which was suitable for use as building stone. On the correct construction of the lease J should not have left the reserved minerals out of account, or at most he should have disregarded 12,000 tonnes as one year&#8217;s entitlement on the part of H. (5) It was for J to come to his own view as to whether the minerals were no longer economically recoverable but his certificate was only effective under the lease if it considered the question of economic recoverability by reference to the correct definition of the minerals, National Grid Co Plc v M25 Group Ltd (No.1) [1999] 1 E.G.L.R. 65 applied; Norwich Union Life Insurance Society v P&amp;O Property Holdings Ltd [1993] 1 E.G.L.R. 164 distinguished. J&#8217;s certificate did not proceed on the correct basis and was not binding between the parties or effective under the lease."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Certificates &mdash; Contract Terms &mdash; Expert Determination &mdash; Interpretation &mdash; Leases &mdash; Minerals &mdash; Mistake &mdash; Surveyors &mdash; Validity",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "310",
    "RELATED": [
        "(wl) Bucks CC v Moran",
        "(wl) Pye Ltd v Graham",
        "(wl) Wilkinson v Kerdene",
        "(wl) IAM Group v Chowdrey",
        "(wl) Central Midlands Estates v Leicester Dyers",
        "(wl) Zarb v Parry",
        "(wl) Stafford v Lee",
        "(wl) St Marleybone Property Co v Fairweather",
        "(wl) Chaffe v Kingsley",
        "(wl) Colchester BC v Smith",
        "(wl) McDowall v Hirschfield Lipson",
        "(wl) Wood v Waddington"
    ],
    "NAME": "(wl) Sava v SS Global Ltd",
    "SUMMARY": [
        "In claims for adverse possession where continued use of the land by the paper owner was alleged, there was no principle of law to the effect that the paper owner would have to establish use in the period immediately after the claimed ouster."
    ],
    "CITATION": "Sava v SS Global Ltd [2008] EWCA Civ 1308",
    "ABSTRACT": [
        "The appellant (S) appealed against a decision (2007) 104(40) L.S.G. 27) that he had not acquired title to certain land located in the green belt by adverse possession.",
        "An adjudicator to the Land Registry had found that by October 13, 1991, being 12 years before the relevant provisions of the Land Registration Act 2002 came into force, S had both factual possession of the land and an intention to possess it. He also found that the paper owner (X) had made no &#8220;meaningful use&#8221; of the land since it had acquired it in 1990. Reversing the adjudicator&#8217;s findings, the judge concluded that the evidence fell far short of establishing factual possession of the land and an intention to possess it, and that there was no justification for the adjudicator&#8217;s finding that X&#8217;s use of the land, which involved picnicking, car parking and quad biking, was as limited as he had found.",
        "S argued that (1) he had done enough by October 13, 1991 to dispossess X of the land so as to cause time to start running in his favour under the Limitation Act 1980; (2) use by X after October 13, 1991 had to be shown to have been enjoyed during the nine-month period starting on October 13, 1991 and such use had not been shown."
    ],
    "YEAR": "2008",
    "COUNSEL": "For the appellant: George Laurence QC, Mark Wonnacott. For the respondents: Jonathan Gaunt QC, Gary Cowen.",
    "JUDGE": "Moore-Bick LJ; Rimer LJ",
    "CIT": "[2008] EWCA Civ 1308",
    "CATEGORIES": [
        "Real Property",
        "Adverse Possession",
        "Intention",
        "Landowners",
        "User"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) The judge had been fully entitled to conclude that S had not assumed possession of the land by October 13, 1991 and had not manifested the necessary intention to do so. The burden had been on him to establish both matters and, if he was to discharge that burden, his evidence had to be unequivocal. Crucially, he had done nothing until 1995 to exclude X from enjoying the same free access to the land through a garden gate as it had had since it acquired the land in 1990. His omission to bar such access by October 13, 1991 made hopeless his claim that he had by then assumed exclusive possession, or, perhaps more obviously, his claim that he had by then manifested an intention to exclude the world at large and X in particular, JA Pye (Oxford) Ltd v Graham [2002] UKHL 30, [2003] 1 A.C. 419 applied. (2) S&#8217;s second submission was in effect an artificial attempt to shift to X the burden of disproving a case that he had not managed to establish. There was no principle of law to the effect that, in a case such as this, it would only be acts of possession by the paper owner carried out during a limited period after the claimed ouster that would or might serve to defeat the claim that there had been such an ouster. Such a proposition was contrary to principle. The evidence showed that X had continued to enjoy possession of the land and demonstrated the frailty of S&#8217;s claim that he had both excluded X and intended to exclude it from such possession."
    ],
    "CATEGORY": "Real Property &mdash; Adverse Possession &mdash; Intention &mdash; Landowners &mdash; User",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "311",
    "RELATED": [
        "(wl) AG Securities v Vaughan",
        "(wl) Berrisford v Mexfield Housing Corp",
        "(wl) Hounslow LBC v Powell",
        "(wl) Antoniades v Villiers",
        "(wl) Doherty v Birmingham CC",
        "(wl) Norris v Checksfield",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Patel v Pirabakaran",
        "(wl) Boyer v Warbey",
        "(wl) Burgess v Rawnsley",
        "(wl) Lloyds Bank v Carrick",
        "(wl) Bedson v Bedson"
    ],
    "NAME": "(wl) Harrow LBC v Qazi",
    "SUMMARY": [
        "Possession proceedings brought by a local authority against a former joint tenant who had no legal or equitable right to remain in the relevant property did not infringe that person&#8217;s right to respect for home and family life and, therefore, did not require justification under the Human Rights Act 1998 Sch.1 Part I Art.8(2).",
        "Possession proceedings brought by a local authority against a former joint tenant who had no legal or equitable right to remain in the relevant property do not infringe that person&#8217;s right to respect for his home under the Human Rights Act 1998 Sch.1 Part I Art.8. The local authority appealed against a decision ([2001] EWCA Civ 1834; [2002] U.K.H.R.R. 316) that its pursuit of possession proceedings against Q constituted an interference with his right to respect for his home under the Human Rights Act 1998 Sch.1 Part I Art.8 and that the question of justification under Art.8(2) should be remitted to the county court. Q and his wife had been joint tenants of local authority housing under a secure tenancy when his wife left, giving notice to terminate the tenancy. On termination, Q had no right to remain in the property and no defence under ordinary law to possession proceedings, although he had been living in the premises continuously for eight years when the proceedings were brought. The issues were whether the Court of Appeal had erred in concluding that (1) the premises constituted Q&#8217;s &#8220;home&#8221; at the time the possession proceedings were served for the purposes of Art.8, and (2) the making of a possession order would constitute an interference with Q&#8217;s right to respect for his home under Art.8(1), requiring determination of whether the interference was justified under Art.8(2)."
    ],
    "CITATION": "Harrow LBC v Qazi [2003] UKHL 43",
    "YEAR": "2003",
    "COUNSEL": "For Q: Jan Luba Q.C. and Edward Fitzpatrick. For the local authority: Andrew Arden Q.C. and David Matthias.",
    "JUDGE": "Lord Bingham of Cornhill; Lord Steyn; Lord Hope of Craighead; Lord Millett; Lord Scott of Foscote",
    "CIT": "[2003] UKHL 43",
    "FLAGS": [
        "Criticised",
        "Bingham"
    ],
    "CATEGORIES": [
        "Landlord and Tenant",
        "Joint Tenancies",
        "Possession Proceedings",
        "Public Sector Tenancies",
        "Residential Tenancies",
        "Right to Respect For Home",
        "Termination"
    ],
    "HELD": [
        "allowing the appeal (Lords Bingham and Steyn dissenting), that (1) the fact that Q&#8217;s tenancy had expired when the possession proceedings were served was irrelevant to the factual question of whether the premises were his home within the meaning of Art.8. The Court of Appeal had not erred in concluding that Q had sufficient and continuous links with the premises to satisfy the test put forward in Buckley v United Kingdom (20348/92) (1997) 23 E.H.R.R. 101 , Buckley followed, and (2) the Strasbourg jurisprudence showed that contractual and proprietary rights to possession could not be defeated by a defence to possession proceedings based on Art.8. Consequently, there was no question to be considered by the county court. Per Lords Bingham and Steyn, any action by a public authority seeking possession of residential property occupied by a defendant as his home would ordinarily engage Art.8. The reasoning of the Court of Appeal reflected the tenor of Strasbourg jurisprudence and gave effect to the purpose of the Convention, Wood v United Kingdom (32540/96) (1997) 24 E.H.R.R. CD69 , Larkos v Cyprus (2000) 30 E.H.R.R. 597 and Sheffield City Council v Smart [2002] EWCA Civ 4, [2002] H.L.R. 34 considered."
    ],
    "CATEGORY": "Landlord and Tenant &mdash; Joint Tenancies &mdash; Possession Proceedings &mdash; Public Sector Tenancies &mdash; Residential Tenancies &mdash; Right to Respect For Home &mdash; Termination",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "312",
    "RELATED": [
        "(wl) Kay v Lambeth LBC",
        "(wl) Harrow LBC v Qazi",
        "(wl) Hounslow LBC v Powell",
        "(wl) Fitzkriston v Panayi",
        "(wl) Wandsworth LBC v Dixon",
        "(wl) Crago v Julian",
        "(wl) Taylor Fashions v Liverpool Victoria Trustees",
        "(wl) Norris v Checksfield",
        "(wl) Wrotham Park Estate Co v Park Homes",
        "(wl) Boyer v Warbey",
        "(wl) Nicholls v Lan",
        "(wl) Ives v High"
    ],
    "NAME": "(wl) Doherty v Birmingham CC",
    "SUMMARY": [
        "It was confirmed that county court judges should continue to follow the guidance given in Kay v Lambeth LBC [2006] UKHL 10, [2006] 2 A.C. 465 when considering a human rights defence against possession proceedings. The instant case was remitted to the trial judge for him to determine whether the decision to terminate the appellant traveller&#8217;s licence on the grounds stated in the particulars of claim, and having regard to the length of time he and his family had lived on the site, was reasonable."
    ],
    "CITATION": "Doherty v Birmingham CC [2008] UKHL 57",
    "ABSTRACT": [
        "The appellant traveller (D) appealed against the dismissal of his appeal ([2006] EWCA Civ 1739) against an order for his eviction from a caravan site owned by the respondent local authority on the basis that his removal would violate his right under the European Convention on Human Rights 1950 art.8.",
        "D had been granted a licence by the local authority to station a caravan on the site, used as a gypsy and travellers&#8217; caravan site, in 1987. When the local authority served notice to quit, D and his family had been resident on the site for 17 years. The local authority asserted that it required vacant possession to carry out essential improvement works, and that once the works were completed the site was to be managed as temporary accommodation for travellers. D maintained that the local authority was only entitled to an order for possession if it was proportionate in all the circumstances of the case, and that the circumstances of the instant case did not satisfy that test. D relied on art.8, and on the local authority&#8217;s duty not to act in a way that was incompatible with a Convention right under the Human Rights Act 1998 s.6(1). The question was whether a local authority could obtain a summary order for possession against an occupier of a site which it owned and which had been used for many years as a gypsy and travellers&#8217; caravan site.",
        "D submitted that in making a possession order in favour of the local authority the judge had applied the common law and not a statutory provision. D argued that the local authority&#8217;s decision to seek possession, and the judge&#8217;s order for possession, were therefore not covered by s.6(2) of the 1998 Act, and were unlawful since they infringed D&#8217;s art.8 rights. D submitted that his case was indistinguishable from Connors v United Kingdom (66746/01) (2005) 40 E.H.R.R. 9 and that it fell within gateway (a) as described in Kay v Lambeth LBC [2006] UKHL 10, [2006] 2 A.C. 465. D submitted alternatively that the court should make a declaration of incompatibility, and the case should be remitted to the county court to enable him to present a defence under gateway (b) in Kay ."
    ],
    "YEAR": "2008",
    "COUNSEL": "For the appellant: Jan Luba QC, Alex Offer. For the respondent: Ashley Underwood QC, Douglas Readings. For the intervener: Philip Sales QC, Daniel Stilitz.",
    "JUDGE": "Lord Hope of Craighead; Lord Scott of Foscote; Lord Rodger of Earlsferry; Lord Walker of Gestingthorpe; Lord Mance",
    "CIT": "[2008] UKHL 57",
    "FLAGS": [
        "Criticised"
    ],
    "CATEGORIES": [
        "Human Rights Other Related Subjects: Local Government",
        "Landlord and Tenant",
        "Caravan Sites",
        "Gypsies",
        "Local Authorities' Powers and Duties",
        "Possession Claims",
        "Right to Respect For Home",
        "Travellers"
    ],
    "HELD": [
        "Appeal allowed.",
        "(1) At common law a landlord was entitled to possession of premises if the tenant&#8217;s lease, or tenancy, or licence had expired or had been validly terminated. The local authority&#8217;s common law right was surrounded by statutory infrastructure, and the Caravan Sites Act 1968 and the Mobile Homes Act 1983 conferred some protection on those who made their homes in caravans. However, the words of s.5(1) of the 1983 Act were a clear indication that Parliament intended that the law should be different in respect to gypsy caravan sites provided by local authorities. In the instant case the composite legal scheme clearly reflected the intention of Parliament and s.6(2) did apply. (2) The basic rule remained as laid down by the majority in Qazi v Harrow LBC [2003] UKHL 43, [2004] 1 A.C. 983 and reaffirmed by the majority in Kay , and county court judges should continue to follow the guidance given in Kay , Quazi and Kay applied. Although in McCann v United Kingdom (19009/04) [2008] 2 F.L.R. 899 the European Court of Human Rights endorsed the reasoning of the minority in Kay and practical recognition had to be given to the principles laid down in judgments from the European Court of Human Rights, that could be done in the instant case by applying and developing the reasoning of the majority, McCann considered. Until the European Court of Human Rights had developed principles on which the English courts could rely for general application, the only safe course was to take the decision in each case as it arose. The point of automatic possession proceedings was generally to provide a quick and reliable way for a public authority to evict tenants whose lease had been terminated by the operation of law. A procedure which gave a discretion to the court by requiring it to consider whether, having regard to art.8, the making of the order would be proportionate would be inimical for that purpose. (3) The modification that was made to Qazi to accommodate the decision in Connors applied to the instant case. Special considerations for the needs of gypsies and their different lifestyles required that D had to be able to insist that it be shown that there was a proper justification for the decision to seek a possession order. If it could not be shown that the local authority&#8217;s decision to evict him was justified by a pressing social need and was proportionate, there was a risk that D&#8217;s rights under art.8 would have been violated, Connors applied. (4) The Court of Appeal was correct to hold that there was no arguable basis for asserting that the incompatibility of the local authority&#8217;s decision could be dealt with under gateway (a). It was not possible for a solution to the instant case to be found in part (i) of gateway (a) by making use of the interpretative obligation in s.3(1) of the 1998 Act. The need to make a declaration of incompatibility in relation to s.5(1) was removed by the Housing and Regeneration Act 2008. (5) The case should be remitted to the judge so that he could examine D&#8217;s defence under gateway (b). An examination of whether the local authority&#8217;s decision was reasonable, having regard to the aim it was pursuing and to the length of time D and his family had lived on the site was appropriate. The test of reasonableness should be whether the decision to recover possession was one that no reasonable person would consider justifiable, Kay applied."
    ],
    "CATEGORY": "Human Rights Other Related Subjects: Local Government &mdash; Landlord and Tenant &mdash; Caravan Sites &mdash; Gypsies &mdash; Local Authorities' Powers and Duties &mdash; Possession Claims &mdash; Right to Respect For Home &mdash; Travellers",
    "COURT": "UKHL"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "313",
    "RELATED": [
        "(wl) Malik v Fassenfelt",
        "(wl) Barca v Mears",
        "(wl) Palk v Mortgage Services",
        "(wl) McDonald v McDonald",
        "(wl) Wandsworth LBC v Dixon",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Cf Vallee v Birchwood",
        "(wl) Berrisford v Mexfield Housing Corp",
        "(wl) Swift Investments v Combined English Stores",
        "(wl) Hounslow LBC v Minchinton",
        "(wl) Grant v Edwards",
        "(wl) United Bank of Kuwait v Sahib"
    ],
    "NAME": "(wl) Manchester CC v Pinnock",
    "SUMMARY": [
        "The Supreme Court considered the terms in which an order for possession should be made in order to avoid the unjust creation of a demoted tenancy under the Housing and Regeneration Act 2008 Sch.11 Pt 2."
    ],
    "CITATION": "Manchester CC v Pinnock [2011] UKSC 6",
    "ABSTRACT": [
        "The Supreme Court was required to consider the terms of an order to be made after its decision in Manchester City Council v Pinnock [2010] UKSC 45, [2010] 3 W.L.R. 1441.",
        "The appellant demoted tenant (P) had challenged an order for possession made in favour of the respondent local authority, requiring him to give up possession by January 12, 2009. He asserted that the judge at first instance should have taken into account the proportionality of such an order under the European Convention on Human Rights 1950 art.8. The Supreme Court agreed that proportionality should have been taken into account but concluded that possession was proportionate.",
        "The local authority submitted that if the Supreme Court simply upheld the original possession order, it would produce an unjust result due to the creation of a further demoted tenancy under the Housing and Regeneration Act 2008. The local authority argued that it should not have to incur the expense of further possession proceedings, and the court should therefore vary the original possession order to adjust the date of possession. P argued that the Housing Act 1980 s.89(1) prevented the judge from making an order for possession which took effect more than six weeks after the order, and the Supreme Court could not amend the original order to conflict with s.89(1)."
    ],
    "YEAR": "2011",
    "COUNSEL": "For the appellant: Richard Drabble QC, James Stark. For the respondent: Andrew Arden QC, Jonathan Manning. For the first intervener: Daniel Stilitz QC, Ben Hooper. For the second intervener: Jan Luba QC.",
    "JUDGE": "Lord Phillips PSC; Lord Hope DPSC; Lord Rodger JSC; Lord Walker JSC; Lady Hale JSC; Lord Brown JSC; Lord Mance JSC; Lord Neuberger JSC; Lord Collins JSC",
    "CIT": "[2011] UKSC 6",
    "FLAGS": [
        "Approved",
        "Hale",
        "Neuberger"
    ],
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Housing",
        "Local Government",
        "Civil Procedure",
        "Demoted Tenancies",
        "Possession Orders",
        "Tolerated Trespass"
    ],
    "HELD": [
        "Judgment accordingly.",
        "(1) The original order for possession took effect on January 12, 2009. Under the Housing Act 1996 s.143D(3) that meant that P&#8217;s demoted tenancy came to an end on that date and he became a tolerated trespasser. However, s.299 of the 2008 Act abolished the concept of tolerated trespass in relation to various types of tenancy, including demoted tenancies, by providing that where an order for possession was made, the tenancy ended on the date that the order was executed rather than the date on which the tenant was to give up possession pursuant to the order. Therefore, if the original possession order was confirmed a new demoted tenancy would be created in P&#8217;s favour due to the effect of Sch.11 para.16, 19 and 26 of the 2008 Act (see paras 6-8 of judgment). (2) There might be force in the technical point made by P, but there was no need to consider it as the wide terms of the Supreme Court Rules 2009 r.29(1) allowed the Supreme Court to adopt an alternative way of giving effect to the local authority&#8217;s justified concerns. The original order for possession would be set aside and a fresh order for possession substituted to take effect on March 10, 2011. The effect of that would be to preserve P&#8217;s original demoted tenancy which had continued pending the resolution of the instant proceedings. It would come to an end when possession was obtained against him pursuant to the new order for possession. That was consistent with the Supreme Court&#8217;s earlier reasoning in which it had decided that the judge and the Court of Appeal had reached their conclusions on an erroneous basis. Thus the order for possession made below was effectively overruled and the Supreme Court had concluded that it should make its own order for possession. If the case had been remitted to the county court, the original order would have been set aside and the county court would in due course have made a fresh order for possession. It would be anomalous if a different result was obtained because the Supreme Court decided to make the order for possession without remitting it (paras 12-14)."
    ],
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Housing &mdash; Local Government &mdash; Civil Procedure &mdash; Demoted Tenancies &mdash; Possession Orders &mdash; Tolerated Trespass",
    "COURT": "UKSC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "314",
    "RELATED": [
        "(wl) McDonald v McDonald",
        "(wl) Kay v Lambeth LBC",
        "(wl) Malik v Fassenfelt",
        "(wl) Harrow LBC v Qazi",
        "(wl) Doherty v Birmingham CC",
        "(wl) Wandsworth LBC v Dixon",
        "(wl) Henry v Henry",
        "(wl) AG Securities v Vaughan",
        "(wl) Barca v Mears",
        "(wl) Horsham Properties v Beech",
        "(wl) Nicholls v Lan",
        "(wl) Thakker v Northern Rock Plc"
    ],
    "NAME": "(wl) Hounslow LBC v Powell",
    "SUMMARY": [
        "The Supreme Court set out the content of the proportionality review that was required by the European Convention on Human Rights 1950 art.8 where possession proceedings were brought against an introductory tenant or a homeless person."
    ],
    "CITATION": "Hounslow LBC v Powell [2011] UKSC 8",
    "ABSTRACT": [
        "In conjoined appeals against decisions relating to possession proceedings brought against two individuals occupying premises under introductory tenancies and against a person who had been granted a licence to occupy a property under the homelessness regime in the Housing Act 1996 Pt VII, the court was asked to determine certain issues.",
        "The issues were (i) the content of the proportionality review required by the European Convention on Human Rights 1950 art.8 where possession was sought against an introductory tenant or a homeless person; (ii) whether s.127(2) of the 1996 Act could be read compatibly with the introductory tenant&#8217;s art.8 right so as to allow him to defend a claim for possession on the grounds recognised in Manchester City Council v Pinnock [2010] UKSC 45, [2011] 2 A.C. 104; (iii) whether the court could defer the delivery of possession for a period in excess of the maximum permitted by the Housing Act 1980 s.89 if it considered that it would be proportionate to do so."
    ],
    "YEAR": "2011",
    "COUNSEL": "For the appellant Powell: Jan Luba QC, Kevin Gannon. For the appellant Hall: Jan Luba QC, Adam Fullwood. For the appellant Frisby: Jan Luba QC, Michael Singleton. For the respondents Hounslow LBC and Leeds City Council: Ashley Underwood QC, Kelvin Rutledge. For the respondent Birmingham City Council: Andrew Arden QC, Jonathan Manning, Robert Brown. For the intervener Secretary of State for Communities and Local Government: Daniel Stilitz QC, Ben Hooper.",
    "JUDGE": "Lord Phillips PSC; Lord Hope DPSC; Lord Rodger JSC; Lord Walker JSC; Lady Hale JSC; Lord Brown JSC; Lord Collins JSC",
    "CIT": "[2011] UKSC 8",
    "FLAGS": [
        "Criticised",
        "Hale"
    ],
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Human Rights",
        "Homelessness",
        "Introductory Tenancies",
        "Possession",
        "Possession Claims",
        "Postponement",
        "Proportionality",
        "Public Sector Tenancies",
        "Right to Respect For Home",
        "Right to Respect For Private and Family Life"
    ],
    "HELD": [
        "Judgment accordingly.",
        "(1) (Per Lord Hope) There was nothing in the statutory schemes which prevented the court from refusing to make an order for possession if it considered that it would not be proportionate to do so. In the ordinary case, the relevant facts would be encapsulated entirely in the two legitimate aims that were identified in Pinnock , namely vindicating the local authority&#8217;s ownership rights and enabling it to comply with its public duties in relation to the allocation and management of its housing stock. It was against those aims, which should always be taken for granted, that the court had to weigh up any factual objections that might be raised by the defendant and what he had to say about his personal circumstances. Only if a defence was put forward that was seriously arguable would it be necessary to adjourn the case for further consideration of the issues of lawfulness or proportionality. If that test was not met, the order for possession should be granted. The threshold for raising an arguable case on proportionality was a high one which would be reached in only a small proportion of cases (see paras 34-45 of judgment). (Per Lord Phillips) In homelessness cases, while there was no burden on a local authority, in the first instance, to justify to the court its application for a possession order or to plead the reason for seeking such an order, the tenant had to be informed of the reason for the authority&#8217;s action so that he could, if so minded, attempt to raise a proportionality challenge (para.116). (2) (Per Lord Hope) On the face of it, the court had no discretion under s.127(2) as to whether or not it should make an order for possession against an introductory tenant. However, in Pinnock , which involved a demoted tenant, the court held that, as lawfulness had to be an inherent requirement of the procedure for seeking a possession order, it had equally to be open to the court to consider whether that procedure had been lawfully followed having regard to the defendant&#8217;s art.8 rights. It was by that route, and by the application of the Human Rights Act 1998 s.3(1) and s.7(1)(b), that the court held that s.143D(2) of the 1996 Act could be read and given effect to enable the judge to deal with a defence that relied on an alleged breach of the defendant&#8217;s rights under art.8. There was a sufficient similarity between s.127(2) and s.143D(2) to apply the reasoning in Pinnock to introductory tenancies also, Pinnock applied (paras 51, 56). (3) (Per Lord Hope) The effect of s.89(1) of the 1980 Act was to remove from the court the discretion which it had at common law to select whatever length of postponement it thought fit. However, s.89 did not take away from the court its ordinary powers of case management. It would be perfectly proper for it, for example, to defer making the order for possession pending an appeal or to enable proceedings to be brought in the Administrative Court. An adjournment would also be a permissible exercise of the court&#8217;s discretion (paras 58, 63)."
    ],
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Human Rights &mdash; Homelessness &mdash; Introductory Tenancies &mdash; Possession &mdash; Possession Claims &mdash; Postponement &mdash; Proportionality &mdash; Public Sector Tenancies &mdash; Right to Respect For Home &mdash; Right to Respect For Private and Family Life",
    "COURT": "UKSC"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "315",
    "RELATED": [
        "(wl) McDonald v McDonald",
        "(wl) Barca v Mears",
        "(wl) Hounslow LBC v Powell",
        "(wl) Berrisford v Mexfield Housing Corp",
        "(wl) Nicholls v Lan",
        "(wl) Henry v Henry",
        "(wl) Manchester CC v Pinnock",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Gardner",
        "(wl) Vridi v Chana",
        "(wl) IAM Group v Chowdrey",
        "(wl) Wood v Waddington"
    ],
    "NAME": "(wl) Malik v Fassenfelt",
    "SUMMARY": [
        "A possession order requiring the removal of squatters from private land onto which they had trespassed and established a home was not disproportionate. Whilst the majority of the Court of Appeal declined to comment on the issue, the minority suggested obiter that the European Convention on Human Rights 1950 art.8 was capable of application where squatters had trespassed onto a private landowner&#8217;s land and established a home there, though it would only be in exceptional circumstances that the squatters&#8217; eviction would constitute a disproportionate means of achieving the legitimate aim of enforcing the landowner&#8217;s property rights."
    ],
    "CITATION": "Malik v Fassenfelt [2013] EWCA Civ 798",
    "ABSTRACT": [
        "The appellant squatters (X) appealed against the decision to grant the respondent private landowner (M) a possession order.",
        "X had entered M&#8217;s land without permission and established a home there. M subsequently applied for possession of the land. The judge held that as the court was a public authority and the land was being occupied as a home, the European Convention on Human Rights 1950 art.8 was capable of application, even though M was a private individual and X were trespassers. Consequently, she held that the real issue was whether art.8 afforded any additional protection to X in the circumstances of the case, the question being whether X&#8217;s eviction was a proportionate means of achieving a legitimate aim. She stated that it was difficult to envisage circumstances where the eviction of trespassers would not be found to be a proportionate means of achieving a legitimate aim, and concluded that it was appropriate to order possession.",
        "X submitted that in the light of legal developments in the area of trespass, it was time to acknowledge, as the Supreme Court had in Manchester City Council v Pinnock [2011] UKSC 6, [2011] 2 W.L.R. 220 and Hounslow LBC v Powell [2011] UKSC 8, [2011] 2 A.C. 186, that the rule in McPhail v Persons, Names Unknown [1973] Ch. 447 that there was no discretion to suspend a possession order against squatters had to be relaxed in order to comply with art.8."
    ],
    "YEAR": "2013",
    "COUNSEL": "For the appellants: Jan Luba QC, Lindsay Johnson. For the respondent: Naomi Winston.",
    "JUDGE": "Lloyd LJ; Lord Toulson; Sir Alan Ward",
    "CIT": "[2013] EWCA Civ 798",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Real Property Other Related Subjects: Landlord and Tenant",
        "Human Rights",
        "Eviction",
        "Possession Orders",
        "Proportionality",
        "Right to Respect For Private and Family Life",
        "Squatters",
        "Trespassers"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) (Per Sir Alan Ward) Having considered all of the relevant authorities, McPhail could no longer be regarded as good law, McPhail not followed. It was rightly common ground that X had established a home on the land because of a &#8220;sufficient and continuous link with a specific place&#8221;, and were therefore entitled to protection under art.8(1). Even if art.8 had no direct application between a private landowner and the trespassers on his land, the court as a public authority was obliged by the Human Rights Act 1998 s.6 to act compatibly with that right. It had to consider whether the making of a possession order was proportionate, and whether the occupiers&#8217; eviction was a proportionate means of achieving a legitimate aim, Powell and Pinnock followed. The rule in McPhail that the court had no jurisdiction to extend time to a trespasser could no longer stand against a requirement that proportionality might demand that a trespasser be given some time before being required to vacate. Another crucial factor distinguishing the current position from McPhail was the fact that in McPhail there was no defence to the claim of possession, whereas if art.8 was engaged, there was at least a potential defence. If proportionality conferred upon the court a discretion to consider giving time to the trespasser, then the Housing Act 1980 s.89 had to apply. However, s.89 did not prevent the making of a possession order forthwith: it merely placed a limit on possession being delayed beyond 14 days after the making of the order, save in cases of exceptional hardship. Accordingly, the test was whether eviction was a proportionate means of achieving a legitimate aim. The fact that the landowner had a legal right to possession was a very strong factor in support of proportionality: it spoke for itself and needed no further explanation or justification. Thus, even if squatters had established a home on land where they otherwise had no legal right to remain, it was difficult to imagine exceptional circumstances which would give them an unlimited and unconditional right to remain (see paras 26-28 of judgment). (2) There was no error in the judge&#8217;s approach. Having found that art.8 was engaged, she correctly identified the issue as whether art.8 afforded &#8220;any additional protection to the defendants&#8221;, namely whether eviction was a proportionate means of achieving a legitimate aim. It was beyond question that she was considering whether to extend the time at which possession was to be given. She started with the difficulty of envisaging circumstances where eviction would not be found to be a proportionate means of achieving a legitimate aim. There was nothing wrong with that approach. An owner was entitled to the return of his property unless some exceptional circumstances militated against it. The judge was fully alive to the fact that X were &#8220;good&#8221; squatters, and was obviously impressed by them and to that extent sympathetic. It was impossible to find that she was not entitled to conclude that the benefits to the local community arising from X&#8217;s occupation were not enough to preclude M seeking to vindicate his ownership rights to the immediate return of his property. If and in so far as she was relying on McPhail for the assertion that the court had no jurisdiction to extend time for possession, she was wrong, but that error had no material effect upon her judgment (paras 38-39). (3) (Per Toulson, LJ and Lloyd, LJ) Whilst agreeing that the judge was right on the availability of art.8 as a defence to the claim, and that her carefully reasoned decision to order immediate possession of the land could not be faulted and the appeal had to be dismissed, opinion was reserved on whether McPhail had ceased to represent the law in cases of trespass to privately owned land, McPhail considered (paras 42, 47-48, 51-52)."
    ],
    "CATEGORY": "Real Property Other Related Subjects: Landlord and Tenant &mdash; Human Rights &mdash; Eviction &mdash; Possession Orders &mdash; Proportionality &mdash; Right to Respect For Private and Family Life &mdash; Squatters &mdash; Trespassers",
    "COURT": "EWCA"
},
{
    "TYPE": "Headnotes",
    "NUMBER": "316",
    "RELATED": [
        "(wl) Hounslow LBC v Powell",
        "(wl) Malik v Fassenfelt",
        "(wl) Barca v Mears",
        "(wl) Berrisford v Mexfield Housing Corp",
        "(wl) Wandsworth LBC v Dixon",
        "(wl) Edwards v Royal Bank of Scotland",
        "(wl) Boyer v Warbey",
        "(wl) Newlon Housing Trust v Alsulaimen",
        "(wl) AIB Finance v Debtors",
        "(wl) Henry v Henry",
        "(wl) The Mortgage Corporation v Shaire and others",
        "(wl) Meah v GE Money"
    ],
    "NAME": "(wl) McDonald v McDonald",
    "SUMMARY": [
        "An order giving a private landlord possession of a property held on an assured shorthold tenancy after serving a notice to quit under the Housing Act 1988 s.21(4)(b) did not breach the ECHR art.8. The proportionality test implied into art.8(2) did not apply where there was a private landlord."
    ],
    "CITATION": "McDonald v McDonald [2014] EWCA Civ 1049",
    "ABSTRACT": [
        "The appellant tenant (T) appealed against a decision to uphold a possession order granted in favour of the respondent receivers.",
        "T had a disorder which made her particularly upset by changes in her environment. She had an assured shorthold tenancy in respect of her home. Her landlords (L) were her parents. L had obtained a loan secured by a mortgage over the property. Their grant of the tenancy to T breached the terms of the mortgage; they later became unable to meet the repayments. The lender appointed receivers, who, under the mortgage conditions, had the same powers as the lender, and were the agents of L. The receivers issued a notice to quit in their own names under the Housing Act 1988 s.21(4)(b) and commenced possession proceedings in L&#8217;s names. The tenancy did not give the court discretion whether to make a possession order.",
        "T argued that (1) the possession order was a disproportionate interference with her rights under the ECHR art.8; (2) the receivers had lacked power under the mortgage to serve the s.21 notice."
    ],
    "YEAR": "2014",
    "COUNSEL": "For the appellant: Kerry Bretherton. For the respondents: Stephen Jourdan QC, Ciara Fairley.",
    "JUDGE": "Arden LJ; Tomlinson LJ; Ryder LJ",
    "CIT": "[2014] EWCA Civ 1049",
    "FLAGS": [
        "Approved"
    ],
    "CATEGORIES": [
        "Landlord and Tenant Other Related Subjects: Human Rights",
        "Banking and Finance",
        "Assured Shorthold Tenancies",
        "Landlords' Rights",
        "Mortgagees' Powers and Duties",
        "Notices to Quit",
        "Possession Orders",
        "Private Landlords",
        "Proportionality",
        "Receivers' Powers and Duties",
        "Right to Respect For Private and Family Life"
    ],
    "HELD": [
        "Appeal dismissed.",
        "(1) There was no clear and constant jurisprudence of the European Court of Human Rights that the proportionality test implied into art.8(2) applied where there was a private landlord. There was a small group of cases where the ECtHR had applied the proportionality test to a possession claim by a private landlord, but in no case had the landlord had an unconditional right under the tenancy agreement to return of the property on a date which had passed. Further, the cases had proceeded on the assumed basis that the proportionality test applied when art.8 was engaged in a dispute between a tenant and a private landlord, Brezec v Croatia (7177/10) [2014] H.L.R. 3, Zrilic v Croatia (46726/11) , Buckland v United Kingdom (40060/08) (2013) 56 E.H.R.R. 16, Zehentner v Austria (20082/02) (2011) 52 E.H.R.R. 22 and Belchikova v Russia (2408/06) considered. There was other authority to the effect that the proportionality test did not apply in the instant situation as it would interfere with the operation of arrangements agreed between private parties, Buckland considered. None of the cases was a Grand Chamber decision. If there was a serious point or one requiring an extension of the case law, the case could be referred to the Grand Chamber. To apply the proportionality test when a tenant relied on art.8 in the context of a private dispute would raise substantial issues; the absence of a Grand Chamber decision requiring art.8(2) to be applied in those circumstances confirmed the instant court&#8217;s conclusion (see paras 24-25, 33, 38-42 of judgment). Even had the proportionality test applied, the court would still have made a possession order. The judge had stated that had the test applied, he would have found making an order disproportionate. In doing so, he had taken irrelevant factors into account, such as the lack of dishonesty on L&#8217;s part in their mortgage application, and had left out of account relevant matters such as the lender&#8217;s entitlement to recover its capital. Further, there was no indication that the judge had directed himself that very few cases met the high standard required for interference with the landlord&#8217;s rights in public sector cases; the position could not be different in a private landlord case. Matters to be taken into account in T&#8217;s favour were that she would suffer distress on having to move, but those who treated and cared for her would be able to help her through the immediate distress and take precautions to prevent her from causing herself serious harm. On the other side there was some \u00a3200,000 owing to the lender, which would be unable to recoup that money unless a possession order was made (paras 47-53). In any event, the instant court was bound by Poplar Housing &amp; Regeneration Community Association Ltd v Donoghue [2001] EWCA Civ 595, [2002] Q.B. 48 to hold that s.21 was compatible with the Convention, precluding it from holding that the proportionality test applied, Poplar followed (para.55). (2) The mortgage conditions had to be interpreted purposively. Their purpose was to enable the receivers to realise the charged property in an orderly and efficient way. The powers conferred on them therefore had to include power to do anything necessarily incidental to the exercise of the specified powers, including the power to take possession of the property and sell it, M Wheeler &amp; Co Ltd v Warren [1928] Ch. 840 applied. The receivers had had to serve the s.21 notice to get vacant possession and thereby sell the property at the best price. The fact that the mortgage conditions could have been drafted to confer an express power on the mortgagee to give a s.21 notice, or that the mortgagee might have been able to serve the notice by virtue of being within the definition of &#8220;landlord&#8221; did not mean that the receivers could not do so where they had that power under the mortgage conditions (para.65)."
    ],
    "CATEGORY": "Landlord and Tenant Other Related Subjects: Human Rights &mdash; Banking and Finance &mdash; Assured Shorthold Tenancies &mdash; Landlords' Rights &mdash; Mortgagees' Powers and Duties &mdash; Notices to Quit &mdash; Possession Orders &mdash; Private Landlords &mdash; Proportionality &mdash; Receivers' Powers and Duties &mdash; Right to Respect For Private and Family Life",
    "COURT": "EWCA"
}];"; 

cardsLen = 316;

