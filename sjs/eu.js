cts_ = "WwogICAgIkFydGljbGUiLAogICAgIkNhc2UiLAogICAgIkNhc2UgT3ZlcnZpZXdzIiwKICAgICJDaGFydGVyIiwKICAgICJDb25jZXB0IiwKICAgICJEaXJlY3RpdmUiLAogICAgIkhlbHAiLAogICAgIkluc3RpdHV0aW9uIiwKICAgICJSZWFkaW5nIiwKICAgICJSZWd1bGF0aW9uIiwKICAgICJTdGF0dXRlIiwKICAgICJUb29scyIsCiAgICAiVHJlYXR5IiwKICAgICJUcmVhdHkgQXJ0aWNsZSIKXQ=="; 

crt_ = "WwogICAgIkRFIENvbnN0aXR1dGlvbmFsIgpd"; 

cnc_ = "WwogICAgIihKb2luZWQpIEthZGkgYW5kIEFsIEJhcmFrYWF0IiwKICAgICJBY2NlcHRpbmcgU3VwcmVtYWN5IiwKICAgICJDaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIC0gRGlnZXN0ZWQiLAogICAgIkNvbXBldGVuY2UiLAogICAgIkNvbmZlcnJhbCwgU3Vic2lkaWFyaXR5IGFuZCBQcm9wb3J0aW9uYWxpdHkiLAogICAgIkRpcmVjdGl2ZXMiLAogICAgIkRvY3RyaW5lIG9mIERpcmVjdCBFZmZlY3QiLAogICAgIkVVIENpdGl6ZW5zaGlwIiwKICAgICJFVSBQb2xpY3kiLAogICAgIkVmZmVjdGl2ZW5lc3MgYW5kIFNjb3BlIG9mIEFydCA0NSIsCiAgICAiRXF1YWwgVHJlYXRtZW50IC0gU29jaWFsIEFzc2lzdGFuY2UiLAogICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgYXQgdGhlIEJvcmRlciIsCiAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIG92ZXIgdGhlIEJvcmRlciIsCiAgICAiRnJlZSBNb3ZlbWVudCBvZiBXb3JrZXJzIC0gU3VtbWFyeSIsCiAgICAiSGFybW9uaXphdGlvbiIsCiAgICAiSG9yaXpvbnRhbCBEaXJlY3QgRWZmZWN0IiwKICAgICJJbnRlcm5hbCBNYXJrZXQgLSBEaXNjdXNzaW9uIiwKICAgICJKdXN0aWZpY2F0aW9ucyBmb3IgRGlzY3JpbWluYXRpb24gdW5kZXIgQXJ0IDQ1IiwKICAgICJMYXcgTWFraW5nIiwKICAgICJNZWFuaW5nIG9mIFdvcmtlciBpbiBBcnQgNDUiLAogICAgIk1pZ3JhbnQgQ3Jpc2lzIC0gVHVya2V5IERlYWwiLAogICAgIk9yZGluYXJ5IExlZ2lzbGF0aXZlIFByb2NlZHVyZSIsCiAgICAiUG90dGVkIEhpc3RvcnkgSSAtIFBhcmlzIHRvIE1lcmdlciIsCiAgICAiUG90dGVkIEhpc3RvcnkgSUkgLSBFRlRBIHRvIE5pY2UiLAogICAgIlBvdHRlZCBIaXN0b3J5IElJSSAtIEFjY2Vzc2lvbiB0byB0aGUgUHJlc2VudCIsCiAgICAiUHJpbmNpcGxlIG9mIExveWFsIENvb3BlcmF0aW9uIiwKICAgICJRdWFudGl0YXRpdmUgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQiLAogICAgIlJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMiLAogICAgIlNjaHVtYW4iLAogICAgIlNlY29uZGFyeSBMZWdpc2xhdGlvbiIsCiAgICAiU3VwcmVtYWN5IGFuZCBEaXJlY3QgRWZmZWN0IiwKICAgICJUaGUgSW5zdGl0dXRpb25zIiwKICAgICJUaGUgSW50ZXJuYWwgTWFya2V0IGFuZCBGcmVlIE1vdmVtZW50IiwKICAgICJWb3RpbmcgaW4gdGhlIENvdW5jaWwiCl0="; 

cgs_ = "WwogICAgIkFydCAxMTAgVEZFVSIsCiAgICAiQXJ0IDExNCBURkVVIiwKICAgICJBcnQgMTE1IFRGRVUiLAogICAgIkFydCAyNiBURkVVIiwKICAgICJBcnQgMjcgVEZFVSIsCiAgICAiQXJ0IDI4IFRGRVUiLAogICAgIkFydCAyOSBURkVVIiwKICAgICJBcnQgMzAgVEZFVSIsCiAgICAiQXJ0IDMxIFRGRVUiLAogICAgIkFydCAzNCBURkVVIiwKICAgICJBcnQgMzUgVEZFVSIsCiAgICAiQXJ0IDM2IFRGRVUiLAogICAgIkFydGljbGUgMzQgVEZFVSIsCiAgICAiQXJ0aWNsZSAzNiBURkVVIiwKICAgICJBcnRpY2xlcyIsCiAgICAiQnJleGl0IiwKICAgICJDaGFuZ2Ugb2YgRGlyZWN0aW9uIiwKICAgICJDaGFyZ2VzIGZvciBTZXJ2aWNlcyBSZW5kZXJlZCIsCiAgICAiQ2hhcmdlcyBmcm9tIE9ibGlnYXRpb25zIHVuZGVyIEVVIExhdyIsCiAgICAiQ2hhcmdlcyBmcm9tIE9ibGlnYXRpb25zIHVuZGVyIEludGVybmF0aW9uYWwgTGF3IiwKICAgICJDaXRpemVucyIsCiAgICAiQ2l0aXplbnMgUmlnaHRzIERpcmVjdGl2ZSIsCiAgICAiQ2l0aXplbnNoaXAiLAogICAgIkNvbGxlY3RpdmUgUHVyY2hhc2UiLAogICAgIkNvbXBldGluZyBQcm9kdWN0cyIsCiAgICAiQ29tcHJlaGVuc2l2ZSBIZWFsdGhjYXJlIiwKICAgICJDb21wcmVoZW5zaXZlIFNpY2tuZXNzIEluc3VyYW5jZSIsCiAgICAiQ3VzdG9tcyBEdXRpZXMiLAogICAgIkRlZmluaXRpb24gb2YgV29ya2VyIiwKICAgICJEaXJlY3QgRGlzY3JpbWluYXRpb24iLAogICAgIkRpcmVjdCBFZmZlY3QiLAogICAgIkRpcmVjdCB2cy4gSG9yaXpvbnRhbCBFZmZlY3QiLAogICAgIkRpcmVjdGl2ZSBvbiBFeGNpc2UgRHV0eSIsCiAgICAiRGlyZWN0aXZlcyIsCiAgICAiRGlyZWN0aXZlcyBhbmQgR2VuZXJhbCBQcmluY2lwbGVzIiwKICAgICJFVSBDaGFydGVyIiwKICAgICJFZmZlY3Qgb2YgQXJ0aWNsZSA0NSBURkVVIiwKICAgICJFZmZlY3RpdmVuZXNzIGFuZCBTY29wZSBvZiBBcnQgNDUgVEZFVSIsCiAgICAiRmFtaWxpZXMiLAogICAgIkZpcnN0IFBoYXNlIiwKICAgICJGaXNjYWwgQXV0b25vbXkgb2YgTWVtYmVyIFN0YXRlcyIsCiAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgIkhhcm1vbml6YXRpb24iLAogICAgIkhpc3RvcnkiLAogICAgIkhvcml6b250YWwgRGlyZWN0IEVmZmVjdCBvZiBEaXJlY3RpdmVzIiwKICAgICJIb3Jpem9udGFsIEVmZmVjdCIsCiAgICAiSHVtYW4gUmlnaHRzIiwKICAgICJJbmNpZGVudGFsIEVmZmVjdCBvZiBEaXJlY3RpdmVzIiwKICAgICJJbmRpcmVjdCBEaXNjcmltaW5hdGlvbiIsCiAgICAiSW5kaXJlY3QgRWZmZWN0IG9mIERpcmVjdGl2ZXMiLAogICAgIkluZGlzdGluY3RseSBBcHBsaWNhYmxlIE1lYXN1cmVzIiwKICAgICJJbml0aWFsIEFwcHJvYWNoIHRvIEh1bWFuIFJpZ2h0cyIsCiAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICJJbnZvY2F0aW9uIG9mIEVVIGxhdyBieSBJbmRpdmlkdWFscyIsCiAgICAiSXNzdWVzIFJhaXNlZCIsCiAgICAiSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uIiwKICAgICJKdXN0aWZpY2F0aW9ucyBmb3IgRGlyZWN0bHkgRGlzY3JpbWluYXRvcnkgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyIsCiAgICAiTUVRUnMiLAogICAgIk1hcmdpbmFsIGFuZCBBbmNpbGxhcnkiLAogICAgIk1lYW5pbmcgb2YgU2ltaWxhcml0eSIsCiAgICAiTWVhbmluZyBvZiBXb3JrZXIiLAogICAgIk1lYXN1cmVzIEJleW9uZCBUaGUgU2NvcGUgT2YgQXJ0aWNsZSA0NSBURkVVIiwKICAgICJNaWdyYW50cyIsCiAgICAiTmF0aW9uYWwgQXV0b25vbXkgUmVjb2duaXNlZCIsCiAgICAiTmF0aW9uYWwgdnMgRVUgTGF3IiwKICAgICJObyBNb3ZlbWVudCIsCiAgICAiTm9uLUZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgIlBlcnNvbmFsIFVzZSBvciBCdXNpbmVzcyBJbXBvcnQiLAogICAgIlBvbGl0aWNzIiwKICAgICJQdWJsaWMgUG9saWN5IEp1c3RpZmljYXRpb24iLAogICAgIlB1YmxpYyBTZXJ2aWNlIiwKICAgICJQdXJwb3NlIG9mIFdvcmsiLAogICAgIlF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMiLAogICAgIlJlZ3VsYXRpb25zIiwKICAgICJSZXNlYXJjaGVkIENvdXJzZXdvcmsiLAogICAgIlJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICJSaWdodCBUbyBFcXVhbCBUcmVhdG1lbnQiLAogICAgIlJpZ2h0IHRvIEVxdWFsIFRyZWF0bWVudCIsCiAgICAiUmlnaHQgdG8gU2VlayBXb3JrIiwKICAgICJSaWdodHMgT2YgRmFtaWx5IE1lbWJlcnMiLAogICAgIlNjb3BlIE9mIEFydGljbGUgNDUgVEZFVSIsCiAgICAiU2VjZXNzaW9uaXNtIiwKICAgICJTb2NpYWwgQXNzaXN0YW5jZSIsCiAgICAiU292ZXJlaWdudHkiLAogICAgIlN1cHJlbWFjeSIsCiAgICAiVGVzdCIsCiAgICAiVHJhbnNwb3NpdGlvbiBQZXJpb2QiLAogICAgIlR1cmtleSIsCiAgICAiVW5yZWFzb25hYmxlIEJ1cmRlbiIsCiAgICAiVmVydGljYWwgRGlyZWN0IEVmZmVjdCBvZiBEaXJlY3RpdmVzIiwKICAgICJXaG8gaXMgQm91bmQiLAogICAgIldvcmtlcnMiCl0="; 

pfl_ = "WwogICAgIkFUIiwKICAgICJCRSIsCiAgICAiQ0giLAogICAgIkRFIiwKICAgICJESyIsCiAgICAiRVMiLAogICAgIkVVIiwKICAgICJGSSIsCiAgICAiRlIiLAogICAgIkdCIiwKICAgICJHUiIsCiAgICAiSUMiLAogICAgIklFIiwKICAgICJJVCIsCiAgICAiTEkiLAogICAgIk5MIiwKICAgICJOTyIsCiAgICAiUFQiLAogICAgIlJPIiwKICAgICJTQyIsCiAgICAiU0UiLAogICAgIlNXIiwKICAgICJVSyIsCiAgICAiMjAxNS8yMDE2ISIsCiAgICAiQ291cnNld29yayIsCiAgICAiQ3JpdGljaXNlZCIsCiAgICAiRGFzaHdvb2QiLAogICAgIkVzc2VudGlhbCIsCiAgICAiRXhwYW5zaW9uIiwKICAgICJFeHBhbnNpb25pc3QiLAogICAgIkZ1bmRhbWVudGFsIiwKICAgICJJbXBvcnRhbnQiLAogICAgIktleSIsCiAgICAiTGVhZGluZyIsCiAgICAiUmVjZW50IiwKICAgICJTQ08iLAogICAgIlNwaXJpdCIsCiAgICAiVGVzdCIsCiAgICAiVXNlZnVsIgpd"; 

ntn_ = '';

subject = 'eu';

defcols = '4';

currentTexture = 'img/textures/clean-paper.png';

panosModeEnabled = true;

enableTests = true;

cds_ = "IFsgewogICAgIllFQVIiOiAiMjAxNiIsCiAgICAiU1BFQ0lBTCI6ICI8c3BhbiBjbGFzcz1cImJkXCI+SGVsbG8hPC9zcGFuPjxicj5UaGlzIGlzIGEgY29sbGVjdGlvbiBvZiBmbGFzaGNhcmRzIGZvciB0aGUgQ2l0eSBHREwuIEl0IGNvbnRhaW5zIGF0dGVtcHRzIHRvIGV4cGxhaW4gPHNwYW4gY2xhc3M9XCJsbmsgdHlwbG5cIj5Db25jZXB0PC9zcGFuPjxzcGFuIGNsYXNzPVwiaXRcIj5zPC9zcGFuPiwgY2FyZHMgY29udGFpbmluZyA8c3BhbiBjbGFzcz1cImxuayB0eXBsblwiPkNhc2UgT3ZlcnZpZXdzPC9zcGFuPiBmb3IgYSBnaXZlbiB0b3BpYywgY29udGFpbmluZyA8c3BhbiBjbGFzcz1cImxuayB0eXBsblwiPlN0YXR1dGU8L3NwYW4+PHNwYW4gY2xhc3M9XCJpdFwiPnM8L3NwYW4+LCBhbmQgbWFraW5nIHVwIHRoZSBidWxrIG9mIHRoZSBtYXRlcmlhbCAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIHR5cGxuXCI+Q2FzZTwvc3Bhbj48c3BhbiBjbGFzcz1cIml0XCI+czwvc3Bhbj4uIDxicj48YnI+Q2FzZXMgY2FuIGJlIG1hZGUgbGVzcyB3b3JkLWhlYXZ5IGJ5IGZpZGRsaW5nIGFyb3VuZCBpbiB0aGUgPHNwYW4+PGkgY2xhc3M9XCJtYXRlcmlhbC1pY29uc1wiIHN0eWxlPVwiZm9udC1zaXplOiA4MCUgIWltcG9ydGFudDtcIj5tZW51PC9pPjwvc3Bhbj4gb3B0aW9ucy4gVGhlcmUgeW91IGNhbiBhbHNvIGNoYW5nZSB0byBhIDxzcGFuIGNsYXNzPVwic2Fuc2ZvbnRcIj5zYW5zPC9zcGFuPiB0eXBlZmFjZSB3aGVuIEdhcmFtb25kIHN0YXJ0cyB0byBtYWtlIHlvdSB3YW50IHRvIHJpcCBvdXQgeW91ciBraWRuZXlzIGFuZCBzdHVmZiB0aGVtIGludG8geW91ciBleWUgc29ja2V0cy4gSWYgdGhlIHdhY2t5IGNhcmRzLWluLWEtcGlsZSBzY2h0aWNrIGdldHMgdXAgeW91ciBub3NlLCBhZGp1c3QgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5tZXNzaW5lc3M8L3NwYW4+LiBQbHVzIG90aGVyIHN0dWZmLiA8YnI+PGJyPlRoZXJlIGFyZSB0ZXN0cy4gQXJndWFibHkgYSBiaXQgZ2ltbWlja3ksIHRoZXkmIzgyMTc7cmUgYnkgbWVhbnMgb2YgbXVsdGlwbGUtZ3Vlc3NpbmcgdGhlIHJhdGlvIGJlbG9uZ2luZyB0byBhIGNhc2UsIG9yIHZpY2UtdmVyc2EuIFlvdSBjYW4gYWxzbyBkbyB0aGlzIGJ5IHR5cGluZyBpbiB0aGUgY2FzZSBuYW1lIGZvciBhIHJhdGlvIDxzcGFuIGNsYXNzPVwiaXRcIj53aXRob3V0PC9zcGFuPiBzZWVpbmcgYW55IGNob2ljZXMuIDxicj48YnI+RmxpcHBpbmcgY2FyZHMgYmFjayBhbmQgZm9ydGgsIG1vdmluZyB0byB0aGUgbmV4dCBvciBmZXRjaGluZyBiYWNrIHRoZSBsYXN0LCBpcyBhIG1hdHRlciBvZiB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmxlZnQ8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+cmlnaHQ8L3NwYW4+IGtleXMuIE9yLCBvbiBpT1MgZGV2aWNlcywgYSBtYXR0ZXIgb2YgZ3JlYXNpbmcgdXAgdGhlIHNjcmVlbiBieSA8c3BhbiBjbGFzcz1cImJkXCI+c3dpcGluZzwvc3Bhbj4gbGVmdCBvciByaWdodC4iLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkNpdHkgR0RMIEZsYXNoY2FyZHMgZm9yIEVVIGxhdywgd2l0aCBjYXNlcywgY29uY2VwdHMsIHN1bW1hcmllcywgbGlua3MgdG8gQ3VyaWEuZXUsIGV0YyIKICAgIF0sCiAgICAiTkFNRSI6ICJZb3UgdiBUaGUgRVUiLAogICAgIlRZUEUiOiAiSGVscCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5GaWx0ZXI8L3NwYW4+PC9zcGFuPjxicj5FbnRlciBuYW1lcyBvZiA8c3BhbiBjbGFzcz1cImJkXCI+Y2FzZXM8L3NwYW4+LCA8c3BhbiBjbGFzcz1cImJkXCI+Y2F0ZWdvcmllczwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwiYmRcIj5jb25jZXB0czwvc3Bhbj4sIG9yIGZyZWUgdGV4dCBpbiBxdW90ZXMuIFRoZXNlIGJyb2FkZW4gb3V0IHdoYXQmIzgyMTc7cyBkaXNwbGF5ZWQuIEJ5IGNvbnRyYXN0LCA8c3BhbiBjbGFzcz1cImJkXCI+dGFnczwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwiYmRcIj5jb3VydHM8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+Y2FyZCB0eXBlczwvc3Bhbj4gYWxsIHdoaXR0bGUgZG93biB3aGF0IHlvdSBzZWUuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Db25maWcgJmFtcDsgPC9zcGFuPjwvc3Bhbj48YnI+VGhlIG9wdGlvbnMgYnV0dG9uICh0b3AgbGVmdCkgYnJpbmdzIHVwIGEgcGFuZWwgd2l0aCBvcHRpb25zIHRvIGZpZGRsZSB3aXRoLiBUaGV5LCBsaWtlIHRoZSBjYXJkcyB5b3UmIzgyMTc7cmUgbG9va2luZyBhdCwgYXJlIHJlbWVtYmVyZWQgd2hlbiB5b3UgY29tZSBiYWNrIGEgZGF5IGxhdGVyLiBCdXQgaWYgc29tZXRoaW5nIGZvdWxzIHVwLCBhIGRpc2NyZWV0IGxpbmsgb24gdGhlIGJvdHRvbSBsZWZ0IGxldHMgeW91IDxzcGFuIGNsYXNzPVwiYmRcIj5yZXNldCBldmVyeXRoaW5nPC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPmlQaG9uZXM8L3NwYW4+PC9zcGFuPjxicj5Vc2Ugb24gaVBob25lcyBpcyByZW5kZXJlZCBtb3JlIGJpZGRhYmxlIGFuZCBsZXNzIGNsdXR0ZXJlZCBieSBwcmVzc2luZyB0aGUgJiM4MjE2O3NoYXJlJiM4MjE3OyBidXR0b24gKGJvdHRvbSBjZW50cmUpIGluIHNhZmFyaSwgdGhlbiA8c3BhbiBjbGFzcz1cImJkXCI+YWRkIHRvIGhvbWUgc2NyZWVuPC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlRhZ3M8L3NwYW4+PC9zcGFuPjxicj5UaGVzZSwgaW4gdGhlIHBhbmVsIG9uIHRoZSByaWdodCwgY2FuIGJlIGRyYWdnZWQgb250byBvciBhd2F5IGZyb20gY2FyZHMsIG9yIGludG8gdGhlIGZpbHRlciB0aGluZ3VtbXkgdXAgdG9wLiBZb3UgY2FuIGFsc28gbWFrZSB5b3VyIG93bi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkxpbmtzPC9zcGFuPjwvc3Bhbj48YnI+TGlua3MgdG8gYW5vdGhlciBjYXJkcyBicmluZyB0aGVtIHVwLCBqaWdnbGluZyBhcm91bmQgYW5kIGZhZGluZyBvdXQgdW5sZXNzIHlvdSBjbGljay9wcmVzcyB0byBmYXN0ZW4gdGhlbSBkb3duLiBXaHk/IE5vIGlkZWEuIDxzcGFuIGNsYXNzPVwiYmRcIj5DYXNlIGNhcmRzPC9zcGFuPiBzaG91bGQgaGF2ZSA8c3BhbiBjbGFzcz1cImJkXCI+T24gV2VzdGxhdzwvc3Bhbj4gb3IgPHNwYW4gY2xhc3M9XCJiZFwiPk9uIGN1cmlhLmV1PC9zcGFuPiBhdCB0aGUgdG9wIGxlZnQsIHdoaWNoIHNob3VsZCB0YWtlIHlvdSBzdHJhaWdodCB0byB0aGUgcmVsZXZhbnQgbWF0ZXJpYWwgb24gdGhvc2Ugc2l0ZXMuIE90aGVyIGxpbmtzIHRvLCBlLmcuLCBsZWdpc2xhdGlvbi5nb3YudWssIG9yIHdpa2lwZWRpYSwgaWYgdGhlIGVudHJ5IHdhcyBwYXJ0aWN1bGFybHkgaGVscGZ1bCwgd2lsbCBzaG93IHVwIHdoZW4gYXBwcm9wcmlhdGUgb3Igd2hlbiBzb21lIGluZXhwbGljYWJsZSBldmVudCBjYXVzZWQgbXkgbGV2ZWwgb2YgaW50ZXJlc3QgdG8gcmlzZSBhYm92ZSB0aGUgZW5kbGVzc2x5IGdyZXkgYW5kIGxpc3RsZXNzIGR5c3Bob3JpYSBjb25zdGl0dXRpbmcgbXkgbWVudGFsIGJhY2tncm91bmQgbm9pc2UuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Ob3Rlczwvc3Bhbj48L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJpdFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Ob3RlIHdlbGw8L3NwYW4+PC9zcGFuPiAmbWRhc2g7IHRoaXMgd2FzIGNodWNrZWQgdG9nZXRoZXIgPHNwYW4gY2xhc3M9XCJpdFwiPmluIGEgaHVycnk8L3NwYW4+IHNvIGRlZi4gaGFzIGJ1Z3MsIGdsaXRjaGVzLCBoYWxmLXJlcGhyYXNlZCBzZW50ZW5jZXMgaW4gdGhlIGNhcmRzLCBldGMuIEFuZCBpdCYjODIxNztzIG1lYW50IGZvciB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmxhdGVzdCB2ZXJzaW9uIG9mIFNhZmFyaSBvciBDaHJvbWU8L3NwYW4+IG9uIDxzcGFuIGNsYXNzPVwiYmRcIj5NYWM8L3NwYW4+LiBXaGF0LCB5b3UmIzgyMTc7cmUgYSBsYXcgc3R1ZGVudCBhbmQgeW91IGRvbiYjODIxNzt0IGhhdmUgYSBNYWM/PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJFVSIsCiAgICAgICAgIkdCIiwKICAgICAgICAiMjAxNS8yMDE2ISIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiQ2l0eSBHREwgRmxhc2hjYXJkcyBmb3IgRVUgbGF3LCB3aXRoIGNhc2VzLCBjb25jZXB0cywgc3VtbWFyaWVzLCBsaW5rcyB0byBDdXJpYS5ldSwgZXRjIiwKICAgICJNRVRBLU5PLVNPUlRJTkctRk9SLVRPQyI6ICIiLAogICAgIk5VTUJFUiI6ICIwIgp9LAp7CiAgICAiTUVUQS1TVUJKRUNUIjogIkVVIiwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+MTk1MTwvc3Bhbj4gJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UcmVhdHkgb2YgUGFyaXM8L3NwYW4+IC0gRUNTQzwvc3Bhbj48YnI+UHJvcG9zZWQgYnkgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U2NodW1hbm48L3NwYW4+IHdpdGggdGhlIGV4cGxpY2l0IGFpbSBvZiwgYXMgaGUgcHV0IGl0LCBtYWtpbmcgd2FyICYjODIxNjtub3Qgb25seSB1bnRoaW5rYWJsZSBidXQgbWF0ZXJpYWxseSBpbXBvc3NpYmxlLCYjODIxNzsgYnkgY29sbGVjdGl2ZWx5IGNlZGluZyBjb250cm9sIG9mIHR3byBvZiB0aGUgbW9zdCBlc3NlbnRpYWwgaW5ncmVkaWVudHMgb2Ygd2FyLiBUaGlzIHdhcyB0byBhIGJvZHkgY29tcHJpc2luZyAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkNvdW5jaWw8L3NwYW4+LCBhbiA8c3BhbiBjbGFzcz1cIml0XCI+aW50cmE8L3NwYW4+bmF0aW9uYWwgYm9keSBhY3RpbmcgZm9yIHRoZSBpbnRlcmVzdHMgb2YgbWVtYmVyIHN0YXRlcy48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Db21taXNzaW9uPC9zcGFuPiwgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5zdXByYTwvc3Bhbj5uYXRpb25hbCBleGVjdXRpdmUgYm9keSwgb3JpZ2luYWxseSBjYWxsZWQgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5IaWdoIEF1dGhvcml0eTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+QXNzZW1ibHk8L3NwYW4+LCB0aGUgZm9yZXJ1bm5lciBvZiB0aGUgcGFybGlhbWVudCwgbWVldGluZyBpbiBTdHJhc2JvdXJnLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkNvdXJ0PC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIlRoZSBUcmVhdHkgb2YgUGFyaXMgaGFkIHByb3ZpZGVkIGZvciBhIGxpZmVzcGFuIG9mIDUwIHllYXJzICZtZGFzaDsgaXQgd2FzIGluIGZvcmNlIGZyb20gMTk1MiB1bnRpbCAyMDAyLiBGUiwgREUsIElUIGFuZCBCZW5lbHV4IHdlcmUgcGFydGllcyB0byBpdC4gVGhlIFVLIHdhcyBpbnZpdGVkICZtZGFzaDsgYnV0IGRlY2xpbmVkLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+MTk1Nzwvc3Bhbj4gJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5UcmVhdHkgb2YgUm9tZTwvc3Bhbj4sIG5vdyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5URkVVPC9zcGFuPjwvc3Bhbj48YnI+UmVuYW1lZCB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPkVDPC9zcGFuPiBhbmQgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5FQUVDPC9zcGFuPiAoa25vd24gYXMgPHNwYW4gY2xhc3M9XCJpdFwiPkV1cmF0b208L3NwYW4+LCB0aGUgPHNwYW4gY2xhc3M9XCJpdFwiPkV1cm9wZWFuIEF0b21pYyBFbmVyZ3kgQ29tbXVuaXR5PC9zcGFuPiksIGl0IDxzcGFuIGNsYXNzPVwiYmRcIj5zaGFyZWQ8L3NwYW4+IHRoZSBhc3NlbWJseSBhbmQgY291cnQgb2YgdGhlIEVDU0MsIGJ1dCBoYWQgaXRzIG93biBjb21taXNzaW9uIGFuZCBjb3VuY2lsLiIsCiAgICAgICAgIlRoZXJlIHdlcmUgbWFueSBjb21tb25hbGl0aWVzIGJldHdlZW4gdGhlIHR3bywgYnV0IHRoZSBwdXJwb3NlIG9mIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5FRUMgVHJlYXR5PC9zcGFuPiBhbmQgaXRzIGluc3RpdHV0aW9ucyB3YXMgdG8gPHNwYW4gY2xhc3M9XCJiZFwiPmNyZWF0ZSBhIGZyYW1ld29yazwvc3Bhbj4sIG5vdCB0byBjcmVhdGUgcG9saWN5ICZtZGFzaDsgd2hpY2ggd2FzIGxlZnQgdG8gdGhlIGluc3RpdHV0aW9ucyBvZiB0aGUgRUNTQyBhbmQgRUFFQy4iLAogICAgICAgICJJbiAxOTYxLCBTdXBlcm1hYyB0cmllZCB0byBicmluZyB0aGUgVUsgaW4sIGJ1dCB0aGF0IGNsdWNraW5nLCBtaW5jaW5nIGxpdHRsZSBub25lbnRpdHksIERlIEdhdWxsZSwgYmxvY2tlZCB1cy4gV2UgZXZlbnR1YWxseSBqb2luZWQgaW4gJiM4MjE2OzcyLCBhbG9uZyB3aXRoIElFLCBESyBhbmQgTk8gJm1kYXNoOyB3aGljaCBsYXRlciBkcm9wcGVkIG91dC4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPjE5Njc8L3NwYW4+ICZtZGFzaDsgTWVyZ2VyIFRyZWF0eTwvc3Bhbj48YnI+VGhpcyBwdXQgdGhlIEVDU0MsIEVBRUMgYW5kIEVFQyB1bmRlciBvbmUgcm9vZiwgPHNwYW4gY2xhc3M9XCJiZFwiPnVuaWZpZWQgdGhlaXIgaW5zdGl0dXRpb25zPC9zcGFuPiwgYW5kIHJlbG9jYXRlZCB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29tbWlzc2lvbjwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvdW5jaWw8L3NwYW4+IHRvIEJydXNzZWxzLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSGlzdG9yeSIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiSGlzdG9yeSIsCiAgICAiTkFNRSI6ICJQb3R0ZWQgSGlzdG9yeSBJIC0gUGFyaXMgdG8gTWVyZ2VyIiwKICAgICJGQUdTIjogIkVVOyBGUjsgREU7IElUOyBCRTsgTkU7IExYOyBHQjsgSUU7IERLOyBOTyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSUlJIC0gQWNjZXNzaW9uIHRvIHRoZSBQcmVzZW50IiwKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSUkgLSBFRlRBIHRvIE5pY2UiLAogICAgICAgICJEaXJlY3RpdmVzIiwKICAgICAgICAiUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyIsCiAgICAgICAgIkp1c3RpZmljYXRpb25zIGZvciBEaXNjcmltaW5hdGlvbiB1bmRlciBBcnQgNDUiLAogICAgICAgICJDaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIC0gRGlnZXN0ZWQiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIGF0IHRoZSBCb3JkZXIiLAogICAgICAgICJFZmZlY3RpdmVuZXNzIGFuZCBTY29wZSBvZiBBcnQgNDUiLAogICAgICAgICJNZWFuaW5nIG9mIFdvcmtlciBpbiBBcnQgNDUiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMgLSBTdW1tYXJ5IiwKICAgICAgICAiRG9jdHJpbmUgb2YgRGlyZWN0IEVmZmVjdCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEiCn0sCnsKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+MTk5MTwvc3Bhbj4gJm1kYXNoOyBFRlRBLCB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RXVyb3BlYW4gRWNvbm9taWMgQXJlYTwvc3Bhbj48L3NwYW4+PGJyPlRoaXMgZXN0YWJsaXNoZWQgdGhlIEVFQSwgY29tcHJpc2luZyBBVSwgREssIFBULCBOTywgU1csIENIIGFuZCB0aGUgVUssIHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+b3V0ZXIgc2V2ZW48L3NwYW4+LiBDdXJyZW50IG1lbWJlcnMgYXJlIG9ubHkgSUMsIExJLCBOTyBhbmQgQ0gsIHRoZSByZW1haW5kZXIgaGF2aW5nIGpvaW5lZCB3aGF0JiM4MjE3O3Mgbm93IHRoZSBFVS4iLAogICAgICAgICJUaGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RUNKPC9zcGFuPiBkZWNsYXJlZCB0aGUgRUVBIGFncmVlbWVudCA8c3BhbiBjbGFzcz1cImJkXCI+aW5jb21wYXRpYmxlPC9zcGFuPiB3aXRoIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5FRUMgVHJlYXR5PC9zcGFuPiwgZm9yIHJlYXNvbnMgcmVkdWNpbmcgdG8gdGhlIEVDSiYjODIxNztzIHVud2lsbGluZ25lc3MgdG8gaGF2ZSB0byBkZWFsIHdpdGggYSByaXZhbCBjb3VydCwgdGhlIEVFQSBjb3VydCBpdCBwcm9wb3NlZC4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPjE5OTI8L3NwYW4+ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWFhc3RyaWNodCBUcmVhdHk8L3NwYW4+LCBub3cgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VEVVPC9zcGFuPjwvc3Bhbj48YnI+SW4gZm9yY2UgMXN0IE5vdiAxOTkzLCB0aGUgcmF0aWZpY2F0aW9uIG9mIE1hYXN0cmljaHQgd2hpY2ggY291bGQgYmUgdGFrZW4gdG8gbWFyayB0aGUgZW5kIG9mIHRoZSBlcmEgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGVybWlzc2l2ZSBDb25zZW5zdXM8L3NwYW4+LiBEYW5pc2ggdm90ZXJzIHRlcGlkbHkgcmVqZWN0ZWQgaXQsIEZyZW5jaCB2b3RlcnMgdGVwaWRseSBhY2NlcHRlZCBpdCAmbWRhc2g7IGJ1dCBpbiBlYWNoIGNhc2UgYnkgZmV3ZXIgdGhhbiAxJSBvZiB2b3RlcyBjYXN0LiBEZW5tYXJrIGFjY2VwdGVkIGl0IGEgeWVhciBsYXRlciwgd2l0aCBvcHQtb3V0cyBmb3IgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RU1VPC9zcGFuPiBhbmQgdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbW1vbiBTZWN1cml0eSBhbmQgRGVmZW5jZSBQb2xpY3k8L3NwYW4+LiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+MTk5NTwvc3Bhbj4gJm1kYXNoOyBBY2Nlc3Npb248L3NwYW4+PGJyPkFVLCBTRSBhbmQgRkkgYmVjYW1lIG1lbWJlcnMsIG1ha2luZyBhIHRvdGFsIG9mIDE1LiBOTyB2b3RlZCBuby4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPjE5OTk8L3NwYW4+ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VHJlYXR5IG9mIEFtc3RlcmRhbTwvc3Bhbj48L3NwYW4+PGJyPkEgbW9kaWZpY2F0aW9uIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRFVTwvc3Bhbj4uIEl0ICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+UmVudW1iZXJzPC9zcGFuPiB0aGUgcHJvdmlzaW9ucyBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5URVU8L3NwYW4+LDwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+JiM4MjIwO0RldmVsb3BzJiM4MjIxOyB0aGUgaWRlYSBvZiB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UHJpbmNpcGxlIG9mIEZsZXhpYmlsaXR5PC9zcGFuPiwgYW5kPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Qcm92aWRlcyBmb3IgPHNwYW4gY2xhc3M9XCJiZFwiPmFic29ycHRpb24gb2YgU2NoZW5nZW48L3NwYW4+IGludG8gdGhlIGZyYW1ld29yayBvZiB0aGUgdHJlYXR5IChhbGJlaXQgd2l0aCBvcHQtb3V0cyBmb3IgdHJ1Y3VsZW50IGN1c3RvbWVycyBzdWNoIGFzIHVzKSwgYW5kIGVuZHMgdGhlIFVLJiM4MjE3O3MgPHNwYW4gY2xhc3M9XCJiZFwiPnNvY2lhbCBwb2xpY3kgb3B0IG91dDwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPjIwMDI8L3NwYW4+ICZtZGFzaDsgRXVybyBlbnRlcnMgY2lyY3VsYXRpb248L3NwYW4+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj4yMDAzPC9zcGFuPiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRyZWF0eSBvZiBOaWNlPC9zcGFuPjwvc3Bhbj48YnI+UGF2ZWQgdGhlIHdheSBmb3IgZW5sYXJnZW1lbnQsIGFuZCAmIzgyMjA7ZGV2ZWxvcGVkJiM4MjIxOyB0aGUgcHJpbmNpcGxlIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkVuaGFuY2VkIENvb3BlcmF0aW9uPC9zcGFuPi4iCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJHQiIsCiAgICAgICAgIkFUIiwKICAgICAgICAiREsiLAogICAgICAgICJQVCIsCiAgICAgICAgIk5PIiwKICAgICAgICAiU1ciLAogICAgICAgICJDSCIsCiAgICAgICAgIlVLIiwKICAgICAgICAiSUMiLAogICAgICAgICJMSSIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSGlzdG9yeSIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiSGlzdG9yeSIsCiAgICAiTkFNRSI6ICJQb3R0ZWQgSGlzdG9yeSBJSSAtIEVGVEEgdG8gTmljZSIsCiAgICAiTlVNQkVSIjogIjIiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IEkgLSBQYXJpcyB0byBNZXJnZXIiLAogICAgICAgICJQb3R0ZWQgSGlzdG9yeSBJSUkgLSBBY2Nlc3Npb24gdG8gdGhlIFByZXNlbnQiLAogICAgICAgICJNaWdyYW50IENyaXNpcyAtIFR1cmtleSBEZWFsIiwKICAgICAgICAiKEpvaW5lZCkgS2FkaSBhbmQgQWwgQmFyYWthYXQiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQiLAogICAgICAgICJSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCBvZiBXb3JrZXJzIiwKICAgICAgICAiVGhlIEludGVybmFsIE1hcmtldCBhbmQgRnJlZSBNb3ZlbWVudCIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgYXQgdGhlIEJvcmRlciIsCiAgICAgICAgIlNlY29uZGFyeSBMZWdpc2xhdGlvbiIsCiAgICAgICAgIkVVIENpdGl6ZW5zaGlwIiwKICAgICAgICAiRG9jdHJpbmUgb2YgRGlyZWN0IEVmZmVjdCIsCiAgICAgICAgIk1lYW5pbmcgb2YgV29ya2VyIGluIEFydCA0NSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj4yMDA0PC9zcGFuPiAmbWRhc2g7IEFjY2Vzc2lvbjwvc3Bhbj48YnI+SHVuZ2FyeSwgUG9sYW5kLCB0aGUgQ3plY2ggUmVwdWJsaWMsIFNsb3Zha2lhLCBTbG92ZW5pYSwgRXN0b25pYSwgTGF0dmlhIGFuZCBMaXRodWlhbmlhLCBhbG9uZyB3aXRoIE1hbHRhIGFuZCBDeXBydXMsIGFsbCBqb2luZWQgdGhlIEVVICZtZGFzaDsgZm9sbG93ZWQgaW4gMjAwNyBieSBCdWxnYXJpYSBhbmQgUm9tYW5pYSwgYW5kIGZpbmFsbHksIGluIDIwMTEsIENyb2F0aWEsIG1ha2luZyBhIDxzcGFuIGNsYXNzPVwiYmRcIj50b3RhbCBvZiAyOCBtZW1iZXIgc3RhdGVzPC9zcGFuPi4gVGhlcmUgaXMgdGFsayBvZiBhZG1pdHRpbmcgVHVya2V5LCBidXQgdGhlIHBlb3BsZSBvZiBFdXJvcGUgYmFsayBhdCB0aGUgaWRlYSwgYW5kIGZsZWUgdG8gdGhlIGdob3N0cyBvZiB0aGUgbmF0aW9uYWxpc20gdGhleSBoYXZlIGFwcGFyZW50bHkgZm9yZ290dGVuIGNhdXNlZCBhIHdob2xlIDxzcGFuIGNsYXNzPVwiaXRcIj5jZW50dXJ5PC9zcGFuPiBvZiBpbW1pc2VyYXRpb24uICBTVU1NQVJZIDxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+MjAwMzwvc3Bhbj4gJm1kYXNoOyBDb25zdGl0dXRpb248L3NwYW4+PGJyPlRoZSB0ZXh0LCByZWplY3RlZCBieSB0aGUgRnJlbmNoIGFuZCB0aGUgRHV0Y2ggaW4gMjAwNSwgd2FzIGFuIGF0dGVtcHQgdG8gc2ltcGxpZnksIHVuaWZ5LCBtb2Rlcm5pc2UsIGJ1dCBtYWRlIHRoZSBmYXRhbCBtaXN0YWtlIG9mIHJlZmVycmluZyB0byBpdHNlbGYgYXMgYSA8c3BhbiBjbGFzcz1cIml0XCI+Y29uc3RpdHV0aW9uPC9zcGFuPiwgd2hpY2ggaW4gdGhlIHBvcHVsYXIgbWluZCBpcyBzb21ldGhpbmcgb25seSA8c3BhbiBjbGFzcz1cImJkXCI+Y291bnRyaWVzPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPmNyaWNrZXQgY2x1YnM8L3NwYW4+IGhhdmUuIEl0IG1hcmtzIHRoZSBsb3cgd2F0ZXIgbWFyayBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QZXJtaXNzaXZlIENvbnNlbnN1czwvc3Bhbj4sIHdoaWNoIGhhc24mIzgyMTc7dCBleGFjdGx5IGJlZW4gaW4gc3BhdGUgc2luY2UuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj4yMDA4PC9zcGFuPiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkxpc2JvbiBUcmVhdHk8L3NwYW4+PC9zcGFuPjxicj5BIGNvbnN0aXR1dGlvbiBpbiBhbGwgYnV0IDxzcGFuIGNsYXNzPVwiaXRcIj5uYW1lPC9zcGFuPi4gU2NhcmVkIGJ5IDIwMDUsIGFuZCBhcHBhcmVudGx5IHVuY29uY2VybmVkIHRvIGRlbW9uc3RyYXRlIHRoZSBwb3B1bGFyIGxlZ2l0aW1hY3kgb2YgdGhlIHByb2plY3QsIG9ubHkgb25lIGNvdW50cnkgcmF0aWZpZWQgYnkgcmVmZXJyZW5kdW0sIElyZWxhbmQsIHdoaWNoIHJlamVjdGVkIGJ5IDQlLiBCdXQgd2hlbiBnaXZlbiBhbm90aGVyIGNoYW5jZSB0byBzYXkgPHNwYW4gY2xhc3M9XCJpdFwiPnllczwvc3Bhbj4sIHdpdGggY29uY2Vzc2lvbnMgcmVsYXRpbmcgdG8gbWF0dGVycyBvZiBzb3ZlcmVpZ250eSAodGF4IGFuZCBhYm9ydGlvbiksIGl0IGFjY2VwdGVkIGRlY2lzaXZlbHksIDIgdG8gMS4gPHNwYW4gY2xhc3M9XCJiZFwiPkluIGZvcmNlIERlYyAyMDA5PC9zcGFuPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSGlzdG9yeSIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiSGlzdG9yeSIsCiAgICAiTkFNRSI6ICJQb3R0ZWQgSGlzdG9yeSBJSUkgLSBBY2Nlc3Npb24gdG8gdGhlIFByZXNlbnQiLAogICAgIk5VTUJFUiI6ICIzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJQb3R0ZWQgSGlzdG9yeSBJSSAtIEVGVEEgdG8gTmljZSIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IEkgLSBQYXJpcyB0byBNZXJnZXIiLAogICAgICAgICJEaXJlY3RpdmVzIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICAgICAiTWVhbmluZyBvZiBXb3JrZXIgaW4gQXJ0IDQ1IiwKICAgICAgICAiRG9jdHJpbmUgb2YgRGlyZWN0IEVmZmVjdCIsCiAgICAgICAgIlF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgb3ZlciB0aGUgQm9yZGVyIiwKICAgICAgICAiQ2l0aXplbnMgUmlnaHRzIERpcmVjdGl2ZSAtIERpZ2VzdGVkIiwKICAgICAgICAiSGFybW9uaXphdGlvbiIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgYXQgdGhlIEJvcmRlciIsCiAgICAgICAgIkVVIENpdGl6ZW5zaGlwIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJSZWFkaW5nIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkZ1cnRoZXIgUmVhZGluZzwvc3Bhbj48L3NwYW4+PGJyPkFzaGlhZ2JvciwgQ291bnRvdXJpcyBhbmQgTGlhbm9zIChlZHMpLCBUaGUgRXVyb3BlYW4gVW5pb24gQWZ0ZXIgdGhlIFRyZWF0eSBvZiBMaXNib24gKENhbWJyaWRnZTogQ1VQLCAyMDEyKTxicj5DcmFpZywgVGhlIExpc2JvbiBUcmVhdHk6IExhdywgUG9saXRpY3MgYW5kIFRyZWF0eSBSZWZvcm0gKE9VUCwgMjAxMCk8YnI+QmlvbmRpLCBFZWNraG91dCBhbmQgUmlwbGV5IChlZHMpLCBFVSBMYXcgQWZ0ZXIgTGlzYm9uIChPeGZvcmQ6IE9VUCwgMjAxMik8YnI+Q3JhaWcsIFAuLDxzcGFuIGNsYXNzPVwiaXRcIj5UaGUgVHJlYXR5IG9mIExpc2JvbiwgUHJvY2VzcywgQXJjaGl0ZWN0dXJlIGFuZCBTdWJzdGFuY2U8L3NwYW4+ICgyMDA4KSAzMyBFTFJldiAxMzcuPGJyPkRlIEJcdTAwZmFyY2EsIDxzcGFuIGNsYXNzPVwiaXRcIj5UaGUgRVUgb24gdGhlIFJvYWQgZnJvbSB0aGUgQ29uc3RpdHV0aW9uYWwgVHJlYXR5IHRvIHRoZSBMaXNib24gVHJlYXR5PC9zcGFuPiwgSmVhbiBNb25uZXQgd29ya2luZyBwYXBlciAwMy8wOCw8YnI+IGh0dHA6Ly93d3cuamVhbm1vbm5ldHByb2dyYW0ub3JnL3BhcGVycy9wYXBlcnMwOC5odG1sPGJyPk5pYyBTaHVpYmhuZSwgTi4sIDxzcGFuIGNsYXNzPVwiaXRcIj5Eb3VibGUgVGFrZTwvc3Bhbj4sICgyMDA3KSAzMiBFTFJldiA2MDUuPGJyPkRvdWdhbiwgTS4sIDxzcGFuIGNsYXNzPVwiaXRcIj5UaGUgVHJlYXR5IG9mIExpc2JvbiAyMDA3OiBXaW5uaW5nIE1pbmRzLCBub3QgSGVhcnRzPC9zcGFuPiAoMjAwOCkgNDUgQ01MUmV2IDYxNyA8c3BhbiBjbGFzcz1cImlsY1wiPlBhbm9zIGNvbW1lbnQ6IHZlcnkgZ29vZCwgYnV0IG11Y2ggdG9vIGRldGFpbGVkIGZvciB5b3VyIHB1cnBvc2VzLjwvc3Bhbj48YnI+RWRpdG9yaWFsIENvbW1lbnRzLCA8c3BhbiBjbGFzcz1cIml0XCI+VGhlIHBvc3QtTGlzYm9uIGluc3RpdHV0aW9uYWwgcGFja2FnZTogRG8gb2xkIGhhYml0cyBkaWUgaGFyZD88L3NwYW4+ICgyMDEwKSA0NyBDTUxSZXYgNTk3Ljxicj5FZGl0b3JpYWwgQ29tbWVudHMsIDxzcGFuIGNsYXNzPVwiaXRcIj5BbiBldmVyIG1pZ2h0eSBFdXJvcGVhbiBDb3VuY2lsIFx1MjAxMyBzb21lIHJlY2VudCBpbnN0aXR1dGlvbmFsIGRldmVsb3BtZW50czwvc3Bhbj4gIDQ2IENNTFJldiAoMjAwOSkgMTM4Mzxicj5EZSBXYWVsZSBhbmQgQnJvZWtzdGVlZywgNDkgQ01MUmV2ICgyMDEyKSAxMDM5IDxzcGFuIGNsYXNzPVwiaXRcIj5UaGUgc2VtaS1wZXJtYW5lbnQgRXVyb3BlYW4gQ291bmNpbCBQcmVzaWRlbmN5OiBTb21lIHJlZmxlY3Rpb25zIG9uIHRoZSBsYXcgYW5kIGVhcmx5IHByYWN0aWNlPC9zcGFuPjxicj5BdGhhbmFzc2lvdSwgUC4sIDxzcGFuIGNsYXNzPVwiaXRcIj5PZiBQYXN0IE1lYXN1cmVzIGFuZCBGdXR1cmUgUGxhbnMgZm9yIEV1cm9wZTwvc3Bhbj5zIEV4aXQgZnJvbSB0aGUgU292ZXJlaWduIERlYnQgQ3Jpc2lzOiBXaGF0IGlzIExlZ2FsbHkgUG9zc2libGUgKGFuZCBXaGF0IGlzIE5vdClfLCAoMjAxMSkgMzYgRUxSZXYgNTU4PGJyPkVkaXRvcmlhbCwgPHNwYW4gY2xhc3M9XCJpdFwiPlNvbWUgdGhvdWdodHMgY29uY2VybmluZyB0aGUgRHJhZnQgVHJlYXR5IG9uIGEgUmVpbmZvcmNlZCBFY29ub21pYyBVbmlvbjwvc3Bhbj4sICgyMDEyKSA0OSBDTUxSZXYgMTxicj48c3BhbiBjbGFzcz1cImJkXCI+S291dHJha29zLCBQLjwvc3Bhbj4sICYjODIxNjtJcyB0aGVyZSBzdWNoIGEgdGhpbmcgYXMgdG9vIG11Y2ggbGF3PyYjODIxNzssICgyMDEyKSAzNyBFTFJldiAxLjxicj5DcmFpZywgPHNwYW4gY2xhc3M9XCJpdFwiPlRoZSBTdGFiaWxpdHksIENvb3JkaW5hdGlvbiBhbmQgR292ZXJuYW5jZSBUcmVhdHk6IFByaW5jaXBsZSwgUG9saXRpY3MgYW5kIFByYWdtYXRpc208L3NwYW4+ICgyMDEyKSAzNyBFTFJldiAyMzEiCiAgICBdLAogICAgIk5BTUUiOiAiRVUgSGlzdG9yeSBhbmQgSW5zdGl0dXRpb25zIC0gUmVhZGluZyIsCiAgICAiTlVNQkVSIjogIjQiCn0sCnsKICAgICJXSUtJTElOSyI6IFsKICAgICAgICAiU2NodW1hbiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Sb2JlcnRfU2NodW1hbiIKICAgIF0sCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJKZWFuLUJhcHRpc3RlIFJvYmVydCBTY2h1bWFuLCB0d2ljZSBwcmltZS1taW5pc3RlciBvZiBGcmFuY2U7IG9mIEx1eGVtYm91cmdpc2ggb3JpZ2luOyBjYWxsZWQgdXAgdG8gZmlnaHQgZm9yIEdlcm1hbnkgaW4gMTkxNCwgYW4gaWxsdXN0cmlvdXMgY2FyZWVyIGFzIGEgPHNwYW4gY2xhc3M9XCJpdFwiPnJlc2lzdGFudDwvc3Bhbj47IHRvcnR1cmVkIGJ5IHRoZSBHZXN0YXBvOyBwcmVhY2hlZCB0aGUgaW5ldml0YWJsZSBkZWZlYXQgb2YgR2VybWFueSBhbmQgbmVlZCBmb3IgcG9zdHdhciBjb29wZXJhdGlvbiBldmVuIGFzIHRoZSBibGl0emtyaWVnIHJvbGxlZCBmdXJ0aGVyIGFuZCBhbmdyaWxpZXIgYWZpZWxkLiIsCiAgICAgICAgIlRoZSBFQ1NDIHdhcyBlc3NlbnRpYWxseSBoaXMgaWRlYS4iLAogICAgICAgICJJbiBTdHJhc2JvdXJnaCBpbiAmIzgyMTY7NDk6ICYjODIxNjtBdWRhY2lvdXMgbWluZHMsIHN1Y2ggYXMgRGFudGUsIEVyYXNtdXMsIEFiYlx1MDBlOSBkZSBTdC1QaWVycmUsIFJvdXNzZWF1LCBLYW50IGFuZCBQcm91ZGhvbiwgaGFkIGNyZWF0ZWQgaW4gdGhlIGFic3RyYWN0IHRoZSBmcmFtZXdvcmsgZm9yIHN5c3RlbXMgdGhhdCB3ZXJlIGJvdGggaW5nZW5pb3VzIGFuZCBnZW5lcm91cy4gVGhlIHRpdGxlIG9mIG9uZSBvZiB0aGVzZSBzeXN0ZW1zIGJlY2FtZSB0aGUgc3lub255bSBvZiBhbGwgdGhhdCBpcyBpbXByYWN0aWNhbDogPHNwYW4gY2xhc3M9XCJiZFwiPlV0b3BpYSwgaXRzZWxmIGEgd29yayBvZiBnZW5pdXMsIHdyaXR0ZW4gYnkgVGhvbWFzIE1vcmUsIHRoZSBDaGFuY2VsbG9yIG9mIEhlbnJ5IFZJSUksIEtpbmcgb2YgRW5nbGFuZC48L3NwYW4+JiM4MjE2OyIsCiAgICAgICAgIlRob3NlIHdobyBzYXkgdGhlIEVVIGlzIGFuIF91dG9waWFuKiBwcm9qZWN0LCB0aGVuLCBhcmUgbm90IGZhciB3cm9uZy4iLAogICAgICAgICJCb251cyBtYXJrcyBpbiB0aGUgZXhhbSBmb3Igbm90IHNwZWxsaW5nIGl0ICYjODIxNjtTY2h1bWFuPHNwYW4gY2xhc3M9XCJiZFwiPm48L3NwYW4+JiM4MjE2Oy4iCiAgICBdLAogICAgIkFLQSI6ICJTY2h1bWFuOyBSb2JlcnQgU2NodW1hbiIsCiAgICAiTkFNRSI6ICJTY2h1bWFuIiwKICAgICJOVU1CRVIiOiAiNSIKfSwKewogICAgIllFQVIiOiAiMTk1OCIsCiAgICAiVFlQRSI6ICJUcmVhdHkiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+TmFtaW5nPC9zcGFuPjwvc3Bhbj48YnI+VGhpcyBpcyB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPlRGRVU8L3NwYW4+LiBGb3JtZXJseSwgZm9ybWFsbHksIGl0IHdhcyB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPlRyZWF0eSBlc3RhYmxpc2hpbmcgdGhlIEV1cm9wZWFuIEVjb25vbWljIENvbW11bml0eSAoVEVFQyk8L3NwYW4+LiIKICAgIF0sCiAgICAiQUtBIjogIlRGRVUiLAogICAgIk5BTUUiOiAiVHJlYXR5IG9mIFJvbWUiLAogICAgIk5VTUJFUiI6ICI2Igp9LAp7CiAgICAiWUVBUiI6ICIyMDA4IiwKICAgICJUWVBFIjogIlRyZWF0eSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5OYW1pbmc8L3NwYW4+PC9zcGFuPjxicj5UaGlzIGlzIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5URkVVPC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlB1cnBvc2U8L3NwYW4+PC9zcGFuPjxicj5UbyByZXBsYWNlIHRoZSBFVSBhbmQgRUMgdHJlYXRpZXMgd2l0aCB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VEVVPC9zcGFuPiBhbmQgdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRGRVU8L3NwYW4+LCBhbHRob3VnaCBsZWF2aW5nIHVudG91Y2hlZCB0aGUgc2VwYXJhdGUgYm9keSBvZiBydWxlcyAod2l0aCBhIG1vcmUgPHNwYW4gY2xhc3M9XCJpdFwiPmludGVyZ292ZXJubWVudGFsPC9zcGFuPiBjaGFyYWN0ZXIpIG9mIHRoZSBDb21tb24gRm9yZWlnbiBhbmQgU2VjdXJpdHkgUG9saWN5Ljxicj5UbyBmdXJ0aGVyIGRldmVsb3AgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RW5oYW5jZWQgQ29vcGVyYXRpb248L3NwYW4+LCBpLmUuLCA8c3BhbiBjbGFzcz1cIml0XCI+bXVsdGktc3BlZWQgRXVyb3BlPC9zcGFuPi48YnI+SW5jcmVhc2UgPHNwYW4gY2xhc3M9XCJiZFwiPm1ham9yaXR5IHZvdGluZzwvc3Bhbj4gd2l0aGluIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db3VuY2lsIG9mIE1pbmlzdGVyczwvc3Bhbj4uPGJyPk1vZGlmeSBzdGF0ZW1lbnQgb24gdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj52YWx1ZXM8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+b2JqZWN0aXZlczwvc3Bhbj4gb2YgdGhlIFVuaW9uLCBhbHRob3VnaCBpbnN1YnN0YW50aWFsbHkuPGJyPkludHJvZHVjZXMgb2ZmaWNlIG9mIEhpZ2ggUmVwcmVzZW50YXRpdmUgZm9yIEZvcmVpZ24gQWZmYWlycyBhbmQgU2VjdXJpdHkgUG9saWN5Ljxicj5JbnRyb2R1Y2VzIGEgPHNwYW4gY2xhc3M9XCJiZFwiPnBlcm1hbmFudCBwcmVzaWRlbnQ8L3NwYW4+IG9mIHRoZSBFdXJvcGVhbiBDb3VuY2lsLjxicj5JbmNyZWFzZXMgdGhlIHBvd2VyIG9mIHRoZSBwYXJsaWFtZW50PGJyPkNoYW5nZXMgdGhlIHByb2Nlc3Mgb2YgPHNwYW4gY2xhc3M9XCJiZFwiPm1vZGlmaWNhdGlvbiBvZiB0aGUgdHJlYXRpZXM8L3NwYW4+IC0gYXJ0IDQ4IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRFVTwvc3Bhbj4uPGJyPlByb3ZpZGVzIGZvciA8c3BhbiBjbGFzcz1cImJkXCI+aG93IHN0YXRlcyBtYXkgd2l0aGRyYXc8L3NwYW4+IGZyb20gdGhlIHVuaW9uIC0gYXJ0IDQ5IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRFVTwvc3Bhbj4uIgogICAgXSwKICAgICJBS0EiOiAiTGlzYm9uIFRyZWF0eSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIlJlY2VudCIKICAgIF0sCiAgICAiTkFNRSI6ICJUcmVhdHkgb2YgTGlzYm9uIiwKICAgICJOVU1CRVIiOiAiNyIsCiAgICAiRVVST1BBTElOSyI6IFsKICAgICAgICAiVEZFVSBodHRwOi8vZXVyLWxleC5ldXJvcGEuZXUvbGVnYWwtY29udGVudC9FTi9UWFQvSFRNTC8/dXJpPU9KOkM6MjAwNzozMDY6RlVMTCZmcm9tPUVOIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJUcmVhdHkiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+QXJ0aWNsZSAyPC9zcGFuPjwvc3Bhbj48YnI+RGVjbGFyZXMgdGhlIG9iamVjdGl2ZXMgLSB0aGUgRVUgaXMgJiM4MjE2O2ZvdW5kZWQgb24gdGhlIHZhbHVlcyBvZiA8c3BhbiBjbGFzcz1cImJkXCI+cmVzcGVjdCBmb3IgaHVtYW4gZGlnbml0eTwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwiYmRcIj5mcmVlZG9tPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJiZFwiPmRlbW9jcmFjeTwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwiYmRcIj5lcXVhbGl0eTwvc3Bhbj4sIHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+cnVsZSBvZiBsYXc8L3NwYW4+IGFuZCByZXNwZWN0IGZvciA8c3BhbiBjbGFzcz1cImJkXCI+aHVtYW4gcmlnaHRzPC9zcGFuPiwgaW5jbHVkaW5nIHRoZSByaWdodHMgb2YgcGVyc29ucyBiZWxvbmdpbmcgdG8gbWlub3JpdGllcy4mIzgyMTc7IgogICAgXSwKICAgICJBS0EiOiAiVEVVOyBNYWFzdHJpY2h0IFRyZWF0eSIsCiAgICAiTkFNRSI6ICJUcmVhdHkgb24gRXVyb3BlYW4gVW5pb24iLAogICAgIk5VTUJFUiI6ICI4Igp9LAp7CiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJIZXJlIGFyZSB0aHJlZSB0aGluZ3MgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdCB0byBjb25mdXNlPC9zcGFuPjogdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkV1cm9wZWFuIENvdW5jaWw8L3NwYW4+LCB0aGUgIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvdW5jaWwgb2YgdGhlIEV1cm9wZWFuIFVuaW9uPC9zcGFuPiAoYWthIHRoZSBDb3VuY2lsIG9mIE1pbmlzdGVycykgYW5kIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db3VuY2lsIG9mIEV1cm9wZTwvc3Bhbj4uIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RXVyb3BlYW4gUGFybGlhbWVudDwvc3Bhbj4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5FdXJvcGVhbiBDb21taXNzaW9uPC9zcGFuPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvdXJ0IG9mIEp1c3RpY2U8L3NwYW4+IgogICAgXSwKICAgICJOQU1FIjogIlRoZSBJbnN0aXR1dGlvbnMiLAogICAgIk5VTUJFUiI6ICI5Igp9LAp7CiAgICAiVFlQRSI6ICJJbnN0aXR1dGlvbiIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5QdXJwb3NlPC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPk1lbWJlcnNoaXA8L3NwYW4+PC9zcGFuPjxicj5IZWFkcyBvZiBTdGF0ZS9Hb3Zlcm5tZW50IGFzIGFwcHJvcHJpYXRlLCB0aGUgUHJlc2lkZW50IG9mIHRoZSBDb3VuY2lsLCBjdXJyZW50bHkgRG9uYWxkIFR1c2ssIDxzcGFuIGNsYXNzPVwiYmRcIj5hbmQ8L3NwYW4+IHRoZSBQcmVzaWRlbnQgb2YgdGhlIENvbW1pc3Npb24sIGN1cnJlbnRseSBKZWFuLUNsYXVkZSBKdW5ja2VyLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+RGVjaXNpb24gTWFraW5nPC9zcGFuPjwvc3Bhbj48YnI+QXJ0IDE1KDQpIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRFVTwvc3Bhbj4gYW5kIDIzNS0yMzYgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VEZFVTwvc3Bhbj4gcHJvdmlkZSB0aGF0IHRoaXMgd2lsbCA8c3BhbiBjbGFzcz1cImJkXCI+bm9ybWFsbHk8L3NwYW4+IGJlIGJ5IDxzcGFuIGNsYXNzPVwiYmRcIj5jb25zZW5zdXM8L3NwYW4+LiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+TWVldGluZ3M8L3NwYW4+PC9zcGFuPjxicj5TdW1taXRzIGV2ZXJ5IHF1YXJ0ZXIsIHRvIG1ha2UgcG9saXRpY2FsIGRlY2lzaW9ucyB0aGUgaW1wbGVtZW50YXRpb24gb2Ygd2hpY2ggaXMgZm9yIHRoZSAobm9ybWFsKSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db3VuY2lsIG9mIE1pbmlzdGVyczwvc3Bhbj4uPGJyPlRoZWlyIGltcG9ydGFuY2UgaGFzIGdyZWF0bHkgaW5jcmVhc2VkLCBpbiByZWNlbnQgeWVhcnMuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5QcmVzaWRlbnQ8L3NwYW4+PC9zcGFuPjxicj5BIGNvbnRlbnRpb3VzIHByb3Zpc2lvbiBvZiBhcnQgMTUoNSw2KSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5URVU8L3NwYW4+LiBIZSBvciBzaGUgPHNwYW4gY2xhc3M9XCJiZFwiPm11c3Qgbm90PC9zcGFuPiBob2xkIG5hdGlvbmFsIG9mZmljZSwgYW5kIHNlcnZlcyBmb3IgYSAocmVuZXdhYmxlKSAyIDEvMiB5ZWFyIHRlcm0uIgogICAgXSwKICAgICJOQU1FIjogIkV1cm9wZWFuIENvdW5jaWwiLAogICAgIk5VTUJFUiI6ICIxMCIKfSwKewogICAgIlRZUEUiOiAiSW5zdGl0dXRpb24iLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIig8c3BhbiBjbGFzcz1cIml0XCI+U29tZXRpbWVzIGp1c3QgJiM4MjIwO3RoZSBDb3VuY2lsLiYjODIyMTsgQ2YuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkV1cm9wZWFuIENvdW5jaWw8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db3VuY2lsIG9mIEV1cm9wZTwvc3Bhbj4uPC9zcGFuPikiLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlB1cnBvc2UgYW5kIE1lbWJlcnNoaXA8L3NwYW4+PC9zcGFuPjxicj5UbyByZXByZXNlbnQgdGhlIGludGVyZXN0cyBvZiB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPm1lbWJlciBzdGF0ZXM8L3NwYW4+LCBlYWNoIG9mIHdoaWNoIHNlbmRzIGEgZ292ZXJubWVudCBtaW5pc3RlciB3aXRoIHJlc3BvbnNpYmlsaXR5IGZvciB3aGF0ZXZlciBoYXBwZW5zIHRvIGJlIG9uIHRoZSBhZ2VuZGEuPGJyPkFydCAxNig2KSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5URVU8L3NwYW4+IHN0aXB1bGF0ZXMgYSBkaWZmZXJlbnQgY29uZmlndXJhdGlvbiB3aGVuIHRoZSBhZ2VuZGEgaXMgZm9yZWlnbiBhZmZhaXJzLCBhcyBwcmVzaWRlZCBvdmVyIGJ5IHRoZSBFVSYjODIxNztzIHF1YXNpLSYjODIxNjtGb3JlaWduIE1pbmlzdGVyJiM4MjE3OyBwZXJzb24uIiwKICAgICAgICAiU2luY2UgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TGlzYm9uPC9zcGFuPiB0aGVyZSBpcyBhIHN0cm9uZ2VyIGNvbW1pdG1lbnQgdG8gb3Blbm5lc3MgYW5kIHRyYW5zcGFyZW5jeSBpbiBjb3VuY2lsIG1lZXRpbmdzIC0gYXJ0IDE2KDgpIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRFVTwvc3Bhbj4uIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Qb3dlcnM8L3NwYW4+PC9zcGFuPjxicj5IYXMgPHNwYW4gY2xhc3M9XCJiZFwiPnRoZSBmaW5hbCB3b3JkPC9zcGFuPiBvbiBtb3N0IGJpdHMgb2YgRVUgPHNwYW4gY2xhc3M9XCJiZFwiPmxlZ2lzbGF0aW9uPC9zcGFuPiB1bmRlciB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+T3JkaW5hcnkgTGVnaXNsYXRpdmUgUHJvY2VkdXJlPC9zcGFuPi4gSXQgbWVldHMgd2hlbiBjb252ZW5lZCBieSBpdHMgKHNpeC1tb250aCByb3RhdGluZykgcHJlc2lkZW50LCBvciBhdCB0aGUgcmVxdWVzdCBvZiBhIG1lbWJlciBzdGF0ZSAtIEFydCAyMzcgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VEZFVTwvc3Bhbj4uPGJyPjxzcGFuIGNsYXNzPVwiYmRcIj5Wb3Rpbmc8L3NwYW4+IGNhbiBoYXBwZW4gaW4gPHNwYW4gY2xhc3M9XCJiZFwiPnRocmVlPC9zcGFuPiB3YXlzLCBpbiBjaXJjdW1zdGFuY2VzIHByb3ZpZGVkIGZvciBieSB0aGUgdHJlYXRpZXMuIFRoZSBtYWluIG9uZSBpcyBRTVYuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5RdWFsaWZpZWQgTWFqb3JpdHk8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImJkXCI+RnJvbSAyMDAzIHRvIDIwMTQ8L3NwYW4+LCBvciBhdCByZXF1ZXN0IG9mIGFueSBtZW1iZXIgc3RhdGUsIHVudGlsIFNlcCAyMDE3LCB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TmljZTwvc3Bhbj4gcnVsZXMgZm9yIFFNViB3ZXJlOiA8c3BhbiBjbGFzcz1cImJkXCI+KDEpPC9zcGFuPiBhdCBsZWFzdCA8c3BhbiBjbGFzcz1cImJkXCI+MTU8L3NwYW4+IHN0YXRlcyBpbiBmYXZvdXIgLSBidXQgPHNwYW4gY2xhc3M9XCJiZFwiPjE4PC9zcGFuPiBpZiBwcm9wb3NhbCBub3QgZnJvbSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db21taXNzaW9uPC9zcGFuPjsgPHNwYW4gY2xhc3M9XCJiZFwiPigyKTwvc3Bhbj4gMjYwIG9mIHRoZSAzNTIgdm9pbmcgd2VpZ2h0cyAoYWJvdXQgPHNwYW4gY2xhc3M9XCJiZFwiPjc0JTwvc3Bhbj4gb2YgdGhlIHdlaWdodCk7IDxzcGFuIGNsYXNzPVwiYmRcIj4oMyk8L3NwYW4+IGF0IGxlYXN0IDxzcGFuIGNsYXNzPVwiYmRcIj4zMTMuNk08L3NwYW4+IGNpdGl6ZW5zIHJlcHJlc2VudGVkLjxicj48c3BhbiBjbGFzcz1cImJkXCI+RnJvbSAyMDE0PC9zcGFuPiBvciAyMDE3LCB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TGlzYm9uPC9zcGFuPiBjb25kaXRpb25zIGFwcGx5OiA8c3BhbiBjbGFzcz1cImJkXCI+KDEpPC9zcGFuPiBBdCA8c3BhbiBjbGFzcz1cImJkXCI+NTUlPC9zcGFuPiBvZiBtZW1iZXJzICgxNSksIGJ1dCwgYXMgYmVmb3JlLCA8c3BhbiBjbGFzcz1cImJkXCI+NzIlPC9zcGFuPiAoMjApIGlmIHByb3Bvc2FsIG5vdCBmcm9tIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbW1pc3Npb248L3NwYW4+IG9yIEhpZ2ggUmVwLjsgPHNwYW4gY2xhc3M9XCJiZFwiPigzKTwvc3Bhbj4gdm90ZXMgcmVwcmVzZW50aW5nIGF0IGxlYXN0IDY1JSBvZiBwb3B1bGF0aW9uIG9mIHVuaW9uLjxicj48c3BhbiBjbGFzcz1cImJkXCI+UU1WPC9zcGFuPiB3YXMgcmFyZWx5IHVzZWQgYmVmb3JlIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5TaW1wbGUgTWFqb3JpdHk8L3NwYW4+PC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5VbmFuaW1pdHk8L3NwYW4+PC9zcGFuPjxicj5UaGVyZSBhcmUgZmV3IHNpdHVhdGlvbnMgaW4gd2hpY2ggPHNwYW4gY2xhc3M9XCJiZFwiPnNpbXBsZSBtYWpvcml0eSB2b3Rpbmc8L3NwYW4+IGlzIHVzZWQgLSBvbmUgaXMgYnkgYSB0aGluZyBjYWxsZWQgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5BbnRpLUR1bXBpbmcgQWR2aXNvcnkgQ29tbWl0dGVlPC9zcGFuPi48YnI+V2hlbiBzb21ldGhpbmcgaXMgcG9saXRpY2FsbHkgc2Vuc2l0aXZlIG9yIGltcG9ydGFudCAtIHNlY3VyaXR5LCB0YXgsIGV0YywgdGhlbiB2b3RpbmcgaXMgYnkgPHNwYW4gY2xhc3M9XCJiZFwiPnVuYW5pbWl0eTwvc3Bhbj4uIgogICAgXSwKICAgICJBS0EiOiAiQ291bmNpbCBvZiBNaW5pc3RlcnMiLAogICAgIk5BTUUiOiAiQ291bmNpbCBvZiB0aGUgRXVyb3BlYW4gVW5pb24iLAogICAgIk5VTUJFUiI6ICIxMSIKfSwKewogICAgIlRZUEUiOiAiSW5zdGl0dXRpb24iLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRoaXMgaXMsIGluIGVmZmVjdCwgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5sZWdpc2xhdHVyZTwvc3Bhbj4uIEFydCAxNygxKSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5URVU8L3NwYW4+IHNheXMgaXQgaXMgdG8gJiM4MjE2O3Byb21vdGUgdGhlIGdlbmVyYWwgaW50ZXJlc3Qgb2YgdGhlIFVuaW9uIGFuZCB0YWtlIGFwcHJvcHJpYXRlIGluaXRpYXRpdmVzIHRvIHRoYXQgZW5kLiYjODIxNzsiLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPk5hdHVyZSBhbmQgQ29tcG9zaXRpb248L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImJkXCI+Q29uc2lzdHMgb2Y8L3NwYW4+IGEgbmF0aW9uYWwgZnJvbSA8c3BhbiBjbGFzcz1cImJkXCI+ZWFjaCBtZW1iZXIgc3RhdGU8L3NwYW4+LCBhbHRob3VnaCBhcnQgMTcoNSkgc2Vla3MsIGZyb20gMjAxNCwgdG8gcmVkdWNlIHRoaXMgYnkgMS8zLjxicj48c3BhbiBjbGFzcz1cImJkXCI+QXBwb2ludG1lbnQ8L3NwYW4+IG9mIHRoZSBDb21taXNzaW9uLCBTaW5jZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MaXNib248L3NwYW4+LCB0YWtlcyBwbGFjZSBhY2NvcmRpbmcgdG8gYSBzb21ld2hhdCBjb21wbGV4IHByb2Nlc3MgYnkgd2hpY2ggdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkV1cm9wZWFuIENvdW5jaWw8L3NwYW4+LCB1bmRlciBRTVYsIHByb3Bvc2VzIGEgPHNwYW4gY2xhc3M9XCJiZFwiPlByZXNpZGVudCBvZiB0aGUgQ29tbWlzc2lvbjwvc3Bhbj4gdG8gdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkV1cm9wZWFuIFBhcmxpYW1lbnQ8L3NwYW4+LCBvbiB3aGljaCB0aGV5IG11c3QgdGhlbiB2b3RlLCBsb29waW5nIGJhY2sgdG8gdGhlIEV1cm9wZWFuIENvdW5jaWwgaWYgdGhleSBkb24mIzgyMTc7dCBhcHByb3ZlLCBldGMuIE9uIHN1Y2Nlc3NmdWwgaW5zdGFsbGF0aW9uLCB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPnByZXNpZGVudDwvc3Bhbj4gdGhlbiBub2RzIHRocm91Z2ggZWFjaCBzdGF0ZSYjODIxNztzIGNvbW1pc3Npb25uZXIgbm9taW5lZS4gVGhlIGNvbW1pc3Npb25uZXJzIGFyZSB0byBiZSBjaG9zZW4gZm9yIHRoZWlyIDxzcGFuIGNsYXNzPVwiYmRcIj5nZW5lcmFsIGNvbXBldGVuY2U8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+Y29tbWl0dGVkbmVzcyB0byBFdXJvcGU8L3NwYW4+LCBhbmQgdGhlaXIgdW5kb3VidGVkIGluZGVwZW5kZW5jZSAtIGFydCAxNygzKS4gVGhlIG5ldyBDb21taXNzaW9uIGlzIHRoZW4gc3ViamVjdCB0byBhIHZvdGUgb2YgYXBwcm92YWwgYnkgdGhlIFBhcmxpYW1lbnQuPGJyPjxzcGFuIGNsYXNzPVwiYmRcIj5Db21taXNzaW9ubmVyczwvc3Bhbj4gZWFjaCBoYXZlIHRoZWlyIG93biBwb3J0Zm9saW8sIHRoZSBhbGxvY2F0aW9uIG9mIHdoaWNoIGlzIGEgbWF0dGVyIG9mIGNvbnNlbnN1cyBhbmQgaW5mb3JtYWwgbmVnb3RpYXRpb24uIEFuZCBvZiBjb3Vyc2UgdGhlaXIgb3duIHN0YWZmLCBleHBlbnNlcywgY2FyLCBvZmZpY2VzLCBjb29rLCBldGMuPGJyPlRoZSA8c3BhbiBjbGFzcz1cImJkXCI+UHJlc2lkZW50IG9mIHRoZSBDb21taXNzaW9uPC9zcGFuPiBnb2VzIHRvIEc4IHN1bW1pdHMsIGRlbGl2ZXJzIHRvIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QYXJsaWFtZW50PC9zcGFuPiBhIDxzcGFuIGNsYXNzPVwiaXRcIj5TdGF0ZSBvZiB0aGUgVW5pb248L3NwYW4+IGFkZHJlc3MgKCEpLCBhbmQgcHJlc2VudHMgdGhlbSB0aGUgbGVnaXNsYXRpdmUgcHJvZ3JhbW1lLjxicj5FYWNoIENvbW1pc3Npb25uZXIgaGFzIGEgPHNwYW4gY2xhc3M9XCJiZFwiPkRpcmVjdG9yIEdlbmVyYWw8L3NwYW4+IGFuc3dlcmluZyB0byBoaW0sIHRoZSBjaXZpbCBzZXJ2YW50IGhlYWRpbmcgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5EaXJlY3RvcmF0ZSBHZW5lcmFsPC9zcGFuPiBmb3IgdGhlIHBvcnRmb2xpby4gVGhlc2Ugc3ViZGl2aWRlIGludG8gPHNwYW4gY2xhc3M9XCJiZFwiPkRpcmVjdG9yYXRlczwvc3Bhbj4gZGlyZWN0ZWQgYnkgPHNwYW4gY2xhc3M9XCJiZFwiPkRpcmVjdG9yczwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwiYmRcIj5EaXZpc2lvbnM8L3NwYW4+LCBkaXJlY3RlZCBieSA8c3BhbiBjbGFzcz1cImJkXCI+SGVhZHMgb2YgRGl2aXNpb248L3NwYW4+Ljxicj5TaG91bGQgYSBDb21taXNzaW9ubmVyIGZ1Y2sgdXAgaW4gc29tZSB3YXksIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db3VuY2lsPC9zcGFuPiBvciB0aGUgQ29tbWlzc2lvbiBjYW4gYXBwbHkgdG8gdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvdXJ0PC9zcGFuPiB0byBoYXZlIHRoZW0gJiM4MjE2O0NvbXB1bHNvcmlseSBSZXRpcmVkJiM4MjE3OyAtIGFydCAyNDUgJmFtcDsgMjQ3IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRGRVU8L3NwYW4+LiBCdXQgc2luY2UgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TGlzYm9uPC9zcGFuPiwgdGhleSBjYW4gYWxzbyBiZSBkaXNtaXNzZWQgYXQgdGhlIGJlaGVzdCBvZiB0aGUgUHJlc2lkZW50Ljxicj5UaGUgPHNwYW4gY2xhc3M9XCJiZFwiPndob2xlIENvbW1pc3Npb248L3NwYW4+IGNhbiBiZSA8c3BhbiBjbGFzcz1cImJkXCI+ZGlzbWlzc2VkPC9zcGFuPiBieSB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGFybGlhbWVudDwvc3Bhbj4sIGlmIGl0IGNhcnJpZXMgYSBtb3Rpb24gb2YgY2Vuc3VyZSAtIGFydCAxNyg4KSBURVUuIEFuZCBpbiBNYXJjaCAxOTk5LCB0aGV5IDxzcGFuIGNsYXNzPVwiYmRcIj5hbGwgZmxvdW5jZWQgb2ZmIHRvZ2V0aGVyPC9zcGFuPiwgaGF2aW5nIGJlZW4gZGFtbmVkIGluIGEgcmVwb3J0IG9mIGEgY29tbWl0dGVlIG9mIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QYXJsaWFtZW50PC9zcGFuPiBmb3IgbWlzbWFuYWdlbWVudCwgZnJhdWQgYW5kIG5lcG90aXNtLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+UG93ZXJzPC9zcGFuPjwvc3Bhbj48YnI+VGhleSBhcmUgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5sZWdpc2xhdHVyZTwvc3Bhbj4gYW5kIHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+ZXhlY3V0aXZlPC9zcGFuPiwgYW5kIHRoZSAmIzgyMTY7PHNwYW4gY2xhc3M9XCJiZFwiPmd1YXJkaWFuIG9mIHVuaW9uIGxhdzwvc3Bhbj4mIzgyMTY7IC0gYXJ0IDE3KDEpIFRFVS48YnI+PHNwYW4gY2xhc3M9XCJiZFwiPkxlZ2lzbGF0aXZlIHBvd2Vyczwvc3Bhbj4gLSBpdCBoYXMgdGhlIGFic29sdXRlIHJpZ2h0IHRvIGluaXRpYXRlIGxlZ2lzbGF0aW9uLCBieSBtYWtpbmcgYSBwcm9wb3NhbCB0byB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q291bmNpbDwvc3Bhbj4gLSBhcnQgMTcoMiksIGFuZCBjYW4gYWN0aXZlbHkgcGFydGljaXBhdGUgaW4gdGhlaXIgcHJvY2VlZGluZ3MuIEl0IGNhbiBhbHNvIDxzcGFuIGNsYXNzPVwiYmRcIj5wYXNzIGltcGxlbWVudGluZyBsZWdpc2xhdGl2ZSBtZWFzdXJlczwvc3Bhbj4gdXBvbiBkZWxlZ2F0aW5nIGZyb20gdGhlIENvdW5jaWwuIEluIGEgZmV3IGNpcmNzLiwgaXQgY2FuIHBhc3MgPHNwYW4gY2xhc3M9XCJiZFwiPml0cyBvd248L3NwYW4+IG1lYXN1cmVzLjxicj48c3BhbiBjbGFzcz1cImJkXCI+RXhlY3V0aXZlIHBvd2Vyczwvc3Bhbj4gLSBhZG1pbmlzdHJhdGlvbiBvZiBmdW5kcywgc3BlbmQgdGhlIGJ1ZGdldCwgYW5kIHJlcHJlc2VudCB0aGUgRVUgdG8gb3RoZXIgPHNwYW4gY2xhc3M9XCJpdFwiPmdyb3Vwczwvc3Bhbj4gb2Ygc3RhdGVzIGFuZCB0cmFkaXRpbmcgb3Jncy4gLSBhcnQgMjA3KDMpIGFuZCAyMTggPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VEZFVTwvc3Bhbj4uPGJyPkFzIDxzcGFuIGNsYXNzPVwiYmRcIj5ndWFyZGlhbnMgb2YgdW5pb24gbGF3PC9zcGFuPiwgdGhlIENvbW1pc3Npb24gY2FuIGluc3RpdHV0ZSA8c3BhbiBjbGFzcz1cImJkXCI+aW5mcmluZ2VtZW50IHByb2NlZWRpbmdzPC9zcGFuPiBhZ2FpbnN0IGEgbWVtYmVyIHN0YXRlIGl0IGNvbnNpZGVycyBpbiBkZWZhdWx0IG9mIGl0cyB0cmVhdHkgb2JsaWdhdGlvbnMgb3Igb2YgY29tcGxpYW5jZSB3aXRoIGEganVkZ21lbnQgZnJvbSB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q291cnQ8L3NwYW4+IC0gYXJ0IDI2MCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5URkVVPC9zcGFuPi4iCiAgICBdLAogICAgIkFLQSI6ICJDb21taXNzaW9uIiwKICAgICJOQU1FIjogIkV1cm9wZWFuIENvbW1pc3Npb24iLAogICAgIk5VTUJFUiI6ICIxMiIKfSwKewogICAgIlRZUEUiOiAiSW5zdGl0dXRpb24iLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+SW50ZW50aW9uIGFuZCBQcmFjdGljYWxpdGllczwvc3Bhbj48L3NwYW4+PGJyPlRvIHJlcHJlc2VudCB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPnBlb3BsZXMgb2YgdGhlIEVVPC9zcGFuPi4gVGhlIHdheSBpbiB3aGljaCBlYWNoIGNvdW50cnkgZWxlY3RzIGl0cyBNRVBzIGlzIG5vdCB1bmlmb3JtLCBidXQgYWx3YXlzIGludm9sdmVzIFBSLiBBcnQgMjIzIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRGRVU8L3NwYW4+IGFza3MgdGhlIFBhcmxpYW1lbnQgaXRzZWxmIHRvIHJlZm9ybSB0aGlzLjxicj5UaGUgbnVtYmVyIG9mIE1FUHMgZWFjaCBzdGF0ZSBzZW5kcyBpcyA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiBwZXJmZWN0bHkgaW4gcHJvcG9ydGlvbiB0byBpdHMgcG9wdWxhdGlvbi4gR2VybWFueSBpcyB1bmRlcnJlcHJlc2VudGVkOyBMdXhlbWJvdXJnLCB1bmRlcnJlcHJlc2VudGVkLjxicj5UaGUgcHJlc2lkZW50IGlzIGVsZWN0ZWQgYnkgc2VjcmV0IGJhbGxvdCwgYnkgc2ltcGxlIG1ham9yaXR5Ljxicj5UaGUgYWRtaW4gaXMgZG9uZSBpbiA8c3BhbiBjbGFzcz1cImJkXCI+U3RyYXNib3VyZzwvc3Bhbj4sIGJ1dCwgPHNwYW4gY2xhc3M9XCJiZFwiPlJpZGljdWxvdXNseTwvc3Bhbj4sIGl0IHNpdHMgaW4gPHNwYW4gY2xhc3M9XCJiZFwiPmJvdGg8L3NwYW4+IFN0cmFzYm91cmcgYW5kIEJydXNzZWxzLiA5MCUgb2YgTUVQcyB3YW50IGEgc2luZ2xlIHNlYXQsIDgwJSB3YW50IEJydXNzZWxzLiBTZWUgPHNwYW4gY2xhc3M9XCJpdFwiPkZyYW5jZSB2IFBhcmxpYW1lbnQ8L3NwYW4+IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkMtMjM4LzExPC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlBvd2Vyczwvc3Bhbj48L3NwYW4+PGJyPkVhY2ggYW1lbmRtZW50IG9mIHRoZSB0cmVhdGllcyBoYXMgY29uZmVycmVkIG9uIGl0IG1vcmUgcG93ZXJzLCBidXQgaXQgY2xlYXJseSBwbGF5cyB0aGlyZCBmaWRkbGUgdG8gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q291bmNpbDwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbW1pc3Npb248L3NwYW4+LiBJdCBjYW46PGJyPjxzcGFuIGNsYXNzPVwiYmRcIj5QYXJ0aWNpcGF0ZTwvc3Bhbj4gaW4gbGVnaXNsYXRpdmUgcHJvY2Vzcy4gSG93IGl0IGRvZXMgc28gZGVwZW5kcyBvbiB3aGF0JiM4MjE3O3MgYXQgaXNzdWUuIE5vdGUgdGhhdCBpdCA8c3BhbiBjbGFzcz1cImJkXCI+Y2Fubm90IGluaXRpYXRlIGxlZ2lzbGF0aW9uPC9zcGFuPi48YnI+PHNwYW4gY2xhc3M9XCJiZFwiPkluaXRpYXRlIGFubnVsbWVudCBhY3Rpb248L3NwYW4+IGFnYWluc3QgQ291bmNpbCBhbmQgQ29tbWlzc2lvbiAtIGFydCAyNjMoMSkgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VEZFVTwvc3Bhbj4uPGJyPjxzcGFuIGNsYXNzPVwiYmRcIj5DZW5zdXJlIHRoZSBDb21taXNzaW9uPC9zcGFuPiBieSAyLzNyZHMgbWFqb3JpdHkgLSBhcnQgMjM0IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRGRVU8L3NwYW4+Ljxicj48c3BhbiBjbGFzcz1cImJkXCI+RXN0YWJsaXNoIHRoZSBVbmlvbiYjODIxNztzIGJ1ZGdldDwvc3Bhbj4uPGJyPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cIml0XCI+QXNrPC9zcGFuPiB0aGUgQ29tbWlzc2lvbiB0byBzdWJtaXQgbWVhc3VyZXM8L3NwYW4+LCBpZiB0aGV5IGZlZWwgaXQgbmVjZXNzYXJ5IHRvIGRvIHNvIHRvIGltcGxlbWVudCB0aGUgdHJlYXR5IG9iamVjdGl2ZXMuIFRoaXMgaGFzIG5vIHRlZXRoOiB0aGUgQ29tbWlzc2lvbiBkb2VzIG5vdCBoYXZlIHRvIGFjdCBvbiB0aGVpciByZXF1ZXN0Ljxicj48c3BhbiBjbGFzcz1cImJkXCI+U2V0IHVwIHRlbXBvcmFyeSBjb21taXR0ZWVzIG9mIGlucXVpcnk8L3NwYW4+IHRvIGludmVzdGlnYXRlIGNvcnJ1cHRpb24sIGV0Yy4iCiAgICBdLAogICAgIk5BTUUiOiAiRXVyb3BlYW4gUGFybGlhbWVudCIsCiAgICAiTlVNQkVSIjogIjEzIgp9LAp7CiAgICAiVFlQRSI6ICJJbnN0aXR1dGlvbiIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiTm8gZGlzc2VudGluZyBqdWRnbWVudHMsIGJ1dCBhIG5vbi1iaW5kaW5nIG9waW5pb24gb2YgYW4gQWR2b2NhdGUtR2VuZXJhbC4iCiAgICBdLAogICAgIkFLQSI6ICJFQ0o7IENKRVUiLAogICAgIk5BTUUiOiAiQ291cnQgb2YgSnVzdGljZSIsCiAgICAiTlVNQkVSIjogIjE0Igp9LAp7CiAgICAiTUVUQS1TVUJKRUNUIjogIkVVIiwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIk4uQi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RVUgUG9saWN5PC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29tcGV0ZW5jZTwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbmZlcnJhbCwgU3Vic2lkaWFyaXR5IGFuZCBQcm9wb3J0aW9uYWxpdHk8L3NwYW4+LCIKICAgIF0sCiAgICAiTkFNRSI6ICJMYXcgTWFraW5nIiwKICAgICJOVU1CRVIiOiAiMTUiCn0sCnsKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRPRE8gcDIwIgogICAgXSwKICAgICJOQU1FIjogIkVVIFBvbGljeSIsCiAgICAiTlVNQkVSIjogIjE2Igp9LAp7CiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJUT0RPIHAyNiIKICAgIF0sCiAgICAiTkFNRSI6ICJDb21wZXRlbmNlIiwKICAgICJOVU1CRVIiOiAiMTciCn0sCnsKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+Q29uZmVycmFsIG9mIENvbXBldGVuY2U8L3NwYW4+PC9zcGFuPiAtIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCA1IFRFVTwvc3Bhbj48YnI+IHByb3ZpZGVzIHRoaXMsIHRoZSBpZGVhIHRoYXQgdGhlIHVuaW9uIDxzcGFuIGNsYXNzPVwiYmRcIj5vbmx5IGhhcyBsZWdhbCBjb21wZXRlbmNlPC9zcGFuPiB0byBtYWtlIGxhdyA8c3BhbiBjbGFzcz1cImJkXCI+dG8gYXR0YWluIG9iamVjdGl2ZXMgc2V0IG91dCBpbiB0aGUgdHJlYXRpZXM8L3NwYW4+LiBDb21wZXRlbmNlIHRvIGRvIGV2ZXJ5dGhpbmcgZWxzZSA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiBzZXQgb3V0IGluIHRoZSB0cmVhdGllcyA8c3BhbiBjbGFzcz1cImJkXCI+cmVtYWlucyB3aXRoIHRoZSBtZW1iZXIgc3RhdGVzPC9zcGFuPi4iLAogICAgICAgICJDb21wZXRlbmNlIGNhbiBiZSBjb25mZXJyZWQgPHNwYW4gY2xhc3M9XCJiZFwiPmV4Y2x1c2l2ZWx5PC9zcGFuPiBvciA8c3BhbiBjbGFzcz1cImJkXCI+c2hhcmVkPC9zcGFuPiB3aXRoIHRoZSBtZW1iZXIgc3RhdGVzIC0gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDIgVEZFVTwvc3Bhbj4uPGJyPjxzcGFuIGNsYXNzPVwiYmRcIj5FeGNsdXNpdmU8L3NwYW4+IC0gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDMgVEZFVTwvc3Bhbj4gLSA8c3BhbiBjbGFzcz1cImJkXCI+Y3VzdG9tczwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwiYmRcIj5jb21wZXRpdGlvbiBydWxlczwvc3Bhbj4gZm9yIHRoZSBmdW5jdGlvbmluZyBvZiB0aGUgaW50ZXJuYWwgbWFya2V0LCA8c3BhbiBjbGFzcz1cImJkXCI+bW9uZXRhcnkgcG9saWN5PC9zcGFuPiBmb3IgdGhlIEV1cm96b25lLCA8c3BhbiBjbGFzcz1cImJkXCI+b3ZlcmZpc2hpbmc8L3NwYW4+LCA8c3BhbiBjbGFzcz1cImJkXCI+Y29tbW9uIGNvbW1lcmNpYWwgcG9saWN5PC9zcGFuPi48YnI+PHNwYW4gY2xhc3M9XCJiZFwiPlNoYXJlZDwvc3Bhbj4gLSAgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDQgVEZFVTwvc3Bhbj4gLSA8c3BhbiBjbGFzcz1cImJkXCI+aW50ZXJuYWwgbWFya2V0PC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJiZFwiPnNvY2lhbCBwb2xpY3k8L3NwYW4+IHdoZXJlIHByb3ZpZGVkIGZvciBieSBURkVVLCBlY29ub21pYywgc29jaWFsIGFuZCB0ZXJyaXRvcmlhbCAmIzgyMTY7Y29oZXNpb24mIzgyMTc7LCBhZy1uLWZpc2gsIGVudmlyb25tZW50LCB0cmFuc3BvcnQsIGNvbnN1bWVyIHByb3RlY3Rpb24sIGVuZXJneSwgPHNwYW4gY2xhc3M9XCJiZFwiPmZyZWVkb20sIHNlY3VyaXR5IGFuZCBqdXN0aWU8L3NwYW4+LCA8c3BhbiBjbGFzcz1cImJkXCI+cHVibGljIGhlYWx0aDwvc3Bhbj4gd2hlcmUgcHJvdmlkZWQgZm9yIGJ5IFRGRVUuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5TdWJzaWRpYXJpdHk8L3NwYW4+PC9zcGFuPiAtIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCA1IFRFVTwvc3Bhbj48YnI+SW4gYXJlYXMgbm90IHdpdGhpbiB0aGUgVW5pb24mIzgyMTc7cyA8c3BhbiBjbGFzcz1cImJkXCI+ZXhjbHVzaXZlPC9zcGFuPiBjb21wZXRlbmNlLCBpdCB3aWxsIGFjdCA8c3BhbiBjbGFzcz1cImJkXCI+b25seTwvc3Bhbj4gaWYgdGhlIGFpbXMgPHNwYW4gY2xhc3M9XCJiZFwiPmNhbm5vdCBiZSBhY2hpZXZlZCBiZXR0ZXI8L3NwYW4+IGJ5IHRoZSBtZW1iZXIgc3RhdGVzLiA8c3BhbiBjbGFzcz1cImlsY1wiPldoaWNoIGltcGxpZXMgdGhlcmUgYXJlIG9uIHdoaWNoIHRoZSB1bmlvbiA8c3BhbiBjbGFzcz1cImJkXCI+YnV0IG5vdCB0aGUgbWVtYmVyIHN0YXRlczwvc3Bhbj4gaGF2ZSBjb21wZXRlbmNlOyBtYWlubHkgdHJhZGUuPC9zcGFuPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+UHJvcG9ydGlvbmFsaXR5PC9zcGFuPjwvc3Bhbj4gLSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgNSBURVU8L3NwYW4+PGJyPkluIGFjdGluZywgdGhlIFVuaW9uIG11c3QgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdCBnbyBiZXlvbmQ8L3NwYW4+IHdoYXQmIzgyMTc7cyA8c3BhbiBjbGFzcz1cImJkXCI+bmVjZXNzYXJ5PC9zcGFuPiB0byBhY2hpZXZlIHRoZSB0cmVhdHkgZ29hbC4iCiAgICBdLAogICAgIkFLQSI6ICJDb25mZXJyYWw7IFN1YnNpZGlhcml0eTsgUHJvcG9ydGlvbmFsaXR5IiwKICAgICJOQU1FIjogIkNvbmZlcnJhbCwgU3Vic2lkaWFyaXR5IGFuZCBQcm9wb3J0aW9uYWxpdHkiLAogICAgIk5VTUJFUiI6ICIxOCIsCiAgICAiRVVST1BBTElOSyI6IFsKICAgICAgICAiQXJ0IDUgVEVVIGh0dHA6Ly93d3cubGlzYm9uLXRyZWF0eS5vcmcvd2NtL3RoZS1saXNib24tdHJlYXR5L3RyZWF0eS1vbi1ldXJvcGVhbi11bmlvbi1hbmQtY29tbWVudHMvdGl0bGUtMS1jb21tb24tcHJvdmlzaW9ucy85LWFydGljbGUtNS5odG1sIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJSZWFkaW5nIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkZ1cnRoZXIgUmVhZGluZzwvc3Bhbj48L3NwYW4+PGJyPlAuIENyYWlnLCA8c3BhbiBjbGFzcz1cIml0XCI+SW50ZWdyYXRpb24sIERlbW9jcmFjeSwgYW5kIExlZ2l0aW1hY3k8L3NwYW4+IGluIFAuIENyYWlnIGFuZCBHLiBkZSBCXHUwMGZhcmNhIChlZHMpIFRoZSBFdm9sdXRpb24gb2YgRVUgTGF3IChPVVAsIDIwMTEsIDJuZCBlZCkgMTMuPGJyPkNyYWlnLCBQLiwgPHNwYW4gY2xhc3M9XCJpdFwiPkluc3RpdHV0aW9ucywgUG93ZXIsIGFuZCBJbnN0aXR1dGlvbmFsIEJhbGFuY2U8L3NwYW4+IGluIFAuIENyYWlnIGFuZCBHLiBkZSBCXHUwMGZhcmNhIChlZHMpIFRoZSBFdm9sdXRpb24gb2YgRVUgTGF3IChPVVAsIDIwMTEsIDJuZCBlZCkgNDEuPGJyPkEuIEFybnVsbCBhbmQgRC4gV2luY290dCAoZWRzKSwgQWNjb3VudGFiaWxpdHkgYW5kIExlZ2l0aW1hY3kgaW4gdGhlIEV1cm9wZWFuIFVuaW9uICgyMDAyLCBPVVApPGJyPkcuIERhdmllcywgPHNwYW4gY2xhc3M9XCJpdFwiPlN1YnNpZGlhcml0eTogVGhlIFdyb25nIElkZWEsIGluIHRoZSBXcm9uZyBQbGFjZSwgYXQgdGhlIFdyb25nIFRpbWU8L3NwYW4+LCA0MyBDTUxSZXYgKDIwMDYpIDYzPGJyPkcuIEJlcm1hbm4sIDxzcGFuIGNsYXNzPVwiaXRcIj5UYWtpbmcgU3Vic2lkaWFyaXR5IFNlcmlvdXNseTogRmVkZXJhbGlzbSBpbiB0aGUgRXVyb3BlYW4gQ29tbXVuaXR5IGFuZCB0aGUgVW5pdGVkIFN0YXRlczwvc3Bhbj4sICgxOTk0KSA5NCBDb2x1bWJpYSBMYXcgUmV2aWV3IDMzMTxicj5BLiBFc3RlbGxhLCBUaGUgUHJpbmNpcGxlIG9mIFN1YnNpZGlhcml0eSBhbmQgaXRzIENyaXRpcXVlICgyMDAyLCBPVVApOyByZXZpZXdlZCBieSBQLiBTeXJwaXMsIDxzcGFuIGNsYXNzPVwiaXRcIj5JbiBEZWZlbmNlIG9mIFN1YnNpZGlhcml0eTwvc3Bhbj4sIDI0IE9KTFMgKDIwMDQpIDMyMzxicj5NLiBLdW1tLCA8c3BhbiBjbGFzcz1cIml0XCI+Q29uc3RpdHV0aW9uYWxpc2luZyBTdWJzaWRpYXJpdHkgaW4gSW50ZWdyYXRlZCBNYXJrZXRzOiBUaGUgQ2FzZSBvZiBUb2JhY2NvIFJlZ3VsYXRpb24gaW4gdGhlIEV1cm9wZWFuIFVuaW9uPC9zcGFuPiwgMTIgRUxKICgyMDA2KSA1MDM8YnI+V2VhdGhlcmlsbCwgUy4sIDxzcGFuIGNsYXNzPVwiaXRcIj5CZXR0ZXIgQ29tcGV0ZW5jZSBNb25pdG9yaW5nPC9zcGFuPiAzMCBFTFJldiAoMjAwNSkgMjM8YnI+RWRpdG9yaWFsIENvbW1lbnRzLCA8c3BhbiBjbGFzcz1cIml0XCI+VGFraW5nICh0aGUgbGltaXRzIG9mKSBjb21wZXRlbmNlcyBzZXJpb3VzbHk8L3NwYW4+LCAzNyBDTUxSZXYgKDIwMDApIDEzMDEuPGJyPjxzcGFuIGNsYXNzPVwiYmRcIj5EYXNod29vZDwvc3Bhbj4sIF9UaGUgUmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIE1lbWJlciBTdGF0ZXMgYW5kIHRoZSBFdXJvcGVhbjxicj5Vbmlvbi9FdXJvcGVhbiBDb21tdW5pdHlfLCA0MSBDTUxSZXYgKDIwMDQpIDM1NTxicj48c3BhbiBjbGFzcz1cImJkXCI+RGFzaHdvb2Q8L3NwYW4+LCA8c3BhbiBjbGFzcz1cIml0XCI+VGhlIExpbWl0cyBvZiBFdXJvcGVhbiBDb21tdW5pdHkgUG93ZXJzPC9zcGFuPiwgKDE5OTYpIDIxIEVMUmV2IDExMy4iCiAgICBdLAogICAgIk5BTUUiOiAiTGF3LW1ha2luZyAtIEZ1cnRoZXIgUmVhZGluZyIsCiAgICAiTlVNQkVSIjogIjE5Igp9LAp7CiAgICAiVFlQRSI6ICJUcmVhdHkiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjEuIFRoZSA8c3BhbiBjbGFzcz1cImJkXCI+bGltaXRzIG9mIFVuaW9uIGNvbXBldGVuY2VzPC9zcGFuPiBhcmUgZ292ZXJuZWQgYnkgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5wcmluY2lwbGUgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29uZmVycmFsPC9zcGFuPi4gVGhlIDwvc3Bhbj51c2Ugb2YgVW5pb24gY29tcGV0ZW5jZXMqIGlzIGdvdmVybmVkIGJ5IHRoZSBwcmluY2lwbGVzIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlN1YnNpZGlhcml0eTwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlByb3BvcnRpb25hbGl0eTwvc3Bhbj4uIiwKICAgICAgICAiMi4gVW5kZXIgdGhlIHByaW5jaXBsZSBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db25mZXJyYWw8L3NwYW4+LCB0aGUgVW5pb24gc2hhbGwgYWN0IG9ubHkgd2l0aGluIHRoZSBsaW1pdHMgb2YgdGhlIGNvbXBldGVuY2VzIGNvbmZlcnJlZCB1cG9uIGl0IGJ5IHRoZSBNZW1iZXIgU3RhdGVzIGluIHRoZSBUcmVhdGllcyB0byBhdHRhaW4gdGhlIG9iamVjdGl2ZXMgc2V0IG91dCB0aGVyZWluLiBDb21wZXRlbmNlcyBub3QgY29uZmVycmVkIHVwb24gdGhlIFVuaW9uIGluIHRoZSBUcmVhdGllcyByZW1haW4gd2l0aCB0aGUgTWVtYmVyIFN0YXRlcy48YnI+PHNwYW4gY2xhc3M9XCJpbGNcIj5Ob3RlIHRoZSBsb2dpY2FsIHJlZHVuZGFuY2Ugb2YgdGhlIDJuZCBzZW50ZW5jZSB3aXRoIHRoZSAxc3QuPC9zcGFuPiIsCiAgICAgICAgIjMuIFVuZGVyIHRoZSBwcmluY2lwbGUgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U3Vic2lkaWFyaXR5PC9zcGFuPiwgaW4gYXJlYXMgd2hpY2ggZG8gbm90IGZhbGwgd2l0aGluIGl0cyBleGNsdXNpdmUgY29tcGV0ZW5jZSwgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5VbmlvbiBzaGFsbCBhY3Qgb25seTwvc3Bhbj4gaWYgYW5kIGluc29mYXIgYXMgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5vYmplY3RpdmVzPC9zcGFuPiBvZiB0aGUgcHJvcG9zZWQgYWN0aW9uIDxzcGFuIGNsYXNzPVwiYmRcIj5jYW5ub3QgYmUgc3VmZmljaWVudGx5IGFjaGlldmVkIGJ5IHRoZSBNZW1iZXIgU3RhdGVzPC9zcGFuPiwgZWl0aGVyIGF0IGNlbnRyYWwgbGV2ZWwgb3IgYXQgcmVnaW9uYWwgYW5kIGxvY2FsIGxldmVsLCBidXQgY2FuIHJhdGhlciwgYnkgcmVhc29uIG9mIHRoZSBzY2FsZSBvciBlZmZlY3RzIG9mIHRoZSBwcm9wb3NlZCBhY3Rpb24sIGJlIGJldHRlciBhY2hpZXZlZCBhdCBVbmlvbiBsZXZlbC48YnI+VGhlIGluc3RpdHV0aW9ucyBvZiB0aGUgVW5pb24gc2hhbGwgYXBwbHkgdGhlIHByaW5jaXBsZSBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TdWJzaWRpYXJpdHk8L3NwYW4+IGFzIGxhaWQgZG93biBpbiB0aGUgUHJvdG9jb2wgb24gdGhlIGFwcGxpY2F0aW9uIG9mIHRoZSBwcmluY2lwbGVzIG9mIHN1YnNpZGlhcml0eSBhbmQgcHJvcG9ydGlvbmFsaXR5LiBOYXRpb25hbCBQYXJsaWFtZW50cyBlbnN1cmUgY29tcGxpYW5jZSB3aXRoIHRoZSBwcmluY2lwbGUgb2Ygc3Vic2lkaWFyaXR5IGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcHJvY2VkdXJlIHNldCBvdXQgaW4gdGhhdCBQcm90b2NvbC4iLAogICAgICAgICI0LiBVbmRlciB0aGUgcHJpbmNpcGxlIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlByb3BvcnRpb25hbGl0eTwvc3Bhbj4sIHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+Y29udGVudCBhbmQgZm9ybTwvc3Bhbj4gb2YgVW5pb24gYWN0aW9uIDxzcGFuIGNsYXNzPVwiYmRcIj5zaGFsbCBub3QgZXhjZWVkPC9zcGFuPiB3aGF0IGlzIDxzcGFuIGNsYXNzPVwiYmRcIj5uZWNlc3NhcnkgdG8gYWNoaWV2ZSB0aGUgb2JqZWN0aXZlczwvc3Bhbj4gb2YgdGhlIFRyZWF0aWVzLjxicj5UaGUgaW5zdGl0dXRpb25zIG9mIHRoZSBVbmlvbiBzaGFsbCBhcHBseSB0aGUgcHJpbmNpcGxlIG9mIHByb3BvcnRpb25hbGl0eSBhcyBsYWlkIGRvd24gaW4gdGhlIC4uLjxicj5HaXZlcyBndWlkYW5jZSBvbiBkZXRlcm1pbmluZyB3aGV0aGVyIGEgbWVhc3VyZSBpcyBwcm9wb3J0aW9uYWwsIGNvbnNpZGVyYXRpb24gb2YgdGhlc2UgZmFjdG9yczo8YnI+VGhlIGlzc3VlIGhhdmluZyBhIDxzcGFuIGNsYXNzPVwiaXRcIj50cmFuc25hdGlvbmFsPC9zcGFuPiBhc3BlY3Qgd2l0aCB3aGljaCBzdGF0ZXMgb24gdGhlaXIgb3duIHdvdWxkIG5vdCBiZSBhYmxlIGFkZXF1YXRlbHkgdG8gZGVhbDsgaWYsIHdlcmUgdGhleSB0byBkbyBzbyB3b3VsZCBiZSBmb3IgdGhlbSB0byBhY3QgaW4gY29uZmxpY3Qgd2l0aCB0aGVpciB0cmVhdHkgb2JsaWdhdGlvbnM7IGlmIGFjdGlvbiBhdCBVbmlvbiBsZXZlbCB3b3VsZCBwcm9kdWNlIGEgY2xlYXIgZWNvbm9teSBvZiBzY2FsZS4iCiAgICBdLAogICAgIkxJTksiOiBbCiAgICAgICAgIkFydCA1IFRFVSBodHRwOi8vd3d3Lmxpc2Jvbi10cmVhdHkub3JnL3djbS90aGUtbGlzYm9uLXRyZWF0eS90cmVhdHktb24tZXVyb3BlYW4tdW5pb24tYW5kLWNvbW1lbnRzL3RpdGxlLTEtY29tbW9uLXByb3Zpc2lvbnMvOS1hcnRpY2xlLTUuaHRtbCIKICAgIF0sCiAgICAiTkFNRSI6ICJBcnQgNSBURVUiLAogICAgIk5VTUJFUiI6ICIyMCIKfSwKewogICAgIlRZUEUiOiAiVHJlYXR5IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICIxLiBJbiBhY2NvcmRhbmNlIHdpdGggQXJ0aWNsZSA1LCA8c3BhbiBjbGFzcz1cImJkXCI+Y29tcGV0ZW5jZXMgbm90IGNvbmZlcnJlZCB1cG9uIHRoZSBVbmlvbiBpbiB0aGUgVHJlYXRpZXMgcmVtYWluIHdpdGggdGhlIE1lbWJlciBTdGF0ZXM8L3NwYW4+LiA8c3BhbiBjbGFzcz1cImlsY1wiPk5CLiBJbXBsaWNhdGlvbiBoZXJlIHRoYXQgb25jZSBjZWRlZCwgY29tcGV0ZW5jZSA8c3BhbiBjbGFzcz1cImJkXCI+ZXhjbHVzaXZlbHk8L3NwYW4+IHdpdGggVW5pb248L3NwYW4+IiwKICAgICAgICAiMi4gVGhlIFVuaW9uIHNoYWxsIDxzcGFuIGNsYXNzPVwiYmRcIj5yZXNwZWN0IHRoZSBlcXVhbGl0eSBvZiBNZW1iZXIgU3RhdGVzIGJlZm9yZSB0aGUgVHJlYXRpZXMgYXMgd2VsbCBhcyB0aGVpciBuYXRpb25hbCBpZGVudGl0aWVzPC9zcGFuPiwgaW5oZXJlbnQgaW4gdGhlaXIgZnVuZGFtZW50YWwgc3RydWN0dXJlcywgcG9saXRpY2FsIGFuZCBjb25zdGl0dXRpb25hbCwgaW5jbHVzaXZlIG9mIHJlZ2lvbmFsIGFuZCBsb2NhbCBzZWxmLWdvdmVybm1lbnQuIDxzcGFuIGNsYXNzPVwiYmRcIj5JdCBzaGFsbCByZXNwZWN0IHRoZWlyIGVzc2VudGlhbCBTdGF0ZSBmdW5jdGlvbnM8L3NwYW4+LCBpbmNsdWRpbmcgPHNwYW4gY2xhc3M9XCJiZFwiPmVuc3VyaW5nIHRoZSB0ZXJyaXRvcmlhbCBpbnRlZ3JpdHk8L3NwYW4+IG9mIHRoZSBTdGF0ZSwgPHNwYW4gY2xhc3M9XCJiZFwiPm1haW50YWluaW5nIGxhdyBhbmQgb3JkZXI8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+c2FmZWd1YXJkaW5nIG5hdGlvbmFsIHNlY3VyaXR5PC9zcGFuPi48YnI+SW4gcGFydGljdWxhciwgPHNwYW4gY2xhc3M9XCJiZFwiPm5hdGlvbmFsIHNlY3VyaXR5IHJlbWFpbnMgdGhlIHNvbGUgcmVzcG9uc2liaWxpdHkgb2YgZWFjaCBNZW1iZXIgU3RhdGU8L3NwYW4+LiIsCiAgICAgICAgIjMuIFB1cnN1YW50IHRvIHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+cHJpbmNpcGxlIG9mIHNpbmNlcmUgY29vcGVyYXRpb248L3NwYW4+LCB0aGUgVW5pb24gYW5kIHRoZSBNZW1iZXIgU3RhdGVzIHNoYWxsLCBpbiBmdWxsIG11dHVhbCByZXNwZWN0LCBhc3Npc3QgZWFjaCBvdGhlciBpbiBjYXJyeWluZyBvdXQgdGFza3Mgd2hpY2ggZmxvdyBmcm9tIHRoZSBUcmVhdGllcy48YnI+VGhlIE1lbWJlciBTdGF0ZXMgc2hhbGwgdGFrZSBhbnkgYXBwcm9wcmlhdGUgbWVhc3VyZSwgZ2VuZXJhbCBvciBwYXJ0aWN1bGFyLCB0byBlbnN1cmUgZnVsZmlsbWVudCBvZiB0aGUgb2JsaWdhdGlvbnMgYXJpc2luZyBvdXQgb2YgdGhlIFRyZWF0aWVzIG9yIHJlc3VsdGluZyBmcm9tIHRoZSBhY3RzIG9mIHRoZSBpbnN0aXR1dGlvbnMgb2YgdGhlIFVuaW9uLjxicj5UaGUgTWVtYmVyIFN0YXRlcyBzaGFsbCBmYWNpbGl0YXRlIHRoZSBhY2hpZXZlbWVudCBvZiB0aGUgVW5pb24mIzgyMTc7cyB0YXNrcyBhbmQgcmVmcmFpbiBmcm9tIGFueSBtZWFzdXJlIHdoaWNoIGNvdWxkIGplb3BhcmRpc2UgdGhlIGF0dGFpbm1lbnQgb2YgdGhlIFVuaW9uJiM4MjE3O3Mgb2JqZWN0aXZlcy4iCiAgICBdLAogICAgIkxJTksiOiBbCiAgICAgICAgIkFydCA0IFRFVSBodHRwOi8vd3d3Lmxpc2Jvbi10cmVhdHkub3JnL3djbS90aGUtbGlzYm9uLXRyZWF0eS90cmVhdHktb24tZXVyb3BlYW4tdW5pb24tYW5kLWNvbW1lbnRzL3RpdGxlLTEtY29tbW9uLXByb3Zpc2lvbnMvNS1hcnRpY2xlLTQuaHRtbCIKICAgIF0sCiAgICAiTkFNRSI6ICJBcnQgNCBURVUiLAogICAgIk5VTUJFUiI6ICIyMSIKfSwKewogICAgIlRZUEUiOiAiVHJlYXR5IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICIxLiBXaGVuIHRoZSBUcmVhdGllcyA8c3BhbiBjbGFzcz1cImJkXCI+Y29uZmVyIG9uIHRoZSBVbmlvbiBleGNsdXNpdmUgY29tcGV0ZW5jZTwvc3Bhbj4gaW4gYSBzcGVjaWZpYyBhcmVhLCA8c3BhbiBjbGFzcz1cImJkXCI+b25seSB0aGUgVW5pb24gbWF5IGxlZ2lzbGF0ZTwvc3Bhbj4gYW5kIGFkb3B0IGxlZ2FsbHkgYmluZGluZyBhY3RzLCB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPk1lbWJlciBTdGF0ZXM8L3NwYW4+IGJlaW5nIGFibGUgdG8gZG8gc28gdGhlbXNlbHZlcyA8c3BhbiBjbGFzcz1cImJkXCI+b25seSBpZiBzbyBlbXBvd2VyZWQgYnkgdGhlIFVuaW9uIG9yIGZvciB0aGUgaW1wbGVtZW50YXRpb24gb2YgVW5pb24gYWN0czwvc3Bhbj4uIiwKICAgICAgICAiMi4gV2hlbiB0aGUgVHJlYXRpZXMgY29uZmVyIG9uIHRoZSBVbmlvbiBhIGNvbXBldGVuY2UgPHNwYW4gY2xhc3M9XCJiZFwiPnNoYXJlZCB3aXRoIHRoZSBNZW1iZXIgU3RhdGVzPC9zcGFuPiBpbiBhIHNwZWNpZmljIGFyZWEsIHRoZSBVbmlvbiBhbmQgdGhlIE1lbWJlciBTdGF0ZXMgbWF5IGxlZ2lzbGF0ZSBhbmQgYWRvcHQgbGVnYWxseSBiaW5kaW5nIGFjdHMgaW4gdGhhdCBhcmVhLiBUaGUgPHNwYW4gY2xhc3M9XCJiZFwiPk1lbWJlciBTdGF0ZXMgc2hhbGwgZXhlcmNpc2UgdGhlaXIgY29tcGV0ZW5jZSB0byB0aGUgZXh0ZW50IHRoYXQgdGhlIFVuaW9uIGhhcyBub3QgZXhlcmNpc2VkIGl0cyBjb21wZXRlbmNlPC9zcGFuPi4gVGhlIE1lbWJlciBTdGF0ZXMgc2hhbGwgYWdhaW4gZXhlcmNpc2UgdGhlaXIgY29tcGV0ZW5jZSB0byB0aGUgZXh0ZW50IHRoYXQgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5VbmlvbiBoYXMgZGVjaWRlZCB0byBjZWFzZSBleGVyY2lzaW5nIGl0cyBjb21wZXRlbmNlPC9zcGFuPi4iLAogICAgICAgICIzLiBUaGUgTWVtYmVyIFN0YXRlcyBzaGFsbCBjb29yZGluYXRlIHRoZWlyIGVjb25vbWljIGFuZCBlbXBsb3ltZW50IHBvbGljaWVzIHdpdGhpbiBhcnJhbmdlbWVudHMgYXMgZGV0ZXJtaW5lZCBieSB0aGlzIFRyZWF0eSwgd2hpY2ggdGhlIFVuaW9uIHNoYWxsIGhhdmUgY29tcGV0ZW5jZSB0byBwcm92aWRlLiIsCiAgICAgICAgIjQuIFRoZSBVbmlvbiBzaGFsbCBoYXZlIGNvbXBldGVuY2UsIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcHJvdmlzaW9ucyBvZiB0aGUgVHJlYXR5IG9uIEV1cm9wZWFuIFVuaW9uLCA8c3BhbiBjbGFzcz1cImJkXCI+dG8gZGVmaW5lIGFuZCBpbXBsZW1lbnQgYSBjb21tb24gZm9yZWlnbiBhbmQgc2VjdXJpdHkgcG9saWN5PC9zcGFuPiwgaW5jbHVkaW5nIHRoZSBwcm9ncmVzc2l2ZSBmcmFtaW5nIG9mIGEgY29tbW9uIGRlZmVuY2UgcG9saWN5LiIsCiAgICAgICAgIjUuIEluIDxzcGFuIGNsYXNzPVwiYmRcIj5jZXJ0YWluIGFyZWFzPC9zcGFuPiBhbmQgdW5kZXIgdGhlIGNvbmRpdGlvbnMgbGFpZCBkb3duIGluIHRoZSBUcmVhdGllcywgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5VbmlvbiBzaGFsbCBoYXZlIGNvbXBldGVuY2UgdG8gY2Fycnkgb3V0IGFjdGlvbnMgdG8gc3VwcG9ydCwgY29vcmRpbmF0ZSBvciBzdXBwbGVtZW50IHRoZSBhY3Rpb25zIG9mIHRoZSBNZW1iZXIgU3RhdGVzPC9zcGFuPiwgd2l0aG91dCB0aGVyZWJ5IHN1cGVyc2VkaW5nIHRoZWlyIGNvbXBldGVuY2UgaW4gdGhlc2UgYXJlYXMuIEl0IGNhbiBhbHNvIgogICAgXSwKICAgICJOQU1FIjogIkFydCAyIFRGRVUiLAogICAgIk5VTUJFUiI6ICIyMiIKfSwKewogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiVGhpcyBwcm92aWRlZCBmb3IgYnkgQXJ0IDI5NCBURkVVLCBhbmQgdXNlZCB0byBiZSBjYWxsZWQgPHNwYW4gY2xhc3M9XCJpdFwiPmNvLWRlY2lzaW9uPC9zcGFuPi4iLAogICAgICAgICIxLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db21taXNzaW9uPC9zcGFuPiBzZW5kcyBwcm9wb3NhbCB0byA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db3VuY2lsPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGFyaWFtZW50PC9zcGFuPi48YnI+Mi4gPHNwYW4gY2xhc3M9XCJiZFwiPkZpcnN0IHJlYWRpbmc8L3NwYW4+LCBmcm9tIHdoaWNoIFBhcmxpYW1lbnQgcHJvcG9zZXMgKG9yIG5vdCkgYW1lbmRtZW50cyB0byBDb3VuY2lsLiA8c3BhbiBjbGFzcz1cImJkXCI+SWYgdGhlcmUmIzgyMTc7cyBhZ3JlZW1lbnQsIHRoZSBwcm9wb3NhbCBiZWNvbWVzIGxhdzwvc3Bhbj4uIElmIG5vdCwgQ291bmNpbCBleHBsYWlucyBpdHNlbGYgdG8gUGFybGlhbWVudC48YnI+My4gPHNwYW4gY2xhc3M9XCJiZFwiPlNlY29uZCByZWFkaW5nPC9zcGFuPiwgd2l0aGluIHRocmVlIG1vbnRocy4gUGFybGlhbWVudCBjYW4gPHNwYW4gY2xhc3M9XCJiZFwiPmtpbGwgdGhlIHByb3Bvc2FsPC9zcGFuPiBieSBtYWpvcml0eSwgYXBwcm92ZSBpdCwgb3Igc3VnZ2VzdCBmdXJ0aGVyIGFtZW5kbWVudHMgYnkgbWFqb3JpdHksIHNlbnQgdG8gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q291bmNpbDwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJiZFwiPmFuZDwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29tbWlzc2lvbjwvc3Bhbj4uPGJyPjQuIDxzcGFuIGNsYXNzPVwiYmRcIj5Db25jaWxpYXRpb248L3NwYW4+LCBpbiB3aGljaCBhIGNvbW1pdHRlZSBjb21wb3NlZCBvZiB0aGUgQ291bmNpbCBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPmFuIGVxdWFsIG51bWJlcjwvc3Bhbj4gb2YgTUVQcywgd2hvIGFyZSB0byBwcm9kdWNlIGEgPHNwYW4gY2xhc3M9XCJiZFwiPmpvaW50IHRleHQ8L3NwYW4+LiBUaGlzIGhhcyB0byBiZSBRTVYtYXBwcm92ZWQgYnkgdGhlIENvdW5jaWwgYW5kIG1ham9yaXR5LWFwcHJvdmVkIGJ5IGNvbW1pdHRlZSYjODIxNztzIE1FUHMuIElmIHRoZXJlJiM4MjE3O3Mgbm8gYWdyZWVtZW50IGFmdGVyIHNpeCB3ZWVrcywgdGhlIHByb3Bvc2FsIGRpZXMuPGJyPjUuIDxzcGFuIGNsYXNzPVwiYmRcIj5UaGlyZCByZWFkaW5nPC9zcGFuPiwgd2hpY2ggYXBwcm92ZXMgb3IgcmVqZWN0cy4iLAogICAgICAgICJBdCBlYWNoIHN0YWdlLCBwYXJsaWFtZW50IGNhbiB2ZXRvIC0gYnV0IGl0IHJhcmVseSBkb2VzLCBhcyB0aGV5IGtub3cgd2F5cyB3b3VsZCBiZSBmb3VuZCB0byBjaXJjdW12ZW50IHRoZWlyIGludm9sdmVtZW50IGFuZCBpbmZsdWVuY2UgaW4gdGhlIGxlZ2lzbGF0aXZlIHByb2Nlc3MgaWYgdGhleSBkaWQuPGJyPkV2ZXJ5IGFtZW5kbWVudCBmcm9tIENvdW5jaWwgb3IgUGFybGlhbWVudCA8c3BhbiBjbGFzcz1cImJkXCI+bXVzdCBiZSBhcHByb3ZlZCBieSBDb21taXNzaW9uPC9zcGFuPi4gV2l0aG91dCB0aGlzLCB0aGUgYW1lbmRtZW50IGNhbiBzdGlsbCBmbHksIGJ1dCBvbmx5IHdpdGggdGhlIENvdW5jaWwgYWN0aW5nIDxzcGFuIGNsYXNzPVwiYmRcIj51bmFuaW1vdXNseTwvc3Bhbj4uIiwKICAgICAgICAiU2VlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlZvdGluZyBpbiB0aGUgQ291bmNpbDwvc3Bhbj4uIgogICAgXSwKICAgICJOQU1FIjogIk9yZGluYXJ5IExlZ2lzbGF0aXZlIFByb2NlZHVyZSIsCiAgICAiTlVNQkVSIjogIjIzIgp9LAp7CiAgICAiV0lLSUxJTksiOiBbCiAgICAgICAgIlZvdGluZyBpbiB0aGUgQ291bmNpbCBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Wb3RpbmdfaW5fdGhlX0NvdW5jaWxfb2ZfdGhlX0V1cm9wZWFuX1VuaW9uIiwKICAgICAgICAiTHV4ZW1ib3VyZyBDb21wcm9taXNlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0x1eGVtYm91cmdfY29tcHJvbWlzZSIKICAgIF0sCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJUaGVyZVx1MjAxOXMgYSBmdWNrLW9mZiBiaWcgPHNwYW4gY2xhc3M9XCJiZFwiPmJ1dDwvc3Bhbj4gYXR0YWNoZWQgdG8gdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk9yZGluYXJ5IExlZ2lzbGF0aXZlIFByb2NlZHVyZTwvc3Bhbj4sIGJlY2F1c2UgdGhlIENvdW5jaWwgdHJpZXMgdG8gcHJlc2VuIENvdW5jaWwgdm90aW5nIGltcGxpZXMgPHNwYW4gY2xhc3M9XCJiZFwiPmZldWRpbmc8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+YmFkIGJsb29kPC9zcGFuPi4gTGlrZSBFdXJvdmlzaW9uLCBleGNlcHQgYWJvdXQgdGhpbmdzIHRoYXQgbWlnaHQgYWN0dWFsbHkgbWF0dGVyLiIsCiAgICAgICAgIlNvIHZvdGluZyBpcyBvZnRlbiBhbiBvcmd5IG9mIGhvcnNlLXRyYWRpbmcgdG8gbm9kIHRoaW5ncyB0aHJvdWdoLCBhIHJpb3Qgb2YgdW5wcmluY2lwbGVkIHNjcmF0Y2hpbmcgb2YgZWFjaCBvdGhlcnMgYmFja3MgYW5kIGV4Y2hhbmdpbmcgPHNwYW4gY2xhc3M9XCJpdFwiPnF1aWQ8L3NwYW4+IGZvciA8c3BhbiBjbGFzcz1cIml0XCI+cXVvPC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cIml0XCI+SXQgd2FzbiYjODIxNzt0IGRlc2lnbmVkIGxpa2UgdGhpcy48L3NwYW4+IFRoZSBDb3VuY2lsIHdhcyBmb3VuZGVkIHRvIHdvcmsgb24gdW5hbmltaXR5LiBCdXQgdGhlbiB0aGVyZSB3YXMgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5FbXB0eSBDaGFpciBDcmlzaXM8L3NwYW4+ICh3aGVuIHRoYXQgcGV0dWxlbnQsIHByYW5jaW5nLCBjbHVja2luZyBsaXR0bGUgdGhvcm4taW4tdGhlLXNpZGUgaGFsZi1lbnRpdHkgPHNwYW4gY2xhc3M9XCJpdFwiPkRlIEdhdWxsZTwvc3Bhbj4gZGVjaWRlZCAgdG8gZnVjayB0aGluZ3MgdXAgYnkgZW1wdHktY2hhaXJpbmcgQ291bmNpbCBtZWV0aW5ncyB1bnRpbCBoZSBnb3QgaGlzIG93biB3YXkpLCB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPkx1eGVtYm91cmcgQWNjb3JkPC9zcGFuPiAxOTk2LCBBS0EgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5MdXhlbWJvdXJnIENvbXByb21pc2U8L3NwYW4+LCBwcm92aWRlZCB0aGF0IHdoZW4gYSBtZW1iZXIgc3RhdGUgPHNwYW4gY2xhc3M9XCJiZFwiPmZlbHQgc3Ryb25nbHk8L3NwYW4+IHRoYXQgYW4gaXNzdWUgd2FzIGltcG9ydGFudCBmb3IgaXRzIG5hdGlvbmFsIGludGVyZXN0LCB0aGUgcmVxdWlyZW1lbnQgZm9yIGFkb3B0aW9uIHdvdWxkIGJlIDxzcGFuIGNsYXNzPVwiYmRcIj51bmFuaW1pdHk8L3NwYW4+Ljxicj4ybmQgcGFyYSBvZiBMdXhlbWJvdXJnIENvbXByb21pc2U6IEZyZW5jaCBwb3NpdGlvbiBpcyB0aGF0IHRoZXNlIG5lZ290aWF0aW9ucyB0byBhcnJpdmUgYXQgYSBjb25zZW5zdXMgc2hvdWxkIGJlIGluZGVmaW5pdGUuPGJyPjNyZCBwYXJhOiB0aGUgb3RoZXIgc3RhdGVzIGRpc2FncmVlLjxicj40dGggcGFyYTogdGhlIGZ1bmN0aW9uaW5nIG9mIHRoZSBsZWdpc2xhdHVyZSB3aWxsIGNvbnRpbnVlIGFzIGJlZm9yZS4iCiAgICBdLAogICAgIkFLQSI6ICJMdXhlbWJvdXJnIEFjY29yZDsgTHV4ZW1ib3VyZyBDb21wcm9taXNlIiwKICAgICJOQU1FIjogIlZvdGluZyBpbiB0aGUgQ291bmNpbCIsCiAgICAiTlVNQkVSIjogIjI0Igp9LAp7CiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlByaW5jaXBsZSBvZiBTdXByZW1hY3k8L3NwYW4+PC9zcGFuPjxicj5CZXN0IGFydGljdWxhdGVkIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvc3RhPC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPk5hdGlvbmFsIENvbnN0aXR1dGlvbnM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IYW5kZWxzZ2VzZWxzY2hhZnQ8L3NwYW4+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Sb2xlIG9mIE5hdGlvbmFsIENvdXJ0czwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNpbW1lbnRoYWw8L3NwYW4+IgogICAgXSwKICAgICJOQU1FIjogIlN1cHJlbWFjeSBhbmQgRGlyZWN0IEVmZmVjdCIsCiAgICAiTlVNQkVSIjogIjI1Igp9LAp7CiAgICAiVFlQRSI6ICJSZWFkaW5nIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkZ1cnRoZXIgUmVhZGluZzwvc3Bhbj48L3NwYW4+PGJyPkRlIFdpdHRlLCBCLiwgPHNwYW4gY2xhc3M9XCJpdFwiPkRpcmVjdCBFZmZlY3QsIFByaW1hY3ksIGFuZCB0aGUgTmF0dXJlIG9mIHRoZSBMZWdhbCBPcmRlcjwvc3Bhbj4gaW4gUC4gQ3JhaWcgYW5kIEcuIGRlIEJcdTAwZmFyY2EgKGVkcykgVGhlIEV2b2x1dGlvbiBvZiBFVSBMYXcgKE9VUCwgMjAxMSwgMm5kIGVkKSAzMjMuPGJyPkdvcmRvbiwgTS4gYW5kIERvdWdhbiwgTS4sIDxzcGFuIGNsYXNzPVwiaXRcIj5UaGUgVW5pdGVkIEtpbmdkb208L3NwYW4+cyBFdXJvcGVhbiBVbmlvbiBBY3QgMjAxMTogJiM4MjIwO1dobyBXb24gdGhlIEJsb29keSBXYXIgQW55d2F5PyYjODIyMTtfLCAoMjAxMikgMzcgRUxSZXYgMy48YnI+Q3JhaWcsICYjODIxNjtUaGUgRXVyb3BlYW4gVW5pb24gQWN0IDIwMTE6IExvY2tzLCBsaW1pdHMgYW5kIGxlZ2FsaXR5JiM4MjE3OywgNDggQ01MUmV2ICgyMDExKSAxOTE1Ljxicj5TYWR1cnNraSwgVywgPHNwYW4gY2xhc3M9XCJpdFwiPlNvbGFuZ2UsIENoYXB0ZXIgMyYjODIxNzs6IENvbnN0aXR1dGlvbmFsIENvdXJ0cyBpbiBDZW50cmFsIEV1cm9wZSBcdTIwMTMgRGVtb2NyYWN5IFx1MjAxMyBFdXJvcGVhbiBVbmlvbjwvc3Bhbj4gKDIwMDgpIDE0KDEpIEV1cm9wZWFuIExhdyBKb3VybmFsIDEtMzU8YnI+QWxiaSwgQSwgPHNwYW4gY2xhc3M9XCJpdFwiPkZyb20gdGhlIEJhbmFuYSBzYWdhIHRvIGEgc3VnYXIgc2FnYSBhbmQgYmV5b25kOiBDb3VsZCB0aGUgcG9zdC1Db21tdW5pc3QgY29uc3RpdHV0aW9uYWwgY291cnRzIHRlYWNoIHRoZSBFVSBhIGxlc3NvbiBpbiB0aGUgcnVsZSBvZiBsYXc/PC9zcGFuPiA0NyBDTUxSZXYgKDIwMTApIDc5MS48YnI+WmJpcmFsLCAmIzgyMTY7Q3plY2ggQ29uc3RpdHV0aW9uYWwgQ291cnQsIGp1ZGdtZW50IG9mIDMxIEphbnVhcnkgMjAxMiwgUGwuIFx1MDBkYVMgNS8xMi4gXHUyMDEzIEEgTGVnYWwgcmV2b2x1dGlvbiBvciBuZWdsaWdpYmxlIGVwaXNvZGU/IENvdXJ0IG9mIEp1c3RpY2UgZGVjaXNpb24gcHJvY2xhaW1lZCB1bHRyYSB2aXJlcyYjODIxNzssIDQ5IENNTFJldiAoMjAxMikgMTQ3NVx1MjAxMzE0OTEuIgogICAgXSwKICAgICJOQU1FIjogIlN1cHJlbWFjeSBhbmQgRGlyZWN0IEVmZmVjdCAtIFJlYWRpbmciLAogICAgIk5VTUJFUiI6ICIyNiIKfSwKewogICAgIllFQVIiOiAiMTk2NCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJOVU1CRVIiOiAiMjciLAogICAgIkhFTEQiOiBbCiAgICAgICAgIk1lbWJlciBzdGF0ZXMgYW5kIHRoZWlyIG5hdGlvbmFscyBhcmUgYm91bmQgYnkgRVUgbGF3LCB3aGljaCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgbmF0aW9uYWwgbGF3LiIsCiAgICAgICAgIlVubGlrZSBvcmRpbmFyeSBpbnRlcm5hdGlvbmFsIHRyZWF0aWVzLCB0aGUgRUVDIFRyZWF0eS88c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5URkVVPC9zcGFuPiBjcmVhdGVkIGl0cyBvd24gbGVnYWwgc3lzdGVtLiBXaGVuIGl0IGNhbWUgaW50byBmb3JjZSwgaXQgaW50ZWdyYXRlZCBpdHNlbGYgaW50byB0aGUgbGVnYWwgc3lzdGVtcyBvZiBtZW1iZXIgc3RhdGVzLiIsCiAgICAgICAgIlRoZSBtZW1iZXIgc3RhdGVzLCBoYXZpbmcgY3JlYXRlZCBhIGNvbW11bml0eSB3aXRoIGl0cyBvd24gbGVnYWwgcGVyc29uYWxpdHkgYW5kIGNhcGFjaXR5LCBhbmQgY2FwYWNpdHkgdG8gcmVwcmVzZW50IGl0c2VsZiBvbiB0aGUgaW50ZXJuYXRpb25hbCBzdGFnZSAtIGFuZCByZWFsIHBvd2VycyBzdGVtbWluZyBmcm9tIGEgdHJhbnNmZXIgb2YgcG93ZXIgdG8gaXQgZnJvbSBtZW1iZXIgc3RhdGVzLCB0aGV5IGhhdmUgbGltaXRlZCB0aGVpciBzb3ZlcmVpZ24gcmlnaHRzLCBhbGJlaXQgd2l0aGluIGxpbWl0ZWQgZmllbGRzLiIKICAgIF0sCiAgICAiTElOSyI6IFsKICAgICAgICAiQUcgTGFncmFuZ2UncyBvcGluaW9uIGh0dHA6Ly93d3cubmFkci5jby51ay9hcnRpY2xlcy9wdWJsaXNoZWQvQ29uc3RpdHV0aW9uTGF3UmVwb3J0cy9Db3N0YXZFTkVMLnBkZiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiU3VwcmVtYWN5IiwKICAgICAgICAiU292ZXJlaWdudHkiLAogICAgICAgICJOYXRpb25hbCB2cyBFVSBMYXciCiAgICBdLAogICAgIk5BTUUiOiAiRmxhbWluaW8gQ29zdGEgdiBFTkVMIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJJbnRlcm5hdGlvbmFsZSBIYW5kZWxzZ2VzZWxsc2NoYWZ0IiwKICAgICAgICAiUiAoZXggcC4gRmFjdG9ydGFtZSBMdGQpIHYgU2VjIG9mIFN0YXRlIGZvciBUcmFuc3BvcnQiLAogICAgICAgICJBZG1pbmlzdHJhemlvbmUgZGVsbGUgRmluYW56ZSB2IFNpbW1lbnRoYWwgU3BBIChubyAyKSIsCiAgICAgICAgIkJydW5uZXIiLAogICAgICAgICJDb21taXNzaW9uIHYgVUsgQy0zMDgvMTQiLAogICAgICAgICJDb25lZ2F0ZSBMdGQgdiBDb21taXNzaW9uZXJzIG9mIEN1c3RvbXMgYW5kIEV4Y2lzZSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBVSyAoVUhUIE1pbGspIiwKICAgICAgICAiUmV5bmVycyB2IEJlbGdpdW0iLAogICAgICAgICJCaWRhciIsCiAgICAgICAgIkJvYmllIEdldHJhZW5rZXZlcnRyaWViIHYgSGF1cHR6b2xsYW10IEFhY2hlbi1Ob3JkIiwKICAgICAgICAiQm9zbWFuIiwKICAgICAgICAiRmVsaXggUGFsYWNpb3MgZGUgbGEgVmlsbGEiCiAgICBdLAogICAgIkNPTU1FTlQiOiAiT25lIG1heSBoZWFyIHRoZSBjbGFpbSB0aGF0IHRoZSA8c3BhbiBjbGFzcz1cIml0XCI+dHJlYXRpZXM8L3NwYW4+IGRvbiYjODIxNzt0IG1lbnRpb24gYW55dGhpbmcgYWJvdXQgc3VjaCBhIDxzcGFuIGNsYXNzPVwiaXRcIj5saW1pdGF0aW9uPC9zcGFuPiBvbiA8c3BhbiBjbGFzcz1cIml0XCI+bWVtYmVyIHN0YXRlcyYjODIxNzsgc292ZXJlaWduIHJpZ2h0czwvc3Bhbj4uIFRoaXMgaXMgdHJ1ZSwgYnV0IGFzIGEgcHJhY3RpY2FsIG1hdHRlciwgaG93IGNvdWxkIGl0IHBvc3NpYmx5IGhhdmUgYmVlbiBtYWRlIHRvIGZseSwgaWYgaXQgc2FpZCBzbyBleHBsaWNpdGx5LiIsCiAgICAiV0lLSUxJTksiOiBbCiAgICAgICAgImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Nvc3RhX3ZfRU5FTCIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQW4gZW50ZXJwcmlzaW5nIEl0YWxpYW4gbGF3eWVyLCBvcHBvc2VkIHRvIHRoZSBuYXRpb25hbGlzYXRpb24gb2YgaGlzIGNvdW50cnkmIzgyMTc7cyBlbGVjdHJpY2l0eSBzZWN0b3IsIGhhZCByZWZ1c2VkIHRvIHBheSBoaXMgYmlsbCBvZiAxLDkyNSBMaXJlIDxzcGFuIGNsYXNzPVwiaWxjXCI+anVzdCBsZXNzIHRoYW4gXHUyMGFjMTwvc3Bhbj4uIFRoZSBuYXRpb25hbGllZCBlbGVjdHJpY2l0eSBjb21wYW55IHN1ZWQgaGltOyBoZSBhcmd1ZWQgdGhlIG5hdGlvbmFsaXNhdGlvbiB2aW9sYXRlZCBub3Qgb25seSBwcm92aXNpb25zIGFnYWluc3QgPHNwYW4gY2xhc3M9XCJpdFwiPm1hcmtldCBkaXN0b3J0aW9uPC9zcGFuPiBpbiB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VHJlYXR5IG9mIFJvbWU8L3NwYW4+LCBidXQgYWxzbyB0aGUgSXRhbGlhbiBjb25zdGl0dXRpb24uIFRoZSBxdWVzdGlvbiB3YXMgcmVmZXJyZWQgZmlyc3QgdG8gdGhlIEl0YWxpYW4gQ29uc3RpdHV0aW9uYWwgQ291cnQsIHRoZW4gdGhlIEV1cm9wZWFuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvdXJ0PC9zcGFuPi4iLAogICAgICAgICJUaGUgQ29uc3RpdHV0aW9uYWwgQ291cnQgcmVwbGllZCB0aGF0IGFsdGhvdWdoIHRoZSBDb25zdGl0dXRpb24gZGlkIGluZGVlZCBhbGxvdyBmb3IgdGhlIHRyYW5zZmVyIG9mIHNvdmVyZWlnbnR5IGluIHNvbWUgYXJlYXMgdG8gb3JnYW5pc2F0aW9ucyBzdWNoIGFzIHRoZSBFRUMsIHRoaXMgd2FzIGluZGVwZW5kZW50IG9mIHRoZSBjb21tb25wbGFjZSBydWxlIG9mIDxzcGFuIGNsYXNzPVwiaXRcIj5sZXggcG9zdGVyaW9yIGRlcm9nYXQgbGVnaSBwcmlvcmk8L3NwYW4+LCBhbmQgc28gYXMgdGhlIGxlZ2lzbGF0aW9uIG5hdGlvbmFsaXNpbmcgdGhlIGVsZWN0cmljaXR5IGluZHVzdHJ5IGhhZCBjb21lIDxzcGFuIGNsYXNzPVwiaXRcIj5hZnRlcjwvc3Bhbj4gdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRyZWF0eSBvZiBSb21lPC9zcGFuPiwgaXQgZGlzcGxhY2VkIGl0LiIsCiAgICAgICAgIlRoZSBxdWVzdGlvbiB0aGVuIHdlbnQgdG8gdGhlIEVDSi4iCiAgICBdLAogICAgIkFLQSI6ICJDb3N0YSIsCiAgICAiQ0lUQVRJT04iOiAiRmxhbWluaW8gQ29zdGEgdiBFTkVMIFsxOTY0XSBFQ1IgNjg2IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRnVuZGFtZW50YWwiLAogICAgICAgICJJVCIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTYvNjQiLAogICAgIkNBVEVHT1JZIjogIlN1cHJlbWFjeSAmbWRhc2g7IFNvdmVyZWlnbnR5ICZtZGFzaDsgTmF0aW9uYWwgdnMgRVUgTGF3Igp9LAp7CiAgICAiWUVBUiI6ICIxOTcwIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSB2YWxpZGl0eSBvZiBVbmlvbiBtZWFzdXJlcyBpcyBub3QgYWZmZWN0ZWQgYnkgYWxsZWdhdGlvbnMgZW50ZXJ0YWluZWQgYnkgZG9tZXN0aWMgY291cnRzIHRoYXQgYnkgdGhlaXIgb3duIGxpZ2h0cywgdGhleSBhcmUgaW52YWxpZC4gTm90IGV2ZW4gZnVuZGFtZW50YWwgaXRlbXMgb2YgbmF0aW9uYWwgY29uc3RpdHV0aW9uYWwgbGF3IGhhdmUgc3VwcmVtYWN5IG92ZXIgZGlyZWN0bHkgYXBwbGljYWJsZSBwcm92aXNpb25zIG9mIFVuaW9uIGxhdy4gQ2hhbGxlbmdpbmcgbWVhc3VyZXMgYWRvcHRlZCBieSB0aGUgaW5zdGl0dXRpb25zIGluIGRvbWVzdGljIGxhdyB3b3VsZCBydWluIHRoZSB1bmlmb3JtaXR5IGFuZCBlZmZpY2FjaXR5IG9mIFVuaW9uIGxhdy4iLAogICAgICAgICJUaGUgbGF3IGZyb20gdGhlIFRyZWF0aWVzIGlzIGFuIGluZGVwZGVuZGVudCBzb3VyY2Ugb2YgbGF3LiIsCiAgICAgICAgIkFudGljaXBhdGluZyB0aGUgY29uY2VybiB0aGF0IHRoaXMgdmlvbGF0ZWQgdGhlIHNhY3Jvc2FuY3RpdHkgb2YgdGhlIG1vc3QgZnVuZGFtZW50YWwgdGhpbmcgaW4gdGhlIGNvbnN0aXR1dGlvbnMgb2Ygc29tZSBjb3VudHJpZXMgYWZ0ZXIgdGhlIHdhciwgSHVtYW4gUmlnaHRzLCB0aGUganVkZ21lbnQgcmVhc3N1cmVkIHRoYXQgLSAmIzgyMTY7aW4gZmFjdCwgcmVzcGVjdCBmb3IgZnVuZGFtZW50YWwgcmlnaHRzIGZvcm1zIGFuIGludGVncmFsIHBhcnQgb2YgdGhlIGdlbmVyYWwgcHJpbmNpcGxlcyBvZiBsYXcgcHJvdGVjdGVkIGJ5IHRoZSBDb3VydCBvZiBKdXN0aWNlLiBUaGUgcHJvdGVjdGlvbiBvZiBzdWNoIHJpZ2h0cywgd2hpbHN0IGluc3BpcmVkIGJ5IHRoZSBjb25zdGl0dXRpb25hbCB0cmFkaXRpb25zIGNvbW1vbiB0byB0aGUgTWVtYmVyIFN0YXRlcywgbXVzdCBiZSBlbnN1cmVkIHdpdGhpbiB0aGUgZnJhbWV3b3JrIG9mIHRoZSBzdHJ1Y3R1cmUgYW5kIG9iamVjdGl2ZXMgb2YgdGhlIENvbW11bml0eS4mIzgyMTc7IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTdXByZW1hY3kiLAogICAgICAgICJTb3ZlcmVpZ250eSIsCiAgICAgICAgIk5hdGlvbmFsIHZzIEVVIExhdyIKICAgIF0sCiAgICAiTkFNRSI6ICJJbnRlcm5hdGlvbmFsZSBIYW5kZWxzZ2VzZWxsc2NoYWZ0IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJGbGFtaW5pbyBDb3N0YSB2IEVORUwiLAogICAgICAgICJBZG1pbmlzdHJhemlvbmUgZGVsbGUgRmluYW56ZSB2IFNpbW1lbnRoYWwgU3BBIChubyAyKSIsCiAgICAgICAgIlIgKGV4IHAuIEZhY3RvcnRhbWUgTHRkKSB2IFNlYyBvZiBTdGF0ZSBmb3IgVHJhbnNwb3J0IiwKICAgICAgICAiQnJ1bm5lciIsCiAgICAgICAgIkNvbmVnYXRlIEx0ZCB2IENvbW1pc3Npb25lcnMgb2YgQ3VzdG9tcyBhbmQgRXhjaXNlIiwKICAgICAgICAiSGVubiBhbmQgRGFyYnkiLAogICAgICAgICJNYXJsZWFzaW5nIHYgTGEgQ29tbWVyY2lhbCBJbnRlcm5hY2lvbmFsZSBkZSBBbGltZW50YWNpb24iLAogICAgICAgICJDSUEgU2VjdXJpdHkgdiBTaWduYWxzb24gYW5kIFNlY3VyaXRlbCIsCiAgICAgICAgIldlcm5lciBNYW5nb2xkIHYgUlx1MDBmY2RpZ2VyIEhlbG0iLAogICAgICAgICJTY290Y2ggV2hpc2t5IEFzc29jaWF0aW9uIiwKICAgICAgICAiV2FscmF2ZSIsCiAgICAgICAgIlJleW5lcnMgdiBCZWxnaXVtIgogICAgXSwKICAgICJOVU1CRVIiOiAiMjgiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkEgY29tcGFueSBzZWVraW5nIHRvIGV4cG9ydCBtYWl6ZSBjaGFsbGVuZ2VkIHRoZSB2YWxpZGl0eSB1bmRlciB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPm5hdGlvbmFsIGNvbnN0aXR1dGlvbjwvc3Bhbj4gb2YgdGhlIENBUCBleHBvcnQgbGljZW5zZSBzY2hlbWUsIGluIHdoaWNoIHRoZSBkZXBvc2l0IGZvciBhbiBleHBvcnQgbGljZW5zZSB3b3VsZCBiZSBmb3JmZWl0ZWQgaWYgdGhlIHdvdWxkLWJlIGV4cG9ydGVyIGZhaWxlZCB0byBleHBvcnQuIFRoZXkgY2xhaW1lZCB0aGUgbWVhc3VyZSB3YXMgZGlzcHJvcG9ydGlvbmF0ZSBhcyBpdCBkaWQgbW9yZSB0aGFuIGl0IG5lZWRlZCB0byBhY2hpZXZlIGl0cyBhaW0sIGFuZCB3YXMgdGhlcmVmb3JlIGlsbGVnYWwgdW5kZXIgPHNwYW4gY2xhc3M9XCJiZFwiPmRvbWVzdGljPC9zcGFuPiBsYXcuIgogICAgXSwKICAgICJBS0EiOiAiSGFuZGVsc2dlc2VsbHNjaGFmdCIsCiAgICAiQ0lUQVRJT04iOiAiSW50ZXJuYXRpb25hbGUgSGFuZGVsc2dlc2VsbHNjaGFmdCBbMTk3MF0gRUNSIDExMjUiLAogICAgIkZMQUdTIjogWwogICAgICAgICJGdW5kYW1lbnRhbCIsCiAgICAgICAgIkRFIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMTEvNzAiLAogICAgIkNBVEVHT1JZIjogIlN1cHJlbWFjeSAmbWRhc2g7IFNvdmVyZWlnbnR5ICZtZGFzaDsgTmF0aW9uYWwgdnMgRVUgTGF3Igp9LAp7CiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgNCBURVU8L3NwYW4+IDxzcGFuIGNsYXNzPVwiYmRcIj5jb21wZWxzPC9zcGFuPiBzdGF0ZXMgdG8gc2V0IGFzaWRlIHRoZWlyIG93biBsYXcgaW4gZmF2b3VyIG9mIEVVIGxhdy4gJiM4MjE2O01lbWJlciBzdGF0ZXMgPHNwYW4gY2xhc3M9XCJiZFwiPnNoYWxsPC9zcGFuPiB0YWtlIGFueSBhcHByb3ByaWF0ZSBtZWFzdXJlLCBnZW5lcmFsIG9yIHBhcnRpY3VsYXIsIHRvIGVuc3VyZSBmdWxmaWxtZW50IG9mIHRoZSBvYmxpZ2F0aW9ucyBhcmlzaW5nIG91dCBvZiB0aGUgdHJlYXRpZXMuJiM4MjE3OyIKICAgIF0sCiAgICAiTkFNRSI6ICJQcmluY2lwbGUgb2YgTG95YWwgQ29vcGVyYXRpb24iLAogICAgIk5VTUJFUiI6ICIyOSIKfSwKewogICAgIllFQVIiOiAiMTk3OCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJNZW1iZXIgc3RhdGVzIGhhdmUgYSBkdXR5IHRvIHNldCBhc2lkZSBwcm92aXNpb25zIG9mIG5hdGlvbmFsIGxhdyB3aGljaCBhcmUgaW5jb21wYXRpYmxlIHdpdGggVW5pb24gbGF3LCB3aGljaCBpcyBhIGRpcmVjdCBzb3VyY2Ugb2YgcmlnaHRzIGFuZCBkdXRpZXMgZm9yIGFsbCB0aG9zZSB0aGV5IGFmZmVjdCwgd2hldGhlciBtZW1iZXIgc3RhdGVzIG9yIGluZGl2aWR1YWxzLiIsCiAgICAgICAgIk5hdGlvbmFsIGNvdXJ0cyBtdXN0LCB0aGVyZWZvcmUsIGFwcGx5IENvbW11bml0eSBsYXcgaW4gaXRzIGVudGlyZXR5IGFuZCBwcm90ZWN0IHJpZ2h0cyBjb25mZXJyZWQgYnkgaXQgb24gaW5kaXZpZHVhbHMuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTdXByZW1hY3kiLAogICAgICAgICJTb3ZlcmVpZ250eSIsCiAgICAgICAgIk5hdGlvbmFsIHZzIEVVIExhdyIsCiAgICAgICAgIkludm9jYXRpb24gb2YgRVUgbGF3IGJ5IEluZGl2aWR1YWxzIgogICAgXSwKICAgICJOQU1FIjogIkFkbWluaXN0cmF6aW9uZSBkZWxsZSBGaW5hbnplIHYgU2ltbWVudGhhbCBTcEEgKG5vIDIpIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSIChleCBwLiBGYWN0b3J0YW1lIEx0ZCkgdiBTZWMgb2YgU3RhdGUgZm9yIFRyYW5zcG9ydCIsCiAgICAgICAgIkZsYW1pbmlvIENvc3RhIHYgRU5FTCIsCiAgICAgICAgIkludGVybmF0aW9uYWxlIEhhbmRlbHNnZXNlbGxzY2hhZnQiLAogICAgICAgICJCcnVubmVyIiwKICAgICAgICAiQmV0dHJheSIsCiAgICAgICAgIkJlcm5pbmkiLAogICAgICAgICJDYXBvbG9uZ28gdiBNYXlhIiwKICAgICAgICAiU3RleW1hbm4iLAogICAgICAgICJBZGVuZWxlciIsCiAgICAgICAgIkpvaG4gV2Fsa2VyIHYgTWluaXN0ZXJpZXQgZm9yIFNrYXR0ZXIiLAogICAgICAgICJaYW1icmFubyIsCiAgICAgICAgIkJhdWh1aXMgdiBOZXRoZXJsYW5kcyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjMwIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJDaGFyZ2VzIHdlcmUgaW1wb3NlZCB1bmRlciBJdGFsaWFuIGxhdyBvbiBsaXZlIGltcG9ydHMgZnJvbSBGcmFuY2UgZm9yIHZldGVyaW5hcnkgYW5kIHB1YmxpYyBoZWFsdGggaW5zcGVjdGlvbnMuIFRoZSBJdGFsaWFuIGNvdXJ0IGZvdW5kIHRoZXNlIHdlcmUgY29udHJhcnkgdG8gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDM0IFRGRVU8L3NwYW4+IGFuZCBvcmRlcmVkIHRoZSBnb3Zlcm5tZW50IHRvIHJlcGF5IHdpdGggaW50ZXJlc3QuIFRoZSBnb3Zlcm5tZW50IGFwcGVhbGVkLCBjbGFpbWluZyB0aGUgY291cnQgY291bGQgbm90IHRyZWF0IEl0YWxpYW4gc3RhdHV0ZSBhcyBpbnZhbGlkIGFuZCByZWZ1c2UgdG8gYXBwbHkgaXQuIgogICAgXSwKICAgICJBS0EiOiAiU2ltbWVudGhhbCBJSSIsCiAgICAiQ0lUQVRJT04iOiAiQWRtaW5pc3RyYXppb25lIGRlbGxlIEZpbmFuemUgdiBTaW1tZW50aGFsIFNwQSBbMTk3OF0gRUNSIDYyOSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkZ1bmRhbWVudGFsIiwKICAgICAgICAiSVQiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0xMDYvNzciLAogICAgIkNBVEVHT1JZIjogIlN1cHJlbWFjeSAmbWRhc2g7IFNvdmVyZWlnbnR5ICZtZGFzaDsgTmF0aW9uYWwgdnMgRVUgTGF3ICZtZGFzaDsgSW52b2NhdGlvbiBvZiBFVSBsYXcgYnkgSW5kaXZpZHVhbHMiCn0sCnsKICAgICJZRUFSIjogIjE5OTAiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiTmF0aW9uYWwgY291cnRzIG11c3QgZGlzYXBwbHkgbmF0aW9uYWwgbGF3IGluIGNvbmZsaWN0IHdpdGggRVUgbGF3LiBUaGUgd2lsbCBvZiBQYXJsaWFtZW50IGluIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj4xOTcyIEFjdDwvc3Bhbj4gd2FzIHRvIGxpbWl0IGl0cyBzb3ZlcmVpZ250eS4gRXZlbiB0aG91Z2ggdGhhdCB3YXNuJiM4MjE3O3QgZXhwbGljaXQgaW4gdGhlIHRyZWF0aWVzLCBpdCB3YXMgY2xlYXIgZnJvbSB0aGUganVyaXNwcnVkZW5jZSBvZiB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RUNKPC9zcGFuPi4iLAogICAgICAgICJMb3JkIEJyaWRnZSAtICYjODIxNjtJZiB0aGUgc3VwcmVtYWN5IHdpdGhpbiB0aGUgRXVyb3BlYW4gQ29tbXVuaXR5IG9mIENvbW11bml0eSBMYXcgb3ZlciB0aGUgbmF0aW9uYWwgbGF3IG9mIG1lbWJlciBzdGF0ZXMgd2FzIG5vdCBhbHdheXMgaW5oZXJlbnQgaW4gdGhlIEVFQyBUcmVhdHkgaXQgd2FzIGNlcnRhaW5seSB3ZWxsIGVzdGFibGlzaGVkIGluIHRoZSBqdXJpc3BydWRlbmNlIG9mIHRoZSBDb3VydCBvZiBKdXN0aWNlIGxvbmcgYmVmb3JlIHRoZSBVbml0ZWQgS2luZ2RvbSBqb2luZWQgdGhlIENvbW11bml0eS4gVGh1cywgd2hhdGV2ZXIgbGltaXRhdGlvbiBvZiBpdHMgc292ZXJlaWdudHkgUGFybGlhbWVudCBhY2NlcHRlZCB3aGVuIGl0IGVuYWN0ZWQgdGhlIEV1cm9wZWFuIENvbW11bml0aWVzIEFjdCAxOTcyIHdhcyBlbnRpcmVseSB2b2x1bnRhcnkuIFVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgMTk3MiBBY3QgaXQgaGFzIGFsd2F5cyBiZWVuIGNsZWFyIHRoYXQgaXQgd2FzIHRoZSBkdXR5IG9mIGEgVW5pdGVkIEtpbmdkb20gY291cnQsIHdoZW4gZGVsaXZlcmluZyBmaW5hbCBqdWRnbWVudCwgdG8gb3ZlcnJpZGUgYW55IHJ1bGUgb2YgbmF0aW9uYWwgbGF3IGZvdW5kIHRvIGJlIGluIGNvbmZsaWN0IHdpdGggYW55IGRpcmVjdGx5IGVuZm9yY2VhYmxlIHJ1bGUgb2YgQ29tbXVuaXR5IGxhdy4mIzgyMTc7IgogICAgXSwKICAgICJMSU5LIjogWwogICAgICAgICJPbiBCYWlsaWkgaHR0cDovL3d3dy5iYWlsaWkub3JnL3VrL2Nhc2VzL1VLSEwvMTk5MC83Lmh0bWwiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlN1cHJlbWFjeSIsCiAgICAgICAgIlNvdmVyZWlnbnR5IiwKICAgICAgICAiTmF0aW9uYWwgdnMgRVUgTGF3IgogICAgXSwKICAgICJOQU1FIjogIlIgKGV4IHAuIEZhY3RvcnRhbWUgTHRkKSB2IFNlYyBvZiBTdGF0ZSBmb3IgVHJhbnNwb3J0IiwKICAgICJMRUdJTElOSyI6IFsKICAgICAgICAiaHR0cDovL3d3dy5sZWdpc2xhdGlvbi5nb3YudWsvdWtwZ2EvMTk4OC8xMi9jb250ZW50cyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRmxhbWluaW8gQ29zdGEgdiBFTkVMIiwKICAgICAgICAiQWRtaW5pc3RyYXppb25lIGRlbGxlIEZpbmFuemUgdiBTaW1tZW50aGFsIFNwQSAobm8gMikiLAogICAgICAgICJJbnRlcm5hdGlvbmFsZSBIYW5kZWxzZ2VzZWxsc2NoYWZ0IiwKICAgICAgICAiQnJ1bm5lciIsCiAgICAgICAgIlVuaWxldmVyIEl0YWxpYSB2IENlbnRyYWwgRm9vZHMiLAogICAgICAgICJTY290Y2ggV2hpc2t5IEFzc29jaWF0aW9uIiwKICAgICAgICAiWmh1IGFuZCBDaGVuIiwKICAgICAgICAiQW5nb25lc2UiLAogICAgICAgICJJb2FubmlkaXMiLAogICAgICAgICJDb21taXNzaW9uIHYgSXJlbGFuZCAoQnV5IElyaXNoIGNhbXBhaWduKSIsCiAgICAgICAgIlZhbiBHZW5kIGVuIExvb3MiLAogICAgICAgICJEYW5vIgogICAgXSwKICAgICJOVU1CRVIiOiAiMzEiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkEgZ3JvdXAgb2YgYSBodW5kcmVkIG9yIHNvIFNwYW5pYXJkcyBoYWQgc2V0IHVwIGEgY29tcGFueSBpbiBFbmdsYW5kIHVuZGVyIHRoZSBNZXJjaGFudCBGaXNoaW5nIEFjdCAxODk0LCB0byBnYWluIHRoZSByaWdodCB1bmRlciBkb21lc3RpYyBsYXcgdG8gZmlzaCBpbiBVSyB3YXRlcnMuIFRvIGF0dGVtcHQgdG8gcHV0IGEgc3RvcCB0byB0aGlzLCB0aGUgVUsgaGFkIHBhc3NlZCB0aGUgTWVyY2hhbnQgRmlzaGluZyBBY3QgMTk4OCwgd2hpY2ggaW1wb3NlZCByZXN0cmljdGlvbnMgb24gc3VjaCBjb21wYW5pZXMgc3VjaCBhcyBhIHJlcXVpcmVtZW50IHRoYXQgYm9hdHMgYmUgNzUlIEJyaXRpc2gtb3duZWQuIFRoZSBjb21wYW55IHNhaWQgdGhpcyB3YXMgaW5jb21wYXRpYmxlIHdpdGggRVUgbGF3LiIsCiAgICAgICAgIkluIHRoZSBDQSwgRG9uYWxkc29uIE1SIGFuZCBNYW5uLCBCaW5naGFtIExMSiBoZWxkIHRoYXQgPHNwYW4gY2xhc3M9XCJiZFwiPmFsdGhvdWdoPC9zcGFuPiBjb3VydHMgYXJlIG9ibGlnZWQgdG8gZ2l2ZSBlZmZlY3QgQ29tbXVuaXR5IGxhdywgJiM4MjE2O3RoZXkgd2VyZSA8c3BhbiBjbGFzcz1cImJkXCI+bm90IG9ibGlnZWQgdG8gb3ZlcnJpZGUgbmF0aW9uYWwgbGF3PC9zcGFuPiBpbiBmYXZvdXIgb2Ygd2hhdCBpcyBubyBtb3JlIHRoYW4gYW4gYWxsZWdlZCBvciBwdXRhdGl2ZSBDb21tdW5pdHkgcmlnaHQmIzgyMTc7LiBUaGVuIHRoZSBjYXNlIHdlbnQgdG8gdGhlIExvcmRzLCB3aG8gbWFkZSBhIHJlZmVyZW5jZSB0byB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RUNKPC9zcGFuPi4iCiAgICBdLAogICAgIkFLQSI6ICJTcGFuaXNoIEZpc2hlcm1lbjsgRmFjdG9ydGFtZSIsCiAgICAiQ0lUQVRJT04iOiAiUiB2IFNlYyBvZiBTdGF0ZSBmb3IgVHJhbnNwb3J0IChleCBwYXJ0ZSBGYWN0b3J0YW1lIEx0ZCkgWzE5OTBdIEVDUiBJLTI0MzMiLAogICAgIkZMQUdTIjogWwogICAgICAgICJGdW5kYW1lbnRhbCIsCiAgICAgICAgIkdCIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJTdXByZW1hY3kgJm1kYXNoOyBTb3ZlcmVpZ250eSAmbWRhc2g7IE5hdGlvbmFsIHZzIEVVIExhdyIsCiAgICAiQ0FTRU5VTSI6ICJDLTIxMy84OSIKfSwKewogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5VSzwvc3Bhbj48L3NwYW4+PGJyPlMyKDEpIG9mIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj4xOTcyIEFjdDwvc3Bhbj4gaXMgcHJldHR5IGRhbW4gdW5hbWJpZ3VvdXMgdGhhdCB0cmVhdHkgb2JsaWdhaXRvbnMgdG8gdGhlIEVVLCA8c3BhbiBjbGFzcz1cImJkXCI+YW5kIGV2ZXJ5dGhpbmcgZmxvd2luZyBmcm9tIHRoZW08L3NwYW4+IGFyZSBzdXByZW1lLiBOb3RlIHRoYXQgUzE4IG9mIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj4yMDExIEFjdDwvc3Bhbj4gc3RpcHVsYXRlcyBFVSBsYXcgaXMgb25seSBlZmZlY3RpdmUgPHNwYW4gY2xhc3M9XCJiZFwiPmJlY2F1c2Ugb2YgdGhlIDE5NzIgYWN0Ljwvc3Bhbj4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkdlcm1hbnk8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IYW5kZWxzZ2VzZWxsc2NoYWZ0PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CcnVubmVyPC9zcGFuPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+UG9sYW5kPC9zcGFuPjwvc3Bhbj48YnI+QSBqdWRnbWVudCBvZiB0aGUgUG9saXNoIGNvbnN0aXR1dGlvbmFsIGNvdXJ0IGluIDIwMDUgKEsxOC8wNCkgc2F5cyBpdCBpcyA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiB0byBiZSB0YWtlbiBhcyByZWFkIHRoYXQsIHdoZW4gUG9saXNoIGxhdyBjb25mbGljdHMgd2l0aCBFVSBsYXcsIHRoZSBsYXR0ZXIgaXMgYXV0b21hdGljYWxseSBzdXByZW1lLiIKICAgIF0sCiAgICAiQ09NTUVOVCI6ICJOb3RpY2UgaG93LCBpbiBlYWNoIG9mIHRoZSBjYXNlcyBvbiBzdXByZW1hY3ksIHRoZSBuYXRpb25hbCBjb3VydCB0cmllcyB0byA8c3BhbiBjbGFzcz1cImJkXCI+YXZvaWQgYSBzY3JhcDwvc3Bhbj4sIGJ1dCB3YXZlcyBpdHMgaGFuZGJhZyBpbiB0aGUgZ2VuZXJhbCBkaXJlY3Rpb24gb2YgQnJ1c3NlbHMuIFRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db3VydDwvc3Bhbj4gcmVwYXlzIHRoZSBjb21wbGltZW50LCBhbmQgaXMgb2Z0ZW4gY2FyZWZ1bCB0byBjb3VudGVyYmFsYW5jZSBhIGJvbGQgYXNzZXJ0aW9uIG9mIGl0cyBzdXByZW1hY3kgd2l0aCBhIDxzcGFuIGNsYXNzPVwiYmRcIj5maW5kaW5nIGFnYWluc3Q8L3NwYW4+IHRoZSBwZXJzb24gYXR0ZW1wdGluZyB0byByZWx5IG9uIGl0cyBzdXByZW1hY3kuIEUuZy4sIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlZhbiBEdXluPC9zcGFuPi4iLAogICAgIk5BTUUiOiAiQWNjZXB0aW5nIFN1cHJlbWFjeSIsCiAgICAiTlVNQkVSIjogIjMyIgp9LAp7CiAgICAiWUVBUiI6ICIxOTk0IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIk5vIGV4cGFuc2l2ZSBpbnRlcnByZXRhdGlvbiBvZiB0aGUgY29tcGV0ZW5jZXMgb2YgdGhlIEVVIGJ5IHRoZSBFQ0ogd291bGQgYmUgYWNjZXB0ZWQuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTdXByZW1hY3kiLAogICAgICAgICJTb3ZlcmVpZ250eSIKICAgIF0sCiAgICAiTkFNRSI6ICJCcnVubmVyIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJBZG1pbmlzdHJhemlvbmUgZGVsbGUgRmluYW56ZSB2IFNpbW1lbnRoYWwgU3BBIChubyAyKSIsCiAgICAgICAgIlIgKGV4IHAuIEZhY3RvcnRhbWUgTHRkKSB2IFNlYyBvZiBTdGF0ZSBmb3IgVHJhbnNwb3J0IiwKICAgICAgICAiSW50ZXJuYXRpb25hbGUgSGFuZGVsc2dlc2VsbHNjaGFmdCIsCiAgICAgICAgIkZsYW1pbmlvIENvc3RhIHYgRU5FTCIsCiAgICAgICAgIlByb2N1cmV1ciBkdSBSb2kgdiBEYXNzb252aWxsZSIsCiAgICAgICAgIktyYW5lbWFubiIsCiAgICAgICAgIk1jQ2FydGh5IiwKICAgICAgICAiSGVubiBhbmQgRGFyYnkiLAogICAgICAgICJWYXRzb3VyYXMiLAogICAgICAgICJCb3VraGFsZmEiLAogICAgICAgICJGb3N0ZXIgdiBCcml0aXNoIEdhcyIsCiAgICAgICAgIlZhbiBEdXluIHYgSG9tZSBPZmZpY2UiCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRoZSBHZXJtYW4gQ29uc3RpdHV0aW9uYWwgY291cnQgd2FzIGFza2VkIHRvIHJ1bGUgdGhhdCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NYWFzdHJpY2h0PC9zcGFuPiBvdWdodCBub3QgdG8gaGF2ZSBiZWVuIGFkb3B0ZWQsIGFzIHRoZSBHZXJtYW4gY29uc3RpdHV0aW9uIGRpZCBub3QgYWxsb3cgdGhlIEdlcm1hbiBnb3Zlcm5tZW50IHRvIGdpdmUgdXAgYXMgbWFueSBwb3dlcnMuIFJlamVjdGVkIG9uIHRoZSBzdWJzdGFuY2UsIGFmZmlybWluZyB0aGUgYWRvcHRpb24gb2YgdGhlIHRyZWF0eSB0byBiZSBjb25zdGl0dXRpb25hbC4iCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkJydW5uZXIgWzE5OTRdIDEgQ01MUiA1NyIsCiAgICAiQ0FURUdPUlkiOiAiU3VwcmVtYWN5ICZtZGFzaDsgU292ZXJlaWdudHkiLAogICAgIkNPVVJUIjogIkRFIENvbnN0aXR1dGlvbmFsIiwKICAgICJOVU1CRVIiOiAiMzMiCn0sCnsKICAgICJUWVBFIjogIlN0YXR1dGUiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+SW1wbGVtZW50YXRpb24gb2YgVHJlYXRlczwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiYmRcIj5TMigxKTwvc3Bhbj4gQWxsIHN1Y2ggcmlnaHRzLCBwb3dlcnMsIGxpYWJpbGl0aWVzLCBvYmxpZ2F0aW9ucyBhbmQgcmVzdHJpY3Rpb25zIGZyb20gdGltZSB0byB0aW1lIDxzcGFuIGNsYXNzPVwiYmRcIj5jcmVhdGVkIG9yIGFyaXNpbmcgYnkgb3IgdW5kZXIgdGhlIFRyZWF0aWVzPC9zcGFuPiwgYW5kIGFsbCBzdWNoIHJlbWVkaWVzIGFuZCBwcm9jZWR1cmVzIGZyb20gdGltZSB0byB0aW1lIHByb3ZpZGVkIGZvciBieSBvciB1bmRlciB0aGUgVHJlYXRpZXMsIGFzIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgVHJlYXRpZXMgYXJlIDxzcGFuIGNsYXNzPVwiYmRcIj53aXRob3V0IGZ1cnRoZXIgZW5hY3RtZW50IHRvIGJlIGdpdmVuIGxlZ2FsIGVmZmVjdDwvc3Bhbj4gb3IgdXNlZCBpbiB0aGUgVW5pdGVkIEtpbmdkb20gPHNwYW4gY2xhc3M9XCJiZFwiPnNoYWxsIGJlIHJlY29nbmlzZWQgYW5kIGF2YWlsYWJsZSBpbiBsYXc8L3NwYW4+LCBhbmQgYmUgZW5mb3JjZWQsIGFsbG93ZWQgYW5kIGZvbGxvd2VkIGFjY29yZGluZ2x5OyBhbmQgdGhlIGV4cHJlc3Npb24gW0YxICYjODIyMDtlbmZvcmNlYWJsZSBFVSByaWdodCYjODIyMTtdIGFuZCBzaW1pbGFyIGV4cHJlc3Npb25zIHNoYWxsIGJlIHJlYWQgYXMgcmVmZXJyaW5nIHRvIG9uZSB0byB3aGljaCB0aGlzIHN1YnNlY3Rpb24gYXBwbGllcy4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+UzMoMSk8L3NwYW4+IEZvciB0aGUgcHVycG9zZXMgb2YgYWxsIGxlZ2FsIHByb2NlZWRpbmdzIGFueSBxdWVzdGlvbiBhcyB0byB0aGUgbWVhbmluZyBvciBlZmZlY3Qgb2YgYW55IG9mIHRoZSBUcmVhdGllcywgb3IgYXMgdG8gdGhlIHZhbGlkaXR5LCBtZWFuaW5nIG9yIGVmZmVjdCBvZiBhbnkgW0YyIEVVIGluc3RydW1lbnRdICwgc2hhbGwgYmUgdHJlYXRlZCBhcyBhIHF1ZXN0aW9uIG9mIGxhdyAoYW5kLCBpZiBub3QgcmVmZXJyZWQgdG8gdGhlIEV1cm9wZWFuIENvdXJ0LCBiZSBmb3IgZGV0ZXJtaW5hdGlvbiBhcyBzdWNoIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcHJpbmNpcGxlcyBsYWlkIGRvd24gYnkgYW5kIGFueSByZWxldmFudCBbRjMgZGVjaXNpb24gb2YgW0Y0IHRoZSBFdXJvcGVhbiBDb3VydF0pXS4iCiAgICBdLAogICAgIkFLQSI6ICIxOTcyIEFjdCIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiU3VwcmVtYWN5IiwKICAgICAgICAiU292ZXJlaWdudHkiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIlN1cHJlbWFjeSAmbWRhc2g7IFNvdmVyZWlnbnR5IiwKICAgICJOQU1FIjogIkV1cm9wZWFuIENvbW11bml0aWVzIEFjdCAxOTcyIiwKICAgICJMRUdJTElOSyI6IFsKICAgICAgICAiUzIgaHR0cDovL3d3dy5sZWdpc2xhdGlvbi5nb3YudWsvdWtwZ2EvMTk3Mi82OC9zZWN0aW9uLzIiLAogICAgICAgICJTMyBodHRwOi8vd3d3LmxlZ2lzbGF0aW9uLmdvdi51ay91a3BnYS8xOTcyLzY4L3NlY3Rpb24vMyIKICAgIF0sCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRXVyb3BlYW4gVW5pb24gQWN0IDIwMTEiCiAgICBdLAogICAgIk5VTUJFUiI6ICIzNCIKfSwKewogICAgIlRZUEUiOiAiU3RhdHV0ZSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5TdGF0dXMgb2YgRVUgbGF3IDxzcGFuIGNsYXNzPVwiaXRcIj5kZXBlbmRlbnQ8L3NwYW4+IG9uIGNvbnRpbnVpbmcgc3RhdHV0b3J5IGJhc2lzPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJiZFwiPlMxODwvc3Bhbj4gRGlyZWN0bHkgYXBwbGljYWJsZSBvciBkaXJlY3RseSBlZmZlY3RpdmUgRVUgbGF3ICh0aGF0IGlzLCB0aGUgcmlnaHRzLCBwb3dlcnMsIGxpYWJpbGl0aWVzLCBvYmxpZ2F0aW9ucywgcmVzdHJpY3Rpb25zLCByZW1lZGllcyBhbmQgcHJvY2VkdXJlcyByZWZlcnJlZCB0byBpbiBzZWN0aW9uIDIoMSkgb2YgdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkV1cm9wZWFuIENvbW11bml0aWVzIEFjdCAxOTcyPC9zcGFuPikgZmFsbHMgdG8gYmUgPHNwYW4gY2xhc3M9XCJiZFwiPnJlY29nbmlzZWQgYW5kIGF2YWlsYWJsZSBpbiBsYXcgaW4gdGhlIFVuaXRlZCBLaW5nZG9tIG9ubHkgYnkgdmlydHVlIG9mIHRoYXQgQWN0PC9zcGFuPiBvciB3aGVyZSBpdCBpcyByZXF1aXJlZCB0byBiZSByZWNvZ25pc2VkIGFuZCBhdmFpbGFibGUgaW4gbGF3IGJ5IHZpcnR1ZSBvZiBhbnkgb3RoZXIgQWN0LiIKICAgIF0sCiAgICAiQUtBIjogIjIwMTEgQWN0IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTdXByZW1hY3kiLAogICAgICAgICJTb3ZlcmVpZ250eSIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiU3VwcmVtYWN5ICZtZGFzaDsgU292ZXJlaWdudHkiLAogICAgIk5BTUUiOiAiRXVyb3BlYW4gVW5pb24gQWN0IDIwMTEiLAogICAgIkxFR0lMSU5LIjogWwogICAgICAgICJodHRwOi8vd3d3LmxlZ2lzbGF0aW9uLmdvdi51ay91a3BnYS8yMDExLzEyL2NvbnRlbnRzIgogICAgXSwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJFdXJvcGVhbiBDb21tdW5pdGllcyBBY3QgMTk3MiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjM1Igp9LAp7CiAgICAiV0lLSUxJTksiOiBbCiAgICAgICAgIkRpcmVjdCBFZmZlY3QgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGlyZWN0X2VmZmVjdF9vZl9FdXJvcGVhbl9Vbmlvbl9sYXciLAogICAgICAgICJEaXJlY3QgQXBwbGljYWJpbGl0eSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EaXJlY3RfYXBwbGljYWJpbGl0eSIsCiAgICAgICAgIkhvcml6b250YWwgRWZmZWN0IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hvcml6b250YWxfZWZmZWN0IgogICAgXSwKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiaXRcIj5Ob3QgdG8gYmUgY29uZnVzZWQgd2l0aCA8c3BhbiBjbGFzcz1cImJkXCI+RGlyZWN0IEFwcGxpY2FiaWxpdHk8L3NwYW4+LCByZWxhdGluZyBzcGVjaWZpY2FsbHkgdG8gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmVndWxhdGlvbnM8L3NwYW4+PC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPk9yaWdpbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiYmRcIj5UcmVhdHkgYXJ0aWNsZXM8L3NwYW4+IHdlcmUgZXN0YWJsaXNoZWQgdG8gaGF2ZSBkaXJlY3QgZWZmZWN0IGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlZhbiBHZW5kIGVuIExvb3M8L3NwYW4+IGluIDE5NjMsIGJ1dCB0aGUgdHJlYXRpZXMgbWFrZSBubyBtZW50aW9uIG9mIGl0LiBUaGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VmFuIEdlbmQ8L3NwYW4+IENyaXRlcmlhIGZvciBkaXJlY3QgZWZmZWN0IHJlcXVpcmUgdGhlIG1lYXN1cmUgaW4gcXVlc3Rpb246IGlzIDxzcGFuIGNsYXNzPVwiYmRcIj51bmFtYmlndW91c2x5IGNsZWFyPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJiZFwiPnByb2hpYml0aXZlPC9zcGFuPiAocmF0aGVyIHRoYW4gaW1wb3Npbmcgb2YgYSBwb3NpdGl2ZSBvYmxpZ2F0aW9uKSwgPHNwYW4gY2xhc3M9XCJiZFwiPnVuY29uZGl0aW9uYWw8L3NwYW4+LCBjb250YWlucyA8c3BhbiBjbGFzcz1cImJkXCI+bm8gcm9vbSBmb3IgZGlzY3JldGlvbjwvc3Bhbj4gPHNwYW4gY2xhc3M9XCJpbGNcIj5hcHBsaWVzIHRvIHRyZWF0eSBhcnRpY2xlcyBvbmx5PC9zcGFuPiBhbmQgaXMgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdCBkZXBlbmRlbnQgb24gaW1wbGVtZW50aW5nIG5hdGlvbmFsIG1lYXN1cmVzPC9zcGFuPiA8c3BhbiBjbGFzcz1cImlsY1wiPnRoaXMgPHNwYW4gY2xhc3M9XCJpdFwiPmFwcGVhcnM8L3NwYW4+IHRvIGRpc3F1YWxpZnkgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGlyZWN0aXZlczwvc3Bhbj48L3NwYW4+Ljxicj48c3BhbiBjbGFzcz1cImlsY1wiPlJlbWVtYmVyIHRoaXMgYXMgPHNwYW4gY2xhc3M9XCJiZFwiPkNQVURJPC9zcGFuPi4gPHNwYW4gY2xhc3M9XCJiZFwiPkNsZWFyPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJiZFwiPlByb2hpYml0aXZlPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJiZFwiPlVuY29uZGl0aW9uYWw8L3NwYW4+LCBubyA8c3BhbiBjbGFzcz1cImJkXCI+RGlzY3JldGlvbjwvc3Bhbj4sIG5vIDxzcGFuIGNsYXNzPVwiYmRcIj5JbXBsZW1lbnRpbmc8L3NwYW4+IG1lYXN1cmVzLjwvc3Bhbj4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlZlcnRpY2FsIHZzLiBIb3Jpem9udGFsPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJiZFwiPlZlcnRpY2FsPC9zcGFuPiBkaXJlY3RseSBlZmZlY3RpdmUgbWVhc3VyZXMgYXJlIHRob3NlIHdoaWNoIGNhbiBiZSB1c2VkIDxzcGFuIGNsYXNzPVwiYmRcIj5hZ2FpbnN0IHRoZSBzdGF0ZTwvc3Bhbj4gKHRvIGJlIGludGVycHJldGVkIGJyb2FkbHkgLSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NYXJzaGFsbDwvc3Bhbj4pLCA8c3BhbiBjbGFzcz1cImJkXCI+SG9yaXpvbnRhbDwvc3Bhbj4gZGlyZWN0bHkgZWZmZWN0aXZlIG1lYXN1cmVzIGNhbiBiZSB1c2VkIDxzcGFuIGNsYXNzPVwiYmRcIj5hZ2FpbnN0IHByaXZhdGUgcGFydGllczwvc3Bhbj4uIFRoZSBkaXN0aW5jdGlvbiB3YXMgZXN0YWJsaXNoZWQgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGVmcmVubmUgdiBTQUJFTkE8L3NwYW4+LiIsCiAgICAgICAgIlNlZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EaXJlY3QgRWZmZWN0aXZlbmVzcyBvZiBEaXJlY3RpdmVzPC9zcGFuPiIKICAgIF0sCiAgICAiQUtBIjogIkRpcmVjdCBFZmZlY3QiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkRpcmVjdCBFZmZlY3QiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkRpcmVjdCBFZmZlY3QiLAogICAgIk5BTUUiOiAiRG9jdHJpbmUgb2YgRGlyZWN0IEVmZmVjdCIsCiAgICAiTlVNQkVSIjogIjM2IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJKdXN0aWZpY2F0aW9ucyBmb3IgRGlzY3JpbWluYXRpb24gdW5kZXIgQXJ0IDQ1IiwKICAgICAgICAiU2Vjb25kYXJ5IExlZ2lzbGF0aW9uIiwKICAgICAgICAiQ2l0aXplbnMgUmlnaHRzIERpcmVjdGl2ZSAtIERpZ2VzdGVkIiwKICAgICAgICAiUXVhbnRpdGF0aXZlIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICAgICAiRWZmZWN0aXZlbmVzcyBhbmQgU2NvcGUgb2YgQXJ0IDQ1IiwKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IC0gRGlzY3Vzc2lvbiIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IElJIC0gRUZUQSB0byBOaWNlIiwKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSSAtIFBhcmlzIHRvIE1lcmdlciIsCiAgICAgICAgIk1pZ3JhbnQgQ3Jpc2lzIC0gVHVya2V5IERlYWwiLAogICAgICAgICIoSm9pbmVkKSBLYWRpIGFuZCBBbCBCYXJha2FhdCIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyAtIFN1bW1hcnkiLAogICAgICAgICJUaGUgSW50ZXJuYWwgTWFya2V0IGFuZCBGcmVlIE1vdmVtZW50IgogICAgXQp9LAp7CiAgICAiWUVBUiI6ICIxOTYzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRyZWF0eSBhcnRpY2xlcyBjYW4gYmUgZGlyZWN0bHkgZWZmZWN0aXZlIGFnYWluc3Qgc3RhdGVzIGFuZCBnaXZlIHJpZ2h0cyB0byBpbmRpdmlkdWFscywgaWYgdGhleSBjb250YWluIGNsZWFyIGFuZCB1bmFtYmlndW91cywgcHJvaGliaXRpb25zIHJhdGhlciB0aGFuIHBvc2l0aXZlIG9ibGlnYXRpb25zLCBhcmUgdW5jb25kaXRpb25hbCwgaGF2ZSBubyByb29tIGZvciBkaXNjcmV0aW9uIGFuZCBubyBuZWVkIG9mIG5hdGlvbmFsIGltcGxlbWVudGluZyBtZWFzdXJlcyAtIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRpcmVjdCBFZmZlY3Q8L3NwYW4+LiIsCiAgICAgICAgIlRoZSBDb21tdW5pdHkgaXMgYSBuZXcgbGVnYWwgb3JkZXIgZXN0YWJsaXNoZWQgYnkgc3RhdGVzLCBmb3Igd2hpY2ggdGhleSBoYXZlIGxpbWl0ZWQgdGhlaXIgc292ZXJlaWdudHkuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJEaXJlY3QgRWZmZWN0IiwKICAgICAgICAiVGVzdCIKICAgIF0sCiAgICAiTkFNRSI6ICJWYW4gR2VuZCBlbiBMb29zIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZXluZXJzIHYgQmVsZ2l1bSIsCiAgICAgICAgIkRlZnJlbm5lIHYgU0FCRU5BIiwKICAgICAgICAiQmF1bWJhc3QiLAogICAgICAgICJDYXBvbG9uZ28gdiBNYXlhIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFRoZSBOZXRoZXJsYW5kcyIsCiAgICAgICAgIkFkbWluaXN0cmF6aW9uZSBkZWxsZSBGaW5hbnplIHYgU2ltbWVudGhhbCBTcEEgKG5vIDIpIiwKICAgICAgICAiQm9iaWUgR2V0cmFlbmtldmVydHJpZWIgdiBIYXVwdHpvbGxhbXQgQWFjaGVuLU5vcmQiLAogICAgICAgICJJbnRlcm5hdGlvbmFsZSBIYW5kZWxzZ2VzZWxsc2NoYWZ0IiwKICAgICAgICAiQmV0dHJheSIsCiAgICAgICAgIkh1bWJsb3QgdiBEaXJlY3RldXIgZGVzIFNlcnZpY2VzIEZpc2NhdXgiLAogICAgICAgICJWYW4gVGlnZ2VsZSIsCiAgICAgICAgIkJvbnNpZ25vcmUiCiAgICBdLAogICAgIk5VTUJFUiI6ICIzNyIsCiAgICAiV0lLSUxJTksiOiBbCiAgICAgICAgImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Zhbl9HZW5kX2VuX0xvb3Nfdl9OZWRlcmxhbmRzZV9BZG1pbmlzdHJhdGllX2Rlcl9CZWxhc3RpbmdlbiIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBjb21wYW55IGltcG9ydGluZyB1cmVhLWZvcm1hbGRlaHlkZSBvYmplY3RlZCB0byBhIGN1c3RvbXMgY2hhcmdlZCBsZXZpZWQgYWdhaW5zdCBpdC4gQmVuZWx1eCBoYWQgcmVjbGFzc2lmaWVkIHRoZSBjaGVtaWNhbCBpbnRvIGEgaGlnaGVyIGR1dHkgYmFuZC4iCiAgICBdLAogICAgIkFLQSI6ICJWYW4gR2VuZCIsCiAgICAiQ0lUQVRJT04iOiAiVmFuIEdlbmQgZW4gTG9vcyB2IE5lZGVybGFuZHNlIEFkbWluaXN0cmF0aWUgZGVyIEJlbGFzdGluZ2VuIFsxOTYzXSBFQ1IgMSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkZ1bmRhbWVudGFsIiwKICAgICAgICAiTkwiLAogICAgICAgICJUZXN0IgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMjYvNjIiLAogICAgIkNBVEVHT1JZIjogIkRpcmVjdCBFZmZlY3QgJm1kYXNoOyBUZXN0Igp9LAp7CiAgICAiWUVBUiI6ICIxOTc0IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBmYWN0IHRoYXQgYSBzdGF0ZSBtYXkgbm90IGhhdmUgaW1wbGVtZW50ZWQgYSBtZWFzdXJlIGluIGZ1bGZpbG1lbnQgb2YgYSB0cmVhdHkgb2JsaWdhdGlvbiB3aXRoIGEgcHJlY2lzZSBnb2FsIGRvZXMgbm90IG1lYW4gaXQgY2Fubm90IGJlIHJlbGllZCB1cG9uLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRGlyZWN0IEVmZmVjdCIKICAgIF0sCiAgICAiTkFNRSI6ICJSZXluZXJzIHYgQmVsZ2l1bSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiVmFuIEdlbmQgZW4gTG9vcyIsCiAgICAgICAgIkRlZnJlbm5lIHYgU0FCRU5BIiwKICAgICAgICAiUmF1bGluIiwKICAgICAgICAiRmVsaXggUGFsYWNpb3MgZGUgbGEgVmlsbGEiLAogICAgICAgICJCb3NtYW4iLAogICAgICAgICJGb3N0ZXIgdiBCcml0aXNoIEdhcyIsCiAgICAgICAgIkJvYmllIEdldHJhZW5rZXZlcnRyaWViIHYgSGF1cHR6b2xsYW10IEFhY2hlbi1Ob3JkIiwKICAgICAgICAiTGVib24iLAogICAgICAgICJNYXJrcyBhbmQgU3BlbmNlciBQbGMgdiBDdXN0b21zIGFuZCBFeGNpc2UiLAogICAgICAgICJTY290Y2ggV2hpc2t5IEFzc29jaWF0aW9uIiwKICAgICAgICAiUiAoZXggcC4gRmFjdG9ydGFtZSBMdGQpIHYgU2VjIG9mIFN0YXRlIGZvciBUcmFuc3BvcnQiLAogICAgICAgICJDSUEgU2VjdXJpdHkgdiBTaWduYWxzb24gYW5kIFNlY3VyaXRlbCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjM4IiwKICAgICJDSVRBVElPTiI6ICJSZXluZXJzIHYgQmVsZ2l1bSBbMTk3NF0gRUNSIDYzMSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkJFIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMi83NCIsCiAgICAiQ0FURUdPUlkiOiAiRGlyZWN0IEVmZmVjdCIKfSwKewogICAgIllFQVIiOiAiMTk3NiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJEZXBlbmRpbmcgb24gdGhlaXIgY2hhcmFjdGVyLCB0cmVhdHkgYXJ0aWNsZXMgY2FuIGhhdmUgaG9yaXpvbnRhbCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EaXJlY3QgRWZmZWN0PC9zcGFuPiwgc3VjaCBhcyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMTU3IFRGRVU8L3NwYW4+LiIsCiAgICAgICAgIiYjODIxNjtUaGUgcHJvaGliaXRpb24gb24gZGlzY3JpbWluYXRpb24gYmV0d2VlbiBtZW4gYW5kIHdvbWVuIGFwcGxpZXMgbm90IG9ubHkgdG8gdGhlIGFjdGlvbiBvZiBwdWJsaWMgYXV0aG9yaXRpZXMsIGJ1dCBhbHNvIGV4dGVuZHMgdG8gYWxsIGFncmVlbWVudHMgd2hpY2ggYXJlIGludGVuZGVkIHRvIHJlZ3VsYXRlIHBhaWQgbGFib3VyIGNvbGxlY3RpdmVseSwgYXMgd2VsbCBhcyB0byBjb250cmFjdHMgYmV0d2VlbiBpbmRpdmlkdWFscy4mIzgyMTc7IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJEaXJlY3QgRWZmZWN0IiwKICAgICAgICAiSG9yaXpvbnRhbCBFZmZlY3QiLAogICAgICAgICJEaXJlY3QgdnMuIEhvcml6b250YWwgRWZmZWN0IgogICAgXSwKICAgICJOQU1FIjogIkRlZnJlbm5lIHYgU0FCRU5BIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJSZXluZXJzIHYgQmVsZ2l1bSIsCiAgICAgICAgIlZhbiBHZW5kIGVuIExvb3MiLAogICAgICAgICJMZWJvbiIsCiAgICAgICAgIktcdTAwZmNrXHUwMGZja2RldmVjaSB2IFN3ZWRleCIsCiAgICAgICAgIkFsaW1hbm92aWMiLAogICAgICAgICJDYXBvbG9uZ28gdiBNYXlhIiwKICAgICAgICAiTGV2aW4iLAogICAgICAgICJaaHUgYW5kIENoZW4iLAogICAgICAgICJCb3NtYW4iLAogICAgICAgICJNYXJsZWFzaW5nIHYgTGEgQ29tbWVyY2lhbCBJbnRlcm5hY2lvbmFsZSBkZSBBbGltZW50YWNpb24iLAogICAgICAgICJJbnRlcm5hdGlvbmFsZSBIYW5kZWxzZ2VzZWxsc2NoYWZ0IiwKICAgICAgICAiQ29tbWlzc2lvbiB2IElyZWxhbmQgKEJ1eSBJcmlzaCBjYW1wYWlnbikiCiAgICBdLAogICAgIk5VTUJFUiI6ICIzOSIsCiAgICAiV0lLSUxJTksiOiBbCiAgICAgICAgImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RlZnJlbm5lX3ZfU2FiZW5hXyUyOE5vXzIlMjkiCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlVuZGVyIG5hdGlvbmFsIGxhdywgdHJvbGxleSBkb2xsaWVzIHdlcmUgb2JsaWdlZCB0byByZXRpcmUgYXQgNDAsIHVubGlrZSB0aGVpciBtYWxlIGNvdW50ZXJwYXJ0cy4gPHNwYW4gY2xhc3M9XCJpbGNcIj5XaHkgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5oZWxsPC9zcGFuPiB3b3VsZCB0aGlzIGJlIGluIGFueSBjb3VudHJ5JiM4MjE3O3MgPHNwYW4gY2xhc3M9XCJpdFwiPmxhdzwvc3Bhbj4/PC9zcGFuPi4gT25lIHN1Y2ggcmV0aXJlZSBzdWVkIHRoZSBhaXJsaW5lIG9uIHRoZSBiYXNpcyB0aGF0LCBoYXZpbmcgYWNjcnVlZCBsb3dlciBwZW5zaW9uIHJpZ2h0cyB0aGFuIHdvdWxkIGhhdmUgYSBtYW4sIGhlciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMTU3IFRGRVU8L3NwYW4+IHJpZ2h0IHRvIDxzcGFuIGNsYXNzPVwiYmRcIj5lcXVhbCB0cmVhdG1lbnQgb24gZ3JvdW5kcyBvZiBnZW5kZXI8L3NwYW4+IGhhZCBiZWVuIHZpb2xhdGVkLiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiRGVmcmVubmUgdiBTQUJFTkEgKE5vIDIpIFsxOTc2XSBFQ0oiLAogICAgIkZMQUdTIjogWwogICAgICAgICJGdW5kYW1lbnRhbCIsCiAgICAgICAgIkJFIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtNDMvNzUiLAogICAgIkNBVEVHT1JZIjogIkRpcmVjdCBFZmZlY3QgJm1kYXNoOyBIb3Jpem9udGFsIEVmZmVjdCAmbWRhc2g7IERpcmVjdCB2cy4gSG9yaXpvbnRhbCBFZmZlY3QiCn0sCnsKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+UmVndWxhdGlvbnM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImJkXCI+QmluZGluZzwvc3Bhbj4gaW4gaW4gdGhlIGVudGlyaXR5IG9mIHRoZWlyIHRleHQgYXMgc29vbiBhcyBwdWJsaXNoZWQsIGFuZCBkaXJlY3RseSBhcHBsaWNhYmxlIGluIGFsbCBtZW1iZXIgc3RhdGVzIC0gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TGVvbmVzaW88L3NwYW4+LiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+RGVjaXNpb25zPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJiZFwiPkJpbmRpbmc8L3NwYW4+IGluIHRoZSB0ZXh0IHRvbywgYnV0IG9ubHkgdG8gdGhlIHBhcnRpZXMgdG8gd2hvbSB0aGV5IGFyZSBhZGRyZXNzZWQgLSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5HcmFkIHYgRmluYW56YW1wdCBUcmF1bnN0ZWluPC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkRpcmVjdGl2ZXM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImJkXCI+QmluZGluZzwvc3Bhbj4gYXMgd2VsbCwgYnV0IG9ubHkgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5yZXN1bHQgdGhleSBhaW0gdG8gYWNoaWV2ZTwvc3Bhbj4uIFJlcXVpcmUgaW1wbGVtZW50aW5nIGxlZ2lzbGF0aW9uIGluIGVhY2ggbWVtYmVyIHN0YXRlLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRGlyZWN0aXZlcyIsCiAgICAgICAgIlJlZ3VsYXRpb25zIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJEaXJlY3RpdmVzICZtZGFzaDsgUmVndWxhdGlvbnMiLAogICAgIk5BTUUiOiAiU2Vjb25kYXJ5IExlZ2lzbGF0aW9uIiwKICAgICJOVU1CRVIiOiAiNDAiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkRpcmVjdGl2ZXMiLAogICAgICAgICJEb2N0cmluZSBvZiBEaXJlY3QgRWZmZWN0IiwKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSUlJIC0gQWNjZXNzaW9uIHRvIHRoZSBQcmVzZW50IiwKICAgICAgICAiQ2l0aXplbnMgUmlnaHRzIERpcmVjdGl2ZSAtIERpZ2VzdGVkIiwKICAgICAgICAiRVUgQ2l0aXplbnNoaXAiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQiLAogICAgICAgICJNZWFuaW5nIG9mIFdvcmtlciBpbiBBcnQgNDUiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMgLSBTdW1tYXJ5IiwKICAgICAgICAiSGFybW9uaXphdGlvbiIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IEkgLSBQYXJpcyB0byBNZXJnZXIiLAogICAgICAgICJSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCBvZiBXb3JrZXJzIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyBvdmVyIHRoZSBCb3JkZXIiCiAgICBdLAogICAgIkVVUk9QQUxJTksiOiBbCiAgICAgICAgIkFydCAyODggaHR0cDovL3d3dy5saXNib24tdHJlYXR5Lm9yZy93Y20vdGhlLWxpc2Jvbi10cmVhdHkvdHJlYXR5LW9uLXRoZS1mdW5jdGlvbmluZy1vZi10aGUtZXVyb3BlYW4tdW5pb24tYW5kLWNvbW1lbnRzL3BhcnQtNi1pbnN0aXR1dGlvbmFsLWFuZC1maW5hbmNpYWwtcHJvdmlzaW9ucy90aXRsZS0xLWluc3RpdHV0aW9uYWwtcHJvdmlzaW9ucy9jaGFwdGVyLTItbGVnYWwtYWN0cy1vZi10aGUtdW5pb24tYWRvcHRpb24tcHJvY2VkdXJlcy1hbmQtb3RoZXItcHJvdmlzaW9ucy9zZWN0aW9uLTEtdGhlLWxlZ2FsLWFjdHMtb2YtdGhlLXVuaW9uLzYwOC1hcnRpY2xlLTI4OC5odG1sIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPk5hdHVyZTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAyODggVEZFVTwvc3Bhbj4gcHJvdmlkZXMgdGhhdCBkaXJlY3RpdmVzIGhhdmUgYW4gPHNwYW4gY2xhc3M9XCJiZFwiPm9ibGlnYXRpb24gb2YgcmVzdWx0PC9zcGFuPiwgYnV0IHRoYXQgdGhlIG1lbWJlciBzdGF0ZXMgY2hvb3NlIGhvdyB0aGV5IGdvIGFib3V0IGFjaGlldmluZyBpdC4iLAogICAgICAgICJVc3VhbGx5IHRoaXMgbWVhbnMgdGhlIHN0YXRlIG11c3QgZW5hY3QgPHNwYW4gY2xhc3M9XCJiZFwiPmltcGxlbWVudGluZyBsZWdpc2xhdGlvbjwvc3Bhbj4uIFRoaXMgaXMgY2FsbGVkIDxzcGFuIGNsYXNzPVwiYmRcIj50cmFuc3Bvc2l0aW9uPC9zcGFuPi4gRGlyZWN0aXZlcyBhcmUgdGhlcmVmb3JlIDxzcGFuIGNsYXNzPVwiYmRcIj5zb21ld2hhdCBlbGFzdGljPC9zcGFuPi4iLAogICAgICAgICJUaGV5IGNvbWUgd2l0aCBhIDxzcGFuIGNsYXNzPVwiYmRcIj5EYXRlIG9mIEVudHJ5PC9zcGFuPiBhbmQgYSA8c3BhbiBjbGFzcz1cImJkXCI+VHJhbnNwb3NpdGlvbiBEZWFkbGluZTwvc3Bhbj4sIGJ5IHdoaWNoIHRoZSBkaXJlY3RpdmUgbXVzdCBiZSBmdWxseSBlbmFjdGVkIGluIGRvbWVzdGljIGxhdy4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlZlcnRpY2FsIERpcmVjdCBFZmZlY3Q8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5WYW4gRHV5bjwvc3Bhbj4gZXN0YWJsaXNoZXMgdGhhdCB0aGV5IGNhbiBiZSByZWxpZWQgdXBvbiA8c3BhbiBjbGFzcz1cImJkXCI+ZGlyZWN0bHk8L3NwYW4+LCBpLmUuLCB0aGF0IHRoZXkgaGF2ZSA8c3BhbiBjbGFzcz1cImJkXCI+ZGlyZWN0IGVmZmVjdDwvc3Bhbj4sIGlmIGFmdGVyIHRoZSB0cmFuc3Bvc2l0aW9uIGRlYWRsaW5lLCBpbiB3aG9sZSBvciBpbiBwYXJ0LCB0aGV5IHJlbWFpbiB1bmltcGxlbWVudGVkIGF0IG5hdGlvbmFsIGxhdy48YnI+SW4gdGhlIGludGVydmVuaW5nIHBlcmlvZCwgc3RhdGVzIG11c3QgPHNwYW4gY2xhc3M9XCJiZFwiPmRpc2FwcGx5IG5hdGlvbmFsIG1lYXN1cmVzIGxpYWJsZSB0byBjb21wcm9taXNlIHRoZSByZXN1bHQ8L3NwYW4+IC0gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QWRlbmVsZXI8L3NwYW4+IFsyMDA2XS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NYXJzaGFsbDwvc3Bhbj4gZXN0YWJsaXNoZWQgdGhhdCB0aGUgc3RhdGUgYXMgPHNwYW4gY2xhc3M9XCJiZFwiPmVtcGxveWVyPC9zcGFuPiB3YXMgc3ViamVjdCB0byB2ZXJ0aWNhbCBkaXJlY3QgZWZmZWN0LCBhbmQgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Rm9zdGVyPC9zcGFuPiBpdCB3YXMgaGVsZCB0aGF0LCBpbiBhIGdsb3dlcmluZ2x5LU9yd2VsbGlhbiB0dXJuIG9mIHBocmFzZSwgYW55IDxzcGFuIGNsYXNzPVwiYmRcIj5lbWFuYXRpb24gb2YgdGhlIHN0YXRlPC9zcGFuPiB3b3VsZCBkby4gQ2YuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkhvcml6b250YWwgRGlyZWN0IEVmZmVjdDwvc3Bhbj4uIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5JbmRpcmVjdCBFZmZlY3Q8L3NwYW4+PC9zcGFuPjxicj5Fc3RhYmxpc2hlZCBieSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Wb24gQ29sc29uPC9zcGFuPiwgdGhpcyBpcyBUT0RPIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5JbmNpZGVudGFsIEVmZmVjdDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNpZ25hbHNvbjwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlVuaWxldmVyIEl0YWxpYTwvc3Bhbj4iCiAgICBdLAogICAgIkFLQSI6ICJEaXJlY3RpdmUiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkRpcmVjdGl2ZXMiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkRpcmVjdGl2ZXMiLAogICAgIk5BTUUiOiAiRGlyZWN0aXZlcyIsCiAgICAiTlVNQkVSIjogIjQxIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJTZWNvbmRhcnkgTGVnaXNsYXRpb24iLAogICAgICAgICJJbnRlcm5hbCBNYXJrZXQgLSBEaXNjdXNzaW9uIiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBXb3JrZXJzIC0gU3VtbWFyeSIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IElJIC0gRUZUQSB0byBOaWNlIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICAgICAiVGhlIEludGVybmFsIE1hcmtldCBhbmQgRnJlZSBNb3ZlbWVudCIsCiAgICAgICAgIlJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMiLAogICAgICAgICIoSm9pbmVkKSBLYWRpIGFuZCBBbCBCYXJha2FhdCIsCiAgICAgICAgIk1pZ3JhbnQgQ3Jpc2lzIC0gVHVya2V5IERlYWwiLAogICAgICAgICJQb3R0ZWQgSGlzdG9yeSBJIC0gUGFyaXMgdG8gTWVyZ2VyIiwKICAgICAgICAiRG9jdHJpbmUgb2YgRGlyZWN0IEVmZmVjdCIsCiAgICAgICAgIkhhcm1vbml6YXRpb24iCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkZhY2NpbmkgRG9yaTwvc3Bhbj4gZGVtdXJyZWQgZnJvbSBlc3RhYmxpc2hpbmcgPHNwYW4gY2xhc3M9XCJiZFwiPmhvcml6b250YWwgZWZmZWN0PC9zcGFuPiAoTi5CLiBzdHJvbmdseSBkaXNzZW50aW5nIG9waW5pb24gb2YgQUcgTGVueiksIGJ1dCBydWxlZCB0aGF0IG5hdGlvbmFsIGNvdXJ0cyBhcmUgdW5kZXIgYSBkdXR5IHRvIGludGVycHJldCBjb25mbGljdGluZyBuYXRpb25hbCBsYXcgPHNwYW4gY2xhc3M9XCJiZFwiPnB1cnBvc2l2ZWx5PC9zcGFuPiwgdGhlIHB1cnBvc2UgYmVpbmcgdGhhdCBvZiB0aGUgZGlyZWN0aXZlLiIsCiAgICAgICAgIlRoZSBhcmd1bWVudCBjYW4gYmUgcHV0IHRoYXQgaW4gcHJvdmlkaW5nIGEgdmVyeSBzaXplYWJsZSBwcm9wb3J0aW9uIG9mIGEgbW9kZXJuIHN0YXRlJiM4MjE3O3Mgd29ya2ZvcmNlICh0aGUgcGFydCBlbXBsb3llZCBieSB0aGUgZ292ZXJubWVudCkgd2l0aCBhIHNldCBvZiByaWdodHMgbm90IGF2YWlsYWJsZSB0byB0aGUgcmVzdCwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWFyc2hhbGw8L3NwYW4+IGludHJvZHVjZWQgcXVpdGUgYSByYWRpY2FsIGluZXF1YWxpdHkuIE9uZSBtaWdodCBldmVuIHN1c3BlY3QgdGhlIGludGVudGlvbiB3YXMgdG8gc2V0IHVwIGEgc3RhdHVzIHF1byB0aGF0IDxzcGFuIGNsYXNzPVwiaXRcIj5oYWQgdG8geWllbGQ8L3NwYW4+IHRvIHRoZSBpbmV2aXRhYmxlIGVzdGFibGlzaG1lbnQgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SG9yaXpvbnRhbCBEaXJlY3QgRWZmZWN0PC9zcGFuPiAmbWRhc2g7IGJ1dCB0aGF0IGhhc24mIzgyMTc7dCBoYXBwZW5lZC4iCiAgICBdLAogICAgIkxJTksiOiBbCiAgICAgICAgIkFHIExlbnoncyBvcGluaW9uIGluIEZhY2NpbmkgRG9yaSBodHRwOi8vY3VyaWEuZXVyb3BhLmV1L2p1cmlzL3Nob3dQZGYuanNmP3RleHQ9JmRvY2lkPTk4MzQ3JnBhZ2VJbmRleD0wJmRvY2xhbmc9ZW4mbW9kZT1yZXEmZGlyPSZvY2M9Zmlyc3QmcGFydD0xJmNpZD04NjE4ODIiCiAgICBdLAogICAgIk5BTUUiOiAiSG9yaXpvbnRhbCBEaXJlY3QgRWZmZWN0IiwKICAgICJOVU1CRVIiOiAiNDIiCn0sCnsKICAgICJUWVBFIjogIlJlYWRpbmciLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+QXJ0aWNsZXM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImJkXCI+RGFzaHdvb2Q8L3NwYW4+LCBBLiwgPHNwYW4gY2xhc3M9XCJpdFwiPkZyb20gVmFuIER1eW4gdG8gTWFuZ29sZCB2aWEgTWFyc2hjYWxsOiBSZWR1Y2luZyBEaXJlY3QgRWZmZWN0IHRvIEFic3VyZGl0eT88L3NwYW4+LCAoMjAwNi0yMDA3KSA5IENZRUxTIDgxLjxicj5FZGl0b3JpYWwgQ29tbWVudHMsIDxzcGFuIGNsYXNzPVwiaXRcIj5Ib3Jpem9udGFsIGRpcmVjdCBlZmZlY3QgXHUyMDEzIEEgbGF3IG9mIGRpbWluaXNoaW5nIGNvaGVyZW5jZTwvc3Bhbj4sICgyMDA2KSA0MyBDTUxSZXYgMTxicj5DcmFpZywgUC4sIDxzcGFuIGNsYXNzPVwiaXRcIj5UaGUgbGVnYWwgZWZmZWN0cyBvZiBEaXJlY3RpdmVzOiBwb2xpY3ksIHJ1bGVzIGFuZCBleGNlcHRpb25zPC9zcGFuPiwgKDIwMDkpIDM0IEVMUmV2IDM0OS48YnI+RG91Z2FuLCBNLiwgPHNwYW4gY2xhc3M9XCJpdFwiPldoZW4gd29ybGRzIGNvbGxpZGUhIENvbXBldGluZyB2aXNpb25zIG9mIHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiBkaXJlY3QgZWZmZWN0IGFuZCBzdXByZW1hY3k8L3NwYW4+ICgyMDA3KSA0NCBDTUxSZXYgOTMxLjxicj5Bcm51bGwsIEEuLCBUaGUgRXVyb3BlYW4gVW5pb24gYW5kIGl0cyBDb3VydCBvZiBKdXN0aWNlIChPeGZvcmQ6IE9VUCwgMjAwNiAybmQgZWQpIENoLiA3Ljxicj5DcmFpZywgUC5QLiwgPHNwYW4gY2xhc3M9XCJpdFwiPlNvdmVyZWlnbnR5IG9mIHRoZSBVbml0ZWQgS2luZ2RvbSBQYXJsaWFtZW50IGFmdGVyIEZhY3RvcnRhbWU8L3NwYW4+LCAoMTk5MSkgMTEgWUVMIDIyMTxicj5NYWx0YnksIDxzcGFuIGNsYXNzPVwiaXRcIj5NYXJsZWFzaW5nOiBXaGF0IGlzIGFsbCB0aGUgZnVzcyBhYm91dD88L3NwYW4+LCAoMTk5MykgMTA5IExRUiAzMDEuPGJyPk1hbmNpbmksIEMuIEYuIGFuZCBLZWVsaW5nLCBELiBULiwgPHNwYW4gY2xhc3M9XCJpdFwiPkRlbW9jcmFjeSBhbmQgdGhlIEV1cm9wZWFuIENvdXJ0IG9mIEp1c3RpY2U8L3NwYW4+LCAoMTk5NCkgNTcgTUxSIDE3NS48YnI+TWFuY2luaSwgRi4sIDxzcGFuIGNsYXNzPVwiaXRcIj5UaGUgTWFraW5nIG9mIGEgQ29uc3RpdHV0aW9uIGZvciBFdXJvcGU8L3NwYW4+LCAoMTk4OSkgMjYgQ01MUmV2IDU5NSByZXByaW50ZWQgaW48YnI+TWFuY2luaSwgRi4sIERlbW9jcmFjeSBhbmQgQ29uc3RpdHV0aW9uYWxpc20gaW4gdGhlIEV1cm9wZWFuIFVuaW9uIChPeGZvcmQ6IEhhcnQgUHVibGlzaGluZywgMjAwMCkgMS48YnI+UGVzY2F0b3JlLCBQLiwgPHNwYW4gY2xhc3M9XCJpdFwiPlRoZSBEb2N0cmluZSBvZiBEaXJlY3QgRWZmZWN0OiBBbiBJbmZhbnQgRGlzZWFzZSBvZiBDb21tdW5pdHkgTGF3PC9zcGFuPiwgMTk4MykgOCBFTFJldiAxNTU8YnI+VHJpZGltYXMsIFQuLCA8c3BhbiBjbGFzcz1cIml0XCI+QmxhY2ssIFdoaXRlLCBhbmQgU2hhZGVzIG9mIEdyZXk6IEhvcml6b250YWxpdHkgb2YgRGlyZWN0aXZlcyBSZXZpc2l0ZWQ8L3NwYW4+LCAoMjAwMik8YnI+MjEgWUVMIDMyNy48YnI+RG91Z2FuLCBNLiwgPHNwYW4gY2xhc3M9XCJpdFwiPkluIERlZmVuY2Ugb2YgTWFuZ29sZD88L3NwYW4+IGluIEFybnVsbCwgQS4sIEJhcm5hcmQsIEMuLCBEb3VnYW4sIE0uIGFuZCBTcGF2ZW50YSwgRS4gKGVkcyksIDxzcGFuIGNsYXNzPVwiaXRcIj5BIENvbnN0aXR1dGlvbmFsIE9yZGVyIG9mIFN0YXRlcz8gRXNzYXlzIGluIEVVIExhdyBpbiBIb25vdXIgb2YgQWxhbiAqRGFzaHdvb2Q8L3NwYW4+IChIYXJ0IFB1Ymxpc2hpbmcsIDIwMTEpIDIxOS4iCiAgICBdLAogICAgIk5BTUUiOiAiRGlyZWN0aXZlcyAtIEZ1cnRoZXIgUmVhZGluZyIsCiAgICAiTlVNQkVSIjogIjQzIgp9LAp7CiAgICAiVFlQRSI6ICJUcmVhdHkiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+VGV4dDwvc3Bhbj48L3NwYW4+PGJyPlRvIGV4ZXJjaXNlIHRoZSBVbmlvbiYjODIxNztzIGNvbXBldGVuY2VzLCB0aGUgaW5zdGl0dXRpb25zIHNoYWxsIGFkb3B0IHJlZ3VsYXRpb25zLCBkaXJlY3RpdmVzLCBkZWNpc2lvbnMsIHJlY29tbWVuZGF0aW9ucyBhbmQgb3BpbmlvbnMuIiwKICAgICAgICAiQSA8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmVndWxhdGlvbjwvc3Bhbj48L3NwYW4+IHNoYWxsIGhhdmUgZ2VuZXJhbCBhcHBsaWNhdGlvbi4gSXQgc2hhbGwgYmUgPHNwYW4gY2xhc3M9XCJiZFwiPmJpbmRpbmcgaW4gaXRzIGVudGlyZXR5IGFuZCBkaXJlY3RseSBhcHBsaWNhYmxlPC9zcGFuPiBpbiBhbGwgTWVtYmVyIFN0YXRlcy4iLAogICAgICAgICJBIDxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EaXJlY3RpdmU8L3NwYW4+PC9zcGFuPiBzaGFsbCBiZSA8c3BhbiBjbGFzcz1cImJkXCI+YmluZGluZywgYXMgdG8gdGhlIHJlc3VsdCB0byBiZSBhY2hpZXZlZDwvc3Bhbj4sIHVwb24gZWFjaCBNZW1iZXIgU3RhdGUgdG8gd2hpY2ggaXQgaXMgYWRkcmVzc2VkLCBidXQgc2hhbGwgPHNwYW4gY2xhc3M9XCJiZFwiPmxlYXZlIHRvIHRoZSBuYXRpb25hbCBhdXRob3JpdGllczwvc3Bhbj4gdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5jaG9pY2Ugb2YgZm9ybSBhbmQgbWV0aG9kczwvc3Bhbj4uIiwKICAgICAgICAiQSA8c3BhbiBjbGFzcz1cImJkXCI+RGVjaXNpb248L3NwYW4+IHNoYWxsIGJlIGJpbmRpbmcgaW4gaXRzIGVudGlyZXR5LiBBIGRlY2lzaW9uIHdoaWNoIHNwZWNpZmllcyB0aG9zZSB0byB3aG9tIGl0IGlzIGFkZHJlc3NlZCBzaGFsbCBiZSBiaW5kaW5nIG9ubHkgb24gdGhlbS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+UmVjb21tZW5kYXRpb25zPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPm9waW5pb25zPC9zcGFuPiBzaGFsbCBoYXZlIG5vIGJpbmRpbmcgZm9yY2UuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJEaXJlY3RpdmVzIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJEaXJlY3RpdmVzIiwKICAgICJOQU1FIjogIkFydCAyODggVEZFVSIsCiAgICAiTlVNQkVSIjogIjQ0IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJBcnRpY2xlcyAxOCwgMjAgYW5kIDIxIFRGRVUiLAogICAgICAgICJMaXNib24gVHJlYXR5IC0gSHVtYW4gUmlnaHRzIEFzcGVjdHMiLAogICAgICAgICJBcnRpY2xlIDQ1IFRGRVUiCiAgICBdLAogICAgIkVVUk9QQUxJTksiOiBbCiAgICAgICAgIkFydCAyODggaHR0cDovL3d3dy5saXNib24tdHJlYXR5Lm9yZy93Y20vdGhlLWxpc2Jvbi10cmVhdHkvdHJlYXR5LW9uLXRoZS1mdW5jdGlvbmluZy1vZi10aGUtZXVyb3BlYW4tdW5pb24tYW5kLWNvbW1lbnRzL3BhcnQtNi1pbnN0aXR1dGlvbmFsLWFuZC1maW5hbmNpYWwtcHJvdmlzaW9ucy90aXRsZS0xLWluc3RpdHV0aW9uYWwtcHJvdmlzaW9ucy9jaGFwdGVyLTItbGVnYWwtYWN0cy1vZi10aGUtdW5pb24tYWRvcHRpb24tcHJvY2VkdXJlcy1hbmQtb3RoZXItcHJvdmlzaW9ucy9zZWN0aW9uLTEtdGhlLWxlZ2FsLWFjdHMtb2YtdGhlLXVuaW9uLzYwOC1hcnRpY2xlLTI4OC5odG1sIgogICAgXQp9LAp7CiAgICAiWUVBUiI6ICIyMDA2IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkluIHRoZSBwZXJpb2QgYmV0d2VlbiBlbnRyeSBvZiBhIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRpcmVjdGl2ZTwvc3Bhbj4gYnV0IGJlZm9yZSBleHBpcmF0aW9uIG9mIGl0cyB0cmFuc3Bvc2UgYnkgZGF0ZSwgYSBtZW1iZXIgc3RhdGUgbXVzdCBub3Qgb25seSBub3QgZW5hY3Qgb3RoZXIgbWVhc3VyZXMgdGhhdCBjb3VsZCBjb21wcm9taXNlIHRoZSBhdHRhaW5tZW50IG9mIHRoZSByZXN1bHQsIGJ1dCBhbHNvIGRpc2FwcGx5IG1lYXN1cmVzIHRoYXQgbWlnaHQgamVvcGFyZGlzZSB0aGUgcmVzdWx0LiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRGlyZWN0aXZlcyIsCiAgICAgICAgIkp1cmlzZGljdGlvbmFsIEV4cGFuc2lvbiIsCiAgICAgICAgIlRyYW5zcG9zaXRpb24gUGVyaW9kIgogICAgXSwKICAgICJOQU1FIjogIkFkZW5lbGVyIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJGb3N0ZXIgdiBCcml0aXNoIEdhcyIsCiAgICAgICAgIldlcm5lciBNYW5nb2xkIHYgUlx1MDBmY2RpZ2VyIEhlbG0iLAogICAgICAgICJNYXJzaGFsbCIsCiAgICAgICAgIlVuaWxldmVyIEl0YWxpYSB2IENlbnRyYWwgRm9vZHMiLAogICAgICAgICJNYXJrcyBhbmQgU3BlbmNlciBQbGMgdiBDdXN0b21zIGFuZCBFeGNpc2UiLAogICAgICAgICJGYWNjaW5pIERvcmkiLAogICAgICAgICJLXHUwMGZja1x1MDBmY2tkZXZlY2kgdiBTd2VkZXgiLAogICAgICAgICJNYXJsZWFzaW5nIHYgTGEgQ29tbWVyY2lhbCBJbnRlcm5hY2lvbmFsZSBkZSBBbGltZW50YWNpb24iLAogICAgICAgICJGZWxpeCBQYWxhY2lvcyBkZSBsYSBWaWxsYSIsCiAgICAgICAgIlZvbiBDb2xzb24gdiBMYW5kIE5vcmRyaGVpbi1XZXN0ZmFsZW4iLAogICAgICAgICJDSUEgU2VjdXJpdHkgdiBTaWduYWxzb24gYW5kIFNlY3VyaXRlbCIsCiAgICAgICAgIlB1YmJsaWNvIE1pbmlzdGVybyB2IFJhdHRpIgogICAgXSwKICAgICJOVU1CRVIiOiAiNDUiLAogICAgIkNJVEFUSU9OIjogIkFkZW5lbGVyIFsyMDA2XSBJLTYwNTciLAogICAgIkNBU0VOVU0iOiAiQy0yMTIvMDQiLAogICAgIkNBVEVHT1JZIjogIkRpcmVjdGl2ZXMgJm1kYXNoOyBKdXJpc2RpY3Rpb25hbCBFeHBhbnNpb24gJm1kYXNoOyBUcmFuc3Bvc2l0aW9uIFBlcmlvZCIKfSwKewogICAgIllFQVIiOiAiMTk3NCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJBZnRlciB0aGUgdHJhbnNjcmlwdGlvbiBkZWFkbGluZSwgaW4gY2VydGFpbiBjaXJjdW1zdGFuY2VzLCBhIGRpcmVjdGl2ZSAob3IgdGhlIGJpdHMgb2YgaXQgbm90IHlldCB0cmFuc2NyaWJlZCkgY2FuIGJlIHJlbGllZCB1cG9uIGRpcmVjdGx5LiBKdXN0IGJlY2F1c2UgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDI4OCBURkVVPC9zcGFuPiBnaXZlcyByZWd1bGF0aW9ucyBkaXJlY3QgYXBwbGljYWJpbGl0eSwgaXQgZG9lcyBub3QgZm9sbG93IHRoYXQgaW4gYWxsIGNpcmN1bXN0YW5jZXMsIGRpcmVjdGl2ZXMgY2Fubm90IGhhdmUgc2ltaWxhciBlZmZlY3RzLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRGlyZWN0aXZlcyIsCiAgICAgICAgIlZlcnRpY2FsIERpcmVjdCBFZmZlY3Qgb2YgRGlyZWN0aXZlcyIKICAgIF0sCiAgICAiTkFNRSI6ICJWYW4gRHV5biB2IEhvbWUgT2ZmaWNlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNYXJzaGFsbCIsCiAgICAgICAgIlB1YmJsaWNvIE1pbmlzdGVybyB2IFJhdHRpIiwKICAgICAgICAiRm9zdGVyIHYgQnJpdGlzaCBHYXMiLAogICAgICAgICJVbmlsZXZlciBJdGFsaWEgdiBDZW50cmFsIEZvb2RzIiwKICAgICAgICAiVm9uIENvbHNvbiB2IExhbmQgTm9yZHJoZWluLVdlc3RmYWxlbiIsCiAgICAgICAgIktcdTAwZmNrXHUwMGZja2RldmVjaSB2IFN3ZWRleCIsCiAgICAgICAgIkZhY2NpbmkgRG9yaSIsCiAgICAgICAgIkFkZW5lbGVyIiwKICAgICAgICAiTWFya3MgYW5kIFNwZW5jZXIgUGxjIHYgQ3VzdG9tcyBhbmQgRXhjaXNlIiwKICAgICAgICAiRmVsaXggUGFsYWNpb3MgZGUgbGEgVmlsbGEiLAogICAgICAgICJNYXJsZWFzaW5nIHYgTGEgQ29tbWVyY2lhbCBJbnRlcm5hY2lvbmFsZSBkZSBBbGltZW50YWNpb24iLAogICAgICAgICJXZXJuZXIgTWFuZ29sZCB2IFJcdTAwZmNkaWdlciBIZWxtIgogICAgXSwKICAgICJOVU1CRVIiOiAiNDYiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRoZSBIb21lIE9mZmljZSBoYWQgc291Z2h0IHRvIGV4Y2x1ZGUgYSBEdXRjaCB3b21hbiBvbiB0aGUgYmFzaXMgdGhhdCwgYmVpbmcgYSBTY2llbnRvbG9naXN0LCBzaGUgd2FzIHVuZGVzaXJhYmxlLiIKICAgIF0sCiAgICAiQUtBIjogIlZhbiBEdXluIiwKICAgICJDSVRBVElPTiI6ICJWYW4gRHV5biB2IEhvbWUgT2ZmaWNlIFsxOTc0XSBFQ1IgMTMzNyIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkZ1bmRhbWVudGFsIiwKICAgICAgICAiR0IiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy00MS83NCIsCiAgICAiQ0FURUdPUlkiOiAiRGlyZWN0aXZlcyAmbWRhc2g7IFZlcnRpY2FsIERpcmVjdCBFZmZlY3Qgb2YgRGlyZWN0aXZlcyIKfSwKewogICAgIllFQVIiOiAiMTk3OSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJBIHN0YXRlIG1heSBub3QgcmVseSBvbiBpdHMgZmFpbHVyZSB0byB0cmFuc3Bvc2UgYSBkaXJlY3RpdmUuIEZyZWVzdHlsaW5nIGV1cm9qdWRnZXMgZXZlbiBnbyBzbyBmYXIgYXMgdG8gZHJhdyBhIHBhcmFsbGVsIHdpdGggZXN0b3BwZWwuIiwKICAgICAgICAiWzIyXSAmIzgyMTY7Q29uc2VxdWVudGx5IGEgbWVtYmVyLVN0YXRlIHdoaWNoIGhhcyBub3QgYWRvcHRlZCB0aGUgaW1wbGVtZW50aW5nIG1lYXN1cmVzIHJlcXVpcmVkIGJ5IHRoZSBkaXJlY3RpdmUgaW4gdGhlIHByZXNjcmliZWQgcGVyaW9kcyBtYXkgbm90IHJlbHksIGFzIGFnYWluc3QgaW5kaXZpZHVhbHMsIG9uIGl0cyBvd24gZmFpbHVyZSB0byBwZXJmb3JtIHRoZSBvYmxpZ2F0aW9ucyB3aGljaCB0aGUgZGlyZWN0aXZlIGVudGFpbHMuPGJyPlsyM10gSXQgZm9sbG93cyB0aGF0IGEgbmF0aW9uYWwgY291cnQgPHNwYW4gY2xhc3M9XCJiZFwiPnJlcXVlc3RlZDwvc3Bhbj4gYnkgYSBwZXJzb24gWy4uLl0gPHNwYW4gY2xhc3M9XCJiZFwiPm5vdCB0byBhcHBseSBhIG5hdGlvbmFsIHByb3Zpc2lvbiBpbmNvbXBhdGlibGUgd2l0aCB0aGUgZGlyZWN0aXZlIG5vdCBpbmNvcnBvcmF0ZWQ8L3NwYW4+IFsuLi5dIDxzcGFuIGNsYXNzPVwiYmRcIj5tdXN0IHVwaG9sZCB0aGF0IHJlcXVlc3QgaWYgdGhlIG9ibGlnYXRpb24gaW4gcXVlc3Rpb24gaXMgdW5jb25kaXRpb25hbCBhbmQgc3VmZmljaWVudGx5IHByZWNpc2UuPC9zcGFuPiA8c3BhbiBjbGFzcz1cImlsY1wiPlZhbiBHZW5kIGNyaXRlcmlvbjwvc3Bhbj48YnI+WzI0XSBUaGVyZWZvcmUgWy4uLl0gPHNwYW4gY2xhc3M9XCJiZFwiPmFmdGVyIHRoZSBleHBpcmF0aW9uIG9mIHRoZSBwZXJpb2QgZml4ZWQgPC9zcGFuPmZvciB0aGUgaW1wbGVtZW50YXRpb24gb2YgYSBkaXJlY3RpdmUgPHNwYW4gY2xhc3M9XCJiZFwiPmEgbWVtYmVyLVN0YXRlIG1heSBub3QgYXBwbHkgaXRzIGludGVybmFsIGxhdzwvc3Bhbj4mbWRhc2g7ZXZlbiBpZiBpdCBpcyBwcm92aWRlZCB3aXRoIDxzcGFuIGNsYXNzPVwiYmRcIj5wZW5hbCBzYW5jdGlvbnM8L3NwYW4+Jm1kYXNoO3doaWNoIGhhcyBub3QgeWV0IGJlZW4gYWRhcHRlZCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIGRpcmVjdGl2ZSwgdG8gYSBwZXJzb24gd2hvIGhhcyBjb21wbGllZCB3aXRoIHRoZSByZXF1aXJlbWVudHMgb2YgdGhlIGRpcmVjdGl2ZS4mIzgyMTc7IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJEaXJlY3RpdmVzIiwKICAgICAgICAiVmVydGljYWwgRGlyZWN0IEVmZmVjdCBvZiBEaXJlY3RpdmVzIgogICAgXSwKICAgICJOQU1FIjogIlB1YmJsaWNvIE1pbmlzdGVybyB2IFJhdHRpIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJWYW4gRHV5biB2IEhvbWUgT2ZmaWNlIiwKICAgICAgICAiRm9zdGVyIHYgQnJpdGlzaCBHYXMiLAogICAgICAgICJNYXJzaGFsbCIsCiAgICAgICAgIldlcm5lciBNYW5nb2xkIHYgUlx1MDBmY2RpZ2VyIEhlbG0iLAogICAgICAgICJNYXJrcyBhbmQgU3BlbmNlciBQbGMgdiBDdXN0b21zIGFuZCBFeGNpc2UiLAogICAgICAgICJDSUEgU2VjdXJpdHkgdiBTaWduYWxzb24gYW5kIFNlY3VyaXRlbCIsCiAgICAgICAgIk1hcmxlYXNpbmcgdiBMYSBDb21tZXJjaWFsIEludGVybmFjaW9uYWxlIGRlIEFsaW1lbnRhY2lvbiIsCiAgICAgICAgIktcdTAwZmNrXHUwMGZja2RldmVjaSB2IFN3ZWRleCIsCiAgICAgICAgIlVuaWxldmVyIEl0YWxpYSB2IENlbnRyYWwgRm9vZHMiLAogICAgICAgICJWb24gQ29sc29uIHYgTGFuZCBOb3JkcmhlaW4tV2VzdGZhbGVuIiwKICAgICAgICAiRmVsaXggUGFsYWNpb3MgZGUgbGEgVmlsbGEiLAogICAgICAgICJBZGVuZWxlciIKICAgIF0sCiAgICAiTlVNQkVSIjogIjQ3IiwKICAgICJBS0EiOiAiUmF0dGkiLAogICAgIkNJVEFUSU9OIjogIlB1YmJsaWNvIE1pbmlzdGVybyB2IFJhdHRpIFsxOTc5XSBFQ1IgMTYyOSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkltcG9ydGFudCIsCiAgICAgICAgIklUIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMTQ4Lzc4IiwKICAgICJDQVRFR09SWSI6ICJEaXJlY3RpdmVzICZtZGFzaDsgVmVydGljYWwgRGlyZWN0IEVmZmVjdCBvZiBEaXJlY3RpdmVzIgp9LAp7CiAgICAiWUVBUiI6ICIxOTg2IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFsdGhvdWdoIHRoZXJlIGlzIGluZGVlZCBubyBob3Jpem9udGFsIGRpcmVjdCBlZmZlY3QgZm9yIGRpcmVjdGl2ZXMsIHRoZSBzdGF0ZSBhcyBlbXBsb3llciBtdXN0IGJlIGNvbnNpZGVyZWQgbGlhYmxlIHRvIGRpcmVjdCBlZmZlY3QuIgogICAgXSwKICAgICJMSU5LIjogWwogICAgICAgICJFcXVhbCBUcmVhdG1lbnQgRGlyZWN0aXZlIDE5NzYgaHR0cDovL2V1ci1sZXguZXVyb3BhLmV1L0xleFVyaVNlcnYvTGV4VXJpU2Vydi5kbz91cmk9Q0VMRVg6MzE5NzZMMDIwNzpFTjpIVE1MIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJEaXJlY3RpdmVzIiwKICAgICAgICAiSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uIiwKICAgICAgICAiVmVydGljYWwgRGlyZWN0IEVmZmVjdCBvZiBEaXJlY3RpdmVzIgogICAgXSwKICAgICJOQU1FIjogIk1hcnNoYWxsIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJGb3N0ZXIgdiBCcml0aXNoIEdhcyIsCiAgICAgICAgIkFkZW5lbGVyIiwKICAgICAgICAiRmFjY2luaSBEb3JpIiwKICAgICAgICAiVmFuIER1eW4gdiBIb21lIE9mZmljZSIsCiAgICAgICAgIkNJQSBTZWN1cml0eSB2IFNpZ25hbHNvbiBhbmQgU2VjdXJpdGVsIiwKICAgICAgICAiVW5pbGV2ZXIgSXRhbGlhIHYgQ2VudHJhbCBGb29kcyIsCiAgICAgICAgIlB1YmJsaWNvIE1pbmlzdGVybyB2IFJhdHRpIiwKICAgICAgICAiRmVsaXggUGFsYWNpb3MgZGUgbGEgVmlsbGEiLAogICAgICAgICJLXHUwMGZja1x1MDBmY2tkZXZlY2kgdiBTd2VkZXgiLAogICAgICAgICJXZXJuZXIgTWFuZ29sZCB2IFJcdTAwZmNkaWdlciBIZWxtIiwKICAgICAgICAiTWFybGVhc2luZyB2IExhIENvbW1lcmNpYWwgSW50ZXJuYWNpb25hbGUgZGUgQWxpbWVudGFjaW9uIiwKICAgICAgICAiTWFya3MgYW5kIFNwZW5jZXIgUGxjIHYgQ3VzdG9tcyBhbmQgRXhjaXNlIgogICAgXSwKICAgICJOVU1CRVIiOiAiNDgiLAogICAgIldJS0lMSU5LIjogWwogICAgICAgICJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NYXJzaGFsbF92X1NvdXRoYW1wdG9uX0hlYWx0aF9BdXRob3JpdHkiCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkZvcmNlZCB0byByZXRpcmUgZml2ZSB5ZWFycyBlYXJsaWVyIHRoYW4gaGFkIHNoZSBiZWVuIGEgbWFuLCB0aGUgY2xhaW1hbnQgc291Z2h0IHRvIHJlbHkgb24gdGhlIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJNYXJzaGFsbCB2IFNvdXRoYW1wdG9uIGFuZCBTVyBIYW1wc2hpcmUgQUhBIChubyAxKSBbMTk4Nl0gRUNSIDUyMyIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkZ1bmRhbWVudGFsIiwKICAgICAgICAiR0IiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0xNTIvODQiLAogICAgIkNBVEVHT1JZIjogIkRpcmVjdGl2ZXMgJm1kYXNoOyBKdXJpc2RpY3Rpb25hbCBFeHBhbnNpb24gJm1kYXNoOyBWZXJ0aWNhbCBEaXJlY3QgRWZmZWN0IG9mIERpcmVjdGl2ZXMiCn0sCnsKICAgICJZRUFSIjogIjE5OTQiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQWx0aG91Z2ggdGhlcmUgaXMgbm8gaG9yaXpvbnRhbCBkaXJlY3QgZWZmZWN0IGZvciBkaXJlY3RpdmVzIChldmVuIGlmIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5WYW4gR2VuZDwvc3Bhbj4gY3JpdGVyaWEgYXJlIG1ldCksIG5hdGlvbmFsIGNvdXJ0cyBtdXN0IG11c3QgaW50ZXJwcmV0IGV4aXN0aW5nIGxhdyBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhlIGRpcmVjdGl2ZS4iLAogICAgICAgICIzMC4gJiM4MjE2O1suLi5dIGluIHRoZSBhYnNlbmNlIG9mIG1lYXN1cmVzIHRyYW5zcG9zaW5nIHRoZSBkaXJlY3RpdmUgd2l0aGluIHRoZSBwcmVzY3JpYmVkIHRpbWUtbGltaXQgY29uc3VtZXJzIGNhbm5vdCBkZXJpdmUgZnJvbSB0aGUgZGlyZWN0aXZlIGl0c2VsZiBhIHJpZ2h0IFsuLi5dLiBIb3dldmVyLCB3aGVuIGFwcGx5aW5nIHByb3Zpc2lvbnMgb2YgbmF0aW9uYWwgbGF3LCB3aGV0aGVyIGFkb3B0ZWQgYmVmb3JlIG9yIGFmdGVyIHRoZSBkaXJlY3RpdmUsIHRoZSBuYXRpb25hbCBjb3VydCBtdXN0IGludGVycHJldCB0aGVtIGFzIGZhciBhcyBwb3NzaWJsZSBpbiB0aGUgbGlnaHQgb2YgdGhlIHdvcmRpbmcgYW5kIHB1cnBvc2Ugb2YgdGhlIGRpcmVjdGl2ZS4mIzgyMTc7IgogICAgXSwKICAgICJMSU5LIjogWwogICAgICAgICJBLUcgTGVueidzIGRpc3NlbnRpbmcgb3BpbmlvbiBodHRwOi8vY3VyaWEuZXVyb3BhLmV1L2p1cmlzL3Nob3dQZGYuanNmP3RleHQ9JmRvY2lkPTk4MzQ3JnBhZ2VJbmRleD0wJmRvY2xhbmc9ZW4mbW9kZT1yZXEmZGlyPSZvY2M9Zmlyc3QmcGFydD0xJmNpZD04NjE4ODIiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkRpcmVjdGl2ZXMiLAogICAgICAgICJKdXJpc2RpY3Rpb25hbCBFeHBhbnNpb24iLAogICAgICAgICJIb3Jpem9udGFsIERpcmVjdCBFZmZlY3Qgb2YgRGlyZWN0aXZlcyIKICAgIF0sCiAgICAiTkFNRSI6ICJGYWNjaW5pIERvcmkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNJQSBTZWN1cml0eSB2IFNpZ25hbHNvbiBhbmQgU2VjdXJpdGVsIiwKICAgICAgICAiS1x1MDBmY2tcdTAwZmNrZGV2ZWNpIHYgU3dlZGV4IiwKICAgICAgICAiVW5pbGV2ZXIgSXRhbGlhIHYgQ2VudHJhbCBGb29kcyIsCiAgICAgICAgIlZvbiBDb2xzb24gdiBMYW5kIE5vcmRyaGVpbi1XZXN0ZmFsZW4iLAogICAgICAgICJGb3N0ZXIgdiBCcml0aXNoIEdhcyIsCiAgICAgICAgIkZlbGl4IFBhbGFjaW9zIGRlIGxhIFZpbGxhIiwKICAgICAgICAiTWFybGVhc2luZyB2IExhIENvbW1lcmNpYWwgSW50ZXJuYWNpb25hbGUgZGUgQWxpbWVudGFjaW9uIiwKICAgICAgICAiTWFyc2hhbGwiLAogICAgICAgICJNYXJrcyBhbmQgU3BlbmNlciBQbGMgdiBDdXN0b21zIGFuZCBFeGNpc2UiLAogICAgICAgICJXZXJuZXIgTWFuZ29sZCB2IFJcdTAwZmNkaWdlciBIZWxtIiwKICAgICAgICAiQWRlbmVsZXIiLAogICAgICAgICJQdWJibGljbyBNaW5pc3Rlcm8gdiBSYXR0aSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjQ5IiwKICAgICJXSUtJTElOSyI6IFsKICAgICAgICAiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmFjY2luaV9Eb3JpX3ZfUmVjcmViX1NybCIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSB3b21hbiB3YXMgPHNwYW4gY2xhc3M9XCJpdFwiPnNvbGQgYW4gRW5nbGlzaCBjb3Vyc2Ugd2hpbHN0IHdhaXRpbmcgZm9yIGEgdHJhaW48L3NwYW4+IGluIE1pbGFuLiBTaGUgd2FzIHN3aW5kbGVkJm1kYXNoO2J1dCBJdGFseSBoYWQgbm90IHlldCBpbXBsZW1lbnRlZCB0aGUgRGlyZWN0aXZlIG9uIERvb3JzdGVwIFNlbGxpbmcsIHdoaWNoIGluIHN1Y2ggY2lyY3Vtc3RhbmNlcyByZXF1aXJlZCBhIGNvb2xpbmcgb2ZmIHBlcmlvZCBvZiAyOCBkYXlzLiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiRmFjY2luaSBEb3JpIFsxOTk0XSBFQ1IgSS0zMzI1IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRnVuZGFtZW50YWwiLAogICAgICAgICJJVCIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTkxLzkyIiwKICAgICJDQVRFR09SWSI6ICJEaXJlY3RpdmVzICZtZGFzaDsgSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uICZtZGFzaDsgSG9yaXpvbnRhbCBEaXJlY3QgRWZmZWN0IG9mIERpcmVjdGl2ZXMiCn0sCnsKICAgICJZRUFSIjogIjE5OTAiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQW55IGVtYW5hdGlvbiBvZiB0aGUgc3RhdGUgaXMgc3ViamVjdCB0byB2ZXJ0aWNhbCBkaXJlY3QgZWZmZWN0LCBhcyBsb25nIGFzIGl0IGhhcyBiZWVuIG1hZGUgcmVzcG9uc2libGUgZm9yIHByb3ZpZGluZyBhIHB1YmxpYyBzZXJ2aWNlIHVuZGVyIHRoZSBjb250cm9sIG9mIHRoZSBzdGF0ZS4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkRpcmVjdGl2ZXMiLAogICAgICAgICJKdXJpc2RpY3Rpb25hbCBFeHBhbnNpb24iLAogICAgICAgICJWZXJ0aWNhbCBEaXJlY3QgRWZmZWN0IG9mIERpcmVjdGl2ZXMiCiAgICBdLAogICAgIk5BTUUiOiAiRm9zdGVyIHYgQnJpdGlzaCBHYXMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIk1hcnNoYWxsIiwKICAgICAgICAiRmFjY2luaSBEb3JpIiwKICAgICAgICAiVW5pbGV2ZXIgSXRhbGlhIHYgQ2VudHJhbCBGb29kcyIsCiAgICAgICAgIk1hcmtzIGFuZCBTcGVuY2VyIFBsYyB2IEN1c3RvbXMgYW5kIEV4Y2lzZSIsCiAgICAgICAgIlZvbiBDb2xzb24gdiBMYW5kIE5vcmRyaGVpbi1XZXN0ZmFsZW4iLAogICAgICAgICJBZGVuZWxlciIsCiAgICAgICAgIkNJQSBTZWN1cml0eSB2IFNpZ25hbHNvbiBhbmQgU2VjdXJpdGVsIiwKICAgICAgICAiV2VybmVyIE1hbmdvbGQgdiBSXHUwMGZjZGlnZXIgSGVsbSIsCiAgICAgICAgIktcdTAwZmNrXHUwMGZja2RldmVjaSB2IFN3ZWRleCIsCiAgICAgICAgIkZlbGl4IFBhbGFjaW9zIGRlIGxhIFZpbGxhIiwKICAgICAgICAiUHViYmxpY28gTWluaXN0ZXJvIHYgUmF0dGkiLAogICAgICAgICJNYXJsZWFzaW5nIHYgTGEgQ29tbWVyY2lhbCBJbnRlcm5hY2lvbmFsZSBkZSBBbGltZW50YWNpb24iCiAgICBdLAogICAgIk5VTUJFUiI6ICI1MCIsCiAgICAiV0lLSUxJTksiOiBbCiAgICAgICAgIkVtYW5hdGlvbiBvZiB0aGUgU3RhdGUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1hbmF0aW9uX29mX3RoZV9zdGF0ZSIsCiAgICAgICAgIkZvc3RlciBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Gb3N0ZXJfdl9Ccml0aXNoX0dhc19wbGMiCiAgICBdLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkNvdWxkIGFuIHVuaW1wbGVtZW50ZWQgZGlyZWN0aXZlIGJlIHJlbGllZCB1cG9uIGFnYWluc3QgPHNwYW4gY2xhc3M9XCJiZFwiPmEgY29tcGFueTwvc3Bhbj4sICB3aGljaCB3YXMgPHNwYW4gY2xhc3M9XCJiZFwiPnByZXZpb3VzbHk8L3NwYW4+IG5hdGlvbmFsbHktb3duZWQ/IgogICAgXSwKICAgICJBS0EiOiAiRm9zdGVyIiwKICAgICJDSVRBVElPTiI6ICJGb3N0ZXIgYW5kIE90aGVycyB2IEJyaXRpc2ggR2FzIFBsYyBbMTk5MF0gRUNSIEktMzMxMyIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkltcG9ydGFudCIsCiAgICAgICAgIkdCIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMTg4Lzg5IiwKICAgICJDQVRFR09SWSI6ICJEaXJlY3RpdmVzICZtZGFzaDsgSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uICZtZGFzaDsgVmVydGljYWwgRGlyZWN0IEVmZmVjdCBvZiBEaXJlY3RpdmVzIgp9LAp7CiAgICAiWUVBUiI6ICIxOTg0IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkRpcmVjdGl2ZXMiLAogICAgICAgICJKdXJpc2RpY3Rpb25hbCBFeHBhbnNpb24iLAogICAgICAgICJJbmRpcmVjdCBFZmZlY3Qgb2YgRGlyZWN0aXZlcyIKICAgIF0sCiAgICAiTkFNRSI6ICJWb24gQ29sc29uIHYgTGFuZCBOb3JkcmhlaW4tV2VzdGZhbGVuIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNYXJrcyBhbmQgU3BlbmNlciBQbGMgdiBDdXN0b21zIGFuZCBFeGNpc2UiLAogICAgICAgICJNYXJsZWFzaW5nIHYgTGEgQ29tbWVyY2lhbCBJbnRlcm5hY2lvbmFsZSBkZSBBbGltZW50YWNpb24iLAogICAgICAgICJDSUEgU2VjdXJpdHkgdiBTaWduYWxzb24gYW5kIFNlY3VyaXRlbCIsCiAgICAgICAgIkFkZW5lbGVyIiwKICAgICAgICAiV2VybmVyIE1hbmdvbGQgdiBSXHUwMGZjZGlnZXIgSGVsbSIsCiAgICAgICAgIlVuaWxldmVyIEl0YWxpYSB2IENlbnRyYWwgRm9vZHMiLAogICAgICAgICJNYXJzaGFsbCIsCiAgICAgICAgIkZhY2NpbmkgRG9yaSIsCiAgICAgICAgIktcdTAwZmNrXHUwMGZja2RldmVjaSB2IFN3ZWRleCIsCiAgICAgICAgIkZvc3RlciB2IEJyaXRpc2ggR2FzIiwKICAgICAgICAiRmVsaXggUGFsYWNpb3MgZGUgbGEgVmlsbGEiLAogICAgICAgICJQdWJibGljbyBNaW5pc3Rlcm8gdiBSYXR0aSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjUxIiwKICAgICJTVU1NQVJZIjogW10sCiAgICAiQUtBIjogIlZvbiBDb2xzb24iLAogICAgIkNJVEFUSU9OIjogIlZvbiBDb2xzb24gdiBMYW5kIE5vcmRyaGVpbi1XZXN0ZmFsZW4gWzE5ODRdIEVDUiAxODkxIiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRnVuZGFtZW50YWwiLAogICAgICAgICJERSIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTE0LzgzIiwKICAgICJDQVRFR09SWSI6ICJEaXJlY3RpdmVzICZtZGFzaDsgSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uICZtZGFzaDsgSW5kaXJlY3QgRWZmZWN0IG9mIERpcmVjdGl2ZXMiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkRpcmVjdGl2ZXMiLAogICAgICAgICJKdXJpc2RpY3Rpb25hbCBFeHBhbnNpb24iLAogICAgICAgICJJbmRpcmVjdCBFZmZlY3Qgb2YgRGlyZWN0aXZlcyIKICAgIF0sCiAgICAiTkFNRSI6ICJNYXJsZWFzaW5nIHYgTGEgQ29tbWVyY2lhbCBJbnRlcm5hY2lvbmFsZSBkZSBBbGltZW50YWNpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIk1hcmtzIGFuZCBTcGVuY2VyIFBsYyB2IEN1c3RvbXMgYW5kIEV4Y2lzZSIsCiAgICAgICAgIlZvbiBDb2xzb24gdiBMYW5kIE5vcmRyaGVpbi1XZXN0ZmFsZW4iLAogICAgICAgICJGZWxpeCBQYWxhY2lvcyBkZSBsYSBWaWxsYSIsCiAgICAgICAgIkFkZW5lbGVyIiwKICAgICAgICAiVW5pbGV2ZXIgSXRhbGlhIHYgQ2VudHJhbCBGb29kcyIsCiAgICAgICAgIkZvc3RlciB2IEJyaXRpc2ggR2FzIiwKICAgICAgICAiV2VybmVyIE1hbmdvbGQgdiBSXHUwMGZjZGlnZXIgSGVsbSIsCiAgICAgICAgIkZhY2NpbmkgRG9yaSIsCiAgICAgICAgIkNJQSBTZWN1cml0eSB2IFNpZ25hbHNvbiBhbmQgU2VjdXJpdGVsIiwKICAgICAgICAiTWFyc2hhbGwiLAogICAgICAgICJLXHUwMGZja1x1MDBmY2tkZXZlY2kgdiBTd2VkZXgiLAogICAgICAgICJWYW4gRHV5biB2IEhvbWUgT2ZmaWNlIgogICAgXSwKICAgICJTVU1NQVJZIjogW10sCiAgICAiQ0lUQUlUT04iOiAiTWFybGVhc2luZyB2IExhIENvbW1lcmNpYWwgSW50ZXJuYWNpb25hbGUgZGUgQWxpbWVudGFjaW9uIFsxOTkwXSBFQ1IgSS00MTM1IiwKICAgICJBS0EiOiAiTWFybHNlYXNpbmciLAogICAgIkZMQUdTIjogWwogICAgICAgICJGdW5kYW1lbnRhbCIsCiAgICAgICAgIkVTIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMTA2Lzg5IiwKICAgICJDQVRFR09SWSI6ICJEaXJlY3RpdmVzICZtZGFzaDsgSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uICZtZGFzaDsgSW5kaXJlY3QgRWZmZWN0IG9mIERpcmVjdGl2ZXMiLAogICAgIk5VTUJFUiI6ICI1MiIKfSwKewogICAgIllFQVIiOiAiMjAwMiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJEaXJlY3RpdmVzIiwKICAgICAgICAiSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uIiwKICAgICAgICAiSW5kaXJlY3QgRWZmZWN0IG9mIERpcmVjdGl2ZXMiCiAgICBdLAogICAgIk5BTUUiOiAiTWFya3MgYW5kIFNwZW5jZXIgUGxjIHYgQ3VzdG9tcyBhbmQgRXhjaXNlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNYXJsZWFzaW5nIHYgTGEgQ29tbWVyY2lhbCBJbnRlcm5hY2lvbmFsZSBkZSBBbGltZW50YWNpb24iLAogICAgICAgICJWb24gQ29sc29uIHYgTGFuZCBOb3JkcmhlaW4tV2VzdGZhbGVuIiwKICAgICAgICAiV2VybmVyIE1hbmdvbGQgdiBSXHUwMGZjZGlnZXIgSGVsbSIsCiAgICAgICAgIlVuaWxldmVyIEl0YWxpYSB2IENlbnRyYWwgRm9vZHMiLAogICAgICAgICJGb3N0ZXIgdiBCcml0aXNoIEdhcyIsCiAgICAgICAgIktcdTAwZmNrXHUwMGZja2RldmVjaSB2IFN3ZWRleCIsCiAgICAgICAgIkZhY2NpbmkgRG9yaSIsCiAgICAgICAgIkFkZW5lbGVyIiwKICAgICAgICAiTWFyc2hhbGwiLAogICAgICAgICJGZWxpeCBQYWxhY2lvcyBkZSBsYSBWaWxsYSIsCiAgICAgICAgIkNJQSBTZWN1cml0eSB2IFNpZ25hbHNvbiBhbmQgU2VjdXJpdGVsIiwKICAgICAgICAiVmFuIER1eW4gdiBIb21lIE9mZmljZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjUzIiwKICAgICJTVU1NQVJZIjogW10sCiAgICAiQUtBIjogIk1hcmtzIGFuZCBTcGVuY2VyIiwKICAgICJDSVRBVElPTiI6ICJNYXJrcyBhbmQgU3BlbmNlciBQbGMgdiBDdXN0b21zIGFuZCBFeGNpc2UgWzIwMDJdIEVDUiBJLTYzMjUiLAogICAgIkZMQUdTIjogWwogICAgICAgICJHQiIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTYyLzAwIiwKICAgICJDQVRFR09SWSI6ICJEaXJlY3RpdmVzICZtZGFzaDsgSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uICZtZGFzaDsgSW5kaXJlY3QgRWZmZWN0IG9mIERpcmVjdGl2ZXMiCn0sCnsKICAgICJZRUFSIjogIjE5OTYiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRGlyZWN0aXZlcyIsCiAgICAgICAgIkp1cmlzZGljdGlvbmFsIEV4cGFuc2lvbiIsCiAgICAgICAgIkluY2lkZW50YWwgRWZmZWN0IG9mIERpcmVjdGl2ZXMiCiAgICBdLAogICAgIk5BTUUiOiAiQ0lBIFNlY3VyaXR5IHYgU2lnbmFsc29uIGFuZCBTZWN1cml0ZWwiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlVuaWxldmVyIEl0YWxpYSB2IENlbnRyYWwgRm9vZHMiLAogICAgICAgICJGYWNjaW5pIERvcmkiLAogICAgICAgICJNYXJrcyBhbmQgU3BlbmNlciBQbGMgdiBDdXN0b21zIGFuZCBFeGNpc2UiLAogICAgICAgICJNYXJzaGFsbCIsCiAgICAgICAgIlZvbiBDb2xzb24gdiBMYW5kIE5vcmRyaGVpbi1XZXN0ZmFsZW4iLAogICAgICAgICJNYXJsZWFzaW5nIHYgTGEgQ29tbWVyY2lhbCBJbnRlcm5hY2lvbmFsZSBkZSBBbGltZW50YWNpb24iLAogICAgICAgICJBZGVuZWxlciIsCiAgICAgICAgIktcdTAwZmNrXHUwMGZja2RldmVjaSB2IFN3ZWRleCIsCiAgICAgICAgIkZlbGl4IFBhbGFjaW9zIGRlIGxhIFZpbGxhIiwKICAgICAgICAiRm9zdGVyIHYgQnJpdGlzaCBHYXMiLAogICAgICAgICJXZXJuZXIgTWFuZ29sZCB2IFJcdTAwZmNkaWdlciBIZWxtIiwKICAgICAgICAiUHViYmxpY28gTWluaXN0ZXJvIHYgUmF0dGkiCiAgICBdLAogICAgIk5VTUJFUiI6ICI1NCIsCiAgICAiU1VNTUFSWSI6IFtdLAogICAgIkFLQSI6ICJTaWduYWxzb24iLAogICAgIkNJVEFUSU9OIjogIkNJQSBTZWN1cml0eSB2IFNpZ25hbHNvbiBhbmQgU2VjdXJpdGVsIFsxOTk2XSBFQ1IgSS0yMjAxIiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMTk0Lzk0IiwKICAgICJDQVRFR09SWSI6ICJEaXJlY3RpdmVzICZtZGFzaDsgSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uICZtZGFzaDsgSW5jaWRlbnRhbCBFZmZlY3Qgb2YgRGlyZWN0aXZlcyIKfSwKewogICAgIllFQVIiOiAiMjAwMCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJEaXJlY3RpdmVzIiwKICAgICAgICAiSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uIiwKICAgICAgICAiSW5jaWRlbnRhbCBFZmZlY3Qgb2YgRGlyZWN0aXZlcyIKICAgIF0sCiAgICAiTkFNRSI6ICJVbmlsZXZlciBJdGFsaWEgdiBDZW50cmFsIEZvb2RzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDSUEgU2VjdXJpdHkgdiBTaWduYWxzb24gYW5kIFNlY3VyaXRlbCIsCiAgICAgICAgIldlcm5lciBNYW5nb2xkIHYgUlx1MDBmY2RpZ2VyIEhlbG0iLAogICAgICAgICJNYXJzaGFsbCIsCiAgICAgICAgIkFkZW5lbGVyIiwKICAgICAgICAiVm9uIENvbHNvbiB2IExhbmQgTm9yZHJoZWluLVdlc3RmYWxlbiIsCiAgICAgICAgIkZlbGl4IFBhbGFjaW9zIGRlIGxhIFZpbGxhIiwKICAgICAgICAiTWFybGVhc2luZyB2IExhIENvbW1lcmNpYWwgSW50ZXJuYWNpb25hbGUgZGUgQWxpbWVudGFjaW9uIiwKICAgICAgICAiS1x1MDBmY2tcdTAwZmNrZGV2ZWNpIHYgU3dlZGV4IiwKICAgICAgICAiRm9zdGVyIHYgQnJpdGlzaCBHYXMiLAogICAgICAgICJGYWNjaW5pIERvcmkiLAogICAgICAgICJNYXJrcyBhbmQgU3BlbmNlciBQbGMgdiBDdXN0b21zIGFuZCBFeGNpc2UiLAogICAgICAgICJQdWJibGljbyBNaW5pc3Rlcm8gdiBSYXR0aSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjU1IiwKICAgICJTVU1NQVJZIjogW10sCiAgICAiQUtBIjogIlVuaWxldmVyIEl0YWxpYSIsCiAgICAiQ0lUQVRJT04iOiAiVW5pbGV2ZXIgSXRhbGlhIHYgQ2VudHJhbCBGb29kcyBbMjAwMF0gRUNSIEktNzUzNSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIklUIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtNDQzLzk4IiwKICAgICJDQVRFR09SWSI6ICJEaXJlY3RpdmVzICZtZGFzaDsgSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uICZtZGFzaDsgSW5jaWRlbnRhbCBFZmZlY3Qgb2YgRGlyZWN0aXZlcyIKfSwKewogICAgIllFQVIiOiAiMjAwNSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJEaXJlY3RpdmVzIiwKICAgICAgICAiSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uIiwKICAgICAgICAiRGlyZWN0aXZlcyBhbmQgR2VuZXJhbCBQcmluY2lwbGVzIgogICAgXSwKICAgICJOQU1FIjogIldlcm5lciBNYW5nb2xkIHYgUlx1MDBmY2RpZ2VyIEhlbG0iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIktcdTAwZmNrXHUwMGZja2RldmVjaSB2IFN3ZWRleCIsCiAgICAgICAgIkZlbGl4IFBhbGFjaW9zIGRlIGxhIFZpbGxhIiwKICAgICAgICAiTWFybGVhc2luZyB2IExhIENvbW1lcmNpYWwgSW50ZXJuYWNpb25hbGUgZGUgQWxpbWVudGFjaW9uIiwKICAgICAgICAiVW5pbGV2ZXIgSXRhbGlhIHYgQ2VudHJhbCBGb29kcyIsCiAgICAgICAgIkZhY2NpbmkgRG9yaSIsCiAgICAgICAgIkNJQSBTZWN1cml0eSB2IFNpZ25hbHNvbiBhbmQgU2VjdXJpdGVsIiwKICAgICAgICAiVm9uIENvbHNvbiB2IExhbmQgTm9yZHJoZWluLVdlc3RmYWxlbiIsCiAgICAgICAgIkZvc3RlciB2IEJyaXRpc2ggR2FzIiwKICAgICAgICAiTWFyc2hhbGwiLAogICAgICAgICJBZGVuZWxlciIsCiAgICAgICAgIk1hcmtzIGFuZCBTcGVuY2VyIFBsYyB2IEN1c3RvbXMgYW5kIEV4Y2lzZSIsCiAgICAgICAgIlB1YmJsaWNvIE1pbmlzdGVybyB2IFJhdHRpIgogICAgXSwKICAgICJOVU1CRVIiOiAiNTYiLAogICAgIlNVTU1BUlkiOiBbXSwKICAgICJBS0EiOiAiTWFuZ29sZCIsCiAgICAiQ0lUQVRJT04iOiAiV2VybmVyIE1hbmdvbGQgdiBSXHUwMGZjZGlnZXIgSGVsbSBbMjAwNV0gRUNSIEktOTk4MSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkRFIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMTQ0LzA0IiwKICAgICJDQVRFR09SWSI6ICJEaXJlY3RpdmVzICZtZGFzaDsgSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uICZtZGFzaDsgRGlyZWN0aXZlcyBhbmQgR2VuZXJhbCBQcmluY2lwbGVzIgp9LAp7CiAgICAiWUVBUiI6ICIyMDA3IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkxJTksiOiBbCiAgICAgICAgIkFHIE1hemFrJ3Mgb3BpbmlvbiBodHRwOi8vYmxhaCIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiRmVsaXggUGFsYWNpb3MgZGUgbGEgVmlsbGEgWzIwMDddIEVDUiBJLTg1MzEiLAogICAgIk5BTUUiOiAiRmVsaXggUGFsYWNpb3MgZGUgbGEgVmlsbGEiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIktcdTAwZmNrXHUwMGZja2RldmVjaSB2IFN3ZWRleCIsCiAgICAgICAgIldlcm5lciBNYW5nb2xkIHYgUlx1MDBmY2RpZ2VyIEhlbG0iLAogICAgICAgICJNYXJrcyBhbmQgU3BlbmNlciBQbGMgdiBDdXN0b21zIGFuZCBFeGNpc2UiLAogICAgICAgICJVbmlsZXZlciBJdGFsaWEgdiBDZW50cmFsIEZvb2RzIiwKICAgICAgICAiTWFyc2hhbGwiLAogICAgICAgICJNYXJsZWFzaW5nIHYgTGEgQ29tbWVyY2lhbCBJbnRlcm5hY2lvbmFsZSBkZSBBbGltZW50YWNpb24iLAogICAgICAgICJGb3N0ZXIgdiBCcml0aXNoIEdhcyIsCiAgICAgICAgIkZhY2NpbmkgRG9yaSIsCiAgICAgICAgIkFkZW5lbGVyIiwKICAgICAgICAiQ0lBIFNlY3VyaXR5IHYgU2lnbmFsc29uIGFuZCBTZWN1cml0ZWwiLAogICAgICAgICJWb24gQ29sc29uIHYgTGFuZCBOb3JkcmhlaW4tV2VzdGZhbGVuIiwKICAgICAgICAiVmFuIER1eW4gdiBIb21lIE9mZmljZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjU3IiwKICAgICJTVU1NQVJZIjogW10sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRGlyZWN0aXZlcyIsCiAgICAgICAgIkp1cmlzZGljdGlvbmFsIEV4cGFuc2lvbiIsCiAgICAgICAgIkRpcmVjdGl2ZXMgYW5kIEdlbmVyYWwgUHJpbmNpcGxlcyIKICAgIF0sCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIiIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTQ0MS8wNSIsCiAgICAiQ0FURUdPUlkiOiAiRGlyZWN0aXZlcyAmbWRhc2g7IEp1cmlzZGljdGlvbmFsIEV4cGFuc2lvbiAmbWRhc2g7IERpcmVjdGl2ZXMgYW5kIEdlbmVyYWwgUHJpbmNpcGxlcyIKfSwKewogICAgIllFQVIiOiAiMjAwOSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJEaXJlY3RpdmVzIiwKICAgICAgICAiSnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uIiwKICAgICAgICAiRGlyZWN0aXZlcyBhbmQgR2VuZXJhbCBQcmluY2lwbGVzIgogICAgXSwKICAgICJOQU1FIjogIktcdTAwZmNrXHUwMGZja2RldmVjaSB2IFN3ZWRleCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRmVsaXggUGFsYWNpb3MgZGUgbGEgVmlsbGEiLAogICAgICAgICJXZXJuZXIgTWFuZ29sZCB2IFJcdTAwZmNkaWdlciBIZWxtIiwKICAgICAgICAiRmFjY2luaSBEb3JpIiwKICAgICAgICAiQ0lBIFNlY3VyaXR5IHYgU2lnbmFsc29uIGFuZCBTZWN1cml0ZWwiLAogICAgICAgICJWb24gQ29sc29uIHYgTGFuZCBOb3JkcmhlaW4tV2VzdGZhbGVuIiwKICAgICAgICAiTWFybGVhc2luZyB2IExhIENvbW1lcmNpYWwgSW50ZXJuYWNpb25hbGUgZGUgQWxpbWVudGFjaW9uIiwKICAgICAgICAiVW5pbGV2ZXIgSXRhbGlhIHYgQ2VudHJhbCBGb29kcyIsCiAgICAgICAgIkFkZW5lbGVyIiwKICAgICAgICAiTWFyc2hhbGwiLAogICAgICAgICJNYXJrcyBhbmQgU3BlbmNlciBQbGMgdiBDdXN0b21zIGFuZCBFeGNpc2UiLAogICAgICAgICJGb3N0ZXIgdiBCcml0aXNoIEdhcyIsCiAgICAgICAgIlB1YmJsaWNvIE1pbmlzdGVybyB2IFJhdHRpIgogICAgXSwKICAgICJOVU1CRVIiOiAiNTgiLAogICAgIlNVTU1BUlkiOiBbXSwKICAgICJBS0EiOiAiS1x1MDBmY2tcdTAwZmNrZGV2ZWNpIiwKICAgICJDSVRBVElPTiI6ICJLXHUwMGZja1x1MDBmY2tkZXZlY2kgdiBTd2VkZXggWzIwMDldIEVDUiBJLTg5NjMiLAogICAgIkZMQUdTIjogWwogICAgICAgICIiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy01NTUvMDciLAogICAgIkNBVEVHT1JZIjogIkRpcmVjdGl2ZXMgJm1kYXNoOyBKdXJpc2RpY3Rpb25hbCBFeHBhbnNpb24gJm1kYXNoOyBEaXJlY3RpdmVzIGFuZCBHZW5lcmFsIFByaW5jaXBsZXMiCn0sCnsKICAgICJZRUFSIjogIjIwMDgiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiRVUgSW5zdGl0dXRpb25zIGFyZSBib3VuZCB0byB1cGhvbGQgSHVtYW4gUmlnaHRzIGFzIHByb3RlY3RlZCBieSBFVSBsYXciCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkh1bWFuIFJpZ2h0cyIsCiAgICAgICAgIkluaXRpYWwgQXBwcm9hY2ggdG8gSHVtYW4gUmlnaHRzIiwKICAgICAgICAiSHVtYW4gUmlnaHRzIiwKICAgICAgICAiQ2hhbmdlIG9mIERpcmVjdGlvbiIsCiAgICAgICAgIkh1bWFuIFJpZ2h0cyIsCiAgICAgICAgIkNoYW5nZSBvZiBEaXJlY3Rpb24iLAogICAgICAgICJIdW1hbiBSaWdodHMiLAogICAgICAgICJXaG8gaXMgQm91bmQiCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkpvaW5lZCBDYXNlcyBLYWRpIGFuZCBBbCBCYXJha2FhdCBbMjAwOF0gRUNSIEktNjM1MSIsCiAgICAiTkFNRSI6ICIoSm9pbmVkKSBLYWRpIGFuZCBBbCBCYXJha2FhdCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiTWVhbmluZyBvZiBXb3JrZXIgaW4gQXJ0IDQ1IiwKICAgICAgICAiSGFybW9uaXphdGlvbiIsCiAgICAgICAgIlNlY29uZGFyeSBMZWdpc2xhdGlvbiIsCiAgICAgICAgIlJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMiLAogICAgICAgICJJbnRlcm5hbCBNYXJrZXQgLSBEaXNjdXNzaW9uIiwKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSUlJIC0gQWNjZXNzaW9uIHRvIHRoZSBQcmVzZW50IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBXb3JrZXJzIC0gU3VtbWFyeSIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IEkgLSBQYXJpcyB0byBNZXJnZXIiLAogICAgICAgICJEaXJlY3RpdmVzIiwKICAgICAgICAiRVUgQ2l0aXplbnNoaXAiLAogICAgICAgICJFZmZlY3RpdmVuZXNzIGFuZCBTY29wZSBvZiBBcnQgNDUiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQiCiAgICBdLAogICAgIk5VTUJFUiI6ICI1OSIsCiAgICAiQUtBIjogIkthZGkgSSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkZ1bmRhbWVudGFsIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJIdW1hbiBSaWdodHMgJm1kYXNoOyBJbml0aWFsIEFwcHJvYWNoIHRvIEh1bWFuIFJpZ2h0cyAvIEh1bWFuIFJpZ2h0cyAmbWRhc2g7IENoYW5nZSBvZiBEaXJlY3Rpb24gLyBIdW1hbiBSaWdodHMgJm1kYXNoOyBDaGFuZ2Ugb2YgRGlyZWN0aW9uIC8gSHVtYW4gUmlnaHRzICZtZGFzaDsgV2hvIGlzIEJvdW5kIiwKICAgICJDQVNFTlVNIjogIkMtNDAyLzA1IGFuZCBDLTQxNS8wNSIKfSwKewogICAgIllFQVIiOiAiMTk4OSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJNZW1iZXIgc3RhdGVzIGFyZSBib3VuZCBieSByZXF1aXJlbWVudCB0byBwcm90ZWN0IGZ1bmRhbWVudGFsIEh1bWFuIFJpZ2h0cyB3aGVuIGltcGxlbWVudGluZyBFVSBtZWFzdXJlcyIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSHVtYW4gUmlnaHRzIiwKICAgICAgICAiV2hvIGlzIEJvdW5kIgogICAgXSwKICAgICJOQU1FIjogIldhY2hhdWYiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkZsYW1pbmlvIENvc3RhIHYgRU5FTCIsCiAgICAgICAgIkJvbnNpZ25vcmUiLAogICAgICAgICJTaW1tZW50aGFsIHYgTWluaXN0ZXIgZm9yIEZpbmFuY2UiLAogICAgICAgICJDb25lZ2F0ZSBMdGQgdiBDb21taXNzaW9uZXJzIG9mIEN1c3RvbXMgYW5kIEV4Y2lzZSIsCiAgICAgICAgIkJvYmllIEdldHJhZW5rZXZlcnRyaWViIHYgSGF1cHR6b2xsYW10IEFhY2hlbi1Ob3JkIiwKICAgICAgICAiQ2Fwb2xvbmdvIHYgTWF5YSIsCiAgICAgICAgIlRyb2phbmkiLAogICAgICAgICJKb3VzdHJhIiwKICAgICAgICAiS2VtcGYiLAogICAgICAgICJQdWJibGljbyBNaW5pc3Rlcm8gdiBSYXR0aSIsCiAgICAgICAgIlN0ZXltYW5uIiwKICAgICAgICAiRGFubyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjYwIiwKICAgICJDSVRBVElPTiI6ICJXYWNoYXVmIFsxOTg5XSBFQ1IgMjYwOSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkRFIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtNS84OCIsCiAgICAiQ0FURUdPUlkiOiAiSHVtYW4gUmlnaHRzICZtZGFzaDsgV2hvIGlzIEJvdW5kIgp9LAp7CiAgICAiWUVBUiI6ICIxOTkxIiwKICAgICJUWVBFIjogIkNoYXJ0ZXIiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkh1bWFuIFJpZ2h0cyIsCiAgICAgICAgIldobyBpcyBCb3VuZCIsCiAgICAgICAgIkh1bWFuIFJpZ2h0cyIsCiAgICAgICAgIklzc3VlcyBSYWlzZWQiLAogICAgICAgICJIdW1hbiBSaWdodHMiLAogICAgICAgICJFVSBDaGFydGVyIgogICAgXSwKICAgICJOQU1FIjogIkVVIENoYXJ0ZXIgb24gRnVuZGFtZW50YWwgcmlnaHRzIDIwMDAiLAogICAgIk5VTUJFUiI6ICI2MSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiU2NvcGUgLSBBUlQgNTEgVE9ETyBwIDU0IgogICAgXSwKICAgICJBS0EiOiAiR3JvZ2FuIiwKICAgICJDSVRBVElPTiI6ICJTUFVDIHYgR3JvZ2FuIFsxOTkxXSBFQ1IgSS00Njg1IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiSUUiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0xNTkvOTAiLAogICAgIkNBVEVHT1JZIjogIkh1bWFuIFJpZ2h0cyAmbWRhc2g7IFdobyBpcyBCb3VuZCAvIEh1bWFuIFJpZ2h0cyAmbWRhc2g7IElzc3VlcyBSYWlzZWQgLyBIdW1hbiBSaWdodHMgJm1kYXNoOyBFVSBDaGFydGVyIgp9LAp7CiAgICAiWUVBUiI6ICIyMDAxIiwKICAgICJUWVBFIjogIlRyZWF0eSIsCiAgICAiTElOSyI6IFsKICAgICAgICAiQUcgVGl6emFubydzIG9waW5pb24gcGFyYSAyNi0yOCIsCiAgICAgICAgIkFHIEphY29icycgb3BpbmlvbiBwYXJhIDIxMC0yMTUiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkh1bWFuIFJpZ2h0cyIsCiAgICAgICAgIkVVIENoYXJ0ZXIiLAogICAgICAgICJIdW1hbiBSaWdodHMiLAogICAgICAgICJFVSBDaGFydGVyIgogICAgXSwKICAgICJOQU1FIjogIkxpc2JvbiBUcmVhdHkgLSBIdW1hbiBSaWdodHMgQXNwZWN0cyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQXJ0aWNsZXMgMTgsIDIwIGFuZCAyMSBURkVVIiwKICAgICAgICAiQXJ0IDI4OCBURkVVIiwKICAgICAgICAiQXJ0aWNsZSA0NSBURkVVIgogICAgXSwKICAgICJOVU1CRVIiOiAiNjIiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkFydCAyLCBBcnQgNiwgQXJ0IDcgVEVVLCBUT0RPLiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiTmV0aGVybGFuZHMgdiBQYXJsaWFtZW50IGFuZCBDb3VuY2lsIFsyMDAxXSBFQ1IgSS03MDc5IiwKICAgICJDQVNFTlVNIjogIkMtMzc3Lzk4IiwKICAgICJDQVRFR09SWSI6ICJIdW1hbiBSaWdodHMgJm1kYXNoOyBFVSBDaGFydGVyIC8gSHVtYW4gUmlnaHRzICZtZGFzaDsgRVUgQ2hhcnRlciIKfSwKewogICAgIkxJTksiOiBbCiAgICAgICAgIlNjaHVtYW4gRGVjbGFyYXRpb24gIGh0dHA6Ly9ldXJvcGEuZXUvYWJvdXQtZXUvYmFzaWMtaW5mb3JtYXRpb24vc3ltYm9scy9ldXJvcGUtZGF5L3NjaHVtYW4tZGVjbGFyYXRpb24vaW5kZXhfZW4uaHRtIgogICAgXSwKICAgICJOQU1FIjogIlRoZSBJbnRlcm5hbCBNYXJrZXQgYW5kIEZyZWUgTW92ZW1lbnQiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IC0gRGlzY3Vzc2lvbiIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgYXQgdGhlIEJvcmRlciIsCiAgICAgICAgIlF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCIsCiAgICAgICAgIkhhcm1vbml6YXRpb24iLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIG92ZXIgdGhlIEJvcmRlciIsCiAgICAgICAgIihKb2luZWQpIEthZGkgYW5kIEFsIEJhcmFrYWF0IiwKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSUkgLSBFRlRBIHRvIE5pY2UiLAogICAgICAgICJNaWdyYW50IENyaXNpcyAtIFR1cmtleSBEZWFsIiwKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSSAtIFBhcmlzIHRvIE1lcmdlciIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IElJSSAtIEFjY2Vzc2lvbiB0byB0aGUgUHJlc2VudCIsCiAgICAgICAgIlNlY29uZGFyeSBMZWdpc2xhdGlvbiIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5JbnRlcm5hbCBNYXJrZXRzPC9zcGFuPjwvc3Bhbj48YnI+QXJlIHRoZSBtb3N0IHNvcGhpc3RpY2F0ZWQgZm9ybSBvZiBlY29ub21pYyBjb29wZXJhdGlvbiwgZ2l2ZSBvciB0YWtlLiBUaGUgdHJlYXRpZXMgYXJlIHRoZXJlZm9yZSBwcmltb3JkaWFsbHkgY29uY2VybmVkIHdpdGggaXQuIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDI2IFRGRVU8L3NwYW4+ICZtZGFzaDsgdGhlIFVuaW9uIDxzcGFuIGNsYXNzPVwiYmRcIj5tdXN0IGFjaGlldmU8L3NwYW4+IHRoaXMgYW5kIDxzcGFuIGNsYXNzPVwiYmRcIj5tYWtlIGl0IHdvcms8L3NwYW4+LiBOb3Qgb25seSBtdXN0IGl0IDxzcGFuIGNsYXNzPVwiYmRcIj5yZW1vdmUgYmFycmllcnM8L3NwYW4+LCBpdCBtdXN0IHRha2UgPHNwYW4gY2xhc3M9XCJiZFwiPnBvc2l0aXZlIG1lYXN1cmVzPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAyOCBURkVVPC9zcGFuPiAmbWRhc2g7IGl0IG11c3QgPHNwYW4gY2xhc3M9XCJiZFwiPmltcGxlbWVudCBjdXN0b21zIHVuaW9uPC9zcGFuPiwgZm9yIGFsbCB0cmFkZSBpbiBnb29kcy48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAyOSBURkVVPC9zcGFuPiAmbWRhc2g7IGltcG9ydGVkIDxzcGFuIGNsYXNzPVwiYmRcIj5nb29kcyBmcm9tIG91dHNpZGU8L3NwYW4+IHRoZSBFVSBhcmUgdG8gYmUgY29uc2lkZXJlZCA8c3BhbiBjbGFzcz1cImJkXCI+aW4gZnJlZSBjaXJjdWxhdGlvbjwvc3Bhbj4sIHNvIGxvbmcgYXMgdGhleSB3ZXJlIGltcG9ydGVkIGxlZ2FsbHkgaW50byA8c3BhbiBjbGFzcz1cIml0XCI+YTwvc3Bhbj4gbWVtYmVyIHN0YXRlLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDMwIFRGRVU8L3NwYW4+ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJiZFwiPmN1c3RvbXMgZHV0aWVzPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPmNoYXJnZXMgaGF2aW5nIGVxdWl2YWxlbnQgZWZmZWN0PC9zcGFuPiBhcmUgPHNwYW4gY2xhc3M9XCJiZFwiPnByb2hpYml0ZWQ8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDMxIFRGRVU8L3NwYW4+ICZtZGFzaDsgY3VzdG9tcyBvbiBpbXBvcnRzIGludG8gdGhlIHVuaW9uIHNoYWxsIGJlIGZpeGVkIGJ5IHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db3VuY2lsPC9zcGFuPiBvbiBwcm9wb3NhbCBvZiB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29tbWlzc2lvbjwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMzQgVEZFVTwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAzNSBURkVVPC9zcGFuPiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlF1YW50aXRpdmUgUmVzdHJpY3Rpb25zPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWVhc3VyZXMgaGF2aW5nIEVxdWl2YWxlbnQgRWZmZWN0PC9zcGFuPiBhcmUgcHJvaGliaXRlZCBvbiBpbXBvcnRzIGFuZCBleHBvcnRzLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDM2IFRGRVU8L3NwYW4+ICZtZGFzaDsgdW5sZXNzIHRoZXJlJiM4MjE3O3MgYSBqb2xseSBnb29kIHJlYXNvbi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+SGFybW9uaXphdGlvbjwvc3Bhbj48L3NwYW4+PGJyPlRoaXMsIGF0IHRoZSBvdXRzZXQsIHdhcyBzZWVuIGFzIGEgbmVjZXNzaXR5LCBidXQgc29tZXRoaW5nIHRoYXQgaGFkIHRvIGhhcHBlbiA8c3BhbiBjbGFzcz1cImJkXCI+aW5jcmVtZW50YWxseTwvc3Bhbj4uIEZyb20gdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5TY2h1bWFuIERlY2xhcmF0aW9uPC9zcGFuPiAoZGVsaXZlcmVkIG9uIHRoZSA1dGggYW5uaXZlcnNhcnkgb2YgdGhlIGVuZCBvZiBXV0lJKSAmbWRhc2g7IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJpdFwiPiYjODIxNjtFdXJvcGUgd2lsbCBub3QgYmUgbWFkZSBhbGwgYXQgb25jZSBvciBhY2NvcmRpbmcgdG8gYSBzaW5nbGUgcGxhbi48L3NwYW4+IEl0IHdpbGwgYmUgYnVpbHQgdGhyb3VnaCBjb25jcmV0ZSBhY2hpZXZlbWVudHMgd2hpY2ggZmlyc3QgY3JlYXRlIGEgZGUgZmFjdG8gc29saWRhcml0eS4gVGhlIGNvbWluZyB0b2dldGhlciBvZiB0aGUgbmF0aW9ucyBvZiBFdXJvcGUgcmVxdWlyZXMgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5lbGltaW5hdGlvbiBvZiB0aGUgYWdlIG9mIG9sZCBvcHBvc2l0aW9uIG9mIEZyYW5jZSBhbmQgR2VybWFueS4gQW55IGFjdGlvbiB0YWtlbiBtdXN0IGluIHRoZSBmaXJzdCBwbGFjZSBjb25jZXJuIHRoZXNlIHR3byBjb3VudHJpZXMuJiM4MjE3Ozwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIkFuZCBmcm9tIHRoZSBDb21taXNzaW9uIDxzcGFuIGNsYXNzPVwiaXRcIj5XaGl0ZSBQYXBlciBvbiB0aGUgSW50ZXJuYWwgTWFya2V0PC9zcGFuPiAmbWRhc2g7IEAmIzgyMTY7Li4uIHRoZSByZWFzb24gZm9yIGdldHRpbmcgcmlkIGVudGlyZWx5IG9mIHBoeXNpY2FsIGFuZCBvdGhlciBjb250cm9scyBiZXR3ZWVuIE1lbWJlciBTdGF0ZXMgaXMgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdCBvbmUgb2YgdGhlb2xvZ3kgb3IgYXBwZWFyYW5jZTwvc3Bhbj4sIGJ1dCB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmhhcmQgcHJhY3RpY2FsIGZhY3Q8L3NwYW4+IHRoYXQgbWFpbnRlbmFuY2Ugb2YgYW55IDxzcGFuIGNsYXNzPVwiYmRcIj5pbnRlcm5hbCBmcm9udGllciBjb250cm9sczwvc3Bhbj4gd2lsbCBwZXJwZXR1YXRlIHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+Y29zdHMgYW5kIGRpc2FkdmFudGFnZXM8L3NwYW4+IG9mIGEgZGl2aWRlZCBtYXJrZXQuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5SZXN0cmljdGlvbnM8L3NwYW4+PC9zcGFuPjxicj5Db21lIGluIHR3byBmb3JtcyAmbWRhc2g7IiwKICAgICAgICAiPG9sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmlzY2FsIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50PC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UXVhbnRpdGl2ZSBSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudDwvc3Bhbj4sIGluY2x1ZGluZyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NZWFzdXJlcyBvZiBFcXVpdmFsZW50IEVmZmVjdDwvc3Bhbj4uPC9zcGFuPjwvbGk+PC9vbD4iLAogICAgICAgICJTZWUgYWxzbyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IYXJtb25pemF0aW9uPC9zcGFuPi4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkludGVybmFsIE1hcmtldCIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgR29vZHMiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJFVSIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiSW50ZXJuYWwgTWFya2V0ICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAiTlVNQkVSIjogIjYzIgp9LAp7CiAgICAiVFlQRSI6ICJUcmVhdHkgQXJ0aWNsZSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj5BcnRpY2xlIDI2PC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgVW5pb24gc2hhbGwgYWRvcHQgbWVhc3VyZXMgd2l0aCB0aGUgYWltIG9mIGVzdGFibGlzaGluZyBvciBlbnN1cmluZyB0aGUgZnVuY3Rpb25pbmcgb2YgdGhlIGludGVybmFsIG1hcmtldCwgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSByZWxldmFudCBwcm92aXNpb25zIG9mIHRoZSBUcmVhdGllcy48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBpbnRlcm5hbCBtYXJrZXQgc2hhbGwgY29tcHJpc2UgYW4gYXJlYSB3aXRob3V0IGludGVybmFsIGZyb250aWVycyBpbiB3aGljaCB0aGUgZnJlZSBtb3ZlbWVudCBvZiBnb29kcywgcGVyc29ucywgc2VydmljZXMgYW5kIGNhcGl0YWwgaXMgZW5zdXJlZCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIHByb3Zpc2lvbnMgb2YgdGhlIFRyZWF0aWVzLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIENvdW5jaWwsIG9uIGEgcHJvcG9zYWwgZnJvbSB0aGUgQ29tbWlzc2lvbiwgc2hhbGwgZGV0ZXJtaW5lIHRoZSBndWlkZWxpbmVzIGFuZCBjb25kaXRpb25zIG5lY2Vzc2FyeSB0byBlbnN1cmUgYmFsYW5jZWQgcHJvZ3Jlc3MgaW4gYWxsIHRoZSBzZWN0b3JzIGNvbmNlcm5lZC48L3NwYW4+PC9saT48L29sPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+QXJ0aWNsZSAyNzwvc3Bhbj48L3NwYW4+PGJyPldoZW4gZHJhd2luZyB1cCBpdHMgcHJvcG9zYWxzIHdpdGggYSB2aWV3IHRvIGFjaGlldmluZyB0aGUgb2JqZWN0aXZlcyBzZXQgb3V0IGluIEFydGljbGUgMjYsIHRoZSBDb21taXNzaW9uIHNoYWxsIHRha2UgaW50byBhY2NvdW50IHRoZSBleHRlbnQgb2YgdGhlIGVmZm9ydCB0aGF0IGNlcnRhaW4gZWNvbm9taWVzIHNob3dpbmcgZGlmZmVyZW5jZXMgaW4gZGV2ZWxvcG1lbnQgd2lsbCBoYXZlIHRvIHN1c3RhaW4gZm9yIHRoZSBlc3RhYmxpc2htZW50IG9mIHRoZSBpbnRlcm5hbCBtYXJrZXQgYW5kIGl0IG1heSBwcm9wb3NlIGFwcHJvcHJpYXRlIHByb3Zpc2lvbnMuIiwKICAgICAgICAiSWYgdGhlc2UgcHJvdmlzaW9ucyB0YWtlIHRoZSBmb3JtIG9mIGRlcm9nYXRpb25zLCB0aGV5IG11c3QgYmUgb2YgYSB0ZW1wb3JhcnkgbmF0dXJlIGFuZCBtdXN0IGNhdXNlIHRoZSBsZWFzdCBwb3NzaWJsZSBkaXN0dXJiYW5jZSB0byB0aGUgZnVuY3Rpb25pbmcgb2YgdGhlIGludGVybmFsIG1hcmtldC4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkFydGljbGUgMjg8L3NwYW4+PC9zcGFuPiIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBVbmlvbiBzaGFsbCBjb21wcmlzZSBhIGN1c3RvbXMgdW5pb24gd2hpY2ggc2hhbGwgY292ZXIgYWxsIHRyYWRlIGluIGdvb2RzIGFuZCB3aGljaCBzaGFsbCBpbnZvbHZlIHRoZSBwcm9oaWJpdGlvbiBiZXR3ZWVuIE1lbWJlciBTdGF0ZXMgb2YgY3VzdG9tcyBkdXRpZXMgb24gaW1wb3J0cyBhbmQgZXhwb3J0cyBhbmQgb2YgYWxsIGNoYXJnZXMgaGF2aW5nIGVxdWl2YWxlbnQgZWZmZWN0LCBhbmQgdGhlIGFkb3B0aW9uIG9mIGEgY29tbW9uIGN1c3RvbXMgdGFyaWZmIGluIHRoZWlyIHJlbGF0aW9ucyB3aXRoIHRoaXJkIGNvdW50cmllcy48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBwcm92aXNpb25zIG9mIEFydGljbGUgMzAgYW5kIG9mIENoYXB0ZXIgMiBvZiB0aGlzIFRpdGxlIHNoYWxsIGFwcGx5IHRvIHByb2R1Y3RzIG9yaWdpbmF0aW5nIGluIE1lbWJlciBTdGF0ZXMgYW5kIHRvIHByb2R1Y3RzIGNvbWluZyBmcm9tIHRoaXJkIGNvdW50cmllcyB3aGljaCBhcmUgaW4gZnJlZSBjaXJjdWxhdGlvbiBpbiBNZW1iZXIgU3RhdGVzLjwvc3Bhbj48L2xpPjwvb2w+IgogICAgXSwKICAgICJBS0EiOiAiQXJ0IDI2IFRGRVU7IEFydCAyNyBURkVVOyBBcnQgMjggVEZFVSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiQXJ0IDI2IFRGRVUiLAogICAgICAgICJBcnQgMjcgVEZFVSIsCiAgICAgICAgIkFydCAyOCBURkVVIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRVUiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkludGVybmFsIE1hcmtldCAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBGaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEFydCAyNiBURkVVICZtZGFzaDsgQXJ0IDI3IFRGRVUgJm1kYXNoOyBBcnQgMjggVEZFVSIsCiAgICAiTkFNRSI6ICJBcnRpY2xlcyAyNi0yOCBURkVVIiwKICAgICJOVU1CRVIiOiAiNjQiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkFydGljbGVzIDExNCBhbmQgMTE1IFRGRVUiLAogICAgICAgICJBcnRpY2xlIDMwIFRGRVUiLAogICAgICAgICJBcnRpY2xlcyAyOSBhbmQgMzEgVEZFVSIsCiAgICAgICAgIkFydGljbGUgMTEwIFRGRVUiLAogICAgICAgICJBcnRpY2xlcyAzNCwgMzUgYW5kIDM2IFRGRVUiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIlRyZWF0eSBBcnRpY2xlIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkFydGljbGUgMjk8L3NwYW4+PC9zcGFuPjxicj5Qcm9kdWN0cyBjb21pbmcgZnJvbSBhIHRoaXJkIGNvdW50cnkgc2hhbGwgYmUgY29uc2lkZXJlZCB0byBiZSBpbiBmcmVlIGNpcmN1bGF0aW9uIGluIGEgTWVtYmVyIFN0YXRlIGlmIHRoZSBpbXBvcnQgZm9ybWFsaXRpZXMgaGF2ZSBiZWVuIGNvbXBsaWVkIHdpdGggYW5kIGFueSBjdXN0b21zIGR1dGllcyBvciBjaGFyZ2VzIGhhdmluZyBlcXVpdmFsZW50IGVmZmVjdCB3aGljaCBhcmUgcGF5YWJsZSBoYXZlIGJlZW4gbGV2aWVkIGluIHRoYXQgTWVtYmVyIFN0YXRlLCBhbmQgaWYgdGhleSBoYXZlIG5vdCBiZW5lZml0ZWQgZnJvbSBhIHRvdGFsIG9yIHBhcnRpYWwgZHJhd2JhY2sgb2Ygc3VjaCBkdXRpZXMgb3IgY2hhcmdlcy4iLAogICAgICAgICIoU2VlIGFsc28gJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMzAgVEZFVTwvc3Bhbj4pIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5BcnRpY2xlIDMxPC9zcGFuPjwvc3Bhbj48YnI+Q29tbW9uIEN1c3RvbXMgVGFyaWZmIGR1dGllcyBzaGFsbCBiZSBmaXhlZCBieSB0aGUgQ291bmNpbCBvbiBhIHByb3Bvc2FsIGZyb20gdGhlIENvbW1pc3Npb24uIgogICAgXSwKICAgICJBS0EiOiAiQXJ0IDI5IFRGRVU7IEFydCAzMSBURkVVIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbnRlcm5hbCBNYXJrZXQiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgR29vZHMiLAogICAgICAgICJBcnQgMjkgVEZFVSIsCiAgICAgICAgIkFydCAzMCBURkVVIiwKICAgICAgICAiQXJ0IDMxIFRGRVUiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJFVSIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiSW50ZXJuYWwgTWFya2V0ICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyBGcmVlIE1vdmVtZW50IG9mIEdvb2RzICZtZGFzaDsgQXJ0IDI5IFRGRVUgJm1kYXNoOyBBcnQgMzAgVEZFVSAmbWRhc2g7IEFydCAzMSBURkVVIiwKICAgICJOQU1FIjogIkFydGljbGVzIDI5IGFuZCAzMSBURkVVIiwKICAgICJOVU1CRVIiOiAiNjUiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkFydGljbGUgMzAgVEZFVSIsCiAgICAgICAgIkFydGljbGVzIDExNCBhbmQgMTE1IFRGRVUiLAogICAgICAgICJBcnRpY2xlIDExMCBURkVVIiwKICAgICAgICAiQXJ0aWNsZXMgMjYtMjggVEZFVSIsCiAgICAgICAgIkFydGljbGVzIDM0LCAzNSBhbmQgMzYgVEZFVSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiVHJlYXR5IEFydGljbGUiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+U3VtbWFyeTwvc3Bhbj48L3NwYW4+PGJyPkFydGljbGUgMzAgYmFucyBjaGFyZ2VzIDxzcGFuIGNsYXNzPVwiYmRcIj5hdCB0aGUgYm9yZGVyPC9zcGFuPi4gSXQgY292ZXJzIGFueXRoaW5nIHRoYXQgY291bGQgYmUgc3ViamVjdCB0byBjb21tZXJjaWFsIHRyYW5zYWN0aW9uICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgVHJlYXN1cmVzPC9zcGFuPiksIHdoYXRldmVyIHRoZSBwdXJwb3NlIG9mIHRoZSBjaGFyZ2UgKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlN0YXRpc3RpY2FsIERhdGEgTGV2eTwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJyZXNjaWFuaTwvc3Bhbj4pLCBldmVuIGlmIHRoZSByZWNpcGllbnQgb2YgdGhlIGxldnkgaXMgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj4gdGhlIHN0YXRlICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DYWRza3k8L3NwYW4+KS4gRXhjZXB0aW9ucyBhcmUgd2hlcmUgdGhlIGNoYXJnZSBpcyBpbiBmYWN0IHBheW1lbnQgZm9yIHNlcnZpY2VzIHJlbmRlcmVkOyB0byBmdWxmaWwgYSByZXF1aXJlbWVudCBvZiBFVSBsYXcgKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhdWh1aXM8L3NwYW4+KTsgb3IgaW50ZXJuYXRpb25hbCBsYXcgKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbW1pc3Npb24gdiBOTDwvc3Bhbj4pLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+QXJ0aWNsZSAzMDwvc3Bhbj4gLSBUZXh0PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImJkXCI+Q3VzdG9tcyBkdXRpZXMgb24gaW1wb3J0cyBhbmQgZXhwb3J0cyBhbmQgY2hhcmdlcyBoYXZpbmcgZXF1aXZhbGVudCBlZmZlY3Qgc2hhbGwgYmUgcHJvaGliaXRlZCBiZXR3ZWVuIE1lbWJlciBTdGF0ZXMuIFRoaXMgcHJvaGliaXRpb24gc2hhbGwgYWxzbyBhcHBseSB0byBjdXN0b21zIGR1dGllcyBvZiBhIGZpc2NhbCBuYXR1cmUuPC9zcGFuPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+RnVydGhlciBkZXRhaWxzPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmlzY2FsIFJlc3RyaWN0aW9ucyBhdCB0aGUgQm9yZGVyPC9zcGFuPi4iCiAgICBdLAogICAgIkFLQSI6ICJBcnQgMzAgVEZFVSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiQXJ0IDI5IFRGRVUiLAogICAgICAgICJBcnQgMzAgVEZFVSIsCiAgICAgICAgIkFydCAzMSBURkVVIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRVUiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkludGVybmFsIE1hcmtldCAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBGaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEFydCAyOSBURkVVICZtZGFzaDsgQXJ0IDMwIFRGRVUgJm1kYXNoOyBBcnQgMzEgVEZFVSIsCiAgICAiTkFNRSI6ICJBcnRpY2xlIDMwIFRGRVUiLAogICAgIk5VTUJFUiI6ICI2NiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQXJ0aWNsZXMgMjkgYW5kIDMxIFRGRVUiLAogICAgICAgICJBcnRpY2xlcyAxMTQgYW5kIDExNSBURkVVIiwKICAgICAgICAiQXJ0aWNsZXMgMjYtMjggVEZFVSIsCiAgICAgICAgIkFydGljbGUgMTEwIFRGRVUiLAogICAgICAgICJBcnRpY2xlcyAzNCwgMzUgYW5kIDM2IFRGRVUiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIlRyZWF0eSBBcnRpY2xlIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlN1bW1hcnk8L3NwYW4+PC9zcGFuPjxicj5UaGlzIGFkZHJlc3NlcyA8c3BhbiBjbGFzcz1cImJkXCI+aW50ZXJuYWwgdGF4PC9zcGFuPiBhbmQgaXMgYWNjb3JkaW5nbHkgPHNwYW4gY2xhc3M9XCJiZFwiPmNvbnRlbnRpb3VzPC9zcGFuPiwgYnV0IG1lbWJlciBzdGF0ZXMgPHNwYW4gY2xhc3M9XCJiZFwiPnJldGFpbjwvc3Bhbj4gZmlzY2FsIGF1dG9ub215ICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db21taXNzaW9uIHYgRnJhbmNlPC9zcGFuPikuIFRheGVzIHRoYXQgYXJlIDxzcGFuIGNsYXNzPVwiYmRcIj5hcHBsaWVkPC9zcGFuPiBkaWZmZXJlbnRseSAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Qm9iaWU8L3NwYW4+KSwgdGhhdCBhcmUgYXBwbGllZCB0aGUgc2FtZSBidXQgd2hpY2ggY29uZmVyIGFkdmFudGFnZSBvbiB0aGUgZG9tZXN0aWMgcHJvZHVjdCAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2Fwb2xvbmdvPC9zcGFuPiksIGFuZCB0aGVvcmV0aWNhbGx5IG5vbi1kaXNjcmltaW5hdGluZyB0YXhlcyB3aGljaCBpbiBwcmFjdGljZSA8c3BhbiBjbGFzcz1cImJkXCI+ZG88L3NwYW4+IGRpc2NyaW1pbmF0ZSAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SHVtYmxvdDwvc3Bhbj4pLCBhcmUgYWxsIHZpb2xhdGlvbnMgb2YgQXJ0IDExMC4gRXhjZXB0IHdoZW4gdGhleSYjODIxNztyZSA8c3BhbiBjbGFzcz1cImJkXCI+Z29vZCBmb3IgeW91PC9zcGFuPiAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2hlbWlhbDwvc3Bhbj4pLiAgPHNwYW4gY2xhc3M9XCJpdFwiPk1yLiBXYWxrZXImIzgyMTc7cyBBbWJlciBSZXN0b3JhdGl2ZTwvc3Bhbj4gaXMgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj4gc2ltaWxhciB0byBEYW5pc2ggZnJ1aXQgbGlxdW9ycyAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Sm9obm5pZSBXYWxrZXI8L3NwYW4+KS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPkFydGljbGUgMTEwPC9zcGFuPiAmbWRhc2g7IFRleHQ8L3NwYW4+PGJyPk5vIE1lbWJlciBTdGF0ZSBzaGFsbCBpbXBvc2UsIGRpcmVjdGx5IG9yIGluZGlyZWN0bHksIG9uIHRoZSBwcm9kdWN0cyBvZiBvdGhlciBNZW1iZXIgU3RhdGVzIGFueSA8c3BhbiBjbGFzcz1cImJkXCI+aW50ZXJuYWwgdGF4YXRpb248L3NwYW4+IG9mIGFueSBraW5kIDxzcGFuIGNsYXNzPVwiYmRcIj5pbiBleGNlc3Mgb2YgdGhhdCBpbXBvc2VkPC9zcGFuPiBkaXJlY3RseSBvciBpbmRpcmVjdGx5IDxzcGFuIGNsYXNzPVwiYmRcIj5vbiBzaW1pbGFyIGRvbWVzdGljIHByb2R1Y3RzPC9zcGFuPi4iLAogICAgICAgICJGdXJ0aGVybW9yZSwgbm8gTWVtYmVyIFN0YXRlIHNoYWxsIDxzcGFuIGNsYXNzPVwiYmRcIj5pbXBvc2Ugb24gdGhlIHByb2R1Y3RzIG9mIG90aGVyIE1lbWJlciBTdGF0ZXM8L3NwYW4+IGFueSBpbnRlcm5hbCB0YXhhdGlvbiBvZiBzdWNoIGEgbmF0dXJlIGFzIHRvIGFmZm9yZCA8c3BhbiBjbGFzcz1cImJkXCI+aW5kaXJlY3QgcHJvdGVjdGlvbjwvc3Bhbj4gdG8gb3RoZXIgcHJvZHVjdHMuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5GdXJ0aGVyIGRldGFpbHM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5GaXNjYWwgUmVzdHJpY3Rpb25zIG92ZXIgdGhlIEJvcmRlcjwvc3Bhbj4uIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRVUiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkludGVybmFsIE1hcmtldCIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgR29vZHMiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIiwKICAgICAgICAiQXJ0IDExMCBURkVVIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJJbnRlcm5hbCBNYXJrZXQgJm1kYXNoOyBGcmVlIE1vdmVtZW50IG9mIEdvb2RzICZtZGFzaDsgRmlzY2FsIFJlc3RyaWN0aW9ucyAmbWRhc2g7IEFydCAxMTAgVEZFVSIsCiAgICAiTkFNRSI6ICJBcnRpY2xlIDExMCBURkVVIiwKICAgICJOVU1CRVIiOiAiNjciLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkFydGljbGVzIDExNCBhbmQgMTE1IFRGRVUiLAogICAgICAgICJBcnRpY2xlcyAyNi0yOCBURkVVIiwKICAgICAgICAiQXJ0aWNsZSAzMCBURkVVIiwKICAgICAgICAiQXJ0aWNsZXMgMjkgYW5kIDMxIFRGRVUiLAogICAgICAgICJBcnRpY2xlcyAzNCwgMzUgYW5kIDM2IFRGRVUiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIlRyZWF0eSBBcnRpY2xlIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkFydGljbGUgMTE0PC9zcGFuPjwvc3Bhbj4iLAogICAgICAgICI8b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5TYXZlIHdoZXJlIG90aGVyd2lzZSBwcm92aWRlZCBpbiB0aGUgVHJlYXRpZXMsIHRoZSBmb2xsb3dpbmcgcHJvdmlzaW9ucyBzaGFsbCBhcHBseSBmb3IgdGhlIGFjaGlldmVtZW50IG9mIHRoZSBvYmplY3RpdmVzIHNldCBvdXQgaW4gQXJ0aWNsZSAyNi4gVGhlIEV1cm9wZWFuIFBhcmxpYW1lbnQgYW5kIHRoZSBDb3VuY2lsIHNoYWxsLCBhY3RpbmcgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBvcmRpbmFyeSBsZWdpc2xhdGl2ZSBwcm9jZWR1cmUgXHRhbmQgYWZ0ZXIgY29uc3VsdGluZyB0aGUgRWNvbm9taWMgYW5kIFNvY2lhbCBDb21taXR0ZWUsIGFkb3B0IHRoZSBtZWFzdXJlcyBmb3IgdGhlIGFwcHJveGltYXRpb24gb2YgdGhlIHByb3Zpc2lvbnMgbGFpZCBkb3duIGJ5IGxhdywgcmVndWxhdGlvbiBvciBhZG1pbmlzdHJhdGl2ZSBhY3Rpb24gaW4gTWVtYmVyIFN0YXRlcyB3aGljaCBoYXZlIGFzIHRoZWlyIG9iamVjdCB0aGUgZXN0YWJsaXNobWVudCBhbmQgZnVuY3Rpb25pbmcgb2YgdGhlIGludGVybmFsIG1hcmtldC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlBhcmFncmFwaCAxIHNoYWxsIG5vdCBhcHBseSB0byBmaXNjYWwgcHJvdmlzaW9ucywgdG8gdGhvc2UgcmVsYXRpbmcgdG8gdGhlIGZyZWUgbW92ZW1lbnQgb2YgcGVyc29ucyBub3IgdG8gdGhvc2UgcmVsYXRpbmcgdG8gdGhlIHJpZ2h0cyBhbmQgaW50ZXJlc3RzIG9mIGVtcGxveWVkIHBlcnNvbnMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgQ29tbWlzc2lvbiwgaW4gaXRzIHByb3Bvc2FscyBlbnZpc2FnZWQgaW4gcGFyYWdyYXBoIDEgY29uY2VybmluZyBoZWFsdGgsIHNhZmV0eSwgZW52aXJvbm1lbnRhbCBwcm90ZWN0aW9uIGFuZCBjb25zdW1lciBwcm90ZWN0aW9uLCB3aWxsIHRha2UgYXMgYSBiYXNlIGEgaGlnaCBsZXZlbCBvZiBwcm90ZWN0aW9uLCB0YWtpbmcgYWNjb3VudCBpbiBwYXJ0aWN1bGFyIG9mIGFueSBuZXcgZGV2ZWxvcG1lbnQgYmFzZWQgb24gc2NpZW50aWZpYyBmYWN0cy4gV2l0aGluIHRoZWlyIHJlc3BlY3RpdmUgcG93ZXJzLCB0aGUgRXVyb3BlYW4gUGFybGlhbWVudCBhbmQgdGhlIENvdW5jaWwgd2lsbCBhbHNvIHNlZWsgdG8gYWNoaWV2ZSB0aGlzIG9iamVjdGl2ZS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPklmLCBhZnRlciB0aGUgYWRvcHRpb24gb2YgYSBoYXJtb25pc2F0aW9uIG1lYXN1cmUgYnkgdGhlIEV1cm9wZWFuIFBhcmxpYW1lbnQgYW5kIHRoZSBDb3VuY2lsLCBieSB0aGUgQ291bmNpbCBvciBieSB0aGUgQ29tbWlzc2lvbiwgYSBNZW1iZXIgU3RhdGUgZGVlbXMgaXQgbmVjZXNzYXJ5IHRvIG1haW50YWluIG5hdGlvbmFsIHByb3Zpc2lvbnMgb24gZ3JvdW5kcyBvZiBtYWpvciBuZWVkcyByZWZlcnJlZCB0byBpbiBBcnRpY2xlIDM2LCBvciByZWxhdGluZyB0byB0aGUgcHJvdGVjdGlvbiBvZiB0aGUgZW52aXJvbm1lbnQgb3IgdGhlIHdvcmtpbmcgZW52aXJvbm1lbnQsIGl0IHNoYWxsIG5vdGlmeSB0aGUgQ29tbWlzc2lvbiBvZiB0aGVzZSBwcm92aXNpb25zIGFzIHdlbGwgYXMgdGhlIGdyb3VuZHMgZm9yXHRtYWludGFpbmluZyB0aGVtLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+TW9yZW92ZXIsIHdpdGhvdXQgcHJlanVkaWNlIHRvIHBhcmFncmFwaCA0LCBpZiwgYWZ0ZXIgdGhlIGFkb3B0aW9uIG9mIGEgaGFybW9uaXNhdGlvbiBtZWFzdXJlIGJ5IHRoZSBFdXJvcGVhbiBQYXJsaWFtZW50IGFuZCB0aGUgQ291bmNpbCwgYnkgdGhlIENvdW5jaWwgb3IgYnkgdGhlIENvbW1pc3Npb24sIGEgTWVtYmVyIFN0YXRlIGRlZW1zIGl0IG5lY2Vzc2FyeSB0byBpbnRyb2R1Y2UgbmF0aW9uYWwgcHJvdmlzaW9ucyBiYXNlZCBvbiBuZXcgc2NpZW50aWZpYyBldmlkZW5jZSByZWxhdGluZyB0byB0aGUgcHJvdGVjdGlvbiBvZiB0aGUgZW52aXJvbm1lbnQgb3IgdGhlIHdvcmtpbmcgZW52aXJvbm1lbnQgb24gZ3JvdW5kcyBvZiBhIHByb2JsZW0gc3BlY2lmaWMgdG8gdGhhdCBNZW1iZXIgU3RhdGUgYXJpc2luZyBhZnRlciB0aGUgYWRvcHRpb24gb2YgdGhlIGhhcm1vbmlzYXRpb24gbWVhc3VyZSwgaXQgc2hhbGwgbm90aWZ5IHRoZSBDb21taXNzaW9uIG9mIHRoZSBlbnZpc2FnZWQgcHJvdmlzaW9ucyBhcyB3ZWxsIGFzIHRoZSBncm91bmRzIGZvciBpbnRyb2R1Y2luZyB0aGVtLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIENvbW1pc3Npb24gc2hhbGwsIHdpdGhpbiBzaXggbW9udGhzIG9mIHRoZSBub3RpZmljYXRpb25zIGFzIHJlZmVycmVkIHRvIGluIHBhcmFncmFwaHMgNCBhbmQgNSwgYXBwcm92ZSBvciByZWplY3QgdGhlIG5hdGlvbmFsIHByb3Zpc2lvbnMgaW52b2x2ZWQgYWZ0ZXIgaGF2aW5nIHZlcmlmaWVkIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGEgbWVhbnMgb2YgYXJiaXRyYXJ5IGRpc2NyaW1pbmF0aW9uIG9yIGEgZGlzZ3Vpc2VkIHJlc3RyaWN0aW9uIG9uIHRyYWRlIGJldHdlZW4gTWVtYmVyIFN0YXRlcyBhbmQgd2hldGhlciBvciBub3QgdGhleSBzaGFsbCBjb25zdGl0dXRlIGFuIG9ic3RhY2xlIHRvIHRoZSBmdW5jdGlvbmluZyBvZiB0aGUgaW50ZXJuYWwgbWFya2V0Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SW4gdGhlIGFic2VuY2Ugb2YgYSBkZWNpc2lvbiBieSB0aGUgQ29tbWlzc2lvbiB3aXRoaW4gdGhpcyBwZXJpb2QgdGhlIG5hdGlvbmFsIHByb3Zpc2lvbnMgcmVmZXJyZWQgdG8gaW4gcGFyYWdyYXBocyA0IGFuZCA1IHNoYWxsIGJlIGRlZW1lZCB0byBoYXZlIGJlZW4gYXBwcm92ZWQuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5XaGVuLCBwdXJzdWFudCB0byBwYXJhZ3JhcGggNiwgYSBNZW1iZXIgU3RhdGUgaXMgYXV0aG9yaXNlZCB0byBtYWludGFpbiBvciBpbnRyb2R1Y2UgbmF0aW9uYWwgcHJvdmlzaW9ucyBkZXJvZ2F0aW5nIGZyb20gYSBoYXJtb25pc2F0aW9uIG1lYXN1cmUsIHRoZSBDb21taXNzaW9uIHNoYWxsIGltbWVkaWF0ZWx5IGV4YW1pbmUgd2hldGhlciB0byBwcm9wb3NlIGFuIGFkYXB0YXRpb24gdG8gdGhhdCBtZWFzdXJlLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+V2hlbiBhIE1lbWJlciBTdGF0ZSByYWlzZXMgYSBzcGVjaWZpYyBwcm9ibGVtIG9uIHB1YmxpYyBoZWFsdGggaW4gYSBmaWVsZCB3aGljaCBoYXMgYmVlbiB0aGUgc3ViamVjdCBvZiBwcmlvciBoYXJtb25pc2F0aW9uIG1lYXN1cmVzLCBpdCBzaGFsbCBicmluZyBpdCB0byB0aGUgYXR0ZW50aW9uIG9mIHRoZSBDb21taXNzaW9uIHdoaWNoIHNoYWxsIGltbWVkaWF0ZWx5IGV4YW1pbmUgd2hldGhlciB0byBwcm9wb3NlIGFwcHJvcHJpYXRlIFx0bWVhc3VyZXMgdG8gdGhlIENvdW5jaWwuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CeSB3YXkgb2YgZGVyb2dhdGlvbiBmcm9tIHRoZSBwcm9jZWR1cmUgbGFpZCBkb3duIGluIEFydGljbGVzIDI1OCBhbmQgMjU5LCB0aGUgQ29tbWlzc2lvbiBhbmQgYW55IE1lbWJlciBTdGF0ZSBtYXkgYnJpbmcgdGhlIG1hdHRlciBkaXJlY3RseSBiZWZvcmUgdGhlIENvdXJ0IG9mIEp1c3RpY2Ugb2YgdGhlIEV1cm9wZWFuIFVuaW9uIGlmIGl0IGNvbnNpZGVycyB0aGF0IGFub3RoZXIgTWVtYmVyIFN0YXRlIGlzIG1ha2luZyBpbXByb3BlciB1c2Ugb2YgdGhlIHBvd2VycyBwcm92aWRlZCBmb3IgaW4gdGhpcyBBcnRpY2xlLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIGhhcm1vbmlzYXRpb24gbWVhc3VyZXMgcmVmZXJyZWQgdG8gYWJvdmUgc2hhbGwsIGluIGFwcHJvcHJpYXRlIGNhc2VzLCBpbmNsdWRlIGEgc2FmZWd1YXJkIGNsYXVzZSBhdXRob3Jpc2luZyB0aGUgTWVtYmVyIFN0YXRlcyB0byB0YWtlLCBmb3Igb25lIG9yIG1vcmUgb2YgdGhlIG5vbi1lY29ub21pYyByZWFzb25zIHJlZmVycmVkIHRvIGluIEFydGljbGUgMzYsIHByb3Zpc2lvbmFsIG1lYXN1cmVzIHN1YmplY3QgdG8gYSBVbmlvbiBjb250cm9sIHByb2NlZHVyZS48L3NwYW4+PC9saT48L29sPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+QXJ0aWNsZSAxMTU8L3NwYW4+PC9zcGFuPjxicj5XaXRob3V0IHByZWp1ZGljZSB0byBBcnRpY2xlIDExNCwgdGhlIENvdW5jaWwgc2hhbGwsIDxzcGFuIGNsYXNzPVwiYmRcIj5hY3RpbmcgdW5hbmltb3VzbHkgaW4gYWNjb3JkYW5jZSB3aXRoIGEgc3BlY2lhbCBsZWdpc2xhdGl2ZSBwcm9jZWR1cmU8L3NwYW4+IGFuZCBhZnRlciBjb25zdWx0aW5nIHRoZSBFdXJvcGVhbiBQYXJsaWFtZW50IGFuZCB0aGUgRWNvbm9taWMgYW5kIFNvY2lhbCBDb21taXR0ZWUsIGlzc3VlIGRpcmVjdGl2ZXMgZm9yIHRoZSBhcHByb3hpbWF0aW9uIG9mIHN1Y2ggbGF3cywgcmVndWxhdGlvbnMgb3IgYWRtaW5pc3RyYXRpdmUgcHJvdmlzaW9ucyBvZiB0aGUgTWVtYmVyIFN0YXRlcyBhcyBkaXJlY3RseSBhZmZlY3QgdGhlIGVzdGFibGlzaG1lbnQgb3IgZnVuY3Rpb25pbmcgb2YgdGhlIGludGVybmFsIG1hcmtldC4iCiAgICBdLAogICAgIkFLQSI6ICJBcnQgMTE0IFRGRVU7IEFydCAxMTUgVEZFVSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkVVIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbnRlcm5hbCBNYXJrZXQiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgR29vZHMiLAogICAgICAgICJBcnQgMTE0IFRGRVUiLAogICAgICAgICJBcnQgMTE1IFRGRVUiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkludGVybmFsIE1hcmtldCAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBGaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEFydCAxMTQgVEZFVSAmbWRhc2g7IEFydCAxMTUgVEZFVSIsCiAgICAiTkFNRSI6ICJBcnRpY2xlcyAxMTQgYW5kIDExNSBURkVVIiwKICAgICJOVU1CRVIiOiAiNjgiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkFydGljbGVzIDI5IGFuZCAzMSBURkVVIiwKICAgICAgICAiQXJ0aWNsZSAzMCBURkVVIiwKICAgICAgICAiQXJ0aWNsZXMgMjYtMjggVEZFVSIsCiAgICAgICAgIkFydGljbGUgMTEwIFRGRVUiLAogICAgICAgICJBcnRpY2xlcyAzNCwgMzUgYW5kIDM2IFRGRVUiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+UG93ZXIgdG8gSGFybW9uaXplPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDExNCBURkVVPC9zcGFuPiBzYXlzIDxzcGFuIGNsYXNzPVwiaXRcIj5vYmxpcXVlbHk8L3NwYW4+IHRoYXQgdGhlIFVuaW9uIGhhcyB0aGUgcG93ZXIgdG8gYWRvcHQgaGFybW9uaXphdGlvbi4gSG93PyBCeSB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+T3JkaW5hcnkgTGVnaXNsYXRpdmUgUHJvY2VkdXJlPC9zcGFuPiBvZiBRTVYuIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhpcyBpcyA8c3BhbiBjbGFzcz1cImJkXCI+b25lIG9mIHRoZSBtb3N0IGltcG9ydGFudCBhcnRpY2xlczwvc3Bhbj4gaW4gVEZFVS48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIlNlZSBhbHNvICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmlzY2FsIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50PC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmlzY2FsIFJlc3RyaWN0aW9ucyBhdCB0aGUgQm9yZGVyPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmlzY2FsIFJlc3RyaWN0aW9ucyBvdmVyIHRoZSBCb3JkZXI8L3NwYW4+LiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJIYXJtb25pemF0aW9uIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRVUiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkludGVybmFsIE1hcmtldCAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBGaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgSGFybW9uaXphdGlvbiIsCiAgICAiTkFNRSI6ICJIYXJtb25pemF0aW9uIiwKICAgICJOVU1CRVIiOiAiNjkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgb3ZlciB0aGUgQm9yZGVyIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyBhdCB0aGUgQm9yZGVyIiwKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IC0gRGlzY3Vzc2lvbiIsCiAgICAgICAgIlRoZSBJbnRlcm5hbCBNYXJrZXQgYW5kIEZyZWUgTW92ZW1lbnQiLAogICAgICAgICJRdWFudGl0YXRpdmUgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQiLAogICAgICAgICJDaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIC0gRGlnZXN0ZWQiLAogICAgICAgICJFVSBDaXRpemVuc2hpcCIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyAtIFN1bW1hcnkiLAogICAgICAgICJTZWNvbmRhcnkgTGVnaXNsYXRpb24iLAogICAgICAgICJQb3R0ZWQgSGlzdG9yeSBJSSAtIEVGVEEgdG8gTmljZSIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IEkgLSBQYXJpcyB0byBNZXJnZXIiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRoZXJlIGFyZSB0d28gPHNwYW4gY2xhc3M9XCJpdFwiPm1vc3RseTwvc3Bhbj4tZGlzdGluY3Qgc2l0dWF0aW9ucyAmbWRhc2g7IiwKICAgICAgICAiPG9sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIGJvcmRlciA8c3BhbiBjbGFzcz1cImJkXCI+aXMgYmVpbmc8L3NwYW4+IGNyb3NzZWQgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMzAgVEZFVTwvc3Bhbj4gYXBwbGllcy48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBib3JkZXIgPHNwYW4gY2xhc3M9XCJiZFwiPmhhcyBiZWVuPC9zcGFuPiBjcm9zc2VkICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDExMCBURkVVPC9zcGFuPiBhcHBsaWVzLjwvc3Bhbj48L2xpPjwvb2w+IiwKICAgICAgICAiTWVhc3VyZXMgZmFsbGluZyB0aGUgd3Jvbmcgc2lkZSBvZiBlaXRoZXIgbWF5IGJlIDxzcGFuIGNsYXNzPVwiYmRcIj5maXNjYWw8L3NwYW4+LCBhbmQgcmVxdWlyZSB0aGUgdHJhZGVyIHRvIHBheSBzb21ldGhpbmcsIG9yIDxzcGFuIGNsYXNzPVwiYmRcIj5ub24tZmlzY2FsPC9zcGFuPiwgbWFraW5nIGxpZmUgZGlmZmljdWx0IGluIG90aGVyIHdheXMsIHN1Y2ggYXMgcHJvZHVjdCByZXF1aXJlbWVudHMsIGUuZy4sIG1pbGsgdG8gYmUgc29sZCBpbiBnbGFzcyBib3R0bGVzLCBldGMuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmlzY2FsIFJlc3RyaWN0aW9ucyBhdCB0aGUgQm9yZGVyPC9zcGFuPiAmbWRhc2g7IGFwcGxpZXMgdG8gPHNwYW4gY2xhc3M9XCJiZFwiPmV2ZXJ5dGhpbmc8L3NwYW4+IHRoYXQgY2FuIGJlIHRyYW5zYWN0ZWQgKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCBUcmVhc3VyZXM8L3NwYW4+KS4gVGhlIHB1cnBvc2Ugb2YgdGhlIGNoYXJnZSBpcyBpcnJlbGV2YW50ICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TdGF0aXN0aWNhbCBEYXRhIExldnk8L3NwYW4+KSwgYnV0IG1heSAob3IgbWF5IG5vdCAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJyZXNjaWFuaTwvc3Bhbj4pIGJlIGp1c3RpZmllZCBpZiBpdCYjODIxNztzIGluIGZhY3QgbW9uZXkgZm9yIDxzcGFuIGNsYXNzPVwiYmRcIj5zcGVjaWZpYyBzZXJ2aWNlczwvc3Bhbj47IG9yIHRvIGZ1bGZpbCBhIHJlcXVpcmVtZW50IG9mIEVVIGxhdyAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmF1aHVpczwvc3Bhbj4pIG9yIEludGVybmF0aW9uYWwgTGF3ICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db21taXNzaW9uIHYgTkw8L3NwYW4+KS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5GaXNjYWwgUmVzdHJpY3Rpb25zIG92ZXIgdGhlIEJvcmRlcjwvc3Bhbj4gJm1kYXNoOyA8c3BhbiBjbGFzcz1cImJkXCI+ZG9tZXN0aWMgdGF4YXRpb248L3NwYW4+IGlzIHByb2hpYml0ZWQgaWYgaXQmIzgyMTc7cyBjYWxjdWxhdGVkIDxzcGFuIGNsYXNzPVwiYmRcIj5kaWZmZXJlbnRseTwvc3Bhbj4gZm9yIGltcG9ydGVkIHByb2R1Y3RzICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Cb2JpZTwvc3Bhbj4pOyBpZiBpdCYjODIxNztzIGNhbGN1bGF0ZWQgPHNwYW4gY2xhc3M9XCJiZFwiPmlkZW50aWNhbGx5PC9zcGFuPiBidXQgdGhlIHByb2NlZWRzIHByb3RlY3QgdGhlIGRvbWVzdGljIHByb2R1Y3QgKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNhcG9sb25nbzwvc3Bhbj4pOyBpZiBpdCBvbmx5IGFwcGxpZXMgdG8gaW1wb3J0cyAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29tbWlzc2lvbiB2IEZyYW5jZTwvc3Bhbj4pLCBldGMuIFRoZXJlIG1heSBiZSBwdWJsaWMgcG9saWN5IGV4Y2VwdGlvbnMgKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNoZW1pYWw8L3NwYW4+KS4gPHNwYW4gY2xhc3M9XCJiZFwiPlNpbWlsYXJpdHk8L3NwYW4+IG1heSBsaWUgaW4gdGhlIGFjY2VwdGFiaWxpdHkgb2Ygc3Vic3RpdHV0ZXMgKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkpvaG5ueSBXYWxrZXI8L3NwYW4+KS4iLAogICAgICAgICJUaGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGlyZWN0aXZlIG9uIEV4Y2lzZSBEdXR5PC9zcGFuPiBkb2VzIG5vdCBwcmVjbHVkZSB5b3UgZnJvbSBjb2xsZWN0aXZlIHB1cmNoYXNlcyB3aXRoIHlvdXIgcGFscyAgKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkpvdXN0cmE8L3NwYW4+KSIsCiAgICAgICAgIkNmLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5RdWFudGl0aXZlIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50PC9zcGFuPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiQXJ0IDMwIFRGRVUiLAogICAgICAgICJBcnQgMTEwIFRGRVUiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkludGVybmFsIE1hcmtldCAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBGaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEFydCAzMCBURkVVICZtZGFzaDsgQXJ0IDExMCBURkVVIiwKICAgICJOQU1FIjogIkZpc2NhbCBSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCIsCiAgICAiTlVNQkVSIjogIjcwIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIG92ZXIgdGhlIEJvcmRlciIsCiAgICAgICAgIkludGVybmFsIE1hcmtldCAtIERpc2N1c3Npb24iLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIGF0IHRoZSBCb3JkZXIiLAogICAgICAgICJIYXJtb25pemF0aW9uIiwKICAgICAgICAiUXVhbnRpdGF0aXZlIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICAgICAiVGhlIEludGVybmFsIE1hcmtldCBhbmQgRnJlZSBNb3ZlbWVudCIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IElJSSAtIEFjY2Vzc2lvbiB0byB0aGUgUHJlc2VudCIsCiAgICAgICAgIkNpdGl6ZW5zIFJpZ2h0cyBEaXJlY3RpdmUgLSBEaWdlc3RlZCIsCiAgICAgICAgIk1lYW5pbmcgb2YgV29ya2VyIGluIEFydCA0NSIsCiAgICAgICAgIlJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMiLAogICAgICAgICIoSm9pbmVkKSBLYWRpIGFuZCBBbCBCYXJha2FhdCIsCiAgICAgICAgIkVVIENpdGl6ZW5zaGlwIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPkF0IHRoZSBCb3JkZXI8L3NwYW4+PC9zcGFuPjxicj5UaGlzIHNpdHVhdGlvbiBpcyBwcm92aWRlZCBmb3IgYnkgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDMwIFRGRVU8L3NwYW4+LCByYXRoZXIgYSBsYWNvbmljIHByb3Zpc2lvbiBwcm9oaWJpdGluZyA8c3BhbiBjbGFzcz1cImJkXCI+Y3VzdG9tcyBkdXRpZXM8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+Y2hhcmdlcyBoYXZpbmcgZXF1aXZhbGVudCBlZmZlY3Q8L3NwYW4+LiBUaG9zZSwgYWZ0ZXIgYWxsLCB3b3VsZCBiZSB0aGUgdmVyeSBmaXJzdCBvYnN0YWNsZXMgdGhhdCBjb3VsZCBiZSBlbmNvdW50ZXJlZCBieSBhIHRyYWRlciB3aXNoaW5nIHRvIHRha2UgYWR2YW50YWdlIG9mIHRoZSBzaW5nbGUgbWFya2V0IGluIHRoZSBtb3N0IGZ1bmRhbWVudGFsbHkgd2F5IGhlIGNhbi4gVGhlIGF0dGl0dWRlIG9mIHRoZSBFQ0osIHRoZXJlZm9yZSwgaGFzIGJlZW4gPHNwYW4gY2xhc3M9XCJiZFwiPnVuY29tcHJvbWlzaW5nPC9zcGFuPi4gVW5zdXJwcmlzaW5nbHksIHRoZSBjYXNlcyByZXZvbHZlIGFyb3VuZCB0aGUgc2Vjb25kIGxpbWIgb2YgdGhlIHByb2hpYml0aW9uLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+Q2hhcmdlcyBIYXZpbmcgRXF1aXZhbGVudCBFZmZlY3Q8L3NwYW4+PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbW1pc3Npb24gdiBJdGFseSAoQXJ0IFRyZWFzdXJlcyk8L3NwYW4+LCB0aGUgcHJvaGliaXRpb24gb2YgQXJ0IDMwIHdhcyBmb3VuZCB0byBhcHBseSB0byBhbnl0aGluZyA8c3BhbiBjbGFzcz1cImJkXCI+Y2FwYWJsZSBvZiBiZWluZyBzdWJqZWN0IHRvIGEgY29tbWVyY2lhbCB0cmFuc2FjdGlvbjwvc3Bhbj48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+RGl0dG8gaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGlhbWFudGFyYmVpZGVyczwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSA8c3BhbiBjbGFzcz1cImJkXCI+cHVycG9zZTwvc3Bhbj4gb2YgdGhlIGNoYXJnZSBpcyBpcnJlbGV2YW50ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29tbWlzc2lvbiB2IEl0YWx5IChTdGF0aXN0aWNhbCBEYXRhIExldnkpPC9zcGFuPiwgaW4gd2hpY2ggdGhlIGNvdXJ0IGhlbGQgPHNwYW4gY2xhc3M9XCJiZFwiPmFueSBwZWN1bmlhcnkgY2hhcmdlPC9zcGFuPiBpbXBvc2VkIHdoZW4gYSBwcm9kdWN0IGNyb3NzZWQgYSBib3JkZXIgaXMgcHJvaGliaXRlZC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFzIGlzIHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+cmVjaXBpZW50PC9zcGFuPiBvZiB0aGUgY2hhcmdlICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2Fkc2t5PC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+RXhjZXB0aW9uczwvc3Bhbj48L3NwYW4+IiwKICAgICAgICAiSG93ZXZlciwgdGhlcmUgYXJlIDxzcGFuIGNsYXNzPVwiYmRcIj50aHJlZTwvc3Bhbj4gaW5zdGFuY2VzIHdoZXJlIGEgY2hhcmdlIGxldmllZCBieSBjdXN0b21zIGlzIG5vdCBhIGJyZWFjaCBvZiBBcnQgMzAgJm1kYXNoOyIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkZvciBzZXJ2aWNlcyBwZXJmb3JtZWQgYnkgY3VzdG9tcyA8c3BhbiBjbGFzcz1cImJkXCI+c3BlY2lmaWMgYW5kIHByb3BvcnRpb25hbDwvc3Bhbj4gdG8gdGhlIGluZGl2aWR1YWwuPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJyZXNjaWFuaTwvc3Bhbj4sIHRoZXJlIHdhcyBwcm9wb3J0aW9uYWxpdHkgYnV0IG5vIHNwZWNpZmljaXR5LCBzbyB0aGUgY2hhcmdlIHdhcyBub3QgZXhlbXB0IGZyb20gQXJ0IDMwLjwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5DaGFyZ2VzIHJlbGF0ZWQgdG8gcmVxdWlyZW1lbnRzIG9mIDxzcGFuIGNsYXNzPVwiYmRcIj5FVSBsYXc8L3NwYW4+Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CYXVodWlzPC9zcGFuPiwgd2hpY2ggcmVsYXRlZCB0byB2ZXRlcmluYXJ5IGluc3BlY3Rpb25zIG9mIGxpdmVzdG9jayBtYW5kYXRlZCBieSB0aGUgRVUuPC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkNoYXJnZXMgcmVsYXRlZCB0byByZXF1aXJlbWVudHMgb2YgPHNwYW4gY2xhc3M9XCJiZFwiPkludGVybmF0aW9uYWwgbGF3PC9zcGFuPi48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29tbWlzc2lvbiB2IE5MPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+PC9vbD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkludGVybmFsIE1hcmtldCIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgR29vZHMiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkFydCAzMCBURkVVIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJJbnRlcm5hbCBNYXJrZXQgJm1kYXNoOyBGcmVlIE1vdmVtZW50IG9mIEdvb2RzICZtZGFzaDsgRmlzY2FsIFJlc3RyaWN0aW9ucyAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBBcnQgMzAgVEZFVSIsCiAgICAiTkFNRSI6ICJGaXNjYWwgUmVzdHJpY3Rpb25zIGF0IHRoZSBCb3JkZXIiLAogICAgIk5VTUJFUiI6ICI3MSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICAgICAiSGFybW9uaXphdGlvbiIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgb3ZlciB0aGUgQm9yZGVyIiwKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IC0gRGlzY3Vzc2lvbiIsCiAgICAgICAgIlRoZSBJbnRlcm5hbCBNYXJrZXQgYW5kIEZyZWUgTW92ZW1lbnQiLAogICAgICAgICJRdWFudGl0YXRpdmUgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQiLAogICAgICAgICJNZWFuaW5nIG9mIFdvcmtlciBpbiBBcnQgNDUiLAogICAgICAgICJFZmZlY3RpdmVuZXNzIGFuZCBTY29wZSBvZiBBcnQgNDUiLAogICAgICAgICJSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCBvZiBXb3JrZXJzIiwKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSUkgLSBFRlRBIHRvIE5pY2UiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMgLSBTdW1tYXJ5IiwKICAgICAgICAiKEpvaW5lZCkgS2FkaSBhbmQgQWwgQmFyYWthYXQiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkNvbmNlcHQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIio8c3BhbiBjbGFzcz1cInVkXCI+T3ZlciB0aGUgQm9yZGVyPC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMTEwIFRGRVU8L3NwYW4+IHByb2hpYml0cyB0aGUgaW1wb3NpdGlvbiBvZiB0YXhlcyBvbiBpbXBvcnRlZCBwcm9kdWN0cyBzaW1pbGFyIHRvIGRvbWVzdGljIHByb2R1Y3RzIGluIGEgbWFubmVyIHRoYXQgZGlzY3JpbWluYXRlcyBkaXJlY3RseSBvciBpbmRpcmVjdGx5IChwYXJhIDEpIG9yIGluIGEgd2F5IHRoYXQgaW5kaXJlY3RseSBwcm90ZWN0cyBkb21lc3RpYyBwcm9kdWN0cyAocGFyYSAyKS4gIFNvIHRvIGEgZGVncmVlIGl0IG1lZGRsZXMgaW4gdGhlIGludGVybmFsIHRheCBhZmZhaXJzIG9mIG1lbWJlciBzdGF0ZXMuIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29tbWlzc2lvbiB2IEZyYW5jZTwvc3Bhbj4sIGhvd2V2ZXIsIGV4cGxhaW5lZCB0aGF0IHN0YXRlcyBkbyByZXRhaW4gZmlzY2FsIGF1dG9ub215ICZtZGFzaDsgYnV0IHRoYXQgQXJ0IDExMCBvYmxpZ2VzIHRoZW0gdG8gZXhlcmNpc2UgJiM4MjE2O2Zpc2NhbCBuZXV0cmFsaXR5JiM4MjE3OyBiZXR3ZWVuIGltcG9ydGVkIGFuZCBkb21lc3RpYyBwcm9kdWN0cy48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+Q29uc2lkZXJhdGlvbnM8L3NwYW4+PC9zcGFuPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMTEwIFRGRVU8L3NwYW4+IG9yIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAzMCBURkVVPC9zcGFuPj88L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNhcG9sb25nbyB2IE1heWE8L3NwYW4+IGVzdGFibGlzaGVkIHRoYXQgYW4gaW50ZXJuYWwgdGF4LCBhcHBsaWVkIGluZGlzY3JpbWluYXRlbHkgdG8gZG9tZXN0aWMgYW5kIGltcG9ydGVkIHByb2R1Y3RzLCBtYXkgYmUgYW4gQXJ0IDMwIGJyZWFjaCwgc2hvdWxkIHRoZSBtb25leSBpdCByYWlzZXMgYmUgdXNlZCB0byBzdXBwb3J0IHRoZSBwcm9kdWN0IG9uIHdoaWNoIGl0JiM4MjE3O3MgbGV2aWVkLiBUaGF0LCBpbiBlZmZlY3QsIHdvdWxkIGJlIGEgcmViYXRlIGZvciBkb21lc3RpYyBwcm9kdWNlcnMsIGJ1dCBub3QgdGhlIGltcG9ydGVycyAmbWRhc2g7IGFuZCB0aGVyZWZvcmUgZGlzY3JpbWluYXRpb24uIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlNjb3BlPC9zcGFuPiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJvYmllPC9zcGFuPiBlc3RhYmxpc2hlZCBBcnQgMTEwIHRvIGJlIGVuZ2FnZWQgaWYgdGhlIHRheCBpcyA8c3BhbiBjbGFzcz1cImJkXCI+Y2FsY3VsYXRlZCBkaWZmZXJlbnRseTwvc3Bhbj4gZm9yIGltcG9ydHMsIGV2ZW4gaWYgdGhlIHJlc3VsdGFudCBkaXNjcmVwYW5jeSBpcyBuZWdsaWdpYmxlIChvciBkaXNjcmltaW5hdGVzIDxzcGFuIGNsYXNzPVwiYmRcIj5hZ2FpbnN0PC9zcGFuPiBkb21lc3RpYyBwcm9kdWNlcnMsIGFzIGl0IGRpZCB0aGVyZSkuIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SHVtYmxvdDwvc3Bhbj4gZXN0YWJsaXNoZWQgdGhhdCBhIHRheCB0aGF0IGluIHByYWN0aWNlIGFwcGxpZWQgPHNwYW4gY2xhc3M9XCJiZFwiPm9ubHk8L3NwYW4+IHRvIGltcG9ydGVycyBpcyBjYXVnaHQgaW4gdGhlIEFydCAxMTAoMSkgbmV0Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlNpbWlsYXJpdHk8L3NwYW4+ICZtZGFzaDsgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Sm9obm55IFdhbGtlcjwvc3Bhbj4sIHRoZSBtZWFuaW5nIG9mIDxzcGFuIGNsYXNzPVwiYmRcIj5zaW1pbGFyPC9zcGFuPiBpbiBBcnQgMTEwIHJlbGF0ZXMgdG8gd2hldGhlciB0aGUgb3JkaW5hcnkgcHVudGVyIHdvdWxkIGFjY2VwdCB0aGUgcHVycG9ydGVkbHktc2ltaWxhciBwcm9kdWN0IGFzIGEgc3Vic3RpdHV0ZS4iLAogICAgICAgICJOYXRpb25hbCB0YXggbWVhc3VyZXMgbWF5IDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+IGNyeXN0YWxsaXplIGNvbnN1bWVyIGhhYml0cyAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPldpbmUgYW5kIEJlZXI8L3NwYW4+LiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5FeGNlcHRpb25zPC9zcGFuPiAmbWRhc2g7IGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNoZW1pYWw8L3NwYW4+LCB0aGV5IG1heSBiZSBtYWRlIGZvciB0YXhlcyB0aGF0IGRpc2NyaW1pbmF0ZSwgYW1vdW50aW5nIHRvIGJyZWFjaGVzIG9mIEFydCAxMTAoMSkgJm1kYXNoOyBidXQgd2hpY2ggYXJlIGluIHRoZSBwdWJsaWMgaW50ZXJlc3QsIG9yIGFzIHRoZSBqdWRnbWVudCBwdXRzIGl0LCAmIzgyMTY7Y29tcGF0aWJsZSB3aXRoIHRyZWF0aWVzIGFuZCBzZWNvbmRhcnkgbGVnaXNsYXRpb24uJiM4MjE3OyAgPHNwYW4gY2xhc3M9XCJpbGNcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5IdW1ibG90PC9zcGFuPiBzZWVtcyBhIGxpdHRsZSBpbmNvbnNpc3RlbnQgd2l0aCB0aGlzLjwvc3Bhbj4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkludGVybmFsIE1hcmtldCIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgR29vZHMiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkFydCAxMTAgVEZFVSIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiSW50ZXJuYWwgTWFya2V0ICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyBGcmVlIE1vdmVtZW50IG9mIEdvb2RzICZtZGFzaDsgQXJ0IDExMCBURkVVIiwKICAgICJOQU1FIjogIkZpc2NhbCBSZXN0cmljdGlvbnMgb3ZlciB0aGUgQm9yZGVyIiwKICAgICJOVU1CRVIiOiAiNzIiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCIsCiAgICAgICAgIkludGVybmFsIE1hcmtldCAtIERpc2N1c3Npb24iLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIGF0IHRoZSBCb3JkZXIiLAogICAgICAgICJIYXJtb25pemF0aW9uIiwKICAgICAgICAiUXVhbnRpdGF0aXZlIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICAgICAiVGhlIEludGVybmFsIE1hcmtldCBhbmQgRnJlZSBNb3ZlbWVudCIsCiAgICAgICAgIkVmZmVjdGl2ZW5lc3MgYW5kIFNjb3BlIG9mIEFydCA0NSIsCiAgICAgICAgIkRpcmVjdGl2ZXMiLAogICAgICAgICJQb3R0ZWQgSGlzdG9yeSBJSSAtIEVGVEEgdG8gTmljZSIsCiAgICAgICAgIlJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMgLSBTdW1tYXJ5IiwKICAgICAgICAiSnVzdGlmaWNhdGlvbnMgZm9yIERpc2NyaW1pbmF0aW9uIHVuZGVyIEFydCA0NSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiSW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmlzY2FsIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IG9mIEdvb2RzPC9zcGFuPiwgdGhlIENvdXJ0IGlzIGVzc2VudGlhbGx5IHF1aXRlIGNhcmVmdWwgdG8gPHNwYW4gY2xhc3M9XCJiZFwiPmF2b2lkPC9zcGFuPiB3YWdnbGluZyBpdHMgZmluZ2VyIGFyb3VuZCBpbiB0aGUgd2FzcFx1MjAxOXMgbmVzdCBvZiBpbnRlcm5hbCB0YXhhdGlvbi4iLAogICAgICAgICJCdXkgc3R1ZmYgaW4gRnJhbmNlLCBjb21lIGJhY2sgaG9tZSBhbmQgZW5qb3kgaXQgJm1kYXNoOyBzaG91bGQgeW91IGJlIHRheGVkIGluIHRoZSBjb3VudHJ5IG9mIG9yaWdpbiBvciB0aGUgY291bnRyeSBvZiBkZXN0aW5hdGlvbj8iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5NZW1iZXIgc3RhdGVzIGFyZW4mIzgyMTc7dCB0aGF0IGhhcHB5IGFib3V0IHRoZSBzdGF0dXMgcXVvLCBhcywgYW1hemluZ2x5LCBwZW9wbGUgcHJlZmVyIGJ1eWluZyB0aGluZ3MgaW4gbWVtYmVyIHN0YXRlcyB0aGF0IGltcG9zZSBsb3dlciB0YXhlcy48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBhZHZhbnRhZ2VzIG9mIHRoZSBjdXJyZW50IGFycmFuZ2VtZW50IGlzIDxzcGFuIGNsYXNzPVwiYmRcIj5zaW1wbGljaXR5PC9zcGFuPi4gTm8gcGFwZXJ3b3JrIGlzIG5lY2Vzc2FyeSwgbm8gYWRtaW5pc3RyYXRpb24uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlBlcnNvbmFsIHYgQnVzaW5lc3M8L3NwYW4+PC9zcGFuPjxicj5UaGUgZGlzdGluY3Rpb24gaXMgaXMgbWFkZSBiZXR3ZWVuIHByb2R1Y3RzIHB1cmNoYXNlZCBmb3IgcGVyc29uYWwgcmVhc29ucywgYW5kIHByb2R1Y3RzIHB1cmNoYXNlZCBmb3IgYnVzaW5lc3MgcmVhc29ucy4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5QZXJzb25hbCBjb25zdW1wdGlvbiBpcyB0YXhlZCBpbiB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmNvdW50cnkgb2YgcHVyY2hhc2U8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Q29tbWVyY2lhbCBjb25zdW1wdGlvbiwgYnkgY29udHJhc3QsIGlzIHRheGVkIGluIDxzcGFuIGNsYXNzPVwiYmRcIj5jb3VudHJ5IG9mIGRlc3RpbmF0aW9uPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIlRoZSBwcmVhbWJsZSBvZiA8c3BhbiBjbGFzcz1cImJkXCI+Q291bmNpbCBEaXJlY3RpdmUgOTEvNjgwIChWQVQpPC9zcGFuPiBoYXMgYSBzdGFiIGF0IGV4cGxhaW5pbmcgdGhlIGNvbnRpbnVpbmcgZGlzY3JlcGFuY3kgJm1kYXNoOyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBkZWFkbGluZSBmb3IgZGV0ZXJtaW5hdGlvbiBvZiB0aGUgZGVmaW5pdGl2ZSBzeXN0ZW0gd2FzIDMxIERlY2VtYmVyIDxzcGFuIGNsYXNzPVwiYmRcIj4xOTkyPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkJ1dCB0aGF0IGRpZG4mIzgyMTc7dCBoYXBwZW4sIGJlY2F1c2Ugbm8tb25lIGNhbiBhZ3JlZS48YnI+PHNwYW4gY2xhc3M9XCJpdFwiPkRlaW5kaSBjZXNzYXZpdCByYXRpb25lLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIlRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EaXJlY3RpdmUgb24gRXhjaXNlIER1dHk8L3NwYW4+IHByb3ZpZGVzIGZvciBob3cgPHNwYW4gY2xhc3M9XCJiZFwiPnByaXZhdGU8L3NwYW4+IGltcG9ydHMgb2YsIGUuZy4sIGNpZ2dpZXMgYW5kIGxhZ2VyLCBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPmNvbW1lcmNpYWw8L3NwYW4+IGltcG9ydHMgYXJlIHRvIGJlIGRpc3Rpbmd1aXNoZWQgYW5kIHRyZWF0ZWQuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbnRlcm5hbCBNYXJrZXQiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgR29vZHMiLAogICAgICAgICJBcnQgMTEwIFRGRVUiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkludGVybmFsIE1hcmtldCAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBGaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEFydCAxMTAgVEZFVSIsCiAgICAiTkFNRSI6ICJJbnRlcm5hbCBNYXJrZXQgLSBEaXNjdXNzaW9uIiwKICAgICJOVU1CRVIiOiAiNzMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgb3ZlciB0aGUgQm9yZGVyIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICAgICAiSGFybW9uaXphdGlvbiIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgYXQgdGhlIEJvcmRlciIsCiAgICAgICAgIlF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCIsCiAgICAgICAgIlRoZSBJbnRlcm5hbCBNYXJrZXQgYW5kIEZyZWUgTW92ZW1lbnQiLAogICAgICAgICJEaXJlY3RpdmVzIiwKICAgICAgICAiRVUgQ2l0aXplbnNoaXAiLAogICAgICAgICJFZmZlY3RpdmVuZXNzIGFuZCBTY29wZSBvZiBBcnQgNDUiLAogICAgICAgICIoSm9pbmVkKSBLYWRpIGFuZCBBbCBCYXJha2FhdCIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IElJIC0gRUZUQSB0byBOaWNlIiwKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSUlJIC0gQWNjZXNzaW9uIHRvIHRoZSBQcmVzZW50IgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJEaXJlY3RpdmUiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+QXJ0aWNsZSA3PC9zcGFuPjwvc3Bhbj48YnI+UHJvdmlkZXMgZm9yIHRoZSBzaXR1YXRpb24gb2YgcHJpdmF0ZSBpbmRpdmlkdWFscyBhY3F1aXJpbmcgYW5kIHRyYW5zcG9ydGluZyA8c3BhbiBjbGFzcz1cImJkXCI+Zm9yIHRoZWlyIG93biB1c2U8L3NwYW4+LiBUaGV5IGFyZSB0byBiZSBzdWJqZWN0IHRvIGV4Y2lzZSBkdXR5IGluIHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+Y291bnRyeSBvZiBwdXJjaGFzZTwvc3Bhbj4uIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+V2hhdCBhYm91dCB2YW5zIGZ1bGwgb2YgY2lncywgYXBwYWxsaW5nIEdlcm1hbiBiZWVyIGFuZCBldmVuIHdvcnNlIEZyZW5jaCB3aW5lPzwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5BcnRpY2xlIDg8L3NwYW4+PC9zcGFuPjxicj5UZWxsaW5nIGEgY29tbWVyY2lhbCBpbXBvcnQgZnJvbSBhIHBlcnNvbmFsIG9uZSBpcyBhIG1hdHRlciBvZiB0YWtpbmcgYWNjb3VudCBvZiAoaSkgdGhlIGltcG9ydGVyJiM4MjE3O3MgY29tbWVyY2lhbCBzdGF0dXMsIGRvY3VtZW50cyByZWxhdGVkIHRvIHRoZSBwcm9kdWN0cywgYW5kIG9mIGNvdXJzZSB0aGUgcXVhbnRpdGllcyBpbnZvbHZlZC4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5HZW5lcm91cyBndWlkZWxpbmVzIGFyZSBnaXZlbiwgYmVsb3cgd2hpY2ggY3VzdG9tcyBjYW4mIzgyMTc7dCBlYXNpbHkgZnVjayB3aXRoIHlvdSAmbWRhc2g7IDgwMCBmYWdzLCAxMDAgYm90dGxlcyBvZiB3aW5lLCBldGMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Ob3RlIHRoZSBhcHBhbGxpbmcgY3VzdG9tcyBiYXN0YXJkcyBhdCBEb3ZlciBoYWQgYSBwb2xpY3kgb2YgPHNwYW4gY2xhc3M9XCJiZFwiPmF1dG9tYXRpY2FsbHkga2VlcGluZyB5b3VyIGNhciAmYW1wOyBjb250ZW50czwvc3Bhbj4gdW50aWwsIGEgY291cGxlIG9mIHdlZWtzIGxhdGVyLCB0aGV5JiM4MjE3O2QgZGVjaWRlZCB3aGF0IHRvIGRvIHdpdGggeW91Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5IYXBwaWx5LCB0aGUgQ291cnQgaGFkIG5vIHRyb3VibGUgaW4gZGVjaWRpbmcgdGhpcyB0byBiZSBhIHZpb2xhdGlvbiBvZiB0aGUgZGlyZWN0aXZlLjwvc3Bhbj48L2xpPjwvdWw+PC91bD4iLAogICAgICAgICJUaGUgc2VtaW5hbCBjYXNlIG9uIHRoZSBkaWZmZXJlbmNlIGlzLCA8c3BhbiBjbGFzcz1cIml0XCI+YW1hemluZ2x5PC9zcGFuPiwgbm90IGFib3V0IGEga251Y2tsZS1kcmFnZ2luZyBFbmdsaXNoIHByb2xlIGZpbGxpbmcgaGlzIHJhcGlzdC12YW4gdG8gdGhlIGJyaW0gd2l0aCAgbWVyY2hhbmRpc2UgZnJvbSB0aGUgbGVmdC1tb3N0IHNoZWxmIG9mIHdoaWNoZXZlciBDYXJyZWZvdXIgdG8gd2hpY2ggaGlzIHNhdG5hdiBsZWQgaGltLCBidXQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Sm91c3RyYTwvc3Bhbj4sIGluIHdoaWNoIGFuIGFmZmFibGUgRHV0Y2ggcGlzcy1hcnRpc3QgcmFuIGEgc29ydCBvZiB3aW5lLWNsdWIgZm9yIGhpcyBwYWxzLiIKICAgIF0sCiAgICAiQUtBIjogIkRpcmVjdGl2ZSBvbiBFeGNpc2UgRHV0eSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiQXJ0IDExMCBURkVVIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRVUiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkludGVybmFsIE1hcmtldCAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBGaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEFydCAxMTAgVEZFVSIsCiAgICAiTkFNRSI6ICJEaXJlY3RpdmUgb24gRXhjaXNlIER1dHkgOTIvMTIgKEFsY29ob2wsIFRvYmFjY28sIFBldHJvbCkiLAogICAgIk5VTUJFUiI6ICI3NCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2l0aXplbnMgUmlnaHRzIERpcmVjdGl2ZSAyMDA0LzM4IC0gSUkiLAogICAgICAgICJDaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIDIwMDQvMzggLSBJIiwKICAgICAgICAiRGlyZWN0aXZlIDIwMDQvMzggQXJ0cyAyNy0zMyIKICAgIF0KfSwKewogICAgIllFQVIiOiAiMTk2OCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJOVU1CRVIiOiAiNzUiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFueXRoaW5nIHRoYXQgY2FuIGJlIHRoZSBzdWJqZWN0IG9mIGEgY29tbWVyY2lhbCB0cmFuc2FjdGlvbiwgaG93ZXZlciB2YWx1YWJsZSwgcmFyZSBvciBpbXBvcnRhbnQsIGlzIGludGVuZGVkIHRvIGJlIGNvdmVyZWQgYnkgdGhlIHJlc3RyaWN0aW9uIG9mIGNoYXJnZXMgb2YgZXF1aXZhbGVudCBlZmZlY3QgdG8gY3VzdG9tcyBkdXRpZXMgdW5kZXIgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDMwIFRGRVU8L3NwYW4+LiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJBcnQgMzAgVEZFVSIsCiAgICAgICAgIkN1c3RvbXMgRHV0aWVzIgogICAgXSwKICAgICJOQU1FIjogIkNvbW1pc3Npb24gdiBJdGFseSAoQXJ0IFRyZWFzdXJlcykiLAogICAgIiNDQVNFTlVNIjogIkMtMjYvNjIiLAogICAgIiNBS0EiOiAiVmFuIEdlbmQiLAogICAgIiNDSVRBVElPTiI6ICJWYW4gR2VuZCBlbiBMb29zIHYgTmVkZXJsYW5kc2UgQWRtaW5pc3RyYXRpZSBkZXIgQmVsYXN0aW5nZW4gWzE5NjNdIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDYWRza3kiLAogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKFN0YXRpc3RpY2FsIERhdGEgTGV2eSkiLAogICAgICAgICJCYXVodWlzIHYgTmV0aGVybGFuZHMiLAogICAgICAgICJDYXBvbG9uZ28gdiBNYXlhIiwKICAgICAgICAiQnJlc2NpYW5pIHYgSXRhbGlhbiBGaW5hbmNlIEFkbWluaXN0cmF0aW9uIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFRoZSBOZXRoZXJsYW5kcyIsCiAgICAgICAgIkJvYmllIEdldHJhZW5rZXZlcnRyaWViIHYgSGF1cHR6b2xsYW10IEFhY2hlbi1Ob3JkIiwKICAgICAgICAiQ2hlbWlhbCBGYXJtYWNldXRpY2kgdiBEQUYiLAogICAgICAgICJDb21taXNzaW9uIHYgRnJhbmNlIiwKICAgICAgICAiSHVtYmxvdCB2IERpcmVjdGV1ciBkZXMgU2VydmljZXMgRmlzY2F1eCIsCiAgICAgICAgIkpvaG4gV2Fsa2VyIHYgTWluaXN0ZXJpZXQgZm9yIFNrYXR0ZXIiLAogICAgICAgICJKb3VzdHJhIgogICAgXSwKICAgICJBS0EiOiAiQXJ0IFRyZWFzdXJlcyIsCiAgICAiQ0lUQVRJT04iOiAiQ29tbWlzc2lvbiB2IEl0YWx5IChyZTogQXJ0IFRyZWFzdXJlcykgWzE5NjhdIEVDUiA0MjM6IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRVUiLAogICAgICAgICJJVCIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTcvNjgiLAogICAgIkNBVEVHT1JZIjogIkludGVybmFsIE1hcmtldCAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBGaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgQXJ0IDMwIFRGRVUgJm1kYXNoOyBDdXN0b21zIER1dGllcyIsCiAgICAiI0ZMQUdTIjogIk5MIiwKICAgICIjTkFNRSI6ICJWYW4gR2VuZCBlbiBMb29zIHYgTmVkZXJsYW5kc2UgQWRtaW5pc3RyYXRpZSBkZXIgQmVsYXN0aW5nZW4iLAogICAgIiNDQVRFR09SWSI6ICJJbnRlcm5hbCBNYXJrZXQ7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHM7IEZpc2NhbCBSZXN0cmljdGlvbnM7ICBGaXNjYWwgUmVzdHJpY3Rpb25zOyBBcnQgMzAgVEZFVSIKfSwKewogICAgIllFQVIiOiAiMTk2OSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJBbnkgcGVjdW5pYXJ5IGNoYXJnZSBpbXBvc2VkIG9uIGdvb2RzIGJlY2F1c2UgdGhleSBoYXZlIGNyb3NzZWQgYSBib3JkZXIsIGhvd2V2ZXIgc21hbGwsIGFuZCBpcnJlc3BlY3RpdmUgb2YgdGhlIHB1cnBvc2Ugb2YgdGhlIGNoYXJnZSwgaXMgcHJvaGliaXRlZCBieSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMzAgVEZFVTwvc3Bhbj4gYXMgYSBjaGFyZ2Ugb2YgZXF1aXZhbGVudCBlZmZlY3QgdG8gYSBjdXN0b21zIGR1dHkuIiwKICAgICAgICAiRnJvbSBqdWRnbWVudCAmbWRhc2g7ICYjODIyMDs3LiBJdCBmb2xsb3dzIGZyb20gdGhlIHN5c3RlbSBhcyBhIHdob2xlIGFuZCBmcm9tIHRoZSBnZW5lcmFsIGFuZCBhYnNvbHV0ZSBuYXR1cmUgb2YgdGhlIHByb2hpYml0aW9uIG9mIGFueSBjdXN0b21zIGR1dHkgYXBwbGljYWJsZSB0byBnb29kcyBtb3ZpbmcgYmV0d2VlbiBNZW1iZXIgU3RhdGVzIHRoYXQgY3VzdG9tcyBkdXRpZXMgYXJlIHByb2hpYml0ZWQgaW5kZXBlbmRlbnRseSBvZiBhbnkgY29uc2lkZXJhdGlvbiBvZiB0aGUgcHVycG9zZSBmb3Igd2hpY2ggdGhleSB3ZXJlIGludHJvZHVjZWQgYW5kIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmV2ZW51ZSBvYnRhaW5lZCB0aGVyZWZyb20uIiwKICAgICAgICAiVGhlIGp1c3RpZmljYXRpb24gZm9yIHRoaXMgcHJvaGliaXRpb24gaXMgYmFzZWQgb24gdGhlIGZhY3QgdGhhdCBhbnkgcGVjdW5pYXJ5IGNoYXJnZSwgaG93ZXZlciBzbWFsbCwgaW1wb3NlZCBvbiBnb29kcyBieSByZWFzb24gb2YgdGhlIGZhY3QgdGhhdCB0aGV5IGNyb3NzIGEgZnJvbnRpZXIgY29uc3RpdHV0ZXMgYW4gb2JzdGFjbGUgdG8gdGhlIG1vdmVtZW50IG9mIHN1Y2ggZ29vZHMmIzgyMjE7LiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJBcnQgMzAgVEZFVSIsCiAgICAgICAgIkN1c3RvbXMgRHV0aWVzIgogICAgXSwKICAgICJOQU1FIjogIkNvbW1pc3Npb24gdiBJdGFseSAoU3RhdGlzdGljYWwgRGF0YSBMZXZ5KSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2Fkc2t5IiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEl0YWx5IChBcnQgVHJlYXN1cmVzKSIsCiAgICAgICAgIkJyZXNjaWFuaSB2IEl0YWxpYW4gRmluYW5jZSBBZG1pbmlzdHJhdGlvbiIsCiAgICAgICAgIkNhcG9sb25nbyB2IE1heWEiLAogICAgICAgICJCYXVodWlzIHYgTmV0aGVybGFuZHMiLAogICAgICAgICJDb21taXNzaW9uIHYgVGhlIE5ldGhlcmxhbmRzIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFVLIChXaW5lIGFuZCBCZWVyKSIsCiAgICAgICAgIkNoZW1pYWwgRmFybWFjZXV0aWNpIHYgREFGIiwKICAgICAgICAiSHVtYmxvdCB2IERpcmVjdGV1ciBkZXMgU2VydmljZXMgRmlzY2F1eCIsCiAgICAgICAgIkJvYmllIEdldHJhZW5rZXZlcnRyaWViIHYgSGF1cHR6b2xsYW10IEFhY2hlbi1Ob3JkIiwKICAgICAgICAiSm91c3RyYSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBGcmFuY2UiCiAgICBdLAogICAgIk5VTUJFUiI6ICI3NiIsCiAgICAiQUtBIjogIlN0YXRpc3RpY2FsIERhdGEgTGV2eSIsCiAgICAiQ0lUQVRJT04iOiAiQ29tbWlzc2lvbiB2IEl0YWx5IChTdGF0aXN0aWNhbCBEYXRhIExldnkpIFsxOTY5XSBFQ1IgMTkzOiIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkVVIiwKICAgICAgICAiSVQiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0yNC82OCIsCiAgICAiQ0FURUdPUlkiOiAiSW50ZXJuYWwgTWFya2V0ICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyAgQXJ0IDMwIFRGRVUgJm1kYXNoOyBDdXN0b21zIER1dGllcyIKfSwKewogICAgIllFQVIiOiAiMTk3NSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJBIHN5c3RlbSBvZiBjb21wdWxzb3J5IGluc3BlY3Rpb24vY2VydGlmaWNhdGlvbiBvZiBnb29kcyBpbXBvcnRlZCBpbnRvIGEgbWVtYmVyIHN0YXRlLCBmb3Igd2hpY2ggYSBjaGFyZ2UgaXMgbGV2aWVkLCBpcyBub3QgZXhlbXB0IGZyb20gcHJvaGliaXRpb24gdW5kZXIgQXJ0IDMwIGp1c3QgYmVjYXVzZSB0aGUgcmVjaXBpZW50IG9mIHRoZSBjaGFyZ2UgaXMgbm90IGl0c2VsZiBhIGxpbWIgb2YgdGhlIHN0YXRlLiIsCiAgICAgICAgIk9wZXJhdGl2ZSBwYXJ0IG9mIGp1ZGdtZW50ICZtZGFzaDsgJiM4MjIwO0EgY2hhcmdlIGltcG9zZWQgYnkgcmVhc29uIG9mIHRoZSBjcm9zc2luZyBvZiBhIGZyb250aWVyLCByZWxhdGluZyB0byBhIG1hbmRhdG9yeSBpbnNwZWN0aW9uIG9mIHRoZSBxdWFsaXR5IG9mIHByb2R1Y3RzIGZvciBleHBvcnQgYW5kIHJlc3VsdGluZyBpbiB0aGUgaXNzdWUgb2YgYSBjZXJ0aWZpY2F0ZSBhbmQgaW4gdGhlIGFmZml4aW5nIG9mIGEgbmF0aW9uYWwgZXhwb3J0IHN0YW1wLCBjb25zdGl0dXRlcyBhIGNoYXJnZSBoYXZpbmcgYW4gZWZmZWN0IGVxdWl2YWxlbnQgdG8gYSBjdXN0b21zIGR1dHkgb24gZXhwb3J0cywgYXMgcHJvaGliaXRlZCBpbiB0cmFkZSBiZXR3ZWVuIHRoZSBvcmlnaW5hbCBNZW1iZXIgU3RhdGVzIHdpdGggZWZmZWN0IGZyb20gMSBKYW51YXJ5IDE5NjIgaW4gcHVyc3VhbmNlIG9mIEFydGljbGUgMTYgb2YgdGhlIFRyZWF0eSwgYW5kIHRoaXMgYXBwbGllcyBldmVuIGlmIHRoZSByZWNpcGllbnQgb2YgdGhlIHJldmVudWUgZnJvbSB0aGUgY2hhcmdlIGlzIGEgYm9keSBkaXN0aW5jdCBmcm9tIHRoZSBTdGF0ZS4mIzgyMjE7IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbnRlcm5hbCBNYXJrZXQiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIkFydCAzMCBURkVVIiwKICAgICAgICAiQ3VzdG9tcyBEdXRpZXMiLAogICAgICAgICJJbnRlcm5hbCBNYXJrZXQiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIkFydCAzMCBURkVVIiwKICAgICAgICAiQ2hhcmdlcyBmb3IgU2VydmljZXMgUmVuZGVyZWQiCiAgICBdLAogICAgIk5BTUUiOiAiQ2Fkc2t5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKFN0YXRpc3RpY2FsIERhdGEgTGV2eSkiLAogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKEFydCBUcmVhc3VyZXMpIiwKICAgICAgICAiQnJlc2NpYW5pIHYgSXRhbGlhbiBGaW5hbmNlIEFkbWluaXN0cmF0aW9uIiwKICAgICAgICAiQmF1aHVpcyB2IE5ldGhlcmxhbmRzIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFRoZSBOZXRoZXJsYW5kcyIsCiAgICAgICAgIkNhcG9sb25nbyB2IE1heWEiLAogICAgICAgICJKb2huIFdhbGtlciB2IE1pbmlzdGVyaWV0IGZvciBTa2F0dGVyIiwKICAgICAgICAiSHVtYmxvdCB2IERpcmVjdGV1ciBkZXMgU2VydmljZXMgRmlzY2F1eCIsCiAgICAgICAgIkpvdXN0cmEiLAogICAgICAgICJDaGVtaWFsIEZhcm1hY2V1dGljaSB2IERBRiIsCiAgICAgICAgIkJvYmllIEdldHJhZW5rZXZlcnRyaWViIHYgSGF1cHR6b2xsYW10IEFhY2hlbi1Ob3JkIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEZyYW5jZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjc3IiwKICAgICJDSVRBVElPTiI6ICJXIENhZHNreSBTcEEgdiBJc3RpdHV0byBOYXppb25hbGUgcGVyIGlsIENvbW1lcmNpbyBFc3Rlcm8gWzE5NzVdIEVDUiIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIklUIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtNjMvNzQiLAogICAgIkNBVEVHT1JZIjogIkludGVybmFsIE1hcmtldCAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBGaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgQXJ0IDMwIFRGRVUgJm1kYXNoOyBDdXN0b21zIER1dGllcyAvIEludGVybmFsIE1hcmtldCAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBGaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgQXJ0IDMwIFRGRVUgJm1kYXNoOyBDaGFyZ2VzIGZvciBTZXJ2aWNlcyBSZW5kZXJlZCIKfSwKewogICAgIllFQVIiOiAiMTk3NiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJBIGNoYXJnZSBsZXZpZWQgYXQgdGhlIGJvcmRlciwgd2hhdGV2ZXIgaXQmIzgyMTc7cyBjYWxsZWQgYW5kIGhvd2V2ZXIgaXQmIzgyMTc7cyBhcHBsaWVkLCBkb2VzIG5vdCBlc2NhcGUgdGhlIGFtYml0IG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAzMCBURkVVPC9zcGFuPiYjODIxNjtzIHByb2hpYml0aW9uIGJ5IGp1c3RpZmljYXRpb24gb24gZ3JvdW5kcyBvZiBwdWJsaWMgaGVhbHRoICZtZGFzaDsgZXZlbiBpZiB0aGF0IGp1c3RpZmljYXRpb24gaXMgcmVhc29uYWJsZSBhbmQgaW4gdGhlIHB1YmxpYyBpbnRlcmVzdC4iLAogICAgICAgICJGcm9tIHRoZSBqdWRnbWVudCAmbWRhc2g7ICYjODIyMDsxLiBXaGF0ZXZlciBpdHMgZGVzaWduYXRpb24gYW5kIG1vZGUgb2YgYXBwbGljYXRpb24sIGEgcGVjdW5pYXJ5IGNoYXJnZSB3aGljaCBpcyBpbXBvc2VkIHVuaWxhdGVyYWxseSBvbiBnb29kcyBpbXBvcnRlZCBmcm9tIGFub3RoZXIgTWVtYmVyIFN0YXRlIHdoZW4gdGhleSBjcm9zcyBhIGZyb250aWVyIGNvbnN0aXR1dGVzIGEgY2hhcmdlIGhhdmluZyBhbiBlZmZlY3QgZXF1aXZhbGVudCB0byBhIGN1c3RvbXMgZHV0eS4mIzgyMjE7IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbnRlcm5hbCBNYXJrZXQiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIkFydCAzMCBURkVVIiwKICAgICAgICAiQ2hhcmdlcyBmb3IgU2VydmljZXMgUmVuZGVyZWQiCiAgICBdLAogICAgIk5BTUUiOiAiQnJlc2NpYW5pIHYgSXRhbGlhbiBGaW5hbmNlIEFkbWluaXN0cmF0aW9uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDYWRza3kiLAogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKEFydCBUcmVhc3VyZXMpIiwKICAgICAgICAiQ2Fwb2xvbmdvIHYgTWF5YSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJdGFseSAoU3RhdGlzdGljYWwgRGF0YSBMZXZ5KSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBUaGUgTmV0aGVybGFuZHMiLAogICAgICAgICJCYXVodWlzIHYgTmV0aGVybGFuZHMiLAogICAgICAgICJDb21taXNzaW9uIHYgVUsgKFdpbmUgYW5kIEJlZXIpIiwKICAgICAgICAiSm91c3RyYSIsCiAgICAgICAgIkpvaG4gV2Fsa2VyIHYgTWluaXN0ZXJpZXQgZm9yIFNrYXR0ZXIiLAogICAgICAgICJIdW1ibG90IHYgRGlyZWN0ZXVyIGRlcyBTZXJ2aWNlcyBGaXNjYXV4IiwKICAgICAgICAiQm9iaWUgR2V0cmFlbmtldmVydHJpZWIgdiBIYXVwdHpvbGxhbXQgQWFjaGVuLU5vcmQiLAogICAgICAgICJDaGVtaWFsIEZhcm1hY2V1dGljaSB2IERBRiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjc4IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJUaGUgSXRhbGlhbiBnb3Zlcm5tZW50IGltcG9zZWQgYSBjaGFyZ2Ugb24gaW1wb3J0ZXJzIG9mIHZlZ2V0YWJsZSBwcm9kdWNlLCB0byBjYXJyeSBvdXQgaW5zcGVjdGlvbnMgYXQgdGhlIGJvcmRlciwgZm9yIHRoZSBwcm90ZWN0aW9uIG9mIHB1YmxpYyBoZWFsdGguIgogICAgXSwKICAgICJBS0EiOiAiQnJlc2NpYW5pIiwKICAgICJDSVRBVElPTiI6ICJCcmVzY2lhbmkgdiBJdGFsaWFuIEZpbmFuY2UgQWRtaW5pc3RyYXRpb24gWzE5NzZdIEVDUiAxMjkiLAogICAgIkZMQUdTIjogWwogICAgICAgICJJVCIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTg3Lzc1IiwKICAgICJDQVRFR09SWSI6ICJJbnRlcm5hbCBNYXJrZXQgJm1kYXNoOyBGcmVlIE1vdmVtZW50IG9mIEdvb2RzICZtZGFzaDsgRmlzY2FsIFJlc3RyaWN0aW9ucyAmbWRhc2g7ICBBcnQgMzAgVEZFVSAmbWRhc2g7IENoYXJnZXMgZm9yIFNlcnZpY2VzIFJlbmRlcmVkIgp9LAp7CiAgICAiWUVBUiI6ICIxOTc3IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkNoYXJnZXMgaGF2aW5nIGVxdWl2YWxlbnQgZWZmZWN0IG9mIGN1c3RvbXMgZHV0aWVzLCB3aGljaCB3b3VsZCBiZSBwcm9oaWJpdGVkIGJ5IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAzMCBURkVVPC9zcGFuPiBpZiB0aGV5IHdlcmUgaW1wb3NlZCBieSBtZW1iZXIgc3RhdGVzLCBkbyBub3QgaW5mcmluZ2UgQXJ0IDMwIGlmIHRoZXkgYXJlIHByZXNjcmliZWQgYnkgRVUgbGF3LCBiZWNhdXNlIHRoZXkgYXBwbHkgdG8gYWxsLCBlcXVhbGx5LiBUaGVyZWZvcmUsIHRoZSBjb21wdWxzb3J5IGNoYXJnZSBpbiBxdWVzdGlvbiwgZm9yIHZldGVyaW5hcnkgaW5zcGVjdGlvbnMgZm9yIHB1YmxpYyBoZWFsdGggcHVycG9zZXMsIGlzIG5vdCBhIGJyZWFjaCBvZiBBcnQgMzAuIiwKICAgICAgICAiRnJvbSB0aGUganVkZ21lbnQgJm1kYXNoOyAmIzgyMjA7MjguIFRoZXNlIG1lYXN1cmVzIGFyZSBsYWlkIGRvd24gdW5pbGF0ZXJhbGx5IGJ5IGVhY2ggTWVtYmVyIFN0YXRlIGJ1dCBoYXZlIGJlZW4gbWFkZSBvYmxpZ2F0b3J5IGFuZCB1bmlmb3JtIGluIHRoZSBjYXNlIG9mIGFsbCB0aGUgcHJvZHVjdHMgaW4gcXVlc3Rpb24gd2hpY2hldmVyIHRoZSBleHBvcnRpbmcgTWVtYmVyIFN0YXRlIG9yIHRoZSBNZW1iZXIgU3RhdGUgb2YgZGVzdGluYXRpb24gbWF5IGJlLjxicj4mZW1zcDsmZW1zcDsyOS4gT24gdGhlIG90aGVyIGhhbmQsIHRoZXkgYXJlIG5vdCBwcmVzY3JpYmVkIGJ5IGVhY2ggTWVtYmVyIFN0YXRlIGluIG9yZGVyIHRvIHByb3RlY3Qgc29tZSBpbnRlcmVzdCBvZiBpdHMgb3duIGJ1dCBieSB0aGUgQ291bmNpbCBpbiB0aGUgZ2VuZXJhbCBpbnRlcmVzdCBvZiB0aGUgQ29tbXVuaXR5Ljxicj4mZW1zcDsmZW1zcDszMC4gPHNwYW4gY2xhc3M9XCJiZFwiPlRoZXkgY2Fubm90IHRoZXJlZm9yZSBiZSByZWdhcmRlZCBhcyB1bmlsYXRlcmFsIG1lYXN1cmVzIHdoaWNoIGhpbmRlciB0cmFkZSBidXQgcmF0aGVyIGFzIG9wZXJhdGlvbnMgaW50ZW5kZWQgdG8gcHJvbW90ZSB0aGUgZnJlZSBtb3ZlbWVudCBvZiBnb29kczwvc3Bhbj4sIGluIHBhcnRpY3VsYXIgYnkgcmVuZGVyaW5nIGluZWZmZWN0aXZlIHRoZSBvYnN0YWNsZXMgdG8gdGhpcyBmcmVlIG1vdmVtZW50IHdoaWNoIG1pZ2h0IGJlIGNyZWF0ZWQgYnkgdGhlIG1lYXN1cmVzIGZvciB2ZXRlcmluYXJ5IGFuZCBwdWJsaWMgaGVhbHRoIGluc3BlY3Rpb25zIGFkb3B0ZWQgcHVyc3VhbnQgdG8gQXJ0aWNsZSAzNi48YnI+JmVtc3A7JmVtc3A7MzEuIEluIHRoZXNlIGNpcmN1bXN0YW5jZXMgPHNwYW4gY2xhc3M9XCJiZFwiPmZlZXMgY2hhcmdlZCBmb3IgdmV0ZXJpbmFyeSBhbmQgcHVibGljIGhlYWx0aCBpbnNwZWN0aW9uczwvc3Bhbj4sIHdoaWNoIGFyZSA8c3BhbiBjbGFzcz1cImJkXCI+cHJlc2NyaWJlZCBieSBhIENvbW11bml0eSBwcm92aXNpb248L3NwYW4+LCB3aGljaCBhcmUgdW5pZm9ybSBhbmQgYXJlIHJlcXVpcmVkIHRvIGJlIGNhcnJpZWQgb3V0IGJlZm9yZSBkZXNwYXRjaCB3aXRoaW4gdGhlIGV4cG9ydGluZyBjb3VudHJ5IGRvIG5vdCBjb25zdGl0dXRlIGNoYXJnZXMgaGF2aW5nIGFuIGVmZmVjdCBlcXVpdmFsZW50IHRvIGN1c3RvbXMgZHV0aWVzIG9uIGV4cG9ydHMsIHByb3ZpZGVkIHRoYXQgdGhleSBkbyBub3QgZXhjZWVkIHRoZSBhY3R1YWwgY29zdCBvZiB0aGUgaW5zcGVjdGlvbiBmb3Igd2hpY2ggdGhleSB3ZXJlIGNoYXJnZWQuJiM4MjIxOyIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJBcnQgMzAgVEZFVSIsCiAgICAgICAgIkNoYXJnZXMgZnJvbSBPYmxpZ2F0aW9ucyB1bmRlciBFVSBMYXciCiAgICBdLAogICAgIk5BTUUiOiAiQmF1aHVpcyB2IE5ldGhlcmxhbmRzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDb21taXNzaW9uIHYgVGhlIE5ldGhlcmxhbmRzIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEl0YWx5IChBcnQgVHJlYXN1cmVzKSIsCiAgICAgICAgIkNhcG9sb25nbyB2IE1heWEiLAogICAgICAgICJCcmVzY2lhbmkgdiBJdGFsaWFuIEZpbmFuY2UgQWRtaW5pc3RyYXRpb24iLAogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKFN0YXRpc3RpY2FsIERhdGEgTGV2eSkiLAogICAgICAgICJDYWRza3kiLAogICAgICAgICJDb21taXNzaW9uIHYgRnJhbmNlIiwKICAgICAgICAiQm9iaWUgR2V0cmFlbmtldmVydHJpZWIgdiBIYXVwdHpvbGxhbXQgQWFjaGVuLU5vcmQiLAogICAgICAgICJIdW1ibG90IHYgRGlyZWN0ZXVyIGRlcyBTZXJ2aWNlcyBGaXNjYXV4IiwKICAgICAgICAiSm91c3RyYSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBVSyAoV2luZSBhbmQgQmVlcikiLAogICAgICAgICJKb2huIFdhbGtlciB2IE1pbmlzdGVyaWV0IGZvciBTa2F0dGVyIgogICAgXSwKICAgICJOVU1CRVIiOiAiNzkiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIldlcmUgY2hhcmdlcyBmb3Igb2JsaWdhdG9yeSB2ZXRlcmluYXJ5IGluc3BlY3Rpb25zIG9mIGxpdmVzdG9jayBlbnRlcmluZyB0aGUgTmV0aGVybGFuZHMgYW4gaW5mcmFjdGlvbiBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMzAgVEZFVTwvc3Bhbj4/IgogICAgXSwKICAgICJBS0EiOiAiQmF1aHVpcyIsCiAgICAiQ0lUQVRJT04iOiAiQmF1aHVpcyB2IE5ldGhlcmxhbmRzIFsxOTc3XSBFQ1IgNToiLAogICAgIkZMQUdTIjogWwogICAgICAgICJOTCIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTQ2Lzc2IiwKICAgICJDQVRFR09SWSI6ICJJbnRlcm5hbCBNYXJrZXQgJm1kYXNoOyBGcmVlIE1vdmVtZW50IG9mIEdvb2RzICZtZGFzaDsgRmlzY2FsIFJlc3RyaWN0aW9ucyAmbWRhc2g7ICBBcnQgMzAgVEZFVSAmbWRhc2g7IENoYXJnZXMgZnJvbSBPYmxpZ2F0aW9ucyB1bmRlciBFVSBMYXciCn0sCnsKICAgICJZRUFSIjogIjE5NzciLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQXMgcGVyIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhdWh1aXM8L3NwYW4+LCBjaGFyZ2VzIGVxdWl2YWxlbnQgdG8gY3VzdG9tcyBkdXRpZXMgYXJlIG5vdCBwcm9oaWJpdGVkIGJ5IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAzMCBURkVVPC9zcGFuPiBpZiB0aGV5IGFyZSBpbXBvc2VkIGluIHB1cnN1aXQgb2YgYSByZXF1aXJlbWVudCB1bmRlciBJbnRlcm5hdGlvbmFsIGxhdy4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkludGVybmFsIE1hcmtldCIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgR29vZHMiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIiwKICAgICAgICAiQXJ0IDMwIFRGRVUiLAogICAgICAgICJDaGFyZ2VzIGZyb20gT2JsaWdhdGlvbnMgdW5kZXIgSW50ZXJuYXRpb25hbCBMYXciCiAgICBdLAogICAgIk5BTUUiOiAiQ29tbWlzc2lvbiB2IFRoZSBOZXRoZXJsYW5kcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2Fwb2xvbmdvIHYgTWF5YSIsCiAgICAgICAgIkJhdWh1aXMgdiBOZXRoZXJsYW5kcyIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJdGFseSAoQXJ0IFRyZWFzdXJlcykiLAogICAgICAgICJDYWRza3kiLAogICAgICAgICJCcmVzY2lhbmkgdiBJdGFsaWFuIEZpbmFuY2UgQWRtaW5pc3RyYXRpb24iLAogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKFN0YXRpc3RpY2FsIERhdGEgTGV2eSkiLAogICAgICAgICJDaGVtaWFsIEZhcm1hY2V1dGljaSB2IERBRiIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBGcmFuY2UiLAogICAgICAgICJKb2huIFdhbGtlciB2IE1pbmlzdGVyaWV0IGZvciBTa2F0dGVyIiwKICAgICAgICAiSHVtYmxvdCB2IERpcmVjdGV1ciBkZXMgU2VydmljZXMgRmlzY2F1eCIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBVSyAoV2luZSBhbmQgQmVlcikiLAogICAgICAgICJCb2JpZSBHZXRyYWVua2V2ZXJ0cmllYiB2IEhhdXB0em9sbGFtdCBBYWNoZW4tTm9yZCIKICAgIF0sCiAgICAiTlVNQkVSIjogIjgwIiwKICAgICJBS0EiOiAiQ29tbWlzc2lvbiB2IE5MIiwKICAgICJDSVRBVElPTiI6ICJDb21taXNzaW9uIHYgVGhlIE5ldGhlcmxhbmRzIFsxOTc3XSBFQ1IgMTM1NSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkVVIiwKICAgICAgICAiTkwiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy04OS83NiIsCiAgICAiQ0FURUdPUlkiOiAiSW50ZXJuYWwgTWFya2V0ICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyAgQXJ0IDMwIFRGRVUgJm1kYXNoOyBDaGFyZ2VzIGZyb20gT2JsaWdhdGlvbnMgdW5kZXIgSW50ZXJuYXRpb25hbCBMYXciCn0sCnsKICAgICJZRUFSIjogIjE5ODAiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQWx0aG91Z2ggbWVtYmVyIHN0YXRlcyBoYXZlIGZpc2NhbCBhdXRvbm9teSwgYW5kIGNhbiBsZXZ5IHRoZSB0YXhlcyB0aGV5IHBsZWFzZSwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDExMCBURkVVPC9zcGFuPiBoYXMgYW4gb2JsaWdhdGlvbiBvZiBmaXNjYWwgbmV1dHJhbGl0eSwgaS5lLiwgdGhlIG9yaWdpbiBvZiBwcm9kdWN0cyBtdXN0IGJlIGlycmVsZXZhbnQgdG8gdGhlIGltcG9zaXRpb24gb2YgdGhlIHRheC4iLAogICAgICAgICJGcm9tIHRoZSBqdWRnbWVudCAmbWRhc2g7ICYjODIyMDs0LiBbVGhlIHByb3Zpc2lvbnMgb2YgQXJ0aWNsZSA5MCBFQ10gc3VwcGxlbWVudCwgd2l0aGluIHRoZSBzeXN0ZW0gb2YgdGhlIFRyZWF0eSwgdGhlIHByb3Zpc2lvbnMgb2YgdGhlIGFib2xpdGlvbiBvZiBjdXN0b21zIGR1dGllcyBhbmQgY2hhcmdlcyBoYXZpbmcgZXF1aXZhbGVudCBlZmZlY3QuICBUaGVpciBhaW0gaXMgdG8gZW5zdXJlIGZyZWUgbW92ZW1lbnQgb2YgZ29vZHMgYmV0d2VlbiB0aGUgTWVtYmVyIFN0YXRlcyBpbiBub3JtYWwgY29uZGl0aW9ucyBvZiBjb21wZXRpdGlvbiBieSB0aGUgZWxpbWluYXRpb24gb2YgYWxsIGZvcm1zIG9mIHByb3RlY3Rpb24gd2hpY2ggcmVzdWx0IHRoZSBhcHBsaWNhdGlvbiBvZiBpbnRlcm5hbCB0YXhhdGlvbiB3aGljaCBkaXNjcmltaW5hdGVzIGFnYWluc3QgcHJvZHVjdHMgZnJvbSBvdGhlciBNZW1iZXIgU3RhdGVzLiAgLi4uIFs8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMTEwIFRGRVU8L3NwYW4+XSBtdXN0IGd1YXJhbnRlZSB0aGUgY29tcGxldGUgbmV1dHJhbGl0eSBvZiBpbnRlcm5hbCB0YXhhdGlvbiBhcyByZWdhcmRzIGNvbXBldGl0aW9uIGJldHdlZW4gZG9tZXN0aWMgcHJvZHVjdHMgYW5kIGltcG9ydGVkIHByb2R1Y3RzLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJBcnQgMTEwIFRGRVUiLAogICAgICAgICJGaXNjYWwgQXV0b25vbXkgb2YgTWVtYmVyIFN0YXRlcyIKICAgIF0sCiAgICAiTkFNRSI6ICJDb21taXNzaW9uIHYgRnJhbmNlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJIdW1ibG90IHYgRGlyZWN0ZXVyIGRlcyBTZXJ2aWNlcyBGaXNjYXV4IiwKICAgICAgICAiSm9obiBXYWxrZXIgdiBNaW5pc3RlcmlldCBmb3IgU2thdHRlciIsCiAgICAgICAgIkJvYmllIEdldHJhZW5rZXZlcnRyaWViIHYgSGF1cHR6b2xsYW10IEFhY2hlbi1Ob3JkIiwKICAgICAgICAiQ2hlbWlhbCBGYXJtYWNldXRpY2kgdiBEQUYiLAogICAgICAgICJDYXBvbG9uZ28gdiBNYXlhIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFVLIChXaW5lIGFuZCBCZWVyKSIsCiAgICAgICAgIkJyZXNjaWFuaSB2IEl0YWxpYW4gRmluYW5jZSBBZG1pbmlzdHJhdGlvbiIsCiAgICAgICAgIkJhdWh1aXMgdiBOZXRoZXJsYW5kcyIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJdGFseSAoQXJ0IFRyZWFzdXJlcykiLAogICAgICAgICJDYWRza3kiLAogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKFN0YXRpc3RpY2FsIERhdGEgTGV2eSkiLAogICAgICAgICJKb3VzdHJhIgogICAgXSwKICAgICJOVU1CRVIiOiAiODEiLAogICAgIkNJVEFUSU9OIjogIkNvbW1pc3Npb24gdiBGcmFuY2UgWzE5ODBdIEVDUiAzNDc6IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRVUiLAogICAgICAgICJGUiIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTE2OC83OCIsCiAgICAiQ0FURUdPUlkiOiAiSW50ZXJuYWwgTWFya2V0ICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyAgQXJ0IDExMCBURkVVICZtZGFzaDsgRmlzY2FsIEF1dG9ub215IG9mIE1lbWJlciBTdGF0ZXMiCn0sCnsKICAgICJZRUFSIjogIjE5NzMiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiRmluYW5jaWFsIGNoYXJnZXMgYXBwbGllZCB3aXRoaW4gYSBnZW5lcmFsIHN5c3RlbSBvZiBpbnRlcm5hbCB0YXhhdGlvbiwgd2hpY2ggYXBwbHkgc3lzdGVtYXRpY2FsbHkgdG8gZG9tZXN0aWMgYW5kIGltcG9ydGVkIHByb2R1Y3RzIGFjY29yZGluZyB0byB0aGUgc2FtZXMgY3JpdGVyaWEsIGFyZSBub3QgdG8gYmUgY29uc2lkZXJlZCBhcyBwcm9oaWJpdGVkIGJ5IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAzMCBURkVVPC9zcGFuPi4gVW5sZXNzICZtZGFzaDsgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSBtb25leSBsZXZpZWQgc3VwcG9ydHMgZG9tZXN0aWMgcHJvZHVjdHMuIEZvciB0aGVtLCBpdCBlZmZlY3RpdmVseSBvZmZzZXQgc29tZSBvZiB0aGUgY2hhcmdlICZtZGFzaDsgYSBiZW5lZml0IGFuIGltcG9ydCBzdWJqZWN0IHRvIHRoZSBjaGFyZ2Ugd291bGQgbm90IGhhdmUgcmVjZWl2ZWQuIFNob3VsZCB0aGF0IGJlIHRoZSBjYXNlLCB0aGUgY2hhcmdlIG1heSBpbmRlZWQgYmUgcHJvaGliaXRlZCB1bmRlciBBcnQgMzAuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbnRlcm5hbCBNYXJrZXQiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIkFydCAzMCBURkVVIiwKICAgICAgICAiQXJ0IDExMCBURkVVIgogICAgXSwKICAgICJOQU1FIjogIkNhcG9sb25nbyB2IE1heWEiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNvbW1pc3Npb24gdiBJdGFseSAoU3RhdGlzdGljYWwgRGF0YSBMZXZ5KSIsCiAgICAgICAgIkh1bWJsb3QgdiBEaXJlY3RldXIgZGVzIFNlcnZpY2VzIEZpc2NhdXgiLAogICAgICAgICJDb21taXNzaW9uIHYgVUsgKFdpbmUgYW5kIEJlZXIpIiwKICAgICAgICAiQnJlc2NpYW5pIHYgSXRhbGlhbiBGaW5hbmNlIEFkbWluaXN0cmF0aW9uIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFRoZSBOZXRoZXJsYW5kcyIsCiAgICAgICAgIkJhdWh1aXMgdiBOZXRoZXJsYW5kcyIsCiAgICAgICAgIkNhZHNreSIsCiAgICAgICAgIkNoZW1pYWwgRmFybWFjZXV0aWNpIHYgREFGIiwKICAgICAgICAiQm9iaWUgR2V0cmFlbmtldmVydHJpZWIgdiBIYXVwdHpvbGxhbXQgQWFjaGVuLU5vcmQiLAogICAgICAgICJKb2huIFdhbGtlciB2IE1pbmlzdGVyaWV0IGZvciBTa2F0dGVyIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEZyYW5jZSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJdGFseSAoQXJ0IFRyZWFzdXJlcykiCiAgICBdLAogICAgIk5VTUJFUiI6ICI4MiIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQ2Fwb2xvbmdvIGhhZCBib3VnaHQgdmVyeSBtYW55IGVnZ3MgZnJvbSBNYXlhLCBkZWxpdmVyZWQgaW4gY2FyZGJvYXJkIGNvbnRhaW5lcnMuIFRoZSBpbnZvaWNlIGNoYXJnZWQgaGltIHdpdGggYSBzdW0gb2YgMiw5MDggbGlyZSBmb3IgYSAxLjc1JSB0YXggZGVzY3JpYmVkIGFzIDxzcGFuIGNsYXNzPVwiaXRcIj5Db250cmlidXRvIEVudGUgTmF6aW9uYWxlIHBlciBsYSBDZWxsdWxvc2EgZSBwZXIgbGEgQ2FydGE8L3NwYW4+LCBsZXZpZWQgb24gPHNwYW4gY2xhc3M9XCJiZFwiPnRoZSBwYWNrYWdpbmc8L3NwYW4+LCB3aGljaCYjODIxNztkIGJlZW4gaW1wb3J0ZWQgZnJvbSBHZXJtYW55LiBCdXQgd2FzIHRoaXMgZG9tZXN0aWMgSXRhbGlhbiB0YXggZXF1aXZhbGVudCBpbiBlZmZlY3QgdG8gYSBjdXN0b21zIGR1dHkgZGlzY3JpbWluYXRpbmcgYWdhaW5zdCBmb3JlaWduIHByb2R1Y3RzLCBhbmQgdGhlcmVmb3JlIHByb2hpYml0ZWQgYnkgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDMwIFRGRVU8L3NwYW4+PyIKICAgIF0sCiAgICAiQUtBIjogIkNhcG9sb25nbyIsCiAgICAiQ0lUQVRJT04iOiAiQ2Fwb2xvbmdvIHYgTWF5YSBbMTk3M10gRUNSIDYxMToiLAogICAgIkZMQUdTIjogWwogICAgICAgICIiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy03Ny83MiIsCiAgICAiQ0FURUdPUlkiOiAiSW50ZXJuYWwgTWFya2V0ICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyAgQXJ0IDMwIFRGRVUgJm1kYXNoOyBBcnQgMTEwIFRGRVUiCn0sCnsKICAgICJZRUFSIjogIjE5NzYiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDExMCBURkVVPC9zcGFuPiBpcyBpbmZyaW5nZWQgd2hlbiB0aGUgcnVsZXMgYnkgd2hpY2ggYSB0YXggaXMgY2FsY3VsYXRlZCBkaWZmZXIgd2hlbiBhcHBsaWVkIHRvIGltcG9ydGVkIGFzIHRvIGRvbWVzdGljIHByb2R1Y3RzLCBldmVuIGlmIHRoZSBkaWZmZXJlbnRpYWwgZWZmZWN0IGlzIHZlcnkgc21hbGwgaW4gcHJhY3RpY2UgJm1kYXNoOyBhbmQgZXZlbiBpZiB0aGUgcmVzdWx0aW5nIGRpc2NyaW1pbmF0aW9uIGlzIGFnYWluc3QgZG9tZXN0aWMgcHJvZHVjZXJzLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJBcnQgMTEwIFRGRVUiCiAgICBdLAogICAgIk5BTUUiOiAiQm9iaWUgR2V0cmFlbmtldmVydHJpZWIgdiBIYXVwdHpvbGxhbXQgQWFjaGVuLU5vcmQiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNhcG9sb25nbyB2IE1heWEiLAogICAgICAgICJDaGVtaWFsIEZhcm1hY2V1dGljaSB2IERBRiIsCiAgICAgICAgIkpvaG4gV2Fsa2VyIHYgTWluaXN0ZXJpZXQgZm9yIFNrYXR0ZXIiLAogICAgICAgICJDb21taXNzaW9uIHYgVUsgKFdpbmUgYW5kIEJlZXIpIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEZyYW5jZSIsCiAgICAgICAgIkh1bWJsb3QgdiBEaXJlY3RldXIgZGVzIFNlcnZpY2VzIEZpc2NhdXgiLAogICAgICAgICJDYWRza3kiLAogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKEFydCBUcmVhc3VyZXMpIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEl0YWx5IChTdGF0aXN0aWNhbCBEYXRhIExldnkpIiwKICAgICAgICAiQnJlc2NpYW5pIHYgSXRhbGlhbiBGaW5hbmNlIEFkbWluaXN0cmF0aW9uIiwKICAgICAgICAiSm91c3RyYSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBUaGUgTmV0aGVybGFuZHMiCiAgICBdLAogICAgIk5VTUJFUiI6ICI4MyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBHZXJtYW4gdGF4IG9uIGJlZXIgY2hhcmdlZCBhIGZsYXQtcmF0ZSBvZiAxNC41RE0gb24gPHNwYW4gY2xhc3M9XCJiZFwiPmltcG9ydHM8L3NwYW4+LCB3aGVyZWFzIGRvbWVzdGljIHByb2R1Y2VycyBwYWlkIG9uIGEgc2xpZGluZyBzY2FsZSwgZnJvbSAxMiB0byAxNSBETS4gVGhlIG1lYXN1cmUgY291bGQgaW4gZWZmZWN0IGRpc2NyaW1pbmF0ZSA8c3BhbiBjbGFzcz1cImJkXCI+YWdhaW5zdDwvc3Bhbj4gYSBsYXJnZSBkb21lc3RpYyBwcm9kdWNlciB0byB0aGUgdHVuZSBvZiA1MCBwZmVubmlncyBwZXIgdW5pdC4iCiAgICBdLAogICAgIkFLQSI6ICJCb2JpZSIsCiAgICAiQ0lUQVRJT04iOiAiQm9iaWUgR2V0cmFlbmtldmVydHJpZWIgdiBIYXVwdHpvbGxhbXQgQWFjaGVuLU5vcmQgWzE5NzZdIEVDUiIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkRFIiwKICAgICAgICAiTkwiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0xMjcvNzUiLAogICAgIkNBVEVHT1JZIjogIkludGVybmFsIE1hcmtldCAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBGaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgQXJ0IDExMCBURkVVIgp9LAp7CiAgICAiWUVBUiI6ICIxOTg2IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIldoZW4gZGVjaWRpbmcgd2hldGhlciBvbmUgdGhpbmcgaXMgc2ltaWxhciB0byBhbm90aGVyIGZvciB0aGUgcHVycG9zZXMgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDExMCBURkVVPC9zcGFuPiwgaXQgbWF5IGJlIHVzZWZ1bCB0byBlbXBsb3kgdGhlIGNvbW1vbi1zZW5zZSB0ZXN0IG9mIHdoZXRoZXIgdGhlIG1hbiBvbiB0aGUgQ29wZW5oYWdlbiB0cm9sbGV5YnVzIHdvdWxkIGFjY2VwdCB0aGUgb25lIHRoaW5nIGFzIGEgc3Vic3RpdHV0ZSBmb3IgdGhlIG90aGVyLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJBcnQgMTEwIFRGRVUiLAogICAgICAgICJNZWFuaW5nIG9mIFNpbWlsYXJpdHkiCiAgICBdLAogICAgIk5BTUUiOiAiSm9obiBXYWxrZXIgdiBNaW5pc3RlcmlldCBmb3IgU2thdHRlciIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2Fwb2xvbmdvIHYgTWF5YSIsCiAgICAgICAgIkh1bWJsb3QgdiBEaXJlY3RldXIgZGVzIFNlcnZpY2VzIEZpc2NhdXgiLAogICAgICAgICJDb21taXNzaW9uIHYgVUsgKFdpbmUgYW5kIEJlZXIpIiwKICAgICAgICAiQ2hlbWlhbCBGYXJtYWNldXRpY2kgdiBEQUYiLAogICAgICAgICJCb2JpZSBHZXRyYWVua2V2ZXJ0cmllYiB2IEhhdXB0em9sbGFtdCBBYWNoZW4tTm9yZCIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBGcmFuY2UiLAogICAgICAgICJKb3VzdHJhIiwKICAgICAgICAiQmF1aHVpcyB2IE5ldGhlcmxhbmRzIiwKICAgICAgICAiQnJlc2NpYW5pIHYgSXRhbGlhbiBGaW5hbmNlIEFkbWluaXN0cmF0aW9uIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFRoZSBOZXRoZXJsYW5kcyIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJdGFseSAoU3RhdGlzdGljYWwgRGF0YSBMZXZ5KSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJdGFseSAoQXJ0IFRyZWFzdXJlcykiCiAgICBdLAogICAgIk5VTUJFUiI6ICI4NCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiRGFuaXNoIGxlZ2lzbGF0aW9uIGltcG9zZWQgYSBoaWdoZXIgdGF4IG9uIGdyYWluLWJhc2VkIHNwaXJpdHMsIHRoYW4gb24gZnJ1aXQtYmFzZWQgbGlxdW9yIHdpbmUgKHVwIHRvIDIzJSBhYnYpLCBvZiB3aGljaCBEZW5tYXJrIHdhcyBxdWl0ZSBhIHByb2R1Y2VyLiBKb2hubnkgV2Fsa2VyIHNhdyB0aGlzIGFzIHRoaW5seS12ZWlsZWQgcHJvdGVjdGlvbmlzbSwgcHJldmVudGluZyB0aGVtIGZyb20gY29tcGV0aW5nIGFnYWluc3Qgc3VjaCBkb21lc3RpY2FsbHktcHJvZHVjZWQgZHJpbmtzLiBUaGV5IGFyZ3VlZCBhcmd1ZWQgdGhhdCBXaGlza2V5IHdhcyBsZXNzIG9mIGEgZ3JhaW4tYmFzZWQgc3Bpcml0LCBtb3JlIG9mIGEgZnJ1aXQtYmFzZWQgd2luZSAmbWRhc2g7IGFjY29yZGluZyB0byB0aGUgaW50ZW50aW9uIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAxMTAgVEZFVTwvc3Bhbj4sIHRoYXQgaXMuIgogICAgXSwKICAgICJBS0EiOiAiSm9obm55IFdhbGtlciIsCiAgICAiQ0lUQVRJT04iOiAiSm9obiBXYWxrZXIgdiBNaW5pc3RlcmlldCBmb3IgU2thdHRlciBbMTk4Nl0gRUNSIDg3NSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIlNDTyIsCiAgICAgICAgIkdCIiwKICAgICAgICAiREsiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0yNDMvODQiLAogICAgIkNBVEVHT1JZIjogIkludGVybmFsIE1hcmtldCAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBGaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgQXJ0IDExMCBURkVVICZtZGFzaDsgTWVhbmluZyBvZiBTaW1pbGFyaXR5Igp9LAp7CiAgICAiWUVBUiI6ICIxOTg1IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgdGF4IG1lYXN1cmUgd2hpY2gsIGluIHByYWN0aWNlLCBhcHBsaWVzIGNoaWVmbHkgdG8gaW1wb3J0ZWQgcHJvZHVjdHMsIGlzIGNvbnRyYXJ5IHRvIHRoZSBwcm9oaWJpdGlvbiBvbiBpbmRpcmVjdCB0YXggZGlzY3JpbWluYXRpb24gb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDExMCBURkVVPC9zcGFuPiBwYXJhIDEuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbnRlcm5hbCBNYXJrZXQiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIkFydCAxMTAgVEZFVSIKICAgIF0sCiAgICAiTkFNRSI6ICJIdW1ibG90IHYgRGlyZWN0ZXVyIGRlcyBTZXJ2aWNlcyBGaXNjYXV4IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJKb2huIFdhbGtlciB2IE1pbmlzdGVyaWV0IGZvciBTa2F0dGVyIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEZyYW5jZSIsCiAgICAgICAgIkNoZW1pYWwgRmFybWFjZXV0aWNpIHYgREFGIiwKICAgICAgICAiQm9iaWUgR2V0cmFlbmtldmVydHJpZWIgdiBIYXVwdHpvbGxhbXQgQWFjaGVuLU5vcmQiLAogICAgICAgICJDYXBvbG9uZ28gdiBNYXlhIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFVLIChXaW5lIGFuZCBCZWVyKSIsCiAgICAgICAgIkJyZXNjaWFuaSB2IEl0YWxpYW4gRmluYW5jZSBBZG1pbmlzdHJhdGlvbiIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBUaGUgTmV0aGVybGFuZHMiLAogICAgICAgICJDYWRza3kiLAogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKFN0YXRpc3RpY2FsIERhdGEgTGV2eSkiLAogICAgICAgICJKb3VzdHJhIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEl0YWx5IChBcnQgVHJlYXN1cmVzKSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjg1IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBbG1vc3QgYWxsIHRoZSBjYXJzIHF1YWxpZnlpbmcgZm9yIHRoZSBwdW5pdGl2ZSBzcGlrZSBhdCB0aGUgZW5kIG9mIHRoZSBGcmVuY2ggPHNwYW4gY2xhc3M9XCJpdFwiPkNoZXZldXggRmlzY2FsZTwvc3Bhbj4gc2NhbGUgb2YgY2FyIHRheCwgd2VyZSBpbXBvcnRlZCByYXRoZXIgdGhhbiBGcmVuY2gtbWFkZS4iCiAgICBdLAogICAgIkFLQSI6ICJIdW1ibG90IiwKICAgICJDSVRBVElPTiI6ICJIdW1ibG90IHYgRGlyZWN0ZXVyIGRlcyBTZXJ2aWNlcyBGaXNjYXV4IFsxOTg1XSBFQ1IgMTM2NzoiLAogICAgIkZMQUdTIjogWwogICAgICAgICJGUiIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTExMi84NCIsCiAgICAiQ0FURUdPUlkiOiAiSW50ZXJuYWwgTWFya2V0ICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyAgQXJ0IDExMCBURkVVIgp9LAp7CiAgICAiWUVBUiI6ICIxOTgzIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIk5hdGlvbmFsIGxlZ2lzbGF0aW9uIG1heSBub3QgY3J5c3RhbGxpemUgY29uc3VtZXIgaGFiaXRzLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJBcnQgMTEwIFRGRVUiLAogICAgICAgICJDb21wZXRpbmcgUHJvZHVjdHMiCiAgICBdLAogICAgIk5BTUUiOiAiQ29tbWlzc2lvbiB2IFVLIChXaW5lIGFuZCBCZWVyKSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiSHVtYmxvdCB2IERpcmVjdGV1ciBkZXMgU2VydmljZXMgRmlzY2F1eCIsCiAgICAgICAgIkNhcG9sb25nbyB2IE1heWEiLAogICAgICAgICJCb2JpZSBHZXRyYWVua2V2ZXJ0cmllYiB2IEhhdXB0em9sbGFtdCBBYWNoZW4tTm9yZCIsCiAgICAgICAgIkNoZW1pYWwgRmFybWFjZXV0aWNpIHYgREFGIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEZyYW5jZSIsCiAgICAgICAgIkpvaG4gV2Fsa2VyIHYgTWluaXN0ZXJpZXQgZm9yIFNrYXR0ZXIiLAogICAgICAgICJCcmVzY2lhbmkgdiBJdGFsaWFuIEZpbmFuY2UgQWRtaW5pc3RyYXRpb24iLAogICAgICAgICJDb21taXNzaW9uIHYgVGhlIE5ldGhlcmxhbmRzIiwKICAgICAgICAiSm91c3RyYSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJdGFseSAoQXJ0IFRyZWFzdXJlcykiLAogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKFN0YXRpc3RpY2FsIERhdGEgTGV2eSkiLAogICAgICAgICJDYWRza3kiCiAgICBdLAogICAgIk5VTUJFUiI6ICI4NiIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiVGhlIFVLIGhhZCBsb3cgdGF4IG9uIGJlZXIsIGhpZ2ggdGF4IG9uIHdpbmUuIFRoZSBDb21taXNzaW9uIGNvbnNpZGVyZWQgdGhpcyBkaXNjcmltaW5hdGVkIGFnYWluc3QgaW1wb3J0ZWQgcHJvZHVjdHMgJm1kYXNoOyB3aW5lIGFsbW9zdCBleGNsdXNpdmVseSBpbXBvcnRlZC4gVGhlIFVLIHNhaWQgdGhpcyB3YXMgYmVjYXVzZSBwZW9wbGUgPHNwYW4gY2xhc3M9XCJiZFwiPmxpa2VkPC9zcGFuPiBiZWVyLCBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPmRpZCBub3Q8L3NwYW4+IGxpa2Ugd2luZSwgbmVnbGVjdGluZyB0byBjb25zaWRlciB3aGljaCB3YXkgcm91bmQgdGhlIGFycm93IG9mIGNhdXNhdGlvbiBwb2ludGVkIGJldHdlZW4gdGhlIHRheCByYXRlIGFuZCB0aGUgcG9wdWxhcml0eS4iLAogICAgICAgICJGaXZlIHllYXJzIGFnbywgdGhlIEJyZXdlcmllcyBDb21taXNzaW9uIG5vdGVkIHRoYXQgd2luZSBoYWQgbm93IG92ZXJ0YWtlbiBiZWVyIGluIHRoZSBVSywgYW5kIHRoYXQgdGhlcmVmb3JlIHRoZSB0YXggb24gYmVlciBzaG91bGQgZ28gZG93bi4gQW5kIG5vdywgdGhlcmUmIzgyMTc7cyBsb3RzIG9mIGRyaW5rYWJsZSBkb21lc3RpYyB3aW5lLiIKICAgIF0sCiAgICAiQUtBIjogIldpbmUgYW5kIEJlZXIiLAogICAgIkNJVEFUSU9OIjogIkNvbW1pc3Npb24gdiBVSyAoV2luZSBhbmQgQmVlcikgWzE5ODNdIEVDUiAyMjY1IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRVUiLAogICAgICAgICJHQiIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTE3MC83OCIsCiAgICAiQ0FURUdPUlkiOiAiSW50ZXJuYWwgTWFya2V0ICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyBBcnQgMTEwIFRGRVUgJm1kYXNoOyBDb21wZXRpbmcgUHJvZHVjdHMiCn0sCnsKICAgICJZRUFSIjogIjE5ODEiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiTlVNQkVSIjogIjg3IiwKICAgICJIRUxEIjogWwogICAgICAgICJJZiBhbiBpbnRlcm5hbCB0YXgsIG9mIGVxdWFsIGFwcGxpY2F0aW9uIHRvIGRvbWVzdGljIHByb2R1Y2VycyBhbmQgaW1wb3J0cywgaGFzIGEgZGlzY3JpbWluYXRvcnkgZWZmZWN0IHVuZGVyIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAxMTAgVEZFVTwvc3Bhbj4gcGFyYSAxLCBidXQgdGhlIGVjb25vbWljIHBvbGljeSBnb2FsIGl0IHB1cnN1ZXMgaXMgY29tcGF0aWJsZSB3aXRoIEVVIGxhdzsgYW5kIGlmIHRoZSBkZXRhaWwgb2YgdGhlIHRheCBjb250YWlucyBubyBkaXJlY3Qgb3IgaW5kaXJlY3QgZGlzY3JpbWluYXRpb24sIHRoZW4gaXQgbWF5IGJlIGFuIGV4Y2VwdGlvbi4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkludGVybmFsIE1hcmtldCIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgR29vZHMiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIiwKICAgICAgICAiQXJ0IDExMCBURkVVIiwKICAgICAgICAiUHVibGljIFBvbGljeSBKdXN0aWZpY2F0aW9uIgogICAgXSwKICAgICJOQU1FIjogIkNoZW1pYWwgRmFybWFjZXV0aWNpIHYgREFGIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJIdW1ibG90IHYgRGlyZWN0ZXVyIGRlcyBTZXJ2aWNlcyBGaXNjYXV4IiwKICAgICAgICAiQm9iaWUgR2V0cmFlbmtldmVydHJpZWIgdiBIYXVwdHpvbGxhbXQgQWFjaGVuLU5vcmQiLAogICAgICAgICJKb2huIFdhbGtlciB2IE1pbmlzdGVyaWV0IGZvciBTa2F0dGVyIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFVLIChXaW5lIGFuZCBCZWVyKSIsCiAgICAgICAgIkNhcG9sb25nbyB2IE1heWEiLAogICAgICAgICJDb21taXNzaW9uIHYgRnJhbmNlIiwKICAgICAgICAiQ2Fkc2t5IiwKICAgICAgICAiQmF1aHVpcyB2IE5ldGhlcmxhbmRzIiwKICAgICAgICAiSm91c3RyYSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJdGFseSAoU3RhdGlzdGljYWwgRGF0YSBMZXZ5KSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJdGFseSAoQXJ0IFRyZWFzdXJlcykiLAogICAgICAgICJDb21taXNzaW9uIHYgVGhlIE5ldGhlcmxhbmRzIgogICAgXSwKICAgICJDT01NRU5UIjogIkl0JiM4MjE3O3MgaGFyZCB0byBzZWUgd2h5IEZyYW5jZSBkaWRuJiM4MjE3O3QgaW52b2tlIHRoaXMgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SHVtYmxvdDwvc3Bhbj4uIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJJdGFsaWFuIGxlZ2lzbGF0aW9uIG9uIHRoZSBwcm9kdWN0aW9uIG9mIGFsY29ob2wgZGlzdGluZ3Vpc2hpbmcgYmV0d2VlbiBmZXJtZW50YXRpb24gYW5kIHN5bnRoZXNpcywgZGlzc3VhZGluZyBwcm9kdWNlcnMgZnJvbSByZWx5aW5nIG9uIHBldHJvbGV1bSwgc28gaXQgd291bGQgYmUgcmVzZXJ2ZWQgZm9yIG1vcmUgaW1wb3J0YW50IHVzZXMuIE5vIGRvbWVzdGljIHByb2R1Y2VycywgaG93ZXZlciwgdXNlZCB0aGUgcGVuYWxpc2VkIG1ldGhvZC4gVGhlcmVmb3JlLCBzdXJlbHksIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAxMTAgVEZFVTwvc3Bhbj4gcmVuZGVyZWQgdGhpcyBwYXJ0IG9mIEl0YWx5JiM4MjE3O3MgdGF4IHJlZ2ltZSBpbGxlZ2FsPyIKICAgIF0sCiAgICAiQUtBIjogIkNoZW1pYWwiLAogICAgIkNJVEFUSU9OIjogIkNoZW1pYWwgRmFybWFjZXV0aWNpIHYgREFGIFsxOTgxXSBFQ1IgMToiLAogICAgIkZMQUdTIjogWwogICAgICAgICIiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0xNDAvNzkiLAogICAgIkNBVEVHT1JZIjogIkludGVybmFsIE1hcmtldCAmbWRhc2g7IEZyZWUgTW92ZW1lbnQgb2YgR29vZHMgJm1kYXNoOyBGaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgQXJ0IDExMCBURkVVICZtZGFzaDsgUHVibGljIFBvbGljeSBKdXN0aWZpY2F0aW9uIgp9LAp7CiAgICAiWUVBUiI6ICIyMDA2IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkl0IHdvdWxkIGJlIGFic3VyZCB0byByZXF1aXJlIGltcG9ydGVycyBmb3IgcGVyc29uYWwgdXNlICh1bmRlciBBcnRpY2xlIDcgb2YgdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRpcmVjdGl2ZSBvbiBFeGNpc2UgRHV0eTwvc3Bhbj4pIHRvIGNhcnJ5IHRoZSBnb29kcyBhY3Jvc3MgdGhlIGJvcmRlciB0aGVtc2VsdmVzLiBUaGF0IHdvdWxkIGJlIGFnYWluc3QgdGhlIHNwaXJpdCBvZiBlbmNvdXJhZ2luZyBmcmVlIG1vdmVtZW50LiBUaGVyZSBtYXksIGhvd2V2ZXIsIGJlIGEgZ2FwIGJldHdlZW4gcHJpdmF0ZSBpbXBvcnRzIHVuZGVyIEFydCA3IGFuZCBjb21tZXJjaWFsIGltcG9ydHMgdW5kZXIgQXJ0IDguIEJ1dCB0aGF0IGdhcCBpcyBub3QgaW5oYWJpdGVkIGJ5IGEgY29sbGVjdGl2ZSBwdXJjaGFzZSBvbiB3aGljaCBubyBwcm9maXQgaXMgbWFkZS4iLAogICAgICAgICJPcGVyYXRpdmUgcGFydCBvZiBqdWRnbWVudCAmbWRhc2g7ICYjODIyMDs8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EaXJlY3RpdmUgb24gRXhjaXNlIER1dHk8L3NwYW4+IC4uLiBvbiB0aGUgZ2VuZXJhbCBhcnJhbmdlbWVudHMgZm9yIHByb2R1Y3RzIHN1YmplY3QgdG8gZXhjaXNlIGR1dHkgYW5kIG9uIHRoZSBob2xkaW5nLCBtb3ZlbWVudCBhbmQgbW9uaXRvcmluZyBvZiBzdWNoIHByb2R1Y3RzLCBhcyBhbWVuZGVkIC4uLiBtdXN0IGJlIGNvbnN0cnVlZCBhcyBtZWFuaW5nIHRoYXQgd2hlcmUsIGFzIGluIHRoZSBjYXNlIGluIHRoZSBtYWluIHByb2NlZWRpbmdzLCBhIHByaXZhdGUgaW5kaXZpZHVhbCB3aG8gaXMgbm90IG9wZXJhdGluZyBjb21tZXJjaWFsbHkgb3Igd2l0aCBhIHZpZXcgdG8gbWFraW5nIGEgcHJvZml0IGFjcXVpcmVzIGluIG9uZSBNZW1iZXIgU3RhdGUsIGZvciBoaXMgb3duIHBlcnNvbmFsIHJlcXVpcmVtZW50cyBhbmQgdGhvc2Ugb2Ygb3RoZXIgcHJpdmF0ZSBpbmRpdmlkdWFscywgcHJvZHVjdHMgc3ViamVjdCB0byBleGNpc2UgZHV0eSB3aGljaCBoYXZlIGJlZW4gcmVsZWFzZWQgZm9yIGNvbnN1bXB0aW9uIGluIHRoYXQgTWVtYmVyIFN0YXRlIGFuZCBhcnJhbmdlcyBmb3IgdGhlbSB0byBiZSB0cmFuc3BvcnRlZCB0byBhbm90aGVyIE1lbWJlciBTdGF0ZSBvbiBoaXMgYmVoYWxmIGJ5IGEgdHJhbnNwb3J0IGNvbXBhbnkgZXN0YWJsaXNoZWQgaW4gdGhhdCBvdGhlciBTdGF0ZSwgQXJ0aWNsZSA3IG9mIHRoYXQgRGlyZWN0aXZlLCBhbmQgbm90IEFydGljbGUgOCB0aGVyZW9mLCBpcyBhcHBsaWNhYmxlLCB3aXRoIHRoZSByZXN1bHQgdGhhdCBleGNpc2UgZHV0eSBpcyBhbHNvIHRvIGJlIGxldmllZCBpbiB0aGF0IG90aGVyIFN0YXRlLiBVbmRlciBBcnRpY2xlIDcoNikgb2YgdGhlIERpcmVjdGl2ZSwgdGhlIGV4Y2lzZSBkdXR5IHBhaWQgaW4gdGhlIGZpcnN0IFN0YXRlIGlzLCBpbiBzdWNoIGEgY2FzZSwgdG8gYmUgcmVpbWJ1cnNlZCBpbiBhY2NvcmRhbmNlIHdpdGggQXJ0aWNsZSAyMigzKSBvZiB0aGUgRGlyZWN0aXZlLiYjODIyMTsiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkludGVybmFsIE1hcmtldCIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgR29vZHMiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIiwKICAgICAgICAiRGlyZWN0aXZlIG9uIEV4Y2lzZSBEdXR5IiwKICAgICAgICAiQ29sbGVjdGl2ZSBQdXJjaGFzZSIsCiAgICAgICAgIlBlcnNvbmFsIFVzZSBvciBCdXNpbmVzcyBJbXBvcnQiCiAgICBdLAogICAgIk5BTUUiOiAiSm91c3RyYSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQnJlc2NpYW5pIHYgSXRhbGlhbiBGaW5hbmNlIEFkbWluaXN0cmF0aW9uIiwKICAgICAgICAiQ2Fkc2t5IiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFRoZSBOZXRoZXJsYW5kcyIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJdGFseSAoU3RhdGlzdGljYWwgRGF0YSBMZXZ5KSIsCiAgICAgICAgIkh1bWJsb3QgdiBEaXJlY3RldXIgZGVzIFNlcnZpY2VzIEZpc2NhdXgiLAogICAgICAgICJCYXVodWlzIHYgTmV0aGVybGFuZHMiLAogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKEFydCBUcmVhc3VyZXMpIiwKICAgICAgICAiQm9iaWUgR2V0cmFlbmtldmVydHJpZWIgdiBIYXVwdHpvbGxhbXQgQWFjaGVuLU5vcmQiLAogICAgICAgICJDaGVtaWFsIEZhcm1hY2V1dGljaSB2IERBRiIsCiAgICAgICAgIkpvaG4gV2Fsa2VyIHYgTWluaXN0ZXJpZXQgZm9yIFNrYXR0ZXIiLAogICAgICAgICJDYXBvbG9uZ28gdiBNYXlhIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEZyYW5jZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjg4IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJKb3VzdHJhLCBhIER1dGNobWFuLCBoYWQgdGhlIGFubnVhbCBoYWJpdCBvZiBvcmdhbmlzaW5nIGEgY29sbGVjdGl2ZSBwdXJjaGFzZSBvZiB3aW5lLiBIaXMgcGFscyB3b3VsZCBjb21lLCByZWltYnVyc2UgaGltLCB0aGVuIHBpY2sgdXAgdGhlaXIgc2hhcmUuIEFsbCB2ZXJ5IGNvbnZpdmlhbCBhbmQgYW1pY2FibGUuIFRoaXMgd2VudCBvbiBtZXJyaWx5IGZvciBhIGZldyB5ZWFycywgdW50aWwgdGhlIER1dGNoIGF1dGhvcml0aWVzIHBvaW50ZWQgb3V0IHRoYXQgaXQgZGlkbiYjODIxNzt0IHNlZW0gdG8gdGhlbSBsaWtlIGEgc2l0dWF0aW9uIG9mIDxzcGFuIGNsYXNzPVwiYmRcIj5wZXJzb25hbDwvc3Bhbj4gaW1wb3J0LiBGb3Igb25lIHRoaW5nLCBoZSBoYWRuJiM4MjE3O3QgdHJhbnNwb3J0ZWQgdGhlIGRyaW5rIGhpbXNlbGYuIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJKb3VzdHJhIFsyMDA2XSBFQ1IgSSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIk5MIiwKICAgICAgICAiU3Bpcml0IgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtNS8wNSIsCiAgICAiQ0FURUdPUlkiOiAiSW50ZXJuYWwgTWFya2V0ICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IEZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyBEaXJlY3RpdmUgb24gRXhjaXNlIER1dHkgJm1kYXNoOyBDb2xsZWN0aXZlIFB1cmNoYXNlICZtZGFzaDsgUGVyc29uYWwgVXNlIG9yIEJ1c2luZXNzIEltcG9ydCIKfSwKewogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+SW50cm88L3NwYW4+PC9zcGFuPjxicj5CeSBjb250cmFzdCB0byA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5GaXNjYWwgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQ8L3NwYW4+LCBhIFF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbiAoUVIpIGFuZCBhIE1lYXN1cmUgb2YgRXF1aXZhbGVudCBFZmZlY3QgKE1FUVIpIGFyZSwgaW4gZWZmZWN0LCBkb21lc3RpYyBtZWFzdXJlcyB3aXRoIHdoaWNoIGFuIGltcG9ydGVyIG11c3QgY29tcGx5LiIsCiAgICAgICAgIklmIHlvdSByZW1lbWJlciBvbmUgdGhpbmcgb24gUVJzIGFuZCBNRVFScywgcmVtZW1iZXIgdGhlIG9mdC1xdW90ZWQgNXRoIHBhcmEgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGFzc29udmlsbGU8L3NwYW4+LCB3aGljaCBnaXZlcyBhbiBhbGwtZW5jb21wYXNzaW5nIGRlZmluaXRpb24gb2Ygd2hhdCBraW5kcyBvZiBtZWFzdXJlcyB3aWxsIGNhdGNoIHRoZSBjb3VydCYjODIxNztzIGV5ZS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkJhbnMsIFF1b3RhcyBhbmQgTGljZW5zZXM8L3NwYW4+PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZXNlIGludm9sdmUgdGhlIGV4cGVuc2Ugb2YgcGFwZXJ3b3JrLCBhbmQgc28gYXJlIGNvbnNpZGVyZWQgUVJzICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VUhUIE1pbGs8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJBS0EiOiAiUXVhbnRpdGF0aXZlIFJlc3RyaWN0aW9ucyIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IiwKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBHb29kcyIsCiAgICAgICAgIlF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMiLAogICAgICAgICJNRVFScyIsCiAgICAgICAgIkFydCAzNCBURkVVIiwKICAgICAgICAiQXJ0IDM1IFRGRVUiLAogICAgICAgICJBcnQgMzYgVEZFVSIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiSW50ZXJuYWwgTWFya2V0ICZtZGFzaDsgRnJlZSBNb3ZlbWVudCBvZiBHb29kcyAmbWRhc2g7IFF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMgJm1kYXNoOyBNRVFScyAmbWRhc2g7IEFydCAzNCBURkVVICZtZGFzaDsgQXJ0IDM1IFRGRVUgJm1kYXNoOyBBcnQgMzYgVEZFVSIsCiAgICAiTkFNRSI6ICJRdWFudGl0YXRpdmUgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiSGFybW9uaXphdGlvbiIsCiAgICAgICAgIlRoZSBJbnRlcm5hbCBNYXJrZXQgYW5kIEZyZWUgTW92ZW1lbnQiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIG92ZXIgdGhlIEJvcmRlciIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgYXQgdGhlIEJvcmRlciIsCiAgICAgICAgIkludGVybmFsIE1hcmtldCAtIERpc2N1c3Npb24iLAogICAgICAgICIoSm9pbmVkKSBLYWRpIGFuZCBBbCBCYXJha2FhdCIsCiAgICAgICAgIk1pZ3JhbnQgQ3Jpc2lzIC0gVHVya2V5IERlYWwiLAogICAgICAgICJFVSBDaXRpemVuc2hpcCIsCiAgICAgICAgIkVmZmVjdGl2ZW5lc3MgYW5kIFNjb3BlIG9mIEFydCA0NSIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IElJIC0gRUZUQSB0byBOaWNlIiwKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSSAtIFBhcmlzIHRvIE1lcmdlciIKICAgIF0sCiAgICAiTlVNQkVSIjogIjg5Igp9LAp7CiAgICAiVFlQRSI6ICJUcmVhdHkgQXJ0aWNsZSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj5BcnRpY2xlIDM0PC9zcGFuPiAmbWRhc2g7IEltcG9ydHM8L3NwYW4+PGJyPlF1YW50aXRhdGl2ZSByZXN0cmljdGlvbnMgb24gaW1wb3J0cyBhbmQgYWxsIG1lYXN1cmVzIGhhdmluZyBlcXVpdmFsZW50IGVmZmVjdCBzaGFsbCBiZSBwcm9oaWJpdGVkIGJldHdlZW4gTWVtYmVyIFN0YXRlcy4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPkFydGljbGUgMzU8L3NwYW4+ICZtZGFzaDsgRXhwb3J0czwvc3Bhbj48YnI+UXVhbnRpdGF0aXZlIHJlc3RyaWN0aW9ucyBvbiBleHBvcnRzLCBhbmQgYWxsIG1lYXN1cmVzIGhhdmluZyBlcXVpdmFsZW50IGVmZmVjdCwgc2hhbGwgYmUgcHJvaGliaXRlZCBiZXR3ZWVuIE1lbWJlciBTdGF0ZXMuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPn5BcnRpY2xlIDM2ICZtZGFzaDsgRXhjZXB0aW9uczwvc3Bhbj48YnI+JmVtc3A7JmVtc3A7dGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5wcm90ZWN0aW9uIG9mIGhlYWx0aCBhbmQgbGlmZSBvZiBodW1hbnMsIGFuaW1hbHMgb3IgcGxhbnRzPC9zcGFuPjsgLyZlbXNwOyZlbXNwO3RoZSA8c3BhbiBjbGFzcz1cImJkXCI+cHJvdGVjdGlvbiBvZiBuYXRpb25hbCB0cmVhc3VyZXM8L3NwYW4+IHBvc3Nlc3NpbmcgYXJ0aXN0aWMsIGhpc3RvcmljIG9yIGFyY2hhZW9sb2dpY2FsIHZhbHVlOyBvcjxicj4mZW1zcDsmZW1zcDt0aGUgcHJvdGVjdGlvbiBvZiBpbmR1c3RyaWFsIGFuZCBjb21tZXJjaWFsIHByb3BlcnR5Ljxicj4mZW1zcDsmZW1zcDtTdWNoIHByb2hpYml0aW9ucyBvciByZXN0cmljdGlvbnMgc2hhbGwgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj4sIGhvd2V2ZXIsIDxzcGFuIGNsYXNzPVwiYmRcIj5jb25zdGl0dXRlIGEgbWVhbnMgb2YgYXJiaXRyYXJ5IGRpc2NyaW1pbmF0aW9uPC9zcGFuPiBvciBhIDxzcGFuIGNsYXNzPVwiYmRcIj5kaXNndWlzZWQgcmVzdHJpY3Rpb248L3NwYW4+IG9uIHRyYWRlIGJldHdlZW4gTWVtYmVyIFN0YXRlcy4iCiAgICBdLAogICAgIkFLQSI6ICJBcnQgMzQgVEZFVTsgQXJ0IDM1IFRGRVU7IEFydCAzNiBURkVVIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbnRlcm5hbCBNYXJrZXQiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiUXVhbnRpdGF0aXZlIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIk1FUVJzIiwKICAgICAgICAiQXJ0IDM0IFRGRVUiLAogICAgICAgICJBcnQgMzUgVEZFVSIsCiAgICAgICAgIkFydCAzNiBURkVVIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJJbnRlcm5hbCBNYXJrZXQgJm1kYXNoOyBGcmVlIE1vdmVtZW50IG9mIEdvb2RzICZtZGFzaDsgUXVhbnRpdGF0aXZlIFJlc3RyaWN0aW9ucyAmbWRhc2g7IE1FUVJzICZtZGFzaDsgQXJ0IDM0IFRGRVUgJm1kYXNoOyBBcnQgMzUgVEZFVSAmbWRhc2g7IEFydCAzNiBURkVVIiwKICAgICJOQU1FIjogIkFydGljbGVzIDM0LCAzNSBhbmQgMzYgVEZFVSIsCiAgICAiTlVNQkVSIjogIjkwIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJBcnRpY2xlcyAyNi0yOCBURkVVIiwKICAgICAgICAiQXJ0aWNsZSAzMCBURkVVIiwKICAgICAgICAiQXJ0aWNsZXMgMTE0IGFuZCAxMTUgVEZFVSIsCiAgICAgICAgIkFydGljbGUgMTEwIFRGRVUiLAogICAgICAgICJBcnRpY2xlcyAyOSBhbmQgMzEgVEZFVSIKICAgIF0KfSwKewogICAgIiNDQVRFR09SWSI6ICJOb24tRmlzY2FsIFJlc3RyaWN0aW9uczsgUXVhbnRpdGF0aXZlIFJlc3RyaWN0aW9uczsgQXJ0IDM0ICNURkVVOyBGaXJzdCBQaGFzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiJiM4MjIwOzUuIEFsbCB0cmFkaW5nIHJ1bGVzIGVuYWN0ZWQgYnkgTWVtYmVyIFN0YXRlcyB3aGljaCBhcmUgY2FwYWJsZSBvZiBoaW5kZXJpbmcsIGRpcmVjdGx5IG9yIGluZGlyZWN0bHksIGFjdHVhbGx5IG9yIHBvdGVudGlhbGx5LCBpbnRyYS1Db21tdW5pdHkgdHJhZGUgYXJlIHRvIGJlIGNvbnNpZGVyZWQgYXMgbWVhc3VyZXMgaGF2aW5nIGFuIGVmZmVjdCBlcXVpdmFsZW50IHRvIHF1YW50aXRhdGl2ZSByZXN0cmljdGlvbnMuJiM4MjIxOyIKICAgIF0sCiAgICAiTkFNRSI6ICJQcm9jdXJldXIgZHUgUm9pIHYgRGFzc29udmlsbGUiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiI0NBU0VOVU0iOiAiQy00NS84NyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQmVsZ2lhbiBsYXcgYWxsb3dlZCBTY290Y2gsIGFuZCB2YXJpb3VzIG90aGVyIHByb2R1Y3RzLCB0byBiZSBzb2xkIG9ubHkgd2l0aCBhIGNlcnRpZmljYXRlIG9mIG9yaWdpbi4gRGFzc29udmlsbGUgaGFkIGJvdWdodCBvbiB0aGUgY2hlYXAgaW4gRnJhbmNlLCBob3dldmVyLCB3aGVyZSB0aGVyZSB3YXMgbm8gc3VjaCByZXF1aXJlbWVudCwgYW5kIHNvIG5vIHN1Y2ggY2VydGlmaWNhdGVzLiBSZXNvdXJjZWZ1bGx5LCBoZSBtYWRlIHNvbWUgaGltc2VsZiAmbWRhc2g7IGFuZCB3YXMgZHVseSBwcm9zZWN1dGVkIGZvciBmb3JnZXJ5LiBIZSBjaGFsbGVuZ2VkIHRoZSBsZWdhbGl0eSBvZiBoZSByZXF1aXJlbWVudC4iCiAgICBdLAogICAgIkNJVEFUSU9OIjogIlByb2N1cmV1ciBkdSBSb2kgdiBEYXNzb252aWxsZSBbMTk3NF0gRUNSIDgzNyIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkJFIiwKICAgICAgICAiRlIiLAogICAgICAgICJTQ08iCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy04Lzc0IiwKICAgICJDQVRFR09SWSI6ICJOb24tRmlzY2FsIFJlc3RyaWN0aW9ucyAmbWRhc2g7IFF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMgJm1kYXNoOyBBcnQgMzQgVEZFVSAmbWRhc2g7IEZpcnN0IFBoYXNlIiwKICAgICJZRUFSIjogIjE5NzQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk5vbi1GaXNjYWwgUmVzdHJpY3Rpb25zIiwKICAgICAgICAiUXVhbnRpdGF0aXZlIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIkFydCAzNCBURkVVIiwKICAgICAgICAiRmlyc3QgUGhhc2UiCiAgICBdLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlNpbW1lbnRoYWwgdiBNaW5pc3RlciBmb3IgRmluYW5jZSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJcmVsYW5kIChCdXkgSXJpc2ggY2FtcGFpZ24pIiwKICAgICAgICAiSGVubiBhbmQgRGFyYnkiLAogICAgICAgICJDb21taXNzaW9uIHYgVUsgKFVIVCBNaWxrKSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBGcmFuY2UgKFNwYW5pc2ggU3RyYXdiZXJyaWVzKSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJcmVsYW5kIChJcmlzaCBTb3V2ZW5pcnMpIiwKICAgICAgICAiQ29uZWdhdGUgTHRkIHYgQ29tbWlzc2lvbmVycyBvZiBDdXN0b21zIGFuZCBFeGNpc2UiLAogICAgICAgICJGYWNjaW5pIERvcmkiLAogICAgICAgICJHcmFmIiwKICAgICAgICAiRCdIb29wIiwKICAgICAgICAiWmFtYnJhbm8iLAogICAgICAgICJWYXRzb3VyYXMiCiAgICBdLAogICAgIiNGTEFHUyI6ICJFVTsgSUUiLAogICAgIldJS0lMSU5LIjogWwogICAgICAgICJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Qcm9jdXJldXJfZHVfUm9pX3ZfQmVub1x1MDBlZXRfYW5kX0d1c3RhdmVfRGFzc29udmlsbGUiCiAgICBdLAogICAgIiNDSVRBVElPTiI6ICJDb21taXNzaW9uIHYgSXJlbGFuZCBbMTk4OF0gRUNSIDQ5MjkiLAogICAgIkFLQSI6ICJEYXNzb252aWxsZSIsCiAgICAiTlVNQkVSIjogIjkxIiwKICAgICIjTkFNRSI6ICJDb21taXNzaW9uIHYgSXJlbGFuZCIKfSwKewogICAgIllFQVIiOiAiMTk4MyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJBIG1lbWJlciBzdGF0ZSBtYXkgbm90IHJlcXVpcmUgYW4gaW1wb3J0IGxpY2Vuc2UgZm9yIGdvb2RzIGZyb20gb3RoZXIgbWVtYmVyIHN0YXRlcy4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk5vbi1GaXNjYWwgUmVzdHJpY3Rpb25zIiwKICAgICAgICAiUXVhbnRpdGF0aXZlIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIkFydCAzNCBURkVVIiwKICAgICAgICAiRmlyc3QgUGhhc2UiCiAgICBdLAogICAgIk5BTUUiOiAiQ29tbWlzc2lvbiB2IFVLIChVSFQgTWlsaykiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNvbW1pc3Npb24gdiBJcmVsYW5kIChJcmlzaCBTb3V2ZW5pcnMpIiwKICAgICAgICAiSGVubiBhbmQgRGFyYnkiLAogICAgICAgICJDb21taXNzaW9uIHYgRnJhbmNlIChTcGFuaXNoIFN0cmF3YmVycmllcykiLAogICAgICAgICJQcm9jdXJldXIgZHUgUm9pIHYgRGFzc29udmlsbGUiLAogICAgICAgICJTaW1tZW50aGFsIHYgTWluaXN0ZXIgZm9yIEZpbmFuY2UiLAogICAgICAgICJDb21taXNzaW9uIHYgSXJlbGFuZCAoQnV5IElyaXNoIGNhbXBhaWduKSIsCiAgICAgICAgIkNvbmVnYXRlIEx0ZCB2IENvbW1pc3Npb25lcnMgb2YgQ3VzdG9tcyBhbmQgRXhjaXNlIiwKICAgICAgICAiS1x1MDBmY2tcdTAwZmNrZGV2ZWNpIHYgU3dlZGV4IiwKICAgICAgICAiTGF3cmllLUJsdW0iLAogICAgICAgICJMZXZpbiIsCiAgICAgICAgIkFuZ29uZXNlIiwKICAgICAgICAiQWxpbWFub3ZpYyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjkyIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJUaGUgVUsgb2JsaWdlZCBpbXBvcnRzIG9mIFVIVCBtaWxrIHRvIGJlIGFjY29tcGFuaWVkIGJ5IGEgbGljZW5zZS4gVGhlIENvbW1pc3Npb24gdGhvdWdodCB0aGlzIHdhcyB1bnJlYXNvbmFibGUuIgogICAgXSwKICAgICJBS0EiOiAiVUhUIE1pbGsiLAogICAgIkNJVEFUSU9OIjogIkNvbW1pc3Npb24gdiBVSyAoVUhUIE1pbGspIFsxOTgzXSBFQ1IgMjAzIiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRVUiLAogICAgICAgICJHQiIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTEyNC84MSIsCiAgICAiQ0FURUdPUlkiOiAiTm9uLUZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyBRdWFudGl0YXRpdmUgUmVzdHJpY3Rpb25zICZtZGFzaDsgQXJ0IDM0IFRGRVUgJm1kYXNoOyBGaXJzdCBQaGFzZSIKfSwKewogICAgIllFQVIiOiAiMTk4MSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJDb25zdW1lciBwcm90ZWN0aW9uIGlzIG5vdCBhIHZhbGlkIGRlcm9nYXRpb24gZnJvbSB0aGUgcHJvaGliaXRpb24gb24gUVJzIGFuZCBNRVFScywgb2Ygd2hpY2ggdGhlIGNvbXBsZXRlIGxpc3QgKGlzIHByb3ZpZGVkIGJ5IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAzNiBURkVVPC9zcGFuPi4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk5vbi1GaXNjYWwgUmVzdHJpY3Rpb25zIiwKICAgICAgICAiUXVhbnRpdGF0aXZlIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIkFydCAzNCBURkVVIiwKICAgICAgICAiRmlyc3QgUGhhc2UiCiAgICBdLAogICAgIk5BTUUiOiAiQ29tbWlzc2lvbiB2IElyZWxhbmQgKElyaXNoIFNvdXZlbmlycykiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNvbW1pc3Npb24gdiBJcmVsYW5kIChCdXkgSXJpc2ggY2FtcGFpZ24pIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEZyYW5jZSAoU3BhbmlzaCBTdHJhd2JlcnJpZXMpIiwKICAgICAgICAiU2ltbWVudGhhbCB2IE1pbmlzdGVyIGZvciBGaW5hbmNlIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFVLIChVSFQgTWlsaykiLAogICAgICAgICJIZW5uIGFuZCBEYXJieSIsCiAgICAgICAgIlByb2N1cmV1ciBkdSBSb2kgdiBEYXNzb252aWxsZSIsCiAgICAgICAgIkNvbmVnYXRlIEx0ZCB2IENvbW1pc3Npb25lcnMgb2YgQ3VzdG9tcyBhbmQgRXhjaXNlIiwKICAgICAgICAiRmFjY2luaSBEb3JpIiwKICAgICAgICAiQWRvdWkgYW5kIENvcm51YWlsbGUiLAogICAgICAgICJGZWxpeCBQYWxhY2lvcyBkZSBsYSBWaWxsYSIsCiAgICAgICAgIkdyb2VuZXIiLAogICAgICAgICJEYW5vIgogICAgXSwKICAgICJOVU1CRVIiOiAiOTMiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIklyaXNoIGxlZ2lzbGF0aW9uIHJlcXVpcmVkIGEgPHNwYW4gY2xhc3M9XCJpdFwiPnNvdXZlbmlyczwvc3Bhbj4gcHJvZHVjZWQgb3V0c2lkZSBJcmVsYW5kIHRvIGJlIG1hcmtlZCB3aXRoIHRoZWlyIG9yaWdpbi4gSW4gdGhlIENvbW1pc3Npb24mIzgyMTc7cyBvcGluaW9uLCB0aGlzIHdvdWxkIHBvdGVudGlhbGx5IGhhcm0gdHJhZGUuIElyZWxhbmQmIzgyMTc7cyB2aWV3IHdhcyB0aGF0IHRoZSBtZWFzdXJlIHByb3RlY3RlZCBjb25zdW1lcnMsIHdobyBuYXR1cmFsbHkgd2FudGVkIHRvIGtub3cgd2hlcmUgYW4gaXRlbSB0aGV5IGJvdWdodCB3YXMgcHJvZHVjZWQuIgogICAgXSwKICAgICJBS0EiOiAiSXJpc2ggU291dmVuaXJzIiwKICAgICJDSVRBVElPTiI6ICJDb21taXNzaW9uIHYgSXJlbGFuZCAoSXJpc2ggU291dmVuaXJzKSBbMTk4MV0gRUNSIDE2MjUiLAogICAgIkZMQUdTIjogWwogICAgICAgICJFVSIsCiAgICAgICAgIklFIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMTEzLzgwIiwKICAgICJDQVRFR09SWSI6ICJOb24tRmlzY2FsIFJlc3RyaWN0aW9ucyAmbWRhc2g7IFF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMgJm1kYXNoOyBBcnQgMzQgVEZFVSAmbWRhc2g7IEZpcnN0IFBoYXNlIgp9LAp7CiAgICAiWUVBUiI6ICIxOTc2IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkNvbXB1bHNvcnkgc3lzdGVtYXRpYyBvciBzcG9yYWRpYyB2ZXRlcmluYXJ5IGluc3BlY3Rpb25zIGNhcnJpZWQgb3V0IG9uIGxpdmVzdG9jayBhbW91bnRlZCB0byBhbiBtZWFzdXJlIG9mIGVxdWl2YWxlbnQgZWZmZWN0IHRvIGEgcXVhbnRpdGF0aXZlIHJlc3RyaWN0aW9uLiBHaXZlbiB0aGUgcmVxdWlyZW1lbnQgdGhhdCBpbXBvcnRlcnMgb2YgbGl2ZXN0b2NrIGNhcnJ5IGNlcnRpZmljYXRlcyBhdHRlc3RpbmcgdG8gdGhlIGhlYWx0aCBvZiB0aGUgYW5pbWFscywgc3VjaCBhIG1lYXN1cmUgd2FzIGRpc3Byb3BvcnRpb25hdGUsIGFuZCBoYWQgbm8gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDM2IFRGRVU8L3NwYW4+IGRlZmVuY2UuIiwKICAgICAgICAiVE9ETyBHaXVsaWEmIzgyMTc7cyBub3RlICZtZGFzaDsgJiM4MjIwO0l0YWxpYW4gYXV0aG9yaXR5IHNhaWQgdGhlIG1lYXN1cmUgd2FzIG5lY2Vzc2FyeSB0byBwcm90ZWN0IHB1YmxpYyBoZWFsdGgsIGFuZCBndWVzcyB3aGF0PyBQdWJsaWMgaGVhbHRoIGlzIGluIGFydGljbGUgMzYuIFRoZSByZWFzb24gaXMgdGhhdCBBcnRpY2xlIDM2IGlzIG5vdCBtYWRlIHRvIGFsbG93IG5hdGlvbmFsIGxhdyB0byBkZXJvZ2F0ZSBmcm9tIG5hdGlvbmFsIGxhdywgaXQgZG9lcyBub3QgZ2l2ZSBtZW1iZXIgc3RhdGUgYSBmcmVlIGhhbmQgdG8gZG8gd2hhdGV2ZXIgdGhleSB3aXNoIGluIHRoaXMgYXJlYS4gQXJ0aWNsZSAzNiBtdXN0IGp1c3RpZnkgYSBwcm92aXNpb24sIGtub3dpbmcgdGhhdCB0aGUgbWVhc3VyZSBtdXN0IGJlIG5lY2Vzc2FyeSBhbmQgcHJvcG9ydGlvbmFsIGluIG9yZGVyIHRvIHByb3RlY3QgdGhlIG5vbiBmaXNjYWwgaW50ZXJlc3QuIFdobyBkZWNpZGUgaWYgdGhlIG1lYXN1cmUgaXMgcHJvcG9ydGlvbmFsIGFuZCBuZWNlc3Nhcnk/IFRoaXMgaXMgYSBtYXR0ZXIgb2YgRVUgbGF3LiAmIzgyMjA7IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJOb24tRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIlF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMiLAogICAgICAgICJBcnQgMzQgVEZFVSIsCiAgICAgICAgIkZpcnN0IFBoYXNlIgogICAgXSwKICAgICJOQU1FIjogIlNpbW1lbnRoYWwgdiBNaW5pc3RlciBmb3IgRmluYW5jZSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ29tbWlzc2lvbiB2IFVLIChVSFQgTWlsaykiLAogICAgICAgICJDb21taXNzaW9uIHYgRnJhbmNlIChTcGFuaXNoIFN0cmF3YmVycmllcykiLAogICAgICAgICJDb21taXNzaW9uIHYgSXJlbGFuZCAoQnV5IElyaXNoIGNhbXBhaWduKSIsCiAgICAgICAgIkhlbm4gYW5kIERhcmJ5IiwKICAgICAgICAiUHJvY3VyZXVyIGR1IFJvaSB2IERhc3NvbnZpbGxlIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IElyZWxhbmQgKElyaXNoIFNvdXZlbmlycykiLAogICAgICAgICJDb25lZ2F0ZSBMdGQgdiBDb21taXNzaW9uZXJzIG9mIEN1c3RvbXMgYW5kIEV4Y2lzZSIsCiAgICAgICAgIkpvaG4gV2Fsa2VyIHYgTWluaXN0ZXJpZXQgZm9yIFNrYXR0ZXIiLAogICAgICAgICJGbGFtaW5pbyBDb3N0YSB2IEVORUwiLAogICAgICAgICJUcm9qYW5pIiwKICAgICAgICAiRGVmcmVubmUgdiBTQUJFTkEiLAogICAgICAgICJCcmVzY2lhbmkgdiBJdGFsaWFuIEZpbmFuY2UgQWRtaW5pc3RyYXRpb24iCiAgICBdLAogICAgIk5VTUJFUiI6ICI5NCIsCiAgICAiU1VNTUFSWSI6IFtdLAogICAgIkNJVEFUSU9OIjogIlNpbW1lbnRoYWwgdiBNaW5pc3RlciBmb3IgRmluYW5jZSBbMTk3Nl0gRUNSIDE4NzE6IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiSVQiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0zNS83NiIsCiAgICAiQ0FURUdPUlkiOiAiTm9uLUZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyBRdWFudGl0YXRpdmUgUmVzdHJpY3Rpb25zICZtZGFzaDsgQXJ0IDM0IFRGRVUgJm1kYXNoOyBGaXJzdCBQaGFzZSIKfSwKewogICAgIllFQVIiOiAiMTk4MiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJBIHB1YmxpY2l0eSBjYW1wYWlnbiBvcmNoZXN0cmF0ZWQgYnkgYSBuYXRpb24gc3RhdGUgdG8gZW5jb3VyYWdlIGl0cyBjaXRpemVucyB0byBkaXNjcmltaW5hdGUgaW4gZmF2b3VyIG9mIGRvbWVzdGljYWxseSBwcm9kdWNlZCBwcm9kdWN0cyBpcyBhIG1lYXN1cmUgb2YgZXF1aXZhbGVudCBlZmZlY3QgdG8gYSBxdWFudGl0YXRpdmUgcmVzdHJpY3Rpb24uIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJOb24tRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIlF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMiLAogICAgICAgICJBcnQgMzQgVEZFVSIsCiAgICAgICAgIkZpcnN0IFBoYXNlIgogICAgXSwKICAgICJOQU1FIjogIkNvbW1pc3Npb24gdiBJcmVsYW5kIChCdXkgSXJpc2ggY2FtcGFpZ24pIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJQcm9jdXJldXIgZHUgUm9pIHYgRGFzc29udmlsbGUiLAogICAgICAgICJTaW1tZW50aGFsIHYgTWluaXN0ZXIgZm9yIEZpbmFuY2UiLAogICAgICAgICJIZW5uIGFuZCBEYXJieSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBGcmFuY2UgKFNwYW5pc2ggU3RyYXdiZXJyaWVzKSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJcmVsYW5kIChJcmlzaCBTb3V2ZW5pcnMpIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFVLIChVSFQgTWlsaykiLAogICAgICAgICJDb25lZ2F0ZSBMdGQgdiBDb21taXNzaW9uZXJzIG9mIEN1c3RvbXMgYW5kIEV4Y2lzZSIsCiAgICAgICAgIlZvbiBDb2xzb24gdiBMYW5kIE5vcmRyaGVpbi1XZXN0ZmFsZW4iLAogICAgICAgICJUcm9qYW5pIiwKICAgICAgICAiQWRvdWkgYW5kIENvcm51YWlsbGUiLAogICAgICAgICJSIChleCBwLiBGYWN0b3J0YW1lIEx0ZCkgdiBTZWMgb2YgU3RhdGUgZm9yIFRyYW5zcG9ydCIsCiAgICAgICAgIlB1YmJsaWNvIE1pbmlzdGVybyB2IFJhdHRpIgogICAgXSwKICAgICJOVU1CRVIiOiAiOTUiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkluIGFuIGVmZm9ydCB0byBzdGltdWxhdGUgaXRzIHNsdWdnaXNoIGFncmljdWx0dXJhbCBzZWN0b3IsIElyZWxhbmQgb3JnYW5pc2VkIGFuZCBmdW5kZWQgYSBjYW1wYWlnbiB0byBnZXQgdGhlIElyaXNoIHRvICYjODIyMDtCdXkgSXJpc2gmIzgyMjE7LiIKICAgIF0sCiAgICAiQUtBIjogIkJ1eSBJcmlzaCBDYW1wYWlnbiIsCiAgICAiQ0lUQVRJT04iOiAiQ29tbWlzc2lvbiB2IElyZWxhbmQgKEJ1eSBJcmlzaCBjYW1wYWlnbikgWzE5ODJdIEVDUiA0MDA1IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRVUiLAogICAgICAgICJJRSIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTI0OS84MSIsCiAgICAiQ0FURUdPUlkiOiAiTm9uLUZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyBRdWFudGl0YXRpdmUgUmVzdHJpY3Rpb25zICZtZGFzaDsgQXJ0IDM0IFRGRVUgJm1kYXNoOyBGaXJzdCBQaGFzZSIKfSwKewogICAgIllFQVIiOiAiMTk5NyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJBIG1lbWJlciBzdGF0ZSBpcyBsaWFibGUgZm9yIGEgYnJlYWNoIG9mIEFydCAzNCBpZiBpdCBkb2VzIG5vdCBwcmV2ZW50IG9yIHN0b3AgYSBibG9ja2FkZSB0YXJnZXRpbmcgc3BlY2lmaWMgaW1wb3J0cy4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIk5vbi1GaXNjYWwgUmVzdHJpY3Rpb25zIiwKICAgICAgICAiUXVhbnRpdGF0aXZlIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIkFydCAzNCBURkVVIiwKICAgICAgICAiRmlyc3QgUGhhc2UiLAogICAgICAgICJOb24tRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIlF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMiLAogICAgICAgICJBcnQgMzQgVEZFVSIsCiAgICAgICAgIkZpcnN0IFBoYXNlIgogICAgXSwKICAgICJOQU1FIjogIkNvbW1pc3Npb24gdiBGcmFuY2UgKFNwYW5pc2ggU3RyYXdiZXJyaWVzKSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ29tbWlzc2lvbiB2IElyZWxhbmQgKEJ1eSBJcmlzaCBjYW1wYWlnbikiLAogICAgICAgICJTaW1tZW50aGFsIHYgTWluaXN0ZXIgZm9yIEZpbmFuY2UiLAogICAgICAgICJDb21taXNzaW9uIHYgSXJlbGFuZCAoSXJpc2ggU291dmVuaXJzKSIsCiAgICAgICAgIlByb2N1cmV1ciBkdSBSb2kgdiBEYXNzb252aWxsZSIsCiAgICAgICAgIkhlbm4gYW5kIERhcmJ5IiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFVLIChVSFQgTWlsaykiLAogICAgICAgICJDb25lZ2F0ZSBMdGQgdiBDb21taXNzaW9uZXJzIG9mIEN1c3RvbXMgYW5kIEV4Y2lzZSIsCiAgICAgICAgIlJleW5lcnMgdiBCZWxnaXVtIiwKICAgICAgICAiVm9uIENvbHNvbiB2IExhbmQgTm9yZHJoZWluLVdlc3RmYWxlbiIsCiAgICAgICAgIkZlbGl4IFBhbGFjaW9zIGRlIGxhIFZpbGxhIiwKICAgICAgICAiVmFuIFRpZ2dlbGUiLAogICAgICAgICJDb21taXNzaW9uIHYgRnJhbmNlIgogICAgXSwKICAgICJOVU1CRVIiOiAiOTYiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkZyZW5jaCBmYXJtZXJzICZtZGFzaDsgdGhlIG1vc3QgcGFtcGVyZWQgYW5kIHN1YnNpZGlzZWQgZmFybWVycyBpbiB0aGUgd29ybGQsIGFuZCBhbHNvIHRoZSBtb3N0IHRydWN1bGVudCBhbmQgY2hpbGRpc2ggJm1kYXNoOyBibG9ja2FkZWQgcFx1MDBlOWFnZSBib290aHMsIHN0b3BwaW5nIFNwYW5pc2ggbG9ycmllcyBmdWxsIG9mIHN0cmF3YmVycmllcyBmcm9tIGdvaW5nIGFib3V0IHRoZWlyIGJ1c2luZXNzLiAmIzgyMjA7UGFzIGNvbnRlbnQhJiM4MjIxOyBQeWdteS1icmFpbmVkIHdhbmtlcnMuIFRha2VuIHRvIGNvdXJ0IGJ5IHRoZSBDb21taXNzaW9uLCBGcmFuY2UgYXJndWVkIGl0IGhhZCBub3RoaW5nIHRvIGRvIHdpdGggdGhlIHByb3Rlc3QuIFRoZSBjb3VydCBvYnNlcnZlZCB0aGF0IHRoZXkgZGlkIGluIHRoYXQgdGhleSBjb3VsZCBoYXZlIHN0b3BwZWQgaXQgYnV0IGNob3NlIG5vdCB0by4gRnJhbmNlIHRhY2l0bHkgdGhyZWF0ZW5lZCB0aGUgQ291cnQgd2l0aCB0aGUgYmxhbWUgZm9yIHRoZSBjaXZpbCB1bnJlc3Qgd2hpY2gsIGl0IGludGltYXRlZCwgbWF5IGZvbGxvdyBhIGZpbmRpbmcgYWdhaW5zdCB0aGVtICZtZGFzaDsgZmVlbGluZ3Mgd2VyZSB2ZXJ5IHN0cm9uZzsgc2VjdXJpdHkgaXNzdWVzLCBldGMuIE1lYW53aGlsZSwgdGhlIHN0cmF3YmVycmllcyByb3R0ZWQgaW4gbGF5LWJ5cy4iCiAgICBdLAogICAgIkFLQSI6ICJTcGFuaXNoIFN0cmF3YmVycmllcyIsCiAgICAiQ0lUQVRJT04iOiAiQ29tbWlzc2lvbiB2IEZyYW5jZSBbMTk5N10gRUNSIEkiLAogICAgIkZMQUdTIjogWwogICAgICAgICJGUiIsCiAgICAgICAgIkVTIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMjY1Lzk1IiwKICAgICJDQVRFR09SWSI6ICJOb24tRmlzY2FsIFJlc3RyaWN0aW9ucyAmbWRhc2g7IFF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMgJm1kYXNoOyBBcnQgMzQgVEZFVSAmbWRhc2g7IEZpcnN0IFBoYXNlIC8gTm9uLUZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyBRdWFudGl0YXRpdmUgUmVzdHJpY3Rpb25zICZtZGFzaDsgQXJ0IDM0IFRGRVUgJm1kYXNoOyBGaXJzdCBQaGFzZSIKfSwKewogICAgIllFQVIiOiAiMTk3OSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJOb24tRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIlF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMiLAogICAgICAgICJBcnQgMzQgVEZFVSIsCiAgICAgICAgIkZpcnN0IFBoYXNlIiwKICAgICAgICAiTm9uLUZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJRdWFudGl0YXRpdmUgUmVzdHJpY3Rpb25zIiwKICAgICAgICAiTmF0aW9uYWwgQXV0b25vbXkgUmVjb2duaXNlZCIKICAgIF0sCiAgICAiTkFNRSI6ICJIZW5uIGFuZCBEYXJieSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ29tbWlzc2lvbiB2IEZyYW5jZSAoU3BhbmlzaCBTdHJhd2JlcnJpZXMpIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFVLIChVSFQgTWlsaykiLAogICAgICAgICJTaW1tZW50aGFsIHYgTWluaXN0ZXIgZm9yIEZpbmFuY2UiLAogICAgICAgICJQcm9jdXJldXIgZHUgUm9pIHYgRGFzc29udmlsbGUiLAogICAgICAgICJDb21taXNzaW9uIHYgSXJlbGFuZCAoQnV5IElyaXNoIGNhbXBhaWduKSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJcmVsYW5kIChJcmlzaCBTb3V2ZW5pcnMpIiwKICAgICAgICAiQ29uZWdhdGUgTHRkIHYgQ29tbWlzc2lvbmVycyBvZiBDdXN0b21zIGFuZCBFeGNpc2UiLAogICAgICAgICJBbmdvbmVzZSIsCiAgICAgICAgIldhbHJhdmUiLAogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKEFydCBUcmVhc3VyZXMpIiwKICAgICAgICAiQnJ1bm5lciIsCiAgICAgICAgIlZhbiBHZW5kIGVuIExvb3MiCiAgICBdLAogICAgIk5VTUJFUiI6ICI5NyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiVUsgbGVnaXNsYXRpb24gYmFubmVkIHJlcXVpcmVkIGltcG9ydGVycyBvZiBwb3Jub2dyYXBoeSB0byBvYnRhaW4gYW4gaW1wb3J0IGxpY2Vuc2UuIFRoZSBVSyByZWxpZWQgb24gdGhlIEFydCAzNiBkZXJvZ2F0aW9ucy4iCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkhlbm4gYW5kIERhcmJ5IFsxOTc5XSBFQ1IgMzc5NSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkdCIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMzQvNzkiLAogICAgIkNBVEVHT1JZIjogIk5vbi1GaXNjYWwgUmVzdHJpY3Rpb25zICZtZGFzaDsgUXVhbnRpdGF0aXZlIFJlc3RyaWN0aW9ucyAmbWRhc2g7IEFydCAzNCBURkVVICZtZGFzaDsgRmlyc3QgUGhhc2UgLyBOb24tRmlzY2FsIFJlc3RyaWN0aW9ucyAmbWRhc2g7IFF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMgJm1kYXNoOyBOYXRpb25hbCBBdXRvbm9teSBSZWNvZ25pc2VkIgp9LAp7CiAgICAiWUVBUiI6ICIxOTg2IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgImJhY2tncm91bmQ6IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJOb24tRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIlF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMiLAogICAgICAgICJOYXRpb25hbCBBdXRvbm9teSBSZWNvZ25pc2VkIgogICAgXSwKICAgICJOQU1FIjogIkNvbmVnYXRlIEx0ZCB2IENvbW1pc3Npb25lcnMgb2YgQ3VzdG9tcyBhbmQgRXhjaXNlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJIZW5uIGFuZCBEYXJieSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBJcmVsYW5kIChJcmlzaCBTb3V2ZW5pcnMpIiwKICAgICAgICAiUHJvY3VyZXVyIGR1IFJvaSB2IERhc3NvbnZpbGxlIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IElyZWxhbmQgKEJ1eSBJcmlzaCBjYW1wYWlnbikiLAogICAgICAgICJDb21taXNzaW9uIHYgVUsgKFVIVCBNaWxrKSIsCiAgICAgICAgIlNpbW1lbnRoYWwgdiBNaW5pc3RlciBmb3IgRmluYW5jZSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBGcmFuY2UgKFNwYW5pc2ggU3RyYXdiZXJyaWVzKSIsCiAgICAgICAgIkRlZnJlbm5lIHYgU0FCRU5BIiwKICAgICAgICAiS2VtcGYiLAogICAgICAgICJBbGltYW5vdmljIiwKICAgICAgICAiQWRlbmVsZXIiLAogICAgICAgICJHcmFmIgogICAgXSwKICAgICJOVU1CRVIiOiAiOTgiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRoZSBzYWxlIG9mIDxzcGFuIGNsYXNzPVwiaXRcIj5hIHNwZWNpYWwga2luZDwvc3Bhbj4gb2YgaW5mbGF0YWJsZSBkb2xsIHJlcXVpcmVkIGEgbGljZW5zZS4gU2VlIGFsc28gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SGVubiBhbmQgRGFyYnk8L3NwYW4+LiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiQ29uZWdhdGUgTHRkIHYgQ29tbWlzc2lvbmVycyBvZiBDdXN0b21zIGFuZCBFeGNpc2UgWzE5ODZdIEVDUiIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIiIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTEyMS84NSIsCiAgICAiQ0FURUdPUlkiOiAiTm9uLUZpc2NhbCBSZXN0cmljdGlvbnMgJm1kYXNoOyBRdWFudGl0YXRpdmUgUmVzdHJpY3Rpb25zICZtZGFzaDsgTmF0aW9uYWwgQXV0b25vbXkgUmVjb2duaXNlZCIKfSwKewogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5FZmZlY3RpdmVuZXNzIGFuZCBTY29wZSBvZiBBcnQgNDU8L3NwYW4+IGlzIHZlcnRpY2FsIDxzcGFuIGNsYXNzPVwiYmRcIj5hbmQgaG9yaXpvbnRhbDwvc3Bhbj4gKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPldhbHJhdmU8L3NwYW4+LCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BbmdvbmVzZTwvc3Bhbj4pLCBhbmQgcmVxdWlyZXMgYSBib3JkZXIgdG8gYmUgY3Jvc3NlZCAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Qm91a2hhbGZhPC9zcGFuPikuIiwKICAgICAgICAiVGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1lYW5pbmcgb2YgV29ya2VyIGluIEFydCA0NTwvc3Bhbj4gcmVxdWlyZXMgdGhlIGFjdGl2aXR5IHRvIGJlIDxzcGFuIGNsYXNzPVwiYmRcIj5nZW51aW5lIGFuZCBlZmZlY3RpdmU8L3NwYW4+ICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MZXZpbjwvc3Bhbj4pIG5vdCA8c3BhbiBjbGFzcz1cImJkXCI+bWFyZ2luYWwgYW5kIGFuY2lsbGFyeTwvc3Bhbj4gKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJhdWxpbjwvc3Bhbj4pLiBUaGUgYWN0aXZpdHkgaGFzIHRvIGJlIDxzcGFuIGNsYXNzPVwiYmRcIj5lY29ub21pYzwvc3Bhbj4gKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJldHRyYXk8L3NwYW4+KSBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPnJlbXVuZXJhdGVkPC9zcGFuPiAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U3RleW1hbm48L3NwYW4+LCBldmVuIGlmIHZlcnkgcG9vcmx5IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPktlbXBmPC9zcGFuPiksIGJ1dCBjYW4gYmUgPHNwYW4gY2xhc3M9XCJiZFwiPnRyYWluaW5nPC9zcGFuPiBwcmVwYXJhdG9yeSB0byBnZW51aW5lIGFuZCBlZmZlY3RpdmUgd29yayAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmVybmluaTwvc3Bhbj4pLiBBIGpvYnNlZWtlciBpcyBhIHdvcmtlciAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QW50b25pc3Nlbjwvc3Bhbj4pLCBidXQgaXMgbm90IGVudGl0bGVkIHRvIGVxdWFsIHRyZWF0bWVudCB3LnIudC4gd2VsZmFyZSBhbmQgdGF4ICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MZWJvbjwvc3Bhbj4pLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnM8L3NwYW4+IG1heSBkaXNjcmltaW5hdGUgPHNwYW4gY2xhc3M9XCJiZFwiPmRpcmVjdGx5PC9zcGFuPiAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TGV2aW48L3NwYW4+KSBvciA8c3BhbiBjbGFzcz1cImJkXCI+aW5kaXJlY3RseTwvc3Bhbj4gKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkdyb2VuZXI8L3NwYW4+LCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BbmdvbmVzZTwvc3Bhbj4pIG9yIG1heSBiZSA8c3BhbiBjbGFzcz1cImJkXCI+aW5kaXN0aW5jdGx5IGFwcGxpY2FibGU8L3NwYW4+IGJhcnJpZXJzIHRvIDxzcGFuIGNsYXNzPVwiYmRcIj5lbnRyeTwvc3Bhbj4gKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJvc21hbjwvc3Bhbj4pIG9yIDxzcGFuIGNsYXNzPVwiYmRcIj5leGl0PC9zcGFuPiAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+S3JhbmVtYW5uPC9zcGFuPikiLAogICAgICAgICI8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5KdXN0aWZpY2F0aW9ucyBmb3IgRGlzY3JpbWluYXRpb24gdW5kZXIgQXJ0IDQ1PC9zcGFuPigzKSBpbmNsdWRlIHB1YmxpYyA8c3BhbiBjbGFzcz1cImJkXCI+cG9saWN5PC9zcGFuPiAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Qm9uc2lnbm9yZTwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlZhbiBEdXluIHYgSG9tZSBPZmZpY2U8L3NwYW4+KSwgd2hpY2ggbWF5IDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+IGJlIGFidXNlZCAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QWRvdWkgYW5kIENvcm51YWlsbGU8L3NwYW4+KTsgPHNwYW4gY2xhc3M9XCJiZFwiPnNlY3VyaXR5PC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPmhlYWx0aDwvc3Bhbj4uIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIEFydCA0NSg0KSBleGNlcHRpb24gZm9yIHB1YmxpYyBzZXJ2aWM8c3BhbiBjbGFzcz1cImJkXCI+IG11c3QgYmUgPC9zcGFuPnByb3BvcnRpb25hdGUqIHRvIHRoZSBwYXJ0aWN1bGFycyBvZiB0aGUgam9iICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db21taXNzaW9uIHYgQmVsZ2l1bSBJPC9zcGFuPikuPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5KdXN0aWZpY2F0aW9ucyBmb3IgSW5kaXN0aW5jdGx5IEFwcGxpY2FibGUgTWVhc3VyZXMgdW5kZXIgQXJ0IDQ1PC9zcGFuPiwgd2hpY2ggbXVzdCBvZiBjb3Vyc2UgYmUgcHJvcG9ydGlvbmF0ZSwgaW5jbHVkZSA8c3BhbiBjbGFzcz1cImJkXCI+cHJvdGVjdGlvbiBvZiBjdWx0dXJlPC9zcGFuPiAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R3JvZW5lcjwvc3Bhbj4pLCBhbmQgaGVpZ2h0IG9mIHRoZSAgYmFycmllciBpbXBvc2VkICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5LcmFuZW1hbm48L3NwYW4+KS4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgJm1kYXNoOyBXb3JrZXJzIiwKICAgICJOQU1FIjogIkZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyAtIFN1bW1hcnkiLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyIsCiAgICAgICAgIkVmZmVjdGl2ZW5lc3MgYW5kIFNjb3BlIG9mIEFydCA0NSIsCiAgICAgICAgIk1lYW5pbmcgb2YgV29ya2VyIGluIEFydCA0NSIsCiAgICAgICAgIkp1c3RpZmljYXRpb25zIGZvciBEaXNjcmltaW5hdGlvbiB1bmRlciBBcnQgNDUiLAogICAgICAgICJFVSBDaXRpemVuc2hpcCIsCiAgICAgICAgIkNpdGl6ZW5zIFJpZ2h0cyBEaXJlY3RpdmUgLSBEaWdlc3RlZCIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgb3ZlciB0aGUgQm9yZGVyIiwKICAgICAgICAiU2Vjb25kYXJ5IExlZ2lzbGF0aW9uIiwKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IC0gRGlzY3Vzc2lvbiIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IElJIC0gRUZUQSB0byBOaWNlIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyBhdCB0aGUgQm9yZGVyIiwKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSSAtIFBhcmlzIHRvIE1lcmdlciIKICAgIF0sCiAgICAiTlVNQkVSIjogIjk5Igp9LAp7CiAgICAiVFlQRSI6ICJUcmVhdHkiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+VGV4dDwvc3Bhbj48L3NwYW4+IiwKICAgICAgICAiPG9sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+RnJlZWRvbSBvZiBtb3ZlbWVudCA8c3BhbiBjbGFzcz1cImJkXCI+Zm9yIHdvcmtlcnM8L3NwYW4+IHNoYWxsIGJlIHNlY3VyZWQgd2l0aGluIHRoZSBVbmlvbi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiaXRcIj5UaGlzIGVudGFpbHM8L3NwYW4+IGFib2xpdGlvbiBvZiA8c3BhbiBjbGFzcz1cImJkXCI+YW55PC9zcGFuPiBkaXNjcmltaW5hdGlvbiBiYXNlZCBvbiA8c3BhbiBjbGFzcz1cImJkXCI+bmF0aW9uYWxpdHk8L3NwYW4+IGJldHdlZW4gd29ya2VycyBvZiB0aGUgbWVtYmVyIHN0YXRlcyBhcyByZWdhcmRzIDxzcGFuIGNsYXNzPVwiYmRcIj5lbXBsb3ltZW50LCByZW11bmVyYXRpb248L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+b3RoZXIgY29uZGl0aW9ucyBvZiB3b3JrPC9zcGFuPiBhbmQgZW1wbG95bWVudC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiaXRcIj5JdCBhbHNvIGVudGFpbHM8L3NwYW4+IHRoZSByaWdodCwgPHNwYW4gY2xhc3M9XCJiZFwiPnN1YmplY3QgdG8gbGltaXRhdGlvbnM8L3NwYW4+IGp1c3RpZmllZCBvbiBncm91bmRzIG9mIHB1YmxpYyA8c3BhbiBjbGFzcz1cImJkXCI+cG9saWN5PC9zcGFuPiwgcHVibGljIDxzcGFuIGNsYXNzPVwiYmRcIj5zZWN1cml0eTwvc3Bhbj4gb3IgcHVibGljIDxzcGFuIGNsYXNzPVwiYmRcIj5oZWFsdGg8L3NwYW4+Ojwvc3Bhbj48b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj50byBhY2NlcHQgb2ZmZXJzIG9mIGVtcGxveW1lbnQgYWN0dWFsbHkgbWFkZTwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+dG8gbW92ZSBmcmVlbHkgd2l0aGluIHRoZSBtZW1iZXIgc3RhdGUmIzgyMTc7cyB0ZXJyaXRvcnkgZm9yIHRoYXQgcHVycG9zZTwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+dG8gc3RheSBpbiBhbiBNUyBmb3IgdGhlIHB1cnBvc2Ugb2YgPHNwYW4gY2xhc3M9XCJiZFwiPmVtcGxveW1lbnQ8L3NwYW4+IGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgcHJvdmlzaW9ucyBnb3Zlcm5pbmcgdGhlIGVtcGxveW1lbnQgb2YgbmF0aW9uYWxzIG9mIHRoYXQgU3RhdGUgbGFpZCBkb3duIGJ5IGxhdywgcmVndWxhdGlvbiBvciBhZG1pbmlzdHJhdGl2ZSBhY3Rpb247PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj50byA8c3BhbiBjbGFzcz1cImJkXCI+cmVtYWluPC9zcGFuPiBpbiB0aGUgdGVycml0b3J5IG9mIGFuIG1lbWJlciBzdGF0ZSA8c3BhbiBjbGFzcz1cImJkXCI+YWZ0ZXI8L3NwYW4+IGhhdmluZyBiZWVuIGVtcGxveWVkIGluIHRoYXQgU3RhdGUsIDxzcGFuIGNsYXNzPVwiYmRcIj5zdWJqZWN0IHRvIGNvbmRpdGlvbnM8L3NwYW4+IHdoaWNoIHNoYWxsIGJlIGVtYm9kaWVkIGluIGltcGxlbWVudGluZyByZWd1bGF0aW9ucyB0byBiZSBkcmF3biB1cCBieSB0aGUgQ29tbWlzc2lvbi48L3NwYW4+PC9saT48L29sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhpcyBhcnRpY2xlIGRvZXMgbm90IGFwcGx5IHRvIGVtcGxveW1lbnQgaW4gdGhlIHB1YmxpYyBzZXJ2aWNlLjwvc3Bhbj48L2xpPjwvb2w+IgogICAgXSwKICAgICJBS0EiOiAiQXJ0IDQ1IFRGRVUiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgJm1kYXNoOyBXb3JrZXJzIiwKICAgICJOQU1FIjogIkFydGljbGUgNDUgVEZFVSIsCiAgICAiTlVNQkVSIjogIjEwMCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQXJ0aWNsZXMgMTgsIDIwIGFuZCAyMSBURkVVIiwKICAgICAgICAiTGlzYm9uIFRyZWF0eSAtIEh1bWFuIFJpZ2h0cyBBc3BlY3RzIiwKICAgICAgICAiQXJ0IDI4OCBURkVVIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RWZmZWN0aXZlbmVzczwvc3Bhbj4gJm1kYXNoOyB2ZXJ0aWNhbCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EaXJlY3QgRWZmZWN0PC9zcGFuPiwgb2YgY291cnNlIHN1cmUuIEg8c3BhbiBjbGFzcz1cImJkXCI+b3Jpem9udGFsPC9zcGFuPiBhcyB3ZWxsPyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPldhbHJhdmU8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Cb3NtYW48L3NwYW4+PyBZZXMgYW5kIHllcyBBbmQgZm9yIHRoZSBhdm9pZGFuY2Ugb2YgZG91YnQsIEFydCA0NSBpcyAmIzgyMTY7bm90IHNwZWNpZmljYWxseSBhZGRyZXNzZWQgdG8gbWVtYmVyIHN0YXRlcywgYnV0IGlzIG9mIDxzcGFuIGNsYXNzPVwiYmRcIj5nZW5lcmFsPC9zcGFuPiBhcHBsaWNhdGlvbiwmIzgyMTc7ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QW5nb25lc2U8L3NwYW4+Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGlzIGNvdmVycyAoYXQgbGVhc3QpIHJ1bGVzIG1hZGUgYnkgcHJpdmF0ZSBib2RpZXMgcmVndWxhdGluZyBnYWluZnVsIGVtcGxveW1lbnQgJiM4MjE2O2luIGEgY29sbGVjdGl2ZSBtYW5uZXIuJiM4MjE3OyBJbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5XYWxyYXZlPC9zcGFuPiwgdGhlIEZyZW5jaCBjeWNsaW5nIGFzc29jaWF0aW9uLiBJbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Cb3NtYW48L3NwYW4+LCBGSUZBLjwvc3Bhbj48L2xpPjwvdWw+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+U2NvcGU8L3NwYW4+ICZtZGFzaDsgYSBib3JkZXIgbXVzdCBiZSBjcm9zc2VkIGZvciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgNDU8L3NwYW4+IHJpZ2h0cyB0byBiZSBlbmpveWVkLiBUaGlzIGNhbiBoYXBwZW4gYnk6IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+R29pbmcgdG8gPHNwYW4gY2xhc3M9XCJiZFwiPmxpdmUgYW5kIHdvcms8L3NwYW4+IGluIGFub3RoZXIgbWVtYmVyIHN0YXRlLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+TGl2aW5nIGluIG9uZSBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPmNvbW11dGluZzwvc3Bhbj4gaW50byBhbm90aGVyLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIGJvcmRlciBtYXkgYmUgdGhlIGRvb3Igb2Ygb25lIG9mIHRoZSBvdGhlciBtZW1iZXIgc3RhdGUmIzgyMTc7cyA8c3BhbiBjbGFzcz1cImJkXCI+ZW1iYXNzaWVzPC9zcGFuPiBpbiBhbm90aGVyIHBhcnQgb2YgdGhlIHdvcmxkIGFsdG9nZXRoZXIgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Cb3VraGFsZmE8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIldvcmtlcnMiLAogICAgICAgICJFZmZlY3RpdmVuZXNzIGFuZCBTY29wZSBvZiBBcnQgNDUgVEZFVSIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgJm1kYXNoOyBXb3JrZXJzICZtZGFzaDsgRWZmZWN0aXZlbmVzcyBhbmQgU2NvcGUgb2YgQXJ0IDQ1IFRGRVUiLAogICAgIk5BTUUiOiAiRWZmZWN0aXZlbmVzcyBhbmQgU2NvcGUgb2YgQXJ0IDQ1IiwKICAgICJOVU1CRVIiOiAiMTAxIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMgLSBTdW1tYXJ5IiwKICAgICAgICAiTWVhbmluZyBvZiBXb3JrZXIgaW4gQXJ0IDQ1IiwKICAgICAgICAiUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyIsCiAgICAgICAgIkp1c3RpZmljYXRpb25zIGZvciBEaXNjcmltaW5hdGlvbiB1bmRlciBBcnQgNDUiLAogICAgICAgICJFVSBDaXRpemVuc2hpcCIsCiAgICAgICAgIkNpdGl6ZW5zIFJpZ2h0cyBEaXJlY3RpdmUgLSBEaWdlc3RlZCIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IEkgLSBQYXJpcyB0byBNZXJnZXIiLAogICAgICAgICJQb3R0ZWQgSGlzdG9yeSBJSSAtIEVGVEEgdG8gTmljZSIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IElJSSAtIEFjY2Vzc2lvbiB0byB0aGUgUHJlc2VudCIsCiAgICAgICAgIkRvY3RyaW5lIG9mIERpcmVjdCBFZmZlY3QiLAogICAgICAgICIoSm9pbmVkKSBLYWRpIGFuZCBBbCBCYXJha2FhdCIsCiAgICAgICAgIlNlY29uZGFyeSBMZWdpc2xhdGlvbiIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Xb3JrZXJzPC9zcGFuPjwvc3Bhbj48YnI+VGhlIGFjdGl2aXR5IG11c3QgYmUgPHNwYW4gY2xhc3M9XCJiZFwiPmdlbnVpbmUgYW5kIGVmZmVjdGl2ZTwvc3Bhbj4sIGFzIGVzdGFibGlzaGVkIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkxldmluPC9zcGFuPiwgd2hpY2ggZnVydGhlciBoZWxkIGl0IG11c3Qgbm90IGJlIDxzcGFuIGNsYXNzPVwiYmRcIj5tYXJnaW5hbCBhbmQgYW5jaWxsYXJ5PC9zcGFuPi4gSXRzIGp1ZGdtZW50IGhlbGQgJm1kYXNoOyIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkRlZmluaXRpb24gb2YgJiM4MjE2O3dvcmtlciYjODIxNzsgaXMgPHNwYW4gY2xhc3M9XCJiZFwiPmZvciB0aGUgVW5pb248L3NwYW4+LCBub3QgdGhlIG1lbWJlciBzdGF0ZXMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CdXQgbXVzdCBiZSA8c3BhbiBjbGFzcz1cImJkXCI+YnJvYWQ8L3NwYW4+LCBmcmVlIG1vdiYjODIxNzt0IGJlaW5nIGZ1bmRhbWVudGFsICZtZGFzaDsgYmVzaWRlcywgPHNwYW4gY2xhc3M9XCJiZFwiPnByaW5jaXBsZXM8L3NwYW4+IG91Z2h0IHRvIGJlIDxzcGFuIGNsYXNzPVwiYmRcIj5icm9hZDwvc3Bhbj4sIHRoZWlyIDxzcGFuIGNsYXNzPVwiYmRcIj5leGNlcHRpb25zPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJiZFwiPm5hcnJvdzwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+UGFydCB0aW1lPC9zcGFuPiB3b3JrIGlzIDxzcGFuIGNsYXNzPVwiYmRcIj5ub3QgZXhjbHVkZWQ8L3NwYW4+LCBidXQgdGhlIGFjdGl2aXR5IG11c3QgYmUgPHNwYW4gY2xhc3M9XCJiZFwiPmdlbnVpbmUgYW5kIGVmZmVjdGl2ZTwvc3Bhbj4sIGFuZCBub3QgPHNwYW4gY2xhc3M9XCJiZFwiPm9uIHN1Y2ggYSBzbWFsbCBzY2FsZTwvc3Bhbj4gYXMgdG8gYmUgcmVnYXJkZWQgYXMgPHNwYW4gY2xhc3M9XCJiZFwiPnB1cmVseSBtYXJnaW5hbCBhbmQgYW5jaWxsYXJ5PC9zcGFuPjwvc3Bhbj48L2xpPjwvb2w+IiwKICAgICAgICAiVG8gYmUgPHNwYW4gY2xhc3M9XCJiZFwiPmdlbnVpbmUgYW5kIGVmZmVjdGl2ZTwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkxhd3JpZS1CbHVtPC9zcGFuPiBnYXZlIGEgPHNwYW4gY2xhc3M9XCJpdFwiPmZ1cnRoZXI8L3NwYW4+IHRocmVlIGNvbnNpZGVyYXRpb25zICZtZGFzaDsiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5JcyB0aGUgYWN0aXZpdHkgb2YgPHNwYW4gY2xhc3M9XCJiZFwiPihpKTwvc3Bhbj4gZWNvbm9taWMgdmFsdWUsIDxzcGFuIGNsYXNzPVwiYmRcIj4oaWkpPC9zcGFuPiBzdXBlcnZpc2VkIGJ5IGFuIGVtcGxveWVyIGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+KGlpaSk8L3NwYW4+IHJlbXVuZXJhdGVkPzwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiVGhlIG5hdHVyZSBvZiA8c3BhbiBjbGFzcz1cImJkXCI+cmVsYXRpb25zaGlwcyBvZiBlbXBsb3ltZW50PC9zcGFuPiB3YXMgZGlzY3Vzc2VkIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkxlaHRvbmVuPC9zcGFuPiwgYSB0YWQgIDxzcGFuIGNsYXNzPVwiaXRcIj5TdHJlZXQtdi1Nb3VudGZvcmQ8L3NwYW4+aXNobHkuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlRyYWluaW5nPC9zcGFuPiBiZWZvcmUgdGhlIGdlbnVpbmUgYW5kIGVmZmVjdGl2ZSBhY3Rpdml0eSBzdGFydHMsIGNvdW50cyBhcyB3b3JrICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmVybmluaTwvc3Bhbj4uIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlJlbXVuZXJhdGlvbiBiZWxvdyBzdWJzaXN0ZW5jZTwvc3Bhbj4gKHN1cHBsZW1lbnRlZCB3aXRoIHdlbGZhcmUpIGRvZXMgbm90IHByZWNsdWRlIEFydCA0NSB3b3JrZXJkb20gKDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPktlbXBmPC9zcGFuPiwgd2hpY2ggcmVpdGVyYXRlZCB0aGF0IHdoYXQgY291bnRzIGlzIGdlbnVpbmVuZXNzIGFuZCBlZmZlY3RpdmVuZXNzKS4gVGhlIHJlbXVuZXJhdGlvbiBtYXkgYmUgPHNwYW4gY2xhc3M9XCJiZFwiPmluIGtpbmQ8L3NwYW4+ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+U3RleW1hbm48L3NwYW4+LiIsCiAgICAgICAgIkJlaW5nIDxzcGFuIGNsYXNzPVwiYmRcIj5tYXJyaWVkIHRvIHRoZSBib3NzPC9zcGFuPiBpcyBubyBpbXBlZGltZW50ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWVldXNlbjwvc3Bhbj4uIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPklycmVndWxhcml0eTwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwiYmRcIj5saW1pdGVkIGR1cmF0aW9uPC9zcGFuPiBvZiBzZXJ2aWNlcyBwZXJmb3JtZWQgbWF5LCB3aGVuIGFzc2Vzc2luZyBnZW51aW5lbmVzcyBhbmQgZWZmZWN0aXZlbmVzcywgaW5kaWNhdGUgaW5zdGVhZCBhIDxzcGFuIGNsYXNzPVwiYmRcIj5tYXJnaW5hbCBhbmQgYW5jaWxsYXJ5PC9zcGFuPiBjaGFyYWN0ZXIgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SYXVsaW48L3NwYW4+LiIsCiAgICAgICAgIlRoZSBhY3Rpdml0eSBtdXN0IGJlIDxzcGFuIGNsYXNzPVwiYmRcIj5lY29ub21pYzwvc3Bhbj4gJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CZXR0cmF5PC9zcGFuPiwgYWx0aG91Z2ggdGhlIGp1ZGdtZW50IGlzIG1vcmFsbHkgYW5kIGxvZ2ljYWxseSB3b25reS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkpvYnNlZWtlcnM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BbnRvbmlzc2VuPC9zcGFuPiBkZWNpZGVkIHRoZXkgPHNwYW4gY2xhc3M9XCJiZFwiPmFyZTwvc3Bhbj4gY292ZXJlZCBieSBBcnQgNDUsIGJlY2F1c2UgJm1kYXNoOyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkZyZWUgbW92JiM4MjE3O3Qgb2Ygd29ya2VycyBlbnRhaWxzIG5hdGlvbmFscyBvZiBtZW1iZXIgc3RhdGUgQSBtb3ZpbmcgZnJlZWx5IHRvIG1lbWJlciBzdGF0ZSBCIDxzcGFuIGNsYXNzPVwiYmRcIj5hbmQ8L3NwYW4+IHN0YXlpbmcgdGhlcmUsIHRvIDxzcGFuIGNsYXNzPVwiYmRcIj5zZWVrIGVtcGxveW1lbnQ8L3NwYW4+LiBXaHk/IEJlY2F1c2UgdGhhdCA8c3BhbiBjbGFzcz1cImJkXCI+ZW5oYW5jZXMgdGhlIGVmZmVjdGl2ZW5lc3M8L3NwYW4+IG9mIEFydCA0NSAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFudG9uaXNzZW48L3NwYW4+Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Ib3cgbG9uZyBjYW4gdGhleSBzdGF5PyAmIzgyMTY7QSByZWFzb25hYmxlIHRpbWUuJiM4MjE3OyBJbiBkZWZhdWx0IG9mIHNwZWNpZmljIGRvbWVzdGljIGxlZ2lzbGF0aW9uLCB0aGlzIG1lYW5zIDxzcGFuIGNsYXNzPVwiYmRcIj5zaXggbW9udGhzPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPldoZW4gdGhhdCBwZXJpb2QgbGFwc2VzLCBob3dldmVyLCBpZiB0aGUgcGVyc29uIHNob3dzIGV2aWRlbmNlIG9mIGNvbnRpbnVpbmcgdG8gc2VlayBlbXBsb3ltZW50IGZvciB3aGljaCBoZSYjODIxNztzIHF1YWxpZmllZCwgdGhlIE1TIG1heSBub3QgYm9vdCBoaW0gb3V0Ljwvc3Bhbj48L2xpPjwvdWw+PC91bD4iLAogICAgICAgICJGcm9tIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkxlYm9uPC9zcGFuPiwgaG93ZXZlciwgdGhlcmUgaXMgPHNwYW4gY2xhc3M9XCJiZFwiPm5vIG9ibGlnYXRpb248L3NwYW4+IG9uIGFuIE1TIHRvIHRyZWF0IGpvYnNlZWtlcnMgZnJvbSBvdGhlciBNU3MgZXF1YWxseSB0byB0aGVpciBvd24gaW4gPHNwYW4gY2xhc3M9XCJiZFwiPnNvY2lhbCBhbmQgdGF4IGFkdmFudGFnZXM8L3NwYW4+LiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJXb3JrZXJzIiwKICAgICAgICAiTWVhbmluZyBvZiBXb3JrZXIiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgV29ya2VycyAmbWRhc2g7IE1lYW5pbmcgb2YgV29ya2VyIiwKICAgICJOQU1FIjogIk1lYW5pbmcgb2YgV29ya2VyIGluIEFydCA0NSIsCiAgICAiTlVNQkVSIjogIjEwMiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyIsCiAgICAgICAgIkVmZmVjdGl2ZW5lc3MgYW5kIFNjb3BlIG9mIEFydCA0NSIsCiAgICAgICAgIkp1c3RpZmljYXRpb25zIGZvciBEaXNjcmltaW5hdGlvbiB1bmRlciBBcnQgNDUiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMgLSBTdW1tYXJ5IiwKICAgICAgICAiQ2l0aXplbnMgUmlnaHRzIERpcmVjdGl2ZSAtIERpZ2VzdGVkIiwKICAgICAgICAiRVUgQ2l0aXplbnNoaXAiLAogICAgICAgICJNaWdyYW50IENyaXNpcyAtIFR1cmtleSBEZWFsIiwKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSUkgLSBFRlRBIHRvIE5pY2UiLAogICAgICAgICJEb2N0cmluZSBvZiBEaXJlY3QgRWZmZWN0IiwKICAgICAgICAiUXVhbnRpdGF0aXZlIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyBvdmVyIHRoZSBCb3JkZXIiLAogICAgICAgICJQb3R0ZWQgSGlzdG9yeSBJSUkgLSBBY2Nlc3Npb24gdG8gdGhlIFByZXNlbnQiCiAgICBdCn0sCnsKICAgICJZRUFSIjogIjE5NzQiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiUnVsZXMgcmVndWxhdGluZyBnYWluZnVsIGVtcGxveW1lbnQgaW4gYSBjb2xsZWN0aXZlIG1hbm5lciBpbXBvc2VkIGJ5IG5vbi1wdWJsaWMgYm9kaWVzIGJ1dCBkaXNjcmltaW5hdGluZyBvbiB0aGUgYmFzaXMgb2YgbmF0aW9uYWxpdHkgZmFsbCBmb3VsIG9mIEFydCA0NSgyKSBURkVVICZtZGFzaDsgd2hpY2ggaXMsIHRoZXJlZm9yZSwgaG9yaXpvbnRhbGx5IGVmZmVjdGl2ZS4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIsCiAgICAgICAgIkVmZmVjdCBvZiBBcnRpY2xlIDQ1IFRGRVUiCiAgICBdLAogICAgIk5BTUUiOiAiV2FscmF2ZSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQW5nb25lc2UiLAogICAgICAgICJCb3NtYW4iLAogICAgICAgICJLcmFuZW1hbm4iLAogICAgICAgICJCZXJuaW5pIiwKICAgICAgICAiTGV2aW4iLAogICAgICAgICJDb21taXNzaW9uIHYgQmVsZ2l1bSBJIiwKICAgICAgICAiS2VtcGYiLAogICAgICAgICJCb25zaWdub3JlIiwKICAgICAgICAiR3JvZW5lciIsCiAgICAgICAgIkJldHRyYXkiLAogICAgICAgICJMYXdyaWUtQmx1bSIsCiAgICAgICAgIkFkb3VpIGFuZCBDb3JudWFpbGxlIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTAzIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJNci4gV2FscmF2ZSwgYSBEdXRjaG1hbiwgd2FzIGV4Y2x1ZGVkIGZyb20gZW1wbG95bWVudCBhcyBhIHBhY2VtYWtlciBpbiB0aGUgVG91ciBkZSBGcmFuY2UgYnkgYSBydWxlIHBhc3NlZCBieSB0aGUgPHNwYW4gY2xhc3M9XCJpdFwiPlVuaW9uIEN5Y2xpc3RlIEludGVybmF0aW9uYWxlPC9zcGFuPiBwcm92aWRpbmcgdGhhdCAmIzgyMTY7ZFx1MDBlOHMgbCYjODIxNzthbm5lXHUwMzAxZSAxOTczLCBsJiM4MjE3O2VudHJhaW5ldXIgZG9pdCBlXHUwMzAydHJlIGRlIGxhIG5hdGlvbmFsaXRlXHUwMzAxIGR1IGNvdXJldXImIzgyMTc7ICZtZGFzaDsgZnJvbSAxOTczLCB0aGUgcGFjZW1ha2VyIHdhcyB0byBiZSBvZiB0aGUgc2FtZSBuYXRpb25hbGl0eSBhcyB0aGUgcmlkZXIuIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJXYWxyYXZlIFsxOTc0XSBFQ1IgMTQwNToiLAogICAgIkZMQUdTIjogWwogICAgICAgICJFc3NlbnRpYWwiLAogICAgICAgICJMZWFkaW5nIiwKICAgICAgICAiTkwiLAogICAgICAgICJGUiIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTM2Lzc0IiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IFdvcmtlcnMgJm1kYXNoOyBFZmZlY3Qgb2YgQXJ0aWNsZSA0NSBURkVVIgp9LAp7CiAgICAiWUVBUiI6ICIxOTk1IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkNvbmZpcm1pbmcgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+V2FscmF2ZTwvc3Bhbj4sIGEgcnVsZSBzZXQgYnkgYSBib2R5IGdvdmVybmluZyB0aGUgb3JnYW5pc2F0aW9uIG9mIGVtcGxveW1lbnQgaW4gYSBzcG9ydCAoRklGQSksIGhhdmluZyB0aGUgZWZmZWN0IG9mIGRpc2NyaW1pbmF0aW9uLCBldmVuIGlmIG5laXRoZXIgZGlyZWN0IG5vciBpbmRpcmVjdCwgdmlvbGF0ZXMgQXJ0IDQ1IGlmIGl0IGltcGVkZXMgYWNjZXNzIHRvIHRoZSBsYWJvdXIgbWFya2V0LiAgTmV2ZXJ0aGVsZXNzLCBhIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlJ1bGUgb2YgUmVhc29uPC9zcGFuPiBhcHByb2FjaCBha2luIHRvIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNhc3NpcyBkZSBEaWpvbjwvc3Bhbj4gbWF5IGp1c3RpZnkgc3VjaCByZXN0cmljdGlvbnMsIGlmIHRoZSBtZWFzdXJlcyBwdXJzdWVkIGxlZ2l0aW1hdGUgYWltcyB3aXRoIHByZXNzaW5nIHJlYXNvbnMgb2YgcHVibGljIGludGVyZXN0LiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJXb3JrZXJzIiwKICAgICAgICAiRWZmZWN0IG9mIEFydGljbGUgNDUgVEZFVSIKICAgIF0sCiAgICAiTkFNRSI6ICJCb3NtYW4iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIldhbHJhdmUiLAogICAgICAgICJBbmdvbmVzZSIsCiAgICAgICAgIkFudG9uaXNzZW4iLAogICAgICAgICJHcmFmIiwKICAgICAgICAiS2VtcGYiLAogICAgICAgICJCZXR0cmF5IiwKICAgICAgICAiUmF1bGluIiwKICAgICAgICAiQm91a2hhbGZhIiwKICAgICAgICAiR3JvZW5lciIsCiAgICAgICAgIkxldmluIiwKICAgICAgICAiQm9uc2lnbm9yZSIsCiAgICAgICAgIlN0ZXltYW5uIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTA0IiwKICAgICJXSUtJTElOSyI6IFsKICAgICAgICAiaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQm9zbWFuX3J1bGluZyIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQmVsZ2l1bSBwcm8gZm9vdGllIHRyYW5zZmVycyBlbnRhaWxlZCB0cmFuc2ZlciBmZWVzICZtZGFzaDsgYnkgY29udHJhc3QsIEZyZW5jaCBwcm8gZm9vdGllIGRpZCA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPi4gVGhpcyByZW5kZXJlZCBCb3NtYW4sIGEgQmVsZ2lhbiBwbGF5ZXIgd2lzaGluZyB0byB0cmFuc2ZlciB0byB0aGUgRnJlbmNoIGNsdWIgRHVua2VycXVlLCBtdWNoIGxlc3MgYXR0cmFjdGl2ZSB0byB0aGUgY2x1YiB0aGFuIGEgRnJlbmNoIHBsYXllciBvZiBlcXVpdmFsZW50IHRhbGVudCwgZm9yIHdob20gaXQgd291bGQgaGF2ZSB0byBwYXkgbm8gdHJhbnNmZXIgZmVlLiBBbHRob3VnaCBuZWl0aGVyIG9idmlvdXNseSBkaXJlY3RseSBub3IgaW5kaXJlY3RseSBkaXNjcmltaW5hdG9yeSwgaGlzIDxzcGFuIGNsYXNzPVwiYmRcIj5hY2Nlc3MgdG8gdGhlIEVtcGxveW1lbnQgbWFya2V0IG9mIGFub3RoZXIgbWVtYmVyIHN0YXRlIHdhcyBpbXBlZGVkPC9zcGFuPiwgaGUgY2xhaW1lZCwgd2hpY2ggdmlvbGF0ZWQgaGlzIEFydCA0NSByaWdodHMuIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJCb3NtYW4gWzE5OTVdIEVDUiBJLTQ5MjEiLAogICAgIkZMQUdTIjogWwogICAgICAgICJCRSIsCiAgICAgICAgIkZSIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtNDE1LzkzIiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IFdvcmtlcnMgJm1kYXNoOyBFZmZlY3Qgb2YgQXJ0aWNsZSA0NSBURkVVIgp9LAp7CiAgICAiWUVBUiI6ICIyMDAwIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFydCA0NSBpcyBkcmFmdGVkIGluIGdlbmVyYWwgdGVybXMsIGFuZCBpcyBub3Qgc3BlY2lmaWNhbGx5IGFkZHJlc3NlZCB0byBtZW1iZXIgc3RhdGVzLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJXb3JrZXJzIiwKICAgICAgICAiRWZmZWN0IG9mIEFydGljbGUgNDUgVEZFVSIKICAgIF0sCiAgICAiTkFNRSI6ICJBbmdvbmVzZSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiV2FscmF2ZSIsCiAgICAgICAgIkJvc21hbiIsCiAgICAgICAgIkdyb2VuZXIiLAogICAgICAgICJLcmFuZW1hbm4iLAogICAgICAgICJBZG91aSBhbmQgQ29ybnVhaWxsZSIsCiAgICAgICAgIkJldHRyYXkiLAogICAgICAgICJTdGV5bWFubiIsCiAgICAgICAgIkxlYm9uIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEJlbGdpdW0gSSIsCiAgICAgICAgIkJvdWtoYWxmYSIsCiAgICAgICAgIkxlaHRvbmVuIiwKICAgICAgICAiVmFuIER1eW4iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMDUiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkFzIGEgY29uZGl0aW9uIG9mIGVtcGxveW1lbnQsIGEgYmFuayBpbiB0aGUgdmVyeSBub3J0aCBvZiBJdGFseSByZXF1aXJlZCBhIGNlcnRpZmljYXRlIGlzc3VlZCBieSA8c3BhbiBjbGFzcz1cImJkXCI+dGhlIGxvY2FsIGF1dGhvcml0eTwvc3Bhbj4gKG9uIGNvbmRpdGlvbiBvZiBwYXNzaW5nIGFuIGV4YW0pIGFzIGV2aWRlbmNlIG9mIEl0YWxpYW4vR2VybWFuIGJpbGluZ3VhbGlzbS4gTXIuIEFuZ29uZXNlIHdhcyBhbHJlYWR5IGZsdWVudCBpbiBHZXJtYW4gYnkgdmlydHVlIG9mIGhhdmluZyBzdHVkaWVkIGluIEF1c3RyaWEuIEhlIG9iamVjdGVkLiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiQW5nb25lc2UgWzIwMDBdIEVDUiBJLTQxMzkiLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiLAogICAgICAgICJBVCIsCiAgICAgICAgIklUIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMjgxLzk4IiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IFdvcmtlcnMgJm1kYXNoOyBFZmZlY3Qgb2YgQXJ0aWNsZSA0NSBURkVVIgp9LAp7CiAgICAiWUVBUiI6ICIxOTk2IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSByZXF1aXJlbWVudCBvZiBjcm9zc2luZyBhIGJvcmRlciB0byBlbmpveSBBcnQgNDUgcmlnaHRzIGlzIGZ1bGZpbGxlZCBieSBhIHdvcmtlciBmcm9tIG9uZSBtZW1iZXIgc3RhdGUgd29ya2luZyBhdCBlbWJhc3N5IG9mIGFub3RoZXIgbWVtYmVyIHN0YXRlLiIsCiAgICAgICAgIjE1LiAmIzgyMjA7VGhlIENvdXJ0IGhhcyBjb25zaXN0ZW50bHkgaGVsZCB0aGF0IHByb3Zpc2lvbnMgb2YgQ29tbXVuaXR5IGxhdyBtYXkgYXBwbHkgdG8gcHJvZmVzc2lvbmFsIGFjdGl2aXRpZXMgcHVyc3VlZCBvdXRzaWRlIENvbW11bml0eSB0ZXJyaXRvcnkgYXMgbG9uZyBhcyB0aGUgZW1wbG95bWVudCByZWxhdGlvbnNoaXAgcmV0YWlucyBhIHN1ZmZpY2llbnRseSBjbG9zZSBsaW5rIHdpdGggdGhlIENvbW11bml0eS4gWy4uLl0gVGhhdCBwcmluY2lwbGUgbXVzdCBiZSBkZWVtZWQgdG8gZXh0ZW5kIGFsc28gdG8gY2FzZXMgaW4gd2hpY2ggdGhlcmUgaXMgYSBzdWZmaWNpZW50bHkgY2xvc2UgbGluayBiZXR3ZWVuIHRoZSBlbXBsb3ltZW50IHJlbGF0aW9uc2hpcCwgb24gdGhlIG9uZSBoYW5kLCBhbmQgdGhlIGxhdyBvZiBhIG1lbWJlciBzdGF0ZSBhbmQgdGh1cyB0aGUgcmVsZXZhbnQgcnVsZXMgb2YgQ29tbXVuaXR5IGxhdywgb24gdGhlIG90aGVyLiYjODIyMTsiLAogICAgICAgICIyMi4gJiM4MjIwOy4uLiB0aGUgcHJvaGliaXRpb24gb2YgZGlzY3JpbWluYXRpb24gYmFzZWQgb24gbmF0aW9uYWxpdHksIGxhaWQgZG93biBpbiBBcnQgNDUoMikgb2YgdGhlIFRyZWF0eS4uLiBhcHBsaWVzIHRvIGEgbmF0aW9uYWwgb2YgYSBtZW1iZXIgc3RhdGUgd2hvIGlzIHBlcm1hbmVudGx5IHJlc2lkZW50IGluIGEgbm9uLW1lbWJlciBjb3VudHJ5LCB3aG8gaXMgZW1wbG95ZWQgYnkgYW5vdGhlciBtZW1iZXIgc3RhdGUgaW4gaXRzIGVtYmFzc3kgaW4gdGhhdCBub24tbWVtYmVyIGNvdW50cnkgYW5kIHdob3NlIGNvbnRyYWN0IG9mIGVtcGxveW1lbnQgd2FzIGVudGVyZWQgaW50byBhbmQgaXMgcGVybWFuZW50bHkgcGVyZm9ybWVkIHRoZXJlLCBhcyByZWdhcmRzIGFsbCBhc3BlY3RzIG9mIHRoZSBlbXBsb3ltZW50IHJlbGF0aW9uc2hpcCB3aGljaCBhcmUgZ292ZXJuZWQgYnkgdGhlIGxlZ2lzbGF0aW9uIG9mIHRoZSBlbXBsb3lpbmcgbWVtYmVyIHN0YXRlLiYjODIyMTsiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIsCiAgICAgICAgIlNjb3BlIE9mIEFydGljbGUgNDUgVEZFVSIKICAgIF0sCiAgICAiTkFNRSI6ICJCb3VraGFsZmEiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlZhbiBEdXluIiwKICAgICAgICAiQW50b25pc3NlbiIsCiAgICAgICAgIkFkb3VpIGFuZCBDb3JudWFpbGxlIiwKICAgICAgICAiQm9uc2lnbm9yZSIsCiAgICAgICAgIktlbXBmIiwKICAgICAgICAiTWVldXNlbiIsCiAgICAgICAgIkxlYm9uIiwKICAgICAgICAiQW5nb25lc2UiLAogICAgICAgICJMZWh0b25lbiIsCiAgICAgICAgIktyYW5lbWFubiIsCiAgICAgICAgIkJvc21hbiIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBCZWxnaXVtIEkiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMDYiLAogICAgIkNJVEFUSU9OIjogIkJvdWtoYWxmYSBbMTk5Nl0gRUNSIEkiLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiLAogICAgICAgICJCRSIsCiAgICAgICAgIkRFIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMjE0Lzk0IiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IFdvcmtlcnMgJm1kYXNoOyBTY29wZSBPZiBBcnRpY2xlIDQ1IFRGRVUiCn0sCnsKICAgICJZRUFSIjogIjE5ODIiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQSB3b3JrZXIgdW5kZXIgQXJ0aWNsZSA0NSBpcyBzb21lb25lIHdobyBpcyBlbmdhZ2VkIGluIGdlbnVpbmUgYW5kIGVmZmVjdGl2ZSBhY3Rpdml0aWVzLCBhbmQgbm90IGF0IHN1Y2ggYSBzbWFsbCBzY2FsZSBhcyB0byBiZSBtYXJnaW5hbCBhbmQgYW5jaWxsYXJ5LiBUaGUgZGVmaW5pdGlvbiBvZiAmIzgyMTY7d29ya2VyJiM4MjE3OyBpcyBmb3IgdGhlIEVVLiBJdHMgZGVmaW5pdGlvbiBtdXN0IGJlIGJyb2FkLCBhbmQgaXRzIGV4Y2VwdGlvbnMsIG5hcnJvdy4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIsCiAgICAgICAgIkRlZmluaXRpb24gb2YgV29ya2VyIiwKICAgICAgICAiRGlyZWN0IERpc2NyaW1pbmF0aW9uIgogICAgXSwKICAgICJOQU1FIjogIkxldmluIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNZWV1c2VuIiwKICAgICAgICAiQmV0dHJheSIsCiAgICAgICAgIkxhd3JpZS1CbHVtIiwKICAgICAgICAiQmVybmluaSIsCiAgICAgICAgIlJhdWxpbiIsCiAgICAgICAgIlN0ZXltYW5uIiwKICAgICAgICAiS2VtcGYiLAogICAgICAgICJMZWh0b25lbiIsCiAgICAgICAgIkFuZ29uZXNlIiwKICAgICAgICAiQm9zbWFuIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEJlbGdpdW0gSSIsCiAgICAgICAgIkJvdWtoYWxmYSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEwNyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiV2FzIGEgQnJpdGlzaCBjaXRpemVuIDxzcGFuIGNsYXNzPVwiaXRcIj53b3JraW5nPC9zcGFuPiBpbiB0aGUgTmV0aGVybGFuZHMgaW4gdGhlIG1lYW5pbmcgb2YgQXJ0IDQ1PyBTaGUgd2FzIGEgY2hhbWJlcm1haWQsIGJ1dCBwYWlkIDxzcGFuIGNsYXNzPVwiaXRcIj5sZXNzPC9zcGFuPiB0aGFuIHRoZSBEdXRjaCBtaW5pbXVtIHdhZ2UgJm1kYXNoOyBidXQgc2hlIGhhZCBwZXJzb25hbCBpbmNvbWUgZnJvbSBwcm9wZXJ0eS4gPHNwYW4gY2xhc3M9XCJpbGNcIj5XaGF0IGtpbmQgb2YgY2hhbWJlcm1haWQgaXMgPHNwYW4gY2xhc3M9XCJiZFwiPnRoYXQ8L3NwYW4+PyE8L3NwYW4+LiAgU2hlJiM4MjE3O2QgYmVlbiByZWZ1c2VkIGEgcmVzaWRlbmN5IHBlcm1pdCBhcyBzaGUgd2FzIG5vdCBEdXRjaC4gU2hlIGNsYWltZWQgdGhpcywgdGhlcmVmb3JlLCB3YXMgYSBkaXJlY3QgYnJlYWNoIG9mIEFydCA0NS4gd29ya2VyIHVuZGVyIGFydCA0NT8iCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkxldmluIFsxOTgyXSBFQ1IgMTAzNToiLAogICAgIkZMQUdTIjogWwogICAgICAgICJLZXkiLAogICAgICAgICJVSyIsCiAgICAgICAgIk5MIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtNTMvODEiLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgV29ya2VycyAmbWRhc2g7IERlZmluaXRpb24gb2YgV29ya2VyICZtZGFzaDsgRGlyZWN0IERpc2NyaW1pbmF0aW9uIgp9LAp7CiAgICAiWUVBUiI6ICIxOTg2IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZXJlIGFyZSB0aHJlZSBjb25zaWRlcmF0aW9ucyBhcyB0byB3aGV0aGVyIGFuIGFjdGl2aXR5IGlzIGdlbnVpbmUgYW5kIGVmZmVjdGl2ZS4gIElzIHRoZSBhY3Rpdml0eSBvZiAoaSkgZWNvbm9taWMgdmFsdWU/IElzIGl0IChpaSkgc3VwZXJ2aXNlZCBieSBhbiBlbXBsb3llcj8gSXMgaXQgKGlpaSkgY2FycmllZCBvdXQgZm9yIHJlbXVuZXJhdGlvbj8iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIsCiAgICAgICAgIkRlZmluaXRpb24gb2YgV29ya2VyIgogICAgXSwKICAgICJOQU1FIjogIkxhd3JpZS1CbHVtIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJLZW1wZiIsCiAgICAgICAgIlJhdWxpbiIsCiAgICAgICAgIkJldHRyYXkiLAogICAgICAgICJCZXJuaW5pIiwKICAgICAgICAiTWVldXNlbiIsCiAgICAgICAgIlN0ZXltYW5uIiwKICAgICAgICAiTGVodG9uZW4iLAogICAgICAgICJMZXZpbiIsCiAgICAgICAgIkdyYWYiLAogICAgICAgICJCb3NtYW4iLAogICAgICAgICJLcmFuZW1hbm4iLAogICAgICAgICJBbmdvbmVzZSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEwOCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBCcml0aXNoIGNpdGl6ZW4gdHJhaW5pbmcgYXMgYSB0ZWFjaGVyIGluIEdlcm1hbnksIGhhZCwgYXMgcGFydCBvZiB0aGUgdHJhaW5lZXNoaXAsIHRvIHRlYWNoIGluIGEgc2Nob29sLiBUaGUgcGF5IHdhcyA8c3BhbiBjbGFzcz1cIml0XCI+bGVzczwvc3Bhbj4gdGhhbiB0aGFuIGZvciBhIGZ1bGx5LXF1YWxpZmllZCB0ZWFjaGVyLiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiTGF3cmllLUJsdW0gWzE5ODZdIEVDUiAyMTIxOiIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIktleSIsCiAgICAgICAgIlVLIiwKICAgICAgICAiREUiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy02Ni84NSIsCiAgICAiQ0FURUdPUlkiOiAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgJm1kYXNoOyBXb3JrZXJzICZtZGFzaDsgRGVmaW5pdGlvbiBvZiBXb3JrZXIiCn0sCnsKICAgICJZRUFSIjogIjIwMDAiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiTXVzaW5nIG9uIHRoZSBtZWFuaW5nIG9mIGVtcGxveW1lbnQgJm1kYXNoOyAmIzgyMjA7NDUuIC4uLlRoZSBlc3NlbnRpYWwgZmVhdHVyZSBvZiBhbiBlbXBsb3ltZW50IHJlbGF0aW9uc2hpcCBpcyB0aGF0IGZvciBhIGNlcnRhaW4gcGVyaW9kIG9mIHRpbWUgYSBwZXJzb24gcGVyZm9ybXMgc2VydmljZXMgZm9yIGFuZCB1bmRlciB0aGUgZGlyZWN0aW9uIG9mIGFub3RoZXIgcGVyc29uLCBpbiByZXR1cm4gZm9yIHdoaWNoIGhlIHJlY2VpdmVzIHJlbXVuZXJhdGlvbi4mIzgyMjE7IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIldvcmtlcnMiLAogICAgICAgICJEZWZpbml0aW9uIG9mIFdvcmtlciIKICAgIF0sCiAgICAiTkFNRSI6ICJMZWh0b25lbiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiS2VtcGYiLAogICAgICAgICJCZXJuaW5pIiwKICAgICAgICAiUmF1bGluIiwKICAgICAgICAiTGF3cmllLUJsdW0iLAogICAgICAgICJMZXZpbiIsCiAgICAgICAgIk1lZXVzZW4iLAogICAgICAgICJCZXR0cmF5IiwKICAgICAgICAiU3RleW1hbm4iLAogICAgICAgICJCb3NtYW4iLAogICAgICAgICJDb21taXNzaW9uIHYgQmVsZ2l1bSBJIiwKICAgICAgICAiQm91a2hhbGZhIiwKICAgICAgICAiR3JhZiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEwOSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiUGFyYXMuIDEyLTE0IG9mIGp1ZGdtZW50ICZtZGFzaDs8YnI+JmVtc3A7JmVtc3A7MTIuIE1yIExlaHRvbmVuIGlzIGEgYmFza2V0YmFsbCBwbGF5ZXIgb2YgRmlubmlzaCBuYXRpb25hbGl0eS4gRHVyaW5nIHRoZSAxOTk1LzE5OTYgc2Vhc29uIGhlIHBsYXllZCBpbiBhIHRlYW0gd2hpY2ggdG9vayBwYXJ0IGluIHRoZSBGaW5uaXNoIGNoYW1waW9uc2hpcCwgYW5kIGFmdGVyIHRoYXQgd2FzIG92ZXIgaGUgd2FzIGVuZ2FnZWQgYnkgQ2FzdG9ycyBCcmFpbmUsIGEgY2x1YiBhZmZpbGlhdGVkIHRvIHRoZSBGUkJTQiwgdG8gdGFrZSBwYXJ0IGluIHRoZSBmaW5hbCBzdGFnZSBvZiB0aGUgMTk5NS8xOTk2IEJlbGdpYW4gY2hhbXBpb25zaGlwLiBUbyB0aGF0IGVuZCB0aGUgcGFydGllcyBvbiAzIEFwcmlsIDE5OTYgY29uY2x1ZGVkIGEgY29udHJhY3Qgb2YgZW1wbG95bWVudCBmb3IgYSByZW11bmVyYXRlZCBzcG9ydHNtYW4sIHVuZGVyIHdoaWNoIE1yIExlaHRvbmVuIHdhcyB0byByZWNlaXZlIEJFRiA1MCAwMDAgbmV0IHBlciBtb250aCBhcyBmaXhlZCByZW11bmVyYXRpb24gYW5kIGFuIGFkZGl0aW9uYWwgQkVGIDE1IDAwMCBmb3IgZWFjaCBtYXRjaCB3b24gYnkgdGhlIGNsdWIuIFRoYXQgZW5nYWdlbWVudCBoYWQgYmVlbiByZWdpc3RlcmVkIHdpdGggdGhlIEZSQlNCIG9uIDMwIE1hcmNoIDE5OTYsIHRoZSBwbGF5ZXImIzgyMTc7cyBsZXR0ZXIgb2YgcmVsZWFzZSBoYXZpbmcgYmVlbiBpc3N1ZWQgb24gMjkgTWFyY2ggMTk5NiBieSB0aGUgZmVkZXJhdGlvbiBvZiBvcmlnaW4uIE9uIDUgQXByaWwgMTk5NiB0aGUgRlJCU0IgaW5mb3JtZWQgQ2FzdG9ycyBCcmFpbmUgdGhhdCBpZiBGSUJBIGRpZCBub3QgaXNzdWUgdGhlIGxpY2VuY2UgdGhlIGNsdWIgbWlnaHQgYmUgcGVuYWxpc2VkIGFuZCB0aGF0IGlmIGl0IGZpZWxkZWQgTXIgTGVodG9uZW4gaXQgd291bGQgZG8gc28gYXQgaXRzIG93biByaXNrLjxicj4mZW1zcDsmZW1zcDsxMy5EZXNwaXRlIHRoYXQgd2FybmluZyBDYXN0b3JzIEJyYWluZSBmaWVsZGVkIE1yIExlaHRvbmVuIGluIHRoZSBtYXRjaCBvZiA2IEFwcmlsIDE5OTYgYWdhaW5zdCBCZWxnYWNvbSBRdWFyZWdub24uIFRoZSBtYXRjaCB3YXMgd29uIGJ5IENhc3RvcnMgQnJhaW5lLiBPbiAxMSBBcHJpbCAxOTk2LCBmb2xsb3dpbmcgYSBjb21wbGFpbnQgYnkgQmVsZ2Fjb20gUXVhcmVnbm9uLCB0aGUgY29tcGV0aXRpb24gZGVwYXJ0bWVudCBvZiB0aGUgRlJCU0IgcGVuYWxpc2VkIENhc3RvcnMgQnJhaW5lIGJ5IGF3YXJkaW5nIHRvIHRoZSBvdGhlciBjbHViIGJ5IDIwLTAgdGhlIG1hdGNoIGluIHdoaWNoIE1yIExlaHRvbmVuIGhhZCB0YWtlbiBwYXJ0IGluIGJyZWFjaCBvZiB0aGUgRklCQSBydWxlcyBvbiB0cmFuc2ZlcnMgb2ZwbGF5ZXJzIHdpdGhpbiB0aGUgRXVyb3BlYW4gem9uZS4gSW4gdGhlIGZvbGxvd2luZyBtYXRjaCwgYWdhaW5zdCBQZXBpbnN0ZXIsIENhc3RvcnMgQnJhaW5lIGluY2x1ZGVkIE1yIExlaHRvbmVuIG9uIHRoZSB0ZWFtIHNoZWV0IGJ1dCBpbiB0aGUgZW5kIGRpZCBub3QgZmllbGQgaGltLiBUaGUgY2x1YiB3YXMgYWdhaW4gcGVuYWxpc2VkIGJ5IHRoZSBhd2FyZCBvZiB0aGUgbWF0Y2ggdG8gdGhlIG90aGVyIGNsdWIuIEFzIGl0IHJhbiB0aGUgcmlzayBvZiBiZWluZyBwZW5hbGlzZWQgYWdhaW4gZWFjaCB0aW1lIGl0IGluY2x1ZGVkIE1yIExlaHRvbmVuIG9uIHRoZSB0ZWFtIHNoZWV0LCBvciBldmVuIG9mIGJlaW5nIHJlbGVnYXRlZCB0byB0aGUgbG93ZXIgZGl2aXNpb24gaW4gdGhlIGV2ZW50IG9mIGEgdGhpcmQgZGVmYXVsdCwgQ2FzdG9ycyBCcmFpbmUgZGlzcGVuc2VkIHdpdGggdGhlIHNlcnZpY2VzIG9mIE1yIExlaHRvbmVuIGZvciB0aGUgcGxheS1vZmYgbWF0Y2hlcy48YnI+JmVtc3A7JmVtc3A7MTQuIE9uIDE2IEFwcmlsIDE5OTYgTXIgTGVodG9uZW4gYW5kIENhc3RvcnMgQnJhaW5lIGJyb3VnaHQgcHJvY2VlZGluZ3MgYWdhaW5zdCB0aGUgRlJCU0IgaW4gdGhlIFRyaWJ1bmFsIGRlIFByZW1pXHUwMGU4cmUgSW5zdGFuY2UsIEJydXNzZWxzLCBzaXR0aW5nIHRvIGhlYXIgYXBwbGljYXRpb25zIGZvciBpbnRlcmltIHJlbGllZi4gVGhleSBzb3VnaHQgZXNzZW50aWFsbHkgZm9yIHRoZSBGUkJTQiB0byBiZSBvcmRlcmVkIHRvIGxpZnQgdGhlIHBlbmFsdHkgaW1wb3NlZCBvbiBDYXN0b3JzIEJyYWluZSBmb3IgdGhlIG1hdGNoIG9mIDYgQXByaWwgMTk5NiBhZ2FpbnN0IEJlbGdhY29tIFF1YXJlZ25vbiwgYW5kIHRvIGJlIHByb2hpYml0ZWQgZnJvbSBpbXBvc2luZyBhbnkgcGVuYWx0eSB3aGF0ZXZlciBvbiB0aGUgY2x1YiBwcmV2ZW50aW5nIGl0IGZyb20gZmllbGRpbmcgTXIgTGVodG9uZW4gaW4gdGhlIDE5OTUvMTk5NiBCZWxnaWFuIGNoYW1waW9uc2hpcCwgb24gcGFpbiBvZiBhIG1vbmV0YXJ5IHBlbmFsdHkgb2YgQkVGIDEwMCAwMDAgcGVyIGRheSBvZiBkZWxheSBpbiBjb21wbHlpbmcgd2l0aCB0aGUgb3JkZXIuIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJMZWh0b25lbiBbMjAwMF0gRUNSIEkiLAogICAgIkZMQUdTIjogWwogICAgICAgICJGSSIsCiAgICAgICAgIkJFIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMTc2Lzk2IiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IFdvcmtlcnMgJm1kYXNoOyBEZWZpbml0aW9uIG9mIFdvcmtlciIKfSwKewogICAgIllFQVIiOiAiMTk5MiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJCZWluZyBpbiBhIHRyYWluaW5nIHBlcmlvZCBwcmlvciB0byBzdGFydGluZyB3b3JrIHByb3BlciBpcyB0byBiZSBhIHdvcmtlciwgYXMgbG9uZyBhcyB0aGUgdHJhaW5pbmcgaXMgY29uZHVjdGVkIHVuZGVyIHRoZSBjb25kaXRpb25zIG9mIGdlbnVpbmUgYW5kIGVmZmVjdGl2ZSBhY3Rpdml0eSBvZiBhbiBlbXBsb3llZCBwZXJzb24uIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIldvcmtlcnMiLAogICAgICAgICJEZWZpbml0aW9uIG9mIFdvcmtlciIKICAgIF0sCiAgICAiTkFNRSI6ICJCZXJuaW5pIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJTdGV5bWFubiIsCiAgICAgICAgIkxldmluIiwKICAgICAgICAiTWVldXNlbiIsCiAgICAgICAgIkxhd3JpZS1CbHVtIiwKICAgICAgICAiS2VtcGYiLAogICAgICAgICJCZXR0cmF5IiwKICAgICAgICAiTGVodG9uZW4iLAogICAgICAgICJSYXVsaW4iLAogICAgICAgICJCb3NtYW4iLAogICAgICAgICJLcmFuZW1hbm4iLAogICAgICAgICJBZG91aSBhbmQgQ29ybnVhaWxsZSIsCiAgICAgICAgIkFudG9uaXNzZW4iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMTAiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIldhcyBhbiBJdGFsaWFuIGNpdGl6ZW4sIGEgdHJhaW5lZSBhdCBhIGZhY3RvcnkgaW4gdGhlIE5ldGhlcmxhbmRzIHdobyYjODIxNztkIGNvbXBsZXRlZCBvbmx5IHRlbiB3ZWVrcyB0cmFpbmluZywgb24gbG93IHdhZ2VzIGFuZCBoYXZpbmcgZG9uZSBvbmx5IGEgZmV3IGhvdXJzIGluIHRvdGFsLCBhIHdvcmtlciB1bmRlciBBcnQgNDU/IgogICAgXSwKICAgICJDSVRBVElPTiI6ICJCZXJuaW5pIFsxOTkyXSBFQ1IgSSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIklUIiwKICAgICAgICAiTkwiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0zLzkwIiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IFdvcmtlcnMgJm1kYXNoOyBEZWZpbml0aW9uIG9mIFdvcmtlciIKfSwKewogICAgIllFQVIiOiAiMTk5OSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJCZWluZyBtYXJyaWVkIHRvIHRoZSBib3NzIGlzIG5vdCBwZXIgc2UgYSByZWFzb24gdG8gZmluZCBhIHBlcnNvbiBpcyBub3QgYSB3b3JrZXIgdW5kZXIgQXJ0IDQ1LiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJXb3JrZXJzIiwKICAgICAgICAiRGVmaW5pdGlvbiBvZiBXb3JrZXIiCiAgICBdLAogICAgIk5BTUUiOiAiTWVldXNlbiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiTGVodG9uZW4iLAogICAgICAgICJCZXR0cmF5IiwKICAgICAgICAiUmF1bGluIiwKICAgICAgICAiTGV2aW4iLAogICAgICAgICJCZXJuaW5pIiwKICAgICAgICAiTGF3cmllLUJsdW0iLAogICAgICAgICJLZW1wZiIsCiAgICAgICAgIlN0ZXltYW5uIiwKICAgICAgICAiQW5nb25lc2UiLAogICAgICAgICJCb3NtYW4iLAogICAgICAgICJWYW4gRHV5biIsCiAgICAgICAgIkFkb3VpIGFuZCBDb3JudWFpbGxlIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTExIiwKICAgICJDSVRBVElPTiI6ICJNZWV1c2VuIFsxOTk5XSBFQ1IgSSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkJFIiwKICAgICAgICAiTkwiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0zMzcvOTciLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgV29ya2VycyAmbWRhc2g7IERlZmluaXRpb24gb2YgV29ya2VyIgp9LAp7CiAgICAiWUVBUiI6ICIxOTg2IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgcGVyc29uIGlzIG5vdCBleGNsdWRlZCBmcm9tIHByb3RlY3Rpb24gdW5kZXIgQXJ0aWNsZSA0NSBtZXJlbHkganVzdCBiZWNhdXNlIGhpcyByZW11bmVyYXRpb24gaXMgYmVsb3cgc3Vic2lzdGVuY2UsIGFuZCBoZSBzZWVrcyB0byBzdXBwbGVtZW50IGhpcyBpbmNvbWUgYnkgZmluYW5jaWFsIGFzc2lzdGFuY2UgZnJvbSB0aGUgbWVtYmVyIHN0YXRlIGluIHdoaWNoIGhlIHJlc2lkZXMuIFdoYXQgbWF0dGVycyBpcyB0aGUgd29yayYjODIxNztzIGdlbnVpbmUgYW5kIGVmZmVjdGl2ZSBuYXR1cmUuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIldvcmtlcnMiLAogICAgICAgICJEZWZpbml0aW9uIG9mIFdvcmtlciIKICAgIF0sCiAgICAiTkFNRSI6ICJLZW1wZiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiTGV2aW4iLAogICAgICAgICJSYXVsaW4iLAogICAgICAgICJMZWh0b25lbiIsCiAgICAgICAgIkJlcm5pbmkiLAogICAgICAgICJNZWV1c2VuIiwKICAgICAgICAiU3RleW1hbm4iLAogICAgICAgICJMYXdyaWUtQmx1bSIsCiAgICAgICAgIkJldHRyYXkiLAogICAgICAgICJCb25zaWdub3JlIiwKICAgICAgICAiQm91a2hhbGZhIiwKICAgICAgICAiS3JhbmVtYW5uIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEJlbGdpdW0gSSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjExMiIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBHZXJtYW4gbXVzaWMgdGVhY2hlciBpbiB0aGUgTmV0aGVybGFuZHMgZ2F2ZSBvbmx5IDEyIGhvdXJzIG9mIGxlc3NvbnMgYSB3ZWVrLiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiS2VtcGYgWzE5ODZdIEVDUiAxNzQxOiIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkRFIiwKICAgICAgICAiTkwiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0xMzkvODUiLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgV29ya2VycyAmbWRhc2g7IERlZmluaXRpb24gb2YgV29ya2VyIgp9LAp7CiAgICAiWUVBUiI6ICIxOTg4IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkEgd29ya2VyIGRvZXMgbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gYmUgcmVtdW5lcmF0ZWQgaW4gbW9uZXkgdG8gZmFsbCB1bmRlciB0aGUgcHJvdGVjdGlvbiBvZiBBcnQgNDUuICYjODIxNjtJbiBzbyBmYXIgYXMgdGhlIHNlcnZpY2VzIHRoZSBjb21tdW5pdHkgcHJvdmlkZXMgdG8gaXRzIG1lbWJlcnMgbWF5IGJlIHJlZ2FyZGVkIGFzIHRoZSBxdWlkIHBybyBxdW8gZm9yIGdlbnVpbmUgYW5kIGVmZmVjdGl2ZSB3b3JrLiYjODIxNzsiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIsCiAgICAgICAgIkRlZmluaXRpb24gb2YgV29ya2VyIgogICAgXSwKICAgICJOQU1FIjogIlN0ZXltYW5uIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJMYXdyaWUtQmx1bSIsCiAgICAgICAgIkJlcm5pbmkiLAogICAgICAgICJSYXVsaW4iLAogICAgICAgICJNZWV1c2VuIiwKICAgICAgICAiTGV2aW4iLAogICAgICAgICJLZW1wZiIsCiAgICAgICAgIkJldHRyYXkiLAogICAgICAgICJMZWh0b25lbiIsCiAgICAgICAgIkJvdWtoYWxmYSIsCiAgICAgICAgIkJvbnNpZ25vcmUiLAogICAgICAgICJBbmdvbmVzZSIsCiAgICAgICAgIktyYW5lbWFubiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjExMyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBHZXJtYW4gcGx1bWJlciBpbiB0aGUgTmV0aGVybGFuZHMuIEluIHJldHVybiBmb3IgcGx1bWJpbmcgam9icyBhbmQgY2hvcmVzLCBoZSB3YXMgZ2l2ZW4gYWNjb21tb2RhdGlvbiwgZXRjLiwgYnkgYSByZWxpZ2lvdXMgY29tbXVuaXR5LiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiU3RleW1hbm4gWzE5ODhdIEVDUiA2MTU5OiIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkRFIiwKICAgICAgICAiTkwiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0xOTYvODciLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgV29ya2VycyAmbWRhc2g7IERlZmluaXRpb24gb2YgV29ya2VyIgp9LAp7CiAgICAiWUVBUiI6ICIxOTkyIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIk5hdGlvbmFsIGNvdXJ0cyBtYXksIHdoZW4gYXNzZXNzaW5nIHdoZXRoZXIgd29yayBpcyBnZW51aW5lIGFuZCBlZmZlY3RpdmUsIHRha2UgYWNjb3VudCBvZiBpdHMgaXJyZWd1bGFyaXR5IGFuZCBsaW1pdGVkIGR1cmF0aW9uIG9mIGFjdHVhbCBwZXJmb3JtYW5jZSBvZiBzZXJ2aWNlcy4gVGhlc2UgYXR0cmlidXRlcyBtYXkgaW5kaWNhdGUgdGhhdCB0aGUgYWN0aXZpdHkgaXMgbWVyZWx5IG1hcmdpbmFsIGFuZCBhbmNpbGxhcnkuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIldvcmtlcnMiLAogICAgICAgICJEZWZpbml0aW9uIG9mIFdvcmtlciIsCiAgICAgICAgIk1hcmdpbmFsIGFuZCBBbmNpbGxhcnkiCiAgICBdLAogICAgIk5BTUUiOiAiUmF1bGluIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJCZXR0cmF5IiwKICAgICAgICAiTGVodG9uZW4iLAogICAgICAgICJTdGV5bWFubiIsCiAgICAgICAgIk1lZXVzZW4iLAogICAgICAgICJCZXJuaW5pIiwKICAgICAgICAiS2VtcGYiLAogICAgICAgICJMZXZpbiIsCiAgICAgICAgIkxhd3JpZS1CbHVtIiwKICAgICAgICAiR3JvZW5lciIsCiAgICAgICAgIkFuZ29uZXNlIiwKICAgICAgICAiQW50b25pc3NlbiIsCiAgICAgICAgIkJvbnNpZ25vcmUiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMTQiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkEgd29tYW4gZnJvbSBGcmFuY2Ugd2FzIGVtcGxveWVkIGFzIGFuIDxzcGFuIGNsYXNzPVwiaXRcIj5vbi1jYWxsIHdvcmtlcjwvc3Bhbj4uIFNoZSB3b3JrZWQgZm9yIGEgZ3JhbmQgdG90YWwgb2YgNjAgaG91cnMgb3ZlciA4IG1vbnRocy4gV2FzIHNoZSBhIHdvcmtlciB1bmRlciBBcnQgNDU/IgogICAgXSwKICAgICJDSVRBVElPTiI6ICJSYXVsaW4gWzE5OTJdIEVDUiBJIiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRlIiLAogICAgICAgICJOTCIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTM1Ny84OSIsCiAgICAiQ0FURUdPUlkiOiAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgJm1kYXNoOyBXb3JrZXJzICZtZGFzaDsgRGVmaW5pdGlvbiBvZiBXb3JrZXIgJm1kYXNoOyBNYXJnaW5hbCBhbmQgQW5jaWxsYXJ5Igp9LAp7CiAgICAiWUVBUiI6ICIxOTg5IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRoZSBvYmplY3RpdmUgb2YgcmVoYWJpbGl0YXRpbmcgZHJ1ZyBhZGRpY3RzLCB0byBlbmFibGUgdGhlbSB0byBlbnRlciB0aGUgbGFib3VyIGZvcmNlLCBmZWxsIG91dHNpZGUgQXJ0IDQ1LiBbSGVhdmlseSBjcml0aWNpc2VkIGZvciBpdHMgZmFpbHVyZSB0byB0YWtlIGludG8gYWNjb3VudCB0aGF0IHRoZSBnb2FsIG9mIHRoZSByZWhhYmlsaXRhdGlvbiB3YXMgb3ZlcnRseSBlY29ub21pY10uIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIldvcmtlcnMiLAogICAgICAgICJEZWZpbml0aW9uIG9mIFdvcmtlciIsCiAgICAgICAgIlB1cnBvc2Ugb2YgV29yayIKICAgIF0sCiAgICAiTkFNRSI6ICJCZXR0cmF5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJTdGV5bWFubiIsCiAgICAgICAgIkxldmluIiwKICAgICAgICAiS2VtcGYiLAogICAgICAgICJSYXVsaW4iLAogICAgICAgICJNZWV1c2VuIiwKICAgICAgICAiTGF3cmllLUJsdW0iLAogICAgICAgICJMZWh0b25lbiIsCiAgICAgICAgIkJlcm5pbmkiLAogICAgICAgICJCb3NtYW4iLAogICAgICAgICJCb3VraGFsZmEiLAogICAgICAgICJCb25zaWdub3JlIiwKICAgICAgICAiS3JhbmVtYW5uIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTE1IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBIEdlcm1hbiBjaXRpemVuIGluIHRoZSBOZXRoZXJsYW5kcyBkaWQgdmVyeSB3b3J0aHkgKGJ1dCB2ZXJ5IHBvb3JseS1yZW11bmVyYXRlZCkgd29yayByZWhhYmlsaXRhdGluZyBkcnVnZ2llcyBpbnRvIHRoZSBsYWJvdXIgZm9yY2UuIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJCZXR0cmF5IFsxOTg5XSBFQ1IgMTYyMToiLAogICAgIkZMQUdTIjogWwogICAgICAgICJERSIsCiAgICAgICAgIk5MIiwKICAgICAgICAiQ3JpdGljaXNlZCIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTM0NC84NyIsCiAgICAiQ0FURUdPUlkiOiAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgJm1kYXNoOyBXb3JrZXJzICZtZGFzaDsgRGVmaW5pdGlvbiBvZiBXb3JrZXIgJm1kYXNoOyBQdXJwb3NlIG9mIFdvcmsiCn0sCnsKICAgICJZRUFSIjogIjE5OTEiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiRnJlZSBtb3ZlbWVudCBvZiB3b3JrZXJzIGVudGFpbHMgZnJlZSBtb3ZlbWVudCBhbmQgcmVzaWRlbmNlIHdpdGhpbiBob3N0IG1lbWJlciBzdGF0ZXMgZm9yIHRoZSBwdXJwb3NlIG9mIHNlZWtpbmcgZW1wbG95bWVudCwgYXMgdGhpcyBlbmhhbmNlcyB0aGUgZWZmZWN0aXZlbmVzcyBvZiBhcnRpY2xlIDQ1LiBJbiBkZWZhdWx0IG9mIHByb3Zpc2lvbnMgYXMgdG8gaG93IGxvbmcgdGhleSBtYXkgc3RheSB3aXRob3V0IHdvcmssIHRoZXkgc2hvdWxkIGJlIGFibGUgdG8gZG8gdGhpcyBmb3Igc2l4IG1vbnRoczsgYnV0IHdoZW4gdGhhdCBsYXBzZXMsIGFuZCB0aGV5IGFyZSBsb29raW5nIGZvciB3b3JrIGZvciB3aGljaCB0aGV5JiM4MjE3O3JlIGFwcHJvcHJpYXRlbHkgcXVhbGlmaWVkLCB0aGUgbWVtYmVyIHN0YXRlIG1heSBub3QgZXhwZWwgdGhlbS4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIsCiAgICAgICAgIlJpZ2h0IHRvIFNlZWsgV29yayIKICAgIF0sCiAgICAiTkFNRSI6ICJBbnRvbmlzc2VuIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJMZWJvbiIsCiAgICAgICAgIlN0ZXltYW5uIiwKICAgICAgICAiVmFuIER1eW4iLAogICAgICAgICJCb25zaWdub3JlIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEJlbGdpdW0gSSIsCiAgICAgICAgIkxldmluIiwKICAgICAgICAiUmF1bGluIiwKICAgICAgICAiQm91a2hhbGZhIiwKICAgICAgICAiQmVybmluaSIsCiAgICAgICAgIkdyb2VuZXIiLAogICAgICAgICJLcmFuZW1hbm4iLAogICAgICAgICJXYWxyYXZlIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTE2IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBIEJlbGdpYW4gY2l0aXplbiBpbiB0aGUgVUsgd2FzIHVuc3VjY2Vzc2Z1bCBpbiBsb29raW5nIGZvciB3b3JrLiBIZSB3YXMgYWxzbyBmYWlybHkgb2J2aW91c2x5IGEgcmVwcm9iYXRlLCBoYXZpbmcgcmVwZWF0ZWRseSBiZWVuIGltcHJpc29uZWQgZm9yIGRydWdzLiBUaGUgVUsgd2FudGVkIHJpZCBvZiBoaW0uIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJBbnRvbmlzc2VuIFsxOTkxXSBFQ1IgSSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkJFIiwKICAgICAgICAiR0IiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0yOTIvODkiLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgV29ya2VycyAmbWRhc2g7IFJpZ2h0IHRvIFNlZWsgV29yayIKfSwKewogICAgIllFQVIiOiAiMTk4NyIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJNZW1iZXIgc3RhdGVzIGFyZSBub3Qgb2JsaWdlZCB0byByZWZyYWluIGZyb20gZGlzY3JpbWluYXRpbmcgYWdhaW5zdCBqb2JzZWVrZXJzIGZyb20gb3RoZXIgbWVtYmVyIHN0YXRlcywgYXMgcmVnYXJkcyB0aGVpciBlbGlnaWJpbGl0eSBmb3IgdGF4IGFuZCBzb2NpYWwgYWR2YW50YWdlcy4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIsCiAgICAgICAgIlJpZ2h0IHRvIFNlZWsgV29yayIKICAgIF0sCiAgICAiTkFNRSI6ICJMZWJvbiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQW50b25pc3NlbiIsCiAgICAgICAgIkJvdWtoYWxmYSIsCiAgICAgICAgIkxhd3JpZS1CbHVtIiwKICAgICAgICAiU3RleW1hbm4iLAogICAgICAgICJCZXR0cmF5IiwKICAgICAgICAiQm9zbWFuIiwKICAgICAgICAiTGV2aW4iLAogICAgICAgICJXYWxyYXZlIiwKICAgICAgICAiQW5nb25lc2UiLAogICAgICAgICJCb25zaWdub3JlIiwKICAgICAgICAiR3JhZiIsCiAgICAgICAgIlJhdWxpbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjExNyIsCiAgICAiQ0lUQVRJT04iOiAiTGVib24gWzE5ODddIEVDUiAyODExOiIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkJFIiwKICAgICAgICAiRlIiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0zMTYvODUiLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgV29ya2VycyAmbWRhc2g7IFJpZ2h0IHRvIFNlZWsgV29yayIKfSwKewogICAgIlRZUEUiOiAiUmVndWxhdGlvbiIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5JbnRybzwvc3Bhbj48L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SXQgcXVhbnRpZmllcyBhdCA8c3BhbiBjbGFzcz1cImJkXCI+KDEpPC9zcGFuPiB0aGUgcHJpbmNpcGxlIG9mIGZyZWUgbW92ZW1lbnQsIHBhcnRpY3VsYXJseSBhcyBjb25jZXJucyByZW11bmVyYXRpb24sIGRpc21pc3NhbCwgdW5lbXBsb3ltZW50IGFuZCByZS1lbXBsb3ltZW50Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QXQgPHNwYW4gY2xhc3M9XCJiZFwiPigyKTwvc3Bhbj4sIGl0IG1hbmRhdGVzIHRoZSBzYW1lIHdlbGZhcmUgYW5kIHRheCBwcm92aXNpb25zIGZvciB3b3JrZXJzIGZyb20gb3RoZXIgbWVtYmVyIHN0YXRlcyBhcyBmb3IgbmF0aW9uYWwgd29ya2Vyczs8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPmFuZCBhdCA8c3BhbiBjbGFzcz1cImJkXCI+KDMpPC9zcGFuPiwgZm9yIGVxdWFsIGFjY2VzcyB0byB2b2NhdGlvbmFsIHNjaG9vbGluZyBhbmQgcmV0cmFpbmluZy48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+QXJ0aWNsZSA3PC9zcGFuPjwvc3Bhbj4gJm1kYXNoOyBUZXh0IiwKICAgICAgICAiPG9sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+QSB3b3JrZXIgd2hvIGlzIGEgbmF0aW9uYWwgb2YgYSBtZW1iZXIgc3RhdGUgbWF5IG5vdCwgaW4gdGhlIHRlcnJpdG9yeSBvZiBhbm90aGVyIG1lbWJlciBzdGF0ZSwgYmUgdHJlYXRlZCBkaWZmZXJlbnRseSBmcm9tIG5hdGlvbmFsIHdvcmtlcnMgYnkgcmVhc29uIG9mIGhpcyBuYXRpb25hbGl0eSBpbiByZXNwZWN0IG9mIGFueSBjb25kaXRpb25zIG9mIGVtcGxveW1lbnQgYW5kIHdvcmssIGluIHBhcnRpY3VsYXIgYXMgcmVnYXJkcyByZW11bmVyYXRpb24sIGRpc21pc3NhbCwgYW5kLCBzaG91bGQgaGUgYmVjb21lIHVuZW1wbG95ZWQsIHJlaW5zdGF0ZW1lbnQgb3IgcmUtZW1wbG95bWVudC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkhlIHNoYWxsIGVuam95IDxzcGFuIGNsYXNzPVwiYmRcIj50aGUgc2FtZSBzb2NpYWwgYW5kIHRheCBhZHZhbnRhZ2VzPC9zcGFuPiBhcyBuYXRpb25hbCB3b3JrZXJzLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SGUgc2hhbGwgYWxzbywgYnkgdmlydHVlIG9mIHRoZSBzYW1lIHJpZ2h0IGFuZCB1bmRlciB0aGUgc2FtZSBjb25kaXRpb25zIGFzIG5hdGlvbmFsIHdvcmtlcnMsIGhhdmUgPHNwYW4gY2xhc3M9XCJiZFwiPmFjY2VzcyB0byB0cmFpbmluZzwvc3Bhbj4gaW4gdm9jYXRpb25hbCBzY2hvb2xzIGFuZCByZXRyYWluaW5nIGNlbnRyZXMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BbnkgY2xhdXNlIG9mIGEgY29sbGVjdGl2ZSBvciBpbmRpdmlkdWFsIGFncmVlbWVudCBvciBhbnkgb3RoZXIgY29sbGVjdGl2ZSByZWd1bGF0aW9uIGNvbmNlcm5pbmcgZWxpZ2liaWxpdHkgZm9yIGVtcGxveW1lbnQsIHJlbXVuZXJhdGlvbiBhbmQgb3RoZXIgY29uZGl0aW9ucyBvZiB3b3JrIG9yIGRpc21pc3NhbCBzaGFsbCBiZSBudWxsIGFuZCB2b2lkIGluIHNvIGZhciBhcyBpdCBsYXlzIGRvd24gb3IgYXV0aG9yaXNlcyBkaXNjcmltaW5hdG9yeSBjb25kaXRpb25zIGluIHJlc3BlY3Qgb2Ygd29ya2VycyB3aG8gYXJlIG5hdGlvbmFscyBvZiB0aGUgb3RoZXIgbWVtYmVyIHN0YXRlcy48L3NwYW4+PC9saT48L29sPiIKICAgIF0sCiAgICAiQUtBIjogIlJlZ3VsYXRpb24gNDkyLzIwMTEiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIsCiAgICAgICAgIlJpZ2h0IHRvIEVxdWFsIFRyZWF0bWVudCIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgJm1kYXNoOyBXb3JrZXJzICZtZGFzaDsgUmlnaHQgdG8gRXF1YWwgVHJlYXRtZW50IiwKICAgICJOQU1FIjogIlJlZ3VsYXRpb24gNDkyLzIwMTEgb24gRnJlZSBNb3ZlbWVudCBvZiBXb3JrZXJzIiwKICAgICJOVU1CRVIiOiAiMTE4Igp9LAp7CiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlJlc3RyaWN0aW9uczwvc3Bhbj48L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhleSBtYXkgY29tZSBpbiB0aGUgZm9ybSBvZiA8c3BhbiBjbGFzcz1cImJkXCI+ZGlyZWN0PC9zcGFuPiBkaXNjcmltaW5hdGlvbiwgYXMgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TGV2aW48L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhleSBtYXkgYmUgPHNwYW4gY2xhc3M9XCJiZFwiPmluZGlyZWN0PC9zcGFuPiBkaXNjcmltaW5hdGlvbiwgc3VjaCBhcyB0aGUgbGFuZ3VhZ2UgcmVxdWlyZW1lbnRzIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkdyb2VuZXI8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BbmdvbmVzZTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGV5IGNhbiBiZSA8c3BhbiBjbGFzcz1cImJkXCI+aW5kaXN0aW5jdGx5IGFwcGxpY2FibGU8L3NwYW4+IG1lYXN1cmVzLCBhbmFsb2dvdXNseSB0byA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NRVFSczwvc3Bhbj48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Qm9zbWFuPC9zcGFuPiwgYSBtZWFzdXJlIHRoYXQgaGFzIHRoZSBlZmZlY3Qgb2YgbWFraW5nIGl0IGhhcmRlciB0byA8c3BhbiBjbGFzcz1cImJkXCI+ZW50ZXI8L3NwYW4+IHRoZSBlbXBsb3ltZW50IG1hcmtldCBvZiBhbm90aGVyIE1TIGZhbGxzIGZvdWwgb2YgQXJ0IDQ1Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+S3JhbmVtYW5uPC9zcGFuPiBmb3VuZCB0aGUgY29yb2xsYXJ5IGFsc28gYXBwbGllczogYSBtZWFzdXJlIG1ha2luZyBpdCBoYXJkZXIgdG8gPHNwYW4gY2xhc3M9XCJiZFwiPmxlYXZlPC9zcGFuPiB5b3VyIG93biBpcyBhbHNvIGEgdmlvbGF0aW9uLjwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Tb21lIG1lYXN1cmVzIG1heSwgaG93ZXZlciwgYmUgPHNwYW4gY2xhc3M9XCJiZFwiPmJleW9uZCB0aGUgc2NvcGU8L3NwYW4+IG9mIEFydCA0NTogPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R3JhZjwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkp1c3RpZmljYXRpb25zPC9zcGFuPjwvc3Bhbj48YnI+U2VlIGFsc28gJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5KdXN0aWZpY2F0aW9ucyBmb3IgRGlzY3JpbWluYXRpb24gdW5kZXIgQXJ0IDQ1PC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SnVzdGlmaWNhdGlvbnMgZm9yIEluZGlzdGluY3RseSBBcHBsaWNhYmxlIE1lYXN1cmVzIHVuZGVyIEFydCA0NTwvc3Bhbj4uIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIldvcmtlcnMiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgV29ya2VycyIsCiAgICAiTkFNRSI6ICJSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCBvZiBXb3JrZXJzIiwKICAgICJOVU1CRVIiOiAiMTE5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMgLSBTdW1tYXJ5IiwKICAgICAgICAiRWZmZWN0aXZlbmVzcyBhbmQgU2NvcGUgb2YgQXJ0IDQ1IiwKICAgICAgICAiTWVhbmluZyBvZiBXb3JrZXIgaW4gQXJ0IDQ1IiwKICAgICAgICAiSnVzdGlmaWNhdGlvbnMgZm9yIERpc2NyaW1pbmF0aW9uIHVuZGVyIEFydCA0NSIsCiAgICAgICAgIkNpdGl6ZW5zIFJpZ2h0cyBEaXJlY3RpdmUgLSBEaWdlc3RlZCIsCiAgICAgICAgIkVVIENpdGl6ZW5zaGlwIiwKICAgICAgICAiKEpvaW5lZCkgS2FkaSBhbmQgQWwgQmFyYWthYXQiLAogICAgICAgICJQb3R0ZWQgSGlzdG9yeSBJIC0gUGFyaXMgdG8gTWVyZ2VyIiwKICAgICAgICAiSW50ZXJuYWwgTWFya2V0IC0gRGlzY3Vzc2lvbiIsCiAgICAgICAgIk1pZ3JhbnQgQ3Jpc2lzIC0gVHVya2V5IERlYWwiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQiLAogICAgICAgICJTZWNvbmRhcnkgTGVnaXNsYXRpb24iCiAgICBdCn0sCnsKICAgICJZRUFSIjogIjE5ODkiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiTWVhc3VyZXMgY2xlYXJseSBoYXZpbmcgdGhlIGVmZmVjdCBvZiBkaXNjcmltaW5hdGluZyBvbiBncm91bmRzIG9mIG5hdGlvbmFsaXR5LCBzdWNoIGFzIGltcG9zaW5nIGEgY29uZGl0aW9uIG9ubHkgbGlrZWx5IHRvIGJlIG1ldCBieSBwZW9wbGUgb2YgYSBwYXJ0aWN1bGFyIG1lbWJlciBzdGF0ZSBhcmUgaW5kaXJlY3RseSBkaXNjcmltaW5hdG9yeSBhbmQgdGh1cyBpbiBicmVhY2ggb2YgQXJ0IDQ1LiAgSG93ZXZlciwgc3VjaCBtZWFzdXJlcyBtYXkgYmUgZXhjdXNlZCBhcyBwcm9wb3J0aW9uYXRlIGdpdmVuIHRoZSBuZWVkIHRvIHByb3RlY3QgbWlub3JpdGFyaWFuIGFuZCBmcmFnaWxlIGFzcGVjdHMgb2YgY3VsdHVyZSBzdWNoIGFzIHRoZSBHYWVsaWMgbGFuZ3VhZ2UgJm1kYXNoOyBidXQgdGhpcyB3b3VsZCBkZXBlbmQgb24gdGhlIGNvbm5lY3Rpb24gYmV0d2VlbiB0aGUgcmVxdWlyZW1lbnQgaW1wb3NlZCBhbmQgdGhlIGR1dGllcyBwZXJmb3JtZWQmYW1wOy4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIsCiAgICAgICAgIlJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICAgICAiSW5kaXJlY3QgRGlzY3JpbWluYXRpb24iCiAgICBdLAogICAgIk5BTUUiOiAiR3JvZW5lciIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiS3JhbmVtYW5uIiwKICAgICAgICAiQm9uc2lnbm9yZSIsCiAgICAgICAgIk1lZXVzZW4iLAogICAgICAgICJCZXR0cmF5IiwKICAgICAgICAiQm9zbWFuIiwKICAgICAgICAiTGVodG9uZW4iLAogICAgICAgICJMZXZpbiIsCiAgICAgICAgIkFudG9uaXNzZW4iLAogICAgICAgICJLZW1wZiIsCiAgICAgICAgIkdyYWYiLAogICAgICAgICJCb3VraGFsZmEiLAogICAgICAgICJWYW4gRHV5biIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEyMCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBwYXJ0IHRpbWUgRHV0Y2ggdGVhY2hlciBhcnQgdGVhY2hlciBpbiBhbiBJcmlzaCBzY2hvb2wgb2JqZWN0ZWQgdG8gdGhlIHJlcXVpcmVtZW50IHRoYXQgKGFsbCkgdGVhY2hlcnMgd2VyZSByZXF1aXJlZCB0byBwcm9kdWNlIGEgY2VydGlmaWNhdGUgb2YgcXVhbGlmaWNhdGlvbiBpbiBHYWVsaWMuIEhlIG9iamVjdGVkIG9uIHRoZSBiYXNpcyB0aGF0LCBpbnRlciBhbGlhLCBzdWNoIGEgcXVhbGlmaWNhdGlvbiBoYWQgbm90aGluZyB0byBkbyB3aXRoIGhpcyBhYmlsaXR5IHRvIGRvIGhpcyBqb2IuIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJHcm9lbmVyIFsxOTg5XSBFQ1IgSSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIklFIiwKICAgICAgICAiTkwiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0zNzkvODciLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgV29ya2VycyAmbWRhc2g7IFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50ICZtZGFzaDsgSW5kaXJlY3QgRGlzY3JpbWluYXRpb24iCn0sCnsKICAgICJZRUFSIjogIjIwMTAiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQW4gaW5kaXN0aW5jdGx5IGFwcGxpY2FibGUgbWVhc3VyZSBkZXRlcnJpbmcgYSB3b3JrZXIgZnJvbSBsZWF2aW5nIGhpcyBtZW1iZXIgc3RhdGUgdG8gd29yayBpbiBhbm90aGVyIGNvbnN0aXR1dGVzIGFuIG9ic3RhY2xlIHRvIEFydCA0NS4gSG93ZXZlciwgdW5sZXNzIHRoZSBtZWFzdXJlIGlzIHB1cmVseSBlY29ub21pYywgaXQgbWF5IGJlIGp1c3RpZmllZCBpZiB0aGUgYmFycmllciBpdCBpbXBvc2VzIGlzLCBpbiBmYWN0IG5vdCBncmVhdC4gVE9ETy4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIsCiAgICAgICAgIlJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICAgICAiSW5kaXN0aW5jdGx5IEFwcGxpY2FibGUgTWVhc3VyZXMiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIldvcmtlcnMiLAogICAgICAgICJSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCIsCiAgICAgICAgIkluZGlzdGluY3RseSBBcHBsaWNhYmxlIE1lYXN1cmVzIgogICAgXSwKICAgICJOQU1FIjogIktyYW5lbWFubiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiR3JvZW5lciIsCiAgICAgICAgIkFuZ29uZXNlIiwKICAgICAgICAiQm91a2hhbGZhIiwKICAgICAgICAiTGV2aW4iLAogICAgICAgICJLZW1wZiIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBCZWxnaXVtIEkiLAogICAgICAgICJCZXJuaW5pIiwKICAgICAgICAiR3JhZiIsCiAgICAgICAgIlZhbiBEdXluIiwKICAgICAgICAiQm9zbWFuIiwKICAgICAgICAiTWVldXNlbiIsCiAgICAgICAgIkxhd3JpZS1CbHVtIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTIxIiwKICAgICJDSVRBVElPTiI6ICJLcmFuZW1hbm4gWzIwMDVdIEVDUiBJIiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiREUiLAogICAgICAgICJSZWNlbnQiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0xMDkvMDQiLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgV29ya2VycyAmbWRhc2g7IFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50ICZtZGFzaDsgSW5kaXN0aW5jdGx5IEFwcGxpY2FibGUgTWVhc3VyZXMgLyBGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IFdvcmtlcnMgJm1kYXNoOyBSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCAmbWRhc2g7IEluZGlzdGluY3RseSBBcHBsaWNhYmxlIE1lYXN1cmVzIgp9LAp7CiAgICAiWUVBUiI6ICIyMDAwIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlRPRE8gc3VtbWFyeSBvZiByYXRpbyIsCiAgICAgICAgImZyb20gdGhlIGp1ZGdtZW50Ojxicj4mZW1zcDsmZW1zcDsyNC4gLi4uIHRoZSBlbnRpdGxlbWVudCB0byBjb21wZW5zYXRpb24gd2FzIG5vdCBkZXBlbmRlbnQgb24gdGhlIHdvcmtlclx1MjAxOXMgY2hvb3Npbmcgd2hldGhlciBvciBub3QgdG8gc3RheSB3aXRoIGhpcyBjdXJyZW50IGVtcGxveWVyLCBidXQgb24gYSBmdXR1cmUgYW5kIGh5cG90aGV0aWNhbCBldmVudCwgbmFtZWx5IHRoZSBzdWJzZXF1ZW50IHRlcm1pbmF0aW9uIG9mIGhpcyBjb250cmFjdCB3aXRob3V0IHN1Y2ggdGVybWluYXRpb24gYmVpbmcgYXQgaGlzIG93biBpbml0aWF0aXZlIG9yIGF0dHJpYnV0YWJsZSB0byBoaW0uPGJyPiZlbXNwOyZlbXNwOzI1LiAuLi4gdG9vIHVuY2VydGFpbiBhbmQgaW5kaXJlY3QgYSBwb3NzaWJpbGl0eSBmb3IgdGhhdCBsZWdpc2xhdGlvbiB0byBiZSBjYXBhYmxlIG9mIGJlaW5nIHJlZ2FyZGVkIGFzIGxpYWJsZSB0byBoaW5kZXIgZnJlZWRvbSBvZiBtb3ZlbWVudCBmb3Igd29ya2Vycy4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIsCiAgICAgICAgIk1lYXN1cmVzIEJleW9uZCBUaGUgU2NvcGUgT2YgQXJ0aWNsZSA0NSBURkVVIgogICAgXSwKICAgICJOQU1FIjogIkdyYWYiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIk1lZXVzZW4iLAogICAgICAgICJMYXdyaWUtQmx1bSIsCiAgICAgICAgIkJlcm5pbmkiLAogICAgICAgICJHcm9lbmVyIiwKICAgICAgICAiQWRvdWkgYW5kIENvcm51YWlsbGUiLAogICAgICAgICJCZXR0cmF5IiwKICAgICAgICAiV2FscmF2ZSIsCiAgICAgICAgIktyYW5lbWFubiIsCiAgICAgICAgIkJvbnNpZ25vcmUiLAogICAgICAgICJSYXVsaW4iLAogICAgICAgICJMZWh0b25lbiIsCiAgICAgICAgIlN0ZXltYW5uIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTIyIiwKICAgICJDSVRBVElPTiI6ICJHcmFmIFsyMDAwXSBFQ1IgSSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkFUIiwKICAgICAgICAiREUiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0xOTAvOTgiLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgV29ya2VycyAmbWRhc2g7IE1lYXN1cmVzIEJleW9uZCBUaGUgU2NvcGUgT2YgQXJ0aWNsZSA0NSBURkVVIgp9LAp7CiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkFydCA0NSgzKTwvc3Bhbj48L3NwYW4+ICZtZGFzaDsgUHVibGljIFBvbGljeSwgU2VjdXJpdHkgYW5kIEhlYWx0aCIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkluIHByYWN0aWNlLCBqdXN0aWZpY2F0aW9ucyB1bmRlciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgNDU8L3NwYW4+KDMpIGhhcmRseSBldmVyIHN1Y2NlZWQuIENmLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5WYW4gRHV5bjwvc3Bhbj4sIGluIHdoaWNoIGl0IDxzcGFuIGNsYXNzPVwiYmRcIj5kaWQ8L3NwYW4+LiBPZiBsYXRlLCB0aGUgY291cnRzIGFyZSBtb3JlIG9wZW4gdG8gc3VjaCBwbGVhZGluZ3MgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5KaXBhPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VHNha291cmlkaXM8L3NwYW4+LCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Kb3NlbWFuczwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5KdXN0aWZpY2F0aW9ucyBmb3IgcmVzdHJpY3Rpb25zIHVuZGVyIEFydCA0NSgzKSBtYXkgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj4gYmUgdG8gPHNwYW4gY2xhc3M9XCJiZFwiPnByb3RlY3QgZWNvbm9taWMgaW50ZXJlc3RzPC9zcGFuPiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRpcmVjdGl2ZSAyMDA0LzM4PC9zcGFuPiBBcnQgMjcoMSkuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UbyByZWx5IG9uIGEganVzdGlmaWNhdGlvbiwgYSB0aHJlYXQgbXVzdCBiZSBhIDxzcGFuIGNsYXNzPVwiYmRcIj5nZW51aW5lPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPnNlcmlvdXM8L3NwYW4+LCB0byBhIGZ1bmRhbWVudGFsIGludGVyZXN0IG9mIHNvY2lldHkgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EaXJlY3RpdmUgMjAwNC8zODwvc3Bhbj4gQXJ0IDI3KDIpLCBjbGVhcmx5IGNoYW5uZWxpbmcgdGhlIGVhcmxpZXIganVkZ21lbnQgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Qm9uc2lnbm9yZTwvc3Bhbj4gWzE5NzVdLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SG93ZXZlciwgbWVtYmVyIHN0YXRlcyBoYXZlIDxzcGFuIGNsYXNzPVwiYmRcIj5kaXNjcmV0aW9uPC9zcGFuPiwgd2hpY2ggbWF5IGVuY29tcGFzcyA8c3BhbiBjbGFzcz1cImJkXCI+Z3VpbHQgYnkgYXNzb2NpYXRpb248L3NwYW4+ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VmFuIER1eW48L3NwYW4+LiBEb24mIzgyMTc7dCBmb3JnZXQsIHNoZSA8c3BhbiBjbGFzcz1cImJkXCI+bG9zdDwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgcHVibGljIHBvbGljeSBqdXN0aWZpY2F0aW9uIG11c3Qgbm90IGJlIDxzcGFuIGNsYXNzPVwiYmRcIj5oeXBvY3JpdGljYWw8L3NwYW4+ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QWRvdWkgYW5kIENvcm51YWlsbGU8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5BcnQgNDUoNCk8L3NwYW4+PC9zcGFuPiAmbWRhc2g7IFB1YmxpYyBTZXJ2aWNlIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhpcyBtdXN0IGJlIHByb3BvcnRpb25hdGUsIGFwcGx5aW5nIG9ubHkgdG8gdGhvc2Ugcm9sZXMgZm9yIHdoaWNoIGEgPHNwYW4gY2xhc3M9XCJiZFwiPnNwZWNpYWwgYWxsZWdpYW5jZTwvc3Bhbj4gdG8gdGhlIG1lbWJlciBzdGF0ZSBpcyBuZWNlc3NhcnkgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db21taXNzaW9uIHYgQmVsZ2l1bSBJPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJXb3JrZXJzIiwKICAgICAgICAiUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgV29ya2VycyAmbWRhc2g7IFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICJOQU1FIjogIkp1c3RpZmljYXRpb25zIGZvciBEaXNjcmltaW5hdGlvbiB1bmRlciBBcnQgNDUiLAogICAgIk5VTUJFUiI6ICIxMjMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIk1lYW5pbmcgb2YgV29ya2VyIGluIEFydCA0NSIsCiAgICAgICAgIkVmZmVjdGl2ZW5lc3MgYW5kIFNjb3BlIG9mIEFydCA0NSIsCiAgICAgICAgIlJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMgLSBTdW1tYXJ5IiwKICAgICAgICAiQ2l0aXplbnMgUmlnaHRzIERpcmVjdGl2ZSAtIERpZ2VzdGVkIiwKICAgICAgICAiRVUgQ2l0aXplbnNoaXAiLAogICAgICAgICJNaWdyYW50IENyaXNpcyAtIFR1cmtleSBEZWFsIiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyBvdmVyIHRoZSBCb3JkZXIiLAogICAgICAgICJJbnRlcm5hbCBNYXJrZXQgLSBEaXNjdXNzaW9uIiwKICAgICAgICAiRGlyZWN0aXZlcyIsCiAgICAgICAgIkRvY3RyaW5lIG9mIERpcmVjdCBFZmZlY3QiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkRpcmVjdGl2ZSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5UZXh0IG9mIEFydGljbGUgMjc8L3NwYW4+PC9zcGFuPiIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlN1YmplY3QgdG8gdGhlIHByb3Zpc2lvbnMgb2YgdGhpcyBDaGFwdGVyLCBtZW1iZXIgc3RhdGVzIDxzcGFuIGNsYXNzPVwiYmRcIj5tYXkgcmVzdHJpY3Q8L3NwYW4+IHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+ZnJlZWRvbSBvZiBtb3ZlbWVudCBhbmQgcmVzaWRlbmNlPC9zcGFuPiBvZiBVbmlvbiBjaXRpemVucyBhbmQgdGhlaXIgZmFtaWx5IG1lbWJlcnMsIGlycmVzcGVjdGl2ZSBvZiBuYXRpb25hbGl0eSwgPHNwYW4gY2xhc3M9XCJiZFwiPm9uIGdyb3VuZHMgb2YgcHVibGljIHBvbGljeSwgcHVibGljIHNlY3VyaXR5IG9yIHB1YmxpYyBoZWFsdGg8L3NwYW4+LiBUaGVzZSBncm91bmRzIDxzcGFuIGNsYXNzPVwiYmRcIj5zaGFsbCBub3Q8L3NwYW4+IGJlIGludm9rZWQgdG8gPHNwYW4gY2xhc3M9XCJiZFwiPnNlcnZlIGVjb25vbWljIGVuZHM8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+TWVhc3VyZXMgdGFrZW4gb24gZ3JvdW5kcyBvZiA8c3BhbiBjbGFzcz1cImJkXCI+cHVibGljIHBvbGljeTwvc3Bhbj4gb3IgPHNwYW4gY2xhc3M9XCJiZFwiPnB1YmxpYyBzZWN1cml0eTwvc3Bhbj4gc2hhbGwgY29tcGx5IHdpdGggdGhlIHByaW5jaXBsZSBvZiA8c3BhbiBjbGFzcz1cImJkXCI+cHJvcG9ydGlvbmFsaXR5PC9zcGFuPiBhbmQgc2hhbGwgYmUgPHNwYW4gY2xhc3M9XCJiZFwiPmJhc2VkIGV4Y2x1c2l2ZWx5IG9uIHRoZSBwZXJzb25hbCBjb25kdWN0IG9mIHRoZSBpbmRpdmlkdWFsPC9zcGFuPiBjb25jZXJuZWQuPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5QcmV2aW91cyBjcmltaW5hbCBjb252aWN0aW9ucyBzaGFsbCBub3QgaW4gdGhlbXNlbHZlcyBjb25zdGl0dXRlIGdyb3VuZHMgZm9yIHRha2luZyBzdWNoIG1lYXN1cmVzPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSBwZXJzb25hbCA8c3BhbiBjbGFzcz1cImJkXCI+Y29uZHVjdCBvZiB0aGUgaW5kaXZpZHVhbDwvc3Bhbj4gY29uY2VybmVkIG11c3QgcmVwcmVzZW50IGEgPHNwYW4gY2xhc3M9XCJiZFwiPmdlbnVpbmUsIHByZXNlbnQgYW5kIHN1ZmZpY2llbnRseSBzZXJpb3VzIHRocmVhdDwvc3Bhbj4gYWZmZWN0aW5nIG9uZSBvZiB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmZ1bmRhbWVudGFsIGludGVyZXN0czwvc3Bhbj4gb2Ygc29jaWV0eS4gSnVzdGlmaWNhdGlvbnMgdGhhdCBhcmUgPHNwYW4gY2xhc3M9XCJiZFwiPmlzb2xhdGVkIGZyb20gdGhlIHBhcnRpY3VsYXJzPC9zcGFuPiBvZiB0aGUgY2FzZSBvciB0aGF0IHJlbHkgb24gY29uc2lkZXJhdGlvbnMgb2YgZ2VuZXJhbCBwcmV2ZW50aW9uIHNoYWxsIG5vdCBiZSBhY2NlcHRlZC48L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+SW4gb3JkZXIgdG8gYXNjZXJ0YWluIHdoZXRoZXIgdGhlIHBlcnNvbiBjb25jZXJuZWQgcmVwcmVzZW50cyBhIGRhbmdlciBmb3IgcHVibGljIHBvbGljeSBvciBwdWJsaWMgc2VjdXJpdHksIHdoZW4gaXNzdWluZyB0aGUgcmVnaXN0cmF0aW9uIGNlcnRpZmljYXRlIG9yLCBpbiB0aGUgYWJzZW5jZSBvZiBhIHJlZ2lzdHJhdGlvbiBzeXN0ZW0sIG5vdCBsYXRlciB0aGFuIHRocmVlIG1vbnRocyBmcm9tIHRoZSBkYXRlIG9mIGFycml2YWwgb2YgdGhlIHBlcnNvbiBjb25jZXJuZWQgb24gaXRzIHRlcnJpdG9yeSBvciBmcm9tIHRoZSBkYXRlIG9mIHJlcG9ydGluZyBoaXMvaGVyIHByZXNlbmNlIHdpdGhpbiB0aGUgdGVycml0b3J5LCBhcyBwcm92aWRlZCBmb3IgaW4gQXJ0aWNsZSA1KDUpLCBvciB3aGVuIGlzc3VpbmcgdGhlIHJlc2lkZW5jZSBjYXJkLCB0aGUgaG9zdCBtZW1iZXIgc3RhdGUgbWF5LCBzaG91bGQgaXQgY29uc2lkZXIgdGhpcyBlc3NlbnRpYWwsIHJlcXVlc3QgdGhlIG1lbWJlciBzdGF0ZSBvZiBvcmlnaW4gYW5kLCBpZiBuZWVkIGJlLCBvdGhlciBtZW1iZXIgc3RhdGVzIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gY29uY2VybmluZyBhbnkgcHJldmlvdXMgcG9saWNlIHJlY29yZCB0aGUgcGVyc29uIGNvbmNlcm5lZCBtYXkgaGF2ZS4gU3VjaCBlbnF1aXJpZXMgc2hhbGwgbm90IGJlIG1hZGUgYXMgYSBtYXR0ZXIgb2Ygcm91dGluZS4gVGhlIG1lbWJlciBzdGF0ZSBjb25zdWx0ZWQgc2hhbGwgZ2l2ZSBpdHMgcmVwbHkgd2l0aGluIHR3byBtb250aHMuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5UaGUgbWVtYmVyIHN0YXRlIHdoaWNoIGlzc3VlZCB0aGUgcGFzc3BvcnQgb3IgaWRlbnRpdHkgY2FyZCBzaGFsbCBhbGxvdyB0aGUgaG9sZGVyIG9mIHRoZSBkb2N1bWVudCB3aG8gaGFzIGJlZW4gZXhwZWxsZWQgb24gZ3JvdW5kcyBvZiBwdWJsaWMgcG9saWN5LCBwdWJsaWMgc2VjdXJpdHksIG9yIHB1YmxpYyBoZWFsdGggZnJvbSBhbm90aGVyIG1lbWJlciBzdGF0ZSB0byByZS1lbnRlciBpdHMgdGVycml0b3J5IHdpdGhvdXQgYW55IGZvcm1hbGl0eSBldmVuIGlmIHRoZSBkb2N1bWVudCBpcyBubyBsb25nZXIgdmFsaWQgb3IgdGhlIG5hdGlvbmFsaXR5IG9mIHRoZSBob2xkZXIgaXMgaW4gZGlzcHV0ZS48L3NwYW4+PC9saT48L29sPiIKICAgIF0sCiAgICAiQUtBIjogIkRpcmVjdGl2ZSAyMDA0LzM4IiwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIldvcmtlcnMiLAogICAgICAgICJSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgJm1kYXNoOyBXb3JrZXJzICZtZGFzaDsgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQiLAogICAgIk5BTUUiOiAiRGlyZWN0aXZlIDIwMDQvMzggQXJ0cyAyNy0zMyIsCiAgICAiTlVNQkVSIjogIjEyNCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2l0aXplbnMgUmlnaHRzIERpcmVjdGl2ZSAyMDA0LzM4IC0gSUkiLAogICAgICAgICJDaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIDIwMDQvMzggLSBJIiwKICAgICAgICAiRGlyZWN0aXZlIG9uIEV4Y2lzZSBEdXR5IDkyLzEyIChBbGNvaG9sLCBUb2JhY2NvLCBQZXRyb2wpIgogICAgXQp9LAp7CiAgICAiWUVBUiI6ICIxOTc1IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlJlbGlhbmNlIG9uIGFuIEFydCA0NSgzKSBkZXJvZ2F0aW9uIG5lY2Vzc2l0YXRlcyB0aGVyZSBiZWluZyBhIGdlbnVpbmUgYW5kIHN1ZmZpY2llbnRseSBzZXJpb3VzIHRocmVhdCwgYWZmZWN0aW5nIG9uZSBvZiB0aGUgZnVuZGFtZW50YWwgaW50ZXJlc3RzIG9mIHNvY2lldHkuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIldvcmtlcnMiLAogICAgICAgICJKdXN0aWZpY2F0aW9ucyBmb3IgRGlyZWN0bHkgRGlzY3JpbWluYXRvcnkgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyIKICAgIF0sCiAgICAiTkFNRSI6ICJCb25zaWdub3JlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDb21taXNzaW9uIHYgQmVsZ2l1bSBJIiwKICAgICAgICAiQWRvdWkgYW5kIENvcm51YWlsbGUiLAogICAgICAgICJWYW4gRHV5biIsCiAgICAgICAgIkdyb2VuZXIiLAogICAgICAgICJNZWV1c2VuIiwKICAgICAgICAiQmVybmluaSIsCiAgICAgICAgIkJvc21hbiIsCiAgICAgICAgIkxlaHRvbmVuIiwKICAgICAgICAiTGF3cmllLUJsdW0iLAogICAgICAgICJBbnRvbmlzc2VuIiwKICAgICAgICAiV2FscmF2ZSIsCiAgICAgICAgIkxldmluIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTI1IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBbiBJdGFsaWFuIHJlc2lkZW50IG9mIENvbG9nbmUgYWNxdWlyZWQgYSBCZXJldHRhIGFuZCA8c3BhbiBjbGFzcz1cIml0XCI+YWNjaWRlbnRhbGx5IHNob3QgaGlzIEJyb3RoZXI8L3NwYW4+ICghKS4gQW4gb3JkZXIgd2FzIG1hZGUgZm9yIGhpcyBkZXBvcnRhdGlvbi4iCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkJvbnNpZ25vcmUgWzE5NzVdIEVDUiAyOTc6IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiSVQiLAogICAgICAgICJERSIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTY3Lzc0IiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IFdvcmtlcnMgJm1kYXNoOyBKdXN0aWZpY2F0aW9ucyBmb3IgRGlyZWN0bHkgRGlzY3JpbWluYXRvcnkgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyIKfSwKewogICAgIllFQVIiOiAiMTk5NCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgY2lyY3Vtc3RhbmNlcyBvZiBwdWJsaWMgcG9saWN5IGp1c3RpZmljYXRpb25zIHRvIHJlc3RyaWN0aW9ucyBvbiBmcmVlIG1vdmVtZW50IG9mIHdvcmtlcnMgbWF5IHZhcnkgZnJvbSBjb3VudHJ5IHRvIGNvdW50cnkgYW5kIHRpbWUgdG8gdGltZSwgdGhlcmVmb3JlIHRoZSBtZW1iZXIgc3RhdGVzIG11c3QgaGF2ZSBkaXNjcmV0aW9uLiIsCiAgICAgICAgIiYjODIyMDsyNC4gLi4uIGEgbWVtYmVyIHN0YXRlLCBpbiBpbXBvc2luZyByZXN0cmljdGlvbnMganVzdGlmaWVkIG9uIGdyb3VuZHMgb2YgcHVibGljIHBvbGljeSwgaXMgZW50aXRsZWQgdG8gdGFrZSBpbnRvIGFjY291bnQsIGFzIGEgbWF0dGVyIG9mIHBlcnNvbmFsIGNvbmR1Y3Qgb2YgdGhlIGluZGl2aWR1YWwgY29uY2VybmVkLCB0aGUgZmFjdCB0aGF0IHRoZSBpbmRpdmlkdWFsIGlzIGFzc29jaWF0ZWQgd2l0aCBzb21lIGJvZHkgb3Igb3JnYW5pemF0aW9uIHRoZSBhY3Rpdml0aWVzIG9mIHdoaWNoIHRoZSBtZW1iZXIgc3RhdGUgY29uc2lkZXJzIHNvY2lhbGx5IGhhcm1mdWwgYnV0IHdoaWNoIGFyZSBub3QgdW5sYXdmdWwgaW4gdGhhdCBTdGF0ZSwgZGVzcGl0ZSB0aGUgZmFjdCB0aGF0IG5vIHJlc3RyaWN0aW9uIGlzIHBsYWNlZCB1cG9uIG5hdGlvbmFscyBvZiB0aGUgc2FpZCBtZW1iZXIgc3RhdGUgd2hvIHdpc2ggdG8gdGFrZSBzaW1pbGFyIGVtcGxveW1lbnQgd2l0aCB0aGVzZSBzYW1lIGJvZGllcyBvciBvcmdhbml6YXRpb25zLiYjODIyMTsiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiV29ya2VycyIsCiAgICAgICAgIkp1c3RpZmljYXRpb25zIGZvciBEaXJlY3RseSBEaXNjcmltaW5hdG9yeSBSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCBvZiBXb3JrZXJzIgogICAgXSwKICAgICJOQU1FIjogIlZhbiBEdXluIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJBZG91aSBhbmQgQ29ybnVhaWxsZSIsCiAgICAgICAgIkNvbW1pc3Npb24gdiBCZWxnaXVtIEkiLAogICAgICAgICJCb25zaWdub3JlIiwKICAgICAgICAiQm91a2hhbGZhIiwKICAgICAgICAiTWVldXNlbiIsCiAgICAgICAgIlN0ZXltYW5uIiwKICAgICAgICAiR3JvZW5lciIsCiAgICAgICAgIkdyYWYiLAogICAgICAgICJCb3NtYW4iLAogICAgICAgICJBbmdvbmVzZSIsCiAgICAgICAgIkFudG9uaXNzZW4iLAogICAgICAgICJCZXJuaW5pIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTI2IiwKICAgICJDSVRBVElPTiI6ICJWYW4gRHV5biBbMTk5NF0gRUNSIDEzMzc6IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiTkwiLAogICAgICAgICJVSyIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTQxLzc0IiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IFdvcmtlcnMgJm1kYXNoOyBKdXN0aWZpY2F0aW9ucyBmb3IgRGlyZWN0bHkgRGlzY3JpbWluYXRvcnkgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyIKfSwKewogICAgIllFQVIiOiAiMTk4MiIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJNZW1iZXIgc3RhdGVzIG11c3Qgbm90IGFidXNlIHB1YmxpYyBwb2xpY3kganVzdGlmaWNhdGlvbnMgdW5kZXIgQXJ0IDQ1KDMpLiBUaGV5IG1heSBub3QgYmUgaW52b2tlZCB0byBleGNsdWRlIHNvbWVvbmUgZm9yIGNvbmR1Y3Qgd2hpY2ggdGhlIG1lbWJlciBzdGF0ZSBkb2VzIG5vdCB0YWtlIGdlbnVpbmUgYW5kIGVmZmVjdGl2ZSBkb21lc3RpYyBtZWFzdXJlcyB0byByZXByZXNzLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJXb3JrZXJzIiwKICAgICAgICAiSnVzdGlmaWNhdGlvbnMgZm9yIERpcmVjdGx5IERpc2NyaW1pbmF0b3J5IFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMiCiAgICBdLAogICAgIk5BTUUiOiAiQWRvdWkgYW5kIENvcm51YWlsbGUiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNvbW1pc3Npb24gdiBCZWxnaXVtIEkiLAogICAgICAgICJCb25zaWdub3JlIiwKICAgICAgICAiVmFuIER1eW4iLAogICAgICAgICJBbmdvbmVzZSIsCiAgICAgICAgIkxlYm9uIiwKICAgICAgICAiR3JvZW5lciIsCiAgICAgICAgIktyYW5lbWFubiIsCiAgICAgICAgIkJvc21hbiIsCiAgICAgICAgIlJhdWxpbiIsCiAgICAgICAgIkJlcm5pbmkiLAogICAgICAgICJTdGV5bWFubiIsCiAgICAgICAgIk1lZXVzZW4iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMjciLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkNvbmpvaW5lZCBjYXNlcyBvZiB0d28gcHJvc3RpdHV0ZXMuIE1zLiBBZG91aSBoYWQgYXBwbGllZCBmb3IgYSByZXNpZGVuY2UgcGVybWl0IGluIExpXHUwMGU4Z2UsIGJ1dCB3YXMgcmVmdXNlZCwgYW5kIHRvbGQgdG8gbGVhdmUgdGhlIGNvdW50cnkgd2l0aGluIDE1IGRheXMuIFdpdGggdGhpcyBzaGUgcmVsdWN0YW50bHkgY29tcGxpZWQuIFNoZSBjYW1lIGJhY2sgYSBtb250aCBsYXRlciwgZHV0aWZ1bGx5IG5vdGlmeWluZyB0aGUgYXV0aG9yaXRpZXMgb2YgaGVyIHByZXNlbmNlICZtZGFzaDsgd2hvIHJldHVybmVkIHRoZSBjb3VydGVzeSBieSB0ZWxsaW5nIGhlciB0byBmdWNrIG9mZiBhZ2FpbiwgdGhpcyB0aW1lIHdpdGhpbiA8c3BhbiBjbGFzcz1cImJkXCI+NDwvc3Bhbj4gZGF5cy4gU2hlIHJlZnVzZWQsIGNvbnNpZGVyaW5nIHRoZSBvcmRlciB3YXMgdW5sYXdmdWwuIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJBZG91aSBhbmQgQ29ybnVhaWxsZSBbMTk4Ml0gRUNSIDE2NjU6IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRlIiLAogICAgICAgICJCRSIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTExNS84MSIsCiAgICAiQ0FURUdPUlkiOiAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgJm1kYXNoOyBXb3JrZXJzICZtZGFzaDsgSnVzdGlmaWNhdGlvbnMgZm9yIERpcmVjdGx5IERpc2NyaW1pbmF0b3J5IFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMiCn0sCnsKICAgICJZRUFSIjogIjE5ODAiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiRGlzY3JpbWluYXRpb24gYWdhaW5zdCB3b3JrZXJzIGZyb20gb3RoZXIgbWVtYmVyIHN0YXRlcyB3b3JraW5nIGluIHB1YmxpYyBzZXJ2aWNlIHVuZGVyIEFydCA0NSg0KSBpcyBub3QgcHJvcG9ydGlvbmF0ZSB3aGVuIGFwcGxpZWQgdG8gYWxsIHN0YXRlIGVtcGxveWVlcywgcmF0aGVyIHRoYW4gdGhvc2Ugd2hvc2Ugcm9sZXMgbmVjZXNzaXRhdGUgYSBzcGVjaWFsIGFsbGVnaWFuY2UgdG8gdGhlIHN0YXRlLiBUaGlzIG1pZ2h0IGluY2x1ZGUgc3VwZXJ2aXNvcnMsIHRlY2huaWNhbCBvZmZpY2VycywgZXRjLCBidXQgbm90IGZvciByYWlsd2F5IHdvcmtlcnMsIG51cnNlcywgZXRjLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJXb3JrZXJzIiwKICAgICAgICAiSnVzdGlmaWNhdGlvbnMgZm9yIERpcmVjdGx5IERpc2NyaW1pbmF0b3J5IFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMiLAogICAgICAgICJQdWJsaWMgU2VydmljZSIKICAgIF0sCiAgICAiTkFNRSI6ICJDb21taXNzaW9uIHYgQmVsZ2l1bSBJIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJCb25zaWdub3JlIiwKICAgICAgICAiVmFuIER1eW4iLAogICAgICAgICJBZG91aSBhbmQgQ29ybnVhaWxsZSIsCiAgICAgICAgIkxlaHRvbmVuIiwKICAgICAgICAiU3RleW1hbm4iLAogICAgICAgICJCZXR0cmF5IiwKICAgICAgICAiQm91a2hhbGZhIiwKICAgICAgICAiV2FscmF2ZSIsCiAgICAgICAgIkxlYm9uIiwKICAgICAgICAiQW5nb25lc2UiLAogICAgICAgICJLZW1wZiIsCiAgICAgICAgIkdyb2VuZXIiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMjgiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkJlbGdpdW0gcmVzdHJpY3RlZCBhbG1vc3QgYWxsIGZvcm1zIG9mIHN0YXRlIGVtcGxveW1lbnQgdG8gQmVsZ2lhbiBjaXRpemVucy4iCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkNvbW1pc3Npb24gdiBCZWxnaXVtIEkgWzE5ODBdIDM4ODE6IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRVUiLAogICAgICAgICJCRSIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTE0OS83OSIsCiAgICAiQ0FURUdPUlkiOiAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgJm1kYXNoOyBXb3JrZXJzICZtZGFzaDsgSnVzdGlmaWNhdGlvbnMgZm9yIERpcmVjdGx5IERpc2NyaW1pbmF0b3J5IFJlc3RyaWN0aW9ucyBvbiBGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMgJm1kYXNoOyBQdWJsaWMgU2VydmljZSIKfSwKewogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkZpcnN0IGFwcGVhcmluZyBhdCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NYWFzdHJpY2h0PC9zcGFuPiwgdGhpcyBpcyB0aGUgaWRlYSB0aGF0IHJpZ2h0cyBzaG91bGQgYmUgZ2l2ZW4gdG8gdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5ub24tZWNvbm9taWNhbGx5IGFjdGl2ZTwvc3Bhbj4sIGFzIHdlbGwgYXMgd29ya2Vycy4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDE4IFRGRVU8L3NwYW4+IHByb3ZpZGVzIGZvciBub24tZGlzY3JpbWluYXRpb24gb24gdGhlIGdyb3VuZHMgb2YgbmF0aW9uYWxpdHksIHdpdGhvdXQgcmVmZXJlbmNlIHRvIHRoZSBjYXRlZ29yaWVzIG9mIHBlb3BsZSB0byB3aG9tIGl0IG1pZ2h0IHJlZmVyLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMjAgVEZFVTwvc3Bhbj4gYm9sZGx5IGVzdGFibGlzaGVzIDxzcGFuIGNsYXNzPVwiYmRcIj5DaXRpemVuc2hpcCBvZiB0aGUgVW5pb248L3NwYW4+IGFzIGFuIGFkZGl0aW9uYWwgKHJhdGhlciB0aGFuIHJlcGxhY2VtZW50KSBuYXRpb25hbGl0eS4gQXQgPHNwYW4gY2xhc3M9XCJiZFwiPjIoYSk8L3NwYW4+LCBpdCBhY2NvcmRzIHRoZW0gdGhlIHJpZ2h0IHRvIG1vdmUgYW5kIGZyZWVseSByZXNpZGUgYW55d2hlcmUgaW4gdGhlIEVVICZtZGFzaDsgYWxiZWl0IHdpdGggbGltaXRzLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAyMSBURkVVPC9zcGFuPiBleHBsaWNpdGx5IHByb3ZpZGVzIGZvciB3aGF0IGhhcHBlbnMgaWYgdGhlIHNpdHVhdGlvbiBlbnZpc2FnZWQgPHNwYW4gY2xhc3M9XCJiZFwiPmRvZXNuJiM4MjE3O3Q8L3NwYW4+IGFyaXNlIG5hdHVyYWxseSAmbWRhc2g7IGF0IDxzcGFuIGNsYXNzPVwiYmRcIj4yPC9zcGFuPiwgcHJvdmlzaW9ucyBhZG9wdGVkIGJ5IHRoZSBQYXJsaWFtZW50IGFuZCB0aGUgQ291bmNpbCwgYWNjb3JkaW5nIHRvIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5PcmRpbmFyeSBMZWdpc2xhdGl2ZSBQcm9jZWR1cmU8L3NwYW4+LCBhbmQgYXQgPHNwYW4gY2xhc3M9XCJiZFwiPjM8L3NwYW4+LCB0aGUgQ291bmNpbCwgYWNjb3JkaW5nIHRvIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TcGVjaWFsIExlZ2lzbGF0aXZlIFByb2NlZHVyZTwvc3Bhbj4uIiwKICAgICAgICAiSnVzdCBhcyBmb3IgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDQ1IFRGRVU8L3NwYW4+LCB0aGUgZW5qb3ltZW50IG9mIHRoZXNlIHJpZ2h0cyBpcyBjb250aW5nZW50IG9uIGhhdmluZyA8c3BhbiBjbGFzcz1cImJkXCI+Y3Jvc3NlZCBhIGJvcmRlcjwvc3Bhbj4uIiwKICAgICAgICAiRGV0YWlsIGlzIGNvbG91cmVkIGluIGJ5IHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIC0gSTwvc3Bhbj4sIHN0aXB1bGF0aW5nIHRoZSBkaWZmZXJlbnQgY29uZGl0aW9ucyBhcHBseWluZyB0byBzdGF5cyBvZiBkaWZmZXJpbmcgbGVuZ3RocywgYW5kIGhvdyB0aGUgbWVtYmVyIHN0YXRlIG11c3QgdHJlYXQgeW91ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2l0aXplbnMgUmlnaHRzIERpcmVjdGl2ZSAtIElJPC9zcGFuPi48YnI+U2VlIGFsc28gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2l0aXplbnMgUmlnaHRzIERpcmVjdGl2ZSAtIERpZ2VzdGVkPC9zcGFuPi4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlN3YXJ0aHksIEJlbmVmaXQtU2N1bW1pbmcgU2Nyb3VuZ2ViYWdzPC9zcGFuPjwvc3Bhbj48YnI+QWx0aG91Z2ggbW9zdCBvZiB0aGUgY2FzZXMgdHVybiBvbiB0ZWNobmljYWwgaXNzdWVzLCB0aGUgZXhxdWlzaXRlbHktc2Vuc2l0aXZlIGJpZ2dlciBwaWN0dXJlIGlzIG1vcmUgdGhhbiB3b3J0aHkgb2YgY29uc2lkZXJhdGlvbi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGFubzwvc3Bhbj4gYW5kIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFsaW1hbm92aWM8L3NwYW4+IHJpcCB0byBzaHJlZHMgdGhlIDxzcGFuIGNsYXNzPVwiaXRcIj5EYWlseSBNYWlsPC9zcGFuPiBwYXJhbm9pYSBhYm91dCBrbnVja2xlLWRyYWdnaW5nIGJlbmVmaXQgdG91cmlzdHMgZnJvbSBFYXN0ZXJuIEV1cm9wZSAob3Igb3VnaHQgdG8sIGlmIHRoYXQgdmlldyB3ZXJlIHN1c2NlcHRpYmxlIHRvIGRlYmF0ZSksIGFzIGRvZXMgYSBxdWljayBnbGFuY2UgYXQgdGhlIGJsYWNrLWxldHRlciB0cmVhdHkgYW5kIGRpcmVjdGl2ZSBwcm92aXNpb25zLiBTb21lIHdpbGwgYmUgZW1ib2xkZW5lZCwgc29tZSB3aWxsIGJlIGRpc2hlYXJ0ZW5lZCwgdG8gbm90ZSB0aGUgcmVjZW50IGp1cmlzcHJ1ZGVudGlhbCBnYXRoZXJpbmctdXAgb2Ygc2tpcnRzIHRvIHRoZSBleHRlbnQgdGhhdCAmIzgyMTY7RVUgQ2l0aXplbnNoaXAmIzgyMTc7IGhhcyBhcHBhcmVudGx5IGRyb3BwZWQgb3V0IG9mIHRoZSBDb3VydCYjODIxNztzIHZvY2FidWxhcnkuIEl0cyByZWx1Y3RhbmNlIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlphbWJyYW5vPC9zcGFuPiBpcyBjbGVhcjsgaXRzIHJlbGllZiBub3QgdG8gaGF2ZSB0byBmb2xsb3cgaXQgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWNDYXJ0aHk8L3NwYW4+LCBjbGVhcmVyIHN0aWxsLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJDaXRpemVucyIsCiAgICAgICAgIkNpdGl6ZW5zaGlwIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRVUiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgQ2l0aXplbnMgJm1kYXNoOyBDaXRpemVuc2hpcCIsCiAgICAiTkFNRSI6ICJFVSBDaXRpemVuc2hpcCIsCiAgICAiVFlQRSI6ICJDb25jZXB0IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIC0gRGlnZXN0ZWQiLAogICAgICAgICJKdXN0aWZpY2F0aW9ucyBmb3IgRGlzY3JpbWluYXRpb24gdW5kZXIgQXJ0IDQ1IiwKICAgICAgICAiUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyIsCiAgICAgICAgIk1lYW5pbmcgb2YgV29ya2VyIGluIEFydCA0NSIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyAtIFN1bW1hcnkiLAogICAgICAgICJFZmZlY3RpdmVuZXNzIGFuZCBTY29wZSBvZiBBcnQgNDUiLAogICAgICAgICJEb2N0cmluZSBvZiBEaXJlY3QgRWZmZWN0IiwKICAgICAgICAiTWlncmFudCBDcmlzaXMgLSBUdXJrZXkgRGVhbCIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgb3ZlciB0aGUgQm9yZGVyIiwKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSUkgLSBFRlRBIHRvIE5pY2UiLAogICAgICAgICJEaXJlY3RpdmVzIiwKICAgICAgICAiUG90dGVkIEhpc3RvcnkgSUlJIC0gQWNjZXNzaW9uIHRvIHRoZSBQcmVzZW50IgogICAgXSwKICAgICJOVU1CRVIiOiAiMTI5Igp9LAp7CiAgICAiVFlQRSI6ICJUcmVhdHkiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIlNlZSBhbHNvIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNpdGl6ZW5zIFJpZ2h0cyBEaXJlY3RpdmUgLSBJPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2l0aXplbnMgUmlnaHRzIERpcmVjdGl2ZSAtIElJPC9zcGFuPiAoc3VtbWFyaXplZCBieSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIC0gRGlnZXN0ZWQ8L3NwYW4+LCBmb3IgdGhlIERpcmVjdGl2ZSAyMDA0LzM4LCB3aGljaCBhZGRzIGluIG11Y2ggZGV0YWlsLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+QXJ0IDE4PC9zcGFuPiAmbWRhc2g7IFByaW5jaXBsZSBvZiBOb24tRGlzY3JpbWluYXRpb248L3NwYW4+PGJyPldpdGhpbiB0aGUgc2NvcGUgb2YgYXBwbGljYXRpb24gb2YgdGhlIFRyZWF0aWVzLCBhbmQgd2l0aG91dCBwcmVqdWRpY2UgdG8gYW55IHNwZWNpYWwgcHJvdmlzaW9ucyBjb250YWluZWQgdGhlcmVpbiwgYW55IGRpc2NyaW1pbmF0aW9uIG9uIGdyb3VuZHMgb2YgbmF0aW9uYWxpdHkgc2hhbGwgYmUgcHJvaGliaXRlZC4iLAogICAgICAgICJUaGUgRXVyb3BlYW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGFybGlhbWVudDwvc3Bhbj4gYW5kIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db3VuY2lsPC9zcGFuPiwgYWN0aW5nIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+T3JkaW5hcnkgTGVnaXNsYXRpdmUgUHJvY2VkdXJlPC9zcGFuPiwgbWF5IGFkb3B0IHJ1bGVzIGRlc2lnbmVkIHRvIHByb2hpYml0IHN1Y2ggZGlzY3JpbWluYXRpb24uIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj5BcnQgMjA8L3NwYW4+ICZtZGFzaDsgRXN0YWJsaXNobWVudCBvZiBDaXRpemVuc2hpcDwvc3Bhbj4iLAogICAgICAgICI8b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5DaXRpemVuc2hpcCBvZiB0aGUgVW5pb24gaXMgaGVyZWJ5IGVzdGFibGlzaGVkLiBFdmVyeSBwZXJzb24gaG9sZGluZyB0aGUgbmF0aW9uYWxpdHkgb2YgYSBtZW1iZXIgc3RhdGUgc2hhbGwgYmUgYSBjaXRpemVuIG9mIHRoZSBVbmlvbi4gQ2l0aXplbnNoaXAgb2YgdGhlIFVuaW9uIHNoYWxsIGJlIGFkZGl0aW9uYWwgdG8gYW5kIG5vdCByZXBsYWNlIG5hdGlvbmFsIGNpdGl6ZW5zaGlwLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Q2l0aXplbnMgb2YgdGhlIFVuaW9uIHNoYWxsIGVuam95IHRoZSByaWdodHMgYW5kIGJlIHN1YmplY3QgdG8gdGhlIGR1dGllcyBwcm92aWRlZCBmb3IgaW4gdGhlIFRyZWF0aWVzLiBUaGV5IHNoYWxsIGhhdmUsIGludGVyIGFsaWE6PC9zcGFuPjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPnRoZSByaWdodCB0byBtb3ZlIGFuZCByZXNpZGUgZnJlZWx5IHdpdGhpbiB0aGUgdGVycml0b3J5IG9mIHRoZSBtZW1iZXIgc3RhdGVzOzwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+dGhlIHJpZ2h0IHRvIHZvdGUgYW5kIHN0YW5kIGFzIGNhbmRpZGF0ZXMgaW4gZWxlY3Rpb25zIHRvIHRoZSBFdXJvcGVhbiBQYXJsaWFtZW50IGFuZCBpbiBtdW5pY2lwYWwgZWxlY3Rpb25zIGluIHRoZWlyIG1lbWJlciBzdGF0ZSBvZiByZXNpZGVuY2UsIHVuZGVyIHRoZSBzYW1lIGNvbmRpdGlvbnMgYXMgbmF0aW9uYWxzIG9mIHRoYXQgU3RhdGU7IFsuLi5dPC9zcGFuPjwvbGk+PC9vbD48L29sPiIsCiAgICAgICAgIiZlbXNwOyZlbXNwO1RoZXNlIHJpZ2h0cyBzaGFsbCBiZSBleGVyY2lzZWQgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBjb25kaXRpb25zIGFuZCBsaW1pdHMgZGVmaW5lZCBieSB0aGUgVHJlYXRpZXMgYW5kIGJ5IHRoZSBtZWFzdXJlcyBhZG9wdGVkIHRoZXJldW5kZXIuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj5BcnQgMjE8L3NwYW4+ICZtZGFzaDsgRnJlZWRvbSB0byBNb3ZlIGFuZCBSZXNpZGU8L3NwYW4+IiwKICAgICAgICAiPG9sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+RXZlcnkgY2l0aXplbiBvZiB0aGUgVW5pb24gc2hhbGwgaGF2ZSB0aGUgcmlnaHQgdG8gbW92ZSBhbmQgcmVzaWRlIGZyZWVseSB3aXRoaW4gdGhlIHRlcnJpdG9yeSBvZiB0aGUgbWVtYmVyIHN0YXRlcywgc3ViamVjdCB0byB0aGUgbGltaXRhdGlvbnMgYW5kIGNvbmRpdGlvbnMgbGFpZCBkb3duIGluIHRoZSBUcmVhdGllcyBhbmQgYnkgdGhlIG1lYXN1cmVzIGFkb3B0ZWQgdG8gZ2l2ZSB0aGVtIGVmZmVjdC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPklmIGFjdGlvbiBieSB0aGUgVW5pb24gc2hvdWxkIHByb3ZlIG5lY2Vzc2FyeSB0byBhdHRhaW4gdGhpcyBvYmplY3RpdmUgYW5kIHRoZSBUcmVhdGllcyBoYXZlIG5vdCBwcm92aWRlZCB0aGUgbmVjZXNzYXJ5IHBvd2VycywgdGhlIEV1cm9wZWFuIFBhcmxpYW1lbnQgYW5kIHRoZSBDb3VuY2lsLCBhY3RpbmcgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBvcmRpbmFyeSBsZWdpc2xhdGl2ZSBwcm9jZWR1cmUsIG1heSBhZG9wdCBwcm92aXNpb25zIHdpdGggYSB2aWV3IHRvIGZhY2lsaXRhdGluZyB0aGUgZXhlcmNpc2Ugb2YgdGhlIHJpZ2h0cyByZWZlcnJlZCB0byBpbiBwYXJhZ3JhcGggMS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkZvciB0aGUgc2FtZSBwdXJwb3NlcyBhcyB0aG9zZSByZWZlcnJlZCB0byBpbiBwYXJhZ3JhcGggMSBhbmQgaWYgdGhlIFRyZWF0aWVzIGhhdmUgbm90IHByb3ZpZGVkIHRoZSBuZWNlc3NhcnkgcG93ZXJzLCB0aGUgQ291bmNpbCwgYWN0aW5nIGluIGFjY29yZGFuY2Ugd2l0aCBhIHNwZWNpYWwgbGVnaXNsYXRpdmUgcHJvY2VkdXJlLCBtYXkgYWRvcHQgbWVhc3VyZXMgY29uY2VybmluZyBzb2NpYWwgc2VjdXJpdHkgb3Igc29jaWFsIHByb3RlY3Rpb24uIFRoZSBDb3VuY2lsIHNoYWxsIGFjdCB1bmFuaW1vdXNseSBhZnRlciBjb25zdWx0aW5nIHRoZSBFdXJvcGVhbiBQYXJsaWFtZW50Ljwvc3Bhbj48L2xpPjwvb2w+IgogICAgXSwKICAgICJBS0EiOiAiQXJ0IDE4IFRGRVU7IEFydCAyMCBURkVVOyBBcnQgMjEgVEZFVSIsCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJDaXRpemVucyIsCiAgICAgICAgIkNpdGl6ZW5zaGlwIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IENpdGl6ZW5zICZtZGFzaDsgQ2l0aXplbnNoaXAiLAogICAgIk5BTUUiOiAiQXJ0aWNsZXMgMTgsIDIwIGFuZCAyMSBURkVVIiwKICAgICJOVU1CRVIiOiAiMTMwIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJBcnRpY2xlIDQ1IFRGRVUiLAogICAgICAgICJMaXNib24gVHJlYXR5IC0gSHVtYW4gUmlnaHRzIEFzcGVjdHMiLAogICAgICAgICJBcnQgMjg4IFRGRVUiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkRpcmVjdGl2ZSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiU2VlIGFsc28gJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIC0gSTwvc3Bhbj4gZm9yIEFydCAyNCBvbiBFcXVhbCBUcmVhdG1lbnQuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj5BcnQgMjwvc3Bhbj4gJm1kYXNoOyBEZWZpbml0aW9uczwvc3Bhbj49PGJyPkZvciB0aGUgcHVycG9zZXMgb2YgdGhpcyBEaXJlY3RpdmU6IiwKICAgICAgICAiPG9sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+JiM4MjIwO1VuaW9uIGNpdGl6ZW4mIzgyMjE7IG1lYW5zIGFueSBwZXJzb24gaGF2aW5nIHRoZSBuYXRpb25hbGl0eSBvZiBhIG1lbWJlciBzdGF0ZTs8L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPiYjODIyMDtGYW1pbHkgbWVtYmVyJiM4MjIxOyBtZWFuczo8L3NwYW4+PG9sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+dGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5zcG91c2U8L3NwYW4+Ozwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+dGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5wYXJ0bmVyPC9zcGFuPiB3aXRoIHdob20gdGhlIFVuaW9uIGNpdGl6ZW4gaGFzIGNvbnRyYWN0ZWQgYSA8c3BhbiBjbGFzcz1cImJkXCI+cmVnaXN0ZXJlZCBwYXJ0bmVyc2hpcDwvc3Bhbj4sIG9uIHRoZSBiYXNpcyBvZiB0aGUgbGVnaXNsYXRpb24gb2YgYSBtZW1iZXIgc3RhdGUsIDxzcGFuIGNsYXNzPVwiYmRcIj5pZjwvc3Bhbj4gdGhlIGxlZ2lzbGF0aW9uIG9mIHRoZSBob3N0IG1lbWJlciBzdGF0ZSB0cmVhdHMgPHNwYW4gY2xhc3M9XCJiZFwiPnJlZ2lzdGVyZWQgcGFydG5lcnNoaXBzIGFzIGVxdWl2YWxlbnQgdG8gbWFycmlhZ2U8L3NwYW4+IGFuZCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGNvbmRpdGlvbnMgbGFpZCBkb3duIGluIHRoZSByZWxldmFudCBsZWdpc2xhdGlvbiBvZiB0aGUgaG9zdCBtZW1iZXIgc3RhdGU7PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj50aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmRpcmVjdCBkZXNjZW5kYW50czwvc3Bhbj4gd2hvIGFyZSB1bmRlciB0aGUgYWdlIG9mIDIxIG9yIGFyZSBkZXBlbmRhbnRzIGFuZCB0aG9zZSBvZiB0aGUgc3BvdXNlIG9yIHBhcnRuZXIgYXMgZGVmaW5lZCBpbiBwb2ludCAoYik7PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj50aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmRlcGVuZGVudCBkaXJlY3QgcmVsYXRpdmVzPC9zcGFuPiBpbiB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmFzY2VuZGluZzwvc3Bhbj4gbGluZSBhbmQgdGhvc2Ugb2YgdGhlIHNwb3VzZSBvciBwYXJ0bmVyIGFzIGRlZmluZWQgaW4gcG9pbnQgKGIpOzwvc3Bhbj48L2xpPjwvb2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj4mIzgyMjA7SG9zdCBtZW1iZXIgc3RhdGUmIzgyMjE7IG1lYW5zIHRoZSBtZW1iZXIgc3RhdGUgdG8gd2hpY2ggYSBVbmlvbiBjaXRpemVuIG1vdmVzIGluIG9yZGVyIHRvIGV4ZXJjaXNlIGhpcy9oZXIgcmlnaHQgb2YgZnJlZSBtb3ZlbWVudCBhbmQgcmVzaWRlbmNlLjwvc3Bhbj48L2xpPjwvb2w+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj5BcnQgMzwvc3Bhbj4gJm1kYXNoOyBCZW5lZmljaWFyaWVzPC9zcGFuPiIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoaXMgRGlyZWN0aXZlIHNoYWxsIGFwcGx5IHRvIGFsbCBVbmlvbiBjaXRpemVucyB3aG8gbW92ZSB0byBvciByZXNpZGUgaW4gYSBtZW1iZXIgc3RhdGUgb3RoZXIgdGhhbiB0aGF0IG9mIHdoaWNoIHRoZXkgYXJlIGEgbmF0aW9uYWwsIGFuZCB0byB0aGVpciBmYW1pbHkgbWVtYmVycyBhcyBkZWZpbmVkIGluIHBvaW50IDIgb2YgQXJ0aWNsZSAyIHdobyBhY2NvbXBhbnkgb3Igam9pbiB0aGVtLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+V2l0aG91dCBwcmVqdWRpY2UgdG8gYW55IHJpZ2h0IHRvIGZyZWUgbW92ZW1lbnQgYW5kIHJlc2lkZW5jZSB0aGUgcGVyc29ucyBjb25jZXJuZWQgbWF5IGhhdmUgaW4gdGhlaXIgb3duIHJpZ2h0LCB0aGUgaG9zdCBtZW1iZXIgc3RhdGUgc2hhbGwsIGluIGFjY29yZGFuY2Ugd2l0aCBpdHMgbmF0aW9uYWwgbGVnaXNsYXRpb24sIGZhY2lsaXRhdGUgZW50cnkgYW5kIHJlc2lkZW5jZSBmb3IgdGhlIGZvbGxvd2luZyBwZXJzb25zOjwvc3Bhbj48b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5hbnkgb3RoZXIgZmFtaWx5IG1lbWJlcnMsIGlycmVzcGVjdGl2ZSBvZiB0aGVpciBuYXRpb25hbGl0eSwgbm90IGZhbGxpbmcgdW5kZXIgdGhlIGRlZmluaXRpb24gaW4gcG9pbnQgMiBvZiBBcnRpY2xlIDIgd2hvLCBpbiB0aGUgY291bnRyeSBmcm9tIHdoaWNoIHRoZXkgaGF2ZSBjb21lLCBhcmUgZGVwZW5kYW50cyBvciBtZW1iZXJzIG9mIHRoZSBob3VzZWhvbGQgb2YgdGhlIFVuaW9uIGNpdGl6ZW4gaGF2aW5nIHRoZSBwcmltYXJ5IHJpZ2h0IG9mIHJlc2lkZW5jZSwgb3Igd2hlcmUgc2VyaW91cyBoZWFsdGggZ3JvdW5kcyBzdHJpY3RseSByZXF1aXJlIHRoZSBwZXJzb25hbCBjYXJlIG9mIHRoZSBmYW1pbHkgbWVtYmVyIGJ5IHRoZSBVbmlvbiBjaXRpemVuOzwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+dGhlIHBhcnRuZXIgd2l0aCB3aG9tIHRoZSBVbmlvbiBjaXRpemVuIGhhcyBhIGR1cmFibGUgcmVsYXRpb25zaGlwLCBkdWx5IGF0dGVzdGVkLiBUaGUgaG9zdCBtZW1iZXIgc3RhdGUgc2hhbGwgdW5kZXJ0YWtlIGFuIGV4dGVuc2l2ZSBleGFtaW5hdGlvbiBvZiB0aGUgcGVyc29uYWwgY2lyY3Vtc3RhbmNlcyBhbmQgc2hhbGwganVzdGlmeSBhbnkgZGVuaWFsIG9mIGVudHJ5IG9yIHJlc2lkZW5jZSB0byB0aGVzZSBwZW9wbGUuPC9zcGFuPjwvbGk+PC9vbD48L29sPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+QXJ0IDY8L3NwYW4+ICZtZGFzaDsgMyBtb250aHMgb3IgbGVzczwvc3Bhbj4iLAogICAgICAgICI8b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5VbmlvbiBjaXRpemVucyBzaGFsbCBoYXZlIHRoZSByaWdodCBvZiByZXNpZGVuY2Ugb24gdGhlIHRlcnJpdG9yeSBvZiBhbm90aGVyIG1lbWJlciBzdGF0ZSBmb3IgYSBwZXJpb2Qgb2YgdXAgdG8gdGhyZWUgbW9udGhzIHdpdGhvdXQgYW55IGNvbmRpdGlvbnMgb3IgYW55IGZvcm1hbGl0aWVzIG90aGVyIHRoYW4gdGhlIHJlcXVpcmVtZW50IHRvIGhvbGQgYSB2YWxpZCBpZGVudGl0eSBjYXJkIG9yIHBhc3Nwb3J0Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIHByb3Zpc2lvbnMgb2YgcGFyYWdyYXBoIDEgc2hhbGwgYWxzbyBhcHBseSB0byBmYW1pbHkgbWVtYmVycyBpbiBwb3NzZXNzaW9uIG9mIGEgdmFsaWQ8L3NwYW4+PC9saT48L29sPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+QXJ0IDc8L3NwYW4+ICZtZGFzaDsgMyBtb250aHMgdG8gNSB5ZWFyczwvc3Bhbj4iLAogICAgICAgICI8b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BbGwgVW5pb24gY2l0aXplbnMgc2hhbGwgaGF2ZSB0aGUgcmlnaHQgb2YgcmVzaWRlbmNlIG9uIHRoZSB0ZXJyaXRvcnkgb2YgYW5vdGhlciBtZW1iZXIgc3RhdGUgZm9yIGEgcGVyaW9kIG9mIGxvbmdlciB0aGFuIHRocmVlIG1vbnRocyBpZiB0aGV5Ojwvc3Bhbj48b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5hcmUgd29ya2VycyBvciBzZWxmLWVtcGxveWVkIHBlcnNvbnMgaW4gdGhlIGhvc3QgbWVtYmVyIHN0YXRlOyBvcjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+aGF2ZSA8c3BhbiBjbGFzcz1cImJkXCI+c3VmZmljaWVudCByZXNvdXJjZXMgZm9yIHRoZW1zZWx2ZXMgYW5kIHRoZWlyIGZhbWlseSBtZW1iZXJzIG5vdCB0byBiZWNvbWUgYSBidXJkZW4gb24gdGhlIHNvY2lhbCBhc3Npc3RhbmNlIHN5c3RlbTwvc3Bhbj4gb2YgdGhlIGhvc3QgbWVtYmVyIHN0YXRlIGR1cmluZyB0aGVpciBwZXJpb2Qgb2YgcmVzaWRlbmNlIGFuZCBoYXZlIDxzcGFuIGNsYXNzPVwiYmRcIj5jb21wcmVoZW5zaXZlIHNpY2tuZXNzIGluc3VyYW5jZSBjb3Zlcjwvc3Bhbj4gaW4gdGhlIGhvc3QgbWVtYmVyIHN0YXRlOyBvcjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+YXJlIGVucm9sbGVkIGF0IGEgcHJpdmF0ZSBvciBwdWJsaWMgZXN0YWJsaXNobWVudCwgYWNjcmVkaXRlZCBvciBmaW5hbmNlZCBieSB0aGUgaG9zdDxicj5oYXZlIGNvbXByZWhlbnNpdmUgc2lja25lc3MgaW5zdXJhbmNlIGNvdmVyIGluIHRoZSBob3N0IG1lbWJlciBzdGF0ZSBhbmQgYXNzdXJlIHRoZSByZWxldmFudCBuYXRpb25hbCBhdXRob3JpdHksIGJ5IG1lYW5zIG9mIGEgZGVjbGFyYXRpb24gb3IgYnkgc3VjaCBlcXVpdmFsZW50IG1lYW5zIGFzPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5hcmUgZmFtaWx5IG1lbWJlcnMgYWNjb21wYW55aW5nIG9yIGpvaW5pbmcgYSBVbmlvbiBjaXRpemVuIHdobyBzYXRpc2ZpZXMgdGhlIGNvbmRpdGlvbnM8L3NwYW4+PC9saT48L29sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIHJpZ2h0IG9mIHJlc2lkZW5jZSBwcm92aWRlZCBmb3IgaW4gcGFyYWdyYXBoIDEgc2hhbGwgZXh0ZW5kIHRvIGZhbWlseSBtZW1iZXJzIHdobyBhcmUgbm90IG5hdGlvbmFscyBvZiBhIG1lbWJlciBzdGF0ZSwgYWNjb21wYW55aW5nIG9yIGpvaW5pbmcgdGhlIFVuaW9uIGNpdGl6ZW4gaW4gdGhlIGhvc3QgbWVtYmVyIHN0YXRlLCBwcm92aWRlZCB0aGF0IHN1Y2ggVW5pb24gY2l0aXplbiBzYXRpc2ZpZXMgdGhlIGNvbmRpdGlvbnMgcmVmZXJyZWQgdG8gaW4gcGFyYWdyYXBoIDEoYSksIChiKSBvciAoYykuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Gb3IgdGhlIHB1cnBvc2VzIG9mIHBhcmFncmFwaCAxKGEpLCBhIFVuaW9uIGNpdGl6ZW4gd2hvIGlzIG5vIGxvbmdlciBhIHdvcmtlciBvciBzZWxmLWVtcGxveWVkIHBlcnNvbiBzaGFsbCByZXRhaW4gdGhlIHN0YXR1cyBvZiB3b3JrZXIgb3Igc2VsZi1lbXBsb3llZCBwZXJzb24gaW4gdGhlIGZvbGxvd2luZyBjaXJjdW1zdGFuY2VzOjwvc3Bhbj48b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5oZS9zaGUgaXMgdGVtcG9yYXJpbHkgdW5hYmxlIHRvIHdvcmsgYXMgdGhlIHJlc3VsdCBvZiBhbiBpbGxuZXNzIG9yIGFjY2lkZW50Ozwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+aGUvc2hlIGlzIGluIGR1bHkgcmVjb3JkZWQgaW52b2x1bnRhcnkgdW5lbXBsb3ltZW50IGFmdGVyIGhhdmluZyBiZWVuIGVtcGxveWVkIGZvciBtb3JlPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5oZS9zaGUgaXMgaW4gZHVseSByZWNvcmRlZCBpbnZvbHVudGFyeSB1bmVtcGxveW1lbnQgYWZ0ZXIgY29tcGxldGluZyBhIGZpeGVkLXRlcm08L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPmhlL3NoZSBlbWJhcmtzIG9uIHZvY2F0aW9uYWwgdHJhaW5pbmcuIFVubGVzcyBoZS9zaGUgaXMgaW52b2x1bnRhcmlseSB1bmVtcGxveWVkLCB0aGU8L3NwYW4+PC9saT48L29sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Qnkgd2F5IG9mIGRlcm9nYXRpb24gZnJvbSBwYXJhZ3JhcGhzIDEoZCkgYW5kIDIgYWJvdmUsIG9ubHkgdGhlIHNwb3VzZSwgdGhlIHJlZ2lzdGVyZWQgcGFydG5lciBwcm92aWRlZCBmb3IgaW4gQXJ0aWNsZSAyKDIpKGIpIGFuZCBkZXBlbmRlbnQgY2hpbGRyZW4gc2hhbGwgaGF2ZSB0aGUgcmlnaHQgb2YgcmVzaWRlbmNlIGFzIGZhbWlseSBtZW1iZXJzIG9mIGEgVW5pb24gY2l0aXplbiBtZWV0aW5nIHRoZSBjb25kaXRpb25zIHVuZGVyIDEoYykgYWJvdmUuIEFydGljbGUgMygyKSBzaGFsbCBhcHBseSB0byBoaXMvaGVyIGRlcGVuZGVudCBkaXJlY3QgcmVsYXRpdmVzIGluIHRoZSBhc2NlbmRpbmcgbGluZXMgYW5kIHRob3NlIG9mIGhpcy9oZXIgc3BvdXNlIG9yIHJlZ2lzdGVyZWQgcGFydG5lci48L3NwYW4+PC9saT48L29sPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+QXJ0IDE2PC9zcGFuPiAmbWRhc2g7IDUrIHllYXJzPC9zcGFuPiIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlVuaW9uIGNpdGl6ZW5zIHdobyBoYXZlIHJlc2lkZWQgbGVnYWxseSBmb3IgYSBjb250aW51b3VzIHBlcmlvZCBvZiBmaXZlIHllYXJzIGluIHRoZSBob3N0PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5QYXJhZ3JhcGggMSBzaGFsbCBhcHBseSBhbHNvIHRvIGZhbWlseSBtZW1iZXJzIHdobyBhcmUgbm90IG5hdGlvbmFscyBvZiBhIG1lbWJlciBzdGF0ZSBhbmQgaGF2ZSBsZWdhbGx5IHJlc2lkZWQgd2l0aCB0aGUgVW5pb24gY2l0aXplbiBpbiB0aGUgaG9zdCBtZW1iZXIgc3RhdGUgZm9yIGEgY29udGludW91cyBwZXJpb2Qgb2YgZml2ZSB5ZWFycy48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkNvbnRpbnVpdHkgb2YgcmVzaWRlbmNlIHNoYWxsIG5vdCBiZSBhZmZlY3RlZCBieSB0ZW1wb3JhcnkgYWJzZW5jZXMgbm90IGV4Y2VlZGluZyBhIHRvdGFsIG9mIHNpeCBtb250aHMgYSB5ZWFyLCBvciBieSBhYnNlbmNlcyBvZiBhIGxvbmdlciBkdXJhdGlvbiBmb3IgY29tcHVsc29yeSBtaWxpdGFyeSBzZXJ2aWNlLCBvciBieSBvbmUgYWJzZW5jZSBvZiBhIG1heGltdW0gb2YgdHdlbHZlIGNvbnNlY3V0aXZlIG1vbnRocyBmb3IgaW1wb3J0YW50IHJlYXNvbnMgc3VjaCBhcyBwcmVnbmFuY3kgYW5kIGNoaWxkYmlydGgsIHNlcmlvdXMgaWxsbmVzcywgc3R1ZHkgb3Igdm9jYXRpb25hbCB0cmFpbmluZywgb3IgYSBwb3N0aW5nIGluIGFub3RoZXIgbWVtYmVyIHN0YXRlIG9yIGEgdGhpcmQgY291bnRyeS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPk9uY2UgYWNxdWlyZWQsIHRoZSByaWdodCBvZiBwZXJtYW5lbnQgcmVzaWRlbmNlIHNoYWxsIGJlIGxvc3Qgb25seSB0aHJvdWdoIGFic2VuY2UgZnJvbSB0aGUgaG9zdCBtZW1iZXIgc3RhdGUgZm9yIGEgcGVyaW9kIGV4Y2VlZGluZyB0d28gY29uc2VjdXRpdmUgeWVhcnMuPC9zcGFuPjwvbGk+PC9vbD4iCiAgICBdLAogICAgIkFLQSI6ICJDaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIC0gSTsgQXJ0IDYgQ1JEOyBBcnQgNyBDUkQ7IEFydCAxNiBDUkQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiQ2l0aXplbnMiLAogICAgICAgICJDaXRpemVuc2hpcCIsCiAgICAgICAgIkNpdGl6ZW5zIFJpZ2h0cyBEaXJlY3RpdmUiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJGdW5kYW1lbnRhbCIsCiAgICAgICAgIkVVIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IENpdGl6ZW5zICZtZGFzaDsgQ2l0aXplbnNoaXAgJm1kYXNoOyBDaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIiwKICAgICJOQU1FIjogIkNpdGl6ZW5zIFJpZ2h0cyBEaXJlY3RpdmUgMjAwNC8zOCAtIEkiLAogICAgIk5VTUJFUiI6ICIxMzEiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNpdGl6ZW5zIFJpZ2h0cyBEaXJlY3RpdmUgMjAwNC8zOCAtIElJIiwKICAgICAgICAiRGlyZWN0aXZlIDIwMDQvMzggQXJ0cyAyNy0zMyIsCiAgICAgICAgIkRpcmVjdGl2ZSBvbiBFeGNpc2UgRHV0eSA5Mi8xMiAoQWxjb2hvbCwgVG9iYWNjbywgUGV0cm9sKSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiRGlyZWN0aXZlIiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPkFydGljbGUgMjQ8L3NwYW4+ICZtZGFzaDsgUmlnaHQgdG8gRXF1YWwgVHJlYXRtZW50PC9zcGFuPiIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlN1YmplY3QgdG8gc3VjaCBzcGVjaWZpYyBwcm92aXNpb25zIGFzIGFyZSBleHByZXNzbHkgcHJvdmlkZWQgZm9yIGluIHRoZSBUcmVhdHkgYW5kIHNlY29uZGFyeSBsYXcsIGFsbCA8c3BhbiBjbGFzcz1cImJkXCI+VW5pb24gY2l0aXplbnMgcmVzaWRpbmcgb24gdGhlIGJhc2lzIG9mIHRoaXMgRGlyZWN0aXZlPC9zcGFuPiBpbiB0aGUgdGVycml0b3J5IG9mIHRoZSBob3N0IG1lbWJlciBzdGF0ZSA8c3BhbiBjbGFzcz1cImJkXCI+c2hhbGwgZW5qb3kgZXF1YWwgdHJlYXRtZW50IHdpdGggdGhlIG5hdGlvbmFscyBvZiB0aGF0IG1lbWJlciBzdGF0ZTwvc3Bhbj4gd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgVHJlYXR5LiBUaGUgYmVuZWZpdCBvZiA8c3BhbiBjbGFzcz1cImJkXCI+dGhpcyByaWdodCBzaGFsbCBiZSBleHRlbmRlZCB0byBmYW1pbHkgbWVtYmVycyB3aG8gYXJlIG5vdCBuYXRpb25hbHMgb2YgYSBtZW1iZXIgc3RhdGU8L3NwYW4+IGFuZCB3aG8gaGF2ZSB0aGUgcmlnaHQgb2YgcmVzaWRlbmNlIG9yIHBlcm1hbmVudCByZXNpZGVuY2UuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CeSB3YXkgb2YgZGVyb2dhdGlvbiBmcm9tIHBhcmFncmFwaCAxLCB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmhvc3QgbWVtYmVyIHN0YXRlIHNoYWxsIG5vdCBiZSBvYmxpZ2VkIHRvIGNvbmZlciBlbnRpdGxlbWVudCB0byBzb2NpYWwgYXNzaXN0YW5jZSBkdXJpbmcgdGhlIGZpcnN0IHRocmVlIG1vbnRoczwvc3Bhbj4gb2YgcmVzaWRlbmNlIDxzcGFuIGNsYXNzPVwiYmRcIj5vciwgd2hlcmUgYXBwcm9wcmlhdGUsIHRoZSBsb25nZXIgcGVyaW9kPC9zcGFuPiBwcm92aWRlZCBmb3IgaW4gQXJ0aWNsZSAxNCg0KShiKSwgPHNwYW4gY2xhc3M9XCJiZFwiPm5vciBzaGFsbCBpdCBiZSBvYmxpZ2VkLCBwcmlvciB0byBhY3F1aXNpdGlvbiBvZiB0aGUgcmlnaHQgb2YgcGVybWFuZW50IHJlc2lkZW5jZSwgdG8gZ3JhbnQgbWFpbnRlbmFuY2UgYWlkIGZvciBzdHVkaWVzPC9zcGFuPiwgaW5jbHVkaW5nIHZvY2F0aW9uYWwgdHJhaW5pbmcsIGNvbnNpc3RpbmcgaW4gc3R1ZGVudCBncmFudHMgb3Igc3R1ZGVudCBsb2FucyB0byBwZXJzb25zIG90aGVyIHRoYW4gd29ya2Vycywgc2VsZi1lbXBsb3llZCBwZXJzb25zLCBwZXJzb25zIHdobyByZXRhaW4gc3VjaCBzdGF0dXMgYW5kIG1lbWJlcnMgb2YgdGhlaXIgZmFtaWxpZXMuPC9zcGFuPjwvbGk+PC9vbD4iCiAgICBdLAogICAgIkFLQSI6ICJDaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIC0gSUk7IEFydCAyNCBDUkQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiQ2l0aXplbnMiLAogICAgICAgICJDaXRpemVuc2hpcCIsCiAgICAgICAgIkNpdGl6ZW5zIFJpZ2h0cyBEaXJlY3RpdmUiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJGdW5kYW1lbnRhbCIsCiAgICAgICAgIkVVIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IENpdGl6ZW5zICZtZGFzaDsgQ2l0aXplbnNoaXAgJm1kYXNoOyBDaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIiwKICAgICJOQU1FIjogIkNpdGl6ZW5zIFJpZ2h0cyBEaXJlY3RpdmUgMjAwNC8zOCAtIElJIiwKICAgICJOVU1CRVIiOiAiMTMyIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIDIwMDQvMzggLSBJIiwKICAgICAgICAiRGlyZWN0aXZlIDIwMDQvMzggQXJ0cyAyNy0zMyIsCiAgICAgICAgIkRpcmVjdGl2ZSBvbiBFeGNpc2UgRHV0eSA5Mi8xMiAoQWxjb2hvbCwgVG9iYWNjbywgUGV0cm9sKSIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj5JbnRybzwvc3Bhbj48L3NwYW4+PGJyPkVsYWJvcmF0aW5nIG9uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAyMCBURkVVPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDIxIFRGRVU8L3NwYW4+LCB0aGlzIHBhaW50cyBpbiBkZXRhaWwgYWJvdXQgPHNwYW4gY2xhc3M9XCJiZFwiPndobzwvc3Bhbj4gaGFzIHJpZ2h0cywgPHNwYW4gY2xhc3M9XCJiZFwiPndoYXQ8L3NwYW4+IHRoZXkgYXJlLCBhbmQgd2hhdCB0aGUgPHNwYW4gY2xhc3M9XCJiZFwiPmV4Y2VwdGlvbnM8L3NwYW4+IGFyZS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPlNjb3BlPC9zcGFuPiAoQXJ0cyAyLTMpPC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImJkXCI+QXJ0IDI8L3NwYW4+IGRlZmluZXMgPHNwYW4gY2xhc3M9XCJiZFwiPmNpdGl6ZW48L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+ZmFtaWx5IG1lbWJlcjwvc3Bhbj4sIGV0Yy4gPHNwYW4gY2xhc3M9XCJiZFwiPkNpdmlsIHBhcnRuZXJzPC9zcGFuPiBhcmUgaW5jbHVkZWQgPHNwYW4gY2xhc3M9XCJpdFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5pZjwvc3Bhbj48L3NwYW4+IHRoZSBkb21lc3RpYyBsZWdpc2xhdGlvbiBvZiB0aGUgaG9zdCBzdGF0ZSB0cmVhdHMgdGhlbSBhcyBlcXVpdmFsZW50IHRvIHNwb3VzZXMuPGJyPjxzcGFuIGNsYXNzPVwiYmRcIj5BcnQgMzwvc3Bhbj4gcHJvdmlkZXMgdGhlIG5lY2Vzc2l0eSB0byBsaXZlIGluIDxzcGFuIGNsYXNzPVwiYmRcIj5hbm90aGVyIG1lbWJlciBzdGF0ZTwvc3Bhbj4gdG8gaGF2ZSB0aGVzZSByaWdodHMuPGJyPjxzcGFuIGNsYXNzPVwiYmRcIj5BcnQgMygyKShhKTwvc3Bhbj4gZXh0ZW5kcyByZXNpZGVuY2UgcmlnaHRzIHRvIG1pc2NlbGxhbmVvdXMgb3RoZXIgbm9uLUNpdGl6ZW4gZmFtaWx5IG1lbWJlcnMgd2hlcmUgJiM4MjE2O3NlcmlvdXMgaGVhbHRoIGdyb3VuZHMgc3RyaWN0bHkgcmVxdWlyZSB0aGUgcGVyc29uYWwgY2FyZSYjODIxNzsgb2YgdGhlIGNpdGl6ZW4gZmFtaWx5IG1lbWJlci4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPlJlc2lkZW5jZTwvc3Bhbj4gKEFydHMgNiwgNyBhbmQgMTYpPC9zcGFuPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5BcnQgNjwvc3Bhbj4iLAogICAgICAgICI8b2w+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+VXAgdG8gMyBtb250aHM8L3NwYW4+LCBpbiBhbnkgbWVtYmVyIHN0YXRlIDxzcGFuIGNsYXNzPVwiYmRcIj53aXRob3V0IGZvcm1hbGl0aWVzPC9zcGFuPiBvdGhlciB0aGFuIGhhdmluZyBJRC9wYXNzcG9ydC48L3NwYW4+PHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+T24gY29uZGl0aW9uIChBcnQgMTQpIG9mIG5vdCBiZWNvbWluZyA8c3BhbiBjbGFzcz1cImJkXCI+YW4gPHNwYW4gY2xhc3M9XCJpdFwiPnVucmVhc29uYWJsZTwvc3Bhbj4gYnVyZGVuPC9zcGFuPiBvbiB0aGUgc29jaWFsIGFzc3VyYW5jZSBzeXN0ZW0gb2YgdGhlIHN0YXRlICZtZGFzaDsgaS5lLiwgbm8gPHNwYW4gY2xhc3M9XCJiZFwiPmJlbmVmaXQgdG91cmlzbTwvc3Bhbj4uPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5XaXRob3V0IChBcnQgMjQoMikpIGFueSByaWdodCB0byA8c3BhbiBjbGFzcz1cImJkXCI+c29jaWFsIGFzc2lzdGFuY2U8L3NwYW4+Ljwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5BcHBsaWVzIHRvbyB0byBub24tY2l0aXplbiBmYW1pbHkgbWVtYmVycyBtYXkgYWNjb21wYW55Ljwvc3Bhbj48L2xpPjwvb2w+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkFydCA3PC9zcGFuPiIsCiAgICAgICAgIjxvbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj4zIG1vbnRoczwvc3Bhbj4gdG8gPHNwYW4gY2xhc3M9XCJiZFwiPjUgeWVhcnM8L3NwYW4+LCBpZjo8L3NwYW4+PG9sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhleSYjODIxNztyZSA8c3BhbiBjbGFzcz1cImJkXCI+ZWNvbm9taWNhbGx5IGFjdGl2ZTwvc3Bhbj4gaW4gdGhlIGhvc3Qgc3RhdGU7IDxzcGFuIGNsYXNzPVwiYmRcIj5vcjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPmhhdmUgPHNwYW4gY2xhc3M9XCJiZFwiPnN1ZmZpY2llbnQgcmVzb3VyY2VzIG5vdCB0byBiZWNvbWUgYSBidXJkZW48L3NwYW4+IG9uIHRoZSBzb2NpYWwgYXNzaXN0YW5jZSBwcm9ncmFtbWUgb2YgdGhlIGhvc3Qgc3RhdGUgPHNwYW4gY2xhc3M9XCJiZFwiPmFuZDwvc3Bhbj4gLi4uPGJyPi4uLiBoYXZlIDxzcGFuIGNsYXNzPVwiYmRcIj5jb21wcmVoZW5zaXZlIHNpY2tuZXNzIGluc3VyYW5jZTwvc3Bhbj4uIEJ1dCBpdCB3b3VsZCBiZSBkaXNwcm9wb3J0aW9uYXRlIHRvIGludGVycHJldCAmIzgyMTY7Y29tcHJlaGVuc2l2ZSYjODIxNzsgdG9vIHN0cmljdGx5ICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmF1bWJhc3Q8L3NwYW4+LCBhbmQgdGhlIGluc3VyYW5jZSBzaG91bGQgY292ZXIsIGJ1dCBuZWVkIG5vdCBuZWNlc3NhcmlseSBiZSBoZWxkIGJ5LCB0aGUgY2l0aXplbiAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlpodSBhbmQgQ2hlbjwvc3Bhbj4uPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRocmVzaG9sZHMgZm9yIGJlaW5nIGEgYnVyZGVuIGFyZSBub3QgdG8gYmUgc2V0IGJ5IG1lbWJlciBzdGF0ZXMuIEJlaW5nIGEgYnVyZGVuIGlzIGEgZmFjdCBmb3IgZWFjaCBjYXNlLjwvc3Bhbj48L2xpPjwvdWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5PciBiZSBhIGZhbWlseSBtZW1iZXIgYWNjb21wYW55aW5nIGEgY2l0aXplbiB3aG8gZnVsZmlscyAoYSksIChiKSBvciAoYykuPC9zcGFuPjwvbGk+PC9vbD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPk9yIGJlIGEgPHNwYW4gY2xhc3M9XCJiZFwiPm5vbi1DaXRpemVuPC9zcGFuPiBmYW1pbHktbWVtYmVyIGFjY29tcGFueWluZyBhIGNpdGl6ZW4gZnVsZmlsbGluZyAxKGEpLCAoYikgb3IgKGMpICZtZGFzaDsgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Wmh1IGFuZCBDaGVuPC9zcGFuPi48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPllvdSBzdGlsbCBoYXZlIHRoZSBzdGF0dXMgb2YgPHNwYW4gY2xhc3M9XCJiZFwiPndvcmtlcjwvc3Bhbj4gaWYgeW91JiM4MjE3O3JlIG5vIGxvbmdlciBlbXBsb3llZCBiZWNhdXNlIDxzcGFuIGNsYXNzPVwiYmRcIj4oYSk8L3NwYW4+IHlvdSYjODIxNztyZSBpbGwsIDxzcGFuIGNsYXNzPVwiYmRcIj4oYik8L3NwYW4+IHlvdSBnb3Qgc2Fja2VkIGFmdGVyIG1vcmUgdGhhbiBhIHllYXIgb2Ygd29yayBhbmQgaGF2ZSByZWdpc3RlcmVkIGFzIGEgam9ic2Vla2VyLiBCdXQgaWYgIDxzcGFuIGNsYXNzPVwiYmRcIj4oYyk8L3NwYW4+IHlvdXIgZml4ZWQtdGVybSBjb250cmFjdCBvZiBsZXNzIHRoYW4gYSB5ZWFyIGVuZGVkLCB0aGVuIHlvdSYjODIxNztyZSBzdGlsbCBhICYjODIxNjt3b3JrZXImIzgyMTc7IGZvciBzaXggbW9udGhzIG9ubHkuPGJyPjxzcGFuIGNsYXNzPVwiYmRcIj4oZCk8L3NwYW4+LCB5b3UgcmV0YWluIHRoZSBzdGF0dXMgb2Ygd29ya2VyIGlmIHlvdSYjODIxNztyZSBkb2luZyByZXRyYWluaW5nIDxzcGFuIGNsYXNzPVwiYmRcIj5yZWxhdGVkIHRvPC9zcGFuPiB0aGUgcHJldmlvdXMgZW1wbG95bWVudC48L3NwYW4+PC9saT48L29sPjx1bD48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIG1lbWJlciBzdGF0ZSBjYW4gcmVxdWlyZSByZWdpc3RyYXRpb24uPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFsdGhvdWdoIGl0IGNhbm5vdCByZWx5IG9uIGEgZmFpbHVyZSB0byByZWdpc3RlciB3aGVuIGEgaXRzIG93biBuYXRpb25hbCB3b3VsZCBub3QgaGF2ZSB0byBkbyBzbyAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1hcnRpbmV6IFNhbGE8L3NwYW4+PC9zcGFuPjwvbGk+PC91bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkl0IGNhbiBleHBlbCB5b3Ugb24gPHNwYW4gY2xhc3M9XCJiZFwiPnByb3BvcnRpb25hdGU8L3NwYW4+IGFuZCA8c3BhbiBjbGFzcz1cImJkXCI+Y2FzZS1zcGVjaWZpYzwvc3Bhbj4gZ3JvdW5kcy4gRS5nLiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VmFuIER1eW48L3NwYW4+LCB3aGljaCB0dXJuZWQgb24gQXJ0IDI3IGFuZCAyOC48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPlRoZSA8c3BhbiBjbGFzcz1cImJkXCI+cmlnaHQgdG8gZXF1YWwgdHJlYXRtZW50PC9zcGFuPiBvZiBBcnQuIDcgb2YgdGhlIERpcmVjdGl2ZSBiZWdpbnMgPHNwYW4gY2xhc3M9XCJiZFwiPmFmdGVyIG9uZSB5ZWFyPC9zcGFuPi48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5BcnQgMTY8L3NwYW4+IiwKICAgICAgICAiPG9sPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlBlcm1hbmVudCByZXNpZGVuY2U8L3NwYW4+IGlzIGZyb20gPHNwYW4gY2xhc3M9XCJiZFwiPmZyb20gZml2ZSB5ZWFycyBvbndhcmRzPC9zcGFuPiwgYW5kIG9mIGNvdXJzZSBhbHNvIGFwcGxpZXMgdG88L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPm5vbi1DaXRpemVuIGZhbWlseSBtZW1iZXJzLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIGNsb2NrIGlzIG5vdCByZXNldCBieSA8c3BhbiBjbGFzcz1cImJkXCI+dGVtcG9yYXJ5IGFic2VuY2VzPC9zcGFuPiBhbW91bnRpbmcgdG8gbW9yZSB0aGFuIHNpeCBtb250aHMgYSB5ZWFyIChvciBsb25nZXIgb25lcyBmb3IsIGUuZy4sIGNvbXB1bHNvcnkgbWlsaXRhcnkgc2VydmljZSwgcHJlZ25hbmN5LCBzZXJpb3VzIGlsbG5lc3MsIHN0dWR5LCAmIzgyMTY7cG9zdGluZyYjODIxNzsgaW4gYW5vdGhlciBtZW1iZXIgc3RhdGUpPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CdXQgYmVpbmcgYWJzZW50IGZyb20gdGhlIGhvc3Qgc3RhdGUgZm9yIHR3byB5ZWFycyBvbiB0aGUgdHJvdCBsYW5kcyB5b3Ugb24gYSBzbmFrZSBsZWFkaW5nIGJhY2sgdG8gQXJ0IDYuPC9zcGFuPjwvbGk+PC9vbD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPkVxdWFsIFRyZWF0bWVudDwvc3Bhbj4gKEFydCAyNCk8L3NwYW4+PGJyPkF0ICgyKSwgdGhpcyBnaXZlcyB0aHJlZSByZXN0cmljdGlvbnMgb24gZnJlZSBtb3ZlbWVudDoiLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5ObyBzb2NpYWwgYXNzaXN0YW5jZSBkdXJpbmcgZmlyc3QgdGhyZWUgbW9udGhzLjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Tm8gcmlnaHRzIHRvIHNvY2lhbCBhc3Npc3RhbmNlIGZvciBqb2Itc2Vla2Vycy48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPk5vIG9ibGlnYXRpb24gdG8gZ3JhbnQgbWFpbnRlbmFuY2UgYWlkcyBmb3Igc3R1ZGllcyAoaW5jbHVkaW5nIGZvciB2b2NhdGlvbmFsIHRyYWluaW5nKS48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIlRoZSBkaXJlY3RpdmUmIzgyMTc7cyBwcmVhbWJsZSBhc3NlcnRzIHRoYXQgdGhlIHJpZ2h0cyBncmFudGVkIGFyZSBzdWJqZWN0IHRvIG5vdCA8c3BhbiBjbGFzcz1cImJkXCI+dW5yZWFzb25hYmx5IGJ1cmRlbmluZzwvc3Bhbj4gdGhlIG1lbWJlciBzdGF0ZS4iLAogICAgICAgICJJbiB0aGUgcHJldmlvdXMgeWVhci1hbmQtYS1oYWxmIHRvIHR3by15ZWFycywgdGhlcmUgaGFzIGJlZW4gPHNwYW4gY2xhc3M9XCJiZFwiPmEgZGlzdGluY3QgY2hhbmdlIG9mIGRpcmVjdGlvbjwvc3Bhbj4gaW4gdGhlIGNhc2UgbGF3LiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJDaXRpemVucyIsCiAgICAgICAgIkNpdGl6ZW5zaGlwIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRnVuZGFtZW50YWwiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgQ2l0aXplbnMgJm1kYXNoOyBDaXRpemVuc2hpcCIsCiAgICAiTkFNRSI6ICJDaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIC0gRGlnZXN0ZWQiLAogICAgIk5VTUJFUiI6ICIxMzMiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkVVIENpdGl6ZW5zaGlwIiwKICAgICAgICAiUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyIsCiAgICAgICAgIkVmZmVjdGl2ZW5lc3MgYW5kIFNjb3BlIG9mIEFydCA0NSIsCiAgICAgICAgIk1lYW5pbmcgb2YgV29ya2VyIGluIEFydCA0NSIsCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyAtIFN1bW1hcnkiLAogICAgICAgICJKdXN0aWZpY2F0aW9ucyBmb3IgRGlzY3JpbWluYXRpb24gdW5kZXIgQXJ0IDQ1IiwKICAgICAgICAiVGhlIEludGVybmFsIE1hcmtldCBhbmQgRnJlZSBNb3ZlbWVudCIsCiAgICAgICAgIlF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCIsCiAgICAgICAgIkRpcmVjdGl2ZXMiLAogICAgICAgICJQb3R0ZWQgSGlzdG9yeSBJIC0gUGFyaXMgdG8gTWVyZ2VyIiwKICAgICAgICAiTWlncmFudCBDcmlzaXMgLSBUdXJrZXkgRGVhbCIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Fdm9sdXRpb248L3NwYW4+PC9zcGFuPjxicj5UaGUgY291cnQgb3JpZ2luYWxseSBpbnRlcnByZXRlZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMTggVEZFVTwvc3Bhbj4gb24gZXF1YWwgdHJlYXRtZW50IDxzcGFuIGNsYXNzPVwiYmRcIj5icm9hZGx5PC9zcGFuPiwgdHJlYXRpbmcgRVUgQ2l0aXplbnNoaXAgYXMgdW5zaGFrYWJsZSBhbmQgcHJpbW9yZGlhbC4gQnkgY29udHJhc3QsIHRoZSByZWNlbnQgYW5kIHVuZm9ydHVuYXRlIGFsbW9zdC10b3RhbCBib2lsaW5nIGF3YXkgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UGVybWlzc2l2ZSBDb25zZW5zdXM8L3NwYW4+IGlzIHJlZmxlY3RlZCBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EYW5vPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QWxpbWFub3ZpYzwvc3Bhbj4sIGFuZCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NY0NhcnRoeTwvc3Bhbj4gcmVpdGVyYXRlcyB0aGUgbmVlZCB0byBoYXZlIGNyb3NzZWQgYSBib3JkZXIuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5Tb2NpYWwgQXNzaXN0YW5jZTwvc3Bhbj48L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+Rm9yIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCA2IFRGRVU8L3NwYW4+IHJlc2lkZW50cyAoPCAzIG1vbnRocywgb3IgbG9uZ2VyIHdoZXJlIGFwcHJvcHJpYXRlICZtZGFzaDsgc2VlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAxNCBDUkQ8L3NwYW4+KS48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkFsc28gZnJvbSBoYXZpbmcgdG8gcHJvdmlkZSA8c3BhbiBjbGFzcz1cImJkXCI+c3R1ZGVudCBtYWludGVuYW5jZTwvc3Bhbj4gdG8gb3RoZXIgdGhhbiBwZXJtYW5lbnQgcmVzaWRlbnRzIHVuZGVyIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAxNiBDUkQ8L3NwYW4+Li4uPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPi4udVVubGVzcyB0aGV5IGNhbiBzaG93IDxzcGFuIGNsYXNzPVwiYmRcIj5zb21lIGRlZ3JlZSBvZiBpbnRlZ3JhdGlvbjwvc3Bhbj4gJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CaWRhcjwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD48L3VsPiIsCiAgICAgICAgIkhvd2V2ZXIgJm1kYXNoOyIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5DaGlsZC1yZWFyaW5nIGFsbG93YW5jZXM8L3NwYW4+IG1heSA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiBiZSB3aXRoaGVsZCBieSB0aGUgaG9zdCBzdGF0ZSBmb3IgZmFpbHVyZSB0byBjb21wbHkgd2l0aCBhIHJlcXVpcmVtZW50IDxzcGFuIGNsYXNzPVwiYmRcIj5ub3Q8L3NwYW4+IGltcG9zZWQgb24gYSBuYXRpb25hbCBvZiB0aGUgaG9zdCBzdGF0ZSAmbWRhc2g7IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPk1hcnRpbmV6IFNhbGE8L3NwYW4+Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPk1pbmltdW0tc3Vic2lzdGVuY2UgYWxsb3dhbmNlczwvc3Bhbj4sIGxpa2V3aXNlLCBtYXkgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj4gYmUgY29uZGl0aW9uYWwgb24gbmF0aW9uYWxpdHkgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5HcnplbGN6eWs8L3NwYW4+Ljwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CZWNhdXNlLCBhbHRob3VnaCBleHRlbmRpbmcgc3VjaCBiZW5lZml0cyB0byBuYXRpb25hbHMgZnJvbSBvdGhlciBtZW1iZXIgc3RhdGVzIHdvdWxkIGltcG9zZSBhIGJ1cmRlbiwgaXQgd291bGQgbm90IGJlIGFuIDxzcGFuIGNsYXNzPVwiYmRcIj51bnJlYXNvbmFibGU8L3NwYW4+IG9uZS4gSW4gYW55IGNhc2UsIG1lbWJlciBzdGF0ZXMgc2hvdWxkIHNob3cgJiM4MjE2O2EgY2VydGFpbiBkZWdyZWUgb2YgZmluYW5jaWFsIHNvbGlkYXJpdHkuJiM4MjE3OyAoISk8L3NwYW4+PC9saT48L3VsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDI0IENSRDwvc3Bhbj4gcmVzdHJpY3RzIDxzcGFuIGNsYXNzPVwiYmRcIj5zdHVkZW50IGFzc2lzdGFuY2U8L3NwYW4+IHRvIHBlcm1hbmVudCAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDE2IENSRDwvc3Bhbj4pIHJlc2lkZW50czwvc3Bhbj48dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5CdXQgc29tZW9uZSB3aXRoIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCA3IENSRDwvc3Bhbj4gcmlnaHRzIChjb25jZWl2YWJseSBldmVuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCA2IENSRDwvc3Bhbj4pLCBidXQgd2hvIHNob3dzIGEgZGVncmVlIG9mIDxzcGFuIGNsYXNzPVwiYmRcIj5pbnRlZ3JhdGlvbjwvc3Bhbj4gaW50byB0aGUgc3RhdGUsIG1heSBuZXZlcnRoZWxlc3MgYmUgZWxpZ2libGUgJm1kYXNoOyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CaWRhcjwvc3Bhbj4uPC9zcGFuPjwvbGk+PC91bD48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Kb2JzZWVrZXJzPC9zcGFuPiBhcmUgZXhjbHVkZWQgZnJvbSBkaXNjcmltaW5hdGlvbiBpbiBzb2NpYWwgYXNzaXN0YW5jZSBieSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMjQgQ1JEPC9zcGFuPiwgYnV0IG1heSBiZSBjb3ZlcmVkIGJ5IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkZyZWVkb20gb2YgTW92ZW1lbnQgLSBXb3JrZXJzPC9zcGFuPiB1bmRlciA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgNDUgVEZFVTwvc3Bhbj4uIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29sbGluczwvc3Bhbj4gZXN0YWJsaXNoZXMgdGhhdCA8c3BhbiBjbGFzcz1cImJkXCI+dGhlIGRvbGU8L3NwYW4+IG1heSBiZSBsYXdmdWxseSB3aXRoaGVsZCwgaW4gdGhlIGFic2VuY2Ugb2YgYSA8c3BhbiBjbGFzcz1cImJkXCI+Z2VudWluZSBsaW5rPC9zcGFuPiB0byB0aGUgaG9zdCBzdGF0ZSYjODIxNztzIGxhYm91ciBtYXJrZXQuPC9zcGFuPjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPkJ1dCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Jb2FubmlkaXM8L3NwYW4+IGZvdW5kIHRoYXQgdGhlIGdlbnVpbmUgbGluayBpcyA8c3BhbiBjbGFzcz1cImJkXCI+bm90IGFic2VudDwvc3Bhbj4gbWVyZWx5IGJlY2F1c2UgdGhlIHBlcnNvbiBjb21wbGV0ZWQgdGhlaXIgc2Vjb25kYXJ5IGVkdWNhdGlvbiBlbHNld2hlcmUuPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5Ob3RlIHRoYXQgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RCYjODIxNztIb29wPC9zcGFuPiwgY29uY2VybmluZyB0aGUgc2FtZSAmIzgyMTY7dGlkZW92ZXImIzgyMTc7IGFsbG93YW5jZSBhcyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Jb2FubmlkaXM8L3NwYW4+LCB0aGUgY2xhaW1hbnQgY291bGQgcmVseSBvbiBoZXIgRVUgY2l0aXplbnNoaXAgcmlnaHRzIDxzcGFuIGNsYXNzPVwiYmRcIj5hZ2FpbnN0IGhlciBvd24gY291bnRyeTwvc3Bhbj4gb24gdGhlIGZsaW1zeSBncm91bmRzIG9mIGhhdmluZyBjcm9zc2VkIGEgYm9yZGVyIGluIHRoZSBwYXN0Ljwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+VGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5nZW51aW5lIGxpbms8L3NwYW4+IGlzIGEgbWF0dGVyIGZvciBuYXRpb25hbCBhdXRob3JpdGllcywgYW5kIHRoZSBzdWNjZXNzIG9mIGEgY2xhaW0gYWxzbyBkZXBlbmRzIG9uIHdoZXRoZXIgdGhlIDxzcGFuIGNsYXNzPVwiYmRcIj5wdXJwb3NlPC9zcGFuPiBvZiB0aGUgYmVuZWZpdCBpcyBmb3IgPHNwYW4gY2xhc3M9XCJiZFwiPnNvY2lhbCBhc3Npc3RhbmNlPC9zcGFuPiBvciBpbXByb3ZpbmcgYWNjZXNzIHRvIHRoZSBqb2JzIG1hcmtldC48L3NwYW4+PC9saT48L3VsPjwvdWw+IiwKICAgICAgICAiSXQgPHNwYW4gY2xhc3M9XCJiZFwiPm1heTwvc3Bhbj4gYmUgdGhhdCB5b3UgZG9uJiM4MjE3O3QgaGF2ZSB0byBjcm9zcyBhIGJvcmRlciB0byBiZW5lZml0LCBpbiBzcGVjaWFsIGNpcmN1bXN0YW5jZXMuIiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+WmFtYnJhbm88L3NwYW4+LCB0aGUganVkZ21lbnQgZXN0YWJsaXNoaW5nIHRoaXMsIGlzIGEgcGFyb2R5IG9mIHJlZmVyZW5jZXMsIGNpdGF0aW9ucywgY29uZGl0aW9ucyBhbmQgc3RpcHVsYXRpb25zLCBhbmQgaXMgYSB3b3JsZCBhd2F5IGZyb20gdGhlIGp1cmlzcHJ1ZGVudGlhbCBib2xkbmVzcyBvZiBlYXJsaWVyIHllYXJzICZtZGFzaDsgdGhlcmUgd2FzIGEgcHJhZ21hdGljIGltcGVyYXRpdmUgaW4gdGhlIGZhY3RzLCB0aG91Z2guPC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj5DZi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWNDYXJ0aHk8L3NwYW4+LCBpbiB3aGljaCB0aGUgcmF0aW9uYWxlIGZvciA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiBmb2xsb3dpbmcgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+WmFtYnJhbm88L3NwYW4+IHdhcyB0aGF0IE1jQ2FydGh5IHdvdWxkJiM4MjE3O3QgaGF2ZSBoYWQgdG8gbGVhdmUgdGhlIEVVLCB1bmxpa2UgdGhlIGNpdGl6ZW5zIGluIFphbWJyYW5vLjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJOQU1FIjogIkVxdWFsIFRyZWF0bWVudCAtIFNvY2lhbCBBc3Npc3RhbmNlIiwKICAgICJOVU1CRVIiOiAiMTM0Igp9LAp7CiAgICAiWUVBUiI6ICIyMDAyIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFydGljbGUgMjEgVEZFVSBpcyBkaXJlY3RseSBlZmZlY3RpdmUsIGFzIGlzIHRoZSBjbGVhciBpbnRlbnRpb24gb2YgaXRzIGRpcmVjdCBhbmQgdW5hbWJpZ3VvdXMgd29yZGluZy4gSXQgY29uZmVycyByaWdodHMgZGlyZWN0bHkgb24gZXZlcnkgY2l0aXplbiwgbm90IGp1c3Qgd29ya2Vycy4gVGhlIGNvbXByZWhlbnNpdmUgc2lja25lc3MgaW5zdXJhbmNlIHJlcXVpcmVtZW50IChvZiBBcnQgNygxKShiKSBvZiBEaXJlY3RpdmUgMjAwNC8zOCkgbXVzdCBiZSBhcHBsaWVkIHByb3BvcnRpb25hdGVseS4gSXQgZG9lcyBub3QgZmFpbCBqdXN0IGJlY2F1c2UgdGhlIGluc3VyYW5jZSBtaWdodCBub3QgY292ZXIgZW1lcmdlbmN5IGNhcmUuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIkNpdGl6ZW5zIiwKICAgICAgICAiRmFtaWxpZXMiLAogICAgICAgICJDb21wcmVoZW5zaXZlIFNpY2tuZXNzIEluc3VyYW5jZSIKICAgIF0sCiAgICAiTkFNRSI6ICJCYXVtYmFzdCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRCdIb29wIiwKICAgICAgICAiRGFubyIsCiAgICAgICAgIlpodSBhbmQgQ2hlbiIsCiAgICAgICAgIlZhdHNvdXJhcyIsCiAgICAgICAgIk1jQ2FydGh5IiwKICAgICAgICAiTWFydGluZXogU2FsYSIsCiAgICAgICAgIlRyb2phbmkiLAogICAgICAgICJBbGltYW5vdmljIiwKICAgICAgICAiQmlkYXIiLAogICAgICAgICJaYW1icmFubyIsCiAgICAgICAgIkdyemVsY3p5ayIsCiAgICAgICAgIklvYW5uaWRpcyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjEzNSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiVGhlIHN0YXJ0aW5nIHBvaW50IGZvciBkaXNjdXNzaW5nIHRoZSBDb3VydCYjODIxNztzIGludGVycHJldGF0aW9uIG9mIHJpZ2h0IGFmZm9yZGVkIHRvIENpdGl6ZW5zIHVuZGVyIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRpcmVjdGl2ZSAyMDA0LzM4PC9zcGFuPi4gQSBHZXJtYW4gY2l0aXplbiwgbWFycmllZCB0byBhIENvbG9tYmlhbiwgaGFkIHR3byBjaGlsZHJlbi4gVGhleSBsaXZlZCBpbiB0aGUgVUsuIEJhdW1iYXN0IGhhZCB3b3JrZWQgZm9yIDxzcGFuIGNsYXNzPVwiYmRcIj50aHJlZTwvc3Bhbj4geWVhcnMsIHRoZW4gdHJhdmVsbGVkIHRvIEFzaWEgdG8gd29yayBmb3IgR2VybWFuIGNvbXBhbmllcy4gSGlzIENvbG9tYmlhbiB3aWZlLiBUaGUgVUsgYXV0aG9yaXRpZXMgPHNwYW4gY2xhc3M9XCJiZFwiPnJlZnVzZWQ8L3NwYW4+IHRvIHJlbmV3IHRoZWlyIHJlc2lkZW5jZS4gQnV0IHRoZXkgaGFkIHN1ZmZpY2llbnQgZnVuZHMgdW5kZXIgQXJ0IDcoMSkoYikgb2YgdGhlIERpcmVjdGl2ZSwgYW5kIGNvbXByZWhlbnNpdmUgc2lja25lc3MgaW5zdXJhbmNlLiBUaGUgVUsgYXJndWVkIGl0IHdhcyA8c3BhbiBjbGFzcz1cImJkXCI+bm90PC9zcGFuPiwgYXMgaXQgZGlkbiYjODIxNzt0IGNvdmVyIDxzcGFuIGNsYXNzPVwiYmRcIj5lbWVyZ2VuY3kgY2FyZTwvc3Bhbj4uIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJCYXVtYmFzdCBbMjAwMl0gRUNSIEktNzA5MSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkdCIiwKICAgICAgICAiREUiLAogICAgICAgICJFc3NlbnRpYWwiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy00MTMvOTkiLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgQ2l0aXplbnMgJm1kYXNoOyBGYW1pbGllcyAmbWRhc2g7IENvbXByZWhlbnNpdmUgU2lja25lc3MgSW5zdXJhbmNlIgp9LAp7CiAgICAiWUVBUiI6ICIyMDAxIiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlVuaW9uIGNpdGl6ZW5zaGlwIGlzIGRlc3RpbmVkIHRvIGJlIHRoZSBmdW5kYW1lbnRhbCBzdGF0dXMgb2YgbmF0aW9uYWxzIG9mIHRoZSBtZW1iZXIgc3RhdGVzLiBUaGV5IGNhbiByZWx5IG9uIHRoZSBub24tZGlzY3JpbWluYXRpb24gcHJvdmlzaW9uIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAxOCBURkVVPC9zcGFuPiBmb3IgYWxsIHByb3Zpc2lvbnMgb2YgRVUgbGF3LiBXaGlsc3QgdGhlIHByb3Zpc2lvbiBvZiB0aGUgYSBiZW5lZml0IChlLmcuLCB0aGUgbWluaW1leCkgdG8gY2l0aXplbnMgb2Ygb2hlciBtZW1iZXIgc3RhdGVzIG1pZ2h0IGludm9sdmUgYSBjZXJ0YWluIGRlZ3JlZSBvZiBmaW5hbmNpYWwgYnVyZGVuLCB0aGlzIHdvdWxkIG5vdCBiZSB1bnJlYXNvbmFibGUsIGFuZCB0aGF0IG1lbWJlciBzdGF0ZXMgc2hvdWxkIHNob3cgYSBjZXJ0YWluIGRlZ3JlZSBvZiBmaW5hbmNpYWwgc29saWRhcml0eS4gKCEpIiwKICAgICAgICAiU2lyIERhdmlkIEVkd2FyZCwgdGhlIHJhcHBvcnRldXIgd2hvIGRyYWZ0ZWQgdGhlIGp1ZGdtZW50LCBsYXRlciBleHBsYWluZWQgdGhlIENvdXJ0LCBpbiBlZmZlY3QsIGhhZCB0aGUgY2hvaWNlIGJldHdlZW4gdHJlYXRpbmcgdGhlIGNpdGl6ZW5zaGlwIHByb3Zpc2lvbnMgYXMgcmhldG9yaWNhbCBmbG91cmlzaGVzIGV4cHJlc3NpbmcgYSBzdGF0ZW1lbnQgb2Ygd2lsbCwgb3IgYXMgc3BlY2lmaWNhbGx5IGNvbmZlcnJpbmcgcmlnaHRzIG9uIGluZGl2aWR1YWxzLiBUaGUgY2hvaWNlIHdhcyBub3Qgb2J2aW91cyAmbWRhc2g7IGJ1dCB0aGUgY29uc2lkZXJhdGlvbiB0aGF0IGl0IHdvdWxkIGhhdmUgYmVlbiBhYnN1cmQgZm9yIHRoZSB0cmVhdHkgdG8gY29udGFpbiBzdWNoIGNsZWFyIGFuZCB1bmFtYmlndW91cyBwcm92aXNpb25zIGhhZCB0aGUgaW50ZW50aW9uIG1lcmVseSBiZWVuIHRoZSBmb3JtZXIsIHdhcyB3aGF0IHVsdGltYXRlbHkgcGVyc3VhZGVkIHRoZSBDb3VydC4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiQ2l0aXplbnMiLAogICAgICAgICJTb2NpYWwgQXNzaXN0YW5jZSIKICAgIF0sCiAgICAiTkFNRSI6ICJHcnplbGN6eWsiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkRhbm8iLAogICAgICAgICJNYXJ0aW5leiBTYWxhIiwKICAgICAgICAiVHJvamFuaSIsCiAgICAgICAgIkNvbGxpbnMiLAogICAgICAgICJCaWRhciIsCiAgICAgICAgIkFsaW1hbm92aWMiLAogICAgICAgICJWYXRzb3VyYXMiLAogICAgICAgICJEJ0hvb3AiLAogICAgICAgICJaaHUgYW5kIENoZW4iLAogICAgICAgICJNY0NhcnRoeSIsCiAgICAgICAgIklvYW5uaWRpcyIsCiAgICAgICAgIlphbWJyYW5vIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTM2IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBIEZyZW5jaCBzdHVkZW50IGxpdmluZyBpbiBCZWxnaXVtIGFwcGxpZWQgZm9yIHRoZSAmIzgyMTY7bWluaW1leCwmIzgyMTc7IGEgbWluaW11bSBzdWJzaXN0ZW5jZSBhbGxvd2FuY2UuIEJlbGdpYW4gbGF3IHByb3ZpZGVkIHRoYXQgdGhpcyB3YXMgZm9yIGFsbCBCZWxnaWFuIDxzcGFuIGNsYXNzPVwiYmRcIj5jaXRpemVuczwvc3Bhbj4gYW5kIGZvciA8c3BhbiBjbGFzcz1cImJkXCI+bm9uLUJlbGdpYW48L3NwYW4+IDxzcGFuIGNsYXNzPVwiYmRcIj53b3JrZXJzPC9zcGFuPi4iCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkdyemVsY3p5ayBbMjAwMV0gRUNSIEktNjE4MyIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkJFIiwKICAgICAgICAiRlIiLAogICAgICAgICJFeHBhbnNpb24iCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0xODQvOTkiLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgQ2l0aXplbnMgJm1kYXNoOyBTb2NpYWwgQXNzaXN0YW5jZSIKfSwKewogICAgIllFQVIiOiAiMjAwNCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJUaGUgcmVxdWlyZW1lbnRzIG9mIHN1ZmZpY2llbnQgcmVzb3VyY2VzIGFuZCBjb21wcmVoZW5zaXZlIHNpY2tuZXNzIGluc3VyYW5jZSBvZiBhcnRpY2xlIEFydGljbGUgNygxKSgyKSBvZiBEaXJlY3RpdmUgMjAwNC8zOCB3aWxsIGJlIG1ldCB3aGVuIHRoZSBub24tQ2l0aXplbiBmYW1pbHkgbWVtYmVyIGZ1bGZpbHMgdGhlbTogdGhleSBkbyBub3QgaGF2ZSB0byBiZSBwb3NzZXNzZWQgcGVyc29uYWxseSBieSB0aGUgQ2l0aXplbiwgZm9yIHRoZSByZXF1aXJlbWVudHMgdG8gYmUgbWV0LiIsCiAgICAgICAgIkZvciBpdCB0byBiZSBvdGhlcndpc2Ugd291bGQsIGluIGVmZmVjdCwgYWxsb3cgc3RhdGVzIHRvIGV4cGVsIHRoZSBub24tQ2l0aXplbiBwYXJlbnRzIG9mIENpdGl6ZW4gY2hpbGRyZW4uIEl0IHdhcyAmIzgyMTY7Y2xlYXIgdGhhdCB0aGUgcHJpbWFyeSBjYXJlciBtdXN0IGFjY29tcGFueSB0aGUgY2hpbGQsIGFuZCB0aGVyZWZvcmUsIHRoZXksIHRoZSBwYXJlbnRzLCBtdXN0IGJlIGFsbG93ZWQgdG8gcmVzaWRlLiYjODIxNzsiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiQ2l0aXplbnMiLAogICAgICAgICJSaWdodHMgT2YgRmFtaWx5IE1lbWJlcnMiLAogICAgICAgICJVbnJlYXNvbmFibGUgQnVyZGVuIiwKICAgICAgICAiQ29tcHJlaGVuc2l2ZSBIZWFsdGhjYXJlIgogICAgXSwKICAgICJOQU1FIjogIlpodSBhbmQgQ2hlbiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRGFubyIsCiAgICAgICAgIlphbWJyYW5vIiwKICAgICAgICAiTWFydGluZXogU2FsYSIsCiAgICAgICAgIk1jQ2FydGh5IiwKICAgICAgICAiQmlkYXIiLAogICAgICAgICJJb2FubmlkaXMiLAogICAgICAgICJWYXRzb3VyYXMiLAogICAgICAgICJCYXVtYmFzdCIsCiAgICAgICAgIkQnSG9vcCIsCiAgICAgICAgIlRyb2phbmkiLAogICAgICAgICJHcnplbGN6eWsiLAogICAgICAgICJBbGltYW5vdmljIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTM3IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBIGdpcmwgYm9ybiBpbiBJcmVsYW5kIHRvIENoaW5lc2UgcGFyZW50cywgd2hvJiM4MjE3O2QgbW92ZWQgdG8gdGhlIFVLIHdoZW4gbW90aGVyIHdhcyBzaXggbW9udGhzIHByZWduYW50LiBUaGUgYmFieSwgb2YgY291cnNlLCBoYWQgSXJpc2ggY2l0aXplbnNoaXAuIFRoZXkgbW92ZWQgdG8gV2FsZXMsIGFzIHNvb24gYXMgc2hlIHdhcyBib3JuLCBidXQgdGhlIEJyaXRpc2ggYXV0aG9yaXRpZXMgdG9sZCB0aGVtIHRvIHNjcmFtLiBUaGV5IHByb3Rlc3RlZCB0aGV5IHdlcmUgbm8gYnVyZGVuLCBhbmQgdGhhdCB0aGV5IHdlcmUgZmFtaWx5IG1lbWJlcnMgb2YgYW4gRVUgY2l0aXplbi4iCiAgICBdLAogICAgIkNJVEFUSU9OIjogIlpodSBhbmQgQ2hlbiBbMjAwNF0gRUNSIEktOTkyNSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkdCIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMjAwLzAyIiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IENpdGl6ZW5zICZtZGFzaDsgUmlnaHRzIE9mIEZhbWlseSBNZW1iZXJzICZtZGFzaDsgVW5yZWFzb25hYmxlIEJ1cmRlbiAmbWRhc2g7IENvbXByZWhlbnNpdmUgSGVhbHRoY2FyZSIKfSwKewogICAgIllFQVIiOiAiMTk5OCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJXaGVuIGEgbWVtYmVyIHN0YXRlIGRvZXMgbm90IHJlcXVpcmUgaXRzIG93biBuYXRpb25hbHMgdG8gcHJvZHVjZSBhIHJlc2lkZW50JiM4MjE3O3MgcGVybWl0IHRvIG9idGFpbiBhIGJlbmVmaXQsIHN1Y2ggYXMgaW4gdGhpcyBjYXNlLCBhIGNoaWxkLXJlYXJpbmcgYWxsb3dhbmNlLCBpdCBtYXkgbm90IGltcG9zZSBzdWNoIGEgcmVxdWlyZW1lbnQgb24gbmF0aW9uYWxzIG90aGVyIG1lbWJlciBzdGF0ZXMuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIkNpdGl6ZW5zIiwKICAgICAgICAiUmlnaHQgVG8gRXF1YWwgVHJlYXRtZW50IiwKICAgICAgICAiU29jaWFsIEFzc2lzdGFuY2UiCiAgICBdLAogICAgIk5BTUUiOiAiTWFydGluZXogU2FsYSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQmlkYXIiLAogICAgICAgICJEJ0hvb3AiLAogICAgICAgICJUcm9qYW5pIiwKICAgICAgICAiQWxpbWFub3ZpYyIsCiAgICAgICAgIkRhbm8iLAogICAgICAgICJWYXRzb3VyYXMiLAogICAgICAgICJDb2xsaW5zIiwKICAgICAgICAiSW9hbm5pZGlzIiwKICAgICAgICAiR3J6ZWxjenlrIiwKICAgICAgICAiWmFtYnJhbm8iLAogICAgICAgICJCYXVtYmFzdCIsCiAgICAgICAgIk1jQ2FydGh5IgogICAgXSwKICAgICJOVU1CRVIiOiAiMTM4IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBIFNwYW5pc2ggY2l0aXplbiwgcmVzaWRlbnQgaW4gR2VybWFueSwgd29ya2VkIGZvciBhIG51bWJlciBvZiB5ZWFycywgYnV0IGhhZCBuZWdsZWN0ZWQgdG8gb2J0YWluIGEgcmVzaWRlbnQmIzgyMTc7cyBwZXJtaXQuIFNoZSBzb3VnaHQgYSBjaGlsZC1yZWFyaW5nIGFsbG93YW5jZSBmcm9tIHRoZSBzdGF0ZSwgYnV0LCByZXZlcnRpbmcgc29tZXdoYXQgdG8gdHlwZSwgdGhlIHN0YXRlIHJlcGxpZWQsIGFzIGl0IHdlcmUsIDxzcGFuIGNsYXNzPVwiYmRcIj4mIzgyMjA7RGllbmUgUGFwaWVyZSBCaXR0ZSEhISYjODIyMTs8L3NwYW4+IgogICAgXSwKICAgICJDSVRBVElPTiI6ICJNYXJ0aW5leiBTYWxhIFsxOTk4XSBFQ1IgSS0yNjkxIiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiREUiLAogICAgICAgICJFUyIsCiAgICAgICAgIkV4cGFuc2lvbmlzdCIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTg1Lzk2IiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IENpdGl6ZW5zICZtZGFzaDsgUmlnaHQgVG8gRXF1YWwgVHJlYXRtZW50ICZtZGFzaDsgU29jaWFsIEFzc2lzdGFuY2UiCn0sCnsKICAgICJZRUFSIjogIjIwMDIiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiJiM4MjIwO0NvbW11bml0eSBsYXcgcHJlY2x1ZGVzIGEgbWVtYmVyIHN0YXRlIGZyb20gcmVmdXNpbmcgdG8gZ3JhbnQgdGhlIHRpZGVvdmVyIGFsbG93YW5jZSB0byBvbmUgb2YgaXRzIG5hdGlvbmFscywgYSBzdHVkZW50IHNlZWtpbmcgaGVyIGZpcnN0IGVtcGxveW1lbnQsIG9uIHRoZSBzb2xlIGdyb3VuZCB0aGF0IHRoYXQgc3R1ZGVudCBjb21wbGV0ZWQgaGVyIHNlY29uZGFyeSBlZHVjYXRpb24gaW4gYW5vdGhlciBtZW1iZXIgc3RhdGUuJiM4MjIxOyIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJDaXRpemVucyIsCiAgICAgICAgIlJpZ2h0IFRvIEVxdWFsIFRyZWF0bWVudCIsCiAgICAgICAgIlNvY2lhbCBBc3Npc3RhbmNlIgogICAgXSwKICAgICJOQU1FIjogIkQnSG9vcCIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRGFubyIsCiAgICAgICAgIkNvbGxpbnMiLAogICAgICAgICJNYXJ0aW5leiBTYWxhIiwKICAgICAgICAiQWxpbWFub3ZpYyIsCiAgICAgICAgIlZhdHNvdXJhcyIsCiAgICAgICAgIlRyb2phbmkiLAogICAgICAgICJCaWRhciIsCiAgICAgICAgIkdyemVsY3p5ayIsCiAgICAgICAgIklvYW5uaWRpcyIsCiAgICAgICAgIlpodSBhbmQgQ2hlbiIsCiAgICAgICAgIk1jQ2FydGh5IiwKICAgICAgICAiWmFtYnJhbm8iCiAgICBdLAogICAgIk5VTUJFUiI6ICIxMzkiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkFzIGluIHRoZSBsYXRlciBjYXNlIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPklvYW5uaWRpczwvc3Bhbj4sIHRoaXMgY29uY2VybmVkIHRoZSBCZWxnaWFuICYjODIxNjt0aWRlb3ZlciYjODIxNzsgYWxsb3dhbmNlLCAgZm9yIHNjaG9vbC1sZWF2ZXJzIG5vdCB5ZXQgaW4gZW1wbG95bWVudC4gQnkgY29udHJhc3QsIE1zLiBEJiM4MjE3O0hvb3Agd2FzIGhlcnNlbGYgQmVsZ2lhbiAmbWRhc2g7IGJ1dCBzaGUmIzgyMTc7ZCBkb25lIGhlciA8c3BhbiBjbGFzcz1cIml0XCI+YmFjPC9zcGFuPiBpbiBGcmFuY2UuIFNoZSB3YXMgcmVmdXNlZCB0aGUgYWxsb3dhbmNlLiBTaGUgY291bGRuJiM4MjE3O3QgcmVseSBvbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgNDU8L3NwYW4+IHJpZ2h0cyBvciB0aG9zZSBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaXRpemVuc2hpcDwvc3Bhbj4sIGFzIHNoZSB3YXMgaW4gaGVyIGhvbWUgbWVtYmVyIHN0YXRlLiBOZXZlcnRoZWxlc3MsIGEgcmVmZXJlbmNlIHdhcyBtYWRlIHRvIHRoZSBFQ0ouIiwKICAgICAgICAiSXQgd2FzIGFyZ3VlZCB0aGF0IG1lcmVseSBoYXZpbmcgPHNwYW4gY2xhc3M9XCJiZFwiPnJlc2lkZWQ8L3NwYW4+IGluIGFub3RoZXIgbWVtYmVyIHN0YXRlIHdhcyBub3QgZW5vdWdoIHRvIGJyaW5nIHRoZSByaWdodHMgb2YgRVUgY2l0aXplbnNoaXAgdG8gYmVhciwgYW5kIHRoYXQgdGhlIGVkdWNhdGlvbiBzaGUgaGFkIHJlY2VpdmVkIGluIEZyYW5jZSBkaWQgbm90IGFtb3VudCB0byB0aGUgdm9jYXRpb25hbCAoam9iLXJlbGF0ZWQpIHRyYWluaW5nIGVudmlzYWdlZCBieSB0aGUgdHJlYXR5IHByb3Zpc2lvbnMuIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJEJiM4MjE3O0hvb3AgWzIwMDJdIEVDUiBJLTYxOTEiLAogICAgIkZMQUdTIjogWwogICAgICAgICJCRSIsCiAgICAgICAgIkZSIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMjI0Lzk4IiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IENpdGl6ZW5zICZtZGFzaDsgUmlnaHQgVG8gRXF1YWwgVHJlYXRtZW50ICZtZGFzaDsgU29jaWFsIEFzc2lzdGFuY2UiCn0sCnsKICAgICJZRUFSIjogIjIwMDQiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiQXMgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RCYjODIxNztIb29wPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R3J6ZWxjenlrPC9zcGFuPiwgdGhlIG5hdGlvbmFsaXR5IHF1YWxpZnlpbmcgY3JpdGVyaWEgb2YgdGhlIEJlbGdpYW4gJiM4MjE2O3RpZGVvdmVyJiM4MjE3OyBhbGxvd2FuY2UsIGFrYSAmIzgyMTY7bWluaW1leCYjODIxNzsgd2FzIGZvdW5kIGluIHZyZWFjaCBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMTggVEZFVTwvc3Bhbj4uIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIkNpdGl6ZW5zIiwKICAgICAgICAiUmlnaHQgVG8gRXF1YWwgVHJlYXRtZW50IiwKICAgICAgICAiU29jaWFsIEFzc2lzdGFuY2UiCiAgICBdLAogICAgIk5BTUUiOiAiVHJvamFuaSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiTWFydGluZXogU2FsYSIsCiAgICAgICAgIkJpZGFyIiwKICAgICAgICAiRGFubyIsCiAgICAgICAgIkNvbGxpbnMiLAogICAgICAgICJWYXRzb3VyYXMiLAogICAgICAgICJEJ0hvb3AiLAogICAgICAgICJBbGltYW5vdmljIiwKICAgICAgICAiSW9hbm5pZGlzIiwKICAgICAgICAiR3J6ZWxjenlrIiwKICAgICAgICAiWmh1IGFuZCBDaGVuIiwKICAgICAgICAiQmF1bWJhc3QiLAogICAgICAgICJNY0NhcnRoeSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE0MCIsCiAgICAiQ0lUQVRJT04iOiAiVHJvamFuaSBbMjAwNF0gRUNSIEktNzU3MyIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkJFIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtNDU2LzAyIiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IENpdGl6ZW5zICZtZGFzaDsgUmlnaHQgVG8gRXF1YWwgVHJlYXRtZW50ICZtZGFzaDsgU29jaWFsIEFzc2lzdGFuY2UiCn0sCnsKICAgICJZRUFSIjogIjIwMDUiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiU2hvd2luZyBhIG5vbi1uZWdsaWdpYmxlIGRlZ3JlZSBvZiBpbnRlZ3JhdGlvbiBpbnRvIHRoZSBzb2NpZXR5IG9mIHRoZSBtZW1iZXIgc3RhdGUgbWF5IHF1YWxpZnkgeW91IGZvciBzb2NpYWwgYWR2YW50YWdlcyBzdWNoIGFzIHN1YnNpZGlzZWQgc3R1ZGVudCBsb2Fucy9ncmFudHMuIiwKICAgICAgICAiJiM4MjIwOzU4LiBJbiB0aGUgY2FzZSBvZiBhc3Npc3RhbmNlIGNvdmVyaW5nIHRoZSBtYWludGVuYW5jZSBjb3N0cyBvZiBzdHVkZW50cywgaXQgaXMgdGh1cyBsZWdpdGltYXRlIGZvciBhIE1lbWJlciBTdGF0ZSB0byBncmFudCBzdWNoIGFzc2lzdGFuY2Ugb25seSB0byBzdHVkZW50cyB3aG8gaGF2ZSBkZW1vbnN0cmF0ZWQgYSBjZXJ0YWluIGRlZ3JlZSBvZiBpbnRlZ3JhdGlvbiBpbnRvIHRoZSBzb2NpZXR5IG9mIHRoYXQgU3RhdGUuJiM4MjIxOyIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJDaXRpemVucyIsCiAgICAgICAgIlJpZ2h0IFRvIEVxdWFsIFRyZWF0bWVudCIsCiAgICAgICAgIlNvY2lhbCBBc3Npc3RhbmNlIgogICAgXSwKICAgICJOQU1FIjogIkJpZGFyIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDb2xsaW5zIiwKICAgICAgICAiRGFubyIsCiAgICAgICAgIlRyb2phbmkiLAogICAgICAgICJNYXJ0aW5leiBTYWxhIiwKICAgICAgICAiQWxpbWFub3ZpYyIsCiAgICAgICAgIkQnSG9vcCIsCiAgICAgICAgIlZhdHNvdXJhcyIsCiAgICAgICAgIkdyemVsY3p5ayIsCiAgICAgICAgIklvYW5uaWRpcyIsCiAgICAgICAgIkJhdW1iYXN0IiwKICAgICAgICAiWmFtYnJhbm8iLAogICAgICAgICJNY0NhcnRoeSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE0MSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBGcmVuY2ggY2l0aXplbiBoYWQgYmVlbiBsaXZpbmcgY2hleiBoZXIgR3JhbmRtYW1hIGluIExvbmRvbiBmb3IgdGhyZWUgeWVhcnMsIGFuZCB3YW50ZWQgdG8gc3R1ZHkgRWNvbm9taWNzIGF0IFVDTC4gU28gc2hlIGFwcGxpZWQgZm9yIGEgKHN1YnNpZGlzZWQpIFN0dWRlbnQgTG9hbi4gU2hlIHdhcyBsYXdmdWxseSByZXNpZGVudCwgYnV0IGVudGl0bGVkIHRvIHRoZSBsb2FuPyIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiQmlkYXIgWzIwMDVdIEVDUiBJIiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiRlIiLAogICAgICAgICJHQiIsCiAgICAgICAgIkxlYWRpbmciCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0yMDkvMDMiLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgQ2l0aXplbnMgJm1kYXNoOyBSaWdodCBUbyBFcXVhbCBUcmVhdG1lbnQgJm1kYXNoOyBTb2NpYWwgQXNzaXN0YW5jZSIKfSwKewogICAgIllFQVIiOiAiMjAwNCIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICI8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMjQgQ1JEPC9zcGFuPiBwYXJhIDIgZG9lcyBub3QgZ2l2ZSBlcXVhbCBhY2Nlc3MgdG8gYmVuZWZpdHMsIGJ1dCBhIGpvYnNlZWtlciBpcyBub25ldGhlbGVzcyBhbiBFVSBjaXRpemVuLCBhbmQgYXMgc3VjaCwgaGFzIGFjY2VzcyB0byBzb2NpYWwgYWR2YW50YWdlcy4gIEhvd2V2ZXIsIHRoZSBsYWNrIG9mIGEgZ2VudWluZSBsaW5rIGJldHdlZW4gdGhlIGNpdGl6ZW4gYW5kIHRoZSBsYWJvdXIgbWFya2V0IG9mIHRoZSBob3N0IHN0YXRlIG1heSBiZSBhIGxlZ2l0aW1hdGUgcmVhc29uIHRvIHdpdGhob2xkLCBlLmcuLCBqb2Itc2Vla2VyJiM4MjE3O3MgYWxsb3dhbmNlcy4gRXZpZGVuY2Ugb2Ygc3VjaCBhIGxpbmsgaXMgbGlrZWx5IHRvIGJlIGRlbW9uc3RyYXRlZCBieSBnZW51aW5lIGVmZm9ydHMgdG8gZmluZCB3b3JrLiBBIG1lbWJlciBzdGF0ZSBtYXkgaW1wb3NlIGEgbWluaW11bSBsZW5ndGggb2YgcmVzaWRlbmNlIGluIG9yZGVyIHRvIHF1YWxpZnksIGJ1dCB0aGlzIG11c3Qgbm90IGJlIHByb3BvcnRpb25hdGUuIEkuZS4sIGl0IGNhbm5vdCBiZSBsb25nZXIgdGhhbiB3b3VsZCBiZSBuZWNlc3NhcnkgdG8gZGVtb25zdHJhdGUgYSBnZW51aW5lIGxpbmsuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIkNpdGl6ZW5zIiwKICAgICAgICAiUmlnaHQgVG8gRXF1YWwgVHJlYXRtZW50IiwKICAgICAgICAiU29jaWFsIEFzc2lzdGFuY2UiCiAgICBdLAogICAgIk5BTUUiOiAiQ29sbGlucyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiVmF0c291cmFzIiwKICAgICAgICAiVHJvamFuaSIsCiAgICAgICAgIkRhbm8iLAogICAgICAgICJBbGltYW5vdmljIiwKICAgICAgICAiTWFydGluZXogU2FsYSIsCiAgICAgICAgIkJpZGFyIiwKICAgICAgICAiRCdIb29wIiwKICAgICAgICAiR3J6ZWxjenlrIiwKICAgICAgICAiSW9hbm5pZGlzIiwKICAgICAgICAiQmF1bWJhc3QiLAogICAgICAgICJaYW1icmFubyIsCiAgICAgICAgIlpodSBhbmQgQ2hlbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE0MiIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQW4gSXJpc2htYW4sIG1heWJlIG9yIG1heWJlIG5vdCBhIHRvZS1yYWcsIGFycml2ZWQgaW4gdGhlIFVLIGFuZCBwcm9tcHRseSB0cmllZCB0byA8c3BhbiBjbGFzcz1cImJkXCI+c2lnbiBvbjwvc3Bhbj4uIEhlIHdhcyByZWZ1c2VkIG9uIHRoZSBiYXNpcyB0aGF0IGhlIHdhcyBub3QgPHNwYW4gY2xhc3M9XCJiZFwiPmhhYml0dWFsbHkgcmVzaWRlbnQ8L3NwYW4+LiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiQ29sbGlucyBbMjAwNF0gRUNSIEkiLAogICAgIkZMQUdTIjogWwogICAgICAgICJJRSIsCiAgICAgICAgIlVLIiwKICAgICAgICAiTGVhZGluZyIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTEzOC8wMiIsCiAgICAiQ0FURUdPUlkiOiAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgJm1kYXNoOyBDaXRpemVucyAmbWRhc2g7IFJpZ2h0IFRvIEVxdWFsIFRyZWF0bWVudCAmbWRhc2g7IFNvY2lhbCBBc3Npc3RhbmNlIgp9LAp7CiAgICAiWUVBUiI6ICIyMDA1IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlJlc3RyaWN0aW5nIGVsaWdpYmlsaXR5IGZvciBhIGpvYnNlZWtlciYjODIxNztzIGFsbG93YW5jZSB0byB0aG9zZSB3aG8gaGF2ZSBjb21wbGV0ZWQgdGhlaXIgc2Vjb25kYXJ5IGVkdWNhdGlvbiBpbiB0aGUgbWVtYmVyIHN0YXRlIGlzIHRvbyBnZW5lcmFsIGFuZCBleGNsdXNpdmUsIGFuZCBvbmx5IHdlYWtseSBlZmZlY3RpdmUgYXMgYSBtZWFucyBvZiByZXN0cmljdGluZyB0aGUgYWxsb3dhbmNlIHRvIHRob3NlIHdobyBjb3VsZCByZWFzb25hYmx5IGJlIGNvbm5lY3RlZCB0byB0aGUgZW1wbG95bWVudCBtYXJrZXQuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIkNpdGl6ZW5zIiwKICAgICAgICAiUmlnaHQgVG8gRXF1YWwgVHJlYXRtZW50IgogICAgXSwKICAgICJOQU1FIjogIklvYW5uaWRpcyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ29sbGlucyIsCiAgICAgICAgIkQnSG9vcCIsCiAgICAgICAgIlZhdHNvdXJhcyIsCiAgICAgICAgIlRyb2phbmkiLAogICAgICAgICJCaWRhciIsCiAgICAgICAgIkFsaW1hbm92aWMiLAogICAgICAgICJNYXJ0aW5leiBTYWxhIiwKICAgICAgICAiRGFubyIsCiAgICAgICAgIlphbWJyYW5vIiwKICAgICAgICAiWmh1IGFuZCBDaGVuIiwKICAgICAgICAiQmF1bWJhc3QiLAogICAgICAgICJNY0NhcnRoeSIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE0MyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQmVsZ2lhbiBsZWdpc2xhdGlvbiBtYWRlIG9ubHkgdGhvc2Ugd2hvJiM4MjE3O2QgY29tcGxldGVkIHRoZWlyIHNlY29uZGFyeSBlZHVjYXRpb24gaW4gQmVsZ2l1bSBlbGlnaWJsZSB0byBjbGFpbSB0aGUgZG9sZSwgdGhlICYjODIxNjt0aWRlb3ZlciYjODIxNzsgYWxsb3dhbmNlLiBUaGUgR3JlZWsgY2xhaW1hbnQgaGFkIG5vdCBkb25lIHNvLCBhbmQgd2FzIGluZWxpZ2libGUuIEhlIGNsYWltZWQgdGhlIHJlcXVpcmVtZW50IHdhcyBpbmRpcmVjdGx5IGRpc2NyaW1pbmF0b3J5LiBTZWUgYWxzbyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EJiM4MjE3O0hvb3A8L3NwYW4+LiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiSW9hbm5pZGlzIFsyMDA1XSBFQ1IgSSIsCiAgICAiRkxBR1MiOiBbCiAgICAgICAgIkdSIiwKICAgICAgICAiQkUiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQy0yNTgvMDQiLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgQ2l0aXplbnMgJm1kYXNoOyBSaWdodCBUbyBFcXVhbCBUcmVhdG1lbnQiCn0sCnsKICAgICJZRUFSIjogIjIwMDkiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiV2hlbiBhIGpvYnNlZWtlciBjbGFpbXMgc29jaWFsIGFzc2lzdGFuY2UgaW4gYSBob3N0IG1lbWJlciBzdGF0ZSwgdGhlIHN0YXRlJiM4MjE3O3MgY29tcGV0ZW50IG5hdGlvbmFsIGF1dGhvcml0aWVzIGFuZCBjb3VydHMgbXVzdCBkZWNpZGUgbm90IG9ubHkgd2hldGhlciB0aGUgY2xhaW1hbnQgaGFzIGEgZ2VudWluZSBsaW5rIHRvIHRoZSBsYWJvdXIgbWFya2V0ICg8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db2xsaW5zPC9zcGFuPiwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SW9hbm5pZGlzPC9zcGFuPiksIGJ1dCBhbHNvIHRoZSBwdXJwb3NlICZtZGFzaDsgYW5kIHNob3VsZCB0aGUgcHVycG9zZSBiZSB0byBmYWNpbGl0YXRlIGFjY2VzcyB0byB0aGUgbGFib3VyIG1hcmtldCwgdGhlbiBpdCB3aWxsIG5vdCBiZSBzb2NpYWwgYXNzaXN0YW5jZSBhcyBtZWFudCBieSBwYXJhIDIgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDI0IENSRDwvc3Bhbj4uIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIkNpdGl6ZW5zIiwKICAgICAgICAiUmlnaHQgVG8gRXF1YWwgVHJlYXRtZW50IiwKICAgICAgICAiU29jaWFsIEFzc2lzdGFuY2UiCiAgICBdLAogICAgIk5BTUUiOiAiVmF0c291cmFzIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJCaWRhciIsCiAgICAgICAgIkNvbGxpbnMiLAogICAgICAgICJNYXJ0aW5leiBTYWxhIiwKICAgICAgICAiQWxpbWFub3ZpYyIsCiAgICAgICAgIlRyb2phbmkiLAogICAgICAgICJEYW5vIiwKICAgICAgICAiRCdIb29wIiwKICAgICAgICAiSW9hbm5pZGlzIiwKICAgICAgICAiR3J6ZWxjenlrIiwKICAgICAgICAiTWNDYXJ0aHkiLAogICAgICAgICJaYW1icmFubyIsCiAgICAgICAgIlpodSBhbmQgQ2hlbiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE0NCIsCiAgICAiQ0lUQVRJT04iOiAiVmF0c291cmFzIGV0IGFsIFsyMDA5XSBFQ1IgSS00NTg1IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiR1IiCiAgICBdLAogICAgIkNBU0VOVU0iOiAiQ1x1MjAxMTIyLzA4IiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IENpdGl6ZW5zICZtZGFzaDsgUmlnaHQgVG8gRXF1YWwgVHJlYXRtZW50ICZtZGFzaDsgU29jaWFsIEFzc2lzdGFuY2UiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgIkFwcGx5aW5nIGEgc3RyaWN0bHkgZmFpdGhmdWwgYW5kIG5vbi10ZWxlb2xvZ2ljYWwgcmVhZGluZyBvZiB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDcgQ1JEPC9zcGFuPiwgYW5kIG5vdCBvbmNlIHJlZmVycmluZyB0byBFVSBDaXRpemVuc2hpcCwgdGhlIENvdXJ0IGhlbGQgdGhhdCBmYWlsdXJlIHRvIGNvbXBseSB3aXRoIHRoZSByZXF1aXJlbWVudCB0byBoYXZlIHN1ZmZpY2llbnQgcmVzb3VyY2VzIGZvciB0aGUgY2l0aXplbiBvciB0aGUgZmFtaWx5IGludmFsaWRhdGVkIHRoZSBjbGFpbSB0byBzb2NpYWwgYXNzaXN0YW5jZS4gVGhpcyB3YXMgdG8gcHJldmVudCBhbiB1bnJlYXNvbmFibGUgYnVyZGVuIG9uIHRoZSBob3N0IHN0YXRlJiM4MjE3O3Mgc29jaWFsIHNlY3VyaXR5LiBGcmVlZG9tIG9mIG1vdmVtZW50IHNvbGVseSB0byBjbGFpbSBzb2NpYWwgc2VjdXJpdHkgaXMgbm90IGNvdmVyZWQgYnkgdGhlIGFydGljbGUuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIkNpdGl6ZW5zIiwKICAgICAgICAiUmlnaHQgVG8gRXF1YWwgVHJlYXRtZW50IiwKICAgICAgICAiU29jaWFsIEFzc2lzdGFuY2UiCiAgICBdLAogICAgIk5BTUUiOiAiRGFubyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQmlkYXIiLAogICAgICAgICJDb2xsaW5zIiwKICAgICAgICAiVmF0c291cmFzIiwKICAgICAgICAiTWFydGluZXogU2FsYSIsCiAgICAgICAgIlRyb2phbmkiLAogICAgICAgICJBbGltYW5vdmljIiwKICAgICAgICAiRCdIb29wIiwKICAgICAgICAiSW9hbm5pZGlzIiwKICAgICAgICAiR3J6ZWxjenlrIiwKICAgICAgICAiTWNDYXJ0aHkiLAogICAgICAgICJaaHUgYW5kIENoZW4iLAogICAgICAgICJaYW1icmFubyIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE0NSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQSBSb21hbmlhbiBjaXRpemVuIGFuZCBoZXIgb2Zmc3ByaW5nIGluIEdlcm1hbnkuIEEgY2FzZSBhYm91dCBjaGlsZCBiZW5lZml0cy4gVGhlIGZhdGhlciB3YXMgdW5rbm93bi4gTm90IGEgd29ya2VyLiBSZWxpZWQgb24gdGhlIHNvY2lhbCBzZWN1cml0eSBzeXN0ZW0gb2YgR2VybWFueS4gR2VybWFueSB1cmdlZCB0aGUgY291cnQgdG8gcmV2aXNpdCB0aGUgY29uZnVzaW5nIGFuZCBjb21wbGV4IGNhc2UgbGF3LiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiRGFubyBFQ0xJOkVVOkM6MjAxNDoyMzU4IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiUk8iLAogICAgICAgICJERSIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTMzMy8xMyIsCiAgICAiQ0FURUdPUlkiOiAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgJm1kYXNoOyBDaXRpemVucyAmbWRhc2g7IFJpZ2h0IFRvIEVxdWFsIFRyZWF0bWVudCAmbWRhc2g7IFNvY2lhbCBBc3Npc3RhbmNlIgp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJJbiBhbiBvcGVyYXRpdmUganVkZ21lbnQgcmljaCBpbiBjaXRhdGlvbiBvZiBkaXJlY3RpdmVzIGFuZCByZWd1bGF0aW9ucywgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGFubzwvc3Bhbj4gd2FzIGZvbGxvd2VkICZtZGFzaDsgdGhlIHJpZ2h0IHRvIHNvY2lhbCBhc3Npc3RhbmNlIGhhZCBsYXBzZWQgYWZ0ZXIgc2l4IG1vbnRocywgYXMgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDcgQ1JEPC9zcGFuPiBwcm92aWRlZC4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiQ2l0aXplbnMiLAogICAgICAgICJSaWdodCBUbyBFcXVhbCBUcmVhdG1lbnQiLAogICAgICAgICJTb2NpYWwgQXNzaXN0YW5jZSIKICAgIF0sCiAgICAiTkFNRSI6ICJBbGltYW5vdmljIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDb2xsaW5zIiwKICAgICAgICAiQmlkYXIiLAogICAgICAgICJWYXRzb3VyYXMiLAogICAgICAgICJEYW5vIiwKICAgICAgICAiTWFydGluZXogU2FsYSIsCiAgICAgICAgIlRyb2phbmkiLAogICAgICAgICJEJ0hvb3AiLAogICAgICAgICJJb2FubmlkaXMiLAogICAgICAgICJHcnplbGN6eWsiLAogICAgICAgICJNY0NhcnRoeSIsCiAgICAgICAgIlpodSBhbmQgQ2hlbiIsCiAgICAgICAgIlphbWJyYW5vIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTQ2IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJUaGUgY2xhaW1hbnQsIGEgU3dlZGUgb2YgQm9zbmlhayBvcmlnaW4sIGhhZCBoZXIgYmVuZWZpdHMgc3RvcHBlZCBieSBHZXJtYW55LiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiQWxpbWFub3ZpYyBFQ0xJOkVVOkM6MjAxNTo1OTciLAogICAgIkZMQUdTIjogWwogICAgICAgICJTRSIsCiAgICAgICAgIkRFIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtNjcvMTQiLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgQ2l0aXplbnMgJm1kYXNoOyBSaWdodCBUbyBFcXVhbCBUcmVhdG1lbnQgJm1kYXNoOyBTb2NpYWwgQXNzaXN0YW5jZSIKfSwKewogICAgIllFQVIiOiAiMjAxMSIsCiAgICAiVFlQRSI6ICJDYXNlIiwKICAgICJIRUxEIjogWwogICAgICAgICJJbiBhIG5vdGFibHktc3VjY2luY3QganVkZ21lbnQsIGFuZCBmb2xsb3dpbmcgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGVyaWNpPC9zcGFuPiwgdGhlIENvdXJ0IGZvdW5kIHRoYXQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDIwIFRGRVU8L3NwYW4+IHByZWNsdWRlcyBuYXRpb25hbCBtZWFzdXJlcyBoYXZpbmcgdGhlIGVmZmVjdCBvZiBkZXByaXZpbmcgY2l0aXplbnMgb2YgdGhlIHVuaW9uICh0aGUgY2hpbGRyZW4pIG9mIHRoZSBnZW51aW5lIGVuam95bWVudCBvZiB0aGUgc3Vic3RhbmNlIG9mIHRoZWlyIHJpZ2h0cyBhcyBFVSBjaXRpemVucy4gIDxzcGFuIGNsYXNzPVwiaWxjXCI+QXMgUHJvZi4gU2lyIEFsYW4gRGFzaHdvb2QgUUMgcHV0cyBpdCwgJiM4MjIwO3RoZSBDSkVVIGp1c3QgY2FuJiM4MjE3O3QgcmVzaXN0IGJlaW5nIEJpZyBEYWRkaWVzIHRvIHBlb3BsZSEmIzgyMjE7PC9zcGFuPiBUaGUgYnJldml0eSBvZiB0aGUganVkZ21lbnQgaXMgcGVyaGFwcyBiZXN0IHVuZGVyc3Rvb2QgYXMgYSByZXN1bHQgb2Ygbm90IHdhbnRpbmcsIGluIGVmZmVjdCwgdG8gYWxsb3cgdGhlIHBhcmVudHMgb2YgeW91bmcgRVUgY2l0aXplbnMgdG8gYmUsIGluIGVmZmVjdCByZW1vdmVkOyBkb2luZyBzbywgZXNwZWNpYWxseSB0byBhIHdhci16b25lLCBtaWdodCBiZSBzZWVuIGFzIGRlIGZhY3RvIGRlcG9ydGF0aW9uIG9mIEVVIGNpdGl6ZW5zLiIsCiAgICAgICAgIiYjODIyMDs0Mi4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDIwIFRGRVU8L3NwYW4+IHByZWNsdWRlcyBuYXRpb25hbCBtZWFzdXJlcyB3aGljaCBoYXZlIHRoZSBlZmZlY3Qgb2YgZGVwcml2aW5nIGNpdGl6ZW5zIG9mIHRoZSBVbmlvbiBvZiB0aGUgZ2VudWluZSBlbmpveW1lbnQgb2YgdGhlIHN1YnN0YW5jZSBvZiB0aGUgcmlnaHRzIGNvbmZlcnJlZCBieSB2aXJ0dWUgb2YgdGhlaXIgc3RhdHVzIGFzIGNpdGl6ZW5zIG9mIHRoZSBVbmlvbi4iLAogICAgICAgICI0My4gQSByZWZ1c2FsIHRvIGdyYW50IGEgcmlnaHQgb2YgcmVzaWRlbmNlIHRvIGEgdGhpcmQgY291bnRyeSBuYXRpb25hbCB3aXRoIGRlcGVuZGVudCBtaW5vciBjaGlsZHJlbiBpbiB0aGUgTWVtYmVyIFN0YXRlIHdoZXJlIHRob3NlIGNoaWxkcmVuIGFyZSBuYXRpb25hbHMgYW5kIHJlc2lkZSwgYW5kIGFsc28gYSByZWZ1c2FsIHRvIGdyYW50IHN1Y2ggYSBwZXJzb24gYSB3b3JrIHBlcm1pdCwgaGFzIHN1Y2ggYW4gZWZmZWN0JiM4MjIxOyIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJDaXRpemVucyIsCiAgICAgICAgIk5vIE1vdmVtZW50IgogICAgXSwKICAgICJOQU1FIjogIlphbWJyYW5vIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJNY0NhcnRoeSIsCiAgICAgICAgIlZhdHNvdXJhcyIsCiAgICAgICAgIlRyb2phbmkiLAogICAgICAgICJDb2xsaW5zIiwKICAgICAgICAiQmlkYXIiLAogICAgICAgICJEYW5vIiwKICAgICAgICAiSW9hbm5pZGlzIiwKICAgICAgICAiRCdIb29wIiwKICAgICAgICAiTWFydGluZXogU2FsYSIsCiAgICAgICAgIlpodSBhbmQgQ2hlbiIsCiAgICAgICAgIkJhdW1iYXN0IiwKICAgICAgICAiR3J6ZWxjenlrIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTQ3IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJBIENvbHVtYmlhbiBjaXRpemVuIGFuZCBoaXMgZmFtaWx5LCBsaXZpbmcgaW4gQmVsZ2l1bS4gSGlzIHdpZmUgYW5kIGVsZGVzdCBjaGlsZCB3ZXJlIENvbHVtYmlhbiwgYnV0IGhpcyB0d28geW91bmdlc3Qgd2VyZSBib3JuIGluIEJlbGdpdW0sIGhlbmNlIGNpdGl6ZW5zLiBIZSBhcHBsaWVkIGZvciBhc3lsdW0gJm1kYXNoOyBidXQgd2FzIGRlbmllZC4gSG93ZXZlciwgaGUgd2FzIG5vdCBkZXBvcnRlZCwgZHVlIHRvIHRoZSBzdGF0ZSBvZiB3YXIgaW4gQ29sb21iaWEuIEhlIGFwcGxpZWQgYWdhaW4gYW5kIHdhcyBhZ2FpbiBkZW5pZWQuIEhlIHdhcyBlbXBsb3llZCwgYSBjb250cmlidXRvciB0byB0aGUgc29jaWFsIHNlY3VyaXR5IHN5c3RlbS4gQnV0IHRoZW4gbG9zdCBoaXMgam9iIGFuZCBhcHBsaWVkIGZvciBiZW5lZml0cy4gSGUgaGFkIG5ldmVyIGNyb3NzZWQgYSBib3JkZXIgJm1kYXNoOyBpbiBlZmZlY3QsIEVVIENpdGl6ZW5zaGlwIHJpZ2h0cyB3ZXJlIGJlaW5nIGNsYWltZWQgKGJ5IHRoZSBCZWxnaWFuIGNoaWxkcmVuKSBhZ2FpbnN0IHRoZSA8c3BhbiBjbGFzcz1cImJkXCI+aG9tZTwvc3Bhbj4gbWVtYmVyIHN0YXRlLCBub3QgYSA8c3BhbiBjbGFzcz1cImJkXCI+aG9zdDwvc3Bhbj4gbWVtYmVyIHN0YXRlLiIsCiAgICAgICAgIkEgc2l0dWF0aW9uIGxpa2UgdGhpcyBoYWQgYmVlbiByZWZlcnJlZCB0byBoeXBvdGhldGljYWxseSBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EZXJpY2k8L3NwYW4+LiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiR2VyYXJkbyBSdWl6IFphbWJyYW5vIHYgT2ZmaWNlIG5hdGlvbmFsIGRlIGxcdTIwMTllbXBsb2kgWzIwMTFdIEVDUiBJLTExNzciLAogICAgIkZMQUdTIjogWwogICAgICAgICJCRSIsCiAgICAgICAgIkVVIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtMzQvMDkiLAogICAgIkNBVEVHT1JZIjogIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlICZtZGFzaDsgQ2l0aXplbnMgJm1kYXNoOyBObyBNb3ZlbWVudCIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiQXVzdHJpYW4gbmF0aW9uYWxzIHRyeWluZyB0byBhc3NlcnQgcmlnaHRzIG9uIGJlaGFsZiBvZiB0aGVpciAobm9uLUVVKSBmYW1pbHkgbWVtYmVycywgYXJndWVkIDxzcGFuIGNsYXNzPVwiYmRcIj50aGV5PC9zcGFuPiB3b3VsZCBiZSBkZXByaXZlZCBvZiB0aGUgZnVsbCBlbmpveW1lbnQgb2YgdGhlaXIgcmlnaHRzIGFzIEVVIGNpdGl6ZW5zLCBpZiwgZm9yIGV4YW1wbGUsIGFuIGFnZWQgZmF0aGVyLCBub3QgZnJvbSBhbiBFVSBjb3VudHJ5LCB3ZXJlIG5vdCBhbGxvd2VkIHRvIGpvaW4gdGhlbS4iCiAgICBdLAogICAgIkhFTEQiOiBbCiAgICAgICAgIlJlZmVycmluZyB0byBzaXR1YXRpb25zIGluIHdoaWNoIGFuIEVVIGNpdGl6ZW4gd291bGQgZWZmZWN0aXZlbHkgYmUgZm9yY2VkIG5vdCBvbmx5IHRvIGxlYWUgdGhlIG1lbWJlciBzdGF0ZSBidXQgYWxzbyB0aGUgRVUsIGZyZWUgbW92ZW1lbnQgb3VnaHQgdG8gYmUgc2VlbiBhcyBkaXNjb25uZWN0ZWQgZnJvbSBuYXRpb25hbGl0eS4iCiAgICBdLAogICAgIkNJVEFUSU9OIjogIkRlcmljaSIsCiAgICAiQ0FTRU5VTSI6ICJDLTI2Ny8wNyIsCiAgICAiTkFNRSI6ICJEZXJpY2kiLAogICAgIk5VTUJFUiI6ICIxNDgiCn0sCnsKICAgICJZRUFSIjogIjIwMTEiLAogICAgIlRZUEUiOiAiQ2FzZSIsCiAgICAiSEVMRCI6IFsKICAgICAgICAiSW4gb3JkZXIgdG8gcmVseSBvbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMTggVEZFVTwvc3Bhbj4gcmlnaHQgdG8gZXF1YWwgdHJlYXRtZW50IGFzIGEgZmFtaWx5IG1lbWJlciBvZiBhbiBFVSBjaXRpemVuLCB0aGUgRVUtY2l0aXplbiB3b3VsZCBoYXZlIHRvIGhhdmUgY3Jvc3NlZCBhIGJvcmRlciB3aXRoaW4gdGhlIEVVLiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5aYW1icmFubzwvc3Bhbj4gd2FzIGRpc3Rpbmd1aXNoZWQsIGFzIHRoZXJlIHdvdWxkIGJlIG5vIGVmZmVjdGl2ZSBvYmxpZ2F0aW9uIG9uIHRoZSBjbGFpbWFudCBvZiB0aGlzIGNhc2UgdG8gbGVhdmUgdGhlIEVVLiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJDaXRpemVucyIsCiAgICAgICAgIk5vIE1vdmVtZW50IgogICAgXSwKICAgICJOQU1FIjogIk1jQ2FydGh5IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJaYW1icmFubyIsCiAgICAgICAgIlpodSBhbmQgQ2hlbiIsCiAgICAgICAgIkJpZGFyIiwKICAgICAgICAiVHJvamFuaSIsCiAgICAgICAgIklvYW5uaWRpcyIsCiAgICAgICAgIkQnSG9vcCIsCiAgICAgICAgIkdyemVsY3p5ayIsCiAgICAgICAgIlZhdHNvdXJhcyIsCiAgICAgICAgIk1hcnRpbmV6IFNhbGEiLAogICAgICAgICJEYW5vIiwKICAgICAgICAiQWxpbWFub3ZpYyIsCiAgICAgICAgIkJhdW1iYXN0IgogICAgXSwKICAgICJOVU1CRVIiOiAiMTQ5IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJNcnMuIE1jQ2FydGh5LCBhIGR1YWwgVUsvSXJpc2ggY2l0aXplbiwgd2hvJiM4MjE3O2QgbmV2ZXIgY3Jvc3NlZCBhIGJvcmRlciB3aXRoaW4gdGhlIEVVLCBhbHdheXMgaGF2aW5nIGxpdmVkIGluIHRoZSBVSy4gSGVyIEphbWFpY2FuIGh1c2JhbmQgc291Z2h0IHRvIHJlbHkgb24gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDE4IFRGRVU8L3NwYW4+IGVxdWFsIHRyZWF0bWVudC4iCiAgICBdLAogICAgIkNJVEFUSU9OIjogIlNoaXJsZXkgTWNDYXJ0aHkgdiBTZWNyZXRhcnkgb2YgU3RhdGUgZm9yIHRoZSBIb21lIERlcGFydG1lbnQgWzIwMTFdIEVDUiBJIiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiIgogICAgXSwKICAgICJDQVNFTlVNIjogIkMtNDM0LzA5IiwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAmbWRhc2g7IENpdGl6ZW5zICZtZGFzaDsgTm8gTW92ZW1lbnQiCn0sCnsKICAgICJUWVBFIjogIkNhc2UiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkF0IHRpbWUgb2Ygd3JpdGluZyAoMTR0aCBNYXkpLCBqdWRnbWVudCBub3QgeWV0IGdpdmVuLCBidXQgdGhpcyBtYXkgY29tZSBpbiB1c2VmdWwgaW4gdGhlIGV4YW0uIgogICAgXSwKICAgICJDSVRBVElPTiI6ICJDb21taXNzaW9uIHYgVUsgQy0zMDgvMTQiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIiIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTMwOC8xNCIsCiAgICAiTkFNRSI6ICJDb21taXNzaW9uIHYgVUsgQy0zMDgvMTQiLAogICAgIkNBVEVHT1JZIjogIiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiRm9zdGVyIHYgQnJpdGlzaCBHYXMiLAogICAgICAgICJNYXJrcyBhbmQgU3BlbmNlciBQbGMgdiBDdXN0b21zIGFuZCBFeGNpc2UiLAogICAgICAgICJLZW1wZiIsCiAgICAgICAgIlNpbW1lbnRoYWwgdiBNaW5pc3RlciBmb3IgRmluYW5jZSIsCiAgICAgICAgIkh1bWJsb3QgdiBEaXJlY3RldXIgZGVzIFNlcnZpY2VzIEZpc2NhdXgiLAogICAgICAgICJUcm9qYW5pIiwKICAgICAgICAiRmFjY2luaSBEb3JpIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEZyYW5jZSAoU3BhbmlzaCBTdHJhd2JlcnJpZXMpIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IElyZWxhbmQgKElyaXNoIFNvdXZlbmlycykiLAogICAgICAgICJBbmdvbmVzZSIsCiAgICAgICAgIkxlYm9uIiwKICAgICAgICAiR3JhZiIKICAgIF0sCiAgICAiTlVNQkVSIjogIjE1MCIKfSwKewogICAgIlRZUEUiOiAiQ2FzZSBPdmVydmlld3MiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5HZW5lcmFsPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SZXluZXJzIHYgQmVsZ2l1bTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgZmFjdCB0aGF0IGEgc3RhdGUgbWF5IG5vdCBoYXZlIGltcGxlbWVudGVkIGEgbWVhc3VyZSBpbiBmdWxmaWxtZW50IG9mIGEgdHJlYXR5IG9ibGlnYXRpb24gd2l0aCBhIHByZWNpc2UgZ29hbCBkb2VzIG5vdCBtZWFuIGl0IGNhbm5vdCBiZSByZWxpZWQgdXBvbi48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+SG9yaXpvbnRhbCBFZmZlY3QgLSBEaXJlY3QgdnMuIEhvcml6b250YWwgRWZmZWN0PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EZWZyZW5uZSB2IFNBQkVOQTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5EZXBlbmRpbmcgb24gdGhlaXIgY2hhcmFjdGVyLCB0cmVhdHkgYXJ0aWNsZXMgY2FuIGhhdmUgaG9yaXpvbnRhbCA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EaXJlY3QgRWZmZWN0PC9zcGFuPiwgc3VjaCBhcyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMTU3IFRGRVU8L3NwYW4+Ljwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRGlyZWN0IEVmZmVjdCIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiRGlyZWN0IEVmZmVjdCIsCiAgICAiTkFNRSI6ICJDYXNlIE92ZXJ2aWV3cyBmb3IgRGlyZWN0IEVmZmVjdCIsCiAgICAiTlVNQkVSIjogIjE1MSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFN1cHJlbWFjeSIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBIdW1hbiBSaWdodHMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgLSBDaXRpemVucyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBEaXJlY3RpdmVzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEludGVybmFsIE1hcmtldCIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBOb24tRmlzY2FsIFJlc3RyaWN0aW9ucyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSBPdmVydmlld3MiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Tb3ZlcmVpZ250eSAtIE5hdGlvbmFsIHZzIEVVIExhdzwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RmxhbWluaW8gQ29zdGEgdiBFTkVMPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPk1lbWJlciBzdGF0ZXMgYW5kIHRoZWlyIG5hdGlvbmFscyBhcmUgYm91bmQgYnkgRVUgbGF3LCB3aGljaCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgbmF0aW9uYWwgbGF3Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5JbnRlcm5hdGlvbmFsZSBIYW5kZWxzZ2VzZWxsc2NoYWZ0PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlRoZSB2YWxpZGl0eSBvZiBVbmlvbiBtZWFzdXJlcyBpcyBub3QgYWZmZWN0ZWQgYnkgYWxsZWdhdGlvbnMgZW50ZXJ0YWluZWQgYnkgZG9tZXN0aWMgY291cnRzIHRoYXQgYnkgdGhlaXIgb3duIGxpZ2h0cywgdGhleSBhcmUgaW52YWxpZC4gTm90IGV2ZW4gZnVuZGFtZW50YWwgaXRlbXMgb2YgbmF0aW9uYWwgY29uc3RpdHV0aW9uYWwgbGF3IGhhdmUgc3VwcmVtYWN5IG92ZXIgZGlyZWN0bHkgYXBwbGljYWJsZSBwcm92aXNpb25zIG9mIFVuaW9uIGxhdy4gQ2hhbGxlbmdpbmcgbWVhc3VyZXMgYWRvcHRlZCBieSB0aGUgaW5zdGl0dXRpb25zIGluIGRvbWVzdGljIGxhdyB3b3VsZCBydWluIHRoZSB1bmlmb3JtaXR5IGFuZCBlZmZpY2FjaXR5IG9mIFVuaW9uIGxhdy48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UiAoZXggcC4gRmFjdG9ydGFtZSBMdGQpIHYgU2VjIG9mIFN0YXRlIGZvciBUcmFuc3BvcnQ8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+TmF0aW9uYWwgY291cnRzIG11c3QgZGlzYXBwbHkgbmF0aW9uYWwgbGF3IGluIGNvbmZsaWN0IHdpdGggRVUgbGF3LiBUaGUgd2lsbCBvZiBQYXJsaWFtZW50IGluIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj4xOTcyIEFjdDwvc3Bhbj4gd2FzIHRvIGxpbWl0IGl0cyBzb3ZlcmVpZ250eS4gRXZlbiB0aG91Z2ggdGhhdCB3YXNuJiM4MjE3O3QgZXhwbGljaXQgaW4gdGhlIHRyZWF0aWVzLCBpdCB3YXMgY2xlYXIgZnJvbSB0aGUganVyaXNwcnVkZW5jZSBvZiB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RUNKPC9zcGFuPi48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+U292ZXJlaWdudHkgLSBOYXRpb25hbCB2cyBFVSBMYXcgLSBJbnZvY2F0aW9uIG9mIEVVIGxhdyBieSBJbmRpdmlkdWFsczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QWRtaW5pc3RyYXppb25lIGRlbGxlIEZpbmFuemUgdiBTaW1tZW50aGFsIFNwQSAobm8gMik8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+TWVtYmVyIHN0YXRlcyBoYXZlIGEgZHV0eSB0byBzZXQgYXNpZGUgcHJvdmlzaW9ucyBvZiBuYXRpb25hbCBsYXcgd2hpY2ggYXJlIGluY29tcGF0aWJsZSB3aXRoIFVuaW9uIGxhdywgd2hpY2ggaXMgYSBkaXJlY3Qgc291cmNlIG9mIHJpZ2h0cyBhbmQgZHV0aWVzIGZvciBhbGwgdGhvc2UgdGhleSBhZmZlY3QsIHdoZXRoZXIgbWVtYmVyIHN0YXRlcyBvciBpbmRpdmlkdWFscy48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+U292ZXJlaWdudHk8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJydW5uZXI8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+Tm8gZXhwYW5zaXZlIGludGVycHJldGF0aW9uIG9mIHRoZSBjb21wZXRlbmNlcyBvZiB0aGUgRVUgYnkgdGhlIEVDSiB3b3VsZCBiZSBhY2NlcHRlZC48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlN1cHJlbWFjeSIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiU3VwcmVtYWN5IiwKICAgICJOQU1FIjogIkNhc2UgT3ZlcnZpZXdzIGZvciBTdXByZW1hY3kiLAogICAgIk5VTUJFUiI6ICIxNTIiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBIdW1hbiBSaWdodHMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgRGlyZWN0aXZlcyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBJbnRlcm5hbCBNYXJrZXQiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgLSBDaXRpemVucyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBEaXJlY3QgRWZmZWN0IiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIE5vbi1GaXNjYWwgUmVzdHJpY3Rpb25zIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIE92ZXJ2aWV3cyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlZlcnRpY2FsIERpcmVjdCBFZmZlY3Qgb2YgRGlyZWN0aXZlczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VmFuIER1eW4gdiBIb21lIE9mZmljZTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BZnRlciB0aGUgdHJhbnNjcmlwdGlvbiBkZWFkbGluZSwgaW4gY2VydGFpbiBjaXJjdW1zdGFuY2VzLCBhIGRpcmVjdGl2ZSAob3IgdGhlIGJpdHMgb2YgaXQgbm90IHlldCB0cmFuc2NyaWJlZCkgY2FuIGJlIHJlbGllZCB1cG9uIGRpcmVjdGx5LiBKdXN0IGJlY2F1c2UgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDI4OCBURkVVPC9zcGFuPiBnaXZlcyByZWd1bGF0aW9ucyBkaXJlY3QgYXBwbGljYWJpbGl0eSwgaXQgZG9lcyBub3QgZm9sbG93IHRoYXQgaW4gYWxsIGNpcmN1bXN0YW5jZXMsIGRpcmVjdGl2ZXMgY2Fubm90IGhhdmUgc2ltaWxhciBlZmZlY3RzLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5QdWJibGljbyBNaW5pc3Rlcm8gdiBSYXR0aTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIHN0YXRlIG1heSBub3QgcmVseSBvbiBpdHMgZmFpbHVyZSB0byB0cmFuc3Bvc2UgYSBkaXJlY3RpdmUuIEZyZWVzdHlsaW5nIGV1cm9qdWRnZXMgZXZlbiBnbyBzbyBmYXIgYXMgdG8gZHJhdyBhIHBhcmFsbGVsIHdpdGggZXN0b3BwZWwuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkp1cmlzZGljdGlvbmFsIEV4cGFuc2lvbiAtIFZlcnRpY2FsIERpcmVjdCBFZmZlY3Qgb2YgRGlyZWN0aXZlczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWFyc2hhbGw8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QWx0aG91Z2ggdGhlcmUgaXMgaW5kZWVkIG5vIGhvcml6b250YWwgZGlyZWN0IGVmZmVjdCBmb3IgZGlyZWN0aXZlcywgdGhlIHN0YXRlIGFzIGVtcGxveWVyIG11c3QgYmUgY29uc2lkZXJlZCBsaWFibGUgdG8gZGlyZWN0IGVmZmVjdC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Rm9zdGVyIHYgQnJpdGlzaCBHYXM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QW55IGVtYW5hdGlvbiBvZiB0aGUgc3RhdGUgaXMgc3ViamVjdCB0byB2ZXJ0aWNhbCBkaXJlY3QgZWZmZWN0LCBhcyBsb25nIGFzIGl0IGhhcyBiZWVuIG1hZGUgcmVzcG9uc2libGUgZm9yIHByb3ZpZGluZyBhIHB1YmxpYyBzZXJ2aWNlIHVuZGVyIHRoZSBjb250cm9sIG9mIHRoZSBzdGF0ZS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+SnVyaXNkaWN0aW9uYWwgRXhwYW5zaW9uIC0gSG9yaXpvbnRhbCBEaXJlY3QgRWZmZWN0IG9mIERpcmVjdGl2ZXM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkZhY2NpbmkgRG9yaTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BbHRob3VnaCB0aGVyZSBpcyBubyBob3Jpem9udGFsIGRpcmVjdCBlZmZlY3QgZm9yIGRpcmVjdGl2ZXMgKGV2ZW4gaWYgdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlZhbiBHZW5kPC9zcGFuPiBjcml0ZXJpYSBhcmUgbWV0KSwgbmF0aW9uYWwgY291cnRzIG11c3QgbXVzdCBpbnRlcnByZXQgZXhpc3RpbmcgbGF3IGZvciB0aGUgcHVycG9zZSBvZiB0aGUgZGlyZWN0aXZlLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiRGlyZWN0aXZlcyIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiRGlyZWN0aXZlcyIsCiAgICAiTkFNRSI6ICJDYXNlIE92ZXJ2aWV3cyBmb3IgRGlyZWN0aXZlcyIsCiAgICAiTlVNQkVSIjogIjE1MyIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIE5vbi1GaXNjYWwgUmVzdHJpY3Rpb25zIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFN1cHJlbWFjeSIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAtIENpdGl6ZW5zIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEludGVybmFsIE1hcmtldCIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBIdW1hbiBSaWdodHMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgRGlyZWN0IEVmZmVjdCIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSBPdmVydmlld3MiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5XaG8gaXMgQm91bmQ8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPihKb2luZWQpIEthZGkgYW5kIEFsIEJhcmFrYWF0PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkVVIEluc3RpdHV0aW9ucyBhcmUgYm91bmQgdG8gdXBob2xkIEh1bWFuIFJpZ2h0cyBhcyBwcm90ZWN0ZWQgYnkgRVUgbGF3PC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPldhY2hhdWY8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+TWVtYmVyIHN0YXRlcyBhcmUgYm91bmQgYnkgcmVxdWlyZW1lbnQgdG8gcHJvdGVjdCBmdW5kYW1lbnRhbCBIdW1hbiBSaWdodHMgd2hlbiBpbXBsZW1lbnRpbmcgRVUgbWVhc3VyZXM8L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkh1bWFuIFJpZ2h0cyIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiSHVtYW4gUmlnaHRzIiwKICAgICJOQU1FIjogIkNhc2UgT3ZlcnZpZXdzIGZvciBIdW1hbiBSaWdodHMiLAogICAgIk5VTUJFUiI6ICIxNTQiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAtIENpdGl6ZW5zIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIERpcmVjdGl2ZXMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgU3VwcmVtYWN5IiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIE5vbi1GaXNjYWwgUmVzdHJpY3Rpb25zIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEludGVybmFsIE1hcmtldCIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBEaXJlY3QgRWZmZWN0IgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIE92ZXJ2aWV3cyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkZyZWUgTW92ZW1lbnQgb2YgR29vZHMgLSBGaXNjYWwgUmVzdHJpY3Rpb25zIC0gIEFydCAzMCBURkVVIC0gQ3VzdG9tcyBEdXRpZXM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbW1pc3Npb24gdiBJdGFseSAoU3RhdGlzdGljYWwgRGF0YSBMZXZ5KTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BbnkgcGVjdW5pYXJ5IGNoYXJnZSBpbXBvc2VkIG9uIGdvb2RzIGJlY2F1c2UgdGhleSBoYXZlIGNyb3NzZWQgYSBib3JkZXIsIGhvd2V2ZXIgc21hbGwsIGFuZCBpcnJlc3BlY3RpdmUgb2YgdGhlIHB1cnBvc2Ugb2YgdGhlIGNoYXJnZSwgaXMgcHJvaGliaXRlZCBieSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMzAgVEZFVTwvc3Bhbj4gYXMgYSBjaGFyZ2Ugb2YgZXF1aXZhbGVudCBlZmZlY3QgdG8gYSBjdXN0b21zIGR1dHkuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkZyZWUgTW92ZW1lbnQgb2YgR29vZHMgLSBGaXNjYWwgUmVzdHJpY3Rpb25zIC0gQXJ0IDMwIFRGRVUgLSBDaGFyZ2VzIGZvciBTZXJ2aWNlcyBSZW5kZXJlZDwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q2Fkc2t5PC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgc3lzdGVtIG9mIGNvbXB1bHNvcnkgaW5zcGVjdGlvbi9jZXJ0aWZpY2F0aW9uIG9mIGdvb2RzIGltcG9ydGVkIGludG8gYSBtZW1iZXIgc3RhdGUsIGZvciB3aGljaCBhIGNoYXJnZSBpcyBsZXZpZWQsIGlzIG5vdCBleGVtcHQgZnJvbSBwcm9oaWJpdGlvbiB1bmRlciBBcnQgMzAganVzdCBiZWNhdXNlIHRoZSByZWNpcGllbnQgb2YgdGhlIGNoYXJnZSBpcyBub3QgaXRzZWxmIGEgbGltYiBvZiB0aGUgc3RhdGUuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkZyZWUgTW92ZW1lbnQgb2YgR29vZHMgLSBGaXNjYWwgUmVzdHJpY3Rpb25zIC0gIEFydCAzMCBURkVVIC0gQ2hhcmdlcyBmb3IgU2VydmljZXMgUmVuZGVyZWQ8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJyZXNjaWFuaSB2IEl0YWxpYW4gRmluYW5jZSBBZG1pbmlzdHJhdGlvbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIGNoYXJnZSBsZXZpZWQgYXQgdGhlIGJvcmRlciwgd2hhdGV2ZXIgaXQmIzgyMTc7cyBjYWxsZWQgYW5kIGhvd2V2ZXIgaXQmIzgyMTc7cyBhcHBsaWVkLCBkb2VzIG5vdCBlc2NhcGUgdGhlIGFtYml0IG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAzMCBURkVVPC9zcGFuPiYjODIxNjtzIHByb2hpYml0aW9uIGJ5IGp1c3RpZmljYXRpb24gb24gZ3JvdW5kcyBvZiBwdWJsaWMgaGVhbHRoICZtZGFzaDsgZXZlbiBpZiB0aGF0IGp1c3RpZmljYXRpb24gaXMgcmVhc29uYWJsZSBhbmQgaW4gdGhlIHB1YmxpYyBpbnRlcmVzdC48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RnJlZSBNb3ZlbWVudCBvZiBHb29kcyAtIEZpc2NhbCBSZXN0cmljdGlvbnMgLSAgQXJ0IDMwIFRGRVUgLSBDaGFyZ2VzIGZyb20gT2JsaWdhdGlvbnMgdW5kZXIgRVUgTGF3PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5CYXVodWlzIHYgTmV0aGVybGFuZHM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+Q2hhcmdlcyBoYXZpbmcgZXF1aXZhbGVudCBlZmZlY3Qgb2YgY3VzdG9tcyBkdXRpZXMsIHdoaWNoIHdvdWxkIGJlIHByb2hpYml0ZWQgYnkgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDMwIFRGRVU8L3NwYW4+IGlmIHRoZXkgd2VyZSBpbXBvc2VkIGJ5IG1lbWJlciBzdGF0ZXMsIGRvIG5vdCBpbmZyaW5nZSBBcnQgMzAgaWYgdGhleSBhcmUgcHJlc2NyaWJlZCBieSBFVSBsYXcsIGJlY2F1c2UgdGhleSBhcHBseSB0byBhbGwsIGVxdWFsbHkuIFRoZXJlZm9yZSwgdGhlIGNvbXB1bHNvcnkgY2hhcmdlIGluIHF1ZXN0aW9uLCBmb3IgdmV0ZXJpbmFyeSBpbnNwZWN0aW9ucyBmb3IgcHVibGljIGhlYWx0aCBwdXJwb3NlcywgaXMgbm90IGEgYnJlYWNoIG9mIEFydCAzMC48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RnJlZSBNb3ZlbWVudCBvZiBHb29kcyAtIEZpc2NhbCBSZXN0cmljdGlvbnMgLSAgQXJ0IDMwIFRGRVUgLSBDaGFyZ2VzIGZyb20gT2JsaWdhdGlvbnMgdW5kZXIgSW50ZXJuYXRpb25hbCBMYXc8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbW1pc3Npb24gdiBUaGUgTmV0aGVybGFuZHM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QXMgcGVyIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJhdWh1aXM8L3NwYW4+LCBjaGFyZ2VzIGVxdWl2YWxlbnQgdG8gY3VzdG9tcyBkdXRpZXMgYXJlIG5vdCBwcm9oaWJpdGVkIGJ5IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAzMCBURkVVPC9zcGFuPiBpZiB0aGV5IGFyZSBpbXBvc2VkIGluIHB1cnN1aXQgb2YgYSByZXF1aXJlbWVudCB1bmRlciBJbnRlcm5hdGlvbmFsIGxhdy48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RnJlZSBNb3ZlbWVudCBvZiBHb29kcyAtIEZpc2NhbCBSZXN0cmljdGlvbnMgLSAgQXJ0IDExMCBURkVVIC0gRmlzY2FsIEF1dG9ub215IG9mIE1lbWJlciBTdGF0ZXM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbW1pc3Npb24gdiBGcmFuY2U8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QWx0aG91Z2ggbWVtYmVyIHN0YXRlcyBoYXZlIGZpc2NhbCBhdXRvbm9teSwgYW5kIGNhbiBsZXZ5IHRoZSB0YXhlcyB0aGV5IHBsZWFzZSwgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDExMCBURkVVPC9zcGFuPiBoYXMgYW4gb2JsaWdhdGlvbiBvZiBmaXNjYWwgbmV1dHJhbGl0eSwgaS5lLiwgdGhlIG9yaWdpbiBvZiBwcm9kdWN0cyBtdXN0IGJlIGlycmVsZXZhbnQgdG8gdGhlIGltcG9zaXRpb24gb2YgdGhlIHRheC48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RnJlZSBNb3ZlbWVudCBvZiBHb29kcyAtIEZpc2NhbCBSZXN0cmljdGlvbnMgLSAgQXJ0IDMwIFRGRVUgLSBBcnQgMTEwIFRGRVU8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNhcG9sb25nbyB2IE1heWE8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+RmluYW5jaWFsIGNoYXJnZXMgYXBwbGllZCB3aXRoaW4gYSBnZW5lcmFsIHN5c3RlbSBvZiBpbnRlcm5hbCB0YXhhdGlvbiwgd2hpY2ggYXBwbHkgc3lzdGVtYXRpY2FsbHkgdG8gZG9tZXN0aWMgYW5kIGltcG9ydGVkIHByb2R1Y3RzIGFjY29yZGluZyB0byB0aGUgc2FtZXMgY3JpdGVyaWEsIGFyZSBub3QgdG8gYmUgY29uc2lkZXJlZCBhcyBwcm9oaWJpdGVkIGJ5IDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAzMCBURkVVPC9zcGFuPi4gVW5sZXNzICZtZGFzaDsgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSBtb25leSBsZXZpZWQgc3VwcG9ydHMgZG9tZXN0aWMgcHJvZHVjdHMuIEZvciB0aGVtLCBpdCBlZmZlY3RpdmVseSBvZmZzZXQgc29tZSBvZiB0aGUgY2hhcmdlICZtZGFzaDsgYSBiZW5lZml0IGFuIGltcG9ydCBzdWJqZWN0IHRvIHRoZSBjaGFyZ2Ugd291bGQgbm90IGhhdmUgcmVjZWl2ZWQuIFNob3VsZCB0aGF0IGJlIHRoZSBjYXNlLCB0aGUgY2hhcmdlIG1heSBpbmRlZWQgYmUgcHJvaGliaXRlZCB1bmRlciBBcnQgMzAuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkZyZWUgTW92ZW1lbnQgb2YgR29vZHMgLSBGaXNjYWwgUmVzdHJpY3Rpb25zIC0gQXJ0IDExMCBURkVVPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Cb2JpZSBHZXRyYWVua2V2ZXJ0cmllYiB2IEhhdXB0em9sbGFtdCBBYWNoZW4tTm9yZDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMTEwIFRGRVU8L3NwYW4+IGlzIGluZnJpbmdlZCB3aGVuIHRoZSBydWxlcyBieSB3aGljaCBhIHRheCBpcyBjYWxjdWxhdGVkIGRpZmZlciB3aGVuIGFwcGxpZWQgdG8gaW1wb3J0ZWQgYXMgdG8gZG9tZXN0aWMgcHJvZHVjdHMsIGV2ZW4gaWYgdGhlIGRpZmZlcmVudGlhbCBlZmZlY3QgaXMgdmVyeSBzbWFsbCBpbiBwcmFjdGljZSAmbWRhc2g7IGFuZCBldmVuIGlmIHRoZSByZXN1bHRpbmcgZGlzY3JpbWluYXRpb24gaXMgYWdhaW5zdCBkb21lc3RpYyBwcm9kdWNlcnMuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkZyZWUgTW92ZW1lbnQgb2YgR29vZHMgLSBGaXNjYWwgUmVzdHJpY3Rpb25zIC0gQXJ0IDExMCBURkVVIC0gTWVhbmluZyBvZiBTaW1pbGFyaXR5PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Kb2huIFdhbGtlciB2IE1pbmlzdGVyaWV0IGZvciBTa2F0dGVyPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPldoZW4gZGVjaWRpbmcgd2hldGhlciBvbmUgdGhpbmcgaXMgc2ltaWxhciB0byBhbm90aGVyIGZvciB0aGUgcHVycG9zZXMgb2YgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDExMCBURkVVPC9zcGFuPiwgaXQgbWF5IGJlIHVzZWZ1bCB0byBlbXBsb3kgdGhlIGNvbW1vbi1zZW5zZSB0ZXN0IG9mIHdoZXRoZXIgdGhlIG1hbiBvbiB0aGUgQ29wZW5oYWdlbiB0cm9sbGV5YnVzIHdvdWxkIGFjY2VwdCB0aGUgb25lIHRoaW5nIGFzIGEgc3Vic3RpdHV0ZSBmb3IgdGhlIG90aGVyLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5GcmVlIE1vdmVtZW50IG9mIEdvb2RzIC0gRmlzY2FsIFJlc3RyaWN0aW9ucyAtICBBcnQgMTEwIFRGRVU8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkh1bWJsb3QgdiBEaXJlY3RldXIgZGVzIFNlcnZpY2VzIEZpc2NhdXg8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSB0YXggbWVhc3VyZSB3aGljaCwgaW4gcHJhY3RpY2UsIGFwcGxpZXMgY2hpZWZseSB0byBpbXBvcnRlZCBwcm9kdWN0cywgaXMgY29udHJhcnkgdG8gdGhlIHByb2hpYml0aW9uIG9uIGluZGlyZWN0IHRheCBkaXNjcmltaW5hdGlvbiBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMTEwIFRGRVU8L3NwYW4+IHBhcmEgMS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RnJlZSBNb3ZlbWVudCBvZiBHb29kcyAtIEZpc2NhbCBSZXN0cmljdGlvbnMgLSBBcnQgMTEwIFRGRVUgLSBDb21wZXRpbmcgUHJvZHVjdHM8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbW1pc3Npb24gdiBVSyAoV2luZSBhbmQgQmVlcik8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+TmF0aW9uYWwgbGVnaXNsYXRpb24gbWF5IG5vdCBjcnlzdGFsbGl6ZSBjb25zdW1lciBoYWJpdHMuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPkZyZWUgTW92ZW1lbnQgb2YgR29vZHMgLSBGaXNjYWwgUmVzdHJpY3Rpb25zIC0gQXJ0IDExMCBURkVVIC0gUHVibGljIFBvbGljeSBKdXN0aWZpY2F0aW9uPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DaGVtaWFsIEZhcm1hY2V1dGljaSB2IERBRjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5JZiBhbiBpbnRlcm5hbCB0YXgsIG9mIGVxdWFsIGFwcGxpY2F0aW9uIHRvIGRvbWVzdGljIHByb2R1Y2VycyBhbmQgaW1wb3J0cywgaGFzIGEgZGlzY3JpbWluYXRvcnkgZWZmZWN0IHVuZGVyIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAxMTAgVEZFVTwvc3Bhbj4gcGFyYSAxLCBidXQgdGhlIGVjb25vbWljIHBvbGljeSBnb2FsIGl0IHB1cnN1ZXMgaXMgY29tcGF0aWJsZSB3aXRoIEVVIGxhdzsgYW5kIGlmIHRoZSBkZXRhaWwgb2YgdGhlIHRheCBjb250YWlucyBubyBkaXJlY3Qgb3IgaW5kaXJlY3QgZGlzY3JpbWluYXRpb24sIHRoZW4gaXQgbWF5IGJlIGFuIGV4Y2VwdGlvbi48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+RnJlZSBNb3ZlbWVudCBvZiBHb29kcyAtIEZpc2NhbCBSZXN0cmljdGlvbnMgLSBEaXJlY3RpdmUgb24gRXhjaXNlIER1dHkgLSBDb2xsZWN0aXZlIFB1cmNoYXNlIC0gUGVyc29uYWwgVXNlIG9yIEJ1c2luZXNzIEltcG9ydDwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Sm91c3RyYTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5JdCB3b3VsZCBiZSBhYnN1cmQgdG8gcmVxdWlyZSBpbXBvcnRlcnMgZm9yIHBlcnNvbmFsIHVzZSAodW5kZXIgQXJ0aWNsZSA3IG9mIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EaXJlY3RpdmUgb24gRXhjaXNlIER1dHk8L3NwYW4+KSB0byBjYXJyeSB0aGUgZ29vZHMgYWNyb3NzIHRoZSBib3JkZXIgdGhlbXNlbHZlcy4gVGhhdCB3b3VsZCBiZSBhZ2FpbnN0IHRoZSBzcGlyaXQgb2YgZW5jb3VyYWdpbmcgZnJlZSBtb3ZlbWVudC4gVGhlcmUgbWF5LCBob3dldmVyLCBiZSBhIGdhcCBiZXR3ZWVuIHByaXZhdGUgaW1wb3J0cyB1bmRlciBBcnQgNyBhbmQgY29tbWVyY2lhbCBpbXBvcnRzIHVuZGVyIEFydCA4LiBCdXQgdGhhdCBnYXAgaXMgbm90IGluaGFiaXRlZCBieSBhIGNvbGxlY3RpdmUgcHVyY2hhc2Ugb24gd2hpY2ggbm8gcHJvZml0IGlzIG1hZGUuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJJbnRlcm5hbCBNYXJrZXQiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIkludGVybmFsIE1hcmtldCIsCiAgICAiTkFNRSI6ICJDYXNlIE92ZXJ2aWV3cyBmb3IgSW50ZXJuYWwgTWFya2V0IiwKICAgICJOVU1CRVIiOiAiMTU1IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgTm9uLUZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgLSBDaXRpemVucyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBTdXByZW1hY3kiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgRGlyZWN0aXZlcyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBEaXJlY3QgRWZmZWN0IiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEh1bWFuIFJpZ2h0cyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSBPdmVydmlld3MiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5RdWFudGl0YXRpdmUgUmVzdHJpY3Rpb25zIC0gQXJ0IDM0IFRGRVUgLSBGaXJzdCBQaGFzZTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UHJvY3VyZXVyIGR1IFJvaSB2IERhc3NvbnZpbGxlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPiYjODIyMDs1LiBBbGwgdHJhZGluZyBydWxlcyBlbmFjdGVkIGJ5IE1lbWJlciBTdGF0ZXMgd2hpY2ggYXJlIGNhcGFibGUgb2YgaGluZGVyaW5nLCBkaXJlY3RseSBvciBpbmRpcmVjdGx5LCBhY3R1YWxseSBvciBwb3RlbnRpYWxseSwgaW50cmEtQ29tbXVuaXR5IHRyYWRlIGFyZSB0byBiZSBjb25zaWRlcmVkIGFzIG1lYXN1cmVzIGhhdmluZyBhbiBlZmZlY3QgZXF1aXZhbGVudCB0byBxdWFudGl0YXRpdmUgcmVzdHJpY3Rpb25zLiYjODIyMTs8L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29tbWlzc2lvbiB2IFVLIChVSFQgTWlsayk8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBtZW1iZXIgc3RhdGUgbWF5IG5vdCByZXF1aXJlIGFuIGltcG9ydCBsaWNlbnNlIGZvciBnb29kcyBmcm9tIG90aGVyIG1lbWJlciBzdGF0ZXMuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkNvbW1pc3Npb24gdiBJcmVsYW5kIChJcmlzaCBTb3V2ZW5pcnMpPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkNvbnN1bWVyIHByb3RlY3Rpb24gaXMgbm90IGEgdmFsaWQgZGVyb2dhdGlvbiBmcm9tIHRoZSBwcm9oaWJpdGlvbiBvbiBRUnMgYW5kIE1FUVJzLCBvZiB3aGljaCB0aGUgY29tcGxldGUgbGlzdCAoaXMgcHJvdmlkZWQgYnkgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDM2IFRGRVU8L3NwYW4+Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TaW1tZW50aGFsIHYgTWluaXN0ZXIgZm9yIEZpbmFuY2U8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+Q29tcHVsc29yeSBzeXN0ZW1hdGljIG9yIHNwb3JhZGljIHZldGVyaW5hcnkgaW5zcGVjdGlvbnMgY2FycmllZCBvdXQgb24gbGl2ZXN0b2NrIGFtb3VudGVkIHRvIGFuIG1lYXN1cmUgb2YgZXF1aXZhbGVudCBlZmZlY3QgdG8gYSBxdWFudGl0YXRpdmUgcmVzdHJpY3Rpb24uIEdpdmVuIHRoZSByZXF1aXJlbWVudCB0aGF0IGltcG9ydGVycyBvZiBsaXZlc3RvY2sgY2FycnkgY2VydGlmaWNhdGVzIGF0dGVzdGluZyB0byB0aGUgaGVhbHRoIG9mIHRoZSBhbmltYWxzLCBzdWNoIGEgbWVhc3VyZSB3YXMgZGlzcHJvcG9ydGlvbmF0ZSwgYW5kIGhhZCBubyA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMzYgVEZFVTwvc3Bhbj4gZGVmZW5jZS48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29tbWlzc2lvbiB2IElyZWxhbmQgKEJ1eSBJcmlzaCBjYW1wYWlnbik8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBwdWJsaWNpdHkgY2FtcGFpZ24gb3JjaGVzdHJhdGVkIGJ5IGEgbmF0aW9uIHN0YXRlIHRvIGVuY291cmFnZSBpdHMgY2l0aXplbnMgdG8gZGlzY3JpbWluYXRlIGluIGZhdm91ciBvZiBkb21lc3RpY2FsbHkgcHJvZHVjZWQgcHJvZHVjdHMgaXMgYSBtZWFzdXJlIG9mIGVxdWl2YWxlbnQgZWZmZWN0IHRvIGEgcXVhbnRpdGF0aXZlIHJlc3RyaWN0aW9uLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db21taXNzaW9uIHYgRnJhbmNlIChTcGFuaXNoIFN0cmF3YmVycmllcyk8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QSBtZW1iZXIgc3RhdGUgaXMgbGlhYmxlIGZvciBhIGJyZWFjaCBvZiBBcnQgMzQgaWYgaXQgZG9lcyBub3QgcHJldmVudCBvciBzdG9wIGEgYmxvY2thZGUgdGFyZ2V0aW5nIHNwZWNpZmljIGltcG9ydHMuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlF1YW50aXRhdGl2ZSBSZXN0cmljdGlvbnMgLSBOYXRpb25hbCBBdXRvbm9teSBSZWNvZ25pc2VkPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db25lZ2F0ZSBMdGQgdiBDb21taXNzaW9uZXJzIG9mIEN1c3RvbXMgYW5kIEV4Y2lzZTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5iYWNrZ3JvdW5kOjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiTm9uLUZpc2NhbCBSZXN0cmljdGlvbnMiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIk5vbi1GaXNjYWwgUmVzdHJpY3Rpb25zIiwKICAgICJOQU1FIjogIkNhc2UgT3ZlcnZpZXdzIGZvciBOb24tRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAiTlVNQkVSIjogIjE1NiIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEh1bWFuIFJpZ2h0cyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBJbnRlcm5hbCBNYXJrZXQiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUgLSBDaXRpemVucyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBEaXJlY3QgRWZmZWN0IiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIERpcmVjdGl2ZXMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgU3VwcmVtYWN5IiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIgogICAgXQp9LAp7CiAgICAiVFlQRSI6ICJDYXNlIE92ZXJ2aWV3cyIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPldvcmtlcnMgLSBFZmZlY3Qgb2YgQXJ0aWNsZSA0NSBURkVVPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5XYWxyYXZlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlJ1bGVzIHJlZ3VsYXRpbmcgZ2FpbmZ1bCBlbXBsb3ltZW50IGluIGEgY29sbGVjdGl2ZSBtYW5uZXIgaW1wb3NlZCBieSBub24tcHVibGljIGJvZGllcyBidXQgZGlzY3JpbWluYXRpbmcgb24gdGhlIGJhc2lzIG9mIG5hdGlvbmFsaXR5IGZhbGwgZm91bCBvZiBBcnQgNDUoMikgVEZFVSAmbWRhc2g7IHdoaWNoIGlzLCB0aGVyZWZvcmUsIGhvcml6b250YWxseSBlZmZlY3RpdmUuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJvc21hbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5Db25maXJtaW5nIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPldhbHJhdmU8L3NwYW4+LCBhIHJ1bGUgc2V0IGJ5IGEgYm9keSBnb3Zlcm5pbmcgdGhlIG9yZ2FuaXNhdGlvbiBvZiBlbXBsb3ltZW50IGluIGEgc3BvcnQgKEZJRkEpLCBoYXZpbmcgdGhlIGVmZmVjdCBvZiBkaXNjcmltaW5hdGlvbiwgZXZlbiBpZiBuZWl0aGVyIGRpcmVjdCBub3IgaW5kaXJlY3QsIHZpb2xhdGVzIEFydCA0NSBpZiBpdCBpbXBlZGVzIGFjY2VzcyB0byB0aGUgbGFib3VyIG1hcmtldC4gIE5ldmVydGhlbGVzcywgYSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5SdWxlIG9mIFJlYXNvbjwvc3Bhbj4gYXBwcm9hY2ggYWtpbiB0byA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5DYXNzaXMgZGUgRGlqb248L3NwYW4+IG1heSBqdXN0aWZ5IHN1Y2ggcmVzdHJpY3Rpb25zLCBpZiB0aGUgbWVhc3VyZXMgcHVyc3VlZCBsZWdpdGltYXRlIGFpbXMgd2l0aCBwcmVzc2luZyByZWFzb25zIG9mIHB1YmxpYyBpbnRlcmVzdC48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QW5nb25lc2U8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QXJ0IDQ1IGlzIGRyYWZ0ZWQgaW4gZ2VuZXJhbCB0ZXJtcywgYW5kIGlzIG5vdCBzcGVjaWZpY2FsbHkgYWRkcmVzc2VkIHRvIG1lbWJlciBzdGF0ZXMuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPldvcmtlcnMgLSBTY29wZSBPZiBBcnRpY2xlIDQ1IFRGRVU8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJvdWtoYWxmYTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgcmVxdWlyZW1lbnQgb2YgY3Jvc3NpbmcgYSBib3JkZXIgdG8gZW5qb3kgQXJ0IDQ1IHJpZ2h0cyBpcyBmdWxmaWxsZWQgYnkgYSB3b3JrZXIgZnJvbSBvbmUgbWVtYmVyIHN0YXRlIHdvcmtpbmcgYXQgZW1iYXNzeSBvZiBhbm90aGVyIG1lbWJlciBzdGF0ZS48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+V29ya2VycyAtIERlZmluaXRpb24gb2YgV29ya2VyIC0gRGlyZWN0IERpc2NyaW1pbmF0aW9uPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5MZXZpbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5BIHdvcmtlciB1bmRlciBBcnRpY2xlIDQ1IGlzIHNvbWVvbmUgd2hvIGlzIGVuZ2FnZWQgaW4gZ2VudWluZSBhbmQgZWZmZWN0aXZlIGFjdGl2aXRpZXMsIGFuZCBub3QgYXQgc3VjaCBhIHNtYWxsIHNjYWxlIGFzIHRvIGJlIG1hcmdpbmFsIGFuZCBhbmNpbGxhcnkuIFRoZSBkZWZpbml0aW9uIG9mICYjODIxNjt3b3JrZXImIzgyMTc7IGlzIGZvciB0aGUgRVUuIEl0cyBkZWZpbml0aW9uIG11c3QgYmUgYnJvYWQsIGFuZCBpdHMgZXhjZXB0aW9ucywgbmFycm93Ljwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Xb3JrZXJzIC0gRGVmaW5pdGlvbiBvZiBXb3JrZXI8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkxhd3JpZS1CbHVtPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlRoZXJlIGFyZSB0aHJlZSBjb25zaWRlcmF0aW9ucyBhcyB0byB3aGV0aGVyIGFuIGFjdGl2aXR5IGlzIGdlbnVpbmUgYW5kIGVmZmVjdGl2ZS4gIElzIHRoZSBhY3Rpdml0eSBvZiAoaSkgZWNvbm9taWMgdmFsdWU/IElzIGl0IChpaSkgc3VwZXJ2aXNlZCBieSBhbiBlbXBsb3llcj8gSXMgaXQgKGlpaSkgY2FycmllZCBvdXQgZm9yIHJlbXVuZXJhdGlvbj88L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TGVodG9uZW48L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+TXVzaW5nIG9uIHRoZSBtZWFuaW5nIG9mIGVtcGxveW1lbnQgJm1kYXNoOyAmIzgyMjA7NDUuIC4uLlRoZSBlc3NlbnRpYWwgZmVhdHVyZSBvZiBhbiBlbXBsb3ltZW50IHJlbGF0aW9uc2hpcCBpcyB0aGF0IGZvciBhIGNlcnRhaW4gcGVyaW9kIG9mIHRpbWUgYSBwZXJzb24gcGVyZm9ybXMgc2VydmljZXMgZm9yIGFuZCB1bmRlciB0aGUgZGlyZWN0aW9uIG9mIGFub3RoZXIgcGVyc29uLCBpbiByZXR1cm4gZm9yIHdoaWNoIGhlIHJlY2VpdmVzIHJlbXVuZXJhdGlvbi4mIzgyMjE7PC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJlcm5pbmk8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QmVpbmcgaW4gYSB0cmFpbmluZyBwZXJpb2QgcHJpb3IgdG8gc3RhcnRpbmcgd29yayBwcm9wZXIgaXMgdG8gYmUgYSB3b3JrZXIsIGFzIGxvbmcgYXMgdGhlIHRyYWluaW5nIGlzIGNvbmR1Y3RlZCB1bmRlciB0aGUgY29uZGl0aW9ucyBvZiBnZW51aW5lIGFuZCBlZmZlY3RpdmUgYWN0aXZpdHkgb2YgYW4gZW1wbG95ZWQgcGVyc29uLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NZWV1c2VuPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkJlaW5nIG1hcnJpZWQgdG8gdGhlIGJvc3MgaXMgbm90IHBlciBzZSBhIHJlYXNvbiB0byBmaW5kIGEgcGVyc29uIGlzIG5vdCBhIHdvcmtlciB1bmRlciBBcnQgNDUuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPktlbXBmPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgcGVyc29uIGlzIG5vdCBleGNsdWRlZCBmcm9tIHByb3RlY3Rpb24gdW5kZXIgQXJ0aWNsZSA0NSBtZXJlbHkganVzdCBiZWNhdXNlIGhpcyByZW11bmVyYXRpb24gaXMgYmVsb3cgc3Vic2lzdGVuY2UsIGFuZCBoZSBzZWVrcyB0byBzdXBwbGVtZW50IGhpcyBpbmNvbWUgYnkgZmluYW5jaWFsIGFzc2lzdGFuY2UgZnJvbSB0aGUgbWVtYmVyIHN0YXRlIGluIHdoaWNoIGhlIHJlc2lkZXMuIFdoYXQgbWF0dGVycyBpcyB0aGUgd29yayYjODIxNztzIGdlbnVpbmUgYW5kIGVmZmVjdGl2ZSBuYXR1cmUuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlN0ZXltYW5uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkEgd29ya2VyIGRvZXMgbm90IG5lY2Vzc2FyaWx5IGhhdmUgdG8gYmUgcmVtdW5lcmF0ZWQgaW4gbW9uZXkgdG8gZmFsbCB1bmRlciB0aGUgcHJvdGVjdGlvbiBvZiBBcnQgNDUuICYjODIxNjtJbiBzbyBmYXIgYXMgdGhlIHNlcnZpY2VzIHRoZSBjb21tdW5pdHkgcHJvdmlkZXMgdG8gaXRzIG1lbWJlcnMgbWF5IGJlIHJlZ2FyZGVkIGFzIHRoZSBxdWlkIHBybyBxdW8gZm9yIGdlbnVpbmUgYW5kIGVmZmVjdGl2ZSB3b3JrLiYjODIxNzs8L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+V29ya2VycyAtIERlZmluaXRpb24gb2YgV29ya2VyIC0gTWFyZ2luYWwgYW5kIEFuY2lsbGFyeTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+UmF1bGluPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPk5hdGlvbmFsIGNvdXJ0cyBtYXksIHdoZW4gYXNzZXNzaW5nIHdoZXRoZXIgd29yayBpcyBnZW51aW5lIGFuZCBlZmZlY3RpdmUsIHRha2UgYWNjb3VudCBvZiBpdHMgaXJyZWd1bGFyaXR5IGFuZCBsaW1pdGVkIGR1cmF0aW9uIG9mIGFjdHVhbCBwZXJmb3JtYW5jZSBvZiBzZXJ2aWNlcy4gVGhlc2UgYXR0cmlidXRlcyBtYXkgaW5kaWNhdGUgdGhhdCB0aGUgYWN0aXZpdHkgaXMgbWVyZWx5IG1hcmdpbmFsIGFuZCBhbmNpbGxhcnkuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPldvcmtlcnMgLSBEZWZpbml0aW9uIG9mIFdvcmtlciAtIFB1cnBvc2Ugb2YgV29yazwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QmV0dHJheTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgb2JqZWN0aXZlIG9mIHJlaGFiaWxpdGF0aW5nIGRydWcgYWRkaWN0cywgdG8gZW5hYmxlIHRoZW0gdG8gZW50ZXIgdGhlIGxhYm91ciBmb3JjZSwgZmVsbCBvdXRzaWRlIEFydCA0NS4gW0hlYXZpbHkgY3JpdGljaXNlZCBmb3IgaXRzIGZhaWx1cmUgdG8gdGFrZSBpbnRvIGFjY291bnQgdGhhdCB0aGUgZ29hbCBvZiB0aGUgcmVoYWJpbGl0YXRpb24gd2FzIG92ZXJ0bHkgZWNvbm9taWNdLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Xb3JrZXJzIC0gUmlnaHQgdG8gU2VlayBXb3JrPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BbnRvbmlzc2VuPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkZyZWUgbW92ZW1lbnQgb2Ygd29ya2VycyBlbnRhaWxzIGZyZWUgbW92ZW1lbnQgYW5kIHJlc2lkZW5jZSB3aXRoaW4gaG9zdCBtZW1iZXIgc3RhdGVzIGZvciB0aGUgcHVycG9zZSBvZiBzZWVraW5nIGVtcGxveW1lbnQsIGFzIHRoaXMgZW5oYW5jZXMgdGhlIGVmZmVjdGl2ZW5lc3Mgb2YgYXJ0aWNsZSA0NS4gSW4gZGVmYXVsdCBvZiBwcm92aXNpb25zIGFzIHRvIGhvdyBsb25nIHRoZXkgbWF5IHN0YXkgd2l0aG91dCB3b3JrLCB0aGV5IHNob3VsZCBiZSBhYmxlIHRvIGRvIHRoaXMgZm9yIHNpeCBtb250aHM7IGJ1dCB3aGVuIHRoYXQgbGFwc2VzLCBhbmQgdGhleSBhcmUgbG9va2luZyBmb3Igd29yayBmb3Igd2hpY2ggdGhleSYjODIxNztyZSBhcHByb3ByaWF0ZWx5IHF1YWxpZmllZCwgdGhlIG1lbWJlciBzdGF0ZSBtYXkgbm90IGV4cGVsIHRoZW0uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkxlYm9uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPk1lbWJlciBzdGF0ZXMgYXJlIG5vdCBvYmxpZ2VkIHRvIHJlZnJhaW4gZnJvbSBkaXNjcmltaW5hdGluZyBhZ2FpbnN0IGpvYnNlZWtlcnMgZnJvbSBvdGhlciBtZW1iZXIgc3RhdGVzLCBhcyByZWdhcmRzIHRoZWlyIGVsaWdpYmlsaXR5IGZvciB0YXggYW5kIHNvY2lhbCBhZHZhbnRhZ2VzLjwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Xb3JrZXJzIC0gUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQgLSBJbmRpcmVjdCBEaXNjcmltaW5hdGlvbjwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R3JvZW5lcjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5NZWFzdXJlcyBjbGVhcmx5IGhhdmluZyB0aGUgZWZmZWN0IG9mIGRpc2NyaW1pbmF0aW5nIG9uIGdyb3VuZHMgb2YgbmF0aW9uYWxpdHksIHN1Y2ggYXMgaW1wb3NpbmcgYSBjb25kaXRpb24gb25seSBsaWtlbHkgdG8gYmUgbWV0IGJ5IHBlb3BsZSBvZiBhIHBhcnRpY3VsYXIgbWVtYmVyIHN0YXRlIGFyZSBpbmRpcmVjdGx5IGRpc2NyaW1pbmF0b3J5IGFuZCB0aHVzIGluIGJyZWFjaCBvZiBBcnQgNDUuICBIb3dldmVyLCBzdWNoIG1lYXN1cmVzIG1heSBiZSBleGN1c2VkIGFzIHByb3BvcnRpb25hdGUgZ2l2ZW4gdGhlIG5lZWQgdG8gcHJvdGVjdCBtaW5vcml0YXJpYW4gYW5kIGZyYWdpbGUgYXNwZWN0cyBvZiBjdWx0dXJlIHN1Y2ggYXMgdGhlIEdhZWxpYyBsYW5ndWFnZSAmbWRhc2g7IGJ1dCB0aGlzIHdvdWxkIGRlcGVuZCBvbiB0aGUgY29ubmVjdGlvbiBiZXR3ZWVuIHRoZSByZXF1aXJlbWVudCBpbXBvc2VkIGFuZCB0aGUgZHV0aWVzIHBlcmZvcm1lZCZhbXA7Ljwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Xb3JrZXJzIC0gUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQgLSBJbmRpc3RpbmN0bHkgQXBwbGljYWJsZSBNZWFzdXJlczwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+S3JhbmVtYW5uPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFuIGluZGlzdGluY3RseSBhcHBsaWNhYmxlIG1lYXN1cmUgZGV0ZXJyaW5nIGEgd29ya2VyIGZyb20gbGVhdmluZyBoaXMgbWVtYmVyIHN0YXRlIHRvIHdvcmsgaW4gYW5vdGhlciBjb25zdGl0dXRlcyBhbiBvYnN0YWNsZSB0byBBcnQgNDUuIEhvd2V2ZXIsIHVubGVzcyB0aGUgbWVhc3VyZSBpcyBwdXJlbHkgZWNvbm9taWMsIGl0IG1heSBiZSBqdXN0aWZpZWQgaWYgdGhlIGJhcnJpZXIgaXQgaW1wb3NlcyBpcywgaW4gZmFjdCBub3QgZ3JlYXQuIFRPRE8uPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPldvcmtlcnMgLSBNZWFzdXJlcyBCZXlvbmQgVGhlIFNjb3BlIE9mIEFydGljbGUgNDUgVEZFVTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R3JhZjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UT0RPIHN1bW1hcnkgb2YgcmF0aW88L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+V29ya2VycyAtIEp1c3RpZmljYXRpb25zIGZvciBEaXJlY3RseSBEaXNjcmltaW5hdG9yeSBSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCBvZiBXb3JrZXJzPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Cb25zaWdub3JlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlJlbGlhbmNlIG9uIGFuIEFydCA0NSgzKSBkZXJvZ2F0aW9uIG5lY2Vzc2l0YXRlcyB0aGVyZSBiZWluZyBhIGdlbnVpbmUgYW5kIHN1ZmZpY2llbnRseSBzZXJpb3VzIHRocmVhdCwgYWZmZWN0aW5nIG9uZSBvZiB0aGUgZnVuZGFtZW50YWwgaW50ZXJlc3RzIG9mIHNvY2lldHkuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlZhbiBEdXluPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlRoZSBjaXJjdW1zdGFuY2VzIG9mIHB1YmxpYyBwb2xpY3kganVzdGlmaWNhdGlvbnMgdG8gcmVzdHJpY3Rpb25zIG9uIGZyZWUgbW92ZW1lbnQgb2Ygd29ya2VycyBtYXkgdmFyeSBmcm9tIGNvdW50cnkgdG8gY291bnRyeSBhbmQgdGltZSB0byB0aW1lLCB0aGVyZWZvcmUgdGhlIG1lbWJlciBzdGF0ZXMgbXVzdCBoYXZlIGRpc2NyZXRpb24uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFkb3VpIGFuZCBDb3JudWFpbGxlPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPk1lbWJlciBzdGF0ZXMgbXVzdCBub3QgYWJ1c2UgcHVibGljIHBvbGljeSBqdXN0aWZpY2F0aW9ucyB1bmRlciBBcnQgNDUoMykuIFRoZXkgbWF5IG5vdCBiZSBpbnZva2VkIHRvIGV4Y2x1ZGUgc29tZW9uZSBmb3IgY29uZHVjdCB3aGljaCB0aGUgbWVtYmVyIHN0YXRlIGRvZXMgbm90IHRha2UgZ2VudWluZSBhbmQgZWZmZWN0aXZlIGRvbWVzdGljIG1lYXN1cmVzIHRvIHJlcHJlc3MuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPldvcmtlcnMgLSBKdXN0aWZpY2F0aW9ucyBmb3IgRGlyZWN0bHkgRGlzY3JpbWluYXRvcnkgUmVzdHJpY3Rpb25zIG9uIEZyZWUgTW92ZW1lbnQgb2YgV29ya2VycyAtIFB1YmxpYyBTZXJ2aWNlPC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db21taXNzaW9uIHYgQmVsZ2l1bSBJPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkRpc2NyaW1pbmF0aW9uIGFnYWluc3Qgd29ya2VycyBmcm9tIG90aGVyIG1lbWJlciBzdGF0ZXMgd29ya2luZyBpbiBwdWJsaWMgc2VydmljZSB1bmRlciBBcnQgNDUoNCkgaXMgbm90IHByb3BvcnRpb25hdGUgd2hlbiBhcHBsaWVkIHRvIGFsbCBzdGF0ZSBlbXBsb3llZXMsIHJhdGhlciB0aGFuIHRob3NlIHdob3NlIHJvbGVzIG5lY2Vzc2l0YXRlIGEgc3BlY2lhbCBhbGxlZ2lhbmNlIHRvIHRoZSBzdGF0ZS4gVGhpcyBtaWdodCBpbmNsdWRlIHN1cGVydmlzb3JzLCB0ZWNobmljYWwgb2ZmaWNlcnMsIGV0YywgYnV0IG5vdCBmb3IgcmFpbHdheSB3b3JrZXJzLCBudXJzZXMsIGV0Yy48L3NwYW4+PC9zcGFuPjwvbGk+PC91bD4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIkZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAiTkFNRSI6ICJDYXNlIE92ZXJ2aWV3cyBmb3IgRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgIk5VTUJFUiI6ICIxNTciLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSAtIENpdGl6ZW5zIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIERpcmVjdCBFZmZlY3QiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgRGlyZWN0aXZlcyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBJbnRlcm5hbCBNYXJrZXQiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgTm9uLUZpc2NhbCBSZXN0cmljdGlvbnMiLAogICAgICAgICJDYXNlIE92ZXJ2aWV3cyBmb3IgU3VwcmVtYWN5IiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEh1bWFuIFJpZ2h0cyIKICAgIF0KfSwKewogICAgIlRZUEUiOiAiQ2FzZSBPdmVydmlld3MiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Tb2NpYWwgQXNzaXN0YW5jZTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R3J6ZWxjenlrPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlVuaW9uIGNpdGl6ZW5zaGlwIGlzIGRlc3RpbmVkIHRvIGJlIHRoZSBmdW5kYW1lbnRhbCBzdGF0dXMgb2YgbmF0aW9uYWxzIG9mIHRoZSBtZW1iZXIgc3RhdGVzLiBUaGV5IGNhbiByZWx5IG9uIHRoZSBub24tZGlzY3JpbWluYXRpb24gcHJvdmlzaW9uIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAxOCBURkVVPC9zcGFuPiBmb3IgYWxsIHByb3Zpc2lvbnMgb2YgRVUgbGF3LiBXaGlsc3QgdGhlIHByb3Zpc2lvbiBvZiB0aGUgYSBiZW5lZml0IChlLmcuLCB0aGUgbWluaW1leCkgdG8gY2l0aXplbnMgb2Ygb2hlciBtZW1iZXIgc3RhdGVzIG1pZ2h0IGludm9sdmUgYSBjZXJ0YWluIGRlZ3JlZSBvZiBmaW5hbmNpYWwgYnVyZGVuLCB0aGlzIHdvdWxkIG5vdCBiZSB1bnJlYXNvbmFibGUsIGFuZCB0aGF0IG1lbWJlciBzdGF0ZXMgc2hvdWxkIHNob3cgYSBjZXJ0YWluIGRlZ3JlZSBvZiBmaW5hbmNpYWwgc29saWRhcml0eS4gKCEpPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlJpZ2h0cyBPZiBGYW1pbHkgTWVtYmVycyAtIFVucmVhc29uYWJsZSBCdXJkZW4gLSBDb21wcmVoZW5zaXZlIEhlYWx0aGNhcmU8L3NwYW4+IiwKICAgICAgICAiPHVsPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlpodSBhbmQgQ2hlbjwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5UaGUgcmVxdWlyZW1lbnRzIG9mIHN1ZmZpY2llbnQgcmVzb3VyY2VzIGFuZCBjb21wcmVoZW5zaXZlIHNpY2tuZXNzIGluc3VyYW5jZSBvZiBhcnRpY2xlIEFydGljbGUgNygxKSgyKSBvZiBEaXJlY3RpdmUgMjAwNC8zOCB3aWxsIGJlIG1ldCB3aGVuIHRoZSBub24tQ2l0aXplbiBmYW1pbHkgbWVtYmVyIGZ1bGZpbHMgdGhlbTogdGhleSBkbyBub3QgaGF2ZSB0byBiZSBwb3NzZXNzZWQgcGVyc29uYWxseSBieSB0aGUgQ2l0aXplbiwgZm9yIHRoZSByZXF1aXJlbWVudHMgdG8gYmUgbWV0Ljwvc3Bhbj48L3NwYW4+PC9saT48L3VsPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5SaWdodCBUbyBFcXVhbCBUcmVhdG1lbnQgLSBTb2NpYWwgQXNzaXN0YW5jZTwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+TWFydGluZXogU2FsYTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5XaGVuIGEgbWVtYmVyIHN0YXRlIGRvZXMgbm90IHJlcXVpcmUgaXRzIG93biBuYXRpb25hbHMgdG8gcHJvZHVjZSBhIHJlc2lkZW50JiM4MjE3O3MgcGVybWl0IHRvIG9idGFpbiBhIGJlbmVmaXQsIHN1Y2ggYXMgaW4gdGhpcyBjYXNlLCBhIGNoaWxkLXJlYXJpbmcgYWxsb3dhbmNlLCBpdCBtYXkgbm90IGltcG9zZSBzdWNoIGEgcmVxdWlyZW1lbnQgb24gbmF0aW9uYWxzIG90aGVyIG1lbWJlciBzdGF0ZXMuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkQmIzgyMTc7SG9vcDwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj4mIzgyMjA7Q29tbXVuaXR5IGxhdyBwcmVjbHVkZXMgYSBtZW1iZXIgc3RhdGUgZnJvbSByZWZ1c2luZyB0byBncmFudCB0aGUgdGlkZW92ZXIgYWxsb3dhbmNlIHRvIG9uZSBvZiBpdHMgbmF0aW9uYWxzLCBhIHN0dWRlbnQgc2Vla2luZyBoZXIgZmlyc3QgZW1wbG95bWVudCwgb24gdGhlIHNvbGUgZ3JvdW5kIHRoYXQgdGhhdCBzdHVkZW50IGNvbXBsZXRlZCBoZXIgc2Vjb25kYXJ5IGVkdWNhdGlvbiBpbiBhbm90aGVyIG1lbWJlciBzdGF0ZS4mIzgyMjE7PC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlRyb2phbmk8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+QXMgaW4gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RCYjODIxNztIb29wPC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+R3J6ZWxjenlrPC9zcGFuPiwgdGhlIG5hdGlvbmFsaXR5IHF1YWxpZnlpbmcgY3JpdGVyaWEgb2YgdGhlIEJlbGdpYW4gJiM4MjE2O3RpZGVvdmVyJiM4MjE3OyBhbGxvd2FuY2UsIGFrYSAmIzgyMTY7bWluaW1leCYjODIxNzsgd2FzIGZvdW5kIGluIHZyZWFjaCBvZiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5BcnQgMTggVEZFVTwvc3Bhbj4uPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkJpZGFyPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlNob3dpbmcgYSBub24tbmVnbGlnaWJsZSBkZWdyZWUgb2YgaW50ZWdyYXRpb24gaW50byB0aGUgc29jaWV0eSBvZiB0aGUgbWVtYmVyIHN0YXRlIG1heSBxdWFsaWZ5IHlvdSBmb3Igc29jaWFsIGFkdmFudGFnZXMgc3VjaCBhcyBzdWJzaWRpc2VkIHN0dWRlbnQgbG9hbnMvZ3JhbnRzLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Db2xsaW5zPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAyNCBDUkQ8L3NwYW4+IHBhcmEgMiBkb2VzIG5vdCBnaXZlIGVxdWFsIGFjY2VzcyB0byBiZW5lZml0cywgYnV0IGEgam9ic2Vla2VyIGlzIG5vbmV0aGVsZXNzIGFuIEVVIGNpdGl6ZW4sIGFuZCBhcyBzdWNoLCBoYXMgYWNjZXNzIHRvIHNvY2lhbCBhZHZhbnRhZ2VzLiAgSG93ZXZlciwgdGhlIGxhY2sgb2YgYSBnZW51aW5lIGxpbmsgYmV0d2VlbiB0aGUgY2l0aXplbiBhbmQgdGhlIGxhYm91ciBtYXJrZXQgb2YgdGhlIGhvc3Qgc3RhdGUgbWF5IGJlIGEgbGVnaXRpbWF0ZSByZWFzb24gdG8gd2l0aGhvbGQsIGUuZy4sIGpvYi1zZWVrZXImIzgyMTc7cyBhbGxvd2FuY2VzLiBFdmlkZW5jZSBvZiBzdWNoIGEgbGluayBpcyBsaWtlbHkgdG8gYmUgZGVtb25zdHJhdGVkIGJ5IGdlbnVpbmUgZWZmb3J0cyB0byBmaW5kIHdvcmsuIEEgbWVtYmVyIHN0YXRlIG1heSBpbXBvc2UgYSBtaW5pbXVtIGxlbmd0aCBvZiByZXNpZGVuY2UgaW4gb3JkZXIgdG8gcXVhbGlmeSwgYnV0IHRoaXMgbXVzdCBub3QgYmUgcHJvcG9ydGlvbmF0ZS4gSS5lLiwgaXQgY2Fubm90IGJlIGxvbmdlciB0aGFuIHdvdWxkIGJlIG5lY2Vzc2FyeSB0byBkZW1vbnN0cmF0ZSBhIGdlbnVpbmUgbGluay48L3NwYW4+PC9zcGFuPjwvbGk+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+VmF0c291cmFzPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPldoZW4gYSBqb2JzZWVrZXIgY2xhaW1zIHNvY2lhbCBhc3Npc3RhbmNlIGluIGEgaG9zdCBtZW1iZXIgc3RhdGUsIHRoZSBzdGF0ZSYjODIxNztzIGNvbXBldGVudCBuYXRpb25hbCBhdXRob3JpdGllcyBhbmQgY291cnRzIG11c3QgZGVjaWRlIG5vdCBvbmx5IHdoZXRoZXIgdGhlIGNsYWltYW50IGhhcyBhIGdlbnVpbmUgbGluayB0byB0aGUgbGFib3VyIG1hcmtldCAoPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29sbGluczwvc3Bhbj4sIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPklvYW5uaWRpczwvc3Bhbj4pLCBidXQgYWxzbyB0aGUgcHVycG9zZSAmbWRhc2g7IGFuZCBzaG91bGQgdGhlIHB1cnBvc2UgYmUgdG8gZmFjaWxpdGF0ZSBhY2Nlc3MgdG8gdGhlIGxhYm91ciBtYXJrZXQsIHRoZW4gaXQgd2lsbCBub3QgYmUgc29jaWFsIGFzc2lzdGFuY2UgYXMgbWVhbnQgYnkgcGFyYSAyIG9mIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAyNCBDUkQ8L3NwYW4+Ljwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5EYW5vPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPkFwcGx5aW5nIGEgc3RyaWN0bHkgZmFpdGhmdWwgYW5kIG5vbi10ZWxlb2xvZ2ljYWwgcmVhZGluZyBvZiB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDcgQ1JEPC9zcGFuPiwgYW5kIG5vdCBvbmNlIHJlZmVycmluZyB0byBFVSBDaXRpemVuc2hpcCwgdGhlIENvdXJ0IGhlbGQgdGhhdCBmYWlsdXJlIHRvIGNvbXBseSB3aXRoIHRoZSByZXF1aXJlbWVudCB0byBoYXZlIHN1ZmZpY2llbnQgcmVzb3VyY2VzIGZvciB0aGUgY2l0aXplbiBvciB0aGUgZmFtaWx5IGludmFsaWRhdGVkIHRoZSBjbGFpbSB0byBzb2NpYWwgYXNzaXN0YW5jZS4gVGhpcyB3YXMgdG8gcHJldmVudCBhbiB1bnJlYXNvbmFibGUgYnVyZGVuIG9uIHRoZSBob3N0IHN0YXRlJiM4MjE3O3Mgc29jaWFsIHNlY3VyaXR5LiBGcmVlZG9tIG9mIG1vdmVtZW50IHNvbGVseSB0byBjbGFpbSBzb2NpYWwgc2VjdXJpdHkgaXMgbm90IGNvdmVyZWQgYnkgdGhlIGFydGljbGUuPC9zcGFuPjwvc3Bhbj48L2xpPjxsaT48c3BhbiBjbGFzcz1cIm5sXCI+PHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFsaW1hbm92aWM8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cInNtXCI+SW4gYW4gb3BlcmF0aXZlIGp1ZGdtZW50IHJpY2ggaW4gY2l0YXRpb24gb2YgZGlyZWN0aXZlcyBhbmQgcmVndWxhdGlvbnMsIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkRhbm88L3NwYW4+IHdhcyBmb2xsb3dlZCAmbWRhc2g7IHRoZSByaWdodCB0byBzb2NpYWwgYXNzaXN0YW5jZSBoYWQgbGFwc2VkIGFmdGVyIHNpeCBtb250aHMsIGFzIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCA3IENSRDwvc3Bhbj4gcHJvdmlkZWQuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPlJpZ2h0IFRvIEVxdWFsIFRyZWF0bWVudDwvc3Bhbj4iLAogICAgICAgICI8dWw+PGxpPjxzcGFuIGNsYXNzPVwibmxcIj48c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+SW9hbm5pZGlzPC9zcGFuPjwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJzbVwiPlJlc3RyaWN0aW5nIGVsaWdpYmlsaXR5IGZvciBhIGpvYnNlZWtlciYjODIxNztzIGFsbG93YW5jZSB0byB0aG9zZSB3aG8gaGF2ZSBjb21wbGV0ZWQgdGhlaXIgc2Vjb25kYXJ5IGVkdWNhdGlvbiBpbiB0aGUgbWVtYmVyIHN0YXRlIGlzIHRvbyBnZW5lcmFsIGFuZCBleGNsdXNpdmUsIGFuZCBvbmx5IHdlYWtseSBlZmZlY3RpdmUgYXMgYSBtZWFucyBvZiByZXN0cmljdGluZyB0aGUgYWxsb3dhbmNlIHRvIHRob3NlIHdobyBjb3VsZCByZWFzb25hYmx5IGJlIGNvbm5lY3RlZCB0byB0aGUgZW1wbG95bWVudCBtYXJrZXQuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPk5vIE1vdmVtZW50PC9zcGFuPiIsCiAgICAgICAgIjx1bD48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5aYW1icmFubzwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5JbiBhIG5vdGFibHktc3VjY2luY3QganVkZ21lbnQsIGFuZCBmb2xsb3dpbmcgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RGVyaWNpPC9zcGFuPiwgdGhlIENvdXJ0IGZvdW5kIHRoYXQgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDIwIFRGRVU8L3NwYW4+IHByZWNsdWRlcyBuYXRpb25hbCBtZWFzdXJlcyBoYXZpbmcgdGhlIGVmZmVjdCBvZiBkZXByaXZpbmcgY2l0aXplbnMgb2YgdGhlIHVuaW9uICh0aGUgY2hpbGRyZW4pIG9mIHRoZSBnZW51aW5lIGVuam95bWVudCBvZiB0aGUgc3Vic3RhbmNlIG9mIHRoZWlyIHJpZ2h0cyBhcyBFVSBjaXRpemVucy4gIDxzcGFuIGNsYXNzPVwiaWxjXCI+QXMgUHJvZi4gU2lyIEFsYW4gRGFzaHdvb2QgUUMgcHV0cyBpdCwgJiM4MjIwO3RoZSBDSkVVIGp1c3QgY2FuJiM4MjE3O3QgcmVzaXN0IGJlaW5nIEJpZyBEYWRkaWVzIHRvIHBlb3BsZSEmIzgyMjE7PC9zcGFuPiBUaGUgYnJldml0eSBvZiB0aGUganVkZ21lbnQgaXMgcGVyaGFwcyBiZXN0IHVuZGVyc3Rvb2QgYXMgYSByZXN1bHQgb2Ygbm90IHdhbnRpbmcsIGluIGVmZmVjdCwgdG8gYWxsb3cgdGhlIHBhcmVudHMgb2YgeW91bmcgRVUgY2l0aXplbnMgdG8gYmUsIGluIGVmZmVjdCByZW1vdmVkOyBkb2luZyBzbywgZXNwZWNpYWxseSB0byBhIHdhci16b25lLCBtaWdodCBiZSBzZWVuIGFzIGRlIGZhY3RvIGRlcG9ydGF0aW9uIG9mIEVVIGNpdGl6ZW5zLjwvc3Bhbj48L3NwYW4+PC9saT48bGk+PHNwYW4gY2xhc3M9XCJubFwiPjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5NY0NhcnRoeTwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwic21cIj5JbiBvcmRlciB0byByZWx5IG9uIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFydCAxOCBURkVVPC9zcGFuPiByaWdodCB0byBlcXVhbCB0cmVhdG1lbnQgYXMgYSBmYW1pbHkgbWVtYmVyIG9mIGFuIEVVIGNpdGl6ZW4sIHRoZSBFVS1jaXRpemVuIHdvdWxkIGhhdmUgdG8gaGF2ZSBjcm9zc2VkIGEgYm9yZGVyIHdpdGhpbiB0aGUgRVUuIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlphbWJyYW5vPC9zcGFuPiB3YXMgZGlzdGluZ3Vpc2hlZCwgYXMgdGhlcmUgd291bGQgYmUgbm8gZWZmZWN0aXZlIG9ibGlnYXRpb24gb24gdGhlIGNsYWltYW50IG9mIHRoaXMgY2FzZSB0byBsZWF2ZSB0aGUgRVUuPC9zcGFuPjwvc3Bhbj48L2xpPjwvdWw+IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiRnJlZSBNb3ZlbWVudCBvZiBQZW9wbGUiLAogICAgIk5BTUUiOiAiQ2FzZSBPdmVydmlld3MgZm9yIEZyZWUgTW92ZW1lbnQgb2YgUGVvcGxlIC0gQ2l0aXplbnMiLAogICAgIk5VTUJFUiI6ICIxNTgiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBGcmVlIE1vdmVtZW50IG9mIFBlb3BsZSIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBEaXJlY3RpdmVzIiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIFN1cHJlbWFjeSIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBOb24tRmlzY2FsIFJlc3RyaWN0aW9ucyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBEaXJlY3QgRWZmZWN0IiwKICAgICAgICAiQ2FzZSBPdmVydmlld3MgZm9yIEh1bWFuIFJpZ2h0cyIsCiAgICAgICAgIkNhc2UgT3ZlcnZpZXdzIGZvciBJbnRlcm5hbCBNYXJrZXQiCiAgICBdCn0sCnsKICAgICJMSU5LIjogWwogICAgICAgICJUZXh0IG9mIDE4LzAzLzE2IERlYWwiCiAgICBdLAogICAgIldJS0lMSU5LIjogWwogICAgICAgICJodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Ob24tcmVmb3VsZW1lbnQiCiAgICBdLAogICAgIlRZUEUiOiAiQ29uY2VwdCIsCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmRcIj5QcmVjaXM8L3NwYW4+PC9zcGFuPjxicj4mZW1zcDsmZW1zcDtUaGUgRVUgaXMgaGVhcnRlbmVkIHRvIHNlZSB0aGF0IFR1cmtleSBpcyBhY3R1YWxseSBpbXBsZW1lbnRpbmcgdGhlaXIgZW5kIG9mIHRoZSA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5Kb2ludCBBY3Rpb24gUGxhbjwvc3Bhbj4gYmFyZ2FpbiAtIHJlcXVpcmluZyB2aXNhcyBmb3IgU3lyaWFucywgYmVlZmluZyB1cCBjb2FzdGd1YXJkcywgcG9saWNlLCBldGMuIEZvciB0aGlzIHdlIGhhdmUgYmVndW4gdG8gcGF5IHRoZW0gdGhlIHByb21pc2VkIGJyaWJlIG9mIFx1MjBhYzMgYmlsbGlvbiwgd2hpY2ggVHVya2V5IHVuZGVzdGFuZHMgd2lsbCBiZSBqZW9wYXJkaXNlZCBpZiBpdCBtZXNzZXMgdXMgYXJvdW5kIHdoZW4gd2UgdHJ5IHRvIHNlbmQgdGhlIHJlZnVnZWVzIGJhY2suIEJ1dCBmdXJ0aGVyIGFjdGlvbiBpcyBuZWVkZWQsIHNvOiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj4xPC9zcGFuPiBObyBuZXcgbWlncmFudHMgZnJvbSBUdXJrZXkgPHNwYW4gY2xhc3M9XCJpdFwiPnRvIHRoZSBHcmVlayBJc2xhbmRzPC9zcGFuPi4gVGhvc2Ugd2hvIGNvbWUgd2lsbCBiZSByZXR1cm5lZCBpbiBhY2NvcmRhbmNlIHdpdGggRVUgYW5kIGludC4gbGF3LiBBbHRob3VnaCBzdWNoIG1pZ3JhbnRzIHdpbGwgY29sbGVjdGl2ZWx5IGJlIGV4cGVsbGVkLCB0aGV5IHdpbGwgPHNwYW4gY2xhc3M9XCJpdFwiPm5vdDwvc3Bhbj4gYmUgYSA8c3BhbiBjbGFzcz1cIml0XCI+Y29sbGVjdGl2ZSBleHB1bHNpb248L3NwYW4+IGFuZCB0aGVyZSB3aWxsIGJlIG5vIDxzcGFuIGNsYXNzPVwiaXRcIj5ub24gcmVmb3VsbWVudDwvc3Bhbj4uIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjI8L3NwYW4+IEZvciA8c3BhbiBjbGFzcz1cIml0XCI+b25lIFN5cmlhbiByZXR1cm5lZDwvc3Bhbj4gdG8gVHVya2V5IGZyb20gR3JlZWNlLCA8c3BhbiBjbGFzcz1cIml0XCI+b25lIFN5cmlhbiByZXNldHRsZWQ8L3NwYW4+IGluIHRoZSBFVSwgYnV0IG9ubHkgdGhlIHZ1bG5lcmFibGUsIG5vdCBlY29ub21pYyBtaWdyYW50cywgYW5kIGJ5IHByZWZlcmVuY2UsIG5vIHJlY2lkaXZpc3QgYm9yZGVyLWNyb3NzZXJzLiBUaGVzZSByZXNldHRsZW1lbnRzIHdpbGwgYmUgYWNjb3JkaW5nIHRvIHRoZSAyMC8wNi8yMDE1IHF1b3RhcyBwZXIgc3RhdGUsIGJ1dCBpZiBuZWNlc3NhcnksIGEgZnVydGhlciA1NEsgcGxhY2VzLiA8c3BhbiBjbGFzcz1cImJkXCI+QWx0aG91Z2ggaWYgaXQgbG9va3MgbGlrZSB3ZSYjODIxNztsbCBuZWVkIGFsbCB0aGUgZXh0cmEgcGxhY2VzLCB3ZSYjODIxNztsbCAmIzgyMjA7cmV2aWV3JiM4MjIxOyB0aGUgbWVjaGFuaXNtLjwvc3Bhbj4gQW5kIHdlJiM4MjE3O2xsIHNjcmFwIGl0IGlmIHdlIHNlbmQgdG9vIG1hbnkgYmFjayB0byBUdXJrZXkuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjM8L3NwYW4+IFR1cmtleSB3aWxsIHNodXQgb2ZmIGxhbmQgYW5kIHNlYSByb3V0ZXMsIGFuZCB3aWxsIG5vdCBmdWNrIHVzIGFyb3VuZCBhYm91dCBpdC4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+NDwvc3Bhbj4gT25jZSB0aGUgc2l0dWF0aW9uIGlzIGJhY2sgdG8gbm9ybWFsLCB0aGVyZSYjODIxNztsbCBiZSBhIDxzcGFuIGNsYXNzPVwiYmRcIj5Wb2x1bnRhcnkgSHVtYW5pdGFyaWFuIEFkbWlzc2lvbiBTY2hlbWU8L3NwYW4+IGZvciBhY2Nlc3MgdG8gdGhlIEVVLiBUaGUgdm9sdW50YXJpbmVzcyBpcyBvbiB0aGUgcGFydCBvZiB0aGUgc3RhdGVzIC0gdGhleSB3b24mIzgyMTc7dCBoYXZlIHRvIGpvaW4gaXQuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjU8L3NwYW4+IEluIHJldHVybiwgYnksIGF0IHRoZSBsYXRlc3QsIHRoZSBlbmQgb2YgSnVuZSAyMDE2LCBhbmQgcHJvdmlkZWQgdGhhdCBUdXJrZXkgaXMga2VlcGluZyBpdHMgZW5kIG9mIHRoZSBiYXJnYWluLCA8c3BhbiBjbGFzcz1cImJkXCI+d2UmIzgyMTc7bGwgb3BlbiB0aGUgU2NoZW5nZW4gem9uZSB0byBUdXJraXNoIHBhc3Nwb3J0LWhvbGRlcnM8L3NwYW4+LiBTbyBnZXQgYnVzeSwgVHVya2V5LCBkbyBhcyB3ZSBhc2sgYWJvdmUuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjY8L3NwYW4+IEFuZCB5ZXMsIHdlIGhhdmVuJiM4MjE3O3QgZm9yZ290dGVuIGFib3V0IHRoZSBcdTIwYWMzIGJpbGxpb24sIHdoaWNoIHdpbGwgYmUgc3BlbnQgb24gaGVhbHRoY2FyZSwgaW5mcmFzdHJ1Y3R1cmUsIGJyaWJlcywgZXRjLCBhbmQgYWxsIHRoZSBvdGhlciB1c3VhbCBkaXNzaXBhdGlvbnMgb2Ygc3RhdGUgYWlkLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj43PC9zcGFuPiBhbmQgPHNwYW4gY2xhc3M9XCJiZFwiPjg8L3NwYW4+IFllcywgd2h5IG5vdCwgbGV0JiM4MjE3O3MgZGlzY3VzcyBUdXJraXNoIGFjY2Vzc2lvbiBhZ2FpbiwgaGVyZSwgbGV0IHVzIGNodWNrIHlvdSBhIGZldyBtb3JlIGJvbmVzLCBpbiB0aGUgc2hhcGUgb2YgQ2guIDMzIGluIHRoZSBuZXh0IGZldyB5ZWFycywgc28geW91IHRoaW5rIHdlJiM4MjE3O3JlIHNlcmlvdXMuIgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJTdXByZW1hY3kiLAogICAgICAgICJQb2xpdGljcyIsCiAgICAgICAgIk1pZ3JhbnRzIiwKICAgICAgICAiVHVya2V5IgogICAgXSwKICAgICJDQVRFR09SWSI6ICJTdXByZW1hY3kgLyBQb2xpdGljcyAmbWRhc2g7IE1pZ3JhbnRzICZtZGFzaDsgVHVya2V5IiwKICAgICJOQU1FIjogIk1pZ3JhbnQgQ3Jpc2lzIC0gVHVya2V5IERlYWwiLAogICAgIk5VTUJFUiI6ICIxNTkiLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IEkgLSBQYXJpcyB0byBNZXJnZXIiLAogICAgICAgICJGaXNjYWwgUmVzdHJpY3Rpb25zIG92ZXIgdGhlIEJvcmRlciIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IElJSSAtIEFjY2Vzc2lvbiB0byB0aGUgUHJlc2VudCIsCiAgICAgICAgIkZpc2NhbCBSZXN0cmljdGlvbnMgb24gRnJlZSBNb3ZlbWVudCIsCiAgICAgICAgIkludGVybmFsIE1hcmtldCAtIERpc2N1c3Npb24iLAogICAgICAgICJDaXRpemVucyBSaWdodHMgRGlyZWN0aXZlIC0gRGlnZXN0ZWQiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIFdvcmtlcnMgLSBTdW1tYXJ5IiwKICAgICAgICAiRmlzY2FsIFJlc3RyaWN0aW9ucyBhdCB0aGUgQm9yZGVyIiwKICAgICAgICAiRWZmZWN0aXZlbmVzcyBhbmQgU2NvcGUgb2YgQXJ0IDQ1IiwKICAgICAgICAiSnVzdGlmaWNhdGlvbnMgZm9yIERpc2NyaW1pbmF0aW9uIHVuZGVyIEFydCA0NSIsCiAgICAgICAgIlBvdHRlZCBIaXN0b3J5IElJIC0gRUZUQSB0byBOaWNlIiwKICAgICAgICAiRVUgQ2l0aXplbnNoaXAiCiAgICBdCn0sCnsKICAgICJUWVBFIjogIkFydGljbGUiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJpZyBiZFwiPlJlenZhbmkgQm9vazwvc3Bhbj48L3NwYW4+PGJyPjxzcGFuIGNsYXNzPVwiYmRcIj5EYXZpZCBBLiBSZXp2YW5pPC9zcGFuPiA8c3BhbiBjbGFzcz1cIml0XCI+U3VycGFzc2luZyB0aGUgU292ZXJlaWduIFN0YXRlOiBUaGUgV2VhbHRoLCBTZWxmLVJ1bGUsIGFuZCBTZWN1cml0eSBBZHZhbnRhZ2VzIG9mIFBhcnRpYWxseSBJbmRlcGVuZGVudCBUZXJyaXRvcmllczwvc3Bhbj48YnI+PHNwYW4gY2xhc3M9XCJiZFwiPk9zY29sYSByZWY8L3NwYW4+OiAmIzgyMjA7RGF2aWQgQSBSZXp2YW5pLFx1MDBhMFN1cnBhc3NpbmcgdGhlIFNvdmVyZWlnbiBTdGF0ZTogVGhlIFdlYWx0aCwgU2VsZi1SdWxlLCBhbmQgU2VjdXJpdHkgQWR2YW50YWdlcyBvZiBQYXJ0aWFsbHkgSW5kZXBlbmRlbnQgVGVycml0b3JpZXNcdTAwYTAoMXN0IGVkbixcdTAwYTBPeGZvcmQgVW5pdmVyc2l0eSBQcmVzc1x1MDBhMDIwMTQpXHUwMGEwOTk5JiM4MjIxOyIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJpZyBiZFwiPlJldmlldyBpbiA8c3BhbiBjbGFzcz1cIml0XCI+TFNFIFJldmlldyBvZiBCb29rczwvc3Bhbj48L3NwYW4+PC9zcGFuPjxicj5BYnN0cmFjdCAmbWRhc2g7ICYjODIyMDtUaGlzIGJvb2sgYWltcyB0byBzaG93IHRoYXQgaW4gbWFueSByZWdpb25zIHRocm91Z2hvdXQgdGhlIHdvcmxkLCBwYXJ0aWFsbHkgaW5kZXBlbmRlbnQgdGVycml0b3JpZXMgc3VjaCBhcyA8c3BhbiBjbGFzcz1cImJkXCI+U2NvdGxhbmQ8L3NwYW4+LCBDYXRhbG9uaWEsIGFuZCBQdWVydG8gUmljbyB0ZW5kIHRvIGJlIHdlYWx0aGllciBhbmQgbW9yZSBzZWN1cmUgdGhhbiB0aGVpciBzb3ZlcmVpZ24gc3RhdGUgY291bnRlcnBhcnRzLiA8c3BhbiBjbGFzcz1cImJkXCI+R2FyeSBXaWxzb24gZmVlbHMgdGhhdCB0aGUgbW9zdCBwb3dlcmZ1bCBjb250cmlidXRpb24gb2ZmZXJlZCBieSB0aGUgYm9vayBpcyB0aGF0IGl0IG9mZmVycyBhIGNvbXBlbGxpbmcgY2FzZSBhZ2FpbnN0IHNlY2Vzc2lvbiBieSBkZW1vbnN0cmF0aW5nIHRoZSB2YXJpb3VzIGFkdmFudGFnZXMgb2YgXHUyMDFjcGFydGlhbCBpbmRlcGVuZGVuY2VcdTIwMWQgaW4gcmVsYXRpb24gdG8gaW5kZXBlbmRlbnQgc3RhdGVob29kLjwvc3Bhbj4mIzgyMjA7IiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJ1ZFwiPjxzcGFuIGNsYXNzPVwiYmlnIGJkXCI+TFNFIEFydGljbGU8L3NwYW4+PC9zcGFuPjxicj5BYnN0cmFjdCAuLi4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlNlY2Vzc2lvbmlzbSIsCiAgICAgICAgIlJlc2VhcmNoZWQgQ291cnNld29yayIKICAgIF0sCiAgICAiTElOSyI6IFsKICAgICAgICAiUmV6dmFuaSBib29rICh0ZXh0KSBodHRwOi8vMC13d3cub3hmb3Jkc2Nob2xhcnNoaXAuY29tLndhbS5jaXR5LmFjLnVrL3ZpZXcvMTAuMTA5My9hY3Byb2Y6b3NvLzk3ODAxOTk2ODg0OTQuMDAxLjAwMDEvYWNwcm9mLTk3ODAxOTk2ODg0OTQ/bnVsbCIsCiAgICAgICAgIlJldmlldyBmcm9tIExTRSBSZXZpZXcgb2YgQm9va3MgaHR0cDovL2Jsb2dzLmxzZS5hYy51ay9sc2VyZXZpZXdvZmJvb2tzLzIwMTQvMTAvMjgvYm9vay1yZXZpZXctc3VycGFzc2luZy10aGUtc292ZXJlaWduLXN0YXRlLXRoZS13ZWFsdGgtc2VsZi1ydWxlLWFuZC1zZWN1cml0eS1hZHZhbnRhZ2VzLW9mLXBhcnRpYWxseS1pbmRlcGVuZGVudC10ZXJyaXRvcmllcy1ieS1kYXZpZC1hLXJlenZhbmkvIiwKICAgICAgICAiQmFydG9zeiBsaW5rIGh0dHBzOi8vd3d3LnByb2plY3Qtc3luZGljYXRlLm9yZy9jb21tZW50YXJ5L2NhdGFsb25pYS1pbmRlcGVuZGVuY2UtZWxlY3Rpb24tYnktYmVuaXRvLWFycnVuYWRhLWFuZC12aWN0b3ItbGFwdWVudGUtZ2luZS0yMDE1LTA5P2JhcnJpZXI9dHJ1ZSIsCiAgICAgICAgIkxTRSBBcnRpY2xlIGh0dHA6Ly93d3cubHNlLmFjLnVrL2dlb2dyYXBoeUFuZEVudmlyb25tZW50L3Jlc2VhcmNoL1Jlc2VhcmNocGFwZXJzL3JwNzIucGRmIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJTZWNlc3Npb25pc20gJm1kYXNoOyBSZXNlYXJjaGVkIENvdXJzZXdvcmsiLAogICAgIk5BTUUiOiAiU2VjZXNzaW9uaXNtIiwKICAgICJOVU1CRVIiOiAiMTYwIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDb25jbHVzaW9ucyBvZiBBbGFuIERhc2h3b29kJ3MgRmViIDIwMTYgQXJ0aWNsZSIsCiAgICAgICAgIkZ1bGwgdGV4dCBvZiBBbGFuIERhc2h3b29kJ3MgQXJ0aWNsZSBvbiBDYW1lcm9uJ3MgRmViIDIwMTYgQWdyZWVtZW50IgogICAgXQp9LAp7CiAgICAiWUVBUiI6ICIxOTc4IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlJlc2VhcmNoZWQgQ291cnNld29yayIKICAgIF0sCiAgICAiTkFNRSI6ICJWYW4gVGlnZ2VsZSIsCiAgICAiUkVMQVRFRCI6IFsKICAgICAgICAiU2NvdGNoIFdoaXNreSBBc3NvY2lhdGlvbiIsCiAgICAgICAgIkZhY2NpbmkgRG9yaSIsCiAgICAgICAgIk1hcmxlYXNpbmcgdiBMYSBDb21tZXJjaWFsIEludGVybmFjaW9uYWxlIGRlIEFsaW1lbnRhY2lvbiIsCiAgICAgICAgIlRyb2phbmkiLAogICAgICAgICJBZG1pbmlzdHJhemlvbmUgZGVsbGUgRmluYW56ZSB2IFNpbW1lbnRoYWwgU3BBIChubyAyKSIsCiAgICAgICAgIkFkb3VpIGFuZCBDb3JudWFpbGxlIiwKICAgICAgICAiVmFuIER1eW4iLAogICAgICAgICJDYXBvbG9uZ28gdiBNYXlhIiwKICAgICAgICAiS2VtcGYiLAogICAgICAgICJSIChleCBwLiBGYWN0b3J0YW1lIEx0ZCkgdiBTZWMgb2YgU3RhdGUgZm9yIFRyYW5zcG9ydCIsCiAgICAgICAgIk1jQ2FydGh5IiwKICAgICAgICAiQmF1bWJhc3QiCiAgICBdLAogICAgIk5VTUJFUiI6ICIxNjEiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkNpdGVkIGEgZnVjayBvZiBhIGxvdCBpbiA8c3BhbiBjbGFzcz1cImxuayBjYXNlbG5cIj5TY290Y2ggV2hpc2t5IEFzc29jaWF0aW9uPC9zcGFuPiBhbmQgQUcgQm90JiM4MjE3O3Mgb3BpbmlvbiB0aGVyZW9uLiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiVmFuIFRpZ2dlbGUgWzE5NzhdIEVDUiAxOTc4IiwKICAgICJDQVNFTlVNIjogIkMtODIvNzciLAogICAgIkNBVEVHT1JZIjogIlJlc2VhcmNoZWQgQ291cnNld29yayIKfSwKewogICAgIlRZUEUiOiAiVG9vbHMiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj5Pc2NvbGEgUmVmZXJlbmNpbmcgVG9vbDwvc3Bhbj4iCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlJlc2VhcmNoZWQgQ291cnNld29yayIKICAgIF0sCiAgICAiTElOSyI6IFsKICAgICAgICAiT3Njb2xhIFJlZmVyZW5jaW5nIFRvb2wgaHR0cDovL3d3dy5sYXd0ZWFjaGVyLm5ldC9vc2NvbGEtcmVmZXJlbmNpbmcvcmVmZXJlbmNlLnBocCIKICAgIF0sCiAgICAiQ0FURUdPUlkiOiAiUmVzZWFyY2hlZCBDb3Vyc2V3b3JrIiwKICAgICJOQU1FIjogIlJlc2VhcmNoIFN0dWZmIiwKICAgICJOVU1CRVIiOiAiMTYyIiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiVXNlZnVsIgogICAgXQp9LAp7CiAgICAiV0lLSUxJTksiOiBbCiAgICAgICAgImh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FsY29ob2xfJTI4TWluaW11bV9QcmljaW5nJTI5XyUyOFNjb3RsYW5kJTI5X0FjdF8yMDEyIgogICAgXSwKICAgICJUWVBFIjogIlN0YXR1dGUiLAogICAgIlNVTU1BUlkiOiBbCiAgICAgICAgIkF0IGlzc3VlIGluIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPlNjb3RjaCBXaGlza3kgQXNzb2NpYXRpb248L3NwYW4+LiIKICAgIF0sCiAgICAiTkFNRSI6ICJBbGNvaG9sIChNaW5pbXVtIFByaWNpbmcpIChTY290bGFuZCkgQWN0IDIwMTIiLAogICAgIkxFR0lMSU5LIjogWwogICAgICAgICJodHRwOi8vd3d3LmxlZ2lzbGF0aW9uLmdvdi51ay9hc3AvMjAxMi80L2NvbnRlbnRzIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTYzIgp9LAp7CiAgICAiWUVBUiI6ICIyMDE1IiwKICAgICJUWVBFIjogIkNhc2UiLAogICAgIkhFTEQiOiBbCiAgICAgICAgInBhcmEgMiBvZiByYXRpbyBwYXJ0IG9mIGp1ZGdtZW50Ojxicj4mZW1zcDsmZW1zcDtBcnRpY2xlcyAzNCBURkVVIGFuZCAzNiBURkVVIG11c3QgYmUgaW50ZXJwcmV0ZWQgYXMgPHNwYW4gY2xhc3M9XCJiZFwiPnByZWNsdWRpbmcgYSBNZW1iZXIgU3RhdGUgY2hvb3Npbmc8L3NwYW4+LCBpbiBvcmRlciB0byBwdXJzdWUgdGhlIG9iamVjdGl2ZSBvZiB0aGUgcHJvdGVjdGlvbiBvZiBodW1hbiBsaWZlIGFuZCBoZWFsdGggYnkgbWVhbnMgb2YgaW5jcmVhc2luZyB0aGUgcHJpY2Ugb2YgdGhlIGNvbnN1bXB0aW9uIG9mIGFsY29ob2wsIDxzcGFuIGNsYXNzPVwiYmRcIj50aGUgb3B0aW9uIG9mIGxlZ2lzbGF0aW9uPC9zcGFuPiwgc3VjaCBhcyB0aGF0IGF0IGlzc3VlIGluIHRoZSBtYWluIHByb2NlZWRpbmdzLCA8c3BhbiBjbGFzcz1cImJkXCI+d2hpY2ggaW1wb3NlcyBhIG1pbmltdW0gcHJpY2UgcGVyIHVuaXQgb2YgYWxjb2hvbCBmb3IgdGhlIHJldGFpbCBzZWxsaW5nIG9mIGFsY29ob2xpYyBkcmlua3MgYW5kIHJlamVjdGluZyBhIG1lYXN1cmU8L3NwYW4+LCBzdWNoIGFzIGluY3JlYXNlZCBleGNpc2UgZHV0aWVzLCA8c3BhbiBjbGFzcz1cImJkXCI+dGhhdCBtYXkgYmUgbGVzcyByZXN0cmljdGl2ZSBvZiB0cmFkZSBhbmQgY29tcGV0aXRpb24gd2l0aGluIHRoZSBFdXJvcGVhbiBVbmlvbjwvc3Bhbj4uIEl0IGlzIGZvciB0aGUgcmVmZXJyaW5nIGNvdXJ0IHRvIGRldGVybWluZSB3aGV0aGVyIHRoYXQgaXMgaW5kZWVkIHRoZSBjYXNlIGhhdmluZyByZWdhcmQgdG8gYSBkZXRhaWxlZCBhbmFseXNpcyBvZiBhbGwgdGhlIHJlbGV2YW50IGZhY3RvcnMgaW4gdGhlIGNhc2UgYmVmb3JlIGl0LiBUaGUgZmFjdCB0aGF0IHRoZSBsYXR0ZXIgbWVhc3VyZSBtYXkgcHJvY3VyZSBhZGRpdGlvbmFsIGJlbmVmaXRzIGFuZCBiZSBhIGJyb2FkZXIgcmVzcG9uc2UgdG8gdGhlIG9iamVjdGl2ZSBvZiBjb21iYXRpbmcgYWxjb2hvbCBtaXN1c2UgY2Fubm90IGluIGl0c2VsZiBqdXN0aWZ5IHRoZSByZWplY3Rpb24gb2YgdGhhdCBtZWFzdXJlLjxicj4mZW1zcDsmZW1zcDs8c3BhbiBjbGFzcz1cImlsY1wiPkluIG90aGVyIHdvcmRzLCB3aHkgZGlkbiYjODIxNzt0IHRoZXkganVzdCByYWlzZSB0YXggdG8gaGF2ZSB0aGUgc2FtZSBlZmZlY3Q/IFdoYXQsIGluIGZhY3QsIHdvdWxkIHRoZSBpbXBsaWNhdGlvbnMgaGF2ZSBiZWVuIG9mIGZpbmRpbmcgPHNwYW4gY2xhc3M9XCJpdFwiPmFnYWluc3Q8L3NwYW4+IHRoZSBTV0EsIGkuZS4sIHRoYXQgdGhlIG1lYXN1cmUgd2FzIDxzcGFuIGNsYXNzPVwiaXRcIj52YWxpZDwvc3Bhbj4/PC9zcGFuPiIKICAgIF0sCiAgICAiTElOSyI6IFsKICAgICAgICAiZXVsYXdyYWRhci5jb20gYXJ0aWNsZSBodHRwOi8vZXVsYXdyYWRhci5jb20vY2FzZS1jLTMzMzE0LXRoZS1zY290Y2gtd2hpc2t5LWFzc29jaWF0aW9uLXRoZS1tYXJrZXQtc3Bpcml0LWZvci10aGUtc3Bpcml0LW1hcmtldC8iLAogICAgICAgICJUYXhqb3VybmFsLmNvbSBhcnRpY2xlIFtsb2NhbF1hcnRpY2xlcy1hbmQtcmVzb3VyY2VzL1Njb3RjaC1XaGlza3ktQXNzb2NpYXRpb24tSnVzdGlmeWluZy1CYXJyaWVycy10by1UcmFkZS1hcnRpY2xlLWZyb20tVGF4Sm91cm5hbC1kb3QtY29tLnBkZiIsCiAgICAgICAgIkp1ZGdtZW50IHBkZiAobG9jYWwpIFtsb2NhbF1hcnRpY2xlcy1hbmQtcmVzb3VyY2VzL0Nhc2UtMzMzLW9mLTE0LWp1ZGdtZW50LnBkZiIsCiAgICAgICAgIkFHIEJvdCdzIG9waW5pb24gKGxvY2FsKSBbbG9jYWxdYXJ0aWNsZXMtYW5kLXJlc291cmNlcy9DYXNlLTMzMy1vZi0xNC1vcGluaW9uLW9mLUFHLUJvdC5wZGYiLAogICAgICAgICJnYXZjbGF3LmNvbSBibG9nIG9uIFZpbmRrcmFmdCBjYXNlIGh0dHBzOi8vZ2F2Y2xhdy5jb20vMjAxNC8wNy8wOS9yZW5ld2FibGUtZW5lcmd5LWFuZC10cmFkZS1ub3ctaXRzLWFsbC1jbGVhci1lc3NlbnQtaXQtdGhlLWVjai1pbi12aW5ka3JhZnQvIiwKICAgICAgICAiRGlyZWN0aXZlIDcwLzUwL0VFQyBodHRwOi8vZXVyLWxleC5ldXJvcGEuZXUvbGVnYWwtY29udGVudC9FTi9UWFQvSFRNTC8/dXJpPUNFTEVYOjMxOTcwTDAwNTAmZnJvbT1FTiIKICAgIF0sCiAgICAiQ0FURUdPUklFUyI6IFsKICAgICAgICAiUG9saXRpY3MiLAogICAgICAgICJGcmVlIE1vdmVtZW50IG9mIEdvb2RzIiwKICAgICAgICAiQXJ0aWNsZSAzNCBURkVVIiwKICAgICAgICAiQXJ0aWNsZSAzNiBURkVVIiwKICAgICAgICAiUmVzZWFyY2hlZCBDb3Vyc2V3b3JrIgogICAgXSwKICAgICJOQU1FIjogIlNjb3RjaCBXaGlza3kgQXNzb2NpYXRpb24iLAogICAgIlJFTEFURUQiOiBbCiAgICAgICAgIkNvbW1pc3Npb24gdiBUaGUgTmV0aGVybGFuZHMiLAogICAgICAgICJDYWRza3kiLAogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKFN0YXRpc3RpY2FsIERhdGEgTGV2eSkiLAogICAgICAgICJCYXVodWlzIHYgTmV0aGVybGFuZHMiLAogICAgICAgICJDb21taXNzaW9uIHYgSXRhbHkgKEFydCBUcmVhc3VyZXMpIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IFVLIChXaW5lIGFuZCBCZWVyKSIsCiAgICAgICAgIkpvdXN0cmEiLAogICAgICAgICJDaGVtaWFsIEZhcm1hY2V1dGljaSB2IERBRiIsCiAgICAgICAgIlZhbiBUaWdnZWxlIiwKICAgICAgICAiQnJlc2NpYW5pIHYgSXRhbGlhbiBGaW5hbmNlIEFkbWluaXN0cmF0aW9uIiwKICAgICAgICAiQ29tbWlzc2lvbiB2IEZyYW5jZSIsCiAgICAgICAgIkJvYmllIEdldHJhZW5rZXZlcnRyaWViIHYgSGF1cHR6b2xsYW10IEFhY2hlbi1Ob3JkIgogICAgXSwKICAgICJOVU1CRVIiOiAiMTY0IiwKICAgICJTVU1NQVJZIjogWwogICAgICAgICJUaGUgbGVnYWxpdHkgb2YgdGhlIDxzcGFuIGNsYXNzPVwibG5rIGNhc2VsblwiPkFsY29ob2wgKE1pbmltdW0gUHJpY2luZykgKFNjb3RsYW5kKSBBY3QgMjAxMjwvc3Bhbj4gaW50cm9kdWNpbmcgPHNwYW4gY2xhc3M9XCJiZFwiPk1pbmltdW0gUHJpbmNpbmcgcGVyIFVuaXQ8L3NwYW4+ICZtZGFzaDsgb25lIG1lYXN1cmUgb2YgbWFueSBhdHRlbXB0aW5nIHRvIGFkZHJlc3MgdGhlIHBlcmVubmlhbCBhbmQgdGhvcm55IGlzc3VlIG9mIFNjb3RsYW5kJiM4MjE3O3MgYXBwYWxsaW5nIHB1YmxpYyBoZWFsdGggJm1kYXNoOyB3YXMgY2hhbGxlbmdlZCBvbiB0aGUgYmFzaXMgdGhhdCBpdCBkaWQgPHNwYW4gY2xhc3M9XCJiZFwiPm5vdDwvc3Bhbj4gY29uc3RpdHV0ZSBhIHZhbGlkIHB1YmxpYy1oZWFsdGggZGVycm9nYXRpb24gZnJvbSB0aGUgPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+QXJ0IDM0IFRGRVU8L3NwYW4+IHByb2hpYml0aW9uIG9mIG1lYXN1cmVzIG9mIGVxdWl2YWxlbnQgZWZmZWN0IHRvIHF1YW50aXRpdmUgcmVzdHJpY3Rpb25zLiIKICAgIF0sCiAgICAiQ0lUQVRJT04iOiAiU2NvdGNoIFdoaXNreSBBc3NvY2lhdGlvbiBbMjAxNV0gRUNMSTpFVTpDOjIwMTU6ODQ1IiwKICAgICJGTEFHUyI6IFsKICAgICAgICAiU0MiLAogICAgICAgICJHQiIsCiAgICAgICAgIkVVIiwKICAgICAgICAiSW1wb3J0YW50IiwKICAgICAgICAiQ291cnNld29yayIKICAgIF0sCiAgICAiQ0FTRU5VTSI6ICJDLTMzMy8xNCIsCiAgICAiQ0FURUdPUlkiOiAiUG9saXRpY3MgJm1kYXNoOyBGcmVlIE1vdmVtZW50IG9mIEdvb2RzICZtZGFzaDsgQXJ0aWNsZSAzNCBURkVVICZtZGFzaDsgQXJ0aWNsZSAzNiBURkVVICZtZGFzaDsgUmVzZWFyY2hlZCBDb3Vyc2V3b3JrIgp9LAp7CiAgICAiWUVBUiI6ICIyMDE2IiwKICAgICJUWVBFIjogIkFydGljbGUiLAogICAgIkxJTksiOiBbCiAgICAgICAgIlBERiBmcm9tIGhlbmRlcnNvbmNoYW1iZXJzLmNvLnVrIGh0dHA6Ly93d3cuaGVuZGVyc29uY2hhbWJlcnMuY28udWsvd3AtY29udGVudC91cGxvYWRzLzIwMTYvMDIvU2lyLUFsYW4tRGFzaG9vZC1RQzEucGRmIgogICAgXSwKICAgICJOQU1FIjogIkNvbmNsdXNpb25zIG9mIEFsYW4gRGFzaHdvb2QncyBGZWIgMjAxNiBBcnRpY2xlIiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJGdWxsIHRleHQgb2YgQWxhbiBEYXNod29vZCdzIEFydGljbGUgb24gQ2FtZXJvbidzIEZlYiAyMDE2IEFncmVlbWVudCIsCiAgICAgICAgIlNlY2Vzc2lvbmlzbSIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiU2VlIGFsc28gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+RnVsbCB0ZXh0IG9mIEFsYW4gRGFzaHdvb2QmIzgyMTc7cyBBcnRpY2xlIG9uIENhbWVyb24mIzgyMTc7cyBGZWIgMjAxNiBBZ3JlZW1lbnQ8L3NwYW4+Ljxicj48c3BhbiBjbGFzcz1cImJkXCI+JmNvcHk7IDIwMTYsIDxzcGFuIGNsYXNzPVwiaXRcIj5TaXIgQWxhbiBEYXNod29vZCBRQzwvc3Bhbj48L3NwYW4+PGJyPiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJpZyBiZFwiPlN1bW1hcnkgb2YgY29uY2x1c2lvbnM8L3NwYW4+PC9zcGFuPjxicj4mZW1zcDsmZW1zcDsoaSkgT25jZSBpdCBlbnRlcnMgaW50byBmb3JjZSwgdGhlIEhTRyBEZWNpc2lvbiB3aWxsIGhhdmUgdGhlIGxlZ2FsIGNoYXJhY3RlciBhbmQgZWZmZWN0IG9mIGEgYmluZGluZyBpbnRlcm5hdGlvbmFsIGFncmVlbWVudCwgb24gYWxsIGZvdXJzIHdpdGggdGhlIERlY2lzaW9uIG9uIERlbm1hcmsgb2YgMTk5MiBhbmQgdGhlIERlY2lzaW9uIG9uIElyZWxhbmQgb2YgMjAwOS48YnI+JmVtc3A7JmVtc3A7KGlpKSBBcyB0byBlY29ub21pYyBnb3Zlcm5hbmNlLCBmcm9tIHRoZSBlbnRyeSBpbnRvIGZvcmNlIG9mIHRoZSBIU0cgRGVjaXNpb24sIHRoZXJlIHdpbGwgYmUgYSBsZWdhbGx5IGJpbmRpbmcgb2JsaWdhdGlvbjo8YnI+JmVtc3A7JmVtc3A7JmVtc3A7JmVtc3A7JmJ1bGw7IHRoYXQgdGhlIHByaW5jaXBsZXMgbGFpZCBkb3duIGluIFNlY3Rpb24gQSBvZiB0aGUgRGVjaXNpb24gYmUgdGFrZW4gaW50byBjb25zaWRlcmF0aW9uIGZvciB0aGUgaW50ZXJwcmV0YXRpb24gb2YgdGhlIEVVIFRyZWF0aWVzIChhbmQgY29uc2VxdWVudGx5IG9mIGFueSBtZWFzdXJlcyBiYXNlZCBvbiB0aGVtKTsgd2hlbiBldmVudHVhbGx5IGluY29ycG9yYXRlZCBpbnRvIHRoZSBUcmVhdGllcyBvciBhbm5leGVkIHRvIHRoZW0gYXMgYSBQcm90b2NvbCwgdGhlIHByaW5jaXBsZXMgd2lsbCBhY3F1aXJlIHRoZSBzdGF0dXMgb2YgcHJpbWFyeSBFVSBsYXc7IGFuZDxicj4mZW1zcDsmZW1zcDsmZW1zcDsmZW1zcDsmYnVsbDsgdGhhdCB0aGUgc2FmZWd1YXJkIG1lY2hhbmlzbSByZWZlcnJlZCB0byBpbiBTZWN0aW9uIEEgYmUgZXN0YWJsaXNoZWQgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBIU0cgU3RhdGVtZW50IGFubmV4ZWQgdG8gdGhlIEhTRyBEZWNpc2lvbiwgdGhyb3VnaCB0aGUgaW1tZWRpYXRlIGFkb3B0aW9uIG9mIHRoZSBEcmFmdCBDb3VuY2lsIERlY2lzaW9uIGFubmV4ZWQgdG8gdGhhdCBTdGF0ZW1lbnQsIHdoaWNoIHdpbGwgc3VwcGxlbWVudCBEZWNpc2lvbiAyMDA5Lzg1NzsgZm9sbG93aW5nIHRoZSBhZG9wdGlvbiBvZiB0aGUgRGVjaXNpb24sIHRoZSBzYWZlZ3VhcmQgbWVjaGFuaXNtIHdpbGwgb3BlcmF0ZSBvbiB0aGUgYmFzaXMgb2YgRVUgbGF3IGFuZCB1bmRlciB0aGUgcHJvdGVjdGlvbiBvZiBQcm90b2NvbCA5Ljxicj4mZW1zcDsmZW1zcDsoaWlpKSBBcyB0byBjb21wZXRpdGl2ZW5lc3MsIHRoZSBjb21iaW5hdGlvbiBvZiBhIGJpbmRpbmcgbGVnYWwgY29tbWl0bWVudCBieSB0aGUgTWVtYmVyIFN0YXRlcyBhbmQgY2xlYXIgZXhwcmVzc2lvbnMgb2YgaW50ZW50aW9uIGJ5IHRoZSBFdXJvcGVhbiBDb3VuY2lsIGFuZCB0aGUgQ29tbWlzc2lvbiBzaG91bGQgYmUgc3VmZmljaWVudCB0byBlbnN1cmUgdGhhdCB0aGUgbW9tZW50dW0gc291Z2h0IHRvIGJlIGdpdmVuIHRvIGRldmVsb3BtZW50cyBpbiB0aGUgcmVsZXZhbnQgcG9saWN5IGFyZWFzIHdpbGwgYmUgc3VzdGFpbmVkLjxicj4mZW1zcDsmZW1zcDsoaWlpKSBBcyB0byBzb3ZlcmVpZ250eSwgZnJvbSB0aGUgZW50cnkgaW50byBmb3JjZSBvZiB0aGUgSFNHIERlY2lzaW9uOjxicj4mZW1zcDsmZW1zcDsmZW1zcDsmZW1zcDsmYnVsbDsgdGhlIGludGVycHJldGF0aW9uIG9mIFx1MjAxY2V2ZXIgY2xvc2VyIHVuaW9uXHUyMDFkIGluIFNlY3Rpb24gQyAoMSkgb2YgdGhlIEhTRyBEZWNpc2lvbiwgd2lsbCBiZWNvbWUgbGVnYWxseSBiaW5kaW5nOyB3aGVuIGV2ZW50dWFsbHkgaW5jb3Jwb3JhdGVkIGludG8gdGhlIFRyZWF0aWVzLCBpdCB3aWxsIGFjcXVpcmUgdGhlIGZvcmNlIG9mIHByaW1hcnkgRVUgbGF3XHUyMDE5Ozxicj4mZW1zcDsmZW1zcDsmZW1zcDsmZW1zcDsmYnVsbDsgdGhlIHJlcXVpcmVtZW50IHRoYXQgcmVhc29uZWQgb3BpbmlvbnMgb2YgbmF0aW9uYWwgcGFybGlhbWVudHMgYmUgZHVseSB0YWtlbiBpbnRvIGFjY291bnQgd2lsbCBiZWNvbWUgbGVnYWxseSBiaW5kaW5nIGFzIGEgQ291bmNpbCBjb25kdWN0IGFncmVlbWVudDs8YnI+JmVtc3A7JmVtc3A7JmVtc3A7JmVtc3A7JmJ1bGw7IHRoZSBcdTIwMWNyZWQgY2FyZCBwcm9jZWR1cmVcdTIwMWQgd2lsbCBiZWNvbWUgbGVnYWxseSBiaW5kaW5nIGFzIGEgQ291bmNpbCBjb25kdWN0IGFncmVlbWVudDs8YnI+JmVtc3A7JmVtc3A7JmVtc3A7JmVtc3A7JmJ1bGw7IHRoZSBkdXR5IHRvIGVuc3VyZSB0aGF0IFByb3RvY29scyAyMSBhbmQgMjIgYXBwbHkgdG8gYW55IHByb3Bvc2FsIHRoYXQgZmFsbHMgd2l0aGluIHRoZSBzY29wZSBvZiBUaXRsZSwgaWYgbmVjZXNzYXJ5IHNwbGl0dGluZyBvZmYgdGhlIFRpdGxlIFYgZWxlbWVudHMgZnJvbSB0aGUgcmVtYWluaW5nIGNvbnRlbnQsIHdpbGwgYmVjb21lIGxlZ2FsbHkgYmluZGluZyBhcyBhIENvdW5jaWwgY29uZHVjdCBhZ3JlZW1lbnQuPGJyPiZlbXNwOyZlbXNwOyZlbXNwOyZlbXNwOyZidWxsOyB0aGUgaW50ZXJwcmV0YXRpb25zIGluIFNlY3Rpb24gRCBvZiB0aGUgRHJhZnQgSFNHIERlY2lzaW9uLCByZWluZm9yY2VkIGJ5IHRoZSBDb21taXNzaW9uXHUyMDE5cyBpbnRlbmRlZCBcdTIwMWNjb21wbGVtZW50XHUyMDFkIHRvIERpcmVjdGl2ZSAyMDA0LzM4L0VDIGFuZCBpdHMgcHJvbWlzZWQgY2xhcmlmaWNhdGlvbnMsIHByb3ZpZGUgYSBzb3VuZCBiYXNpcyBmb3IgdGhlIHJvYnVzdCBhcHBsaWNhdGlvbiBvZiB0aGUgdmFyaW91cyBsaW1pdGF0aW9ucyBvbiByaWdodHMgb2YgZnJlZSBtb3ZlbWVudCB0aGF0IGFyZSByZWNvZ25pc2VkIGJ5IEVVIGxhdyBhbmQgYXJlIHVubGlrZWx5IHRvIGVuY291bnRlciB0aGUgZGlzYXBwcm92YWwgb2YgdGhlIENKRVU7PGJyPiZlbXNwOyZlbXNwOyZlbXNwOyZlbXNwOyZidWxsOyBpdCBjYW5ub3Qgc2VyaW91c2x5IGJlIGRvdWJ0ZWQgdGhhdCB0aGUgQ29tbWlzc2lvbiB3aWxsIGZ1bGZpbCBpdHMgdW5kZXJ0YWtpbmcgdG8gYnJpbmcgZm9yd2FyZCB0aGUgdHdvIHByb3Bvc2FscyBuZWNlc3NhcnkgZm9yIHRoZSBhbWVuZG1lbnQgb2YsIHJlc3BlY3RpdmVseSwgUmVndWxhdGlvbiA4ODMvMjAwNC9FQywgYXMgdG8gdGhlIGluZGV4aW5nIG9mIGNoaWxkIGJlbmVmaXRzLCBhbmQgUmVndWxhdGlvbiA0OTIvMjAxMS9FQywgYXMgdG8gdGhlIGVzdGFibGlzaG1lbnQgb2YgYSBzYWZlZ3VhcmQgbWVjaGFuaXNtIGFwcGxpY2FibGUgdG8gaW4tIHdvcmsgYmVuZWZpdHM7IG5vciB0aGF0IHRoZSBDb3VuY2lsIHdpbGwgZmFpbCB0byBkZWFsIHdpdGggdGhlIHByb3Bvc2FscyBleHBlZGl0aW91c2x5OyBub3IgaXMgaXQgcGxhdXNpYmxlIHRoYXQgdGhlIFBhcmxpYW1lbnQgd291bGQgc2VlIGFueSBwb2xpdGljYWwgYWR2YW50YWdlIGluIHB1dHRpbmcgdGhlIG5ldyBzZXR0bGVtZW50IHdpdGggdGhlIFVLIGluIGplb3BhcmR5OyBub3IsIGZpbmFsbHksIHdvdWxkIHRoZSBhbWVuZG1lbnRzIHJ1biBhIHNlcmlvdXMgcmlzayBvZiBiZWluZyBzdHJ1Y2sgZG93biBieSB0aGUgQ0pFVS4iLAogICAgICAgICI8YnI+PHNwYW4gY2xhc3M9XCJpdFwiPlNpciBBbGFuIERhc2h3b29kIFFDPC9zcGFuPiwgMjB0aCBGZWJydWFyeSAyMDE2IgogICAgXSwKICAgICJDQVRFR09SSUVTIjogWwogICAgICAgICJQb2xpdGljcyIsCiAgICAgICAgIkJyZXhpdCIsCiAgICAgICAgIkFydGljbGVzIgogICAgXSwKICAgICJGTEFHUyI6IFsKICAgICAgICAiSW1wb3J0YW50IiwKICAgICAgICAiRGFzaHdvb2QiLAogICAgICAgICIyMDE1LzIwMTYhIgogICAgXSwKICAgICJDQVRFR09SWSI6ICJQb2xpdGljcyAmbWRhc2g7IEJyZXhpdCAmbWRhc2g7IEFydGljbGVzIiwKICAgICJOVU1CRVIiOiAiMTY1Igp9LAp7CiAgICAiWUVBUiI6ICIyMDE2IiwKICAgICJUWVBFIjogIkFydGljbGUiLAogICAgIkxJTksiOiBbCiAgICAgICAgIlBERiBmcm9tIGhlbmRlcnNvbmNoYW1iZXJzLmNvLnVrIGh0dHA6Ly93d3cuaGVuZGVyc29uY2hhbWJlcnMuY28udWsvd3AtY29udGVudC91cGxvYWRzLzIwMTYvMDIvU2lyLUFsYW4tRGFzaG9vZC1RQzEucGRmIgogICAgXSwKICAgICJOQU1FIjogIkZ1bGwgdGV4dCBvZiBBbGFuIERhc2h3b29kJ3MgQXJ0aWNsZSBvbiBDYW1lcm9uJ3MgRmViIDIwMTYgQWdyZWVtZW50IiwKICAgICJSRUxBVEVEIjogWwogICAgICAgICJDb25jbHVzaW9ucyBvZiBBbGFuIERhc2h3b29kJ3MgRmViIDIwMTYgQXJ0aWNsZSIsCiAgICAgICAgIlNlY2Vzc2lvbmlzbSIKICAgIF0sCiAgICAiU1VNTUFSWSI6IFsKICAgICAgICAiU2VlIGFsc28gPHNwYW4gY2xhc3M9XCJsbmsgY2FzZWxuXCI+Q29uY2x1c2lvbnMgb2YgQWxhbiBEYXNod29vZCYjODIxNztzIEZlYiAyMDE2IEFydGljbGU8L3NwYW4+LiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJpZyBiZFwiPkEgJiM4MjIwO0xFR0FMTFkgQklORElORyBBTkQgSVJSRVZFUlNJQkxFJiM4MjIxOyBBR1JFRU1FTlQgT04gVEhFIFJFRk9STSBPRiBUSEUgRVU8L3NwYW4+PC9zcGFuPjxicj48c3BhbiBjbGFzcz1cImJkXCI+JmNvcHk7IDIwMTYsIDxzcGFuIGNsYXNzPVwiaXRcIj5TaXIgQWxhbiBEYXNod29vZCBRQzwvc3Bhbj48L3NwYW4+PGJyPjxicj4mZW1zcDsmZW1zcDtUaGlzIE5vdGUgYWRkcmVzc2VzIHRoZSBxdWVzdGlvbiB3aGV0aGVyIHRoZSBhZ3JlZW1lbnQgcmVwcmVzZW50aW5nIHRoZSBvdXRjb21lIG9mIHRoZSBuZWdvdGlhdGlvbnMgYmV0d2VlbiB0aGUgVW5pdGVkIEtpbmdkb20gYW5kIHRoZSBFdXJvcGVhbiBVbmlvbiBvbiB0aGUgcmVmb3JtIG9mIHRoZSBFVSBjYW4gYXBwcm9wcmlhdGVseSBiZSBjaGFyYWN0ZXJpc2VkLCBpbiB0aGUgUHJpbWUgTWluaXN0ZXJcdTIwMTlzIHBocmFzZSwgYXMgXHUyMDFjbGVnYWxseSBiaW5kaW5nIGFuZCBpcnJldmVyc2libGVcdTIwMWQuIFRoZSBvcmlnaW5hbCB2ZXJzaW9uIG9mIHRoZSBOb3RlIHdhcyBzdWJtaXR0ZWQgYXMgd3JpdHRlbiBldmlkZW5jZSB0byB0aGUgSG91c2Ugb2YgQ29tbW9ucyBFdXJvcGVhbiBTY3J1dGlueSBDb21taXR0ZWUgKFx1MjAxY3RoZSBTY3J1dGlueSBDb21taXR0ZWVcdTIwMWQpLCBmb2xsb3dpbmcgb24gZnJvbSBvcmFsIGV2aWRlbmNlIHRoYXQgSSBnYXZlLCB0b2dldGhlciB3aXRoIFNpciBGcmFuY2lzIEphY29icyBRQyBhbmQgTWFydGluIEhvd2UgUUMsIG9uIDE4IE5vdmVtYmVyIDIwMTUuMSBUaGF0IHZlcnNpb24gd2FzIHByZXBhcmVkIGluIHJlbGF0aW9uIHRvIHRoZSBkcmFmdCB0ZXh0cyBhY2NvbXBhbnlpbmcgdGhlIGxldHRlciBkYXRlZCAyIEZlYnJ1YXJ5IDIwMTYgZnJvbSBNciBEb25hbGQgVHVzaywgdGhlIFByZXNpZGVudCBvZiB0aGUgRXVyb3BlYW4gQ291bmNpbCwgdG8gdGhlIFByaW1lIE1pbmlzdGVyLiBBcyBwcmVzZW50ZWQgaGVyZSwgdGhlIE5vdGUgcmVsYXRlcyB0byB0aGUgYWdyZWVtZW50IGZpbmFsbHkgcmVhY2hlZCBvbiAxOSBGZWJydWFyeSAyMDE2LCB3aGljaCBkaWZmZXJzIGluIHNvbWUgcmVzcGVjdHMgZnJvbSB0aGUgdGV4dHMgY2lyY3VsYXRlZCBvbiAyIEZlYnJ1YXJ5LCBidXQgbm90IHNvIGFzIHRvIGNhdXNlIG1lIHRvIHRha2UgYSBkaWZmZXJlbnQgdmlldyBvZiB0aGUgbWF0dGVycyBkaXNjdXNzZWQuPGJyPiZlbXNwOyZlbXNwO0kgYmVnaW4gYnkgYnJpZWZseSBjb25zaWRlcmluZyB0aGUgbGVnYWwgY2hhcmFjdGVyIG9mIHRoZSBEZWNpc2lvbiBvZiB0aGUgSGVhZHMgb2YgU3RhdGUgb3IgR292ZXJubWVudCwgbWVldGluZyB3aXRoaW4gdGhlIEV1cm9wZWFuIENvdW5jaWwgKFx1MjAxY3RoZSBIU0cgRGVjaXNpb25cdTIwMWQgb3IgXHUyMDFjdGhlIERlY2lzaW9uXHUyMDFkKSwgd2hpY2ggaXMgdGhlIGNlbnRyZXBpZWNlIG9mIHRoZSBhZ3JlZW1lbnQuIFRoZW4gSSBnbyBvbiB0byBjb25zaWRlciB0aGUgc3BlY2lmaWMgbGVnYWwgYXJyYW5nZW1lbnRzIHRoZSBEZWNpc2lvbiBjb250ZW1wbGF0ZXMgZm9yIGltcGxlbWVudGluZyB0aGUgZm91ciBcdTIwMWNiYXNrZXRzXHUyMDFkLCBhcyBNciBUdXNrIGNhbGxlZCB0aGVtLCBUaGUgUmVwb3J0IG9mIHRoZSBTY3J1dGlueSBDb21taXR0ZWUgd2FzIHB1Ymxpc2hlZCBvbiAxNSBEZWNlbWJlciAyMDE1LiBJdHMgQ2hhcHRlciAzIGhhcyB0aGUgaGVhZGluZywgXHUyMDFjQSBsZWdhbGx5IGJpbmRpbmcgYW5kIElycmV2ZXJzaWJsZSBhZ3JlZW1lbnQ/XHUyMDFkIG9mIHRoZSBuZWdvdGlhdGluZyBhZ2VuZGEgc2V0IG91dCBpbiB0aGUgUHJpbWUgTWluaXN0ZXJcdTIwMTlzIGxldHRlciBvZiAxMCBOb3ZlbWJlciAyMDE1IChcdTIwMWN0aGUgMTAgTm92ZW1iZXIgbGV0dGVyXHUyMDFkKS4gVGhlIE5vdGUgZW5kcyB3aXRoIGEgc3VtbWFyeSBvZiBteSBjb25jbHVzaW9ucy4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPlRoZSBIU0cgRGVjaXNpb248L3NwYW4+PC9zcGFuPjxicj4mZW1zcDsmZW1zcDtEZWNpc2lvbnMgb2YgUmVwcmVzZW50YXRpdmVzIG9mIHRoZSBHb3Zlcm5tZW50cyBvZiB0aGUgTWVtYmVyIFN0YXRlcyBtZWV0aW5nIHdpdGhpbiB0aGUgQ291bmNpbCBhcmUgYSBmYW1pbGlhciBmZWF0dXJlIG9mIHRoZSBFVSBzeXN0ZW0uIFRoZXkgYXJlIHVzZWQgd2hlcmUgdGhlIE1lbWJlciBTdGF0ZXMgZXhlcmNpc2UgdGhlaXIgbmF0aW9uYWwgY29tcGV0ZW5jZXMgY29sbGVjdGl2ZWx5IHJhdGhlciB0aGFuIGFjdGluZyB0aHJvdWdoIHRoZSBDb3VuY2lsIGFzIGFuIGluc3RpdHV0aW9uIGV4ZXJjaXNpbmcgRVUgY29tcGV0ZW5jZXMuIEJhc2VkIG9uIGNvbnNlbnN1cyBiZXR3ZWVuIHRoZSBNZW1iZXIgU3RhdGVzLCB0aGV5IGNvbnN0aXR1dGUgYmluZGluZyBpbnRlcm5hdGlvbmFsIGFncmVlbWVudHMgaW4gc2ltcGxpZmllZCBmb3JtLjxicj4mZW1zcDsmZW1zcDtUaGVyZSBhcmUgcHJlY2VkZW50cyBmb3IgdGhlIGFkb3B0aW9uIG9mIHN1Y2ggRGVjaXNpb25zIGF0IHRoZSBsZXZlbCBvZiB0aGUgSGVhZHMgb2YgU3RhdGUgb3IgR292ZXJubWVudCBvZiB0aGUgTWVtYmVyIFN0YXRlcyBtZWV0aW5nIHdpdGhpbiB0aGUgRXVyb3BlYW4gQ291bmNpbCwgdG8gcmVzb2x2ZSBsZWdhbCBpc3N1ZXMgdGhhdCBoYXZlIGJlZW4gcmFpc2VkIGJ5IGEgTWVtYmVyIFN0YXRlLiBTdWNoIGFuIGluc3RydW1lbnQgd2FzIHVzZWQgaW4gRGVjZW1iZXIgMTk5MiB0byBhZGRyZXNzIERhbmlzaCBjb25jZXJucyByZWdhcmRpbmcgYXNwZWN0cyBvZiB0aGUgTWFhc3RyaWNodCBUcmVhdHkgKFx1MjAxY3RoZSBEZWNpc2lvbiBvbiBEZW5tYXJrXHUyMDFkKTsgYW5kIGFnYWluIGluIEp1bmUgMjAwOSB0byBhZGRyZXNzIGNlcnRhaW4gY29uY2VybnMgb2YgSXJlbGFuZCByZWdhcmRpbmcgdGhlIFRyZWF0eSBvZiBMaXNib24gKFx1MjAxY3RoZSBEZWNpc2lvbiBvbiBJcmVsYW5kXHUyMDFkKS4gQm90aCBvZiB0aG9zZSBEZWNpc2lvbnMgd2VyZSByZWdpc3RlcmVkIHdpdGggdGhlIFVOIFNlY3JldGFyaWF0IGFzIHRyZWF0aWVzIGluIGFjY29yZGFuY2Ugd2l0aCBBcnRpY2xlIDEwMiBvZiB0aGUgVU4gQ2hhcnRlci4gSW4gZWFjaCBjYXNlLCBtb3Jlb3ZlciwgdGhlIERlY2lzaW9uIHdhcyBmb2xsb3dlZCB1cCBieSBhIFByb3RvY29sLCBhZGRlZCB0byB0aGUgVHJlYXRpZXMgb24gdGhlIGNvbmNsdXNpb24gb2YsIHJlc3BlY3RpdmVseSwgdGhlIEFtc3RlcmRhbSBUcmVhdHkgYW5kIHRoZSBBY2Nlc3Npb24gVHJlYXR5IHdpdGggQ3JvYXRpYS48YnI+JmVtc3A7JmVtc3A7VGhlIFNjcnV0aW55IENvbW1pdHRlZVx1MjAxOXMgUmVwb3J0IG9mIDE1IERlY2VtYmVyIDIwMTUgcmVmZXJyZWQgdG8gdGhlIHZpZXcsIHdoaWNoIGhhcyBiZWVuIGV4cHJlc3NlZCBieSBNciBKZWFuLUNsYXVkZSBQaXJpcywgZm9ybWVybHkgRGlyZWN0b3IgR2VuZXJhbCBvZiB0aGUgTGVnYWwgU2VydmljZSBvZiB0aGUgQ291bmNpbCwgdGhhdCB0aG9zZSBEZWNpc2lvbnMgZG8gbm90IGNvbnN0aXR1dGUgYSBwcmVjZWRlbnQgZm9yIGEgRGVjaXNpb24gY29udGFpbmluZyBhIGxlZ2FsbHkgYmluZGluZyBjb21taXRtZW50IHRvIGFtZW5kIHRoZSBUcmVhdGllcy4gSGUgYXJndWVzIHRoYXQgc3VjaCBhIGNvbW1pdG1lbnQsIHdoaWNoIGhlIGRlc2NyaWJlcyBhcyBhbiBcdTIwMWNpbGxlZ2FsIHRyaWNrXHUyMDFkLCB3b3VsZCBiZSB0YW50YW1vdW50IHRvIGFtZW5kaW5nIHRoZSBUcmVhdGllcyB3aXRob3V0IHJlY291cnNlIHRvIHRoZSBwcm9wZXIgcHJvY2VkdXJlLiBXaXRoIGFsbCB0aGUgcmVzcGVjdCBJIGhhdmUgZm9yIHNvIGdyZWF0IGEgbGF3eWVyLCBJIGRvIG5vdCBlbnRpcmVseSBzaGFyZSBNciBQaXJpc1x1MjAxOXMgdmlldy4gSW4gbXkgb3BpbmlvbiwgdGhlcmUgaXMgYSBjbGVhciBkaXN0aW5jdGlvbiBiZXR3ZWVuIHB1cnBvcnRpbmcgdG8gYW1lbmQgdGhlIFRyZWF0aWVzIGJ5IGEgcHJvY2VkdXJlIG90aGVyIHRoYW4gb25lIG9mIHRob3NlIGxhaWQgZG93biBieSBBcnRpY2xlIDQ4IFRFVSBhbmQgYSBiaW5kaW5nIHVuZGVydGFraW5nLCBzdWJqZWN0IHRvIE1lbWJlciBTdGF0ZXNcdTIwMTkgY29uc3RpdHV0aW9uYWwgcmVxdWlyZW1lbnRzLCB0byBpbnRyb2R1Y2UgZnV0dXJlIGNoYW5nZXMuIFN1Y2ggYW4gdW5kZXJ0YWtpbmcgd291bGQgbGVhdmUgdGhlIFRyZWF0aWVzIGludGFjdCBmb3IgdGhlIHRpbWUgYmVpbmcuIEl0IHdvdWxkIHNpbXBseSBwdXQgdGhlIE1lbWJlciBTdGF0ZXMsIHdobyBhcmUgdGhlIGFyY2hpdGVjdHMgb2YgdGhlIFVuaW9uLCB1bmRlciBhIGxlZ2FsIG9ibGlnYXRpb24gdG8gZWZmZWN0IHRoZSBhZ3JlZWQgY2hhbmdlcyBhdCBhIGNvbnZlbmllbnQgbW9tZW50Ljxicj4mZW1zcDsmZW1zcDtIb3dldmVyLCB0aGVyZSBpcyBubyBuZWVkIHRvIGFyZ3VlIHRoaXMgcmF0aGVyIGFyY2FuZSBwb2ludCB0aHJvdWdoIHRvIGEgY29uY2x1c2lvbiBiZWNhdXNlLCBhcyB0aGUgYW5hbHlzaXMgYmVsb3cgd2lsbCBzaG93LCB0aGUgSFNHIERlY2lzaW9uIGRvZXMgbm90IGNhbGwgZm9yIHRoZSBhbWVuZG1lbnQgb2YgdGhlIFRyZWF0aWVzLiBJbiB0d28gaW5zdGFuY2VzLCB0aGUgVUtcdTIwMTlzIHdpc2ggdGhhdCBjZXJ0YWluIG1hdHRlcnMgYmUgaW5jb3Jwb3JhdGVkIGV2ZW50dWFsbHkgaW50byB0aGUgVHJlYXRpZXMgaGFzIGJlZW4gZ3JhbnRlZCwgYnV0IHRoZXNlIGFyZSBtYXR0ZXJzIG9mIGludGVycHJldGF0aW9uIGNvbXBhdGlibGUgd2l0aCB0aGUgZXhpc3RpbmcgdGV4dHMuIFRoZSBEZWNpc2lvbiwgYWNjb3JkaW5nbHksIG1lZXRzIHRoZSBjb25kaXRpb24gc3BlY2lmaWVkIGJ5IE1yIFBpcmlzIGZvciBpbnN0cnVtZW50cyBvZiB0aGUga2luZCBpbiBxdWVzdGlvbiB0byBcdTIwMWNoYXZlIGxlZ2FsIHZhbHVlXHUyMDFkLCBuYW1lbHkgdGhhdCBcdTIwMWN0aGV5IG11c3QgYmUgMTAwJSBpbiBjb25mb3JtaXR5IHdpdGggdGhlIFRyZWF0aWVzIGFzIGRyYWZ0ZWQgYXQgdGhlIHRpbWUgb2YgdGhlaXIgYWRvcHRpb25cdTIwMWQuIEluIG15IG9waW5pb24sIHRob3VnaCBzb21ld2hhdCBtb3JlIGVsYWJvcmF0ZSB0aGFuIHRoZSBEZWNpc2lvbiBvbiBEZW5tYXJrIGFuZCB0aGUgRGVjaXNpb24gb24gSXJlbGFuZCwgaW4gdGVybXMgb2YgaXRzIGxlZ2FsIGVmZmVjdHMgYXMgYSBiaW5kaW5nIGludGVybmF0aW9uYWwgYWdyZWVtZW50LCB0aGUgSFNHIERlY2lzaW9uIGlzIG9uIGFsbCBmb3VycyB3aXRoIHRob3NlIGluc3RydW1lbnRzLjxicj4mZW1zcDsmZW1zcDtJIG5vdGUgdGhhdCB0aGUgSFNHIERlY2lzaW9uIGlzIHRvIHRha2UgZWZmZWN0IG9uIHRoZSBzYW1lIGRhdGUgYXMgdGhlIEdvdmVybm1lbnQgb2YgdGhlIFVLIGluZm9ybXMgdGhlIFNlY3JldGFyeS1HZW5lcmFsIG9mIHRoZSBDb3VuY2lsIHRoYXQgdGhlIFVLIGhhcyBkZWNpZGVkIHRvIHJlbWFpbiBhIG1lbWJlciBvZiB0aGUgRVUuPGJyPiZlbXNwOyZlbXNwO0ZpbmFsbHksIGFzIGEgYmluZGluZyBpbnRlcm5hdGlvbmFsIGFncmVlbWVudCBiYXNlZCBvbiBjb25zZW5zdXMsIHRoZSBIU0cgRGVjaXNpb24gY2FuIG9ubHkgYmUgYW1lbmRlZCBvciByZXNjaW5kZWQgYnkgY29uc2Vuc3VzLCBpLmUuIHdpdGggdGhlIGFncmVlbWVudCBvZiB0aGUgVUs7IHNvLCBpbiB0aGF0IHNlbnNlLCBpdCBpcyBpcnJldmVyc2libGUuIiwKICAgICAgICAiPHNwYW4gY2xhc3M9XCJiZFwiPjxzcGFuIGNsYXNzPVwidWRcIj5BcnJhbmdpbmcgQXJyYW5nZW1lbnRzIGZvciBpbXBsZW1lbnRpbmcgdGhlIGZvdXIgXHUyMDFjYmFza2V0c1x1MjAxZDwvc3Bhbj48L3NwYW4+PGJyPiZlbXNwOyZlbXNwO0kgY29uc2lkZXIgdGhlc2UgaW4gdGhlIG9yZGVyIG9mIHRoZSBIU0cgRGVjaXNpb24sIHdoaWNoIGZvbGxvd3MgdGhhdCBvZiB0aGUgMTAgTm92ZW1iZXIgbGV0dGVyLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwiYmRcIj48c3BhbiBjbGFzcz1cInVkXCI+QS4gRWNvbm9taWMgR292ZXJuYW5jZTwvc3Bhbj48L3NwYW4+PGJyPiZlbXNwOyZlbXNwO09uIGVjb25vbWljIGdvdmVybmFuY2UsIHRoZSBzb2x1dGlvbiBiZWluZyBzb3VnaHQgd2FzIHNhaWQgaW4gdGhlIDEwIE5vdmVtYmVyIGxldHRlciB0byBjb25zaXN0IG9mIFx1MjAxY2xlZ2FsbHkgYmluZGluZyBwcmluY2lwbGVzIHRoYXQgc2FmZWd1YXJkIHRoZSBvcGVyYXRpb24gb2YgdGhlIFVuaW9uIGZvciBhbGwgMjggTWVtYmVyIFN0YXRlcyBcdTIwMTMgYW5kIGEgc2FmZWd1YXJkIG1lY2hhbmlzbSB0byBlbnN1cmUgdGhlc2UgcHJpbmNpcGxlcyBhcmUgcmVzcGVjdGVkIGFuZCBlbmZvcmNlZFx1MjAxZC4gVGhlIGFycmFuZ2VtZW50cyBwcm92aWRlZCBmb3IgYnkgU2VjdGlvbiBBIG9mIHRoZSBIU0cgRGVjaXNpb24sIGFuZCBieSB0aGUgSFNHIFN0YXRlbWVudCBvbiBTZWN0aW9uIEEgYW5kIHRoZSBEcmFmdCBDb3VuY2lsIERlY2lzaW9uIGF0dGFjaGVkIHRoZXJldG8sIGNvbnN0aXR1dGUgc3VjaCBhIHNvbHV0aW9uLjxicj4mZW1zcDsmZW1zcDtUaGUgMTAgTm92ZW1iZXIgbGV0dGVyIGlkZW50aWZpZWQgc2V2ZW4gbWF0dGVycyB0aGF0IHRoZSBlbnZpc2FnZWQgcHJpbmNpcGxlcyBuZWVkZWQgdG8gYWRkcmVzcy4gVGhvc2UgbWF0dGVycyBhcmUgd2VsbCBjb3ZlcmVkIGJ5IHRoZSBwcmluY2lwbGVzIHNldCBvdXQgaW4gU2VjdGlvbiBBIG9mIHRoZSBIU0cgRGVjaXNpb24uIFRoZSBwcmluY2lwbGVzIGFyZSBmdWxseSBjb21wYXRpYmxlIHdpdGggdGhlIGV4aXN0aW5nIEVVIFRyZWF0aWVzOiB0aGV5IHNpbXBseSBzcGVsbCBvdXQgaW4gZXhwcmVzcyBsYW5ndWFnZSB3aGF0IGlzIGFscmVhZHkgaW1wbGljaXQgaW4gdmFyaW91cyB0ZXh0cywgc3VjaCBhcyBBcnRpY2xlIDQgKDIpIFRFVSBvbiB0aGUgZXF1YWxpdHkgb2YgTWVtYmVyIFN0YXRlcyBiZWZvcmUgdGhlIFRyZWF0aWVzLiBBY2NvcmRpbmdseSwgdGhleSB3aWxsIGJlY29tZSBsZWdhbGx5IGJpbmRpbmcgb25jZSB0aGUgRGVjaXNpb24gZW50ZXJzIGludG8gZm9yY2UsIGFzIHBhcnQgb2YgYSBcdTIwMWNzdWJzZXF1ZW50IGFncmVlbWVudCBiZXR3ZWVuIHRoZSBwYXJ0aWVzIHJlZ2FyZGluZyB0aGUgaW50ZXJwcmV0YXRpb24gb2YgdGhlIHRyZWF0eSBvciB0aGUgYXBwbGljYXRpb24gb2YgaXRzIHByb3Zpc2lvbnNcdTIwMWQsIHdpdGhpbiB0aGUgbWVhbmluZyBvZiBBcnRpY2xlIDMxICgzKSAoYSkgb2YgdGhlIFZpZW5uYSBDb252ZW50aW9uIG9uIHRoZSBMYXcgb2YgVHJlYXRpZXMgKFZDTFQpLiBDb25zaXN0ZW50bHkgd2l0aCB0aGF0IHByaW5jaXBsZSwgdGhlIENvdXJ0IG9mIEp1c3RpY2Ugb2YgdGhlIEVVIChDSkVVKSBoYXMgaGVsZCBpbiBDYXNlIEMtMTM1LzA4LCBSb3R0bWFubiwgd2l0aCByZWdhcmQgdG8gdGhlIERlY2lzaW9uIG9uIERlbm1hcmssIHRoYXQgaXQgbXVzdCBiZSB0YWtlbiBpbnRvIGNvbnNpZGVyYXRpb24gYXMgYmVpbmcgYW4gaW5zdHJ1bWVudCBmb3IgdGhlIGludGVycHJldGF0aW9uIG9mIHRoZSAodGhlbikgRUMgVHJlYXR5Ljxicj4mZW1zcDsmZW1zcDtQb2ludCA3IG9mIFNlY3Rpb24gQSBzdGF0ZXMgdGhhdCBcdTIwMWNbdF1oZSBzdWJzdGFuY2Ugb2YgdGhpcyBTZWN0aW9uIHdpbGwgYmUgaW5jb3Jwb3JhdGVkIGludG8gdGhlIHRyZWF0aWVzIGF0IHRoZSB0aW1lIG9mIHRoZWlyIG5leHQgcmV2aXNpb24uLi5cdTIwMWQuIFRoZSBlZmZlY3Qgb2YgZXZlbnR1YWwgaW5jb3Jwb3JhdGlvbiwgd2hldGhlciBpbnRvIHJlbGV2YW50IHBhcnRzIG9mIHRoZSBUcmVhdGllcyB0aGVtc2VsdmVzIG9yIGJ5IHdheSBvZiBhIHNlcGFyYXRlIFByb3RvY29sLCB3aWxsIGJlIHRvIGdpdmUgdGhlIHByaW5jaXBsZXMgdGhlIHN0YXR1cyBvZiBwcmltYXJ5IEVVIGxhdyBpbiB0aGVpciBvd24gcmlnaHQgKGFzIGRpc3RpbmN0IGZyb20gc2VydmluZyBhcyBhIHRvb2wgb2YgaW50ZXJwcmV0YXRpb24pOyBhbnkgaW5mcmluZ2VtZW50IG9mIHRoZSBwcmluY2lwbGVzIHdpbGwsIHRoZXJlZm9yZSwgcHJvdmlkZSBncm91bmRzIGZvciBjaGFsbGVuZ2luZyB0aGUgdmFsaWRpdHkgb2YgdGhlIG9mZmVuZGluZyBFVSBtZWFzdXJlIGluIGFubnVsbWVudCBwcm9jZWVkaW5ncyB1bmRlciBBcnRpY2xlIDI2NyBURkVVLjxicj4mZW1zcDsmZW1zcDtUaGUgcHJvcG9zZWQgc2FmZWd1YXJkIG1lY2hhbmlzbSBidWlsZHMgdXBvbiB0aGUgc28tY2FsbGVkIFx1MjAxY0lvYW5uaW5hIENvbXByb21pc2VcdTIwMWQsIGluaXRpYWxseSBkZXZpc2VkIGluIHRoZSBjb250ZXh0IG9mIHRoZSAxOTk0IGVubGFyZ2VtZW50LCB3aGljaCBjdXJyZW50bHkgYXBwbGllcyB0byBxdWFsaWZpZWQgbWFqb3JpdHkgdm90aW5nIChRTVYpIGJ5IHRoZSBDb3VuY2lsIHVuZGVyIHRoZSBydWxlcyB0aGF0IGNhbWUgaW50byBmb3JjZSBpbiBOb3ZlbWJlciAyMDE0LiBJdCBlbmFibGVzIE1lbWJlciBTdGF0ZXMgaW4gdGhlIG1pbm9yaXR5LCB3aGVyZSB0aGUgUU1WIHRocmVzaG9sZCBpcyBhY2hpZXZlZCBieSBhIHJlbGF0aXZlbHkgc21hbGwgbWFyZ2luLCB0byBpbnNpc3QgdGhhdCB0aGUgQ291bmNpbCBkbyBhbGwgaW4gaXRzIHBvd2VyIHRvIHJlYWNoLCB3aXRoaW4gYSByZWFzb25hYmxlIHRpbWUgYW5kIHdpdGhvdXQgcHJlanVkaWNpbmcgbGVnYWxseSBwcmVzY3JpYmVkIHRpbWUgbGltaXRzLCBhIHNhdGlzZmFjdG9yeSBzb2x1dGlvbiB0aGF0IGFkZHJlc3NlcyB0aGVpciBjb25jZXJucy4gTGVnYWwgZWZmZWN0IGhhcyBiZWVuIGdpdmVuIHRvIHRoaXMgcHJvY2VkdXJhbCBkZXZpY2UgYnkgQ291bmNpbCBEZWNpc2lvbiAyMDA5Lzg1Ny9FQy4zPGJyPiZlbXNwOyZlbXNwO1B1cnN1YW50IHRvIHRoZSBIU0cgRGVjaXNpb24sIGEgc2ltaWxhciBwcm9jZWR1cmUgaXMgbWFkZSBhdmFpbGFibGUsIGFsbG93aW5nIGZvciB0aGUgaW50ZXJydXB0aW9uIG9mIHRoZSBkZWNpc2lvbi1tYWtpbmcgcHJvY2VzcyBvbiBsZWdpc2xhdGl2ZSBhY3RzIHJlbGF0aW5nIHRvIG1hdHRlcnMgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgcHJpbmNpcGxlcyBsYWlkIGRvd24gYnkgaXRzIFNlY3Rpb24gQS4gVGhlIHByb2NlZHVyZSB3aWxsIGJlIHRyaWdnZXJlZCBieSB0aGUgZXhwcmVzc2lvbiBvZiBvcHBvc2l0aW9uIHRvIHRoZSBhY3QgaW4gcXVlc3Rpb24sIGJhc2VkIG9uIGEgcmVhc29uZWQgY2FzZSB0aGF0IGl0IGZhaWxlZCB0byByZXNwZWN0IHRob3NlIHByaW5jaXBsZXMsIGJ5IG9uZSBvciBtb3JlIENvdW5jaWwgbWVtYmVyIG5vdCBwYXJ0aWNpcGF0aW5nIGluIHRoZSBiYW5raW5nIHVuaW9uLiBUaGUgbWVjaGFuaXNtIHdpbGwgYmUgZ2l2ZW4gYmluZGluZyBlZmZlY3QgaW4gRVUgbGF3IGJ5IGFkZGluZyBhIGZ1cnRoZXIgc2VjdGlvbiB0byBEZWNpc2lvbiAyMDA5Lzg1Ny9FQy48YnI+JmVtc3A7JmVtc3A7VGhlIEhTRyBTdGF0ZW1lbnQgZGVjbGFyZXMgdGhhdCB0aGUgYW5uZXhlZCBDb3VuY2lsIERlY2lzaW9uIHN1cHBsZW1lbnRpbmcgRGVjaXNpb24gMjAwOS84NTcvRUMgXHUyMDFjd2lsbCBiZSBhZG9wdGVkIGJ5IHRoZSBDb3VuY2lsIG9uIHRoZSBkYXRlIG9mIHRoZSBlbnRyeSBpbnRvIGZvcmNlIG9mIHRoZSBbSFNHIERlY2lzaW9uXSBhbmQgd2lsbCBlbnRlciBpbnRvIGZvcmNlIG9uIHRoYXQgZGF5Llx1MjAxZCBXaGlsZSBhIFx1MjAxY1N0YXRlbWVudFx1MjAxZCBtYXkgbm90IGJlIGxlZ2FsbHkgYmluZGluZyBpbiBpdHNlbGYsIHRoZSBpbnRyb2R1Y3Rpb24gdG8gU2VjdGlvbiBBIG9mIHRoZSBIU0cgRGVjaXNpb24gcHJvdmlkZXM6IFx1MjAxY011dHVhbCByZXNwZWN0IGFuZCBzaW5jZXJlIGNvb3BlcmF0aW9uIGJldHdlZW4gTWVtYmVyIFN0YXRlcyBwYXJ0aWNpcGF0aW5nIG9yIG5vdCBpbiB0aGUgb3BlcmF0aW9uIG9mIHRoZSBldXJvIGFyZWEgd2lsbCBiZSBlbnN1cmVkIGJ5IHRoZSBwcmluY2lwbGVzIHJlY2FsbGVkIGluIHRoaXMgU2VjdGlvbiwgd2hpY2ggYXJlIHNhZmVndWFyZGVkIG5vdGFibHkgdGhyb3VnaCB0aGUgQ291bmNpbCBkZWNpc2lvbiByZWZlcnJpbmcgdG8gaXRcdTIwMWQuIFRoYXQgcGFzc2FnZSwgY2VudHJhbCB0byB0aGUgb3JkZXJpbmcgb2YgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIG1lbWJlcnMgYW5kIG5vbi1tZW1iZXJzIG9mIHRoZSBFdXJvem9uZSwgd2hpY2ggaXMgdGhlIG9iamVjdCBvZiBTZWN0aW9uIEEsIGJpbmRzIHRoZSBwYXJ0aWVzIHRvIHRoZSBIU0cgRGVjaXNpb24gdG8gZW5zdXJlIHRoZSBlc3RhYmxpc2htZW50IG9mIHRoZSBzYWZlZ3VhcmQgbWVjaGFuaXNtLjxicj4mZW1zcDsmZW1zcDtMaWtlIERlY2lzaW9uIDIwMDkvODU3IGl0c2VsZiwgdGhlIGRyYWZ0IENvdW5jaWwgRGVjaXNpb24gYW5uZXhlZCB0byB0aGUgSFNHIFN0YXRlbWVudCB3aWxsIGZhbGwgdG8gYmUgYWRvcHRlZCB1bmRlciB0aGUgQ291bmNpbFx1MjAxOXMgcG93ZXIgb2Ygc2VsZi1vcmdhbmlzYXRpb24gcHVyc3VhbnQgdG8gQXJ0aWNsZSAyNDAgVEZFVSBhbmQsIHRoZXJlZm9yZSwgcmVxdWlyZXMgbm8gQ29tbWlzc2lvbiBwcm9wb3NhbC4gT25jZSBhZG9wdGlvbiBoYXMgdGFrZW4gcGxhY2UsIHRoZSBvcGVyYXRpb24gb2YgdGhlIHNhZmVndWFyZCBtZWNoYW5pc20gd2lsbCBiZSBlbnN1cmVkIGFzIGEgbWF0dGVyIG9mIGJpbmRpbmcgRVUgbGF3LiBXaGlsZSB0aGUgQ291bmNpbCBhY3RzIGZvciB0aGUgcHVycG9zZXMgb2YgQXJ0aWNsZSAyNDAgVEZFVSBieSBhIHNpbXBsZSBtYWpvcml0eSwgRGVjaXNpb24gMjAwOS84NTcsIG9mIHdoaWNoIHRoZSBzYWZlZ3VhcmQgbWVjaGFuaXNtIHdvdWxkIGZvcm0gcGFydCwgaXMgcHJvdGVjdGVkIGJ5IFByb3RvY29sICg5KSwgd2hpY2ggcHJvdmlkZXMgdGhhdCwgYmVmb3JlIGV4YW1pbmF0aW9uIGJ5IHRoZSBDb3VuY2lsIG9mIGFueSBkcmFmdCB0aGF0IHdvdWxkIGFpbSBhdCBhbWVuZGluZyBvciBhYnJvZ2F0aW5nIHRoZSBEZWNpc2lvbiBvciBhbnkgb2YgaXRzIHByb3Zpc2lvbnMsIFx1MjAxY3RoZSBFdXJvcGVhbiBDb3VuY2lsIHNoYWxsIGhvbGQgYSBkZWxpYmVyYXRpb24gb24gdGhlIHNhaWQgZHJhZnQsIGFjdGluZyBieSBjb25zZW5zdXMuLi5cdTIwMWQuNCBUaGlzIG1lYW5zIHRoYXQgdGhlIFVLLCBvciBhbnkgb3RoZXIgaW50ZXJlc3RlZCBNZW1iZXIgU3RhdGUsIHdvdWxkIGJlIGFibGUgdG8gYmxvY2sgYW4gYXR0ZW1wdCB0byBhYm9saXNoIG9yIHdhdGVyIGRvd24gdGhlIHNhZmVndWFyZCBtZWNoYW5pc20uPGJyPiZlbXNwOyZlbXNwO0kgbm90ZSB0aGF0IHRoZSBJb2FubmluYSBDb21wcm9taXNlIGlzIGFuIGV4YW1wbGUgb2Ygd2hhdCBtYXkgYmUgdGVybWVkIGEgXHUyMDFjQ291bmNpbCBjb25kdWN0IGFncmVlbWVudFx1MjAxZCwgaW4gb3RoZXIgd29yZHMgYW4gYWdyZWVtZW50IGJpbmRpbmcgdGhlIE1lbWJlciBTdGF0ZXMgYXMgdG8gaG93IHRoZXkgd2lsbCBiZWhhdmUgYXMgbWVtYmVycyBvZiB0aGUgQ291bmNpbCBpbiBjZXJ0YWluIGNpcmN1bXN0YW5jZXMuIFRoZSByZWZvcm0gcGFja2FnZSBlbXBsb3lzIGFncmVlbWVudHMgb2YgdGhpcyBraW5kIGZvciB2YXJpb3VzIHB1cnBvc2VzLCBhcyB3ZSBzaGFsbCBzZWUuIFRoZXJlIGlzIG5vIHJlYXNvbiBvZiBwcmluY2lwbGUgd2h5IENvdW5jaWwgY29uZHVjdCBhZ3JlZW1lbnRzIHNob3VsZCBub3QgYmUgcmVnYXJkZWQgYXMgbGF3ZnVsLiBUaGlzIGlzIGNvbmZpcm1lZCBieSB0aGUgZmFjdCB0aGF0IHRoZSBjdXJyZW50IHZlcnNpb24gb2YgdGhlIElvYW5uaW5hIENvbXByb21pc2UgaGFzIGJlZW4gZW5zaHJpbmVkIGluIERlY2lzaW9uIDIwMDkvODcsIGEgZm9ybWFsIENvdW5jaWwgYWN0IGluIHRoZSBzZW5zZSBvZiBBcnRpY2xlIDI4OCBURkVVLCB0aGUgdmFsaWRpdHkgb2Ygd2hpY2ggaGFzIG5ldmVyIGJlZW4gcXVlc3Rpb25lZC4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cImJkXCI+PHNwYW4gY2xhc3M9XCJ1ZFwiPkIuIENvbXBldGl0aXZlbmVzczwvc3Bhbj48L3NwYW4+PGJyPiZlbXNwOyZlbXNwO1RoZSBDb21wZXRpdGl2ZW5lc3MgYmFza2V0IGluIHRoZSAxMCBOb3ZlbWJlciBsZXR0ZXIgaXMgY29uY2VybmVkIGVzc2VudGlhbGx5IHdpdGggcmVpbnZpZ29yYXRpbmcgRVUgcG9saWNpZXMgb2YgcGFydGljdWxhciBpbnRlcmVzdCB0byB0aGUgVUssIG5hbWVseSBzdHJlbmd0aGVuaW5nIHRoZSBpbnRlcm5hbCBtYXJrZXQsIGltcHJvdmluZyBsZWdpc2xhdGlvbiwgcmVkdWNpbmcgcmVndWxhdG9yeSBidXJkZW5zIG9uIGJ1c2luZXNzIGFuZCBwcm9tb3RpbmcgYW4gYWN0aXZlIHRyYWRlIHBvbGljeS48YnI+JmVtc3A7JmVtc3A7VGhlIHByb3Bvc2VkIHNvbHV0aW9uIGNvbXByaXNlcyB0aHJlZSB0ZXh0cy4gU2VjdGlvbiBCIG9mIHRoZSBIU0cgRGVjaXNpb24gYmluZHMgdGhlIE1lbWJlciBTdGF0ZXMgdG8gZnVydGhlciB0aGUgb2JqZWN0aXZlcyBpZGVudGlmaWVkIGluIHRoZSAxMCBOb3ZlbWJlciBsZXR0ZXIuIFRoaXMgY29tbWl0bWVudCBpcyBldmlkZW50bHkgaW50ZW5kZWQgdG8gYmUgcmVhZCB3aXRoIHRoZSBEZWNsYXJhdGlvbiBvZiB0aGUgRXVyb3BlYW4gQ291bmNpbCBvbiBDb21wZXRpdGl2ZW5lc3MgYW5kIHRoZSBEZWNsYXJhdGlvbiBvZiB0aGUgQ29tbWlzc2lvbiBvbiBhIHN1YnNpZGlhcml0eSBpbXBsZW1lbnRhdGlvbiBtZWNoYW5pc20gYW5kIGEgYnVyZGVuIHJlZHVjdGlvbiBtZWNoYW5pc20sIHRvIHdoaWNoIGl0IHJlZmVycy48YnI+JmVtc3A7JmVtc3A7VGhlIGZpcnN0IG9mIHRoZSBEZWNsYXJhdGlvbnMgaW52b2x2ZXMgdGhlIGV4ZXJjaXNlIGJ5IHRoZSBFdXJvcGVhbiBDb3VuY2lsIG9mIGl0cyBmdW5jdGlvbiBvZiBzZXR0aW5nIHBvbGljeSBwcmlvcml0aWVzIGZvciB0aGUgRVUgKEFydGljbGUgMTUgKDEpIFRFVSkuIEl0IGlzIGEgbGl0dGxlIG1vcmUgZGV0YWlsZWQgdGhhbiBTZWN0aW9uIEIgb2YgdGhlIEhTRyBEZWNpc2lvbiwgZXNwZWNpYWxseSBvbiB0aGUgaXNzdWVzIG9mIGJldHRlciBsZWdpc2xhdGlvbiBhbmQgdGhlIHJlZHVjdGlvbiBvZiB0aGUgYnVyZGVuIG9mIEVVIHJlZ3VsYXRpb24uIFRoZSBFdXJvcGVhbiBDb3VuY2lsIGV4cHJlc3NlcyBpdHMgaW50ZW50aW9uIHRvIGtlZXAgZGV2ZWxvcG1lbnRzIHVuZGVyIHJldmlldyBhbmQgYXNrcyB0aGUgR2VuZXJhbCBBZmZhaXJzIENvdW5jaWwgYW5kIHRoZSBDb21wZXRpdGl2ZW5lc3MgQ291bmNpbCByZWd1bGFybHkgdG8gZXZhbHVhdGUgcHJvZ3Jlc3Mgb24gdGhlIHZhcmlvdXMgZWxlbWVudHMgc2V0IG91dCBpbiB0aGUgRGVjbGFyYXRpb24uPGJyPiZlbXNwOyZlbXNwO0J5IHRoZSBzZWNvbmQgRGVjbGFyYXRpb24sIHRoZSBDb21taXNzaW9uIGV4cHJlc3NlcyBpdHMgaW50ZW50aW9uIHRvIGJ1aWxkIG9uIGV4aXN0aW5nIHByb2Nlc3NlcyBpbiBvcmRlciB0byBkZXZlbG9wIG1lY2hhbmlzbXMgZm9yIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgcHJpbmNpcGxlIG9mIHN1YnNpZGlhcml0eSBhbmQgZm9yIHRoZSByZWR1Y3Rpb24gb2YgdGhlIHJlZ3VsYXRvcnkgYnVyZGVuLiBUaGVyZSBpcyBhIHNwZWNpZmljIHVuZGVydGFraW5nIHRvIHByb3Bvc2UgYSBwcm9ncmFtbWUgb2Ygd29yayBieSB0aGUgZW5kIG9mIDIwMTYuPGJyPiZlbXNwOyZlbXNwO0dpdmVuIHRoZSBicm9hZCB0ZXJtcyBpbiB3aGljaCB0aGUgVUtcdTIwMTlzIG9iamVjdGl2ZXMgdW5kZXIgdGhpcyBoZWFkaW5nIHdlcmUgZnJhbWVkLCBhIG5lZ290aWF0ZWQgb3V0Y29tZSBjYXBhYmxlIG9mIGJlaW5nIGxlZ2FsbHkgZ3VhcmFudGVlZCBpbiBhIHNpbWlsYXIgd2F5IHRvIHRoZSBlY29ub21pYyBnb3Zlcm5hbmNlIGJhc2tldCB3YXMgbm90IHRvIGJlIGV4cGVjdGVkLiBUaGUgY29tYmluYXRpb24gb2YgYSBiaW5kaW5nIGxlZ2FsIGNvbW1pdG1lbnQgYnkgdGhlIE1lbWJlciBTdGF0ZXMgYW5kIGNsZWFyIGV4cHJlc3Npb25zIG9mIGludGVudGlvbiBieSB0aGUgRXVyb3BlYW4gQ291bmNpbCBhbmQgdGhlIENvbW1pc3Npb24gc2hvdWxkIGJlIHN1ZmZpY2llbnQgdG8gZW5zdXJlIHRoYXQgdGhlIG1vbWVudHVtIHNvdWdodCB0byBiZSBnaXZlbiB0byBkZXZlbG9wbWVudHMgaW4gdGhlIHJlbGV2YW50IHBvbGljeSBhcmVhcyB3aWxsIGJlIHN1c3RhaW5lZC4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPkMuIFNvdmVyZWlnbnR5PC9zcGFuPjwvc3Bhbj48YnI+JmVtc3A7JmVtc3A7U2VjdGlvbiBDIG9mIHRoZSBIU0cgRGVjaXNpb24gZGVhbHMgc2VwYXJhdGVseSB3aXRoIHRoZSB2YXJpb3VzIG1hdHRlcnMgaW5jbHVkZWQgaW4gdGhpcyBiYXNrZXQgb2YgdGhlIDEwIE5vdmVtYmVyIGxldHRlci48YnI+JmVtc3A7JmVtc3A7PHNwYW4gY2xhc3M9XCJiZFwiPigxKSBcdTIwMWNFdmVyIGNsb3NlciB1bmlvblx1MjAxZDwvc3Bhbj48YnI+JmVtc3A7JmVtc3A7JmVtc3A7JmVtc3A7JmJ1bGw7IHRoYXQgdGhlIHJlZmVyZW5jZXMgXHUyMDFjYXJlIG5vdCBhbiBlcXVpdmFsZW50IHRvIHRoZSBvYmplY3RpdmUgb2YgcG9saXRpY2FsIGludGVncmF0aW9uLCBldmVuIHRob3VnaCBzdWNoIGFuIG9iamVjdGl2ZSBlbmpveXMgd2lkZSBzdXBwb3J0IGluIHRoZSBVbmlvblx1MjAxZDs8YnI+JmVtc3A7JmVtc3A7JmVtc3A7JmVtc3A7JmJ1bGw7IHRoYXQgXHUyMDFjdGhleSBkbyBub3Qgb2ZmZXIgYSBiYXNpcyBmb3IgZXh0ZW5kaW5nIHRoZSBzY29wZSBvZiBhbnkgcHJvdmlzaW9uIG9mIHRoZSBUcmVhdGllcyBvciBvZiBFVSBzZWNvbmRhcnkgbGVnaXNsYXRpb25cdTIwMWQgYW5kIFx1MjAxY3Nob3VsZCBub3QgYmUgdXNlZCBlaXRoZXIgdG8gc3VwcG9ydCBhbiBleHRlbnNpdmUgaW50ZXJwcmV0YXRpb24gb2YgdGhlIGNvbXBldGVuY2VzIG9mIHRoZSBVbmlvbiBvciBvZiB0aGUgcG93ZXJzIG9mIGl0cyBpbnN0aXR1dGlvbnMgYXMgc2V0IG91dCBpbiB0aGUgVHJlYXRpZXNcdTIwMWQ7PGJyPiZlbXNwOyZlbXNwOyZlbXNwOyZlbXNwOyZidWxsOyB0aGF0IHRoZXkgXHUyMDFjZG8gbm90IGFsdGVyIHRoZSBsaW1pdHMgb2YgVW5pb24gY29tcGV0ZW5jZSBnb3Zlcm5lZCBieSB0aGUgcHJpbmNpcGxlIG9mIGNvbmZlcnJhbFx1MjAxZDsgbm9yIGRvIHRoZXkgXHUyMDFjcmVxdWlyZSB0aGF0IGZ1cnRoZXIgY29tcGV0ZW5jZXMgYmUgY29uZmVycmVkIHVwb24gdGhlIEV1cm9wZWFuIFVuaW9uXHUyMDFkOzxicj4mZW1zcDsmZW1zcDsmZW1zcDsmZW1zcDsmYnVsbDsgdGhhdCBcdTIwMWN0aGUgY29tcGV0ZW5jZXMgY29uZmVycmVkIGJ5IHRoZSBNZW1iZXIgU3RhdGVzIG9uIHRoZSBVbmlvbiBjYW4gYmUgbW9kaWZpZWQsIHdoZXRoZXIgdG8gaW5jcmVhc2Ugb3IgcmVkdWNlIHRoZW0sIG9ubHkgdGhyb3VnaCBhIHJldmlzaW9uIG9mIHRoZSBUcmVhdGllcyB3aXRoIHRoZSBhZ3JlZW1lbnQgb2YgYWxsIE1lbWJlciBTdGF0ZXNcdTIwMWQ7PGJyPiZlbXNwOyZlbXNwOyZlbXNwOyZlbXNwOyZidWxsOyB0aGF0IHRoZSBmYWN0IHRoYXQgdGhlIFRyZWF0aWVzIGFscmVhZHkgY29udGFpbiBwcm92aXNpb25zIHdoZXJlYnkgc29tZSBNZW1iZXIgU3RhdGVzIGFyZSBlbnRpdGxlZCBub3QgdG8gdGFrZSBwYXJ0IGluIG9yIGFyZSBleGVtcHRlZCBmcm9tIHRoZSBhcHBsaWNhdGlvbiBvZiBjZXJ0YWluIHByb3Zpc2lvbnMgb2YgVW5pb24gbGF3IHNob3dzIHRoYXQgdGhlIHJlZmVyZW5jZXMgXHUyMDFjYXJlIGNvbXBhdGlibGUgd2l0aCBkaWZmZXJlbnQgcGF0aHMgb2YgaW50ZWdyYXRpb24gYmVpbmcgYXZhaWxhYmxlIGZvciBkaWZmZXJlbnQgTWVtYmVyIFN0YXRlc1x1MjAxZDs8YnI+JmVtc3A7JmVtc3A7JmVtc3A7JmVtc3A7JmJ1bGw7IHRoYXQgXHUyMDFjdGhlIFRyZWF0aWVzIGFsbG93IGFuIGV2b2x1dGlvbiB0b3dhcmRzIGEgZGVlcGVyIGRlZ3JlZSBvZiBpbnRlZ3JhdGlvbiBhbW9uZyB0aGUgTWVtYmVyIFN0YXRlcyB0aGF0IHNoYXJlIHN1Y2ggYSB2aXNpb24gb2YgdGhlaXIgY29tbW9uIGZ1dHVyZSB3aXRob3V0IHRoaXMgYXBwbHlpbmcgdG8gb3RoZXIgTWVtYmVyIFN0YXRlc1x1MjAxZDsgYW5kPGJyPiZlbXNwOyZlbXNwOyZlbXNwOyZlbXNwOyZidWxsOyB0aGF0IFx1MjAxY2l0IGlzIHJlY29nbmlzZWQgdGhhdCB0aGUgVW5pdGVkIEtpbmdkb20sIGluIHRoZSBsaWdodCBvZiB0aGUgc3BlY2lmaWMgc2l0dWF0aW9uIGl0IGhhcyB1bmRlciB0aGUgVHJlYXRpZXMsIGlzIG5vdCBjb21taXR0ZWQgdG8gZnVydGhlciBpbnRlZ3JhdGlvbiBpbnRvIHRoZSBFdXJvcGVhbiBVbmlvblx1MjAxZC4iLAogICAgICAgICImZW1zcDsmZW1zcDtBIG1vcmUgY29tcHJlaGVuc2l2ZSByZXNwb25zZSB0byB0aGUgcmVhc3N1cmFuY2Ugc291Z2h0IG9uIHRoaXMgaXNzdWUgaW4gdGhlIDEwIE5vdmVtYmVyIGxldHRlciBjb3VsZCBzY2FyY2VseSBiZSBpbWFnaW5lZC4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPigyKSBTdWJzaWRpYXJpdHk8L3NwYW4+PC9zcGFuPjxicj4mZW1zcDsmZW1zcDtUbyByZWluZm9yY2UgdGhlIHByaW5jaXBsZSBvZiBzdWJzaWRpYXJpdHksIGl0IGlzIHByb3ZpZGVkIHVuZGVyIHBvaW50IDIgb2YgU2VjdGlvbiBDIG9mIHRoZSBIU0cgRGVjaXNpb24gdGhhdCByZWFzb25lZCBvcGluaW9ucyBpc3N1ZWQgYnkgbmF0aW9uYWwgUGFybGlhbWVudHMgaW4gYWNjb3JkYW5jZSB3aXRoIEFydGljbGUgNyAoMSkgb2YgUHJvdG9jb2wgKE5vIDIpIFx1MjAxY2FyZSB0byBiZSBkdWx5IHRha2VuIGludG8gYWNjb3VudCBieSBhbGwgaW5zdGl0dXRpb25zIGludm9sdmVkIGluIHRoZSBkZWNpc2lvbi1tYWtpbmcgcHJvY2VzcyBvZiB0aGUgVW5pb25cdTIwMWQgYW5kIHRoYXQgXHUyMDFjW2FdcHByb3ByaWF0ZSBhcnJhbmdlbWVudHMgd2lsbCBiZSBtYWRlIHRvIGVuc3VyZSB0aGlzXHUyMDFkLiBTdWNoIGEgcmVxdWlyZW1lbnQgYXBwZWFycyB0byBiZSBmdWxseSBjb21wYXRpYmxlIHdpdGggUHJvdG9jb2wgKE5vIDIpLCB3aGljaCBpdCBzdXBwbGVtZW50cywgYW5kIHRodXMgbGVnYWxseSBiaW5kaW5nIG9uIG1lbWJlcnMgb2YgdGhlIENvdW5jaWwgYXMgYSBDb3VuY2lsIGNvbmR1Y3QgYWdyZWVtZW50LiBEZW1vbnN0cmFibGUgZmFpbHVyZSB0byBjb21wbHkgd2l0aCB0aGlzIG9ibGlnYXRpb24gd291bGQsIGl0IGlzIHN1Ym1pdHRlZCwgY29uc3RpdHV0ZSB0aGUgaW5mcmluZ2VtZW50IG9mIGFuIGVzc2VudGlhbCBwcm9jZWR1cmFsIHJlcXVpcmVtZW50IHdpdGhpbiB0aGUgbWVhbmluZyBvZiBBcnRpY2xlIDI2MyBURkVVLCBwcm92aWRpbmcgZ3JvdW5kcyBmb3IgdGhlIGFubnVsbWVudCBvZiB0aGUgbWVhc3VyZSBpbiBxdWVzdGlvbi4gU28gZmFyIGFzIGNvbmNlcm5zIHRoZSBDb3VuY2lsLCBhbnkgXHUyMDFjYXBwcm9wcmlhdGUgYXJyYW5nZW1lbnRzXHUyMDFkIGNvdWxkIGJlIGFkb3B0ZWQgb24gdGhlIGJhc2lzIG9mIEFydGljbGUgMjQwIFRGRVUsIHdpdGhvdXQgYSBDb21taXNzaW9uIHByb3Bvc2FsLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+KDMpIEEgXHUyMDFjcmVkIGNhcmQgcHJvY2VkdXJlXHUyMDFkPC9zcGFuPjwvc3Bhbj48YnI+JmVtc3A7JmVtc3A7VGhlIDEwIE5vdmVtYmVyIGxldHRlciBzYXlzIHRoYXQgZ3JvdXBzIG9mIG5hdGlvbmFsIHBhcmxpYW1lbnRzIHNob3VsZCBiZSBhYmxlIHRvIFx1MjAxY3N0b3AgdW53YW50ZWQgbGVnaXNsYXRpdmUgcHJvcG9zYWxzXHUyMDFkIChhIHNvLWNhbGxlZCBcdTIwMWNyZWQgY2FyZCBwcm9jZWR1cmVcdTIwMWQpLjxicj4mZW1zcDsmZW1zcDtUaGF0IGRlbWFuZCBpcyBhY2NlZGVkIHRvIGJ5IHBvaW50IDMgb2YgU2VjdGlvbiBDLiBUaGUgcGVyaW9kIGFsbG93ZWQgZm9yIHRoZSB0cmFuc21pc3Npb24gb2YgcmVhc29uZWQgb3BpbmlvbnMgaXMgaW5jcmVhc2VkLCBpbiB0aGlzIGluc3RhbmNlLCBmcm9tIHRoZSBlaWdodCB3ZWVrcyBwcm92aWRlZCBmb3IgYnkgQXJ0aWNsZSA2IG9mIFByb3RvY29sIChObyAyKSB0byAxMiB3ZWVrcy4gVW5kZXIgdGhlIHByb2NlZHVyZSwgd2hlcmUgcmVhc29uZWQgb3BpbmlvbnMgb24gdGhlIG5vbi1jb21wbGlhbmNlIG9mIGEgZHJhZnQgbGVnaXNsYXRpdmUgYWN0IHdpdGggdGhlIHByaW5jaXBsZSBvZiBzdWJzaWRpYXJpdHkgcmVwcmVzZW50IG1vcmUgdGhhbiA1NSBwZXIgY2VudCBvZiB0aGUgdm90ZXMgYWxsb2NhdGVkIHRvIG5hdGlvbmFsIFBhcmxpYW1lbnRzLDYgdGhlIGl0ZW0gd2lsbCBiZSBpbmNsdWRlZCBvbiB0aGUgQ291bmNpbCBhZ2VuZGEgZm9yIGEgY29tcHJlaGVuc2l2ZSBkaXNjdXNzaW9uOyBmb2xsb3dpbmcgd2hpY2ggXHUyMDFjdGhlIHJlcHJlc2VudGF0aXZlcyBvZiB0aGUgTWVtYmVyIFN0YXRlcyBhY3RpbmcgaW4gdGhlaXIgY2FwYWNpdHkgYXMgbWVtYmVycyBvZiB0aGUgQ291bmNpbCB3aWxsIGRpc2NvbnRpbnVlIHRoZWlyIGNvbnNpZGVyYXRpb24gb2YgdGhlIGRyYWZ0IGxlZ2lzbGF0aXZlIGFjdCBpbiBxdWVzdGlvbiB1bmxlc3MgdGhlIGRyYWZ0IGlzIGFtZW5kZWQgdG8gYWNjb21tb2RhdGUgdGhlIGNvbmNlcm5zIGV4cHJlc3NlZCBpbiB0aGUgcmVhc29uZWQgb3BpbmlvbnNcdTIwMWQuIFRoZSBpbXBsZW1lbnRhdGlvbiB0ZWNobmlxdWUsIHRoZXJlZm9yZSwgZW50YWlscyBhIENvdW5jaWwgY29uZHVjdCBhZ3JlZW1lbnQ6IHRoZSBtZW1iZXJzIG9mIHRoZSBDb3VuY2lsIHdvdWxkLCBpbiB0aGUgcHJlc2NyaWJlZCBjaXJjdW1zdGFuY2VzLCBkaXNjb250aW51ZSBkaXNjdXNzaW9uIG9mIHRoZSBwcm9wb3NhbCBhbmQgcmVmcmFpbiBmcm9tIHZvdGluZyBvbiBpdC4gVGhlIGVudmlzYWdlZCBvYmxpZ2F0aW9uIGFwcGVhcnMgdG8gbWUgdG8gYmUgZnVsbHkgY29tcGF0aWJsZSB3aXRoIEVVIGxhdywgYW5kIGhlbmNlIGxlZ2FsbHkgYmluZGluZywgc2luY2UgdGhlcmUgaXMgbm90aGluZyBpbiB0aGUgVHJlYXRpZXMgdGhhdCByZXF1aXJlcyB0aGUgQ291bmNpbCB0byBwcm9jZWVkIHRvIHRoZSBhZG9wdGlvbiBvZiBhIGdpdmVuIHByb3Bvc2FsLCBzdXBwb3NpbmcgdGhhdCB0aGUgcmVxdWlzaXRlIG1ham9yaXR5IGlzIGF2YWlsYWJsZS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPig0KSBUaGUgVGl0bGUgViBQcm90b2NvbHM8L3NwYW4+PC9zcGFuPjxicj4mZW1zcDsmZW1zcDtQb2ludCA0IG9mIFNlY3Rpb24gQyByZWNhbGxzIHRoYXQgYSBtZWFzdXJlIGFkb3B0ZWQgcHVyc3VhbnQgdG8gVGl0bGUgViBvZiBQYXJ0IFRocmVlIG9mIHRoZSBURkVVIChvbiBKSEEgb3IsIGluIHByZXNlbnQgVHJlYXR5IHBhcmxhbmNlLCB0aGUgXHUyMDFjQXJlYSBvZiBGcmVlZG9tLCBTZWN1cml0eSBhbmQgSnVzdGljZVx1MjAxZCkgZG9lcyBub3QgYmluZCB0aGUgTWVtYmVyIFN0YXRlcyBjb3ZlcmVkIGJ5IFByb3RvY29sIChObyAyMSkgKGkuZS4gdGhlIFVLIGFuZCBJcmVsYW5kKSBvciBQcm90b2NvbCAoTm8gMjIpIChpLmUuIERlbm1hcmspLiBUaGUgdGV4dCBnb2VzIG9uIHRvIHN0YXRlOiBcdTIwMWNUaGUgcmVwcmVzZW50YXRpdmVzIG9mIHRoZSBNZW1iZXIgU3RhdGVzIGFjdGluZyBpbiB0aGVpciBjYXBhY2l0eSBhcyBtZW1iZXJzIG9mIHRoZSBDb3VuY2lsIHdpbGwgZW5zdXJlIHRoYXQsIHdoZXJlIGEgVW5pb24gbWVhc3VyZSwgaW4gdGhlIGxpZ2h0IG9mIGl0cyBhaW0gYW5kIGNvbnRlbnQsIGZhbGxzIHdpdGhpbiB0aGUgc2NvcGUgb2YgVGl0bGUgVi4uLiwgUHJvdG9jb2xzIDIxIGFuZCAyMiB3aWxsIGFwcGx5IHRvIGl0LCBpbmNsdWRpbmcgd2hlcmUgdGhpcyBlbnRhaWxzIHRoZSBzcGxpdHRpbmcgb2YgdGhlIG1lYXN1cmUgaW50byB0d28gYWN0c1x1MjAxZC4gL1RoaXMgdGV4dCBpcyBldmlkZW50bHkgaW50ZW5kZWQgdG8gcHJvdmlkZSB0aGUgcmVhc3N1cmFuY2Ugc291Z2h0IGluIHRoZSAxMCBOb3ZlbWJlciBsZXR0ZXIgdGhhdCB0aGUgVUtcdTIwMTlzIFRpdGxlIFYgb3B0LWluIHJpZ2h0IHdpbGwgYmUgZnVsbHkgcmVzcGVjdGVkIGluIGZ1dHVyZS4gQSBwYXJ0aWN1bGFyIGNvbmNlcm4gaGFzIGJlZW4gdGhhdCB0aGUgcmlnaHQgbWF5IGJlIGRlbmllZCwgd2hlcmUgYSBtZWFzdXJlIGlzIGFkb3B0ZWQgb24gYSBsZWdhbCBiYXNpcyBvdXRzaWRlIFRpdGxlIFYsIGJlY2F1c2UgdGhhdCBpcyB3aGVyZSBpdHMgY2VudHJlIG9mIGdyYXZpdHkgaXMganVkZ2VkIGJ5IHRoZSBDb21taXNzaW9uIGFuZCB0aGUgQ291bmNpbCBtYWpvcml0eSB0byBsaWUsIGFsdGhvdWdoIHRoZSBtZWFzdXJlIG1heSBhbHNvIGNvbnRhaW4gZWxlbWVudHMgYXBwZXJ0YWluaW5nIHRvIFRpdGxlIFYuIFRoZSBzb2x1dGlvbiBoZXJlIHByb3Bvc2VkIGlzIHRoZSBhY2NlcHRhbmNlIGJ5IE1lbWJlciBTdGF0ZXMsIHdoZW4gYWN0aW5nIGluIHRoZWlyIGNhcGFjaXR5IGFzIG1lbWJlcnMgb2YgdGhlIENvdW5jaWwsIG9mIGEgZHV0eSB0byBlbnN1cmUgdGhhdCBQcm90b2NvbHMgMjEgYW5kIDIyIGFwcGx5IHRvIGFueSBwcm9wb3NhbCB0aGF0IGZhbGxzIHdpdGhpbiB0aGUgc2NvcGUgb2YgVGl0bGUsIGlmIG5lY2Vzc2FyeSBzcGxpdHRpbmcgb2ZmIHRoZSBUaXRsZSBWIGVsZW1lbnRzIGZyb20gdGhlIHJlbWFpbmluZyBjb250ZW50Ljxicj4mZW1zcDsmZW1zcDtBcyBpbiB0aGUgY2FzZSBvZiB0aGUgcmVkIGNhcmQgcHJvY2VkdXJlLCB0aGUgYWNjZXB0YW5jZSBvZiB0aGlzIG9ibGlnYXRpb24gZ292ZXJuaW5nIGJlaGF2aW91ciB3aXRoaW4gdGhlIENvdW5jaWwgYXBwZWFycyB0byBtZSB0byBiZSBjb21wYXRpYmxlIHdpdGggdGhlIFRyZWF0aWVzIGFuZCwgdGhlcmVmb3JlLCBsZWdhbGx5IGJpbmRpbmcgYXMgeWV0IGFub3RoZXIgZm9ybSBvZiBDb3VuY2lsIGNvbmR1Y3QgYWdyZWVtZW50Ljxicj4mZW1zcDsmZW1zcDtBZ2FpbiwgSSBjb25zaWRlciBpdCBhcmd1YWJsZSB0aGF0LCBvbmNlIHRoZSBIU0cgRGVjaXNpb24gaXMgaW4gZm9yY2UsIHRoZSByZWZ1c2FsIGJ5IHRoZSBDb3VuY2lsIG1ham9yaXR5IHRvIHNwbGl0IGEgbWVhc3VyZSwgd2hlcmUgdGhlIFRpdGxlIFYgZWxlbWVudHMgYXJlIHNldmVyYWJsZSwgYW5kIHRoaXMgd291bGQgYWxsb3cgdGhlIFVLIGFuZCB0aGUgb3RoZXIgTWVtYmVyIFN0YXRlcyBjb25jZXJuZWQgdG8gZXhlcmNpc2UgdGhlaXIgcmlnaHRzIGluIHJlc3BlY3Qgb2YgdGhvc2UgZWxlbWVudHMsIHdpbGwgcHJvdmlkZSBncm91bmRzIGZvciBhbm51bG1lbnQgdW5kZXIgQXJ0aWNsZSAyNjMgVEZFVS4iLAogICAgICAgICI8c3BhbiBjbGFzcz1cInVkXCI+PHNwYW4gY2xhc3M9XCJiZFwiPig1KSBOYXRpb25hbCBzZWN1cml0eTwvc3Bhbj48L3NwYW4+PGJyPiZlbXNwOyZlbXNwO1BvaW50IDUgb2YgU2VjdGlvbiBDIGNvbmZpcm1zIHRoYXQgTWVtYmVyIFN0YXRlc1x1MjAxOSBzb2xlIHJlc3BvbnNpYmlsaXR5IGZvciBuYXRpb25hbCBzZWN1cml0eSBkb2VzIG5vdCBjb25zdGl0dXRlIGEgZGVyb2dhdGlvbiBmcm9tIEVVIGxhdyBhbmQgc2hvdWxkIHRoZXJlZm9yZSBub3QgYmUgaW50ZXJwcmV0ZWQgcmVzdHJpY3RpdmVseS4gSXQgZnVydGhlciBzdGF0ZXMgdGhhdCB0aGUgVW5pb24gaW5zdGl0dXRpb25zIHdpbGwgZnVsbHkgcmVzcGVjdCB0aGUgbmF0aW9uYWwgc2VjdXJpdHkgcmVzcG9uc2liaWxpdGllcyBvZiBNZW1iZXIgU3RhdGVzLCB3aGlsZSByZWNvZ25pc2luZyB0aGUgYmVuZWZpdHMgb2YgY29sbGVjdGl2ZSBhY3Rpb24gb24gaXNzdWVzIHRoYXQgYWZmZWN0IHRoZSBzZWN1cml0eSBvZiBhbGwgTWVtYmVyIFN0YXRlcy4gVGhlIHJlZmVyZW5jZSB0byBcdTIwMWNVbmlvbiBpbnN0aXR1dGlvbnNcdTIwMWQgbXVzdCBiZSB1bmRlcnN0b29kIHRvIGluY2x1ZGUgdGhlIENKRVUuPGJyPiZlbXNwOyZlbXNwO1RoaXMgcmVwcmVzZW50cyBhIGJpbmRpbmcgaW50ZXJwcmV0YXRpb24gb2YgQXJ0aWNsZSA0ICgyKSBURkVVLCBmdWxseSBjb25zaXN0ZW50IHdpdGggaXRzIGxldHRlciBhbmQgc3Bpcml0LiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+RC4gU29jaWFsIGJlbmVmaXRzIGFuZCBmcmVlIG1vdmVtZW50PC9zcGFuPjwvc3Bhbj48YnI+JmVtc3A7JmVtc3A7U2VjdGlvbiBEIG9mIHRoZSBIU0cgRGVjaXNpb24gaXMgY29tcGxlbWVudGVkIGJ5IHR3byBDb21taXNzaW9uIERlY2xhcmF0aW9ucywgb25lIG9uIGlzc3VlcyByZWxhdGVkIHRvIHRoZSBhYnVzZSBvZiB0aGUgcmlnaHQgb2YgZnJlZSBtb3ZlbWVudCBvZiBwZXJzb25zIGFuZCBvbmUgb24gdGhlIHNhZmVndWFyZCBtZWNoYW5pc20gcmVmZXJyZWQgdG8gaW4gcGFyYWdyYXBoIDIgKGIpIG9mIHRoZSBEZWNpc2lvbi48YnI+JmVtc3A7JmVtc3A7VGhlIGlzc3VlcyByYWlzZWQgaW4gdGhlIFx1MjAxY0ltbWlncmF0aW9uXHUyMDFkIGJhc2tldCBvZiB0aGUgMTAgTm92ZW1iZXIgbGV0dGVyIGFyZSB0byBiZSBhZGRyZXNzZWQsIGJyb2FkbHksIGluIHR3byB3YXlzOiB0aHJvdWdoIHRoZSBpbnRlcnByZXRhdGlvbiBvZiwgYW5kIGJ5IGNvbXBsZW1lbnRpbmcsIGV4aXN0aW5nIEVVIHJ1bGVzOiBhbmQgdGhyb3VnaCB0aGUgaW50cm9kdWN0aW9uIG9mIHR3byBzaWduaWZpY2FudCBydWxlIGNoYW5nZXMuIE5vIGFtZW5kbWVudCBvZiB0aGUgVW5pb25cdTIwMTlzIHByaW1hcnkgbGF3IGlzIGNvbnNpZGVyZWQgbmVjZXNzYXJ5LiBUaGVyZSBpcyBzaW1wbHkgYSBicmllZiByZWZlcmVuY2UgdG8gdGhlIGZhY3QgdGhhdCwgd2l0aCByZWdhcmQgdG8gZnV0dXJlIGVubGFyZ2VtZW50cyBvZiB0aGUgVW5pb24sIGFwcHJvcHJpYXRlIHRyYW5zaXRpb25hbCBtZWFzdXJlcyBvbiB0aGUgZnJlZSBtb3ZlbWVudCBvZiBwZXJzb25zIHdpbGwgYmUgcHJvdmlkZWQgZm9yIGluIHRoZSByZWxldmFudCBBY3Qgb2YgQWNjZXNzaW9uLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+KDEpIEludGVycHJldGF0aW9uIG9mIGN1cnJlbnQgRVUgcnVsZXM8L3NwYW4+PC9zcGFuPjxicj4mZW1zcDsmZW1zcDtBbiBpbnRlcnByZXRhdGlvbiBpcyBvZmZlcmVkIG9mIHRoZSBwb3NzaWJpbGl0aWVzIHRoYXQgZXhpc3QgdW5kZXIgY3VycmVudCBFVSBydWxlcyBmb3IgbGltaXRpbmcgYWNjZXNzIGJ5IG1pZ3JhbnQgd29ya2VycyB0byBzb2NpYWwgYmVuZWZpdHMuIEl0IGlzIHJlY2FsbGVkIHRoYXQ6PGJyPiZlbXNwOyZlbXNwOyhhKSBXb3JrZXJzXHUyMDE5IGZyZWUgbW92ZW1lbnQgcmlnaHRzIHVuZGVyIEFydGljbGUgNDUgVEZFVSBtYXkgYmUgc3ViamVjdCB0byBsaW1pdGF0aW9ucyBvbiBncm91bmRzIG9mIHB1YmxpYyBwb2xpY3ksIHB1YmxpYyBzZWN1cml0eSBhbmQgcHVibGljIGhlYWx0aDsgYW5kIHRoZXkgbWF5LCBpbiBhZGRpdGlvbiwgYmUgcmVzdHJpY3RlZCBieSBtZWFzdXJlcyBuZWNlc3NpdGF0ZWQgYnkgb3ZlcnJpZGluZyByZWFzb25zIG9mIHB1YmxpYyBpbnRlcmVzdC4gSXQgbWF5IGFsc28gYmUgcG9zc2libGUgdG8ganVzdGlmeSB0aGUgaW1wb3NpdGlvbiBvZiBjb25kaXRpb25zIHRoYXQgYXJlIG5vbi1kaXNjcmltaW5hdG9yeSBhbmQgcHJvcG9ydGlvbmFsLCBcdTIwMWN0byBlbnN1cmUgdGhhdCB0aGVyZSBpcyBhIHJlYWwgYW5kIGVmZmVjdGl2ZSBkZWdyZWUgb2YgY29ubmVjdGlvbiBiZXR3ZWVuIHRoZSBwZXJzb24gY29uY2VybmVkIGFuZCB0aGUgbGFib3VyIG1hcmtldCBvZiB0aGUgaG9zdCBNZW1iZXIgU3RhdGVcdTIwMWQuPGJyPiZlbXNwOyZlbXNwOyhiKSBUaGUgZnJlZSBtb3ZlbWVudCByaWdodHMgb2YgRVUgY2l0aXplbnMgYXJlIGV4cHJlc3NlZCBieSBBcnRpY2xlIDIxIFRGRVUgdG8gYmUgXHUyMDFjc3ViamVjdCB0byB0aGUgbGltaXRhdGlvbnMgYW5kIGNvbmRpdGlvbnMgbGFpZCBkb3duIGluIHRoZSBUcmVhdGllcyBhbmQgYnkgdGhlIG1lYXN1cmVzIGFkb3B0ZWQgdG8gZ2l2ZSB0aGVtIGVmZmVjdFx1MjAxZC4iLAogICAgICAgICImZW1zcDsmZW1zcDtJbiBwYXJ0aWN1bGFyLCBFVSBsYXcgbWFrZXMgdGhlIHJpZ2h0IG9mIHJlc2lkZW5jZSBvZiBwZXJzb25zIHdobyBhcmUgbm90IGVjb25vbWljYWxseSBhY3RpdmUgaW4gYSBob3N0IE1lbWJlciBTdGF0ZSBjb25kaXRpb25hbCBvbiB0aGVpciBoYXZpbmcgc3VmZmljaWVudCByZXNvdXJjZXMgdG8gYXZvaWQgYmVjb21pbmcgYSBidXJkZW4gb24gaXRzIHNvY2lhbCBhc3Npc3RhbmNlIHN5c3RlbS4gVGhlIGVtcGhhc2lzIG9uIE1lbWJlciBTdGF0ZXNcdTIwMTkgcmlnaHQgdG8gcmVmdXNlIHNvY2lhbCBiZW5lZml0cyB0byBwZXJzb25zIHdobyBkbyBub3QgZnVsZmlsIHRoYXQgY29uZGl0aW9uLCBpbmNsdWRpbmcgam9iLXNlZWtlcnMsIGZpbmRzIHN1cHBvcnQgaW4gcmVjZW50IGNhc2UgbGF3IG9mIHRoZSBDSkVVLiBBbiBpbXBvcnRhbnQgY2xhcmlmaWNhdGlvbiBpcyB0aGF0IGJlbmVmaXRzIHdob3NlIHByZWRvbWluYW50IGZ1bmN0aW9uIGlzIHRvIGNvdmVyIG1pbmltdW0gc3Vic2lzdGVuY2UgY29zdHMgbWF5IGJlIHJlZnVzZWQgdG8gc3VjaCBwZXJzb25zLCBldmVuIHdoZXJlIHRoZSBiZW5lZml0cyBhcmUgaW50ZW5kZWQgYWxzbyB0byBmYWNpbGl0YXRlIGFjY2VzcyB0byB0aGUgbGFib3VyIG1hcmtldCBvZiB0aGUgaG9zdCBNZW1iZXIgU3RhdGUuPGJyPiZlbXNwOyZlbXNwOyhjKSBNZW1iZXIgU3RhdGVzIGFyZSBhYmxlIHRvIHRha2UgYWN0aW9uIHRvIHByZXZlbnQgdGhlIGFidXNlIG9mIEVVIHJpZ2h0cywgc3VjaCBhcyB3aGVyZSBjbGFpbXMgYXJlIGJhc2VkIG9uIG1hcnJpYWdlcyBvZiBjb252ZW5pZW5jZS4gVGhleSBtYXkgYWxzbyBhZG9wdCB0aGUgbmVjZXNzYXJ5IHJlc3RyaWN0aXZlIG1lYXN1cmVzIHRvIHByb3RlY3QgdGhlbXNlbHZlcyBhZ2FpbnN0IGluZGl2aWR1YWxzIHdob3NlIHBlcnNvbmFsIGNvbmR1Y3QgaXMgbGlhYmxlIHRvIHJlcHJlc2VudCBhIGdlbnVpbmUgYW5kIHNlcmlvdXMgdGhyZWF0IHRvIHB1YmxpYyBwb2xpY3kgb3Igc2VjdXJpdHkuIFN1Y2ggYSB0aHJlYXQgbmVlZCBub3QgYmUgaW1taW5lbnQgYW5kIHRoZSBpbmRpdmlkdWFsXHUyMDE5cyBwYXN0IGNvbmR1Y3QgbWF5IGJlIHRha2VuIGludG8gYWNjb3VudC48YnI+JmVtc3A7JmVtc3A7VGhlIGludGVycHJldGF0aW9ucyBvZmZlcmVkIGJ5IHRoZSBIU0cgRGVjaXNpb24gYXJlIHJlaW5mb3JjZWQgYnkgdGhlIENvbW1pc3Npb25cdTIwMTlzIERlY2xhcmF0aW9uIG9uIGlzc3VlcyByZWxhdGVkIHRvIHRoZSBhYnVzZSBvZiBmcmVlIG1vdmVtZW50IHJpZ2h0cy4gVGhlIENvbW1pc3Npb24gYW5ub3VuY2VzIGl0cyBpbnRlbnRpb24gdG8gYWRvcHQgYSBwcm9wb3NhbCB0aGF0IHdvdWxkIGNvbXBsZW1lbnQgRGlyZWN0aXZlIDIwMDQvMzgvRUMgYnkgZXhjbHVkaW5nLCBmcm9tIHRoZSBzY29wZSBvZiBmcmVlIG1vdmVtZW50IHJpZ2h0cywgdGhpcmQgY291bnRyeSBuYXRpb25hbHMgd2hvIGhhZCBubyBwcmlvciBsYXdmdWwgcmVzaWRlbmNlIGluIGEgTWVtYmVyIFN0YXRlIGJlZm9yZSBtYXJyeWluZyBhbiBFVSBjaXRpemVuIG9yIHdobyBtYXJyeSBhbiBFVSBjaXRpemVuIG9ubHkgYWZ0ZXIgdGhlIGxhdHRlciBoYXMgZXN0YWJsaXNoZWQgcmVzaWRlbmNlIGluIHRoZSBob3N0IE1lbWJlciBTdGF0ZS4gVGhpcyB3b3VsZCBlZmZlY3RpdmVseSByZXZlcnNlIGNhc2UgbGF3IGJhc2VkIG9uIHRoZSBwcmVzZW50IHdvcmRpbmcgb2YgdGhlIERpcmVjdGl2ZS44PGJyPiZlbXNwOyZlbXNwO1RoZSBDb21taXNzaW9uIHdpbGwgYWxzbyB0YWtlIHN0ZXBzIHRvIGNsYXJpZnk6IHRoYXQgTWVtYmVyIFN0YXRlcyBtYXkgYWRkcmVzcyBhYnVzZXMgb2YgZnJlZSBtb3ZlbWVudCByaWdodHMgYnkgRVUgY2l0aXplbnMgcmV0dXJuaW5nIHRvIHRoZWlyIE1lbWJlciBTdGF0ZSBvZiBuYXRpb25hbGl0eSBhY2NvbXBhbmllZCBieSBhIG5vbi1FVSBmYW1pbHkgbWVtYmVyLCBcdTIwMWN3aGVyZSByZXNpZGVuY2UgaW4gdGhlIGhvc3QgTWVtYmVyIFN0YXRlIGhhcyBub3QgYmVlbiBzdWZmaWNpZW50bHkgZ2VudWluZSB0byBjcmVhdGUgb3Igc3RyZW5ndGhlbiBmYW1pbHkgbGlmZSBhbmQgaGFkIHRoZSBwdXJwb3NlIG9mIGV2YWRpbmcgdGhlIGFwcGxpY2F0aW9uIG9mIG5hdGlvbmFsIGltbWlncmF0aW9uIHJ1bGVzXHUyMDFkOyBhbmQgdGhhdCB0aGUgY29uY2VwdCBvZiBtYXJyaWFnZSBvZiBjb252ZW5pZW5jZSBjb3ZlcnMgYSBtYXJyaWFnZSB3aGljaCBpcyBtYWludGFpbmVkIGZvciB0aGUgcHVycG9zZSBvZiBlbmFibGluZyBhIG5vbi1FVSBuYXRpb25hbCB0byBlbmpveSBhIHJpZ2h0IG9mIHJlc2lkZW5jZS48YnI+JmVtc3A7JmVtc3A7TW9yZW92ZXIsIGNsYXJpZmljYXRpb24gd2lsbCBiZSBwcm92aWRlZCBvbiB0aGUgY2lyY3Vtc3RhbmNlcyBpbiB3aGljaCBmcmVlIG1vdmVtZW50IHJpZ2h0cyBtYXkgYmUgcmVzdHJpY3RlZCBvbiBncm91bmRzIG9mIHB1YmxpYyBwb2xpY3kgb3IgcHVibGljIHNlY3VyaXR5LiBUaG9zZSBjbGFyaWZpY2F0aW9ucyBhcmUgdG8gYmUgZGV2ZWxvcGVkIGluIGEgZnV0dXJlIENvbW1pc3Npb24gQ29tbXVuaWNhdGlvbi4gSW4gbXkgb3BpbmlvbiwgdGhlIGludGVycHJldGF0aW9ucyBpbiBTZWN0aW9uIEQgb2YgdGhlIEhTRyBEZWNpc2lvbiwgcmVpbmZvcmNlZCBieSB0aGUgQ29tbWlzc2lvblx1MjAxOXMgaW50ZW5kZWQgXHUyMDFjY29tcGxlbWVudFx1MjAxZCB0byBEaXJlY3RpdmUgMjAwNC8zOC9FQyBhbmQgaXRzIHByb21pc2VkIGNsYXJpZmljYXRpb25zLCBwcm92aWRlIGEgc291bmQgYmFzaXMgZm9yIHRoZSByb2J1c3QgYXBwbGljYXRpb24gYnkgYWRtaW5pc3RyYXRpdmUgYXV0aG9yaXRpZXMgYW5kIGNvdXJ0cyBpbiB0aGUgVUsgb2YgdGhlIHZhcmlvdXMgbGltaXRhdGlvbnMgb24gcmlnaHRzIG9mIGZyZWUgbW92ZW1lbnQgdGhhdCBhcmUgcmVjb2duaXNlZCBieSBFVSBsYXcuIEkgZG8gbm90IGFudGljaXBhdGUgdGhhdCBkZWNpc2lvbnMgdGFrZW4gaW4gdGhlIGxpZ2h0IG9mIHRob3NlIHRleHRzIHdvdWxkIGJlIGxpa2VseSB0byBlbmNvdW50ZXIgdGhlIGRpc2FwcHJvdmFsIG9mIHRoZSBDSkVVLiIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+KDIpIENoYW5nZXMgdG8gRVUgc2Vjb25kYXJ5IGxlZ2lzbGF0aW9uPC9zcGFuPjwvc3Bhbj48YnI+JmVtc3A7JmVtc3A7KGEpIFRoZSBDb21taXNzaW9uIHdpbGwgcHJvcG9zZSBhbiBhbWVuZG1lbnQgdG8gUmVndWxhdGlvbiA4ODMvMjAwNC9FQyBvbiB0aGUgY29vcmRpbmF0aW9uIG9mIHNvY2lhbCBzZWN1cml0eSBzeXN0ZW1zIGdpdmluZyBNZW1iZXIgU3RhdGVzIGFuIG9wdGlvbiwgd2hlcmUgY2hpbGQgYmVuZWZpdHMgYXJlIGV4cG9ydGVkIHRvIGEgTWVtYmVyIFN0YXRlIG90aGVyIHRoYW4gdGhlIG9uZSBpbiB3aGljaCB0aGUgd29ya2VyIHJlc2lkZXMsIHRvIGluZGV4IHRoZSBiZW5lZml0cyB0byB0aGUgc3RhbmRhcmQgb2YgbGl2aW5nIGluIHRoYXQgTWVtYmVyIFN0YXRlLiBUaGlzIHdpbGwgaW5pdGlhbGx5IGFwcGx5IG9ubHkgdG8gbmV3IGNsYWltcyBidXQsIGZyb20gMjAyMCwgd2lsbCBiZSBleHRlbmRlZCB0byBleGlzdGluZyBvbmVzLjxicj4mZW1zcDsmZW1zcDsoYikgVGhlIENvbW1pc3Npb24gd2lsbCBwcm9wb3NlIHRoZSBhbWVuZG1lbnQgb2YgUmVndWxhdGlvbiA0OTIvMjAxMS9FQyBvbiBmcmVlZG9tIG9mIG1vdmVtZW50IGZvciB3b3JrZXJzIHdpdGhpbiB0aGUgVW5pb24sIHRvIHByb3ZpZGUgZm9yIGEgbmV3IGFsZXJ0IGFuZCBzYWZlZ3VhcmQgbWVjaGFuaXNtIHRvIHJlc3BvbmQgdG8gc2l0dWF0aW9ucyBvZiBpbmZsb3cgb2Ygd29ya2VycyBmcm9tIG90aGVyIE1lbWJlciBTdGF0ZXMgb2YgYW4gZXhjZXB0aW9uYWwgbWFnbml0dWRlIG92ZXIgYW4gZXh0ZW5kZWQgcGVyaW9kLiBUaGUgTWVtYmVyIFN0YXRlIGNvbmNlcm5lZCBtdXN0IHByb3ZpZGUgdGhlIENvbW1pc3Npb24gd2l0aCBldmlkZW5jZSB0aGF0IHN1Y2ggYW4gZXhjZXB0aW9uYWwgc2l0dWF0aW9uIGV4aXN0cy4gT24gYSBwcm9wb3NhbCBmcm9tIHRoZSBDb21taXNzaW9uLCB0aGUgQ291bmNpbCBjb3VsZCBhdXRob3Jpc2UgdGhlIE1lbWJlciBTdGF0ZSB0byBsaW1pdCB0aGUgYWNjZXNzIHRvIGluLXdvcmsgYmVuZWZpdHMgb2YgRVUgd29ya2VycyBuZXdseSBlbnRlcmluZyB0aGUgbGFib3VyIG1hcmtldCBmb3IgdXAgdG8gZm91ciB5ZWFycy4gVGhlIGxpbWl0YXRpb24gc2hvdWxkIGJlIGdyYWR1YXRlZCwgdG8gdGFrZSBhY2NvdW50IG9mIHRoZSB3b3JrZXJcdTIwMTlzIGluY3JlYXNpbmcgY29ubmVjdGlvbiB3aXRoIHRoZSBsYWJvdXIgbWFya2V0IG9mIHRoYXQgTWVtYmVyIFN0YXRlLiBUaGUgYXV0aG9yaXNhdGlvbiB3b3VsZCBoYXZlIGEgZHVyYXRpb24gb2YgNyB5ZWFycy48YnI+JmVtc3A7JmVtc3A7VGhlIENvbW1pc3Npb25cdTIwMTlzIERlY2xhcmF0aW9uIG9uIHRoZSBzYWZlZ3VhcmQgbWVjaGFuaXNtIGV4cHJlc3NlcyBpdHMgdW5kZXJzdGFuZGluZyB0aGF0IHRoZSBtZWNoYW5pc20gXHUyMDFjY2FuIGFuZCB3aWxsIGJlIHVzZWQgYW5kIHRoZXJlZm9yZSB3aWxsIGFjdCBhcyBhIHNvbHV0aW9uIHRvIHRoZSBVbml0ZWQgS2luZ2RvbVx1MjAxOXMgY29uY2VybnMuLi5cdTIwMWQuIFRoZSBDb21taXNzaW9uIGNvbnNpZGVycyB0aGF0IHRoZSBpbmZvcm1hdGlvbiB0aGUgVUsgaGFzIHByb3ZpZGVkIHRvIGl0IHNob3dzIHRoYXQgdGhlIHR5cGUgb2YgZXhjZXB0aW9uYWwgc2l0dWF0aW9uIHRoZSBwcm9wb3NlZCBzYWZlZ3VhcmQgbWVjaGFuaXNtIGlzIGludGVuZGVkIHRvIGNvdmVyIGFscmVhZHkgZXhpc3RzIGluIHRoZSBVSy4gXHUyMDFjQWNjb3JkaW5nbHksIHRoZSBVbml0ZWQgS2luZ2RvbSB3b3VsZCBiZSBqdXN0aWZpZWQgaW4gdHJpZ2dlcmluZyB0aGUgbWVjaGFuaXNtIGluIHRoZSBmdWxsIGV4cGVjdGF0aW9uIG9mIG9idGFpbmluZyBhcHByb3ZhbFx1MjAxZC48YnI+JmVtc3A7JmVtc3A7VGhlIEhTRyBEZWNpc2lvbiBzdGF0ZXMgdGhhdCB0aGUgcmVwcmVzZW50YXRpdmVzIG9mIHRoZSBNZW1iZXIgU3RhdGVzLCBhY3RpbmcgaW4gdGhlaXIgY2FwYWNpdHkgYXMgQ291bmNpbCBtZW1iZXJzLCBcdTIwMWN3aWxsIHByb2NlZWQgd2l0aCB3b3JrIG9uIHRoZXNlIGxlZ2lzbGF0aXZlIHByb3Bvc2FscyBhcyBhIG1hdHRlciBvZiBwcmlvcml0eSBhbmQgZG8gYWxsIHdpdGhpbiB0aGVpciBwb3dlciB0byBlbnN1cmUgdGhlaXIgcmFwaWQgYWRvcHRpb25cdTIwMWQuPGJyPiZlbXNwOyZlbXNwOzxzcGFuIGNsYXNzPVwiYmRcIj5JbiBteSBvcGluaW9uLCBpdCBjYW5ub3Qgc2VyaW91c2x5IGJlIGRvdWJ0ZWQgdGhhdCB0aGUgQ29tbWlzc2lvbiB3aWxsIGZ1bGZpbCBpdHMgdW5kZXJ0YWtpbmcgdG8gYnJpbmcgZm9yd2FyZCB0aGUgdHdvIHByb3Bvc2FscyBuZWNlc3NhcnkgZm9yIHRoZSBhbWVuZG1lbnQgb2YsIHJlc3BlY3RpdmVseSwgUmVndWxhdGlvbiA4ODMvMjAwNC9FQyBhbmQgUmVndWxhdGlvbiA0OTIvMjAxMS9FQzsgbm9yLCBhc3N1bWluZyBhZ3JlZW1lbnQgb24gdGhlIERyYWZ0IEhTRyBEZWNpc2lvbiwgdGhhdCB0aGUgQ291bmNpbCB3aWxsIGZhaWwgdG8gZGVhbCB3aXRoIHRoZSBwcm9wb3NhbHMgZXhwZWRpdGlvdXNseS4gVGhlIEV1cm9wZWFuIFBhcmxpYW1lbnQgd2lsbCwgb2YgY291cnNlLCBoYXZlIGEgcGFydCB0byBwbGF5LCB1bmRlciB0aGUgb3JkaW5hcnkgbGVnaXNsYXRpdmUgcHJvY2VkdXJlLCBpbiB0aGUgYWRvcHRpb24gb2YgdGhlIHByb3Bvc2Fscy4gSG93ZXZlciwgSSBkbyBub3QgY29uc2lkZXIgaXQgcGxhdXNpYmxlLCBpbiBhIHNpdHVhdGlvbiB3aGVyZSB0aGUgVUsgaGFzIHZvdGVkIHRvIHJlbWFpbiB3aXRoaW4gdGhlIEVVIGFuZCB0aGUgSFNHIERlY2lzaW9uIGhhcyBlbnRlcmVkIGludG8gZm9yY2UsIHRoYXQgdGhlIFBhcmxpYW1lbnQgd291bGQgc2VlIGFueSBwb2xpdGljYWwgYWR2YW50YWdlIGluIHB1dHRpbmcgdGhlIG5ldyBzZXR0bGVtZW50IHdpdGggdGhlIFVLIGluIGplb3BhcmR5LiBOb3IsIGZpbmFsbHksIGRvIEkgYmVsaWV2ZSB0aGF0IHRoZSBhbWVuZG1lbnRzIHdvdWxkIHJ1biBhIHNlcmlvdXMgcmlzayBvZiBiZWluZyBzdHJ1Y2sgZG93biBieSB0aGUgQ0pFVS48L3NwYW4+LyIsCiAgICAgICAgIjxzcGFuIGNsYXNzPVwidWRcIj48c3BhbiBjbGFzcz1cImJkXCI+U3VtbWFyeSBvZiBjb25jbHVzaW9uczwvc3Bhbj48L3NwYW4+PGJyPiZlbXNwOyZlbXNwOyhpKSBPbmNlIGl0IGVudGVycyBpbnRvIGZvcmNlLCB0aGUgSFNHIERlY2lzaW9uIHdpbGwgaGF2ZSB0aGUgbGVnYWwgY2hhcmFjdGVyIGFuZCBlZmZlY3Qgb2YgYSBiaW5kaW5nIGludGVybmF0aW9uYWwgYWdyZWVtZW50LCBvbiBhbGwgZm91cnMgd2l0aCB0aGUgRGVjaXNpb24gb24gRGVubWFyayBvZiAxOTkyIGFuZCB0aGUgRGVjaXNpb24gb24gSXJlbGFuZCBvZiAyMDA5Ljxicj4mZW1zcDsmZW1zcDsoaWkpIEFzIHRvIGVjb25vbWljIGdvdmVybmFuY2UsIGZyb20gdGhlIGVudHJ5IGludG8gZm9yY2Ugb2YgdGhlIEhTRyBEZWNpc2lvbiwgdGhlcmUgd2lsbCBiZSBhIGxlZ2FsbHkgYmluZGluZyBvYmxpZ2F0aW9uOjxicj4mZW1zcDsmZW1zcDsmZW1zcDsmZW1zcDsmYnVsbDsgdGhhdCB0aGUgcHJpbmNpcGxlcyBsYWlkIGRvd24gaW4gU2VjdGlvbiBBIG9mIHRoZSBEZWNpc2lvbiBiZSB0YWtlbiBpbnRvIGNvbnNpZGVyYXRpb24gZm9yIHRoZSBpbnRlcnByZXRhdGlvbiBvZiB0aGUgRVUgVHJlYXRpZXMgKGFuZCBjb25zZXF1ZW50bHkgb2YgYW55IG1lYXN1cmVzIGJhc2VkIG9uIHRoZW0pOyB3aGVuIGV2ZW50dWFsbHkgaW5jb3Jwb3JhdGVkIGludG8gdGhlIFRyZWF0aWVzIG9yIGFubmV4ZWQgdG8gdGhlbSBhcyBhIFByb3RvY29sLCB0aGUgcHJpbmNpcGxlcyB3aWxsIGFjcXVpcmUgdGhlIHN0YXR1cyBvZiBwcmltYXJ5IEVVIGxhdzsgYW5kPGJyPiZlbXNwOyZlbXNwOyZlbXNwOyZlbXNwOyZidWxsOyB0aGF0IHRoZSBzYWZlZ3VhcmQgbWVjaGFuaXNtIHJlZmVycmVkIHRvIGluIFNlY3Rpb24gQSBiZSBlc3RhYmxpc2hlZCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIEhTRyBTdGF0ZW1lbnQgYW5uZXhlZCB0byB0aGUgSFNHIERlY2lzaW9uLCB0aHJvdWdoIHRoZSBpbW1lZGlhdGUgYWRvcHRpb24gb2YgdGhlIERyYWZ0IENvdW5jaWwgRGVjaXNpb24gYW5uZXhlZCB0byB0aGF0IFN0YXRlbWVudCwgd2hpY2ggd2lsbCBzdXBwbGVtZW50IERlY2lzaW9uIDIwMDkvODU3OyBmb2xsb3dpbmcgdGhlIGFkb3B0aW9uIG9mIHRoZSBEZWNpc2lvbiwgdGhlIHNhZmVndWFyZCBtZWNoYW5pc20gd2lsbCBvcGVyYXRlIG9uIHRoZSBiYXNpcyBvZiBFVSBsYXcgYW5kIHVuZGVyIHRoZSBwcm90ZWN0aW9uIG9mIFByb3RvY29sIDkuPGJyPiZlbXNwOyZlbXNwOyhpaWkpIEFzIHRvIGNvbXBldGl0aXZlbmVzcywgdGhlIGNvbWJpbmF0aW9uIG9mIGEgYmluZGluZyBsZWdhbCBjb21taXRtZW50IGJ5IHRoZSBNZW1iZXIgU3RhdGVzIGFuZCBjbGVhciBleHByZXNzaW9ucyBvZiBpbnRlbnRpb24gYnkgdGhlIEV1cm9wZWFuIENvdW5jaWwgYW5kIHRoZSBDb21taXNzaW9uIHNob3VsZCBiZSBzdWZmaWNpZW50IHRvIGVuc3VyZSB0aGF0IHRoZSBtb21lbnR1bSBzb3VnaHQgdG8gYmUgZ2l2ZW4gdG8gZGV2ZWxvcG1lbnRzIGluIHRoZSByZWxldmFudCBwb2xpY3kgYXJlYXMgd2lsbCBiZSBzdXN0YWluZWQuPGJyPiZlbXNwOyZlbXNwOyhpaWkpIEFzIHRvIHNvdmVyZWlnbnR5LCBmcm9tIHRoZSBlbnRyeSBpbnRvIGZvcmNlIG9mIHRoZSBIU0cgRGVjaXNpb246PGJyPiZlbXNwOyZlbXNwOyZlbXNwOyZlbXNwOyZidWxsOyB0aGUgaW50ZXJwcmV0YXRpb24gb2YgXHUyMDFjZXZlciBjbG9zZXIgdW5pb25cdTIwMWQgaW4gU2VjdGlvbiBDICgxKSBvZiB0aGUgSFNHIERlY2lzaW9uLCB3aWxsIGJlY29tZSBsZWdhbGx5IGJpbmRpbmc7IHdoZW4gZXZlbnR1YWxseSBpbmNvcnBvcmF0ZWQgaW50byB0aGUgVHJlYXRpZXMsIGl0IHdpbGwgYWNxdWlyZSB0aGUgZm9yY2Ugb2YgcHJpbWFyeSBFVSBsYXdcdTIwMTk7PGJyPiZlbXNwOyZlbXNwOyZlbXNwOyZlbXNwOyZidWxsOyB0aGUgcmVxdWlyZW1lbnQgdGhhdCByZWFzb25lZCBvcGluaW9ucyBvZiBuYXRpb25hbCBwYXJsaWFtZW50cyBiZSBkdWx5IHRha2VuIGludG8gYWNjb3VudCB3aWxsIGJlY29tZSBsZWdhbGx5IGJpbmRpbmcgYXMgYSBDb3VuY2lsIGNvbmR1Y3QgYWdyZWVtZW50Ozxicj4mZW1zcDsmZW1zcDsmZW1zcDsmZW1zcDsmYnVsbDsgdGhlIFx1MjAxY3JlZCBjYXJkIHByb2NlZHVyZVx1MjAxZCB3aWxsIGJlY29tZSBsZWdhbGx5IGJpbmRpbmcgYXMgYSBDb3VuY2lsIGNvbmR1Y3QgYWdyZWVtZW50Ozxicj4mZW1zcDsmZW1zcDsmZW1zcDsmZW1zcDsmYnVsbDsgdGhlIGR1dHkgdG8gZW5zdXJlIHRoYXQgUHJvdG9jb2xzIDIxIGFuZCAyMiBhcHBseSB0byBhbnkgcHJvcG9zYWwgdGhhdCBmYWxscyB3aXRoaW4gdGhlIHNjb3BlIG9mIFRpdGxlLCBpZiBuZWNlc3Nhcnkgc3BsaXR0aW5nIG9mZiB0aGUgVGl0bGUgViBlbGVtZW50cyBmcm9tIHRoZSByZW1haW5pbmcgY29udGVudCwgd2lsbCBiZWNvbWUgbGVnYWxseSBiaW5kaW5nIGFzIGEgQ291bmNpbCBjb25kdWN0IGFncmVlbWVudC48YnI+JmVtc3A7JmVtc3A7JmVtc3A7JmVtc3A7JmJ1bGw7IHRoZSBpbnRlcnByZXRhdGlvbnMgaW4gU2VjdGlvbiBEIG9mIHRoZSBEcmFmdCBIU0cgRGVjaXNpb24sIHJlaW5mb3JjZWQgYnkgdGhlIENvbW1pc3Npb25cdTIwMTlzIGludGVuZGVkIFx1MjAxY2NvbXBsZW1lbnRcdTIwMWQgdG8gRGlyZWN0aXZlIDIwMDQvMzgvRUMgYW5kIGl0cyBwcm9taXNlZCBjbGFyaWZpY2F0aW9ucywgcHJvdmlkZSBhIHNvdW5kIGJhc2lzIGZvciB0aGUgcm9idXN0IGFwcGxpY2F0aW9uIG9mIHRoZSB2YXJpb3VzIGxpbWl0YXRpb25zIG9uIHJpZ2h0cyBvZiBmcmVlIG1vdmVtZW50IHRoYXQgYXJlIHJlY29nbmlzZWQgYnkgRVUgbGF3IGFuZCBhcmUgdW5saWtlbHkgdG8gZW5jb3VudGVyIHRoZSBkaXNhcHByb3ZhbCBvZiB0aGUgQ0pFVTs8YnI+JmVtc3A7JmVtc3A7JmVtc3A7JmVtc3A7JmJ1bGw7IGl0IGNhbm5vdCBzZXJpb3VzbHkgYmUgZG91YnRlZCB0aGF0IHRoZSBDb21taXNzaW9uIHdpbGwgZnVsZmlsIGl0cyB1bmRlcnRha2luZyB0byBicmluZyBmb3J3YXJkIHRoZSB0d28gcHJvcG9zYWxzIG5lY2Vzc2FyeSBmb3IgdGhlIGFtZW5kbWVudCBvZiwgcmVzcGVjdGl2ZWx5LCBSZWd1bGF0aW9uIDg4My8yMDA0L0VDLCBhcyB0byB0aGUgaW5kZXhpbmcgb2YgY2hpbGQgYmVuZWZpdHMsIGFuZCBSZWd1bGF0aW9uIDQ5Mi8yMDExL0VDLCBhcyB0byB0aGUgZXN0YWJsaXNobWVudCBvZiBhIHNhZmVndWFyZCBtZWNoYW5pc20gYXBwbGljYWJsZSB0byBpbi0gd29yayBiZW5lZml0czsgbm9yIHRoYXQgdGhlIENvdW5jaWwgd2lsbCBmYWlsIHRvIGRlYWwgd2l0aCB0aGUgcHJvcG9zYWxzIGV4cGVkaXRpb3VzbHk7IG5vciBpcyBpdCBwbGF1c2libGUgdGhhdCB0aGUgUGFybGlhbWVudCB3b3VsZCBzZWUgYW55IHBvbGl0aWNhbCBhZHZhbnRhZ2UgaW4gcHV0dGluZyB0aGUgbmV3IHNldHRsZW1lbnQgd2l0aCB0aGUgVUsgaW4gamVvcGFyZHk7IG5vciwgZmluYWxseSwgd291bGQgdGhlIGFtZW5kbWVudHMgcnVuIGEgc2VyaW91cyByaXNrIG9mIGJlaW5nIHN0cnVjayBkb3duIGJ5IHRoZSBDSkVVLiIsCiAgICAgICAgIjxicj48c3BhbiBjbGFzcz1cIml0XCI+U2lyIEFsYW4gRGFzaHdvb2QgUUM8L3NwYW4+LCAyMHRoIEZlYnJ1YXJ5IDIwMTYiCiAgICBdLAogICAgIkNBVEVHT1JJRVMiOiBbCiAgICAgICAgIlBvbGl0aWNzIiwKICAgICAgICAiQnJleGl0IiwKICAgICAgICAiQXJ0aWNsZXMiCiAgICBdLAogICAgIkZMQUdTIjogWwogICAgICAgICJJbXBvcnRhbnQiLAogICAgICAgICJEYXNod29vZCIsCiAgICAgICAgIjIwMTUvMjAxNiEiCiAgICBdLAogICAgIkNBVEVHT1JZIjogIlBvbGl0aWNzICZtZGFzaDsgQnJleGl0ICZtZGFzaDsgQXJ0aWNsZXMiLAogICAgIk5VTUJFUiI6ICIxNjYiCn1dOw=="; 

cardsLen = 167;

